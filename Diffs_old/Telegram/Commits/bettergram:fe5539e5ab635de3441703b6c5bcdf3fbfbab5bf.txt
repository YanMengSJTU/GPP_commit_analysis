diff --git a/TMessagesProj/src/main/java/io/bettergram/adapters/BetterDialogsAdapter.java b/TMessagesProj/src/main/java/io/bettergram/adapters/BetterDialogsAdapter.java
index 27c321e59..bd43a52c8 100644
--- a/TMessagesProj/src/main/java/io/bettergram/adapters/BetterDialogsAdapter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/adapters/BetterDialogsAdapter.java
@@ -2,13 +2,14 @@
 
 import android.content.Context;
 
+import java.util.List;
+
+import io.bettergram.telegram.messenger.AndroidUtilities;
 import io.bettergram.telegram.messenger.MessagesController;
 import io.bettergram.telegram.messenger.UserConfig;
+import io.bettergram.telegram.tgnet.TLObject;
 import io.bettergram.telegram.tgnet.TLRPC;
 import io.bettergram.telegram.ui.Adapters.DialogsAdapter;
-
-import java.util.List;
-
 import io.bettergram.tools.DialogsObject;
 import ru.johnlife.lifetools.optional.Mapper;
 import ru.johnlife.lifetools.tools.ListUtil;
@@ -27,6 +28,10 @@ public BetterDialogsAdapter(Context context, int type, boolean onlySelect) {
         super(context, type, onlySelect);
     }
 
+    public TLObject getItem(int i) {
+        return super.getItem(i, getActualDialogsArray());
+    }
+
     public void setDialogsType(int type) {
         cache = null;
         super.setDialogsType(type);
@@ -45,4 +50,19 @@ public void setDialogsType(int type) {
         }
         return cache;
     }
+
+    private List<TLRPC.TL_dialog> getActualDialogsArray() {
+        int dialogsType = getDialogsType();
+        if (dialogsType < 100) {
+            return super.getDialogsArray();
+        } else {
+            return ListUtil.filter(MessagesController.getInstance(currentAccount).dialogs, filterMapper.get(dialogsType).get());
+        }
+    }
+
+    public void onItemMove(int fromPosition, int toPosition) {
+        final TLRPC.TL_dialog correct_item = getActualDialogsArray().remove(fromPosition);
+        getActualDialogsArray().add(toPosition, correct_item);
+        notifyItemMoved(fromPosition, toPosition);
+    }
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
index 8d216e975..ad4ec799f 100644
--- a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
@@ -11,6 +11,7 @@
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.graphics.Typeface;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.v4.content.ContextCompat;
@@ -165,6 +166,7 @@ public void setCrypto(String crypto) {
             imageCrypto = itemView.findViewWithTag("imageCrypto");
             textCryptoName = itemView.findViewWithTag("textCryptoName");
             textCryptoPrice = itemView.findViewWithTag("textCryptoPrice");
+            textCryptoPrice.setOnClickListener(this);
             textDayDelta = itemView.findViewWithTag("textDayDelta");
 
             cryptoPhoto = new ImageReceiver(imageCrypto);
@@ -195,10 +197,19 @@ public void setCrypto(String crypto) {
 
         @Override
         public void onClick(View v) {
-            if (!star.isChecked()) {
-                star.setChecked(true, true);
-            } else {
-                star.setChecked(false, true);
+            final Object tag = v.getTag();
+            if (tag != null) {
+                if ("starLayout".equals(tag)) {
+                    if (!star.isChecked()) {
+                        star.setChecked(true, true);
+                    } else {
+                        star.setChecked(false, true);
+                    }
+                } else if ("textCryptoPrice".equals(tag)) {
+                    Intent browserIntent = new Intent(Intent.ACTION_VIEW);
+                    browserIntent.setData(Uri.parse("https://www.livecoinwatch.com/"));
+                    v.getContext().startActivity(browserIntent);
+                }
             }
         }
 
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
index ac79f268b..5f8daf48a 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
@@ -19,6 +19,7 @@
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.LongSparseArray;
+import android.util.Pair;
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
 import android.util.SparseIntArray;
@@ -28,7 +29,6 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
-import java.util.ListIterator;
 import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
@@ -4293,11 +4293,11 @@ public void processLoadedDialogs(final TLRPC.messages_Dialogs dialogsRes, final
                     reloadDialogsReadValue(dialogsToReload, 0);
                 }
                 loadUnreadDialogs();
-                loadLocalPinnedDialogs();
-                if (!loadedFavoriteDialogs) {
-                    loadLocalFavoriteDialogs();
-                    loadedFavoriteDialogs = true;
-                }
+//                loadLocalPinnedDialogs();
+//                if (!loadedFavoriteDialogs) {
+//                    loadLocalFavoriteDialogs();
+//                    loadedFavoriteDialogs = true;
+//                }
             });
         });
     }
@@ -6562,7 +6562,7 @@ public void favoriteDialog(final long did) {
                     dialogs.get(i).favorite_date = dialogs_dict.get(did).favorite_date;
                 }
             }
-            MigrationController.getInstance(currentAccount).storeFavoriteDialog(did, fave_date);
+            //MigrationController.getInstance(currentAccount).storeFavoriteDialog(did, fave_date);
             loadedFavoriteDialogs = true;
             loadDialogs(0, 100, true);
             NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload);
@@ -6705,67 +6705,69 @@ public boolean pinDialog(long did, boolean pin, TLRPC.InputPeer peer, long taskI
             }
         }
         MessagesStorage.getInstance(currentAccount).setDialogPinned(did, dialog.pinnedNum);
-        MigrationController.getInstance(currentAccount).storePinnedDialog(dialog);
+        //MigrationController.getInstance(currentAccount).storePinnedDialog(dialog);
         NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload);
         return true;
     }
 
-    public void swapPinnedDialogs(int index1, int index2) {
-        int d_size = dialogs.size();
-        if ((index1 < 0 || index1 >= d_size) || (index2 < 0 || index2 >= d_size)) return;
-
-        final TLRPC.TL_dialog d1 = dialogs.get(index1);
-        final TLRPC.TL_dialog d2 = dialogs.get(index2);
-        if (d1.pinned && d2.pinned) {
-            Collections.swap(dialogs, index1, index2);
-            MessagesStorage.getInstance(currentAccount).swapDialogs(d1.id, d2.id);
-        }
-    }
-
-    public void loadLocalPinnedDialogs() {
-        MigrationController.getInstance(currentAccount).migratePinnedDialogs(dialogs);
-        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
-            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
-            dialogs_dict.valueAt(i).pinnedNum = MigrationController.getInstance(currentAccount).restorePinnedNum(dialog);
-        }
-        for (int a = 0, size_a = dialogs_dict.size(); a < size_a; a++) {
-            for (int b = 0, size_b = dialogs.size(); b < size_b; b++) {
-                if (dialogs_dict.valueAt(a).id == dialogs.get(b).id) {
-                    dialogs.get(b).pinnedNum = dialogs_dict.valueAt(a).pinnedNum;
+    public void pinDialogInternal(ArrayList<Pair<Long, Integer>> dialogPairs) {
+        final ArrayList<Pair<Long, Integer>> swappedPinnedDialogs = MessagesStorage.getInstance(currentAccount).pinDialogsInternal(dialogPairs);
+        for (int i = 0, size_i = swappedPinnedDialogs.size(); i < size_i; i++) {
+            Pair<Long, Integer> d = swappedPinnedDialogs.get(i);
+            for (int j = 0, size_j = dialogs.size(); j < size_j; j++) {
+                if (dialogs.get(j).id == d.first) {
+                    dialogs.get(j).pinnedNum = d.second;
+                    break;
                 }
             }
         }
-        for (int i = 0, size = dialogs.size(); i < size; i++) {
-            TLRPC.TL_dialog dialog = dialogs.get(i);
-            pinDialog(dialog.id, dialog.pinnedNum > 0, null, 0);
-        }
         sortDialogs(null);
     }
 
-    public void loadLocalFavoriteDialogs() {
-        MigrationController.getInstance(currentAccount).migrateFavoritedDialogs(dialogs);
-        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
-            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
-            dialogs_dict.valueAt(i).favorite_date = MigrationController.getInstance(currentAccount).restoreFavoriteDate(dialog);
-        }
-        for (int a = 0, size = dialogs_dict.size(); a < size; a++) {
-            TLRPC.TL_dialog d1 = dialogs_dict.valueAt(a);
-            ListIterator<TLRPC.TL_dialog> iterator = dialogs.listIterator();
-            while (iterator.hasNext()) {
-                TLRPC.TL_dialog d2 = iterator.next();
-                if (d2.id == d1.id) {
-                    iterator.set(d1);
-                }
-            }
-        }
-        for (int i = 0, size = dialogs.size(); i < size; i++) {
-            TLRPC.TL_dialog dialog = dialogs.get(i);
-            if (dialog.favorite_date > 0) {
-                updateDialogFavorite(dialog.id, dialog.favorite_date);
-            }
-        }
-        sortDialogs(null);
-    }
+//    public void loadLocalPinnedDialogs() {
+//        MigrationController.getInstance(currentAccount).migratePinnedDialogs(dialogs);
+//        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
+//            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
+//            dialogs_dict.valueAt(i).pinnedNum = MigrationController.getInstance(currentAccount).restorePinnedNum(dialog);
+//        }
+//        for (int a = 0, size_a = dialogs_dict.size(); a < size_a; a++) {
+//            for (int b = 0, size_b = dialogs.size(); b < size_b; b++) {
+//                if (dialogs_dict.valueAt(a).id == dialogs.get(b).id) {
+//                    dialogs.get(b).pinnedNum = dialogs_dict.valueAt(a).pinnedNum;
+//                }
+//            }
+//        }
+//        for (int i = 0, size = dialogs.size(); i < size; i++) {
+//            TLRPC.TL_dialog dialog = dialogs.get(i);
+//            pinDialog(dialog.id, dialog.pinnedNum > 0, null, 0);
+//        }
+//        sortDialogs(null);
+//    }
+//
+//    public void loadLocalFavoriteDialogs() {
+//        MigrationController.getInstance(currentAccount).migrateFavoritedDialogs(dialogs);
+//        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
+//            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
+//            dialogs_dict.valueAt(i).favorite_date = MigrationController.getInstance(currentAccount).restoreFavoriteDate(dialog);
+//        }
+//        for (int a = 0, size = dialogs_dict.size(); a < size; a++) {
+//            TLRPC.TL_dialog d1 = dialogs_dict.valueAt(a);
+//            ListIterator<TLRPC.TL_dialog> iterator = dialogs.listIterator();
+//            while (iterator.hasNext()) {
+//                TLRPC.TL_dialog d2 = iterator.next();
+//                if (d2.id == d1.id) {
+//                    iterator.set(d1);
+//                }
+//            }
+//        }
+//        for (int i = 0, size = dialogs.size(); i < size; i++) {
+//            TLRPC.TL_dialog dialog = dialogs.get(i);
+//            if (dialog.favorite_date > 0) {
+//                updateDialogFavorite(dialog.id, dialog.favorite_date);
+//            }
+//        }
+//        sortDialogs(null);
+//    }
 
     public void loadPinnedDialogs(final long newDialogId, final ArrayList<Long> order) {
         if (UserConfig.getInstance(currentAccount).pinnedDialogsLoaded) {
@@ -8665,7 +8667,7 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
                         toDbUser.username = update.username;
                         dbUsers.add(toDbUser);
                     } else if (baseUpdate instanceof TLRPC.TL_updateDialogPinned) {
-                        /**
+                        /*
                         TLRPC.TL_updateDialogPinned updateDialogPinned = (TLRPC.TL_updateDialogPinned) baseUpdate;
                         long did;
                         if (updateDialogPinned.peer instanceof TLRPC.TL_dialogPeer) {
@@ -8684,8 +8686,7 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
                             UserConfig.getInstance(currentAccount).pinnedDialogsLoaded = false;
                             UserConfig.getInstance(currentAccount).saveConfig(false);
                             loadPinnedDialogs(did, null);
-                        }
-                         **/
+                        }*/
                     } else if (baseUpdate instanceof TLRPC.TL_updatePinnedDialogs) {
                         /*
                         TLRPC.TL_updatePinnedDialogs update = (TLRPC.TL_updatePinnedDialogs) baseUpdate;
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesStorage.java
index 4811c2b3c..fac81aaca 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesStorage.java
@@ -11,6 +11,7 @@
 import android.content.SharedPreferences;
 import android.text.TextUtils;
 import android.util.LongSparseArray;
+import android.util.Pair;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 
@@ -6978,6 +6979,33 @@ public int getPinnedCount() {
         return count[0];
     }
 
+    public int getPinnedNum(final long did) {
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
+        final int[] nums = new int[1];
+        storageQueue.postRunnable(() -> {
+            SQLiteCursor cursor = null;
+            try {
+                cursor = database.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + did);
+                if (cursor.next()) {
+                    nums[0] = cursor.intValue(0);
+                }
+            } catch (Exception e) {
+                FileLog.e(e);
+            } finally {
+                if (cursor != null) {
+                    cursor.dispose();
+                }
+            }
+            countDownLatch.countDown();
+        });
+        try {
+            countDownLatch.await();
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+        return nums[0];
+    }
+
     public int setDialogFavorite(final long did, final int favorite_date) {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final Integer[] dates = new Integer[]{0};
@@ -7075,22 +7103,31 @@ public void setDialogPinned(final long did, final int pinned) {
         });
     }
 
-    public void swapDialogs(final long did1, final long did2) {
+    public ArrayList<Pair<Long, Integer>> pinDialogsInternal(ArrayList<Pair<Long, Integer>> dialogs) {
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
         storageQueue.postRunnable(() -> {
             try {
-                SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET pinned = CASE did WHEN ? THEN (SELECT pinned FROM dialogs WHERE did = ?) WHEN ? THEN (SELECT pinned FROM dialogs WHERE did = ?) END WHERE did IN (?, ?)");
-                state.bindLong(1, did1);
-                state.bindLong(2, did2);
-                state.bindLong(3, did2);
-                state.bindLong(4, did1);
-                state.bindLong(5, did1);
-                state.bindLong(6, did2);
-                state.step();
+                SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
+                for (int a = 0; a < dialogs.size(); a++) {
+                    Pair<Long, Integer> d = dialogs.get(a);
+                    state.requery();
+                    state.bindInteger(1, d.second);
+                    state.bindLong(2, d.first);
+                    state.step();
+                }
                 state.dispose();
             } catch (Exception e) {
                 FileLog.e(e);
+                e.printStackTrace();
             }
+            countDownLatch.countDown();
         });
+        try {
+            countDownLatch.await();
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+        return dialogs;
     }
 
     public void putDialogs(final TLRPC.messages_Dialogs dialogs, final int check) {
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
index cbeeefedf..623b20308 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
@@ -37,6 +37,13 @@ private MigrationController(int num) {
     public void storePinnedDialog(TLRPC.TL_dialog d) {
         Set<String> string_set = restorePinnedDialogsStringSet();
         Set<String> string_set_copy = new HashSet<>(string_set);
+        for (String s : string_set_copy) {
+            String[] parts = s.split(",", 2);
+            long did = Long.valueOf(parts[0]);
+            if (d.id == did) {
+                string_set_copy.remove(s);
+            }
+        }
         string_set_copy.add(String.valueOf(d.id) + "," + String.valueOf(d.pinnedNum));
         SharedPreferences.Editor editor = dialogsPreferences.edit();
         editor.putStringSet("stored_pinned_dialog_set", string_set_copy);
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Adapters/DialogsAdapter.java
index d74b663bb..29a556e80 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Adapters/DialogsAdapter.java
@@ -19,11 +19,14 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.AndroidUtilities;
 import io.bettergram.telegram.messenger.ContactsController;
 import io.bettergram.telegram.messenger.LocaleController;
 import io.bettergram.telegram.messenger.MessagesController;
-import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.UserConfig;
 import io.bettergram.telegram.messenger.support.widget.RecyclerView;
 import io.bettergram.telegram.tgnet.TLObject;
@@ -40,9 +43,6 @@
 import io.bettergram.telegram.ui.Components.LayoutHelper;
 import io.bettergram.telegram.ui.Components.RecyclerListView;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class DialogsAdapter extends RecyclerListView.SelectionAdapter {
 
     private Context mContext;
@@ -136,7 +136,7 @@ public int getItemCount() {
         return count;
     }
 
-    public TLObject getItem(int i) {
+    public TLObject getItem(int i, List<TLRPC.TL_dialog> arrayList) {
         if (showContacts) {
             i -= 3;
             if (i < 0 || i >= ContactsController.getInstance(currentAccount).contacts.size()) {
@@ -144,7 +144,7 @@ public TLObject getItem(int i) {
             }
             return MessagesController.getInstance(currentAccount).getUser(ContactsController.getInstance(currentAccount).contacts.get(i).user_id);
         }
-        List<TLRPC.TL_dialog> arrayList = getDialogsArray();
+
         if (hasHints) {
             int count = MessagesController.getInstance(currentAccount).hintDialogs.size();
             if (i < 2 + count) {
@@ -254,7 +254,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
         switch (holder.getItemViewType()) {
             case 0: {
                 DialogCell cell = (DialogCell) holder.itemView;
-                TLRPC.TL_dialog dialog = (TLRPC.TL_dialog) getItem(i);
+                TLRPC.TL_dialog dialog = (TLRPC.TL_dialog) getItem(i, getDialogsArray());
                 if (hasHints) {
                     i -= 2 + MessagesController.getInstance(currentAccount).hintDialogs.size();
                 }
@@ -277,7 +277,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
             }
             case 4: {
                 DialogMeUrlCell cell = (DialogMeUrlCell) holder.itemView;
-                cell.setRecentMeUrl((TLRPC.RecentMeUrl) getItem(i));
+                cell.setRecentMeUrl((TLRPC.RecentMeUrl) getItem(i, getDialogsArray()));
                 break;
             }
             case 6: {
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/Indicator/OnlineIndicator.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/Indicator/OnlineIndicator.java
index 08f13ee8f..a4e4315b1 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/Indicator/OnlineIndicator.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/Indicator/OnlineIndicator.java
@@ -1,7 +1,9 @@
 package io.bettergram.telegram.ui.Components.Indicator;
 
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
+import android.graphics.PorterDuff;
 
 import io.bettergram.telegram.messenger.AndroidUtilities;
 import io.bettergram.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
index 8b5491945..c30f08660 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
@@ -30,6 +30,7 @@
 import android.os.Bundle;
 import android.support.v4.view.ViewCompat;
 import android.text.TextUtils;
+import android.util.Pair;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
@@ -1152,7 +1153,9 @@ public void onMove(float dx, float dy) {
         });
 
         new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN, ItemTouchHelper.UP | ItemTouchHelper.DOWN) {
-
+            List<TLRPC.TL_dialog> dialogs_copy;
+            int dragFrom = -1;
+            int dragTo = -1;
             private Drawable previousDrawable;
 
             TLRPC.TL_dialog getDialog(int position) {
@@ -1163,20 +1166,50 @@ public void onMove(float dx, float dy) {
                 return dialogs.get(position);
             }
 
+            private void reallyMoved(int fromPosition, int toPosition) {
+                if (listView.getAdapter() instanceof BetterDialogsAdapter && dialogsAdapter != null) {
+                    if (fromPosition > toPosition) {
+                        final ArrayList<Pair<Long, Integer>> swappedPinnedDialogs = new ArrayList<>();
+                        for (int current_index = toPosition, last_index = fromPosition; current_index <= last_index; current_index++) {
+                            TLRPC.TL_dialog dialog_1 = dialogs_copy.get(current_index);
+                            TLRPC.TL_dialog dialog_2 = dialogs_copy.get(current_index == last_index ? toPosition : current_index + 1);
+                            swappedPinnedDialogs.add(new Pair<>(dialog_1.id, dialog_2.pinnedNum));
+                        }
+                        MessagesController.getInstance(currentAccount).pinDialogInternal(swappedPinnedDialogs);
+                    } else if (fromPosition < toPosition) {
+                        final ArrayList<Pair<Long, Integer>> swappedPinnedDialogs = new ArrayList<>();
+                        for (int current_index = toPosition, last_index = fromPosition; current_index >= last_index; current_index--) {
+                            TLRPC.TL_dialog dialog_1 = dialogs_copy.get(current_index);
+                            TLRPC.TL_dialog dialog_2 = dialogs_copy.get(current_index == last_index ? toPosition : current_index - 1);
+                            swappedPinnedDialogs.add(new Pair<>(dialog_1.id, dialog_2.pinnedNum));
+                        }
+                        MessagesController.getInstance(currentAccount).pinDialogInternal(swappedPinnedDialogs);
+                    }
+                    AndroidUtilities.runOnUIThread(() -> {
+                        dialogsAdapter.notifyDataSetChanged();
+                        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload);
+                    }, 1000);
+                }
+            }
+
             @Override
             public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
-                final int position = viewHolder.getAdapterPosition();
-                final TLRPC.TL_dialog dialog = getDialog(position);
+                int fromPosition = viewHolder.getAdapterPosition();
+                int toPosition = target.getAdapterPosition();
+
+
+                if (dragFrom == -1) {
+                    dragFrom = fromPosition;
+                }
+                dragTo = toPosition;
+
                 final int pinned_highest_pos = MessagesController.getInstance(currentAccount).getPinnedCount() - 1;
-                final int target_position = target.getAdapterPosition();
-                if (dialog != null && dialog.pinned && pinned_highest_pos > 1 && position <= pinned_highest_pos && target_position <= pinned_highest_pos) {
-                    if (bottomSheetDialog != null) {
-                        bottomSheetDialog.dismiss();
-                    }
-                    MessagesController.getInstance(currentAccount).swapPinnedDialogs(position, target_position);
-                    dialogsAdapter.notifyItemMoved(position, target_position);
+                final TLRPC.TL_dialog dialog = getDialog(fromPosition);
+                if (dialog != null && dialog.pinned && pinned_highest_pos > 1 && fromPosition <= pinned_highest_pos && toPosition <= pinned_highest_pos) {
+                    dialogsAdapter.onItemMove(fromPosition, toPosition);
                     return true;
                 }
+
                 return false;
             }
 
@@ -1184,6 +1217,7 @@ public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHol
             public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
                 super.onSelectedChanged(viewHolder, actionState);
                 if (actionState == 2) {
+                    dialogs_copy = dialogsAdapter.getDialogsArray();
                     final Drawable draggingDrawable = listView.getBackground();
                     previousDrawable = viewHolder.itemView.getBackground();
                     viewHolder.itemView.setBackground(draggingDrawable);
@@ -1214,6 +1248,28 @@ public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder v
                     return makeFlag(ItemTouchHelper.ACTION_STATE_IDLE, ItemTouchHelper.ACTION_STATE_IDLE);
                 }
             }
+
+            @Override
+            public boolean isLongPressDragEnabled() {
+                return true;
+            }
+
+            @Override
+            public boolean isItemViewSwipeEnabled() {
+                return false;
+            }
+
+            @Override
+            public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
+                super.clearView(recyclerView, viewHolder);
+
+                if (dragFrom != -1 && dragTo != -1 && dragFrom != dragTo) {
+                    reallyMoved(dragFrom, dragTo);
+                }
+
+                dragFrom = dragTo = -1;
+            }
+
         }).attachToRecyclerView(listView);
 
         searchEmptyView = new EmptyTextProgressView(context);
@@ -1722,7 +1778,7 @@ public void onResume() {
                     if (UserConfig.getInstance(currentAccount).syncContacts && activity.shouldShowRequestPermissionRationale(Manifest.permission.READ_CONTACTS)) {
                         AlertDialog.Builder builder = AlertsCreator.createContactsPermissionDialog(activity, param -> {
                             askAboutContacts = param != 0;
-                            MessagesController.getGlobalNotificationsSettings().edit().putBoolean("askAboutContacts", askAboutContacts).commit();
+                            MessagesController.getGlobalNotificationsSettings().edit().putBoolean("askAboutContacts", askAboutContacts).apply();
                             askForPermissions(false);
                         });
                         showDialog(permissionDialog = builder.create());
@@ -2053,8 +2109,6 @@ public void didReceivedNotification(int id, int account, Object... args) {
             checkUnreadCount(true);
             if (dialogsAdapter != null) {
                 if (dialogsAdapter.isDataSetChanged() || args.length > 0) {
-                    //MessagesController.getInstance(currentAccount).loadLocalPinnedDialogs();
-                    //MessagesController.getInstance(currentAccount).loadLocalFavoriteDialogs();
                     listView.postAndNotifyAdapter(dialogsAdapter::notifyDataSetChanged);
                 } else {
                     updateVisibleRows(MessagesController.UPDATE_MASK_NEW_MESSAGE);
