diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
new file mode 100644
index 000000000..21ed39412
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
@@ -0,0 +1,52 @@
+package org.pollgram.decision.adapter;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.pollgram.decision.data.Decision;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+
+import java.util.List;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public class DecisionAdapter extends ArrayAdapter<Decision> {
+
+    private static final int LAYOUT_RES_ID = R.layout.item_decision;
+    private final int groupMemberCount;
+
+    public DecisionAdapter(Context context,  List<Decision> items, int groupMemberCount) {
+        super(context, LAYOUT_RES_ID, items);
+        this.groupMemberCount = groupMemberCount;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        // init layout
+        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
+        ImageView decisionImage = (ImageView)rowView.findViewById(R.id.item_decision_iv_image);
+        TextView decisionTitle = (TextView)rowView.findViewById(R.id.item_decision_tv_title);
+        TextView decisionSubtitle = (TextView)rowView.findViewById(R.id.item_decision_tv_subtitle);
+
+
+        // put data
+        Decision decision = getItem(position);
+        decisionTitle.setText(decision.getDescription());
+        String subTitle = LocaleController.formatString(R.string.howManyMemberVote+"",
+                R.string.howManyMemberVote, decision.getVoteCount(),groupMemberCount);
+        decisionSubtitle.setText(subTitle);
+        if (!decision.isOpen())
+            rowView.setBackgroundColor(Color.LTGRAY);
+
+        return rowView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java
new file mode 100644
index 000000000..a7876af49
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java
@@ -0,0 +1,104 @@
+package org.pollgram.decision.adapter;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.CheckBox;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.pollgram.decision.dao.PollgramDAO;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.data.TimeRangeOption;
+import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.R;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Created by davide on 04/10/15.
+ */
+public class OptionAdapter extends ArrayAdapter<Vote> {
+
+    private static final String LOG_TAG = "ChoiceAdapter";
+
+    private static final int LAYOUT_RES_ID = R.layout.option_choice;
+    private final List<Vote> votes;
+    private final List<Boolean> originalVotes;
+    private final Set<Vote> newVoteSet;
+    private OnVoteChangeListener onVoteChageListener;
+
+    public interface OnVoteChangeListener {
+        void voteChanges(boolean areThereChangesToSave);
+    }
+
+    public OptionAdapter(Context context, List<Vote> votes) {
+        super(context, LAYOUT_RES_ID, votes.toArray(new Vote[votes.size()]));
+        this.votes = votes;
+        this.newVoteSet = new HashSet<>();
+        this.originalVotes = new ArrayList<>();
+        for (Vote v : votes){
+            originalVotes.add(v.isVote() == null ? null :new Boolean(v.isVote().booleanValue()));
+        }
+        this.onVoteChageListener = new OnVoteChangeListener() {
+            @Override
+            public void voteChanges(boolean areThereChangesToSave) {
+            }
+        };
+    }
+
+    public void setOnVoteChageListener(OnVoteChangeListener onVoteChageListener){
+        this.onVoteChageListener = onVoteChageListener;
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+        final Vote vote = getItem(position);
+        final Option c = PollgramDAO.getInstance().getOption(vote.getOptionId());
+        if (c instanceof TimeRangeOption){
+            Log.e("ChoiceAdapter", "TimeRangeOption not supported yet");
+            return null;
+        }
+        final TextOption o = (TextOption)c;
+        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
+        ImageView optionImage = (ImageView)rowView.findViewById(R.id.item_option_iv_image);
+        TextView optionTitle = (TextView)rowView.findViewById(R.id.item_option_tv_title);
+        TextView optionSubtitle = (TextView)rowView.findViewById(R.id.item_option_tv_subtitle);
+//        SurfaceView optionView = (SurfaceView)rowView.findViewById(R.id.item_option_sw_bar);
+        final CheckBox optionCheckBox = (CheckBox)rowView.findViewById(R.id.item_option_cb);
+        optionCheckBox.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                vote.setVote(optionCheckBox.isChecked());
+                if (vote.isVote() != null && vote.isVote().equals(originalVotes.get(position))){
+                    newVoteSet.remove(vote);;
+                } else {
+                    newVoteSet.add(vote);
+                }
+                Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
+                onVoteChageListener.voteChanges(!newVoteSet.isEmpty());
+            }
+        });
+
+        // TODO optionImage
+        optionTitle.setText(o.getTitle());
+        optionSubtitle.setText(o.getLongDescription());
+        // TODO optionView
+        optionCheckBox.setChecked(vote.isVote());
+
+        return rowView;
+    }
+
+    public Collection<Vote> getNewVoteSet() {
+        return newVoteSet;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
new file mode 100644
index 000000000..778df0ce5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
@@ -0,0 +1,12 @@
+package org.pollgram.decision.dao;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+
+/**
+ * Created by davide on 27/10/15.
+ */
+public interface DBObjectMapper<T> {
+    T from(Cursor c);
+    ContentValues toCV(T t);
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
new file mode 100644
index 000000000..20bee94fc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
@@ -0,0 +1,36 @@
+package org.pollgram.decision.dao;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+public class PGSqlLiteHelper extends SQLiteOpenHelper {
+
+	public static final String DBName = "pollgramDecisions";
+	public static final int DatabaseVersion = 1;
+	private static final String LOG_TAG = "PGSQLH";
+
+	// id
+	public PGSqlLiteHelper(Context context) {
+		super(context, DBName, null, DatabaseVersion);
+	}
+
+	@Override
+	public void onCreate(SQLiteDatabase db) {
+		Log.d(LOG_TAG, "Creazione");
+
+		db.execSQL("DROP TABLE IF EXISTS operation");
+//		db.execSQL(OperationDAOImpl.getTableSqlDeclaration());
+//		db.execSQL(PaymentTypeDAOImpl.getTableSqlDeclaration());
+//		db.execSQL(CategoryDAOImpl.getTableSqlDeclaration());
+//		db.execSQL(PlannedOperationDAOImpl.getTableSqlDeclaration());
+		Log.d(LOG_TAG, "Creazione tab ok");
+	}
+
+	@Override
+	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+		throw new RuntimeException("Not yet implemented");
+	}
+	
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
new file mode 100644
index 000000000..bf4ce8dd2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
@@ -0,0 +1,50 @@
+package org.pollgram.decision.dao;
+
+import android.support.annotation.Nullable;
+
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public abstract class PollgramDAO {
+
+    public abstract Decision getDecision(long decisionId);
+
+    public abstract List<Decision> getDecisions(@Nullable Boolean open);
+
+    public abstract List<Option> getOptions(Decision decision);
+
+    public abstract List<Option> getOptions(long decisionId);
+
+    public abstract List<TLRPC.User> getUsers(int[] usersIds);
+
+    public abstract List<Vote> getUserVoteForDecision(long decisionId, int userId);
+
+    public abstract void save(Collection<Vote> votest2save);
+
+    public abstract UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
+
+    private static volatile PollgramDAO Instance = null;
+
+    public static PollgramDAO getInstance() {
+        PollgramDAO localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (PollgramDAO.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new PollgramDAOStubImpl();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
new file mode 100644
index 000000000..217b4058d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
@@ -0,0 +1,57 @@
+package org.pollgram.decision.dao;
+
+import android.support.annotation.Nullable;
+
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Created by davide on 18/10/15.
+ */
+public class PollgramDAODBImpl extends PollgramDAO {
+    @Override
+    public Decision getDecision(long decisionId) {
+        return null;
+    }
+
+    @Override
+    public List<Decision> getDecisions(@Nullable Boolean open) {
+        return null;
+    }
+
+    @Override
+    public List<Option> getOptions(Decision decision) {
+        return null;
+    }
+
+    @Override
+    public List<Option> getOptions(long decisionId) {
+        return null;
+    }
+
+    @Override
+    public List<TLRPC.User> getUsers(int[] usersIds) {
+        return null;
+    }
+
+    @Override
+    public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
+        return null;
+    }
+
+    @Override
+    public void save(Collection<Vote> votest2save) {
+
+    }
+
+    @Override
+    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
+        return null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
new file mode 100644
index 000000000..f30f0a4c5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
@@ -0,0 +1,7 @@
+package org.pollgram.decision.dao;
+
+/**
+ * Created by davide on 27/10/15.
+ */
+public class PollgramDAOException {
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
new file mode 100644
index 000000000..807cca9bb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
@@ -0,0 +1,130 @@
+package org.pollgram.decision.dao;
+
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.MessagesController;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public class PollgramDAOStubImpl extends PollgramDAO {
+
+    private static final String LOG_TAG = "DecisionDAOImpl";
+
+    // TODO remove stub field
+    private final List<Decision> decisions = new ArrayList<>();
+    private final List<Option> choiches = new ArrayList<>();
+
+    public PollgramDAOStubImpl() {
+
+        long id = 1;
+        /// just for test
+        int chatId = 39379118;
+        int creatorId = 23483618;
+        decisions.add(new Decision(id++,chatId, creatorId,"what present do we buy ?",true, 1));
+        decisions.add(new Decision(id++,chatId, creatorId,"Where do we go ?",true, 0));
+        decisions.add(new Decision(id++,chatId, creatorId,"When will the party be ?",true, 0));
+        decisions.add(new Decision(id++,chatId, creatorId,"Do we add Slomp to the group ?",false, 0));
+
+        choiches.add(new TextOption(id++, 5,2, decisions.get(0),"Ski","They cost 385EUR i saw them at the corner shop"));
+        choiches.add(new TextOption(id++, 3,4, decisions.get(0),"Phone","The new StonexOne is AWESOME !!!"));
+        choiches.add(new TextOption(id++,2,5, decisions.get(0), "Trip", "Yeah a trip trought Europe can be a nice idea"));
+        choiches.add(new TextOption(id++,2,5, decisions.get(0), "A stupid idea", "it is late and i have no more ideas ;-/"));
+
+    }
+
+    @Override
+    public Decision getDecision(long decisionId) {
+        for (Decision d : decisions){
+            if (d.getId() == decisionId)
+                return d;
+        }
+        return null;
+    }
+
+    @Override
+    public List<Decision> getDecisions(@Nullable Boolean open) {
+        List<Decision> outList = new ArrayList<>();
+        for(Decision d : decisions)
+            if (open == null || d.isOpen() == open.booleanValue())
+                outList.add(d);
+        return outList;
+    }
+
+
+    @Override
+    public List<Option> getOptions(Decision decision) {
+        return  getOptions(decision.getId());
+
+    }
+
+    @Override
+    public List<Option> getOptions(long decisionId) {
+        if (decisionId == decisions.get(0).getId())
+            return  choiches;
+        else
+            return new ArrayList<>();
+    }
+
+    @Override
+    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
+        Decision decision = getDecision(decisionId);
+        List<TLRPC.User> usersForDecision = getUsers(participantIds);
+        List<Option> choichesForDecision= getOptions(decision) ;
+        UsersDecisionVotes udv = new UsersDecisionVotes(decision, usersForDecision, choichesForDecision);
+        for (int i = 0; i < usersForDecision.size(); i++) {
+            for (int j = 0; j < choichesForDecision.size(); j++) {
+                Vote vote = getVote(usersForDecision.get(i).id, choichesForDecision.get(j));
+                udv.setVote(i,j,vote);
+                if (i == 0)
+                    vote.setVote(null);
+            }
+        }
+        return udv;
+    }
+
+    private Vote getVote(int userId, Option option) {
+        // TODO so stub
+        long stubId = option.getId()*17;
+        Boolean voteValue = option.getId()%2 ==0 ? true : (option.getId()%3 ==0 ? null : false);
+        return new Vote(stubId, option,userId, voteValue, new Date());
+    }
+
+
+    @Override
+    public List<TLRPC.User> getUsers(int[] usersIds) {
+        List<TLRPC.User> users = new ArrayList<>();
+        for (int i = 0 ; i< usersIds.length ; i++){
+            users.add(MessagesController.getInstance().getUser(usersIds[i]));
+        }
+        return users;
+    }
+
+    @Override
+    public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
+        List<Vote> votes = new ArrayList<>();
+        for (Option c : getOptions(decisionId)) {
+             votes.add(getVote(userId,c));
+        }
+        return votes;
+    }
+
+
+    @Override
+    public void save(Collection<Vote> votest2save) {
+        Log.e(LOG_TAG, "save not yet implemnted :-(");
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java
new file mode 100644
index 000000000..81dbe18f5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java
@@ -0,0 +1,7 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 27/10/15.
+ */
+public class DBBean {
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
new file mode 100644
index 000000000..be06180b5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
@@ -0,0 +1,92 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 01/10/15.
+ */
+public class Decision {
+
+    private final long id;
+    private final int fullChatId;
+    private final long userCreatorId;
+
+    private String description;
+    private boolean open;
+    private int voteCount;
+
+    // icon/image will be retrived externally by url or file.
+    // Like the file containing the decision image can be named like decisio_<id>.png, and cached on the fs
+
+    public Decision(long id, int fullChatId, long userCreatorId) {
+        this.id = id;
+        this.fullChatId = fullChatId;
+        this.userCreatorId = userCreatorId;
+    }
+
+    public Decision(long id, int fullChatId, long userCreatorId, String description, boolean open, int voteCount) {
+        this.id = id;
+        this.fullChatId = fullChatId;
+        this.userCreatorId = userCreatorId;
+        this.description = description;
+        this.open = open;
+        this.voteCount = voteCount;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    /**
+     * @return the id of an TLRPC.ChatFull
+     */
+    public int getFullChatId() {
+        return fullChatId;
+    }
+
+    /**
+     * @return the id of the user that create the current decision.
+     * This id referes to TLRPC.User
+     */
+    public long getUserCreatorId() {
+        return userCreatorId;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public boolean isOpen() {
+        return open;
+    }
+
+    public void setOpen(boolean open) {
+        this.open = open;
+    }
+
+    public int getVoteCount() {
+        return voteCount;
+    }
+
+    public void setVoteCount(int voteCount) {
+        this.voteCount = voteCount;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Decision decision = (Decision) o;
+
+        return id == decision.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return (int) (id ^ (id >>> 32));
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
new file mode 100644
index 000000000..c04ef6489
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
@@ -0,0 +1,37 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public abstract class Option implements Comparable<Option> {
+
+    protected final long id;
+    private final int positiveVoteCount;
+    private final int negativeVoteCount;
+
+    public Option(long id, int positiveVoteCount, int negativeVoteCount) {
+        this.id = id;
+        this.positiveVoteCount = positiveVoteCount;
+        this.negativeVoteCount = negativeVoteCount;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public int getPositiveVoteCount() {
+        return positiveVoteCount;
+    }
+
+    public int getNegativeVoteCount() {
+        return negativeVoteCount;
+    }
+
+    public abstract String getTitle();
+
+    @Override
+    public int compareTo(Option another) {
+        return this.positiveVoteCount - another.positiveVoteCount;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
new file mode 100644
index 000000000..a8b8e4630
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
@@ -0,0 +1,67 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 01/10/15.
+ */
+public class TextOption extends Choice {
+
+    private final Decision decision;
+
+    // icon/image will be retrived externally by url or file
+
+    private String title;
+    private String longDescription;
+
+    public TextOption(long id, int positiveVoteCount, int negativeVoteCount, Decision decision) {
+        super(id, positiveVoteCount, negativeVoteCount);
+        this.decision = decision;
+    }
+
+    public TextOption(long id, int positiveVoteCount, int negativeVoteCount, Decision decision, String title, String longDescription) {
+        super(id, positiveVoteCount, negativeVoteCount);
+        this.title = title;
+        this.decision = decision;
+        this.longDescription = longDescription;
+    }
+
+    public Decision getDecision() {
+        return decision;
+    }
+
+    @Override
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getLongDescription() {
+        return longDescription;
+    }
+
+    public void setLongDescription(String longDescription) {
+        this.longDescription = longDescription;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TextOption textOption = (TextOption) o;
+
+        return id == textOption.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return (int) (id ^ (id >>> 32));
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
new file mode 100644
index 000000000..5a7845889
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
@@ -0,0 +1,84 @@
+package org.pollgram.decision.data;
+
+import android.util.Log;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public class TimeRangeOption extends Choice {
+
+    private final DateFormat DAY_DF = new SimpleDateFormat("yyyy/MM/dd");
+    private final DateFormat DAY_TIME_DF = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");
+
+    private final Date from;
+    private final Date to;
+    private final Accuracy accuracy;
+
+    public static enum Accuracy {
+        DAY, HOUR;
+    }
+
+    public TimeRangeOption(long id, int positiveVoteCount, int negativeVoteCount, long id1, Date from, Date to, Accuracy accuracy) {
+        super(id, positiveVoteCount, negativeVoteCount);
+        id = id1;
+        this.from = from;
+        this.to = to;
+        this.accuracy = accuracy;
+    }
+
+    @Override
+    public long getId() {
+        return id;
+    }
+
+    public Date getFrom() {
+        return from;
+    }
+
+    public Date getTo() {
+        return to;
+    }
+
+    public Accuracy getAccuracy() {
+        return accuracy;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TimeRangeOption that = (TimeRangeOption) o;
+        return id == that.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return (int) (id ^ (id >>> 32));
+    }
+
+    @Override
+    public String toString() {
+        if (from.equals(to))
+            return format(from);
+        else
+            return format(from) + " - " + format(to);
+    }
+
+    private String format(Date date) {
+        switch (accuracy) {
+            case HOUR:
+                return DAY_TIME_DF.format(date);
+            case DAY:
+                return DAY_DF.format(date);
+            default: {
+                Log.e("TIME-RANGE", "unknown accuracy " + accuracy);
+                return "null";
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java
new file mode 100644
index 000000000..699fb0b06
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java
@@ -0,0 +1,7 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 29/10/15.
+ */
+public class UserIdOptionKey {
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
new file mode 100644
index 000000000..dd1914d00
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
@@ -0,0 +1,7 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 13/10/15.
+ */
+public class UsersDecisionVotes {
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
new file mode 100644
index 000000000..71817dd9f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
@@ -0,0 +1,60 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 01/10/15.
+ */
+public class Vote {
+
+    private final long id;
+    private final Choice option;
+    private final int userId;
+
+    private boolean vote;
+
+
+    public Vote(long id, Choice option, int userId) {
+        this.id = id;
+        this.option = option;
+        this.userId = userId;
+    }
+
+    public int getUserId() {
+        return userId;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public Choice getChoice() {
+        return option;
+    }
+
+    public boolean isVote() {
+        return vote;
+    }
+
+    public void setVote(boolean vote) {
+        this.vote = vote;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Vote vote = (Vote) o;
+
+        return id == vote.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return (int) (id ^ (id >>> 32));
+    }
+
+    @Override
+    public String toString() {
+        return Boolean.toString(vote);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java
new file mode 100644
index 000000000..6dd7dc99a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java
@@ -0,0 +1,86 @@
+package org.pollgram.decision.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import org.pollgram.decision.dao.DecisionDAO;
+import org.pollgram.decision.dao.DecisionDAOImpl;
+import org.pollgram.decision.data.Choice;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.utils.PolgramUtils;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.SizeNotifierFrameLayout;
+
+import java.util.Map;
+
+/**
+ * Created by davide on 04/10/15.
+ */
+public class ChoicesManagerFragment extends BaseFragment {
+
+    static final String LOG_TAG = "SlidingTabs";
+
+
+    public static final String PAR_DECISION_ID = "PAR_DECISION_ID";
+    public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
+
+    private int[] participantsUserIds;
+    private DecisionDAO decisionDAO;
+    private Decision decision;
+
+    public ChoicesManagerFragment(Bundle bundle) {
+        super(bundle);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        // init field
+        decisionDAO = new DecisionDAOImpl();
+        long decisionId = getArguments().getLong(PAR_DECISION_ID);
+        participantsUserIds = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
+        decision = decisionDAO.findById(decisionId);
+        return super.onFragmentCreate();
+    }
+
+
+    @Override
+    public View createView(Context context) {
+        // set up action bar
+        // TODO add real icon
+        PolgramUtils.init(actionBar, decision.getDescription(), 18, R.drawable.attach_camera);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+        fragmentView = new SizeNotifierFrameLayout(context);
+        SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
+        LayoutInflater li = LayoutInflater.from(context);
+        ViewGroup rootView = (ViewGroup)li.inflate(R.layout.decision_detail_main, (ViewGroup) fragmentView);
+        // Create view
+        TextView title = (TextView) rootView.findViewById(R.id.decision_detail_top_title);
+        // TODO this description is wrong !!!!!
+        title.setText(context.getString(R.string.decisionDetailSummarizeTitle, decision.getVoteCount(), participantsUserIds.length));
+
+        android.support.v4.app.FragmentTransaction transaction = getParentActivity().getSupportFragmentManager().beginTransaction();
+        DecisionTabsFragment fragment = new DecisionTabsFragment();
+        fragment.setArguments(getArguments());
+        transaction.replace(R.id.sample_content_fragment, fragment);
+        transaction.commit();
+
+        return rootView;
+    }
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java
new file mode 100644
index 000000000..7ca22dc14
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java
@@ -0,0 +1,366 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.pollgram.decision.ui;
+
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.Fragment;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+import android.widget.Toast;
+
+
+import org.pollgram.decision.adapter.ChoiceAdapter;
+import org.pollgram.decision.dao.DecisionDAO;
+import org.pollgram.decision.dao.DecisionDAOImpl;
+import org.pollgram.decision.data.Choice;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.utils.PolgramUtils;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.Collection;
+import java.util.List;
+
+public class ChoicesManagerTabsFragment extends Fragment {
+
+    static final String LOG_TAG = "SlidingTabs";
+
+    private SlidingTabLayout slidingTabLayout;
+    private ViewPager viewPager;
+
+    private DecisionDAO decisionDAO;
+    private List<Vote> votes;
+    private UsersDecisionVotes usersDecisionVotes;
+
+    public ChoicesManagerTabsFragment() {
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        decisionDAO = new DecisionDAOImpl();
+        long decisionId = getArguments().getLong(ChoicesManagerFragment.PAR_DECISION_ID);
+        votes = decisionDAO.getUserVoteForDecision(decisionId, UserConfig.getCurrentUser().id);
+        int[] participantsUserIds = getArguments().getIntArray(ChoicesManagerFragment.PAR_PARTICIPANT_IDS);
+        usersDecisionVotes = new DecisionDAOImpl().getUsersDecisionVotes(decisionId, participantsUserIds);
+    }
+
+    /**
+     * Inflates the {@link View} which will be displayed by this {@link Fragment}, from the app's
+     * resources.
+     */
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.tabbed_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        viewPager = (ViewPager) view.findViewById(R.id.viewpager);
+        viewPager.setAdapter(new DecisionPagerAdapter());
+
+        slidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);
+        slidingTabLayout.setViewPager(viewPager);
+    }
+
+
+    /**
+     * PagerAdapter for decisions
+     */
+    class DecisionPagerAdapter extends PagerAdapter {
+
+        private static final int OPTION_ID = 0, TABLE_VIEW_ID = 1;
+
+        /**
+         * @return the number of pages to display
+         */
+        @Override
+        public int getCount() {
+            return 2;
+        }
+
+        /**
+         * @return true if the value returned from {@link #instantiateItem(ViewGroup, int)} is the
+         * same object as the {@link View} added to the {@link ViewPager}.
+         */
+        @Override
+        public boolean isViewFromObject(View view, Object o) {
+            return o == view;
+        }
+
+        /**
+         * Return the title of the item at {@code position}. This is important as what this method
+         * returns is what is displayed in the {@link SlidingTabLayout}.
+         * <p/>
+         * Here we construct one using the position value, but for real application the title should
+         * refer to the item's contents.
+         */
+        @Override
+        public CharSequence getPageTitle(int position) {
+            switch (position) {
+                case OPTION_ID:
+                    return getActivity().getString(R.string.optionTabName);
+                case TABLE_VIEW_ID:
+                    return getActivity().getString(R.string.tableViewTabName);
+                default: {
+                    Log.e(LOG_TAG, "Unknow tab position " + position);
+                    return "tab " + position;
+                }
+            }
+        }
+
+        /**
+         * Instantiate the {@link View} which should be displayed at {@code position}. Here we
+         * inflate a layout from the apps resources and then change the text view to signify the position.
+         */
+        @Override
+        public Object instantiateItem(ViewGroup container, int position) {
+            View rootView = null;
+            LayoutInflater inflater = getActivity().getLayoutInflater();
+            switch (position) {
+                case OPTION_ID: {
+                    rootView = getOptionsListView(container, inflater);
+                    break;
+                }
+                case TABLE_VIEW_ID: {
+                    rootView = getOptionsTable(container, inflater);
+                    break;
+                }
+                default:
+                    rootView = null;
+                    break;
+            }
+            container.addView(rootView);
+            return rootView;
+        }
+
+        /**
+         * Destroy the item from the {@link ViewPager}. In our case this is simply removing the
+         * {@link View}.
+         */
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            container.removeView((View) object);
+            Log.i(LOG_TAG, "destroyItem() [position: " + position + "]");
+        }
+    }
+
+    @NonNull
+    private View getOptionsListView(ViewGroup container, LayoutInflater inflater) {
+        View rootView;
+        rootView = inflater.inflate(R.layout.decision_option_list, container, false);
+        ListView listView = (ListView) rootView.findViewById(R.id.decision_option_lw_options);
+        final ChoiceAdapter adapter = new ChoiceAdapter(getActivity(), votes);
+        listView.setAdapter(adapter);
+        final Button btnSaveOption = (Button) rootView.findViewById(R.id.decision_option_btn_save_votes);
+        btnSaveOption.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+                Collection<Vote> votest2save = adapter.getNewVoteSet();
+                Log.i(LOG_TAG, "saving votes[" + votest2save + "]");
+                decisionDAO.save(votest2save);
+                Toast.makeText(getContext(), R.string.voteSaved, Toast.LENGTH_SHORT).show();
+                ;
+            }
+        });
+
+        adapter.setOnVoteChageListener(new ChoiceAdapter.OnVoteChangeListener() {
+            @Override
+            public void voteChanges(boolean areThereChangesToSave) {
+                if (areThereChangesToSave)
+                    btnSaveOption.setVisibility(View.VISIBLE);
+                else
+                    btnSaveOption.setVisibility(View.GONE);
+            }
+        });
+        return rootView;
+    }
+
+    @NonNull
+    private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
+        View rootView = inflater.inflate(R.layout.decision_option_table, container,false);
+
+        TableLayout tableLayout = (TableLayout) rootView.findViewById(R.id.scrollable_part);
+        TableLayout fixedColumn = (TableLayout) rootView.findViewById(R.id.fixed_column);
+
+        // build first row
+        {
+            int firstRowHeight = AndroidUtilities.dp(40);
+            TableRow row = newRow();
+            // first cell is empty
+            TextView emptyCell = new TextView(getContext());
+
+            //add2Row(row, emptyCell,-1);
+            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
+                Choice c = usersDecisionVotes.getChoices().get(j);
+                TextView tvChoice = new TextView(getContext());
+                tvChoice.setText(c.getTitle());
+                tvChoice.setGravity(Gravity.CENTER);
+                tvChoice.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
+                tvChoice.setTypeface(tvChoice.getTypeface(), Typeface.BOLD);
+                tvChoice.setEllipsize(TextUtils.TruncateAt.END);
+                tvChoice.setLines(1);
+                tvChoice.setWidth(AndroidUtilities.dp(80));
+                add2Row(row, tvChoice,firstRowHeight);
+            }
+            tableLayout.addView(row);
+            fixedColumn.addView(emptyCell,ViewGroup.LayoutParams.WRAP_CONTENT, firstRowHeight);
+        }
+        // build second row
+        {
+            int secondRowHeight = AndroidUtilities.dp(33);
+
+            TextView emptyCell = new TextView(getContext());
+//            add2Row(row, emptyCell, -1);
+
+            TableRow row = newRow();
+            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
+                Choice c = usersDecisionVotes.getChoices().get(j);
+                TextView tvVoteCount = new TextView(getContext());
+                tvVoteCount.setTextSize(18);
+                tvVoteCount.setGravity(Gravity.CENTER);
+                tvVoteCount.setText(Integer.toString(c.getPositiveVoteCount()));
+                tvVoteCount.setHeight(secondRowHeight);
+                add2Row(row, tvVoteCount,secondRowHeight);
+            }
+            tableLayout.addView(row);
+            fixedColumn.addView(emptyCell,ViewGroup.LayoutParams.WRAP_CONTENT, secondRowHeight);
+        }
+
+        int otherRowHeight = AndroidUtilities.dp(33);
+
+        // build other row row
+        for(int i=0; i < usersDecisionVotes.getUsers().size() ;i++){
+            TableRow row = newRow();
+            TLRPC.User user = usersDecisionVotes.getUsers().get(i);
+
+            LinearLayout usernameLayout = new LinearLayout(getContext());
+            usernameLayout.setOrientation(LinearLayout.HORIZONTAL);
+            usernameLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, AndroidUtilities.dp(20)));
+            {
+                // Avatar image
+                BackupImageView avatarImageView = new BackupImageView(getContext());
+                avatarImageView.setRoundRadius(AndroidUtilities.dp(21));
+                TLRPC.FileLocation newPhoto = null;
+                if (user.photo != null)
+                    newPhoto = user.photo.photo_small;
+                AvatarDrawable avatarDrawable = new AvatarDrawable(user);
+                avatarImageView.setImage(newPhoto, "20_20", avatarDrawable);
+                int imageSize = otherRowHeight - 3;
+                usernameLayout.addView(avatarImageView, LayoutHelper.createFrame(30, 30,Gravity.CENTER,10,0,10,0));
+            }
+
+            {
+                // username
+                TextView userNameTv = new TextView(getContext());
+                userNameTv.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
+                userNameTv.setPadding(15, 0, 0, 0);
+                userNameTv.setEllipsize(TextUtils.TruncateAt.END);
+                userNameTv.setText(PolgramUtils.asString(user));
+                int maxWith = AndroidUtilities.dp(105);
+                userNameTv.setMaxWidth(maxWith);
+                userNameTv.setMaxLines(1);
+                userNameTv.setGravity(Gravity.CENTER_VERTICAL);
+
+                usernameLayout.addView(userNameTv, maxWith, ViewGroup.LayoutParams.WRAP_CONTENT);
+            }
+
+            // remind button
+            Button remindButton = new Button(getContext());
+            remindButton.setBackgroundResource(R.drawable.ic_smiles_bell_active);
+            remindButton.setGravity(Gravity.LEFT);
+            usernameLayout.addView(remindButton, LayoutHelper.createFrame(35, 35, Gravity.LEFT, 0, 3, 0, 0));
+            usernameLayout.setBackgroundResource(R.drawable.cell_normal);
+            fixedColumn.addView(usernameLayout, ViewGroup.LayoutParams.WRAP_CONTENT, otherRowHeight);
+            //   add2Row(row, linearLayout);
+
+            boolean atLeastOneIsNull = false;
+            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
+                Vote v = usersDecisionVotes.getVote(i, j);
+                View item;
+                if (v.isVote() != null) {
+                    ImageView vote = new ImageView(getContext());
+                    if (v.isVote()) {
+                        vote.setImageResource(R.drawable.checkbig);
+                        vote.setBackgroundResource(R.drawable.cell_vote_positive);
+                        add2Row(row, vote, otherRowHeight,R.drawable.cell_vote_positive);
+                    } else
+                        add2Row(row, vote, otherRowHeight, R.drawable.cell_vote_negative);
+                } else {
+                    atLeastOneIsNull = true;
+                    TextView noVoteTv = new TextView(getContext());
+                    noVoteTv.setText(R.string.no_vote_desc);
+                    noVoteTv.setTypeface(noVoteTv.getTypeface(), Typeface.BOLD);
+                    noVoteTv.setGravity(Gravity.CENTER);
+                    noVoteTv.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
+                    add2Row(row, noVoteTv, otherRowHeight,R.drawable.cell_vote_notpresent);
+                }
+            }
+            if (!atLeastOneIsNull)
+                remindButton.setVisibility(View.INVISIBLE);
+
+            tableLayout.addView(row);
+        }
+        return rootView;
+    }
+
+
+    private TableRow newRow(){
+        TableRow row = new TableRow(getContext());
+        row.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+                ViewGroup.LayoutParams.MATCH_PARENT));
+        return row;
+    }
+
+
+    private void add2Row(TableRow row, View view, int height, int drawableBackGround){
+        view.setPadding(11,11,11,11);
+        view.setBackgroundResource(drawableBackGround);
+        view.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+                height, Gravity.RIGHT));
+        row.addView(view, ViewGroup.LayoutParams.WRAP_CONTENT, height);
+    }
+
+    private void add2Row(TableRow row, View view, int heigth) {
+        add2Row(row, view, heigth, R.drawable.cell_normal);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
new file mode 100644
index 000000000..d96b8e937
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -0,0 +1,202 @@
+package org.pollgram.decision.ui;
+
+import android.animation.ObjectAnimator;
+import android.animation.StateListAnimator;
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Outline;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewOutlineProvider;
+import android.widget.AdapterView;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.pollgram.decision.adapter.DecisionAdapter;
+import org.pollgram.decision.dao.DecisionDAOImpl;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.utils.PolgramUtils;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.SizeNotifierFrameLayout;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by davide on 30/09/15.
+ */
+public class DecisionsListFragment extends BaseFragment {
+    private static int nextId = 1;
+    private static final int ID_TOGGLE_OPEN_CLOSE_DECISOINS = nextId++;
+
+    private TLRPC.ChatFull chatInfo;
+    private TLRPC.Chat currentChat;
+    private ListView decisionsListView;
+    private Context context;
+
+    private boolean hideCloseDecision;
+    private DecisionDAOImpl decisionDAO;
+    private int[] participantsUserIds;
+    private TextView tvSubtitle;
+
+    public DecisionsListFragment(){
+
+    }
+
+    public DecisionsListFragment(Bundle bundle) {
+        super(bundle);
+    }
+    // Since this is an object collection, use a FragmentStatePagerAdapter,
+// and NOT a FragmentPagerAdapter.
+
+
+    @Override
+    public boolean onFragmentCreate() {
+        decisionDAO = new DecisionDAOImpl();
+        hideCloseDecision = true;
+        return true;
+    }
+
+    @Override
+    public View createView(final Context context) {
+        this.context = context;
+
+        // set up action bar
+
+        PolgramUtils.init(actionBar, R.string.groupDecision, 22, R.drawable.decision);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        // Create menu
+        ActionBarMenu menu = actionBar.createMenu();
+        ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
+        final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISOINS,
+                context.getString(R.string.viewCloseDecision),0 );
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == ID_TOGGLE_OPEN_CLOSE_DECISOINS){
+                    hideCloseDecision = !hideCloseDecision;
+                    if (hideCloseDecision)
+                        viewOpenCloseTextView.setText(R.string.viewCloseDecision);
+                    else
+                        viewOpenCloseTextView.setText(R.string.hideCloseDecision);
+                    updateResult();
+                }
+            }
+        });
+
+        // inflate xml main layout
+        fragmentView = new SizeNotifierFrameLayout(context);
+        SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
+        LayoutInflater li = LayoutInflater.from(context);
+        View myView = li.inflate(R.layout.decision_list_layout, (ViewGroup) fragmentView);
+        TextView tvTitle = (TextView) myView.findViewById(R.id.decision_list_tv_title);
+        tvSubtitle = (TextView) myView.findViewById(R.id.decision_list_tv_subtitle);
+        ViewGroup imageContainer = (ViewGroup)myView.findViewById(R.id.decision_icon_container);
+        decisionsListView = (ListView) myView.findViewById(R.id.decision_list_list_view);
+        //myView.setBackground(ApplicationLoader.getCachedWallpaper());
+
+        // set up compoent values
+        tvTitle.setText(currentChat.title);
+        TLRPC.FileLocation newPhoto = currentChat.photo.photo_small;
+        BackupImageView avatarImageView= new BackupImageView(context);
+        avatarImageView.setRoundRadius(AndroidUtilities.dp(21));
+        imageContainer.addView(avatarImageView, LayoutHelper.createFrame(64, 64, Gravity.TOP | Gravity.LEFT, 0, 3, 0, 3));
+        avatarImageView.setImage(newPhoto, "50_50", new AvatarDrawable(currentChat));
+
+        decisionsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                Decision decision = (Decision) parent.getAdapter().getItem(position);
+//                Intent intent = new Intent(getParentActivity(), DecisionDetailFragment.class);
+//                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+//                intent.putExtra(DecisionDetailFragment.PAR_DECISION_ID, decision.getId());
+//                intent.putExtra(DecisionDetailFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
+//                getParentActivity().startActivity(intent);
+                Bundle bundle = new Bundle();
+                bundle.putLong(DecisionDetailFragment.PAR_DECISION_ID, decision.getId());
+                bundle.putIntArray(DecisionDetailFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
+                presentFragment(new DecisionDetailFragment(bundle));
+
+            }
+        });
+        updateResult();
+
+        // Addig "plus" floating button
+        /// TODO add to layout or createutil methosd ?
+        ImageView floatingButton = new ImageView(context);
+        floatingButton.setScaleType(ImageView.ScaleType.CENTER);
+        floatingButton.setBackgroundResource(R.drawable.floating_states);
+        floatingButton.setImageResource(R.drawable.floating_plus);
+        if (Build.VERSION.SDK_INT >= 21) {
+            StateListAnimator animator = new StateListAnimator();
+            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
+            animator.addState(new int[]{}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
+            floatingButton.setStateListAnimator(animator);
+            floatingButton.setOutlineProvider(new ViewOutlineProvider() {
+                @SuppressLint("NewApi")
+                @Override
+                public void getOutline(View view, Outline outline) {
+                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
+                }
+            });
+        }
+        contentView.addView(floatingButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 14));
+        floatingButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+//                Bundle args = new Bundle();
+//                args.putBoolean("destroyAfterSelect", true);
+//                presentFragment(new ContactsActivity(args));
+                Toast.makeText(context, "plus pressed", Toast.LENGTH_SHORT).show();
+
+            }
+        });
+        return fragmentView;
+    }
+
+    private void updateResult() {
+        Boolean queryPar = hideCloseDecision ? true : null;
+        List<Decision> allDecisions = decisionDAO.find(null);
+        List<Decision> filterDecision = new ArrayList<>();
+        int openCount = 0 ;
+        for (Decision d : allDecisions){
+            if (d.isOpen()){
+                openCount++;
+                filterDecision.add(d);
+            } else if (!hideCloseDecision)
+                filterDecision.add(d);
+        }
+
+        tvSubtitle.setText(context.getString(R.string.decisionsCount,openCount, allDecisions.size()));
+        decisionsListView.setAdapter(new DecisionAdapter(context, filterDecision, currentChat.participants_count));
+    }
+
+
+    public void setChatInfo(TLRPC.ChatFull chatInfo) {
+        this.chatInfo = chatInfo;
+        participantsUserIds = new int[chatInfo.participants.participants.size()];
+        for (int i = 0; i < chatInfo.participants.participants.size() ; i++){
+            participantsUserIds[i] = chatInfo.participants.participants.get(i).user_id;
+        }
+        this.currentChat = MessagesController.getInstance().getChat(chatInfo.id);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabLayout.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabLayout.java
new file mode 100644
index 000000000..21590531a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabLayout.java
@@ -0,0 +1,314 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.pollgram.decision.ui;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.os.Build;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.HorizontalScrollView;
+import android.widget.TextView;
+
+/**
+ * To be used with ViewPager to provide a tab indicator component which give constant feedback as to
+ * the user's scroll progress.
+ * <p>
+ * To use the component, simply add it to your view hierarchy. Then in your
+ * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call
+ * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.
+ * <p>
+ * The colors can be customized in two ways. The first and simplest is to provide an array of colors
+ * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The
+ * alternative is via the {@link TabColorizer} interface which provides you complete control over
+ * which color is used for any individual position.
+ * <p>
+ * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},
+ * providing the layout ID of your custom layout.
+ */
+public class SlidingTabLayout extends HorizontalScrollView {
+
+    /**
+     * Allows complete control over the colors drawn in the tab layout. Set with
+     * {@link #setCustomTabColorizer(TabColorizer)}.
+     */
+    public interface TabColorizer {
+
+        /**
+         * @return return the color of the indicator used when {@code position} is selected.
+         */
+        int getIndicatorColor(int position);
+
+        /**
+         * @return return the color of the divider drawn to the right of {@code position}.
+         */
+        int getDividerColor(int position);
+
+    }
+
+    private static final int TITLE_OFFSET_DIPS = 24;
+    private static final int TAB_VIEW_PADDING_DIPS = 16;
+    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;
+
+    private int mTitleOffset;
+
+    private int mTabViewLayoutId;
+    private int mTabViewTextViewId;
+
+    private ViewPager mViewPager;
+    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;
+
+    private final SlidingTabStrip mTabStrip;
+
+    public SlidingTabLayout(Context context) {
+        this(context, null);
+    }
+
+    public SlidingTabLayout(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        // Disable the Scroll Bar
+        setHorizontalScrollBarEnabled(false);
+        // Make sure that the Tab Strips fills this View
+        setFillViewport(true);
+
+        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);
+
+        mTabStrip = new SlidingTabStrip(context);
+        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+    }
+
+    /**
+     * Set the custom {@link TabColorizer} to be used.
+     *
+     * If you only require simple custmisation then you can use
+     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve
+     * similar effects.
+     */
+    public void setCustomTabColorizer(TabColorizer tabColorizer) {
+        mTabStrip.setCustomTabColorizer(tabColorizer);
+    }
+
+    /**
+     * Sets the colors to be used for indicating the selected tab. These colors are treated as a
+     * circular array. Providing one color will mean that all tabs are indicated with the same color.
+     */
+    public void setSelectedIndicatorColors(int... colors) {
+        mTabStrip.setSelectedIndicatorColors(colors);
+    }
+
+    /**
+     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.
+     * Providing one color will mean that all tabs are indicated with the same color.
+     */
+    public void setDividerColors(int... colors) {
+        mTabStrip.setDividerColors(colors);
+    }
+
+    /**
+     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are
+     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so
+     * that the layout can update it's scroll position correctly.
+     *
+     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)
+     */
+    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {
+        mViewPagerPageChangeListener = listener;
+    }
+
+    /**
+     * Set the custom layout to be inflated for the tab views.
+     *
+     * @param layoutResId Layout id to be inflated
+     * @param textViewId id of the {@link TextView} in the inflated view
+     */
+    public void setCustomTabView(int layoutResId, int textViewId) {
+        mTabViewLayoutId = layoutResId;
+        mTabViewTextViewId = textViewId;
+    }
+
+    /**
+     * Sets the associated view pager. Note that the assumption here is that the pager content
+     * (number of tabs and tab titles) does not change after this call has been made.
+     */
+    public void setViewPager(ViewPager viewPager) {
+        mTabStrip.removeAllViews();
+
+        mViewPager = viewPager;
+        if (viewPager != null) {
+            viewPager.setOnPageChangeListener(new InternalViewPagerListener());
+            populateTabStrip();
+        }
+    }
+
+    /**
+     * Create a default view to be used for tabs. This is called if a custom tab view is not set via
+     * {@link #setCustomTabView(int, int)}.
+     */
+    protected TextView createDefaultTabView(Context context) {
+        TextView textView = new TextView(context);
+        textView.setGravity(Gravity.CENTER);
+        textView.setTypeface(Typeface.DEFAULT_BOLD);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            // If we're running on Honeycomb or newer, then we can use the Theme's
+            // selectableItemBackground to ensure that the View has a pressed state
+            TypedValue outValue = new TypedValue();
+            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,
+                    outValue, true);
+            textView.setBackgroundResource(outValue.resourceId);
+        }
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style
+            textView.setAllCaps(true);
+        }
+
+        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);
+        textView.setPadding(padding, padding, padding, padding);
+
+        return textView;
+    }
+
+    private void populateTabStrip() {
+        final PagerAdapter adapter = mViewPager.getAdapter();
+        final View.OnClickListener tabClickListener = new TabClickListener();
+
+        for (int i = 0; i < adapter.getCount(); i++) {
+            View tabView = null;
+            TextView tabTitleView = null;
+
+            if (mTabViewLayoutId != 0) {
+                // If there is a custom tab view layout id set, try and inflate it
+                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,
+                        false);
+                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);
+            }
+
+            if (tabView == null) {
+                tabView = createDefaultTabView(getContext());
+            }
+
+            if (tabTitleView == null && TextView.class.isInstance(tabView)) {
+                tabTitleView = (TextView) tabView;
+            }
+
+            tabTitleView.setText(adapter.getPageTitle(i));
+            tabView.setOnClickListener(tabClickListener);
+
+            mTabStrip.addView(tabView, getResources().getDisplayMetrics().widthPixels / adapter.getCount() , ViewGroup.LayoutParams.WRAP_CONTENT);
+        }
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+
+        if (mViewPager != null) {
+            scrollToTab(mViewPager.getCurrentItem(), 0);
+        }
+    }
+
+    private void scrollToTab(int tabIndex, int positionOffset) {
+        final int tabStripChildCount = mTabStrip.getChildCount();
+        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {
+            return;
+        }
+
+        View selectedChild = mTabStrip.getChildAt(tabIndex);
+        if (selectedChild != null) {
+            int targetScrollX = selectedChild.getLeft() + positionOffset;
+
+            if (tabIndex > 0 || positionOffset > 0) {
+                // If we're not at the first child and are mid-scroll, make sure we obey the offset
+                targetScrollX -= mTitleOffset;
+            }
+
+            scrollTo(targetScrollX, 0);
+        }
+    }
+
+    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {
+        private int mScrollState;
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+            int tabStripChildCount = mTabStrip.getChildCount();
+            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {
+                return;
+            }
+
+            mTabStrip.onViewPagerPageChanged(position, positionOffset);
+
+            View selectedTitle = mTabStrip.getChildAt(position);
+            int extraOffset = (selectedTitle != null)
+                    ? (int) (positionOffset * selectedTitle.getWidth())
+                    : 0;
+            scrollToTab(position, extraOffset);
+
+            if (mViewPagerPageChangeListener != null) {
+                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,
+                        positionOffsetPixels);
+            }
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            mScrollState = state;
+
+            if (mViewPagerPageChangeListener != null) {
+                mViewPagerPageChangeListener.onPageScrollStateChanged(state);
+            }
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {
+                mTabStrip.onViewPagerPageChanged(position, 0f);
+                scrollToTab(position, 0);
+            }
+
+            if (mViewPagerPageChangeListener != null) {
+                mViewPagerPageChangeListener.onPageSelected(position);
+            }
+        }
+
+    }
+
+    private class TabClickListener implements View.OnClickListener {
+        @Override
+        public void onClick(View v) {
+            for (int i = 0; i < mTabStrip.getChildCount(); i++) {
+                if (v == mTabStrip.getChildAt(i)) {
+                    mViewPager.setCurrentItem(i);
+                    return;
+                }
+            }
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabStrip.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabStrip.java
new file mode 100644
index 000000000..32778e117
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SlidingTabStrip.java
@@ -0,0 +1,207 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.pollgram.decision.ui;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.LinearLayout;
+
+class SlidingTabStrip extends LinearLayout {
+
+    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;
+    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;
+    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;
+    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;
+
+    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;
+    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;
+    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;
+
+    private final int mBottomBorderThickness;
+    private final Paint mBottomBorderPaint;
+
+    private final int mSelectedIndicatorThickness;
+    private final Paint mSelectedIndicatorPaint;
+
+    private final int mDefaultBottomBorderColor;
+
+    private final Paint mDividerPaint;
+    private final float mDividerHeight;
+
+    private int mSelectedPosition;
+    private float mSelectionOffset;
+
+    private SlidingTabLayout.TabColorizer mCustomTabColorizer;
+    private final SimpleTabColorizer mDefaultTabColorizer;
+
+    SlidingTabStrip(Context context) {
+        this(context, null);
+    }
+
+    SlidingTabStrip(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        setWillNotDraw(false);
+
+        final float density = getResources().getDisplayMetrics().density;
+
+        TypedValue outValue = new TypedValue();
+        context.getTheme().resolveAttribute(android.R.attr.colorForeground, outValue, true);
+        final int themeForegroundColor =  outValue.data;
+
+        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,
+                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);
+
+        mDefaultTabColorizer = new SimpleTabColorizer();
+        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);
+        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,
+                DEFAULT_DIVIDER_COLOR_ALPHA));
+
+        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);
+        mBottomBorderPaint = new Paint();
+        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);
+
+        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);
+        mSelectedIndicatorPaint = new Paint();
+
+        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;
+        mDividerPaint = new Paint();
+        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));
+    }
+
+    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {
+        mCustomTabColorizer = customTabColorizer;
+        invalidate();
+    }
+
+    void setSelectedIndicatorColors(int... colors) {
+        // Make sure that the custom colorizer is removed
+        mCustomTabColorizer = null;
+        mDefaultTabColorizer.setIndicatorColors(colors);
+        invalidate();
+    }
+
+    void setDividerColors(int... colors) {
+        // Make sure that the custom colorizer is removed
+        mCustomTabColorizer = null;
+        mDefaultTabColorizer.setDividerColors(colors);
+        invalidate();
+    }
+
+    void onViewPagerPageChanged(int position, float positionOffset) {
+        mSelectedPosition = position;
+        mSelectionOffset = positionOffset;
+        invalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        final int height = getHeight();
+        final int childCount = getChildCount();
+        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);
+        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null
+                ? mCustomTabColorizer
+                : mDefaultTabColorizer;
+
+        // Thick colored underline below the current selection
+        if (childCount > 0) {
+            View selectedTitle = getChildAt(mSelectedPosition);
+            int left = selectedTitle.getLeft();
+            int right = selectedTitle.getRight();
+            int color = tabColorizer.getIndicatorColor(mSelectedPosition);
+
+            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {
+                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);
+                if (color != nextColor) {
+                    color = blendColors(nextColor, color, mSelectionOffset);
+                }
+
+                // Draw the selection partway between the tabs
+                View nextTitle = getChildAt(mSelectedPosition + 1);
+                left = (int) (mSelectionOffset * nextTitle.getLeft() +
+                        (1.0f - mSelectionOffset) * left);
+                right = (int) (mSelectionOffset * nextTitle.getRight() +
+                        (1.0f - mSelectionOffset) * right);
+            }
+
+            mSelectedIndicatorPaint.setColor(color);
+
+            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,
+                    height, mSelectedIndicatorPaint);
+        }
+
+        // Thin underline along the entire bottom edge
+        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);
+
+        // Vertical separators between the titles
+        int separatorTop = (height - dividerHeightPx) / 2;
+        for (int i = 0; i < childCount - 1; i++) {
+            View child = getChildAt(i);
+            mDividerPaint.setColor(tabColorizer.getDividerColor(i));
+            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),
+                    separatorTop + dividerHeightPx, mDividerPaint);
+        }
+    }
+
+    /**
+     * Set the alpha value of the {@code color} to be the given {@code alpha} value.
+     */
+    private static int setColorAlpha(int color, byte alpha) {
+        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));
+    }
+
+    /**
+     * Blend {@code color1} and {@code color2} using the given ratio.
+     *
+     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,
+     *              0.0 will return {@code color2}.
+     */
+    private static int blendColors(int color1, int color2, float ratio) {
+        final float inverseRation = 1f - ratio;
+        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);
+        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);
+        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);
+        return Color.rgb((int) r, (int) g, (int) b);
+    }
+
+    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {
+        private int[] mIndicatorColors;
+        private int[] mDividerColors;
+
+        @Override
+        public final int getIndicatorColor(int position) {
+            return mIndicatorColors[position % mIndicatorColors.length];
+        }
+
+        @Override
+        public final int getDividerColor(int position) {
+            return mDividerColors[position % mDividerColors.length];
+        }
+
+        void setIndicatorColors(int... colors) {
+            mIndicatorColors = colors;
+        }
+
+        void setDividerColors(int... colors) {
+            mDividerColors = colors;
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
new file mode 100644
index 000000000..275f8cdb0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
@@ -0,0 +1,56 @@
+package org.pollgram.decision.utils;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.Components.FrameLayoutFixed;
+import org.telegram.ui.Components.LayoutHelper;
+
+/**
+ * Created by davide on 08/10/15.
+ */
+public class PolgramUtils {
+
+    public static ActionBar init(ActionBar actionBar, int title,int titleFontSize, int drawableIcon){
+        return init(actionBar, ApplicationLoader.applicationContext.getString(title), titleFontSize,drawableIcon);
+    }
+
+    public static ActionBar init(ActionBar actionBar, String title,int titleFontSize, int drawableIcon){
+        // set up poll icon
+        Context context = ApplicationLoader.applicationContext;
+        FrameLayoutFixed pollIconContainer = new FrameLayoutFixed(context);
+        pollIconContainer.setBackgroundResource(R.drawable.bar_selector);
+        if (drawableIcon != -1) {
+            pollIconContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+            TextView pollIcon = new TextView(context);
+            pollIcon.setBackgroundResource(drawableIcon);
+            pollIconContainer.addView(pollIcon, LayoutHelper.createFrame(42, 42, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 8));
+        }
+        TextView txtTitle = new TextView(context);
+        txtTitle.setTextColor(0xffffffff);
+        txtTitle.setTextSize(TypedValue.COMPLEX_UNIT_DIP, titleFontSize);
+        txtTitle.setLines(1);
+        txtTitle.setMaxLines(1);
+        txtTitle.setSingleLine(true);
+        txtTitle.setEllipsize(TextUtils.TruncateAt.END);
+        txtTitle.setGravity(Gravity.LEFT);
+        txtTitle.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+        txtTitle.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        txtTitle.setText(title);
+        pollIconContainer.addView(txtTitle, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,
+                Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 22));
+
+        actionBar.addView(pollIconContainer,  LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT,
+                Gravity.TOP | Gravity.LEFT, 56, 0, 40, 0));
+
+        return actionBar;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
deleted file mode 100644
index d3ab70f97..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-public class BuildVars {
-    // TODO check missing keys
-    public static boolean DEBUG_VERSION = false;
-    public static int BUILD_VERSION = 627;
-    public static int APP_ID = 45847; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = "3657d74034b1b07ec6ee8376570e8197"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-//    public static String HOCKEY_APP_HASH = null;
-    public static String GCM_SENDER_ID = "760348033672";
-    public static String SEND_LOGS_EMAIL = "davide.pallaoro@gmail.com";
-    public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
-    public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
-    public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
-    public static String FOURSQUARE_API_VERSION = "20150326";
-}
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/unknown_vote.png b/TMessagesProj/src/main/res/drawable-hdpi/unknown_vote.png
new file mode 100644
index 000000000..39d41098e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/unknown_vote.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/unknown_vote.png b/TMessagesProj/src/main/res/drawable-mdpi/unknown_vote.png
new file mode 100644
index 000000000..39d41098e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/unknown_vote.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/unknown_vote.png b/TMessagesProj/src/main/res/drawable-xhdpi/unknown_vote.png
new file mode 100644
index 000000000..c83c7fd38
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/unknown_vote.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/unknown_vote.png b/TMessagesProj/src/main/res/drawable-xxhdpi/unknown_vote.png
new file mode 100644
index 000000000..39d41098e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/unknown_vote.png differ
diff --git a/TMessagesProj/src/main/res/drawable/cell_normal.xml b/TMessagesProj/src/main/res/drawable/cell_normal.xml
new file mode 100644
index 000000000..90343c178
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/cell_normal.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <stroke
+        android:width="0.01dp"
+        android:color="@android:color/black" />
+    <solid
+        android:color="#ffb9b9" />
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/cell_vote_negative.xml b/TMessagesProj/src/main/res/drawable/cell_vote_negative.xml
new file mode 100644
index 000000000..90343c178
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/cell_vote_negative.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <stroke
+        android:width="0.01dp"
+        android:color="@android:color/black" />
+    <solid
+        android:color="#ffb9b9" />
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/cell_vote_notpresent.xml b/TMessagesProj/src/main/res/drawable/cell_vote_notpresent.xml
new file mode 100644
index 000000000..7fd8625c0
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/cell_vote_notpresent.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <stroke
+        android:width="0.01dp"
+        android:color="@android:color/black" />
+    <solid
+        android:color="#fff8b9" />
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/cell_vote_positive.xml b/TMessagesProj/src/main/res/drawable/cell_vote_positive.xml
new file mode 100644
index 000000000..454379439
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/cell_vote_positive.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <stroke
+        android:width="0.01dp"
+        android:color="@android:color/black" />
+    <solid
+        android:color="#83e370" />
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_detail_main.xml b/TMessagesProj/src/main/res/layout/decision_detail_main.xml
new file mode 100644
index 000000000..db19aae09
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_detail_main.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/pager"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" />
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_list_layout.xml b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
new file mode 100644
index 000000000..3509b8411
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_no_option_present.xml b/TMessagesProj/src/main/res/layout/decision_no_option_present.xml
new file mode 100644
index 000000000..3509b8411
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_no_option_present.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_list.xml b/TMessagesProj/src/main/res/layout/decision_option_list.xml
new file mode 100644
index 000000000..3509b8411
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_option_list.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_table.xml b/TMessagesProj/src/main/res/layout/decision_option_table.xml
new file mode 100644
index 000000000..8469a4445
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_option_table.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent">
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_table_row.xml b/TMessagesProj/src/main/res/layout/decision_option_table_row.xml
new file mode 100644
index 000000000..3509b8411
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/decision_option_table_row.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/fragment_collection_object.xml b/TMessagesProj/src/main/res/layout/fragment_collection_object.xml
new file mode 100644
index 000000000..945bf066b
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/fragment_collection_object.xml
@@ -0,0 +1,23 @@
+<!--
+  Copyright 2012 The Android Open Source Project
+  
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+  
+      http://www.apache.org/licenses/LICENSE-2.0
+  
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center"
+    android:textSize="128sp"
+    android:padding="32dp" />
diff --git a/TMessagesProj/src/main/res/layout/item_decision.xml b/TMessagesProj/src/main/res/layout/item_decision.xml
new file mode 100644
index 000000000..3509b8411
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/item_decision.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/option_choice.xml b/TMessagesProj/src/main/res/layout/option_choice.xml
new file mode 100644
index 000000000..b8f10dbe3
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/option_choice.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent">
+
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/item_option_iv_image"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:background="@drawable/attach_file"
+        android:padding="2dp"
+        android:paddingLeft="2dp"
+        android:paddingTop="2dp"
+        android:paddingRight="2dp"
+        android:paddingBottom="2dp" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text="Title"
+        android:id="@+id/item_option_tv_title"
+        android:paddingLeft="10dp"
+        android:layout_toRightOf="@+id/item_option_iv_image"
+        android:layout_alignParentTop="true"
+        android:layout_toStartOf="@+id/item_option_sw_bar"
+        android:layout_toLeftOf="@+id/item_option_sw_bar" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:text="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. "
+        android:id="@+id/item_option_tv_subtitle"
+        android:paddingLeft="10dp"
+        android:layout_below="@+id/item_option_tv_title"
+        android:layout_toRightOf="@+id/item_option_iv_image"
+        android:maxLines="2"
+        android:layout_toLeftOf="@+id/item_option_sw_bar"
+        android:layout_toStartOf="@+id/item_option_sw_bar" />
+
+    <CheckBox
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/item_option_cb"
+        android:checked="false"
+        android:scaleX="2.3"
+        android:scaleY="2.3"
+        android:paddingLeft="3dp"
+        android:paddingRight="3dp"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignBottom="@+id/item_option_sw_bar" />
+
+    <SurfaceView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/item_choice_sw_bar"
+        android:layout_toLeftOf="@+id/item_option_cb"
+        android:layout_toStartOf="@+id/item_option_cb"
+        android:layout_alignParentTop="true"
+        android:layout_alignBottom="@+id/item_option_tv_subtitle" />
+
+</RelativeLayout>
\ No newline at end of file
