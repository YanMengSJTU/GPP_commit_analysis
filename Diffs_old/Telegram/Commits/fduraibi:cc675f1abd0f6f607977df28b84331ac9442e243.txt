diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 3caacf477..ab347d7c4 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -18,7 +18,7 @@ tasks.withType(JavaCompile) {
 
 dependencies {
     compile 'com.android.support:support-v4:19.0.+'
-    compile 'com.google.android.gms:play-services:4.1.+'
+    compile 'com.google.android.gms:play-services:3.2.+'
     compile 'net.hockeyapp.android:HockeySDK:3.0.1'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
 }
@@ -83,7 +83,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 293
+        versionCode 307
         versionName "1.7.0"
     }
 }
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index cc7b1065c..c447bd4da 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -28,7 +28,6 @@
         android:largeHeap="true">
 
         <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyDfugHaHLqphn7nplv7HPd6G92hA7ZttVU" />
-        <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index cc7b1065c..c447bd4da 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -28,7 +28,6 @@
         android:largeHeap="true">
 
         <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyDfugHaHLqphn7nplv7HPd6G92hA7ZttVU" />
-        <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
diff --git a/TMessagesProj/jni/fake.c b/TMessagesProj/jni/fake.c
index 95b86f6fe..b484b63f0 100644
--- a/TMessagesProj/jni/fake.c
+++ b/TMessagesProj/jni/fake.c
@@ -2,5 +2,5 @@
 
 void fakeFunction() {
     printf("some androids has buggy native loader, so i should check size of libs in java to know that native library is correct. So each changed native library should has diffrent size in different app versions. This function will increase lib size for few bytes :)");
-    printf("bla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla");
+    printf("bla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla");
 }
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.so
index f5677c7df..a5f1bd92a 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.so b/TMessagesProj/libs/armeabi/libtmessages.so
index bc96b1c3c..7a0c442c1 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.so and b/TMessagesProj/libs/armeabi/libtmessages.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.so b/TMessagesProj/libs/x86/libtmessages.so
index c8bb5c7fc..ff282dc07 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.so and b/TMessagesProj/libs/x86/libtmessages.so differ
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 33d2b4bf1..9da8a3b51 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -47,10 +47,7 @@
     private final Integer observerLock = 1;
     public boolean contactsLoaded = false;
     private boolean contactsBookLoaded = false;
-    private int lastContactsPhonesCount = -1;
-    private int lastContactsPhonesMaxId = -1;
-    private int lastContactsNamesCount = -1;
-    private int lastContactsNamesMaxId = -1;
+    private String lastContactsVersions = "";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<Integer>();
 
     public static class Contact {
@@ -119,10 +116,7 @@ public void cleanup() {
         contactsSyncInProgress = false;
         contactsLoaded = false;
         contactsBookLoaded = false;
-        lastContactsPhonesCount = -1;
-        lastContactsPhonesMaxId = -1;
-        lastContactsNamesCount = -1;
-        lastContactsNamesMaxId = -1;
+        lastContactsVersions = "";
     }
 
     public void checkAppAccount() {
@@ -191,70 +185,17 @@ private boolean checkContactsInternal() {
             ContentResolver cr = ApplicationLoader.applicationContext.getContentResolver();
             Cursor pCur = null;
             try {
-                pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[]{ContactsContract.CommonDataKinds.Phone._ID}, null, null, ContactsContract.CommonDataKinds.Phone._ID + " desc LIMIT 1");
-                if (pCur != null) {
-                    if (pCur.getCount() > 0 && pCur.moveToFirst()) {
-                        int value = pCur.getInt(0);
-                        if (lastContactsPhonesMaxId != -1 && value != lastContactsPhonesMaxId) {
-                            reload = true;
-                        }
-                        lastContactsPhonesMaxId = value;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (pCur != null) {
-                    pCur.close();
-                }
-            }
-            try {
-                pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[]{ContactsContract.CommonDataKinds.Phone._COUNT}, null, null, null);
-                if (pCur != null) {
-                    if (pCur.getCount() > 0 && pCur.moveToFirst()) {
-                        int value = pCur.getInt(0);
-                        if (lastContactsPhonesCount != -1 && value != lastContactsPhonesCount) {
-                            reload = true;
-                        }
-                        lastContactsPhonesCount = value;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (pCur != null) {
-                    pCur.close();
-                }
-            }
-            try {
-                pCur = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._COUNT}, ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, null);
-                if (pCur != null) {
-                    if (pCur.getCount() > 0 && pCur.moveToFirst()) {
-                        int value = pCur.getInt(0);
-                        if (lastContactsNamesCount != -1 && value != lastContactsNamesCount) {
-                            reload = true;
-                        }
-                        lastContactsNamesCount = value;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (pCur != null) {
-                    pCur.close();
+                pCur = cr.query(ContactsContract.RawContacts.CONTENT_URI, new String[]{ContactsContract.RawContacts.VERSION}, null, null, null);
+                StringBuilder currentVersion = new StringBuilder();
+                while (pCur.moveToNext()) {
+                    int col = pCur.getColumnIndex(ContactsContract.RawContacts.VERSION);
+                    currentVersion.append(pCur.getString(col));
                 }
-            }
-            try {
-                pCur = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._ID}, ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, ContactsContract.Data._ID + " desc LIMIT 1");
-                if (pCur != null) {
-                    if (pCur.getCount() > 0 && pCur.moveToFirst()) {
-                        int value = pCur.getInt(0);
-                        if (lastContactsNamesMaxId != -1 && value != lastContactsNamesMaxId) {
-                            reload = true;
-                        }
-                        lastContactsNamesMaxId = value;
-                    }
+                String newContactsVersion = currentVersion.toString();
+                if (lastContactsVersions.length() != 0 && !lastContactsVersions.equals(newContactsVersion)) {
+                    reload = true;
                 }
+                lastContactsVersions = newContactsVersion;
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             } finally {
@@ -368,7 +309,7 @@ public void run() {
                     String sname2 = pCur.getString(3);
                     String mname = pCur.getString(4);
                     Contact contact = contactsMap.get(id);
-                    if (contact != null) {
+                    if (contact != null && contact.first_name.length() == 0 && contact.last_name.length() == 0) {
                         contact.first_name = fname;
                         contact.last_name = sname;
                         if (contact.first_name == null) {
@@ -535,7 +476,8 @@ public void run() {
                             }
                         }
 
-                        if (existing == null || existing != null && (!existing.first_name.equals(value.first_name) || !existing.last_name.equals(value.last_name))) {
+                        boolean nameChanged = existing != null && (!existing.first_name.equals(value.first_name) || !existing.last_name.equals(value.last_name));
+                        if (existing == null || nameChanged) {
                             for (int a = 0; a < value.phones.size(); a++) {
                                 String sphone = value.shortPhones.get(a);
                                 contactsBookShort.put(sphone, value);
@@ -550,7 +492,7 @@ public void run() {
                                     }
                                 }
                                 if (request) {
-                                    if (contactsByPhone.containsKey(sphone)) {
+                                    if (!nameChanged && contactsByPhone.containsKey(sphone)) {
                                         continue;
                                     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 62eb05567..75714fcbb 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -92,6 +92,8 @@
 
     public boolean enableJoined = true;
     public int fontSize = AndroidUtilities.dp(16);
+    public int maxGroupCount = 200;
+    public int maxBroadcastCount = 100;
 
     private TLRPC.ChatParticipants currentChatInfo = null;
     private int chatParticipantsId = 0;
@@ -191,9 +193,26 @@ public MessagesController() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
         enableJoined = preferences.getBoolean("EnableContactJoined", true);
         preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        maxGroupCount = preferences.getInt("maxGroupCount", 200);
+        maxBroadcastCount = preferences.getInt("maxBroadcastCount", 100);
         fontSize = preferences.getInt("fons_size", 16);
     }
 
+    public void updateConfig(final TLRPC.TL_config config) {
+        Utilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                maxBroadcastCount = config.broadcast_size_max;
+                maxGroupCount = config.chat_size_max;
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putInt("maxGroupCount", maxGroupCount);
+                editor.putInt("maxBroadcastCount", maxBroadcastCount);
+                editor.commit();
+            }
+        });
+    }
+
     public void addSupportUser() {
         TLRPC.TL_userForeign user = new TLRPC.TL_userForeign();
         user.phone = "333";
@@ -708,6 +727,23 @@ public void getMediaCount(final long uid, final int classGuid, boolean fromCache
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
                         final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                        MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                for (TLRPC.User user : res.users) {
+                                    users.put(user.id, user);
+                                    if (user.id == UserConfig.getClientUserId()) {
+                                        UserConfig.setCurrentUser(user);
+                                    }
+                                }
+                                for (TLRPC.Chat chat : res.chats) {
+                                    chats.put(chat.id, chat);
+                                }
+                            }
+                        });
+
                         if (res instanceof TLRPC.TL_messages_messagesSlice) {
                             processLoadedMediaCount(res.count, uid, classGuid, false);
                         } else {
@@ -777,10 +813,20 @@ public void deleteDialog(final long did, int offset, final boolean onlyHistory)
                     dialog.unread_count = 0;
                 }
                 dialogMessage.remove(dialog.top_message);
-                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
-                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                dialogsToUpdate.put(did, 0);
-                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                dialogsToUpdate.put(did, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                            }
+                        });
+                    }
+                });
                 MessagesStorage.getInstance().deleteDialog(did, onlyHistory);
                 NotificationCenter.getInstance().postNotificationName(removeAllMessagesFromDialog, did);
                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -846,10 +892,10 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void loadChatInfo(final int chat_id) {
+    public void loadChatInfo(final int chat_id, Semaphore semaphore) {
         currentChatInfo = null;
         chatParticipantsId = chat_id;
-        MessagesStorage.getInstance().loadChatInfo(chat_id);
+        MessagesStorage.getInstance().loadChatInfo(chat_id, semaphore);
     }
 
     public void processChatInfo(final int chat_id, final TLRPC.ChatParticipants info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache) {
@@ -1101,10 +1147,10 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void loadMessages(final long dialog_id, final int offset, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, boolean from_unread, boolean forward) {
+    public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, boolean from_unread, boolean forward) {
         int lower_part = (int)dialog_id;
         if (fromCache || lower_part == 0) {
-            MessagesStorage.getInstance().getMessages(dialog_id, offset, count, max_id, midDate, classGuid, from_unread, forward);
+            MessagesStorage.getInstance().getMessages(dialog_id, count, max_id, midDate, classGuid, from_unread, forward);
         } else {
             TLRPC.TL_messages_getHistory req = new TLRPC.TL_messages_getHistory();
             if (lower_part < 0) {
@@ -1121,7 +1167,7 @@ public void loadMessages(final long dialog_id, final int offset, final int count
                     req.peer.user_id = user.id;
                 }
             }
-            req.offset = offset;
+            req.offset = 0;
             req.limit = count;
             req.max_id = max_id;
             long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -1129,7 +1175,7 @@ public void loadMessages(final long dialog_id, final int offset, final int count
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
                         final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                        processLoadedMessages(res, dialog_id, offset, count, max_id, false, classGuid, 0, 0, 0, 0, false);
+                        processLoadedMessages(res, dialog_id, count, max_id, false, classGuid, 0, 0, 0, 0, false);
                     }
                 }
             });
@@ -1137,7 +1183,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int offset, final int count, final int max_id, final boolean isCache, final int classGuid, final int first_unread, final int last_unread, final int unread_count, final int last_date, final boolean isForward) {
+    public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int count, final int max_id, final boolean isCache, final int classGuid, final int first_unread, final int last_unread, final int unread_count, final int last_date, final boolean isForward) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -1149,7 +1195,7 @@ public void run() {
                     Utilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            loadMessages(dialog_id, offset, count, max_id, false, 0, classGuid, false, false);
+                            loadMessages(dialog_id, count, max_id, false, 0, classGuid, false, false);
                         }
                     });
                     return;
@@ -1187,7 +1233,7 @@ public void run() {
                                 chats.put(c.id, c);
                             }
                         }
-                        NotificationCenter.getInstance().postNotificationName(messagesDidLoaded, dialog_id, offset, count, objects, isCache, first_unread, last_unread, unread_count, last_date, isForward);
+                        NotificationCenter.getInstance().postNotificationName(messagesDidLoaded, dialog_id, count, objects, isCache, first_unread, last_unread, unread_count, last_date, isForward);
                     }
                 });
             }
@@ -1345,7 +1391,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             }
                         });
                         for (TLRPC.TL_dialog d : dialogs) {
-                            if ((int)d.id != 0) {
+                            int high_id = (int)(d.id >> 32);
+                            if ((int)d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
                             }
                         }
@@ -1509,7 +1556,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             }
                         });
                         for (TLRPC.TL_dialog d : dialogs) {
-                            if ((int)d.id != 0) {
+                            int high_id = (int)(d.id >> 32);
+                            if ((int)d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
                             }
                         }
@@ -1558,7 +1606,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         }
     }
 
-    public void markDialogAsRead(final long dialog_id, final int max_id, final int max_positive_id, final int offset, final int max_date, final boolean was) {
+    public void markDialogAsRead(final long dialog_id, final int max_id, final int max_positive_id, final int offset, final int max_date, final boolean was, final boolean popup) {
         int lower_part = (int)dialog_id;
         int high_id = (int)(dialog_id >> 32);
 
@@ -1584,7 +1632,6 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
             req.max_id = max_positive_id;
             req.offset = offset;
             if (offset == 0) {
-                NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id);
                 MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, false);
                 MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                     @Override
@@ -1597,9 +1644,12 @@ public void run() {
                                     dialog.unread_count = 0;
                                     NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                                 }
-                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                                dialogsToUpdate.put(dialog_id, 0);
-                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                                if (!popup) {
+                                    NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id);
+                                    HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                    dialogsToUpdate.put(dialog_id, 0);
+                                    NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                                }
                             }
                         });
                     }
@@ -1613,7 +1663,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, true);
                             TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
                             if (res.offset > 0) {
-                                markDialogAsRead(dialog_id, 0, max_positive_id, res.offset, max_date, was);
+                                markDialogAsRead(dialog_id, 0, max_positive_id, res.offset, max_date, was, popup);
                             }
 
                             if (MessagesStorage.lastSeqValue + 1 == res.seq) {
@@ -1653,7 +1703,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
             if (max_date == 0) {
                 return;
             }
-            NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0);
             TLRPC.EncryptedChat chat = encryptedChats.get(high_id);
             if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
                 TLRPC.TL_messages_readEncryptedHistory req = new TLRPC.TL_messages_readEncryptedHistory();
@@ -1677,6 +1726,7 @@ public void run() {
                     Utilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0);
                             TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
                             if (dialog != null) {
                                 dialog.unread_count = 0;
@@ -3694,14 +3744,19 @@ public void run() {
                                                     updateInterfaceWithMessages(key, value);
                                                 }
                                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                                                if (!pushMessages.isEmpty()) {
-                                                    NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
-                                                }
                                             }
                                         });
                                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                                             @Override
                                             public void run() {
+                                                if (!pushMessages.isEmpty()) {
+                                                    Utilities.RunOnUIThread(new Runnable() {
+                                                        @Override
+                                                        public void run() {
+                                                            NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
+                                                        }
+                                                    });
+                                                }
                                                 MessagesStorage.getInstance().startTransaction(false);
                                                 MessagesStorage.getInstance().putMessages(res.new_messages, false, false, false);
                                                 MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, false);
@@ -3796,13 +3851,24 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (!obj.isFromMe() && obj.isUnread()) {
-                                NotificationsController.getInstance().processNewMessages(objArr, true);
-                            }
+
                             updateInterfaceWithMessages(-updates.chat_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                         }
                     });
+                    MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            Utilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    if (!obj.isFromMe() && obj.isUnread()) {
+                                        NotificationsController.getInstance().processNewMessages(objArr, true);
+                                    }
+                                }
+                            });
+                        }
+                    });
                     MessagesStorage.getInstance().putMessages(arr, false, true, false);
                 } else if (MessagesStorage.lastSeqValue != updates.seq) {
                     FileLog.e("tmessages", "need get diff TL_updateShortChatMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
@@ -3851,13 +3917,23 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (!obj.isFromMe() && obj.isUnread()) {
-                                NotificationsController.getInstance().processNewMessages(objArr, true);
-                            }
                             updateInterfaceWithMessages(updates.from_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                         }
                     });
+                    MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            Utilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    if (!obj.isFromMe() && obj.isUnread()) {
+                                        NotificationsController.getInstance().processNewMessages(objArr, true);
+                                    }
+                                }
+                            });
+                        }
+                    });
                     MessagesStorage.getInstance().putMessages(arr, false, true, false);
                 } else if (MessagesStorage.lastSeqValue != updates.seq) {
                     FileLog.e("tmessages", "need get diff TL_updateShortMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
@@ -4266,7 +4342,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                                 }
                             });
                             for (TLRPC.TL_dialog d : dialogs) {
-                                if ((int)d.id != 0) {
+                                int high_id = (int)(d.id >> 32);
+                                if ((int)d.id != 0 && high_id != 1) {
                                     dialogsServerOnly.add(d);
                                 }
                             }
@@ -4328,6 +4405,20 @@ public void run() {
             ContactsController.getInstance().processContactsUpdates(contactsIds, usersDict);
         }
 
+        MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (!pushMessages.isEmpty()) {
+                            NotificationsController.getInstance().processNewMessages(pushMessages, true);
+                        }
+                    }
+                });
+            }
+        });
+
         if (!messagesArr.isEmpty()) {
             MessagesStorage.getInstance().putMessages(messagesArr, true, true, false);
         }
@@ -4416,44 +4507,6 @@ public void run() {
                     }
                     NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                 }
-                if (!pushMessages.isEmpty()) {
-                    NotificationsController.getInstance().processNewMessages(pushMessages, true);
-                }
-                if (!markAsReadMessages.isEmpty()) {
-                    for (Integer id : markAsReadMessages) {
-                        MessageObject obj = dialogMessage.get(id);
-                        if (obj != null) {
-                            obj.messageOwner.unread = false;
-                            updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                        }
-                    }
-                }
-                if (!markAsReadEncrypted.isEmpty()) {
-                    for (HashMap.Entry<Integer, Integer> entry : markAsReadEncrypted.entrySet()) {
-                        NotificationCenter.getInstance().postNotificationName(messagesReadedEncrypted, entry.getKey(), entry.getValue());
-                        long dialog_id = (long)(entry.getKey()) << 32;
-                        TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                        if (dialog != null) {
-                            MessageObject message = dialogMessage.get(dialog.top_message);
-                            if (message != null && message.messageOwner.date <= entry.getValue()) {
-                                message.messageOwner.unread = false;
-                                updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                            }
-                        }
-                    }
-                }
-                if (!markAsReadMessages.isEmpty()) {
-                    NotificationsController.getInstance().processReadMessages(markAsReadMessages, 0, 0, 0);
-                }
-                if (!deletedMessages.isEmpty()) {
-                    NotificationCenter.getInstance().postNotificationName(messagesDeleted, deletedMessages);
-                    for (Integer id : deletedMessages) {
-                        MessageObject obj = dialogMessage.get(id);
-                        if (obj != null) {
-                            obj.deleted = true;
-                        }
-                    }
-                }
                 if (printChangedArg) {
                     updateMask |= UPDATE_MASK_USER_PRINT;
                 }
@@ -4473,21 +4526,55 @@ public void run() {
             }
         });
 
-        if (!markAsReadMessages.isEmpty() || !markAsReadEncrypted.isEmpty()) {
-            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (!markAsReadMessages.isEmpty()) {
-                                NotificationCenter.getInstance().postNotificationName(messagesReaded, markAsReadMessages);
+        MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        int updateMask = 0;
+                        if (!markAsReadMessages.isEmpty()) {
+                            NotificationCenter.getInstance().postNotificationName(messagesReaded, markAsReadMessages);
+                            NotificationsController.getInstance().processReadMessages(markAsReadMessages, 0, 0, 0);
+
+                            for (Integer id : markAsReadMessages) {
+                                MessageObject obj = dialogMessage.get(id);
+                                if (obj != null) {
+                                    obj.messageOwner.unread = false;
+                                    updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
+                                }
                             }
                         }
-                    });
-                }
-            });
-        }
+                        if (!markAsReadEncrypted.isEmpty()) {
+                            for (HashMap.Entry<Integer, Integer> entry : markAsReadEncrypted.entrySet()) {
+                                NotificationCenter.getInstance().postNotificationName(messagesReadedEncrypted, entry.getKey(), entry.getValue());
+                                long dialog_id = (long)(entry.getKey()) << 32;
+                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
+                                if (dialog != null) {
+                                    MessageObject message = dialogMessage.get(dialog.top_message);
+                                    if (message != null && message.messageOwner.date <= entry.getValue()) {
+                                        message.messageOwner.unread = false;
+                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
+                                    }
+                                }
+                            }
+                        }
+                        if (!deletedMessages.isEmpty()) {
+                            NotificationCenter.getInstance().postNotificationName(messagesDeleted, deletedMessages);
+                            for (Integer id : deletedMessages) {
+                                MessageObject obj = dialogMessage.get(id);
+                                if (obj != null) {
+                                    obj.deleted = true;
+                                }
+                            }
+                        }
+                        if (updateMask != 0) {
+                            NotificationCenter.getInstance().postNotificationName(updateInterfaces, updateMask);
+                        }
+                    }
+                });
+            }
+        });
 
         if (!markAsReadMessages.isEmpty() || !markAsReadEncrypted.isEmpty()) {
             if (!markAsReadMessages.isEmpty()) {
@@ -4567,7 +4654,7 @@ private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> mess
         updateInterfaceWithMessages(uid, messages, false);
     }
 
-    private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages, boolean isBroadcast) {
+    private void updateInterfaceWithMessages(final long uid, final ArrayList<MessageObject> messages, boolean isBroadcast) {
         MessageObject lastMessage = null;
         TLRPC.TL_dialog dialog = dialogs_dict.get(uid);
 
@@ -4624,7 +4711,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                 }
             });
             for (TLRPC.TL_dialog d : dialogs) {
-                if ((int)d.id != 0) {
+                int high_id = (int)(d.id >> 32);
+                if ((int)d.id != 0 && high_id != 1) {
                     dialogsServerOnly.add(d);
                 }
             }
@@ -4671,7 +4759,6 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
             TLObject object = TLClassStore.Instance().TLdeserialize(is, is.readInt32());
             BuffersStorage.getInstance().reuseFreeBuffer(is);
             if (object != null) {
-
                 int from_id = chat.admin_id;
                 if (from_id == UserConfig.getClientUserId()) {
                     from_id = chat.participant_id;
@@ -4855,10 +4942,20 @@ public void run() {
                                     dialog.unread_count = 0;
                                     dialogMessage.remove(dialog.top_message);
                                 }
-                                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
-                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                                dialogsToUpdate.put(did, 0);
-                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        Utilities.RunOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
+                                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                                dialogsToUpdate.put(did, 0);
+                                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                                            }
+                                        });
+                                    }
+                                });
                                 MessagesStorage.getInstance().deleteDialog(did, true);
                                 NotificationCenter.getInstance().postNotificationName(removeAllMessagesFromDialog, did);
                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -4870,6 +4967,8 @@ public void run() {
                             pendingEncMessagesToDelete.addAll(serviceMessage.action.random_ids);
                         }
                         return null;
+                    } else {
+                        return null;
                     }
                 } else {
                     FileLog.e("tmessages", "unkown message " + object);
@@ -4878,9 +4977,9 @@ public void run() {
                 FileLog.e("tmessages", "unkown TLObject");
             }
         } else {
+            BuffersStorage.getInstance().reuseFreeBuffer(is);
             FileLog.e("tmessages", "fingerprint mismatch");
         }
-        BuffersStorage.getInstance().reuseFreeBuffer(is);
         return null;
     }
 
@@ -5146,7 +5245,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                                             }
                                         });
                                         for (TLRPC.TL_dialog d : dialogs) {
-                                            if ((int) d.id != 0) {
+                                            int high_id = (int)(d.id >> 32);
+                                            if ((int)d.id != 0 && high_id != 1) {
                                                 dialogsServerOnly.add(d);
                                             }
                                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 7f41c0740..4d502911b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -217,7 +217,6 @@ public void run() {
                     cacheFile.delete();
                     cacheFile = null;
                 }
-                storageQueue.cleanupQueue();
                 openDatabase();
                 if (isLogin) {
                     Utilities.stageQueue.postRunnable(new Runnable() {
@@ -719,6 +718,11 @@ public void run() {
                                 }
                             }
                         } else {
+                            for (TLRPC.TL_chatParticipant part : info.participants) {
+                                if (part.user_id == user_id) {
+                                    return;
+                                }
+                            }
                             TLRPC.TL_chatParticipant participant = new TLRPC.TL_chatParticipant();
                             participant.user_id = user_id;
                             participant.inviter_id = invited_id;
@@ -751,7 +755,7 @@ public void run() {
         });
     }
 
-    public void loadChatInfo(final int chat_id) {
+    public void loadChatInfo(final int chat_id, final Semaphore semaphore) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -769,12 +773,22 @@ public void run() {
                     cursor.dispose();
 
                     if (info != null) {
+                        boolean modified = false;
+                        ArrayList<Integer> usersArr = new ArrayList<Integer>();
                         String usersToLoad = "";
-                        for (TLRPC.TL_chatParticipant c : info.participants) {
-                            if (usersToLoad.length() != 0) {
-                                usersToLoad += ",";
+                        for (int a = 0; a < info.participants.size(); a++) {
+                            TLRPC.TL_chatParticipant c = info.participants.get(a);
+                            if (usersArr.contains(c.user_id)) {
+                                info.participants.remove(a);
+                                modified = true;
+                                a--;
+                            } else {
+                                if (usersToLoad.length() != 0) {
+                                    usersToLoad += ",";
+                                }
+                                usersArr.add(c.user_id);
+                                usersToLoad += c.user_id;
                             }
-                            usersToLoad += c.user_id;
                         }
                         if (usersToLoad.length() != 0) {
                             cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad));
@@ -791,10 +805,20 @@ public void run() {
                             }
                             cursor.dispose();
                         }
+                        if (modified) {
+                            updateChatInfo(chat_id, info, false);
+                        }
+                    }
+                    if (semaphore != null) {
+                        semaphore.release();
                     }
                     MessagesController.getInstance().processChatInfo(chat_id, info, loadedUsers, true);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
+                } finally {
+                    if (semaphore != null) {
+                        semaphore.release();
+                    }
                 }
             }
         });
@@ -920,7 +944,7 @@ public void run() {
                         cursor.dispose();
                     }
 
-                    cursor = database.queryFinalized("SELECT c.data, c.name FROM chats as c INNER JOIN dialogs as d ON c.uid = -d.did");
+                    cursor = database.queryFinalized("SELECT data, name FROM chats");
                     while (cursor.next()) {
                         String name = cursor.stringValue(1);
                         String[] args = name.split(" ");
@@ -929,6 +953,9 @@ public void run() {
                                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
                                     TLRPC.Chat chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                    if (!needEncrypted && chat.id < 0) {
+                                        continue;
+                                    }
                                     resultArrayNames.add(Utilities.generateSearchName(chat.title, null, q));
                                     resultArray.add(chat);
                                 }
@@ -938,6 +965,7 @@ public void run() {
                         }
                     }
                     cursor.dispose();
+
                     NotificationCenter.getInstance().postNotificationName(MessagesController.reloadSearchResults, token, resultArray, resultArrayNames, encUsers);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -1301,14 +1329,14 @@ public void run() {
         });
     }
 
-    public void getMessages(final long dialog_id, final int offset, final int count, final int max_id, final int minDate, final int classGuid, final boolean from_unread, final boolean forward) {
+    public void getMessages(final long dialog_id, final int count, final int max_id, final int minDate, final int classGuid, final boolean from_unread, final boolean forward) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 TLRPC.TL_messages_messages res = new TLRPC.TL_messages_messages();
                 int count_unread = 0;
                 int count_query = count;
-                int offset_query = offset;
+                int offset_query = 0;
                 int min_unread_id = 0;
                 int max_unread_id = 0;
                 int max_unread_date = 0;
@@ -1467,7 +1495,7 @@ public void run() {
                     res.users.clear();
                     FileLog.e("tmessages", e);
                 } finally {
-                    MessagesController.getInstance().processLoadedMessages(res, dialog_id, offset, count_query, max_id, true, classGuid, min_unread_id, max_unread_id, count_unread, max_unread_date, forward);
+                    MessagesController.getInstance().processLoadedMessages(res, dialog_id, count_query, max_id, true, classGuid, min_unread_id, max_unread_id, count_unread, max_unread_date, forward);
                 }
             }
         });
@@ -1991,7 +2019,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                 } else {
                     state.bindInteger(2, dialog_date != 0 ? dialog_date : value.date);
                 }
-                state.bindInteger(3, unread_count);
+                state.bindInteger(3, old_unread_count + unread_count);
                 state.bindInteger(4, messageId);
                 state.step();
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
index ed9bae335..a161dc6a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
@@ -24,8 +24,8 @@
 public class NativeLoader {
 
     private static final long sizes[] = new long[] {
-            799376,     //armeabi
-            852644,     //armeabi-v7a
+            803472,     //armeabi
+            856740,     //armeabi-v7a
             1250356,    //x86
             0,          //mips
     };
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 1ec524c98..88cfffecc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -183,6 +183,8 @@ private String getStringForMessage(MessageObject messageObject) {
                                 }
                                 msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
                             }
+                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
+                            msg = messageObject.messageText.toString();
                         }
                     } else {
                         if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
@@ -508,9 +510,6 @@ public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id,
         if (oldCount != popupMessages.size()) {
             NotificationCenter.getInstance().postNotificationName(pushMessagesUpdated);
         }
-//        if (readMessages != null || oldCount2 != pushMessages.size() || readMessages == null && dialog_id == 0) {
-//            showOrUpdateNotification(notifyCheck);
-//        }
     }
 
     public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean isLast) {
@@ -585,6 +584,15 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
                 }
                 if (newCount == 0) {
                     pushDialogs.remove(dialog_id);
+                    for (int a = 0; a < pushMessages.size(); a++) {
+                        MessageObject messageObject = pushMessages.get(a);
+                        if (messageObject.getDialogId() == dialog_id) {
+                            pushMessages.remove(a);
+                            a--;
+                            pushMessagesDict.remove(messageObject.messageOwner.id);
+                            popupMessages.remove(messageObject);
+                        }
+                    }
                 } else if (canAddValue) {
                     total_unread_count += newCount;
                     pushDialogs.put(dialog_id, newCount);
@@ -611,7 +619,6 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs) {
         pushDialogs.clear();
         total_unread_count = 0;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        String dialogsToLoad = "";
         for (HashMap.Entry<Long, Integer> entry : dialogs.entrySet()) {
             long dialog_id = entry.getKey();
             int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
@@ -619,10 +626,6 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs) {
             if (!(notify_override == 2 || (!preferences.getBoolean("EnableAll", true) || isChat && !preferences.getBoolean("EnableGroup", true)) && notify_override == 0)) {
                 pushDialogs.put(dialog_id, entry.getValue());
                 total_unread_count += entry.getValue();
-                if (dialogsToLoad.length() != 0) {
-                    dialogsToLoad += ",";
-                }
-                dialogsToLoad += "" + dialog_id;
             }
         }
         if (total_unread_count == 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 706fb5e3d..f3b44c331 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -781,6 +781,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
 
                         processRequestQueue(RPCRequest.RPCRequestClassTransportMask, 0);
                     }
+                    MessagesController.getInstance().updateConfig(config);
                 }
                 updatingDcSettings = false;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 700f37e9a..11cbb918a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -10,16 +10,17 @@
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.os.AsyncTask;
 import android.provider.MediaStore;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.ui.ApplicationLoader;
 
 import java.io.RandomAccessFile;
-import java.net.URL;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
+import java.net.URL;
 import java.net.URLConnection;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
@@ -57,9 +58,8 @@
 
     private String ext;
     private String httpUrl;
-    private URLConnection httpConnection;
+    private DownloadImageTask httpTask = null;
     public boolean needBitmapCreate = true;
-    private InputStream httpConnectionStream;
     private RandomAccessFile fileOutputStream;
     private RandomAccessFile fiv;
 
@@ -69,6 +69,109 @@
         public abstract void didChangedLoadProgress(FileLoadOperation operation, float progress);
     }
 
+    private class DownloadImageTask extends AsyncTask<String, Void, Boolean> {
+        protected Boolean doInBackground(String... urls) {
+            String url = urls[0];
+
+            InputStream httpConnectionStream = null;
+
+            try {
+                URL downloadUrl = new URL(url);
+                URLConnection httpConnection = downloadUrl.openConnection();
+                httpConnection.setConnectTimeout(5000);
+                httpConnection.setReadTimeout(5000);
+                httpConnection.connect();
+                httpConnectionStream = httpConnection.getInputStream();
+                /*String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
+                String str = Uri.encode(url, ALLOWED_URI_CHARS);
+                HttpClient httpclient = new DefaultHttpClient();
+                HttpGet request = new HttpGet(str);
+
+                httpConnectionStream = httpclient.execute(request).getEntity().getContent();*/
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                cleanup();
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        delegate.didFailedLoadingFile(FileLoadOperation.this);
+                    }
+                });
+                return false;
+            }
+
+            byte[] data = new byte[1024 * 2];
+            while (true) {
+                if (isCancelled()) {
+                    break;
+                }
+                try {
+                    int readed = httpConnectionStream.read(data);
+                    if (readed > 0) {
+                        fileOutputStream.write(data, 0, readed);
+                    } else if (readed == -1) {
+                        FileLoader.fileLoaderQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                cleanup();
+                                Utilities.stageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        try {
+                                            onFinishLoadingFile();
+                                        } catch (Exception e) {
+                                            delegate.didFailedLoadingFile(FileLoadOperation.this);
+                                        }
+                                    }
+                                });
+                            }
+                        });
+                        break;
+                    } else {
+                        FileLoader.fileLoaderQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                cleanup();
+                                Utilities.stageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        delegate.didFailedLoadingFile(FileLoadOperation.this);
+                                    }
+                                });
+                            }
+                        });
+                        break;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                    FileLoader.fileLoaderQueue.postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            cleanup();
+                            Utilities.stageQueue.postRunnable(new Runnable() {
+                                @Override
+                                public void run() {
+                                    delegate.didFailedLoadingFile(FileLoadOperation.this);
+                                }
+                            });
+                        }
+                    });
+                }
+            }
+
+            try {
+                if (httpConnectionStream != null) {
+                    httpConnectionStream.close();
+                }
+                httpConnectionStream = null;
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            return true;
+        }
+    }
+
     public FileLoadOperation(TLRPC.FileLocation fileLocation) {
         if (fileLocation instanceof TLRPC.TL_fileEncryptedLocation) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
@@ -406,7 +509,6 @@ public void run() {
                         }
                     }
                 });
-
             }
         }
     }
@@ -434,14 +536,8 @@ public void run() {
 
     private void cleanup() {
         if (httpUrl != null) {
-            try {
-                if (httpConnectionStream != null) {
-                    httpConnectionStream.close();
-                }
-                httpConnection = null;
-                httpConnectionStream = null;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
+            if (httpTask != null) {
+                httpTask.cancel(true);
             }
         } else {
             try {
@@ -577,68 +673,11 @@ private void startDownloadHTTPRequest() {
         if (state != 1) {
             return;
         }
-        if (httpConnection == null) {
-            try {
-                URL downloadUrl = new URL(httpUrl);
-                httpConnection = downloadUrl.openConnection();
-                httpConnection.setConnectTimeout(5000);
-                httpConnection.setReadTimeout(5000);
-                httpConnection.connect();
-                httpConnectionStream = httpConnection.getInputStream();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        delegate.didFailedLoadingFile(FileLoadOperation.this);
-                    }
-                });
-                return;
-            }
-        }
-
-        try {
-            byte[] data = new byte[1024 * 2];
-            int readed = httpConnectionStream.read(data);
-            if (readed > 0) {
-                fileOutputStream.write(data, 0, readed);
-                FileLoader.fileLoaderQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        startDownloadHTTPRequest();
-                    }
-                });
-            } else if (readed == -1) {
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            onFinishLoadingFile();
-                        } catch (Exception e) {
-                            delegate.didFailedLoadingFile(FileLoadOperation.this);
-                        }
-                    }
-                });
-            } else {
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        delegate.didFailedLoadingFile(FileLoadOperation.this);
-                    }
-                });
-            }
-        } catch (Exception e) {
-            cleanup();
-            FileLog.e("tmessages", e);
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    delegate.didFailedLoadingFile(FileLoadOperation.this);
-                }
-            });
+        httpTask = new DownloadImageTask();
+        if (android.os.Build.VERSION.SDK_INT >= 11) {
+            httpTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
+        } else {
+            httpTask.execute(null, null, null);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
index 35d460d17..ab0a52c9c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
@@ -63,12 +63,12 @@ public FileLog() {
             e.printStackTrace();
         }
         try {
+            logQueue = new DispatchQueue("logQueue");
             currentFile.createNewFile();
             FileOutputStream stream = new FileOutputStream(currentFile);
             streamWriter = new OutputStreamWriter(stream);
             streamWriter.write("-----start log " + dateFormat.format(System.currentTimeMillis()) + "-----\n");
             streamWriter.flush();
-            logQueue = new DispatchQueue("logQueue");
         } catch (Exception e) {
             e.printStackTrace();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index 0a6073ab7..5a70019a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -40,7 +40,6 @@
     public int contentType;
     public ArrayList<PhotoObject> photoThumbs;
     public Bitmap imagePreview;
-    public PhotoObject previewPhoto;
     public String dateKey;
     public boolean deleted = false;
     public float audioProgress;
@@ -139,10 +138,6 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", "").replace("un1", "");
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
-                    photoThumbs = new ArrayList<PhotoObject>();
-                    for (TLRPC.PhotoSize size : message.action.photo.sizes) {
-                        photoThumbs.add(new PhotoObject(size, preview));
-                    }
                     if (isFromMe()) {
                         messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
                     } else {
@@ -243,22 +238,8 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             }
         } else if (message.media != null && !(message.media instanceof TLRPC.TL_messageMediaEmpty)) {
             if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                photoThumbs = new ArrayList<PhotoObject>();
-                for (TLRPC.PhotoSize size : message.media.photo.sizes) {
-                    PhotoObject obj = new PhotoObject(size, preview);
-                    photoThumbs.add(obj);
-                    if (imagePreview == null && obj.image != null) {
-                        imagePreview = obj.image;
-                    }
-                }
                 messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
             } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                photoThumbs = new ArrayList<PhotoObject>();
-                PhotoObject obj = new PhotoObject(message.media.video.thumb, preview);
-                photoThumbs.add(obj);
-                if (imagePreview == null && obj.image != null) {
-                    imagePreview = obj.image;
-                }
                 messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
             } else if (message.media instanceof TLRPC.TL_messageMediaGeo) {
                 messageText = LocaleController.getString("AttachLocation", R.string.AttachLocation);
@@ -267,11 +248,6 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
                 messageText = LocaleController.getString("UnsuppotedMedia", R.string.UnsuppotedMedia);
             } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                if (!(message.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
-                    photoThumbs = new ArrayList<PhotoObject>();
-                    PhotoObject obj = new PhotoObject(message.media.document.thumb, preview);
-                    photoThumbs.add(obj);
-                }
                 messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
             } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
                 messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
@@ -348,6 +324,80 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
 
         generateLayout();
+        generateThumbs(false, preview);
+    }
+
+    public void generateThumbs(boolean update, int preview) {
+        if (messageOwner instanceof TLRPC.TL_messageService) {
+            if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    for (TLRPC.PhotoSize size : messageOwner.action.photo.sizes) {
+                        photoThumbs.add(new PhotoObject(size, preview));
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
+                    for (PhotoObject photoObject : photoThumbs) {
+                        for (TLRPC.PhotoSize size : messageOwner.action.photo.sizes) {
+                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
+                                continue;
+                            }
+                            if (size.type.equals(photoObject.photoOwner.type)) {
+                                photoObject.photoOwner.location = size.location;
+                                break;
+                            }
+                        }
+                    }
+                }
+            }
+        } else if (messageOwner.media != null && !(messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+            if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    for (TLRPC.PhotoSize size : messageOwner.media.photo.sizes) {
+                        PhotoObject obj = new PhotoObject(size, preview);
+                        photoThumbs.add(obj);
+                        if (imagePreview == null && obj.image != null) {
+                            imagePreview = obj.image;
+                        }
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
+                    for (PhotoObject photoObject : photoThumbs) {
+                        for (TLRPC.PhotoSize size : messageOwner.media.photo.sizes) {
+                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
+                                continue;
+                            }
+                            if (size.type.equals(photoObject.photoOwner.type)) {
+                                photoObject.photoOwner.location = size.location;
+                                break;
+                            }
+                        }
+                    }
+                }
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    PhotoObject obj = new PhotoObject(messageOwner.media.video.thumb, preview);
+                    photoThumbs.add(obj);
+                    if (imagePreview == null && obj.image != null) {
+                        imagePreview = obj.image;
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.video.thumb != null) {
+                    PhotoObject photoObject = photoThumbs.get(0);
+                    photoObject.photoOwner.location = messageOwner.media.video.thumb.location;
+                }
+            } if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                if (!(messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
+                    if (!update) {
+                        photoThumbs = new ArrayList<PhotoObject>();
+                        PhotoObject obj = new PhotoObject(messageOwner.media.document.thumb, preview);
+                        photoThumbs.add(obj);
+                    } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.document.thumb != null) {
+                        PhotoObject photoObject = photoThumbs.get(0);
+                        photoObject.photoOwner.location = messageOwner.media.document.thumb.location;
+                    }
+                }
+            }
+        }
     }
 
     public String getFileName() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index 949dced5d..2285ef327 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -8,7 +8,6 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.PendingIntent;
@@ -93,34 +92,6 @@ public static void postInitApplication() {
 
         UserConfig.loadConfig();
         if (UserConfig.getCurrentUser() != null) {
-            boolean changed = false;
-            SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
-            int v = preferences.getInt("v", 0);
-            if (v != 1) {
-                SharedPreferences preferences2 = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences2.edit();
-                if (preferences.contains("view_animations")) {
-                    editor.putBoolean("view_animations", preferences.getBoolean("view_animations", false));
-                }
-                if (preferences.contains("selectedBackground")) {
-                    editor.putInt("selectedBackground", preferences.getInt("selectedBackground", 1000001));
-                }
-                if (preferences.contains("selectedColor")) {
-                    editor.putInt("selectedColor", preferences.getInt("selectedColor", 0));
-                }
-                if (preferences.contains("fons_size")) {
-                    editor.putInt("fons_size", preferences.getInt("fons_size", 16));
-                }
-                editor.commit();
-                editor = preferences.edit();
-                editor.putInt("v", 1);
-                editor.remove("view_animations");
-                editor.remove("selectedBackground");
-                editor.remove("selectedColor");
-                editor.remove("fons_size");
-                editor.commit();
-            }
-
             MessagesController.getInstance().users.put(UserConfig.getClientUserId(), UserConfig.getCurrentUser());
             ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
             ConnectionsManager.getInstance().initPushConnection();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index cde0be595..52ba8e91f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -60,9 +60,11 @@
     private static Drawable checkDrawable;
     private static Drawable halfCheckDrawable;
     private static Drawable clockDrawable;
+    private static Drawable broadcastDrawable;
     private static Drawable checkMediaDrawable;
     private static Drawable halfCheckMediaDrawable;
     private static Drawable clockMediaDrawable;
+    private static Drawable broadcastMediaDrawable;
     private static Drawable errorDrawable;
     protected static Drawable mediaBackgroundDrawable;
     private static TextPaint timePaintIn;
@@ -177,6 +179,8 @@ private void init() {
             clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
             errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
             mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
 
             timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             timePaintIn.setTextSize(AndroidUtilities.dp(12));
@@ -569,6 +573,7 @@ protected void onDraw(Canvas canvas) {
                 boolean drawCheck2 = false;
                 boolean drawClock = false;
                 boolean drawError = false;
+                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
 
                 if (currentMessageObject.messageOwner.send_state == MessagesController.MESSAGE_SEND_STATE_SENDING) {
                     drawCheck1 = false;
@@ -601,30 +606,42 @@ protected void onDraw(Canvas canvas) {
                         clockMediaDrawable.draw(canvas);
                     }
                 }
-                if (drawCheck2) {
-                    if (!media) {
-                        if (drawCheck1) {
-                            setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                if (isBroadcast) {
+                    if (drawCheck1 || drawCheck2) {
+                        if (!media) {
+                            setDrawableBounds(broadcastDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.0f) - broadcastDrawable.getIntrinsicHeight());
+                            broadcastDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                            setDrawableBounds(broadcastMediaDrawable, layoutWidth - AndroidUtilities.dpf(24.0f) - broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - broadcastMediaDrawable.getIntrinsicHeight());
+                            broadcastMediaDrawable.draw(canvas);
                         }
-                        checkDrawable.draw(canvas);
-                    } else {
-                        if (drawCheck1) {
-                            setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                    }
+                } else {
+                    if (drawCheck2) {
+                        if (!media) {
+                            if (drawCheck1) {
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                            } else {
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                            }
+                            checkDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                            if (drawCheck1) {
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                            } else {
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                            }
+                            checkMediaDrawable.draw(canvas);
                         }
-                        checkMediaDrawable.draw(canvas);
                     }
-                }
-                if (drawCheck1) {
-                    if (!media) {
-                        setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - halfCheckDrawable.getIntrinsicHeight());
-                        halfCheckDrawable.draw(canvas);
-                    } else {
-                        setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
-                        halfCheckMediaDrawable.draw(canvas);
+                    if (drawCheck1) {
+                        if (!media) {
+                            setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - halfCheckDrawable.getIntrinsicHeight());
+                            halfCheckDrawable.draw(canvas);
+                        } else {
+                            setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
+                            halfCheckMediaDrawable.draw(canvas);
+                        }
                     }
                 }
                 if (drawError) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index b5b8c9fb3..8c7b0377c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -415,7 +415,7 @@ public void setMessageObject(MessageObject messageObject) {
                     photoHeight = h;
                     backgroundWidth = w + AndroidUtilities.dp(12);
                     currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
-                    if (messageObject.photoThumbs.size() > 1) {
+                    if (messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
                         currentPhotoFilter += "_b";
                     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
index 8aa33a10d..3dbaf02cf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
@@ -35,6 +35,8 @@
     private static TextPaint offlinePaint;
 
     private static Drawable lockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable groupDrawable;
     private static Paint linePaint;
 
     private CharSequence currentName;
@@ -93,6 +95,14 @@ private void init() {
             linePaint.setColor(0xffdcdcdc);
         }
 
+        if (broadcastDrawable == null) {
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
+        }
+
+        if (groupDrawable == null) {
+            groupDrawable = getResources().getDrawable(R.drawable.grouplist);
+        }
+
         if (avatarImage == null) {
             avatarImage = new ImageReceiver();
             avatarImage.parentView = this;
@@ -230,6 +240,12 @@ protected void onDraw(Canvas canvas) {
         if (cellLayout.drawNameLock) {
             setDrawableBounds(lockDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
             lockDrawable.draw(canvas);
+        } else if (cellLayout.drawNameGroup) {
+            setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (cellLayout.drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            broadcastDrawable.draw(canvas);
         }
 
         canvas.save();
@@ -262,8 +278,10 @@ protected void onDraw(Canvas canvas) {
         private int nameWidth;
         private StaticLayout nameLayout;
         private boolean drawNameLock;
+        private boolean drawNameBroadcast;
+        private boolean drawNameGroup;
         private int nameLockLeft;
-        private int nameLockTop = AndroidUtilities.dp(15);
+        private int nameLockTop;
 
         private int onlineLeft;
         private int onlineTop = AndroidUtilities.dp(36);
@@ -277,6 +295,10 @@ public void build(int width, int height) {
             CharSequence nameString = "";
             TextPaint currentNamePaint;
 
+            drawNameBroadcast = false;
+            drawNameLock = false;
+            drawNameGroup = false;
+
             if (encryptedChat != null) {
                 drawNameLock = true;
                 if (!LocaleController.isRTL) {
@@ -286,12 +308,28 @@ public void build(int width, int height) {
                     nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - lockDrawable.getIntrinsicWidth();
                     nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
                 }
+                nameLockTop = AndroidUtilities.dp(15);
             } else {
-                drawNameLock = false;
-                if (!LocaleController.isRTL) {
-                    nameLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                if (chat != null) {
+                    nameLockTop = AndroidUtilities.dp(26);
+                    if (chat.id < 0) {
+                        drawNameBroadcast = true;
+                    } else {
+                        drawNameGroup = true;
+                    }
+                    if (!LocaleController.isRTL) {
+                        nameLockLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                        nameLeft = AndroidUtilities.dp(65 + (usePadding ? 11 : 0)) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    } else {
+                        nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                    }
                 } else {
-                    nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                    if (!LocaleController.isRTL) {
+                        nameLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                    } else {
+                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                    }
                 }
             }
 
@@ -326,6 +364,8 @@ public void build(int width, int height) {
             }
             if (drawNameLock) {
                 nameWidth -= AndroidUtilities.dp(6) + lockDrawable.getIntrinsicWidth();
+            } else if (drawNameBroadcast) {
+                nameWidth -= AndroidUtilities.dp(6) + broadcastDrawable.getIntrinsicWidth();
             }
 
             CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index f32b68b3b..ef14573e7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui;
 
+import android.animation.Animator;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
@@ -142,10 +143,11 @@
     private boolean endReached = false;
     private boolean loading = false;
     private boolean cacheEndReaced = false;
+    private boolean firstLoading = true;
 
     private int minDate = 0;
     private int progressTag = 0;
-    boolean first = true;
+    private boolean first = true;
     private int unread_to_load = 0;
     private int first_unread_id = 0;
     private int last_unread_id = 0;
@@ -215,13 +217,24 @@ public void run() {
                     return false;
                 }
             }
-            MessagesController.getInstance().loadChatInfo(currentChat.id);
             if (chatId > 0) {
                 dialog_id = -chatId;
             } else {
                 isBraodcast = true;
                 dialog_id = AndroidUtilities.makeBroadcastId(chatId);
             }
+            Semaphore semaphore = null;
+            if (isBraodcast) {
+                semaphore = new Semaphore(0);
+            }
+            MessagesController.getInstance().loadChatInfo(currentChat.id, semaphore);
+            if (isBraodcast) {
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
         } else if (userId != 0) {
             currentUser = MessagesController.getInstance().users.get(userId);
             if (currentUser == null) {
@@ -340,7 +353,7 @@ public void needSendTyping() {
         super.onFragmentCreate();
 
         loading = true;
-        MessagesController.getInstance().loadMessages(dialog_id, 0, 30, 0, true, 0, classGuid, true, false);
+        MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, true, false);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
 
         if (currentChat != null) {
@@ -465,7 +478,11 @@ public void onItemClick(int id) {
                             if (info != null && info instanceof TLRPC.TL_chatParticipantsForbidden) {
                                 return;
                             }
-                            if (currentChat.participants_count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
+                            int count = currentChat.participants_count;
+                            if (info != null) {
+                                count = info.participants.size();
+                            }
+                            if (count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
                                 return;
                             }
                             Bundle args = new Bundle();
@@ -626,6 +643,7 @@ public boolean onTouch(View v, MotionEvent event) {
             View bottomOverlayChat = fragmentView.findViewById(R.id.bottom_overlay_chat);
             progressView = fragmentView.findViewById(R.id.progressLayout);
             pagedownButton = fragmentView.findViewById(R.id.pagedown_button);
+            pagedownButton.setVisibility(View.GONE);
 
             View progressViewInner = progressView.findViewById(R.id.progressLayoutInner);
 
@@ -736,24 +754,22 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                         if (firstVisibleItem <= 4) {
                             if (!endReached && !loading) {
                                 if (messagesByDays.size() != 0) {
-                                    MessagesController.getInstance().loadMessages(dialog_id, 0, 20, maxMessageId, !cacheEndReaced, minDate, classGuid, false, false);
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced, minDate, classGuid, false, false);
                                 } else {
-                                    MessagesController.getInstance().loadMessages(dialog_id, 0, 20, 0, !cacheEndReaced, minDate, classGuid, false, false);
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, 0, !cacheEndReaced, minDate, classGuid, false, false);
                                 }
                                 loading = true;
                             }
                         }
                         if (firstVisibleItem + visibleItemCount >= totalItemCount - 6) {
                             if (!unread_end_reached && !loadingForward) {
-                                MessagesController.getInstance().loadMessages(dialog_id, 0, 20, minMessageId, true, maxDate, classGuid, false, true);
+                                MessagesController.getInstance().loadMessages(dialog_id, 20, minMessageId, true, maxDate, classGuid, false, true);
                                 loadingForward = true;
                             }
                         }
                         if (firstVisibleItem + visibleItemCount == totalItemCount && unread_end_reached) {
                             showPagedownButton(false, true);
                         }
-                    } else {
-                        showPagedownButton(false, false);
                     }
                     for (int a = 0; a < visibleItemCount; a++) {
                         View view = absListView.getChildAt(a);
@@ -870,9 +886,9 @@ private void scrollToLastMessage() {
             maxDate = Integer.MIN_VALUE;
             minDate = 0;
             unread_end_reached = true;
-            MessagesController.getInstance().loadMessages(dialog_id, 0, 30, 0, true, 0, classGuid, true, false);
             loading = true;
             chatAdapter.notifyDataSetChanged();
+            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, true, false);
         }
     }
 
@@ -882,7 +898,7 @@ private void showPagedownButton(boolean show, boolean animated) {
         }
         if (show) {
             if (pagedownButton.getVisibility() == View.GONE) {
-                if (android.os.Build.VERSION.SDK_INT >= 16 && animated) {
+                if (android.os.Build.VERSION.SDK_INT > 13 && animated) {
                     pagedownButton.setVisibility(View.VISIBLE);
                     pagedownButton.setAlpha(0);
                     pagedownButton.animate().alpha(1).setDuration(200).start();
@@ -892,13 +908,28 @@ private void showPagedownButton(boolean show, boolean animated) {
             }
         } else {
             if (pagedownButton.getVisibility() == View.VISIBLE) {
-                if (android.os.Build.VERSION.SDK_INT >= 16 && animated) {
-                    pagedownButton.animate().alpha(0).withEndAction(new Runnable() {
+                if (android.os.Build.VERSION.SDK_INT > 13 && animated) {
+                    pagedownButton.animate().alpha(0).setDuration(200).setListener(new Animator.AnimatorListener() {
                         @Override
-                        public void run() {
+                        public void onAnimationStart(Animator animation) {
+
+                        }
+
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
                             pagedownButton.setVisibility(View.GONE);
                         }
-                    }).setDuration(200).start();
+
+                        @Override
+                        public void onAnimationCancel(Animator animation) {
+
+                        }
+
+                        @Override
+                        public void onAnimationRepeat(Animator animation) {
+
+                        }
+                    }).start();
                 } else {
                     pagedownButton.setVisibility(View.GONE);
                 }
@@ -1242,10 +1273,14 @@ private void updateSubtitle() {
                 } else if (currentChat.left) {
                     actionBarLayer.setSubtitle(LocaleController.getString("YouLeft", R.string.YouLeft));
                 } else {
-                    if (onlineCount > 0 && currentChat.participants_count != 0) {
-                        actionBarLayer.setSubtitle(String.format("%s, %d %s", LocaleController.formatPluralString("Members", currentChat.participants_count), onlineCount, LocaleController.getString("Online", R.string.Online)));
+                    int count = currentChat.participants_count;
+                    if (info != null) {
+                        count = info.participants.size();
+                    }
+                    if (onlineCount > 0 && count != 0) {
+                        actionBarLayer.setSubtitle(String.format("%s, %d %s", LocaleController.formatPluralString("Members", count), onlineCount, LocaleController.getString("Online", R.string.Online)));
                     } else {
-                        actionBarLayer.setSubtitle(LocaleController.formatPluralString("Members", currentChat.participants_count));
+                        actionBarLayer.setSubtitle(LocaleController.formatPluralString("Members", count));
                     }
                 }
             } else if (currentUser != null) {
@@ -1465,6 +1500,8 @@ public void run() {
                         if (tempPath != null) {
                             File temp = new File(tempPath);
                             originalPath += temp.length() + "_" + temp.lastModified();
+                        } else {
+                            originalPath = null;
                         }
                         TLRPC.TL_photo photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(originalPath, currentEncryptedChat == null ? 0 : 3);
                         if (photo == null && uri != null) {
@@ -1682,24 +1719,42 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == MessagesController.messagesDidLoaded) {
             long did = (Long)args[0];
             if (did == dialog_id) {
-                int offset = (Integer)args[1];
-                int count = (Integer)args[2];
-                boolean isCache = (Boolean)args[4];
-                int fnid = (Integer)args[5];
-                int last_unread_date = (Integer)args[8];
-                boolean forwardLoad = (Boolean)args[9];
+                int count = (Integer)args[1];
+                boolean isCache = (Boolean)args[3];
+                int fnid = (Integer)args[4];
+                int last_unread_date = (Integer)args[7];
+                boolean forwardLoad = (Boolean)args[8];
                 boolean wasUnread = false;
                 boolean positionToUnread = false;
                 if (fnid != 0) {
-                    first_unread_id = (Integer)args[5];
-                    last_unread_id = (Integer)args[6];
-                    unread_to_load = (Integer)args[7];
+                    first_unread_id = fnid;
+                    last_unread_id = (Integer)args[5];
+                    unread_to_load = (Integer)args[6];
                     positionToUnread = true;
                 }
-                ArrayList<MessageObject> messArr = (ArrayList<MessageObject>)args[3];
+                ArrayList<MessageObject> messArr = (ArrayList<MessageObject>)args[2];
 
                 int newRowsCount = 0;
                 unread_end_reached = last_unread_id == 0;
+
+                if (firstLoading) {
+                    if (!unread_end_reached) {
+                        messages.clear();
+                        messagesByDays.clear();
+                        messagesDict.clear();
+                        if (currentEncryptedChat == null) {
+                            maxMessageId = Integer.MAX_VALUE;
+                            minMessageId = Integer.MIN_VALUE;
+                        } else {
+                            maxMessageId = Integer.MIN_VALUE;
+                            minMessageId = Integer.MAX_VALUE;
+                        }
+                        maxDate = Integer.MIN_VALUE;
+                        minDate = 0;
+                    }
+                    firstLoading = false;
+                }
+
                 for (int a = 0; a < messArr.size(); a++) {
                     MessageObject obj = messArr.get(a);
                     if (messagesDict.containsKey(obj.messageOwner.id)) {
@@ -1867,9 +1922,9 @@ public void run() {
 
                 if (first && messages.size() > 0) {
                     if (last_unread_id != 0) {
-                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, last_unread_id, 0, last_unread_date, wasUnread);
+                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, last_unread_id, 0, last_unread_date, wasUnread, false);
                     } else {
-                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, wasUnread);
+                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, wasUnread, false);
                     }
                     first = false;
                 }
@@ -1950,7 +2005,7 @@ public void run() {
                             readWithMid = currentMinMsgId;
                         } else {
                             if (messages.size() > 0) {
-                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, currentMinMsgId, 0, currentMaxDate, true);
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, currentMinMsgId, 0, currentMaxDate, true, false);
                             }
                         }
                     }
@@ -2028,15 +2083,17 @@ public void run() {
                             lastVisible++;
                         }
                         if (lastVisible == oldCount) {
-                            if (paused) {
-                                scrollToTopOnResume = true;
-                            } else {
-                                chatListView.post(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                    }
-                                });
+                            if (!firstLoading) {
+                                if (paused) {
+                                    scrollToTopOnResume = true;
+                                } else {
+                                    chatListView.post(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                        }
+                                    });
+                                }
                             }
                         } else {
                             showPagedownButton(true, true);
@@ -2051,7 +2108,7 @@ public void run() {
                             readWithDate = maxDate;
                             readWithMid = minMessageId;
                         } else {
-                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, true);
+                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, true, false);
                         }
                     }
                 }
@@ -2108,7 +2165,7 @@ public void run() {
                     }
                     maxDate = Integer.MIN_VALUE;
                     minDate = 0;
-                    MessagesController.getInstance().loadMessages(dialog_id, 0, 30, 0, !cacheEndReaced, minDate, classGuid, false, false);
+                    MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, false, false);
                     loading = true;
                 }
             }
@@ -2124,6 +2181,7 @@ public void run() {
                 MessageObject newMsgObj = (MessageObject)args[2];
                 if (newMsgObj != null) {
                     obj.messageOwner.media = newMsgObj.messageOwner.media;
+                    obj.generateThumbs(true, 1);
                 }
                 messagesDict.remove(msgId);
                 messagesDict.put(newMsgId, obj);
@@ -2406,7 +2464,7 @@ public void onResume() {
                 messageObject.messageOwner.unread = false;
             }
             readWhenResume = false;
-            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true);
+            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true, false);
         }
 
         fixLayout(true);
@@ -3014,8 +3072,8 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                         args.putInt("chat_id", -lower_part);
                     }
                     presentFragment(new ChatActivity(args), true);
-                    removeSelfFromStack();
                     forwardSelectedMessages(did, param);
+                    removeSelfFromStack();
                 } else {
                     activity.finishFragment();
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index 4f8f86987..562f9e5a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -143,7 +143,8 @@ private void updateRowsIds() {
             membersSectionRow = rowCount++;
             rowCount += info.participants.size();
             membersEndRow = rowCount;
-            if (info.participants.size() < 200) {
+            int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
+            if (info.participants.size() < maxCount) {
                 addMemberRow = rowCount++;
             } else {
                 addMemberRow = -1;
@@ -290,7 +291,7 @@ public void saveSelfArgs(Bundle args) {
 
     @Override
     public void restoreSelfArgs(Bundle args) {
-        MessagesController.getInstance().loadChatInfo(chat_id);
+        MessagesController.getInstance().loadChatInfo(chat_id, null);
         if (avatarUpdater != null) {
             avatarUpdater.currentPicturePath = args.getString("path");
         }
@@ -623,10 +624,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
                 textView.setText(chat.title);
 
-                if (chat.participants_count != 0 && onlineCount > 0) {
-                    onlineText.setText(Html.fromHtml(String.format("%s, <font color='#357aa8'>%d %s</font>", LocaleController.formatPluralString("Members", chat.participants_count), onlineCount, LocaleController.getString("Online", R.string.Online))));
+                int count = chat.participants_count;
+                if (info != null) {
+                    count = info.participants.size();
+                }
+
+                if (count != 0 && onlineCount > 0) {
+                    onlineText.setText(Html.fromHtml(String.format("%s, <font color='#357aa8'>%d %s</font>", LocaleController.formatPluralString("Members", count), onlineCount, LocaleController.getString("Online", R.string.Online))));
                 } else {
-                    onlineText.setText(LocaleController.formatPluralString("Members", chat.participants_count));
+                    onlineText.setText(LocaleController.formatPluralString("Members", count));
                 }
 
                 TLRPC.FileLocation photo = null;
@@ -650,7 +656,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     textView.setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
                 } else if (i == membersSectionRow) {
                     TLRPC.Chat chat = MessagesController.getInstance().chats.get(chat_id);
-                    textView.setText(LocaleController.formatPluralString("Members", chat.participants_count).toUpperCase());
+                    int count = chat.participants_count;
+                    if (info != null) {
+                        count = info.participants.size();
+                    }
+                    textView.setText(LocaleController.formatPluralString("Members", count).toUpperCase());
                 }
             } else if (type == 2) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 93b6d220a..91d74a232 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -91,6 +91,7 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
     private EditText userSelectEditText;
     private boolean ignoreChange = false;
     private boolean isBroadcast = false;
+    private int maxCount = 200;
 
     private HashMap<Integer, XImageSpan> selectedContacts =  new HashMap<Integer, XImageSpan>();
     private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
@@ -113,6 +114,7 @@ public GroupCreateActivity() {
     public GroupCreateActivity(Bundle args) {
         super(args);
         isBroadcast = args.getBoolean("broadcast", false);
+        maxCount = !isBroadcast ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
     }
 
     @Override
@@ -141,7 +143,7 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
             } else {
                 actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
             }
-            actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), 200));
+            actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
 
             actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
                 @Override
@@ -216,7 +218,7 @@ public void afterTextChanged(Editable editable) {
                                         selectedContacts.remove(sp.uid);
                                     }
                                 }
-                                actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), 200));
+                                actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
                                 listView.invalidateViews();
                             } else {
                                 search = true;
@@ -274,7 +276,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         userSelectEditText.setSelection(text.length());
                         ignoreChange = false;
                     } else {
-                        if (selectedContacts.size() == 200) {
+                        if (selectedContacts.size() == maxCount) {
                             return;
                         }
                         ignoreChange = true;
@@ -282,7 +284,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         span.uid = user.id;
                         ignoreChange = false;
                     }
-                    actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), 200));
+                    actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
                     if (searching || searchWas) {
                         searching = false;
                         searchWas = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index a31d9eff3..dd754cc25 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -8,7 +8,9 @@
 
 package org.telegram.ui;
 
+import android.content.Context;
 import android.location.Location;
+import android.location.LocationManager;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -39,6 +41,8 @@
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 
+import java.util.List;
+
 public class LocationActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private GoogleMap googleMap;
     private TextView distanceTextView;
@@ -164,8 +168,7 @@ public void onMyLocationChange(Location location) {
                         positionMarker(location);
                     }
                 });
-                myLocation = googleMap.getMyLocation();
-
+                myLocation = getLastLocation();
 
                 if (sendButton != null) {
                     userLocation = new Location("network");
@@ -249,6 +252,19 @@ public void onClick(View view) {
         return fragmentView;
     }
 
+    private Location getLastLocation() {
+        LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+        List<String> providers = lm.getProviders(true);
+        Location l = null;
+        for (int i = providers.size() - 1; i >= 0; i--) {
+            l = lm.getLastKnownLocation(providers.get(i));
+            if (l != null) {
+                break;
+            }
+        }
+        return l;
+    }
+
     private void updateUserData() {
         if (messageObject != null && avatarImageView != null) {
             int fromId = messageObject.messageOwner.from_id;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
index 450f01b7b..da049ced3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
@@ -54,9 +54,12 @@
     private Bundle currentParams;
 
     private Timer timeTimer;
+    private Timer codeTimer;
     private static final Integer timerSync = 1;
     private volatile int time = 60000;
+    private volatile int codeTime = 15000;
     private double lastCurrentTime;
+    private double lastCodeTime;
     private boolean waitingForSms = false;
     private boolean nextPressed = false;
     private String lastError = "";
@@ -162,6 +165,7 @@ public void setParams(Bundle params) {
         codeField.requestFocus();
 
         destroyTimer();
+        destroyCodeTimer();
         timeText.setText(String.format("%s 1:00", LocaleController.getString("CallText", R.string.CallText)));
         lastCurrentTime = System.currentTimeMillis();
         problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
@@ -169,6 +173,46 @@ public void setParams(Bundle params) {
         createTimer();
     }
 
+    private void createCodeTimer() {
+        if (codeTimer != null) {
+            return;
+        }
+        codeTime = 15000;
+        codeTimer = new Timer();
+        lastCodeTime = System.currentTimeMillis();
+        codeTimer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                double currentTime = System.currentTimeMillis();
+                double diff = currentTime - lastCodeTime;
+                codeTime -= diff;
+                lastCodeTime = currentTime;
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (codeTime <= 1000) {
+                            problemText.setVisibility(VISIBLE);
+                            destroyCodeTimer();
+                        }
+                    }
+                });
+            }
+        }, 0, 1000);
+    }
+
+    private void destroyCodeTimer() {
+        try {
+            synchronized(timerSync) {
+                if (codeTimer != null) {
+                    codeTimer.cancel();
+                    codeTimer = null;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
     private void createTimer() {
         if (timeTimer != null) {
             return;
@@ -189,9 +233,9 @@ public void run() {
                             int seconds = time / 1000 - minutes * 60;
                             timeText.setText(String.format("%s %d:%02d", LocaleController.getString("CallText", R.string.CallText), minutes, seconds));
                         } else {
-                            problemText.setVisibility(VISIBLE);
                             timeText.setText(LocaleController.getString("Calling", R.string.Calling));
                             destroyTimer();
+                            createCodeTimer();
                             TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
                             req.phone_number = requestPhone;
                             req.phone_code_hash = phoneHash;
@@ -259,6 +303,7 @@ public void run() {
                         if (error == null) {
                             TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
                             destroyTimer();
+                            destroyCodeTimer();
                             UserConfig.clearConfig();
                             MessagesController.getInstance().cleanUp();
                             UserConfig.setCurrentUser(res.user);
@@ -280,6 +325,7 @@ public void run() {
                                 params.putString("code", req.phone_code);
                                 delegate.setPage(2, true, params, false);
                                 destroyTimer();
+                                destroyCodeTimer();
                             } else {
                                 createTimer();
                                 if (error.text.contains("PHONE_NUMBER_INVALID")) {
@@ -304,6 +350,7 @@ public void run() {
     @Override
     public void onBackPressed() {
         destroyTimer();
+        destroyCodeTimer();
         currentParams = null;
         AndroidUtilities.setWaitingForSms(false);
         NotificationCenter.getInstance().removeObserver(this, 998);
@@ -316,6 +363,7 @@ public void onDestroyActivity() {
         AndroidUtilities.setWaitingForSms(false);
         NotificationCenter.getInstance().removeObserver(this, 998);
         destroyTimer();
+        destroyCodeTimer();
         waitingForSms = false;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index f3c906c67..3e4059310 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -264,7 +264,11 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         if (obj instanceof TLRPC.User) {
                             dialog_id = ((TLRPC.User) obj).id;
                         } else if (obj instanceof TLRPC.Chat) {
-                            dialog_id = -((TLRPC.Chat) obj).id;
+                            if (((TLRPC.Chat) obj).id > 0) {
+                                dialog_id = -((TLRPC.Chat) obj).id;
+                            } else {
+                                dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
+                            }
                         } else if (obj instanceof TLRPC.EncryptedChat) {
                             dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
                         }
@@ -330,7 +334,10 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
 
-                    if ((int)selectedDialog < 0) {
+                    int lower_id = (int)selectedDialog;
+                    int high_id = (int)(selectedDialog >> 32);
+
+                    if (lower_id < 0 && high_id != 1) {
                         builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory), LocaleController.getString("DeleteChat", R.string.DeleteChat)}, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int which) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index dc519d780..513cbea4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -161,7 +161,7 @@ public void onMessageSend() {
                     return;
                 }
                 NotificationsController.getInstance().popupMessages.remove(currentMessageNum);
-                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.messageOwner.id, Math.max(0, currentMessageObject.messageOwner.id), 0, currentMessageObject.messageOwner.date, true);
+                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.messageOwner.id, Math.max(0, currentMessageObject.messageOwner.id), 0, currentMessageObject.messageOwner.date, true, true);
                 currentMessageObject = null;
                 getNewMessage();
             }
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast3.png
new file mode 100644
index 000000000..d29697597
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast4.png
new file mode 100644
index 000000000..ed908d804
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast4.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png
new file mode 100644
index 000000000..532a1f098
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png
new file mode 100644
index 000000000..09916a977
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast3.png
new file mode 100644
index 000000000..fb81e5ebf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast4.png
new file mode 100644
index 000000000..dda48af2b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast4.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast3.png
new file mode 100644
index 000000000..c95c69020
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast4.png
new file mode 100644
index 000000000..727ee6f41
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast4.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast3.png
new file mode 100644
index 000000000..f89697b73
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast4.png
new file mode 100644
index 000000000..9a1b9b2ab
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast4.png differ
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index bf9f268f8..d84292254 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -308,7 +308,7 @@
     <string name="NoPhotos">لا توجد صور حتى الآن</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
+    <string name="EditVideo">تحرير الفيديو</string>
     <string name="OriginalVideo">Original Video</string>
     <string name="EditedVideo">Edited Video</string>
 
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 33ace9e3c..9a908954b 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -58,12 +58,12 @@
     <string name="SelectChat">Seleziona chat</string>
 
     <!--broadcasts-->
-    <string name="BroadcastList">Broadcast List</string>
-    <string name="NewBroadcastList">New Broadcast List</string>
-    <string name="EnterListName">Enter list name</string>
-    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
-    <string name="AddRecipient">Add Recipient</string>
-    <string name="KickFromBroadcast">Remove from broadcast list</string>
+    <string name="BroadcastList">Lista Broadcast</string>
+    <string name="NewBroadcastList">Nuova Lista Broadcast</string>
+    <string name="EnterListName">Immetti il nome della lista</string>
+    <string name="YouCreatedBroadcastList">Hai creato una lista broadcast</string>
+    <string name="AddRecipient">Aggiungi Destinatario</string>
+    <string name="KickFromBroadcast">Rimuovi dalla lista broadcast</string>
 
     <!--documents view-->
     <string name="SelectFile">Seleziona file</string>
@@ -158,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s ti ha rimosso dal gruppo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s ha lasciato il gruppo %2$s</string>
     <string name="NotificationContactJoined">%1$s ha iniziato a usare Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Termina tutte le sessioni.\n\nGrazie,\nla squadra di Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Termina tutte le sessioni.\n\nGrazie,\nIl Team di Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s ha aggiornato la foto del profilo</string>
 
     <!--contacts view-->
@@ -271,19 +271,19 @@
     <string name="Enabled">Abilitato</string>
     <string name="Disabled">Disabilitato</string>
     <string name="NotificationsService">Servizio notifiche</string>
-    <string name="NotificationsServiceDisableInfo">Se i servizi di Google Play ti bastano per ricevere le notifiche, puoi disabilitare il Servizio notifiche. Tuttavia sarebbe meglio lasciarlo abilitato al fine di mantenere l\'applicazione attiva in background e ricevere notifiche istantanee.</string>
+    <string name="NotificationsServiceDisableInfo">Se i servizi di Google Play sono sufficienti per ricevere le notifiche, è possibile disabilitare il Servizio Notifiche. Ti raccomandiamo comunque di lasciarlo abilitato per lasciare l\'app attiva in background e ricevere le notifiche istantanee.</string>
     <string name="SortBy">Ordina per</string>
     <string name="ImportContacts">Importa contatti</string>
     <string name="WiFiOnly">Solo tramite WiFi</string>
     <string name="SortFirstName">Nome</string>
     <string name="SortLastName">Cognome</string>
     <string name="LedColor">Colore LED</string>
-    <string name="PopupNotification">Notifica popup</string>
+    <string name="PopupNotification">Notifiche Popup</string>
     <string name="NoPopup">Nessun popup</string>
     <string name="OnlyWhenScreenOn">Solo con schermo acceso</string>
     <string name="OnlyWhenScreenOff">Solo con schermo spento</string>
     <string name="AlwaysShowPopup">Mostra sempre i popup</string>
-    <string name="BadgeNumber">Badge Number</string>
+    <string name="BadgeNumber">Contatore Badge</string>
 
     <!--media view-->
     <string name="NoMedia">Nessun media condiviso</string>
@@ -308,9 +308,9 @@
     <string name="NoPhotos">Ancora nessuna foto</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
+    <string name="EditVideo">Modifica Video</string>
+    <string name="OriginalVideo">Video Originale</string>
+    <string name="EditedVideo">Video Modificato</string>
 
     <!--button titles-->
     <string name="Next">Avanti</string>
@@ -372,8 +372,8 @@
     <string name="InvalidLastName">Cognome non valido</string>
     <string name="Loading">Caricamento…</string>
     <string name="NoPlayerInstalled">Non hai un lettore video, per favore installane uno per continuare</string>
-    <string name="NoMailInstalled">Invia un’email a sms@telegram.org spiegandoci il problema.</string>
-    <string name="NoHandleAppInstalled">Non hai nessuna applicazione che può gestire il tipo mime \'%1$s\', installane una per continuare</string>
+    <string name="NoMailInstalled">Invia un’email a sms@telegram.org e parlaci del tuo problema.</string>
+    <string name="NoHandleAppInstalled">Nessuna applicazione può gestire il tipo di file \'%1$s\', per favore installane una per proseguire</string>
     <string name="InviteUser">Questo utente non ha ancora Telegram, vuoi invitarlo?</string>
     <string name="AreYouSure">Sei sicuro?</string>
     <string name="AddContactQ">Vuoi aggiungere il contatto?</string>
@@ -385,7 +385,7 @@
     <string name="AreYouSureSessions">Chiudere tutte le altre sessioni?</string>
     <string name="AreYouSureDeleteAndExit">Eliminare il gruppo e uscire da esso?</string>
     <string name="AreYouSureDeleteThisChat">Eliminare questa chat?</string>
-    <string name="AreYouSureShareMyContactInfo">Condividere le proprie informazioni di contatto?</string>
+    <string name="AreYouSureShareMyContactInfo">Condividere le informazioni del proprio contatto?</string>
     <string name="AreYouSureBlockContact">Bloccare questo contatto?</string>
     <string name="AreYouSureUnblockContact">Sbloccare questo contatto?</string>
     <string name="AreYouSureDeleteContact">Eliminare questo contatto?</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 93ab9bd54..c4b890353 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -58,12 +58,12 @@
     <string name="SelectChat">Kies een gesprek</string>
 
     <!--broadcasts-->
-    <string name="BroadcastList">Broadcast List</string>
-    <string name="NewBroadcastList">New Broadcast List</string>
-    <string name="EnterListName">Enter list name</string>
-    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
-    <string name="AddRecipient">Add Recipient</string>
-    <string name="KickFromBroadcast">Remove from broadcast list</string>
+    <string name="BroadcastList">Verzendlijst</string>
+    <string name="NewBroadcastList">Nieuwe verzendlijst</string>
+    <string name="EnterListName">Naam van lijst</string>
+    <string name="YouCreatedBroadcastList">Je hebt een verzendlijst gemaakt</string>
+    <string name="AddRecipient">Ontvanger toevoegen</string>
+    <string name="KickFromBroadcast">Verwijder van verzendlijst</string>
 
     <!--documents view-->
     <string name="SelectFile">Kies een bestand</string>
@@ -118,7 +118,7 @@
     <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
     <string name="SaveToDownloads">Opslaan in Downloads</string>
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
-    <string name="UnsupportedAttachment">Bijlageformaat niet ondersteund</string>
+    <string name="UnsupportedAttachment">Bestandstype niet ondersteund</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Privégesprek aangevraagd</string>
@@ -158,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s heeft je verwijderd uit de groep %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s heeft de groep %2$s verlaten</string>
     <string name="NotificationContactJoined">%1$s heeft nu Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nEr is op je account ingelogd vanaf een nieuw apparaat op %2$s\n\nApparaat: %3$s\nLocatie: %4$s\n\nAls jij dit niet was, kun je alle sessies beëindigen via Instellingen – Alle andere sessies beëindigen.\n\nHet Telegram-team</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nEr is op je account ingelogd vanaf een nieuw apparaat op %2$s\n\nApparaat: %3$s\nLocatie: %4$s\n\nAls jij dit niet was, kun je alle sessies beëindigen via Instellingen – Beëindig alle andere sessies.\n\nBedankt,\nHet Telegram-team</string>
     <string name="NotificationContactNewPhoto">%1$s heeft zijn/haar profielfoto gewijzigd</string>
 
     <!--contacts view-->
@@ -253,7 +253,7 @@
     <string name="ChatBackground">Achtergrond gesprekken</string>
     <string name="MessagesSettings">BERICHTEN</string>
     <string name="SendByEnter">Verzenden met Enter</string>
-    <string name="TerminateAllSessions">Alle andere sessies beëindigen</string>
+    <string name="TerminateAllSessions">Beëindig alle andere sessies</string>
     <string name="AutomaticPhotoDownload">FOTO\'S AUTOMATISCH DOWNLOADEN</string>
     <string name="AutomaticAudioDownload">GELUIDSBESTANDEN AUTOMATISCH DOWNLOADEN</string>
     <string name="AutomaticPhotoDownloadGroups">Groepen</string>
@@ -271,19 +271,19 @@
     <string name="Enabled">Inschakelen</string>
     <string name="Disabled">Uitschakelen</string>
     <string name="NotificationsService">Meldingenservice</string>
-    <string name="NotificationsServiceDisableInfo">Als google play services genoeg is om notificaties te ontvangen, kan de meldingenservice worden uitgeschakeld. Echter, we adviseren de service ingeschakeld te laten zodat de app in de achtergrond blijft draaien en meldingen direct worden ontvangen.</string>
+    <string name="NotificationsServiceDisableInfo">Als Google Play Services genoeg voor je is om meldingen te ontvangen kun je de Meldingenservice uitschakelen. We raden echter aan dit ingeschakeld te laten om de app in de achtergrond te laten draaien en directe meldingen te ontvangen.</string>
     <string name="SortBy">Sorteren op</string>
     <string name="ImportContacts">Importeer contacten</string>
     <string name="WiFiOnly">Alleen via WiFi</string>
     <string name="SortFirstName">Voornaam</string>
     <string name="SortLastName">Achternaam</string>
     <string name="LedColor">LED kleur</string>
-    <string name="PopupNotification">Popup melding</string>
+    <string name="PopupNotification">Popup meldingen</string>
     <string name="NoPopup">Geen popup</string>
     <string name="OnlyWhenScreenOn">Alleen wanneer scherm \"aan\" staat</string>
     <string name="OnlyWhenScreenOff">Alleen wanneer scherm \"uit\" staat</string>
     <string name="AlwaysShowPopup">Altijd popup tonen</string>
-    <string name="BadgeNumber">Badge Number</string>
+    <string name="BadgeNumber">Badgenummer</string>
 
     <!--media view-->
     <string name="NoMedia">Nog geen media gedeeld</string>
@@ -308,9 +308,9 @@
     <string name="NoPhotos">Nog geen foto\'s</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
+    <string name="EditVideo">Video bewerken</string>
+    <string name="OriginalVideo">Originele video</string>
+    <string name="EditedVideo">Bewerkte video</string>
 
     <!--button titles-->
     <string name="Next">Volgende</string>
@@ -372,8 +372,8 @@
     <string name="InvalidLastName">Ongeldige achternaam</string>
     <string name="Loading">Bezig met laden…</string>
     <string name="NoPlayerInstalled">Je hebt geen mediaspeler. Installeer een mediaspeler om door te gaan.</string>
-    <string name="NoMailInstalled">Stuur aub een emailbericht naar sms@telegram.org en beschrijf uw probleem</string>
-    <string name="NoHandleAppInstalled">Je hebt geen applicaties die het MIME-type \'%1$s\' ondersteunen. Installeer een geschikte applicatie om door te gaan.</string>
+    <string name="NoMailInstalled">Mail ons op sms@telegram.org en vertel ons over je probleem.</string>
+    <string name="NoHandleAppInstalled">Je hebt geen apps die bestandstype \'%1$s\' kunnen verwerken, gelieve een compitabele app te installeren</string>
     <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wil je een uitnodiging sturen?</string>
     <string name="AreYouSure">Weet je het zeker?</string>
     <string name="AddContactQ">Contact toevoegen?</string>
@@ -381,15 +381,15 @@
     <string name="ForwardMessagesTo">Berichten doorsturen naar %1$s?</string>
     <string name="DeleteChatQuestion">Dit gesprek verwijderen?</string>
     <string name="SendMessagesTo">Berichten naar %1$s verzenden?</string>
-    <string name="AreYouSureLogout">Weet u zeker dat u wil uitloggen?</string>
-    <string name="AreYouSureSessions">Alle andere apparaten afmelden?</string>
-    <string name="AreYouSureDeleteAndExit">Deze groep verlaten en groep verwijderen?</string>
-    <string name="AreYouSureDeleteThisChat">Dit gesprek verwijderen?</string>
-    <string name="AreYouSureShareMyContactInfo">Deze contact-informatie delen?</string>
-    <string name="AreYouSureBlockContact">Deze persoon blokkeren?</string>
-    <string name="AreYouSureUnblockContact">Deze persoon deblokkeren?</string>
-    <string name="AreYouSureDeleteContact">Deze contactpersoon verwijderen?</string>
-    <string name="AreYouSureSecretChat">Een privégesprek starten?</string>
+    <string name="AreYouSureLogout">Weet je zeker dat je wilt uitloggen?</string>
+    <string name="AreYouSureSessions">Weet je zeker dat je alle andere sessies wilt beëindigen?</string>
+    <string name="AreYouSureDeleteAndExit">Weet je zeker dat je alles wilt verwijderen en de groep wilt verlaten?</string>
+    <string name="AreYouSureDeleteThisChat">Weet je zeker dat je dit gesprek wilt verwijderen?</string>
+    <string name="AreYouSureShareMyContactInfo">Weet je zeker dat je je contactinformatie wilt delen?</string>
+    <string name="AreYouSureBlockContact">Weet je zeker dat je deze persoon wilt blokkeren?</string>
+    <string name="AreYouSureUnblockContact">Weet je zeker dat je deze persoon wilt deblokkeren?</string>
+    <string name="AreYouSureDeleteContact">Weet je zeker dat je deze contactpersoon wilt verwijderen?</string>
+    <string name="AreYouSureSecretChat">Weet je zeker dat je een privégesprek wilt starten?</string>
     <string name="ForwardFromMyName">doorsturen via mijn eigen naam</string>
 
     <!--Intro view-->
@@ -406,7 +406,7 @@
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligt je berichten tegen hackers</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> heeft geen beperkingen op de grootte van je media en gesprekken</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten vanaf meerdere apparaten</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld en kunnen zichzelf vernietigen</string>
+    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld<![CDATA[<br/>]]>en kunnen zichzelf vernietigen</string>
     <string name="StartMessaging">Begin nu met chatten</string>
 
     <!--plurals-->
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 90d53c6e7..c1d1c3f03 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -58,12 +58,12 @@
     <string name="SelectChat">Selecione uma Conversa</string>
 
     <!--broadcasts-->
-    <string name="BroadcastList">Broadcast List</string>
-    <string name="NewBroadcastList">New Broadcast List</string>
-    <string name="EnterListName">Enter list name</string>
-    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
-    <string name="AddRecipient">Add Recipient</string>
-    <string name="KickFromBroadcast">Remove from broadcast list</string>
+    <string name="BroadcastList">Lista de Broadcast</string>
+    <string name="NewBroadcastList">Nova lista de Broadcast</string>
+    <string name="EnterListName">Digite o nome da lista</string>
+    <string name="YouCreatedBroadcastList">Você criou uma lista de broadcast</string>
+    <string name="AddRecipient">Adicionar Recipiente</string>
+    <string name="KickFromBroadcast">Remover da lista de broadcast</string>
 
     <!--documents view-->
     <string name="SelectFile">Selecione um Arquivo</string>
@@ -158,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s removeu você do grupo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s saiu do grupo %2$s</string>
     <string name="NotificationContactJoined">%1$s entrou para o Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um acesso à sua conta de um novo dispositivo em %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\n\nCaso não tenha sido você, vá para Configurações – Encerrar todas as sessões.\n\nObrigado,\nA equipe do Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um login na sua conta de um novo dispositivo %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\n\nSe não foi você, você pode ir para Configurações - Terminar todas as sessões.\n\nAtenciosamente,\nTime do Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
 
     <!--contacts view-->
@@ -271,19 +271,19 @@
     <string name="Enabled">Ativado</string>
     <string name="Disabled">Desativado</string>
     <string name="NotificationsService">Serviço de Notificações</string>
-    <string name="NotificationsServiceDisableInfo">Se os serviços do Google Play forem suficientes para você receber as notificações, você pode desabilitar o \"Serviço de Notificações\". Porém, nós recomendamos deixá-lo ativo para que o aplicativo continue rodando em segundo plano e recebendo notificações instantâneas.</string>
+    <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play é o suficiente para você, você pode desativar as Notificações de Serviço. No entanto, recomendamos que você deixá-lo habilitado para manter o aplicativo em execução em segundo plano e receber notificações instantâneas.</string>
     <string name="SortBy">Ordenar Por</string>
     <string name="ImportContacts">Importar Contatos</string>
     <string name="WiFiOnly">Apenas por WiFi</string>
     <string name="SortFirstName">Primeiro nome</string>
     <string name="SortLastName">Sobrenome</string>
     <string name="LedColor">Cor do LED</string>
-    <string name="PopupNotification">Notificação Popup</string>
+    <string name="PopupNotification">Notificações Popup</string>
     <string name="NoPopup">Sem popup</string>
     <string name="OnlyWhenScreenOn">Somente com a tela ligada</string>
     <string name="OnlyWhenScreenOff">Somente com a tela desligada</string>
     <string name="AlwaysShowPopup">Sempre mostrar popup</string>
-    <string name="BadgeNumber">Badge Number</string>
+    <string name="BadgeNumber">Contador de medalhas</string>
 
     <!--media view-->
     <string name="NoMedia">Ainda não há mídia compartilhada</string>
@@ -308,9 +308,9 @@
     <string name="NoPhotos">Ainda não há fotos</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
+    <string name="EditVideo">Editar Vídeo</string>
+    <string name="OriginalVideo">Vídeo Original</string>
+    <string name="EditedVideo">Vídeo Editado</string>
 
     <!--button titles-->
     <string name="Next">Próximo</string>
@@ -372,8 +372,8 @@
     <string name="InvalidLastName">Sobrenome inválido</string>
     <string name="Loading">Carregando...</string>
     <string name="NoPlayerInstalled">Você não possui um reprodutor de vídeo, instale um para continuar</string>
-    <string name="NoMailInstalled">Por favor, envie um email para sms@telegram.org e explique seu problema.</string>
-    <string name="NoHandleAppInstalled">Você não possui algum aplicativo que pode lidar com o tipo MIME \'%1$s\'. Por favor, instale um para continuar</string>
+    <string name="NoMailInstalled">Por favor, envie um email para sms@telegram.org e conte-nos sobre seu problema.</string>
+    <string name="NoHandleAppInstalled">Você não possui uma aplicação que suporte o tipo de arquivo \'%1$s\', por favor instale uma e continue</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
     <string name="AddContactQ">Adicionar contato?</string>
@@ -381,15 +381,15 @@
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
     <string name="DeleteChatQuestion">Apagar esta conversa?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
-    <string name="AreYouSureLogout">Você tem certeza que deseja sair dessa sessão?</string>
+    <string name="AreYouSureLogout">Você tem certeza que deseja sair?</string>
     <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
     <string name="AreYouSureDeleteAndExit">Você tem certeza que deseja deletar e sair do grupo?</string>
     <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja deletar esta conversa?</string>
-    <string name="AreYouSureShareMyContactInfo">Você tem certeza que deseja compartilhar as informações do seu contato?</string>
+    <string name="AreYouSureShareMyContactInfo">Você tem certesa que deseja compartilhar suas informações de contato?</string>
     <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
     <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
     <string name="AreYouSureDeleteContact">Você tem certeza que deseja deletar este contato?</string>
-    <string name="AreYouSureSecretChat">Você tem certeza que deseja iniciar uma conversa secreta?</string>
+    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar uma conversa secreta?</string>
     <string name="ForwardFromMyName">encaminhar pelo meu nome</string>
 
     <!--Intro view-->
@@ -406,7 +406,7 @@
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantém suas mensagens seguras contra ataques de hackers</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> não tem limites para o tamanho de suas mídias e conversas</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite que você acesse suas mensagens a partir de vários dispositivos</string>
-    <string name="Page7Message">As mensagens do <![CDATA[<b>Telegram</b>]]> são fortemente criptografadas e podem se autodestruir</string>
+    <string name="Page7Message">As mensagens do <![CDATA[<b>Telegram</b>]]> são fortemente criptografadas<![CDATA[<br/>]]>e podem se autodestruir</string>
     <string name="StartMessaging">Comece a conversar</string>
 
     <!--plurals-->
