diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index a329a7f57..a20b94dee 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -9,11 +9,11 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.android.gms:play-services-gcm:11.0.1'
-    compile 'com.google.android.gms:play-services-maps:11.0.1'
-    compile 'com.google.android.gms:play-services-vision:11.0.1'
-    compile 'com.google.android.gms:play-services-wallet:11.0.1'
-    compile 'com.google.android.gms:play-services-wearable:11.0.1'
+    compile 'com.google.android.gms:play-services-gcm:11.0.2'
+    compile 'com.google.android.gms:play-services-maps:11.0.2'
+    compile 'com.google.android.gms:play-services-vision:11.0.2'
+    compile 'com.google.android.gms:play-services-wallet:11.0.2'
+    compile 'com.google.android.gms:play-services-wearable:11.0.2'
     compile 'com.android.support:support-core-ui:25.3.1'
     compile 'com.android.support:support-compat:25.3.1'
     compile 'com.android.support:support-core-utils:25.3.1'
@@ -90,7 +90,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 1030
+    defaultConfig.versionCode = 1043
 
     sourceSets.debug {
         manifest.srcFile 'config/debug/AndroidManifest.xml'
@@ -160,9 +160,9 @@ android {
     }
 
     defaultConfig {
-        minSdkVersion 14
+        minSdkVersion 16
         targetSdkVersion 25
-        versionName "4.1.1"
+        versionName “4.2.1”
 
         externalNativeBuild {
             ndkBuild {
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index cc90e4ec6..c4c8f94db 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -602,7 +602,8 @@ LOCAL_C_INCLUDES    := \
 ./jni/boringssl/include \
 ./jni/breakpad/common/android/include \
 ./jni/breakpad \
-./jni/ffmpeg/include
+./jni/ffmpeg/include \
+./jni/intro
 
 LOCAL_SRC_FILES     += \
 ./libyuv/source/compare_common.cc \
@@ -660,6 +661,7 @@ LOCAL_SRC_FILES     += \
 ./utils.c \
 ./image.c \
 ./video.c \
+./intro/IntroRenderer.c \
 ./gifvideo.cpp \
 ./SqliteWrapper.cpp \
 ./TgNetWrapper.cpp \
diff --git a/TMessagesProj/jni/intro/IntroRenderer.c b/TMessagesProj/jni/intro/IntroRenderer.c
new file mode 100644
index 000000000..b820f5cee
--- /dev/null
+++ b/TMessagesProj/jni/intro/IntroRenderer.c
@@ -0,0 +1,2841 @@
+#include "IntroRenderer.h"
+#include <math.h>
+#include <stdlib.h>
+#include <jni.h>
+
+static int is_initialized = 0;
+static float _coefficientsX[TIMING_NUM][4], _coefficientsY[TIMING_NUM][4];
+static const float _c0x = 0.0;
+static const float _c0y = 0.0;
+static const float _c3x = 1.0;
+static const float _c3y = 1.0;
+
+float scale_factor;
+int width, height;
+int y_offset_absolute;
+static TextureProgram texture_program;
+static TextureProgram texture_program_one;
+static TextureProgram texture_program_red;
+static TextureProgram texture_program_blue;
+static TextureProgram texture_program_light_red;
+static TextureProgram texture_program_light_blue;
+static TextureProgram *texture_program_temp;
+static ColorProgram color_program;
+static float y_offset;
+
+#define BUFFER_OFFSET(i) ((void*)(i))
+
+static const vec4 black_color = {0.0f, 0.0f, 0.0f, 1.0f};
+static const vec4 white_color = {1.0f, 1.0f, 1.0f, 1.0f};
+
+static LayerParams ribbonLayer, privateLayer;
+
+static TexturedShape spiral;
+static Shape mask1;
+static Shape cloud_extra_mask1;
+static Shape cloud_extra_mask2;
+static Shape cloud_extra_mask3;
+static Shape cloud_extra_mask4;
+
+static Shape cloud_cover;
+
+static Shape free_bg;
+static TexturedShape fast_body;
+static TexturedShape fast_arrow_shadow;
+static TexturedShape fast_arrow;
+
+static TexturedShape free_knot1;
+static TexturedShape free_knot2;
+static TexturedShape free_knot3;
+static TexturedShape free_knot4;
+
+static Shape powerful_bg;
+static TexturedShape powerful_mask, powerful_infinity, powerful_infinity_white;
+
+static Shape private_bg;
+
+static TexturedShape telegram_sphere, telegram_plane;
+
+static Shape cloud_bg;
+
+#define starsCount 80
+static TexturedShape star;
+static Params stars[starsCount];
+
+static Shape ribbon1;
+static Shape ribbon2;
+static Shape ribbon3;
+static Shape ribbon4;
+static mat4x4 stars_matrix;
+static mat4x4 main_matrix;
+static mat4x4 ribbons_layer;
+
+static TexturedShape ic_bubble_dot, ic_bubble, ic_cam_lens, ic_cam, ic_pencil, ic_pin, ic_smile_eye, ic_smile, ic_videocam;
+static GLuint ic_bubble_dot_texture, ic_bubble_texture, ic_cam_lens_texture, ic_cam_texture, ic_pencil_texture, ic_pin_texture, ic_smile_eye_texture, ic_smile_texture, ic_videocam_texture;
+static GLuint telegram_sphere_texture, telegram_plane_texture;
+static GLuint fast_spiral_texture, fast_body_texture, fast_arrow_texture, fast_arrow_shadow_texture;
+static GLuint free_knot_up_texture, free_knot_down_texture;
+static GLuint powerful_mask_texture, powerful_star_texture, powerful_infinity_texture, powerful_infinity_white_texture;
+static GLuint private_door_texture, private_screw_texture, private_keyhole_body_texture;
+static Shape infinity;
+
+static TexturedShape private_door, private_screw, private_keyhole_body;
+static Shape private_stroke;
+
+static Shape start_button;
+
+static const float r1 = 58.5f;
+static const float r2 = 70;
+static double ms0;
+static float date, date0;
+static float duration_const = 0.3f;
+static int direct;
+static int i;
+static int current_page, prev_page;
+static float time;
+static mat4x4 ic_matrix;
+static LayerParams ic_pin_layer, ic_cam_layer, ic_videocam_layer, ic_smile_layer, ic_bubble_layer, ic_pencil_layer;
+static float time_local = 0;
+static float knot_delays[4];
+static float offset_y;
+static float ribbonLength = 86.5f;
+static int starsFar = 500;
+static float scroll_offset;
+
+static float calculated_speedometer_sin;
+float ms0_anim;
+int fps_anim;
+int count_anim_fps;
+static float speedometer_scroll_offset = 0, free_scroll_offset = 0, private_scroll_offset = 0;
+float anim_pencil_start_time, anim_pencil_start_all_time, anim_pencil_start_all_end_time;
+int anim_pencil_stage;
+int anim_bubble_dots_stage;
+int anim_bubble_dots_end_period;
+float anim_videocam_start_time, anim_videocam_next_time, anim_videocam_duration, anim_videocam_angle, anim_videocam_old_angle;
+float anim_cam_start_time, anim_cam_next_time, anim_cam_duration, anim_cam_angle, anim_cam_old_angle;
+CPoint anim_cam_position, anim_cam_old_position;
+int qShot;
+float anim_camshot_start_time, anim_camshot_duration;
+float anim_smile_start_time1, anim_smile_start_time2, anim_smile_blink_start_time;
+int anim_smile_blink_one;
+int anim_smile_stage;
+static float scale;
+float anim_pin_start_time, anim_pin_duration;
+static int anim_pencil_period;
+static mat4x4 private_matrix;
+float cloud_scroll_offset;
+
+static inline void vec2_add(vec2 r, vec2 a, vec2 b) {
+    int i;
+    for (i = 0; i < 2; ++i) {
+        r[i] = a[i] + b[i];
+    }
+}
+
+static inline float vec2_mul_inner(vec2 a, vec2 b) {
+    float p = 0.f;
+    int i;
+    for (i = 0; i < 2; ++i) {
+        p += b[i]*a[i];
+    }
+    return p;
+}
+
+static inline float vec2_len(vec2 v) {
+    return sqrtf(vec2_mul_inner(v, v));
+}
+
+static inline void vec2_scale(vec2 r, vec2 v, float s) {
+    int i;
+    for (i = 0; i < 2; ++i) {
+        r[i] = v[i] * s;
+    }
+}
+
+static inline void vec2_norm(vec2 r, vec2 v) {
+    float k = 1.f / vec2_len(v);
+    vec2_scale(r, v, k);
+}
+
+static inline void mat4x4_identity(mat4x4 M) {
+    int i, j;
+    for (i = 0; i < 4; ++i) {
+        for (j = 0; j < 4; ++j) {
+            M[i][j] = i == j ? 1.f : 0.f;
+        }
+    }
+}
+
+static inline void mat4x4_dup(mat4x4 M, mat4x4 N) {
+    int i, j;
+    for (i = 0; i < 4; ++i) {
+        for (j = 0; j < 4; ++j) {
+            M[i][j] = N[i][j];
+        }
+    }
+}
+
+static inline void vec4_scale(vec4 r, vec4 v, float s) {
+    int i;
+    for (i = 0; i < 4; ++i) {
+        r[i] = v[i] * s;
+    }
+}
+
+static inline void mat4x4_scale_aniso(mat4x4 M, mat4x4 a, float x, float y, float z) {
+    vec4_scale(M[0], a[0], x);
+    vec4_scale(M[1], a[1], y);
+    vec4_scale(M[2], a[2], z);
+}
+
+static inline void mat4x4_mul(mat4x4 M, mat4x4 a, mat4x4 b) {
+    int k, r, c;
+    for (c = 0; c < 4; ++c) {
+        for (r = 0; r < 4; ++r) {
+            M[c][r] = 0.f;
+            for (k = 0; k < 4; ++k) {
+                M[c][r] += a[k][r] * b[c][k];
+            }
+        }
+    }
+}
+
+static inline void mat4x4_mul_vec4(vec4 r, mat4x4 M, vec4 v) {
+    int i, j;
+    for (j = 0; j < 4; ++j) {
+        r[j] = 0.f;
+        for (i = 0; i < 4; ++i) {
+            r[j] += M[i][j] * v[i];
+        }
+    }
+}
+
+static inline void mat4x4_translate(mat4x4 T, float x, float y, float z) {
+    mat4x4_identity(T);
+    T[3][0] = x;
+    T[3][1] = y;
+    T[3][2] = z;
+}
+
+static inline void mat4x4_rotate_Z2(mat4x4 Q, mat4x4 M, float angle) {
+    float s = sinf(angle);
+    float c = cosf(angle);
+    mat4x4 R = {
+            {c,   s,   0.f, 0.f},
+            {-s,  c,   0.f, 0.f},
+            {0.f, 0.f, 1.f, 0.f},
+            {0.f, 0.f, 0.f, 1.f}
+    };
+    mat4x4_mul(Q, M, R);
+}
+
+static inline void mat4x4_rotate_Z(mat4x4 Q, float angle) {
+    mat4x4 temp;
+    mat4x4_dup(temp, Q);
+    mat4x4_rotate_Z2(Q, temp, angle);
+}
+
+static inline void mat4x4_translate_in_place(mat4x4 m, float x, float y, float z)  {
+    int i;
+    for (i = 0; i < 4; ++i) {
+        m[3][i] += m[0][i] * x + m[1][i] * y + m[2][i] * z;
+    }
+}
+
+static inline float deg_to_radf(float deg) {
+    return deg * (float)M_PI / 180.0f;
+}
+
+static inline float MAXf(float a, float b) {
+    return a > b ? a : b;
+}
+
+static inline float MINf(float a, float b) {
+    return a < b ? a : b;
+}
+
+GLuint compile_shader(const GLenum type, const GLchar* source, const GLint length) {
+    GLuint shader_object_id = glCreateShader(type);
+    GLint compile_status;
+    glShaderSource(shader_object_id, 1, &source, &length);
+    glCompileShader(shader_object_id);
+    glGetShaderiv(shader_object_id, GL_COMPILE_STATUS, &compile_status);
+    return shader_object_id;
+}
+
+GLuint link_program(const GLuint vertex_shader, const GLuint fragment_shader) {
+    GLuint program_object_id = glCreateProgram();
+    GLint link_status;
+    glAttachShader(program_object_id, vertex_shader);
+    glAttachShader(program_object_id, fragment_shader);
+    glLinkProgram(program_object_id);
+    glGetProgramiv(program_object_id, GL_LINK_STATUS, &link_status);
+    return program_object_id;
+}
+
+GLuint build_program(const GLchar * vertex_shader_source, const GLint vertex_shader_source_length, const GLchar * fragment_shader_source, const GLint fragment_shader_source_length) {
+    GLuint vertex_shader = compile_shader(GL_VERTEX_SHADER, vertex_shader_source, vertex_shader_source_length);
+    GLuint fragment_shader = compile_shader(GL_FRAGMENT_SHADER, fragment_shader_source, fragment_shader_source_length);
+    return link_program(vertex_shader, fragment_shader);
+}
+
+GLuint create_vbo(const size_t size, const GLvoid* data, const GLenum usage) {
+    GLuint vbo_object;
+    glGenBuffers(1, &vbo_object);
+    glBindBuffer(GL_ARRAY_BUFFER, vbo_object);
+    glBufferData(GL_ARRAY_BUFFER, (GLsizeiptr) size, data, usage);
+    glBindBuffer(GL_ARRAY_BUFFER, 0);
+    return vbo_object;
+}
+
+TextureProgram get_texture_program(GLuint program) {
+    return (TextureProgram) {
+            program,
+            glGetAttribLocation(program, "a_Position"),
+            glGetAttribLocation(program, "a_TextureCoordinates"),
+            glGetUniformLocation(program, "u_MvpMatrix"),
+            glGetUniformLocation(program, "u_TextureUnit"),
+            glGetUniformLocation(program, "u_Alpha")};
+}
+
+ColorProgram get_color_program(GLuint program) {
+    return (ColorProgram) {
+            program,
+            glGetAttribLocation(program, "a_Position"),
+            glGetUniformLocation(program, "u_MvpMatrix"),
+            glGetUniformLocation(program, "u_Color"),
+            glGetUniformLocation(program, "u_Alpha")};
+}
+
+float frand(float from, float to) {
+    return (float) (((double) random() / RAND_MAX) * (to - from) + from);
+}
+
+int irand(int from, int to) {
+    return (int) (((double) random() / RAND_MAX) * (to - from + 1) + from);
+}
+
+int signrand() {
+    return irand(0, 1) * 2 - 1;
+}
+
+static inline float evaluateAtParameterWithCoefficients(float t, float coefficients[]) {
+    return coefficients[0] + t*coefficients[1] + t*t*coefficients[2] + t*t*t*coefficients[3];
+}
+
+static inline float evaluateDerivationAtParameterWithCoefficients(float t, float coefficients[]) {
+    return coefficients[1] + 2*t*coefficients[2] + 3*t*t*coefficients[3];
+}
+
+static inline float calcParameterViaNewtonRaphsonUsingXAndCoefficientsForX(float x, float coefficientsX[]) {
+    float t = x;
+    int i;
+    for (i = 0; i < 10; i++) {
+        float x2 = evaluateAtParameterWithCoefficients(t, coefficientsX) - x;
+        float d = evaluateDerivationAtParameterWithCoefficients(t, coefficientsX);
+        float dt = x2 / d;
+        t = t - dt;
+    }
+    return t;
+}
+
+static inline float calcParameterUsingXAndCoefficientsForX (float x, float coefficientsX[]) {
+    return calcParameterViaNewtonRaphsonUsingXAndCoefficientsForX(x, coefficientsX);
+}
+
+float timing(float x, timing_type type) {
+    if (is_initialized == 0) {
+        is_initialized = 1;
+
+        float c[TIMING_NUM][4];
+        c[Default][0] = 0.25f;
+        c[Default][1] = 0.1f;
+        c[Default][2] = 0.25f;
+        c[Default][3] = 1.0f;
+        c[EaseInEaseOut][0] = 0.42f;
+        c[EaseInEaseOut][1] = 0.0f;
+        c[EaseInEaseOut][2] = 0.58f;
+        c[EaseInEaseOut][3] = 1.0f;
+        c[EaseIn][0] = 0.42f;
+        c[EaseIn][1] = 0.0f;
+        c[EaseIn][2] = 1.0f;
+        c[EaseIn][3] = 1.0f;
+        c[EaseOut][0] = 0.0f;
+        c[EaseOut][1] = 0.0f;
+        c[EaseOut][2] = 0.58f;
+        c[EaseOut][3] = 1.0f;
+        c[EaseOutBounce][0] = 0.0f;
+        c[EaseOutBounce][1] = 0.0f;
+        c[EaseOutBounce][2] = 0.0f;
+        c[EaseOutBounce][3] = 1.25;
+        c[Linear][0] = 0.0;
+        c[Linear][1] = 0.0;
+        c[Linear][2] = 1.0;
+        c[Linear][3] = 1.0;
+        int i;
+        for (i = 0; i < TIMING_NUM; i++) {
+            float _c1x = c[i][0];
+            float _c1y = c[i][1];
+            float _c2x = c[i][2];
+            float _c2y = c[i][3];
+            _coefficientsX[i][0] = _c0x;
+            _coefficientsX[i][1] = -3.0f * _c0x + 3.0f * _c1x;
+            _coefficientsX[i][2] = 3.0f * _c0x - 6.0f * _c1x + 3.0f * _c2x;
+            _coefficientsX[i][3] = -_c0x + 3.0f * _c1x - 3.0f * _c2x + _c3x;
+            _coefficientsY[i][0] = _c0y;
+            _coefficientsY[i][1] = -3.0f * _c0y + 3.0f * _c1y;
+            _coefficientsY[i][2] = 3.0f * _c0y - 6.0f * _c1y + 3.0f * _c2y;
+            _coefficientsY[i][3] = -_c0y + 3.0f * _c1y - 3.0f * _c2y + _c3y;
+        }
+    }
+
+    if (x == 0.0 || x == 1.0) {
+        return x;
+    }
+    float t = calcParameterUsingXAndCoefficientsForX(x, _coefficientsX[type]);
+    float y = evaluateAtParameterWithCoefficients(t, _coefficientsY[type]);
+    return y;
+}
+
+void set_y_offset_objects(float a) {
+    y_offset = a;
+}
+
+void setup_shaders() {
+    const char *vshader =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "void main(){"
+            "   gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    const char *fshader =
+            "precision lowp float;"
+            "uniform vec4 u_Color;"
+            "uniform float u_Alpha;"
+            "void main() {"
+            "   gl_FragColor = u_Color;"
+            "   gl_FragColor.w*=u_Alpha;"
+            "}";
+
+    color_program = get_color_program(build_program(vshader, (GLint)strlen(vshader), fshader, (GLint)strlen(fshader)));
+
+    const char *vshader_texture =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    const char *fshader_texture =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "    gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "    gl_FragColor.w *= u_Alpha;"
+            "}";
+
+    texture_program = get_texture_program(build_program(vshader_texture, (GLint)strlen(vshader_texture), fshader_texture, (GLint)strlen(fshader_texture)));
+
+    const char *vshader_texture_blue =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    const char *fshader_texture_blue  =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "    gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "   float p = u_Alpha*gl_FragColor.w;"
+            "   gl_FragColor = vec4(0,0.6,0.898,p);"
+            "}";
+
+    texture_program_blue = get_texture_program(build_program(vshader_texture_blue, (GLint)strlen(vshader_texture_blue), fshader_texture_blue, (GLint)strlen(fshader_texture_blue)));
+
+    const char *vshader_texture_red  =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    const char *fshader_texture_red  =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "   gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "   float p = gl_FragColor.w*u_Alpha;"
+            "   gl_FragColor = vec4(210./255.,57./255.,41./255.,p);"
+            "}";
+
+    texture_program_red = get_texture_program(build_program(vshader_texture_red, (GLint)strlen(vshader_texture_red), fshader_texture_red, (GLint)strlen(fshader_texture_red)));
+
+    vshader =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    fshader  =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "    gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "    float p = u_Alpha*gl_FragColor.w;"
+            "    gl_FragColor = vec4(246./255., 73./255., 55./255., p);"
+            "}";
+
+    texture_program_light_red = get_texture_program(build_program(vshader, (GLint)strlen(vshader), fshader, (GLint)strlen(fshader)));
+
+    vshader  =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    fshader  =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "    gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "    float p = u_Alpha*gl_FragColor.w;"
+            "    gl_FragColor = vec4(42./255.,180./255.,247./255.,p);"
+            "}";
+
+    texture_program_light_blue = get_texture_program(build_program(vshader, (GLint)strlen(vshader), fshader, (GLint)strlen(fshader)));
+
+    vshader  =
+            "uniform mat4 u_MvpMatrix;"
+            "attribute vec4 a_Position;"
+            "attribute vec2 a_TextureCoordinates;"
+            "varying vec2 v_TextureCoordinates;"
+            "void main(){"
+            "    v_TextureCoordinates = a_TextureCoordinates;"
+            "    gl_Position = u_MvpMatrix * a_Position;"
+            "}";
+
+    fshader  =
+            "precision lowp float;"
+            "uniform sampler2D u_TextureUnit;"
+            "varying vec2 v_TextureCoordinates;"
+            "uniform float u_Alpha;"
+            "void main(){"
+            "    gl_FragColor = texture2D(u_TextureUnit, v_TextureCoordinates);"
+            "    gl_FragColor *= u_Alpha;"
+            "}";
+
+    texture_program_one = get_texture_program(build_program(vshader, (GLint)strlen(vshader), fshader, (GLint)strlen(fshader)));
+}
+
+CPoint CPointMake(float x, float y) {
+    CPoint p = {x, y};
+    return p;
+}
+
+CSize CSizeMake(float width, float height) {
+    CSize s = {width, height};
+    return s;
+}
+
+float D2R(float a) {
+    return (float)(a * M_PI / 180.0);
+}
+
+float R2D(float a) {
+    return (float)(a * 180.0 / M_PI);
+}
+
+xyz xyzMake(float x, float y, float z) {
+    xyz result;
+    result.x = x;
+    result.y = y;
+    result.z = z;
+    return result;
+}
+
+LayerParams default_layer_params() {
+    LayerParams params;
+    params.anchor.x = params.anchor.y = params.anchor.z = 0;
+    params.position.x = params.position.y = params.position.z = 0;
+    params.rotation = 0;
+    params.scale.x = params.scale.y = params.scale.z = 1.0f;
+    return params;
+}
+
+Params default_params() {
+    Params params;
+    params.anchor.x = params.anchor.y = params.anchor.z = 0.0f;
+    params.position.x = params.position.y = params.position.z = 0.0f;
+    params.rotation = 0;
+    params.scale.x = params.scale.y = params.scale.z = 1.0f;
+    params.alpha = 1.0f;
+    params.var_params.side_length = 0;
+    params.var_params.start_angle = 0;
+    params.var_params.end_angle = 0;
+    params.var_params.angle = 0;
+    params.var_params.size = CSizeMake(0, 0);
+    params.var_params.radius = 0;
+    params.var_params.width = 0;
+    params.const_params.is_star = 0;
+    params.layer_params = default_layer_params();
+    return params;
+}
+
+void mat4x4_translate_independed(mat4x4 m, float x, float y, float z) {
+    mat4x4 tr;
+    mat4x4_identity(tr);
+    mat4x4_translate_in_place(tr, x, y, z);
+    mat4x4 m_dup;
+    mat4x4_dup(m_dup, m);
+    mat4x4_mul(m, tr, m_dup);
+}
+
+static inline void mvp_matrix(mat4x4 model_view_projection_matrix, Params params, mat4x4 view_projection_matrix) {
+    mat4x4 model_matrix;
+    mat4x4_identity(model_matrix);
+    mat4x4 id;
+    mat4x4_identity(id);
+    mat4x4_translate(model_matrix, -params.anchor.x, -params.anchor.y, params.anchor.z);
+    mat4x4 scaled;
+    mat4x4_identity(scaled);
+    mat4x4_scale_aniso(scaled, scaled, params.scale.x, -params.scale.y, params.scale.z);
+    mat4x4 tmp;
+    mat4x4_dup(tmp, model_matrix);
+    mat4x4_mul(model_matrix, scaled, tmp);
+    mat4x4 rotate;
+    mat4x4_dup(rotate, id);
+    mat4x4_rotate_Z2(rotate, id, deg_to_radf(-params.rotation));
+    mat4x4_dup(tmp, model_matrix);
+    mat4x4_mul(model_matrix, rotate, tmp);
+    mat4x4_translate_independed(model_matrix, params.position.x, -params.position.y, params.position.z);
+    mat4x4 model_matrix3;
+    mat4x4_identity(model_matrix3);
+    mat4x4 mm;
+    mat4x4_mul(mm, model_matrix3, view_projection_matrix);
+    mat4x4_mul(model_view_projection_matrix, mm, model_matrix);
+    mat4x4_translate_independed(model_view_projection_matrix, 0, -y_offset / view_projection_matrix[3][3], 0);
+}
+
+void draw_shape(const Shape* shape, mat4x4 view_projection_matrix) {
+    if (shape->params.alpha > 0 && (fabs(shape->params.scale.x) > 0 && fabs(shape->params.scale.y) > 0 && fabs(shape->params.scale.z) > 0)) {
+        mat4x4 model_view_projection_matrix;
+        mvp_matrix(model_view_projection_matrix, shape->params, view_projection_matrix);
+        glUseProgram(color_program.program);
+        glUniformMatrix4fv(color_program.u_mvp_matrix_location, 1, GL_FALSE, (GLfloat *) model_view_projection_matrix);
+        if (shape->params.rotation == 5.0f) {
+            glUniform4fv(color_program.u_color_location, 1, shape->color);
+        } else if (shape->params.rotation == 10.0f) {
+            vec4 col = {0, 1, 0, 1};
+            glUniform4fv(color_program.u_color_location, 1, col);
+        } else {
+            glUniform4fv(color_program.u_color_location, 1, shape->color);
+        }
+        glUniform1f(color_program.u_alpha_loaction, shape->params.alpha);
+        glVertexAttribPointer(color_program.a_position_location, 2, GL_FLOAT, GL_FALSE, sizeof(CPoint), &shape->data[0].x);
+        glEnableVertexAttribArray(color_program.a_position_location);
+        glDrawArrays(shape->params.const_params.triangle_mode, 0, shape->num_points);
+    }
+}
+
+void draw_textured_shape(const TexturedShape* shape, mat4x4 view_projection_matrix, texture_program_type program_type) {
+    if (shape->params.alpha > 0 && (fabs(shape->params.scale.x) > 0 && fabs(shape->params.scale.y) > 0 && fabs(shape->params.scale.z) > 0)) {
+        mat4x4 model_view_projection_matrix;
+        mvp_matrix(model_view_projection_matrix, shape->params, view_projection_matrix);
+        if (shape->params.const_params.is_star == 1) {
+            vec4 pos;
+            vec4 vertex = {0, 0, 0, 1};
+            mat4x4_mul_vec4(pos, model_view_projection_matrix, vertex);
+            vec4 p_NDC = {pos[0] / pos[3], pos[1] / pos[3], pos[2] / pos[3], pos[3] / pos[3]};
+            vec4 p_window = {p_NDC[0] * width, -p_NDC[1] * height, 0, 0};
+            int d = 160;
+            if (fabs(p_window[0]) > d || p_window[1] > y_offset_absolute * 2 + d || p_window[1] < y_offset_absolute * 2 - d) {
+                return;
+            }
+        }
+        if (program_type == RED) {
+            texture_program_temp = &texture_program_red;
+        } else if (program_type == BLUE) {
+            texture_program_temp = &texture_program_blue;
+        } else if (program_type == LIGHT_RED) {
+            texture_program_temp = &texture_program_light_red;
+        } else if (program_type == LIGHT_BLUE) {
+            texture_program_temp = &texture_program_light_blue;
+        } else if (program_type == NORMAL_ONE) {
+            texture_program_temp = &texture_program_one;
+        } else {
+            texture_program_temp = &texture_program;
+        }
+
+
+        glUseProgram(texture_program_temp->program);
+
+        glActiveTexture(GL_TEXTURE0);
+        glBindTexture(GL_TEXTURE_2D, shape->texture);
+        glUniformMatrix4fv(texture_program_temp->u_mvp_matrix_location, 1, GL_FALSE, (GLfloat *) model_view_projection_matrix);
+        glUniform1i(texture_program_temp->u_texture_unit_location, 0);
+        glUniform1f(texture_program_temp->u_alpha_loaction, shape->params.alpha);
+
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glVertexAttribPointer(texture_program_temp->a_position_location, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(GL_FLOAT), BUFFER_OFFSET(0));
+        glVertexAttribPointer(texture_program_temp->a_texture_coordinates_location, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(GL_FLOAT), BUFFER_OFFSET(2 * sizeof(GL_FLOAT)));
+        glEnableVertexAttribArray(texture_program_temp->a_position_location);
+        glEnableVertexAttribArray(texture_program_temp->a_texture_coordinates_location);
+        glDrawArrays(shape->params.const_params.triangle_mode, 0, shape->num_points);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+static inline int size_of_rounded_rectangle_in_vertices(int round_count) {
+    return 4*(2+round_count)+2;
+}
+
+static inline void gen_rounded_rectangle(CPoint* out, CSize size, float radius, int round_count) {
+    int offset = 0;
+    out[offset++] = CPointMake(0, 0);
+    float k = (float) (M_PI / 2 / (round_count + 1));
+    int i = 0;
+    int n = 0;
+    for (i = (round_count + 2) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * radius, size.height / 2 - radius + sinf(i * k) * radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * radius, size.height / 2 - radius + sinf(i * k) * radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * radius, -size.height / 2 + radius + sinf(i * k) * radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * radius, -size.height / 2 + radius + sinf(i * k) * radius);
+    }
+    out[offset] = CPointMake(size.width / 2, size.height / 2 - radius);
+}
+
+Shape create_rounded_rectangle(CSize size, float radius, int round_count, const vec4 color) {
+    int real_vertex_count = size_of_rounded_rectangle_in_vertices(round_count);
+
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count * 2;
+    params.const_params.round_count = round_count;
+    params.const_params.triangle_mode = GL_TRIANGLE_FAN;
+
+    params.var_params.size = size;
+    params.var_params.radius = radius;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_rounded_rectangle(data, params.var_params.size, params.var_params.radius, params.const_params.round_count);
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+void change_rounded_rectangle(Shape* shape, CSize size, float radius) {
+    if ((*shape).params.var_params.size.width != size.width || (*shape).params.var_params.size.height != size.height || (*shape).params.var_params.radius != radius) {
+        (*shape).params.var_params.size.width = size.width;
+        (*shape).params.var_params.size.height = size.height;
+        (*shape).params.var_params.radius = radius;
+        gen_rounded_rectangle((*shape).data, (*shape).params.var_params.size, (*shape).params.var_params.radius, (*shape).params.const_params.round_count);
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glBufferSubData(GL_ARRAY_BUFFER, 0, shape->params.const_params.datasize, shape->data);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+static inline int size_of_segmented_square_in_vertices() {
+    return 7;
+}
+
+static inline CPoint square_point(float angle, float radius) {
+    CPoint p = {0.0f, 0.0f};
+    if (angle <= M_PI / 2 * 0.5f || angle > M_PI / 2 * 3.5f) {
+        p = CPointMake(radius, radius * sinf(angle) / cosf(angle));
+    } else if (angle <= M_PI / 2 * 1.5) {
+        p = CPointMake(radius * cosf(angle) / sinf(angle), radius);
+    } else if (angle <= M_PI / 2 * 2.5) {
+        p = CPointMake(-radius, -radius * sinf(angle) / cosf(angle));
+    } else if (angle <= (float) (M_PI / 2 * 3.5)) {
+        p = CPointMake(-radius * cosf(angle) / sinf(angle), -radius);
+    }
+    return p;
+}
+
+static inline CPoint square_texture_point(CPoint p, float side_length) {
+    return CPointMake((-p.x / side_length * 0.5f + 0.5f), -p.y / side_length * 0.5f + 0.5f);
+}
+
+static inline void gen_segmented_square(CPoint* out, float side_length, float start_angle, float end_angle) {
+    CPoint p;
+    float radius = side_length;
+    int offset = 0;
+    float k = 1;
+    float da = D2R(-2.6f * 2) * k;
+    p = CPointMake(sinf(start_angle + end_angle) * 6 * k, -cosf(start_angle + end_angle) * 6 * k);
+    out[offset++] = p;
+    out[offset++] = square_texture_point(p, side_length);
+    p = square_point(start_angle + da, radius);
+    out[offset++] = p;
+    out[offset++] = square_texture_point(p, side_length);
+    int q = 0;
+    int i;
+    for (i = (int) start_angle; i < floorf(R2D(start_angle + end_angle + da)); i++) {
+        if ((i + 45) % 90 == 0) {
+            p = square_point(D2R(i), radius);
+            out[offset++] = p;
+            out[offset++] = square_texture_point(p, side_length);
+            q++;
+        }
+    }
+    p = square_point(start_angle + end_angle + da, radius);
+    out[offset++] = p;
+    out[offset++] = square_texture_point(p, side_length);
+    for (i = 0; i < 4 - q; i++) {
+        p = square_point(start_angle + end_angle + da, radius);
+        out[offset++] = p;
+        out[offset++] = square_texture_point(p, side_length);
+    }
+}
+
+TexturedShape create_segmented_square(float side_length, float start_angle, float end_angle, GLuint texture) {
+    int real_vertex_count = size_of_segmented_square_in_vertices();
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count * 2 * 2;
+    params.const_params.triangle_mode = GL_TRIANGLE_FAN;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_segmented_square(data, side_length, start_angle, end_angle);
+    return (TexturedShape) {texture, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+void change_segmented_square(TexturedShape* shape, float side_length, float start_angle, float end_angle) {
+    if ((*shape).params.var_params.side_length != side_length || (*shape).params.var_params.start_angle != start_angle || (*shape).params.var_params.end_angle != end_angle) {
+        (*shape).params.var_params.side_length = side_length;
+        (*shape).params.var_params.start_angle = start_angle;
+        (*shape).params.var_params.end_angle = end_angle;
+        gen_segmented_square((*shape).data, side_length, start_angle, end_angle);
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glBufferSubData(GL_ARRAY_BUFFER, 0, shape->params.const_params.datasize, shape->data);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+static inline void gen_rectangle(CPoint* out, CSize size) {
+    out[0] = CPointMake(-size.width / 2, -size.height / 2);
+    out[1] = CPointMake(size.width / 2, -size.height / 2);
+    out[2] = CPointMake(-size.width / 2, size.height / 2);
+    out[3] = CPointMake(size.width / 2, size.height / 2);
+}
+
+Shape create_rectangle(CSize size, const vec4 color) {
+    int real_vertex_count = 4;
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count;
+    params.const_params.triangle_mode = GL_TRIANGLE_STRIP;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_rectangle(data, size);
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+static inline CPoint rectangle_texture_point(CPoint p, CSize size) {
+    return CPointMake(1 - (-p.x / size.width + 0.5f), p.y / size.height + 0.5f);
+}
+
+static inline void gen_textured_rectangle(CPoint* out, CSize size) {
+    out[0] = CPointMake(-size.width / 2, -size.height / 2);
+    out[1] = rectangle_texture_point(CPointMake(-size.width / 2, -size.height / 2), size);
+    out[2] = CPointMake(size.width / 2, -size.height / 2);
+    out[3] = rectangle_texture_point(CPointMake(size.width / 2, -size.height / 2), size);
+    out[4] = CPointMake(-size.width / 2, size.height / 2);
+    out[5] = rectangle_texture_point(CPointMake(-size.width / 2, size.height / 2), size);
+    out[6] = CPointMake(size.width / 2, size.height / 2);
+    out[7] = rectangle_texture_point(CPointMake(size.width / 2, size.height / 2), size);
+}
+
+TexturedShape create_textured_rectangle(CSize size, GLuint texture) {
+    int real_vertex_count = 4;
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count * 2;
+    params.const_params.triangle_mode = GL_TRIANGLE_STRIP;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_textured_rectangle(data, size);
+    return (TexturedShape) {texture, data, create_vbo(params.const_params.datasize, data, GL_STATIC_DRAW), real_vertex_count, params};
+}
+
+static inline void gen_ribbon(CPoint* out, float length) {
+    out[0] = CPointMake(-MAXf(length - 5.5f, 0), -5.5f);
+    out[1] = CPointMake(0, -5.5f);
+    out[2] = CPointMake(-MAXf(length, 0), 5.5f);
+    out[3] = CPointMake(0, 5.5f);
+}
+
+Shape create_ribbon(float length, const vec4 color) {
+    int real_vertex_count = 4;
+    Params params=default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count;
+    params.const_params.triangle_mode = GL_TRIANGLE_STRIP;
+    params.var_params.side_length = length;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_ribbon(data, length);
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+void change_ribbon(Shape* shape, float length) {
+    if ((*shape).params.var_params.side_length != length) {
+        (*shape).params.var_params.side_length = length;
+        gen_ribbon((*shape).data, length);
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glBufferSubData(GL_ARRAY_BUFFER, 0, shape->params.const_params.datasize, shape->data);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+static inline int size_of_segmented_circle_in_vertices(int num_points) {
+    return 1 + (num_points + 1);
+}
+
+static inline void gen_circle(CPoint* out, float radius, int vertex_count) {
+    int offset = 0;
+    out[offset++] = CPointMake(0, 0);
+    int i;
+    for (i = 0; i <= vertex_count; i++) {
+        out[offset++] = CPointMake(radius * (cosf(2 * (float) M_PI * (i / (float) vertex_count))), radius * sinf(2 * (float) M_PI * (i / (float) vertex_count)));
+    }
+}
+
+Shape create_circle(float radius, int vertex_count, const vec4 color) {
+    int real_vertex_count = size_of_segmented_circle_in_vertices(vertex_count);
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count;
+    params.const_params.triangle_mode = GL_TRIANGLE_FAN;
+    params.const_params.round_count = vertex_count;
+    CPoint *data = (CPoint *) malloc(params.const_params.datasize);
+    gen_circle(data, radius, vertex_count);
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_STATIC_DRAW), real_vertex_count, params};
+}
+
+int size_of_infinity_in_vertices(int segment_count) {
+    return (segment_count + 1) * 2;
+}
+
+static inline void gen_infinity(CPoint* out, float width, float angle, int segment_count) {
+    CPoint path[13];
+    path[0] = CPointMake(53, 23);
+    path[1] = CPointMake(49, 31);
+    path[2] = CPointMake(39, 47);
+    path[3] = CPointMake(22, 47);
+    path[4] = CPointMake(6, 47);
+    path[5] = CPointMake(0, 31);
+    path[6] = CPointMake(0, 23);
+    path[7] = CPointMake(0, 16);
+    path[8] = CPointMake(5, 0);
+    path[9] = CPointMake(23, 0);
+    path[10] = CPointMake(39, 0);
+    path[11] = CPointMake(48, 15);
+    path[12] = CPointMake(52, 21);
+    int offset = 0;
+    int seg;
+    for (seg = 0; seg <= segment_count; seg++) {
+        float tt = ((float) seg / (float) segment_count) * angle;
+        int q = 4;
+        float tstep = 1.f / q;
+        int n = (int) floor(tt / tstep);
+        CPoint a = path[0 + 3 * n];;
+        CPoint p1 = path[1 + 3 * n];
+        CPoint p2 = path[2 + 3 * n];
+        CPoint b = path[3 + 3 * n];
+        float t = (tt - tstep * n) * q;
+        float nt = 1.0f - t;
+
+        vec2 p = {a.x * nt * nt * nt + 3.0f * p1.x * nt * nt * t + 3.0f * p2.x * nt * t * t + b.x * t * t * t,
+                  a.y * nt * nt * nt + 3.0f * p1.y * nt * nt * t + 3.0f * p2.y * nt * t * t + b.y * t * t * t};
+        vec2 tangent = {-3.0f * a.x * nt * nt + 3.0f * p1.x * (1.0f - 4.0f * t + 3.0f * t * t) + 3.0f * p2.x * (2.0f * t - 3.0f * t * t) + 3.0f * b.x * t * t,
+                        -3.0f * a.y * nt * nt + 3.0f * p1.y * (1.0f - 4.0f * t + 3.0f * t * t) + 3.0f * p2.y * (2.0f * t - 3.0f * t * t) + 3.0f * b.y * t * t};
+
+        vec2 tan_norm = {-tangent[1], tangent[0]};
+        vec2 norm;
+        vec2_norm(norm, tan_norm);
+
+        vec2 v;
+        vec2 norm_scaled;
+        vec2_scale(norm_scaled, norm, +width / 2.f);
+        vec2_add(v, p, norm_scaled);
+
+        out[offset] = CPointMake(v[0], v[1]);
+        offset++;
+
+        vec2_scale(norm_scaled, norm, -width / 2.f);
+        vec2_add(v, p, norm_scaled);
+
+        out[offset] = CPointMake(v[0], v[1]);
+        offset++;
+    }
+}
+
+Shape create_infinity(float width, float angle, int segment_count, const vec4 color) {
+    int real_vertex_count = size_of_infinity_in_vertices(segment_count);
+    Params params = default_params();
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count;
+    params.const_params.triangle_mode = GL_TRIANGLE_STRIP;
+    params.const_params.round_count = segment_count;
+    params.var_params.width = width;
+    params.var_params.angle = angle;
+    CPoint *data = malloc(params.const_params.datasize);
+    gen_infinity(data, width, angle, segment_count);
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+void change_infinity(Shape* shape, float angle) {
+    if ((*shape).params.var_params.angle != angle) {
+        (*shape).params.var_params.angle = angle;
+        gen_infinity(shape->data, (*shape).params.var_params.width, (*shape).params.var_params.angle, (*shape).params.const_params.round_count);
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glBufferData(GL_ARRAY_BUFFER, shape->params.const_params.datasize, shape->data, GL_DYNAMIC_DRAW);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+static inline int size_of_rounded_rectangle_stroked_in_vertices(int round_count) {
+    return 4 * (2 + round_count) * 2 + 2;
+}
+
+static inline void gen_rounded_rectangle_stroked(CPoint* out, CSize size, float radius, float stroke_width, int round_count) {
+    int offset = 0;
+    float k = (float) (M_PI / 2 / (round_count + 1));
+    float inner_radius = radius - stroke_width;
+    int i = 0;
+    int n = 0;
+    for (i = (round_count + 2) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * radius, size.height / 2 - radius + sinf(i * k) * radius);
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * inner_radius, size.height / 2 - radius + sinf(i * k) * inner_radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * radius, size.height / 2 - radius + sinf(i * k) * radius);
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * inner_radius, size.height / 2 - radius + sinf(i * k) * inner_radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * radius, -size.height / 2 + radius + sinf(i * k) * radius);
+        out[offset++] = CPointMake(-size.width / 2 + radius + cosf(i * k) * inner_radius, -size.height / 2 + radius + sinf(i * k) * inner_radius);
+    }
+    n++;
+    for (i = (round_count + 1) * n; i <= round_count + 1 + (round_count + 1) * n; i++) {
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * radius, -size.height / 2 + radius + sinf(i * k) * radius);
+        out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * inner_radius, -size.height / 2 + radius + sinf(i * k) * inner_radius);
+    }
+    i = 0;
+    out[offset++] = CPointMake(size.width / 2 - radius + cosf(i * k) * radius, size.height / 2 - radius + sinf(i * k) * radius);
+    out[offset] = CPointMake(size.width / 2 - radius + cosf(i * k) * inner_radius, size.height / 2 - radius + sinf(i * k) * inner_radius);
+}
+
+Shape create_rounded_rectangle_stroked(CSize size, float radius, float stroke_width, int round_count, const vec4 color) {
+    int real_vertex_count = size_of_rounded_rectangle_stroked_in_vertices(round_count);
+    Params params = default_params();
+    params.const_params.round_count = round_count;
+    params.const_params.datasize = sizeof(CPoint) * real_vertex_count * 2;
+    params.var_params.size = size;
+    params.var_params.radius = radius;
+    params.var_params.width = stroke_width;
+    CPoint *data = (CPoint *) malloc(params.const_params.datasize);
+    gen_rounded_rectangle_stroked(data, params.var_params.size, params.var_params.radius, params.var_params.width, params.const_params.round_count);
+    params.const_params.triangle_mode = GL_TRIANGLE_STRIP;
+    return (Shape) {{color[0], color[1], color[2], color[3]}, data, create_vbo(params.const_params.datasize, data, GL_DYNAMIC_DRAW), real_vertex_count, params};
+}
+
+void change_rounded_rectangle_stroked(Shape* shape, CSize size, float radius, __unused float stroke_width) {
+    if ((*shape).params.var_params.size.width != size.width || (*shape).params.var_params.size.height != size.height || (*shape).params.var_params.radius != radius) {
+        (*shape).params.var_params.size.width = size.width;
+        (*shape).params.var_params.size.height = size.height;
+        (*shape).params.var_params.radius = radius;
+        gen_rounded_rectangle_stroked((*shape).data, (*shape).params.var_params.size, (*shape).params.var_params.radius, (*shape).params.var_params.width, (*shape).params.const_params.round_count);
+        glBindBuffer(GL_ARRAY_BUFFER, shape->buffer);
+        glBufferSubData(GL_ARRAY_BUFFER, 0, shape->params.const_params.datasize, shape->data);
+        glBindBuffer(GL_ARRAY_BUFFER, 0);
+    }
+}
+
+//------------------------------
+
+float t(float start_value, float end_value, float start_time, float duration, timing_type type) {
+    if (time > start_time + duration) {
+        return end_value;
+    }
+    if (type == Linear) {
+        return start_value + (end_value - start_value) * MINf(duration + start_time, MAXf(.0, (time - start_time))) / duration;
+    }
+    return start_value + (end_value - start_value) * timing(MINf(duration + start_time, MAXf(.0, (time - start_time))) / duration, type);
+}
+
+float t_reversed(float end_value, float start_value, float start_time, float duration, timing_type type) {
+    if (time>start_time+duration) {
+        return end_value;
+    }
+    if (type == Linear) {
+        return start_value + (end_value - start_value)*MINf(duration+start_time, MAXf(0.0f, (time - start_time))) /duration;
+    }
+    return start_value + (end_value - start_value) * timing(MINf(duration+start_time, MAXf(0.0f, (time - start_time))) / duration, type);
+}
+
+
+float t_local(float start_value, float end_value, float start_time, float duration, timing_type type) {
+    if (type == Sin) {
+        return start_value + (end_value - start_value) * sinf(MINf(MAXf((time_local - start_time) / duration * (float) M_PI, 0), (float) M_PI));
+    }
+
+    if (time_local > start_time + duration) {
+        return end_value;
+    }
+
+    if (type == Linear) {
+        return start_value + (end_value - start_value) * MINf(duration + start_time, MAXf(.0, (time_local - start_time))) / duration;
+    }
+    return start_value + (end_value - start_value) * timing(MINf(duration + start_time, MAXf(.0, (time_local - start_time))) / duration, type);
+}
+
+xyz star_create_position(float far) {
+    starsFar = 1500;
+
+    int minR = 100;
+    int maxR = 1000;
+
+    return xyzMake(signrand() * frand(minR, maxR), signrand() * frand(minR, maxR), far);
+}
+
+xyz star_initial_position(int randZ, int forward) {
+    starsFar = 1500;
+
+    int minR = 100;
+    int maxR = 1000;
+
+    float z = 0;
+    if (forward == 1) {
+        if (randZ == 0) {
+            z = -starsFar;
+        } else {
+            z = frand(0, -starsFar);
+        }
+    }
+
+    return xyzMake(signrand() * frand(minR, maxR), signrand() * frand(minR, maxR), z);
+}
+
+void draw_stars() {
+    float k = (float) width / (float) height;
+
+    set_y_offset_objects(-100 * k * 0);
+    for (i = 0; i < starsCount; i++) {
+        float stars_scroll_offset = MAXf(0, scroll_offset) * 2;
+
+        float transition_speed;
+        if (direct == 1) {
+            float s = 5;
+            transition_speed = s - t(0, s, 0, duration_const + 1 + 0.8f, Linear);
+        } else {
+            transition_speed = t(-4, 0, 0, duration_const + 1, EaseOut);
+        }
+
+        float speed = stars_scroll_offset + transition_speed;
+        stars[i].position.z += speed;
+
+        if (stars[i].position.z > 0 && speed > 0) {
+            stars[i].position = star_initial_position(0, 1);
+        }
+        if (stars[i].position.z < -1500 && speed < 0) {
+            stars[i].position = star_initial_position(0, 0);
+        }
+
+        float inc = scroll_offset * 100;
+        stars[i].position.z = stars[i].position.z + inc;
+
+        star.params.position = stars[i].position;
+        float s = 1 + (-stars[i].position.z) / starsFar * 5;
+
+        star.params.scale = xyzMake(s, s, 1);
+        float far = starsFar;
+        float k = 10.;
+        star.params.alpha = (1 - (-stars[i].position.z) / far) * k;
+        star.params.alpha = star.params.alpha * star.params.alpha / k;
+
+
+        draw_textured_shape(&star, stars_matrix, NORMAL);
+
+        stars[i].position.z = stars[i].position.z - inc;
+    }
+
+    set_y_offset_objects(offset_y);
+}
+
+static inline void mat4x4_plain(mat4x4 M, int width, int height) {
+    int i, j;
+    for (i = 0; i < 4; ++i) {
+        for (j = 0; j < 4; ++j) {
+            M[i][j] = 0.0f;
+        }
+    }
+
+    M[0][0] = 1;
+    M[1][1] = 1;
+    M[2][2] = 1;
+    M[0][0] = 1;
+    M[1][1] = (float) width / (float) height;
+    M[2][2] = 1;
+    M[3][3] = (float) width / 2.0f;
+}
+
+static inline void mat4x4_stars(mat4x4 m, float y_fov_in_degrees, float aspect, float n, float f, int width, int height) {
+    int is_iOS = 0;
+    if (height >= width) {
+        float k = (float) width / (float) height;
+        float q = !is_iOS ? 1.4f : 0.7f;
+        m[0][0] = 1.0f / q;
+        m[1][0] = 0.0f;
+        m[2][0] = 0.0f;
+        m[3][0] = 0.0f;
+
+        m[1][0] = 0.0f;
+        m[1][1] = k / q;
+        m[1][2] = 0.0f;
+        m[1][3] = 0.0f;
+
+        m[2][0] = 0.0f;
+        m[2][1] = 0.0f;
+        m[2][2] = 1.0f;
+        m[2][3] = -1.25f;
+
+        m[3][0] = 0.0f;
+        m[3][1] = 0.0f;
+        m[3][2] = 0.0f;
+        m[3][3] = width * k;
+    } else {
+        float k = (float) height / (float) width;
+        float q = !is_iOS ? 2.0f : 0.7f;
+
+        m[0][0] = 1.0f / q;
+        m[1][0] = 0.0f;
+        m[2][0] = 0.0f;
+        m[3][0] = 0.0f;
+
+        m[1][0] = 0.0f;
+        m[1][1] = (1.0f / k) / q;
+        m[1][2] = 0.0f;
+        m[1][3] = 0.0f;
+
+        m[2][0] = 0.0f;
+        m[2][1] = 0.0f;
+        m[2][2] = 1.0f;
+        m[2][3] = -1.25f;
+
+        m[3][0] = 0.0f;
+        m[3][1] = 0.0f;
+        m[3][2] = 0.0f;
+        m[3][3] = height * k;
+    }
+    mat4x4_translate_independed(m, 0, -2 * y_offset_absolute / (float) height + 4 * scale_factor / (float) height, 0);
+}
+
+void rglNormalDraw() {
+    glDisable(GL_DEPTH_TEST);
+    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+    glColorMask(1,1,1,1);
+    glDepthMask(0);
+}
+
+void rglMaskDraw() {
+    glEnable(GL_DEPTH_TEST);
+    glDisable(GL_BLEND);
+    glDepthMask(1);
+    glColorMask(0, 0, 0, 0);
+    glDepthFunc(GL_GREATER);
+    glClearDepthf(0);
+    glClear(GL_DEPTH_BUFFER_BIT);
+}
+
+void rglNormalDrawThroughMask() {
+    glColorMask(1,1,1,1);
+    glDepthFunc(GL_LESS);
+    glDepthMask(0);
+}
+
+void mat4x4_scaled(mat4x4 matrix, float s) {
+    mat4x4_identity(matrix);
+    mat4x4_scale_aniso(matrix, matrix, s, s, s);
+}
+
+void mat4x4_layer(mat4x4 matrix, LayerParams params, float s, float r) {
+    float a = main_matrix[1][1];
+    mat4x4 model_matrix;
+    mat4x4_identity(model_matrix);
+    mat4x4 id;
+    mat4x4_identity(id);
+    float sc = main_matrix[3][3];
+    mat4x4_translate(model_matrix, -params.anchor.x / sc, params.anchor.y / sc * a, params.anchor.z / sc);
+    mat4x4 scaled;
+    mat4x4_identity(scaled);
+    float f = 1.0f;
+    mat4x4_scale_aniso(scaled, scaled, params.scale.x * f, params.scale.y * f, params.scale.z * f);
+    mat4x4 tmp;
+    mat4x4_dup(tmp, model_matrix);
+    mat4x4_mul(model_matrix, scaled, tmp);
+    mat4x4 rotate;
+    mat4x4_dup(rotate, id);
+    mat4x4_rotate_Z2(rotate, id, -deg_to_radf(params.rotation));
+    mat4x4_dup(tmp, model_matrix);
+    mat4x4_mul(model_matrix, rotate, tmp);
+    mat4x4_translate_independed(model_matrix, params.position.x / sc, -params.position.y / sc * a, params.position.z / sc);
+
+    mat4x4 m;
+    mat4x4_mul(m, model_matrix, main_matrix);
+
+    m[1][0] /= a;
+    m[0][1] *= a;
+
+    mat4x4 scale_m;
+    mat4x4_scaled(scale_m, s);
+    mat4x4_rotate_Z(scale_m, r);
+    scale_m[1][0] /= a;
+    scale_m[0][1] *= a;
+    mat4x4_mul(matrix, scale_m, m);
+}
+
+float bubble_dots_sinf(float a) {
+    if (a < M_PI * 2 * anim_bubble_dots_end_period) {
+        return sinf(a);
+    }
+    return 0;
+}
+
+static void reset_ic() {
+    anim_smile_start_time1 = time_local;
+    anim_pencil_start_time = 0;
+    anim_pencil_start_all_end_time = 0;
+    anim_cam_next_time = time_local;
+    anim_smile_stage = 0;
+    anim_smile_blink_one = 0;
+    anim_pencil_stage = 0;
+    anim_bubble_dots_end_period = 4;
+    anim_pencil_period = 1;
+}
+
+static void draw_ic(int type) {
+    float rotation;
+    float beginTimeK;
+    float commonDelay;
+    float beginY = 250;
+    int bounce;
+    texture_program_type COLOR, LIGHT_COLOR;
+    if (type == 0) {
+        beginTimeK = 2.0f;
+        commonDelay = duration_const * 0.5f;
+        bounce = 1;
+        rotation = -D2R(free_scroll_offset);
+        cloud_scroll_offset = 0;
+        COLOR = RED, LIGHT_COLOR = LIGHT_RED;
+    } else {
+        rotation = 0;
+        beginTimeK = 2.5;
+        commonDelay = 0;
+        bounce = 1;
+        COLOR = BLUE, LIGHT_COLOR = LIGHT_BLUE;
+    }
+    float scale;
+    float t_y;
+    CPoint ic_pos;
+    float ic_layer_alpha;
+    if (current_page == 1 && direct == 0) {
+        ic_layer_alpha = t(1, 0, 0, duration_const * 0.25f, EaseOut);
+    } else {
+        ic_layer_alpha = 1;
+    }
+    ic_pin.params.alpha = ic_layer_alpha;
+    ic_cam.params.alpha = ic_layer_alpha;
+    ic_cam_lens.params.alpha = ic_layer_alpha;
+    ic_smile.params.alpha = ic_layer_alpha;
+    ic_smile_eye.params.alpha = ic_layer_alpha;
+    ic_videocam.params.alpha = ic_layer_alpha;
+    ic_bubble.params.alpha = ic_layer_alpha;
+    ic_bubble_dot.params.alpha = ic_layer_alpha;
+    ic_pencil.params.alpha = ic_layer_alpha;
+
+    if (type == 0) {
+        ic_pos = CPointMake(-106 / 2, 61 / 2);
+        if (current_page == 1 && direct == 0) {
+            t_y = 0;
+        } else {
+            t_y = t(beginY, 0, commonDelay + duration_const * 0.2f * beginTimeK, duration_const, EaseOut);
+            float arg = MAXf(0, time - (commonDelay + duration_const * 0.2f * beginTimeK)) * 50;
+            float value = beginY * powf(2.71, -0.055f * arg * 2) * cosf(0.08f * arg) * 0.4f;
+            t_y -= value * bounce;
+        }
+    } else {
+        ic_pos = CPointMake(-162 / 2 + 4, +26 / 2 + 20);
+        t_y = t(beginY, 0, commonDelay + duration_const * 0.2f * beginTimeK, duration_const, EaseOut);
+        float value = 0;
+        float e = 2.71;
+        float arg = MAXf(0, time - (commonDelay + duration_const * 0.2f * beginTimeK)) * 50;
+        value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg - (float) M_PI / 8.0f) * 0.4f;
+        t_y -= value * bounce;
+    }
+
+    if (time_local > anim_pin_start_time) {
+        if (time_local > anim_pin_start_time + anim_pin_duration) {
+            anim_pin_start_time = time_local + duration_const * frand(10, 20) * 2;
+            anim_pin_duration = duration_const * frand(10, 20) * 2;
+        }
+    }
+    float pinasin = 0;
+    ic_pin_layer.position = xyzMake(ic_pos.x + cosf(time_local * 5) * 3 * pinasin + cloud_scroll_offset, ic_pos.y + sinf(time_local * 5) * 1.5f * pinasin + t_y, 0);
+    mat4x4_layer(ic_matrix, ic_pin_layer, 1, rotation);
+    draw_textured_shape(&ic_pin, ic_matrix, COLOR);
+
+    if (type == 1) {
+        ic_videocam_layer.rotation = -30 + t_local(anim_videocam_old_angle, anim_videocam_angle, anim_videocam_start_time, anim_videocam_duration, EaseOut);
+        t_y = t(beginY, 0, commonDelay + duration_const * 0.45f * beginTimeK, duration_const, EaseOut);
+        float value = 0;
+        float e = 2.71;
+        float arg = MAXf(0, time - (commonDelay + duration_const * 0.45f * beginTimeK)) * 50;
+        value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * 0.4f;
+        t_y -= value * bounce;
+        if (t_y <= 1 && time_local > anim_videocam_next_time) {
+            anim_videocam_duration = duration_const * frand(1.0f, 1.5f) * 1.5f;
+            anim_videocam_old_angle = anim_videocam_angle;
+            anim_videocam_angle = 15 * irand(-1, 1);
+            anim_videocam_start_time = time_local;
+            anim_videocam_next_time = time_local + 1000000 + duration_const * frand(5, 8);
+        }
+        ic_videocam_layer.position = xyzMake(-68 / 2 + cloud_scroll_offset, +80 / 2 + t_y, 0);
+        mat4x4_layer(ic_matrix, ic_videocam_layer, 1, rotation);
+        draw_textured_shape(&ic_videocam, ic_matrix, COLOR);
+    }
+
+    if (type == 0) {
+        ic_pos = CPointMake(107 / 2, 78 / 2);
+        if (current_page == 1 && direct == 0) {
+            t_y = 0;
+        } else {
+            t_y = t(beginY, 0, commonDelay + duration_const * 0.3f * beginTimeK, duration_const, EaseOut);
+            float value = 0;
+            float e = 2.71;
+            float arg = MAXf(0, time - (commonDelay + duration_const * 0.3f * beginTimeK)) * 50;
+            value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * 0.4f;
+            t_y -= value * bounce;
+        }
+    } else {
+        ic_pos = CPointMake(-28 / 2, -20 / 2 + 2);
+        t_y = t(beginY, 0, commonDelay + duration_const * 0.15f * beginTimeK, duration_const, EaseOut);
+        float arg = MAXf(0, time - (commonDelay + duration_const * 0.15f * beginTimeK)) * 50;
+        float value = beginY * powf(2.71, -0.055f * arg * 2) * cosf(0.08f * arg) * 0.4f;
+        t_y -= value * bounce;
+    }
+
+    if (t_y <= 1 && time_local > anim_cam_next_time) {
+        anim_cam_duration = duration_const * frand(1.0, 1.5);
+        anim_cam_old_angle = anim_cam_angle;
+        anim_cam_old_position = anim_cam_position;
+        anim_cam_start_time = time_local;
+        anim_cam_next_time = time_local + 10000000;
+        int r = irand(0, 1);
+        if (r == 0) {
+            anim_cam_position = CPointMake(-8 + 4, 0);
+            anim_cam_angle = signrand() * 10;
+        } else if (r == 1) {
+            anim_cam_position = CPointMake(4, -5);
+            anim_cam_angle = signrand() * 10;
+        } else if (r == 2) {
+            anim_cam_position = CPointMake(0, 0);
+            anim_cam_angle = 0;
+        }
+        qShot = irand(1, 2);
+        anim_camshot_start_time = time_local + duration_const * 0.5f;
+        anim_camshot_duration = duration_const * .4f;
+    }
+
+    ic_cam_layer.rotation = 15 + t_local(anim_cam_old_angle, anim_cam_angle, anim_cam_start_time, anim_cam_duration, EaseOut);
+    ic_cam_layer.position = xyzMake(
+            ic_pos.x + 0 * t_local(anim_cam_old_position.x, anim_cam_position.x, anim_cam_start_time, anim_cam_duration, EaseOut) + cloud_scroll_offset,
+            ic_pos.y + 0 * t_local(anim_cam_old_position.y, anim_cam_position.y, anim_cam_start_time, anim_cam_duration, EaseOut)
+            + t_y,
+            0);
+
+    mat4x4_layer(ic_matrix, ic_cam_layer, 1, rotation);
+    draw_textured_shape(&ic_cam, ic_matrix, COLOR);
+
+    float lens_scale;
+    lens_scale = 1;
+    if (qShot >= 0 && time_local > anim_camshot_start_time) {
+        lens_scale = t_local(1, 0, anim_camshot_start_time, anim_camshot_duration, Sin);
+        if (time_local > anim_camshot_start_time + anim_camshot_duration) {
+            qShot--;
+            anim_camshot_start_time = time_local + anim_camshot_duration;
+        }
+    }
+    ic_cam_lens.params.scale = xyzMake(lens_scale, lens_scale, 1);
+    ic_cam_lens.params.position = xyzMake(0, 1.7, 0);
+    draw_textured_shape(&ic_cam_lens, ic_matrix, COLOR);
+
+    if (type == 0) {
+        ic_pos = CPointMake(70 / 2, -116 / 2);
+        if (current_page == 1 && direct == 0) {
+            t_y = 0;
+        } else {
+            t_y = t(beginY, 0, commonDelay + duration_const * .0f * beginTimeK, duration_const, EaseOut);
+            float value = 0;
+            float e = 2.71;
+            float arg = MAXf(0, time - (commonDelay + duration_const * .0f * beginTimeK)) * 50;
+            value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * .4f;
+            t_y -= value * bounce;
+        }
+    } else {
+        ic_pos = CPointMake(+60 / 2, 50 / 2);
+        t_y = t(beginY, 0, commonDelay + duration_const * 0.25f * beginTimeK, duration_const, EaseOut);
+
+        float value = 0;
+        float e = 2.71;
+        float arg = MAXf(0, time - (commonDelay + duration_const * 0.25f * beginTimeK)) * 50;
+        value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg - (float) M_PI / 8.0f) * .4f;
+
+        t_y -= value * bounce;
+    }
+    float smile_laught = 0;
+    float anim_smile_fade_duration = duration_const * 2;
+    float anim_smile_duration = duration_const * 2;
+    if (anim_smile_stage == 0) {
+        smile_laught = t_local(0, 1, anim_smile_start_time1, anim_smile_fade_duration, Linear);
+        if (time_local > anim_smile_duration * 3 + anim_smile_start_time1) {
+            anim_smile_stage = 1;
+            anim_smile_start_time2 = time_local;
+        }
+    }
+
+    if (anim_smile_stage == 1) {
+        smile_laught = t_local(1, 0, anim_smile_start_time2, anim_smile_fade_duration, Linear);
+        if (time_local > anim_smile_duration + anim_smile_start_time2) {
+            smile_laught = 0;
+            anim_smile_stage = 2;
+            anim_smile_blink_one = 1;
+            anim_smile_blink_start_time = time_local + duration_const;
+        }
+    }
+
+    float y = 0;
+    if (anim_smile_stage < 2) {
+        y = sinf(time_local * (float) M_PI * 10) * 1.5f * smile_laught;
+    }
+
+    ic_smile_layer.position = xyzMake(ic_pos.x + cloud_scroll_offset, y + ic_pos.y + t_y, 0);
+    mat4x4_layer(ic_matrix, ic_smile_layer, 1, rotation);
+    draw_textured_shape(&ic_smile, ic_matrix, COLOR);
+
+    if (time_local > anim_smile_blink_start_time + .1) {
+
+        float blink_pause = frand(3, 6);
+        if (irand(0, 3) == 0) {
+            blink_pause = .3;
+        }
+        if (anim_smile_blink_one == 1) {
+            blink_pause = frand(3, 6);
+        }
+        anim_smile_blink_start_time = time_local + blink_pause;
+
+        anim_smile_blink_one = 0;
+    }
+
+    int stop_time = 5;
+    float eye_scale = t_local(1, 0, anim_smile_blink_start_time, 0.1f, Sin);
+    ic_smile_eye.params.scale = xyzMake(1, eye_scale, 1);
+    if (time > stop_time) ic_smile_eye.params.scale = xyzMake(1, 1, 1);
+
+    ic_smile_eye.params.position = xyzMake(-7, -4.5f, 0);
+    draw_textured_shape(&ic_smile_eye, ic_matrix, COLOR);
+
+    if (anim_smile_blink_one == 1) ic_smile_eye.params.scale = xyzMake(1, 1, 1);
+    if (time > stop_time) ic_smile_eye.params.scale = xyzMake(1, 1, 1);
+    ic_smile_eye.params.position = xyzMake(7, -4.5f, 0);
+    draw_textured_shape(&ic_smile_eye, ic_matrix, COLOR);
+
+    if (type == 0) {
+        ic_pos = CPointMake(-60 / 2, 110 / 2);
+        if (current_page == 1 && direct == 0) {
+            t_y = 0;
+        } else {
+            t_y = t(beginY, 0, commonDelay + duration_const * .45f * beginTimeK, duration_const, EaseOut);
+
+            float value = 0;
+            float e = 2.71;
+            float arg = MAXf(0, time - (commonDelay + duration_const * .45f * beginTimeK)) * 50;
+
+            value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * .4f;
+
+            t_y -= value * bounce;
+        }
+    } else {
+        ic_pos = CPointMake(72 / 2, -74 / 2);
+        t_y = t(beginY, 0, commonDelay + duration_const * .0f * beginTimeK, duration_const, EaseOut);
+        float value = 0;
+        float e = 2.71;
+        float arg = MAXf(0, time - (commonDelay + duration_const * .0f * beginTimeK)) * 50;
+        value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * .4f;
+        t_y -= value * bounce;
+    }
+    ic_bubble_layer.position = xyzMake(ic_pos.x + cloud_scroll_offset, ic_pos.y + t_y, 0);
+    mat4x4_layer(ic_matrix, ic_bubble_layer, 1, rotation);
+    draw_textured_shape(&ic_bubble, ic_matrix, COLOR);
+
+    scale = 0.7f + 0.2f * bubble_dots_sinf(time * 10);
+    ic_bubble_dot.params.scale = xyzMake(scale, scale, scale);
+    ic_bubble_dot.params.position = xyzMake(0 - 80.5f, -9 / 2.0f, 0);
+    draw_textured_shape(&ic_bubble_dot, ic_matrix, LIGHT_COLOR);
+
+    scale = 0.7f + 0.2f * bubble_dots_sinf((float) -M_PI * 2 / 3 + time * 10);
+    if (anim_bubble_dots_stage == 0) scale = MAXf(.7, scale);
+    ic_bubble_dot.params.scale = xyzMake(scale, scale, scale);
+    ic_bubble_dot.params.position = xyzMake(0, -9 / 2.0f, 0);
+    draw_textured_shape(&ic_bubble_dot, ic_matrix, LIGHT_COLOR);
+
+    scale = 0.7f + 0.2f * bubble_dots_sinf((float) -M_PI * 2 / 3 * 2 + time * 10);
+    if (anim_bubble_dots_stage == 0) scale = MAXf(.7, scale);
+    ic_bubble_dot.params.scale = xyzMake(scale, scale, scale);
+    ic_bubble_dot.params.position = xyzMake(0 + 80.5f, -9 / 2.0f, 0);
+    draw_textured_shape(&ic_bubble_dot, ic_matrix, LIGHT_COLOR);
+
+    if (type == 0) {
+        ic_pos = CPointMake(-88 / 2 - 15, -100 / 2 + 13);
+        if (current_page == 1 && direct == 0) {
+            t_y = 0;
+        } else {
+            t_y = t(beginY, 0, commonDelay + duration_const * .1f * beginTimeK, duration_const, EaseOut);
+            float value = 0;
+            float e = 2.71;
+            float arg = MAXf(0, time - (commonDelay + duration_const * .1f * beginTimeK)) * 50;
+            value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * .4f;
+            t_y -= value * bounce;
+        }
+    } else {
+        ic_pos = CPointMake(+152 / 2 - 17, +66 / 2 + 14);
+
+        t_y = t(beginY, 0, commonDelay + duration_const * 0.35f * beginTimeK, duration_const, EaseOut);
+
+        float value = 0;
+        float e = 2.71;
+        float arg = MAXf(0, time - (commonDelay + duration_const * 0.35f * beginTimeK)) * 50;
+        value = beginY * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg) * 0.4f;
+
+        t_y -= value * bounce;
+    }
+
+    float pencil_x = 0;
+    if (anim_pencil_stage == 0) {
+        ic_pencil_layer.rotation = t_local(0, -5, anim_pencil_start_all_time, duration_const * 0.5f, EaseOut);
+
+        pencil_x = t_local(0, 14, anim_pencil_start_time, 1.5f * 0.85f, Linear);
+        if (time_local > anim_pencil_start_time + 1.5 * 0.85) {
+            anim_pencil_start_time = time_local;
+            anim_pencil_stage = 1;
+        }
+    } else if (anim_pencil_stage == 1) {
+        pencil_x = t_local(14, 0, anim_pencil_start_time, 1.5f * 0.15f, Linear);
+        if (time_local > anim_pencil_start_time + 1.5f * 0.15f) {
+            if (anim_pencil_period == 0) {
+                anim_pencil_start_all_end_time = time_local;
+                anim_pencil_start_time = time_local + duration_const * 1;
+                anim_pencil_stage = 2;
+            } else {
+                anim_pencil_period--;
+                anim_pencil_start_time = time_local;
+                anim_pencil_stage = 0;
+            }
+        }
+    } else if (anim_pencil_stage == 2) {
+        ic_pencil_layer.rotation = t_local(-5, 0, anim_pencil_start_all_end_time, duration_const * 0.5f, EaseOut);
+        if (time_local > anim_pencil_start_time) {
+            anim_pencil_start_all_time = time_local;
+            anim_pencil_start_time = time_local;
+            anim_pencil_stage = 3;
+        }
+    }
+
+    float pencil_v = (anim_pencil_stage < 2) ? sinf((float) (time_local * 2 * M_PI * 4)) * 0.8f : 0;
+    ic_pencil_layer.position = xyzMake(pencil_x + ic_pos.x + cloud_scroll_offset, pencil_v + ic_pos.y + t_y, 0);
+    mat4x4_layer(ic_matrix, ic_pencil_layer, 1, rotation);
+    draw_textured_shape(&ic_pencil, ic_matrix, COLOR);
+}
+
+void draw_safe(int type, float alpha, float screw_alpha) {
+    float screw_distance = 53;
+
+    private_screw.params.alpha = alpha * screw_alpha;
+
+    scale = 1;
+    private_screw.params.scale = xyzMake(scale, scale, 1);
+    private_screw.params.position = xyzMake(-screw_distance, -screw_distance, 0);
+    draw_textured_shape(&private_screw, private_matrix, NORMAL_ONE);
+
+    private_screw.params.scale = xyzMake(scale, scale, 1);
+    private_screw.params.position = xyzMake(screw_distance, -screw_distance, 0);
+    draw_textured_shape(&private_screw, private_matrix, NORMAL_ONE);
+
+    private_screw.params.scale = xyzMake(scale, scale, 1);
+    private_screw.params.position = xyzMake(-screw_distance, screw_distance, 0);
+    draw_textured_shape(&private_screw, private_matrix, NORMAL_ONE);
+
+    private_screw.params.scale = xyzMake(scale, scale, 1);
+    private_screw.params.position = xyzMake(screw_distance, screw_distance, 0);
+    draw_textured_shape(&private_screw, private_matrix, NORMAL_ONE);
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_onDrawFrame(JNIEnv *env, jclass class) {
+    time_local += 0.016f;
+
+    if (current_page != prev_page) {
+        reset_ic();
+        ms0_anim = date;
+        fps_anim = 0;
+        count_anim_fps = 1;
+    }
+
+    float knotDelayStep = 0.075f;
+    if (prev_page != current_page) {
+        for (i = 0; i < 4; i++) {
+            knot_delays[i] = (0.65f + knotDelayStep * i) * duration_const;
+        }
+
+        for (i = 0; i < 10; i++) {
+            int j1 = irand(0, 3);
+            int j2 = irand(0, 3);
+            float temp = knot_delays[j1];
+            knot_delays[j1] = knot_delays[j2];
+            knot_delays[j2] = temp;
+        }
+
+        if (current_page == 2) {
+            ic_pin_layer.rotation = -15;
+            ic_cam_layer.rotation = 15;
+            ic_smile_layer.rotation = -15;
+            ic_bubble_layer.rotation = -15;
+        }
+
+        if (current_page == 5) {
+            ic_pin_layer.rotation = -15;
+            ic_videocam_layer.rotation = -30;
+            ic_cam_layer.rotation = 15;
+            ic_smile_layer.rotation = -15;
+            ic_bubble_layer.rotation = -15;
+        }
+    }
+
+    fps_anim++;
+    if (count_anim_fps == 1 && date - ms0_anim >= duration_const) {
+        count_anim_fps = 0;
+    }
+
+    if (date - ms0 >= 1.0f) {
+        ms0 = date;
+    }
+
+    time = date - date0;
+
+    float private_back_k = .8;
+
+    glClearColor(1, 1, 1, 1);
+    glClear(GL_COLOR_BUFFER_BIT);
+
+
+    if (current_page == 0) {
+        rglNormalDraw();
+
+        telegram_sphere.params.alpha = 1;
+
+        scale = 1;
+
+        float alpha = 1;
+        if (direct == 0) {
+            alpha = t(0, 1, 0, duration_const, Linear);
+
+            fast_body.params.alpha = 1;
+            fast_body.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&fast_body, main_matrix, NORMAL);
+        }
+
+        telegram_sphere.params.alpha = alpha;
+        telegram_sphere.params.scale = xyzMake(scale, scale, 1);
+
+        telegram_plane.params.alpha = 1;
+
+        float tt = MINf(0, (float) (-M_PI * 125. / 180. + time * M_PI * 2 * 1.5));
+
+        float dx = sinf(tt) * 75;
+        float dy = -sinf(tt) * 60;
+
+        telegram_plane.params.position = xyzMake(dx, dy, 0);
+
+        float scale = (cosf(tt) + 1) * 0.5f;
+
+        telegram_plane.params.scale = xyzMake(cosf(tt) * scale, scale, 1);
+
+        if (tt < D2R(125)) {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+        }
+    } else if (current_page == 1) {
+        rglNormalDraw();
+        if (direct == 1) {
+            fast_body.params.scale = xyzMake(1, 1, 1);
+            fast_body.params.alpha = 1;
+            draw_textured_shape(&fast_body, main_matrix, NORMAL);
+        } else {
+            fast_body.params.alpha = t(0, 1, .0, duration_const, Linear);;
+            float scale = t(.95, 1, 0, duration_const, EaseInEaseOut);
+            fast_body.params.scale = xyzMake(scale, scale, 1.0f);
+            draw_textured_shape(&fast_body, main_matrix, NORMAL);
+        }
+    } else if (current_page == 2) {
+        rglNormalDraw();
+        if (direct == 1) {
+            fast_body.params.alpha = t(1.0f, .0, .0, duration_const, Linear);;
+            float scale = t(1, .95, 0, duration_const, EaseInEaseOut);
+            fast_body.params.scale = xyzMake(scale, scale, 1.0f);
+            draw_textured_shape(&fast_body, main_matrix, NORMAL);
+        }
+    } else if (current_page == 4) {
+        if (direct == 1) {
+            privateLayer.rotation = private_scroll_offset + t(-90, 0, 0, duration_const, EaseOut);
+        } else {
+            privateLayer.rotation = private_scroll_offset + t(90, 0, 0, duration_const * private_back_k, EaseOut);
+        }
+        mat4x4_layer(private_matrix, privateLayer, 1.0f, 0);
+    }
+
+    rglMaskDraw();
+    mask1.params.position.z = cloud_extra_mask1.params.position.z = cloud_extra_mask2.params.position.z = cloud_extra_mask3.params.position.z = cloud_extra_mask4.params.position.z = 1;
+
+    if (current_page == 0) {
+        if (direct == 0) {
+            change_rounded_rectangle(&mask1, CSizeMake(r1 * 2, r1 * 2), r1);
+            mask1.params.rotation = 0;
+        }
+    } else if (current_page == 1) {
+        if (direct == 1) {
+            change_rounded_rectangle(&mask1, CSizeMake(r1 * 2, r1 * 2), r1);
+            mask1.params.rotation = 0;
+        } else {
+            float size = t(r2 * 2, r1 * 2, 0, duration_const, EaseInEaseOut);
+            float round = t(30, r1, 0, duration_const, EaseInEaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            free_scroll_offset = 0;
+            mask1.params.rotation = t(180, 0.0f, 0, duration_const, EaseInEaseOut) + free_scroll_offset;
+        }
+    } else if (current_page == 2) {
+        if (direct == 1) {
+            float size = t(r1 * 2, r2 * 2, 0, duration_const, EaseInEaseOut);
+            float round = t(r1, 30, 0, duration_const, EaseInEaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            free_scroll_offset = scroll_offset * 5;
+            mask1.params.rotation = t(0, 180.0f, 0, duration_const, EaseInEaseOut) + free_scroll_offset;
+        } else {
+            free_scroll_offset = scroll_offset * 5;
+            float r = 316 / 4.0f;
+            float size = t_reversed(r2 * 2, r * 2, 0, duration_const, EaseInEaseOut);
+            float round = t_reversed(30, 20, 0, duration_const, EaseInEaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            mask1.params.rotation = t_reversed(180.0f + free_scroll_offset, 180.0f + 90.0f, 0, duration_const, EaseInEaseOut);
+        }
+    } else if (current_page == 3) {
+        if (direct == 1) {
+            float r = 316 / 4.0f;
+            float size = t(r2 * 2, r * 2, 0, duration_const, EaseInEaseOut);
+            float round = t(30, 20, 0, duration_const, EaseInEaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            mask1.params.rotation = t(180.0f + free_scroll_offset, 180.0f + 90.0f, 0, duration_const, EaseInEaseOut);
+        } else {
+            float r = 316 / 4.0f;
+            float size = t_reversed(r * 2, r2 * 2, 0, duration_const, EaseOut);
+            float round = t_reversed(20, 30, 0, duration_const, EaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            mask1.params.rotation = t_reversed(180.0f + 90.0f, 180.0f + 90.0f + 90.0f, 0, duration_const, EaseOut);
+            mask1.params.position = xyzMake(0, 0, mask1.params.position.z);
+        }
+    } else if (current_page == 4) {
+        if (direct == 1) {
+            float r = 316 / 4.0f;
+            float size = t(r * 2, r2 * 2, 0, duration_const, EaseOut);
+            float round = t(20, 30, 0, duration_const, EaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(size, size), round);
+            mask1.params.rotation = private_scroll_offset + t(180.0f + 90.0f, 180.0f + 90.0f + 90.0f, 0, duration_const, EaseOut);
+            mask1.params.position = xyzMake(0, 0, mask1.params.position.z);
+        } else {
+            float k = 0;
+            k = 1.0f * private_back_k;
+            float scale = t_reversed(r2 * 2, 100, 0, duration_const * k, EaseOut);
+            change_rounded_rectangle(&mask1, CSizeMake(scale, scale), t_reversed(30, 50, 0, duration_const * k, EaseOut));
+            mask1.params.position = xyzMake(t_reversed(0, 29 / 2, 0, duration_const * k, EaseOut), t_reversed(0, -19 / 2, 0, duration_const * k, EaseOut), mask1.params.position.z);
+            mask1.params.rotation = private_scroll_offset + t_reversed(180.0f + 90.0f + 90.0f, 180.0f + 90.0f + 90.0f + 90.0f, 0, duration_const * k, EaseOut);
+
+            k = 1.0f * private_back_k;
+            int sublayer2_radius = 33;
+            cloud_extra_mask1.params.position = xyzMake(t_reversed(0, -122 / 2, 0, duration_const * k, EaseOut), t_reversed(0, 54 / 2 - 1, 0, duration_const * k, EaseOut), cloud_extra_mask1.params.position.z);
+            scale = t_reversed(0, sublayer2_radius, 0, duration_const * k, EaseOut);
+            cloud_extra_mask1.params.scale = xyzMake(scale, scale, 1);
+            draw_shape(&cloud_extra_mask1, main_matrix);
+
+            k = 1.15f * private_back_k;
+            int sublayer3_radius = 94 / 4;
+            cloud_extra_mask2.params.position = xyzMake(t_reversed(0, -84 / 2, 0, duration_const * k, EaseOut), t_reversed(0, -29 / 2, 0, duration_const * k, EaseOut), cloud_extra_mask2.params.position.z);
+            scale = t_reversed(0, sublayer3_radius, 0, duration_const * k, EaseOut);
+            cloud_extra_mask2.params.scale = xyzMake(scale, scale, 1);
+            draw_shape(&cloud_extra_mask2, main_matrix);
+
+            k = 1.3f * private_back_k;
+            int sublayer4_radius = 124 / 4;
+            cloud_extra_mask3.params.position = xyzMake(t_reversed(0, 128 / 2, 0, duration_const * k, EaseOut), t_reversed(0, 56 / 2, 0, duration_const * k, EaseOut), cloud_extra_mask3.params.position.z);
+            scale = t_reversed(0, sublayer4_radius, 0, duration_const * k, EaseOut);
+            cloud_extra_mask3.params.scale = xyzMake(scale, scale, 1);
+            draw_shape(&cloud_extra_mask3, main_matrix);
+
+            k = 1.5f * private_back_k;
+            int sublayer5_radius = 64;
+            cloud_extra_mask4.params.position = xyzMake(t_reversed(0, 0, 0, duration_const * k, EaseOut), t_reversed(0, 50, 0, duration_const * k, EaseOut), cloud_extra_mask4.params.position.z);
+            scale = t_reversed(0, sublayer5_radius, 0, duration_const * k, EaseOut);
+            cloud_extra_mask4.params.scale = xyzMake(scale, scale, 1);
+            draw_shape(&cloud_extra_mask4, main_matrix);
+        }
+    } else if (current_page == 5) {
+        float k = 0.8f;
+        float scale = t(r2 * 2, 100, 0, duration_const * k, EaseOut);
+        change_rounded_rectangle(&mask1, CSizeMake(scale, scale), t(30, 50, 0, duration_const * k, EaseOut));
+        mask1.params.position = xyzMake(t(0, 29 / 2, 0, duration_const * k, EaseOut), t(0, -19 / 2, 0, duration_const * k, EaseOut), mask1.params.position.z);
+        mask1.params.rotation = t(180.0f + 90.0f + 90.0f, 180.0f + 90.0f + 90.0f + 90.0f, 0, duration_const * k, EaseOut);
+
+        k = 1.0f;
+        int sublayer2_radius = 33;
+        cloud_extra_mask1.params.position = xyzMake(t(0, -122 / 2, 0, duration_const * k, EaseOut), t(0, 54 / 2 - 1, 0, duration_const * k, EaseOut), cloud_extra_mask1.params.position.z);
+        scale = t(0, sublayer2_radius, 0, duration_const * k, EaseOut);
+        cloud_extra_mask1.params.scale = xyzMake(scale, scale, 1);
+        draw_shape(&cloud_extra_mask1, main_matrix);
+
+
+        k = 1.15;
+        int sublayer3_radius = 94 / 4;
+        cloud_extra_mask2.params.position = xyzMake(t(0, -84 / 2, 0, duration_const * k, EaseOut), t(0, -29 / 2, 0, duration_const * k, EaseOut), cloud_extra_mask2.params.position.z);
+        scale = t(0, sublayer3_radius, 0, duration_const * k, EaseOut);
+        cloud_extra_mask2.params.scale = xyzMake(scale, scale, 1);
+        draw_shape(&cloud_extra_mask2, main_matrix);
+
+
+        k = 1.3;
+        int sublayer4_radius = 124 / 4;
+        cloud_extra_mask3.params.position = xyzMake(t(0, 128 / 2, 0, duration_const * k, EaseOut), t(0, 56 / 2, 0, duration_const * k, EaseOut), cloud_extra_mask3.params.position.z);
+        scale = t(0, sublayer4_radius, 0, duration_const * k, EaseOut);
+        cloud_extra_mask3.params.scale = xyzMake(scale, scale, 1);
+        draw_shape(&cloud_extra_mask3, main_matrix);
+
+
+        k = 1.5f;
+        int sublayer5_radius = 64;
+        cloud_extra_mask4.params.position = xyzMake(t(0, 0, 0, duration_const * k, EaseOut), t(0, 50, 0, duration_const * k, EaseOut), cloud_extra_mask4.params.position.z);
+        scale = t(0, sublayer5_radius, 0, duration_const * k, EaseOut);
+        cloud_extra_mask4.params.scale = xyzMake(scale, scale, 1);
+        draw_shape(&cloud_extra_mask4, main_matrix);
+
+    }
+    draw_shape(&mask1, main_matrix);
+
+    int rr = 30;
+    int seg = 15;
+    int ang = 180;
+    rglNormalDrawThroughMask();
+    if (current_page == 0) {
+        if (direct == 0) {
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+            change_segmented_square(&spiral, r1, D2R(rr + seg), D2R(speedometer_scroll_offset + calculated_speedometer_sin + t(-seg + ang, 0, 0, duration_const, EaseOut)));
+
+            spiral.params.scale = xyzMake(1, 1, 1);
+            spiral.params.rotation = t(180.0f, 0, 0, duration_const, EaseOut);
+            spiral.params.alpha = t(1, 0, 0, duration_const, Linear);
+            draw_textured_shape(&spiral, main_matrix, NORMAL_ONE);
+
+            fast_arrow.params.alpha = fast_arrow_shadow.params.alpha = t(1, 0, 0, duration_const, Linear);
+            fast_arrow.params.rotation = fast_arrow_shadow.params.rotation = t(rr, rr - 180 - 160, 0, duration_const, EaseOut) + speedometer_scroll_offset + calculated_speedometer_sin;
+            draw_textured_shape(&fast_arrow_shadow, main_matrix, NORMAL_ONE);
+            draw_textured_shape(&fast_arrow, main_matrix, NORMAL_ONE);
+        }
+    } else if (current_page == 1) {
+        glEnable(GL_BLEND);
+        glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+        speedometer_scroll_offset = scroll_offset * 25;
+        calculated_speedometer_sin = 0;
+
+        if (direct == 1) {
+
+            float value = 0;
+            float e = 2.71;
+
+            float arg = time * 50;
+
+            value = 180 - 180 * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg * 3);
+
+            float ta = t(0, 180.0f, 0, duration_const, EaseOut);
+
+            change_segmented_square(&spiral, r1, D2R(rr + seg), D2R(-seg + value + speedometer_scroll_offset));
+
+            spiral.params.scale = xyzMake(1, 1, 1);
+            spiral.params.rotation = ta;
+            spiral.params.alpha = t(0, 1, 0, duration_const, Linear);
+            draw_textured_shape(&spiral, main_matrix, NORMAL_ONE);
+
+            fast_arrow.params.alpha = fast_arrow_shadow.params.alpha = t(0, 1, 0, duration_const, Linear);
+            fast_arrow.params.rotation = fast_arrow_shadow.params.rotation = -330 + value + ta + speedometer_scroll_offset;
+            draw_textured_shape(&fast_arrow_shadow, main_matrix, NORMAL_ONE);
+            draw_textured_shape(&fast_arrow, main_matrix, NORMAL_ONE);
+
+        } else {
+            spiral.params.alpha = fast_arrow.params.alpha = fast_arrow_shadow.params.alpha = 1;
+
+            float value = 0;
+            float e = 2.71;
+
+            float arg = time * 50;
+
+            float dangle = 90;
+            value = 180 - 90 - (180 - 90) * powf(e, -0.055f * arg * 2) * cosf(0.08f * arg * 3);
+            value *= -1;
+
+            change_segmented_square(&spiral, r1, D2R(rr + seg), D2R(speedometer_scroll_offset + value + calculated_speedometer_sin + t(360, 360 - dangle - seg, 0, duration_const, EaseInEaseOut)));
+
+            float scale = t(1.18, 1, 0, duration_const, EaseInEaseOut);
+            spiral.params.scale = xyzMake(scale, scale, 1);
+            spiral.params.rotation = t(360, 180, 0, duration_const, EaseInEaseOut);
+            draw_textured_shape(&spiral, main_matrix, NORMAL);
+
+            fast_arrow.params.rotation = fast_arrow_shadow.params.rotation = speedometer_scroll_offset + value + calculated_speedometer_sin + t(rr + 360 + 6, rr + 360 - 180 - dangle, 0, duration_const, EaseInEaseOut);
+            draw_textured_shape(&fast_arrow_shadow, main_matrix, NORMAL);
+            draw_textured_shape(&fast_arrow, main_matrix, NORMAL);
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            free_bg.params.alpha = t(1, 0, 0, duration_const, Linear);
+            draw_shape(&free_bg, main_matrix);
+
+            draw_ic(0);
+        }
+    } else if (current_page == 2) {
+
+        glEnable(GL_BLEND);
+        glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+        if (direct == 1) {
+            spiral.params.alpha = fast_arrow.params.alpha = fast_arrow_shadow.params.alpha = 1;
+
+            change_segmented_square(&spiral, r1, D2R(rr + seg + speedometer_scroll_offset), D2R(t(-seg + ang, 360, 0, duration_const, EaseInEaseOut)));
+
+            float scale = t(1, 1.18, 0, duration_const, EaseInEaseOut);
+            spiral.params.scale = xyzMake(scale, scale, 1);
+            spiral.params.rotation = t(180, 360, 0, duration_const, EaseInEaseOut);
+            draw_textured_shape(&spiral, main_matrix, NORMAL);
+
+            fast_arrow.params.rotation = fast_arrow_shadow.params.rotation = speedometer_scroll_offset + t(rr, rr + 360 + 6, 0, duration_const, EaseInEaseOut);
+            draw_textured_shape(&fast_arrow_shadow, main_matrix, NORMAL);
+            draw_textured_shape(&fast_arrow, main_matrix, NORMAL);
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            free_bg.params.alpha = t(0, 1, 0, duration_const, Linear);
+            draw_shape(&free_bg, main_matrix);
+
+            draw_ic(0);
+        } else {
+            glDisable(GL_BLEND);
+            free_bg.params.alpha = 1;
+            draw_shape(&free_bg, main_matrix);
+
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            draw_ic(0);
+
+            powerful_bg.params.alpha = t_reversed(0, 1, 0, duration_const, Linear);
+            draw_shape(&powerful_bg, main_matrix);
+        }
+        ribbon1.params.rotation = 0;
+        ribbon2.params.rotation = 90;
+        ribbon3.params.rotation = 180;
+        ribbon4.params.rotation = 270;
+    } else if (current_page == 3) {
+        if (direct == 1) {
+            glDisable(GL_BLEND);
+            free_bg.params.alpha = 1;
+            draw_shape(&free_bg, main_matrix);
+
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            powerful_bg.params.alpha = t(0, 1, 0, duration_const, Linear);
+            draw_shape(&powerful_bg, main_matrix);
+
+            draw_stars();
+
+        } else {
+            glDisable(GL_BLEND);
+            private_bg.params.alpha = 1;
+            draw_shape(&private_bg, main_matrix);
+
+            float a = t(0, 1.0f, 0, duration_const, EaseOut);
+
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            powerful_bg.params.rotation = 0;
+            powerful_bg.params.alpha = a;
+            draw_shape(&powerful_bg, main_matrix);
+
+            draw_stars();
+        }
+    } else if (current_page == 4) {
+        if (direct == 1) {
+
+            glDisable(GL_BLEND);
+            powerful_bg.params.alpha = 1;
+            draw_shape(&powerful_bg, main_matrix);
+
+            float a = t(0, 1.0f, 0, duration_const, EaseOut);
+
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            private_bg.params.rotation = t(45, 0, 0, duration_const, EaseOut);
+            private_bg.params.alpha = a;
+            draw_shape(&private_bg, main_matrix);
+
+        } else {
+            glDisable(GL_BLEND);
+            cloud_bg.params.alpha = 1;
+            draw_shape(&cloud_bg, main_matrix);
+
+            float a = t(0, 1.0f, 0, duration_const * private_back_k, EaseOut);
+
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            private_bg.params.alpha = a;
+            draw_shape(&private_bg, main_matrix);
+        }
+    } else if (current_page == 5) {
+        glDisable(GL_BLEND);
+        private_bg.params.alpha = 1.0f;
+        draw_shape(&private_bg, main_matrix);
+        float a = t(0, 1.0f, 0, duration_const, EaseOut);
+
+        glEnable(GL_BLEND);
+        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+        cloud_bg.params.alpha = a;
+        draw_shape(&cloud_bg, main_matrix);
+        if (scroll_offset > 0) {
+            cloud_scroll_offset = -scroll_offset * 40;
+        } else {
+            cloud_scroll_offset = -scroll_offset * 15;
+        }
+        draw_ic(1);
+    }
+
+    if (current_page == 0) {
+        rglNormalDraw();
+        if (direct == 0) {
+            telegram_sphere.params.alpha = t(0, 1, 0, duration_const * 0.8f, Linear);
+            scale = 1;
+
+            telegram_sphere.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&telegram_sphere, main_matrix, NORMAL);
+
+            float tt = MINf(0, (float) (-M_PI * 125.0f / 180.0f + time * M_PI * 2 * 1.5f));
+            float dx = sinf(tt) * 75;
+            float dy = -sinf(tt) * 60;
+            telegram_plane.params.position = xyzMake(dx, dy, 0);
+            float scale = (cosf(tt) + 1) * 0.5f;
+            telegram_plane.params.scale = xyzMake(cosf(tt) * scale, scale, 1);
+
+            if (tt < D2R(125)) {
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+                draw_textured_shape(&telegram_plane, main_matrix, NORMAL_ONE);
+            }
+        }
+    } else if (current_page == 1) {
+        rglNormalDraw();
+        if (direct == 1) {
+            telegram_sphere.params.alpha = t(1, 0, 0, duration_const, Linear);
+            draw_textured_shape(&telegram_sphere, main_matrix, NORMAL);
+
+            double tt = time * M_PI * 2 * 1.5f;
+
+            float dx = (float) sin(tt) * 75;
+            float dy = (float) -sin(tt) * 60;
+
+            telegram_plane.params.position = xyzMake(dx, dy, 0);
+
+            float scale = (float) (cos(tt) + 1) * 0.5f;
+
+            telegram_plane.params.scale = xyzMake((float) cos(tt) * scale, scale, 1);
+
+            if (tt < D2R(125)) {
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+                draw_textured_shape(&telegram_plane, main_matrix, NORMAL_ONE);
+            }
+        }
+    } else if (current_page == 2) {
+        rglNormalDraw();
+
+        float dribbon = 87;
+
+        if (direct == 1) {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+            ribbonLayer.rotation = scroll_offset * 5 + t(180, 360, 0, duration_const, EaseInEaseOut);
+            mat4x4_layer(ribbons_layer, ribbonLayer, 1.0f, 0);
+
+            float scale;
+            float dur = duration_const * 0.5f;
+
+            free_knot1.params.position = xyzMake(5, -5 - 9, 0);
+            scale = t(0, 1, knot_delays[0], dur, EaseOut);
+            free_knot1.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&free_knot1, ribbons_layer, NORMAL_ONE);
+
+            free_knot2.params.position = xyzMake(-5, -5 - 9, 0);
+            scale = t(0, 1, knot_delays[1], dur, EaseOut);
+            free_knot2.params.scale = xyzMake(-scale, scale, 1);
+            draw_textured_shape(&free_knot2, ribbons_layer, NORMAL_ONE);
+
+            free_knot3.params.position = xyzMake(-5, 5 - 9, 0);
+            scale = t(0, 1, knot_delays[2], dur, EaseOut);
+            free_knot3.params.scale = xyzMake(-scale, scale, 1);
+            draw_textured_shape(&free_knot3, ribbons_layer, NORMAL_ONE);
+
+            free_knot3.params.position = xyzMake(5, 5 - 9, 0);
+            scale = t(0, 1, knot_delays[3], dur, EaseOut);
+            free_knot3.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&free_knot3, ribbons_layer, NORMAL_ONE);
+
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            ribbon1.params.alpha = ribbon2.params.alpha = ribbon3.params.alpha = ribbon4.params.alpha = t(0, 1, 0, dur, EaseInEaseOut);
+
+            int ribbon_k = time > duration_const ? 1 : 0;
+
+            change_ribbon(&ribbon1, ribbonLength - 8.0f * ribbon_k - free_scroll_offset / 5.0f * (30 - 8 * ribbon_k));
+            ribbon1.params.position.x = scroll_offset * 30 * 0 + t(-dribbon, 0, 0, duration_const, EaseInEaseOut);
+            draw_shape(&ribbon1, ribbons_layer);
+
+            change_ribbon(&ribbon2, ribbonLength - 10.0f * ribbon_k - free_scroll_offset / 5.0f * (22 - 10 * ribbon_k));
+            ribbon2.params.position.y = scroll_offset * 15 + t(-9 - dribbon, -9, 0, duration_const, EaseInEaseOut);
+            draw_shape(&ribbon2, ribbons_layer);
+
+            ribbon3.params.position.x = t(dribbon, 0, 0, duration_const, EaseInEaseOut);;
+            draw_shape(&ribbon3, ribbons_layer);
+
+            ribbon4.params.position.y = t(-9 + dribbon, -9, 0, duration_const, EaseInEaseOut);;
+            draw_shape(&ribbon4, ribbons_layer);
+
+            ribbonLayer.anchor.y = 0;
+            ribbonLayer.position.y = 0;
+
+            change_ribbon(&ribbon1, ribbonLength);
+            change_ribbon(&ribbon2, ribbonLength);
+            change_ribbon(&ribbon3, ribbonLength);
+            change_ribbon(&ribbon4, ribbonLength);
+        } else {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+            float scale = t(1, 2, 0, duration_const, EaseIn);
+            powerful_mask.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&powerful_mask, main_matrix, NORMAL_ONE);
+
+
+            ribbonLayer.rotation = free_scroll_offset + t_reversed(360, 360 + (45 + 30), 0, duration_const, EaseOut);
+            ribbonLayer.position.y = t_reversed(0, -8, 0, duration_const * 0.8f, EaseOut);
+            ribbonLayer.anchor.y = t_reversed(0, -9, 0, duration_const * 0.8f, EaseOut);
+            mat4x4_layer(ribbons_layer, ribbonLayer, 1.0f, 0);
+
+
+            float dur = duration_const * 0.5f;
+
+            free_knot1.params.position = xyzMake(11 / 2, -11 / 2 - 9, 0);
+            scale = t(0, 1, knot_delays[0], dur, EaseOut);
+            free_knot1.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&free_knot1, ribbons_layer, NORMAL_ONE);
+
+            free_knot2.params.position = xyzMake(-11 / 2, -11 / 2 - 9, 0);
+            scale = t(0, 1, knot_delays[1], dur, EaseOut);
+            free_knot2.params.scale = xyzMake(-scale, scale, 1);
+            draw_textured_shape(&free_knot2, ribbons_layer, NORMAL_ONE);
+
+            free_knot3.params.position = xyzMake(-11 / 2, 11 / 2 - 9, 0);
+            scale = t(0, 1, knot_delays[2], dur, EaseOut);
+            free_knot3.params.scale = xyzMake(-scale, scale, 1);
+            draw_textured_shape(&free_knot3, ribbons_layer, NORMAL_ONE);
+
+            free_knot3.params.position = xyzMake(11 / 2, 11 / 2 - 9, 0);
+            scale = t(0, 1, knot_delays[3], dur, EaseOut);
+            free_knot3.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&free_knot3, ribbons_layer, NORMAL_ONE);
+
+            float a1 = -25;
+            ribbon1.params.rotation = t_reversed(0, a1, 0, duration_const, EaseOut);
+            ribbon3.params.rotation = t_reversed(180, 180 + a1, 0, duration_const, EaseOut);
+
+            float a2 = 0;
+            ribbon2.params.rotation = t_reversed(90, 90 + a2, 0, duration_const, EaseOut);
+            ribbon4.params.rotation = t_reversed(270, 270 + a2, 0, duration_const, EaseOut);
+
+            float k = .9;
+            ribbon2.params.alpha = ribbon4.params.alpha = t_reversed(1, 0, duration_const * 0.5f, duration_const * 0.1f, Linear);
+
+            int ribbon_k = 0;
+            change_ribbon(&ribbon1, t_reversed(ribbonLength - 8.0f * ribbon_k, 0, 0, duration_const * 0.9f, Linear) - free_scroll_offset / 5.0f * (30 - 8 * ribbon_k));
+            ribbon1.params.position.x = 0;
+            draw_shape(&ribbon1, ribbons_layer);
+
+            change_ribbon(&ribbon2, t_reversed(ribbonLength - 10.0f * ribbon_k, 0, 0, duration_const * k, Linear) - free_scroll_offset / 5.0f * (22 - 10 * ribbon_k));
+            ribbon2.params.position.y = scroll_offset * 15 + -9;
+            draw_shape(&ribbon2, ribbons_layer);
+
+            change_ribbon(&ribbon3, t_reversed(ribbonLength, 0, 0, duration_const * 0.9f, Linear));
+            draw_shape(&ribbon3, ribbons_layer);
+
+            change_ribbon(&ribbon4, t_reversed(ribbonLength, 0, duration_const * 0.6f * 0, duration_const * k, Linear));
+            draw_shape(&ribbon4, ribbons_layer);
+
+            float infinityDurK = 1.3;
+
+            rglMaskDraw();
+
+            change_infinity(&infinity, t_reversed(0, 0.99, 0, duration_const * infinityDurK, EaseOut));
+
+            float rot1 = t(0, -50, duration_const * 0.5f, duration_const * 0.8f, EaseOut);
+            float rot2 = t(0, -30, duration_const * 0.8f, duration_const, EaseOut);
+            infinity.params.rotation = rot1;
+
+            infinity.params.position.z = 1;
+            infinity.params.position.y = -6;
+            infinity.params.anchor = xyzMake(52.75, 23.5f, 0);
+
+            float infinity_scale = 1.025;
+            infinity.params.scale = xyzMake(infinity_scale, infinity_scale, 1);
+            draw_shape(&infinity, main_matrix);
+            infinity.params.scale = xyzMake(-infinity_scale, -infinity_scale, 1);
+            draw_shape(&infinity, main_matrix);
+            rglNormalDrawThroughMask();
+            glEnable(GL_BLEND);
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            powerful_infinity_white.params.rotation = rot1 + rot2;
+            powerful_infinity_white.params.alpha = 1;
+            powerful_infinity_white.params.position.y = -6;
+            draw_textured_shape(&powerful_infinity_white, main_matrix, NORMAL_ONE);
+        }
+    } else if (current_page == 3) {
+        if (direct == 1) {
+            ribbon1.params.position.x = 0;
+            ribbon2.params.position.y = -9;
+            ribbon3.params.position.x = 0;
+            ribbon4.params.position.y = -9;
+            rglNormalDraw();
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            float scale = t(2, 1, 0, duration_const, EaseOut);
+            powerful_mask.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&powerful_mask, main_matrix, NORMAL_ONE);
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            ribbonLayer.rotation = free_scroll_offset + t(360, 360 + (45 + 30), 0, duration_const * 0.8f, EaseOut);
+            ribbonLayer.position.y = t(0, -8, 0, duration_const * 0.8f, EaseOut);
+            ribbonLayer.anchor.y = t(0, -9, 0, duration_const * 0.8f, EaseOut);
+            mat4x4_layer(ribbons_layer, ribbonLayer, 1.0f, 0);
+
+            float a1 = -25;
+            ribbon1.params.rotation = t(0, a1, 0, duration_const, EaseOut);
+            ribbon3.params.rotation = t(180, 180 + a1, 0, duration_const, EaseOut);
+
+            float a2 = 0;
+            ribbon2.params.rotation = t(90, 90 + a2, 0, duration_const, EaseOut);
+            ribbon4.params.rotation = t(270, 270 + a2, 0, duration_const, EaseOut);
+
+            float k = .5;
+            ribbon2.params.alpha = ribbon4.params.alpha = t(1, 0, duration_const * k * 0.5f, duration_const * k * 0.1f, Linear);
+
+            int ribbon_k = time > duration_const ? 1 : 0;
+
+            change_ribbon(&ribbon1, t(ribbonLength - 8.0f * ribbon_k - free_scroll_offset / 5.0f * (30 - 8 * ribbon_k), 0, 0, duration_const * 0.9f, Linear));
+            draw_shape(&ribbon1, ribbons_layer);
+
+            change_ribbon(&ribbon2, t(ribbonLength - 10.0f * ribbon_k - free_scroll_offset / 5.0f * (22 - 10 * ribbon_k), 0, 0, duration_const * k, Linear));
+            draw_shape(&ribbon2, ribbons_layer);
+
+            change_ribbon(&ribbon3, t(ribbonLength, 0, 0, duration_const * 0.9f, Linear));
+            draw_shape(&ribbon3, ribbons_layer);
+
+            change_ribbon(&ribbon4, t(ribbonLength, 0, 0, duration_const * k, Linear));
+            draw_shape(&ribbon4, ribbons_layer);
+
+            float infinityDurK = 1.1f;
+            if (time < duration_const * infinityDurK - 0.025f) {
+                rglMaskDraw();
+
+                change_infinity(&infinity, t(0, 0.99f, 0, duration_const * infinityDurK, Linear));
+
+                infinity.params.rotation = 0;
+
+                infinity.params.position.z = 1;
+                infinity.params.position.y = -6;
+                infinity.params.anchor = xyzMake(52.75, 23.5f, 0);
+
+                float infinity_scale = 1.025f;
+                infinity.params.scale = xyzMake(infinity_scale, infinity_scale, 1);
+                draw_shape(&infinity, main_matrix);
+
+                infinity.params.scale = xyzMake(-infinity_scale, -infinity_scale, 1);
+                draw_shape(&infinity, main_matrix);
+
+                rglNormalDrawThroughMask();
+                glEnable(GL_BLEND);
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+                powerful_infinity_white.params.rotation = 0;
+                powerful_infinity_white.params.alpha = 1;
+                powerful_infinity_white.params.position.y = -6;
+
+                draw_textured_shape(&powerful_infinity_white, main_matrix, NORMAL_ONE);
+            } else {
+                rglNormalDraw();
+
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+                powerful_infinity.params.position.y = -6;
+                powerful_infinity.params.alpha = 1;
+                draw_textured_shape(&powerful_infinity, main_matrix, NORMAL_ONE);
+            }
+        } else {
+            rglNormalDraw();
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+            float scale = t(2, 1, 0, duration_const, EaseOut);
+            powerful_mask.params.scale = xyzMake(scale, scale, 1);
+            draw_textured_shape(&powerful_mask, main_matrix, NORMAL_ONE);
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            scale = t(1, 2, 0, duration_const, EaseOut);
+            private_stroke.params.scale = xyzMake(scale, scale, 1);
+            private_stroke.params.rotation = t(0, -90, 0, duration_const, EaseOut);
+            private_stroke.params.alpha = t(1, 0, 0, duration_const, Linear);
+            private_stroke.params.position = xyzMake(0, t(0, -6, 0, duration_const, EaseOut), 0);
+            scale = t_reversed(63 * 2.0f, 63 * 2, 0, duration_const, EaseOut);
+            change_rounded_rectangle_stroked(&private_stroke, CSizeMake(scale, scale), scale / 2.0f, 9);
+            draw_shape(&private_stroke, main_matrix);
+
+            float infinityDurK = 1.1;
+            if (time < duration_const * infinityDurK - 0.025f) {
+                rglMaskDraw();
+
+                change_infinity(&infinity, t(0, 0.99, 0, duration_const * infinityDurK, Linear));
+
+                infinity.params.rotation = 0;
+
+                infinity.params.position.z = 1;
+                infinity.params.position.y = -6;
+                infinity.params.anchor = xyzMake(52.75, 23.5f, 0);
+
+                float infinity_scale = 1.025;
+                infinity.params.scale = xyzMake(infinity_scale, infinity_scale, 1);
+                draw_shape(&infinity, main_matrix);
+
+                infinity.params.scale = xyzMake(-infinity_scale, -infinity_scale, 1);
+                draw_shape(&infinity, main_matrix);
+
+
+                rglNormalDrawThroughMask();
+                glEnable(GL_BLEND);
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+                powerful_infinity_white.params.rotation = 0;
+                powerful_infinity_white.params.alpha = 1;
+                powerful_infinity_white.params.position.y = -6;
+
+                draw_textured_shape(&powerful_infinity_white, main_matrix, NORMAL_ONE);
+            } else {
+                rglNormalDraw();
+
+                glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+                powerful_infinity.params.position.y = -6;
+                powerful_infinity.params.alpha = 1;
+                draw_textured_shape(&powerful_infinity, main_matrix, NORMAL_ONE);
+            }
+        }
+    } else if (current_page == 4) {
+        private_stroke.params.scale = xyzMake(1, 1, 1);
+
+        private_scroll_offset = scroll_offset * 5;
+
+        rglNormalDraw();
+        glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+
+        scale = t(1, 2, 0, duration_const, EaseOut);
+        if (scale < 1.5) {
+            powerful_mask.params.scale = xyzMake(scale, scale, 1);
+        }
+
+        if (direct == 1) {
+            privateLayer.rotation = private_scroll_offset + t(-90, 0, 0, duration_const, EaseOut);
+        } else {
+            privateLayer.rotation = private_scroll_offset + t(90, 0, 0, duration_const * private_back_k, EaseOut);
+        }
+
+        mat4x4_layer(private_matrix, privateLayer, 1, 0);
+
+        if (direct == 1) {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            powerful_infinity.params.position.y = -6;
+            powerful_infinity.params.alpha = t(1, 0, 0, duration_const * 0.25f, EaseIn);
+            draw_textured_shape(&powerful_infinity, main_matrix, NORMAL_ONE);
+        }
+
+        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+
+        if (direct == 1) {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            scale = t(0.5f, 1.0f, 0, duration_const, EaseOut);
+            private_door.params.scale = xyzMake(scale, scale, 1);
+            private_door.params.alpha = t(.0, 1.0f, 0, duration_const, EaseOut);
+            draw_textured_shape(&private_door, main_matrix, NORMAL_ONE);
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            private_stroke.params.rotation = private_scroll_offset;
+            private_stroke.params.alpha = 1;
+            private_stroke.params.position = xyzMake(0, 0, 0);
+            scale = t(63, 63 * 2, 0, duration_const, EaseOut);
+            change_rounded_rectangle_stroked(&private_stroke, CSizeMake(scale, scale), scale / 2.0f, 9);
+            draw_shape(&private_stroke, main_matrix);
+
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            float k = .0;
+            scale = t(0.5f, 1.0f, duration_const * k, duration_const, EaseOut);
+            private_keyhole_body.params.rotation = private_scroll_offset;
+            private_keyhole_body.params.scale = xyzMake(scale, scale, 1);
+            private_keyhole_body.params.alpha = t(.0, 1.0f, duration_const * k, duration_const, EaseOut);
+            draw_safe(0, 1, t(0, 1, 0, duration_const, Linear));
+        } else {
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            scale = t(0.5f, 1.0f, 0, duration_const * private_back_k, EaseOut);
+            private_door.params.scale = xyzMake(scale, scale, 1);
+            private_door.params.alpha = t(.0, 1.0f, 0, duration_const * private_back_k, EaseOut);
+            draw_textured_shape(&private_door, main_matrix, NORMAL_ONE);
+
+            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+            private_stroke.params.rotation = private_scroll_offset;
+            private_stroke.params.alpha = t(0, 1, 0, duration_const * 0.25f, Linear);
+            private_stroke.params.position = xyzMake(0, 0, 0);
+            scale = t(63, 63 * 2, 0, duration_const * private_back_k, EaseOut);
+            change_rounded_rectangle_stroked(&private_stroke, CSizeMake(scale, scale), scale / 2.0f, 9);
+            draw_shape(&private_stroke, main_matrix);
+
+            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+            scale = t(00.5f, 1.0, 0, duration_const * private_back_k, EaseOut);
+            private_keyhole_body.params.rotation = private_scroll_offset;
+            private_keyhole_body.params.scale = xyzMake(scale, scale, 1);
+            private_keyhole_body.params.alpha = t(.0, 1.0f, 0, duration_const * private_back_k, EaseOut);
+
+            if (time < duration_const * .4) {
+                cloud_cover.params.position.y = t_reversed(118 / 2 + 50, 118 / 2, duration_const * 0.8f * private_back_k, duration_const * private_back_k, EaseOut);
+                draw_shape(&cloud_cover, main_matrix);
+            }
+
+            draw_safe(0, t(0, 1, duration_const * private_back_k * 0.0f, duration_const * private_back_k, Linear), t(0, 1, 0, duration_const, Linear));
+        }
+    } else if (current_page == 5) {
+        float private_fade_k = 0.5f;
+
+        rglNormalDraw();
+
+        glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+        scale = 1;
+        private_door.params.scale = xyzMake(scale, scale, 1);
+        private_door.params.alpha = t(1, 0, 0, duration_const * private_fade_k * 0.5f, EaseOut);
+        draw_textured_shape(&private_door, main_matrix, NORMAL_ONE);
+
+        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+        private_stroke.params.rotation = private_scroll_offset;
+        private_stroke.params.alpha = t(1, 0, 0, duration_const * private_fade_k * 0.5f, EaseOut);
+        scale = t(244 / 2, r2 * 2, 0, duration_const, EaseOut);
+        change_rounded_rectangle_stroked(&private_stroke, CSizeMake(scale, scale), scale / 2.0f, 9);
+        draw_shape(&private_stroke, main_matrix);
+
+        glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
+        scale = 1;
+        private_keyhole_body.params.rotation = private_scroll_offset;
+        private_keyhole_body.params.scale = xyzMake(scale, scale, 1);
+        private_keyhole_body.params.alpha = t(1.0, 0.0, 0, duration_const * private_fade_k * 0.5f, EaseOut);
+        privateLayer.rotation = private_scroll_offset;
+        mat4x4_layer(private_matrix, privateLayer, t(1, 0.9f, 0, duration_const * private_fade_k, EaseOut), 0);
+        cloud_cover.params.position.y = t(118 / 2 + 50, 118 / 2, 0, duration_const, EaseOut);
+        draw_shape(&cloud_cover, main_matrix);
+    }
+
+    prev_page = current_page;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setScrollOffset(JNIEnv *env, jclass class, float a_offset) {
+    scroll_offset = a_offset;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setPage(JNIEnv *env, jclass class, int page) {
+    if (current_page == page) {
+        return;
+    } else {
+        prev_page = current_page;
+        current_page = page;
+        direct = current_page > prev_page ? 1 : 0;
+        date0 = date;
+        time = 0;
+    }
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setDate(JNIEnv *env, jclass class, float a) {
+    date = a;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setIcTextures(JNIEnv *env, jclass class, GLuint a_ic_bubble_dot, GLuint a_ic_bubble, GLuint a_ic_cam_lens, GLuint a_ic_cam, GLuint a_ic_pencil, GLuint a_ic_pin, GLuint a_ic_smile_eye, GLuint a_ic_smile, GLuint a_ic_videocam) {
+    ic_bubble_dot_texture = a_ic_bubble_dot;
+    ic_bubble_texture = a_ic_bubble;
+    ic_cam_lens_texture = a_ic_cam_lens;
+    ic_cam_texture = a_ic_cam;
+    ic_pencil_texture = a_ic_pencil;
+    ic_pin_texture = a_ic_pin;
+    ic_smile_eye_texture = a_ic_smile_eye;
+    ic_smile_texture = a_ic_smile;
+    ic_videocam_texture = a_ic_videocam;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setTelegramTextures(JNIEnv *env, jclass class, GLuint a_telegram_sphere, GLuint a_telegram_plane) {
+    telegram_sphere_texture = a_telegram_sphere;
+    telegram_plane_texture = a_telegram_plane;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setFastTextures(JNIEnv *env, jclass class, GLuint a_fast_body, GLuint a_fast_spiral, GLuint a_fast_arrow, GLuint a_fast_arrow_shadow) {
+    fast_spiral_texture = a_fast_spiral;
+    fast_body_texture = a_fast_body;
+    fast_arrow_shadow_texture = a_fast_arrow_shadow;
+    fast_arrow_texture = a_fast_arrow;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setFreeTextures(JNIEnv *env, jclass class, GLuint a_knot_up, GLuint a_knot_down) {
+    free_knot_up_texture = a_knot_up;
+    free_knot_down_texture = a_knot_down;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setPowerfulTextures(JNIEnv *env, jclass class, GLuint a_powerful_mask, GLuint a_powerful_star, GLuint a_powerful_infinity, GLuint a_powerful_infinity_white) {
+    powerful_mask_texture = a_powerful_mask;
+    powerful_star_texture = a_powerful_star;
+    powerful_infinity_texture = a_powerful_infinity;
+    powerful_infinity_white_texture = a_powerful_infinity_white;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_setPrivateTextures(JNIEnv *env, jclass class, GLuint a_private_door, GLuint a_private_screw) {
+    private_door_texture = a_private_door;
+    private_screw_texture = a_private_screw;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_onSurfaceCreated(JNIEnv *env, jclass class) {
+
+    ms0 = 0;
+    date = 1;
+    date0 = 0;
+    direct = 0;
+    i = 0;
+    current_page = 0;
+    prev_page = 0;
+    time = 0;
+    time_local = 0;
+    offset_y = 0;
+    ribbonLength = 86.5f;
+    starsFar = 500;
+    scroll_offset = 0;
+    calculated_speedometer_sin = 0;
+    ms0_anim = 0;
+    fps_anim = 0;
+    count_anim_fps = 0;
+    speedometer_scroll_offset = 0;
+    free_scroll_offset = 0;
+    private_scroll_offset = 0;
+    anim_pencil_start_time = 0;
+    anim_pencil_start_all_time = 0;
+    anim_pencil_start_all_end_time = 0;
+    anim_pencil_stage = 0;
+    anim_bubble_dots_stage = 0;
+    anim_bubble_dots_end_period = 0;
+    anim_videocam_start_time = 0;
+    anim_videocam_next_time = 0;
+    anim_videocam_duration = 0;
+    anim_videocam_angle = 0;
+    anim_videocam_old_angle = 0;
+    anim_cam_start_time = 0;
+    anim_cam_next_time = 0;
+    anim_cam_duration = 0;
+    anim_cam_angle = 0;
+    anim_cam_old_angle = 0;
+    qShot = 0;
+    anim_camshot_start_time = 0;
+    anim_camshot_duration = 0;
+    anim_smile_start_time1 = 0;
+    anim_smile_start_time2 = 0;
+    anim_smile_blink_start_time = 0;
+    anim_smile_blink_one = 0;
+    anim_smile_stage = 0;
+    scale = 0;
+    anim_pin_start_time = 0;
+    anim_pin_duration = 0;
+    anim_pencil_period = 0;
+    cloud_scroll_offset = 0;
+
+    setup_shaders();
+
+    vec4 start_button_col = {44 / 255.0f, 165 / 255.0f, 224 / 255.0f, 1.0f};
+    start_button = create_rounded_rectangle(CSizeMake(172, 44), 2, 3, start_button_col);
+    start_button.params.anchor.y = -22;
+
+    mask1 = create_rounded_rectangle(CSizeMake(60, 60), 0, 16, black_color);
+
+    telegram_sphere = create_textured_rectangle(CSizeMake(148, 148), telegram_sphere_texture);
+    telegram_plane = create_textured_rectangle(CSizeMake(82, 74), telegram_plane_texture);
+    telegram_plane.params.anchor = xyzMake(6, -5, 0);
+
+    fast_body = create_textured_rectangle(CSizeMake(148, 148), fast_body_texture);
+
+    fast_arrow_shadow = create_textured_rectangle(CSizeMake(164 / 2, 44 / 2), fast_arrow_shadow_texture);
+    fast_arrow_shadow.params.position.x = -1;
+    fast_arrow_shadow.params.position.y = 2;
+
+    fast_arrow = create_textured_rectangle(CSizeMake(164 / 2, 44 / 2), fast_arrow_texture);
+    fast_arrow.params.anchor.x = fast_arrow_shadow.params.anchor.x = -19;
+
+    int ang = 180;
+    spiral = create_segmented_square(r1, D2R(35 + 1), D2R(35 + 1 - 10 + ang), fast_spiral_texture);
+
+    vec4 free_bg_color = {246 / 255.0f, 73 / 255.0f, 55 / 255.0f, 1};
+    free_bg = create_rectangle(CSizeMake(160 * 2, 160 * 2), free_bg_color);
+
+    free_knot1 = create_textured_rectangle(CSizeMake(138 / 3, 138 / 3), free_knot_up_texture);
+    free_knot1.params.anchor.x = -23 + 10;
+    free_knot1.params.anchor.y = 23 - 10;
+
+    free_knot2 = create_textured_rectangle(CSizeMake(138 / 3, 138 / 3), free_knot_up_texture);
+    free_knot2.params.anchor.x = -23 + 10;
+    free_knot2.params.anchor.y = 23 - 10;
+
+    free_knot3 = create_textured_rectangle(CSizeMake(150 / 3, 150 / 3), free_knot_down_texture);
+    free_knot3.params.anchor.x = -100 / 4.0f + 20 / 2.0f;
+    free_knot3.params.anchor.y = -100 / 4.0f + 20 / 2.0f;
+
+    free_knot4 = create_textured_rectangle(CSizeMake(150 / 3, 150 / 3), free_knot_down_texture);
+    free_knot4.params.anchor.x = -100 / 4.0f + 20 / 2.0f;
+    free_knot4.params.anchor.y = -100 / 4.0f + 20 / 2.0f;
+
+
+    ribbonLayer = default_layer_params();
+
+    ribbon1 = create_ribbon(ribbonLength, white_color);
+    ribbon1.params.layer_params = ribbonLayer;
+
+    ribbon2 = create_ribbon(ribbonLength, white_color);
+    ribbon2.params.rotation = 90;
+    ribbon2.params.layer_params = ribbonLayer;
+
+    ribbon3 = create_ribbon(ribbonLength, white_color);
+    ribbon3.params.rotation = 180;
+    ribbon3.params.layer_params = ribbonLayer;
+
+    ribbon4 = create_ribbon(ribbonLength, white_color);
+    ribbon4.params.rotation = 270;
+    ribbon4.params.layer_params = ribbonLayer;
+
+    ribbon1.params.position.y = ribbon2.params.position.y = ribbon3.params.position.y = ribbon4.params.position.y = -9;
+
+
+    ic_bubble_dot = create_textured_rectangle(CSizeMake(18 / 3, 18 / 3), ic_bubble_dot_texture);
+    ic_bubble = create_textured_rectangle(CSizeMake(102 / 3, 102 / 3), ic_bubble_texture);
+    ic_cam_lens = create_textured_rectangle(CSizeMake(36 / 3, 36 / 3), ic_cam_lens_texture);
+    ic_cam = create_textured_rectangle(CSizeMake(108 / 3, 96 / 3), ic_cam_texture);
+    ic_pencil = create_textured_rectangle(CSizeMake(86 / 3, 86 / 3), ic_pencil_texture);
+    ic_pin = create_textured_rectangle(CSizeMake(90 / 3, 120 / 3), ic_pin_texture);
+    ic_smile_eye = create_textured_rectangle(CSizeMake(18 / 3, 18 / 3), ic_smile_eye_texture);
+    ic_smile = create_textured_rectangle(CSizeMake(120 / 3, 120 / 3), ic_smile_texture);
+    ic_videocam = create_textured_rectangle(CSizeMake(144 / 3, 84 / 3), ic_videocam_texture);
+
+    ic_pin_layer = ic_cam_layer = ic_videocam_layer = ic_smile_layer = ic_bubble_layer = ic_pencil_layer = default_layer_params();
+
+    ic_pin_layer.anchor = xyzMake(0, 50 / 2, 0);
+    ic_pencil_layer.anchor = xyzMake(-30 / 2, 30 / 2, 0);
+
+    infinity = create_infinity(11.7, .0, 32, white_color);
+
+    vec4 powerful_bg_color = {47 / 255.f, 90 / 255.f, 131 / 255.f, 1};
+    powerful_bg = create_rectangle(CSizeMake(200, 200), powerful_bg_color);
+    powerful_mask = create_textured_rectangle(CSizeMake(200, 200), powerful_mask_texture);
+
+    powerful_infinity = create_textured_rectangle(CSizeMake(366 / 3, 180 / 3), powerful_infinity_texture);
+    powerful_infinity_white = create_textured_rectangle(CSizeMake(366 / 3, 180 / 3), powerful_infinity_white_texture);
+
+    float star_radius = 5.25;
+    star = create_textured_rectangle(CSizeMake(star_radius, star_radius), powerful_star_texture);
+    star.params.const_params.is_star = 1;
+    for (i = 0; i < starsCount; i++) {
+        stars[i] = default_params();
+        stars[i].position = star_create_position(-(i * 1500.0f) / starsCount);
+    }
+
+    privateLayer = default_layer_params();
+
+    vec4 private_bg_color = {200 / 255.f, 207 / 255.f, 212 / 255.f, 1};
+    private_bg = create_rectangle(CSizeMake(240, 240), private_bg_color);
+
+    private_door = create_textured_rectangle(CSizeMake(408 / 3, 408 / 3), private_door_texture);
+    private_keyhole_body = create_textured_rectangle(CSizeMake(216 / 3, 216 / 3), private_keyhole_body_texture);
+    private_screw = create_textured_rectangle(CSizeMake(30 / 3, 30 / 3), private_screw_texture);
+    private_stroke = create_rounded_rectangle_stroked(CSizeMake(244 / 2, 244 / 2), 21, 9, 16, white_color);
+
+    int cloud_polygons_count = 64;
+    cloud_extra_mask1 = create_circle(1, cloud_polygons_count, black_color);
+    cloud_extra_mask2 = create_circle(1, cloud_polygons_count, black_color);
+    cloud_extra_mask3 = create_circle(1, cloud_polygons_count, black_color);
+    cloud_extra_mask4 = create_circle(1, cloud_polygons_count, black_color);
+
+    cloud_cover = create_rectangle(CSizeMake(240, 100), white_color);
+    cloud_cover.params.anchor.y = -50;
+
+    vec4 cloud_color = {42 / 255.0f, 180 / 255.0f, 247 / 255.0f, 1};
+    cloud_bg = create_rectangle(CSizeMake(160 * 2, 160 * 2), cloud_color);
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Intro_onSurfaceChanged(JNIEnv *env, jclass class, int a_width_px, int a_height_px, float a_scale_factor, int a1) {
+    glViewport(0, 0, a_width_px, a_height_px);
+    width = (int) (a_width_px / a_scale_factor);
+    height = (int) (a_height_px / a_scale_factor);
+    scale_factor = a_scale_factor;
+    mat4x4_plain(main_matrix, (int)((float)a_width_px / a_scale_factor), (int)((float)a_height_px / a_scale_factor));
+    offset_y = a1*main_matrix[1][1];
+    set_y_offset_objects(offset_y);
+    y_offset_absolute = a1;
+    mat4x4_stars(stars_matrix, 45, 1, -1000, 0, (int)((float)a_width_px / a_scale_factor), (int)((float)a_height_px / a_scale_factor));
+}
\ No newline at end of file
diff --git a/TMessagesProj/jni/intro/IntroRenderer.h b/TMessagesProj/jni/intro/IntroRenderer.h
new file mode 100644
index 000000000..27a2688f5
--- /dev/null
+++ b/TMessagesProj/jni/intro/IntroRenderer.h
@@ -0,0 +1,113 @@
+#ifndef TMESSAGES_INTRO_RENDERER_H
+#define TMESSAGES_INTRO_RENDERER_H
+
+#include <GLES2/gl2.h>
+
+extern float scale_factor;
+extern int width, height;
+extern int y_offset_absolute;
+
+typedef enum {
+    Default = 0,
+    EaseIn = 1,
+    EaseOut = 2,
+    EaseInEaseOut = 3,
+    Linear = 4,
+    Sin = 5,
+    EaseOutBounce,
+    TIMING_NUM
+} timing_type;
+
+typedef float vec2[2];
+typedef float vec4[4];
+typedef vec4 mat4x4[4];
+
+typedef enum {NORMAL, NORMAL_ONE, RED, BLUE, LIGHT_RED, LIGHT_BLUE} texture_program_type;
+
+typedef struct {
+    float x;
+    float y;
+} CPoint;
+
+typedef struct {
+    float width;
+    float height;
+} CSize;
+
+typedef struct {
+    float x;
+    float y;
+    float z;
+} xyz;
+
+typedef struct {
+    GLuint program;
+    GLint a_position_location;
+    GLint a_texture_coordinates_location;
+    GLint u_mvp_matrix_location;
+    GLint u_texture_unit_location;
+    GLint u_alpha_loaction;
+} TextureProgram;
+
+typedef struct {
+    GLuint program;
+    GLint a_position_location;
+    GLint u_mvp_matrix_location;
+    GLint u_color_location;
+    GLint u_alpha_loaction;
+} ColorProgram;
+
+typedef struct {
+    float side_length;
+    float start_angle;
+    float end_angle;
+    float angle;
+    CSize size;
+    float radius;
+    float width;
+} VarParams;
+
+typedef struct {
+    size_t datasize;
+    int round_count;
+    GLenum triangle_mode;
+    int is_star;
+} ConstParams;
+
+typedef struct {
+    xyz anchor;
+    xyz position;
+    float rotation;
+    xyz scale;
+} LayerParams;
+
+typedef struct {
+    xyz anchor;
+    xyz position;
+    float rotation;
+    xyz scale;
+    float alpha;
+    VarParams var_params;
+    ConstParams const_params;
+    LayerParams layer_params;
+} Params;
+
+typedef struct {
+    vec4 color;
+    CPoint *data;
+    GLuint buffer;
+    int num_points;
+
+    Params params;
+} Shape;
+
+typedef struct {
+    GLuint texture;
+    CPoint *data;
+    GLuint buffer;
+    int num_points;
+
+    Params params;
+} TexturedShape;
+
+#endif
diff --git a/TMessagesProj/jni/jni.c b/TMessagesProj/jni/jni.c
index 4bf8971fe..21deaaee6 100644
--- a/TMessagesProj/jni/jni.c
+++ b/TMessagesProj/jni/jni.c
@@ -72,6 +72,37 @@ JNIEXPORT jint Java_org_telegram_messenger_Utilities_aesCtrDecryption(JNIEnv *en
     return num;
 }
 
+JNIEXPORT jint Java_org_telegram_messenger_Utilities_aesCtrDecryptionByteArray(JNIEnv *env, jclass class, jbyteArray buffer, jbyteArray key, jbyteArray iv, int offset, int length, int fileOffset) {
+    unsigned char *bufferBuff = (unsigned char *)(*env)->GetByteArrayElements(env, buffer, NULL);
+    unsigned char *keyBuff = (unsigned char *)(*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *)(*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    uint8_t count[16];
+    AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+    unsigned int num = (unsigned int) (fileOffset % 16);
+
+    int o = fileOffset / 16;
+    ivBuff[15] = (uint8_t) (o & 0xff);
+    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
+    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
+    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
+    AES_encrypt(ivBuff, count, &akey);
+
+    o = (fileOffset + 15) / 16;
+    ivBuff[15] = (uint8_t) (o & 0xff);
+    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
+    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
+    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
+
+    AES_ctr128_encrypt(bufferBuff + offset, bufferBuff + offset, length, &akey, ivBuff, count, &num);
+
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, buffer, bufferBuff, 0);
+    return num;
+}
+
 JNIEXPORT jstring Java_org_telegram_messenger_Utilities_readlink(JNIEnv *env, jclass class, jstring path) {
     static char buf[1000];
     char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
diff --git a/TMessagesProj/jni/libtgvoip b/TMessagesProj/jni/libtgvoip
index de3370031..e42287b6f 160000
--- a/TMessagesProj/jni/libtgvoip
+++ b/TMessagesProj/jni/libtgvoip
@@ -1 +1 @@
-Subproject commit de33700312e3676a520b5a79d51e953fcf23cf51
+Subproject commit e42287b6f4a520b7ddabc6cdcff205f4e7e216ec
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index b8818c856..8dedb04de 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -162,6 +162,7 @@
         </activity>
         <activity
             android:name="org.telegram.ui.IntroActivity"
+            android:launchMode="singleTask"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
         </activity>
         <activity
@@ -179,15 +180,6 @@
             android:resizeableActivity="false"
             android:windowSoftInputMode="adjustResize|stateHidden">
         </activity>
-        <activity
-            android:name=".GoogleVoiceClientActivity"
-            android:exported="true">
-            <intent-filter>
-                <action android:name="com.google.android.voicesearch.SEND_MESSAGE_TO_CONTACTS" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="text/plain" />
-            </intent-filter>
-        </activity>
         <activity
             android:name="org.telegram.ui.VoIPActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
@@ -266,7 +258,6 @@
         <service android:name=".ClearCacheService" android:exported="false"/>
         <service android:name=".VideoEncodingService" android:enabled="true"/>
         <service android:name=".voip.VoIPService" android:enabled="true"/>
-        <service android:name=".GoogleVoiceClientService"/>
         <service android:name=".MusicPlayerService" android:exported="true" android:enabled="true"/>
         <service android:name=".MusicBrowserService" android:exported="true">
             <intent-filter>
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index b12c964d5..a4037de67 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -60,6 +60,8 @@
 import android.view.Surface;
 import android.view.View;
 import android.view.WindowManager;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.OvershootInterpolator;
 import android.view.inputmethod.InputMethodManager;
 import android.webkit.MimeTypeMap;
 import android.widget.EdgeEffect;
@@ -120,6 +122,9 @@
     public static boolean usingHardwareInput;
     public static boolean isInMultiwindow;
 
+    public static DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
+    public static OvershootInterpolator overshootInterpolator = new OvershootInterpolator();
+
     private static Boolean isTablet = null;
     private static int adjustOwnerClassGuid = 0;
 
@@ -637,11 +642,7 @@ public static int getMinTabletSide() {
 
     public static int getPhotoSize() {
         if (photoSize == null) {
-            if (Build.VERSION.SDK_INT >= 16) {
-                photoSize = 1280;
-            } else {
-                photoSize = 800;
-            }
+            photoSize = 1280;
         }
         return photoSize;
     }
@@ -1134,7 +1135,8 @@ public static boolean needShowPasscode(boolean reset) {
             ForegroundDetector.getInstance().resetBackgroundVar();
         }
         return UserConfig.passcodeHash.length() > 0 && wasInBackground &&
-                (UserConfig.appLocked || UserConfig.autoLockIn != 0 && UserConfig.lastPauseTime != 0 && !UserConfig.appLocked && (UserConfig.lastPauseTime + UserConfig.autoLockIn) <= ConnectionsManager.getInstance().getCurrentTime());
+                (UserConfig.appLocked || UserConfig.autoLockIn != 0 && UserConfig.lastPauseTime != 0 && !UserConfig.appLocked &&
+                        (UserConfig.lastPauseTime + UserConfig.autoLockIn) <= ConnectionsManager.getInstance().getCurrentTime() || ConnectionsManager.getInstance().getCurrentTime() + 5 < UserConfig.lastPauseTime);
     }
 
     public static void shakeView(final View view, final float x, final int num) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index b7a3ca908..28ac4b3e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -11,8 +11,8 @@
 public class BuildVars {
     public static boolean DEBUG_VERSION = false;
     public static boolean DEBUG_PRIVATE_VERSION = false;
-    public static int BUILD_VERSION = 1030;
-    public static String BUILD_VERSION_STRING = "4.1";
+    public static int BUILD_VERSION = 1043;
+    public static String BUILD_VERSION_STRING = "4.2";
     public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
     public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
     public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DownloadObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/DownloadObject.java
index 7b58b30ad..1904cdb44 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DownloadObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/DownloadObject.java
@@ -14,4 +14,5 @@
     public TLObject object;
     public int type;
     public long id;
+    public boolean secret;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 5aaefcf8b..01ec763d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -18,6 +18,8 @@
 import java.io.File;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Scanner;
 
 public class FileLoadOperation {
@@ -37,6 +39,7 @@
 
     private final static int downloadChunkSize = 1024 * 32;
     private final static int downloadChunkSizeBig = 1024 * 128;
+    private final static int cdnChunkCheckSize = 1024 * 128;
     private final static int maxDownloadRequests = 4;
     private final static int maxDownloadRequestsBig = 2;
     private final static int bigFileSizeFrom = 1024 * 1024;
@@ -57,12 +60,23 @@
     private int requestsCount;
     private int renameRetryCount;
 
+    private boolean encryptFile;
+
+    private HashMap<Integer, TLRPC.TL_cdnFileHash> cdnHashes;
+
+    private byte[] encryptKey;
+    private byte[] encryptIv;
+
     private boolean isCdn;
     private byte[] cdnIv;
     private byte[] cdnKey;
     private byte[] cdnToken;
     private int cdnDatacenterId;
     private boolean reuploadingCdn;
+    private int lastCheckedCdnPart;
+    private RandomAccessFile fileReadStream;
+    private byte[] cdnCheckBytes;
+    private boolean requestingCdnOffsets;
 
     private int nextDownloadOffset;
     private ArrayList<RequestInfo> requestInfos;
@@ -190,6 +204,10 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
         }
     }
 
+    public void setEncryptFile(boolean value) {
+        encryptFile = value;
+    }
+
     public void setForceRequest(boolean forceRequest) {
         isForceRequest = forceRequest;
     }
@@ -233,10 +251,18 @@ public boolean start() {
         String fileNameIv = null;
         if (webLocation != null) {
             String md5 = Utilities.MD5(webLocation.url);
-            fileNameTemp = md5 + ".temp";
-            fileNameFinal = md5 + "." + ext;
-            if (key != null) {
-                fileNameIv = md5 + ".iv";
+            if (encryptFile) {
+                fileNameTemp = md5 + ".temp.enc";
+                fileNameFinal = md5 + "." + ext + ".enc";
+                if (key != null) {
+                    fileNameIv = md5 + ".iv.enc";
+                }
+            } else {
+                fileNameTemp = md5 + ".temp";
+                fileNameFinal = md5 + "." + ext;
+                if (key != null) {
+                    fileNameIv = md5 + ".iv";
+                }
             }
         } else {
             if (location.volume_id != 0 && location.local_id != 0) {
@@ -245,21 +271,36 @@ public boolean start() {
                     return false;
                 }
 
-                fileNameTemp = location.volume_id + "_" + location.local_id + ".temp";
-                fileNameFinal = location.volume_id + "_" + location.local_id + "." + ext;
-                if (key != null) {
-                    fileNameIv = location.volume_id + "_" + location.local_id + ".iv";
+                if (encryptFile) {
+                    fileNameTemp = location.volume_id + "_" + location.local_id + ".temp.enc";
+                    fileNameFinal = location.volume_id + "_" + location.local_id + "." + ext + ".enc";
+                    if (key != null) {
+                        fileNameIv = location.volume_id + "_" + location.local_id + ".iv.enc";
+                    }
+                } else {
+                    fileNameTemp = location.volume_id + "_" + location.local_id + ".temp";
+                    fileNameFinal = location.volume_id + "_" + location.local_id + "." + ext;
+                    if (key != null) {
+                        fileNameIv = location.volume_id + "_" + location.local_id + ".iv";
+                    }
                 }
             } else {
                 if (datacenter_id == 0 || location.id == 0) {
                     onFail(true, 0);
                     return false;
                 }
-
-                fileNameTemp = datacenter_id + "_" + location.id + ".temp";
-                fileNameFinal = datacenter_id + "_" + location.id + ext;
-                if (key != null) {
-                    fileNameIv = datacenter_id + "_" + location.id + ".iv";
+                if (encryptFile) {
+                    fileNameTemp = datacenter_id + "_" + location.id + ".temp.enc";
+                    fileNameFinal = datacenter_id + "_" + location.id + ext + ".enc";
+                    if (key != null) {
+                        fileNameIv = datacenter_id + "_" + location.id + ".iv.enc";
+                    }
+                } else {
+                    fileNameTemp = datacenter_id + "_" + location.id + ".temp";
+                    fileNameFinal = datacenter_id + "_" + location.id + ext;
+                    if (key != null) {
+                        fileNameIv = datacenter_id + "_" + location.id + ".iv";
+                    }
                 }
             }
         }
@@ -277,9 +318,43 @@ public boolean start() {
 
         if (!cacheFileFinal.exists()) {
             cacheFileTemp = new File(tempPath, fileNameTemp);
+            boolean newKeyGenerated = false;
+
+            if (encryptFile) {
+                File keyFile = new File(FileLoader.getInternalCacheDir(), fileNameFinal + ".key");
+                try {
+                    RandomAccessFile file = new RandomAccessFile(keyFile, "rws");
+                    long len = keyFile.length();
+                    encryptKey = new byte[32];
+                    encryptIv = new byte[16];
+                    if (len > 0 && len % 48 == 0) {
+                        file.read(encryptKey, 0, 32);
+                        file.read(encryptIv, 0, 16);
+                    } else {
+                        Utilities.random.nextBytes(encryptKey);
+                        Utilities.random.nextBytes(encryptIv);
+                        file.write(encryptKey);
+                        file.write(encryptIv);
+                        newKeyGenerated = true;
+                    }
+                    try {
+                        file.getChannel().close();
+                    } catch (Exception e) {
+                        FileLog.e(e);
+                    }
+                    file.close();
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+            }
+
             if (cacheFileTemp.exists()) {
-                downloadedBytes = (int) cacheFileTemp.length();
-                nextDownloadOffset = downloadedBytes = downloadedBytes / currentDownloadChunkSize * currentDownloadChunkSize;
+                if (newKeyGenerated) {
+                    cacheFileTemp.delete();
+                } else {
+                    downloadedBytes = (int) cacheFileTemp.length();
+                    nextDownloadOffset = downloadedBytes = downloadedBytes / currentDownloadChunkSize * currentDownloadChunkSize;
+                }
             }
 
             if (BuildVars.DEBUG_VERSION) {
@@ -290,11 +365,13 @@ public boolean start() {
                 cacheIvTemp = new File(tempPath, fileNameIv);
                 try {
                     fiv = new RandomAccessFile(cacheIvTemp, "rws");
-                    long len = cacheIvTemp.length();
-                    if (len > 0 && len % 32 == 0) {
-                        fiv.read(iv, 0, 32);
-                    } else {
-                        downloadedBytes = 0;
+                    if (!newKeyGenerated) {
+                        long len = cacheIvTemp.length();
+                        if (len > 0 && len % 32 == 0) {
+                            fiv.read(iv, 0, 32);
+                        } else {
+                            downloadedBytes = 0;
+                        }
                     }
                 } catch (Exception e) {
                     FileLog.e(e);
@@ -373,6 +450,19 @@ private void cleanup() {
         } catch (Exception e) {
             FileLog.e(e);
         }
+        try {
+            if (fileReadStream != null) {
+                try {
+                    fileReadStream.getChannel().close();
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                fileReadStream.close();
+                fileReadStream = null;
+            }
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
 
         try {
             if (fiv != null) {
@@ -451,24 +541,77 @@ public void run() {
         }
     }
 
-    private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error) {
+    private void delayRequestInfo(RequestInfo requestInfo) {
+        delayedRequestInfos.add(requestInfo);
+        if (requestInfo.response != null) {
+            requestInfo.response.disableFree = true;
+        } else if (requestInfo.responseWeb != null) {
+            requestInfo.responseWeb.disableFree = true;
+        } else if (requestInfo.responseCdn != null) {
+            requestInfo.responseCdn.disableFree = true;
+        }
+    }
+
+    private void requestFileOffsets(int offset) {
+        if (requestingCdnOffsets) {
+            return;
+        }
+        requestingCdnOffsets = true;
+        TLRPC.TL_upload_getCdnFileHashes req = new TLRPC.TL_upload_getCdnFileHashes();
+        req.file_token = cdnToken;
+        req.offset = offset;
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error != null) {
+                    onFail(false, 0);
+                } else {
+                    requestingCdnOffsets = false;
+                    TLRPC.Vector vector = (TLRPC.Vector) response;
+                    if (!vector.objects.isEmpty()) {
+                        if (cdnHashes == null) {
+                            cdnHashes = new HashMap<>();
+                        }
+                        for (int a = 0; a < vector.objects.size(); a++) {
+                            TLRPC.TL_cdnFileHash hash = (TLRPC.TL_cdnFileHash) vector.objects.get(a);
+                            cdnHashes.put(hash.offset, hash);
+                        }
+                    }
+                    for (int a = 0; a < delayedRequestInfos.size(); a++) {
+                        RequestInfo delayedRequestInfo = delayedRequestInfos.get(a);
+                        if (downloadedBytes == delayedRequestInfo.offset) {
+                            delayedRequestInfos.remove(a);
+                            if (!processRequestResult(delayedRequestInfo, null)) {
+                                if (delayedRequestInfo.response != null) {
+                                    delayedRequestInfo.response.disableFree = false;
+                                    delayedRequestInfo.response.freeResources();
+                                } else if (delayedRequestInfo.responseWeb != null) {
+                                    delayedRequestInfo.responseWeb.disableFree = false;
+                                    delayedRequestInfo.responseWeb.freeResources();
+                                } else if (delayedRequestInfo.responseCdn != null) {
+                                    delayedRequestInfo.responseCdn.disableFree = false;
+                                    delayedRequestInfo.responseCdn.freeResources();
+                                }
+                            }
+                            break;
+                        }
+                    }
+                }
+            }
+        }, null, null, 0, datacenter_id, ConnectionsManager.ConnectionTypeGeneric, true);
+    }
+
+    private boolean processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error) {
+        if (state != stateDownloading) {
+            return false;
+        }
         requestInfos.remove(requestInfo);
         if (error == null) {
             try {
                 if (downloadedBytes != requestInfo.offset) {
-                    if (state == stateDownloading) {
-                        delayedRequestInfos.add(requestInfo);
-                        if (requestInfo.response != null) {
-                            requestInfo.response.disableFree = true;
-                        } else if (requestInfo.responseWeb != null) {
-                            requestInfo.responseWeb.disableFree = true;
-                        } else if (requestInfo.responseCdn != null) {
-                            requestInfo.responseCdn.disableFree = true;
-                        }
-                    }
-                    return;
+                    delayRequestInfo(requestInfo);
+                    return false;
                 }
-
                 NativeByteBuffer bytes;
                 if (requestInfo.response != null) {
                     bytes = requestInfo.response.bytes;
@@ -481,8 +624,20 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                 }
                 if (bytes == null || bytes.limit() == 0) {
                     onFinishLoadingFile(true);
-                    return;
+                    return false;
+                }
+                int currentBytesSize = bytes.limit();
+                if (isCdn) {
+                    int cdnCheckPart = (downloadedBytes + currentBytesSize) / cdnChunkCheckSize;
+                    int fileOffset = (cdnCheckPart - (lastCheckedCdnPart != cdnCheckPart ? 1 : 0)) * cdnChunkCheckSize;
+                    TLRPC.TL_cdnFileHash hash = cdnHashes != null ? cdnHashes.get(fileOffset) : null;
+                    if (hash == null) {
+                        delayRequestInfo(requestInfo);
+                        requestFileOffsets(fileOffset);
+                        return true;
+                    }
                 }
+
                 if (requestInfo.responseCdn != null) {
                     int offset = requestInfo.offset / 16;
                     cdnIv[15] = (byte) (offset & 0xff);
@@ -491,7 +646,7 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                     cdnIv[12] = (byte) ((offset >> 24) & 0xff);
                     Utilities.aesCtrDecryption(bytes.buffer, cdnKey, cdnIv, 0, bytes.limit());
                 }
-                int currentBytesSize = bytes.limit();
+
                 downloadedBytes += currentBytesSize;
                 boolean finishedDownloading = currentBytesSize != currentDownloadChunkSize || (totalBytesCount == downloadedBytes || downloadedBytes % currentDownloadChunkSize != 0) && (totalBytesCount <= 0 || totalBytesCount <= downloadedBytes);
 
@@ -501,9 +656,49 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                         bytes.limit(bytes.limit() - bytesCountPadding);
                     }
                 }
-                if (fileOutputStream != null) {
-                    FileChannel channel = fileOutputStream.getChannel();
-                    channel.write(bytes.buffer);
+                if (encryptFile) {
+                    int offset = requestInfo.offset / 16;
+                    encryptIv[15] = (byte) (offset & 0xff);
+                    encryptIv[14] = (byte) ((offset >> 8) & 0xff);
+                    encryptIv[13] = (byte) ((offset >> 16) & 0xff);
+                    encryptIv[12] = (byte) ((offset >> 24) & 0xff);
+                    Utilities.aesCtrDecryption(bytes.buffer, encryptKey, encryptIv, 0, bytes.limit());
+                }
+                FileChannel channel = fileOutputStream.getChannel();
+                channel.write(bytes.buffer);
+                if (isCdn) {
+                    int cdnCheckPart = downloadedBytes / cdnChunkCheckSize;
+                    if (cdnCheckPart != lastCheckedCdnPart || finishedDownloading) {
+                        fileOutputStream.getFD().sync();
+                        int fileOffset = (cdnCheckPart - (lastCheckedCdnPart != cdnCheckPart ? 1 : 0)) * cdnChunkCheckSize;
+                        TLRPC.TL_cdnFileHash hash = cdnHashes.get(fileOffset);
+                        if (fileReadStream == null) {
+                            cdnCheckBytes = new byte[1024 * 128];
+                            fileReadStream = new RandomAccessFile(cacheFileTemp, "r");
+                            if (fileOffset != 0) {
+                                fileReadStream.seek(fileOffset);
+                            }
+                        }
+                        int count;
+                        if (lastCheckedCdnPart != cdnCheckPart) {
+                            count = cdnChunkCheckSize;
+                        } else {
+                            count = downloadedBytes - cdnCheckPart * cdnChunkCheckSize;
+                        }
+                        fileReadStream.readFully(cdnCheckBytes, 0, count);
+                        byte[] sha256 = Utilities.computeSHA256(cdnCheckBytes, 0, count);
+                        if (!Arrays.equals(sha256, hash.hash)) {
+                            if (location != null) {
+                                FileLog.e("invalid cdn hash " + location + " id = " + location.id + " local_id = " + location.local_id + " access_hash = " + location.access_hash + " volume_id = " + location.volume_id + " secret = " + location.secret);
+                            } else if (webLocation != null) {
+                                FileLog.e("invalid cdn hash  " + webLocation + " id = " + webLocation.url + " access_hash = " + webLocation.access_hash);
+                            }
+                            onFail(false, 0);
+                            cacheFileTemp.delete();
+                            return false;
+                        }
+                        lastCheckedCdnPart = cdnCheckPart;
+                    }
                 }
                 if (fiv != null) {
                     fiv.seek(0);
@@ -517,16 +712,17 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                     RequestInfo delayedRequestInfo = delayedRequestInfos.get(a);
                     if (downloadedBytes == delayedRequestInfo.offset) {
                         delayedRequestInfos.remove(a);
-                        processRequestResult(delayedRequestInfo, null);
-                        if (delayedRequestInfo.response != null) {
-                            delayedRequestInfo.response.disableFree = false;
-                            delayedRequestInfo.response.freeResources();
-                        } else if (delayedRequestInfo.responseWeb != null) {
-                            delayedRequestInfo.responseWeb.disableFree = false;
-                            delayedRequestInfo.responseWeb.freeResources();
-                        } else if (delayedRequestInfo.responseCdn != null) {
-                            delayedRequestInfo.responseCdn.disableFree = false;
-                            delayedRequestInfo.responseCdn.freeResources();
+                        if (!processRequestResult(delayedRequestInfo, null)) {
+                            if (delayedRequestInfo.response != null) {
+                                delayedRequestInfo.response.disableFree = false;
+                                delayedRequestInfo.response.freeResources();
+                            } else if (delayedRequestInfo.responseWeb != null) {
+                                delayedRequestInfo.responseWeb.disableFree = false;
+                                delayedRequestInfo.responseWeb.freeResources();
+                            } else if (delayedRequestInfo.responseCdn != null) {
+                                delayedRequestInfo.responseCdn.disableFree = false;
+                                delayedRequestInfo.responseCdn.freeResources();
+                            }
                         }
                         break;
                     }
@@ -581,6 +777,7 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                 onFail(false, 0);
             }
         }
+        return false;
     }
 
     private void onFail(boolean thread, final int reason) {
@@ -692,6 +889,15 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
                     if (response instanceof TLRPC.TL_upload_fileCdnRedirect) {
                         TLRPC.TL_upload_fileCdnRedirect res = (TLRPC.TL_upload_fileCdnRedirect) response;
+                        if (!res.cdn_file_hashes.isEmpty()) {
+                            if (cdnHashes == null) {
+                                cdnHashes = new HashMap<>();
+                            }
+                            for (int a = 0; a < res.cdn_file_hashes.size(); a++) {
+                                TLRPC.TL_cdnFileHash hash = res.cdn_file_hashes.get(a);
+                                cdnHashes.put(hash.offset, hash);
+                            }
+                        }
                         if (res.encryption_iv == null || res.encryption_key == null || res.encryption_iv.length != 16 || res.encryption_key.length != 32) {
                             error = new TLRPC.TL_error();
                             error.text = "bad redirect response";
@@ -719,6 +925,16 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 public void run(TLObject response, TLRPC.TL_error error) {
                                     reuploadingCdn = false;
                                     if (error == null) {
+                                        TLRPC.Vector vector = (TLRPC.Vector) response;
+                                        if (!vector.objects.isEmpty()) {
+                                            if (cdnHashes == null) {
+                                                cdnHashes = new HashMap<>();
+                                            }
+                                            for (int a = 0; a < vector.objects.size(); a++) {
+                                                TLRPC.TL_cdnFileHash hash = (TLRPC.TL_cdnFileHash) vector.objects.get(a);
+                                                cdnHashes.put(hash.offset, hash);
+                                            }
+                                        }
                                         startDownloadRequest();
                                     } else {
                                         if (error.text.equals("FILE_TOKEN_INVALID") || error.text.equals("REQUEST_TOKEN_INVALID")) {
@@ -753,7 +969,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         }
                         processRequestResult(requestInfo, error);
                     }
-
                 }
             }, null, null, flags, isCdn ? cdnDatacenterId : datacenter_id, connectionType, isLast);
             requestsCount++;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index f46879910..11bdcc125 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -340,23 +340,32 @@ public void run() {
         return result[0];
     }
 
-    public void loadFile(TLRPC.PhotoSize photo, String ext, boolean cacheOnly) {
-        loadFile(null, null, photo.location, ext, photo.size, false, cacheOnly || (photo != null && photo.size == 0 || photo.location.key != null));
+    public void loadFile(TLRPC.PhotoSize photo, String ext, int cacheType) {
+        if (cacheType == 0 && (photo != null && photo.size == 0 || photo.location.key != null)) {
+            cacheType = 1;
+        }
+        loadFile(null, null, photo.location, ext, photo.size, false, cacheType);
     }
 
-    public void loadFile(TLRPC.Document document, boolean force, boolean cacheOnly) {
-        loadFile(document, null, null, null, 0, force, cacheOnly || document != null && document.key != null);
+    public void loadFile(TLRPC.Document document, boolean force, int cacheType) {
+        if (cacheType == 0 && (document != null && document.key != null)) {
+            cacheType = 1;
+        }
+        loadFile(document, null, null, null, 0, force, cacheType);
     }
 
-    public void loadFile(TLRPC.TL_webDocument document, boolean force, boolean cacheOnly) {
-        loadFile(null, document, null, null, 0, force, cacheOnly);
+    public void loadFile(TLRPC.TL_webDocument document, boolean force, int cacheType) {
+        loadFile(null, document, null, null, 0, force, cacheType);
     }
 
-    public void loadFile(TLRPC.FileLocation location, String ext, int size, boolean cacheOnly) {
-        loadFile(null, null, location, ext, size, true, cacheOnly || size == 0 || (location != null && location.key != null));
+    public void loadFile(TLRPC.FileLocation location, String ext, int size, int cacheType) {
+        if (cacheType == 0 && (size == 0 || location != null && location.key != null)) {
+            cacheType = 1;
+        }
+        loadFile(null, null, location, ext, size, true, cacheType);
     }
 
-    private void loadFile(final TLRPC.Document document, final TLRPC.TL_webDocument webDocument, final TLRPC.FileLocation location, final String locationExt, final int locationSize, final boolean force, final boolean cacheOnly) {
+    private void loadFile(final TLRPC.Document document, final TLRPC.TL_webDocument webDocument, final TLRPC.FileLocation location, final String locationExt, final int locationSize, final boolean force, final int cacheType) {
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -424,8 +433,10 @@ public void run() {
                         type = MEDIA_DIR_DOCUMENT;
                     }
                 }
-                if (!cacheOnly) {
+                if (cacheType == 0) {
                     storeDir = getDirectory(type);
+                } else if (cacheType == 2) {
+                    operation.setEncryptFile(true);
                 }
                 operation.setPaths(storeDir, tempDir);
 
@@ -668,13 +679,13 @@ public static File getPathToMessage(TLRPC.Message message) {
             }
         } else {
             if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                return getPathToAttach(message.media.document);
+                return getPathToAttach(message.media.document, message.media.ttl_seconds != 0);
             } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                 ArrayList<TLRPC.PhotoSize> sizes = message.media.photo.sizes;
                 if (sizes.size() > 0) {
                     TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
                     if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
+                        return getPathToAttach(sizeFull, message.media.ttl_seconds != 0);
                     }
                 }
             } else if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
@@ -819,6 +830,10 @@ public static String getExtensionByMime(String mime) {
         return "";
     }
 
+    public static File getInternalCacheDir() {
+        return ApplicationLoader.applicationContext.getCacheDir();
+    }
+
     public static String getDocumentExtension(TLRPC.Document document) {
         String fileName = getDocumentFileName(document);
         int idx = fileName.lastIndexOf('.');
@@ -911,7 +926,24 @@ public void deleteFiles(final ArrayList<File> files, final int type) {
             public void run() {
                 for (int a = 0; a < files.size(); a++) {
                     File file = files.get(a);
-                    if (file.exists()) {
+                    File encrypted = new File(file.getAbsolutePath() + ".enc");
+                    if (encrypted.exists()) {
+                        try {
+                            if (!encrypted.delete()) {
+                                encrypted.deleteOnExit();
+                            }
+                        } catch (Exception e) {
+                            FileLog.e(e);
+                        }
+                        try {
+                            File key = new File(FileLoader.getInternalCacheDir(), file.getName() + ".enc.key");
+                            if (!key.delete()) {
+                                key.deleteOnExit();
+                            }
+                        } catch (Exception e) {
+                            FileLog.e(e);
+                        }
+                    } else if (file.exists()) {
                         try {
                             if (!file.delete()) {
                                 file.deleteOnExit();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
index 297d1b8be..74353d45b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
@@ -25,6 +25,7 @@
 import android.os.Environment;
 import android.provider.MediaStore;
 
+import org.telegram.messenger.secretmedia.EncryptedFileInputStream;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
@@ -631,6 +632,7 @@ public void run() {
                 boolean mediaIsVideo = false;
                 Bitmap image = null;
                 File cacheFileFinal = cacheImage.finalFilePath;
+                boolean inEncryptedFile = cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(".enc");
                 boolean canDeleteFile = true;
                 boolean useNativeWebpLoaded = false;
 
@@ -711,9 +713,18 @@ public void run() {
                                     bytesThumb = data = new byte[len];
                                 }
                                 f.readFully(data, 0, len);
+                                f.close();
+                                if (inEncryptedFile) {
+                                    EncryptedFileInputStream.decryptBytesWithKeyFile(data, 0, len, cacheImage.encryptionKeyPath);
+                                }
                                 image = BitmapFactory.decodeByteArray(data, 0, len, opts);
                             } else {
-                                FileInputStream is = new FileInputStream(cacheFileFinal);
+                                FileInputStream is;
+                                if (inEncryptedFile) {
+                                    is = new EncryptedFileInputStream(cacheFileFinal, cacheImage.encryptionKeyPath);
+                                } else {
+                                    is = new FileInputStream(cacheFileFinal);
+                                }
                                 image = BitmapFactory.decodeStream(is, null, opts);
                                 is.close();
                             }
@@ -808,7 +819,12 @@ public void run() {
                                         MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(), mediaId, MediaStore.Images.Thumbnails.MINI_KIND, opts);
                                     }
                                 } else {
-                                    FileInputStream is = new FileInputStream(cacheFileFinal);
+                                    FileInputStream is;
+                                    if (inEncryptedFile) {
+                                        is = new EncryptedFileInputStream(cacheFileFinal, cacheImage.encryptionKeyPath);
+                                    } else {
+                                        is = new FileInputStream(cacheFileFinal);
+                                    }
                                     image = BitmapFactory.decodeStream(is, null, opts);
                                     is.close();
                                 }
@@ -834,7 +850,11 @@ public void run() {
                                 scaleFactor = 1;
                             }
                             opts.inJustDecodeBounds = false;
-                            opts.inSampleSize = (int) scaleFactor;
+                            int sample = 1;
+                            do {
+                                sample *= 2;
+                            } while (sample * 2 < scaleFactor);
+                            opts.inSampleSize = sample;
                         }
                         synchronized (sync) {
                             if (isCancelled) {
@@ -880,9 +900,18 @@ public void run() {
                                         bytes = data = new byte[len];
                                     }
                                     f.readFully(data, 0, len);
+                                    f.close();
+                                    if (inEncryptedFile) {
+                                        EncryptedFileInputStream.decryptBytesWithKeyFile(data, 0, len, cacheImage.encryptionKeyPath);
+                                    }
                                     image = BitmapFactory.decodeByteArray(data, 0, len, opts);
                                 } else {
-                                    FileInputStream is = new FileInputStream(cacheFileFinal);
+                                    FileInputStream is;
+                                    if (inEncryptedFile) {
+                                        is = new EncryptedFileInputStream(cacheFileFinal, cacheImage.encryptionKeyPath);
+                                    } else {
+                                        is = new FileInputStream(cacheFileFinal);
+                                    }
                                     image = BitmapFactory.decodeStream(is, null, opts);
                                     is.close();
                                 }
@@ -916,8 +945,8 @@ public void run() {
                                 Utilities.pinBitmap(image);
                             }
                         }
-                    } catch (Throwable e) {
-                        //don't promt
+                    } catch (Throwable ignore) {
+
                     }
                 }
                 Thread.interrupted();
@@ -979,6 +1008,8 @@ public void cancel() {
         protected File tempFilePath;
         protected boolean thumb;
 
+        protected File encryptionKeyPath;
+
         protected String httpUrl;
         protected HttpImageTask httpTask;
         protected CacheOutTask cacheTask;
@@ -1611,7 +1642,7 @@ private void generateThumb(int mediaType, File originalPath, TLRPC.FileLocation
         }
     }
 
-    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final TLObject imageLocation, final String httpLocation, final String filter, final int size, final boolean cacheOnly, final int thumb) {
+    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final TLObject imageLocation, final String httpLocation, final String filter, final int size, final int cacheType, final int thumb) {
         if (imageReceiver == null || url == null || key == null) {
             return;
         }
@@ -1658,6 +1689,7 @@ public void run() {
                     boolean onlyCache = false;
                     boolean isQuality = false;
                     File cacheFile = null;
+                    boolean cacheFileExists = false;
 
                     if (httpLocation != null) {
                         if (!httpLocation.startsWith("http")) {
@@ -1681,6 +1713,8 @@ public void run() {
                             cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), "q_" + url);
                             if (!cacheFile.exists()) {
                                 cacheFile = null;
+                            } else {
+                                cacheFileExists = true;
                             }
                         }
 
@@ -1723,8 +1757,13 @@ public void run() {
                         }
 
                         if (cacheFile == null) {
-                            if (cacheOnly || size == 0 || httpLocation != null || isEncrypted) {
+                            if (cacheType != 0 || size == 0 || httpLocation != null || isEncrypted) {
                                 cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), url);
+                                if (cacheFile.exists()) {
+                                    cacheFileExists = true;
+                                } else if (cacheType == 2) {
+                                    cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), url + ".enc");
+                                }
                             } else if (imageLocation instanceof TLRPC.Document) {
                                 if (MessageObject.isVideoDocument((TLRPC.Document) imageLocation)) {
                                     cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_VIDEO), url);
@@ -1743,8 +1782,11 @@ public void run() {
                         img.filter = filter;
                         img.httpUrl = httpLocation;
                         img.ext = ext;
+                        if (cacheType == 2) {
+                            img.encryptionKeyPath = new File(FileLoader.getInternalCacheDir(), url + ".enc.key");
+                        }
                         img.addImageReceiver(imageReceiver, key, filter);
-                        if (onlyCache || cacheFile.exists()) {
+                        if (onlyCache || cacheFileExists || cacheFile.exists()) {
                             img.finalFilePath = cacheFile;
                             img.cacheTask = new CacheOutTask(img);
                             imageLoadingByKeys.put(key, img);
@@ -1760,11 +1802,15 @@ public void run() {
                             if (httpLocation == null) {
                                 if (imageLocation instanceof TLRPC.FileLocation) {
                                     TLRPC.FileLocation location = (TLRPC.FileLocation) imageLocation;
-                                    FileLoader.getInstance().loadFile(location, ext, size, size == 0 || location.key != null || cacheOnly);
+                                    int localCacheType = cacheType;
+                                    if (localCacheType == 0 && (size == 0 || location.key != null)) {
+                                        localCacheType = 1;
+                                    }
+                                    FileLoader.getInstance().loadFile(location, ext, size, localCacheType);
                                 } else if (imageLocation instanceof TLRPC.Document) {
-                                    FileLoader.getInstance().loadFile((TLRPC.Document) imageLocation, true, cacheOnly);
+                                    FileLoader.getInstance().loadFile((TLRPC.Document) imageLocation, true, cacheType);
                                 } else if (imageLocation instanceof TLRPC.TL_webDocument) {
-                                    FileLoader.getInstance().loadFile((TLRPC.TL_webDocument) imageLocation, true, cacheOnly);
+                                    FileLoader.getInstance().loadFile((TLRPC.TL_webDocument) imageLocation, true, cacheType);
                                 }
                             } else {
                                 String file = Utilities.MD5(httpLocation);
@@ -1787,13 +1833,15 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
             return;
         }
 
+        boolean imageSet = false;
         String key = imageReceiver.getKey();
         if (key != null) {
             BitmapDrawable bitmapDrawable = memCache.get(key);
             if (bitmapDrawable != null) {
                 cancelLoadingForImageReceiver(imageReceiver, 0);
+                imageReceiver.setImageBitmapByKey(bitmapDrawable, key, false, true);
+                imageSet = true;
                 if (!imageReceiver.isForcePreview()) {
-                    imageReceiver.setImageBitmapByKey(bitmapDrawable, key, false, true);
                     return;
                 }
             }
@@ -1805,6 +1853,9 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
             if (bitmapDrawable != null) {
                 imageReceiver.setImageBitmapByKey(bitmapDrawable, thumbKey, true, true);
                 cancelLoadingForImageReceiver(imageReceiver, 1);
+                if (imageSet && imageReceiver.isForcePreview()) {
+                    return;
+                }
                 thumbSet = true;
             }
         }
@@ -1892,11 +1943,15 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
         }
 
         if (httpLocation != null) {
-            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, null, thumbFilter, 0, true, thumbSet ? 2 : 1);
-            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, null, httpLocation, filter, 0, true, 0);
+            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, null, thumbFilter, 0, 1, thumbSet ? 2 : 1);
+            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, null, httpLocation, filter, 0, 1, 0);
         } else {
-            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, null, thumbFilter, 0, true, thumbSet ? 2 : 1);
-            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, imageLocation, null, filter, imageReceiver.getSize(), saveImageToCache || imageReceiver.getCacheOnly(), 0);
+            int cacheType = imageReceiver.getCacheType();
+            if (cacheType == 0 && saveImageToCache) {
+                cacheType = 1;
+            }
+            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, null, thumbFilter, 0, cacheType == 0 ? 1 : cacheType, thumbSet ? 2 : 1);
+            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, imageLocation, null, filter, imageReceiver.getSize(), cacheType, 0);
         }
     }
 
@@ -1943,6 +1998,7 @@ public void run() {
                         cacheImage.httpUrl = img.httpUrl;
                         cacheImage.thumb = img.thumb;
                         cacheImage.ext = img.ext;
+                        cacheImage.encryptionKeyPath = img.encryptionKeyPath;
                         cacheImage.cacheTask = new CacheOutTask(cacheImage);
                         cacheImage.filter = filter;
                         cacheImage.animatedFile = img.animatedFile;
@@ -2135,8 +2191,8 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
                         matrix.postRotate(270);
                         break;
                 }
-            } catch (Throwable e) {
-                FileLog.e(e);
+            } catch (Throwable ignore) {
+
             }
         }
 
@@ -2359,8 +2415,31 @@ public static void saveMessageThumbs(TLRPC.Message message) {
                 UserConfig.lastLocalId--;
             }
             File file = FileLoader.getPathToAttach(photoSize, true);
+            boolean isEncrypted = false;
+            if (MessageObject.shouldEncryptPhotoOrVideo(message)) {
+                file = new File(file.getAbsolutePath() + ".enc");
+                isEncrypted = true;
+            }
             if (!file.exists()) {
                 try {
+                    if (isEncrypted) {
+                        File keyPath = new File(FileLoader.getInternalCacheDir(), file.getName() + ".key");
+                        RandomAccessFile keyFile = new RandomAccessFile(keyPath, "rws");
+                        long len = keyFile.length();
+                        byte[] encryptKey = new byte[32];
+                        byte[] encryptIv = new byte[16];
+                        if (len > 0 && len % 48 == 0) {
+                            keyFile.read(encryptKey, 0, 32);
+                            keyFile.read(encryptIv, 0, 16);
+                        } else {
+                            Utilities.random.nextBytes(encryptKey);
+                            Utilities.random.nextBytes(encryptIv);
+                            keyFile.write(encryptKey);
+                            keyFile.write(encryptIv);
+                        }
+                        keyFile.close();
+                        Utilities.aesCtrDecryptionByteArray(photoSize.bytes, encryptKey, encryptIv, 0, photoSize.bytes.length, 0);
+                    }
                     RandomAccessFile writeFile = new RandomAccessFile(file, "rws");
                     writeFile.write(photoSize.bytes);
                     writeFile.close();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
index c7a35c7ba..e2ce9c5f0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
@@ -41,7 +41,7 @@
         public TLRPC.FileLocation thumbLocation;
         public String thumbFilter;
         public int size;
-        public boolean cacheOnly;
+        public int cacheType;
         public String ext;
     }
 
@@ -63,7 +63,7 @@
     private String currentExt;
     private TLRPC.FileLocation currentThumbLocation;
     private int currentSize;
-    private boolean currentCacheOnly;
+    private int currentCacheType;
     private Drawable currentImage;
     private Drawable currentThumb;
     private Drawable staticThumb;
@@ -79,6 +79,7 @@
     private boolean isVisible = true;
     private boolean isAspectFit;
     private boolean forcePreview;
+    private boolean forceCrossfade;
     private int roundRadius;
     private BitmapShader bitmapShader;
     private BitmapShader bitmapShaderThumb;
@@ -94,6 +95,7 @@
     private float currentAlpha;
     private long lastUpdateAlphaTime;
     private byte crossfadeAlpha = 1;
+    private boolean manualAlphaAnimator;
     private boolean crossfadeWithThumb;
     private ColorFilter colorFilter;
 
@@ -113,27 +115,27 @@ public void cancelLoadImage() {
         canceledLoading = true;
     }
 
-    public void setImage(TLObject path, String filter, Drawable thumb, String ext, boolean cacheOnly) {
-        setImage(path, null, filter, thumb, null, null, 0, ext, cacheOnly);
+    public void setImage(TLObject path, String filter, Drawable thumb, String ext, int cacheType) {
+        setImage(path, null, filter, thumb, null, null, 0, ext, cacheType);
     }
 
-    public void setImage(TLObject path, String filter, Drawable thumb, int size, String ext, boolean cacheOnly) {
-        setImage(path, null, filter, thumb, null, null, size, ext, cacheOnly);
+    public void setImage(TLObject path, String filter, Drawable thumb, int size, String ext, int cacheType) {
+        setImage(path, null, filter, thumb, null, null, size, ext, cacheType);
     }
 
     public void setImage(String httpUrl, String filter, Drawable thumb, String ext, int size) {
-        setImage(null, httpUrl, filter, thumb, null, null, size, ext, true);
+        setImage(null, httpUrl, filter, thumb, null, null, size, ext, 1);
     }
 
-    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, String ext, boolean cacheOnly) {
-        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, 0, ext, cacheOnly);
+    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, String ext, int cacheType) {
+        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, 0, ext, cacheType);
     }
 
-    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, boolean cacheOnly) {
-        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, size, ext, cacheOnly);
+    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, int cacheType) {
+        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, size, ext, cacheType);
     }
 
-    public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawable thumb, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, boolean cacheOnly) {
+    public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawable thumb, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, int cacheType) {
         if (setImageBackup != null) {
             setImageBackup.fileLocation = null;
             setImageBackup.httpUrl = null;
@@ -156,7 +158,7 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
             currentImageLocation = null;
             currentHttpUrl = null;
             currentFilter = null;
-            currentCacheOnly = false;
+            currentCacheType = 0;
             staticThumb = thumb;
             currentAlpha = 1;
             currentThumbLocation = null;
@@ -239,7 +241,7 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
         currentFilter = filter;
         currentThumbFilter = thumbFilter;
         currentSize = size;
-        currentCacheOnly = cacheOnly;
+        currentCacheType = cacheType;
         currentThumbLocation = thumbLocation;
         staticThumb = thumb;
         bitmapShader = null;
@@ -327,7 +329,7 @@ public void setImageBitmap(Drawable bitmap) {
         currentHttpUrl = null;
         currentFilter = null;
         currentSize = 0;
-        currentCacheOnly = false;
+        currentCacheType = 0;
         bitmapShader = null;
         bitmapShaderThumb = null;
         if (setImageBackup != null) {
@@ -371,7 +373,7 @@ public void onDetachedFromWindow() {
             setImageBackup.thumbFilter = currentThumbFilter;
             setImageBackup.size = currentSize;
             setImageBackup.ext = currentExt;
-            setImageBackup.cacheOnly = currentCacheOnly;
+            setImageBackup.cacheType = currentCacheType;
         }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReplacedPhotoInMemCache);
         clearImage();
@@ -383,7 +385,7 @@ public boolean onAttachedToWindow() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageThumbGenerated);
         }
         if (setImageBackup != null && (setImageBackup.fileLocation != null || setImageBackup.httpUrl != null || setImageBackup.thumbLocation != null || setImageBackup.thumb != null)) {
-            setImage(setImageBackup.fileLocation, setImageBackup.httpUrl, setImageBackup.filter, setImageBackup.thumb, setImageBackup.thumbLocation, setImageBackup.thumbFilter, setImageBackup.size, setImageBackup.ext, setImageBackup.cacheOnly);
+            setImage(setImageBackup.fileLocation, setImageBackup.httpUrl, setImageBackup.filter, setImageBackup.thumb, setImageBackup.thumbLocation, setImageBackup.thumbFilter, setImageBackup.size, setImageBackup.ext, setImageBackup.cacheType);
             return true;
         }
         return false;
@@ -489,7 +491,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapSha
                             ImageLoader.getInstance().removeImage(currentThumbKey);
                             currentThumbKey = null;
                         }
-                        setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                        setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheType);
                         FileLog.e(e);
                     }
                     canvas.restore();
@@ -537,7 +539,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapSha
                                     ImageLoader.getInstance().removeImage(currentThumbKey);
                                     currentThumbKey = null;
                                 }
-                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheType);
                                 FileLog.e(e);
                             }
                         }
@@ -577,7 +579,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapSha
                                     ImageLoader.getInstance().removeImage(currentThumbKey);
                                     currentThumbKey = null;
                                 }
-                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheType);
                                 FileLog.e(e);
                             }
                         }
@@ -600,6 +602,9 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapSha
     }
 
     private void checkAlphaAnimation(boolean skip) {
+        if (manualAlphaAnimator) {
+            return;
+        }
         if (currentAlpha != 1) {
             if (!skip) {
                 long currentTime = System.currentTimeMillis();
@@ -680,10 +685,18 @@ public boolean draw(Canvas canvas) {
         return false;
     }
 
+    public void setManualAlphaAnimator(boolean value) {
+        manualAlphaAnimator = value;
+    }
+
     public float getCurrentAlpha() {
         return currentAlpha;
     }
 
+    public void setCurrentAlpha(float value) {
+        currentAlpha = value;
+    }
+
     public Bitmap getBitmap() {
         if (currentImage instanceof AnimatedFileDrawable) {
             return ((AnimatedFileDrawable) currentImage).getAnimatedBitmap();
@@ -699,6 +712,15 @@ public Bitmap getBitmap() {
         return null;
     }
 
+    public Bitmap getThumbBitmap() {
+        if (currentThumb instanceof BitmapDrawable) {
+            return ((BitmapDrawable) currentThumb).getBitmap();
+        } else if (staticThumb instanceof BitmapDrawable) {
+            return ((BitmapDrawable) staticThumb).getBitmap();
+        }
+        return null;
+    }
+
     public int getBitmapWidth() {
         if (currentImage instanceof AnimatedFileDrawable) {
             return orientation % 360 == 0 || orientation % 360 == 180 ? currentImage.getIntrinsicWidth() : currentImage.getIntrinsicHeight();
@@ -864,14 +886,18 @@ public String getHttpImageLocation() {
         return currentHttpUrl;
     }
 
-    public boolean getCacheOnly() {
-        return currentCacheOnly;
+    public int getCacheType() {
+        return currentCacheType;
     }
 
     public void setForcePreview(boolean value) {
         forcePreview = value;
     }
 
+    public void setForceCrossfade(boolean value) {
+        forceCrossfade = value;
+    }
+
     public boolean isForcePreview() {
         return forcePreview;
     }
@@ -984,8 +1010,8 @@ protected boolean setImageBitmapByKey(BitmapDrawable bitmap, String key, boolean
                 bitmapShader = null;
             }
 
-            if (!memCache && !forcePreview) {
-                if (currentThumb == null && staticThumb == null || currentAlpha == 1.0f) {
+            if (!memCache && !forcePreview || forceCrossfade) {
+                if (currentThumb == null && staticThumb == null || currentAlpha == 1.0f || forceCrossfade) {
                     currentAlpha = 0.0f;
                     lastUpdateAlphaTime = System.currentTimeMillis();
                     crossfadeWithThumb = currentThumb != null || staticThumb != null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Intro.java b/TMessagesProj/src/main/java/org/telegram/messenger/Intro.java
index 4bfd9829e..f286351d3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Intro.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Intro.java
@@ -9,18 +9,16 @@
 package org.telegram.messenger;
 
 public class Intro {
-    public static native void on_draw_frame();
-    public static native void set_scroll_offset(float a_offset);
-    public static native void set_page(int page);
-    public static native void set_date(float a);
-    public static native void set_date0(float a);
-    public static native void set_pages_textures(int a1, int a2, int a3, int a4, int a5, int a6);
-    public static native void set_ic_textures(int a_ic_bubble_dot, int a_ic_bubble, int a_ic_cam_lens, int a_ic_cam, int a_ic_pencil, int a_ic_pin, int a_ic_smile_eye, int a_ic_smile, int a_ic_videocam);
-    public static native void set_telegram_textures(int a_telegram_sphere, int a_telegram_plane);
-    public static native void set_fast_textures(int a_fast_body, int a_fast_spiral, int a_fast_arrow, int a_fast_arrow_shadow);
-    public static native void set_free_textures(int a_knot_up, int a_knot_down);
-    public static native void set_powerful_textures(int a_powerful_mask, int a_powerful_star, int a_powerful_infinity, int a_powerful_infinity_white);
-    public static native void set_private_textures(int a_private_door, int a_private_screw);
-    public static native void on_surface_created();
-    public static native void on_surface_changed(int a_width_px, int a_height_px, float a_scale_factor, int a1, int a2, int a3, int a4, int a5);
+    public static native void onDrawFrame();
+    public static native void setScrollOffset(float a_offset);
+    public static native void setPage(int page);
+    public static native void setDate(float a);
+    public static native void setIcTextures(int a_ic_bubble_dot, int a_ic_bubble, int a_ic_cam_lens, int a_ic_cam, int a_ic_pencil, int a_ic_pin, int a_ic_smile_eye, int a_ic_smile, int a_ic_videocam);
+    public static native void setTelegramTextures(int a_telegram_sphere, int a_telegram_plane);
+    public static native void setFastTextures(int a_fast_body, int a_fast_spiral, int a_fast_arrow, int a_fast_arrow_shadow);
+    public static native void setFreeTextures(int a_knot_up, int a_knot_down);
+    public static native void setPowerfulTextures(int a_powerful_mask, int a_powerful_star, int a_powerful_infinity, int a_powerful_infinity_white);
+    public static native void setPrivateTextures(int a_private_door, int a_private_screw);
+    public static native void onSurfaceCreated();
+    public static native void onSurfaceChanged(int a_width_px, int a_height_px, float a_scale_factor, int a1);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
index a9f460a87..5603ea5eb 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
@@ -1283,6 +1283,9 @@ public void run() {
                         localeInfo.version = difference.version;
                     }
                     saveOtherLanguages();
+                    if (currentLocaleInfo != null && currentLocaleInfo.isLocal()) {
+                        return;
+                    }
                     try {
                         Locale newLocale;
                         String[] args = localeInfo.shortName.split("_");
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 9ba9a05c6..9b0bd0636 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -186,6 +186,10 @@ public void addPhoto(PhotoEntry photoEntry) {
         public VideoEditedInfo editedInfo;
         public boolean isVideo;
         public CharSequence caption;
+        public boolean isFiltered;
+        public boolean isPainted;
+        public boolean isCropped;
+        public int ttl;
         public ArrayList<TLRPC.InputDocument> stickers = new ArrayList<>();
 
         public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int orientation, boolean isVideo) {
@@ -200,6 +204,17 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
             }
             this.isVideo = isVideo;
         }
+
+        public void reset() {
+            isFiltered = false;
+            isPainted = false;
+            isCropped = false;
+            ttl = 0;
+            imagePath = null;
+            thumbPath = null;
+            caption = null;
+            stickers.clear();
+        }
     }
 
     public static class SearchImage {
@@ -216,6 +231,10 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
         public String imagePath;
         public CharSequence caption;
         public TLRPC.Document document;
+        public boolean isFiltered;
+        public boolean isPainted;
+        public boolean isCropped;
+        public int ttl;
         public ArrayList<TLRPC.InputDocument> stickers = new ArrayList<>();
     }
 
@@ -549,15 +568,17 @@ public void run() {
         }
     }
 
-    private ExternalObserver externalObserver = null;
-    private InternalObserver internalObserver = null;
-    private long lastSecretChatEnterTime = 0;
-    private long lastSecretChatLeaveTime = 0;
-    private long lastMediaCheckTime = 0;
-    private TLRPC.EncryptedChat lastSecretChat = null;
-    private ArrayList<Long> lastSecretChatVisibleMessages = null;
-    private int startObserverToken = 0;
-    private StopMediaObserverRunnable stopMediaObserverRunnable = null;
+    private ExternalObserver externalObserver;
+    private InternalObserver internalObserver;
+    private long lastChatEnterTime;
+    private long lastChatLeaveTime;
+    private long lastMediaCheckTime;
+    private TLRPC.EncryptedChat lastSecretChat;
+    private TLRPC.User lastUser;
+    private int lastMessageId;
+    private ArrayList<Long> lastChatVisibleMessages;
+    private int startObserverToken;
+    private StopMediaObserverRunnable stopMediaObserverRunnable;
 
     private final class StopMediaObserverRunnable implements Runnable {
         public int currentObserverToken = 0;
@@ -688,25 +709,15 @@ public void onReceive(Context context, Intent intent) {
             checkAutodownloadSettings();
         }
 
-        if (Build.VERSION.SDK_INT >= 16) {
-            mediaProjections = new String[]{
-                    MediaStore.Images.ImageColumns.DATA,
-                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.DATE_TAKEN,
-                    MediaStore.Images.ImageColumns.TITLE,
-                    MediaStore.Images.ImageColumns.WIDTH,
-                    MediaStore.Images.ImageColumns.HEIGHT
-            };
-        } else {
-            mediaProjections = new String[]{
-                    MediaStore.Images.ImageColumns.DATA,
-                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.DATE_TAKEN,
-                    MediaStore.Images.ImageColumns.TITLE
-            };
-        }
+        mediaProjections = new String[]{
+                MediaStore.Images.ImageColumns.DATA,
+                MediaStore.Images.ImageColumns.DISPLAY_NAME,
+                MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
+                MediaStore.Images.ImageColumns.DATE_TAKEN,
+                MediaStore.Images.ImageColumns.TITLE,
+                MediaStore.Images.ImageColumns.WIDTH,
+                MediaStore.Images.ImageColumns.HEIGHT
+        };
 
         try {
             ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, false, new GalleryObserverExternal());
@@ -1096,10 +1107,10 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
 
             boolean added = true;
             if (downloadObject.object instanceof TLRPC.PhotoSize) {
-                FileLoader.getInstance().loadFile((TLRPC.PhotoSize) downloadObject.object, null, false);
+                FileLoader.getInstance().loadFile((TLRPC.PhotoSize) downloadObject.object, null, downloadObject.secret ? 2 : 0);
             } else if (downloadObject.object instanceof TLRPC.Document) {
                 TLRPC.Document document = (TLRPC.Document) downloadObject.object;
-                FileLoader.getInstance().loadFile(document, false, false);
+                FileLoader.getInstance().loadFile(document, false, downloadObject.secret ? 2 : 0);
             } else {
                 added = false;
             }
@@ -1208,7 +1219,7 @@ public void stopMediaObserver() {
         ApplicationLoader.applicationHandler.postDelayed(stopMediaObserverRunnable, 5000);
     }
 
-    public void processMediaObserver(Uri uri) {
+    private void processMediaObserver(Uri uri) {
         try {
             Point size = AndroidUtilities.getRealScreenSize();
 
@@ -1222,12 +1233,8 @@ public void processMediaObserver(Uri uri) {
                     String album_name = cursor.getString(2);
                     long date = cursor.getLong(3);
                     String title = cursor.getString(4);
-                    int photoW = 0;
-                    int photoH = 0;
-                    if (Build.VERSION.SDK_INT >= 16) {
-                        photoW = cursor.getInt(5);
-                        photoH = cursor.getInt(6);
-                    }
+                    int photoW = cursor.getInt(5);
+                    int photoH = cursor.getInt(6);
                     if (data != null && data.toLowerCase().contains("screenshot") ||
                             display_name != null && display_name.toLowerCase().contains("screenshot") ||
                             album_name != null && album_name.toLowerCase().contains("screenshot") ||
@@ -1265,33 +1272,40 @@ public void run() {
     }
 
     private void checkScreenshots(ArrayList<Long> dates) {
-        if (dates == null || dates.isEmpty() || lastSecretChatEnterTime == 0 || lastSecretChat == null || !(lastSecretChat instanceof TLRPC.TL_encryptedChat)) {
+        if (dates == null || dates.isEmpty() || lastChatEnterTime == 0 || (lastUser == null && !(lastSecretChat instanceof TLRPC.TL_encryptedChat))) {
             return;
         }
         long dt = 2000;
         boolean send = false;
-        for (Long date : dates) {
+        for (int a = 0; a < dates.size(); a++) {
+            Long date = dates.get(a);
             if (lastMediaCheckTime != 0 && date <= lastMediaCheckTime) {
                 continue;
             }
 
-            if (date >= lastSecretChatEnterTime) {
-                if (lastSecretChatLeaveTime == 0 || date <= lastSecretChatLeaveTime + dt) {
+            if (date >= lastChatEnterTime) {
+                if (lastChatLeaveTime == 0 || date <= lastChatLeaveTime + dt) {
                     lastMediaCheckTime = Math.max(lastMediaCheckTime, date);
                     send = true;
                 }
             }
         }
         if (send) {
-            SecretChatHelper.getInstance().sendScreenshotMessage(lastSecretChat, lastSecretChatVisibleMessages, null);
+            if (lastSecretChat != null) {
+                SecretChatHelper.getInstance().sendScreenshotMessage(lastSecretChat, lastChatVisibleMessages, null);
+            } else {
+                SendMessagesHelper.getInstance().sendScreenshotMessage(lastUser, lastMessageId, null);
+            }
         }
     }
 
-    public void setLastEncryptedChatParams(long enterTime, long leaveTime, TLRPC.EncryptedChat encryptedChat, ArrayList<Long> visibleMessages) {
-        lastSecretChatEnterTime = enterTime;
-        lastSecretChatLeaveTime = leaveTime;
+    public void setLastVisibleMessageIds(long enterTime, long leaveTime, TLRPC.User user, TLRPC.EncryptedChat encryptedChat, ArrayList<Long> visibleMessages, int visibleMessage) {
+        lastChatEnterTime = enterTime;
+        lastChatLeaveTime = leaveTime;
         lastSecretChat = encryptedChat;
-        lastSecretChatVisibleMessages = visibleMessages;
+        lastUser = user;
+        lastMessageId = visibleMessage;
+        lastChatVisibleMessages = visibleMessages;
     }
 
     public int generateObserverTag() {
@@ -2308,7 +2322,7 @@ private void checkIsNextVoiceFileDownloaded() {
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(nextAudio.messageOwner);
         boolean exist = cacheFile != null && cacheFile.exists();
         if (cacheFile != null && cacheFile != file && !cacheFile.exists()) {
-            FileLoader.getInstance().loadFile(nextAudio.getDocument(), false, false);
+            FileLoader.getInstance().loadFile(nextAudio.getDocument(), false, 0);
         }
     }
 
@@ -2335,7 +2349,7 @@ private void checkIsNextMusicFileDownloaded() {
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(nextAudio.messageOwner);
         boolean exist = cacheFile != null && cacheFile.exists();
         if (cacheFile != null && cacheFile != file && !cacheFile.exists() && nextAudio.isMusic()) {
-            FileLoader.getInstance().loadFile(nextAudio.getDocument(), false, false);
+            FileLoader.getInstance().loadFile(nextAudio.getDocument(), false, 0);
         }
     }
 
@@ -2485,7 +2499,7 @@ public boolean playMessage(final MessageObject messageObject) {
         }
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
         if (cacheFile != null && cacheFile != file && !cacheFile.exists()) {
-            FileLoader.getInstance().loadFile(messageObject.getDocument(), false, false);
+            FileLoader.getInstance().loadFile(messageObject.getDocument(), false, 0);
             downloadingCurrentMessage = true;
             isPaused = false;
             lastProgress = 0;
@@ -3142,7 +3156,7 @@ public void run() {
                             audioToSend.attributes.add(attributeAudio);
                             if (duration > 700) {
                                 if (send == 1) {
-                                    SendMessagesHelper.getInstance().sendMessage(audioToSend, null, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject, null, null);
+                                    SendMessagesHelper.getInstance().sendMessage(audioToSend, null, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject, null, null, 0);
                                 }
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidSent, send == 2 ? audioToSend : null, send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
                             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index b27f6208a..b87cb7ed3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -317,6 +317,12 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             }
                         }
                     }
+                } else if (message.action instanceof TLRPC.TL_messageActionScreenshotTaken) {
+                    if (isOut()) {
+                        messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
+                    } else {
+                        messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
+                    }
                 } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
                     messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
                 } else if (message.action instanceof TLRPC.TL_messageActionChannelCreate) {
@@ -386,7 +392,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         } else if (!isMediaEmpty()) {
             if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                 messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
-            } else if (isVideo()) {
+            } else if (isVideo() || message.media instanceof TLRPC.TL_messageMediaDocument && message.media.document instanceof TLRPC.TL_documentEmpty && message.media.ttl_seconds != 0) {
                 messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
             } else if (isVoice()) {
                 messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
@@ -1138,6 +1144,9 @@ public void setType() {
                 if (TextUtils.isEmpty(messageText) && eventId == 0) {
                     messageText = "Empty message";
                 }
+            } else if (messageOwner.media.ttl_seconds != 0 && (messageOwner.media.photo instanceof TLRPC.TL_photoEmpty || messageOwner.media.document instanceof TLRPC.TL_documentEmpty)) {
+                contentType = 1;
+                type = 10;
             } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
                 type = 1;
             } else if (messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
@@ -1254,9 +1263,6 @@ public static boolean isGifDocument(TLRPC.Document document) {
     }
 
     public static boolean isRoundVideoDocument(TLRPC.Document document) {
-        if (Build.VERSION.SDK_INT < 16) {
-            return false;
-        }
         if (document != null && document.mime_type != null && document.mime_type.equals("video/mp4")) {
             int width = 0;
             int height = 0;
@@ -2023,13 +2029,28 @@ public int getId() {
         return messageOwner.id;
     }
 
+    public static boolean shouldEncryptPhotoOrVideo(TLRPC.Message message) {
+        return message instanceof TLRPC.TL_message && (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaDocument) && message.media.ttl_seconds != 0 ||
+                message instanceof TLRPC.TL_message_secret && (message.media instanceof TLRPC.TL_messageMediaPhoto || isVideoMessage(message)) && message.ttl > 0 && message.ttl <= 60;
+    }
+
+    public boolean shouldEncryptPhotoOrVideo() {
+        return shouldEncryptPhotoOrVideo(messageOwner);
+    }
+
+    public static boolean isSecretPhotoOrVideo(TLRPC.Message message) {
+        return message instanceof TLRPC.TL_message && (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaDocument) && message.media.ttl_seconds != 0 ||
+                message instanceof TLRPC.TL_message_secret && (message.media instanceof TLRPC.TL_messageMediaPhoto || isRoundVideoMessage(message) || isVideoMessage(message)) && message.ttl > 0 && message.ttl <= 60;
+    }
+
     public boolean isSecretPhoto() {
-        return messageOwner instanceof TLRPC.TL_message_secret && (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || isRoundVideo()) && messageOwner.ttl > 0 && messageOwner.ttl <= 60;
+        return messageOwner instanceof TLRPC.TL_message && (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageOwner.media instanceof TLRPC.TL_messageMediaDocument) && messageOwner.media.ttl_seconds != 0 ||
+                messageOwner instanceof TLRPC.TL_message_secret && (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || isRoundVideo() || isVideo()) && messageOwner.ttl > 0 && messageOwner.ttl <= 60;
     }
 
     public boolean isSecretMedia() {
-        return messageOwner instanceof TLRPC.TL_message_secret &&
-                ((messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || isRoundVideo()) && messageOwner.ttl > 0 && messageOwner.ttl <= 60 || isVoice() || isVideo());
+        return messageOwner instanceof TLRPC.TL_message && (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageOwner.media instanceof TLRPC.TL_messageMediaDocument) && messageOwner.media.ttl_seconds != 0 ||
+                messageOwner instanceof TLRPC.TL_message_secret && ((messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || isRoundVideo()) && messageOwner.ttl > 0 && messageOwner.ttl <= 60 || isVoice() || isVideo());
     }
 
     public static void setUnreadFlags(TLRPC.Message message, int flag) {
@@ -2092,14 +2113,19 @@ public boolean isSent() {
         return messageOwner.send_state == MESSAGE_SEND_STATE_SENT || messageOwner.id > 0;
     }
 
-    public String getSecretTimeString() {
-        if (!isSecretMedia()) {
-            return null;
-        }
+    public int getSecretTimeLeft() {
         int secondsLeft = messageOwner.ttl;
         if (messageOwner.destroyTime != 0) {
             secondsLeft = Math.max(0, messageOwner.destroyTime - ConnectionsManager.getInstance().getCurrentTime());
         }
+        return secondsLeft;
+    }
+
+    public String getSecretTimeString() {
+        if (!isSecretMedia()) {
+            return null;
+        }
+        int secondsLeft = getSecretTimeLeft();
         String str;
         if (secondsLeft < 60) {
             str = secondsLeft + "s";
@@ -2188,7 +2214,7 @@ public static boolean isVideoDocument(TLRPC.Document document) {
             for (int a = 0; a < document.attributes.size(); a++) {
                 TLRPC.DocumentAttribute attribute = document.attributes.get(a);
                 if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
-                    if (Build.VERSION.SDK_INT >= 16 && attribute.round_message) {
+                    if (attribute.round_message) {
                         return false;
                     }
                     isVideo = true;
@@ -2229,9 +2255,6 @@ public static boolean isMusicMessage(TLRPC.Message message) {
     }
 
     public static boolean isRoundVideoMessage(TLRPC.Message message) {
-        if (Build.VERSION.SDK_INT < 16) {
-            return false;
-        }
         if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
             return isRoundVideoDocument(message.media.webpage.document);
         }
@@ -2428,9 +2451,6 @@ public boolean isInvoice() {
     }
 
     public boolean isRoundVideo() {
-        if (Build.VERSION.SDK_INT < 16) {
-            return false;
-        }
         if (isRoundVideoCached == 0) {
             isRoundVideoCached = type == 5 || isRoundVideoMessage(messageOwner) ? 1 : 2;
         }
@@ -2501,6 +2521,8 @@ public int getDuration() {
             TLRPC.DocumentAttribute attribute = document.attributes.get(a);
             if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
                 return attribute.duration;
+            } else if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                return attribute.duration;
             }
         }
         return 0;
@@ -2667,7 +2689,13 @@ public void checkMediaExistance() {
         if (type == 1) {
             TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize());
             if (currentPhotoObject != null) {
-                mediaExists = FileLoader.getPathToMessage(messageOwner).exists();
+                File file = FileLoader.getPathToMessage(messageOwner);
+                if (isSecretPhoto()) {
+                    mediaExists = new File(file.getAbsolutePath() + ".enc").exists();
+                }
+                if (!mediaExists) {
+                    mediaExists = file.exists();
+                }
             }
         } else if (type == 8 || type == 3 || type == 9 || type == 2 || type == 14 || type == 5) {
             if (messageOwner.attachPath != null && messageOwner.attachPath.length() > 0) {
@@ -2675,7 +2703,13 @@ public void checkMediaExistance() {
                 attachPathExists = f.exists();
             }
             if (!attachPathExists) {
-                mediaExists = FileLoader.getPathToMessage(messageOwner).exists();
+                File file = FileLoader.getPathToMessage(messageOwner);
+                if (type == 3 && isSecretPhoto()) {
+                    mediaExists = new File(file.getAbsolutePath() + ".enc").exists();
+                }
+                if (!mediaExists) {
+                    mediaExists = file.exists();
+                }
             }
         } else {
             TLRPC.Document document = getDocument();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 1c18d3b5e..05558a64d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -121,6 +121,7 @@
     private boolean gettingNewDeleteTask;
     private int currentDeletingTaskTime;
     private ArrayList<Integer> currentDeletingTaskMids;
+    private int currentDeletingTaskChannelId;
     private Runnable currentDeleteTaskRunnable;
 
     public boolean loadingDialogs;
@@ -270,6 +271,7 @@ public MessagesController() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateMessageMedia);
         addSupportUser();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
         enableJoined = preferences.getBoolean("EnableContactJoined", true);
@@ -578,6 +580,16 @@ public void run() {
             if (obj != null) {
                 dialogMessagesByIds.put(newMsgId, obj);
             }
+        } else if (id == NotificationCenter.updateMessageMedia) {
+            TLRPC.Message message = (TLRPC.Message) args[0];
+            MessageObject existMessageObject = dialogMessagesByIds.get(message.id);
+            if (existMessageObject != null) {
+                existMessageObject.messageOwner.media = message.media;
+                if (message.media.ttl_seconds != 0 && (message.media.photo instanceof TLRPC.TL_photoEmpty || message.media.document instanceof TLRPC.TL_documentEmpty)) {
+                    existMessageObject.setType();
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
+                }
+            }
         }
     }
 
@@ -644,6 +656,7 @@ public void run() {
 
         currentDeletingTaskTime = 0;
         currentDeletingTaskMids = null;
+        currentDeletingTaskChannelId = 0;
         gettingNewDeleteTask = false;
         loadingDialogs = false;
         dialogsEndReached = false;
@@ -1546,12 +1559,12 @@ protected void processNewDifferenceParams(int seq, int pts, int date, int pts_co
         }
     }
 
-    public void didAddedNewTask(final int minDate, final SparseArray<ArrayList<Integer>> mids) {
+    public void didAddedNewTask(final int minDate, final SparseArray<ArrayList<Long>> mids) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 if (currentDeletingTaskMids == null && !gettingNewDeleteTask || currentDeletingTaskTime != 0 && minDate < currentDeletingTaskTime) {
-                    getNewDeleteTask(null);
+                    getNewDeleteTask(null, 0);
                 }
             }
         });
@@ -1563,12 +1576,12 @@ public void run() {
         });
     }
 
-    public void getNewDeleteTask(final ArrayList<Integer> oldTask) {
+    public void getNewDeleteTask(final ArrayList<Integer> oldTask, final int channelId) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 gettingNewDeleteTask = true;
-                MessagesStorage.getInstance().getNewTask(oldTask);
+                MessagesStorage.getInstance().getNewTask(oldTask, channelId);
             }
         });
     }
@@ -1582,15 +1595,19 @@ private boolean checkDeletingTask(boolean runnable) {
                 Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
             }
             currentDeleteTaskRunnable = null;
+            final ArrayList<Integer> mids = new ArrayList<>(currentDeletingTaskMids);
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
-                    deleteMessages(currentDeletingTaskMids, null, null, 0, false);
-
+                    if (!mids.isEmpty() && mids.get(0) > 0) {
+                        MessagesStorage.getInstance().emptyMessagesMedia(mids);
+                    } else {
+                        deleteMessages(mids, null, null, 0, false);
+                    }
                     Utilities.stageQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            getNewDeleteTask(currentDeletingTaskMids);
+                            getNewDeleteTask(mids, currentDeletingTaskChannelId);
                             currentDeletingTaskTime = 0;
                             currentDeletingTaskMids = null;
                         }
@@ -1602,7 +1619,7 @@ public void run() {
         return false;
     }
 
-    public void processLoadedDeleteTask(final int taskTime, final ArrayList<Integer> messages) {
+    public void processLoadedDeleteTask(final int taskTime, final ArrayList<Integer> messages, final int channelId) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -3279,7 +3296,7 @@ public void processLoadedDialogs(final TLRPC.messages_Dialogs dialogsRes, final
             @Override
             public void run() {
                 if (!firstGettingTask) {
-                    getNewDeleteTask(null);
+                    getNewDeleteTask(null, 0);
                     firstGettingTask = true;
                 }
 
@@ -3970,7 +3987,7 @@ public void addToViewsQueue(final TLRPC.Message message, final boolean reload) {
             messageId |= ((long) message.to_id.channel_id) << 32;
         }
         arrayList.add(messageId);
-        MessagesStorage.getInstance().markMessagesContentAsRead(arrayList);
+        MessagesStorage.getInstance().markMessagesContentAsRead(arrayList, 0);
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -4002,7 +4019,7 @@ public void markMessageContentAsRead(final MessageObject messageObject) {
             messageId |= ((long) messageObject.messageOwner.to_id.channel_id) << 32;
         }
         arrayList.add(messageId);
-        MessagesStorage.getInstance().markMessagesContentAsRead(arrayList);
+        MessagesStorage.getInstance().markMessagesContentAsRead(arrayList, 0);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
         if (messageObject.getId() < 0) {
             markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
@@ -4021,6 +4038,25 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
+    public void markMessageAsRead(final int mid, final int channelId, int ttl) {
+        if (mid == 0 || ttl <= 0) {
+            return;
+        }
+        int time = ConnectionsManager.getInstance().getCurrentTime();
+        MessagesStorage.getInstance().createTaskForMid(mid, channelId, time, time, ttl, false);
+        TLRPC.TL_messages_readMessageContents req = new TLRPC.TL_messages_readMessageContents();
+        req.id.add(mid);
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
+                    processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
+                }
+            }
+        });
+    }
+
     public void markMessageAsRead(final long dialog_id, final long random_id, int ttl) {
         if (random_id == 0 || dialog_id == 0 || ttl <= 0 && ttl != Integer.MIN_VALUE) {
             return;
@@ -7887,7 +7923,7 @@ public void run() {
             MessagesStorage.getInstance().markMessagesAsRead(markAsReadMessagesInbox, markAsReadMessagesOutbox, markAsReadEncrypted, true);
         }
         if (!markAsReadMessages.isEmpty()) {
-            MessagesStorage.getInstance().markMessagesContentAsRead(markAsReadMessages);
+            MessagesStorage.getInstance().markMessagesContentAsRead(markAsReadMessages, ConnectionsManager.getInstance().getCurrentTime());
         }
         if (deletedMessages.size() != 0) {
             for (int a = 0; a < deletedMessages.size(); a++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index 91625cafb..6ea959591 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -1612,7 +1612,96 @@ public void run() {
         });
     }
 
-    public void getNewTask(final ArrayList<Integer> oldTask) {
+    public void emptyMessagesMedia(final ArrayList<Integer> mids) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    ArrayList<File> filesToDelete = new ArrayList<>();
+                    final ArrayList<TLRPC.Message> messages = new ArrayList<>();
+                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN (%s)", TextUtils.join(",", mids)));
+                    while (cursor.next()) {
+                        NativeByteBuffer data = cursor.byteBufferValue(0);
+                        if (data != null) {
+                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                            data.reuse();
+                            if (message.media != null) {
+                                if (message.media.document != null) {
+                                    File file = FileLoader.getPathToAttach(message.media.document, true);
+                                    if (file != null && file.toString().length() > 0) {
+                                        filesToDelete.add(file);
+                                    }
+                                    file = FileLoader.getPathToAttach(message.media.document.thumb, true);
+                                    if (file != null && file.toString().length() > 0) {
+                                        filesToDelete.add(file);
+                                    }
+                                    message.media.document = new TLRPC.TL_documentEmpty();
+                                } else if (message.media.photo != null) {
+                                    for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
+                                        File file = FileLoader.getPathToAttach(photoSize, true);
+                                        if (file != null && file.toString().length() > 0) {
+                                            filesToDelete.add(file);
+                                        }
+                                    }
+                                    message.media.photo = new TLRPC.TL_photoEmpty();
+                                } else {
+                                    continue;
+                                }
+                                message.media.flags = message.media.flags &~ 1;
+                                message.id = cursor.intValue(1);
+                                message.date = cursor.intValue(2);
+                                message.dialog_id = cursor.longValue(3);
+                                messages.add(message);
+                            }
+                        }
+                    }
+                    cursor.dispose();
+                    if (!messages.isEmpty()) {
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?)");
+                        for (int a = 0; a < messages.size(); a++) {
+                            TLRPC.Message message = messages.get(a);
+
+                            NativeByteBuffer data = new NativeByteBuffer(message.getObjectSize());
+                            message.serializeToStream(data);
+
+                            state.requery();
+                            state.bindLong(1, message.id);
+                            state.bindLong(2, message.dialog_id);
+                            state.bindInteger(3, MessageObject.getUnreadFlags(message));
+                            state.bindInteger(4, message.send_state);
+                            state.bindInteger(5, message.date);
+                            state.bindByteBuffer(6, data);
+                            state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
+                            state.bindInteger(8, message.ttl);
+                            if ((message.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
+                                state.bindInteger(9, message.views);
+                            } else {
+                                state.bindInteger(9, getMessageMediaType(message));
+                            }
+                            state.bindInteger(10, 0);
+                            state.step();
+
+                            data.reuse();
+                        }
+                        state.dispose();
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                for (int a = 0; a < messages.size(); a++) {
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, messages.get(a));
+                                }
+                            }
+                        });
+                    }
+                    FileLoader.getInstance().deleteFiles(filesToDelete, 0);
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+            }
+        });
+    }
+
+    public void getNewTask(final ArrayList<Integer> oldTask, final int channelId) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -1622,18 +1711,25 @@ public void run() {
                         database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v2 WHERE mid IN(%s)", ids)).stepThis().dispose();
                     }
                     int date = 0;
+                    int channelId = -1;
                     ArrayList<Integer> arr = null;
                     SQLiteCursor cursor = database.queryFinalized("SELECT mid, date FROM enc_tasks_v2 WHERE date = (SELECT min(date) FROM enc_tasks_v2)");
                     while (cursor.next()) {
-                        Integer mid = cursor.intValue(0);
+                        long mid = cursor.longValue(0);
+                        if (channelId == -1) {
+                            channelId = (int) (mid >> 32);
+                            if (channelId < 0) {
+                                channelId = 0;
+                            }
+                        }
                         date = cursor.intValue(1);
                         if (arr == null) {
                             arr = new ArrayList<>();
                         }
-                        arr.add(mid);
+                        arr.add((int) mid);
                     }
                     cursor.dispose();
-                    MessagesController.getInstance().processLoadedDeleteTask(date, arr);
+                    MessagesController.getInstance().processLoadedDeleteTask(date, arr, channelId);
                 } catch (Exception e) {
                     FileLog.e(e);
                 }
@@ -1641,34 +1737,81 @@ public void run() {
         });
     }
 
-    public void createTaskForSecretChat(final int chat_id, final int time, final int readTime, final int isOut, final ArrayList<Long> random_ids) {
+    public void createTaskForMid(final int messageId, final int channelId, final int time, final int readTime, final int ttl, final boolean inner) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    int minDate = (time > readTime ? time : readTime) + ttl;
+                    SparseArray<ArrayList<Long>> messages = new SparseArray<>();
+                    final ArrayList<Long> midsArray = new ArrayList<>();
+
+                    long mid = messageId;
+                    if (channelId != 0) {
+                        mid |= ((long) channelId) << 32;
+                    }
+                    midsArray.add(mid);
+                    messages.put(minDate, midsArray);
+
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (!inner) {
+                                MessagesStorage.getInstance().markMessagesContentAsRead(midsArray, 0);
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadContent, midsArray);
+                        }
+                    });
+
+                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
+                    for (int a = 0; a < messages.size(); a++) {
+                        int key = messages.keyAt(a);
+                        ArrayList<Long> arr = messages.get(key);
+                        for (int b = 0; b < arr.size(); b++) {
+                            state.requery();
+                            state.bindLong(1, arr.get(b));
+                            state.bindInteger(2, key);
+                            state.step();
+                        }
+                    }
+                    state.dispose();
+                    database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid = %d", mid)).stepThis().dispose();
+                    MessagesController.getInstance().didAddedNewTask(minDate, messages);
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+            }
+        });
+    }
+
+    public void createTaskForSecretChat(final int chatId, final int time, final int readTime, final int isOut, final ArrayList<Long> random_ids) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
                     int minDate = Integer.MAX_VALUE;
-                    SparseArray<ArrayList<Integer>> messages = new SparseArray<>();
+                    SparseArray<ArrayList<Long>> messages = new SparseArray<>();
                     final ArrayList<Long> midsArray = new ArrayList<>();
                     StringBuilder mids = new StringBuilder();
                     SQLiteCursor cursor;
                     if (random_ids == null) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE uid = %d AND out = %d AND read_state != 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", ((long) chat_id) << 32, isOut, time));
+                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE uid = %d AND out = %d AND read_state != 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", ((long) chatId) << 32, isOut, time));
                     } else {
                         String ids = TextUtils.join(",", random_ids);
                         cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages as m INNER JOIN randoms as r ON m.mid = r.mid WHERE r.random_id IN (%s)", ids));
                     }
                     while (cursor.next()) {
                         int ttl = cursor.intValue(1);
-                        int mid = cursor.intValue(0);
+                        long mid = cursor.intValue(0);
                         if (random_ids != null) {
-                            midsArray.add((long) mid);
+                            midsArray.add(mid);
                         }
                         if (ttl <= 0) {
                             continue;
                         }
                         int date = (time > readTime ? time : readTime) + ttl;
                         minDate = Math.min(minDate, date);
-                        ArrayList<Integer> arr = messages.get(date);
+                        ArrayList<Long> arr = messages.get(date);
                         if (arr == null) {
                             arr = new ArrayList<>();
                             messages.put(date, arr);
@@ -1685,7 +1828,7 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                MessagesStorage.getInstance().markMessagesContentAsRead(midsArray);
+                                MessagesStorage.getInstance().markMessagesContentAsRead(midsArray, 0);
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadContent, midsArray);
                             }
                         });
@@ -1696,10 +1839,10 @@ public void run() {
                         SQLitePreparedStatement state = database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
                         for (int a = 0; a < messages.size(); a++) {
                             int key = messages.keyAt(a);
-                            ArrayList<Integer> arr = messages.get(key);
+                            ArrayList<Long> arr = messages.get(key);
                             for (int b = 0; b < arr.size(); b++) {
                                 state.requery();
-                                state.bindInteger(1, arr.get(b));
+                                state.bindLong(1, arr.get(b));
                                 state.bindInteger(2, key);
                                 state.step();
                             }
@@ -3062,7 +3205,7 @@ public void run() {
                                 if ((message.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                                     message.views = cursor.intValue(7);
                                 }
-                                if (lower_id != 0) {
+                                if (lower_id != 0 && message.ttl == 0) {
                                     message.ttl = cursor.intValue(8);
                                 }
                                 res.messages.add(message);
@@ -3115,7 +3258,7 @@ public void run() {
                                 if (lower_id == 0 && !cursor.isNull(5)) {
                                     message.random_id = cursor.longValue(5);
                                 }
-                                if ((int) dialog_id == 0 && message.media != null && message.media.photo != null) {
+                                if (MessageObject.isSecretPhotoOrVideo(message)) {
                                     try {
                                         SQLiteCursor cursor2 = database.queryFinalized(String.format(Locale.US, "SELECT date FROM enc_tasks_v2 WHERE mid = %d", message.id));
                                         if (cursor2.next()) {
@@ -3335,12 +3478,12 @@ public void run() {
                         TLRPC.MessageMedia messageMedia = null;
                         if (file instanceof TLRPC.Photo) {
                             messageMedia = new TLRPC.TL_messageMediaPhoto();
-                            messageMedia.caption = "";
                             messageMedia.photo = (TLRPC.Photo) file;
+                            messageMedia.flags |= 1;
                         } else if (file instanceof TLRPC.Document) {
                             messageMedia = new TLRPC.TL_messageMediaDocument();
-                            messageMedia.caption = "";
                             messageMedia.document = (TLRPC.Document) file;
+                            messageMedia.flags |= 1;
                         }
                         if (messageMedia == null) {
                             return;
@@ -3986,6 +4129,7 @@ public void run() {
                             } else if (messageMedia.photo != null) {
                                 downloadObject.object = FileLoader.getClosestPhotoSizeWithSize(messageMedia.photo.sizes, AndroidUtilities.getPhotoSize());
                             }
+                            downloadObject.secret = messageMedia.ttl_seconds != 0;
                         }
                         objects.add(downloadObject);
                     }
@@ -4005,7 +4149,9 @@ public void run() {
     }
 
     private int getMessageMediaType(TLRPC.Message message) {
-        if (message instanceof TLRPC.TL_message_secret && (
+        if (message instanceof TLRPC.TL_message && (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaDocument) && message.media.ttl_seconds != 0) {
+            return 1;
+        } else if (message instanceof TLRPC.TL_message_secret && (
                 message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl > 0 && message.ttl <= 60 ||
                         MessageObject.isVoiceMessage(message) ||
                         MessageObject.isVideoMessage(message) ||
@@ -4442,16 +4588,16 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                                 id = message.media.document.id;
                                 type = MediaController.AUTODOWNLOAD_MASK_AUDIO;
                                 object = new TLRPC.TL_messageMediaDocument();
-                                object.caption = "";
                                 object.document = message.media.document;
+                                object.flags |= 1;
                             }
                         } else if (MessageObject.isRoundVideoMessage(message)) {
                             if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_VIDEOMESSAGE) != 0 && message.media.document.size < 1024 * 1024 * 5) {
                                 id = message.media.document.id;
                                 type = MediaController.AUTODOWNLOAD_MASK_VIDEOMESSAGE;
                                 object = new TLRPC.TL_messageMediaDocument();
-                                object.caption = "";
                                 object.document = message.media.document;
+                                object.flags |= 1;
                             }
                         } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                             if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
@@ -4460,8 +4606,8 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                                     id = message.media.photo.id;
                                     type = MediaController.AUTODOWNLOAD_MASK_PHOTO;
                                     object = new TLRPC.TL_messageMediaPhoto();
-                                    object.caption = "";
                                     object.photo = message.media.photo;
+                                    object.flags |= 1;
                                 }
                             }
                         } else if (MessageObject.isVideoMessage(message)) {
@@ -4469,19 +4615,23 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                                 id = message.media.document.id;
                                 type = MediaController.AUTODOWNLOAD_MASK_VIDEO;
                                 object = new TLRPC.TL_messageMediaDocument();
-                                object.caption = "";
                                 object.document = message.media.document;
+                                object.flags |= 1;
                             }
                         } else if (message.media instanceof TLRPC.TL_messageMediaDocument && !MessageObject.isMusicMessage(message) && !MessageObject.isGifDocument(message.media.document)) {
                             if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
                                 id = message.media.document.id;
                                 type = MediaController.AUTODOWNLOAD_MASK_DOCUMENT;
                                 object = new TLRPC.TL_messageMediaDocument();
-                                object.caption = "";
                                 object.document = message.media.document;
+                                object.flags |= 1;
                             }
                         }
                         if (object != null) {
+                            if (message.media.ttl_seconds != 0) {
+                                object.ttl_seconds = message.media.ttl_seconds;
+                                object.flags |= 4;
+                            }
                             downloadMediaMask |= type;
                             state4.requery();
                             data = new NativeByteBuffer(object.getObjectSize());
@@ -4980,7 +5130,7 @@ private void markMessagesAsReadInternal(SparseArray<Long> inbox, SparseArray<Lon
         }
     }
 
-    public void markMessagesContentAsRead(final ArrayList<Long> mids) {
+    public void markMessagesContentAsRead(final ArrayList<Long> mids, final int date) {
         if (mids == null || mids.isEmpty()) {
             return;
         }
@@ -4988,7 +5138,22 @@ public void markMessagesContentAsRead(final ArrayList<Long> mids) {
             @Override
             public void run() {
                 try {
-                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid IN (%s)", TextUtils.join(",", mids))).stepThis().dispose();
+                    String midsStr = TextUtils.join(",", mids);
+                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid IN (%s)", midsStr)).stepThis().dispose();
+                    if (date != 0) {
+                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE mid IN (%s) AND ttl > 0", midsStr));
+                        ArrayList<Integer> arrayList = null;
+                        while (cursor.next()) {
+                            if (arrayList == null) {
+                                arrayList = new ArrayList<>();
+                            }
+                            arrayList.add(cursor.intValue(0));
+                        }
+                        if (arrayList != null) {
+                            emptyMessagesMedia(arrayList);
+                        }
+                        cursor.dispose();
+                    }
                 } catch (Exception e) {
                     FileLog.e(e);
                 }
@@ -5622,11 +5787,11 @@ public void run() {
                         state.bindInteger(5, message.date);
                         state.bindByteBuffer(6, data);
                         state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
-                        state.bindInteger(8, 0);
+                        state.bindInteger(8, message.ttl);
                         if ((message.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                             state.bindInteger(9, message.views);
                         } else {
-                            state.bindInteger(9, 0);
+                            state.bindInteger(9, getMessageMediaType(message));
                         }
                         state.bindInteger(10, 0);
                         state.step();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index 29168ea1b..be1288cb6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -174,7 +174,8 @@ public void setAllowedNotificationsDutingAnimation(int notifications[]) {
     public void setAnimationInProgress(boolean value) {
         animationInProgress = value;
         if (!animationInProgress && !delayedPosts.isEmpty()) {
-            for (DelayedPost delayedPost : delayedPosts) {
+            for (int a = 0; a < delayedPosts.size(); a++) {
+                DelayedPost delayedPost = delayedPosts.get(a);
                 postNotificationNameInternal(delayedPost.id, true, delayedPost.args);
             }
             delayedPosts.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index 9d0fedfc0..3a95dee61 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -39,6 +39,7 @@
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PopupNotificationActivity;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.HashMap;
@@ -916,13 +917,21 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             if (!shortMessage && Build.VERSION.SDK_INT >= 19 && !TextUtils.isEmpty(messageObject.messageOwner.media.caption)) {
                                 msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, name, "\uD83D\uDDBC " + messageObject.messageOwner.media.caption);
                             } else {
-                                msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, name);
+                                if (messageObject.messageOwner.media.ttl_seconds != 0) {
+                                    msg = LocaleController.formatString("NotificationMessageSDPhoto", R.string.NotificationMessageSDPhoto, name);
+                                } else {
+                                    msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, name);
+                                }
                             }
                         } else if (messageObject.isVideo()) {
                             if (!shortMessage && Build.VERSION.SDK_INT >= 19 && !TextUtils.isEmpty(messageObject.messageOwner.media.caption)) {
                                 msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, name, "\uD83D\uDCF9 " + messageObject.messageOwner.media.caption);
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, name);
+                                if (messageObject.messageOwner.media.ttl_seconds != 0) {
+                                    msg = LocaleController.formatString("NotificationMessageSDVideo", R.string.NotificationMessageSDVideo, name);
+                                } else {
+                                    msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, name);
+                                }
                             }
                         } else if (messageObject.isGame()) {
                             msg = LocaleController.formatString("NotificationMessageGame", R.string.NotificationMessageGame, name, messageObject.messageOwner.media.game.title);
@@ -1037,6 +1046,8 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             msg = LocaleController.formatString("ActionMigrateFromGroupNotify", R.string.ActionMigrateFromGroupNotify, chat.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
                             msg = LocaleController.formatString("ActionMigrateFromGroupNotify", R.string.ActionMigrateFromGroupNotify, messageObject.messageOwner.action.title);
+                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionScreenshotTaken) {
+                            msg = messageObject.messageText.toString();
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
                             if (messageObject.replyMessageObject == null) {
                                 if (!ChatObject.isChannel(chat) || chat.megagroup) {
@@ -1816,12 +1827,15 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                     mBuilder.setLargeIcon(img.getBitmap());
                 } else {
                     try {
-                        float scaleFactor = 160.0f / AndroidUtilities.dp(50);
-                        BitmapFactory.Options options = new BitmapFactory.Options();
-                        options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
-                        Bitmap bitmap = BitmapFactory.decodeFile(FileLoader.getPathToAttach(photoPath, true).toString(), options);
-                        if (bitmap != null) {
-                            mBuilder.setLargeIcon(bitmap);
+                        File file = FileLoader.getPathToAttach(photoPath, true);
+                        if (file.exists()) {
+                            float scaleFactor = 160.0f / AndroidUtilities.dp(50);
+                            BitmapFactory.Options options = new BitmapFactory.Options();
+                            options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
+                            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
+                            if (bitmap != null) {
+                                mBuilder.setLargeIcon(bitmap);
+                            }
                         }
                     } catch (Throwable e) {
                         //ignore
@@ -2075,12 +2089,15 @@ else if(user!=null)
                     builder.setLargeIcon(img.getBitmap());
                 } else {
                     try {
-                        float scaleFactor = 160.0f / AndroidUtilities.dp(50);
-                        BitmapFactory.Options options = new BitmapFactory.Options();
-                        options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
-                        Bitmap bitmap = BitmapFactory.decodeFile(FileLoader.getPathToAttach(photoPath, true).toString(), options);
-                        if (bitmap != null) {
-                            builder.setLargeIcon(bitmap);
+                        File file = FileLoader.getPathToAttach(photoPath, true);
+                        if (file.exists()) {
+                            float scaleFactor = 160.0f / AndroidUtilities.dp(50);
+                            BitmapFactory.Options options = new BitmapFactory.Options();
+                            options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
+                            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
+                            if (bitmap != null) {
+                                builder.setLargeIcon(bitmap);
+                            }
                         }
                     } catch (Throwable e) {
                         //ignore
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
index 86ec13634..e8d6f050d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
@@ -849,6 +849,7 @@ public void run() {
                         return null;
                     }
                     newMessage.media = new TLRPC.TL_messageMediaPhoto();
+                    newMessage.media.flags |= 3;
                     newMessage.media.caption = decryptedMessage.media.caption != null ? decryptedMessage.media.caption : "";
                     newMessage.media.photo = new TLRPC.TL_photo();
                     newMessage.media.photo.date = newMessage.date;
@@ -881,6 +882,7 @@ public void run() {
                         return null;
                     }
                     newMessage.media = new TLRPC.TL_messageMediaDocument();
+                    newMessage.media.flags |= 3;
                     newMessage.media.document = new TLRPC.TL_documentEncrypted();
                     newMessage.media.document.key = decryptedMessage.media.key;
                     newMessage.media.document.iv = decryptedMessage.media.iv;
@@ -919,6 +921,7 @@ public void run() {
                         return null;
                     }
                     newMessage.media = new TLRPC.TL_messageMediaDocument();
+                    newMessage.media.flags |= 3;
                     newMessage.media.caption = decryptedMessage.media.caption != null ? decryptedMessage.media.caption : "";
                     newMessage.media.document = new TLRPC.TL_documentEncrypted();
                     newMessage.media.document.id = file.id;
@@ -956,6 +959,7 @@ public void run() {
                     }
                 } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaExternalDocument) {
                     newMessage.media = new TLRPC.TL_messageMediaDocument();
+                    newMessage.media.flags |= 3;
                     newMessage.media.caption = "";
                     newMessage.media.document = new TLRPC.TL_document();
                     newMessage.media.document.id = decryptedMessage.media.id;
@@ -974,6 +978,7 @@ public void run() {
                         return null;
                     }
                     newMessage.media = new TLRPC.TL_messageMediaDocument();
+                    newMessage.media.flags |= 3;
                     newMessage.media.document = new TLRPC.TL_documentEncrypted();
                     newMessage.media.document.key = decryptedMessage.media.key;
                     newMessage.media.document.iv = decryptedMessage.media.iv;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index 05b92e724..9d226a874 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -286,6 +286,7 @@ public void didReceivedNotification(int id, final Object... args) {
                                 }
                             } else {
                                 media.thumb = file;
+                                media.flags |= 4;
                                 performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                             }
                         } else if (message.type == 2) {
@@ -298,6 +299,7 @@ public void didReceivedNotification(int id, final Object... args) {
                                 }
                             } else {
                                 media.thumb = file;
+                                media.flags |= 4;
                                 performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                             }
                         } else if (message.type == 3) {
@@ -446,7 +448,7 @@ public void run() {
                                             messages.add(message.obj.messageOwner);
                                             MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
                                             performSendDelayedMessage(message);
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj);
+                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj.messageOwner);
                                         } else {
                                             FileLog.e("can't load image " + message.httpLocation + " to file " + cacheFile.toString());
                                             MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner);
@@ -490,7 +492,7 @@ public void run() {
                                         messages.add(message.obj.messageOwner);
                                         MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
                                         performSendDelayedMessage(message);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj.messageOwner);
                                     }
                                 });
                             }
@@ -602,6 +604,9 @@ public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
                 SecretChatHelper.getInstance().sendNoopMessage(encryptedChat, messageObject.messageOwner);
             }
             return true;
+        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionScreenshotTaken) {
+            TLRPC.User user = MessagesController.getInstance().getUser((int) messageObject.getDialogId());
+            sendScreenshotMessage(user, messageObject.messageOwner.reply_to_msg_id, messageObject.messageOwner);
         }
         if (unsent) {
             unsentMessages.put(messageObject.getId(), messageObject);
@@ -624,9 +629,9 @@ public void processForwardFromMyName(MessageObject messageObject, long did) {
         }
         if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGame) && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaInvoice)) {
             if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
-                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did, messageObject.replyMessageObject, null, null);
+                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did, messageObject.replyMessageObject, null, null, messageObject.messageOwner.media.ttl_seconds);
             } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
-                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject, null, null);
+                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject, null, null, messageObject.messageOwner.media.ttl_seconds);
             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
                 sendMessage(messageObject.messageOwner.media, did, messageObject.replyMessageObject, null, null);
             } else if (messageObject.messageOwner.media.phone_number != null) {
@@ -670,6 +675,52 @@ public void processForwardFromMyName(MessageObject messageObject, long did) {
         }
     }
 
+    public void sendScreenshotMessage(TLRPC.User user, int messageId, TLRPC.Message resendMessage) {
+        if (user == null || messageId == 0 || user.id == UserConfig.getClientUserId()) {
+            return;
+        }
+
+        TLRPC.TL_messages_sendScreenshotNotification req = new TLRPC.TL_messages_sendScreenshotNotification();
+        req.peer = new TLRPC.TL_inputPeerUser();
+        req.peer.access_hash = user.access_hash;
+        req.peer.user_id = user.id;
+        TLRPC.Message message;
+        if (resendMessage != null) {
+            message = resendMessage;
+            req.reply_to_msg_id = messageId;
+            req.random_id = resendMessage.random_id;
+        } else {
+            message = new TLRPC.TL_messageService();
+            message.random_id = getNextRandomId();
+            message.dialog_id = user.id;
+            message.unread = true;
+            message.out = true;
+            message.local_id = message.id = UserConfig.getNewMessageId();
+            message.from_id = UserConfig.getClientUserId();
+            message.flags |= 256;
+            message.flags |= 8;
+            message.reply_to_msg_id = messageId;
+            message.to_id = new TLRPC.TL_peerUser();
+            message.to_id.user_id = user.id;
+            message.date = ConnectionsManager.getInstance().getCurrentTime();
+            message.action = new TLRPC.TL_messageActionScreenshotTaken();
+            UserConfig.saveConfig(false);
+        }
+        req.random_id = message.random_id;
+
+        MessageObject newMsgObj = new MessageObject(message, null, false);
+        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+        ArrayList<MessageObject> objArr = new ArrayList<>();
+        objArr.add(newMsgObj);
+        MessagesController.getInstance().updateInterfaceWithMessages(message.dialog_id, objArr);
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        ArrayList<TLRPC.Message> arr = new ArrayList<>();
+        arr.add(message);
+        MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
+
+        performSendMessageRequest(req, newMsgObj, null);
+    }
+
     public void sendSticker(TLRPC.Document document, long peer, MessageObject replyingMessageObject) {
         if (document == null) {
             return;
@@ -718,7 +769,7 @@ public void sendSticker(TLRPC.Document document, long peer, MessageObject replyi
             }
             document = newDocument;
         }
-        SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject, null, null);
+        SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject, null, null, 0);
     }
 
     public int sendMessage(ArrayList<MessageObject> messages, final long peer) {
@@ -763,7 +814,7 @@ public int sendMessage(ArrayList<MessageObject> messages, final long peer) {
             final boolean toMyself = peer == myId;
             for (int a = 0; a < messages.size(); a++) {
                 MessageObject msgObj = messages.get(a);
-                if (msgObj.getId() <= 0) {
+                if (msgObj.getId() <= 0 || msgObj.isSecretPhoto()) {
                     continue;
                 }
                 if (!canSendStickers && (msgObj.isSticker() || msgObj.isGif() || msgObj.isGame())) {
@@ -784,19 +835,27 @@ public int sendMessage(ArrayList<MessageObject> messages, final long peer) {
                     newMsg.flags = TLRPC.MESSAGE_FLAG_FWD;
                 } else if (msgObj.getDialogId() != myId) {
                     newMsg.fwd_from = new TLRPC.TL_messageFwdHeader();
+                    newMsg.fwd_from.channel_post = msgObj.getId();
+                    newMsg.fwd_from.flags |= 4;
                     if (msgObj.isFromUser()) {
                         newMsg.fwd_from.from_id = msgObj.messageOwner.from_id;
                         newMsg.fwd_from.flags |= 1;
                     } else {
                         newMsg.fwd_from.channel_id = msgObj.messageOwner.to_id.channel_id;
                         newMsg.fwd_from.flags |= 2;
-                        if (msgObj.messageOwner.post) {
-                            newMsg.fwd_from.channel_post = msgObj.getId();
-                            newMsg.fwd_from.flags |= 4;
-                            if (msgObj.messageOwner.from_id > 0) {
-                                newMsg.fwd_from.from_id = msgObj.messageOwner.from_id;
-                                newMsg.fwd_from.flags |= 1;
-                            }
+                        if (msgObj.messageOwner.post && msgObj.messageOwner.from_id > 0) {
+                            newMsg.fwd_from.from_id = msgObj.messageOwner.from_id;
+                            newMsg.fwd_from.flags |= 1;
+                        }
+                    }
+                    if (msgObj.messageOwner.post_author != null) {
+                        newMsg.fwd_from.post_author = msgObj.messageOwner.post_author;
+                        newMsg.fwd_from.flags |= 8;
+                    } else if (!msgObj.isOutOwner() && msgObj.messageOwner.from_id > 0 && msgObj.messageOwner.post) {
+                        TLRPC.User signUser = MessagesController.getInstance().getUser(msgObj.messageOwner.from_id);
+                        if (signUser != null) {
+                            newMsg.fwd_from.post_author = ContactsController.formatName(signUser.first_name, signUser.last_name);
+                            newMsg.fwd_from.flags |= 8;
                         }
                     }
                     newMsg.date = msgObj.messageOwner.date;
@@ -1286,34 +1345,34 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
     }
 
     public void sendMessage(MessageObject retryMessageObject) {
-        sendMessage(null, null, null, null, null, null, null, retryMessageObject.getDialogId(), retryMessageObject.messageOwner.attachPath, null, null, true, retryMessageObject, null, retryMessageObject.messageOwner.reply_markup, retryMessageObject.messageOwner.params);
+        sendMessage(null, null, null, null, null, null, null, retryMessageObject.getDialogId(), retryMessageObject.messageOwner.attachPath, null, null, true, retryMessageObject, null, retryMessageObject.messageOwner.reply_markup, retryMessageObject.messageOwner.params, 0);
     }
 
     public void sendMessage(TLRPC.User user, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(null, null, null, null, user, null, null, peer, null, reply_to_msg, null, true, null, null, replyMarkup, params);
+        sendMessage(null, null, null, null, user, null, null, peer, null, reply_to_msg, null, true, null, null, replyMarkup, params, 0);
     }
 
-    public void sendMessage(TLRPC.TL_document document, VideoEditedInfo videoEditedInfo, String path, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(null, null, null, videoEditedInfo, null, document, null, peer, path, reply_to_msg, null, true, null, null, replyMarkup, params);
+    public void sendMessage(TLRPC.TL_document document, VideoEditedInfo videoEditedInfo, String path, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params, int ttl) {
+        sendMessage(null, null, null, videoEditedInfo, null, document, null, peer, path, reply_to_msg, null, true, null, null, replyMarkup, params, ttl);
     }
 
     public void sendMessage(String message, long peer, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, ArrayList<TLRPC.MessageEntity> entities, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(message, null, null, null, null, null, null, peer, null, reply_to_msg, webPage, searchLinks, null, entities, replyMarkup, params);
+        sendMessage(message, null, null, null, null, null, null, peer, null, reply_to_msg, webPage, searchLinks, null, entities, replyMarkup, params, 0);
     }
 
     public void sendMessage(TLRPC.MessageMedia location, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(null, location, null, null, null, null, null, peer, null, reply_to_msg, null, true, null, null, replyMarkup, params);
+        sendMessage(null, location, null, null, null, null, null, peer, null, reply_to_msg, null, true, null, null, replyMarkup, params, 0);
     }
 
     public void sendMessage(TLRPC.TL_game game, long peer, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(null, null, null, null, null, null, game, peer, null, null, null, true, null, null, replyMarkup, params);
+        sendMessage(null, null, null, null, null, null, game, peer, null, null, null, true, null, null, replyMarkup, params, 0);
     }
 
-    public void sendMessage(TLRPC.TL_photo photo, String path, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
-        sendMessage(null, null, photo, null, null, null, null, peer, path, reply_to_msg, null, true, null, null, replyMarkup, params);
+    public void sendMessage(TLRPC.TL_photo photo, String path, long peer, MessageObject reply_to_msg, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params, int ttl) {
+        sendMessage(null, null, photo, null, null, null, null, peer, path, reply_to_msg, null, true, null, null, replyMarkup, params, ttl);
     }
 
-    private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_photo photo, VideoEditedInfo videoEditedInfo, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_game game, long peer, String path, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, MessageObject retryMessageObject, ArrayList<TLRPC.MessageEntity> entities, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+    private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_photo photo, VideoEditedInfo videoEditedInfo, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_game game, long peer, String path, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, MessageObject retryMessageObject, ArrayList<TLRPC.MessageEntity> entities, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params, int ttl) {
         if (peer == 0) {
             return;
         }
@@ -1439,7 +1498,12 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         newMsg = new TLRPC.TL_message();
                     }
                     newMsg.media = new TLRPC.TL_messageMediaPhoto();
+                    newMsg.media.flags |= 3;
                     newMsg.media.caption = photo.caption != null ? photo.caption : "";
+                    if (ttl != 0) {
+                        newMsg.ttl = newMsg.media.ttl_seconds = ttl;
+                        newMsg.media.flags |= 4;
+                    }
                     newMsg.media.photo = photo;
                     if (params != null && params.containsKey("query_id")) {
                         type = 9;
@@ -1492,6 +1556,11 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         newMsg = new TLRPC.TL_message();
                     }
                     newMsg.media = new TLRPC.TL_messageMediaDocument();
+                    newMsg.media.flags |= 3;
+                    if (ttl != 0) {
+                        newMsg.ttl = newMsg.media.ttl_seconds = ttl;
+                        newMsg.media.flags |= 4;
+                    }
                     newMsg.media.caption = document.caption != null ? document.caption : "";
                     newMsg.media.document = document;
                     if (params != null && params.containsKey("query_id")) {
@@ -1646,7 +1715,11 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                 } else {
                     newMsg.to_id.user_id = encryptedChat.participant_id;
                 }
-                newMsg.ttl = encryptedChat.ttl;
+                if (ttl != 0) {
+                    newMsg.ttl = ttl;
+                } else {
+                    newMsg.ttl = encryptedChat.ttl;
+                }
                 if (newMsg.ttl != 0 && newMsg.media.document != null) {
                     if (MessageObject.isVoiceMessage(newMsg)) {
                         int duration = 0;
@@ -1657,7 +1730,7 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                                 break;
                             }
                         }
-                        newMsg.ttl = Math.max(encryptedChat.ttl, duration + 1);
+                        newMsg.ttl = Math.max(newMsg.ttl, duration + 1);
                     } else if (MessageObject.isVideoMessage(newMsg) || MessageObject.isRoundVideoMessage(newMsg)) {
                         int duration = 0;
                         for (int a = 0; a < newMsg.media.document.attributes.size(); a++) {
@@ -1667,7 +1740,7 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                                 break;
                             }
                         }
-                        newMsg.ttl = Math.max(encryptedChat.ttl, duration + 1);
+                        newMsg.ttl = Math.max(newMsg.ttl, duration + 1);
                     }
                 }
             }
@@ -1785,6 +1858,10 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         if (photo.access_hash == 0) {
                             inputMedia = new TLRPC.TL_inputMediaUploadedPhoto();
                             inputMedia.caption = photo.caption != null ? photo.caption : "";
+                            if (ttl != 0) {
+                                newMsg.ttl = inputMedia.ttl_seconds = ttl;
+                                inputMedia.flags |= 2;
+                            }
                             if (params != null) {
                                 String masks = params.get("masks");
                                 if (masks != null) {
@@ -1815,14 +1892,14 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         }
                     } else if (type == 3) {
                         if (document.access_hash == 0) {
-                            if (document.thumb.location != null) {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedThumbDocument();
-                            } else {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
-                            }
+                            inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
                             inputMedia.caption = document.caption != null ? document.caption : "";
                             inputMedia.mime_type = document.mime_type;
                             inputMedia.attributes = document.attributes;
+                            if (ttl != 0) {
+                                newMsg.ttl = inputMedia.ttl_seconds = ttl;
+                                inputMedia.flags |= 2;
+                            }
                             delayedMessage = new DelayedMessage();
                             delayedMessage.originalPath = originalPath;
                             delayedMessage.type = 1;
@@ -1853,10 +1930,10 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                                     inputMedia.q = args[1];
                                 }
                             } else {
-                                if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
-                                    inputMedia = new TLRPC.TL_inputMediaUploadedThumbDocument();
-                                } else {
-                                    inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
+                                inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
+                                if (ttl != 0) {
+                                    newMsg.ttl = inputMedia.ttl_seconds = ttl;
+                                    inputMedia.flags |= 2;
                                 }
                                 delayedMessage = new DelayedMessage();
                                 delayedMessage.originalPath = originalPath;
@@ -1882,6 +1959,10 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                             inputMedia.mime_type = document.mime_type;
                             inputMedia.attributes = document.attributes;
                             inputMedia.caption = document.caption != null ? document.caption : "";
+                            if (ttl != 0) {
+                                newMsg.ttl = inputMedia.ttl_seconds = ttl;
+                                inputMedia.flags |= 2;
+                            }
                             delayedMessage = new DelayedMessage();
                             delayedMessage.type = 3;
                             delayedMessage.obj = newMsgObj;
@@ -2192,7 +2273,11 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                 if (retryMessageObject.getId() >= 0) {
                     reqSend.id.add(retryMessageObject.getId());
                 } else {
-                    reqSend.id.add(retryMessageObject.messageOwner.fwd_msg_id);
+                    if (retryMessageObject.messageOwner.fwd_from != null) {
+                        reqSend.id.add(retryMessageObject.messageOwner.fwd_from.channel_post);
+                    } else {
+                        reqSend.id.add(retryMessageObject.messageOwner.fwd_msg_id);
+                    }
                 }
                 performSendMessageRequest(reqSend, newMsgObj, null);
             } else if (type == 9) {
@@ -2245,7 +2330,7 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                         }
                         if (!file.exists()) {
                             putToDelayedMessages(FileLoader.getAttachFileName(message.location), message);
-                            FileLoader.getInstance().loadFile(message.location, "jpg", 0, false);
+                            FileLoader.getInstance().loadFile(message.location, "jpg", 0, 0);
                             return;
                         }
                     }
@@ -2313,7 +2398,7 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                         File file = new File(location);
                         if (!file.exists()) {
                             putToDelayedMessages(FileLoader.getAttachFileName(message.documentLocation), message);
-                            FileLoader.getInstance().loadFile(message.documentLocation, true, false);
+                            FileLoader.getInstance().loadFile(message.documentLocation, true, 0);
                             return;
                         }
                     }
@@ -2352,7 +2437,7 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                         File file = new File(location);
                         if (!file.exists()) {
                             putToDelayedMessages(FileLoader.getAttachFileName(message.documentLocation), message);
-                            FileLoader.getInstance().loadFile(message.documentLocation, true, false);
+                            FileLoader.getInstance().loadFile(message.documentLocation, true, 0);
                             return;
                         }
                     }
@@ -2563,7 +2648,9 @@ private void updateMediaPaths(MessageObject newMsgObj, TLRPC.Message sentMessage
             return;
         }
         if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+            if (sentMessage.media.ttl_seconds == 0) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+            }
 
             if (newMsg.media.photo.sizes.size() == 1 && newMsg.media.photo.sizes.get(0).location instanceof TLRPC.TL_fileLocationUnavailable) {
                 newMsg.media.photo.sizes = sentMessage.media.photo.sizes;
@@ -2586,7 +2673,7 @@ private void updateMediaPaths(MessageObject newMsgObj, TLRPC.Message sentMessage
                             }
                             File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
                             File cacheFile2;
-                            if (sentMessage.media.photo.sizes.size() == 1 || size.w > 90 || size.h > 90) {
+                            if (sentMessage.media.ttl_seconds == 0 && (sentMessage.media.photo.sizes.size() == 1 || size.w > 90 || size.h > 90)) {
                                 cacheFile2 = FileLoader.getPathToAttach(size);
                             } else {
                                 cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
@@ -2606,10 +2693,14 @@ private void updateMediaPaths(MessageObject newMsgObj, TLRPC.Message sentMessage
             newMsg.media.photo.access_hash = sentMessage.media.photo.access_hash;
         } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
             if (MessageObject.isVideoMessage(sentMessage)) {
-                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 2);
+                if (sentMessage.media.ttl_seconds == 0) {
+                    MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 2);
+                }
                 sentMessage.attachPath = newMsg.attachPath;
             } else if (!MessageObject.isVoiceMessage(sentMessage) && !MessageObject.isRoundVideoMessage(sentMessage)) {
-                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
+                if (sentMessage.media.ttl_seconds == 0) {
+                    MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
+                }
             }
 
             TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
@@ -2665,7 +2756,7 @@ private void updateMediaPaths(MessageObject newMsgObj, TLRPC.Message sentMessage
 
             if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
                 File cacheFile = new File(newMsg.attachPath);
-                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document);
+                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document, sentMessage.media.ttl_seconds != 0);
                 if (!cacheFile.renameTo(cacheFile2)) {
                     sentMessage.attachPath = newMsg.attachPath;
                     sentMessage.message = newMsg.message;
@@ -2925,7 +3016,7 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
-                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, null, params);
+                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, null, params, 0);
             }
         });
         return true;
@@ -2990,7 +3081,7 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            SendMessagesHelper.getInstance().sendMessage(documentFinal, null, messageObject.messageOwner.attachPath, dialog_id, reply_to_msg, null, params);
+                            SendMessagesHelper.getInstance().sendMessage(documentFinal, null, messageObject.messageOwner.attachPath, dialog_id, reply_to_msg, null, params, 0);
                         }
                     });
                 }
@@ -3040,10 +3131,11 @@ public void run() {
         }).start();
     }
 
-    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id, MessageObject reply_to_msg, CharSequence caption, ArrayList<TLRPC.InputDocument> stickers, InputContentInfoCompat inputContent) {
+    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id, MessageObject reply_to_msg, CharSequence caption, ArrayList<TLRPC.InputDocument> stickers, InputContentInfoCompat inputContent, int ttl) {
         ArrayList<String> paths = null;
         ArrayList<Uri> uris = null;
         ArrayList<String> captions = null;
+        ArrayList<Integer> ttls = null;
         ArrayList<ArrayList<TLRPC.InputDocument>> masks = null;
         if (imageFilePath != null && imageFilePath.length() != 0) {
             paths = new ArrayList<>();
@@ -3053,6 +3145,10 @@ public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long
             uris = new ArrayList<>();
             uris.add(imageUri);
         }
+        if (ttl != 0) {
+            ttls = new ArrayList<>();
+            ttls.add(ttl);
+        }
         if (caption != null) {
             captions = new ArrayList<>();
             captions.add(caption.toString());
@@ -3061,7 +3157,7 @@ public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long
             masks = new ArrayList<>();
             masks.add(new ArrayList<>(stickers));
         }
-        prepareSendingPhotos(paths, uris, dialog_id, reply_to_msg, captions, masks, inputContent, false);
+        prepareSendingPhotos(paths, uris, dialog_id, reply_to_msg, captions, masks, inputContent, false, ttls);
     }
 
     public static void prepareSendingBotContextResult(final TLRPC.BotInlineResult result, final HashMap<String, String> params, final long dialog_id, final MessageObject reply_to_msg) {
@@ -3276,10 +3372,10 @@ public void run() {
                         public void run() {
                             if (finalDocument != null) {
                                 finalDocument.caption = result.send_message.caption;
-                                SendMessagesHelper.getInstance().sendMessage(finalDocument, null, finalPathFinal, dialog_id, reply_to_msg, result.send_message.reply_markup, params);
+                                SendMessagesHelper.getInstance().sendMessage(finalDocument, null, finalPathFinal, dialog_id, reply_to_msg, result.send_message.reply_markup, params, 0);
                             } else if (finalPhoto != null) {
                                 finalPhoto.caption = result.send_message.caption;
-                                SendMessagesHelper.getInstance().sendMessage(finalPhoto, result.content_url, dialog_id, reply_to_msg, result.send_message.reply_markup, params);
+                                SendMessagesHelper.getInstance().sendMessage(finalPhoto, result.content_url, dialog_id, reply_to_msg, result.send_message.reply_markup, params, 0);
                             } else if (finalGame != null) {
                                 SendMessagesHelper.getInstance().sendMessage(finalGame, dialog_id, result.send_message.reply_markup, params);
                             }
@@ -3331,6 +3427,7 @@ public void run() {
                 boolean isEncrypted = (int) dialog_id == 0;
                 for (int a = 0; a < photos.size(); a++) {
                     final MediaController.SearchImage searchImage = photos.get(a);
+                    final int ttl = searchImage.ttl;
                     if (searchImage.type == 1) {
                         final HashMap<String, String> params = new HashMap<>();
                         TLRPC.TL_document document = null;
@@ -3417,13 +3514,13 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, null, params);
+                                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, null, params, 0);
                             }
                         });
                     } else {
                         boolean needDownloadHttp = true;
                         TLRPC.TL_photo photo = null;
-                        if (!isEncrypted) {
+                        if (!isEncrypted && ttl == 0) {
                             photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(searchImage.imageUrl, !isEncrypted ? 0 : 3);
                         }
                         if (photo == null) {
@@ -3467,7 +3564,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg, null, params);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg, null, params, ttl);
                                 }
                             });
                         }
@@ -3517,7 +3614,7 @@ public void run() {
         });
     }
 
-    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id, final MessageObject reply_to_msg, final ArrayList<String> captions, final ArrayList<ArrayList<TLRPC.InputDocument>> masks, final InputContentInfoCompat inputContent, final boolean forceDocument) {
+    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id, final MessageObject reply_to_msg, final ArrayList<String> captions, final ArrayList<ArrayList<TLRPC.InputDocument>> masks, final InputContentInfoCompat inputContent, final boolean forceDocument, final ArrayList<Integer> ttls) {
         if (paths == null && uris == null || paths != null && paths.isEmpty() || uris != null && uris.isEmpty()) {
             return;
         }
@@ -3554,6 +3651,7 @@ public void run() {
                         tempPath = AndroidUtilities.getPath(uri);
                         originalPath = uri.toString();
                     }
+                    final int ttl = ttls != null ? ttls.get(a) : 0;
 
                     boolean isDocument = false;
                     if (forceDocument) {
@@ -3598,7 +3696,7 @@ public void run() {
                             originalPath = null;
                         }
                         TLRPC.TL_photo photo = null;
-                        if (!isEncrypted) {
+                        if (!isEncrypted && ttl == 0) {
                             photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 0 : 3);
                             if (photo == null && uri != null) {
                                 photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(AndroidUtilities.getPath(uri), !isEncrypted ? 0 : 3);
@@ -3630,7 +3728,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, null, dialog_id, reply_to_msg, null, params);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, null, dialog_id, reply_to_msg, null, params, ttl);
                                 }
                             });
                         } else {
@@ -3747,7 +3845,7 @@ private static Bitmap createVideoThumbnail(String filePath, long time) {
         return bitmap;
     }
 
-    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final VideoEditedInfo videoEditedInfo, final long dialog_id, final MessageObject reply_to_msg, final CharSequence caption) {
+    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final VideoEditedInfo videoEditedInfo, final long dialog_id, final MessageObject reply_to_msg, final CharSequence caption, final int ttl) {
         if (videoPath == null || videoPath.length() == 0) {
             return;
         }
@@ -3778,7 +3876,7 @@ public void run() {
                         startTime = videoEditedInfo.startTime >= 0 ? videoEditedInfo.startTime : 0;
                     }
                     TLRPC.TL_document document = null;
-                    if (!isEncrypted) {
+                    if (!isEncrypted && ttl == 0) {
                         document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
                     }
                     if (document == null) {
@@ -3878,7 +3976,7 @@ public void run() {
                             if (thumbFinal != null && thumbKeyFinal != null) {
                                 ImageLoader.getInstance().putImageToCache(new BitmapDrawable(thumbFinal), thumbKeyFinal);
                             }
-                            SendMessagesHelper.getInstance().sendMessage(videoFinal, videoEditedInfo, finalPath, dialog_id, reply_to_msg, null, params);
+                            SendMessagesHelper.getInstance().sendMessage(videoFinal, videoEditedInfo, finalPath, dialog_id, reply_to_msg, null, params, ttl);
                         }
                     });
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 64ddc3274..628792253 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -53,6 +53,7 @@
     public native static int convertVideoFrame(ByteBuffer src, ByteBuffer dest, int destFormat, int width, int height, int padding, int swap);
     private native static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, int offset, int length);
     public native static void aesCtrDecryption(ByteBuffer buffer, byte[] key, byte[] iv, int offset, int length);
+    public native static void aesCtrDecryptionByteArray(byte[] buffer, byte[] key, byte[] iv, int offset, int length, int n);
     public native static String readlink(String path);
 
     public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, boolean changeIv, int offset, int length) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java
index c8343cb0c..95efabb48 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java
@@ -7,7 +7,6 @@
 import com.google.android.gms.wearable.Wearable;
 import com.google.android.gms.wearable.WearableListenerService;
 
-import org.json.JSONObject;
 import org.telegram.tgnet.TLRPC;
 
 import java.io.BufferedOutputStream;
@@ -21,144 +20,155 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-/**
- * Created by grishka on 16.06.17.
- */
-
-public class WearDataLayerListenerService extends WearableListenerService{
+public class WearDataLayerListenerService extends WearableListenerService {
 
 
 	@Override
-	public void onCreate(){
+	public void onCreate() {
 		super.onCreate();
+		FileLog.d("WearableDataLayer service created");
 	}
 
 	@Override
-	public void onDestroy(){
+	public void onDestroy() {
 		super.onDestroy();
+		FileLog.d("WearableDataLayer service destroyed");
 	}
 
 	@Override
-	public void onChannelOpened(final Channel ch){
-		new Thread(new Runnable(){
-			@Override
-			public void run(){
-				GoogleApiClient apiClient=new GoogleApiClient.Builder(WearDataLayerListenerService.this).addApi(Wearable.API).build();
-				if(!apiClient.blockingConnect().isSuccess()){
-					FileLog.e("failed to connect google api client");
-					return;
-				}
-				String path=ch.getPath();
-				FileLog.d("wear channel path: "+path);
-				try{
-					if("/getCurrentUser".equals(path)){
-						DataOutputStream out=new DataOutputStream(new BufferedOutputStream(ch.getOutputStream(apiClient).await().getOutputStream()));
-						if(UserConfig.isClientActivated()){
-							final TLRPC.User user=UserConfig.getCurrentUser();
-							out.writeInt(user.id);
-							out.writeUTF(user.first_name);
-							out.writeUTF(user.last_name);
-							out.writeUTF(user.phone);
-							if(user.photo!=null){
-								final File photo=FileLoader.getPathToAttach(user.photo.photo_small, true);
-								final CyclicBarrier barrier=new CyclicBarrier(2);
-								if(!photo.exists()){
-									final NotificationCenter.NotificationCenterDelegate listener=new NotificationCenter.NotificationCenterDelegate(){
-										@Override
-										public void didReceivedNotification(int id, Object... args){
-											if(id==NotificationCenter.FileDidLoaded){
-												FileLog.d("file loaded: "+args[0]+" "+args[0].getClass().getName());
-												if(args[0].equals(photo.getName())){
-													FileLog.e("LOADED USER PHOTO");
-													try{barrier.await(10, TimeUnit.MILLISECONDS);}catch(Exception x){}
-												}
+	public void onChannelOpened(final Channel ch) {
+		//new Thread(new Runnable(){
+		//	@Override
+		//	public void run(){
+		GoogleApiClient apiClient = new GoogleApiClient.Builder(WearDataLayerListenerService.this).addApi(Wearable.API).build();
+		if (!apiClient.blockingConnect().isSuccess()) {
+			FileLog.e("failed to connect google api client");
+			return;
+		}
+		String path = ch.getPath();
+		FileLog.d("wear channel path: " + path);
+		try {
+			if ("/getCurrentUser".equals(path)) {
+				DataOutputStream out = new DataOutputStream(new BufferedOutputStream(ch.getOutputStream(apiClient).await().getOutputStream()));
+				if (UserConfig.isClientActivated()) {
+					final TLRPC.User user = UserConfig.getCurrentUser();
+					out.writeInt(user.id);
+					out.writeUTF(user.first_name);
+					out.writeUTF(user.last_name);
+					out.writeUTF(user.phone);
+					if (user.photo != null) {
+						final File photo = FileLoader.getPathToAttach(user.photo.photo_small, true);
+						final CyclicBarrier barrier = new CyclicBarrier(2);
+						if (!photo.exists()) {
+							final NotificationCenter.NotificationCenterDelegate listener = new NotificationCenter.NotificationCenterDelegate() {
+								@Override
+								public void didReceivedNotification(int id, Object... args) {
+									if (id == NotificationCenter.FileDidLoaded) {
+										FileLog.d("file loaded: " + args[0] + " " + args[0].getClass().getName());
+										if (args[0].equals(photo.getName())) {
+											FileLog.e("LOADED USER PHOTO");
+											try {
+												barrier.await(10, TimeUnit.MILLISECONDS);
+											} catch (Exception ignore) {
 											}
 										}
-									};
-									AndroidUtilities.runOnUIThread(new Runnable(){
-										@Override
-										public void run(){
-											NotificationCenter.getInstance().addObserver(listener, NotificationCenter.FileDidLoaded);
-											FileLoader.getInstance().loadFile(user.photo.photo_small, null, 0, true);
-										}
-									});
-									try{barrier.await(10, TimeUnit.SECONDS);}catch(Exception x){}
-									AndroidUtilities.runOnUIThread(new Runnable(){
-										@Override
-										public void run(){
-											NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.FileDidLoaded);
-										}
-									});
+									}
 								}
-								if(photo.exists() && photo.length()<=50*1024*1024){
-									byte[] photoData=new byte[(int)photo.length()];
-									FileInputStream photoIn=new FileInputStream(photo);
-									new DataInputStream(photoIn).readFully(photoData);
-									photoIn.close();
-									out.writeInt(photoData.length);
-									out.write(photoData);
-								}else{
-									out.writeInt(0);
+							};
+							AndroidUtilities.runOnUIThread(new Runnable() {
+								@Override
+								public void run() {
+									NotificationCenter.getInstance().addObserver(listener, NotificationCenter.FileDidLoaded);
+									FileLoader.getInstance().loadFile(user.photo.photo_small, null, 0, 1);
 								}
-							}else{
-								out.writeInt(0);
+							});
+							try {
+								barrier.await(10, TimeUnit.SECONDS);
+							} catch (Exception ignore) {
 							}
-						}else{
+							AndroidUtilities.runOnUIThread(new Runnable() {
+								@Override
+								public void run() {
+									NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.FileDidLoaded);
+								}
+							});
+						}
+						if (photo.exists() && photo.length() <= 50 * 1024 * 1024) {
+							byte[] photoData = new byte[(int) photo.length()];
+							FileInputStream photoIn = new FileInputStream(photo);
+							new DataInputStream(photoIn).readFully(photoData);
+							photoIn.close();
+							out.writeInt(photoData.length);
+							out.write(photoData);
+						} else {
 							out.writeInt(0);
 						}
-						out.flush();
-						out.close();
-					}else if("/waitForAuthCode".equals(path)){
-						final String[] code={null};
-						final CyclicBarrier barrier=new CyclicBarrier(2);
-						final NotificationCenter.NotificationCenterDelegate listener=new NotificationCenter.NotificationCenterDelegate(){
-							@Override
-							public void didReceivedNotification(int id, Object... args){
-								if(id==NotificationCenter.didReceivedNewMessages){
-									long did = (Long) args[0];
-									if(did==777000){
-										ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
-										if(arr.size()>0){
-											MessageObject msg=arr.get(0);
-											if(!TextUtils.isEmpty(msg.messageText)){
-												Matcher matcher=Pattern.compile("[0-9]+").matcher(msg.messageText);
-												if(matcher.find()){
-													code[0]=matcher.group();
-													try{barrier.await(10, TimeUnit.MILLISECONDS);}catch(Exception x){}
-												}
+					} else {
+						out.writeInt(0);
+					}
+				} else {
+					out.writeInt(0);
+				}
+				out.flush();
+				out.close();
+			} else if ("/waitForAuthCode".equals(path)) {
+				final String[] code = {null};
+				final CyclicBarrier barrier = new CyclicBarrier(2);
+				final NotificationCenter.NotificationCenterDelegate listener = new NotificationCenter.NotificationCenterDelegate() {
+					@Override
+					public void didReceivedNotification(int id, Object... args) {
+						if (id == NotificationCenter.didReceivedNewMessages) {
+							long did = (Long) args[0];
+							if (did == 777000) {
+								ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+								if (arr.size() > 0) {
+									MessageObject msg = arr.get(0);
+									if (!TextUtils.isEmpty(msg.messageText)) {
+										Matcher matcher = Pattern.compile("[0-9]+").matcher(msg.messageText);
+										if (matcher.find()) {
+											code[0] = matcher.group();
+											try {
+												barrier.await(10, TimeUnit.MILLISECONDS);
+											} catch (Exception ignore) {
 											}
 										}
 									}
 								}
 							}
-						};
-						AndroidUtilities.runOnUIThread(new Runnable(){
-							@Override
-							public void run(){
-								NotificationCenter.getInstance().addObserver(listener, NotificationCenter.didReceivedNewMessages);
-							}
-						});
-						try{barrier.await(10, TimeUnit.SECONDS);}catch(Exception x){}
-						AndroidUtilities.runOnUIThread(new Runnable(){
-							@Override
-							public void run(){
-								NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.didReceivedNewMessages);
-							}
-						});
-						DataOutputStream out=new DataOutputStream(ch.getOutputStream(apiClient).await().getOutputStream());
-						if(code!=null)
-							out.writeUTF(code[0]);
-						else
-							out.writeUTF("");
-						out.flush();
-						out.close();
+						}
+					}
+				};
+				AndroidUtilities.runOnUIThread(new Runnable() {
+					@Override
+					public void run() {
+						NotificationCenter.getInstance().addObserver(listener, NotificationCenter.didReceivedNewMessages);
 					}
-				}catch(Exception x){
-					FileLog.e("error processing wear request", x);
+				});
+				try {
+					barrier.await(15, TimeUnit.SECONDS);
+				} catch (Exception ignore) {
 				}
-				ch.close(apiClient).await();
-				apiClient.disconnect();
+				AndroidUtilities.runOnUIThread(new Runnable() {
+					@Override
+					public void run() {
+						NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.didReceivedNewMessages);
+					}
+				});
+				DataOutputStream out = new DataOutputStream(ch.getOutputStream(apiClient).await().getOutputStream());
+				if (code[0] != null)
+					out.writeUTF(code[0]);
+				else
+					out.writeUTF("");
+				out.flush();
+				out.close();
 			}
-		}).start();
+		} catch (Exception x) {
+			FileLog.e("error processing wear request", x);
+		}
+		ch.close(apiClient).await();
+		apiClient.disconnect();
+		FileLog.d("WearableDataLayer channel thread exiting");
+		//	}
+		//}).start();
 	}
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
index b98fc84ab..296ae360c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
@@ -201,7 +201,7 @@ public static boolean isInternalUri(Uri uri) {
         } else if ("telegram.me".equals(host) || "t.me".equals(host) || "telegram.dog".equals(host) || "telesco.pe".equals(host)) {
             String path = uri.getPath();
             if (path != null && path.length() > 1) {
-                return true;
+                return !path.toLowerCase().equals("/iv");
             }
         }
         return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
index 4365545ae..a2aea0865 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
@@ -102,6 +102,9 @@ public void run() {
                             List<Camera.Size> list = params.getSupportedPreviewSizes();
                             for (int a = 0; a < list.size(); a++) {
                                 Camera.Size size = list.get(a);
+                                if (size.width == 1280 && size.height != 720) {
+                                    continue;
+                                }
                                 if (size.height < 2160 && size.width < 2160) {
                                     cameraInfo.previewSizes.add(new Size(size.width, size.height));
                                     FileLog.e("preview size = " + size.width + " " + size.height);
@@ -111,6 +114,9 @@ public void run() {
                             list = params.getSupportedPictureSizes();
                             for (int a = 0; a < list.size(); a++) {
                                 Camera.Size size = list.get(a);
+                                if (size.width == 1280 && size.height != 720) {
+                                    continue;
+                                }
                                 if (!"samsung".equals(Build.MANUFACTURER) || !"jflteuc".equals(Build.PRODUCT) || size.width < 2048) {
                                     cameraInfo.pictureSizes.add(new Size(size.width, size.height));
                                     FileLog.e("picture size = " + size.width + " " + size.height);
@@ -119,6 +125,25 @@ public void run() {
 
                             camera.release();
                             result.add(cameraInfo);
+                            Comparator<Size> comparator = new Comparator<Size>() {
+                                @Override
+                                public int compare(Size o1, Size o2) {
+                                    if (o1.mWidth < o2.mWidth) {
+                                        return 1;
+                                    } else if (o1.mWidth > o2.mWidth) {
+                                        return -1;
+                                    } else {
+                                        if (o1.mHeight < o2.mHeight) {
+                                            return 1;
+                                        } else if (o1.mHeight > o2.mHeight) {
+                                            return -1;
+                                        }
+                                        return 0;
+                                    }
+                                }
+                            };
+                            Collections.sort(cameraInfo.previewSizes, comparator);
+                            Collections.sort(cameraInfo.pictureSizes, comparator);
                         }
                         cameraInfos = result;
                     }
@@ -648,7 +673,6 @@ public void run() {
                         onVideoTakeCallback = null;
                     }
                 } catch (Exception e) {
-                    FileLog.e(e);
                 }
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java
index faaa2dd7a..fba79b180 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java
@@ -24,7 +24,6 @@
 import org.telegram.messenger.FileLog;
 
 import java.util.ArrayList;
-import java.util.List;
 
 public class CameraSession {
 
@@ -400,7 +399,17 @@ protected void configureRecorder(int quality, MediaRecorder recorder) {
         Camera.CameraInfo info = new Camera.CameraInfo();
         Camera.getCameraInfo(cameraInfo.cameraId, info);
         int displayOrientation = getDisplayOrientation(info, false);
-        recorder.setOrientationHint(displayOrientation);
+
+
+        int outputOrientation = 0;
+        if (jpegOrientation != OrientationEventListener.ORIENTATION_UNKNOWN) {
+            if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
+                outputOrientation = (info.orientation - jpegOrientation + 360) % 360;
+            } else {
+                outputOrientation = (info.orientation + jpegOrientation) % 360;
+            }
+        }
+        recorder.setOrientationHint(outputOrientation);
 
         int highProfile = getHigh();
         boolean canGoHigh = CamcorderProfile.hasProfile(cameraInfo.cameraId, highProfile);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
index 19cea3fa5..1a0afac43 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
@@ -147,7 +147,7 @@ public static int getMediaType(TLRPC.Message message) {
         if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
             return MEDIA_PHOTOVIDEO;
         } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-            if (MessageObject.isVoiceMessage(message)) {
+            if (MessageObject.isVoiceMessage(message) || MessageObject.isRoundVideoMessage(message)) {
                 return MEDIA_AUDIO;
             } else if (MessageObject.isVideoMessage(message)) {
                 return MEDIA_PHOTOVIDEO;
@@ -170,7 +170,9 @@ public static int getMediaType(TLRPC.Message message) {
     }
 
     public static boolean canAddMessageToMedia(TLRPC.Message message) {
-        if (message instanceof TLRPC.TL_message_secret && message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60) {
+        if (message instanceof TLRPC.TL_message && (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaDocument) && message.media.ttl_seconds != 0) {
+            return false;
+        } else if (message instanceof TLRPC.TL_message_secret && message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60) {
             return false;
         } else if (message.media instanceof TLRPC.TL_messageMediaPhoto ||
                 message.media instanceof TLRPC.TL_messageMediaDocument && !MessageObject.isGifDocument(message.media.document)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileDataSource.java b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileDataSource.java
new file mode 100644
index 000000000..b204612db
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileDataSource.java
@@ -0,0 +1,139 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.messenger.secretmedia;
+
+import android.net.Uri;
+
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.exoplayer2.C;
+import org.telegram.messenger.exoplayer2.upstream.DataSource;
+import org.telegram.messenger.exoplayer2.upstream.DataSpec;
+import org.telegram.messenger.exoplayer2.upstream.TransferListener;
+
+import java.io.EOFException;
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+
+public final class EncryptedFileDataSource implements DataSource {
+
+    /**
+     * Thrown when IOException is encountered during local file read operation.
+     */
+    public static class EncryptedFileDataSourceException extends IOException {
+
+        public EncryptedFileDataSourceException(IOException cause) {
+            super(cause);
+        }
+
+    }
+
+    private final TransferListener<? super EncryptedFileDataSource> listener;
+
+    private RandomAccessFile file;
+    private Uri uri;
+    private long bytesRemaining;
+    private boolean opened;
+    private byte[] key = new byte[32];
+    private byte[] iv = new byte[16];
+    private int fileOffset;
+
+    public EncryptedFileDataSource() {
+        this(null);
+    }
+
+    public EncryptedFileDataSource(TransferListener<? super EncryptedFileDataSource> listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public long open(DataSpec dataSpec) throws EncryptedFileDataSourceException {
+        try {
+            uri = dataSpec.uri;
+            File path = new File(dataSpec.uri.getPath());
+            String name = path.getName();
+            File keyPath = new File(FileLoader.getInternalCacheDir(), name + ".key");
+            RandomAccessFile keyFile = new RandomAccessFile(keyPath, "r");
+            keyFile.read(key);
+            keyFile.read(iv);
+            keyFile.close();
+
+            file = new RandomAccessFile(path, "r");
+            file.seek(dataSpec.position);
+            fileOffset = (int) dataSpec.position;
+            bytesRemaining = dataSpec.length == C.LENGTH_UNSET ? file.length() - dataSpec.position : dataSpec.length;
+            if (bytesRemaining < 0) {
+                throw new EOFException();
+            }
+        } catch (IOException e) {
+            throw new EncryptedFileDataSourceException(e);
+        }
+
+        opened = true;
+        if (listener != null) {
+            listener.onTransferStart(this, dataSpec);
+        }
+
+        return bytesRemaining;
+    }
+
+    @Override
+    public int read(byte[] buffer, int offset, int readLength) throws EncryptedFileDataSourceException {
+        if (readLength == 0) {
+            return 0;
+        } else if (bytesRemaining == 0) {
+            return C.RESULT_END_OF_INPUT;
+        } else {
+            int bytesRead;
+            try {
+                bytesRead = file.read(buffer, offset, (int) Math.min(bytesRemaining, readLength));
+                Utilities.aesCtrDecryptionByteArray(buffer, key, iv, offset, bytesRead, fileOffset);
+                fileOffset += bytesRead;
+            } catch (IOException e) {
+                throw new EncryptedFileDataSourceException(e);
+            }
+
+            if (bytesRead > 0) {
+                bytesRemaining -= bytesRead;
+                if (listener != null) {
+                    listener.onBytesTransferred(this, bytesRead);
+                }
+            }
+
+            return bytesRead;
+        }
+    }
+
+    @Override
+    public Uri getUri() {
+        return uri;
+    }
+
+    @Override
+    public void close() throws EncryptedFileDataSourceException {
+        uri = null;
+        fileOffset = 0;
+        try {
+            if (file != null) {
+                file.close();
+            }
+        } catch (IOException e) {
+            throw new EncryptedFileDataSourceException(e);
+        } finally {
+            file = null;
+            if (opened) {
+                opened = false;
+                if (listener != null) {
+                    listener.onTransferEnd(this);
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileInputStream.java b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileInputStream.java
new file mode 100644
index 000000000..17f0f9d92
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileInputStream.java
@@ -0,0 +1,56 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.messenger.secretmedia;
+
+import org.telegram.messenger.Utilities;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+
+public class EncryptedFileInputStream extends FileInputStream {
+
+    private byte[] key = new byte[32];
+    private byte[] iv = new byte[16];
+    private int fileOffset;
+
+    public EncryptedFileInputStream(File file, File keyFile) throws Exception {
+        super(file);
+
+        RandomAccessFile randomAccessFile = new RandomAccessFile(keyFile, "r");
+        randomAccessFile.read(key, 0, 32);
+        randomAccessFile.read(iv, 0, 16);
+        randomAccessFile.close();
+    }
+
+    @Override
+    public int read(byte[] b, int off, int len) throws IOException {
+        int result = super.read(b, off, len);
+        Utilities.aesCtrDecryptionByteArray(b, key, iv, off, len, fileOffset);
+        fileOffset += len;
+        return result;
+    }
+
+    @Override
+    public long skip(long n) throws IOException {
+        fileOffset += n;
+        return super.skip(n);
+    }
+
+    public static void decryptBytesWithKeyFile(byte[] bytes, int offset, int length, File keyFile) throws Exception {
+        byte[] key = new byte[32];
+        byte[] iv = new byte[16];
+        RandomAccessFile randomAccessFile = new RandomAccessFile(keyFile, "r");
+        randomAccessFile.read(key, 0, 32);
+        randomAccessFile.read(iv, 0, 16);
+        randomAccessFile.close();
+        Utilities.aesCtrDecryptionByteArray(bytes, key, iv, offset, length, 0);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSource.java b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSource.java
new file mode 100644
index 000000000..520394194
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSource.java
@@ -0,0 +1,139 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.messenger.secretmedia;
+
+import android.content.Context;
+import android.net.Uri;
+
+import org.telegram.messenger.exoplayer2.upstream.AssetDataSource;
+import org.telegram.messenger.exoplayer2.upstream.ContentDataSource;
+import org.telegram.messenger.exoplayer2.upstream.DataSource;
+import org.telegram.messenger.exoplayer2.upstream.DataSpec;
+import org.telegram.messenger.exoplayer2.upstream.DefaultHttpDataSource;
+import org.telegram.messenger.exoplayer2.upstream.FileDataSource;
+import org.telegram.messenger.exoplayer2.upstream.TransferListener;
+import org.telegram.messenger.exoplayer2.util.Assertions;
+import org.telegram.messenger.exoplayer2.util.Util;
+
+import java.io.IOException;
+
+public final class ExtendedDefaultDataSource implements DataSource {
+
+    private static final String SCHEME_ASSET = "asset";
+    private static final String SCHEME_CONTENT = "content";
+
+    private final DataSource baseDataSource;
+    private final DataSource fileDataSource;
+    private final DataSource encryptedFileDataSource;
+    private final DataSource assetDataSource;
+    private final DataSource contentDataSource;
+
+    private DataSource dataSource;
+
+    /**
+     * Constructs a new instance, optionally configured to follow cross-protocol redirects.
+     *
+     * @param context                     A context.
+     * @param listener                    An optional listener.
+     * @param userAgent                   The User-Agent string that should be used when requesting remote data.
+     * @param allowCrossProtocolRedirects Whether cross-protocol redirects (i.e. redirects from HTTP
+     *                                    to HTTPS and vice versa) are enabled when fetching remote data.
+     */
+    public ExtendedDefaultDataSource(Context context, TransferListener<? super DataSource> listener,
+                                     String userAgent, boolean allowCrossProtocolRedirects) {
+        this(context, listener, userAgent, DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
+                DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS, allowCrossProtocolRedirects);
+    }
+
+    /**
+     * Constructs a new instance, optionally configured to follow cross-protocol redirects.
+     *
+     * @param context                     A context.
+     * @param listener                    An optional listener.
+     * @param userAgent                   The User-Agent string that should be used when requesting remote data.
+     * @param connectTimeoutMillis        The connection timeout that should be used when requesting remote
+     *                                    data, in milliseconds. A timeout of zero is interpreted as an infinite timeout.
+     * @param readTimeoutMillis           The read timeout that should be used when requesting remote data,
+     *                                    in milliseconds. A timeout of zero is interpreted as an infinite timeout.
+     * @param allowCrossProtocolRedirects Whether cross-protocol redirects (i.e. redirects from HTTP
+     *                                    to HTTPS and vice versa) are enabled when fetching remote data.
+     */
+    public ExtendedDefaultDataSource(Context context, TransferListener<? super DataSource> listener,
+                                     String userAgent, int connectTimeoutMillis, int readTimeoutMillis,
+                                     boolean allowCrossProtocolRedirects) {
+        this(context, listener,
+                new DefaultHttpDataSource(userAgent, null, listener, connectTimeoutMillis,
+                        readTimeoutMillis, allowCrossProtocolRedirects, null));
+    }
+
+    /**
+     * Constructs a new instance that delegates to a provided {@link DataSource} for URI schemes other
+     * than file, asset and content.
+     *
+     * @param context        A context.
+     * @param listener       An optional listener.
+     * @param baseDataSource A {@link DataSource} to use for URI schemes other than file, asset and
+     *                       content. This {@link DataSource} should normally support at least http(s).
+     */
+    public ExtendedDefaultDataSource(Context context, TransferListener<? super DataSource> listener,
+                                     DataSource baseDataSource) {
+        this.baseDataSource = Assertions.checkNotNull(baseDataSource);
+        this.fileDataSource = new FileDataSource(listener);
+        this.encryptedFileDataSource = new EncryptedFileDataSource(listener);
+        this.assetDataSource = new AssetDataSource(context, listener);
+        this.contentDataSource = new ContentDataSource(context, listener);
+    }
+
+    @Override
+    public long open(DataSpec dataSpec) throws IOException {
+        Assertions.checkState(dataSource == null);
+        // Choose the correct source for the scheme.
+        String scheme = dataSpec.uri.getScheme();
+        if (Util.isLocalFileUri(dataSpec.uri)) {
+            if (dataSpec.uri.getPath().startsWith("/android_asset/")) {
+                dataSource = assetDataSource;
+            } else {
+                if (dataSpec.uri.getPath().endsWith(".enc")) {
+                    dataSource = encryptedFileDataSource;
+                } else {
+                    dataSource = fileDataSource;
+                }
+            }
+        } else if (SCHEME_ASSET.equals(scheme)) {
+            dataSource = assetDataSource;
+        } else if (SCHEME_CONTENT.equals(scheme)) {
+            dataSource = contentDataSource;
+        } else {
+            dataSource = baseDataSource;
+        }
+        // Open the source and return.
+        return dataSource.open(dataSpec);
+    }
+
+    @Override
+    public int read(byte[] buffer, int offset, int readLength) throws IOException {
+        return dataSource.read(buffer, offset, readLength);
+    }
+
+    @Override
+    public Uri getUri() {
+        return dataSource == null ? null : dataSource.getUri();
+    }
+
+    @Override
+    public void close() throws IOException {
+        if (dataSource != null) {
+            try {
+                dataSource.close();
+            } finally {
+                dataSource = null;
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSourceFactory.java b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSourceFactory.java
new file mode 100644
index 000000000..daaffd707
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/ExtendedDefaultDataSourceFactory.java
@@ -0,0 +1,60 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.messenger.secretmedia;
+
+import android.content.Context;
+
+import org.telegram.messenger.exoplayer2.upstream.DataSource;
+import org.telegram.messenger.exoplayer2.upstream.DefaultDataSource;
+import org.telegram.messenger.exoplayer2.upstream.DefaultHttpDataSourceFactory;
+import org.telegram.messenger.exoplayer2.upstream.TransferListener;
+
+public final class ExtendedDefaultDataSourceFactory implements DataSource.Factory {
+
+    private final Context context;
+    private final TransferListener<? super DataSource> listener;
+    private final DataSource.Factory baseDataSourceFactory;
+
+    /**
+     * @param context A context.
+     * @param userAgent The User-Agent string that should be used.
+     */
+    public ExtendedDefaultDataSourceFactory(Context context, String userAgent) {
+        this(context, userAgent, null);
+    }
+
+    /**
+     * @param context A context.
+     * @param userAgent The User-Agent string that should be used.
+     * @param listener An optional listener.
+     */
+    public ExtendedDefaultDataSourceFactory(Context context, String userAgent,
+                                    TransferListener<? super DataSource> listener) {
+        this(context, listener, new DefaultHttpDataSourceFactory(userAgent, listener));
+    }
+
+    /**
+     * @param context A context.
+     * @param listener An optional listener.
+     * @param baseDataSourceFactory A {@link DataSource.Factory} to be used to create a base {@link DataSource}
+     *     for {@link DefaultDataSource}.
+     * @see DefaultDataSource#DefaultDataSource(Context, TransferListener, DataSource)
+     */
+    public ExtendedDefaultDataSourceFactory(Context context, TransferListener<? super DataSource> listener,
+                                    DataSource.Factory baseDataSourceFactory) {
+        this.context = context.getApplicationContext();
+        this.listener = listener;
+        this.baseDataSourceFactory = baseDataSourceFactory;
+    }
+
+    @Override
+    public ExtendedDefaultDataSource createDataSource() {
+        return new ExtendedDefaultDataSource(context, listener, baseDataSourceFactory.createDataSource());
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
index 09b76c28f..b3188aa83 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
@@ -57,7 +57,7 @@
 	public static final int MESSAGE_FLAG_EDITED             = 0x00008000;
 	public static final int MESSAGE_FLAG_MEGAGROUP          = 0x80000000;
 
-    public static final int LAYER = 68;
+    public static final int LAYER = 70;
 
 	public static class DraftMessage extends TLObject {
 		public int flags;
@@ -1053,7 +1053,38 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_messages_botCallbackAnswer extends TLObject {
+    public static class TL_popularContact extends TLObject {
+        public static int constructor = 0x5ce14175;
+
+        public long client_id;
+        public int importers;
+
+        public static TL_popularContact TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            if (TL_popularContact.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_popularContact", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_popularContact result = new TL_popularContact();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            client_id = stream.readInt64(exception);
+            importers = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt64(client_id);
+            stream.writeInt32(importers);
+        }
+    }
+
+    public static class TL_messages_botCallbackAnswer extends TLObject {
 		public static int constructor = 0x36585ea4;
 
 		public int flags;
@@ -3669,6 +3700,40 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+    public static class TL_messageMediaDocument extends MessageMedia {
+        public static int constructor = 0x7c4414d3;
+
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            if ((flags & 1) != 0) {
+                document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
+            } else {
+				document = new TLRPC.TL_documentEmpty();
+			}
+            if ((flags & 2) != 0) {
+                caption = stream.readString(exception);
+            }
+            if ((flags & 4) != 0) {
+                ttl_seconds = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            if ((flags & 1) != 0) {
+                document.serializeToStream(stream);
+            }
+            if ((flags & 2) != 0) {
+                stream.writeString(caption);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(ttl_seconds);
+            }
+        }
+    }
+
 	public static class TL_messageMediaDocument_old extends TL_messageMediaDocument {
 		public static int constructor = 0x2fda2204;
 
@@ -3683,7 +3748,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_messageMediaDocument extends MessageMedia {
+	public static class TL_messageMediaDocument_layer68 extends TL_messageMediaDocument {
 		public static int constructor = 0xf3e02ea8;
 
 
@@ -3699,6 +3764,39 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+    public static class TL_messageMediaPhoto extends MessageMedia {
+        public static int constructor = 0xb5223b0f;
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            if ((flags & 1) != 0) {
+                photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+            } else {
+				photo = new TLRPC.TL_photoEmpty();
+			}
+            if ((flags & 2) != 0) {
+                caption = stream.readString(exception);
+            }
+            if ((flags & 4) != 0) {
+                ttl_seconds = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            if ((flags & 1) != 0) {
+                photo.serializeToStream(stream);
+            }
+            if ((flags & 2) != 0) {
+                stream.writeString(caption);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(ttl_seconds);
+            }
+        }
+    }
+
 	public static class TL_messageMediaGame extends MessageMedia {
 		public static int constructor = 0xfdb19008;
 
@@ -3733,7 +3831,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_messageMediaPhoto extends MessageMedia {
+	public static class TL_messageMediaPhoto_layer68 extends TL_messageMediaPhoto {
 		public static int constructor = 0x3d8ce53d;
 
 
@@ -8854,6 +8952,9 @@ public static MessageAction TLdeserialize(AbstractSerializedData stream, int con
 				case 0x51bdb021:
 					result = new TL_messageActionChatMigrateTo();
 					break;
+				case 0x4792929b:
+					result = new TL_messageActionScreenshotTaken();
+					break;
 				case 0x9fbab604:
 					result = new TL_messageActionHistoryClear();
 					break;
@@ -9026,6 +9127,15 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messageActionScreenshotTaken extends MessageAction {
+		public static int constructor = 0x4792929b;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
 	public static class TL_messageActionChannelMigrateFrom extends MessageAction {
 		public static int constructor = 0xb055eaee;
 
@@ -11685,18 +11795,20 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public String first_name;
 		public String last_name;
 		public int flags;
-		public InputFile file;
-		public InputFile thumb;
-		public String mime_type;
-		public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
 		public String caption;
-		public ArrayList<InputDocument> stickers = new ArrayList<>();
+		public int ttl_seconds;
+		public String url;
 		public String q;
 		public InputGeoPoint geo_point;
+		public InputFile file;
+		public ArrayList<InputDocument> stickers = new ArrayList<>();
 		public String title;
 		public String address;
 		public String provider;
 		public String venue_id;
+		public InputFile thumb;
+		public String mime_type;
+		public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
 
 		public static InputMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			InputMedia result = null;
@@ -11704,10 +11816,7 @@ public static InputMedia TLdeserialize(AbstractSerializedData stream, int constr
 				case 0xa6e45987:
 					result = new TL_inputMediaContact();
 					break;
-				case 0x50d88cae:
-					result = new TL_inputMediaUploadedThumbDocument();
-					break;
-				case 0x1a77f29c:
+				case 0x5acb668e:
 					result = new TL_inputMediaDocument();
 					break;
 				case 0xd33f43f3:
@@ -11719,25 +11828,25 @@ public static InputMedia TLdeserialize(AbstractSerializedData stream, int constr
 				case 0xf9c44144:
 					result = new TL_inputMediaGeoPoint();
 					break;
-				case 0x7477f92c:
+				case 0xb6f74335:
 					result = new TL_inputMediaDocumentExternal();
 					break;
 				case 0x9664f57f:
 					result = new TL_inputMediaEmpty();
 					break;
-				case 0x630c9af1:
+				case 0x2f37e231:
 					result = new TL_inputMediaUploadedPhoto();
 					break;
 				case 0x2827a81a:
 					result = new TL_inputMediaVenue();
 					break;
-				case 0xd070f1e9:
+				case 0xe39621fd:
 					result = new TL_inputMediaUploadedDocument();
 					break;
-				case 0x3b7c62be:
+				case 0x922aec1:
 					result = new TL_inputMediaPhotoExternal();
 					break;
-				case 0xe9bfb4f3:
+				case 0x81fa373a:
 					result = new TL_inputMediaPhoto();
 					break;
 			}
@@ -11769,91 +11878,31 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_inputMediaUploadedThumbDocument extends InputMedia {
-		public static int constructor = 0x50d88cae;
+	public static class TL_inputMediaDocument extends InputMedia {
+		public static int constructor = 0x5acb668e;
 
+		public InputDocument id;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			flags = stream.readInt32(exception);
-			file = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
-			thumb = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
-			mime_type = stream.readString(exception);
-			int magic = stream.readInt32(exception);
-			if (magic != 0x1cb5c415) {
-				if (exception) {
-					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-				}
-				return;
-			}
-			int count = stream.readInt32(exception);
-			for (int a = 0; a < count; a++) {
-				DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
-				if (object == null) {
-					return;
-				}
-				attributes.add(object);
-			}
+			id = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
 			caption = stream.readString(exception);
 			if ((flags & 1) != 0) {
-				magic = stream.readInt32(exception);
-				if (magic != 0x1cb5c415) {
-					if (exception) {
-						throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-					}
-					return;
-				}
-				count = stream.readInt32(exception);
-				for (int a = 0; a < count; a++) {
-					InputDocument object = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
-					if (object == null) {
-						return;
-					}
-					stickers.add(object);
-				}
+				ttl_seconds = stream.readInt32(exception);
 			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
 			stream.writeInt32(flags);
-			file.serializeToStream(stream);
-			thumb.serializeToStream(stream);
-			stream.writeString(mime_type);
-			stream.writeInt32(0x1cb5c415);
-			int count = attributes.size();
-			stream.writeInt32(count);
-			for (int a = 0; a < count; a++) {
-				attributes.get(a).serializeToStream(stream);
-			}
+			id.serializeToStream(stream);
 			stream.writeString(caption);
 			if ((flags & 1) != 0) {
-				stream.writeInt32(0x1cb5c415);
-				count = stickers.size();
-				stream.writeInt32(count);
-				for (int a = 0; a < count; a++) {
-					stickers.get(a).serializeToStream(stream);
-				}
+				stream.writeInt32(ttl_seconds);
 			}
 		}
 	}
 
-	public static class TL_inputMediaDocument extends InputMedia {
-		public static int constructor = 0x1a77f29c;
-
-		public InputDocument id;
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			id = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
-			caption = stream.readString(exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			id.serializeToStream(stream);
-			stream.writeString(caption);
-		}
-	}
-
 	public static class TL_inputMediaGame extends InputMedia {
 		public static int constructor = 0xd33f43f3;
 
@@ -11872,7 +11921,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 	public static class TL_inputMediaGifExternal extends InputMedia {
 		public static int constructor = 0x4843b0fd;
 
-		public String url;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			url = stream.readString(exception);
@@ -11901,17 +11949,26 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_inputMediaDocumentExternal extends InputMedia {
-		public static int constructor = 0x7477f92c;
+		public static int constructor = 0xb6f74335;
 
-		public InputFile url;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
-			url = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
+			flags = stream.readInt32(exception);
+			url = stream.readString(exception);
+			caption = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				ttl_seconds = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			url.serializeToStream(stream);
+			stream.writeInt32(flags);
+			stream.writeString(url);
+			stream.writeString(caption);
+			if ((flags & 1) != 0) {
+				stream.writeInt32(ttl_seconds);
+			}
 		}
 	}
 
@@ -11925,7 +11982,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_inputMediaUploadedPhoto extends InputMedia {
-		public static int constructor = 0x630c9af1;
+		public static int constructor = 0x2f37e231;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
@@ -11949,6 +12006,9 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 					stickers.add(object);
 				}
 			}
+			if ((flags & 2) != 0) {
+				ttl_seconds = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
@@ -11964,6 +12024,9 @@ public void serializeToStream(AbstractSerializedData stream) {
 					stickers.get(a).serializeToStream(stream);
 				}
 			}
+			if ((flags & 2) != 0) {
+				stream.writeInt32(ttl_seconds);
+			}
 		}
 	}
 
@@ -11990,12 +12053,15 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_inputMediaUploadedDocument extends InputMedia {
-		public static int constructor = 0xd070f1e9;
+		public static int constructor = 0xe39621fd;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			flags = stream.readInt32(exception);
 			file = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 4) != 0) {
+				thumb = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
 			mime_type = stream.readString(exception);
 			int magic = stream.readInt32(exception);
 			if (magic != 0x1cb5c415) {
@@ -12030,12 +12096,18 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 					stickers.add(object);
 				}
 			}
+			if ((flags & 2) != 0) {
+				ttl_seconds = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
 			stream.writeInt32(flags);
 			file.serializeToStream(stream);
+			if ((flags & 4) != 0) {
+				thumb.serializeToStream(stream);
+			}
 			stream.writeString(mime_type);
 			stream.writeInt32(0x1cb5c415);
 			int count = attributes.size();
@@ -12052,38 +12124,58 @@ public void serializeToStream(AbstractSerializedData stream) {
 					stickers.get(a).serializeToStream(stream);
 				}
 			}
+			if ((flags & 2) != 0) {
+				stream.writeInt32(ttl_seconds);
+			}
 		}
 	}
 
 	public static class TL_inputMediaPhotoExternal extends InputMedia {
-		public static int constructor = 0x3b7c62be;
+		public static int constructor = 0x922aec1;
 
-		public String url;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
 			url = stream.readString(exception);
+			caption = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				ttl_seconds = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
 			stream.writeString(url);
+			stream.writeString(caption);
+			if ((flags & 1) != 0) {
+				stream.writeInt32(ttl_seconds);
+			}
 		}
 	}
 
 	public static class TL_inputMediaPhoto extends InputMedia {
-		public static int constructor = 0xe9bfb4f3;
+		public static int constructor = 0x81fa373a;
 
 		public InputPhoto id;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
 			id = InputPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
 			caption = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				ttl_seconds = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
 			id.serializeToStream(stream);
 			stream.writeString(caption);
+			if ((flags & 1) != 0) {
+				stream.writeInt32(ttl_seconds);
+			}
 		}
 	}
 
@@ -12677,92 +12769,114 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_contacts_importedContacts extends TLObject {
-		public static int constructor = 0xad524315;
+    public static class TL_contacts_importedContacts extends TLObject {
+        public static int constructor = 0x77d01c3b;
 
-		public ArrayList<TL_importedContact> imported = new ArrayList<>();
-		public ArrayList<Long> retry_contacts = new ArrayList<>();
-		public ArrayList<User> users = new ArrayList<>();
-
-		public static TL_contacts_importedContacts TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			if (TL_contacts_importedContacts.constructor != constructor) {
-				if (exception) {
-					throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", constructor));
-				} else {
-					return null;
-				}
-			}
-			TL_contacts_importedContacts result = new TL_contacts_importedContacts();
-			result.readParams(stream, exception);
-			return result;
-		}
+        public ArrayList<TL_importedContact> imported = new ArrayList<>();
+        public ArrayList<TL_popularContact> popular_invites = new ArrayList<>();
+        public ArrayList<Long> retry_contacts = new ArrayList<>();
+        public ArrayList<User> users = new ArrayList<>();
 
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			int magic = stream.readInt32(exception);
-			if (magic != 0x1cb5c415) {
-				if (exception) {
-					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-				}
-				return;
-			}
-			int count = stream.readInt32(exception);
-			for (int a = 0; a < count; a++) {
-				TL_importedContact object = TL_importedContact.TLdeserialize(stream, stream.readInt32(exception), exception);
-				if (object == null) {
-					return;
-				}
-				imported.add(object);
-			}
-			magic = stream.readInt32(exception);
-			if (magic != 0x1cb5c415) {
-				if (exception) {
-					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-				}
-				return;
-			}
-			count = stream.readInt32(exception);
-			for (int a = 0; a < count; a++) {
-				retry_contacts.add(stream.readInt64(exception));
-			}
-			magic = stream.readInt32(exception);
-			if (magic != 0x1cb5c415) {
-				if (exception) {
-					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-				}
-				return;
-			}
-			count = stream.readInt32(exception);
-			for (int a = 0; a < count; a++) {
-				User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
-				if (object == null) {
-					return;
-				}
-				users.add(object);
-			}
-		}
+        public static TL_contacts_importedContacts TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            if (TL_contacts_importedContacts.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_contacts_importedContacts result = new TL_contacts_importedContacts();
+            result.readParams(stream, exception);
+            return result;
+        }
 
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeInt32(0x1cb5c415);
-			int count = imported.size();
-			stream.writeInt32(count);
-			for (int a = 0; a < count; a++) {
-				imported.get(a).serializeToStream(stream);
-			}
-			stream.writeInt32(0x1cb5c415);
-			count = retry_contacts.size();
-			stream.writeInt32(count);
-			for (int a = 0; a < count; a++) {
-				stream.writeInt64(retry_contacts.get(a));
-			}
-			stream.writeInt32(0x1cb5c415);
-			count = users.size();
-			stream.writeInt32(count);
-			for (int a = 0; a < count; a++) {
-				users.get(a).serializeToStream(stream);
-			}
-		}
-	}
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_importedContact object = TL_importedContact.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                imported.add(object);
+            }
+            magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_popularContact object = TL_popularContact.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                popular_invites.add(object);
+            }
+            magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                retry_contacts.add(stream.readInt64(exception));
+            }
+            magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                users.add(object);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = imported.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                imported.get(a).serializeToStream(stream);
+            }
+            stream.writeInt32(0x1cb5c415);
+            count = popular_invites.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                popular_invites.get(a).serializeToStream(stream);
+            }
+            stream.writeInt32(0x1cb5c415);
+            count = retry_contacts.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt64(retry_contacts.get(a));
+            }
+            stream.writeInt32(0x1cb5c415);
+            count = users.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                users.get(a).serializeToStream(stream);
+            }
+        }
+    }
 
 	public static class TL_disabledFeature extends TLObject {
 		public static int constructor = 0xae636f24;
@@ -19122,6 +19236,40 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+    public static class TL_cdnFileHash extends TLObject {
+        public static int constructor = 0x77eec38f;
+
+        public int offset;
+        public int limit;
+        public byte[] hash;
+
+        public static TL_cdnFileHash TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            if (TL_cdnFileHash.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_cdnFileHash", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_cdnFileHash result = new TL_cdnFileHash();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            offset = stream.readInt32(exception);
+            limit = stream.readInt32(exception);
+            hash = stream.readByteArray(exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(offset);
+            stream.writeInt32(limit);
+            stream.writeByteArray(hash);
+        }
+    }
+
 	public static class storage_FileType extends TLObject {
 
 		public static storage_FileType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
@@ -19638,57 +19786,107 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_messageFwdHeader extends TLObject {
-		public static int constructor = 0xc786ddcb;
+    public static class MessageFwdHeader extends TLObject {
+        public int flags;
+        public int from_id;
+        public int date;
+        public int channel_id;
+        public int channel_post;
+        public String post_author;
 
-		public int flags;
-		public int from_id;
-		public int date;
-		public int channel_id;
-		public int channel_post;
+        public static MessageFwdHeader TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            MessageFwdHeader result = null;
+            switch(constructor) {
+                case 0xfadff4ac:
+                    result = new TL_messageFwdHeader();
+                    break;
+                case 0xc786ddcb:
+                    result = new TL_messageFwdHeader_layer68();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in MessageFwdHeader", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
+            }
+            return result;
+        }
+    }
 
-		public static TL_messageFwdHeader TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			if (TL_messageFwdHeader.constructor != constructor) {
-				if (exception) {
-					throw new RuntimeException(String.format("can't parse magic %x in TL_messageFwdHeader", constructor));
-				} else {
-					return null;
-				}
-			}
-			TL_messageFwdHeader result = new TL_messageFwdHeader();
-			result.readParams(stream, exception);
-			return result;
-		}
+    public static class TL_messageFwdHeader extends MessageFwdHeader {
+        public static int constructor = 0xfadff4ac;
 
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			flags = stream.readInt32(exception);
-			if ((flags & 1) != 0) {
-				from_id = stream.readInt32(exception);
-			}
-			date = stream.readInt32(exception);
-			if ((flags & 2) != 0) {
-				channel_id = stream.readInt32(exception);
-			}
-			if ((flags & 4) != 0) {
-				channel_post = stream.readInt32(exception);
-			}
-		}
 
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeInt32(flags);
-			if ((flags & 1) != 0) {
-				stream.writeInt32(from_id);
-			}
-			stream.writeInt32(date);
-			if ((flags & 2) != 0) {
-				stream.writeInt32(channel_id);
-			}
-			if ((flags & 4) != 0) {
-				stream.writeInt32(channel_post);
-			}
-		}
-	}
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            if ((flags & 1) != 0) {
+                from_id = stream.readInt32(exception);
+            }
+            date = stream.readInt32(exception);
+            if ((flags & 2) != 0) {
+                channel_id = stream.readInt32(exception);
+            }
+            if ((flags & 4) != 0) {
+                channel_post = stream.readInt32(exception);
+            }
+            if ((flags & 8) != 0) {
+                post_author = stream.readString(exception);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            if ((flags & 1) != 0) {
+                stream.writeInt32(from_id);
+            }
+            stream.writeInt32(date);
+            if ((flags & 2) != 0) {
+                stream.writeInt32(channel_id);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(channel_post);
+            }
+            if ((flags & 8) != 0) {
+                stream.writeString(post_author);
+            }
+        }
+    }
+
+    public static class TL_messageFwdHeader_layer68 extends TL_messageFwdHeader {
+        public static int constructor = 0xc786ddcb;
+
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            if ((flags & 1) != 0) {
+                from_id = stream.readInt32(exception);
+            }
+            date = stream.readInt32(exception);
+            if ((flags & 2) != 0) {
+                channel_id = stream.readInt32(exception);
+            }
+            if ((flags & 4) != 0) {
+                channel_post = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            if ((flags & 1) != 0) {
+                stream.writeInt32(from_id);
+            }
+            stream.writeInt32(date);
+            if ((flags & 2) != 0) {
+                stream.writeInt32(channel_id);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(channel_post);
+            }
+        }
+    }
 
 	public static class FileLocation extends TLObject {
 		public int dc_id;
@@ -20249,7 +20447,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public String message;
 		public int pts;
 		public int pts_count;
-		public TL_messageFwdHeader fwd_from;
+		public MessageFwdHeader fwd_from;
 		public int via_bot_id;
 		public int reply_to_msg_id;
 		public ArrayList<MessageEntity> entities = new ArrayList<>();
@@ -20366,7 +20564,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			pts_count = stream.readInt32(exception);
 			date = stream.readInt32(exception);
 			if ((flags & 4) != 0) {
-				fwd_from = TL_messageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
+				fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
 			}
 			if ((flags & 2048) != 0) {
 				via_bot_id = stream.readInt32(exception);
@@ -20456,7 +20654,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			pts_count = stream.readInt32(exception);
 			date = stream.readInt32(exception);
 			if ((flags & 4) != 0) {
-				fwd_from = TL_messageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
+				fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
 			}
 			if ((flags & 2048) != 0) {
 				via_bot_id = stream.readInt32(exception);
@@ -25010,6 +25208,25 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messages_sendScreenshotNotification extends TLObject {
+		public static int constructor = 0xc97df020;
+
+		public InputPeer peer;
+		public int reply_to_msg_id;
+		public long random_id;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Updates.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			peer.serializeToStream(stream);
+			stream.writeInt32(reply_to_msg_id);
+			stream.writeInt64(random_id);
+		}
+	}
+
 	public static class TL_help_getAppChangelog extends TLObject {
 		public static int constructor = 0x9010ef6f;
 
@@ -26073,6 +26290,7 @@ public static RichText TLdeserialize(AbstractSerializedData stream, int construc
 		public int user_id;
 		public WebPage webpage;
 		public boolean test;
+        public int ttl_seconds;
 
 		public static MessageMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			MessageMedia result = null;
@@ -26105,16 +26323,22 @@ public static MessageMedia TLdeserialize(AbstractSerializedData stream, int cons
 					result = new TL_messageMediaDocument_old();
 					break;
 				case 0xf3e02ea8:
-					result = new TL_messageMediaDocument();
+					result = new TL_messageMediaDocument_layer68();
 					break;
 				case 0xfdb19008:
 					result = new TL_messageMediaGame();
 					break;
+                case 0x7c4414d3:
+                    result = new TL_messageMediaDocument();
+                    break;
 				case 0x5e7d2f39:
 					result = new TL_messageMediaContact();
 					break;
+                case 0xb5223b0f:
+                    result = new TL_messageMediaPhoto();
+                    break;
 				case 0x3d8ce53d:
-					result = new TL_messageMediaPhoto();
+					result = new TL_messageMediaPhoto_layer68();
 					break;
 				case 0x5bcf1675:
 					result = new TL_messageMediaVideo_layer45();
@@ -26140,6 +26364,7 @@ public static MessageMedia TLdeserialize(AbstractSerializedData stream, int cons
 					} else {
 						mediaDocument.document = new TLRPC.TL_document();
 					}
+                    mediaDocument.flags = 3;
 					mediaDocument.document.id = result.video_unused.id;
 					mediaDocument.document.access_hash = result.video_unused.access_hash;
 					mediaDocument.document.date = result.video_unused.date;
@@ -26170,6 +26395,7 @@ public static MessageMedia TLdeserialize(AbstractSerializedData stream, int cons
 					} else {
 						mediaDocument.document = new TLRPC.TL_document();
 					}
+                    mediaDocument.flags = 3;
 					mediaDocument.document.id = result.audio_unused.id;
 					mediaDocument.document.access_hash = result.audio_unused.access_hash;
 					mediaDocument.document.date = result.audio_unused.date;
@@ -26303,8 +26529,9 @@ public static EncryptedChat TLdeserialize(AbstractSerializedData stream, int con
 		public int edit_date;
 		public boolean silent;
 		public boolean post;
-		public TL_messageFwdHeader fwd_from;
+		public MessageFwdHeader fwd_from;
 		public int via_bot_id;
+        public String post_author;
         public int send_state = 0; //custom
         public int fwd_msg_id = 0; //custom
         public String attachPath = ""; //custom
@@ -26335,8 +26562,11 @@ public static Message TLdeserialize(AbstractSerializedData stream, int construct
 				case 0x555555f9:
 					result = new TL_message_secret();
 					break;
+                case 0x90dddc11:
+                    result = new TL_message();
+                    break;
 				case 0xc09be45f:
-					result = new TL_message();
+					result = new TL_message_layer68();
 					break;
 				case 0xc992e15c:
 					result = new TL_message_layer47();
@@ -26436,7 +26666,150 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_message extends Message {
+    public static class TL_message extends Message {
+        public static int constructor = 0x90dddc11;
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            out = (flags & 2) != 0;
+            mentioned = (flags & 16) != 0;
+            media_unread = (flags & 32) != 0;
+            silent = (flags & 8192) != 0;
+            post = (flags & 16384) != 0;
+            id = stream.readInt32(exception);
+            if ((flags & 256) != 0) {
+                from_id = stream.readInt32(exception);
+            }
+            to_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 4) != 0) {
+                fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 2048) != 0) {
+                via_bot_id = stream.readInt32(exception);
+            }
+            if ((flags & 8) != 0) {
+                reply_to_msg_id = stream.readInt32(exception);
+            }
+            date = stream.readInt32(exception);
+            message = stream.readString(exception);
+            if ((flags & 512) != 0) {
+                media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
+				if (media != null) {
+					ttl = media.ttl_seconds;
+				}
+            }
+            if ((flags & 64) != 0) {
+                reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 128) != 0) {
+                int magic = stream.readInt32(exception);
+                if (magic != 0x1cb5c415) {
+                    if (exception) {
+                        throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                    }
+                    return;
+                }
+                int count = stream.readInt32(exception);
+                for (int a = 0; a < count; a++) {
+                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
+                    if (object == null) {
+                        return;
+                    }
+                    entities.add(object);
+                }
+            }
+            if ((flags & 1024) != 0) {
+                views = stream.readInt32(exception);
+            }
+            if ((flags & 32768) != 0) {
+                edit_date = stream.readInt32(exception);
+            }
+            if ((flags & 65536) != 0) {
+                post_author = stream.readString(exception);
+            }
+			if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+				attachPath = stream.readString(exception);
+				if (id < 0 && attachPath.startsWith("||")) {
+					String args[] = attachPath.split("\\|\\|");
+					if (args.length > 0) {
+						params = new HashMap<>();
+						for (int a = 1; a < args.length - 1; a++) {
+							String args2[] = args[a].split("\\|=\\|");
+							if (args2.length == 2) {
+								params.put(args2[0], args2[1]);
+							}
+						}
+						attachPath = args[args.length - 1];
+					}
+				}
+			}
+			if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+				fwd_msg_id = stream.readInt32(exception);
+			}
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            flags = out ? (flags | 2) : (flags &~ 2);
+            flags = mentioned ? (flags | 16) : (flags &~ 16);
+            flags = media_unread ? (flags | 32) : (flags &~ 32);
+            flags = silent ? (flags | 8192) : (flags &~ 8192);
+            flags = post ? (flags | 16384) : (flags &~ 16384);
+            stream.writeInt32(flags);
+            stream.writeInt32(id);
+            if ((flags & 256) != 0) {
+                stream.writeInt32(from_id);
+            }
+            to_id.serializeToStream(stream);
+            if ((flags & 4) != 0) {
+                fwd_from.serializeToStream(stream);
+            }
+            if ((flags & 2048) != 0) {
+                stream.writeInt32(via_bot_id);
+            }
+            if ((flags & 8) != 0) {
+                stream.writeInt32(reply_to_msg_id);
+            }
+            stream.writeInt32(date);
+            stream.writeString(message);
+            if ((flags & 512) != 0) {
+                media.serializeToStream(stream);
+            }
+            if ((flags & 64) != 0) {
+                reply_markup.serializeToStream(stream);
+            }
+            if ((flags & 128) != 0) {
+                stream.writeInt32(0x1cb5c415);
+                int count = entities.size();
+                stream.writeInt32(count);
+                for (int a = 0; a < count; a++) {
+                    entities.get(a).serializeToStream(stream);
+                }
+            }
+            if ((flags & 1024) != 0) {
+                stream.writeInt32(views);
+            }
+            if ((flags & 32768) != 0) {
+                stream.writeInt32(edit_date);
+            }
+            if ((flags & 65536) != 0) {
+                stream.writeString(post_author);
+            }
+			String path = attachPath;
+			if (id < 0 && params != null && params.size() > 0) {
+				for (HashMap.Entry<String, String> entry : params.entrySet()) {
+					path = entry.getKey() + "|=|" + entry.getValue() + "||" + path;
+				}
+				path = "||" + path;
+			}
+			stream.writeString(path);
+			if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+				stream.writeInt32(fwd_msg_id);
+			}
+        }
+    }
+
+	public static class TL_message_layer68 extends TL_message {
 		public static int constructor = 0xc09be45f;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
@@ -26461,7 +26834,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 				}
 			}
 			if ((flags & 4) != 0) {
-				fwd_from = TL_messageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
+				fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
 			}
 			if ((flags & 2048) != 0) {
 				via_bot_id = stream.readInt32(exception);
@@ -27768,22 +28141,57 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_upload_reuploadCdnFile extends TLObject {
-		public static int constructor = 0x2e7a2020;
+    public static class TL_upload_reuploadCdnFile extends TLObject {
+        public static int constructor = 0x1af91c09;
 
-		public byte[] file_token;
-		public byte[] request_token;
+        public byte[] file_token;
+        public byte[] request_token;
 
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
-		}
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            Vector vector = new Vector();
+            int size = stream.readInt32(exception);
+            for (int a = 0; a < size; a++) {
+                TL_cdnFileHash object = TL_cdnFileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return vector;
+                }
+                vector.objects.add(object);
+            }
+            return vector;
+        }
 
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeByteArray(file_token);
-			stream.writeByteArray(request_token);
-		}
-	}
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeByteArray(file_token);
+            stream.writeByteArray(request_token);
+        }
+    }
+
+    public static class TL_upload_getCdnFileHashes extends TLObject {
+        public static int constructor = 0xf715c87b;
+
+        public byte[] file_token;
+        public int offset;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            Vector vector = new Vector();
+            int size = stream.readInt32(exception);
+            for (int a = 0; a < size; a++) {
+                TL_cdnFileHash object = TL_cdnFileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return vector;
+                }
+                vector.objects.add(object);
+            }
+            return vector;
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeByteArray(file_token);
+            stream.writeInt32(offset);
+        }
+    }
 
 	public static class TL_upload_webFile extends TLObject {
 		public static int constructor = 0x21e753bc;
@@ -27844,6 +28252,7 @@ public void freeResources() {
 		public byte[] file_token;
 		public byte[] encryption_key;
 		public byte[] encryption_iv;
+        public ArrayList<TL_cdnFileHash> cdn_file_hashes = new ArrayList<>();
 
 		public static upload_File TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			upload_File result = null;
@@ -27851,9 +28260,9 @@ public static upload_File TLdeserialize(AbstractSerializedData stream, int const
 				case 0x96a18d5:
 					result = new TL_upload_file();
 					break;
-				case 0x1508485a:
-					result = new TL_upload_fileCdnRedirect();
-					break;
+                case 0xea52fe5a:
+                    result = new TL_upload_fileCdnRedirect();
+                    break;
 			}
 			if (result == null && exception) {
 				throw new RuntimeException(String.format("can't parse magic %x in upload_File", constructor));
@@ -27957,25 +28366,46 @@ public void freeResources() {
 		}
 	}
 
-	public static class TL_upload_fileCdnRedirect extends upload_File {
-		public static int constructor = 0x1508485a;
+    public static class TL_upload_fileCdnRedirect extends upload_File {
+        public static int constructor = 0xea52fe5a;
 
 
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			dc_id = stream.readInt32(exception);
-			file_token = stream.readByteArray(exception);
-			encryption_key = stream.readByteArray(exception);
-			encryption_iv = stream.readByteArray(exception);
-		}
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            dc_id = stream.readInt32(exception);
+            file_token = stream.readByteArray(exception);
+            encryption_key = stream.readByteArray(exception);
+            encryption_iv = stream.readByteArray(exception);
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_cdnFileHash object = TL_cdnFileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                cdn_file_hashes.add(object);
+            }
+        }
 
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeInt32(dc_id);
-			stream.writeByteArray(file_token);
-			stream.writeByteArray(encryption_key);
-			stream.writeByteArray(encryption_iv);
-		}
-	}
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(dc_id);
+            stream.writeByteArray(file_token);
+            stream.writeByteArray(encryption_key);
+            stream.writeByteArray(encryption_iv);
+            stream.writeInt32(0x1cb5c415);
+            int count = cdn_file_hashes.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                cdn_file_hashes.get(a).serializeToStream(stream);
+            }
+        }
+    }
 
 	public static class TL_phoneCallProtocol extends TLObject {
 		public static int constructor = 0xa2bb35cb;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 883e88613..06fe6c8e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -55,6 +55,8 @@ public boolean canOpenMenu() {
     private int extraHeight;
     private AnimatorSet actionModeAnimation;
 
+    private int titleRightMargin;
+
     private boolean allowOverlayTitle;
     private CharSequence lastTitle;
     private CharSequence lastSubtitle;
@@ -172,6 +174,10 @@ private void createTitleTextView() {
         addView(titleTextView, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
     }
 
+    public void setTitleRightMargin(int value) {
+        titleRightMargin = value;
+    }
+
     public void setTitle(CharSequence value) {
         if (value != null && titleTextView == null) {
             createTitleTextView();
@@ -490,7 +496,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         }
 
         if (titleTextView != null && titleTextView.getVisibility() != GONE || subtitleTextView != null && subtitleTextView.getVisibility() != GONE) {
-            int availableWidth = width - (menu != null ? menu.getMeasuredWidth() : 0) - AndroidUtilities.dp(16) - textLeft;
+            int availableWidth = width - (menu != null ? menu.getMeasuredWidth() : 0) - AndroidUtilities.dp(16) - textLeft - titleRightMargin;
 
             if (titleTextView != null && titleTextView.getVisibility() != GONE) {
                 titleTextView.setTextSize(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 18 : 20);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 0352d4b29..8e88e033f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -19,8 +19,6 @@
 import android.graphics.Paint;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Handler;
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.Menu;
@@ -235,9 +233,9 @@ public void onResume() {
                 currentAnimation = null;
             }
             if (onCloseAnimationEndRunnable != null) {
-                onCloseAnimationEnd(false);
+                onCloseAnimationEnd();
             } else if (onOpenAnimationEndRunnable != null) {
-                onOpenAnimationEnd(false);
+                onOpenAnimationEnd();
             }
         }
         if (!fragmentsStack.isEmpty()) {
@@ -525,8 +523,8 @@ public void onLowMemory() {
     }
 
     private void onAnimationEndCheck(boolean byCheck) {
-        onCloseAnimationEnd(false);
-        onOpenAnimationEnd(false);
+        onCloseAnimationEnd();
+        onOpenAnimationEnd();
         if (waitingForKeyboardCloseRunnable != null) {
             AndroidUtilities.cancelRunOnUIThread(waitingForKeyboardCloseRunnable);
             waitingForKeyboardCloseRunnable = null;
@@ -596,10 +594,6 @@ private void startLayoutAnimation(final boolean open, final boolean first) {
         if (first) {
             animationProgress = 0.0f;
             lastFrameTime = System.nanoTime() / 1000000;
-            if (Build.VERSION.SDK_INT > 15) {
-                containerView.setLayerType(LAYER_TYPE_HARDWARE, null);
-                containerViewBack.setLayerType(LAYER_TYPE_HARDWARE, null);
-            }
         }
         AndroidUtilities.runOnUIThread(animationRunnable = new Runnable() {
             @Override
@@ -745,10 +739,6 @@ public void onAnimationEnd(Animator animation) {
                 onOpenAnimationEndRunnable = new Runnable() {
                     @Override
                     public void run() {
-                        if (Build.VERSION.SDK_INT > 15) {
-                            containerView.setLayerType(LAYER_TYPE_NONE, null);
-                            containerViewBack.setLayerType(LAYER_TYPE_NONE, null);
-                        }
                         presentFragmentInternalRemoveOld(removeLast, currentFragment);
                         fragment.onTransitionAnimationEnd(true, false);
                         fragment.onBecomeFullyVisible();
@@ -793,10 +783,6 @@ public void run() {
                         startLayoutAnimation(true, true);
                     }
                 } else {
-                    if (Build.VERSION.SDK_INT > 15) {
-                        //containerView.setLayerType(LAYER_TYPE_HARDWARE, null);
-                        //containerViewBack.setLayerType(LAYER_TYPE_HARDWARE, null);
-                    }
                     containerView.setAlpha(1.0f);
                     containerView.setTranslationX(0.0f);
                     currentAnimation = animation;
@@ -924,10 +910,6 @@ public void closeLastFragment(boolean animated) {
                 onCloseAnimationEndRunnable = new Runnable() {
                     @Override
                     public void run() {
-                        if (Build.VERSION.SDK_INT > 15) {
-                            containerView.setLayerType(LAYER_TYPE_NONE, null);
-                            containerViewBack.setLayerType(LAYER_TYPE_NONE, null);
-                        }
                         closeLastFragmentInternalRemoveOld(currentFragment);
                         containerViewBack.setTranslationX(0);
                         currentFragment.onTransitionAnimationEnd(false, false);
@@ -958,10 +940,6 @@ public void run() {
                         startLayoutAnimation(false, true);
                     }
                 } else {
-                    if (Build.VERSION.SDK_INT > 15) {
-                        //containerView.setLayerType(LAYER_TYPE_HARDWARE, null);
-                        //containerViewBack.setLayerType(LAYER_TYPE_HARDWARE, null);
-                    }
                     currentAnimation = animation;
                 }
             } else {
@@ -1134,21 +1112,12 @@ public void onActionModeFinished(Object mode) {
         inActionMode = false;
     }
 
-    private void onCloseAnimationEnd(boolean post) {
+    private void onCloseAnimationEnd() {
         if (transitionAnimationInProgress && onCloseAnimationEndRunnable != null) {
             transitionAnimationInProgress = false;
             transitionAnimationStartTime = 0;
-            if (post) {
-                new Handler().post(new Runnable() {
-                    public void run() {
-                        onCloseAnimationEndRunnable.run();
-                        onCloseAnimationEndRunnable = null;
-                    }
-                });
-            } else {
-                onCloseAnimationEndRunnable.run();
-                onCloseAnimationEndRunnable = null;
-            }
+            onCloseAnimationEndRunnable.run();
+            onCloseAnimationEndRunnable = null;
             checkNeedRebuild();
         }
     }
@@ -1160,21 +1129,12 @@ private void checkNeedRebuild() {
         }
     }
 
-    private void onOpenAnimationEnd(boolean post) {
+    private void onOpenAnimationEnd() {
         if (transitionAnimationInProgress && onOpenAnimationEndRunnable != null) {
             transitionAnimationInProgress = false;
             transitionAnimationStartTime = 0;
-            if (post) {
-                new Handler().post(new Runnable() {
-                    public void run() {
-                        onOpenAnimationEndRunnable.run();
-                        onOpenAnimationEndRunnable = null;
-                    }
-                });
-            } else {
-                onOpenAnimationEndRunnable.run();
-                onOpenAnimationEndRunnable = null;
-            }
+            onOpenAnimationEndRunnable.run();
+            onOpenAnimationEndRunnable = null;
             checkNeedRebuild();
         }
     }
@@ -1189,9 +1149,9 @@ public void startActivityForResult(final Intent intent, final int requestCode) {
                 currentAnimation = null;
             }
             if (onCloseAnimationEndRunnable != null) {
-                onCloseAnimationEnd(false);
+                onCloseAnimationEnd();
             } else if (onOpenAnimationEndRunnable != null) {
-                onOpenAnimationEnd(false);
+                onOpenAnimationEnd();
             }
             containerView.invalidate();
             if (intent != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index a0de7c0f9..091a5970a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -66,6 +66,8 @@
 
     private boolean allowDrawContent = true;
 
+    private boolean useHardwareLayer = true;
+
     private DialogInterface.OnClickListener onClickListener;
 
     private CharSequence[] items;
@@ -593,33 +595,33 @@ public void setTranslationY(float translationY) {
         containerView.setVisibility(View.INVISIBLE);
         container.addView(containerView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM));
 
+        int topOffset = 0;
+        if (title != null) {
+            TextView titleView = new TextView(getContext());
+            titleView.setLines(1);
+            titleView.setSingleLine(true);
+            titleView.setText(title);
+            titleView.setTextColor(Theme.getColor(Theme.key_dialogTextGray2));
+            titleView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            titleView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
+            titleView.setPadding(AndroidUtilities.dp(16), 0, AndroidUtilities.dp(16), AndroidUtilities.dp(8));
+            titleView.setGravity(Gravity.CENTER_VERTICAL);
+            containerView.addView(titleView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48));
+            titleView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            topOffset += 48;
+        }
         if (customView != null) {
             if (customView.getParent() != null) {
                 ViewGroup viewGroup = (ViewGroup) customView.getParent();
                 viewGroup.removeView(customView);
             }
-            containerView.addView(customView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
+            containerView.addView(customView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 0, topOffset, 0, 0));
         } else {
-            int topOffset = 0;
-            if (title != null) {
-                TextView titleView = new TextView(getContext());
-                titleView.setLines(1);
-                titleView.setSingleLine(true);
-                titleView.setText(title);
-                titleView.setTextColor(Theme.getColor(Theme.key_dialogTextGray2));
-                titleView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-                titleView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
-                titleView.setPadding(AndroidUtilities.dp(16), 0, AndroidUtilities.dp(16), AndroidUtilities.dp(8));
-                titleView.setGravity(Gravity.CENTER_VERTICAL);
-                containerView.addView(titleView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48));
-                titleView.setOnTouchListener(new View.OnTouchListener() {
-                    @Override
-                    public boolean onTouch(View v, MotionEvent event) {
-                        return true;
-                    }
-                });
-                topOffset += 48;
-            }
             if (items != null) {
                 FrameLayout rowLayout = null;
                 int lastRowLayoutNum = 0;
@@ -659,6 +661,10 @@ public void setShowWithoutAnimation(boolean value) {
         showWithoutAnimation = value;
     }
 
+    public void setBackgroundColor(int color) {
+        shadowDrawable.setColorFilter(color, PorterDuff.Mode.MULTIPLY);
+    }
+
     @Override
     public void show() {
         super.show();
@@ -754,7 +760,7 @@ private void startOpenAnimation() {
         containerView.setVisibility(View.VISIBLE);
 
         if (!onCustomOpenAnimation()) {
-            if (Build.VERSION.SDK_INT >= 20) {
+            if (Build.VERSION.SDK_INT >= 20 && useHardwareLayer) {
                 container.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             }
             containerView.setTranslationY(containerView.getMeasuredHeight());
@@ -773,7 +779,9 @@ public void onAnimationEnd(Animator animation) {
                         if (delegate != null) {
                             delegate.onOpenAnimationEnd();
                         }
-                        container.setLayerType(View.LAYER_TYPE_NONE, null);
+                        if (useHardwareLayer) {
+                            container.setLayerType(View.LAYER_TYPE_NONE, null);
+                        }
                     }
                 }
 
@@ -981,6 +989,11 @@ public Builder setTag(int tag) {
             return this;
         }
 
+        public Builder setUseHardwareLayer(boolean value) {
+            bottomSheet.useHardwareLayer = value;
+            return this;
+        }
+
         public Builder setDelegate(BottomSheetDelegate delegate) {
             bottomSheet.setDelegate(delegate);
             return this;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 3eab15d9f..804195141 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -2415,23 +2415,21 @@ public static void createChatResources(Context context, boolean fontsOnly) {
 
             chat_composeShadowDrawable = context.getResources().getDrawable(R.drawable.compose_panel_shadow);
 
-            if (Build.VERSION.SDK_INT >= 16) {
+            try {
+                int bitmapSize = AndroidUtilities.roundMessageSize + AndroidUtilities.dp(6);
+                Bitmap bitmap = Bitmap.createBitmap(bitmapSize, bitmapSize, Bitmap.Config.ARGB_8888);
+                Canvas canvas = new Canvas(bitmap);
+                Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+                paint.setShadowLayer(AndroidUtilities.dp(4), 0, 0, 0x5f000000);
+                canvas.drawCircle(bitmapSize / 2, bitmapSize / 2, AndroidUtilities.roundMessageSize / 2 - AndroidUtilities.dp(1), paint);
                 try {
-                    int bitmapSize = AndroidUtilities.roundMessageSize + AndroidUtilities.dp(6);
-                    Bitmap bitmap = Bitmap.createBitmap(bitmapSize, bitmapSize, Bitmap.Config.ARGB_8888);
-                    Canvas canvas = new Canvas(bitmap);
-                    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-                    paint.setShadowLayer(AndroidUtilities.dp(4), 0, 0, 0x5f000000);
-                    canvas.drawCircle(bitmapSize / 2, bitmapSize / 2, AndroidUtilities.roundMessageSize / 2 - AndroidUtilities.dp(1), paint);
-                    try {
-                        canvas.setBitmap(null);
-                    } catch (Exception ignore) {
-
-                    }
-                    chat_roundVideoShadow = new BitmapDrawable(bitmap);
-                } catch (Throwable ignore) {
+                    canvas.setBitmap(null);
+                } catch (Exception ignore) {
 
                 }
+                chat_roundVideoShadow = new BitmapDrawable(bitmap);
+            } catch (Throwable ignore) {
+
             }
 
             applyChatTheme(fontsOnly);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index 4319c1163..99f13e465 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -77,7 +77,7 @@ private boolean checkStickerFilesExistAndDownload() {
             File f = FileLoader.getPathToAttach(document.thumb, "webp", true);
             if (!f.exists()) {
                 stickersToLoad.add(FileLoader.getAttachFileName(document.thumb, "webp"));
-                FileLoader.getInstance().loadFile(document.thumb.location, "webp", 0, true);
+                FileLoader.getInstance().loadFile(document.thumb.location, "webp", 0, 1);
             }
         }
         return stickersToLoad.isEmpty();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
index 458ed1015..d9f22b8bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
@@ -186,6 +186,9 @@
     private Paint scrimPaint;
     private AnimatorSet progressViewAnimation;
 
+    private Paint headerPaint = new Paint();
+    private Paint headerProgressPaint = new Paint();
+
     private ActionBarPopupWindow popupWindow;
     private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
     private Rect popupRect;
@@ -247,6 +250,8 @@ public static ArticleViewer getInstance() {
     private FrameLayout nightModeHintView;
     private FontCell[] fontCells = new FontCell[2];
 
+    private int isRtl = -1;
+
     private class SizeChooseView extends View {
 
         private Paint paint;
@@ -944,6 +949,7 @@ private void updateInterfaceForCurrentPage(boolean back) {
         if (currentPage == null || currentPage.cached_page == null) {
             return;
         }
+        isRtl = -1;
         channelBlock = null;
         blocks.clear();
         photoBlocks.clear();
@@ -1448,13 +1454,13 @@ private StaticLayout createLayoutForText(CharSequence plainText, TLRPC.RichText
         } else if (parentBlock instanceof TLRPC.TL_pageBlockChannel) {
             if (channelNamePaint == null) {
                 channelNamePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-                if (channelBlock == null) {
-                    channelNamePaint.setColor(getTextColor());
-                } else {
-                    channelNamePaint.setColor(0xffffffff);
-                }
                 channelNamePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             }
+            if (channelBlock == null) {
+                channelNamePaint.setColor(getTextColor());
+            } else {
+                channelNamePaint.setColor(0xffffffff);
+            }
             channelNamePaint.setTextSize(AndroidUtilities.dp(15));
             paint = channelNamePaint;
         } else if (parentBlock instanceof TLRPC.TL_pageBlockList && plainText != null) {
@@ -2123,17 +2129,58 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 if (listView.getChildCount() == 0) {
                     return;
                 }
+                headerView.invalidate();
                 checkScroll(dy);
             }
         });
-        headerView = new FrameLayout(activity);
+
+        headerPaint.setColor(0xff000000);
+        headerProgressPaint.setColor(0xff242426);
+        headerView = new FrameLayout(activity) {
+            @Override
+            protected void onDraw(Canvas canvas) {
+                int width = getMeasuredWidth();
+                int height = getMeasuredHeight();
+                canvas.drawRect(0, 0, width, height, headerPaint);
+                if (layoutManager == null) {
+                    return;
+                }
+                int first = layoutManager.findFirstVisibleItemPosition();
+                int last = layoutManager.findLastVisibleItemPosition();
+                int count = layoutManager.getItemCount();
+                View view;
+                if (last >= count - 2) {
+                    view = layoutManager.findViewByPosition(count - 2);
+                } else {
+                    view = layoutManager.findViewByPosition(first);
+                }
+                if (view == null) {
+                    return;
+                }
+
+                float itemProgress = width / (float) (count - 1);
+
+                int childCount = layoutManager.getChildCount();
+
+                float viewHeight = view.getMeasuredHeight();
+                float viewProgress;
+                if (last >= count - 2) {
+                    viewProgress = (count - 2 - first) * itemProgress * (listView.getMeasuredHeight() - view.getTop()) / viewHeight;
+                } else {
+                    viewProgress = itemProgress * (1.0f - (Math.min(0, view.getTop() - listView.getPaddingTop()) + viewHeight) / viewHeight);
+                }
+                float progress = first * itemProgress + viewProgress;
+
+                canvas.drawRect(0, 0, progress, height, headerProgressPaint);
+            }
+        };
         headerView.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
                 return true;
             }
         });
-        headerView.setBackgroundColor(0xff000000);
+        headerView.setWillNotDraw(false);
         containerView.addView(headerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 56));
 
         backButton = new ImageView(activity);
@@ -2501,31 +2548,15 @@ public void onClick(View v) {
         gestureDetector = new GestureDetector(activity, this);
         gestureDetector.setOnDoubleTapListener(this);
 
-        ImageReceiver.ImageReceiverDelegate imageReceiverDelegate = new ImageReceiver.ImageReceiverDelegate() {
-            @Override
-            public void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb) {
-                if (imageReceiver == centerImage && set && scaleToFill()) {
-                    if (!wasLayout) {
-                        dontResetZoomOnFirstLayout = true;
-                    } else {
-                        setScaleToFill();
-                    }
-                }
-            }
-        };
-
         centerImage.setParentView(photoContainerView);
         centerImage.setCrossfadeAlpha((byte) 2);
         centerImage.setInvalidateAll(true);
-        centerImage.setDelegate(imageReceiverDelegate);
         leftImage.setParentView(photoContainerView);
         leftImage.setCrossfadeAlpha((byte) 2);
         leftImage.setInvalidateAll(true);
-        leftImage.setDelegate(imageReceiverDelegate);
         rightImage.setParentView(photoContainerView);
         rightImage.setCrossfadeAlpha((byte) 2);
         rightImage.setInvalidateAll(true);
-        rightImage.setDelegate(imageReceiverDelegate);
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagePlayingDidReset);
@@ -3813,9 +3844,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     imageView.setImageCoords(photoX, (isFirst || currentType == 1 || currentType == 2 || currentBlock.level > 0) ? 0 : AndroidUtilities.dp(8), photoWidth, height);
                     if (isGif) {
                         String filter = String.format(Locale.US, "%d_%d", photoWidth, height);
-                        imageView.setImage(currentDocument, filter, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, currentDocument.size, null, true);
+                        imageView.setImage(currentDocument, filter, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, currentDocument.size, null, 1);
                     } else {
-                        imageView.setImage(null, null, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, 0, null, true);
+                        imageView.setImage(null, null, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, 0, null, 1);
                     }
 
                     int size = AndroidUtilities.dp(48);
@@ -3920,9 +3951,9 @@ private void didPressedButton(boolean animated) {
                 cancelLoading = false;
                 radialProgress.setProgress(0, false);
                 if (isGif) {
-                    imageView.setImage(currentDocument, null, currentDocument.thumb != null ? currentDocument.thumb.location : null, "80_80_b", currentDocument.size, null, true);
+                    imageView.setImage(currentDocument, null, currentDocument.thumb != null ? currentDocument.thumb.location : null, "80_80_b", currentDocument.size, null, 1);
                 } else {
-                    FileLoader.getInstance().loadFile(currentDocument, true, true);
+                    FileLoader.getInstance().loadFile(currentDocument, true, 1);
                 }
                 buttonState = 1;
                 radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
@@ -4047,6 +4078,7 @@ public void setBlock(TLRPC.TL_pageBlockAudio block, boolean first, boolean last)
             message.date = (int) (System.currentTimeMillis() / 1000);
             message.message = "-1";
             message.media = new TLRPC.TL_messageMediaDocument();
+            message.media.flags |= 3;
             message.media.document = currentDocument;
             message.flags |= TLRPC.MESSAGE_FLAG_HAS_MEDIA | TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
             currentMessageObject = new MessageObject(message, null, false);
@@ -4285,7 +4317,7 @@ private void didPressedButton(boolean animated) {
                 }
             } else if (buttonState == 2) {
                 radialProgress.setProgress(0, false);
-                FileLoader.getInstance().loadFile(currentDocument, true, true);
+                FileLoader.getInstance().loadFile(currentDocument, true, 1);
                 buttonState = 3;
                 radialProgress.setBackground(getDrawableForCurrentState(), true, false);
                 invalidate();
@@ -4381,7 +4413,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                         if (avatarVisible = (photo != null)) {
                             avatarDrawable.setInfo(0, currentBlock.author, null, false);
                             TLRPC.PhotoSize image = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.dp(40), true);
-                            avatarImageView.setImage(image.location, String.format(Locale.US, "%d_%d", 40, 40), avatarDrawable, 0, null, true);
+                            avatarImageView.setImage(image.location, String.format(Locale.US, "%d_%d", 40, 40), avatarDrawable, 0, null, 1);
                         }
                     }
                     nameLayout = createLayoutForText(currentBlock.author, null, width - AndroidUtilities.dp(36 + 14 + (avatarVisible ? 40 + 14 : 0)), currentBlock);
@@ -5250,6 +5282,10 @@ protected void onDraw(Canvas canvas) {
 
         private TLRPC.TL_pageBlockList currentBlock;
 
+        private boolean hasRtl;
+        private int textX;
+        private int maxLetterWidth;
+
         public BlockListCell(Context context) {
             super(context);
         }
@@ -5277,6 +5313,8 @@ public boolean onTouchEvent(MotionEvent event) {
         protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             int width = MeasureSpec.getSize(widthMeasureSpec);
             int height = 0;
+            hasRtl = false;
+            maxLetterWidth = 0;
 
             if (currentBlock != null) {
                 if (lastCreatedWidth != width) {
@@ -5284,23 +5322,55 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     textYLayouts.clear();
                     textNumLayouts.clear();
                     int count = currentBlock.items.size();
+
                     for (int a = 0; a < count; a++) {
                         TLRPC.RichText item = currentBlock.items.get(a);
-                        height += AndroidUtilities.dp(8);
-                        StaticLayout textLayout = createLayoutForText(null, item, width - AndroidUtilities.dp(36 + 18), currentBlock);
-                        textYLayouts.add(height);
-                        textLayouts.add(textLayout);
-                        if (textLayout != null) {
-                            height += textLayout.getHeight();
+                        if (a == 0) {
+                            StaticLayout textLayout = createLayoutForText(null, item, width - AndroidUtilities.dp(6 + 18) - maxLetterWidth, currentBlock);
+                            int lCount = textLayout.getLineCount();
+                            for (int b = 0; b < lCount; b++) {
+                                if (textLayout.getLineLeft(b) > 0) {
+                                    hasRtl = true;
+                                    isRtl = 1;
+                                    break;
+                                }
+                            }
                         }
                         String num;
                         if (currentBlock.ordered) {
-                            num = String.format(Locale.US, "%d.", a + 1);
+                            if (hasRtl) {
+                                num = String.format(".%d", a + 1);
+                            } else {
+                                num = String.format("%d.", a + 1);
+                            }
                         } else {
                             num = "•";
                         }
-                        textLayout = createLayoutForText(num, item, width - AndroidUtilities.dp(36 + 18), currentBlock);
+                        StaticLayout textLayout = createLayoutForText(num, item, width - AndroidUtilities.dp(36 + 18), currentBlock);
                         textNumLayouts.add(textLayout);
+                        if (currentBlock.ordered) {
+                            if (textLayout != null) {
+                                maxLetterWidth = Math.max(maxLetterWidth, (int) Math.ceil(textLayout.getLineWidth(0)));
+                            }
+                        } else if (a == 0) {
+                            maxLetterWidth = AndroidUtilities.dp(12);
+                        }
+                    }
+
+                    for (int a = 0; a < count; a++) {
+                        TLRPC.RichText item = currentBlock.items.get(a);
+                        height += AndroidUtilities.dp(8);
+                        StaticLayout textLayout = createLayoutForText(null, item, width - AndroidUtilities.dp(6 + 18 + 18) - maxLetterWidth, currentBlock);
+                        textYLayouts.add(height);
+                        textLayouts.add(textLayout);
+                        if (textLayout != null) {
+                            height += textLayout.getHeight();
+                        }
+                    }
+                    if (hasRtl) {
+                        textX = AndroidUtilities.dp(18);
+                    } else {
+                        textX = AndroidUtilities.dp(18 + 6) + maxLetterWidth;
                     }
                     height += AndroidUtilities.dp(8);
                     //lastCreatedWidth = width;
@@ -5318,15 +5388,22 @@ protected void onDraw(Canvas canvas) {
                 return;
             }
             int count = textLayouts.size();
+            int width = getMeasuredWidth();
             for (int a = 0; a < count; a++) {
                 StaticLayout textLayout = textLayouts.get(a);
                 StaticLayout textLayout2 = textNumLayouts.get(a);
                 canvas.save();
-                canvas.translate(AndroidUtilities.dp(18), textYLayouts.get(a));
+                if (hasRtl) {
+                    canvas.translate(width - AndroidUtilities.dp(18) - (int) Math.ceil(textLayout2.getLineWidth(0)), textYLayouts.get(a));
+                } else {
+                    canvas.translate(AndroidUtilities.dp(18), textYLayouts.get(a));
+                }
                 if (textLayout2 != null) {
                     textLayout2.draw(canvas);
                 }
-                canvas.translate(AndroidUtilities.dp(18), 0);
+                canvas.restore();
+                canvas.save();
+                canvas.translate(textX, textYLayouts.get(a));
                 drawLayoutLink(canvas, textLayout);
                 if (textLayout != null) {
                     textLayout.draw(canvas);
@@ -5568,8 +5645,9 @@ protected void onDraw(Canvas canvas) {
         private StaticLayout textLayout2;
         private int textY2;
         private int lastCreatedWidth;
-        private int textX = AndroidUtilities.dp(18 + 14);
+        private int textX;
         private int textY = AndroidUtilities.dp(8);
+        private boolean hasRtl;
 
         private TLRPC.TL_pageBlockBlockquote currentBlock;
 
@@ -5596,8 +5674,22 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             if (currentBlock != null) {
                 if (lastCreatedWidth != width) {
                     textLayout = createLayoutForText(null, currentBlock.text, width - AndroidUtilities.dp(36 + 14), currentBlock);
+                    hasRtl = false;
                     if (textLayout != null) {
                         height += AndroidUtilities.dp(8) + textLayout.getHeight();
+                        int count = textLayout.getLineCount();
+                        for (int a = 0; a < count; a++) {
+                            if (textLayout.getLineLeft(a) > 0) {
+                                isRtl = 1;
+                                hasRtl = true;
+                                break;
+                            }
+                        }
+                    }
+                    if (hasRtl) {
+                        textX = AndroidUtilities.dp(14);
+                    } else {
+                        textX = AndroidUtilities.dp(18 + 14);
                     }
                     textLayout2 = createLayoutForText(null, currentBlock.caption, width - AndroidUtilities.dp(36 + 14), currentBlock);
                     if (textLayout2 != null) {
@@ -5635,7 +5727,12 @@ protected void onDraw(Canvas canvas) {
                 textLayout2.draw(canvas);
                 canvas.restore();
             }
-            canvas.drawRect(AndroidUtilities.dp(18), AndroidUtilities.dp(6), AndroidUtilities.dp(20), getMeasuredHeight() - AndroidUtilities.dp(6), quoteLinePaint);
+            if (hasRtl) {
+                int x = getMeasuredWidth() - AndroidUtilities.dp(20);
+                canvas.drawRect(x, AndroidUtilities.dp(6), x + AndroidUtilities.dp(2), getMeasuredHeight() - AndroidUtilities.dp(6), quoteLinePaint);
+            } else {
+                canvas.drawRect(AndroidUtilities.dp(18), AndroidUtilities.dp(6), AndroidUtilities.dp(20), getMeasuredHeight() - AndroidUtilities.dp(6), quoteLinePaint);
+            }
         }
     }
 
@@ -5763,7 +5860,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     } else {
                         filter = String.format(Locale.US, "%d_%d", photoWidth, height);
                     }
-                    imageView.setImage(image.location, filter, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, image.size, null, true);
+                    imageView.setImage(image.location, filter, thumb != null ? thumb.location : null, thumb != null ? "80_80_b" : null, image.size, null, 1);
                 }
 
                 if (currentType == 0 && lastCreatedWidth != width) {
@@ -5984,7 +6081,7 @@ protected void onDraw(Canvas canvas) {
 
         private StaticLayout textLayout;
         private int lastCreatedWidth;
-        private int textX = AndroidUtilities.dp(18);
+        private int textX;
         private int textY = AndroidUtilities.dp(8);
 
         private TLRPC.TL_pageBlockAuthorDate currentBlock;
@@ -6046,6 +6143,11 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     textLayout = createLayoutForText(text, null, width - AndroidUtilities.dp(36), currentBlock);
                     if (textLayout != null) {
                         height += AndroidUtilities.dp(8 + 8) + textLayout.getHeight();
+                        if (isRtl == 1) {
+                            textX = (int) Math.floor(width - textLayout.getLineWidth(0) - AndroidUtilities.dp(16));
+                        } else {
+                            textX = AndroidUtilities.dp(18);
+                        }
                     }
                     //lastCreatedWidth = width;
                 }
@@ -6105,6 +6207,18 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     textLayout = createLayoutForText(null, currentBlock.text, width - AndroidUtilities.dp(36), currentBlock);
                     if (textLayout != null) {
                         height += AndroidUtilities.dp(8 + 8) + textLayout.getHeight();
+                        if (isRtl == -1) {
+                            int count = textLayout.getLineCount();
+                            for (int a = 0; a < count; a++) {
+                                if (textLayout.getLineLeft(a) > 0) {
+                                    isRtl = 1;
+                                    break;
+                                }
+                            }
+                            if (isRtl == -1) {
+                                isRtl = 0;
+                            }
+                        }
                     }
                     if (currentBlock.first) {
                         height += AndroidUtilities.dp(8);
@@ -7237,14 +7351,14 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                     size[0] = -1;
                 }
                 TLRPC.PhotoSize thumbLocation = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 80);
-                imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], null, true);
+                imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], null, 1);
             } else if (isMediaVideo(index)) {
                 if (!(fileLocation instanceof TLRPC.TL_fileLocationUnavailable)) {
                     Bitmap placeHolder = null;
                     if (currentThumb != null && imageReceiver == centerImage) {
                         placeHolder = currentThumb;
                     }
-                    imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, fileLocation, "b", 0, null, true);
+                    imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, fileLocation, "b", 0, null, 1);
                 } else {
                     imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                 }
@@ -8221,7 +8335,7 @@ private void onActionClick(boolean download) {
         if (file == null) {
             if (download) {
                 if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
-                    FileLoader.getInstance().loadFile(document, true, true);
+                    FileLoader.getInstance().loadFile(document, true, 1);
                 } else {
                     FileLoader.getInstance().cancelLoadFile(document);
                 }
@@ -8370,8 +8484,4 @@ private PlaceProviderObject getPlaceForPhoto(TLRPC.PageBlock pageBlock) {
         object.clipTopAddition = currentHeaderHeight;
         return object;
     }
-
-    private boolean scaleToFill() {
-        return false;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
index 3101368d3..46681c558 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
@@ -225,6 +225,7 @@ public void run() {
                         message.message = "-1";
                         message.attachPath = audioEntry.path;
                         message.media = new TLRPC.TL_messageMediaDocument();
+                        message.media.flags |= 3;
                         message.media.document = new TLRPC.TL_document();
                         message.flags |= TLRPC.MESSAGE_FLAG_HAS_MEDIA | TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
index d182083f9..7baf9813d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
@@ -17,6 +17,7 @@
 import android.text.Spannable;
 import android.text.SpannableStringBuilder;
 import android.text.StaticLayout;
+import android.text.TextUtils;
 import android.text.style.ClickableSpan;
 import android.text.style.URLSpan;
 import android.view.Gravity;
@@ -79,17 +80,15 @@ private void resetPressedLink() {
         invalidate();
     }
 
-    public void setTextAndIcon(String text, int resId) {
-        if (text == null || text.length() == 0) {
-            setVisibility(GONE);
-            return;
-        }
-        if (text != null && oldText != null && text.equals(oldText)) {
+    public void setTextAndIcon(String text, int resId, boolean parseLinks) {
+        if (TextUtils.isEmpty(text) || text != null && oldText != null && text.equals(oldText)) {
             return;
         }
         oldText = text;
         stringBuilder = new SpannableStringBuilder(oldText);
-        MessageObject.addLinks(false, stringBuilder, false);
+        if (parseLinks) {
+            MessageObject.addLinks(false, stringBuilder, false);
+        }
         Emoji.replaceEmoji(stringBuilder, Theme.profile_aboutTextPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
         requestLayout();
         if (resId == 0) {
@@ -172,8 +171,10 @@ public boolean onTouchEvent(MotionEvent event) {
     @SuppressLint("DrawAllocation")
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        textLayout = new StaticLayout(stringBuilder, Theme.profile_aboutTextPaint, MeasureSpec.getSize(widthMeasureSpec) - AndroidUtilities.dp(71 + 16), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(textLayout.getHeight() + AndroidUtilities.dp(16), MeasureSpec.EXACTLY));
+        if (stringBuilder != null) {
+            textLayout = new StaticLayout(stringBuilder, Theme.profile_aboutTextPaint, MeasureSpec.getSize(widthMeasureSpec) - AndroidUtilities.dp(71 + 16), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        }
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec((textLayout != null ? textLayout.getHeight() : AndroidUtilities.dp(20)) + AndroidUtilities.dp(16), MeasureSpec.EXACTLY));
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
index 6eb7f551f..f2351edd9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
@@ -50,7 +50,7 @@ public ArchivedStickerSetCell(Context context, boolean needCheckBox) {
         textView.setSingleLine(true);
         textView.setEllipsize(TextUtils.TruncateAt.END);
         textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 40 : 71, 10, LocaleController.isRTL ? 71 : 40, 0));
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 71, 10, 71, 0));
 
         valueTextView = new TextView(context);
         valueTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText2));
@@ -59,7 +59,7 @@ public ArchivedStickerSetCell(Context context, boolean needCheckBox) {
         valueTextView.setMaxLines(1);
         valueTextView.setSingleLine(true);
         valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 40 : 71, 35, LocaleController.isRTL ? 71 : 40, 0));
+        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 71, 35, 71, 0));
 
         imageView = new BackupImageView(context);
         imageView.setAspectFit(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 3af1f219e..e4108d294 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -25,6 +25,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.Theme;
@@ -119,11 +120,11 @@ public void setMessageObject(MessageObject messageObject) {
             }
             avatarDrawable.setInfo(id, null, null, false);
             if (currentMessageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", avatarDrawable, null, false);
+                imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", avatarDrawable, null, 0);
             } else {
                 TLRPC.PhotoSize photo = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.photoThumbs, AndroidUtilities.dp(64));
                 if (photo != null) {
-                    imageReceiver.setImage(photo.location, "50_50", avatarDrawable, null, false);
+                    imageReceiver.setImage(photo.location, "50_50", avatarDrawable, null, 0);
                 } else {
                     imageReceiver.setImageBitmap(avatarDrawable);
                 }
@@ -297,7 +298,17 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         if (width != previousWidth) {
             CharSequence text;
             if (currentMessageObject != null) {
-                text = currentMessageObject.messageText;
+                if (currentMessageObject.messageOwner != null && currentMessageObject.messageOwner.media != null && currentMessageObject.messageOwner.media.ttl_seconds != 0) {
+                    if (currentMessageObject.messageOwner.media.photo instanceof TLRPC.TL_photoEmpty) {
+                        text = LocaleController.getString("AttachPhotoExpired", R.string.AttachPhotoExpired);
+                    } else if (currentMessageObject.messageOwner.media.document instanceof TLRPC.TL_documentEmpty) {
+                        text = LocaleController.getString("AttachVideoExpired", R.string.AttachVideoExpired);
+                    } else {
+                        text = currentMessageObject.messageText;
+                    }
+                } else {
+                    text = currentMessageObject.messageText;
+                }
             } else {
                 text = customText;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 047646121..09cbb2491 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -70,6 +70,7 @@
 import org.telegram.ui.Components.URLSpanMono;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 import org.telegram.ui.PhotoViewer;
+import org.telegram.ui.SecretMediaViewer;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -208,6 +209,11 @@
     private String currentPhotoFilterThumb;
     private boolean cancelLoading;
 
+    private float controlsAlpha = 1.0f;
+    private long lastControlsAlphaChangeTime;
+    private long totalChangeTime;
+    private boolean mediaWasInvisible;
+
     private CharacterStyle pressedLink;
     private int pressedLinkType;
     private boolean linkPreviewPressed;
@@ -757,7 +763,7 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
                             }
                         } else {
                             TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
-                            if (webPage != null && Build.VERSION.SDK_INT >= 16 && !TextUtils.isEmpty(webPage.embed_url)) {
+                            if (webPage != null && !TextUtils.isEmpty(webPage.embed_url)) {
                                 delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.title, webPage.url, webPage.embed_width, webPage.embed_height);
                             } else if (buttonState == -1) {
                                 delegate.didPressedImage(this);
@@ -815,6 +821,7 @@ private boolean checkOtherButtonMotionEvent(MotionEvent event) {
                     playSoundEffect(SoundEffectConstants.CLICK);
                     delegate.didPressedOther(this);
                     invalidate();
+                    result = true;
                 }
             }
         }
@@ -856,9 +863,7 @@ private boolean checkPhotoImageMotionEvent(MotionEvent event) {
                 }
             }
             if (imagePressed) {
-                if (currentMessageObject.isSecretPhoto() && currentMessageObject.type != 5) {
-                    imagePressed = false;
-                } else if (currentMessageObject.isSendError()) {
+                if (currentMessageObject.isSendError()) {
                     imagePressed = false;
                     result = false;
                 } else if (currentMessageObject.type == 8 && buttonState == -1 && MediaController.getInstance().canAutoplayGifs() && photoImage.getAnimation() == null) {
@@ -1248,7 +1253,7 @@ public void downloadAudioIfNeed() {
             return;
         }
         if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(documentAttach, true, false);
+            FileLoader.getInstance().loadFile(documentAttach, true, 0);
             buttonState = 4;
             radialProgress.setBackground(getDrawableForCurrentState(), false, false);
         }
@@ -1362,7 +1367,9 @@ private void didClickedImage() {
                 didPressedButton(false);
             }
         } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
-            if (buttonState == 0 || buttonState == 3) {
+            if (buttonState == -1) {
+                delegate.didPressedImage(this);
+            } else if (buttonState == 0 || buttonState == 3) {
                 didPressedButton(false);
             }
         } else if (currentMessageObject.type == 4) {
@@ -1375,7 +1382,7 @@ private void didClickedImage() {
             if (buttonState == -1) {
                 TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
                 if (webPage != null) {
-                    if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                    if (webPage.embed_url != null && webPage.embed_url.length() != 0) {
                         delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.description, webPage.url, webPage.embed_width, webPage.embed_height);
                     } else {
                         Browser.openUrl(getContext(), webPage.url);
@@ -1390,7 +1397,7 @@ private void didClickedImage() {
     }
 
     private void updateSecretTimeText(MessageObject messageObject) {
-        if (messageObject == null || messageObject.isOut()) {
+        if (messageObject == null) {
             return;
         }
         String str = messageObject.getSecretTimeString();
@@ -1703,20 +1710,21 @@ private int createDocumentLayout(int maxWidth, MessageObject messageObject) {
             return durationWidth;
         } else if (MessageObject.isVideoDocument(documentAttach)) {
             documentAttachType = DOCUMENT_ATTACH_TYPE_VIDEO;
-            int duration = 0;
-            for (int a = 0; a < documentAttach.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
-                    duration = attribute.duration;
-                    break;
+            if (!messageObject.isSecretPhoto()) {
+                int duration = 0;
+                for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                    TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                    if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                        duration = attribute.duration;
+                        break;
+                    }
                 }
+                int minutes = duration / 60;
+                int seconds = duration - minutes * 60;
+                String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(documentAttach.size));
+                infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(str));
+                infoLayout = new StaticLayout(str, Theme.chat_infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             }
-            int minutes = duration / 60;
-            int seconds = duration - minutes * 60;
-            String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(documentAttach.size));
-            infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(str));
-            infoLayout = new StaticLayout(str, Theme.chat_infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
             return 0;
         } else {
             drawPhotoImage = documentAttach.mime_type != null && documentAttach.mime_type.toLowerCase().startsWith("image/") || documentAttach.thumb instanceof TLRPC.TL_photoSize && !(documentAttach.thumb.location instanceof TLRPC.TL_fileLocationUnavailable);
@@ -1762,7 +1770,7 @@ private int createDocumentLayout(int maxWidth, MessageObject messageObject) {
                 photoImage.setParentMessageObject(messageObject);
                 if (currentPhotoObject != null) {
                     currentPhotoFilter = "86_86_b";
-                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, true);
+                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, 1);
                 } else {
                     photoImage.setImageBitmap((BitmapDrawable) null);
                 }
@@ -1961,7 +1969,7 @@ public void setMessageObject(MessageObject messageObject, boolean bottomNear, bo
                 hasGamePreview = messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGame && messageObject.messageOwner.media.game instanceof TLRPC.TL_game;
                 hasInvoicePreview = messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaInvoice;
                 hasLinkPreview = messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage;
-                drawInstantView = Build.VERSION.SDK_INT >= 16 && hasLinkPreview && messageObject.messageOwner.media.webpage.cached_page != null;
+                drawInstantView = hasLinkPreview && messageObject.messageOwner.media.webpage.cached_page != null;
                 String webpageType = hasLinkPreview ? messageObject.messageOwner.media.webpage.type : null;
                 if (!drawInstantView) {
                     if ("telegram_channel".equals(webpageType)) {
@@ -2476,12 +2484,12 @@ public int getOpacity() {
                             currentPhotoFilterThumb = String.format(Locale.US, "%d_%d_b", width, height);
 
                             if (webDocument != null) {
-                                photoImage.setImage(webDocument, null, currentPhotoFilter, null, null, "b1", webDocument.size, null, true);
+                                photoImage.setImage(webDocument, null, currentPhotoFilter, null, null, "b1", webDocument.size, null, 1);
                             } else {
                                 if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER) {
-                                    photoImage.setImage(documentAttach, null, currentPhotoFilter, null, currentPhotoObject != null ? currentPhotoObject.location : null, "b1", documentAttach.size, "webp", true);
+                                    photoImage.setImage(documentAttach, null, currentPhotoFilter, null, currentPhotoObject != null ? currentPhotoObject.location : null, "b1", documentAttach.size, "webp", 1);
                                 } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
-                                    photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
+                                    photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, 0);
                                 } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF || documentAttachType == DOCUMENT_ATTACH_TYPE_ROUND) {
                                     String fileName = FileLoader.getAttachFileName(document);
                                     boolean autoDownload = false;
@@ -2493,21 +2501,21 @@ public int getOpacity() {
                                     }
                                     if (!messageObject.isSending() && (messageObject.mediaExists || FileLoader.getInstance().isLoadingFile(fileName) || autoDownload)) {
                                         photoNotSet = false;
-                                        photoImage.setImage(document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, document.size, null, false);
+                                        photoImage.setImage(document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, document.size, null, 0);
                                     } else {
                                         photoNotSet = true;
-                                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, false);
+                                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, 0);
                                     }
                                 } else {
                                     boolean photoExist = messageObject.mediaExists;
                                     String fileName = FileLoader.getAttachFileName(currentPhotoObject);
                                     if (hasGamePreview || photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
                                         photoNotSet = false;
-                                        photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                                        photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, 0);
                                     } else {
                                         photoNotSet = true;
                                         if (currentPhotoObjectThumb != null) {
-                                            photoImage.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", width, height), 0, null, false);
+                                            photoImage.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", width, height), 0, null, 0);
                                         } else {
                                             photoImage.setImageBitmap((Drawable) null);
                                         }
@@ -2662,7 +2670,7 @@ public int getOpacity() {
                     }
                     contactAvatarDrawable.setInfo(user);
                 }
-                photoImage.setImage(currentPhoto, "50_50", user != null ? contactAvatarDrawable : Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0], null, false);
+                photoImage.setImage(currentPhoto, "50_50", user != null ? contactAvatarDrawable : Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0], null, 0);
 
                 String phone = messageObject.messageOwner.media.phone_number;
                 if (phone != null && phone.length() != 0) {
@@ -2853,14 +2861,14 @@ public int getOpacity() {
                                 null,
                                 currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
                                 "b1",
-                                messageObject.messageOwner.media.document.size, "webp", true);
+                                messageObject.messageOwner.media.document.size, "webp", 1);
                     } else if (messageObject.messageOwner.media.document.id != 0) {
                         photoImage.setImage(messageObject.messageOwner.media.document, null,
                                 String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                                 null,
                                 currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
                                 "b1",
-                                messageObject.messageOwner.media.document.size, "webp", true);
+                                messageObject.messageOwner.media.document.size, "webp", 1);
                     }
                 } else {
                     int maxPhotoWidth;
@@ -2891,20 +2899,26 @@ public int getOpacity() {
                         currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
                     } else if (messageObject.type == 3) { //video
                         createDocumentLayout(0, messageObject);
-                        photoImage.setNeedsQualityThumb(true);
-                        photoImage.setShouldGenerateQualityThumb(true);
+                        updateSecretTimeText(messageObject);
+                        if (!messageObject.isSecretPhoto()) {
+                            photoImage.setNeedsQualityThumb(true);
+                            photoImage.setShouldGenerateQualityThumb(true);
+                        }
                         photoImage.setParentMessageObject(messageObject);
                     } else if (messageObject.type == 5) { //round video
-                        photoImage.setNeedsQualityThumb(true);
-                        photoImage.setShouldGenerateQualityThumb(true);
+                        if (!messageObject.isSecretPhoto()) {
+                            photoImage.setNeedsQualityThumb(true);
+                            photoImage.setShouldGenerateQualityThumb(true);
+                        }
                         photoImage.setParentMessageObject(messageObject);
                     } else if (messageObject.type == 8) { //gif
                         String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size);
                         infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(str));
                         infoLayout = new StaticLayout(str, Theme.chat_infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
-                        photoImage.setNeedsQualityThumb(true);
-                        photoImage.setShouldGenerateQualityThumb(true);
+                        if (!messageObject.isSecretPhoto()) {
+                            photoImage.setNeedsQualityThumb(true);
+                            photoImage.setShouldGenerateQualityThumb(true);
+                        }
                         photoImage.setParentMessageObject(messageObject);
                     }
 
@@ -3058,11 +3072,11 @@ public int getOpacity() {
                                     photoExist = false;
                                 }
                                 if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, noSize ? 0 : currentPhotoObject.size, null, false);
+                                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, noSize ? 0 : currentPhotoObject.size, null, currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                 } else {
                                     photoNotSet = true;
                                     if (currentPhotoObjectThumb != null) {
-                                        photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilterThumb, 0, null, false);
+                                        photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilterThumb, 0, null, currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                     } else {
                                         photoImage.setImageBitmap((Drawable) null);
                                     }
@@ -3088,16 +3102,16 @@ public int getOpacity() {
                         }
                         if (!messageObject.isSending() && (localFile != 0 || FileLoader.getInstance().isLoadingFile(fileName) || autoDownload)) {
                             if (localFile == 1) {
-                                photoImage.setImage(null, messageObject.isSendError() ? null : messageObject.messageOwner.attachPath, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, false);
+                                photoImage.setImage(null, messageObject.isSendError() ? null : messageObject.messageOwner.attachPath, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, 0);
                             } else {
-                                photoImage.setImage(messageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, messageObject.messageOwner.media.document.size, null, false);
+                                photoImage.setImage(messageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, messageObject.messageOwner.media.document.size, null, 0);
                             }
                         } else {
                             photoNotSet = true;
-                            photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, false);
+                            photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, 0);
                         }
                     } else {
-                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, false);
+                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, 0, null, currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                     }
                 }
                 setMessageObjectInternal(messageObject);
@@ -3110,6 +3124,7 @@ public int getOpacity() {
                     namesOffset += AndroidUtilities.dp(7);
                 }
                 totalHeight = photoHeight + AndroidUtilities.dp(14) + namesOffset + additionHeight;
+
                 if (pinnedTop) {
                     namesOffset -= AndroidUtilities.dp(1);
                 }
@@ -3280,6 +3295,9 @@ public int getOpacity() {
             } else if (pinnedBottom) {
                 totalHeight -= AndroidUtilities.dp(1);
             }
+            if (messageObject.type == 13 && totalHeight < AndroidUtilities.dp(70)) {
+                totalHeight = AndroidUtilities.dp(70);
+            }
         }
         updateWaveform();
         updateButtonState(dataChanged);
@@ -3485,7 +3503,15 @@ private void drawContent(Canvas canvas) {
 
         forceNotDrawTime = false;
         photoImage.setPressed(isDrawSelectedBackground());
-        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
+        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject) && !SecretMediaViewer.getInstance().isShowingImage(currentMessageObject), false);
+        if (!photoImage.getVisible()) {
+            mediaWasInvisible = true;
+        } else if (mediaWasInvisible) {
+            lastControlsAlphaChangeTime = System.currentTimeMillis();
+            totalChangeTime = 0;
+            controlsAlpha = 0.0f;
+            mediaWasInvisible = false;
+        }
         radialProgress.setHideCurrentDrawable(false);
         radialProgress.setProgressColor(Theme.getColor(Theme.key_chat_mediaProgress));
 
@@ -3756,7 +3782,7 @@ private void drawContent(Canvas canvas) {
             }
         }
 
-        if (buttonState == -1 && currentMessageObject.isSecretPhoto() && !MediaController.getInstance().isPlayingMessage(currentMessageObject)) {
+        if (buttonState == -1 && currentMessageObject.isSecretPhoto() && !MediaController.getInstance().isPlayingMessage(currentMessageObject) && photoImage.getVisible()) {
             int drawable = 4;
             if (currentMessageObject.messageOwner.destroyTime != 0) {
                 if (currentMessageObject.isOutOwner()) {
@@ -3766,24 +3792,30 @@ private void drawContent(Canvas canvas) {
                 }
             }
             setDrawableBounds(Theme.chat_photoStatesDrawables[drawable][buttonPressed], buttonX, buttonY);
-            Theme.chat_photoStatesDrawables[drawable][buttonPressed].setAlpha((int) (255 * (1.0f - radialProgress.getAlpha())));
+            Theme.chat_photoStatesDrawables[drawable][buttonPressed].setAlpha((int) (255 * (1.0f - radialProgress.getAlpha()) * controlsAlpha));
             Theme.chat_photoStatesDrawables[drawable][buttonPressed].draw(canvas);
-            if (!currentMessageObject.isOutOwner() && currentMessageObject.messageOwner.destroyTime != 0) {
-                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-                float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-                canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, Theme.chat_deleteProgressPaint);
-                if (progress != 0) {
-                    int offset = AndroidUtilities.dp(2);
-                    invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
+            if (currentMessageObject.messageOwner.destroyTime != 0) {
+                if (!currentMessageObject.isOutOwner()) {
+                    long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+                    float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
+                    Theme.chat_deleteProgressPaint.setAlpha((int) (255 * controlsAlpha));
+                    canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, Theme.chat_deleteProgressPaint);
+                    if (progress != 0) {
+                        int offset = AndroidUtilities.dp(2);
+                        invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
+                    }
                 }
                 updateSecretTimeText(currentMessageObject);
             }
         }
 
         if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF || currentMessageObject.type == 8) {
-            if (photoImage.getVisible() && !hasGamePreview) {
+            if (photoImage.getVisible() && !hasGamePreview && !currentMessageObject.isSecretPhoto()) {
+                int oldAlpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
+                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (oldAlpha * controlsAlpha));
                 setDrawableBounds(Theme.chat_msgMediaMenuDrawable, otherX = photoImage.getImageX() + photoImage.getImageWidth() - AndroidUtilities.dp(14), otherY = photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                 Theme.chat_msgMediaMenuDrawable.draw(canvas);
+                Theme.chat_msgMediaMenuDrawable.setAlpha(oldAlpha);
             }
         } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_ROUND || currentMessageObject.type == 5) {
             if (durationLayout != null) {
@@ -3900,9 +3932,14 @@ private void drawContent(Canvas canvas) {
 
         if (currentMessageObject.type == 1 || documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
             if (photoImage.getVisible()) {
-                if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
-                    setDrawableBounds(Theme.chat_msgMediaMenuDrawable, otherX = photoImage.getImageX() + photoImage.getImageWidth() - AndroidUtilities.dp(14), otherY = photoImage.getImageY() + AndroidUtilities.dp(8.1f));
-                    Theme.chat_msgMediaMenuDrawable.draw(canvas);
+                if (!currentMessageObject.isSecretPhoto()) {
+                    if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                        int oldAlpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
+                        Theme.chat_msgMediaMenuDrawable.setAlpha((int) (oldAlpha * controlsAlpha));
+                        setDrawableBounds(Theme.chat_msgMediaMenuDrawable, otherX = photoImage.getImageX() + photoImage.getImageWidth() - AndroidUtilities.dp(14), otherY = photoImage.getImageY() + AndroidUtilities.dp(8.1f));
+                        Theme.chat_msgMediaMenuDrawable.draw(canvas);
+                        Theme.chat_msgMediaMenuDrawable.setAlpha(oldAlpha);
+                    }
                 }
 
                 if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
@@ -3910,12 +3947,17 @@ private void drawContent(Canvas canvas) {
                     int x1 = photoImage.getImageX() + AndroidUtilities.dp(4);
                     int y1 = photoImage.getImageY() + AndroidUtilities.dp(4);
                     rect.set(x1, y1, x1 + infoWidth + AndroidUtilities.dp(8), y1 + AndroidUtilities.dp(16.5f));
+                    int oldAlpha = Theme.chat_timeBackgroundPaint.getAlpha();
+                    Theme.chat_timeBackgroundPaint.setAlpha((int) (oldAlpha * controlsAlpha));
                     canvas.drawRoundRect(rect, AndroidUtilities.dp(4), AndroidUtilities.dp(4), Theme.chat_timeBackgroundPaint);
+                    Theme.chat_timeBackgroundPaint.setAlpha(oldAlpha);
 
                     canvas.save();
                     canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dp(5.5f));
+                    Theme.chat_infoPaint.setAlpha((int) (255 * controlsAlpha));
                     infoLayout.draw(canvas);
                     canvas.restore();
+                    Theme.chat_infoPaint.setAlpha(255);
                 }
             }
         } else {
@@ -4471,12 +4513,16 @@ public void updateButtonState(boolean animated) {
                     invalidate();
                 } else {
                     MediaController.getInstance().removeLoadingFileObserver(this);
-                    if (currentMessageObject.type == 8 && !photoImage.isAllowStartAnimation()) {
-                        buttonState = 2;
-                    } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
-                        buttonState = 3;
-                    } else {
+                    if (currentMessageObject.isSecretPhoto()) {
                         buttonState = -1;
+                    } else {
+                        if (currentMessageObject.type == 8 && !photoImage.isAllowStartAnimation()) {
+                            buttonState = 2;
+                        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                            buttonState = 3;
+                        } else {
+                            buttonState = -1;
+                        }
                     }
                     radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
                     if (photoNotSet) {
@@ -4500,31 +4546,31 @@ private void didPressedButton(boolean animated) {
                 cancelLoading = false;
                 radialProgress.setProgress(0, false);
                 if (currentMessageObject.type == 1) {
-                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, currentPhotoObject.size, null, false);
+                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, currentPhotoObject.size, null, currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                 } else if (currentMessageObject.type == 8) {
                     currentMessageObject.gifState = 2;
-                    photoImage.setImage(currentMessageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, currentMessageObject.messageOwner.media.document.size, null, false);
+                    photoImage.setImage(currentMessageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, currentMessageObject.messageOwner.media.document.size, null, 0);
                 } else if (currentMessageObject.isRoundVideo()) {
                     if (currentMessageObject.isSecretMedia()) {
-                        FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, true);
+                        FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, 1);
                     } else {
                         currentMessageObject.gifState = 2;
                         TLRPC.Document document = currentMessageObject.getDocument();
-                        photoImage.setImage(document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, document.size, null, false);
+                        photoImage.setImage(document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilterThumb, document.size, null, 0);
                     }
                 } else if (currentMessageObject.type == 9) {
-                    FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, false, false);
+                    FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, false, 0);
                 } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
-                    FileLoader.getInstance().loadFile(documentAttach, true, false);
+                    FileLoader.getInstance().loadFile(documentAttach, true, currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                 } else if (currentMessageObject.type == 0 && documentAttachType != DOCUMENT_ATTACH_TYPE_NONE) {
                     if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
-                        photoImage.setImage(currentMessageObject.messageOwner.media.webpage.document, null, currentPhotoObject.location, currentPhotoFilterThumb, currentMessageObject.messageOwner.media.webpage.document.size, null, false);
+                        photoImage.setImage(currentMessageObject.messageOwner.media.webpage.document, null, currentPhotoObject.location, currentPhotoFilterThumb, currentMessageObject.messageOwner.media.webpage.document.size, null, 0);
                         currentMessageObject.gifState = 2;
                     } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
-                        FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.webpage.document, false, false);
+                        FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.webpage.document, false, 0);
                     }
                 } else {
-                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, 0);
                 }
                 buttonState = 1;
                 radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
@@ -4558,7 +4604,7 @@ private void didPressedButton(boolean animated) {
         } else if (buttonState == 2) {
             if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
                 radialProgress.setProgress(0, false);
-                FileLoader.getInstance().loadFile(documentAttach, true, false);
+                FileLoader.getInstance().loadFile(documentAttach, true, 0);
                 buttonState = 4;
                 radialProgress.setBackground(getDrawableForCurrentState(), true, false);
                 invalidate();
@@ -4673,10 +4719,20 @@ public void setAllowAssistant(boolean value) {
     }
 
     private void measureTime(MessageObject messageObject) {
-        boolean hasSign = !messageObject.isOutOwner() && messageObject.messageOwner.from_id > 0 && messageObject.messageOwner.post;
-        TLRPC.User signUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-        if (hasSign && signUser == null) {
-            hasSign = false;
+        CharSequence signString;
+        if (messageObject.messageOwner.post_author != null) {
+            signString = messageObject.messageOwner.post_author.replace("\n", "");
+        } else if (messageObject.messageOwner.fwd_from != null && messageObject.messageOwner.fwd_from.post_author != null) {
+            signString = messageObject.messageOwner.fwd_from.post_author.replace("\n", "");
+        } else if (!messageObject.isOutOwner() && messageObject.messageOwner.from_id > 0 && messageObject.messageOwner.post) {
+            TLRPC.User signUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
+            if (signUser != null) {
+                signString = ContactsController.formatName(signUser.first_name, signUser.last_name).replace('\n', ' ');
+            } else {
+                signString = null;
+            }
+        } else {
+            signString = null;
         }
         String timeString;
         TLRPC.User author = null;
@@ -4688,7 +4744,7 @@ private void measureTime(MessageObject messageObject) {
         } else {
             timeString = LocaleController.getInstance().formatterDay.format((long) (messageObject.messageOwner.date) * 1000);
         }
-        if (hasSign) {
+        if (signString != null) {
             currentTimeString = ", " + timeString;
         } else {
             currentTimeString = timeString;
@@ -4699,18 +4755,17 @@ private void measureTime(MessageObject messageObject) {
             viewsTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(currentViewsString));
             timeWidth += viewsTextWidth + Theme.chat_msgInViewsDrawable.getIntrinsicWidth() + AndroidUtilities.dp(10);
         }
-        if (hasSign) {
+        if (signString != null) {
             if (availableTimeWidth == 0) {
                 availableTimeWidth = AndroidUtilities.dp(1000);
             }
-            CharSequence name = ContactsController.formatName(signUser.first_name, signUser.last_name).replace('\n', ' ');
             int widthForSign = availableTimeWidth - timeWidth;
-            int width = (int) Math.ceil(Theme.chat_timePaint.measureText(name, 0, name.length()));
+            int width = (int) Math.ceil(Theme.chat_timePaint.measureText(signString, 0, signString.length()));
             if (width > widthForSign) {
-                name = TextUtils.ellipsize(name, Theme.chat_timePaint, widthForSign, TextUtils.TruncateAt.END);
+                signString = TextUtils.ellipsize(signString, Theme.chat_timePaint, widthForSign, TextUtils.TruncateAt.END);
                 width = widthForSign;
             }
-            currentTimeString = name + currentTimeString;
+            currentTimeString = signString + currentTimeString;
             timeTextWidth += width;
             timeWidth += width;
         }
@@ -4791,7 +4846,7 @@ private void setMessageObjectInternal(MessageObject messageObject) {
                 currentPhoto = null;
                 avatarDrawable.setInfo(messageObject.messageOwner.from_id, null, null, false);
             }
-            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, false);
+            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, 0);
         }
 
 
@@ -4970,7 +5025,7 @@ private void setMessageObjectInternal(MessageObject messageObject) {
                         replyImageReceiver.setRoundRadius(0);
                     }
                     currentReplyPhoto = photoSize.location;
-                    replyImageReceiver.setImage(photoSize.location, "50_50", null, null, true);
+                    replyImageReceiver.setImage(photoSize.location, "50_50", null, null, 1);
                     needReplyImage = true;
                     maxWidth -= AndroidUtilities.dp(44);
                 }
@@ -5351,10 +5406,14 @@ protected void onDraw(Canvas canvas) {
                 } else {
                     paint = Theme.chat_timeBackgroundPaint;
                 }
+                int oldAlpha = paint.getAlpha();
+                paint.setAlpha((int) (oldAlpha * controlsAlpha));
+                Theme.chat_timePaint.setAlpha((int) (255 * controlsAlpha));
                 int x1 = timeX - AndroidUtilities.dp(4);
                 int y1 = layoutHeight - AndroidUtilities.dp(28);
                 rect.set(x1, y1, x1 + timeWidth + AndroidUtilities.dp(8 + (currentMessageObject.isOutOwner() ? 20 : 0)), y1 + AndroidUtilities.dp(17));
                 canvas.drawRoundRect(rect, AndroidUtilities.dp(4), AndroidUtilities.dp(4), paint);
+                paint.setAlpha(oldAlpha);
 
                 int additionalX = (int) (-timeLayout.getLineLeft(0));
                 if ((currentMessageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
@@ -5381,8 +5440,11 @@ protected void onDraw(Canvas canvas) {
                         } else {
                             viewsDrawable = Theme.chat_msgMediaViewsDrawable;
                         }
+                        oldAlpha = ((BitmapDrawable) viewsDrawable).getPaint().getAlpha();
+                        viewsDrawable.setAlpha((int) (controlsAlpha * oldAlpha));
                         setDrawableBounds(viewsDrawable, timeX, layoutHeight - AndroidUtilities.dp(10.5f) - timeLayout.getHeight());
                         viewsDrawable.draw(canvas);
+                        viewsDrawable.setAlpha(oldAlpha);
 
                         if (viewsLayout != null) {
                             canvas.save();
@@ -5397,6 +5459,7 @@ protected void onDraw(Canvas canvas) {
                 canvas.translate(timeX + additionalX, layoutHeight - AndroidUtilities.dp(12.3f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
+                Theme.chat_timePaint.setAlpha(255);
             } else {
                 int additionalX = (int) (-timeLayout.getLineLeft(0));
                 if ((currentMessageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
@@ -5448,7 +5511,7 @@ protected void onDraw(Canvas canvas) {
                 boolean drawCheck2 = false;
                 boolean drawClock = false;
                 boolean drawError = false;
-                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
+                boolean isBroadcast = (int) (currentMessageObject.getDialogId() >> 32) == 1;
 
                 if (currentMessageObject.isSending()) {
                     drawCheck1 = false;
@@ -5521,7 +5584,9 @@ protected void onDraw(Canvas canvas) {
                                 } else {
                                     setDrawableBounds(Theme.chat_msgMediaCheckDrawable, layoutWidth - AndroidUtilities.dp(21.5f) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.5f) - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight());
                                 }
+                                Theme.chat_msgMediaCheckDrawable.setAlpha((int) (255 * controlsAlpha));
                                 Theme.chat_msgMediaCheckDrawable.draw(canvas);
+                                Theme.chat_msgMediaCheckDrawable.setAlpha(255);
                             }
                         }
                     }
@@ -5536,7 +5601,9 @@ protected void onDraw(Canvas canvas) {
                                 Theme.chat_msgStickerHalfCheckDrawable.draw(canvas);
                             } else {
                                 setDrawableBounds(Theme.chat_msgMediaHalfCheckDrawable, layoutWidth - AndroidUtilities.dp(21.5f) - Theme.chat_msgMediaHalfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.5f) - Theme.chat_msgMediaHalfCheckDrawable.getIntrinsicHeight());
+                                Theme.chat_msgMediaHalfCheckDrawable.setAlpha((int) (255 * controlsAlpha));
                                 Theme.chat_msgMediaHalfCheckDrawable.draw(canvas);
+                                Theme.chat_msgMediaHalfCheckDrawable.setAlpha(255);
                             }
                         }
                     }
@@ -5558,6 +5625,21 @@ protected void onDraw(Canvas canvas) {
                 }
             }
         }
+
+        if (controlsAlpha != 1.0f) {
+            long newTime = System.currentTimeMillis();
+            long dt = Math.abs(lastControlsAlphaChangeTime - newTime);
+            if (dt > 17) {
+                dt = 17;
+            }
+            totalChangeTime += dt;
+            if (totalChangeTime > 100) {
+                totalChangeTime = 100;
+            }
+            lastControlsAlphaChangeTime = newTime;
+            controlsAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(totalChangeTime / 100.0f);
+            invalidate();
+        }
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
index 7f55176c7..18b29b73d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
@@ -260,15 +260,15 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
             if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
                 if (documentAttach != null) {
-                    linkImageView.setImage(documentAttach, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, documentAttach.size, ext, false);
+                    linkImageView.setImage(documentAttach, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, documentAttach.size, ext, 0);
                 } else {
-                    linkImageView.setImage(null, url, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, -1, ext, true);
+                    linkImageView.setImage(null, url, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, -1, ext, 1);
                 }
             } else {
                 if (currentPhotoObject != null) {
-                    linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, currentPhotoObject.size, ext, false);
+                    linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, currentPhotoObject.size, ext, 0);
                 } else {
-                    linkImageView.setImage(null, url, currentPhotoFilter, null, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, -1, ext, true);
+                    linkImageView.setImage(null, url, currentPhotoFilter, null, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, -1, ext, 1);
                 }
             }
             drawLinkImageView = true;
@@ -340,6 +340,7 @@ private void setAttachType() {
             message.date = (int) (System.currentTimeMillis() / 1000);
             message.message = "-1";
             message.media = new TLRPC.TL_messageMediaDocument();
+            message.media.flags |= 3;
             message.media.document = new TLRPC.TL_document();
             message.flags |= TLRPC.MESSAGE_FLAG_HAS_MEDIA | TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
 
@@ -534,7 +535,7 @@ private void didPressedButton() {
             } else if (buttonState == 2) {
                 radialProgress.setProgress(0, false);
                 if (documentAttach != null) {
-                    FileLoader.getInstance().loadFile(documentAttach, true, false);
+                    FileLoader.getInstance().loadFile(documentAttach, true, 0);
                 } else {
                     ImageLoader.getInstance().loadHttpFile(inlineResult.content_url, documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC ? "mp3" : "ogg");
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 9b1a39311..3749c46fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -27,6 +27,7 @@
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.query.DraftQuery;
+import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
@@ -465,7 +466,11 @@ public void buildLayout() {
                                 }
                                 messageString = Emoji.replaceEmoji(stringBuilder, Theme.dialogs_messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                             } else {
-                                if (message.caption != null) {
+                                if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && message.messageOwner.media.photo instanceof TLRPC.TL_photoEmpty && message.messageOwner.media.ttl_seconds != 0) {
+                                    messageString = LocaleController.getString("AttachPhotoExpired", R.string.AttachPhotoExpired);
+                                } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaDocument && message.messageOwner.media.document instanceof TLRPC.TL_documentEmpty && message.messageOwner.media.ttl_seconds != 0) {
+                                    messageString = LocaleController.getString("AttachVideoExpired", R.string.AttachVideoExpired);
+                                } else if (message.caption != null) {
                                     messageString = message.caption;
                                 } else {
                                     if (message.messageOwner.media instanceof TLRPC.TL_messageMediaGame) {
@@ -797,7 +802,7 @@ public void update(int mask) {
             drawPin = customDialog.pinned;
             dialogMuted = customDialog.muted;
             avatarDrawable.setInfo(customDialog.id, customDialog.name, null, false);
-            avatarImage.setImage(null, "50_50", avatarDrawable, null, false);
+            avatarImage.setImage((TLObject) null, "50_50", avatarDrawable, null, 0);
         } else {
             if (isDialogCell) {
                 TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
@@ -912,7 +917,7 @@ public void update(int mask) {
                 }
                 avatarDrawable.setInfo(chat);
             }
-            avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
+            avatarImage.setImage(photo, "50_50", avatarDrawable, null, 0);
         }
         if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
             buildLayout();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
index fa8f124b8..279b7bf79 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
@@ -129,13 +129,13 @@ protected void onDraw(Canvas canvas) {
                 }
             }
         };
-        addButton.setPadding(AndroidUtilities.dp(17), 0, AndroidUtilities.dp(17), 0);
         addButton.setGravity(Gravity.CENTER);
         addButton.setTextColor(Theme.getColor(Theme.key_featuredStickers_buttonText));
         addButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         addButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         addButton.setBackgroundDrawable(Theme.createSimpleSelectorRoundRectDrawable(AndroidUtilities.dp(4), Theme.getColor(Theme.key_featuredStickers_addButton), Theme.getColor(Theme.key_featuredStickers_addButtonPressed)));
         addButton.setText(LocaleController.getString("Add", R.string.Add).toUpperCase());
+        addButton.setPadding(AndroidUtilities.dp(17), 0, AndroidUtilities.dp(17), 0);
         addView(addButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 28, Gravity.TOP | (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT), LocaleController.isRTL ? 14 : 0, 18, LocaleController.isRTL ? 0 : 14, 0));
 
         checkImage = new ImageView(context);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PaymentInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PaymentInfoCell.java
index 000330bc1..114b2d6a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PaymentInfoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PaymentInfoCell.java
@@ -100,7 +100,7 @@ public void setInvoice(TLRPC.TL_messageMediaInvoice invoice, String botname) {
             detailTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 10 : 123, 33, LocaleController.isRTL ? 123 : 10, 0));
             detailExTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 10 : 123, 90, LocaleController.isRTL ? 123 : 10, 0));
             imageView.setVisibility(VISIBLE);
-            imageView.getImageReceiver().setImage(invoice.photo, null, String.format(Locale.US, "%d_%d", width, height), null, null, null, -1, null, true);
+            imageView.getImageReceiver().setImage(invoice.photo, null, String.format(Locale.US, "%d_%d", width, height), null, null, null, -1, null, 1);
         } else {
             nameTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 9, 17, 0));
             detailTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 33, 17, 0));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditRadioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditRadioCell.java
new file mode 100644
index 000000000..4eb81aeea
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditRadioCell.java
@@ -0,0 +1,124 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.RadioButton;
+
+public class PhotoEditRadioCell extends FrameLayout {
+
+    private TextView nameTextView;
+    private int currentType;
+    private LinearLayout tintButtonsContainer;
+    private OnClickListener onClickListener;
+    private int currentColor;
+
+    private final int[] tintShadowColors = new int[] {
+            0x00000000,
+            0xffff4d4d,
+            0xfff48022,
+            0xffffcd00,
+            0xff81d281,
+            0xff71c5d6,
+            0xff0072bc,
+            0xff662d91
+    };
+
+    private final int[] tintHighlighsColors = new int[] {
+            0x00000000,
+            0xffef9286,
+            0xffeacea2,
+            0xfff2e17c,
+            0xffa4edae,
+            0xff89dce5,
+            0xff2e8bc8,
+            0xffcd98e5
+    };
+
+    public PhotoEditRadioCell(Context context) {
+        super(context);
+
+        nameTextView = new TextView(context);
+        nameTextView.setGravity(Gravity.RIGHT);
+        nameTextView.setTextColor(0xffffffff);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+        nameTextView.setMaxLines(1);
+        nameTextView.setSingleLine(true);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(nameTextView, LayoutHelper.createFrame(80, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.CENTER_VERTICAL, 0, 0, 0, 0));
+
+        tintButtonsContainer = new LinearLayout(context);
+        tintButtonsContainer.setOrientation(LinearLayout.HORIZONTAL);
+        for (int a = 0; a < tintShadowColors.length; a++) {
+            RadioButton radioButton = new RadioButton(context);
+            radioButton.setSize(AndroidUtilities.dp(20));
+            radioButton.setTag(a);
+            tintButtonsContainer.addView(radioButton, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f / tintShadowColors.length));
+            radioButton.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    RadioButton radioButton = (RadioButton) v;
+                    if (currentType == 0) {
+                        currentColor = tintShadowColors[(Integer) radioButton.getTag()];
+                    } else {
+                        currentColor = tintHighlighsColors[(Integer) radioButton.getTag()];
+                    }
+                    updateSelectedTintButton(true);
+                    onClickListener.onClick(PhotoEditRadioCell.this);
+                }
+            });
+        }
+        addView(tintButtonsContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 40, Gravity.LEFT | Gravity.TOP, 96, 0, 24, 0));
+    }
+
+    public int getCurrentColor() {
+        return currentColor;
+    }
+
+    private void updateSelectedTintButton(boolean animated) {
+        int childCount = tintButtonsContainer.getChildCount();
+        for (int a = 0; a < childCount; a++) {
+            View child = tintButtonsContainer.getChildAt(a);
+            if (child instanceof RadioButton) {
+                RadioButton radioButton = (RadioButton) child;
+                int num = (Integer) radioButton.getTag();
+                int color2 = currentType == 0 ? tintShadowColors[num] : tintHighlighsColors[num];
+                radioButton.setChecked(currentColor == color2, animated);
+                radioButton.setColor(num == 0 ? 0xffffffff : (currentType == 0 ? tintShadowColors[num] : tintHighlighsColors[num]), num == 0 ? 0xffffffff : (currentType == 0 ? tintShadowColors[num] : tintHighlighsColors[num]));
+            }
+        }
+    }
+
+    @Override
+    public void setOnClickListener(OnClickListener l) {
+        onClickListener = l;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
+    }
+
+    public void setIconAndTextAndValue(String text, int type, int value) {
+        currentType = type;
+        currentColor = value;
+        nameTextView.setText(text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase());
+        updateSelectedTintButton(false);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
index 551806160..9679d0506 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
@@ -8,72 +8,136 @@
 
 package org.telegram.ui.Cells;
 
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
-import android.widget.ImageView;
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.PhotoEditorSeekBar;
 
 public class PhotoEditToolCell extends FrameLayout {
 
-    private ImageView iconImage;
     private TextView nameTextView;
     private TextView valueTextView;
+    private PhotoEditorSeekBar seekBar;
+    private AnimatorSet valueAnimation;
+    private Runnable hideValueRunnable = new Runnable() {
+        @Override
+        public void run() {
+            valueTextView.setTag(null);
+            valueAnimation = new AnimatorSet();
+            valueAnimation.playTogether(
+                    ObjectAnimator.ofFloat(valueTextView, "alpha", 0.0f),
+                    ObjectAnimator.ofFloat(nameTextView, "alpha", 1.0f));
+            valueAnimation.setDuration(180);
+            valueAnimation.setInterpolator(new DecelerateInterpolator());
+            valueAnimation.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (animation.equals(valueAnimation)) {
+                        valueAnimation = null;
+                    }
+                }
+            });
+            valueAnimation.start();
+        }
+    };
 
-    private int width;
-
-    public PhotoEditToolCell(Context context, int w) {
+    public PhotoEditToolCell(Context context) {
         super(context);
 
-        width = w;
-
-        iconImage = new ImageView(context);
-        iconImage.setScaleType(ImageView.ScaleType.CENTER);
-        addView(iconImage, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.CENTER, 0, 0, 7, 12));
-
         nameTextView = new TextView(context);
-        nameTextView.setGravity(Gravity.CENTER);
+        nameTextView.setGravity(Gravity.RIGHT);
         nameTextView.setTextColor(0xffffffff);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 10);
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
         nameTextView.setMaxLines(1);
         nameTextView.setSingleLine(true);
         nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER | Gravity.BOTTOM, 0, 0, 7, 0));
+        addView(nameTextView, LayoutHelper.createFrame(80, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.CENTER_VERTICAL, 0, 0, 0, 0));
 
         valueTextView = new TextView(context);
         valueTextView.setTextColor(0xff6cc3ff);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 11);
-        valueTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+        valueTextView.setGravity(Gravity.RIGHT);
         valueTextView.setSingleLine(true);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 50, 3, 0, 0));
+        addView(valueTextView, LayoutHelper.createFrame(80, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.CENTER_VERTICAL, 0, 0, 0, 0));
+
+        seekBar = new PhotoEditorSeekBar(context);
+        addView(seekBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 40, Gravity.LEFT | Gravity.CENTER_VERTICAL, 96, 0, 24, 0));
+    }
+
+    public void setSeekBarDelegate(final PhotoEditorSeekBar.PhotoEditorSeekBarDelegate photoEditorSeekBarDelegate) {
+        seekBar.setDelegate(new PhotoEditorSeekBar.PhotoEditorSeekBarDelegate() {
+            @Override
+            public void onProgressChanged(int i, int progress) {
+                photoEditorSeekBarDelegate.onProgressChanged(i, progress);
+                if (progress > 0) {
+                    valueTextView.setText("+" + progress);
+                } else {
+                    valueTextView.setText("" + progress);
+                }
+                if (valueTextView.getTag() == null) {
+                    if (valueAnimation != null) {
+                        valueAnimation.cancel();
+                    }
+                    valueTextView.setTag(1);
+                    valueAnimation = new AnimatorSet();
+                    valueAnimation.playTogether(
+                            ObjectAnimator.ofFloat(valueTextView, "alpha", 1.0f),
+                            ObjectAnimator.ofFloat(nameTextView, "alpha", 0.0f));
+                    valueAnimation.setDuration(180);
+                    valueAnimation.setInterpolator(new DecelerateInterpolator());
+                    valueAnimation.addListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            AndroidUtilities.runOnUIThread(hideValueRunnable, 1000);
+                        }
+                    });
+                    valueAnimation.start();
+                } else {
+                    AndroidUtilities.cancelRunOnUIThread(hideValueRunnable);
+                    AndroidUtilities.runOnUIThread(hideValueRunnable, 1000);
+                }
+            }
+        });
+    }
+
+    @Override
+    public void setTag(Object tag) {
+        super.setTag(tag);
+        seekBar.setTag(tag);
     }
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(60), MeasureSpec.EXACTLY));
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
     }
 
-    public void setIconAndTextAndValue(int resId, String text, float value) {
-        iconImage.setImageResource(resId);
-        nameTextView.setText(text.toUpperCase());
-        if (value == 0) {
-            valueTextView.setText("");
-        } else if (value > 0) {
+    public void setIconAndTextAndValue(String text, float value, int min, int max) {
+        if (valueAnimation != null) {
+            valueAnimation.cancel();
+            valueAnimation = null;
+        }
+        AndroidUtilities.cancelRunOnUIThread(hideValueRunnable);
+        valueTextView.setTag(null);
+        nameTextView.setText(text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase());
+        if (value > 0) {
             valueTextView.setText("+" + (int) value);
         } else {
             valueTextView.setText("" + (int) value);
         }
-    }
-
-    public void setIconAndTextAndValue(int resId, String text, String value) {
-        iconImage.setImageResource(resId);
-        nameTextView.setText(text.toUpperCase());
-        valueTextView.setText(value);
+        valueTextView.setAlpha(0.0f);
+        nameTextView.setAlpha(1.0f);
+        seekBar.setMinMax(min, max);
+        seekBar.setProgress((int) value, false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
index 4c1e0f700..4dfb2928a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -429,7 +429,7 @@ public void update(int mask) {
 
 
         lastAvatar = photo;
-        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
+        avatarImage.setImage(photo, "50_50", avatarDrawable, null, 0);
 
         if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
             buildLayout();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
index b5f6d61ae..800894ed2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
@@ -14,7 +14,6 @@
 import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.os.Build;
 import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
@@ -279,10 +278,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             }
             String filter = String.format(Locale.US, "%d_%d", maxPhotoWidth, maxPhotoWidth);
             if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                linkImageView.setImage(currentPhotoObject.location, filter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, String.format(Locale.US, "%d_%d_b", maxPhotoWidth, maxPhotoWidth), 0, null, false);
+                linkImageView.setImage(currentPhotoObject.location, filter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, String.format(Locale.US, "%d_%d_b", maxPhotoWidth, maxPhotoWidth), 0, null, 0);
             } else {
                 if (currentPhotoObjectThumb != null) {
-                    linkImageView.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", maxPhotoWidth, maxPhotoWidth), 0, null, false);
+                    linkImageView.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", maxPhotoWidth, maxPhotoWidth), 0, null, 0);
                 } else {
                     linkImageView.setImageBitmap((Drawable) null);
                 }
@@ -378,7 +377,7 @@ public boolean onTouchEvent(MotionEvent event) {
                             } else if (linkPreviewPressed) {
                                 try {
                                     TLRPC.WebPage webPage = pressedLink == 0 && message.messageOwner.media != null ? message.messageOwner.media.webpage : null;
-                                    if (webPage != null && Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                                    if (webPage != null && webPage.embed_url != null && webPage.embed_url.length() != 0) {
                                         delegate.needOpenWebView(webPage);
                                     } else {
                                         Browser.openUrl(getContext(), links.get(pressedLink));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
index 81578574e..191847ef6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
@@ -28,6 +28,7 @@
     private TextView textView;
     private TextView valueTextView;
     private ImageView imageView;
+    private boolean multiline;
 
     public TextDetailCell(Context context) {
         super(context);
@@ -35,9 +36,6 @@ public TextDetailCell(Context context) {
         textView = new TextView(context);
         textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
         textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
         addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 10, LocaleController.isRTL ? 71 : 16, 0));
 
@@ -53,12 +51,28 @@ public TextDetailCell(Context context) {
         imageView = new ImageView(context);
         imageView.setScaleType(ImageView.ScaleType.CENTER);
         imageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon), PorterDuff.Mode.MULTIPLY));
-        addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 0 : 16, 0, LocaleController.isRTL ? 16 : 0, 0));
+        addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 16, 11, LocaleController.isRTL ? 16 : 0, 0));
     }
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), View.MeasureSpec.EXACTLY));
+        if (!multiline) {
+            super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), View.MeasureSpec.EXACTLY));
+        } else {
+            measureChildWithMargins(textView, widthMeasureSpec, 0, heightMeasureSpec, 0);
+            measureChildWithMargins(valueTextView, widthMeasureSpec, 0, heightMeasureSpec, 0);
+            measureChildWithMargins(imageView, widthMeasureSpec, 0, heightMeasureSpec, 0);
+            setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), Math.max(AndroidUtilities.dp(64), textView.getMeasuredHeight() + valueTextView.getMeasuredHeight() + AndroidUtilities.dp(10 + 10)));
+        }
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        if (multiline) {
+            int y = textView.getMeasuredHeight() + AndroidUtilities.dp(10 + 3);
+            valueTextView.layout(valueTextView.getLeft(), y, valueTextView.getRight(), y + valueTextView.getMeasuredHeight());
+        }
     }
 
     public void setTextAndValue(String text, String value) {
@@ -67,10 +81,26 @@ public void setTextAndValue(String text, String value) {
         imageView.setVisibility(INVISIBLE);
     }
 
-    public void setTextAndValueAndIcon(String text, String value, int resId) {
+    public void setTextAndValueAndIcon(String text, String value, int resId, int offset) {
         textView.setText(text);
         valueTextView.setText(value);
         imageView.setVisibility(VISIBLE);
         imageView.setImageResource(resId);
+        if (offset == 0) {
+            imageView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 0 : 16, 0, LocaleController.isRTL ? 16 : 0, 0));
+        } else {
+            imageView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 16, offset, LocaleController.isRTL ? 16 : 0, 0));
+        }
+    }
+
+    public void setMultiline(boolean value) {
+        multiline = value;
+        if (multiline) {
+            textView.setSingleLine(false);
+        } else {
+            textView.setLines(1);
+            textView.setMaxLines(1);
+            textView.setSingleLine(true);
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java
new file mode 100644
index 000000000..d74d69a64
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java
@@ -0,0 +1,292 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Vibrator;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.Spanned;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+import org.telegram.ui.Components.AlertsCreator;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ChangeBioActivity extends BaseFragment {
+
+    private EditText firstNameField;
+    private View doneButton;
+    private TextView checkTextView;
+    private TextView helpTextView;
+
+    private final static int done_button = 1;
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("UserBio", R.string.UserBio));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+                    saveName();
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        fragmentView = new LinearLayout(context);
+        LinearLayout linearLayout = (LinearLayout) fragmentView;
+        linearLayout.setOrientation(LinearLayout.VERTICAL);
+        fragmentView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        FrameLayout fieldContainer = new FrameLayout(context);
+        linearLayout.addView(fieldContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 24, 24, 20, 0));
+
+        firstNameField = new EditText(context);
+        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        firstNameField.setHintTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteHintText));
+        firstNameField.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
+        firstNameField.setBackgroundDrawable(Theme.createEditTextDrawable(context, false));
+        firstNameField.setMaxLines(4);
+        firstNameField.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 24 : 0), 0, AndroidUtilities.dp(LocaleController.isRTL ? 0 : 24), AndroidUtilities.dp(6));
+        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        firstNameField.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+        firstNameField.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+        firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        InputFilter[] inputFilters = new InputFilter[1];
+        inputFilters[0] = new InputFilter.LengthFilter(70) {
+            @Override
+            public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
+                if (source != null && TextUtils.indexOf(source, '\n') != -1) {
+                    doneButton.performClick();
+                    return "";
+                }
+                CharSequence result = super.filter(source, start, end, dest, dstart, dend);
+                if (result != null && source != null && result.length() != source.length()) {
+                    Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
+                    if (v != null) {
+                        v.vibrate(200);
+                    }
+                    AndroidUtilities.shakeView(checkTextView, 2, 0);
+                }
+                return result;
+            }
+        };
+        firstNameField.setFilters(inputFilters);
+        firstNameField.setMinHeight(AndroidUtilities.dp(36));
+        firstNameField.setHint(LocaleController.getString("UserBio", R.string.UserBio));
+        AndroidUtilities.clearCursorDrawable(firstNameField);
+        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                    doneButton.performClick();
+                    return true;
+                }
+                return false;
+            }
+        });
+        firstNameField.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                checkTextView.setText("" + (70 - firstNameField.length()));
+            }
+        });
+
+        fieldContainer.addView(firstNameField, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 0, 0, 4, 0));
+
+        checkTextView = new TextView(context);
+        checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        checkTextView.setText("70");
+        checkTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText4));
+        fieldContainer.addView(checkTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT, 0, 4, 4, 0));
+
+        helpTextView = new TextView(context);
+        helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        helpTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText8));
+        helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        helpTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("UserBioInfo", R.string.UserBioInfo)));
+        linearLayout.addView(helpTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 24, 10, 24, 0));
+
+        TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(UserConfig.getClientUserId());
+        if (userFull != null && userFull.about != null) {
+            firstNameField.setText(userFull.about);
+            firstNameField.setSelection(firstNameField.length());
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    private void saveName() {
+        final TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(UserConfig.getClientUserId());
+        if (getParentActivity() == null || userFull == null) {
+            return;
+        }
+        String currentName = userFull.about;
+        if (currentName == null) {
+            currentName = "";
+        }
+        final String newName = firstNameField.getText().toString().replace("\n", "");
+        if (currentName.equals(newName)) {
+            finishFragment();
+            return;
+        }
+
+        final AlertDialog progressDialog = new AlertDialog(getParentActivity(), 1);
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+
+        final TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
+        req.about = newName;
+        req.flags |= 4;
+
+        final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, final TLRPC.TL_error error) {
+                if (error == null) {
+                    final TLRPC.User user = (TLRPC.User)response;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                            userFull.about = newName;
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.userInfoDidLoaded, user.id, userFull);
+                            finishFragment();
+                        }
+                    });
+                } else {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                            AlertsCreator.processError(error, ChangeBioActivity.this, req);
+                        }
+                    });
+                }
+            }
+        }, ConnectionsManager.RequestFlagFailOnServerErrors);
+        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+
+        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                try {
+                    dialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+            }
+        });
+        progressDialog.show();
+    }
+
+    @Override
+    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
+        if (isOpen) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    @Override
+    public ThemeDescription[] getThemeDescriptions() {
+        return new ThemeDescription[]{
+                new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite),
+
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector),
+
+                new ThemeDescription(firstNameField, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(firstNameField, ThemeDescription.FLAG_HINTTEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteHintText),
+                new ThemeDescription(firstNameField, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_windowBackgroundWhiteInputField),
+                new ThemeDescription(firstNameField, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_windowBackgroundWhiteInputFieldActivated),
+
+                new ThemeDescription(helpTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteGrayText8),
+
+                new ThemeDescription(checkTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteGrayText4),
+        };
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
index a92d1d98f..c81e194cb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
@@ -2120,7 +2120,7 @@ public void didPressedImage(ChatMessageCell cell) {
                         MessageObject message = cell.getMessageObject();
                         if (message.type == 13) {
                             showDialog(new StickersAlert(getParentActivity(), ChannelAdminLogActivity.this, message.getInputStickerSet(), null, null));
-                        } else if (Build.VERSION.SDK_INT >= 16 && message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
+                        } else if (message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
                             PhotoViewer.getInstance().setParentActivity(getParentActivity());
                             PhotoViewer.getInstance().openPhoto(message, message.type != 0 ? dialog_id : 0, 0, ChannelAdminLogActivity.this);
                         } else if (message.type == 3) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
index 5ee0741d4..871d3618e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
@@ -285,7 +285,6 @@ public void onItemClick(View view, int position) {
                 } else if (position == removeAdminRow) {
                     if (currentType == 0) {
                         MessagesController.setUserAdminRole(chatId, currentUser, new TLRPC.TL_channelAdminRights(), isMegagroup, getFragmentForAlert(0));
-                        finishFragment();
                     } else if (currentType == 1) {
                         bannedRights = new TLRPC.TL_channelBannedRights();
                         bannedRights.view_messages = true;
@@ -298,11 +297,11 @@ public void onItemClick(View view, int position) {
                         bannedRights.embed_links = true;
                         bannedRights.until_date = 0;
                         MessagesController.setUserBannedRole(chatId, currentUser, bannedRights, isMegagroup, getFragmentForAlert(0));
-                        finishFragment();
                     }
                     if (delegate != null) {
                         delegate.didSetRights(0, adminRights, bannedRights);
                     }
+                    finishFragment();
                 } else if (position == untilDateRow) {
                     if (getParentActivity() == null) {
                         return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
index c6e827870..df638231f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
@@ -698,7 +698,8 @@ public void run() {
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.chatInfoDidLoaded) {
             TLRPC.ChatFull chatFull = (TLRPC.ChatFull) args[0];
-            if (chatFull.id == chatId) {
+            boolean byChannelUsers = (Boolean) args[2];
+            if (chatFull.id == chatId && !byChannelUsers) {
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
@@ -733,8 +734,9 @@ private void getChannelParticipants(int offset, int count) {
         }
         TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
         req.channel = MessagesController.getInputChannel(chatId);
+        final boolean byEndReached = firstEndReached;
         if (type == 0) {
-            if (firstEndReached) {
+            if (byEndReached) {
                 req.filter = new TLRPC.TL_channelParticipantsKicked();
             } else {
                 req.filter = new TLRPC.TL_channelParticipantsBanned();
@@ -772,9 +774,10 @@ public void run() {
                                 }
                             }
                             if (type == 0) {
-                                if (firstEndReached) {
+                                if (byEndReached) {
                                     participants2 = res.participants;
                                 } else {
+                                    participants2 = new ArrayList<>();
                                     participantsMap.clear();
                                     participants = res.participants;
                                     if (changeFirst) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 3bf57375e..2dbfa82c5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -310,8 +310,8 @@
     private MessageObject replyingMessageObject;
     private int editingMessageObjectReqId;
     private boolean paused = true;
-    private boolean wasPaused = false;
-    private boolean readWhenResume = false;
+    private boolean wasPaused;
+    private boolean readWhenResume;
     private TLRPC.FileLocation replyImageLocation;
     private TLRPC.FileLocation pinnedImageLocation;
     private int linkSearchRequestId;
@@ -373,7 +373,7 @@
 
     private String currentPicturePath;
 
-    protected TLRPC.ChatFull info = null;
+    protected TLRPC.ChatFull info;
 
     private HashMap<Integer, TLRPC.BotInfo> botInfo = new HashMap<>();
     private String botUser;
@@ -382,14 +382,10 @@
     private MessageObject botReplyButtons;
     private int botsCount;
     private boolean hasBotsCommands;
-    private long chatEnterTime = 0;
-    private long chatLeaveTime = 0;
+    private long chatEnterTime;
+    private long chatLeaveTime;
 
-    private String startVideoEdit = null;
-
-    private Runnable openSecretPhotoRunnable = null;
-    private float startX = 0;
-    private float startY = 0;
+    private String startVideoEdit;
 
     private FrameLayout roundVideoContainer;
     private AspectRatioFrameLayout aspectRatioFrameLayout;
@@ -681,11 +677,14 @@ public void run() {
             dialog_id = ((long) encId) << 32;
             maxMessageId[0] = maxMessageId[1] = Integer.MIN_VALUE;
             minMessageId[0] = minMessageId[1] = Integer.MAX_VALUE;
-            MediaController.getInstance().startMediaObserver();
         } else {
             return false;
         }
 
+        if (currentUser != null) {
+            MediaController.getInstance().startMediaObserver();
+        }
+
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
@@ -863,8 +862,10 @@ public void onFragmentDestroy() {
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
         }
-        if (currentEncryptedChat != null) {
+        if (currentUser != null) {
             MediaController.getInstance().stopMediaObserver();
+        }
+        if (currentEncryptedChat != null) {
             try {
                 if (Build.VERSION.SDK_INT >= 23 && (UserConfig.passcodeHash.length() == 0 || UserConfig.allowScreenCapture)) {
                     getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
@@ -1736,116 +1737,6 @@ public void onAnimationEnd(Animator animation) {
                 updateMessagesVisisblePart();
             }
         });
-        chatListView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
-                    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                chatListView.setOnItemClickListener(onItemClickListener);
-                            }
-                        }, 150);
-                        if (openSecretPhotoRunnable != null) {
-                            AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                            openSecretPhotoRunnable = null;
-                            try {
-                                Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
-                            } catch (Exception e) {
-                                FileLog.e(e);
-                            }
-                        } else if (SecretPhotoViewer.getInstance().isVisible()) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    chatListView.setOnItemLongClickListener(onItemLongClickListener);
-                                    chatListView.setLongClickable(true);
-                                }
-                            });
-                            SecretPhotoViewer.getInstance().closePhoto();
-                        }
-                    } else if (event.getAction() != MotionEvent.ACTION_DOWN) {
-                        if (SecretPhotoViewer.getInstance().isVisible()) {
-                            return true;
-                        } else if (openSecretPhotoRunnable != null) {
-                            if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                                if (Math.hypot(startX - event.getX(), startY - event.getY()) > AndroidUtilities.dp(5)) {
-                                    AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                                    openSecretPhotoRunnable = null;
-                                }
-                            } else {
-                                AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                                openSecretPhotoRunnable = null;
-                            }
-                            chatListView.setOnItemClickListener(onItemClickListener);
-                            chatListView.setOnItemLongClickListener(onItemLongClickListener);
-                            chatListView.setLongClickable(true);
-                        }
-                    }
-                }
-                return false;
-            }
-        });
-        chatListView.setOnInterceptTouchListener(new RecyclerListView.OnInterceptTouchListener() {
-            @Override
-            public boolean onInterceptTouchEvent(MotionEvent event) {
-                if (chatActivityEnterView != null && chatActivityEnterView.isEditingMessage()) {
-                    return true;
-                }
-                if (actionBar.isActionModeShowed()) {
-                    return false;
-                }
-                if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                    int x = (int) event.getX();
-                    int y = (int) event.getY();
-                    int count = chatListView.getChildCount();
-                    for (int a = 0; a < count; a++) {
-                        View view = chatListView.getChildAt(a);
-                        int top = view.getTop();
-                        int bottom = view.getBottom();
-                        if (top > y || bottom < y) {
-                            continue;
-                        }
-                        if (!(view instanceof ChatMessageCell)) {
-                            break;
-                        }
-                        final ChatMessageCell cell = (ChatMessageCell) view;
-                        final MessageObject messageObject = cell.getMessageObject();
-                        if (messageObject == null || messageObject.isSending() || messageObject.isRoundVideo() || !messageObject.isSecretPhoto() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
-                            break;
-                        }
-                        File file = FileLoader.getPathToMessage(messageObject.messageOwner);
-                        if (!file.exists()) {
-                            break;
-                        }
-                        startX = x;
-                        startY = y;
-                        chatListView.setOnItemClickListener(null);
-                        openSecretPhotoRunnable = new Runnable() {
-                            @Override
-                            public void run() {
-                                if (openSecretPhotoRunnable == null) {
-                                    return;
-                                }
-                                chatListView.requestDisallowInterceptTouchEvent(true);
-                                chatListView.setOnItemLongClickListener(null);
-                                chatListView.setLongClickable(false);
-                                openSecretPhotoRunnable = null;
-                                if (sendSecretMessageRead(messageObject)) {
-                                    cell.invalidate();
-                                }
-                                SecretPhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                SecretPhotoViewer.getInstance().openPhoto(messageObject);
-                            }
-                        };
-                        AndroidUtilities.runOnUIThread(openSecretPhotoRunnable, 100);
-                        return true;
-                    }
-                }
-                return false;
-            }
-        });
         if (scrollToPositionOnRecreate != -1) {
             chatLayoutManager.scrollToPositionWithOffset(scrollToPositionOnRecreate, scrollToOffsetOnRecreate);
             scrollToPositionOnRecreate = -1;
@@ -2450,8 +2341,7 @@ public void onItemClick(View view, int position) {
                             return;
                         }
                         TLRPC.BotInlineResult result = (TLRPC.BotInlineResult) object;
-                        if (Build.VERSION.SDK_INT >= 16 &&
-                                (result.type.equals("photo") && (result.photo != null || result.content_url != null) ||
+                        if ((result.type.equals("photo") && (result.photo != null || result.content_url != null) ||
                                 result.type.equals("gif") && (result.document != null || result.content_url != null) ||
                                 result.type.equals("video") && (result.document != null/* || result.content_url != null*/))) {
                             ArrayList<Object> arrayList = botContextResults = new ArrayList<Object>(mentionsAdapter.getSearchResultBotContext());
@@ -2570,10 +2460,8 @@ public boolean onTouch(View v, MotionEvent event) {
         contentView.addView(overlayView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
         overlayView.setVisibility(View.GONE);
 
-        if (Build.VERSION.SDK_INT >= 16) {
-            instantCameraView = new InstantCameraView(context, this);
-            contentView.addView(instantCameraView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-        }
+        instantCameraView = new InstantCameraView(context, this);
+        contentView.addView(instantCameraView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
 
         chatActivityEnterView = new ChatActivityEnterView(getParentActivity(), contentView, this, true);
         chatActivityEnterView.setDialogId(dialog_id);
@@ -2899,7 +2787,6 @@ public void onDraw(Canvas canvas) {
         searchContainer.setFocusableInTouchMode(true);
         searchContainer.setClickable(true);
         searchContainer.setPadding(0, AndroidUtilities.dp(3), 0, 0);
-        contentView.addView(searchContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.BOTTOM));
 
         searchUpButton = new ImageView(context);
         searchUpButton.setScaleType(ImageView.ScaleType.CENTER);
@@ -3096,6 +2983,8 @@ public void onClick(DialogInterface dialogInterface, int i) {
         bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
         bottomOverlayChat.addView(bottomOverlayChatText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
+        contentView.addView(searchContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.BOTTOM));
+
         chatAdapter.updateRows();
         if (loading && messages.isEmpty()) {
             progressView.setVisibility(chatAdapter.botInfoRow == -1 ? View.VISIBLE : View.INVISIBLE);
@@ -3335,14 +3224,15 @@ public void didPressedButton(int button) {
                         if (!selectedPhotos.isEmpty()) {
                             ArrayList<String> photos = new ArrayList<>();
                             ArrayList<String> captions = new ArrayList<>();
+                            ArrayList<Integer> ttls = new ArrayList<>();
                             ArrayList<ArrayList<TLRPC.InputDocument>> masks = new ArrayList<>();
                             for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
                                 MediaController.PhotoEntry photoEntry = entry.getValue();
                                 if (photoEntry.isVideo) {
                                     if (photoEntry.editedInfo != null) {
-                                        SendMessagesHelper.prepareSendingVideo(photoEntry.path, photoEntry.editedInfo.estimatedSize, photoEntry.editedInfo.estimatedDuration, photoEntry.editedInfo.resultWidth, photoEntry.editedInfo.resultHeight, photoEntry.editedInfo, dialog_id, replyingMessageObject, photoEntry.caption);
+                                        SendMessagesHelper.prepareSendingVideo(photoEntry.path, photoEntry.editedInfo.estimatedSize, photoEntry.editedInfo.estimatedDuration, photoEntry.editedInfo.resultWidth, photoEntry.editedInfo.resultHeight, photoEntry.editedInfo, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.ttl);
                                     } else {
-                                        SendMessagesHelper.prepareSendingVideo(photoEntry.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, photoEntry.caption);
+                                        SendMessagesHelper.prepareSendingVideo(photoEntry.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.ttl);
                                     }
                                     continue;
                                 }
@@ -3350,17 +3240,16 @@ public void didPressedButton(int button) {
                                     photos.add(photoEntry.imagePath);
                                     captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
                                     masks.add(!photoEntry.stickers.isEmpty() ? new ArrayList<>(photoEntry.stickers) : null);
+                                    ttls.add(photoEntry.ttl);
                                 } else if (photoEntry.path != null) {
                                     photos.add(photoEntry.path);
                                     captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
                                     masks.add(!photoEntry.stickers.isEmpty() ? new ArrayList<>(photoEntry.stickers) : null);
+                                    ttls.add(photoEntry.ttl);
                                 }
-                                photoEntry.imagePath = null;
-                                photoEntry.thumbPath = null;
-                                photoEntry.caption = null;
-                                photoEntry.stickers.clear();
+                                photoEntry.reset();
                             }
-                            SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, masks, null, button == 4);
+                            SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, masks, null, button == 4, ttls);
                             showReplyPanel(false, null, null, null, false);
                             DraftQuery.cleanDraft(dialog_id, true);
                         }
@@ -3413,7 +3302,7 @@ public boolean playFirstUnreadVoiceMessage() {
         for (int a = messages.size() - 1; a >= 0; a--) {
             MessageObject messageObject = messages.get(a);
             if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut() && messageObject.messageOwner.to_id.channel_id == 0) {
-                MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true); //TODO
+                MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                 return true;
             }
         }
@@ -3978,16 +3867,16 @@ private void processSelectedAttach(int which) {
             PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false, currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46, true, ChatActivity.this);
             fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
                 @Override
-                public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos) {
+                public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<Integer> ttls, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos) {
                     for (int a = 0; a < videos.size(); a++) {
                         MediaController.PhotoEntry video = videos.get(a);
                         if (video.editedInfo != null) {
-                            SendMessagesHelper.prepareSendingVideo(video.path, video.editedInfo.estimatedSize, video.editedInfo.estimatedDuration, video.editedInfo.resultWidth, video.editedInfo.resultHeight, video.editedInfo, dialog_id, replyingMessageObject, video.caption);
+                            SendMessagesHelper.prepareSendingVideo(video.path, video.editedInfo.estimatedSize, video.editedInfo.estimatedDuration, video.editedInfo.resultWidth, video.editedInfo.resultHeight, video.editedInfo, dialog_id, replyingMessageObject, video.caption, video.ttl);
                         } else {
-                            SendMessagesHelper.prepareSendingVideo(video.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, video.caption);
+                            SendMessagesHelper.prepareSendingVideo(video.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, video.caption, video.ttl);
                         }
                     }
-                    SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, masks, null, false);
+                    SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, masks, null, false, ttls);
                     SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
                     showReplyPanel(false, null, null, null, false);
                     DraftQuery.cleanDraft(dialog_id, true);
@@ -4011,17 +3900,6 @@ public void startPhotoSelectActivity() {
                         FileLog.e(e);
                     }
                 }
-
-                @Override
-                public void didSelectVideo(String path, VideoEditedInfo info, long estimatedSize, long estimatedDuration, String caption) {
-                    if (info != null) {
-                        SendMessagesHelper.prepareSendingVideo(path, estimatedSize, estimatedDuration, info.resultWidth, info.resultHeight, info, dialog_id, replyingMessageObject, caption);
-                    } else {
-                        SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null);
-                    }
-                    showReplyPanel(false, null, null, null, false);
-                    DraftQuery.cleanDraft(dialog_id, true);
-                }
             });
             presentFragment(fragment);
         } else if (which == attach_video) {
@@ -4572,7 +4450,7 @@ public void showReplyPanel(boolean show, MessageObject messageObjectToReply, Arr
 
     private void moveScrollToLastMessage() {
         if (chatListView != null && !messages.isEmpty()) {
-            chatLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+            chatLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -999999 - chatListView.getPaddingTop());
         }
     }
 
@@ -4580,7 +4458,11 @@ private boolean sendSecretMessageRead(MessageObject messageObject) {
         if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
             return false;
         }
-        MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+        if (currentEncryptedChat != null) {
+            MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+        } else {
+            MessagesController.getInstance().markMessageAsRead(messageObject.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, messageObject.messageOwner.ttl);
+        }
         messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance().getCurrentTime();
         return true;
     }
@@ -4626,7 +4508,7 @@ private void scrollToLastMessage(boolean pagedown) {
                 highlightMessageId = Integer.MAX_VALUE;
                 updateVisibleRows();
             } else {
-                chatLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                chatLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -999999 - chatListView.getPaddingTop());
             }
         } else {
             clearChatData();
@@ -5422,7 +5304,7 @@ private void checkAndUpdateAvatar() {
     }
 
     public boolean openVideoEditor(String videoPath, boolean removeLast, boolean animated) {
-        Bundle args = new Bundle();
+        /*Bundle args = new Bundle(); TODO
         args.putString("videoPath", videoPath);
         VideoEditorActivity fragment = new VideoEditorActivity(args);
         fragment.setDelegate(new VideoEditorActivity.VideoEditorActivityDelegate() {
@@ -5439,22 +5321,22 @@ public void didFinishEditVideo(String videoPath, long startTime, long endTime, i
                 videoEditedInfo.resultHeight = resultHeight;
                 videoEditedInfo.originalPath = videoPath;
                 videoEditedInfo.muted = videoEditedInfo.bitrate == -1;
-                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, caption);
+                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, caption, 0);
                 showReplyPanel(false, null, null, null, false);
                 DraftQuery.cleanDraft(dialog_id, true);
             }
-        });
+        });*/
 
-        if (parentLayout == null || !fragment.onFragmentCreate()) {
-            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null);
+        //if (parentLayout == null || !fragment.onFragmentCreate()) {
+            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null, 0);
             showReplyPanel(false, null, null, null, false);
             DraftQuery.cleanDraft(dialog_id, true);
             return false;
-        }
-        if (parentLayout.presentFragment(fragment, removeLast, !animated, true)) {
-            fragment.setParentChatActivity(this);
-        }
-        return true;
+        //}
+        //if (parentLayout.presentFragment(fragment, removeLast, !animated, true)) {
+        //    fragment.setParentChatActivity(this);
+        //}
+        //return true;
     }
 
     private void showAttachmentError() {
@@ -5515,17 +5397,13 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
                     if (videoPath == null) {
                         showAttachmentError();
                     }
-                    if (Build.VERSION.SDK_INT >= 16) {
-                        if (paused) {
-                            startVideoEdit = videoPath;
-                        } else {
-                            openVideoEditor(videoPath, false, false);
-                        }
+                    if (paused) {
+                        startVideoEdit = videoPath;
                     } else {
-                        SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null);
+                        openVideoEditor(videoPath, false, false);
                     }
                 } else {
-                    SendMessagesHelper.prepareSendingPhoto(null, uri, dialog_id, replyingMessageObject, null, null, null);
+                    SendMessagesHelper.prepareSendingPhoto(null, uri, dialog_id, replyingMessageObject, null, null, null, 0);
                 }
                 showReplyPanel(false, null, null, null, false);
                 DraftQuery.cleanDraft(dialog_id, true);
@@ -5559,16 +5437,10 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
                     }
                     currentPicturePath = null;
                 }
-                if (Build.VERSION.SDK_INT >= 16) {
-                    if (paused) {
-                        startVideoEdit = videoPath;
-                    } else {
-                        openVideoEditor(videoPath, false, false);
-                    }
+                if (paused) {
+                    startVideoEdit = videoPath;
                 } else {
-                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null);
-                    showReplyPanel(false, null, null, null, false);
-                    DraftQuery.cleanDraft(dialog_id, true);
+                    openVideoEditor(videoPath, false, false);
                 }
             } else if (requestCode == 21) {
                 if (data == null || data.getData() == null) {
@@ -7031,13 +6903,23 @@ public void run() {
                 }
             }
         } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
-            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>) args[0];
+            SparseArray<ArrayList<Long>> mids = (SparseArray<ArrayList<Long>>) args[0];
             boolean changed = false;
             for (int i = 0; i < mids.size(); i++) {
                 int key = mids.keyAt(i);
-                ArrayList<Integer> arr = mids.get(key);
-                for (Integer mid : arr) {
-                    MessageObject messageObject = messagesDict[0].get(mid);
+                ArrayList<Long> arr = mids.get(key);
+                for (int a = 0; a < arr.size(); a++) {
+                    long mid = arr.get(a);
+                    if (a == 0) {
+                        int channelId = (int) (mid >> 32);
+                        if (channelId < 0) {
+                            channelId = 0;
+                        }
+                        if (channelId != (ChatObject.isChannel(currentChat) ? currentChat.id : 0)) {
+                            return;
+                        }
+                    }
+                    MessageObject messageObject = messagesDict[0].get((int) mid);
                     if (messageObject != null) {
                         messageObject.messageOwner.destroyTime = key;
                         changed = true;
@@ -7143,14 +7025,19 @@ public void run() {
                 }
             }
         } else if (id == NotificationCenter.updateMessageMedia) {
-            MessageObject messageObject = (MessageObject) args[0];
-            MessageObject existMessageObject = messagesDict[0].get(messageObject.getId());
+            TLRPC.Message message = (TLRPC.Message) args[0];
+            MessageObject existMessageObject = messagesDict[0].get(message.id);
             if (existMessageObject != null) {
-                existMessageObject.messageOwner.media = messageObject.messageOwner.media;
-                existMessageObject.messageOwner.attachPath = messageObject.messageOwner.attachPath;
+                existMessageObject.messageOwner.media = message.media;
+                existMessageObject.messageOwner.attachPath = message.attachPath;
                 existMessageObject.generateThumbs(false);
+                if (message.media.ttl_seconds != 0 && (message.media.photo instanceof TLRPC.TL_photoEmpty || message.media.document instanceof TLRPC.TL_documentEmpty)) {
+                    existMessageObject.setType();
+                    chatAdapter.updateRowWithMessageObject(existMessageObject);
+                } else {
+                    updateVisibleRows();
+                }
             }
-            updateVisibleRows();
         } else if (id == NotificationCenter.replaceMessagesObjects) {
             long did = (long) args[0];
             if (did != dialog_id && did != mergeDialogId) {
@@ -8084,7 +7971,7 @@ public void onResume() {
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onResume();
         }
-        if (currentEncryptedChat != null) {
+        if (currentUser != null) {
             chatEnterTime = System.currentTimeMillis();
             chatLeaveTime = 0;
         }
@@ -8170,7 +8057,7 @@ public void onPause() {
         }
         editor.commit();
 
-        if (currentEncryptedChat != null) {
+        if (currentUser != null) {
             chatLeaveTime = System.currentTimeMillis();
             updateInformationForScreenshotDetector();
         }
@@ -8246,25 +8133,35 @@ public void run() {
     }
 
     private void updateInformationForScreenshotDetector() {
-        if (currentEncryptedChat == null) {
+        if (currentUser == null) {
             return;
         }
-        ArrayList<Long> visibleMessages = new ArrayList<>();
-        if (chatListView != null) {
-            int count = chatListView.getChildCount();
-            for (int a = 0; a < count; a++) {
-                View view = chatListView.getChildAt(a);
-                MessageObject object = null;
-                if (view instanceof ChatMessageCell) {
-                    ChatMessageCell cell = (ChatMessageCell) view;
-                    object = cell.getMessageObject();
-                }
-                if (object != null && object.getId() < 0 && object.messageOwner.random_id != 0) {
-                    visibleMessages.add(object.messageOwner.random_id);
+        ArrayList<Long> visibleMessages;
+        int messageId = 0;
+        if (currentEncryptedChat != null) {
+            visibleMessages = new ArrayList<>();
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    MessageObject object = null;
+                    if (view instanceof ChatMessageCell) {
+                        ChatMessageCell cell = (ChatMessageCell) view;
+                        object = cell.getMessageObject();
+                    }
+                    if (object != null && object.getId() < 0 && object.messageOwner.random_id != 0) {
+                        visibleMessages.add(object.messageOwner.random_id);
+                    }
                 }
             }
+            MediaController.getInstance().setLastVisibleMessageIds(chatEnterTime, chatLeaveTime, currentUser, currentEncryptedChat, visibleMessages, messageId);
+        } else {
+            SecretMediaViewer viewer = SecretMediaViewer.getInstance();
+            MessageObject messageObject = viewer.getCurrentMessageObject();
+            if (messageObject != null && !messageObject.isOut()) {
+                MediaController.getInstance().setLastVisibleMessageIds(viewer.getOpenTime(), viewer.getCloseTime(), currentUser, null, null, messageObject.getId());
+            }
         }
-        MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
     }
 
     private boolean fixLayoutInternal() {
@@ -8656,14 +8553,14 @@ private void createMenu(View v, boolean single) {
         boolean allowUnpin = message.getDialogId() != mergeDialogId && info != null && info.pinned_msg_id == message.getId() && (currentChat.creator || currentChat.admin_rights != null && currentChat.admin_rights.pin_messages);
         boolean allowEdit = message.canEditMessage(currentChat) && !chatActivityEnterView.hasAudioToSend() && message.getDialogId() != mergeDialogId;
         if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 46 ||
-                type == 1 && message.getDialogId() == mergeDialogId ||
+                type == 1 && (message.getDialogId() == mergeDialogId || message.isSecretPhoto()) ||
                 currentEncryptedChat == null && message.getId() < 0 ||
                 isBroadcast ||
                 currentChat != null && (ChatObject.isNotInChat(currentChat) || ChatObject.isChannel(currentChat) && !ChatObject.canPost(currentChat) && !currentChat.megagroup || !ChatObject.canSendMessages(currentChat))) {
             allowChatActions = false;
         }
 
-        if (single || type < 2 || type == 20) {
+        if (single || type < 2 || type == 20 || message.isSecretPhoto()) {
             if (type >= 0) {
                 selectedObject = message;
                 if (getParentActivity() == null) {
@@ -8743,10 +8640,12 @@ private void createMenu(View v, boolean single) {
                             }
                         } else if (type == 4) {
                             if (selectedObject.isVideo()) {
-                                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
-                                options.add(4);
-                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
-                                options.add(6);
+                                if (!selectedObject.isSecretPhoto()) {
+                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
+                                    options.add(4);
+                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
+                                    options.add(6);
+                                }
                             } else if (selectedObject.isMusic()) {
                                 items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                 options.add(10);
@@ -8762,8 +8661,10 @@ private void createMenu(View v, boolean single) {
                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                 options.add(6);
                             } else {
-                                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
-                                options.add(4);
+                                if (!selectedObject.isSecretPhoto()) {
+                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
+                                    options.add(4);
+                                }
                             }
                         } else if (type == 5) {
                             items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
@@ -8806,8 +8707,10 @@ private void createMenu(View v, boolean single) {
                                 options.add(17);
                             }
                         }
-                        items.add(LocaleController.getString("Forward", R.string.Forward));
-                        options.add(2);
+                        if (!selectedObject.isSecretPhoto()) {
+                            items.add(LocaleController.getString("Forward", R.string.Forward));
+                            options.add(2);
+                        }
                         if (allowUnpin) {
                             items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
                             options.add(14);
@@ -9650,16 +9553,16 @@ public int getSelectedCount() {
 
     public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo) {
         if (photoEntry.isVideo) {
-            SendMessagesHelper.prepareSendingVideo(photoEntry.path, videoEditedInfo.estimatedSize, videoEditedInfo.estimatedDuration, videoEditedInfo.resultWidth, videoEditedInfo.resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, photoEntry.caption != null ? photoEntry.caption.toString() : null);
+            SendMessagesHelper.prepareSendingVideo(photoEntry.path, videoEditedInfo.estimatedSize, videoEditedInfo.estimatedDuration, videoEditedInfo.resultWidth, videoEditedInfo.resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, photoEntry.caption != null ? photoEntry.caption.toString() : null, photoEntry.ttl);
             showReplyPanel(false, null, null, null, false);
             DraftQuery.cleanDraft(dialog_id, true);
         } else {
             if (photoEntry.imagePath != null) {
-                SendMessagesHelper.prepareSendingPhoto(photoEntry.imagePath, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.stickers, null);
+                SendMessagesHelper.prepareSendingPhoto(photoEntry.imagePath, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.stickers, null, photoEntry.ttl);
                 showReplyPanel(false, null, null, null, false);
                 DraftQuery.cleanDraft(dialog_id, true);
             } else if (photoEntry.path != null) {
-                SendMessagesHelper.prepareSendingPhoto(photoEntry.path, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.stickers, null);
+                SendMessagesHelper.prepareSendingPhoto(photoEntry.path, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.stickers, null, photoEntry.ttl);
                 showReplyPanel(false, null, null, null, false);
                 DraftQuery.cleanDraft(dialog_id, true);
             }
@@ -9838,8 +9741,9 @@ public void didPressedChannelAvatar(ChatMessageCell cell, TLRPC.Chat chat, int p
                     @Override
                     public void didPressedOther(ChatMessageCell cell) {
                         if (cell.getMessageObject().type == 16) {
-                            if(currentUser!=null)
-								VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance().getUserFull(currentUser.id));
+                            if (currentUser != null) {
+                                VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance().getUserFull(currentUser.id));
+                            }
                         } else {
                             createMenu(cell, true);
                         }
@@ -9993,9 +9897,15 @@ public void didPressedImage(ChatMessageCell cell) {
                         } else if (message.isSending()) {
                             return;
                         }
-                        if (message.type == 13) {
+                        if (message.isSecretPhoto()) {
+                            if (sendSecretMessageRead(message)) {
+                                cell.invalidate();
+                            }
+                            SecretMediaViewer.getInstance().setParentActivity(getParentActivity());
+                            SecretMediaViewer.getInstance().openMedia(message, ChatActivity.this);
+                        } else if (message.type == 13) {
                             showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && ChatObject.canSendStickers(currentChat) ? chatActivityEnterView : null));
-                        } else if (Build.VERSION.SDK_INT >= 16 && message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
+                        } else if (message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
                             if (message.isVideo()) {
                                 sendSecretMessageRead(message);
                             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 6a9b64776..6e9f96722 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -165,17 +165,13 @@ public void setInfo(int id, String firstName, String lastName, boolean isBroadca
                     }
                     lastch = lastName.codePointAt(a);
                 }
-                if (Build.VERSION.SDK_INT >= 16) {
-                    stringBuilder.append("\u200C");
-                }
+                stringBuilder.append("\u200C");
                 stringBuilder.appendCodePoint(lastch);
             } else if (firstName != null && firstName.length() > 0) {
                 for (int a = firstName.length() - 1; a >= 0; a--) {
                     if (firstName.charAt(a) == ' ') {
                         if (a != firstName.length() - 1 && firstName.charAt(a + 1) != ' ') {
-                            if (Build.VERSION.SDK_INT >= 16) {
-                                stringBuilder.append("\u200C");
-                            }
+                            stringBuilder.append("\u200C");
                             stringBuilder.appendCodePoint(firstName.codePointAt(a + 1));
                             break;
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
index 91ec63848..adaa0bf00 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
@@ -103,7 +103,7 @@ public void openGallery() {
         PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(true, false, false, null);
         fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
             @Override
-            public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos) {
+            public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<Integer> ttls, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos) {
                 if (!photos.isEmpty()) {
                     Bitmap bitmap = ImageLoader.loadBitmap(photos.get(0), null, 800, 800, true);
                     processBitmap(bitmap);
@@ -120,11 +120,6 @@ public void startPhotoSelectActivity() {
                     FileLog.e(e);
                 }
             }
-
-            @Override
-            public void didSelectVideo(String path, VideoEditedInfo info, long estimatedSize, long estimatedDuration, String caption) {
-
-            }
         });
         parentFragment.presentFragment(fragment);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
index a0e5017a5..dce281ad6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
@@ -81,7 +81,7 @@ public void setImage(TLObject path, String httpUrl, String filter, Drawable thum
         if (thumbBitmap != null) {
             thumb = new BitmapDrawable(null, thumbBitmap);
         }
-        imageReceiver.setImage(path, httpUrl, filter, thumb, thumbLocation, thumbFilter, size, ext, false);
+        imageReceiver.setImage(path, httpUrl, filter, thumb, thumbLocation, thumbFilter, size, ext, 0);
     }
 
     public void setImageBitmap(Bitmap bitmap) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index ec4319254..4177c25c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -13,6 +13,7 @@
 import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
 import android.app.Activity;
 import android.content.ClipDescription;
 import android.content.Context;
@@ -20,7 +21,9 @@
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.graphics.Canvas;
+import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.Path;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.RectF;
@@ -39,6 +42,7 @@
 import android.text.Spanned;
 import android.text.TextWatcher;
 import android.text.style.ImageSpan;
+import android.util.Property;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
@@ -169,6 +173,7 @@ protected void onDraw(Canvas canvas) {
     private ImageView sendButton;
     private ImageView cancelBotButton;
     private ImageView emojiButton;
+    private ImageView expandStickersButton;
     private EmojiView emojiView;
     private TextView recordTimeText;
     private FrameLayout audioVideoButtonContainer;
@@ -289,9 +294,48 @@ public void run() {
             }
         }
     };
+    private Runnable updateExpandabilityRunnable = new Runnable() {
+        private int lastKnownPage = -1;
+
+        @Override
+        public void run() {
+            if (emojiView != null) {
+                int curPage = emojiView.getCurrentPage();
+                if (curPage != lastKnownPage) {
+                    lastKnownPage = curPage;
+                    boolean prevOpen = stickersTabOpen;
+                    stickersTabOpen = curPage == 1 || curPage == 2;
+                    if (prevOpen != stickersTabOpen && curPage != 2)
+                        checkSendButton(false);
+                    if (!stickersTabOpen && stickersExpanded)
+                        setStickersExpanded(false, true);
+                }
+            }
+        }
+    };
+    private Property<View, Integer> roundedTranslationYProperty=new Property<View, Integer>(Integer.class, "translationY"){
+        @Override
+        public Integer get(View object){
+            return Math.round(object.getTranslationY());
+        }
+
+        @Override
+        public void set(View object, Integer value){
+            object.setTranslationY(value);
+        }
+    };
 
     private Paint redDotPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
 
+    private boolean stickersTabOpen;
+    private boolean gifsTabOpen;
+    private boolean stickersExpanded;
+    private Animator stickersExpansionAnim;
+    private float stickersExpansionProgress;
+    private int stickersExpandedHeight;
+    private boolean stickersDragging;
+    private AnimatedArrowDrawable stickersArrow;
+
     private boolean recordAudioVideoRunnableStarted;
     private boolean calledRecordRunnable;
     private Runnable recordAudioVideoRunnable = new Runnable() {
@@ -726,7 +770,7 @@ public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flag
                         if (description.hasMimeType("image/gif")) {
                             SendMessagesHelper.prepareSendingDocument(null, null, inputContentInfo.getContentUri(), "image/gif", dialog_id, replyingMessageObject, inputContentInfo);
                         } else {
-                            SendMessagesHelper.prepareSendingPhoto(null, inputContentInfo.getContentUri(), dialog_id, replyingMessageObject, null, null, inputContentInfo);
+                            SendMessagesHelper.prepareSendingPhoto(null, inputContentInfo.getContentUri(), dialog_id, replyingMessageObject, null, null, inputContentInfo, 0);
                         }
                         if (delegate != null) {
                             delegate.onMessageSend(null);
@@ -1009,7 +1053,7 @@ public void onLeftProgressChanged(float progress) {
             }
 
             @Override
-            public void onRifhtProgressChanged(float progress) {
+            public void onRightProgressChanged(float progress) {
                 if (videoToSendMessageObject == null) {
                     return;
                 }
@@ -1314,6 +1358,23 @@ public void onClick(View view) {
             }
         });
 
+        expandStickersButton = new ImageView(context);
+        expandStickersButton.setScaleType(ImageView.ScaleType.CENTER);
+        expandStickersButton.setImageDrawable(stickersArrow = new AnimatedArrowDrawable(Theme.getColor(Theme.key_chat_messagePanelIcons)));
+        expandStickersButton.setVisibility(GONE);
+        expandStickersButton.setScaleX(0.1f);
+        expandStickersButton.setScaleY(0.1f);
+        expandStickersButton.setAlpha(0.0f);
+        sendButtonContainer.addView(expandStickersButton, LayoutHelper.createFrame(48, 48));
+        expandStickersButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!stickersDragging)
+                    setStickersExpanded(!stickersExpanded, true);
+            }
+        });
+
+
         doneButtonContainer = new FrameLayout(context);
         doneButtonContainer.setVisibility(GONE);
         textFieldContainer.addView(doneButtonContainer, LayoutHelper.createLinear(48, 48, Gravity.BOTTOM));
@@ -1702,6 +1763,8 @@ private void resizeForTopView(boolean show) {
         LayoutParams layoutParams = (LayoutParams) textFieldContainer.getLayoutParams();
         layoutParams.topMargin = AndroidUtilities.dp(2) + (show ? topView.getLayoutParams().height : 0);
         textFieldContainer.setLayoutParams(layoutParams);
+        if(stickersExpanded)
+            setStickersExpanded(false, true);
     }
 
     public void onDestroy() {
@@ -1925,7 +1988,7 @@ private void sendMessage() {
             if (playing != null && playing == audioToSendMessageObject) {
                 MediaController.getInstance().cleanupPlayer(true, true);
             }
-            SendMessagesHelper.getInstance().sendMessage(audioToSend, null, audioToSendPath, dialog_id, replyingMessageObject, null, null);
+            SendMessagesHelper.getInstance().sendMessage(audioToSend, null, audioToSendPath, dialog_id, replyingMessageObject, null, null, 0);
             if (delegate != null) {
                 delegate.onMessageSend(null);
             }
@@ -1951,7 +2014,7 @@ public void doneEditingMessage() {
         if (editingMessageObject != null) {
             delegate.onMessageEditEnd(true);
             showEditDoneProgress(true, true);
-            CharSequence[] message = new CharSequence[] {messageEditText.getText()};
+            CharSequence[] message = new CharSequence[]{messageEditText.getText()};
             ArrayList<TLRPC.MessageEntity> entities = MessagesQuery.getEntities(message);
             editingMessageReqId = SendMessagesHelper.getInstance().editMessage(editingMessageObject, message[0].toString(), messageWebPageSearch, parentFragment, entities, new Runnable() {
                 @Override
@@ -1968,7 +2031,7 @@ public boolean processSendingText(CharSequence text) {
         if (text.length() != 0) {
             int count = (int) Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
-                CharSequence[] message = new CharSequence[] {text.subSequence(a * 4096, Math.min((a + 1) * 4096, text.length()))};
+                CharSequence[] message = new CharSequence[]{text.subSequence(a * 4096, Math.min((a + 1) * 4096, text.length()))};
                 ArrayList<TLRPC.MessageEntity> entities = MessagesQuery.getEntities(message);
                 SendMessagesHelper.getInstance().sendMessage(message[0].toString(), dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch, entities, null, null);
             }
@@ -1987,8 +2050,8 @@ private void checkSendButton(boolean animated) {
         CharSequence message = AndroidUtilities.getTrimmedString(messageEditText.getText());
         if (message.length() > 0 || forceShowSendButton || audioToSend != null || videoToSendMessageObject != null) {
             final String caption = messageEditText.getCaption();
-            boolean showBotButton = caption != null && sendButton.getVisibility() == VISIBLE;
-            boolean showSendButton = caption == null && cancelBotButton.getVisibility() == VISIBLE;
+            boolean showBotButton = caption != null && (sendButton.getVisibility() == VISIBLE || expandStickersButton.getVisibility() == VISIBLE);
+            boolean showSendButton = caption == null && (cancelBotButton.getVisibility() == VISIBLE || expandStickersButton.getVisibility() == VISIBLE);
             if (audioVideoButtonContainer.getVisibility() == VISIBLE || showBotButton || showSendButton) {
                 if (animated) {
                     if (runningAnimationType == 1 && messageEditText.getCaption() == null || runningAnimationType == 3 && caption != null) {
@@ -2040,6 +2103,11 @@ public void onAnimationCancel(Animator animation) {
                         animators.add(ObjectAnimator.ofFloat(audioVideoButtonContainer, "scaleY", 0.1f));
                         animators.add(ObjectAnimator.ofFloat(audioVideoButtonContainer, "alpha", 0.0f));
                     }
+                    if (expandStickersButton.getVisibility() == VISIBLE) {
+                        animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleX", 0.1f));
+                        animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleY", 0.1f));
+                        animators.add(ObjectAnimator.ofFloat(expandStickersButton, "alpha", 0.0f));
+                    }
                     if (showBotButton) {
                         animators.add(ObjectAnimator.ofFloat(sendButton, "scaleX", 0.1f));
                         animators.add(ObjectAnimator.ofFloat(sendButton, "scaleY", 0.1f));
@@ -2077,6 +2145,7 @@ public void onAnimationEnd(Animator animation) {
                                     cancelBotButton.setVisibility(GONE);
                                 }
                                 audioVideoButtonContainer.setVisibility(GONE);
+                                expandStickersButton.setVisibility(GONE);
                                 runningAnimation = null;
                                 runningAnimationType = 0;
                             }
@@ -2123,7 +2192,112 @@ public void onAnimationCancel(Animator animation) {
                     }
                 }
             }
-        } else if (sendButton.getVisibility() == VISIBLE || cancelBotButton.getVisibility() == VISIBLE) {
+        } else if (emojiView != null && emojiView.getVisibility() == VISIBLE && stickersTabOpen && !AndroidUtilities.isInMultiwindow) {
+            if (animated) {
+                if (runningAnimationType == 4) {
+                    return;
+                }
+
+                if (runningAnimation != null) {
+                    runningAnimation.cancel();
+                    runningAnimation = null;
+                }
+                if (runningAnimation2 != null) {
+                    runningAnimation2.cancel();
+                    runningAnimation2 = null;
+                }
+
+                if (attachLayout != null) {
+                    attachLayout.setVisibility(VISIBLE);
+                    runningAnimation2 = new AnimatorSet();
+                    runningAnimation2.playTogether(
+                            ObjectAnimator.ofFloat(attachLayout, "alpha", 1.0f),
+                            ObjectAnimator.ofFloat(attachLayout, "scaleX", 1.0f)
+                    );
+                    runningAnimation2.setDuration(100);
+                    runningAnimation2.start();
+                    updateFieldRight(1);
+                    if (getVisibility() == VISIBLE) {
+                        delegate.onAttachButtonShow();
+                    }
+                }
+
+                expandStickersButton.setVisibility(VISIBLE);
+                runningAnimation = new AnimatorSet();
+                runningAnimationType = 4;
+
+                ArrayList<Animator> animators = new ArrayList<>();
+                animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleX", 1.0f));
+                animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleY", 1.0f));
+                animators.add(ObjectAnimator.ofFloat(expandStickersButton, "alpha", 1.0f));
+                if (cancelBotButton.getVisibility() == VISIBLE) {
+                    animators.add(ObjectAnimator.ofFloat(cancelBotButton, "scaleX", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(cancelBotButton, "scaleY", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(cancelBotButton, "alpha", 0.0f));
+                } else if (audioVideoButtonContainer.getVisibility() == VISIBLE) {
+                    animators.add(ObjectAnimator.ofFloat(audioVideoButtonContainer, "scaleX", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(audioVideoButtonContainer, "scaleY", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(audioVideoButtonContainer, "alpha", 0.0f));
+                } else {
+                    animators.add(ObjectAnimator.ofFloat(sendButton, "scaleX", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(sendButton, "scaleY", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(sendButton, "alpha", 0.0f));
+                }
+
+                runningAnimation.playTogether(animators);
+                runningAnimation.setDuration(150);
+                runningAnimation.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        if (runningAnimation != null && runningAnimation.equals(animation)) {
+                            sendButton.setVisibility(GONE);
+                            cancelBotButton.setVisibility(GONE);
+                            audioVideoButtonContainer.setVisibility(GONE);
+                            expandStickersButton.setVisibility(VISIBLE);
+                            runningAnimation = null;
+                            runningAnimationType = 0;
+                        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Animator animation) {
+                        if (runningAnimation != null && runningAnimation.equals(animation)) {
+                            runningAnimation = null;
+                        }
+                    }
+                });
+                runningAnimation.start();
+            } else {
+                sendButton.setScaleX(0.1f);
+                sendButton.setScaleY(0.1f);
+                sendButton.setAlpha(0.0f);
+                cancelBotButton.setScaleX(0.1f);
+                cancelBotButton.setScaleY(0.1f);
+                cancelBotButton.setAlpha(0.0f);
+                audioVideoButtonContainer.setScaleX(0.1f);
+                audioVideoButtonContainer.setScaleY(0.1f);
+                audioVideoButtonContainer.setAlpha(0.0f);
+                expandStickersButton.setScaleX(1.0f);
+                expandStickersButton.setScaleY(1.0f);
+                expandStickersButton.setAlpha(1.0f);
+                cancelBotButton.setVisibility(GONE);
+                sendButton.setVisibility(GONE);
+                audioVideoButtonContainer.setVisibility(GONE);
+                expandStickersButton.setVisibility(VISIBLE);
+                if (attachLayout != null) {
+                    if (getVisibility() == VISIBLE) {
+                        delegate.onAttachButtonShow();
+                    }
+                    attachLayout.setVisibility(VISIBLE);
+                    updateFieldRight(1);
+                }
+            }
+            /*expandStickersButton.setAlpha(1f);
+            expandStickersButton.setScaleX(1);
+            expandStickersButton.setScaleY(1);
+            expandStickersButton.setVisibility(VISIBLE);
+            audioVideoButtonContainer.setVisibility(GONE);*/
+        } else if (sendButton.getVisibility() == VISIBLE || cancelBotButton.getVisibility() == VISIBLE || expandStickersButton.getVisibility() == VISIBLE) {
             if (animated) {
                 if (runningAnimationType == 2) {
                     return;
@@ -2165,6 +2339,10 @@ public void onAnimationCancel(Animator animation) {
                     animators.add(ObjectAnimator.ofFloat(cancelBotButton, "scaleX", 0.1f));
                     animators.add(ObjectAnimator.ofFloat(cancelBotButton, "scaleY", 0.1f));
                     animators.add(ObjectAnimator.ofFloat(cancelBotButton, "alpha", 0.0f));
+                } else if (expandStickersButton.getVisibility() == VISIBLE) {
+                    animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleX", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(expandStickersButton, "scaleY", 0.1f));
+                    animators.add(ObjectAnimator.ofFloat(expandStickersButton, "alpha", 0.0f));
                 } else {
                     animators.add(ObjectAnimator.ofFloat(sendButton, "scaleX", 0.1f));
                     animators.add(ObjectAnimator.ofFloat(sendButton, "scaleY", 0.1f));
@@ -2200,11 +2378,15 @@ public void onAnimationCancel(Animator animation) {
                 cancelBotButton.setScaleX(0.1f);
                 cancelBotButton.setScaleY(0.1f);
                 cancelBotButton.setAlpha(0.0f);
+                expandStickersButton.setScaleX(0.1f);
+                expandStickersButton.setScaleY(0.1f);
+                expandStickersButton.setAlpha(0.0f);
                 audioVideoButtonContainer.setScaleX(1.0f);
                 audioVideoButtonContainer.setScaleY(1.0f);
                 audioVideoButtonContainer.setAlpha(1.0f);
                 cancelBotButton.setVisibility(GONE);
                 sendButton.setVisibility(GONE);
+                expandStickersButton.setVisibility(GONE);
                 audioVideoButtonContainer.setVisibility(VISIBLE);
                 if (attachLayout != null) {
                     if (getVisibility() == VISIBLE) {
@@ -2840,6 +3022,8 @@ public void onEmojiSelected(String symbol) {
             }
 
             public void onStickerSelected(TLRPC.Document sticker) {
+                if(stickersExpanded)
+                    setStickersExpanded(false, true);
                 ChatActivityEnterView.this.onStickerSelected(sticker);
                 StickersQuery.addRecentSticker(StickersQuery.TYPE_IMAGE, sticker, (int) (System.currentTimeMillis() / 1000));
                 if ((int) dialog_id == 0) {
@@ -2856,6 +3040,8 @@ public void onStickersSettingsClick() {
 
             @Override
             public void onGifSelected(TLRPC.Document gif) {
+				if(stickersExpanded)
+				    setStickersExpanded(false, true);
                 SendMessagesHelper.getInstance().sendSticker(gif, dialog_id, replyingMessageObject);
                 StickersQuery.addRecentGif(gif, (int) (System.currentTimeMillis() / 1000));
                 if ((int) dialog_id == 0) {
@@ -2868,6 +3054,7 @@ public void onGifSelected(TLRPC.Document gif) {
 
             @Override
             public void onGifTab(boolean opened) {
+                post(updateExpandabilityRunnable);
                 if (!AndroidUtilities.usingHardwareInput) {
                     if (opened) {
                         if (messageEditText.length() == 0) {
@@ -2883,6 +3070,7 @@ public void onGifTab(boolean opened) {
             @Override
             public void onStickersTab(boolean opened) {
                 delegate.onStickersTab(opened);
+                post(updateExpandabilityRunnable);
             }
 
             @Override
@@ -2926,6 +3114,68 @@ public void onStickerSetRemove(TLRPC.StickerSetCovered stickerSet) {
                 StickersQuery.removeStickersSet(parentActivity, stickerSet.set, 0, parentFragment, false);
             }
         });
+        emojiView.setDragListener(new EmojiView.DragListener() {
+
+            boolean wasExpanded;
+            int initialOffset;
+
+            @Override
+            public void onDragStart() {
+                if (!allowDragging()) {
+                    return;
+                }
+                if (stickersExpansionAnim != null)
+                    stickersExpansionAnim.cancel();
+                stickersDragging = true;
+                wasExpanded = stickersExpanded;
+                stickersExpanded = true;
+                stickersExpandedHeight = sizeNotifierLayout.getHeight() - (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? AndroidUtilities.statusBarHeight : 0) - ActionBar.getCurrentActionBarHeight() - getHeight() + Theme.chat_composeShadowDrawable.getIntrinsicHeight();
+                emojiView.getLayoutParams().height = stickersExpandedHeight;
+                emojiView.setLayerType(LAYER_TYPE_HARDWARE, null);
+                sizeNotifierLayout.requestLayout();
+                ((FrameLayout) sizeNotifierLayout).setForeground(new ScrimDrawable());
+                initialOffset = (int) getTranslationY();
+            }
+
+            @Override
+            public void onDragEnd(float velocity) {
+                if (!allowDragging())
+                    return;
+                stickersDragging = false;
+                if ((wasExpanded && velocity >= AndroidUtilities.dp(200)) || (!wasExpanded && velocity <= AndroidUtilities.dp(-200)) || (wasExpanded && stickersExpansionProgress <= 0.6f) || (!wasExpanded && stickersExpansionProgress >= 0.4f)) {
+                    setStickersExpanded(!wasExpanded, true);
+                } else {
+                    setStickersExpanded(wasExpanded, true);
+                }
+            }
+
+            @Override
+            public void onDragCancel() {
+                if (!stickersTabOpen) {
+                    return;
+                }
+                stickersDragging = false;
+                setStickersExpanded(wasExpanded, true);
+            }
+
+            @Override
+            public void onDrag(int offset) {
+                if (!allowDragging()) {
+                    return;
+                }
+                int origHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
+                offset += initialOffset;
+                offset = Math.max(Math.min(offset, 0), -(stickersExpandedHeight - origHeight));
+                emojiView.setTranslationY(offset);
+                setTranslationY(offset);
+                stickersExpansionProgress = (float) offset / (-(stickersExpandedHeight - origHeight));
+                sizeNotifierLayout.invalidate();
+            }
+
+            private boolean allowDragging(){
+                return stickersTabOpen && !(!stickersExpanded && messageEditText.length()>0) && emojiView.areThereAnyStickers();
+            }
+        });
         emojiView.setVisibility(GONE);
         sizeNotifierLayout.addView(emojiView);
         checkChannelRights();
@@ -3020,6 +3270,12 @@ private void showPopup(int show, int contentType) {
             }
             updateBotButton();
         }
+
+        if (stickersTabOpen) {
+            checkSendButton(true);
+        }
+        if (stickersExpanded && show != 1)
+            setStickersExpanded(false, false);
     }
 
     private void setEmojiButtonImage() {
@@ -3036,6 +3292,7 @@ private void setEmojiButtonImage() {
         } else if (currentPage == 2) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_gif);
         }
+        stickersTabOpen = currentPage == 1 || currentPage == 2;
     }
 
     public void hidePopup(boolean byBackButton) {
@@ -3112,6 +3369,8 @@ public void addRecentGif(TLRPC.Document searchImage) {
     @Override
     protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
+        if (w != oldw && stickersExpanded)
+            setStickersExpanded(false, false);
         videoTimelineView.clearFrames();
     }
 
@@ -3144,7 +3403,7 @@ public void onSizeChanged(int height, boolean isWidthGreater) {
             }
 
             FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) currentView.getLayoutParams();
-            if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
+            if ((layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) && !stickersExpanded) {
                 layoutParams.width = AndroidUtilities.displaySize.x;
                 layoutParams.height = newHeight;
                 currentView.setLayoutParams(layoutParams);
@@ -3290,6 +3549,7 @@ public void didReceivedNotification(int id, Object... args) {
                     message.message = "-1";
                     message.attachPath = audioToSendPath;
                     message.media = new TLRPC.TL_messageMediaDocument();
+                    message.media.flags |= 3;
                     message.media.document = audioToSend;
                     message.flags |= TLRPC.MESSAGE_FLAG_HAS_MEDIA | TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
                     audioToSendMessageObject = new MessageObject(message, null, false);
@@ -3363,4 +3623,190 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
             }
         }
     }
+
+    private void setStickersExpanded(boolean expanded, boolean animated) {
+        if(expanded && !emojiView.areThereAnyStickers())
+            return;
+        stickersExpanded = expanded;
+        //expandStickersButton.setRotationX(stickersExpanded ? 0 : 180);
+        final int origHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
+        if (stickersExpansionAnim != null)
+            stickersExpansionAnim.cancel();
+        if (stickersExpanded) {
+            stickersExpandedHeight = sizeNotifierLayout.getHeight() - (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? AndroidUtilities.statusBarHeight : 0) - ActionBar.getCurrentActionBarHeight() - getHeight() + Theme.chat_composeShadowDrawable.getIntrinsicHeight();
+            emojiView.getLayoutParams().height = stickersExpandedHeight;
+            sizeNotifierLayout.requestLayout();
+            ((FrameLayout) sizeNotifierLayout).setForeground(new ScrimDrawable());
+            messageEditText.setText(messageEditText.getText()); // dismiss action mode, if any
+            if (animated) {
+                AnimatorSet anims = new AnimatorSet();
+                anims.playTogether(
+                        ObjectAnimator.ofInt(this, roundedTranslationYProperty, -(stickersExpandedHeight - origHeight)),
+                        ObjectAnimator.ofInt(emojiView, roundedTranslationYProperty, -(stickersExpandedHeight - origHeight)),
+                        ObjectAnimator.ofFloat(stickersArrow, "animationProgress", 1)
+                );
+                anims.setDuration(400);
+                anims.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
+                ((ObjectAnimator) anims.getChildAnimations().get(0)).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                    @Override
+                    public void onAnimationUpdate(ValueAnimator animation) {
+                        //stickersExpansionProgress=animation.getAnimatedFraction();
+                        stickersExpansionProgress = getTranslationY() / (-(stickersExpandedHeight - origHeight));
+                        sizeNotifierLayout.invalidate();
+                    }
+                });
+                anims.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        stickersExpansionAnim = null;
+                        emojiView.setLayerType(LAYER_TYPE_NONE, null);
+                    }
+                });
+                stickersExpansionAnim = anims;
+                emojiView.setLayerType(LAYER_TYPE_HARDWARE, null);
+                anims.start();
+            } else {
+                stickersExpansionProgress = 1;
+                setTranslationY(-(stickersExpandedHeight - origHeight));
+                emojiView.setTranslationY(-(stickersExpandedHeight - origHeight));
+                stickersArrow.setAnimationProgress(1);
+            }
+        } else {
+            if (animated) {
+                AnimatorSet anims = new AnimatorSet();
+                anims.playTogether(
+                        ObjectAnimator.ofInt(this, roundedTranslationYProperty, 0),
+                        ObjectAnimator.ofInt(emojiView, roundedTranslationYProperty, 0),
+                        ObjectAnimator.ofFloat(stickersArrow, "animationProgress", 0)
+                );
+                anims.setDuration(400);
+                anims.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
+                ((ObjectAnimator) anims.getChildAnimations().get(0)).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                    @Override
+                    public void onAnimationUpdate(ValueAnimator animation) {
+                        stickersExpansionProgress = getTranslationY() / (-(stickersExpandedHeight - origHeight));
+                        sizeNotifierLayout.invalidate();
+                    }
+                });
+                anims.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        stickersExpansionAnim = null;
+                        emojiView.getLayoutParams().height = origHeight;
+                        sizeNotifierLayout.requestLayout();
+                        emojiView.setLayerType(LAYER_TYPE_NONE, null);
+                        ((FrameLayout) sizeNotifierLayout).setForeground(null);
+                        sizeNotifierLayout.setWillNotDraw(false);
+                    }
+                });
+                stickersExpansionAnim = anims;
+                emojiView.setLayerType(LAYER_TYPE_HARDWARE, null);
+                anims.start();
+            } else {
+                stickersExpansionProgress = 0;
+                setTranslationY(0);
+                emojiView.setTranslationY(0);
+                emojiView.getLayoutParams().height = origHeight;
+                sizeNotifierLayout.requestLayout();
+                ((FrameLayout) sizeNotifierLayout).setForeground(null);
+                sizeNotifierLayout.setWillNotDraw(false);
+                stickersArrow.setAnimationProgress(0);
+            }
+        }
+    }
+
+    private class ScrimDrawable extends Drawable {
+
+        private Paint paint;
+
+        public ScrimDrawable() {
+            paint = new Paint();
+            paint.setColor(0);
+        }
+
+        @Override
+        public void draw(Canvas canvas) {
+            paint.setAlpha(Math.round(102 * stickersExpansionProgress));
+            canvas.drawRect(0, 0, getWidth(), emojiView.getY() - getHeight() + Theme.chat_composeShadowDrawable.getIntrinsicHeight(), paint);
+        }
+
+        @Override
+        public void setAlpha(int alpha) {
+
+        }
+
+        @Override
+        public void setColorFilter(ColorFilter colorFilter) {
+
+        }
+
+        @Override
+        public int getOpacity() {
+            return 0;
+        }
+    }
+
+    private class AnimatedArrowDrawable extends Drawable {
+
+        private Paint paint;
+        private Path path = new Path();
+        private float animProgress = 0;
+
+        public AnimatedArrowDrawable(int color) {
+            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            paint.setStyle(Paint.Style.STROKE);
+            paint.setStrokeWidth(AndroidUtilities.dp(2));
+            paint.setColor(color);
+
+            updatePath();
+        }
+
+        @Override
+        public void draw(Canvas c) {
+            c.drawPath(path, paint);
+        }
+
+        private void updatePath() {
+            path.reset();
+            float p = animProgress * 2 - 1;
+            path.moveTo(AndroidUtilities.dp(3), AndroidUtilities.dp(12) - AndroidUtilities.dp(4) * p);
+            path.lineTo(AndroidUtilities.dp(13), AndroidUtilities.dp(12) + AndroidUtilities.dp(4) * p);
+            path.lineTo(AndroidUtilities.dp(23), AndroidUtilities.dp(12) - AndroidUtilities.dp(4) * p);
+        }
+
+        public void setAnimationProgress(float progress) {
+            animProgress = progress;
+            updatePath();
+            invalidateSelf();
+        }
+
+        public float getAnimationProgress() {
+            return animProgress;
+        }
+
+        @Override
+        public void setAlpha(int alpha) {
+
+        }
+
+        @Override
+        public void setColorFilter(ColorFilter colorFilter) {
+
+        }
+
+        @Override
+        public int getOpacity() {
+            return 0;
+        }
+
+        @Override
+        public int getIntrinsicWidth() {
+            return AndroidUtilities.dp(26);
+        }
+
+        @Override
+        public int getIntrinsicHeight() {
+            return AndroidUtilities.dp(26);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
index 379c7efca..e14dc3910 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
@@ -694,308 +694,306 @@ public void onClick(View v) {
             progressView.showTextView();
         }
 
-        if (Build.VERSION.SDK_INT >= 16) {
-            recordTime = new TextView(context);
-            recordTime.setBackgroundResource(R.drawable.system);
-            recordTime.getBackground().setColorFilter(new PorterDuffColorFilter(0x66000000, PorterDuff.Mode.MULTIPLY));
-            recordTime.setText("00:00");
-            recordTime.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            recordTime.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            recordTime.setAlpha(0.0f);
-            recordTime.setTextColor(0xffffffff);
-            recordTime.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(5), AndroidUtilities.dp(10), AndroidUtilities.dp(5));
-            container.addView(recordTime, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL | Gravity.TOP, 0, 16, 0, 0));
-
-            cameraPanel = new FrameLayout(context) {
-                @Override
-                protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-                    int cx = getMeasuredWidth() / 2;
-                    int cy = getMeasuredHeight() / 2;
-                    int cx2;
-                    int cy2;
-                    shutterButton.layout(cx - shutterButton.getMeasuredWidth() / 2, cy - shutterButton.getMeasuredHeight() / 2, cx + shutterButton.getMeasuredWidth() / 2, cy + shutterButton.getMeasuredHeight() / 2);
-                    if (getMeasuredWidth() == AndroidUtilities.dp(100)) {
-                        cx = cx2 = getMeasuredWidth() / 2;
-                        cy2 = cy + cy / 2 + AndroidUtilities.dp(17);
-                        cy = cy / 2 - AndroidUtilities.dp(17);
-                    } else {
-                        cx2 = cx + cx / 2 + AndroidUtilities.dp(17);
-                        cx = cx / 2 - AndroidUtilities.dp(17);
-                        cy = cy2 = getMeasuredHeight() / 2;
-                    }
-                    switchCameraButton.layout(cx2 - switchCameraButton.getMeasuredWidth() / 2, cy2 - switchCameraButton.getMeasuredHeight() / 2, cx2 + switchCameraButton.getMeasuredWidth() / 2, cy2 + switchCameraButton.getMeasuredHeight() / 2);
-                    for (int a = 0; a < 2; a++) {
-                        flashModeButton[a].layout(cx - flashModeButton[a].getMeasuredWidth() / 2, cy - flashModeButton[a].getMeasuredHeight() / 2, cx + flashModeButton[a].getMeasuredWidth() / 2, cy + flashModeButton[a].getMeasuredHeight() / 2);
-                    }
+        recordTime = new TextView(context);
+        recordTime.setBackgroundResource(R.drawable.system);
+        recordTime.getBackground().setColorFilter(new PorterDuffColorFilter(0x66000000, PorterDuff.Mode.MULTIPLY));
+        recordTime.setText("00:00");
+        recordTime.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        recordTime.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        recordTime.setAlpha(0.0f);
+        recordTime.setTextColor(0xffffffff);
+        recordTime.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(5), AndroidUtilities.dp(10), AndroidUtilities.dp(5));
+        container.addView(recordTime, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL | Gravity.TOP, 0, 16, 0, 0));
+
+        cameraPanel = new FrameLayout(context) {
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                int cx = getMeasuredWidth() / 2;
+                int cy = getMeasuredHeight() / 2;
+                int cx2;
+                int cy2;
+                shutterButton.layout(cx - shutterButton.getMeasuredWidth() / 2, cy - shutterButton.getMeasuredHeight() / 2, cx + shutterButton.getMeasuredWidth() / 2, cy + shutterButton.getMeasuredHeight() / 2);
+                if (getMeasuredWidth() == AndroidUtilities.dp(100)) {
+                    cx = cx2 = getMeasuredWidth() / 2;
+                    cy2 = cy + cy / 2 + AndroidUtilities.dp(17);
+                    cy = cy / 2 - AndroidUtilities.dp(17);
+                } else {
+                    cx2 = cx + cx / 2 + AndroidUtilities.dp(17);
+                    cx = cx / 2 - AndroidUtilities.dp(17);
+                    cy = cy2 = getMeasuredHeight() / 2;
                 }
-            };
-            cameraPanel.setVisibility(View.GONE);
-            cameraPanel.setAlpha(0.0f);
-            container.addView(cameraPanel, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 100, Gravity.LEFT | Gravity.BOTTOM));
+                switchCameraButton.layout(cx2 - switchCameraButton.getMeasuredWidth() / 2, cy2 - switchCameraButton.getMeasuredHeight() / 2, cx2 + switchCameraButton.getMeasuredWidth() / 2, cy2 + switchCameraButton.getMeasuredHeight() / 2);
+                for (int a = 0; a < 2; a++) {
+                    flashModeButton[a].layout(cx - flashModeButton[a].getMeasuredWidth() / 2, cy - flashModeButton[a].getMeasuredHeight() / 2, cx + flashModeButton[a].getMeasuredWidth() / 2, cy + flashModeButton[a].getMeasuredHeight() / 2);
+                }
+            }
+        };
+        cameraPanel.setVisibility(View.GONE);
+        cameraPanel.setAlpha(0.0f);
+        container.addView(cameraPanel, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 100, Gravity.LEFT | Gravity.BOTTOM));
 
-            shutterButton = new ShutterButton(context);
-            cameraPanel.addView(shutterButton, LayoutHelper.createFrame(84, 84, Gravity.CENTER));
-            shutterButton.setDelegate(new ShutterButton.ShutterButtonDelegate() {
-                @Override
-                public boolean shutterLongPressed() {
-                    if (mediaCaptured || takingPhoto || baseFragment == null || baseFragment.getParentActivity() == null || cameraView == null) {
+        shutterButton = new ShutterButton(context);
+        cameraPanel.addView(shutterButton, LayoutHelper.createFrame(84, 84, Gravity.CENTER));
+        shutterButton.setDelegate(new ShutterButton.ShutterButtonDelegate() {
+            @Override
+            public boolean shutterLongPressed() {
+                if (mediaCaptured || takingPhoto || baseFragment == null || baseFragment.getParentActivity() == null || cameraView == null) {
+                    return false;
+                }
+                if (Build.VERSION.SDK_INT >= 23) {
+                    if (baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
+                        requestingPermissions = true;
+                        baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO}, 21);
                         return false;
                     }
-                    if (Build.VERSION.SDK_INT >= 23) {
-                        if (baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
-                            requestingPermissions = true;
-                            baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO}, 21);
-                            return false;
+                }
+                for (int a = 0; a < 2; a++) {
+                    flashModeButton[a].setAlpha(0.0f);
+                }
+                switchCameraButton.setAlpha(0.0f);
+                cameraFile = AndroidUtilities.generateVideoPath();
+                recordTime.setAlpha(1.0f);
+                recordTime.setText("00:00");
+                videoRecordTime = 0;
+                videoRecordRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        if (videoRecordRunnable == null) {
+                            return;
                         }
+                        videoRecordTime++;
+                        recordTime.setText(String.format("%02d:%02d", videoRecordTime / 60, videoRecordTime % 60));
+                        AndroidUtilities.runOnUIThread(videoRecordRunnable, 1000);
                     }
-                    for (int a = 0; a < 2; a++) {
-                        flashModeButton[a].setAlpha(0.0f);
-                    }
-                    switchCameraButton.setAlpha(0.0f);
-                    cameraFile = AndroidUtilities.generateVideoPath();
-                    recordTime.setAlpha(1.0f);
-                    recordTime.setText("00:00");
-                    videoRecordTime = 0;
-                    videoRecordRunnable = new Runnable() {
-                        @Override
-                        public void run() {
-                            if (videoRecordRunnable == null) {
-                                return;
-                            }
-                            videoRecordTime++;
-                            recordTime.setText(String.format("%02d:%02d", videoRecordTime / 60, videoRecordTime % 60));
-                            AndroidUtilities.runOnUIThread(videoRecordRunnable, 1000);
+                };
+                AndroidUtilities.lockOrientation(parentFragment.getParentActivity());
+                CameraController.getInstance().recordVideo(cameraView.getCameraSession(), cameraFile, new CameraController.VideoTakeCallback() {
+                    @Override
+                    public void onFinishVideoRecording(final Bitmap thumb) {
+                        if (cameraFile == null || baseFragment == null) {
+                            return;
                         }
-                    };
-                    AndroidUtilities.lockOrientation(parentFragment.getParentActivity());
-                    CameraController.getInstance().recordVideo(cameraView.getCameraSession(), cameraFile, new CameraController.VideoTakeCallback() {
-                        @Override
-                        public void onFinishVideoRecording(final Bitmap thumb) {
-                            if (cameraFile == null || baseFragment == null) {
-                                return;
+                        PhotoViewer.getInstance().setParentActivity(baseFragment.getParentActivity());
+                        PhotoViewer.getInstance().setParentAlert(ChatAttachAlert.this);
+                        cameraPhoto = new ArrayList<>();
+                        cameraPhoto.add(new MediaController.PhotoEntry(0, 0, 0, cameraFile.getAbsolutePath(), 0, true));
+                        PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new PhotoViewer.EmptyPhotoViewerProvider() {
+                            @Override
+                            public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+                                return thumb;
                             }
-                            PhotoViewer.getInstance().setParentActivity(baseFragment.getParentActivity());
-                            PhotoViewer.getInstance().setParentAlert(ChatAttachAlert.this);
-                            cameraPhoto = new ArrayList<>();
-                            cameraPhoto.add(new MediaController.PhotoEntry(0, 0, 0, cameraFile.getAbsolutePath(), 0, true));
-                            PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new PhotoViewer.EmptyPhotoViewerProvider() {
-                                @Override
-                                public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-                                    return thumb;
-                                }
 
-                                @TargetApi(16)
-                                @Override
-                                public boolean cancelButtonPressed() {
-                                    if (cameraOpened && cameraView != null && cameraFile != null) {
-                                        cameraFile.delete();
-                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                if (cameraView != null && !isDismissed() && Build.VERSION.SDK_INT >= 21) {
-                                                    cameraView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_FULLSCREEN);
-                                                }
+                            @TargetApi(16)
+                            @Override
+                            public boolean cancelButtonPressed() {
+                                if (cameraOpened && cameraView != null && cameraFile != null) {
+                                    cameraFile.delete();
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            if (cameraView != null && !isDismissed() && Build.VERSION.SDK_INT >= 21) {
+                                                cameraView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_FULLSCREEN);
                                             }
-                                        }, 1000);
-                                        CameraController.getInstance().startPreview(cameraView.getCameraSession());
-                                        cameraFile = null;
-                                    }
-                                    return true;
-                                }
-                                @Override
-                                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
-                                    if (cameraFile == null || baseFragment == null) {
-                                        return;
-                                    }
-                                    AndroidUtilities.addMediaToGallery(cameraFile.getAbsolutePath());
-                                    baseFragment.sendMedia((MediaController.PhotoEntry) cameraPhoto.get(0), videoEditedInfo);
-                                    closeCamera(false);
-                                    dismiss();
+                                        }
+                                    }, 1000);
+                                    CameraController.getInstance().startPreview(cameraView.getCameraSession());
                                     cameraFile = null;
                                 }
-
-                                @Override
-                                public void willHidePhotoViewer() {
-                                    mediaCaptured = false;
+                                return true;
+                            }
+                            @Override
+                            public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
+                                if (cameraFile == null || baseFragment == null) {
+                                    return;
                                 }
-                            }, baseFragment);
-                        }
-                    }, new Runnable() {
-                        @Override
-                        public void run() {
-                            AndroidUtilities.runOnUIThread(videoRecordRunnable, 1000);
-                        }
-                    }, false);
-                    shutterButton.setState(ShutterButton.State.RECORDING, true);
-                    return true;
-                }
+                                AndroidUtilities.addMediaToGallery(cameraFile.getAbsolutePath());
+                                baseFragment.sendMedia((MediaController.PhotoEntry) cameraPhoto.get(0), videoEditedInfo);
+                                closeCamera(false);
+                                dismiss();
+                                cameraFile = null;
+                            }
 
-                @Override
-                public void shutterCancel() {
-                    if (mediaCaptured) {
-                        return;
+                            @Override
+                            public void willHidePhotoViewer() {
+                                mediaCaptured = false;
+                            }
+                        }, baseFragment);
                     }
-                    cameraFile.delete();
-                    resetRecordState();
-                    CameraController.getInstance().stopVideoRecording(cameraView.getCameraSession(), true);
+                }, new Runnable() {
+                    @Override
+                    public void run() {
+                        AndroidUtilities.runOnUIThread(videoRecordRunnable, 1000);
+                    }
+                }, false);
+                shutterButton.setState(ShutterButton.State.RECORDING, true);
+                return true;
+            }
+
+            @Override
+            public void shutterCancel() {
+                if (mediaCaptured) {
+                    return;
                 }
+                cameraFile.delete();
+                resetRecordState();
+                CameraController.getInstance().stopVideoRecording(cameraView.getCameraSession(), true);
+            }
 
-                @Override
-                public void shutterReleased() {
-                    if (takingPhoto || cameraView == null || mediaCaptured || cameraView.getCameraSession() == null) {
-                        return;
-                    }
-                    mediaCaptured = true;
-                    if (shutterButton.getState() == ShutterButton.State.RECORDING) {
-                        resetRecordState();
-                        CameraController.getInstance().stopVideoRecording(cameraView.getCameraSession(), false);
-                        shutterButton.setState(ShutterButton.State.DEFAULT, true);
-                        return;
-                    }
-                    cameraFile = AndroidUtilities.generatePicturePath();
-                    final boolean sameTakePictureOrientation = cameraView.getCameraSession().isSameTakePictureOrientation();
-                    takingPhoto = CameraController.getInstance().takePicture(cameraFile, cameraView.getCameraSession(), new Runnable() {
-                        @Override
-                        public void run() {
-                            takingPhoto = false;
-                            if (cameraFile == null || baseFragment == null) {
-                                return;
-                            }
-                            PhotoViewer.getInstance().setParentActivity(baseFragment.getParentActivity());
-                            PhotoViewer.getInstance().setParentAlert(ChatAttachAlert.this);
-                            cameraPhoto = new ArrayList<>();
-                            int orientation = 0;
-                            try {
-                                ExifInterface ei = new ExifInterface(cameraFile.getAbsolutePath());
-                                int exif = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
-                                switch (exif) {
-                                    case ExifInterface.ORIENTATION_ROTATE_90:
-                                        orientation = 90;
-                                        break;
-                                    case ExifInterface.ORIENTATION_ROTATE_180:
-                                        orientation = 180;
-                                        break;
-                                    case ExifInterface.ORIENTATION_ROTATE_270:
-                                        orientation = 270;
-                                        break;
-                                }
-                            } catch (Exception e) {
-                                FileLog.e(e);
+            @Override
+            public void shutterReleased() {
+                if (takingPhoto || cameraView == null || mediaCaptured || cameraView.getCameraSession() == null) {
+                    return;
+                }
+                mediaCaptured = true;
+                if (shutterButton.getState() == ShutterButton.State.RECORDING) {
+                    resetRecordState();
+                    CameraController.getInstance().stopVideoRecording(cameraView.getCameraSession(), false);
+                    shutterButton.setState(ShutterButton.State.DEFAULT, true);
+                    return;
+                }
+                cameraFile = AndroidUtilities.generatePicturePath();
+                final boolean sameTakePictureOrientation = cameraView.getCameraSession().isSameTakePictureOrientation();
+                takingPhoto = CameraController.getInstance().takePicture(cameraFile, cameraView.getCameraSession(), new Runnable() {
+                    @Override
+                    public void run() {
+                        takingPhoto = false;
+                        if (cameraFile == null || baseFragment == null) {
+                            return;
+                        }
+                        PhotoViewer.getInstance().setParentActivity(baseFragment.getParentActivity());
+                        PhotoViewer.getInstance().setParentAlert(ChatAttachAlert.this);
+                        cameraPhoto = new ArrayList<>();
+                        int orientation = 0;
+                        try {
+                            ExifInterface ei = new ExifInterface(cameraFile.getAbsolutePath());
+                            int exif = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
+                            switch (exif) {
+                                case ExifInterface.ORIENTATION_ROTATE_90:
+                                    orientation = 90;
+                                    break;
+                                case ExifInterface.ORIENTATION_ROTATE_180:
+                                    orientation = 180;
+                                    break;
+                                case ExifInterface.ORIENTATION_ROTATE_270:
+                                    orientation = 270;
+                                    break;
                             }
-                            cameraPhoto.add(new MediaController.PhotoEntry(0, 0, 0, cameraFile.getAbsolutePath(), orientation, false));
-                            PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new PhotoViewer.EmptyPhotoViewerProvider() {
-                                @TargetApi(16)
-                                @Override
-                                public boolean cancelButtonPressed() {
-                                    if (cameraOpened && cameraView != null && cameraFile != null) {
-                                        cameraFile.delete();
-                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                if (cameraView != null && !isDismissed() && Build.VERSION.SDK_INT >= 21) {
-                                                    cameraView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_FULLSCREEN);
-                                                }
+                        } catch (Exception e) {
+                            FileLog.e(e);
+                        }
+                        cameraPhoto.add(new MediaController.PhotoEntry(0, 0, 0, cameraFile.getAbsolutePath(), orientation, false));
+                        PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new PhotoViewer.EmptyPhotoViewerProvider() {
+                            @TargetApi(16)
+                            @Override
+                            public boolean cancelButtonPressed() {
+                                if (cameraOpened && cameraView != null && cameraFile != null) {
+                                    cameraFile.delete();
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            if (cameraView != null && !isDismissed() && Build.VERSION.SDK_INT >= 21) {
+                                                cameraView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_FULLSCREEN);
                                             }
-                                        }, 1000);
-                                        CameraController.getInstance().startPreview(cameraView.getCameraSession());
-                                        cameraFile = null;
-                                    }
-                                    return true;
-                                }
-
-                                @Override
-                                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
-                                    if (cameraFile == null || baseFragment == null) {
-                                        return;
-                                    }
-                                    AndroidUtilities.addMediaToGallery(cameraFile.getAbsolutePath());
-                                    baseFragment.sendMedia((MediaController.PhotoEntry) cameraPhoto.get(0), null);
-                                    closeCamera(false);
-                                    dismiss();
+                                        }
+                                    }, 1000);
+                                    CameraController.getInstance().startPreview(cameraView.getCameraSession());
                                     cameraFile = null;
                                 }
+                                return true;
+                            }
 
-                                @Override
-                                public boolean scaleToFill() {
-                                    if (baseFragment == null || baseFragment.getParentActivity() == null) {
-                                        return false;
-                                    }
-                                    int locked = Settings.System.getInt(baseFragment.getParentActivity().getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0);
-                                    return sameTakePictureOrientation || locked == 1;
+                            @Override
+                            public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
+                                if (cameraFile == null || baseFragment == null) {
+                                    return;
                                 }
+                                AndroidUtilities.addMediaToGallery(cameraFile.getAbsolutePath());
+                                baseFragment.sendMedia((MediaController.PhotoEntry) cameraPhoto.get(0), null);
+                                closeCamera(false);
+                                dismiss();
+                                cameraFile = null;
+                            }
 
-                                @Override
-                                public void willHidePhotoViewer() {
-                                    mediaCaptured = false;
+                            @Override
+                            public boolean scaleToFill() {
+                                if (baseFragment == null || baseFragment.getParentActivity() == null) {
+                                    return false;
                                 }
-                            }, baseFragment);
-                        }
-                    });
+                                int locked = Settings.System.getInt(baseFragment.getParentActivity().getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0);
+                                return sameTakePictureOrientation || locked == 1;
+                            }
+
+                            @Override
+                            public void willHidePhotoViewer() {
+                                mediaCaptured = false;
+                            }
+                        }, baseFragment);
+                    }
+                });
+            }
+        });
+
+        switchCameraButton = new ImageView(context);
+        switchCameraButton.setScaleType(ImageView.ScaleType.CENTER);
+        cameraPanel.addView(switchCameraButton, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.CENTER_VERTICAL));
+        switchCameraButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (takingPhoto || cameraView == null || !cameraView.isInitied()) {
+                    return;
                 }
-            });
+                cameraInitied = false;
+                cameraView.switchCamera();
+                ObjectAnimator animator = ObjectAnimator.ofFloat(switchCameraButton, "scaleX", 0.0f).setDuration(100);
+                animator.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animator) {
+                        switchCameraButton.setImageResource(cameraView.isFrontface() ? R.drawable.camera_revert1 : R.drawable.camera_revert2);
+                        ObjectAnimator.ofFloat(switchCameraButton, "scaleX", 1.0f).setDuration(100).start();
+                    }
+                });
+                animator.start();
+            }
+        });
 
-            switchCameraButton = new ImageView(context);
-            switchCameraButton.setScaleType(ImageView.ScaleType.CENTER);
-            cameraPanel.addView(switchCameraButton, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.CENTER_VERTICAL));
-            switchCameraButton.setOnClickListener(new View.OnClickListener() {
+        for (int a = 0; a < 2; a++) {
+            flashModeButton[a] = new ImageView(context);
+            flashModeButton[a].setScaleType(ImageView.ScaleType.CENTER);
+            flashModeButton[a].setVisibility(View.INVISIBLE);
+            cameraPanel.addView(flashModeButton[a], LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+            flashModeButton[a].setOnClickListener(new View.OnClickListener() {
                 @Override
-                public void onClick(View v) {
-                    if (takingPhoto || cameraView == null || !cameraView.isInitied()) {
+                public void onClick(final View currentImage) {
+                    if (flashAnimationInProgress || cameraView == null || !cameraView.isInitied() || !cameraOpened) {
                         return;
                     }
-                    cameraInitied = false;
-                    cameraView.switchCamera();
-                    ObjectAnimator animator = ObjectAnimator.ofFloat(switchCameraButton, "scaleX", 0.0f).setDuration(100);
-                    animator.addListener(new AnimatorListenerAdapter() {
+                    String current = cameraView.getCameraSession().getCurrentFlashMode();
+                    String next = cameraView.getCameraSession().getNextFlashMode();
+                    if (current.equals(next)) {
+                        return;
+                    }
+                    cameraView.getCameraSession().setCurrentFlashMode(next);
+                    flashAnimationInProgress = true;
+                    ImageView nextImage = flashModeButton[0] == currentImage ? flashModeButton[1] : flashModeButton[0];
+                    nextImage.setVisibility(View.VISIBLE);
+                    setCameraFlashModeIcon(nextImage, next);
+                    AnimatorSet animatorSet = new AnimatorSet();
+                    animatorSet.playTogether(
+                            ObjectAnimator.ofFloat(currentImage, "translationY", 0, AndroidUtilities.dp(48)),
+                            ObjectAnimator.ofFloat(nextImage, "translationY", -AndroidUtilities.dp(48), 0),
+                            ObjectAnimator.ofFloat(currentImage, "alpha", 1.0f, 0.0f),
+                            ObjectAnimator.ofFloat(nextImage, "alpha", 0.0f, 1.0f));
+                    animatorSet.setDuration(200);
+                    animatorSet.addListener(new AnimatorListenerAdapter() {
                         @Override
                         public void onAnimationEnd(Animator animator) {
-                            switchCameraButton.setImageResource(cameraView.isFrontface() ? R.drawable.camera_revert1 : R.drawable.camera_revert2);
-                            ObjectAnimator.ofFloat(switchCameraButton, "scaleX", 1.0f).setDuration(100).start();
+                            flashAnimationInProgress = false;
+                            currentImage.setVisibility(View.INVISIBLE);
                         }
                     });
-                    animator.start();
+                    animatorSet.start();
                 }
             });
-
-            for (int a = 0; a < 2; a++) {
-                flashModeButton[a] = new ImageView(context);
-                flashModeButton[a].setScaleType(ImageView.ScaleType.CENTER);
-                flashModeButton[a].setVisibility(View.INVISIBLE);
-                cameraPanel.addView(flashModeButton[a], LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
-                flashModeButton[a].setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(final View currentImage) {
-                        if (flashAnimationInProgress || cameraView == null || !cameraView.isInitied() || !cameraOpened) {
-                            return;
-                        }
-                        String current = cameraView.getCameraSession().getCurrentFlashMode();
-                        String next = cameraView.getCameraSession().getNextFlashMode();
-                        if (current.equals(next)) {
-                            return;
-                        }
-                        cameraView.getCameraSession().setCurrentFlashMode(next);
-                        flashAnimationInProgress = true;
-                        ImageView nextImage = flashModeButton[0] == currentImage ? flashModeButton[1] : flashModeButton[0];
-                        nextImage.setVisibility(View.VISIBLE);
-                        setCameraFlashModeIcon(nextImage, next);
-                        AnimatorSet animatorSet = new AnimatorSet();
-                        animatorSet.playTogether(
-                                ObjectAnimator.ofFloat(currentImage, "translationY", 0, AndroidUtilities.dp(48)),
-                                ObjectAnimator.ofFloat(nextImage, "translationY", -AndroidUtilities.dp(48), 0),
-                                ObjectAnimator.ofFloat(currentImage, "alpha", 1.0f, 0.0f),
-                                ObjectAnimator.ofFloat(nextImage, "alpha", 0.0f, 1.0f));
-                        animatorSet.setDuration(200);
-                        animatorSet.addListener(new AnimatorListenerAdapter() {
-                            @Override
-                            public void onAnimationEnd(Animator animator) {
-                                flashAnimationInProgress = false;
-                                currentImage.setVisibility(View.INVISIBLE);
-                            }
-                        });
-                        animatorSet.start();
-                    }
-                });
-            }
         }
     }
 
@@ -1666,10 +1664,7 @@ public void init() {
         if (MediaController.allMediaAlbumEntry != null) {
             for (int a = 0; a < Math.min(100, MediaController.allMediaAlbumEntry.photos.size()); a++) {
                 MediaController.PhotoEntry photoEntry = MediaController.allMediaAlbumEntry.photos.get(a);
-                photoEntry.caption = null;
-                photoEntry.imagePath = null;
-                photoEntry.thumbPath = null;
-                photoEntry.stickers.clear();
+                photoEntry.reset();
             }
         }
         if (currentHintAnimation != null) {
@@ -1876,7 +1871,7 @@ public void checkCamera(boolean request) {
                 CameraController.getInstance().initCamera();
                 deviceHasGoodCamera = CameraController.getInstance().isCameraInitied();
             }
-        } else if (Build.VERSION.SDK_INT >= 16) {
+        } else {
             CameraController.getInstance().initCamera();
             deviceHasGoodCamera = CameraController.getInstance().isCameraInitied();
         }
@@ -2008,11 +2003,7 @@ public void clearSelectedPhotos() {
             if (!selectedPhotos.isEmpty()) {
                 for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
                     MediaController.PhotoEntry photoEntry = entry.getValue();
-                    photoEntry.imagePath = null;
-                    photoEntry.thumbPath = null;
-                    photoEntry.caption = null;
-                    photoEntry.editedInfo = null;
-                    photoEntry.stickers.clear();
+                    photoEntry.reset();
                 }
                 selectedPhotos.clear();
                 updatePhotosButton();
@@ -2032,9 +2023,7 @@ public void onCheckClick(PhotoAttachPhotoCell v) {
                     if (selectedPhotos.containsKey(photoEntry.imageId)) {
                         selectedPhotos.remove(photoEntry.imageId);
                         v.setChecked(false, true);
-                        photoEntry.imagePath = null;
-                        photoEntry.thumbPath = null;
-                        photoEntry.stickers.clear();
+                        photoEntry.reset();
                         v.setPhotoEntry(photoEntry, (Integer) v.getTag() == MediaController.allMediaAlbumEntry.photos.size() - 1);
                     } else {
                         selectedPhotos.put(photoEntry.imageId, photoEntry);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
index 2d1ea0eaf..14f5ef653 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
@@ -36,6 +36,7 @@
     private Canvas checkCanvas;
 
     private boolean drawBackground;
+    private boolean hasBorder;
 
     private float progress;
     private ObjectAnimator checkAnimator;
@@ -94,6 +95,10 @@ public void setDrawBackground(boolean value) {
         drawBackground = value;
     }
 
+    public void setHasBorder(boolean value) {
+        hasBorder = value;
+    }
+
     public void setCheckOffset(int value) {
         checkOffset = value;
     }
@@ -198,6 +203,9 @@ protected void onDraw(Canvas canvas) {
 
             paint.setColor(color);
 
+            if (hasBorder) {
+                rad -= AndroidUtilities.dp(2);
+            }
             bitmapCanvas.drawCircle(getMeasuredWidth() / 2, getMeasuredHeight() / 2, rad, paint);
             bitmapCanvas.drawCircle(getMeasuredWidth() / 2, getMeasuredHeight() / 2, rad * (1 - roundProgress), eraser);
             canvas.drawBitmap(drawBitmap, 0, 0, null);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
index f0a56371e..3d69e0420 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
@@ -4,6 +4,8 @@
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.RectF;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -125,7 +127,7 @@ public void setRotation(float rotation, boolean animated) {
     }
 
     public void setAspectLock(boolean enabled) {
-        aspectRatioButton.setImageResource(enabled ? R.drawable.tool_cropfix_active : R.drawable.tool_cropfix);
+        aspectRatioButton.setColorFilter(enabled ? new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY) : null);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/CubicBezierInterpolator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/CubicBezierInterpolator.java
index 4fb365a53..6d81a9b8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/CubicBezierInterpolator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/CubicBezierInterpolator.java
@@ -5,10 +5,11 @@
 
 public class CubicBezierInterpolator implements Interpolator {
 
-    public static final CubicBezierInterpolator DEFAULT=new CubicBezierInterpolator(0.25, 0.1, 0.25, 1);
-    public static final CubicBezierInterpolator EASE_OUT=new CubicBezierInterpolator(0, 0, .58, 1);
-    public static final CubicBezierInterpolator EASE_IN=new CubicBezierInterpolator(.42, 0, 1, 1);
-    public static final CubicBezierInterpolator EASE_BOTH=new CubicBezierInterpolator(.42, 0, .58, 1);
+    public static final CubicBezierInterpolator DEFAULT = new CubicBezierInterpolator(0.25, 0.1, 0.25, 1);
+    public static final CubicBezierInterpolator EASE_OUT = new CubicBezierInterpolator(0, 0, .58, 1);
+    public static final CubicBezierInterpolator EASE_OUT_QUINT = new CubicBezierInterpolator(.23, 1, .32, 1);
+    public static final CubicBezierInterpolator EASE_IN = new CubicBezierInterpolator(.42, 0, 1, 1);
+    public static final CubicBezierInterpolator EASE_BOTH = new CubicBezierInterpolator(.42, 0, .58, 1);
 
     protected PointF start;
     protected PointF end;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 39f39508c..db5717ec8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -33,7 +33,9 @@
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
+import android.view.VelocityTracker;
 import android.view.View;
+import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.ViewTreeObserver;
@@ -89,6 +91,13 @@
         void onStickerSetRemove(TLRPC.StickerSetCovered stickerSet);
     }
 
+    public interface DragListener{
+        void onDragStart();
+        void onDragEnd(float velocity);
+        void onDragCancel();
+        void onDrag(int offset);
+    }
+
     private StickerPreviewViewer.StickerPreviewViewerDelegate stickerPreviewViewerDelegate = new StickerPreviewViewer.StickerPreviewViewerDelegate() {
         @Override
         public void sentSticker(TLRPC.Document sticker) {
@@ -582,6 +591,7 @@ protected void onDraw(Canvas canvas) {
     private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
     private PagerSlidingTabStrip pagerSlidingTabStrip;
     private TextView mediaBanTooltip;
+    private DragListener dragListener;
 
     private int currentChatId;
 
@@ -873,12 +883,34 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 float lastX;
                 float lastTranslateX;
                 boolean first = true;
+                final int touchslop=ViewConfiguration.get(getContext()).getScaledTouchSlop();
+                float downX, downY;
+                boolean draggingVertically, draggingHorizontally;
+                VelocityTracker vTracker;
 
                 @Override
                 public boolean onInterceptTouchEvent(MotionEvent ev) {
                     if (getParent() != null) {
                         getParent().requestDisallowInterceptTouchEvent(true);
                     }
+                    if(ev.getAction()==MotionEvent.ACTION_DOWN){
+                        draggingVertically=draggingHorizontally=false;
+                        downX=ev.getRawX();
+                        downY=ev.getRawY();
+                    }else{
+                        if(!draggingVertically && !draggingHorizontally && dragListener!=null){
+                            if(Math.abs(ev.getRawY()-downY)>=touchslop){
+                                draggingVertically=true;
+                                downY=ev.getRawY();
+								dragListener.onDragStart();
+                                if(startedScroll){
+                                    pager.endFakeDrag();
+                                    startedScroll=false;
+                                }
+                                return true;
+                            }
+                        }
+                    }
                     return super.onInterceptTouchEvent(ev);
                 }
 
@@ -888,6 +920,46 @@ public boolean onTouchEvent(MotionEvent ev) {
                         first = false;
                         lastX = ev.getX();
                     }
+                    if(ev.getAction()==MotionEvent.ACTION_DOWN){
+                        draggingVertically=draggingHorizontally=false;
+                        downX=ev.getRawX();
+                        downY=ev.getRawY();
+                    }else{
+                        if(!draggingVertically && !draggingHorizontally && dragListener!=null){
+                            if(Math.abs(ev.getRawX()-downX)>=touchslop){
+                                draggingHorizontally=true;
+                            }else if(Math.abs(ev.getRawY()-downY)>=touchslop){
+                                draggingVertically=true;
+                                downY=ev.getRawY();
+                                dragListener.onDragStart();
+                                if(startedScroll){
+                                    pager.endFakeDrag();
+                                    startedScroll=false;
+                                }
+                            }
+                        }
+                    }
+                    if(draggingVertically){
+                        if(vTracker==null)
+                            vTracker=VelocityTracker.obtain();
+                        vTracker.addMovement(ev);
+                        if(ev.getAction()==MotionEvent.ACTION_UP || ev.getAction()==MotionEvent.ACTION_CANCEL){
+                            vTracker.computeCurrentVelocity(1000);
+                            float velocity=vTracker.getYVelocity();
+                            vTracker.recycle();
+                            vTracker=null;
+                            if(ev.getAction()==MotionEvent.ACTION_UP){
+                                dragListener.onDragEnd(velocity);
+                            }else{
+                                dragListener.onDragCancel();
+                            }
+                            first=true;
+                            draggingVertically=draggingHorizontally=false;
+                        }else{
+                            dragListener.onDrag(Math.round(ev.getRawY()-downY));
+                        }
+                        return true;
+                    }
                     float newTranslationX = stickersTab.getTranslationX();
                     if (stickersTab.getScrollX() == 0 && newTranslationX == 0) {
                         if (!startedScroll && lastX - ev.getX() < 0) {
@@ -920,6 +992,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                     lastX = ev.getX();
                     if (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP) {
                         first = true;
+                        draggingVertically=draggingHorizontally=false;
                         if (startedScroll) {
                             pager.endFakeDrag();
                             startedScroll = false;
@@ -1618,6 +1691,10 @@ public void setListener(Listener value) {
         listener = value;
     }
 
+    public void setDragListener(DragListener dragListener){
+        this.dragListener=dragListener;
+    }
+
     public void invalidateViews() {
         for (int a = 0; a < emojiGrids.size(); a++) {
             emojiGrids.get(a).invalidateViews();
@@ -1851,6 +1928,10 @@ private void updateVisibleTrendingSets() {
         }
     }
 
+    public boolean areThereAnyStickers(){
+        return stickersGridAdapter!=null && stickersGridAdapter.getItemCount()>0;
+    }
+
     @SuppressWarnings("unchecked")
     @Override
     public void didReceivedNotification(int id, Object... args) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
index 1b7153703..c6a390cc2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
@@ -80,7 +80,7 @@ public GroupCreateSpan(Context context, TLRPC.User user) {
         if (user.photo != null) {
             photo = user.photo.photo_small;
         }
-        imageReceiver.setImage(photo, null, "50_50", avatarDrawable, null, null, 0, null, true);
+        imageReceiver.setImage(photo, null, "50_50", avatarDrawable, null, null, 0, null, 1);
         updateColors();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
index 92fcbe990..2b770b538 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
@@ -177,6 +177,15 @@ private void init() {
         updateInputTextView();
     }
 
+    public void setTextColor(int color) {
+        mInputText.setTextColor(color);
+        mSelectorWheelPaint.setColor(color);
+    }
+
+    public void setSelectorColor(int color) {
+        mSelectionDivider.setColor(color);
+    }
+
     public NumberPicker(Context context) {
         super(context);
         init();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
index 0e3ebcf12..9eac795a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
@@ -13,7 +13,6 @@
 import android.graphics.Paint;
 import android.graphics.Paint.Style;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.support.v4.view.ViewPager;
 import android.support.v4.view.ViewPager.OnPageChangeListener;
 import android.view.View;
@@ -104,11 +103,7 @@ public void notifyDataSetChanged() {
         getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
             @Override
             public void onGlobalLayout() {
-                if (Build.VERSION.SDK_INT < 16) {
-                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                } else {
-                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                }
+                getViewTreeObserver().removeOnGlobalLayoutListener(this);
                 currentPosition = pager.getCurrentItem();
                 scrollToChild(currentPosition, 0);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
index f4ce8371d..c0585967b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
@@ -30,6 +30,7 @@
         void onColorValueChanged();
         void onFinishedColorPicking();
         void onSettingsPressed();
+        void onUndoPressed();
     }
 
     private ColorPickerDelegate delegate;
@@ -63,6 +64,7 @@
     };
 
     private ImageView settingsButton;
+    private ImageView undoButton;
     private Drawable shadowDrawable;
 
     private Paint gradientPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
@@ -97,10 +99,28 @@ public void onClick(View v) {
             }
         });
 
+        undoButton = new ImageView(context);
+        undoButton.setScaleType(ImageView.ScaleType.CENTER);
+        undoButton.setImageResource(R.drawable.photo_undo);
+        addView(undoButton, LayoutHelper.createFrame(60, 52));
+        undoButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (delegate != null) {
+                    delegate.onUndoPressed();
+                }
+            }
+        });
+
         location = context.getSharedPreferences("paint", Activity.MODE_PRIVATE).getFloat("last_color_location", 1.0f);
         setLocation(location);
     }
 
+    public void setUndoEnabled(boolean enabled) {
+        undoButton.setAlpha(enabled ? 1.0f : 0.3f);
+        undoButton.setEnabled(enabled);
+    }
+
     public void setDelegate(ColorPickerDelegate colorPickerDelegate) {
         delegate = colorPickerDelegate;
     }
@@ -202,7 +222,7 @@ public boolean onTouchEvent(MotionEvent event) {
         float x = event.getX() - rectF.left;
         float y = event.getY() - rectF.top;
 
-        if (!interacting && x < -AndroidUtilities.dp(10)) {
+        if (!interacting && y < -AndroidUtilities.dp(10)) {
             return false;
         }
 
@@ -225,14 +245,14 @@ public boolean onTouchEvent(MotionEvent event) {
                 }
             }
 
-            float colorLocation = Math.max(0.0f, Math.min(1.0f, y / rectF.height()));
+            float colorLocation = Math.max(0.0f, Math.min(1.0f, x / rectF.width()));
             setLocation(colorLocation);
 
             setDragging(true, true);
 
-            if (x < -AndroidUtilities.dp(10)) {
+            if (y < -AndroidUtilities.dp(10)) {
                 changingWeight = true;
-                float weightLocation = (-x - AndroidUtilities.dp(10)) / AndroidUtilities.dp(190);
+                float weightLocation = (-y - AndroidUtilities.dp(10)) / AndroidUtilities.dp(190);
                 weightLocation = Math.max(0.0f, Math.min(1.0f, weightLocation));
                 setWeight(weightLocation);
             }
@@ -251,21 +271,20 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int width = right - left;
         int height = bottom - top;
 
-        int backHeight = getMeasuredHeight() - AndroidUtilities.dp(26) - AndroidUtilities.dp(64);
-        gradientPaint.setShader(new LinearGradient(0, AndroidUtilities.dp(26), 0, backHeight + AndroidUtilities.dp(26), COLORS, LOCATIONS, Shader.TileMode.REPEAT));
-        int x = width - AndroidUtilities.dp(26) - AndroidUtilities.dp(8);
-        int y = AndroidUtilities.dp(26);
-        rectF.set(x, y, x + AndroidUtilities.dp(8), y + backHeight);
+        gradientPaint.setShader(new LinearGradient(AndroidUtilities.dp(56), 0, width - AndroidUtilities.dp(56), 0, COLORS, LOCATIONS, Shader.TileMode.REPEAT));
+        int y = height - AndroidUtilities.dp(32);
+        rectF.set(AndroidUtilities.dp(56), y, width - AndroidUtilities.dp(56), y + AndroidUtilities.dp(12));
 
         settingsButton.layout(width - settingsButton.getMeasuredWidth(), height - AndroidUtilities.dp(52), width, height);
+        undoButton.layout(0, height - AndroidUtilities.dp(52), settingsButton.getMeasuredWidth(), height);
     }
 
     @Override
     protected void onDraw(Canvas canvas) {
         canvas.drawRoundRect(rectF, AndroidUtilities.dp(6), AndroidUtilities.dp(6), gradientPaint);
 
-        int cx = (int) (rectF.centerX() + draggingFactor * -AndroidUtilities.dp(70) - (changingWeight ? weight * AndroidUtilities.dp(190) : 0.0f));
-        int cy = (int) (rectF.top - AndroidUtilities.dp(22) + rectF.height() * location) + AndroidUtilities.dp(22);
+        int cx = (int) (rectF.left + rectF.width() * location);
+        int cy = (int) (rectF.centerY() + draggingFactor * -AndroidUtilities.dp(70) - (changingWeight ? weight * AndroidUtilities.dp(190) : 0.0f));
 
         int side = (int) (AndroidUtilities.dp(24) * (0.5f * (1 + draggingFactor)));
         shadowDrawable.setBounds(cx - side, cy - side, cx + side, cy + side);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/EntityView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/EntityView.java
index 923aea686..c115558bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/EntityView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/EntityView.java
@@ -21,8 +21,6 @@
         boolean onEntitySelected(EntityView entityView);
         boolean onEntityLongClicked(EntityView entityView);
         boolean allowInteraction(EntityView entityView);
-        void onBeganEntityDragging(EntityView entityView);
-        void onFinishedEntityDragging(EntityView entityView);
     }
 
     private float previousLocationX;
@@ -31,7 +29,6 @@
     private boolean hasReleased = false;
     private boolean hasTransformed = false;
     private boolean announcedSelection = false;
-    private boolean announcedDragging = false;
     private boolean recognizedLongPress = false;
 
     private EntityViewDelegate delegate;
@@ -112,12 +109,6 @@ private boolean onTouchMove(float x, float y) {
             pan(translation);
             previousLocationX = x;
             previousLocationY = y;
-            if (!announcedDragging) {
-                announcedDragging = true;
-                if (delegate != null) {
-                    delegate.onBeganEntityDragging(this);
-                }
-            }
             hasPanned = true;
             return true;
         }
@@ -128,15 +119,11 @@ private void onTouchUp() {
         if (!recognizedLongPress && !hasPanned && !hasTransformed && !announcedSelection && delegate != null) {
             delegate.onEntitySelected(this);
         }
-        if (announcedDragging && delegate != null) {
-            delegate.onFinishedEntityDragging(this);
-        }
         recognizedLongPress = false;
         hasPanned = false;
         hasTransformed = false;
         hasReleased = true;
         announcedSelection = false;
-        announcedDragging = false;
     }
 
     @Override
@@ -347,12 +334,6 @@ else if (currentHandle != 0) {
                         previousLocationX = event.getRawX();
                         previousLocationY = event.getRawY();
 
-                        if (!announcedDragging) {
-                            announcedDragging = true;
-                            if (delegate != null) {
-                                delegate.onBeganEntityDragging(EntityView.this);
-                            }
-                        }
                         handled = true;
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/StickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/StickerView.java
index 9d8372bde..f7e45f61f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/StickerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/StickerView.java
@@ -65,7 +65,7 @@ public StickerView(Context context, Point position, float angle, float scale, Si
         centerImage.setAspectFit(true);
         centerImage.setInvalidateAll(true);
         centerImage.setParentView(containerView);
-        centerImage.setImage(sticker, null, sticker.thumb.location, null, "webp", true);
+        centerImage.setImage(sticker, null, sticker.thumb.location, null, "webp", 1);
 
         updatePosition();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
index cf0f28a51..17dc4d04a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
@@ -29,14 +29,14 @@
     private PhotoEditorSeekBarDelegate delegate;
 
     public interface PhotoEditorSeekBarDelegate {
-        void onProgressChanged();
+        void onProgressChanged(int i, int progress);
     }
 
     public PhotoEditorSeekBar(Context context) {
         super(context);
 
-        innerPaint.setColor(0x99383838);
-        outerPaint.setColor(0xff53aeef);
+        innerPaint.setColor(0xff4d4d4d);
+        outerPaint.setColor(0xffffffff);
     }
 
     public void setDelegate(PhotoEditorSeekBarDelegate delegate) {
@@ -76,7 +76,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 }
                 progress = thumbX / (getMeasuredWidth() - thumbSize);
                 if (delegate != null) {
-                    delegate.onProgressChanged();
+                    delegate.onProgressChanged((Integer) getTag(), getProgress());
                 }
                 invalidate();
                 return true;
@@ -98,7 +98,7 @@ public void setProgress(int progress, boolean notify) {
         this.progress = (progress - minValue) / (float) (maxValue - minValue);
         invalidate();
         if (notify && delegate != null) {
-            delegate.onProgressChanged();
+            delegate.onProgressChanged((Integer) getTag(), getProgress());
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index 4ac5e2109..12338a7a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -8,18 +8,14 @@
 
 package org.telegram.ui.Components;
 
-import android.animation.Animator;
-import android.animation.AnimatorListenerAdapter;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Matrix;
-import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.SurfaceTexture;
+import android.graphics.drawable.Drawable;
 import android.opengl.GLES20;
 import android.opengl.GLUtils;
 import android.os.Build;
@@ -44,6 +40,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Cells.PhotoEditRadioCell;
 import org.telegram.ui.Cells.PhotoEditToolCell;
 
 import java.nio.ByteBuffer;
@@ -63,51 +60,21 @@
 @SuppressLint("NewApi")
 public class PhotoFilterView extends FrameLayout {
 
-    private final int[] tintShadowColors = new int[] {
-            0x00000000,
-            0xffff4d4d,
-            0xfff48022,
-            0xffffcd00,
-            0xff81d281,
-            0xff71c5d6,
-            0xff0072bc,
-            0xff662d91
-    };
-
-    private final int[] tintHighlighsColors = new int[] {
-            0x00000000,
-            0xffef9286,
-            0xffeacea2,
-            0xfff2e17c,
-            0xffa4edae,
-            0xff89dce5,
-            0xff2e8bc8,
-            0xffcd98e5
-    };
-
     private boolean showOriginal;
 
-    private float previousValue;
-    private int previousValueInt;
-    private int previousValueInt2;
-
-    private int selectedTintMode;
-
-    private int selectedTool = -1;
     private int enhanceTool = 0;
     private int exposureTool = 1;
     private int contrastTool = 2;
-    private int warmthTool = 3;
-    private int saturationTool = 4;
-    private int tintTool = 5;
-    private int fadeTool = 6;
-    private int highlightsTool = 7;
-    private int shadowsTool = 8;
-    private int vignetteTool = 9;
-    private int grainTool = 10;
-    private int blurTool = 11;
-    private int sharpenTool = 12;
-    private int curvesTool = 13;
+    private int saturationTool = 3;
+    private int warmthTool = 4;
+    private int fadeTool = 5;
+    private int highlightsTool = 6;
+    private int shadowsTool = 7;
+    private int vignetteTool = 8;
+    private int grainTool = 9;
+    private int sharpenTool = 10;
+    private int tintShadowsTool = 11;
+    private int tintHighlightsTool = 12;
 
     private float enhanceValue = 0; //0 100
     private float exposureValue = 0; //-100 100
@@ -133,13 +100,7 @@
     private float blurExcludeBlurSize = 0.15f;
     private float blurAngle = (float) Math.PI / 2.0f;
 
-    private ToolsAdapter toolsAdapter;
-    private PhotoEditorSeekBar valueSeekBar;
     private FrameLayout toolsView;
-    private FrameLayout editView;
-    private TextView paramTextView;
-    private TextView infoTextView;
-    private TextView valueTextView;
     private TextView doneTextView;
     private TextView cancelTextView;
     private TextureView textureView;
@@ -151,18 +112,18 @@
     private TextView blurOffButton;
     private TextView blurRadialButton;
     private TextView blurLinearButton;
-    private FrameLayout tintLayout;
-    private TextView tintShadowsButton;
-    private TextView tintHighlightsButton;
-    private LinearLayout tintButtonsContainer;
     private FrameLayout curveLayout;
-    private TextView[] curveTextView = new TextView[4];
+    private RadioButton[] curveRadioButton = new RadioButton[4];
+
+    private int selectedTool;
+
+    private ImageView tuneItem;
+    private ImageView blurItem;
+    private ImageView curveItem;
 
     private Bitmap bitmapToEdit;
     private int orientation;
 
-    private int toolCellWidth;
-
     public static class CurvesValue {
 
         public float blacksLevel = 0.0f;
@@ -1743,7 +1704,7 @@ public void valueChanged() {
         addView(curvesControl, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
 
         toolsView = new FrameLayout(context);
-        addView(toolsView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 126, Gravity.LEFT | Gravity.BOTTOM));
+        addView(toolsView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 186, Gravity.LEFT | Gravity.BOTTOM));
 
         FrameLayout frameLayout = new FrameLayout(context);
         frameLayout.setBackgroundColor(0xff000000);
@@ -1769,309 +1730,130 @@ public void valueChanged() {
         doneTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         frameLayout.addView(doneTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
 
-        toolCellWidth = calculateMaxToolCellWidth();
+        LinearLayout linearLayout = new LinearLayout(context);
+        frameLayout.addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER_HORIZONTAL));
 
-        recyclerListView = new RecyclerListView(context);
-        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
-        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
-        recyclerListView.setLayoutManager(layoutManager);
-        recyclerListView.setClipToPadding(false);
-        recyclerListView.setPadding(AndroidUtilities.dp(15), 0, 0, 0);
-        recyclerListView.setTag(12);
-        recyclerListView.setOverScrollMode(RecyclerListView.OVER_SCROLL_NEVER);
-        recyclerListView.setAdapter(toolsAdapter = new ToolsAdapter(context));
-        toolsView.addView(recyclerListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 60, Gravity.LEFT | Gravity.TOP));
-        recyclerListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
+        tuneItem = new ImageView(context);
+        tuneItem.setScaleType(ImageView.ScaleType.CENTER);
+        tuneItem.setImageResource(R.drawable.photo_tools);
+        tuneItem.setColorFilter(new PorterDuffColorFilter(0xff6cc3ff, PorterDuff.Mode.MULTIPLY));
+        tuneItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        linearLayout.addView(tuneItem, LayoutHelper.createLinear(56, 48));
+        tuneItem.setOnClickListener(new View.OnClickListener() {
             @Override
-            public void onItemClick(View view, int position) {
-                selectedTool = position;
-                if (position == enhanceTool) {
-                    previousValue = enhanceValue;
-                    valueSeekBar.setMinMax(0, 100);
-                    paramTextView.setText(LocaleController.getString("Enhance", R.string.Enhance));
-                } else if (position == highlightsTool) {
-                    previousValue = highlightsValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Highlights", R.string.Highlights));
-                } else if (position == contrastTool) {
-                    previousValue = contrastValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Contrast", R.string.Contrast));
-                } else if (position == exposureTool) {
-                    previousValue = exposureValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Exposure", R.string.Exposure));
-                } else if (position == warmthTool) {
-                    previousValue = warmthValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Warmth", R.string.Warmth));
-                } else if (position == saturationTool) {
-                    previousValue = saturationValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Saturation", R.string.Saturation));
-                } else if (position == vignetteTool) {
-                    previousValue = vignetteValue;
-                    valueSeekBar.setMinMax(0, 100);
-                    paramTextView.setText(LocaleController.getString("Vignette", R.string.Vignette));
-                } else if (position == shadowsTool) {
-                    previousValue = shadowsValue;
-                    valueSeekBar.setMinMax(-100, 100);
-                    paramTextView.setText(LocaleController.getString("Shadows", R.string.Shadows));
-                } else if (position == grainTool) {
-                    previousValue = grainValue;
-                    valueSeekBar.setMinMax(0, 100);
-                    paramTextView.setText(LocaleController.getString("Grain", R.string.Grain));
-                } else if (position == fadeTool) {
-                    previousValue = fadeValue;
-                    valueSeekBar.setMinMax(0, 100);
-                    paramTextView.setText(LocaleController.getString("Fade", R.string.Fade));
-                } else if (position == sharpenTool) {
-                    previousValue = sharpenValue;
-                    valueSeekBar.setMinMax(0, 100);
-                    paramTextView.setText(LocaleController.getString("Sharpen", R.string.Sharpen));
-                } else if (position == blurTool) {
-                    previousValueInt = blurType;
-                } else if (position == tintTool) {
-                    previousValueInt = tintShadowsColor;
-                    previousValueInt2 = tintHighlightsColor;
-                } else if (position == curvesTool) {
-                    curvesToolValue.luminanceCurve.saveValues();
-                    curvesToolValue.redCurve.saveValues();
-                    curvesToolValue.greenCurve.saveValues();
-                    curvesToolValue.blueCurve.saveValues();
-                }
-                valueSeekBar.setProgress((int) previousValue, false);
-                updateValueTextView();
-                switchToOrFromEditMode();
+            public void onClick(View v) {
+                selectedTool = 0;
+                tuneItem.setColorFilter(new PorterDuffColorFilter(0xff6cc3ff, PorterDuff.Mode.MULTIPLY));
+                blurItem.setColorFilter(null);
+                curveItem.setColorFilter(null);
+                switchMode();
             }
         });
 
-        editView = new FrameLayout(context);
-        editView.setVisibility(GONE);
-        addView(editView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 126, Gravity.LEFT | Gravity.BOTTOM));
-
-        frameLayout = new FrameLayout(context);
-        frameLayout.setBackgroundColor(0xff000000);
-        editView.addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
-
-        ImageView imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.edit_cancel);
-        imageView.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, 0));
-        imageView.setPadding(AndroidUtilities.dp(22), 0, AndroidUtilities.dp(22), 0);
-        frameLayout.addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-        imageView.setOnClickListener(new OnClickListener() {
+        blurItem = new ImageView(context);
+        blurItem.setScaleType(ImageView.ScaleType.CENTER);
+        blurItem.setImageResource(R.drawable.tool_blur);
+        blurItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        linearLayout.addView(blurItem, LayoutHelper.createLinear(56, 48));
+        blurItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (selectedTool == enhanceTool) {
-                    enhanceValue = previousValue;
-                } else if (selectedTool == highlightsTool) {
-                    highlightsValue = previousValue;
-                } else if (selectedTool == contrastTool) {
-                    contrastValue = previousValue;
-                } else if (selectedTool == exposureTool) {
-                    exposureValue = previousValue;
-                } else if (selectedTool == warmthTool) {
-                    warmthValue = previousValue;
-                } else if (selectedTool == saturationTool) {
-                    saturationValue = previousValue;
-                } else if (selectedTool == vignetteTool) {
-                    vignetteValue = previousValue;
-                } else if (selectedTool == shadowsTool) {
-                    shadowsValue = previousValue;
-                } else if (selectedTool == grainTool) {
-                    grainValue = previousValue;
-                } else if (selectedTool == sharpenTool) {
-                    sharpenValue = previousValue;
-                } else if (selectedTool == fadeTool) {
-                    fadeValue = previousValue;
-                } else if (selectedTool == blurTool) {
-                    blurType = previousValueInt;
-                } else if (selectedTool == tintTool) {
-                    tintShadowsColor = previousValueInt;
-                    tintHighlightsColor = previousValueInt2;
-                } else if (selectedTool == curvesTool) {
-                    curvesToolValue.luminanceCurve.restoreValues();
-                    curvesToolValue.redCurve.restoreValues();
-                    curvesToolValue.greenCurve.restoreValues();
-                    curvesToolValue.blueCurve.restoreValues();
-                }
-                if (eglThread != null) {
-                    eglThread.requestRender(selectedTool != blurTool);
-                }
-                switchToOrFromEditMode();
+                selectedTool = 1;
+                tuneItem.setColorFilter(null);
+                blurItem.setColorFilter(new PorterDuffColorFilter(0xff6cc3ff, PorterDuff.Mode.MULTIPLY));
+                curveItem.setColorFilter(null);
+                switchMode();
             }
         });
 
-        imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.edit_done);
-        imageView.setColorFilter(new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY));
-        imageView.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, 0));
-        imageView.setPadding(AndroidUtilities.dp(22), AndroidUtilities.dp(1), AndroidUtilities.dp(22), 0);
-        frameLayout.addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
-        imageView.setOnClickListener(new OnClickListener() {
+        curveItem = new ImageView(context);
+        curveItem.setScaleType(ImageView.ScaleType.CENTER);
+        curveItem.setImageResource(R.drawable.tool_curve);
+        curveItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        linearLayout.addView(curveItem, LayoutHelper.createLinear(56, 48));
+        curveItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                toolsAdapter.notifyDataSetChanged();
-                switchToOrFromEditMode();
+                selectedTool = 2;
+                tuneItem.setColorFilter(null);
+                blurItem.setColorFilter(null);
+                curveItem.setColorFilter(new PorterDuffColorFilter(0xff6cc3ff, PorterDuff.Mode.MULTIPLY));
+                switchMode();
             }
         });
 
-        infoTextView = new TextView(context);
-        infoTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        infoTextView.setTextColor(0xffffffff);
-        frameLayout.addView(infoTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL, 0, 9, 0, 0));
-
-        paramTextView = new TextView(context);
-        paramTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-        paramTextView.setTextColor(0xff808080);
-        frameLayout.addView(paramTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL, 0, 26, 0, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        valueTextView.setTextColor(0xffffffff);
-        frameLayout.addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL, 0, 3, 0, 0));
-
-        valueSeekBar = new PhotoEditorSeekBar(context);
-        valueSeekBar.setDelegate(new PhotoEditorSeekBar.PhotoEditorSeekBarDelegate() {
-            @Override
-            public void onProgressChanged() {
-                int progress = valueSeekBar.getProgress();
-                if (selectedTool == enhanceTool) {
-                    enhanceValue = progress;
-                } else if (selectedTool == highlightsTool) {
-                    highlightsValue = progress;
-                } else if (selectedTool == contrastTool) {
-                    contrastValue = progress;
-                } else if (selectedTool == exposureTool) {
-                    exposureValue = progress;
-                } else if (selectedTool == warmthTool) {
-                    warmthValue = progress;
-                } else if (selectedTool == saturationTool) {
-                    saturationValue = progress;
-                } else if (selectedTool == vignetteTool) {
-                    vignetteValue = progress;
-                } else if (selectedTool == shadowsTool) {
-                    shadowsValue = progress;
-                } else if (selectedTool == grainTool) {
-                    grainValue = progress;
-                } else if (selectedTool == sharpenTool) {
-                    sharpenValue = progress;
-                }  else if (selectedTool == fadeTool) {
-                    fadeValue = progress;
-                }
-                updateValueTextView();
-                if (eglThread != null) {
-                    eglThread.requestRender(true);
-                }
-            }
-        });
-        editView.addView(valueSeekBar, LayoutHelper.createFrame(AndroidUtilities.isTablet() ? 498 : LayoutHelper.MATCH_PARENT, 60, AndroidUtilities.isTablet() ? Gravity.CENTER_HORIZONTAL | Gravity.TOP : Gravity.LEFT | Gravity.TOP, 14, 10, 14, 0));
+        recyclerListView = new RecyclerListView(context);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        recyclerListView.setLayoutManager(layoutManager);
+        recyclerListView.setClipToPadding(false);
+        recyclerListView.setOverScrollMode(RecyclerListView.OVER_SCROLL_NEVER);
+        recyclerListView.setAdapter(new ToolsAdapter(context));
+        toolsView.addView(recyclerListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 120, Gravity.LEFT | Gravity.TOP));
 
         curveLayout = new FrameLayout(context);
-        editView.addView(curveLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 78, Gravity.CENTER_HORIZONTAL));
+        curveLayout.setVisibility(INVISIBLE);
+        toolsView.addView(curveLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 78, Gravity.CENTER_HORIZONTAL, 0, 40, 0, 0));
 
         LinearLayout curveTextViewContainer = new LinearLayout(context);
         curveTextViewContainer.setOrientation(LinearLayout.HORIZONTAL);
-        curveLayout.addView(curveTextViewContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 28, Gravity.CENTER_HORIZONTAL));
+        curveLayout.addView(curveTextViewContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL));
 
         for (int a = 0; a < 4; a++) {
-            curveTextView[a] = new TextView(context);
-            curveTextView[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            curveTextView[a].setGravity(Gravity.CENTER_VERTICAL);
-            curveTextView[a].setTag(a);
+            FrameLayout frameLayout1 = new FrameLayout(context);
+            frameLayout1.setTag(a);
+
+            curveRadioButton[a] = new RadioButton(context);
+            curveRadioButton[a].setSize(AndroidUtilities.dp(20));
+            frameLayout1.addView(curveRadioButton[a], LayoutHelper.createFrame(30, 30, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
+
+            TextView curveTextView = new TextView(context);
+            curveTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+            curveTextView.setGravity(Gravity.CENTER_VERTICAL);
             if (a == 0) {
-                curveTextView[a].setText(LocaleController.getString("CurvesAll", R.string.CurvesAll).toUpperCase());
+                String str = LocaleController.getString("CurvesAll", R.string.CurvesAll);
+                curveTextView.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
+                curveTextView.setTextColor(0xffffffff);
+                curveRadioButton[a].setColor(0xffffffff, 0xffffffff);
             } else if (a == 1) {
-                curveTextView[a].setText(LocaleController.getString("CurvesRed", R.string.CurvesRed).toUpperCase());
+                String str = LocaleController.getString("CurvesRed", R.string.CurvesRed);
+                curveTextView.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
+                curveTextView.setTextColor(0xffe64d4d);
+                curveRadioButton[a].setColor(0xffe64d4d, 0xffe64d4d);
             } else if (a == 2) {
-                curveTextView[a].setText(LocaleController.getString("CurvesGreen", R.string.CurvesGreen).toUpperCase());
+                String str = LocaleController.getString("CurvesGreen", R.string.CurvesGreen);
+                curveTextView.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
+                curveTextView.setTextColor(0xff5abb5f);
+                curveRadioButton[a].setColor(0xff5abb5f, 0xff5abb5f);
             } else if (a == 3) {
-                curveTextView[a].setText(LocaleController.getString("CurvesBlue", R.string.CurvesBlue).toUpperCase());
+                String str = LocaleController.getString("CurvesBlue", R.string.CurvesBlue);
+                curveTextView.setText(str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase());
+                curveTextView.setTextColor(0xff3dadee);
+                curveRadioButton[a].setColor(0xff3dadee, 0xff3dadee);
             }
-            curveTextView[a].setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            curveTextViewContainer.addView(curveTextView[a], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 28, a == 0 ? 0 : 30, 0, 0, 0));
-            curveTextView[a].setOnClickListener(new OnClickListener() {
+            frameLayout1.addView(curveTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 0, 38, 0, 0));
+
+            curveTextViewContainer.addView(frameLayout1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, a == 0 ? 0 : 30, 0, 0, 0));
+            frameLayout1.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View v) {
                     int num = (Integer) v.getTag();
+                    curvesToolValue.activeType = num;
                     for (int a = 0; a < 4; a++) {
-                        curveTextView[a].setTextColor(a == num ? 0xffffffff : 0xff808080);
+                        curveRadioButton[a].setChecked(a == num, true);
                     }
-                    curvesToolValue.activeType = num;
                     curvesControl.invalidate();
                 }
             });
         }
 
-        tintLayout = new FrameLayout(context);
-        editView.addView(tintLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 78, Gravity.CENTER_HORIZONTAL));
-
-        LinearLayout tintTextViewContainer = new LinearLayout(context);
-        tintTextViewContainer.setOrientation(LinearLayout.HORIZONTAL);
-        tintLayout.addView(tintTextViewContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 28, Gravity.CENTER_HORIZONTAL));
-
-        tintShadowsButton = new TextView(context);
-        tintShadowsButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        tintShadowsButton.setGravity(Gravity.CENTER_VERTICAL);
-        tintShadowsButton.setText(LocaleController.getString("TintShadows", R.string.TintShadows).toUpperCase());
-        tintShadowsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        tintTextViewContainer.addView(tintShadowsButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 28));
-        tintShadowsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                selectedTintMode = 0;
-                updateSelectedTintButton(true);
-            }
-        });
-
-        tintHighlightsButton = new TextView(context);
-        tintHighlightsButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        tintHighlightsButton.setGravity(Gravity.CENTER_VERTICAL);
-        tintHighlightsButton.setText(LocaleController.getString("TintHighlights", R.string.TintHighlights).toUpperCase());
-        tintHighlightsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        tintTextViewContainer.addView(tintHighlightsButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 28, 100, 0, 0, 0));
-        tintHighlightsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                selectedTintMode = 1;
-                updateSelectedTintButton(true);
-            }
-        });
-
-        tintButtonsContainer = new LinearLayout(context);
-        tintButtonsContainer.setOrientation(LinearLayout.HORIZONTAL);
-        tintButtonsContainer.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
-        tintLayout.addView(tintButtonsContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.LEFT | Gravity.TOP, 0, 24, 0, 0));
-        for (int a = 0; a < tintShadowColors.length; a++) {
-            RadioButton radioButton = new RadioButton(context);
-            radioButton.setSize(AndroidUtilities.dp(20));
-            radioButton.setTag(a);
-            tintButtonsContainer.addView(radioButton, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f / tintShadowColors.length));
-            radioButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    RadioButton radioButton = (RadioButton) v;
-                    if (selectedTintMode == 0) {
-                        tintShadowsColor = tintShadowColors[(Integer) radioButton.getTag()];
-                    } else {
-                        tintHighlightsColor = tintHighlighsColors[(Integer) radioButton.getTag()];
-                    }
-                    updateSelectedTintButton(true);
-                    if (eglThread != null) {
-                        eglThread.requestRender(false);
-                    }
-                }
-            });
-        }
-
         blurLayout = new FrameLayout(context);
-        editView.addView(blurLayout, LayoutHelper.createFrame(280, 60, Gravity.CENTER_HORIZONTAL, 0, 10, 0, 0));
+        blurLayout.setVisibility(INVISIBLE);
+        toolsView.addView(blurLayout, LayoutHelper.createFrame(280, 60, Gravity.CENTER_HORIZONTAL, 0, 40, 0, 0));
 
         blurOffButton = new TextView(context);
-        blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off_active, 0, 0);
         blurOffButton.setCompoundDrawablePadding(AndroidUtilities.dp(2));
         blurOffButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        blurOffButton.setTextColor(0xff51bdf3);
         blurOffButton.setGravity(Gravity.CENTER_HORIZONTAL);
         blurOffButton.setText(LocaleController.getString("BlurOff", R.string.BlurOff));
         blurLayout.addView(blurOffButton, LayoutHelper.createFrame(80, 60));
@@ -2088,10 +1870,8 @@ public void onClick(View v) {
         });
 
         blurRadialButton = new TextView(context);
-        blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
         blurRadialButton.setCompoundDrawablePadding(AndroidUtilities.dp(2));
         blurRadialButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        blurRadialButton.setTextColor(0xffffffff);
         blurRadialButton.setGravity(Gravity.CENTER_HORIZONTAL);
         blurRadialButton.setText(LocaleController.getString("BlurRadial", R.string.BlurRadial));
         blurLayout.addView(blurRadialButton, LayoutHelper.createFrame(80, 80, Gravity.LEFT | Gravity.TOP, 100, 0, 0, 0));
@@ -2109,10 +1889,8 @@ public void onClick(View v) {
         });
 
         blurLinearButton = new TextView(context);
-        blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
         blurLinearButton.setCompoundDrawablePadding(AndroidUtilities.dp(2));
         blurLinearButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        blurLinearButton.setTextColor(0xffffffff);
         blurLinearButton.setGravity(Gravity.CENTER_HORIZONTAL);
         blurLinearButton.setText(LocaleController.getString("BlurLinear", R.string.BlurLinear));
         blurLayout.addView(blurLinearButton, LayoutHelper.createFrame(80, 80, Gravity.LEFT | Gravity.TOP, 200, 0, 0, 0));
@@ -2129,114 +1907,48 @@ public void onClick(View v) {
             }
         });
 
+        updateSelectedBlurType();
+
         if (Build.VERSION.SDK_INT >= 21) {
             ((LayoutParams) textureView.getLayoutParams()).topMargin = AndroidUtilities.statusBarHeight;
             ((LayoutParams) curvesControl.getLayoutParams()).topMargin = AndroidUtilities.statusBarHeight;
         }
     }
 
-    private int calculateMaxToolCellWidth() {
-        String titles[] = {
-                LocaleController.getString("Enhance", R.string.Enhance),
-                LocaleController.getString("Exposure", R.string.Exposure),
-                LocaleController.getString("Contrast", R.string.Contrast),
-                LocaleController.getString("Warmth", R.string.Warmth),
-                LocaleController.getString("Saturation", R.string.Saturation),
-                LocaleController.getString("Tint", R.string.Tint),
-                LocaleController.getString("Fade", R.string.Fade),
-                LocaleController.getString("Highlights", R.string.Highlights),
-                LocaleController.getString("Shadows", R.string.Shadows),
-                LocaleController.getString("Vignette", R.string.Vignette),
-                LocaleController.getString("Grain", R.string.Grain),
-                LocaleController.getString("Blur", R.string.Blur),
-                LocaleController.getString("Sharpen", R.string.Sharpen),
-                LocaleController.getString("Curves", R.string.Curves)
-        };
-
-        Paint paint = new Paint();
-        paint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        paint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
-                10, getResources().getDisplayMetrics()));
-
-        float maxWidth = 0;
-        for (String title : titles) {
-            maxWidth = Math.max(paint.measureText(title), maxWidth);
-        }
-
-        return (int)Math.max(AndroidUtilities.dp(56), maxWidth + AndroidUtilities.dp(30));
-    }
-
     private void updateSelectedBlurType() {
         if (blurType == 0) {
-            blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off_active, 0, 0);
+            Drawable drawable = blurOffButton.getContext().getResources().getDrawable(R.drawable.blur_off).mutate();
+            drawable.setColorFilter(new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY));
+            blurOffButton.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);
             blurOffButton.setTextColor(0xff51bdf3);
+
             blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
             blurRadialButton.setTextColor(0xffffffff);
+
             blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
             blurLinearButton.setTextColor(0xffffffff);
         } else if (blurType == 1) {
             blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off, 0, 0);
             blurOffButton.setTextColor(0xffffffff);
-            blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial_active, 0, 0);
+
+            Drawable drawable = blurOffButton.getContext().getResources().getDrawable(R.drawable.blur_radial).mutate();
+            drawable.setColorFilter(new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY));
+            blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);
             blurRadialButton.setTextColor(0xff51bdf3);
+
             blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
             blurLinearButton.setTextColor(0xffffffff);
         } else if (blurType == 2) {
             blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off, 0, 0);
             blurOffButton.setTextColor(0xffffffff);
+
             blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
             blurRadialButton.setTextColor(0xffffffff);
-            blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear_active, 0, 0);
-            blurLinearButton.setTextColor(0xff51bdf3);
-        }
-    }
 
-    private void updateSelectedTintButton(boolean animated) {
-        tintHighlightsButton.setTextColor(selectedTintMode == 1 ? 0xffffffff : 0xff808080);
-        tintShadowsButton.setTextColor(selectedTintMode == 1 ? 0xff808080 : 0xffffffff);
-        int childCount = tintButtonsContainer.getChildCount();
-        for (int a = 0; a < childCount; a++) {
-            View child = tintButtonsContainer.getChildAt(a);
-            if (child instanceof RadioButton) {
-                RadioButton radioButton = (RadioButton) child;
-                int num = (Integer) radioButton.getTag();
-                int color1 = selectedTintMode == 0 ? tintShadowsColor : tintHighlightsColor;
-                int color2 = selectedTintMode == 0 ? tintShadowColors[num] : tintHighlighsColors[num];
-                radioButton.setChecked(color1 == color2, animated);
-                radioButton.setColor(num == 0 ? 0xffffffff : (selectedTintMode == 0 ? tintShadowColors[num] : tintHighlighsColors[num]), num == 0 ? 0xffffffff : (selectedTintMode == 0 ? tintShadowColors[num] : tintHighlighsColors[num]));
-            }
-        }
-    }
-
-    private void updateValueTextView() {
-        int value = 0;
-        if (selectedTool == enhanceTool) {
-            value = (int) enhanceValue;
-        } else if (selectedTool == highlightsTool) {
-            value = (int) highlightsValue;
-        } else if (selectedTool == contrastTool) {
-            value = (int) contrastValue;
-        } else if (selectedTool == exposureTool) {
-            value = (int) exposureValue;
-        } else if (selectedTool == warmthTool) {
-            value = (int) warmthValue;
-        } else if (selectedTool == saturationTool) {
-            value = (int) saturationValue;
-        } else if (selectedTool == vignetteTool) {
-            value = (int) vignetteValue;
-        } else if (selectedTool == shadowsTool) {
-            value = (int) shadowsValue;
-        } else if (selectedTool == grainTool) {
-            value = (int) grainValue;
-        } else if (selectedTool == sharpenTool) {
-            value = (int) sharpenValue;
-        }  else if (selectedTool == fadeTool) {
-            value = (int) fadeValue;
-        }
-        if (value > 0) {
-            valueTextView.setText("+" + value);
-        } else {
-            valueTextView.setText("" + value);
+            Drawable drawable = blurOffButton.getContext().getResources().getDrawable(R.drawable.blur_linear).mutate();
+            drawable.setColorFilter(new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY));
+            blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);
+            blurLinearButton.setTextColor(0xff51bdf3);
         }
     }
 
@@ -2266,87 +1978,36 @@ private void setShowOriginal(boolean value) {
         }
     }
 
-    public void switchToOrFromEditMode() {
-        final View viewFrom;
-        final View viewTo;
-        if (editView.getVisibility() == GONE) {
-            viewFrom = toolsView;
-            viewTo = editView;
-
-            if (selectedTool == blurTool || selectedTool == tintTool || selectedTool == curvesTool) {
-                blurLayout.setVisibility(selectedTool == blurTool ? VISIBLE : INVISIBLE);
-                tintLayout.setVisibility(selectedTool == tintTool ? VISIBLE : INVISIBLE);
-                curveLayout.setVisibility(selectedTool == curvesTool ? VISIBLE : INVISIBLE);
-                if (selectedTool == blurTool) {
-                    infoTextView.setText(LocaleController.getString("Blur", R.string.Blur));
-                    if (blurType != 0) {
-                        blurControl.setVisibility(VISIBLE);
-                    }
-                } else if (selectedTool == curvesTool) {
-                    infoTextView.setText(LocaleController.getString("Curves", R.string.Curves));
-                    curvesControl.setVisibility(VISIBLE);
-                    curvesToolValue.activeType = 0;
-                    for (int a = 0; a < 4; a++) {
-                        curveTextView[a].setTextColor(a == 0 ? 0xffffffff : 0xff808080);
-                    }
-                } else {
-                    selectedTintMode = 0;
-                    updateSelectedTintButton(false);
-                    infoTextView.setText(LocaleController.getString("Tint", R.string.Tint));
-                }
-                infoTextView.setVisibility(VISIBLE);
-                valueSeekBar.setVisibility(INVISIBLE);
-                paramTextView.setVisibility(INVISIBLE);
-                valueTextView.setVisibility(INVISIBLE);
-                updateSelectedBlurType();
-            } else {
-                tintLayout.setVisibility(INVISIBLE);
-                curveLayout.setVisibility(INVISIBLE);
-                blurLayout.setVisibility(INVISIBLE);
-                valueSeekBar.setVisibility(VISIBLE);
-                infoTextView.setVisibility(INVISIBLE);
-                paramTextView.setVisibility(VISIBLE);
-                valueTextView.setVisibility(VISIBLE);
-                blurControl.setVisibility(INVISIBLE);
-                curvesControl.setVisibility(INVISIBLE);
-            }
-        } else {
-            selectedTool = -1;
-            viewFrom = editView;
-            viewTo = toolsView;
+    public void switchMode() {
+        if (selectedTool == 0) {
             blurControl.setVisibility(INVISIBLE);
+            blurLayout.setVisibility(INVISIBLE);
+            curveLayout.setVisibility(INVISIBLE);
             curvesControl.setVisibility(INVISIBLE);
-        }
 
-        AnimatorSet animatorSet = new AnimatorSet();
-        animatorSet.playTogether(
-                ObjectAnimator.ofFloat(viewFrom, "translationY", 0, AndroidUtilities.dp(126))
-        );
-        animatorSet.addListener(new AnimatorListenerAdapter() {
-            @Override
-            public void onAnimationEnd(Animator animation) {
-                viewFrom.setVisibility(GONE);
-                viewTo.setVisibility(VISIBLE);
-                viewTo.setTranslationY(AndroidUtilities.dp(126));
-
-                AnimatorSet animatorSet = new AnimatorSet();
-                animatorSet.playTogether(
-                        ObjectAnimator.ofFloat(viewTo, "translationY", 0)
-                );
-                animatorSet.addListener(new AnimatorListenerAdapter() {
-                    @Override
-                    public void onAnimationEnd(Animator animation) {
-                        if (selectedTool == enhanceTool) {
-                            checkEnhance();
-                        }
-                    }
-                });
-                animatorSet.setDuration(200);
-                animatorSet.start();
+            recyclerListView.setVisibility(VISIBLE);
+        } else if (selectedTool == 1) {
+            recyclerListView.setVisibility(INVISIBLE);
+            curveLayout.setVisibility(INVISIBLE);
+            curvesControl.setVisibility(INVISIBLE);
+
+            blurLayout.setVisibility(VISIBLE);
+            if (blurType != 0) {
+                blurControl.setVisibility(VISIBLE);
             }
-        });
-        animatorSet.setDuration(200);
-        animatorSet.start();
+            updateSelectedBlurType();
+        } else if (selectedTool == 2) {
+            recyclerListView.setVisibility(INVISIBLE);
+            blurLayout.setVisibility(INVISIBLE);
+            blurControl.setVisibility(INVISIBLE);
+
+            curveLayout.setVisibility(VISIBLE);
+            curvesControl.setVisibility(VISIBLE);
+            curvesToolValue.activeType = 0;
+            for (int a = 0; a < 4; a++) {
+                curveRadioButton[a].setChecked(a == 0, false);
+            }
+        }
     }
 
     public void shutdown() {
@@ -2371,7 +2032,7 @@ private void fixLayout(int viewWidth, int viewHeight) {
         }
 
         viewWidth -= AndroidUtilities.dp(28);
-        viewHeight -= AndroidUtilities.dp(14 + 140) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+        viewHeight -= AndroidUtilities.dp(14 + 140 + 60) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
 
         float bitmapW;
         float bitmapH;
@@ -2404,7 +2065,7 @@ private void fixLayout(int viewWidth, int viewHeight) {
 
         blurControl.setActualAreaSize(layoutParams.width, layoutParams.height);
         layoutParams = (LayoutParams) blurControl.getLayoutParams();
-        layoutParams.height = viewHeight + AndroidUtilities.dp(28);
+        layoutParams.height = viewHeight + AndroidUtilities.dp(38);
 
         layoutParams = (LayoutParams) curvesControl.getLayoutParams();
         layoutParams.height = viewHeight + AndroidUtilities.dp(28);
@@ -2490,10 +2151,6 @@ public FrameLayout getToolsView() {
         return toolsView;
     }
 
-    public FrameLayout getEditView() {
-        return editView;
-    }
-
     public TextView getDoneTextView() {
         return doneTextView;
     }
@@ -2502,27 +2159,6 @@ public TextView getCancelTextView() {
         return cancelTextView;
     }
 
-    public void setEditViewFirst() {
-        selectedTool = 0;
-        previousValue = enhanceValue;
-        enhanceValue = 50;
-        valueSeekBar.setMinMax(0, 100);
-        paramTextView.setText(LocaleController.getString("Enhance", R.string.Enhance));
-        editView.setVisibility(VISIBLE);
-        toolsView.setVisibility(GONE);
-        valueSeekBar.setProgress(50, false);
-        updateValueTextView();
-    }
-
-    private void checkEnhance() {
-        if (enhanceValue == 0) {
-            AnimatorSet AnimatorSet = new AnimatorSet();
-            AnimatorSet.setDuration(200);
-            AnimatorSet.playTogether(ObjectAnimator.ofInt(valueSeekBar, "progress", 50));
-            AnimatorSet.start();
-        }
-    }
-
     public class ToolsAdapter extends RecyclerListView.SelectionAdapter {
 
         private Context mContext;
@@ -2533,7 +2169,7 @@ public ToolsAdapter(Context context) {
 
         @Override
         public int getItemCount() {
-            return 14;
+            return 13;
         }
 
         @Override
@@ -2543,7 +2179,59 @@ public long getItemId(int i) {
 
         @Override
         public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
-            PhotoEditToolCell view = new PhotoEditToolCell(mContext, toolCellWidth);
+            View view;
+            if (i == 0) {
+                PhotoEditToolCell cell = new PhotoEditToolCell(mContext);
+                view = cell;
+                cell.setSeekBarDelegate(new PhotoEditorSeekBar.PhotoEditorSeekBarDelegate() {
+                    @Override
+                    public void onProgressChanged(int i, int progress) {
+                        if (i == enhanceTool) {
+                            enhanceValue = progress;
+                        } else if (i == highlightsTool) {
+                            highlightsValue = progress;
+                        } else if (i == contrastTool) {
+                            contrastValue = progress;
+                        } else if (i == exposureTool) {
+                            exposureValue = progress;
+                        } else if (i == warmthTool) {
+                            warmthValue = progress;
+                        } else if (i == saturationTool) {
+                            saturationValue = progress;
+                        } else if (i == vignetteTool) {
+                            vignetteValue = progress;
+                        } else if (i == shadowsTool) {
+                            shadowsValue = progress;
+                        } else if (i == grainTool) {
+                            grainValue = progress;
+                        } else if (i == sharpenTool) {
+                            sharpenValue = progress;
+                        }  else if (i == fadeTool) {
+                            fadeValue = progress;
+                        }
+                        if (eglThread != null) {
+                            eglThread.requestRender(true);
+                        }
+                    }
+                });
+            } else {
+                view = new PhotoEditRadioCell(mContext);
+                view.setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        PhotoEditRadioCell cell = (PhotoEditRadioCell) v;
+                        Integer row = (Integer) cell.getTag();
+                        if (row == tintShadowsTool) {
+                            tintShadowsColor = cell.getCurrentColor();
+                        } else {
+                            tintHighlightsColor = cell.getCurrentColor();
+                        }
+                        if (eglThread != null) {
+                            eglThread.requestRender(false);
+                        }
+                    }
+                });
+            }
             return new RecyclerListView.Holder(view);
         }
 
@@ -2553,42 +2241,55 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
         }
 
         @Override
-        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
-            if (i == enhanceTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_enhance, LocaleController.getString("Enhance", R.string.Enhance), enhanceValue);
-            } else if (i == highlightsTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_highlights, LocaleController.getString("Highlights", R.string.Highlights), highlightsValue);
-            } else if (i == contrastTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_contrast, LocaleController.getString("Contrast", R.string.Contrast), contrastValue);
-            } else if (i == exposureTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_brightness, LocaleController.getString("Exposure", R.string.Exposure), exposureValue);
-            } else if (i == warmthTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_warmth, LocaleController.getString("Warmth", R.string.Warmth), warmthValue);
-            } else if (i == saturationTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_saturation, LocaleController.getString("Saturation", R.string.Saturation), saturationValue);
-            } else if (i == vignetteTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_vignette, LocaleController.getString("Vignette", R.string.Vignette), vignetteValue);
-            } else if (i == shadowsTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_shadows, LocaleController.getString("Shadows", R.string.Shadows), shadowsValue);
-            } else if (i == grainTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_grain, LocaleController.getString("Grain", R.string.Grain), grainValue);
-            } else if (i == sharpenTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_details, LocaleController.getString("Sharpen", R.string.Sharpen), sharpenValue);
-            } else if (i == tintTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_tint, LocaleController.getString("Tint", R.string.Tint), tintHighlightsColor != 0 || tintShadowsColor != 0 ? "◆" : "");
-            } else if (i == fadeTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_fade, LocaleController.getString("Fade", R.string.Fade), fadeValue);
-            } else if (i == curvesTool) {
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_curve, LocaleController.getString("Curves", R.string.Curves), curvesToolValue.shouldBeSkipped() ? "" : "◆");
-            } else if (i == blurTool) {
-                String value = "";
-                if (blurType == 1) {
-                    value = "R";
-                } else if (blurType == 2) {
-                    value = "L";
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
+            switch (holder.getItemViewType()) {
+                case 0: {
+                    PhotoEditToolCell cell = (PhotoEditToolCell) holder.itemView;
+                    cell.setTag(i);
+                    if (i == enhanceTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Enhance", R.string.Enhance), enhanceValue, 0, 100);
+                    } else if (i == highlightsTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Highlights", R.string.Highlights), highlightsValue, -100, 100);
+                    } else if (i == contrastTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Contrast", R.string.Contrast), contrastValue, -100, 100);
+                    } else if (i == exposureTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Exposure", R.string.Exposure), exposureValue, -100, 100);
+                    } else if (i == warmthTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Warmth", R.string.Warmth), warmthValue, -100, 100);
+                    } else if (i == saturationTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Saturation", R.string.Saturation), saturationValue, -100, 100);
+                    } else if (i == vignetteTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Vignette", R.string.Vignette), vignetteValue, 0, 100);
+                    } else if (i == shadowsTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Shadows", R.string.Shadows), shadowsValue, -100, 100);
+                    } else if (i == grainTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Grain", R.string.Grain), grainValue, 0, 100);
+                    } else if (i == sharpenTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Sharpen", R.string.Sharpen), sharpenValue, 0, 100);
+                    } else if (i == fadeTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("Fade", R.string.Fade), fadeValue, 0, 100);
+                    }
+                    break;
+                }
+                case 1: {
+                    PhotoEditRadioCell cell = (PhotoEditRadioCell) holder.itemView;
+                    cell.setTag(i);
+                    if (i == tintShadowsTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("TintShadows", R.string.TintShadows), 0, tintShadowsColor);
+                    } else if (i == tintHighlightsTool) {
+                        cell.setIconAndTextAndValue(LocaleController.getString("TintHighlights", R.string.TintHighlights), 0, tintHighlightsColor);
+                    }
+                    break;
                 }
-                ((PhotoEditToolCell) viewHolder.itemView).setIconAndTextAndValue(R.drawable.tool_blur, LocaleController.getString("Blur", R.string.Blur), value);
             }
         }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == tintShadowsTool || position == tintHighlightsTool) {
+                return 1;
+            }
+            return 0;
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
index ce8be6529..ecca31c9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
@@ -38,11 +38,8 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.ActionBarPopupWindow;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
@@ -90,10 +87,6 @@
 
     private ImageView paintButton;
 
-    private ActionBar actionBar;
-    private ActionBarMenuItem undoItem;
-    private ActionBarMenuItem doneItem;
-
     private EntityView currentEntityView;
 
     private boolean editingText;
@@ -119,7 +112,6 @@
     private ArrayList<PhotoFace> faces;
 
     private final static int gallery_menu_done = 1;
-    private final static int gallery_menu_undo = 2;
 
     public PhotoPaintView(Context context, Bitmap bitmap, int rotation) {
         super(context);
@@ -132,7 +124,7 @@ public PhotoPaintView(Context context, Bitmap bitmap, int rotation) {
         undoStore.setDelegate(new UndoStore.UndoStoreDelegate() {
             @Override
             public void historyChanged() {
-                setMenuItemEnabled(undoStore.canUndo());
+                colorPicker.setUndoEnabled(undoStore.canUndo());
             }
         });
 
@@ -146,7 +138,6 @@ public void historyChanged() {
 
             @Override
             public void onBeganDrawing() {
-                setColorPickerVisibilityFade(false);
                 if (currentEntityView != null) {
                     selectEntity(null);
                 }
@@ -154,10 +145,7 @@ public void onBeganDrawing() {
 
             @Override
             public void onFinishedDrawing(boolean moved) {
-                if (moved) {
-                    setColorPickerVisibilityFade(true);
-                }
-                setMenuItemEnabled(undoStore.canUndo());
+                colorPicker.setUndoEnabled(undoStore.canUndo());
             }
 
             @Override
@@ -256,6 +244,11 @@ public void onSettingsPressed() {
                     showBrushSettings();
                 }
             }
+
+            @Override
+            public void onUndoPressed() {
+                undoStore.undo();
+            }
         });
 
         toolsView = new FrameLayout(context);
@@ -282,23 +275,11 @@ public void onSettingsPressed() {
         doneTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         toolsView.addView(doneTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
 
-        ImageView stickerButton = new ImageView(context);
-        stickerButton.setScaleType(ImageView.ScaleType.CENTER);
-        stickerButton.setImageResource(R.drawable.photo_sticker);
-        stickerButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        toolsView.addView(stickerButton, LayoutHelper.createFrame(54, LayoutHelper.MATCH_PARENT, Gravity.CENTER, 0, 0, 56, 0));
-        stickerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                openStickersView();
-            }
-        });
-
         paintButton = new ImageView(context);
         paintButton.setScaleType(ImageView.ScaleType.CENTER);
         paintButton.setImageResource(R.drawable.photo_paint);
         paintButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        toolsView.addView(paintButton, LayoutHelper.createFrame(54, LayoutHelper.MATCH_PARENT, Gravity.CENTER));
+        toolsView.addView(paintButton, LayoutHelper.createFrame(54, LayoutHelper.MATCH_PARENT, Gravity.CENTER, 0, 0, 56, 0));
         paintButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -306,6 +287,18 @@ public void onClick(View v) {
             }
         });
 
+        ImageView stickerButton = new ImageView(context);
+        stickerButton.setScaleType(ImageView.ScaleType.CENTER);
+        stickerButton.setImageResource(R.drawable.photo_sticker);
+        stickerButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        toolsView.addView(stickerButton, LayoutHelper.createFrame(54, LayoutHelper.MATCH_PARENT, Gravity.CENTER));
+        stickerButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                openStickersView();
+            }
+        });
+
         ImageView textButton = new ImageView(context);
         textButton.setScaleType(ImageView.ScaleType.CENTER);
         textButton.setImageResource(R.drawable.photo_paint_text);
@@ -318,57 +311,22 @@ public void onClick(View v) {
             }
         });
 
-        actionBar = new ActionBar(context);
-        actionBar.setBackgroundColor(Theme.ACTION_BAR_PHOTO_VIEWER_COLOR);
-        actionBar.setOccupyStatusBar(Build.VERSION.SDK_INT >= 21);
-        actionBar.setTitleColor(0xffffffff);
-        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR, false);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setTitle(LocaleController.getString("PaintDraw", R.string.PaintDraw));
-        addView(actionBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    cancelTextView.callOnClick();
-                } else if (id == gallery_menu_done) {
-                    closeTextEnter(true);
-                } else if (id == gallery_menu_undo) {
-                    undoStore.undo();
-                }
-            }
-
-            @Override
-            public boolean canOpenMenu() {
-                return false;
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        undoItem = menu.addItem(gallery_menu_undo, R.drawable.photo_undo, AndroidUtilities.dp(56));
-        setMenuItemEnabled(false);
-        doneItem = menu.addItemWithWidth(gallery_menu_done, R.drawable.ic_done, AndroidUtilities.dp(56));
-        doneItem.setVisibility(GONE);
-
+        colorPicker.setUndoEnabled(false);
         setCurrentSwatch(colorPicker.getSwatch(), false);
         updateSettingsButton();
     }
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
-        if (event.getY() > actionBar.getHeight()) {
-            if (currentEntityView != null) {
-                if (editingText) {
-                    closeTextEnter(true);
-                }
-                else {
-                    selectEntity(null);
-                }
+        if (currentEntityView != null) {
+            if (editingText) {
+                closeTextEnter(true);
+            }
+            else {
+                selectEntity(null);
             }
-            return true;
         }
-        return false;
+        return true;
     }
 
     private Size getPaintingSize() {
@@ -402,8 +360,10 @@ private void updateSettingsButton() {
                 resource = R.drawable.photo_outline;
             }
             paintButton.setImageResource(R.drawable.photo_paint);
+            paintButton.setColorFilter(null);
         } else {
-            paintButton.setImageResource(R.drawable.photo_paint2);
+            paintButton.setColorFilter(new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY));
+            paintButton.setImageResource(R.drawable.photo_paint);
         }
 
         colorPicker.setSettingsButtonImage(resource);
@@ -430,19 +390,10 @@ public void run() {
         });
     }
 
-    private void setMenuItemEnabled(boolean enabled) {
-        undoItem.setAlpha(enabled ? 1.0f : 0.3f);
-        undoItem.setEnabled(enabled);
-    }
-
     public FrameLayout getToolsView() {
         return toolsView;
     }
 
-    public ActionBar getActionBar() {
-        return actionBar;
-    }
-
     public TextView getDoneTextView() {
         return doneTextView;
     }
@@ -538,35 +489,6 @@ private void setCurrentSwatch(Swatch swatch, boolean updateInterface) {
         }
     }
 
-    private void setColorPickerVisibilitySlide(boolean visible) {
-        Animator animator = ObjectAnimator.ofFloat(colorPicker, "translationX", visible ? AndroidUtilities.dp(60) : 0, visible ? 0 : AndroidUtilities.dp(60));
-        animator.setDuration(200);
-        animator.start();
-    }
-
-    private void setColorPickerVisibilityFade(boolean visible) {
-        if (visible) {
-            colorPickerAnimator = ObjectAnimator.ofFloat(colorPicker, "alpha", colorPicker.getAlpha(), 1.0f);
-            colorPickerAnimator.setStartDelay(200);
-            colorPickerAnimator.setDuration(200);
-            colorPickerAnimator.addListener(new AnimatorListenerAdapter() {
-                @Override
-                public void onAnimationEnd(Animator animation) {
-                    if (colorPickerAnimator != null) {
-                        colorPickerAnimator = null;
-                    }
-                }
-            });
-            colorPickerAnimator.start();
-        } else {
-            if (colorPickerAnimator != null) {
-                colorPickerAnimator.cancel();
-                colorPickerAnimator = null;
-            }
-            colorPicker.setAlpha(0.0f);
-        }
-    }
-
     private void setDimVisibility(final boolean visible) {
         Animator animator;
         if (visible) {
@@ -627,7 +549,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int height = MeasureSpec.getSize(heightMeasureSpec);
 
         setMeasuredDimension(width, height);
-        actionBar.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
 
         float bitmapW;
         float bitmapH;
@@ -655,7 +576,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         colorPicker.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(maxHeight, MeasureSpec.EXACTLY));
         toolsView.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
         if (stickersView != null) {
-            stickersView.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(fullHeight, MeasureSpec.EXACTLY));
+            stickersView.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.y, MeasureSpec.EXACTLY));
         }
     }
 
@@ -664,9 +585,9 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int width = right - left;
         int height = bottom - top;
 
+        int status = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
         int actionBarHeight = ActionBar.getCurrentActionBarHeight();
-        int actionBarHeight2 = actionBar.getMeasuredHeight();
-        actionBar.layout(0, 0, actionBar.getMeasuredWidth(), actionBarHeight2);
+        int actionBarHeight2 = ActionBar.getCurrentActionBarHeight() + status;
 
         float bitmapW;
         float bitmapH;
@@ -687,7 +608,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
 
         int x = (int) Math.ceil((width - renderView.getMeasuredWidth()) / 2);
-        int y = actionBarHeight2 + (height - actionBarHeight2 - AndroidUtilities.dp(48) - renderView.getMeasuredHeight()) / 2;
+        int y = actionBarHeight2 + (height - actionBarHeight2 - AndroidUtilities.dp(48) - renderView.getMeasuredHeight()) / 2 - ActionBar.getCurrentActionBarHeight() + AndroidUtilities.dp(8);
 
         renderView.layout(x, y, x + renderView.getMeasuredWidth(), y + renderView.getMeasuredHeight());
 
@@ -695,17 +616,17 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         entitiesView.setScaleX(scale);
         entitiesView.setScaleY(scale);
         entitiesView.layout(x, y, x + entitiesView.getMeasuredWidth(), y + entitiesView.getMeasuredHeight());
-        dimView.layout(0, actionBarHeight2, dimView.getMeasuredWidth(), actionBarHeight2 + dimView.getMeasuredHeight());
-        selectionContainerView.layout(0, actionBarHeight2, selectionContainerView.getMeasuredWidth(), actionBarHeight2 + selectionContainerView.getMeasuredHeight());
+        dimView.layout(0, status, dimView.getMeasuredWidth(), status + dimView.getMeasuredHeight());
+        selectionContainerView.layout(0, status, selectionContainerView.getMeasuredWidth(), status + selectionContainerView.getMeasuredHeight());
         colorPicker.layout(0, actionBarHeight2, colorPicker.getMeasuredWidth(), actionBarHeight2 + colorPicker.getMeasuredHeight());
         toolsView.layout(0, height - toolsView.getMeasuredHeight(), toolsView.getMeasuredWidth(), height);
         curtainView.layout(0, 0, width, maxHeight);
         if (stickersView != null) {
-            stickersView.layout(0, actionBarHeight2, stickersView.getMeasuredWidth(), actionBarHeight2 + stickersView.getMeasuredHeight());
+            stickersView.layout(0, status, stickersView.getMeasuredWidth(), status + stickersView.getMeasuredHeight());
         }
 
         if (currentEntityView != null) {
-            currentEntityView.updateSelectionView();
+            currentEntityView.updateSelectionView(); //TODO this is bug
             currentEntityView.setOffset(entitiesView.getLeft() - selectionContainerView.getLeft(), entitiesView.getTop() - selectionContainerView.getTop());
         }
     }
@@ -726,16 +647,6 @@ public boolean allowInteraction(EntityView entityView) {
         return !editingText;
     }
 
-    @Override
-    public void onBeganEntityDragging(EntityView entityView) {
-        setColorPickerVisibilityFade(false);
-    }
-
-    @Override
-    public void onFinishedEntityDragging(EntityView entityView) {
-        setColorPickerVisibilityFade(true);
-    }
-
     private Point centerPositionForEntity() {
         Size paintingSize = getPaintingSize();
         return new Point(paintingSize.width / 2.0f, paintingSize.height / 2.0f);
@@ -829,6 +740,9 @@ private boolean selectEntity(EntityView entityView) {
     private void removeEntity(EntityView entityView) {
         if (entityView == currentEntityView) {
             currentEntityView.deselect();
+            if (editingText) {
+                closeTextEnter(false);
+            }
             currentEntityView = null;
             updateSettingsButton();
         }
@@ -879,7 +793,7 @@ public void onStickerSelected(TLRPC.Document sticker) {
 
                 @Override
                 public void onTypeChanged() {
-                    updateStickersTitle();
+
                 }
             });
             addView(stickersView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
@@ -889,23 +803,6 @@ public void onTypeChanged() {
         Animator a = ObjectAnimator.ofFloat(stickersView, "alpha", 0.0f, 1.0f);
         a.setDuration(200);
         a.start();
-
-        undoItem.setVisibility(GONE);
-        updateStickersTitle();
-    }
-
-    private void updateStickersTitle() {
-        if (stickersView == null || stickersView.getVisibility() != VISIBLE) {
-            return;
-        }
-        switch (stickersView.getCurrentType()) {
-            case StickersQuery.TYPE_IMAGE:
-                actionBar.setTitle(LocaleController.getString("PaintStickers", R.string.PaintStickers));
-                break;
-            case StickersQuery.TYPE_MASK:
-                actionBar.setTitle(LocaleController.getString("Masks", R.string.Masks));
-                break;
-        }
     }
 
     private void closeStickersView() {
@@ -923,9 +820,6 @@ public void onAnimationEnd(Animator animator) {
             }
         });
         a.start();
-
-        undoItem.setVisibility(VISIBLE);
-        actionBar.setTitle(LocaleController.getString("PaintDraw", R.string.PaintDraw));
     }
 
     private Size baseStickerSize() {
@@ -996,11 +890,7 @@ private void editSelectedTextEntity() {
         textPaintView.setRotation(0.0f);
         textPaintView.setScale(1.0f);
 
-        undoItem.setVisibility(GONE);
-        doneItem.setVisibility(VISIBLE);
-        actionBar.setTitle(LocaleController.getString("PaintText", R.string.PaintText));
         toolsView.setVisibility(GONE);
-        setColorPickerVisibilitySlide(false);
 
         setTextDimVisibility(true, textPaintView);
         textPaintView.beginEditing();
@@ -1016,11 +906,7 @@ public void closeTextEnter(boolean apply) {
 
         TextPaintView textPaintView = (TextPaintView) currentEntityView;
 
-        undoItem.setVisibility(VISIBLE);
-        doneItem.setVisibility(GONE);
-        actionBar.setTitle(LocaleController.getString("PaintDraw", R.string.PaintDraw));
         toolsView.setVisibility(VISIBLE);
-        setColorPickerVisibilitySlide(true);
 
         AndroidUtilities.hideKeyboard(textPaintView.getFocusedView());
 
@@ -1173,7 +1059,7 @@ public void onClick(View v) {
 
         if (selected) {
             ImageView check = new ImageView(getContext());
-            check.setImageResource(R.drawable.ic_ab_done);//TODO color
+            check.setImageResource(R.drawable.ic_ab_done);
             check.setScaleType(ImageView.ScaleType.CENTER);
             button.addView(check, LayoutHelper.createFrame(50, LayoutHelper.MATCH_PARENT));
         }
@@ -1246,7 +1132,7 @@ public void onClick(View v) {
 
         if (selected) {
             ImageView check = new ImageView(getContext());
-            check.setImageResource(R.drawable.ic_ab_done); //TODO color
+            check.setImageResource(R.drawable.ic_ab_done);
             check.setScaleType(ImageView.ScaleType.CENTER);
             button.addView(check, LayoutHelper.createFrame(50, LayoutHelper.MATCH_PARENT));
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
index 5425262ae..b163aa117 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
@@ -223,7 +223,7 @@ private void didPressedButton() {
                 invalidate();
             }
         } else if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
+            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, 0);
             buttonState = 4;
             invalidate();
         } else if (buttonState == 3) {
@@ -264,7 +264,7 @@ public void updateProgress() {
 
     public void downloadAudioIfNeed() {
         if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
+            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, 0);
             buttonState = 3;
             invalidate();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
index cd2a6846e..5f14f332b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
@@ -399,7 +399,7 @@ public void onItemClick(View view, int position) {
                         stickerEmojiTextView.setText(Emoji.replaceEmoji(StickersQuery.getEmojiForSticker(selectedSticker.id), stickerEmojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(30), false));
                     }
 
-                    stickerImageView.getImageReceiver().setImage(selectedSticker, null, selectedSticker.thumb.location, null, "webp", true);
+                    stickerImageView.getImageReceiver().setImage(selectedSticker, null, selectedSticker.thumb.location, null, "webp", 1);
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) stickerPreviewLayout.getLayoutParams();
                     layoutParams.topMargin = scrollOffsetY;
                     stickerPreviewLayout.setLayoutParams(layoutParams);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java
index d97b5b4c7..32b57770d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java
@@ -14,6 +14,7 @@
 import android.os.Handler;
 import android.view.TextureView;
 
+import org.telegram.messenger.secretmedia.ExtendedDefaultDataSourceFactory;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.exoplayer2.DefaultLoadControl;
 import org.telegram.messenger.exoplayer2.DefaultRenderersFactory;
@@ -41,7 +42,6 @@
 import org.telegram.messenger.exoplayer2.trackselection.TrackSelectionArray;
 import org.telegram.messenger.exoplayer2.upstream.DataSource;
 import org.telegram.messenger.exoplayer2.upstream.DefaultBandwidthMeter;
-import org.telegram.messenger.exoplayer2.upstream.DefaultDataSourceFactory;
 import org.telegram.messenger.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 
 @SuppressLint("NewApi")
@@ -79,7 +79,7 @@
     private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
 
     public VideoPlayer() {
-        mediaDataSourceFactory = new DefaultDataSourceFactory(ApplicationLoader.applicationContext, BANDWIDTH_METER, new DefaultHttpDataSourceFactory("Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20150101 Firefox/47.0 (Chrome)", BANDWIDTH_METER));
+        mediaDataSourceFactory = new ExtendedDefaultDataSourceFactory(ApplicationLoader.applicationContext, BANDWIDTH_METER, new DefaultHttpDataSourceFactory("Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20150101 Firefox/47.0 (Chrome)", BANDWIDTH_METER));
 
         mainHandler = new Handler();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java
new file mode 100644
index 000000000..bd198033d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java
@@ -0,0 +1,445 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.ui.Components;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.media.MediaMetadataRetriever;
+import android.os.AsyncTask;
+import android.view.MotionEvent;
+import android.view.View;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+
+import java.util.ArrayList;
+
+@TargetApi(10)
+public class VideoTimelinePlayView extends View {
+
+    private long videoLength;
+    private float progressLeft;
+    private float progressRight = 1;
+    private Paint paint;
+    private Paint paint2;
+    private boolean pressedLeft;
+    private boolean pressedRight;
+    private boolean pressedPlay;
+    private float playProgress = 0.5f;
+    private float pressDx;
+    private MediaMetadataRetriever mediaMetadataRetriever;
+    private VideoTimelineViewDelegate delegate;
+    private ArrayList<Bitmap> frames = new ArrayList<>();
+    private AsyncTask<Integer, Integer, Bitmap> currentTask;
+    private static final Object sync = new Object();
+    private long frameTimeOffset;
+    private int frameWidth;
+    private int frameHeight;
+    private int framesToLoad;
+    private float maxProgressDiff = 1.0f;
+    private float minProgressDiff = 0.0f;
+    private boolean isRoundFrames;
+    private Rect rect1;
+    private Rect rect2;
+    private RectF rect3 = new RectF();
+    private Drawable drawableLeft;
+    private Drawable drawableRight;
+    private int lastWidth;
+
+    public interface VideoTimelineViewDelegate {
+        void onLeftProgressChanged(float progress);
+        void onRightProgressChanged(float progress);
+        void onPlayProgressChanged(float progress);
+        void didStartDragging();
+        void didStopDragging();
+    }
+
+    public VideoTimelinePlayView(Context context) {
+        super(context);
+        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        paint.setColor(0xffffffff);
+        paint2 = new Paint();
+        paint2.setColor(0x7f000000);
+        drawableLeft = context.getResources().getDrawable(R.drawable.video_cropleft);
+        drawableLeft.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
+        drawableRight = context.getResources().getDrawable(R.drawable.video_cropright);
+        drawableRight.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
+    }
+
+    public float getProgress() {
+        return playProgress;
+    }
+
+    public float getLeftProgress() {
+        return progressLeft;
+    }
+
+    public float getRightProgress() {
+        return progressRight;
+    }
+
+    public void setMinProgressDiff(float value) {
+        minProgressDiff = value;
+    }
+
+    public void setMaxProgressDiff(float value) {
+        maxProgressDiff = value;
+        if (progressRight - progressLeft > maxProgressDiff) {
+            progressRight = progressLeft + maxProgressDiff;
+            invalidate();
+        }
+    }
+
+    public void setRoundFrames(boolean value) {
+        isRoundFrames = value;
+        if (isRoundFrames) {
+            rect1 = new Rect(AndroidUtilities.dp(14), AndroidUtilities.dp(14), AndroidUtilities.dp(14 + 28), AndroidUtilities.dp(14 + 28));
+            rect2 = new Rect();
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (event == null) {
+            return false;
+        }
+        float x = event.getX();
+        float y = event.getY();
+
+        int width = getMeasuredWidth() - AndroidUtilities.dp(32);
+        int startX = (int) (width * progressLeft) + AndroidUtilities.dp(16);
+        int playX = (int) (width * (progressLeft + (progressRight - progressLeft) * playProgress)) + AndroidUtilities.dp(16);
+        int endX = (int) (width * progressRight) + AndroidUtilities.dp(16);
+
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            getParent().requestDisallowInterceptTouchEvent(true);
+            if (mediaMetadataRetriever == null) {
+                return false;
+            }
+            int additionWidth = AndroidUtilities.dp(12);
+            int additionWidthPlay = AndroidUtilities.dp(8);
+            if (playX - additionWidthPlay <= x && x <= playX + additionWidthPlay && y >= 0 && y <= getMeasuredHeight()) {
+                if (delegate != null) {
+                    delegate.didStartDragging();
+                }
+                pressedPlay = true;
+                pressDx = (int) (x - playX);
+                invalidate();
+                return true;
+            } else if (startX - additionWidth <= x && x <= startX + additionWidth && y >= 0 && y <= getMeasuredHeight()) {
+                if (delegate != null) {
+                    delegate.didStartDragging();
+                }
+                pressedLeft = true;
+                pressDx = (int) (x - startX);
+                invalidate();
+                return true;
+            } else if (endX - additionWidth <= x && x <= endX + additionWidth && y >= 0 && y <= getMeasuredHeight()) {
+                if (delegate != null) {
+                    delegate.didStartDragging();
+                }
+                pressedRight = true;
+                pressDx = (int) (x - endX);
+                invalidate();
+                return true;
+            }
+        } else if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
+            if (pressedLeft) {
+                if (delegate != null) {
+                    delegate.didStopDragging();
+                }
+                pressedLeft = false;
+                return true;
+            } else if (pressedRight) {
+                if (delegate != null) {
+                    delegate.didStopDragging();
+                }
+                pressedRight = false;
+                return true;
+            } else if (pressedPlay) {
+                if (delegate != null) {
+                    delegate.didStopDragging();
+                }
+                pressedPlay = false;
+                return true;
+            }
+        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+            if (pressedPlay) {
+                playX = (int) (x - pressDx);
+                playProgress = (float) (playX - AndroidUtilities.dp(16)) / (float) width;
+                if (playProgress < progressLeft) {
+                    playProgress = progressLeft;
+                } else if (playProgress > progressRight) {
+                    playProgress = progressRight;
+                }
+                playProgress = (playProgress - progressLeft) / (progressRight - progressLeft);
+                if (delegate != null) {
+                    delegate.onPlayProgressChanged(progressLeft + (progressRight - progressLeft) * playProgress);
+                }
+                invalidate();
+                return true;
+            } else if (pressedLeft) {
+                startX = (int) (x - pressDx);
+                if (startX < AndroidUtilities.dp(16)) {
+                    startX = AndroidUtilities.dp(16);
+                } else if (startX > endX) {
+                    startX = endX;
+                }
+                progressLeft = (float) (startX - AndroidUtilities.dp(16)) / (float) width;
+                if (progressRight - progressLeft > maxProgressDiff) {
+                    progressRight = progressLeft + maxProgressDiff;
+                } else if (minProgressDiff != 0 && progressRight - progressLeft < minProgressDiff) {
+                    progressLeft = progressRight - minProgressDiff;
+                    if (progressLeft < 0) {
+                        progressLeft = 0;
+                    }
+                }
+                if (delegate != null) {
+                    delegate.onLeftProgressChanged(progressLeft);
+                }
+                invalidate();
+                return true;
+            } else if (pressedRight) {
+                endX = (int) (x - pressDx);
+                if (endX < startX) {
+                    endX = startX;
+                } else if (endX > width + AndroidUtilities.dp(16)) {
+                    endX = width + AndroidUtilities.dp(16);
+                }
+                progressRight = (float) (endX - AndroidUtilities.dp(16)) / (float) width;
+                if (progressRight - progressLeft > maxProgressDiff) {
+                    progressLeft = progressRight - maxProgressDiff;
+                } else if (minProgressDiff != 0 && progressRight - progressLeft < minProgressDiff) {
+                    progressRight = progressLeft + minProgressDiff;
+                    if (progressRight > 1.0f) {
+                        progressRight = 1.0f;
+                    }
+                }
+                if (delegate != null) {
+                    delegate.onRightProgressChanged(progressRight);
+                }
+                invalidate();
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void setColor(int color) {
+        paint.setColor(color);
+    }
+
+    public void setVideoPath(String path) {
+        destroy();
+        mediaMetadataRetriever = new MediaMetadataRetriever();
+        progressLeft = 0.0f;
+        progressRight = 1.0f;
+        try {
+            mediaMetadataRetriever.setDataSource(path);
+            String duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
+            videoLength = Long.parseLong(duration);
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+        invalidate();
+    }
+
+    public void setDelegate(VideoTimelineViewDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private void reloadFrames(int frameNum) {
+        if (mediaMetadataRetriever == null) {
+            return;
+        }
+        if (frameNum == 0) {
+            if (isRoundFrames) {
+                frameHeight = frameWidth = AndroidUtilities.dp(56);
+                framesToLoad = (int) Math.ceil((getMeasuredWidth() - AndroidUtilities.dp(16)) / (frameHeight / 2.0f));
+            } else {
+                frameHeight = AndroidUtilities.dp(40);
+                framesToLoad = (getMeasuredWidth() - AndroidUtilities.dp(16)) / frameHeight;
+                frameWidth = (int) Math.ceil((float) (getMeasuredWidth() - AndroidUtilities.dp(16)) / (float) framesToLoad);
+            }
+            frameTimeOffset = videoLength / framesToLoad;
+        }
+        currentTask = new AsyncTask<Integer, Integer, Bitmap>() {
+            private int frameNum = 0;
+
+            @Override
+            protected Bitmap doInBackground(Integer... objects) {
+                frameNum = objects[0];
+                Bitmap bitmap = null;
+                if (isCancelled()) {
+                    return null;
+                }
+                try {
+                    bitmap = mediaMetadataRetriever.getFrameAtTime(frameTimeOffset * frameNum * 1000, MediaMetadataRetriever.OPTION_CLOSEST_SYNC);
+                    if (isCancelled()) {
+                        return null;
+                    }
+                    if (bitmap != null) {
+                        Bitmap result = Bitmap.createBitmap(frameWidth, frameHeight, bitmap.getConfig());
+                        Canvas canvas = new Canvas(result);
+                        float scaleX = (float) frameWidth / (float) bitmap.getWidth();
+                        float scaleY = (float) frameHeight / (float) bitmap.getHeight();
+                        float scale = scaleX > scaleY ? scaleX : scaleY;
+                        int w = (int) (bitmap.getWidth() * scale);
+                        int h = (int) (bitmap.getHeight() * scale);
+                        Rect srcRect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
+                        Rect destRect = new Rect((frameWidth - w) / 2, (frameHeight - h) / 2, w, h);
+                        canvas.drawBitmap(bitmap, srcRect, destRect, null);
+                        bitmap.recycle();
+                        bitmap = result;
+                    }
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                return bitmap;
+            }
+
+            @Override
+            protected void onPostExecute(Bitmap bitmap) {
+                if (!isCancelled()) {
+                    frames.add(bitmap);
+                    invalidate();
+                    if (frameNum < framesToLoad) {
+                        reloadFrames(frameNum + 1);
+                    }
+                }
+            }
+        };
+        currentTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, frameNum, null, null);
+    }
+
+    public void destroy() {
+        synchronized (sync) {
+            try {
+                if (mediaMetadataRetriever != null) {
+                    mediaMetadataRetriever.release();
+                    mediaMetadataRetriever = null;
+                }
+            } catch (Exception e) {
+                FileLog.e(e);
+            }
+        }
+        for (Bitmap bitmap : frames) {
+            if (bitmap != null) {
+                bitmap.recycle();
+            }
+        }
+        frames.clear();
+        if (currentTask != null) {
+            currentTask.cancel(true);
+            currentTask = null;
+        }
+    }
+
+    public boolean isDragging() {
+        return pressedPlay;
+    }
+
+    public void setProgress(float value) {
+        playProgress = value;
+        invalidate();
+    }
+
+    public void clearFrames() {
+        for (Bitmap bitmap : frames) {
+            if (bitmap != null) {
+                bitmap.recycle();
+            }
+        }
+        frames.clear();
+        if (currentTask != null) {
+            currentTask.cancel(true);
+            currentTask = null;
+        }
+        invalidate();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        if (lastWidth != widthSize) {
+            clearFrames();
+            lastWidth = widthSize;
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        int width = getMeasuredWidth() - AndroidUtilities.dp(36);
+        int startX = (int) (width * progressLeft) + AndroidUtilities.dp(16);
+        int endX = (int) (width * progressRight) + AndroidUtilities.dp(16);
+
+        canvas.save();
+        canvas.clipRect(AndroidUtilities.dp(16), AndroidUtilities.dp(4), width + AndroidUtilities.dp(20), AndroidUtilities.dp(48));
+        if (frames.isEmpty() && currentTask == null) {
+            reloadFrames(0);
+        } else {
+            int offset = 0;
+            for (int a = 0; a < frames.size(); a++) {
+                Bitmap bitmap = frames.get(a);
+                if (bitmap != null) {
+                    int x = AndroidUtilities.dp(16) + offset * (isRoundFrames ? frameWidth / 2 : frameWidth);
+                    int y = AndroidUtilities.dp(2 + 4);
+                    if (isRoundFrames) {
+                        rect2.set(x, y, x + AndroidUtilities.dp(28), y + AndroidUtilities.dp(28));
+                        canvas.drawBitmap(bitmap, rect1, rect2, null);
+                    } else {
+                        canvas.drawBitmap(bitmap, x, y, null);
+                    }
+                }
+                offset++;
+            }
+        }
+
+        int top = AndroidUtilities.dp(2 + 4);
+        int end = AndroidUtilities.dp(48);
+
+        canvas.drawRect(AndroidUtilities.dp(16), top, startX, AndroidUtilities.dp(46), paint2);
+        canvas.drawRect(endX + AndroidUtilities.dp(4), top, AndroidUtilities.dp(16) + width + AndroidUtilities.dp(4), AndroidUtilities.dp(46), paint2);
+
+        canvas.drawRect(startX, AndroidUtilities.dp(4), startX + AndroidUtilities.dp(2), end, paint);
+        canvas.drawRect(endX + AndroidUtilities.dp(2), AndroidUtilities.dp(4), endX + AndroidUtilities.dp(4), end, paint);
+        canvas.drawRect(startX + AndroidUtilities.dp(2), AndroidUtilities.dp(4), endX + AndroidUtilities.dp(4), top, paint);
+        canvas.drawRect(startX + AndroidUtilities.dp(2), end - AndroidUtilities.dp(2), endX + AndroidUtilities.dp(4), end, paint);
+        canvas.restore();
+
+        rect3.set(startX - AndroidUtilities.dp(8), AndroidUtilities.dp(4), startX + AndroidUtilities.dp(2), end);
+        canvas.drawRoundRect(rect3, AndroidUtilities.dp(2), AndroidUtilities.dp(2), paint);
+        drawableLeft.setBounds(startX - AndroidUtilities.dp(8), AndroidUtilities.dp(4) + (AndroidUtilities.dp(44) - AndroidUtilities.dp(18)) / 2, startX + AndroidUtilities.dp(2), (AndroidUtilities.dp(44) - AndroidUtilities.dp(18)) / 2 + AndroidUtilities.dp(18 + 4));
+        drawableLeft.draw(canvas);
+
+        rect3.set(endX + AndroidUtilities.dp(2), AndroidUtilities.dp(4), endX + AndroidUtilities.dp(12), end);
+        canvas.drawRoundRect(rect3, AndroidUtilities.dp(2), AndroidUtilities.dp(2), paint);
+        drawableRight.setBounds(endX + AndroidUtilities.dp(2), AndroidUtilities.dp(4) + (AndroidUtilities.dp(44) - AndroidUtilities.dp(18)) / 2, endX + AndroidUtilities.dp(12), (AndroidUtilities.dp(44) - AndroidUtilities.dp(18)) / 2 + AndroidUtilities.dp(18 + 4));
+        drawableRight.draw(canvas);
+
+        float cx = AndroidUtilities.dp(18) + width * (progressLeft + (progressRight - progressLeft) * playProgress);
+        rect3.set(cx - AndroidUtilities.dp(1.5f), AndroidUtilities.dp(2), cx + AndroidUtilities.dp(1.5f), AndroidUtilities.dp(50));
+        canvas.drawRoundRect(rect3, AndroidUtilities.dp(1), AndroidUtilities.dp(1), paint2);
+        canvas.drawCircle(cx, AndroidUtilities.dp(52), AndroidUtilities.dp(3.5f), paint2);
+
+        rect3.set(cx - AndroidUtilities.dp(1), AndroidUtilities.dp(2), cx + AndroidUtilities.dp(1), AndroidUtilities.dp(50));
+        canvas.drawRoundRect(rect3, AndroidUtilities.dp(1), AndroidUtilities.dp(1), paint);
+        canvas.drawCircle(cx, AndroidUtilities.dp(52), AndroidUtilities.dp(3), paint);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
index 126f5508b..fadab4cc0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
@@ -52,7 +52,7 @@
 
     public interface VideoTimelineViewDelegate {
         void onLeftProgressChanged(float progress);
-        void onRifhtProgressChanged(float progress);
+        void onRightProgressChanged(float progress);
         void didStartDragging();
         void didStopDragging();
     }
@@ -181,7 +181,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     }
                 }
                 if (delegate != null) {
-                    delegate.onRifhtProgressChanged(progressRight);
+                    delegate.onRightProgressChanged(progressRight);
                 }
                 invalidate();
                 return true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
index 6c2174b71..4497ee35c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
@@ -1968,7 +1968,7 @@ public boolean loadVideo(String url, TLRPC.Photo thumb, String originalUrl, bool
         if (thumb != null) {
             TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(thumb.sizes, 80, true);
             if (photoSize != null) {
-                controlsView.imageReceiver.setImage(null, null, thumb != null ? photoSize.location : null, thumb != null ? "80_80_b" : null, 0, null, true);
+                controlsView.imageReceiver.setImage(null, null, thumb != null ? photoSize.location : null, thumb != null ? "80_80_b" : null, 0, null, 1);
                 drawImage = true;
             }
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
index 521a74123..fb5c5e5d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
@@ -272,7 +272,7 @@ public void onClick(View v){
 				.setPositiveButton(LocaleController.getString("Send", R.string.Send), new DialogInterface.OnClickListener(){
 					@Override
 					public void onClick(DialogInterface dialog, int which){
-						TLRPC.TL_phone_setCallRating req = new TLRPC.TL_phone_setCallRating();
+						final TLRPC.TL_phone_setCallRating req = new TLRPC.TL_phone_setCallRating();
 						req.rating = bar.getRating();
 						if (req.rating < 5)
 							req.comment = commentBox.getText().toString();
@@ -287,7 +287,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
 								if (response instanceof TLRPC.TL_updates) {
 									TLRPC.TL_updates updates = (TLRPC.TL_updates) response;
 									MessagesController.getInstance().processUpdates(updates, false);
-									if(includeLogs[0] && log.exists()){
+									if(includeLogs[0] && log.exists() && req.rating<4){
 										SendMessagesHelper.prepareSendingDocument(log.getAbsolutePath(), log.getAbsolutePath(), null, "text/plain", VOIP_SUPPORT_ID, null, null);
 										Toast.makeText(context, LocaleController.getString("CallReportSent", R.string.CallReportSent), Toast.LENGTH_LONG).show();
 									}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 83238bf30..145b9b053 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -947,7 +947,10 @@ private void askForPermissons() {
             permissons.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
         }
         String[] items = permissons.toArray(new String[permissons.size()]);
-        activity.requestPermissions(items, 1);
+        try {
+            activity.requestPermissions(items, 1);
+        } catch (Exception ignore) {
+        }
     }
 
     @Override
@@ -968,11 +971,7 @@ public void onGlobalLayout() {
                     floatingButton.setTranslationY(floatingHidden ? AndroidUtilities.dp(100) : 0);
                     floatingButton.setClickable(!floatingHidden);
                     if (floatingButton != null) {
-                        if (Build.VERSION.SDK_INT < 16) {
-                            floatingButton.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                        } else {
-                            floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                        }
+                        floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                     }
                 }
             });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index 03f5e4359..f26a6def0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -16,23 +16,28 @@
 import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.database.DataSetObserver;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.graphics.Shader;
+import android.graphics.SurfaceTexture;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.opengl.GLES20;
+import android.opengl.GLUtils;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Looper;
 import android.os.Parcelable;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.view.TextureView;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.Window;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
@@ -42,6 +47,9 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
+import org.telegram.messenger.DispatchQueue;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.Intro;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
@@ -51,6 +59,14 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.LayoutHelper;
 
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.egl.EGLSurface;
+import javax.microedition.khronos.opengles.GL;
+import javax.microedition.khronos.opengles.GL10;
+
 public class IntroActivity extends Activity implements NotificationCenter.NotificationCenterDelegate {
 
     private class BottomPagesView extends View {
@@ -84,7 +100,7 @@ protected void onDraw(Canvas canvas) {
             paint.setColor(0xffbbbbbb);
             int x;
             currentPage = viewPager.getCurrentItem();
-            for (int a = 0; a < 7; a++) {
+            for (int a = 0; a < 6; a++) {
                 if (a == currentPage) {
                     continue;
                 }
@@ -108,18 +124,19 @@ protected void onDraw(Canvas canvas) {
     }
 
     private ViewPager viewPager;
-    private ImageView topImage1;
-    private ImageView topImage2;
     private BottomPagesView bottomPages;
     private TextView textView;
     private int lastPage = 0;
     private boolean justCreated = false;
     private boolean startPressed = false;
-    private int[] icons;
-    private int[] titles;
-    private String[] titlesString;
-    private int[] messages;
-    private String[] messagesString;
+    private String[] titles;
+    private String[] messages;
+    private int currentViewPagerPage;
+    private EGLThread eglThread;
+    private long currentDate;
+    private boolean justEndDragging;
+    private boolean dragging;
+    private int startDragX;
 
     private LocaleController.LocaleInfo localeInfo;
 
@@ -129,117 +146,74 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         requestWindowFeature(Window.FEATURE_NO_TITLE);
 
-        if (LocaleController.isRTL) {
-            icons = new int[]{
-                    R.drawable.intro7,
-                    R.drawable.intro6,
-                    R.drawable.intro5,
-                    R.drawable.intro4,
-                    R.drawable.intro3,
-                    R.drawable.intro2,
-                    R.drawable.intro1
-            };
-            titles = new int[]{
-                    R.string.Page7Title,
-                    R.string.Page6Title,
-                    R.string.Page5Title,
-                    R.string.Page4Title,
-                    R.string.Page3Title,
-                    R.string.Page2Title,
-                    R.string.Page1Title
-            };
-            titlesString = new String[]{
-                    "Page7Title",
-                    "Page6Title",
-                    "Page5Title",
-                    "Page4Title",
-                    "Page3Title",
-                    "Page2Title",
-                    "Page1Title"
-            };
-            messages = new int[]{
-                    R.string.Page7Message,
-                    R.string.Page6Message,
-                    R.string.Page5Message,
-                    R.string.Page4Message,
-                    R.string.Page3Message,
-                    R.string.Page2Message,
-                    R.string.Page1Message
-            };
-            messagesString = new String[]{
-                    "Page7Message",
-                    "Page6Message",
-                    "Page5Message",
-                    "Page4Message",
-                    "Page3Message",
-                    "Page2Message",
-                    "Page1Message"
-            };
-        } else {
-            icons = new int[]{
-                    R.drawable.intro1,
-                    R.drawable.intro2,
-                    R.drawable.intro3,
-                    R.drawable.intro4,
-                    R.drawable.intro5,
-                    R.drawable.intro6,
-                    R.drawable.intro7
-            };
-            titles = new int[]{
-                    R.string.Page1Title,
-                    R.string.Page2Title,
-                    R.string.Page3Title,
-                    R.string.Page4Title,
-                    R.string.Page5Title,
-                    R.string.Page6Title,
-                    R.string.Page7Title
-            };
-            titlesString = new String[]{
-                    "Page1Title",
-                    "Page2Title",
-                    "Page3Title",
-                    "Page4Title",
-                    "Page5Title",
-                    "Page6Title",
-                    "Page7Title"
-            };
-            messages = new int[]{
-                    R.string.Page1Message,
-                    R.string.Page2Message,
-                    R.string.Page3Message,
-                    R.string.Page4Message,
-                    R.string.Page5Message,
-                    R.string.Page6Message,
-                    R.string.Page7Message
-            };
-            messagesString = new String[]{
-                    "Page1Message",
-                    "Page2Message",
-                    "Page3Message",
-                    "Page4Message",
-                    "Page5Message",
-                    "Page6Message",
-                    "Page7Message"
-            };
-        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        preferences.edit().putLong("intro_crashed_time", System.currentTimeMillis()).commit();
+
+        titles = new String[]{
+                LocaleController.getString("Page1Title", R.string.Page1Title),
+                LocaleController.getString("Page2Title", R.string.Page2Title),
+                LocaleController.getString("Page3Title", R.string.Page3Title),
+                LocaleController.getString("Page5Title", R.string.Page5Title),
+                LocaleController.getString("Page4Title", R.string.Page4Title),
+                LocaleController.getString("Page6Title", R.string.Page6Title)
+        };
+        messages = new String[]{
+                LocaleController.getString("Page1Message", R.string.Page1Message),
+                LocaleController.getString("Page2Message", R.string.Page2Message),
+                LocaleController.getString("Page3Message", R.string.Page3Message),
+                LocaleController.getString("Page5Message", R.string.Page5Message),
+                LocaleController.getString("Page4Message", R.string.Page4Message),
+                LocaleController.getString("Page6Message", R.string.Page6Message)
+        };
 
         ScrollView scrollView = new ScrollView(this);
         scrollView.setFillViewport(true);
 
         FrameLayout frameLayout = new FrameLayout(this);
-        frameLayout.setBackgroundColor(0xfffafafa);
+        frameLayout.setBackgroundColor(0xffffffff);
         scrollView.addView(frameLayout, LayoutHelper.createScroll(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
 
         FrameLayout frameLayout2 = new FrameLayout(this);
-        frameLayout.addView(frameLayout2, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 0, 88, 0, 0));
+        frameLayout.addView(frameLayout2, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 0, 78, 0, 0));
+
+        TextureView textureView = new TextureView(this);
+        frameLayout2.addView(textureView, LayoutHelper.createFrame(180, 140, Gravity.CENTER));
+        textureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
+            @Override
+            public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
+                if (eglThread == null && surface != null) {
+                    eglThread = new EGLThread(surface);
+                    eglThread.setSurfaceTextureSize(width, height);
+                    eglThread.postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            eglThread.drawRunnable.run();
+                        }
+                    });
+                }
+            }
+
+            @Override
+            public void onSurfaceTextureSizeChanged(SurfaceTexture surface, final int width, final int height) {
+                if (eglThread != null) {
+                    eglThread.setSurfaceTextureSize(width, height);
+                }
+            }
+
+            @Override
+            public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+                if (eglThread != null) {
+                    eglThread.shutdown();
+                    eglThread = null;
+                }
+                return true;
+            }
 
-        topImage1 = new ImageView(this);
-        topImage1.setImageResource(R.drawable.intro1);
-        frameLayout2.addView(topImage1, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
+            @Override
+            public void onSurfaceTextureUpdated(SurfaceTexture surface) {
 
-        topImage2 = new ImageView(this);
-        topImage2.setVisibility(View.GONE);
-        frameLayout2.addView(topImage2, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
+            }
+        });
 
         viewPager = new ViewPager(this);
         viewPager.setAdapter(new IntroAdapter());
@@ -250,72 +224,32 @@ protected void onCreate(Bundle savedInstanceState) {
             @Override
             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                 bottomPages.setPageOffset(position, positionOffset);
+
+                float width = viewPager.getMeasuredWidth();
+                if (width == 0) {
+                    return;
+                }
+                float offset = (position * width + positionOffsetPixels - currentViewPagerPage * width) / width;
+                Intro.setScrollOffset(offset);
             }
 
             @Override
             public void onPageSelected(int i) {
-
+                currentViewPagerPage = i;
             }
 
             @Override
             public void onPageScrollStateChanged(int i) {
-                if (i == ViewPager.SCROLL_STATE_IDLE || i == ViewPager.SCROLL_STATE_SETTLING) {
+                if (i == ViewPager.SCROLL_STATE_DRAGGING) {
+                    dragging = true;
+                    startDragX = viewPager.getCurrentItem() * viewPager.getMeasuredWidth();
+                } else if (i == ViewPager.SCROLL_STATE_IDLE || i == ViewPager.SCROLL_STATE_SETTLING) {
+                    if (dragging) {
+                        justEndDragging = true;
+                        dragging = false;
+                    }
                     if (lastPage != viewPager.getCurrentItem()) {
                         lastPage = viewPager.getCurrentItem();
-
-                        final ImageView fadeoutImage;
-                        final ImageView fadeinImage;
-                        if (topImage1.getVisibility() == View.VISIBLE) {
-                            fadeoutImage = topImage1;
-                            fadeinImage = topImage2;
-
-                        } else {
-                            fadeoutImage = topImage2;
-                            fadeinImage = topImage1;
-                        }
-
-                        fadeinImage.bringToFront();
-                        fadeinImage.setImageResource(icons[lastPage]);
-                        fadeinImage.clearAnimation();
-                        fadeoutImage.clearAnimation();
-
-                        Animation outAnimation = AnimationUtils.loadAnimation(IntroActivity.this, R.anim.icon_anim_fade_out);
-                        outAnimation.setAnimationListener(new Animation.AnimationListener() {
-                            @Override
-                            public void onAnimationStart(Animation animation) {
-                            }
-
-                            @Override
-                            public void onAnimationEnd(Animation animation) {
-                                fadeoutImage.setVisibility(View.GONE);
-                            }
-
-                            @Override
-                            public void onAnimationRepeat(Animation animation) {
-
-                            }
-                        });
-
-                        Animation inAnimation = AnimationUtils.loadAnimation(IntroActivity.this, R.anim.icon_anim_fade_in);
-                        inAnimation.setAnimationListener(new Animation.AnimationListener() {
-                            @Override
-                            public void onAnimationStart(Animation animation) {
-                                fadeinImage.setVisibility(View.VISIBLE);
-                            }
-
-                            @Override
-                            public void onAnimationEnd(Animation animation) {
-                            }
-
-                            @Override
-                            public void onAnimationRepeat(Animation animation) {
-
-                            }
-                        });
-
-
-                        fadeoutImage.startAnimation(outAnimation);
-                        fadeinImage.startAnimation(inAnimation);
                     }
                 }
             }
@@ -323,7 +257,6 @@ public void onAnimationRepeat(Animation animation) {
 
         TextView startMessagingButton = new TextView(this);
         startMessagingButton.setText(LocaleController.getString("StartMessaging", R.string.StartMessaging).toUpperCase());
-        startMessagingButton.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
         startMessagingButton.setGravity(Gravity.CENTER);
         startMessagingButton.setTextColor(0xffffffff);
         startMessagingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
@@ -334,6 +267,7 @@ public void onAnimationRepeat(Animation animation) {
             animator.addState(new int[]{}, ObjectAnimator.ofFloat(startMessagingButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
             startMessagingButton.setStateListAnimator(animator);
         }
+        startMessagingButton.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
         frameLayout.addView(startMessagingButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM, 10, 0, 10, 76));
         startMessagingButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -359,7 +293,7 @@ public boolean onLongClick(View v) {
         }
 
         bottomPages = new BottomPagesView(this);
-        frameLayout.addView(bottomPages, LayoutHelper.createFrame(77, 5, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 0, 350, 0, 0));
+        frameLayout.addView(bottomPages, LayoutHelper.createFrame(66, 5, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 0, 350, 0, 0));
 
         textView = new TextView(this);
         textView.setTextColor(0xff1393d2);
@@ -436,6 +370,8 @@ protected void onPause() {
     protected void onDestroy() {
         super.onDestroy();
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.suggestedLangpack);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        preferences.edit().putLong("intro_crashed_time", 0).commit();
     }
 
     private void checkContinueText() {
@@ -502,7 +438,7 @@ public void didReceivedNotification(int id, Object... args) {
     private class IntroAdapter extends PagerAdapter {
         @Override
         public int getCount() {
-            return 7;
+            return titles.length;
         }
 
         @Override
@@ -523,8 +459,8 @@ public Object instantiateItem(ViewGroup container, int position) {
 
             container.addView(frameLayout, 0);
 
-            headerTextView.setText(LocaleController.getString(titlesString[position], titles[position]));
-            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString(messagesString[position], messages[position])));
+            headerTextView.setText(titles[position]);
+            messageTextView.setText(AndroidUtilities.replaceTags(messages[position]));
 
             return frameLayout;
         }
@@ -538,6 +474,7 @@ public void destroyItem(ViewGroup container, int position, Object object) {
         public void setPrimaryItem(ViewGroup container, int position, Object object) {
             super.setPrimaryItem(container, position, object);
             bottomPages.setCurrentPage(position);
+            currentViewPagerPage = position;
         }
 
         @Override
@@ -561,4 +498,218 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
             }
         }
     }
+
+    public class EGLThread extends DispatchQueue {
+
+        private final int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
+        private final int EGL_OPENGL_ES2_BIT = 4;
+        private SurfaceTexture surfaceTexture;
+        private EGL10 egl10;
+        private EGLDisplay eglDisplay;
+        private EGLConfig eglConfig;
+        private EGLContext eglContext;
+        private EGLSurface eglSurface;
+        private GL gl;
+        private boolean initied;
+        private int textures[] = new int[23];
+
+        private int surfaceWidth;
+        private int surfaceHeight;
+
+        private long lastRenderCallTime;
+
+        public EGLThread(SurfaceTexture surface) {
+            super("EGLThread");
+            surfaceTexture = surface;
+        }
+
+        private boolean initGL() {
+            egl10 = (EGL10) EGLContext.getEGL();
+
+            eglDisplay = egl10.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
+            if (eglDisplay == EGL10.EGL_NO_DISPLAY) {
+                FileLog.e("eglGetDisplay failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            }
+
+            int[] version = new int[2];
+            if (!egl10.eglInitialize(eglDisplay, version)) {
+                FileLog.e("eglInitialize failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            }
+
+            int[] configsCount = new int[1];
+            EGLConfig[] configs = new EGLConfig[1];
+            int[] configSpec = new int[] {
+                    EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
+                    EGL10.EGL_RED_SIZE, 8,
+                    EGL10.EGL_GREEN_SIZE, 8,
+                    EGL10.EGL_BLUE_SIZE, 8,
+                    EGL10.EGL_ALPHA_SIZE, 8,
+                    EGL10.EGL_DEPTH_SIZE, 24,
+                    EGL10.EGL_STENCIL_SIZE, 0,
+                    EGL10.EGL_SAMPLE_BUFFERS, 1,
+                    EGL10.EGL_SAMPLES, 2,
+                    EGL10.EGL_NONE
+            };
+            if (!egl10.eglChooseConfig(eglDisplay, configSpec, configs, 1, configsCount)) {
+                FileLog.e("eglChooseConfig failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            } else if (configsCount[0] > 0) {
+                eglConfig = configs[0];
+            } else {
+                FileLog.e("eglConfig not initialized");
+                finish();
+                return false;
+            }
+
+            int[] attrib_list = { EGL_CONTEXT_CLIENT_VERSION, 2, EGL10.EGL_NONE };
+            eglContext = egl10.eglCreateContext(eglDisplay, eglConfig, EGL10.EGL_NO_CONTEXT, attrib_list);
+            if (eglContext == null) {
+                FileLog.e("eglCreateContext failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            }
+
+            if (surfaceTexture instanceof SurfaceTexture) {
+                eglSurface = egl10.eglCreateWindowSurface(eglDisplay, eglConfig, surfaceTexture, null);
+            } else {
+                finish();
+                return false;
+            }
+
+            if (eglSurface == null || eglSurface == EGL10.EGL_NO_SURFACE) {
+                FileLog.e("createWindowSurface failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            }
+            if (!egl10.eglMakeCurrent(eglDisplay, eglSurface, eglSurface, eglContext)) {
+                FileLog.e("eglMakeCurrent failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                finish();
+                return false;
+            }
+            gl = eglContext.getGL();
+
+            GLES20.glGenTextures(23, textures, 0);
+            loadTexture(R.drawable.intro_fast_arrow_shadow, 0);
+            loadTexture(R.drawable.intro_fast_arrow, 1);
+            loadTexture(R.drawable.intro_fast_body, 2);
+            loadTexture(R.drawable.intro_fast_spiral, 3);
+            loadTexture(R.drawable.intro_ic_bubble_dot, 4);
+            loadTexture(R.drawable.intro_ic_bubble, 5);
+            loadTexture(R.drawable.intro_ic_cam_lens, 6);
+            loadTexture(R.drawable.intro_ic_cam, 7);
+            loadTexture(R.drawable.intro_ic_pencil, 8);
+            loadTexture(R.drawable.intro_ic_pin, 9);
+            loadTexture(R.drawable.intro_ic_smile_eye, 10);
+            loadTexture(R.drawable.intro_ic_smile, 11);
+            loadTexture(R.drawable.intro_ic_videocam, 12);
+            loadTexture(R.drawable.intro_knot_down, 13);
+            loadTexture(R.drawable.intro_knot_up, 14);
+            loadTexture(R.drawable.intro_powerful_infinity_white, 15);
+            loadTexture(R.drawable.intro_powerful_infinity, 16);
+            loadTexture(R.drawable.intro_powerful_mask, 17);
+            loadTexture(R.drawable.intro_powerful_star, 18);
+            loadTexture(R.drawable.intro_private_door, 19);
+            loadTexture(R.drawable.intro_private_screw, 20);
+            loadTexture(R.drawable.intro_tg_plane, 21);
+            loadTexture(R.drawable.intro_tg_sphere, 22);
+
+            Intro.setTelegramTextures(textures[22], textures[21]);
+            Intro.setPowerfulTextures(textures[17], textures[18], textures[16], textures[15]);
+            Intro.setPrivateTextures(textures[19], textures[20]);
+            Intro.setFreeTextures(textures[14], textures[13]);
+            Intro.setFastTextures(textures[2], textures[3], textures[1], textures[0]);
+            Intro.setIcTextures(textures[4], textures[5], textures[6], textures[7], textures[8], textures[9], textures[10], textures[11], textures[12]);
+            Intro.onSurfaceCreated();
+            currentDate = System.currentTimeMillis() - 1000;
+
+            return true;
+        }
+
+        public void finish() {
+            if (eglSurface != null) {
+                egl10.eglMakeCurrent(eglDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);
+                egl10.eglDestroySurface(eglDisplay, eglSurface);
+                eglSurface = null;
+            }
+            if (eglContext != null) {
+                egl10.eglDestroyContext(eglDisplay, eglContext);
+                eglContext = null;
+            }
+            if (eglDisplay != null) {
+                egl10.eglTerminate(eglDisplay);
+                eglDisplay = null;
+            }
+        }
+
+        private Runnable drawRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (!initied) {
+                    return;
+                }
+
+                if (!eglContext.equals(egl10.eglGetCurrentContext()) || !eglSurface.equals(egl10.eglGetCurrentSurface(EGL10.EGL_DRAW))) {
+                    if (!egl10.eglMakeCurrent(eglDisplay, eglSurface, eglSurface, eglContext)) {
+                        FileLog.e("eglMakeCurrent failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                        return;
+                    }
+                }
+                float time = (System.currentTimeMillis() - currentDate) / 1000.0f;
+                Intro.setPage(currentViewPagerPage);
+                Intro.setDate(time);
+                Intro.onDrawFrame();
+                egl10.eglSwapBuffers(eglDisplay, eglSurface);
+
+                postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        drawRunnable.run();
+                    }
+                }, 16);
+            }
+        };
+
+        private void loadTexture(int resId, int index) {
+            Drawable drawable = getResources().getDrawable(resId);
+            if (drawable instanceof BitmapDrawable) {
+                Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
+                GLES20.glBindTexture(GL10.GL_TEXTURE_2D, textures[index]);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
+                GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);
+            }
+        }
+
+        public void shutdown() {
+            postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    finish();
+                    Looper looper = Looper.myLooper();
+                    if (looper != null) {
+                        looper.quit();
+                    }
+                }
+            });
+        }
+
+        public void setSurfaceTextureSize(int width, int height) {
+            surfaceWidth = width;
+            surfaceHeight = height;
+            Intro.onSurfaceChanged(width, height, Math.min(surfaceWidth / 148.0f, surfaceHeight / 148.0f), 0);
+        }
+
+        @Override
+        public void run() {
+            initied = initGL();
+            super.run();
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 58faae282..70fdc5950 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -56,19 +56,7 @@
 
     @Override
     public boolean onFragmentCreate() {
-        sortedLanguages = new ArrayList<>(LocaleController.getInstance().languages);
-        final LocaleController.LocaleInfo currentLocale = LocaleController.getInstance().getCurrentLocaleInfo();
-        Collections.sort(sortedLanguages, new Comparator<LocaleController.LocaleInfo>() {
-            @Override
-            public int compare(LocaleController.LocaleInfo o, LocaleController.LocaleInfo o2) {
-                if (o == currentLocale) {
-                    return -1;
-                } else if (o2 == currentLocale) {
-                    return 1;
-                }
-                return o.name.compareTo(o2.name);
-            }
-        });
+        fillLanguages();
         return super.onFragmentCreate();
     }
 
@@ -186,6 +174,7 @@ public boolean onItemClick(View view, int position) {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
                         if (LocaleController.getInstance().deleteLanguage(finalLocaleInfo)) {
+                            fillLanguages();
                             if (searchResult != null) {
                                 searchResult.remove(finalLocaleInfo);
                             }
@@ -216,6 +205,22 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
         return fragmentView;
     }
 
+    private void fillLanguages() {
+        sortedLanguages = new ArrayList<>(LocaleController.getInstance().languages);
+        final LocaleController.LocaleInfo currentLocale = LocaleController.getInstance().getCurrentLocaleInfo();
+        Collections.sort(sortedLanguages, new Comparator<LocaleController.LocaleInfo>() {
+            @Override
+            public int compare(LocaleController.LocaleInfo o, LocaleController.LocaleInfo o2) {
+                if (o == currentLocale) {
+                    return -1;
+                } else if (o2 == currentLocale) {
+                    return 1;
+                }
+                return o.name.compareTo(o2.name);
+            }
+        });
+    }
+
     @Override
     public void onResume() {
         super.onResume();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index c9ea7f5e9..4f5506095 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -25,7 +25,6 @@
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.provider.ContactsContract;
-import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.view.ActionMode;
 import android.view.KeyEvent;
@@ -148,8 +147,14 @@ protected void onCreate(Bundle savedInstanceState) {
                 finish();
                 return;
             }
-            if (intent != null && !intent.getBooleanExtra("fromIntro", false)) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", MODE_PRIVATE);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            long crashed_time = preferences.getLong("intro_crashed_time", 0);
+            boolean fromIntro = intent.getBooleanExtra("fromIntro", false);
+            if (fromIntro) {
+                preferences.edit().putLong("intro_crashed_time", 0).commit();
+            }
+            if (Math.abs(crashed_time - System.currentTimeMillis()) >= 60 * 2 * 1000 && intent != null && !fromIntro) {
+                preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", MODE_PRIVATE);
                 Map<String, ?> state = preferences.getAll();
                 if (state.isEmpty()) {
                     Intent intent2 = new Intent(this, IntroActivity.class);
@@ -627,7 +632,9 @@ private void showPasscodeActivity() {
             return;
         }
         UserConfig.appLocked = true;
-        if (PhotoViewer.getInstance().isVisible()) {
+        if (SecretMediaViewer.getInstance().isVisible()) {
+            SecretMediaViewer.getInstance().closePhoto(false, false);
+        } else if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(false, true);
         } else if (ArticleViewer.getInstance().isVisible()) {
             ArticleViewer.getInstance().close(false, true);
@@ -903,7 +910,8 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                         if (!(parcelable instanceof Uri)) {
                                             parcelable = Uri.parse(parcelable.toString());
                                         }
-                                        String path = AndroidUtilities.getPath((Uri) parcelable);
+                                        Uri uri = (Uri) parcelable;
+                                        String path = AndroidUtilities.getPath(uri);
                                         String originalPath = parcelable.toString();
                                         if (originalPath == null) {
                                             originalPath = path;
@@ -918,6 +926,12 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                             }
                                             documentsPathsArray.add(path);
                                             documentsOriginalPathsArray.add(originalPath);
+                                        } else {
+                                            if (documentsUrisArray == null) {
+                                                documentsUrisArray = new ArrayList<>();
+                                            }
+                                            documentsUrisArray.add(uri);
+                                            documentsMimeType = type;
                                         }
                                     }
                                 }
@@ -1218,7 +1232,9 @@ public void run() {
                     }
                     actionBarLayout.presentFragment(fragment, removeLast, true, true);
                     pushOpened = true;
-                    if (PhotoViewer.getInstance().isVisible()) {
+                    if (SecretMediaViewer.getInstance().isVisible()) {
+                        SecretMediaViewer.getInstance().closePhoto(false, false);
+                    } else if (PhotoViewer.getInstance().isVisible()) {
                         PhotoViewer.getInstance().closePhoto(false, true);
                     } else if (ArticleViewer.getInstance().isVisible()) {
                         ArticleViewer.getInstance().close(false, true);
@@ -1373,7 +1389,9 @@ public void didSelectDialog(DialogsActivity fragment, long dialog_id, boolean pa
                                             removeLast = actionBarLayout.fragmentsStack.size() > 1 && actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1) instanceof DialogsActivity;
                                         }
                                         actionBarLayout.presentFragment(fragment, removeLast, true, true);
-                                        if (PhotoViewer.getInstance().isVisible()) {
+                                        if (SecretMediaViewer.getInstance().isVisible()) {
+                                            SecretMediaViewer.getInstance().closePhoto(false, false);
+                                        } else if (PhotoViewer.getInstance().isVisible()) {
                                             PhotoViewer.getInstance().closePhoto(false, true);
                                         } else if (ArticleViewer.getInstance().isVisible()) {
                                             ArticleViewer.getInstance().close(false, true);
@@ -1711,30 +1729,25 @@ public void didSelectDialog(DialogsActivity dialogsFragment, long dialog_id, boo
             ChatActivity fragment = new ChatActivity(args);
 
             if (videoPath != null) {
-                if (Build.VERSION.SDK_INT >= 16) {
-                    if (AndroidUtilities.isTablet()) {
-                        if (tabletFullSize) {
-                            actionBarLayout.presentFragment(fragment, false, true, false);
-                        } else {
-                            rightActionBarLayout.removeAllFragments();
-                            rightActionBarLayout.addFragmentToStack(fragment);
-                            rightActionBarLayout.setVisibility(View.VISIBLE);
-                            rightActionBarLayout.showLastFragment();
-                        }
+                if (AndroidUtilities.isTablet()) {
+                    if (tabletFullSize) {
+                        actionBarLayout.presentFragment(fragment, false, true, false);
                     } else {
-                        actionBarLayout.addFragmentToStack(fragment, dialogsFragment != null ? actionBarLayout.fragmentsStack.size() - 1 : actionBarLayout.fragmentsStack.size());
+                        rightActionBarLayout.removeAllFragments();
+                        rightActionBarLayout.addFragmentToStack(fragment);
+                        rightActionBarLayout.setVisibility(View.VISIBLE);
+                        rightActionBarLayout.showLastFragment();
                     }
+                } else {
+                    actionBarLayout.addFragmentToStack(fragment, dialogsFragment != null ? actionBarLayout.fragmentsStack.size() - 1 : actionBarLayout.fragmentsStack.size());
+                }
 
-                    if (!fragment.openVideoEditor(videoPath, dialogsFragment != null, false) && !AndroidUtilities.isTablet()) {
-                        if (dialogsFragment != null) {
-                            dialogsFragment.finishFragment(true);
-                        } else {
-                            actionBarLayout.showLastFragment();
-                        }
+                if (!fragment.openVideoEditor(videoPath, dialogsFragment != null, false) && !AndroidUtilities.isTablet()) {
+                    if (dialogsFragment != null) {
+                        dialogsFragment.finishFragment(true);
+                    } else {
+                        actionBarLayout.showLastFragment();
                     }
-                } else {
-                    actionBarLayout.presentFragment(fragment, dialogsFragment != null, dialogsFragment == null, true);
-                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, null, null);
                 }
             } else {
                 actionBarLayout.presentFragment(fragment, dialogsFragment != null, dialogsFragment == null, true);
@@ -1746,7 +1759,7 @@ public void didSelectDialog(DialogsActivity dialogsFragment, long dialog_id, boo
                         captions.add(sendingText);
                         sendingText = null;
                     }
-                    SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id, null, captions, null, null, false);
+                    SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id, null, captions, null, null, false, null);
                 }
 
                 if (sendingText != null) {
@@ -1952,7 +1965,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         PhotoViewer.getInstance().destroyPhotoViewer();
-        SecretPhotoViewer.getInstance().destroyPhotoViewer();
+        SecretMediaViewer.getInstance().destroyPhotoViewer();
         ArticleViewer.getInstance().destroyArticleViewer();
         StickerPreviewViewer.getInstance().destroy();
         PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
@@ -1980,11 +1993,7 @@ protected void onDestroy() {
         try {
             if (onGlobalLayoutListener != null) {
                 final View view = getWindow().getDecorView().getRootView();
-                if (Build.VERSION.SDK_INT < 16) {
-                    view.getViewTreeObserver().removeGlobalOnLayoutListener(onGlobalLayoutListener);
-                } else {
-                    view.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
-                }
+                view.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
             }
         } catch (Exception e) {
             FileLog.e(e);
@@ -2512,7 +2521,9 @@ public void onBackPressed() {
             finish();
             return;
         }
-        if (PhotoViewer.getInstance().isVisible()) {
+        if (SecretMediaViewer.getInstance().isVisible()) {
+            SecretMediaViewer.getInstance().closePhoto(true, false);
+        } else if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(true, false);
         } else if (ArticleViewer.getInstance().isVisible()) {
             ArticleViewer.getInstance().close(true, false);
@@ -2588,7 +2599,10 @@ public void onActionModeFinished(ActionMode mode) {
 
     @Override
     public boolean onPreIme() {
-        if (PhotoViewer.getInstance().isVisible()) {
+        if (SecretMediaViewer.getInstance().isVisible()) {
+            SecretMediaViewer.getInstance().closePhoto(true, false);
+            return true;
+        } else if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(true, false);
             return true;
         } else if (ArticleViewer.getInstance().isVisible()) {
@@ -2599,7 +2613,7 @@ public boolean onPreIme() {
     }
 
     @Override
-    public boolean onKeyUp(int keyCode, @NonNull KeyEvent event) {
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
         if (keyCode == KeyEvent.KEYCODE_MENU && !UserConfig.isWaitingForPasscodeEnter) {
             if (PhotoViewer.getInstance().isVisible()) {
                 return super.onKeyUp(keyCode, event);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
index b0836d65b..fef9b1caf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
@@ -243,11 +243,7 @@ public void fixLayout() {
             public void onGlobalLayout() {
                 needLayout();
                 if (actionBarLayout != null) {
-                    if (Build.VERSION.SDK_INT < 16) {
-                        actionBarLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                    } else {
-                        actionBarLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                    }
+                    actionBarLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                 }
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 59c4561c2..35d546259 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -830,8 +830,9 @@ public void didReceivedNotification(int id, Object... args) {
                 ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
                 boolean enc = ((int) dialog_id) == 0;
                 boolean updated = false;
-                for (MessageObject obj : arr) {
-                    if (obj.messageOwner.media == null) {
+                for (int a = 0; a < arr.size(); a++) {
+                    MessageObject obj = arr.get(a);
+                    if (obj.messageOwner.media == null || obj.isSecretPhoto()) {
                         continue;
                     }
                     int type = SharedMediaQuery.getMediaType(obj.messageOwner);
@@ -1252,7 +1253,7 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                             }
                         }
                     } else if (!cell.isLoading()) {
-                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, 0);
                         cell.updateFileExistIcon();
                     } else {
                         FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
@@ -1264,7 +1265,7 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                     TLRPC.WebPage webPage = message.messageOwner.media.webpage;
                     String link = null;
                     if (webPage != null && !(webPage instanceof TLRPC.TL_webPageEmpty)) {
-                        if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                        if (webPage.embed_url != null && webPage.embed_url.length() != 0) {
                             openWebView(webPage);
                             return;
                         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index fa2ebd550..ea2613016 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -27,7 +27,6 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
-import org.telegram.messenger.VideoEditedInfo;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
@@ -48,8 +47,7 @@
 public class PhotoAlbumPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
     public interface PhotoAlbumPickerActivityDelegate {
-        void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos);
-        void didSelectVideo(String path, VideoEditedInfo info, long estimatedSize, long estimatedDuration, String caption);
+        void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<Integer> ttls, ArrayList<MediaController.PhotoEntry> videos, ArrayList<ArrayList<TLRPC.InputDocument>> masks, ArrayList<MediaController.SearchImage> webPhotos);
         void startPhotoSelectActivity();
     }
 
@@ -287,6 +285,7 @@ private void sendSelectedPhotos() {
         ArrayList<String> photos = new ArrayList<>();
         ArrayList<MediaController.PhotoEntry> videos = new ArrayList<>();
         ArrayList<String> captions = new ArrayList<>();
+        ArrayList<Integer> ttls = new ArrayList<>();
         ArrayList<ArrayList<TLRPC.InputDocument>> masks = new ArrayList<>();
         for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
             MediaController.PhotoEntry photoEntry = entry.getValue();
@@ -296,10 +295,12 @@ private void sendSelectedPhotos() {
                 photos.add(photoEntry.imagePath);
                 captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
                 masks.add(!photoEntry.stickers.isEmpty() ? new ArrayList<>(photoEntry.stickers) : null);
+                ttls.add(photoEntry.ttl);
             } else if (photoEntry.path != null) {
                 photos.add(photoEntry.path);
                 captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
                 masks.add(!photoEntry.stickers.isEmpty() ? new ArrayList<>(photoEntry.stickers) : null);
+                ttls.add(photoEntry.ttl);
             }
         }
         ArrayList<MediaController.SearchImage> webPhotos = new ArrayList<>();
@@ -311,6 +312,7 @@ private void sendSelectedPhotos() {
                 photos.add(searchImage.imagePath);
                 captions.add(searchImage.caption != null ? searchImage.caption.toString() : null);
                 masks.add(!searchImage.stickers.isEmpty() ? new ArrayList<>(searchImage.stickers) : null);
+                ttls.add(searchImage.ttl);
             } else {
                 webPhotos.add(searchImage);
             }
@@ -343,7 +345,7 @@ private void sendSelectedPhotos() {
             MessagesStorage.getInstance().putWebRecent(recentGifImages);
         }
 
-        delegate.didSelectPhotos(photos, captions, videos, masks, webPhotos);
+        delegate.didSelectPhotos(photos, captions, ttls, videos, masks, webPhotos);
     }
 
     private void fixLayout() {
@@ -401,12 +403,6 @@ public void actionButtonPressed(boolean canceled) {
                     sendSelectedPhotos();
                 }
             }
-
-            @Override
-            public void didSelectVideo(String path, VideoEditedInfo info, long estimatedSize, long estimatedDuration, String caption) {
-                removeSelfFromStack();
-                delegate.didSelectVideo(path, info, estimatedSize, estimatedDuration, caption);
-            }
         });
         presentFragment(fragment);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index cd8a208d3..d01413bc8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -77,10 +77,7 @@
 
     public interface PhotoPickerActivityDelegate {
         void selectedPhotosChanged();
-
         void actionButtonPressed(boolean canceled);
-
-        void didSelectVideo(String path, VideoEditedInfo info, long estimatedSize, long estimatedDuration, String caption);
     }
 
     private int type;
@@ -298,65 +295,24 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, Recycle
         listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
             public void onItemClick(View view, int position) {
-                /*if (selectedAlbum != null && selectedAlbum.isVideo) {
-                    if (position < 0 || position >= selectedAlbum.photos.size()) {
-                        return;
-                    }
-
-                    String path = selectedAlbum.photos.get(position).path;
-                    if (Build.VERSION.SDK_INT >= 16) {
-                        Bundle args = new Bundle();
-                        args.putString("videoPath", path);
-                        VideoEditorActivity fragment = new VideoEditorActivity(args);
-                        fragment.setDelegate(new VideoEditorActivity.VideoEditorActivityDelegate() {
-                            @Override
-                            public void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration, String caption) {
-                                removeSelfFromStack();
-                                VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
-                                videoEditedInfo.startTime = startTime;
-                                videoEditedInfo.endTime = endTime;
-                                videoEditedInfo.rotationValue = rotationValue;
-                                videoEditedInfo.originalWidth = originalWidth;
-                                videoEditedInfo.originalHeight = originalHeight;
-                                videoEditedInfo.bitrate = bitrate;
-                                videoEditedInfo.resultWidth = resultWidth;
-                                videoEditedInfo.resultHeight = resultHeight;
-                                videoEditedInfo.originalPath = videoPath;
-                                videoEditedInfo.muted = videoEditedInfo.bitrate == -1;
-                                delegate.didSelectVideo(videoPath, videoEditedInfo, estimatedSize, estimatedDuration, caption);
-                            }
-                        });
-
-                        if (!fragment.onFragmentCreate()) {
-                            delegate.didSelectVideo(path, null, 0, 0, null);
-                            finishFragment();
-                        } else if (parentLayout.presentFragment(fragment, false, false, true)) {
-                            fragment.setParentChatActivity(chatActivity);
-                        }
-                    } else {
-                        delegate.didSelectVideo(path, null, 0, 0, null);
-                        finishFragment();
-                    }
-                } else {*/
-                    ArrayList<Object> arrayList;
-                    if (selectedAlbum != null) {
-                        arrayList = (ArrayList) selectedAlbum.photos;
+                ArrayList<Object> arrayList;
+                if (selectedAlbum != null) {
+                    arrayList = (ArrayList) selectedAlbum.photos;
+                } else {
+                    if (searchResult.isEmpty() && lastSearchString == null) {
+                        arrayList = (ArrayList) recentImages;
                     } else {
-                        if (searchResult.isEmpty() && lastSearchString == null) {
-                            arrayList = (ArrayList) recentImages;
-                        } else {
-                            arrayList = (ArrayList) searchResult;
-                        }
-                    }
-                    if (position < 0 || position >= arrayList.size()) {
-                        return;
+                        arrayList = (ArrayList) searchResult;
                     }
-                    if (searchItem != null) {
-                        AndroidUtilities.hideKeyboard(searchItem.getSearchField());
-                    }
-                    PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, position, singlePhoto ? 1 : 0, PhotoPickerActivity.this, chatActivity);
-                //}
+                }
+                if (position < 0 || position >= arrayList.size()) {
+                    return;
+                }
+                if (searchItem != null) {
+                    AndroidUtilities.hideKeyboard(searchItem.getSearchField());
+                }
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhotoForSelect(arrayList, position, singlePhoto ? 1 : 0, PhotoPickerActivity.this, chatActivity);
             }
         });
 
@@ -1172,9 +1128,7 @@ public void onClick(View v) {
                                 MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
                                 if (selectedPhotos.containsKey(photoEntry.imageId)) {
                                     selectedPhotos.remove(photoEntry.imageId);
-                                    photoEntry.imagePath = null;
-                                    photoEntry.thumbPath = null;
-                                    photoEntry.stickers.clear();
+                                    photoEntry.reset();
                                     updatePhotoAtIndex(index);
                                 } else {
                                     selectedPhotos.put(photoEntry.imageId, photoEntry);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 7ab664992..342432ccc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -15,6 +15,7 @@
 import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -24,6 +25,8 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
@@ -34,8 +37,9 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.support.v4.content.FileProvider;
+import android.text.Layout;
 import android.text.SpannableStringBuilder;
+import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.text.TextUtils;
 import android.util.TypedValue;
@@ -54,6 +58,7 @@
 import android.view.WindowManager;
 import android.view.animation.AccelerateInterpolator;
 import android.view.animation.DecelerateInterpolator;
+import android.view.animation.OvershootInterpolator;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
@@ -71,8 +76,8 @@
 import com.googlecode.mp4parser.util.Path;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.MessagesStorage;
@@ -98,6 +103,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.ActionBar.BottomSheet;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -110,6 +116,7 @@
 import org.telegram.ui.Components.ClippingImageView;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberPicker;
 import org.telegram.ui.Components.PhotoCropView;
 import org.telegram.ui.Components.PhotoFilterView;
 import org.telegram.ui.Components.PhotoPaintView;
@@ -121,7 +128,7 @@
 import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
 import org.telegram.ui.Components.StickersAlert;
 import org.telegram.ui.Components.VideoPlayer;
-import org.telegram.ui.Components.VideoTimelineView;
+import org.telegram.ui.Components.VideoTimelinePlayView;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -161,17 +168,21 @@
     private BackgroundDrawable backgroundDrawable = new BackgroundDrawable(0xff000000);
     private Paint blackPaint = new Paint();
     private CheckBox checkImageView;
-    private PickerBottomLayoutViewer pickerView;
+    private CounterView photosCounterView;
+    private FrameLayout pickerView;
+    private ImageView pickerViewSendButton;
+    private LinearLayout itemsLayout;
     private PickerBottomLayoutViewer editorDoneLayout;
     private TextView resetButton;
     private PhotoProgressView photoProgressViews[] = new PhotoProgressView[3];
     private ImageView paintItem;
     private ImageView cropItem;
     private ImageView tuneItem;
+    private ImageView timeItem;
     private ImageView muteItem;
-    private ImageView captionItem;
     private ImageView compressItem;
     private AnimatorSet compressItemAnimation;
+    private boolean isCurrentVideo;
 
     private AnimatorSet currentActionBarAnimation;
     private PhotoCropView photoCropView;
@@ -179,8 +190,6 @@
     private PhotoPaintView photoPaintView;
     private AlertDialog visibleDialog;
     private TextView captionTextView;
-    private TextView captionTextViewOld;
-    private TextView captionTextViewNew;
     private ChatAttachAlert parentAlert;
     private PhotoViewerCaptionEnterView captionEditText;
     private boolean canShowBottom = true;
@@ -208,30 +217,58 @@
     private Runnable updateProgressRunnable = new Runnable() {
         @Override
         public void run() {
-            if (videoPlayer != null && videoPlayerSeekbar != null) {
-                if (!videoPlayerSeekbar.isDragging()) {
-                    float progress = videoPlayer.getCurrentPosition() / (float) videoPlayer.getDuration();
-                    if (!inPreview && videoTimelineViewContainer != null && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
-                        if (progress >= videoTimelineView.getRightProgress()) {
-                            videoPlayer.pause();
-                            videoPlayerSeekbar.setProgress(0);
-                            videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
-                        } else {
-                            progress -= videoTimelineView.getLeftProgress();
-                            if (progress < 0) {
-                                progress = 0;
+            if (videoPlayer != null) {
+                if (isCurrentVideo) {
+                    if (!videoTimelineView.isDragging()) {
+                        float progress = videoPlayer.getCurrentPosition() / (float) videoPlayer.getDuration();
+                        if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                            if (progress >= videoTimelineView.getRightProgress()) {
+                                videoPlayer.pause();
+                                videoTimelineView.setProgress(0);
+                                videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
+                                containerView.invalidate();
+                            } else {
+                                progress -= videoTimelineView.getLeftProgress();
+                                if (progress < 0) {
+                                    progress = 0;
+                                }
+                                progress /= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
+                                if (progress > 1) {
+                                    progress = 1;
+                                }
+                                videoTimelineView.setProgress(progress);
                             }
-                            progress /= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
-                            if (progress > 1) {
-                                progress = 1;
+                        } else {
+                            videoTimelineView.setProgress(progress);
+                        }
+                        updateVideoPlayerTime();
+                    }
+                } else {
+                    if (!videoPlayerSeekbar.isDragging()) {
+                        float progress = videoPlayer.getCurrentPosition() / (float) videoPlayer.getDuration();
+                        if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                            if (progress >= videoTimelineView.getRightProgress()) {
+                                videoPlayer.pause();
+                                videoPlayerSeekbar.setProgress(0);
+                                videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
+                                containerView.invalidate();
+                            } else {
+                                progress -= videoTimelineView.getLeftProgress();
+                                if (progress < 0) {
+                                    progress = 0;
+                                }
+                                progress /= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
+                                if (progress > 1) {
+                                    progress = 1;
+                                }
+                                videoPlayerSeekbar.setProgress(progress);
                             }
+                        } else {
                             videoPlayerSeekbar.setProgress(progress);
                         }
-                    } else {
-                        videoPlayerSeekbar.setProgress(progress);
+                        videoPlayerControlFrameLayout.invalidate();
+                        updateVideoPlayerTime();
                     }
-                    videoPlayerControlFrameLayout.invalidate();
-                    updateVideoPlayerTime();
                 }
             }
             if (isPlaying) {
@@ -401,6 +438,96 @@ public void draw(Canvas canvas) {
         }
     }
 
+    private class CounterView extends View {
+
+        private StaticLayout staticLayout;
+        private TextPaint textPaint;
+        private Paint paint;
+        private int width;
+        private int height;
+        private RectF rect;
+        private int currentCount = 0;
+
+        public CounterView(Context context) {
+            super(context);
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setTextSize(AndroidUtilities.dp(18));
+            textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            textPaint.setColor(0xffffffff);
+
+            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            paint.setColor(0xffffffff);
+            paint.setStrokeWidth(AndroidUtilities.dp(2));
+            paint.setStyle(Paint.Style.STROKE);
+
+            rect = new RectF();
+
+            setCount(0);
+        }
+
+        @Override
+        public void setScaleX(float scaleX) {
+            super.setScaleX(scaleX);
+            invalidate();
+        }
+
+        public void setCount(int value) {
+            staticLayout = new StaticLayout("" + Math.max(1, value), textPaint, AndroidUtilities.dp(100), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            width = (int) Math.ceil(staticLayout.getLineWidth(0));
+            height = staticLayout.getLineBottom(0);
+            AnimatorSet animatorSet = new AnimatorSet();
+            if (value == 0) {
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(this, "scaleX", 0.0f),
+                        ObjectAnimator.ofFloat(this, "scaleY", 0.0f),
+                        ObjectAnimator.ofInt(paint, "alpha", 0),
+                        ObjectAnimator.ofInt(textPaint, "alpha", 0));
+                animatorSet.setInterpolator(new DecelerateInterpolator());
+            } else if (currentCount == 0) {
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(this, "scaleX", 0.0f, 1.0f),
+                        ObjectAnimator.ofFloat(this, "scaleY", 0.0f, 1.0f),
+                        ObjectAnimator.ofInt(paint, "alpha", 0, 255),
+                        ObjectAnimator.ofInt(textPaint, "alpha", 0, 255));
+                animatorSet.setInterpolator(new DecelerateInterpolator());
+            } else if (value < currentCount) {
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(this, "scaleX", 1.1f, 1.0f),
+                        ObjectAnimator.ofFloat(this, "scaleY", 1.1f, 1.0f));
+                animatorSet.setInterpolator(new OvershootInterpolator());
+            } else {
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(this, "scaleX", 0.9f, 1.0f),
+                        ObjectAnimator.ofFloat(this, "scaleY", 0.9f, 1.0f));
+                animatorSet.setInterpolator(new OvershootInterpolator());
+            }
+
+            animatorSet.setDuration(180);
+            animatorSet.start();
+            requestLayout();
+            currentCount = value;
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(MeasureSpec.makeMeasureSpec(Math.max(width + AndroidUtilities.dp(20), AndroidUtilities.dp(30)), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            int cx = getMeasuredWidth() / 2;
+            int cy = getMeasuredHeight() / 2;
+            rect.set(AndroidUtilities.dp(1), cy - AndroidUtilities.dp(14), getMeasuredWidth() - AndroidUtilities.dp(1), cy + AndroidUtilities.dp(14));
+            canvas.drawRoundRect(rect, AndroidUtilities.dp(15), AndroidUtilities.dp(15), paint);
+            if (staticLayout != null) {
+                canvas.save();
+                canvas.translate((getMeasuredWidth() - width) / 2, (getMeasuredHeight() - height) / 2 + AndroidUtilities.dpf2(0.2f));
+                staticLayout.draw(canvas);
+                canvas.restore();
+            }
+        }
+    }
+
     private class PhotoProgressView {
 
         private long lastUpdateTime = 0;
@@ -763,7 +890,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 if (!captionEditText.isPopupShowing() && captionEditText.getEmojiPadding() == 0 && (AndroidUtilities.usingHardwareInput && getTag() == null || getKeyboardHeight() == 0)) {
                     return false;
                 }
-            } else if (child == pickerView || child == captionTextViewNew || child == captionTextViewOld || child == checkImageView || child == videoTimelineViewContainer || muteItem.getVisibility() == VISIBLE && child == bottomLayout) {
+            } else if (child == pickerView || child == captionTextView || child == checkImageView || child == photosCounterView || muteItem.getVisibility() == VISIBLE && child == bottomLayout) {
                 int paddingBottom = getKeyboardHeight() <= AndroidUtilities.dp(20) && !AndroidUtilities.isInMultiwindow ? captionEditText.getEmojiPadding() : 0;
                 if (captionEditText.isPopupShowing() || AndroidUtilities.usingHardwareInput && getTag() != null || getKeyboardHeight() > 0 || paddingBottom != 0) {
                     bottomTouchEnabled = false;
@@ -818,7 +945,7 @@ public void didReceivedNotification(int id, Object... args) {
                 if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
                     photoProgressViews[a].setProgress(1.0f, true);
                     checkProgress(a, true);
-                    if (Build.VERSION.SDK_INT >= 16 && a == 0 && (currentMessageObject != null && currentMessageObject.isVideo() || currentBotInlineResult != null && (currentBotInlineResult.type.equals("video") || MessageObject.isVideoDocument(currentBotInlineResult.document)))) {
+                    if (a == 0 && (currentMessageObject != null && currentMessageObject.isVideo() || currentBotInlineResult != null && (currentBotInlineResult.type.equals("video") || MessageObject.isVideoDocument(currentBotInlineResult.document)))) {
                         onActionClick(false);
                     }
                     break;
@@ -1222,8 +1349,12 @@ public void run() {
                                 FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) checkImageView.getLayoutParams();
                                 WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
                                 int rotation = manager.getDefaultDisplay().getRotation();
-                                layoutParams.topMargin = AndroidUtilities.dp(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                                layoutParams.topMargin = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(40)) / 2 + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
                                 checkImageView.setLayoutParams(layoutParams);
+
+                                layoutParams = (FrameLayout.LayoutParams) photosCounterView.getLayoutParams();
+                                layoutParams.topMargin = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(40)) / 2 + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                                photosCounterView.setLayoutParams(layoutParams);
                             }
                         });
                     }
@@ -1585,51 +1716,23 @@ public boolean canOpenMenu() {
         bottomLayout.setBackgroundColor(0x7f000000);
         containerView.addView(bottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
 
-        captionTextViewOld = new TextView(actvityContext) {
-            @Override
-            public boolean onTouchEvent(MotionEvent event) {
-                return bottomTouchEnabled && super.onTouchEvent(event);
-            }
-        };
-        captionTextViewOld.setMaxLines(10);
-        captionTextViewOld.setBackgroundColor(0x7f000000);
-        captionTextViewOld.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
-        captionTextViewOld.setLinkTextColor(0xffffffff);
-        captionTextViewOld.setTextColor(0xffffffff);
-        captionTextViewOld.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
-        captionTextViewOld.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        captionTextViewOld.setVisibility(View.INVISIBLE);
-        containerView.addView(captionTextViewOld, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
-        captionTextViewOld.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (cropItem.getVisibility() == View.VISIBLE) {
-                    openCaptionEnter();
-                }
-            }
-        });
-
-        captionTextView = captionTextViewNew = new TextView(actvityContext) {
+        captionTextView = new TextView(actvityContext) {
             @Override
             public boolean onTouchEvent(MotionEvent event) {
                 return bottomTouchEnabled && super.onTouchEvent(event);
             }
         };
-        captionTextViewNew.setMaxLines(10);
-        captionTextViewNew.setBackgroundColor(0x7f000000);
-        captionTextViewNew.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
-        captionTextViewNew.setLinkTextColor(0xffffffff);
-        captionTextViewNew.setTextColor(0xffffffff);
-        captionTextViewNew.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
-        captionTextViewNew.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        captionTextViewNew.setVisibility(View.INVISIBLE);
-        containerView.addView(captionTextViewNew, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
-        captionTextViewNew.setOnClickListener(new View.OnClickListener() {
+        captionTextView.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
+        captionTextView.setLinkTextColor(0xffffffff);
+        captionTextView.setTextColor(0xffffffff);
+        captionTextView.setEllipsize(TextUtils.TruncateAt.END);
+        captionTextView.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
+        captionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        captionTextView.setVisibility(View.INVISIBLE);
+        captionTextView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (cropItem.getVisibility() == View.VISIBLE) {
-                    openCaptionEnter();
-                }
+                openCaptionEnter();
             }
         });
 
@@ -1672,190 +1775,152 @@ public void onClick(View v) {
         dateTextView.setGravity(Gravity.LEFT);
         bottomLayout.addView(dateTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 25, 50, 0));
 
-        if (Build.VERSION.SDK_INT >= 16) {
-            videoPlayerSeekbar = new SeekBar(containerView.getContext());
-            videoPlayerSeekbar.setColors(0x66ffffff, 0xffffffff, 0xffffffff);
-            videoPlayerSeekbar.setDelegate(new SeekBar.SeekBarDelegate() {
-                @Override
-                public void onSeekBarDrag(float progress) {
-                    if (videoPlayer != null) {
-                        if (!inPreview && videoTimelineViewContainer != null && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
-                            progress = videoTimelineView.getLeftProgress() + (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * progress;
-                        }
-                        videoPlayer.seekTo((int) (progress * videoPlayer.getDuration()));
+        videoPlayerSeekbar = new SeekBar(containerView.getContext());
+        videoPlayerSeekbar.setColors(0x66ffffff, 0xffffffff, 0xffffffff);
+        videoPlayerSeekbar.setDelegate(new SeekBar.SeekBarDelegate() {
+            @Override
+            public void onSeekBarDrag(float progress) {
+                if (videoPlayer != null) {
+                    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                        progress = videoTimelineView.getLeftProgress() + (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * progress;
                     }
+                    videoPlayer.seekTo((int) (progress * videoPlayer.getDuration()));
                 }
-            });
+            }
+        });
 
-            videoPlayerControlFrameLayout = new FrameLayout(containerView.getContext()) {
+        videoPlayerControlFrameLayout = new FrameLayout(containerView.getContext()) {
 
-                @Override
-                public boolean onTouchEvent(MotionEvent event) {
-                    int x = (int) event.getX();
-                    int y = (int) event.getY();
-                    if (videoPlayerSeekbar.onTouch(event.getAction(), event.getX() - AndroidUtilities.dp(48), event.getY())) {
-                        getParent().requestDisallowInterceptTouchEvent(true);
-                        invalidate();
-                        return true;
-                    }
-                    return super.onTouchEvent(event);
+            @Override
+            public boolean onTouchEvent(MotionEvent event) {
+                int x = (int) event.getX();
+                int y = (int) event.getY();
+                if (videoPlayerSeekbar.onTouch(event.getAction(), event.getX() - AndroidUtilities.dp(48), event.getY())) {
+                    getParent().requestDisallowInterceptTouchEvent(true);
+                    invalidate();
+                    return true;
                 }
+                return super.onTouchEvent(event);
+            }
 
-                @Override
-                protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-                    long duration;
-                    if (videoPlayer != null) {
-                        duration = videoPlayer.getDuration();
-                        if (duration == C.TIME_UNSET) {
-                            duration = 0;
-                        }
-                    } else {
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+                long duration;
+                if (videoPlayer != null) {
+                    duration = videoPlayer.getDuration();
+                    if (duration == C.TIME_UNSET) {
                         duration = 0;
                     }
-                    duration /= 1000;
-                    int size = (int) Math.ceil(videoPlayerTime.getPaint().measureText(String.format("%02d:%02d / %02d:%02d", duration / 60, duration % 60, duration / 60, duration % 60)));
-                    videoPlayerSeekbar.setSize(getMeasuredWidth() - AndroidUtilities.dp(48 + 16) - size, getMeasuredHeight());
+                } else {
+                    duration = 0;
                 }
+                duration /= 1000;
+                int size = (int) Math.ceil(videoPlayerTime.getPaint().measureText(String.format("%02d:%02d / %02d:%02d", duration / 60, duration % 60, duration / 60, duration % 60)));
+                videoPlayerSeekbar.setSize(getMeasuredWidth() - AndroidUtilities.dp(48 + 16) - size, getMeasuredHeight());
+            }
 
-                @Override
-                protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-                    super.onLayout(changed, left, top, right, bottom);
-                    float progress = 0;
-                    if (videoPlayer != null) {
-                        progress = videoPlayer.getCurrentPosition() / (float) videoPlayer.getDuration();
-                        if (!inPreview && videoTimelineViewContainer != null && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
-                            progress -= videoTimelineView.getLeftProgress();
-                            if (progress < 0) {
-                                progress = 0;
-                            }
-                            progress /= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
-                            if (progress > 1) {
-                                progress = 1;
-                            }
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                super.onLayout(changed, left, top, right, bottom);
+                float progress = 0;
+                if (videoPlayer != null) {
+                    progress = videoPlayer.getCurrentPosition() / (float) videoPlayer.getDuration();
+                    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                        progress -= videoTimelineView.getLeftProgress();
+                        if (progress < 0) {
+                            progress = 0;
+                        }
+                        progress /= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
+                        if (progress > 1) {
+                            progress = 1;
                         }
                     }
-                    videoPlayerSeekbar.setProgress(progress);
                 }
+                videoPlayerSeekbar.setProgress(progress);
+                videoTimelineView.setProgress(progress);
+            }
 
-                @Override
-                protected void onDraw(Canvas canvas) {
-                    canvas.save();
-                    canvas.translate(AndroidUtilities.dp(48), 0);
-                    videoPlayerSeekbar.draw(canvas);
-                    canvas.restore();
-                }
-            };
-            videoPlayerControlFrameLayout.setWillNotDraw(false);
-            bottomLayout.addView(videoPlayerControlFrameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+            @Override
+            protected void onDraw(Canvas canvas) {
+                canvas.save();
+                canvas.translate(AndroidUtilities.dp(48), 0);
+                videoPlayerSeekbar.draw(canvas);
+                canvas.restore();
+            }
+        };
+        videoPlayerControlFrameLayout.setWillNotDraw(false);
+        bottomLayout.addView(videoPlayerControlFrameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
 
-            videoPlayButton = new ImageView(containerView.getContext());
-            videoPlayButton.setScaleType(ImageView.ScaleType.CENTER);
-            videoPlayerControlFrameLayout.addView(videoPlayButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
-            videoPlayButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (videoPlayer == null) {
-                        return;
-                    }
-                    if (isPlaying) {
-                        videoPlayer.pause();
+        videoPlayButton = new ImageView(containerView.getContext());
+        videoPlayButton.setScaleType(ImageView.ScaleType.CENTER);
+        videoPlayerControlFrameLayout.addView(videoPlayButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        videoPlayButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (videoPlayer == null) {
+                    return;
+                }
+                if (isPlaying) {
+                    videoPlayer.pause();
+                } else {
+                    if (isCurrentVideo) {
+                        if (Math.abs(videoTimelineView.getProgress() - 1.0f) < 0.01f || videoPlayer.getCurrentPosition() == videoPlayer.getDuration()) {
+                            videoPlayer.seekTo(0);
+                        }
                     } else {
                         if (Math.abs(videoPlayerSeekbar.getProgress() - 1.0f) < 0.01f || videoPlayer.getCurrentPosition() == videoPlayer.getDuration()) {
                             videoPlayer.seekTo(0);
                         }
-                        videoPlayer.play();
-                    }
-                }
-            });
-
-            videoPlayerTime = new TextView(containerView.getContext());
-            videoPlayerTime.setTextColor(0xffffffff);
-            videoPlayerTime.setGravity(Gravity.CENTER_VERTICAL);
-            videoPlayerTime.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-            videoPlayerControlFrameLayout.addView(videoPlayerTime, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.RIGHT | Gravity.TOP, 0, 0, 8, 0));
-
-            videoTimelineViewContainer = new FrameLayout(parentActivity);
-            videoTimelineViewContainer.setBackgroundColor(0x7f000000);
-            containerView.addView(videoTimelineViewContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 52, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 96));
-
-            videoTimelineView = new VideoTimelineView(parentActivity);
-            videoTimelineView.setDelegate(new VideoTimelineView.VideoTimelineViewDelegate() {
-                @Override
-                public void onLeftProgressChanged(float progress) {
-                    if (videoPlayer == null) {
-                        return;
-                    }
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
-                    }
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                    videoPlayerSeekbar.setProgress(0);
-                    updateVideoInfo();
-                }
-
-                @Override
-                public void onRifhtProgressChanged(float progress) {
-                    if (videoPlayer == null) {
-                        return;
-                    }
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
                     }
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                    videoPlayerSeekbar.setProgress(0);
-                    updateVideoInfo();
-                }
-
-                @Override
-                public void didStartDragging() {
-
+                    videoPlayer.play();
                 }
+                containerView.invalidate();
+            }
+        });
 
-                @Override
-                public void didStopDragging() {
+        videoPlayerTime = new TextView(containerView.getContext());
+        videoPlayerTime.setTextColor(0xffffffff);
+        videoPlayerTime.setGravity(Gravity.CENTER_VERTICAL);
+        videoPlayerTime.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        videoPlayerControlFrameLayout.addView(videoPlayerTime, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.RIGHT | Gravity.TOP, 0, 0, 8, 0));
 
-                }
-            });
-            videoTimelineViewContainer.addView(videoTimelineView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 44, Gravity.LEFT | Gravity.TOP, 0, 8, 0, 0));
-
-            progressView = new RadialProgressView(parentActivity);
-            progressView.setProgressColor(0xffffffff);
-            progressView.setBackgroundResource(R.drawable.circle_big);
-            progressView.setVisibility(View.INVISIBLE);
-            containerView.addView(progressView, LayoutHelper.createFrame(54, 54, Gravity.CENTER, 0, 0, 0, 60));
-
-            qualityPicker = new PickerBottomLayoutViewer(parentActivity);
-            qualityPicker.setBackgroundColor(0x7f000000);
-            qualityPicker.updateSelectedCount(0, false);
-            qualityPicker.setTranslationY(AndroidUtilities.dp(120));
-            qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
-            containerView.addView(qualityPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
-            qualityPicker.cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    selectedCompression = previousCompression;
-                    didChangedCompressionLevel(false);
-                    showQualityView(false);
-                    requestVideoPreview(2);
-                }
-            });
-            qualityPicker.doneButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    showQualityView(false);
-                    requestVideoPreview(2);
-                }
-            });
+        progressView = new RadialProgressView(parentActivity);
+        progressView.setProgressColor(0xffffffff);
+        progressView.setBackgroundResource(R.drawable.circle_big);
+        progressView.setVisibility(View.INVISIBLE);
+        containerView.addView(progressView, LayoutHelper.createFrame(54, 54, Gravity.CENTER));
+
+        qualityPicker = new PickerBottomLayoutViewer(parentActivity);
+        qualityPicker.setBackgroundColor(0x7f000000);
+        qualityPicker.updateSelectedCount(0, false);
+        qualityPicker.setTranslationY(AndroidUtilities.dp(120));
+        qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+        containerView.addView(qualityPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
+        qualityPicker.cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                selectedCompression = previousCompression;
+                didChangedCompressionLevel(false);
+                showQualityView(false);
+                requestVideoPreview(2);
+            }
+        });
+        qualityPicker.doneButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                showQualityView(false);
+                requestVideoPreview(2);
+            }
+        });
 
-            qualityChooseView = new QualityChooseView(parentActivity);
-            qualityChooseView.setTranslationY(AndroidUtilities.dp(120));
-            qualityChooseView.setVisibility(View.INVISIBLE);
-            qualityChooseView.setBackgroundColor(0x7f000000);
-            containerView.addView(qualityChooseView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 70, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 96));
-        }
+        qualityChooseView = new QualityChooseView(parentActivity);
+        qualityChooseView.setTranslationY(AndroidUtilities.dp(120));
+        qualityChooseView.setVisibility(View.INVISIBLE);
+        qualityChooseView.setBackgroundColor(0x7f000000);
+        containerView.addView(qualityChooseView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 70, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 48));
 
-        pickerView = new PickerBottomLayoutViewer(actvityContext) {
+        pickerView = new FrameLayout(actvityContext) {
             @Override
             public boolean dispatchTouchEvent(MotionEvent ev) {
                 return bottomTouchEnabled && super.dispatchTouchEvent(ev);
@@ -1872,22 +1937,69 @@ public boolean onTouchEvent(MotionEvent event) {
             }
         };
         pickerView.setBackgroundColor(0x7f000000);
-        containerView.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
-        pickerView.cancelButton.setOnClickListener(new View.OnClickListener() {
+        containerView.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT));
+
+        videoTimelineView = new VideoTimelinePlayView(parentActivity);
+        videoTimelineView.setDelegate(new VideoTimelinePlayView.VideoTimelineViewDelegate() {
             @Override
-            public void onClick(View view) {
-                if (placeProvider instanceof EmptyPhotoViewerProvider) {
-                    closePhoto(false, false);
-                } else if (placeProvider != null) {
-                    closePhoto(!placeProvider.cancelButtonPressed(), false);
+            public void onLeftProgressChanged(float progress) {
+                if (videoPlayer == null) {
+                    return;
+                }
+                if (videoPlayer.isPlaying()) {
+                    videoPlayer.pause();
+                    containerView.invalidate();
+                }
+                videoPlayer.seekTo((int) (videoDuration * progress));
+                videoPlayerSeekbar.setProgress(0);
+                videoTimelineView.setProgress(0);
+                updateVideoInfo();
+            }
+
+            @Override
+            public void onRightProgressChanged(float progress) {
+                if (videoPlayer == null) {
+                    return;
                 }
+                if (videoPlayer.isPlaying()) {
+                    videoPlayer.pause();
+                    containerView.invalidate();
+                }
+                videoPlayer.seekTo((int) (videoDuration * progress));
+                videoPlayerSeekbar.setProgress(0);
+                videoTimelineView.setProgress(0);
+                updateVideoInfo();
+            }
+
+            @Override
+            public void onPlayProgressChanged(float progress) {
+                videoPlayer.seekTo((int) (videoDuration * progress));
+            }
+
+            @Override
+            public void didStartDragging() {
+
+            }
+
+            @Override
+            public void didStopDragging() {
+
             }
         });
-        pickerView.doneButton.setOnClickListener(new View.OnClickListener() {
+        pickerView.addView(videoTimelineView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 58, Gravity.LEFT | Gravity.TOP, 0, 8, 0, 88));
+
+        pickerViewSendButton = new ImageView(parentActivity);
+        pickerViewSendButton.setScaleType(ImageView.ScaleType.CENTER);
+        Drawable drawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(56), 0xff6cabeb, 0xff6cabeb);
+        pickerViewSendButton.setBackgroundDrawable(drawable);
+        pickerViewSendButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chats_actionIcon), PorterDuff.Mode.MULTIPLY));
+        pickerViewSendButton.setPadding(AndroidUtilities.dp(4), 0, 0, 0);
+        pickerViewSendButton.setImageResource(R.drawable.ic_send);
+        pickerView.addView(pickerViewSendButton, LayoutHelper.createFrame(56, 56, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, 0, 0, 14, 14));
+        pickerViewSendButton.setOnClickListener(new View.OnClickListener() {
             @Override
-            public void onClick(View view) {
+            public void onClick(View v) {
                 if (placeProvider != null && !doneButtonPressed) {
-
                     VideoEditedInfo videoEditedInfo = getCurrentVideoEditedInfo();
                     placeProvider.sendButtonPressed(currentIndex, videoEditedInfo);
                     doneButtonPressed = true;
@@ -1896,27 +2008,27 @@ public void onClick(View view) {
             }
         });
 
-        LinearLayout itemsLayout = new LinearLayout(parentActivity);
+        itemsLayout = new LinearLayout(parentActivity);
         itemsLayout.setOrientation(LinearLayout.HORIZONTAL);
-        pickerView.addView(itemsLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 48, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
+        pickerView.addView(itemsLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 48, Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM, 0, 0, 34, 0));
 
-        tuneItem = new ImageView(parentActivity);
-        tuneItem.setScaleType(ImageView.ScaleType.CENTER);
-        tuneItem.setImageResource(R.drawable.photo_tools);
-        tuneItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(tuneItem, LayoutHelper.createLinear(56, 48));
-        tuneItem.setOnClickListener(new View.OnClickListener() {
+        cropItem = new ImageView(parentActivity);
+        cropItem.setScaleType(ImageView.ScaleType.CENTER);
+        cropItem.setImageResource(R.drawable.photo_crop);
+        cropItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        itemsLayout.addView(cropItem, LayoutHelper.createLinear(70, 48));
+        cropItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                switchToEditMode(2);
+                switchToEditMode(1);
             }
         });
-        
+
         paintItem = new ImageView(parentActivity);
         paintItem.setScaleType(ImageView.ScaleType.CENTER);
         paintItem.setImageResource(R.drawable.photo_paint);
         paintItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(paintItem, LayoutHelper.createLinear(56, 48));
+        itemsLayout.addView(paintItem, LayoutHelper.createLinear(70, 48));
         paintItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -1924,33 +2036,22 @@ public void onClick(View v) {
             }
         });
 
-        cropItem = new ImageView(parentActivity);
-        cropItem.setScaleType(ImageView.ScaleType.CENTER);
-        cropItem.setImageResource(R.drawable.photo_crop);
-        cropItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(cropItem, LayoutHelper.createLinear(56, 48));
-        cropItem.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                switchToEditMode(1);
-            }
-        });
-
-        captionItem = new ImageView(parentActivity);
-        captionItem.setScaleType(ImageView.ScaleType.CENTER);
-        captionItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(captionItem, LayoutHelper.createLinear(56, 48));
-        captionItem.setOnClickListener(new View.OnClickListener() {
+        tuneItem = new ImageView(parentActivity);
+        tuneItem.setScaleType(ImageView.ScaleType.CENTER);
+        tuneItem.setImageResource(R.drawable.photo_tools);
+        tuneItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        itemsLayout.addView(tuneItem, LayoutHelper.createLinear(70, 48));
+        tuneItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                openCaptionEnter();
+                switchToEditMode(2);
             }
         });
 
         compressItem = new ImageView(parentActivity);
         compressItem.setScaleType(ImageView.ScaleType.CENTER);
         compressItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(compressItem, LayoutHelper.createLinear(56, 48));
+        itemsLayout.addView(compressItem, LayoutHelper.createLinear(70, 48));
         compressItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -1962,7 +2063,7 @@ public void onClick(View v) {
         muteItem = new ImageView(parentActivity);
         muteItem.setScaleType(ImageView.ScaleType.CENTER);
         muteItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(muteItem, LayoutHelper.createLinear(56, 48));
+        itemsLayout.addView(muteItem, LayoutHelper.createLinear(70, 48));
         muteItem.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -1971,6 +2072,182 @@ public void onClick(View v) {
             }
         });
 
+        timeItem = new ImageView(parentActivity);
+        timeItem.setScaleType(ImageView.ScaleType.CENTER);
+        timeItem.setImageResource(R.drawable.photo_timer);
+        timeItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
+        itemsLayout.addView(timeItem, LayoutHelper.createLinear(70, 48));
+        timeItem.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (parentActivity == null) {
+                    return;
+                }
+                BottomSheet.Builder builder = new BottomSheet.Builder(parentActivity);
+                builder.setUseHardwareLayer(false);
+                LinearLayout linearLayout = new LinearLayout(parentActivity);
+                linearLayout.setOrientation(LinearLayout.VERTICAL);
+                builder.setCustomView(linearLayout);
+
+                TextView titleView = new TextView(parentActivity);
+                titleView.setLines(1);
+                titleView.setSingleLine(true);
+                titleView.setText(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
+                titleView.setTextColor(0xffffffff);
+                titleView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                titleView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
+                titleView.setPadding(AndroidUtilities.dp(21), AndroidUtilities.dp(8), AndroidUtilities.dp(21), AndroidUtilities.dp(4));
+                titleView.setGravity(Gravity.CENTER_VERTICAL);
+                linearLayout.addView(titleView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                titleView.setOnTouchListener(new View.OnTouchListener() {
+                    @Override
+                    public boolean onTouch(View v, MotionEvent event) {
+                        return true;
+                    }
+                });
+
+                titleView = new TextView(parentActivity);
+                titleView.setText(isCurrentVideo ? LocaleController.getString("MessageLifetimeVideo", R.string.MessageLifetimeVideo) : LocaleController.getString("MessageLifetimePhoto", R.string.MessageLifetimePhoto));
+                titleView.setTextColor(0xff808080);
+                titleView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+                titleView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
+                titleView.setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), AndroidUtilities.dp(8));
+                titleView.setGravity(Gravity.CENTER_VERTICAL);
+                linearLayout.addView(titleView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                titleView.setOnTouchListener(new View.OnTouchListener() {
+                    @Override
+                    public boolean onTouch(View v, MotionEvent event) {
+                        return true;
+                    }
+                });
+
+
+                final BottomSheet bottomSheet = builder.create();
+                final NumberPicker numberPicker = new NumberPicker(parentActivity);
+                numberPicker.setMinValue(0);
+                numberPicker.setMaxValue(28);
+                Object object = imagesArrLocals.get(currentIndex);
+                int currentTTL;
+                if (object instanceof MediaController.PhotoEntry) {
+                    currentTTL = ((MediaController.PhotoEntry) object).ttl;
+                } else if (object instanceof MediaController.SearchImage) {
+                    currentTTL = ((MediaController.SearchImage) object).ttl;
+                } else {
+                    currentTTL = 0;
+                }
+                if (currentTTL == 0) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    numberPicker.setValue(preferences.getInt("self_destruct", 7));
+                } else {
+                    if (currentTTL >= 0 && currentTTL < 21) {
+                        numberPicker.setValue(currentTTL);
+                    } else {
+                        numberPicker.setValue(21 + currentTTL / 5 - 5);
+                    }
+                }
+                numberPicker.setTextColor(0xffffffff);
+                numberPicker.setSelectorColor(0xff4d4d4d);
+                numberPicker.setFormatter(new NumberPicker.Formatter() {
+                    @Override
+                    public String format(int value) {
+                        if (value == 0) {
+                            return LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
+                        } else if (value >= 1 && value < 21) {
+                            return LocaleController.formatTTLString(value);
+                        } else {
+                            return LocaleController.formatTTLString((value - 16) * 5);
+                        }
+                    }
+                });
+                linearLayout.addView(numberPicker, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+                FrameLayout buttonsLayout = new FrameLayout(parentActivity) {
+                    @Override
+                    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                        int count = getChildCount();
+                        View positiveButton = null;
+                        int width = right - left;
+                        for (int a = 0; a < count; a++) {
+                            View child = getChildAt(a);
+                            if ((Integer) child.getTag() == Dialog.BUTTON_POSITIVE) {
+                                positiveButton = child;
+                                child.layout(width - getPaddingRight() - child.getMeasuredWidth(), getPaddingTop(), width - getPaddingRight() + child.getMeasuredWidth(), getPaddingTop() + child.getMeasuredHeight());
+                            } else if ((Integer) child.getTag() == Dialog.BUTTON_NEGATIVE) {
+                                int x = width - getPaddingRight() - child.getMeasuredWidth();
+                                if (positiveButton != null) {
+                                    x -= positiveButton.getMeasuredWidth() + AndroidUtilities.dp(8);
+                                }
+                                child.layout(x, getPaddingTop(), x + child.getMeasuredWidth(), getPaddingTop() + child.getMeasuredHeight());
+                            } else {
+                                child.layout(getPaddingLeft(), getPaddingTop(), getPaddingLeft() + child.getMeasuredWidth(), getPaddingTop() + child.getMeasuredHeight());
+                            }
+                        }
+                    }
+                };
+                buttonsLayout.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8));
+                linearLayout.addView(buttonsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 52));
+
+                TextView textView = new TextView(parentActivity);
+                textView.setMinWidth(AndroidUtilities.dp(64));
+                textView.setTag(Dialog.BUTTON_POSITIVE);
+                textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+                textView.setTextColor(0xff49bcf2);
+                textView.setGravity(Gravity.CENTER);
+                textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+                textView.setBackgroundDrawable(Theme.getRoundRectSelectorDrawable());
+                textView.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
+                buttonsLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 36, Gravity.TOP | Gravity.RIGHT));
+                textView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        int value = numberPicker.getValue();
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putInt("self_destruct", value);
+                        editor.commit();
+                        bottomSheet.dismiss();
+                        int seconds;
+                        if (value >= 0 && value < 21) {
+                            seconds = value;
+                        } else {
+                            seconds = (value - 16) * 5;
+                        }
+                        Object object = imagesArrLocals.get(currentIndex);
+                        if (object instanceof MediaController.PhotoEntry) {
+                            ((MediaController.PhotoEntry) object).ttl = seconds;
+                        } else if (object instanceof MediaController.SearchImage) {
+                            ((MediaController.SearchImage) object).ttl = seconds;
+                        }
+                        timeItem.setColorFilter(seconds != 0 ? new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY) : null);
+                        if (!checkImageView.isChecked()) {
+                            checkImageView.callOnClick();
+                        }
+                    }
+                });
+
+                textView = new TextView(parentActivity);
+                textView.setMinWidth(AndroidUtilities.dp(64));
+                textView.setTag(Dialog.BUTTON_NEGATIVE);
+                textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+                textView.setTextColor(0xff49bcf2);
+                textView.setGravity(Gravity.CENTER);
+                textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                textView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+                textView.setBackgroundDrawable(Theme.getRoundRectSelectorDrawable());
+                textView.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
+                buttonsLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 36, Gravity.TOP | Gravity.RIGHT));
+                textView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        bottomSheet.dismiss();
+                    }
+                });
+                bottomSheet.show();
+                bottomSheet.setBackgroundColor(0xff000000);
+            }
+        });
+
         editorDoneLayout = new PickerBottomLayoutViewer(actvityContext);
         editorDoneLayout.setBackgroundColor(0x7f000000);
         editorDoneLayout.updateSelectedCount(0, false);
@@ -2058,11 +2335,12 @@ public boolean onTouchEvent(MotionEvent event) {
             }
         };
         checkImageView.setDrawBackground(true);
-        checkImageView.setSize(45);
+        checkImageView.setHasBorder(true);
+        checkImageView.setSize(40);
         checkImageView.setCheckOffset(AndroidUtilities.dp(1));
-        checkImageView.setColor(0xff3ccaef, 0xffffffff);
+        checkImageView.setColor(0xff6cabeb, 0xffffffff);
         checkImageView.setVisibility(View.GONE);
-        containerView.addView(checkImageView, LayoutHelper.createFrame(45, 45, Gravity.RIGHT | Gravity.TOP, 0, rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68, 10, 0));
+        containerView.addView(checkImageView, LayoutHelper.createFrame(40, 40, Gravity.RIGHT | Gravity.TOP, 0, rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68, 10, 0));
         if (Build.VERSION.SDK_INT >= 21) {
             ((FrameLayout.LayoutParams) checkImageView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
         }
@@ -2077,6 +2355,18 @@ public void onClick(View v) {
             }
         });
 
+        photosCounterView = new CounterView(parentActivity);
+        containerView.addView(photosCounterView, LayoutHelper.createFrame(40, 40, Gravity.RIGHT | Gravity.TOP, 0, rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68, 66, 0));
+        if (Build.VERSION.SDK_INT >= 21) {
+            ((FrameLayout.LayoutParams) photosCounterView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
+        }
+        photosCounterView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+
         captionEditText = new PhotoViewerCaptionEnterView(actvityContext, containerView, windowView) {
             @Override
             public boolean dispatchTouchEvent(MotionEvent ev) {
@@ -2296,7 +2586,7 @@ private void openCaptionEnter() {
         captionEditText.setTag(1);
         captionEditText.openKeyboard();
         lastTitle = actionBar.getTitle();
-        if (captionItem.getVisibility() == View.VISIBLE) {
+        if (isCurrentVideo) {
             actionBar.setTitle(muteVideo ? LocaleController.getString("GifCaption", R.string.GifCaption) : LocaleController.getString("VideoCaption", R.string.VideoCaption));
             actionBar.setSubtitle(null);
         } else {
@@ -2305,7 +2595,7 @@ private void openCaptionEnter() {
     }
 
     private VideoEditedInfo getCurrentVideoEditedInfo() {
-        if (captionItem == null || captionItem.getVisibility() != View.VISIBLE || Build.VERSION.SDK_INT < 16 || currentPlayingVideoFile == null) {
+        if (!isCurrentVideo || currentPlayingVideoFile == null) {
             return null;
         }
         VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
@@ -2360,12 +2650,8 @@ private void closeCaptionEnter(boolean apply) {
             actionBar.setTitle(lastTitle);
             lastTitle = null;
         }
-        if (captionItem.getVisibility() == View.VISIBLE) {
-            if (fromCamera) {
-                actionBar.setTitle(muteVideo ? LocaleController.getString("AttachGif", R.string.AttachGif) : LocaleController.getString("AttachVideo", R.string.AttachVideo));
-            }
+        if (isCurrentVideo) {
             actionBar.setSubtitle(muteVideo ? null : currentSubtitle);
-            captionItem.setImageResource(captionEditText.getFieldCharSequence().length() == 0 ? R.drawable.photo_text : R.drawable.photo_text2);
         }
 
         updateCaptionTextForCurrentPhoto(object);
@@ -2384,7 +2670,7 @@ private void updateVideoPlayerTime() {
             long current = videoPlayer.getCurrentPosition();
             long total = videoPlayer.getDuration();
             if (total != C.TIME_UNSET && current != C.TIME_UNSET) {
-                if (!inPreview && videoTimelineViewContainer != null && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
+                if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
                     total *= (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
                     current -= videoTimelineView.getLeftProgress() * total;
                     if (current > total) {
@@ -2403,12 +2689,11 @@ private void updateVideoPlayerTime() {
         }
     }
 
-    @SuppressLint("NewApi")
     private void preparePlayer(File file, boolean playWhenReady, boolean preview) {
         if (!preview) {
             currentPlayingVideoFile = file;
         }
-        if (parentActivity == null || Build.VERSION.SDK_INT < 16) {
+        if (parentActivity == null) {
             return;
         }
         inPreview = preview;
@@ -2462,15 +2747,28 @@ public void onStateChanged(boolean playWhenReady, int playbackState) {
                         videoPlayButton.setImageResource(R.drawable.inline_video_play);
                         AndroidUtilities.cancelRunOnUIThread(updateProgressRunnable);
                         if (playbackState == ExoPlayer.STATE_ENDED) {
-                            if (!videoPlayerSeekbar.isDragging()) {
-                                videoPlayerSeekbar.setProgress(0.0f);
-                                videoPlayerControlFrameLayout.invalidate();
-                                if (!inPreview && videoTimelineViewContainer != null && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
-                                    videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
-                                } else {
-                                    videoPlayer.seekTo(0);
+                            if (isCurrentVideo) {
+                                if (!videoTimelineView.isDragging()) {
+                                    videoTimelineView.setProgress(0.0f);
+                                    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                                        videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
+                                    } else {
+                                        videoPlayer.seekTo(0);
+                                    }
+                                    videoPlayer.pause();
+                                    containerView.invalidate();
+                                }
+                            } else {
+                                if (!videoPlayerSeekbar.isDragging()) {
+                                    videoPlayerSeekbar.setProgress(0.0f);
+                                    videoPlayerControlFrameLayout.invalidate();
+                                    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
+                                        videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
+                                    } else {
+                                        videoPlayer.seekTo(0);
+                                    }
+                                    videoPlayer.pause();
                                 }
-                                videoPlayer.pause();
                             }
                         }
                     }
@@ -2525,18 +2823,18 @@ public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
             int size = (int) Math.ceil(videoPlayerTime.getPaint().measureText(String.format("%02d:%02d / %02d:%02d", duration / 60, duration % 60, duration / 60, duration % 60)));
         }
         videoPlayer.preparePlayer(Uri.fromFile(file), "other");
-        if (videoPlayerControlFrameLayout != null) {
-            if (currentBotInlineResult != null && (currentBotInlineResult.type.equals("video") || MessageObject.isVideoDocument(currentBotInlineResult.document))) {
-                bottomLayout.setVisibility(View.VISIBLE);
-                bottomLayout.setTranslationY(-AndroidUtilities.dp(48));
-            }
-            videoPlayerControlFrameLayout.setVisibility(View.VISIBLE);
-            dateTextView.setVisibility(View.GONE);
-            nameTextView.setVisibility(View.GONE);
-            if (allowShare) {
-                shareButton.setVisibility(View.GONE);
-                menuItem.showSubItem(gallery_menu_share);
-            }
+        videoPlayerSeekbar.setProgress(0);
+        videoTimelineView.setProgress(0);
+        if (currentBotInlineResult != null && (currentBotInlineResult.type.equals("video") || MessageObject.isVideoDocument(currentBotInlineResult.document))) {
+            bottomLayout.setVisibility(View.VISIBLE);
+            bottomLayout.setTranslationY(-AndroidUtilities.dp(48));
+        }
+        videoPlayerControlFrameLayout.setVisibility(isCurrentVideo ? View.GONE : View.VISIBLE);
+        dateTextView.setVisibility(View.GONE);
+        nameTextView.setVisibility(View.GONE);
+        if (allowShare) {
+            shareButton.setVisibility(View.GONE);
+            menuItem.showSubItem(gallery_menu_share);
         }
         videoPlayer.setPlayWhenReady(playWhenReady);
         inPreview = preview;
@@ -2564,7 +2862,7 @@ private void releasePlayer() {
             videoPlayButton.setImageResource(R.drawable.inline_video_play);
             AndroidUtilities.cancelRunOnUIThread(updateProgressRunnable);
         }
-        if (!inPreview && !requestingPreview && videoPlayerControlFrameLayout != null) {
+        if (!inPreview && !requestingPreview) {
             videoPlayerControlFrameLayout.setVisibility(View.GONE);
             dateTextView.setVisibility(View.VISIBLE);
             nameTextView.setVisibility(View.VISIBLE);
@@ -2642,6 +2940,16 @@ private void applyCurrentEditMode() {
                     if (stickers != null) {
                         entry.stickers.addAll(stickers);
                     }
+                    if (currentEditMode == 1) {
+                        cropItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isCropped = true;
+                    } else if (currentEditMode == 2) {
+                        tuneItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isFiltered = true;
+                    } else if (currentEditMode == 3) {
+                        paintItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isPainted = true;
+                    }
                 } else if (object instanceof MediaController.SearchImage) {
                     MediaController.SearchImage entry = (MediaController.SearchImage) object;
                     entry.imagePath = FileLoader.getPathToAttach(size, true).toString();
@@ -2652,6 +2960,16 @@ private void applyCurrentEditMode() {
                     if (stickers != null) {
                         entry.stickers.addAll(stickers);
                     }
+                    if (currentEditMode == 1) {
+                        cropItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isCropped = true;
+                    } else if (currentEditMode == 2) {
+                        tuneItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isFiltered = true;
+                    } else if (currentEditMode == 3) {
+                        paintItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
+                        entry.isPainted = true;
+                    }
                 }
                 if (sendPhotoType == 0 && placeProvider != null) {
                     placeProvider.updatePhotoAtIndex(currentIndex);
@@ -2687,12 +3005,6 @@ private void switchToEditMode(final int mode) {
             return;
         }
         if (mode == 0) {
-            if (currentEditMode == 2) {
-                if (photoFilterView.getToolsView().getVisibility() != View.VISIBLE) {
-                    photoFilterView.switchToOrFromEditMode();
-                    return;
-                }
-            }
             Bitmap bitmap = centerImage.getBitmap();
             if (bitmap != null) {
                 int bitmapWidth = centerImage.getBitmapWidth();
@@ -2721,9 +3033,9 @@ private void switchToEditMode(final int mode) {
                 if (currentEditMode == 1) {
                     animateToY = AndroidUtilities.dp(24 + 34);
                 } else if (currentEditMode == 2) {
-                    animateToY = AndroidUtilities.dp(62);
+                    animateToY = AndroidUtilities.dp(92);
                 } else if (currentEditMode == 3) {
-                    animateToY = (AndroidUtilities.dp(48) - ActionBar.getCurrentActionBarHeight()) / 2;
+                    animateToY = AndroidUtilities.dp(44);
                 }
                 if (Build.VERSION.SDK_INT >= 21) {
                     animateToY -= AndroidUtilities.statusBarHeight / 2;
@@ -2742,15 +3054,14 @@ private void switchToEditMode(final int mode) {
             } else if (currentEditMode == 2) {
                 photoFilterView.shutdown();
                 imageMoveAnimation.playTogether(
-                        ObjectAnimator.ofFloat(photoFilterView.getToolsView(), "translationY", AndroidUtilities.dp(126)),
+                        ObjectAnimator.ofFloat(photoFilterView.getToolsView(), "translationY", AndroidUtilities.dp(186)),
                         ObjectAnimator.ofFloat(PhotoViewer.this, "animationValue", 0, 1)
                 );
             } else if (currentEditMode == 3) {
                 photoPaintView.shutdown();
                 imageMoveAnimation.playTogether(
                         ObjectAnimator.ofFloat(photoPaintView.getToolsView(), "translationY", AndroidUtilities.dp(126)),
-                        ObjectAnimator.ofFloat(photoPaintView.getColorPicker(), "translationX", AndroidUtilities.dp(60)),
-                        ObjectAnimator.ofFloat(photoPaintView.getActionBar(), "translationY", -ActionBar.getCurrentActionBarHeight() - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0)),
+                        ObjectAnimator.ofFloat(photoPaintView.getColorPicker(), "translationY", AndroidUtilities.dp(126)),
                         ObjectAnimator.ofFloat(PhotoViewer.this, "animationValue", 0, 1)
                 );
             }
@@ -2787,6 +3098,7 @@ public void onAnimationEnd(Animator animation) {
                     }
                     if (sendPhotoType == 0) {
                         arrayList.add(ObjectAnimator.ofFloat(checkImageView, "alpha", 1));
+                        arrayList.add(ObjectAnimator.ofFloat(photosCounterView, "alpha", 1));
                     }
                     animatorSet.playTogether(arrayList);
                     animatorSet.setDuration(200);
@@ -2800,6 +3112,7 @@ public void onAnimationStart(Animator animation) {
                             }
                             if (sendPhotoType == 0) {
                                 checkImageView.setVisibility(View.VISIBLE);
+                                photosCounterView.setVisibility(View.VISIBLE);
                             }
                         }
                     });
@@ -2850,6 +3163,7 @@ public void onChange(boolean reset) {
             }
             if (sendPhotoType == 0) {
                 arrayList.add(ObjectAnimator.ofFloat(checkImageView, "alpha", 1, 0));
+                arrayList.add(ObjectAnimator.ofFloat(photosCounterView, "alpha", 1, 0));
             }
             changeModeAnimation.playTogether(arrayList);
             changeModeAnimation.setDuration(200);
@@ -2863,6 +3177,7 @@ public void onAnimationEnd(Animator animation) {
                     }
                     if (sendPhotoType == 0) {
                         checkImageView.setVisibility(View.GONE);
+                        photosCounterView.setVisibility(View.GONE);
                     }
 
                     final Bitmap bitmap = centerImage.getBitmap();
@@ -2957,18 +3272,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         }
                     }
                 });
-                photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(126));
+                photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(186));
             }
 
             changeModeAnimation = new AnimatorSet();
             ArrayList<Animator> arrayList = new ArrayList<>();
             arrayList.add(ObjectAnimator.ofFloat(pickerView, "translationY", 0, AndroidUtilities.dp(96)));
             arrayList.add(ObjectAnimator.ofFloat(actionBar, "translationY", 0, -actionBar.getHeight()));
-            if (needCaptionLayout) {
-                arrayList.add(ObjectAnimator.ofFloat(captionTextView, "translationY", 0, AndroidUtilities.dp(96)));
-            }
             if (sendPhotoType == 0) {
                 arrayList.add(ObjectAnimator.ofFloat(checkImageView, "alpha", 1, 0));
+                arrayList.add(ObjectAnimator.ofFloat(photosCounterView, "alpha", 1, 0));
             }
             changeModeAnimation.playTogether(arrayList);
             changeModeAnimation.setDuration(200);
@@ -2983,6 +3296,7 @@ public void onAnimationEnd(Animator animation) {
                     }
                     if (sendPhotoType == 0) {
                         checkImageView.setVisibility(View.GONE);
+                        photosCounterView.setVisibility(View.GONE);
                     }
 
                     Bitmap bitmap = centerImage.getBitmap();
@@ -2999,7 +3313,7 @@ public void onAnimationEnd(Animator animation) {
 
                         animateToScale = newScale / scale;
                         animateToX = 0;
-                        animateToY = -AndroidUtilities.dp(62) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight / 2 : 0);
+                        animateToY = -AndroidUtilities.dp(92) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight / 2 : 0);
                         animationStartTime = System.currentTimeMillis();
                         zoomAnimation = true;
                     }
@@ -3007,7 +3321,7 @@ public void onAnimationEnd(Animator animation) {
                     imageMoveAnimation = new AnimatorSet();
                     imageMoveAnimation.playTogether(
                             ObjectAnimator.ofFloat(PhotoViewer.this, "animationValue", 0, 1),
-                            ObjectAnimator.ofFloat(photoFilterView.getToolsView(), "translationY", AndroidUtilities.dp(126), 0)
+                            ObjectAnimator.ofFloat(photoFilterView.getToolsView(), "translationY", AndroidUtilities.dp(186), 0)
                     );
                     imageMoveAnimation.setDuration(200);
                     imageMoveAnimation.addListener(new AnimatorListenerAdapter() {
@@ -3055,9 +3369,8 @@ public void run() {
                         });
                     }
                 });
-                photoPaintView.getColorPicker().setTranslationX(AndroidUtilities.dp(60));
+                photoPaintView.getColorPicker().setTranslationY(AndroidUtilities.dp(126));
                 photoPaintView.getToolsView().setTranslationY(AndroidUtilities.dp(126));
-                photoPaintView.getActionBar().setTranslationY(-ActionBar.getCurrentActionBarHeight() - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0));
             }
 
             changeModeAnimation = new AnimatorSet();
@@ -3070,6 +3383,7 @@ public void run() {
             }
             if (sendPhotoType == 0) {
                 arrayList.add(ObjectAnimator.ofFloat(checkImageView, "alpha", 1, 0));
+                arrayList.add(ObjectAnimator.ofFloat(photosCounterView, "alpha", 1, 0));
             }
             changeModeAnimation.playTogether(arrayList);
             changeModeAnimation.setDuration(200);
@@ -3083,6 +3397,7 @@ public void onAnimationEnd(Animator animation) {
                     }
                     if (sendPhotoType == 0) {
                         checkImageView.setVisibility(View.GONE);
+                        photosCounterView.setVisibility(View.GONE);
                     }
 
                     Bitmap bitmap = centerImage.getBitmap();
@@ -3099,7 +3414,7 @@ public void onAnimationEnd(Animator animation) {
 
                         animateToScale = newScale / scale;
                         animateToX = 0;
-                        animateToY = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(48) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0)) / 2;
+                        animateToY = -AndroidUtilities.dp(44) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight / 2 : 0);
                         animationStartTime = System.currentTimeMillis();
                         zoomAnimation = true;
                     }
@@ -3107,9 +3422,8 @@ public void onAnimationEnd(Animator animation) {
                     imageMoveAnimation = new AnimatorSet();
                     imageMoveAnimation.playTogether(
                             ObjectAnimator.ofFloat(PhotoViewer.this, "animationValue", 0, 1),
-                            ObjectAnimator.ofFloat(photoPaintView.getColorPicker(), "translationX", AndroidUtilities.dp(60), 0),
-                            ObjectAnimator.ofFloat(photoPaintView.getToolsView(), "translationY", AndroidUtilities.dp(126), 0),
-                            ObjectAnimator.ofFloat(photoPaintView.getActionBar(), "translationY", -ActionBar.getCurrentActionBarHeight() - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0), 0)
+                            ObjectAnimator.ofFloat(photoPaintView.getColorPicker(), "translationY", AndroidUtilities.dp(126), 0),
+                            ObjectAnimator.ofFloat(photoPaintView.getToolsView(), "translationY", AndroidUtilities.dp(126), 0)
                     );
                     imageMoveAnimation.setDuration(200);
                     imageMoveAnimation.addListener(new AnimatorListenerAdapter() {
@@ -3147,6 +3461,7 @@ private void toggleCheckImageView(boolean show) {
         }
         if (sendPhotoType == 0) {
             arrayList.add(ObjectAnimator.ofFloat(checkImageView, "alpha", show ? 1.0f : 0.0f));
+            arrayList.add(ObjectAnimator.ofFloat(photosCounterView, "alpha", show ? 1.0f : 0.0f));
         }
         animatorSet.playTogether(arrayList);
         animatorSet.setDuration(200);
@@ -3174,9 +3489,6 @@ private void toggleActionBar(boolean show, final boolean animated) {
             if (captionTextView.getTag() != null) {
                 arrayList.add(ObjectAnimator.ofFloat(captionTextView, "alpha", show ? 1.0f : 0.0f));
             }
-            if (videoTimelineViewContainer != null) {
-                arrayList.add(ObjectAnimator.ofFloat(videoTimelineViewContainer, "alpha", show ? 1.0f : 0.0f));
-            }
             currentActionBarAnimation = new AnimatorSet();
             currentActionBarAnimation.playTogether(arrayList);
             if (!show) {
@@ -3205,9 +3517,6 @@ public void onAnimationEnd(Animator animation) {
             if (captionTextView.getTag() != null) {
                 captionTextView.setAlpha(show ? 1.0f : 0.0f);
             }
-            if (videoTimelineViewContainer != null) {
-                videoTimelineViewContainer.setAlpha(show ? 1.0f : 0.0f);
-            }
             if (!show) {
                 actionBar.setVisibility(View.GONE);
                 if (canShowBottom) {
@@ -3328,7 +3637,7 @@ private void updateSelectedCount() {
         if (placeProvider == null) {
             return;
         }
-        pickerView.updateSelectedCount(placeProvider.getSelectedCount(), false);
+        photosCounterView.setCount(placeProvider.getSelectedCount());
     }
 
     private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
@@ -3354,6 +3663,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         opennedFromMedia = false;
         needCaptionLayout = false;
         canShowBottom = true;
+        isCurrentVideo = false;
         imagesArr.clear();
         imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
@@ -3371,9 +3681,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         menuItem.setVisibility(View.VISIBLE);
         bottomLayout.setVisibility(View.VISIBLE);
         bottomLayout.setTranslationY(0);
-        captionTextViewOld.setTranslationY(0);
-        captionTextViewNew.setTranslationY(0);
-        bottomLayout.setTranslationY(0);
+        captionTextView.setTranslationY(0);
         shareButton.setVisibility(View.GONE);
         if (qualityChooseView != null) {
             qualityChooseView.setVisibility(View.INVISIBLE);
@@ -3389,19 +3697,23 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         menuItem.hideSubItem(gallery_menu_share);
         menuItem.hideSubItem(gallery_menu_openin);
         actionBar.setTranslationY(0);
-        pickerView.setTranslationY(0);
+
         checkImageView.setAlpha(1.0f);
-        pickerView.setAlpha(1.0f);
         checkImageView.setVisibility(View.GONE);
+        actionBar.setTitleRightMargin(0);
+        photosCounterView.setAlpha(1.0f);
+        photosCounterView.setVisibility(View.GONE);
+
         pickerView.setVisibility(View.GONE);
+        pickerView.setAlpha(1.0f);
+        pickerView.setTranslationY(0);
+
         paintItem.setVisibility(View.GONE);
         cropItem.setVisibility(View.GONE);
         tuneItem.setVisibility(View.GONE);
-        if (videoTimelineViewContainer != null) {
-            videoTimelineViewContainer.setVisibility(View.GONE);
-        }
-        captionItem.setVisibility(View.GONE);
-        captionItem.setImageResource(R.drawable.photo_text);
+        timeItem.setVisibility(View.GONE);
+
+        videoTimelineView.setVisibility(View.GONE);
         compressItem.setVisibility(View.GONE);
         captionEditText.setVisibility(View.GONE);
         mentionListView.setVisibility(View.GONE);
@@ -3441,7 +3753,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             imagesArrLocations.add(fileLocation);
             imagesArrLocationsSizes.add(object.size);
             avatarsArr.add(new TLRPC.TL_photoEmpty());
-            shareButton.setVisibility(videoPlayerControlFrameLayout == null || videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
+            shareButton.setVisibility(videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
             allowShare = true;
             menuItem.hideSubItem(gallery_menu_showall);
             if (shareButton.getVisibility() == View.VISIBLE) {
@@ -3467,22 +3779,18 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         } else if (photos != null) {
             if (sendPhotoType == 0) {
                 checkImageView.setVisibility(View.VISIBLE);
+                photosCounterView.setVisibility(View.VISIBLE);
+                actionBar.setTitleRightMargin(AndroidUtilities.dp(100));
             }
             menuItem.setVisibility(View.GONE);
             imagesArrLocals.addAll(photos);
-            setImageIndex(index, true);
-            pickerView.setVisibility(View.VISIBLE);
-            bottomLayout.setVisibility(View.GONE);
-            canShowBottom = false;
             Object obj = imagesArrLocals.get(index);
             boolean allowCaption;
             if (obj instanceof MediaController.PhotoEntry) {
                 if (((MediaController.PhotoEntry) obj).isVideo) {
                     cropItem.setVisibility(View.GONE);
-                    if (Build.VERSION.SDK_INT >= 16) {
-                        bottomLayout.setVisibility(View.VISIBLE);
-                        bottomLayout.setTranslationY(-AndroidUtilities.dp(48));
-                    }
+                    bottomLayout.setVisibility(View.VISIBLE);
+                    bottomLayout.setTranslationY(-AndroidUtilities.dp(48));
                 } else {
                     cropItem.setVisibility(View.VISIBLE);
                 }
@@ -3500,22 +3808,16 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                 mentionsAdapter.setNeedBotContext(false);
                 needCaptionLayout = allowCaption && (placeProvider == null || placeProvider != null && placeProvider.allowCaption());
                 captionEditText.setVisibility(needCaptionLayout ? View.VISIBLE : View.GONE);
-                if (captionTextView.getTag() == null && needCaptionLayout) {
-                    captionTextView.setText(LocaleController.getString("AddCaption", R.string.AddCaption));
-                    captionTextView.setTag("empty");
-                    captionTextView.setTextColor(0xb2ffffff);
-                    captionTextView.setVisibility(View.VISIBLE);
-                } else {
-                    captionTextView.setTextColor(0xffffffff);
-                }
                 if (needCaptionLayout) {
                     captionEditText.onCreate();
                 }
             }
-            if (Build.VERSION.SDK_INT >= 16) {
-                paintItem.setVisibility(cropItem.getVisibility());
-                tuneItem.setVisibility(cropItem.getVisibility());
-            }
+            pickerView.setVisibility(View.VISIBLE);
+            bottomLayout.setVisibility(View.GONE);
+            canShowBottom = false;
+            setImageIndex(index, true);
+            paintItem.setVisibility(cropItem.getVisibility());
+            tuneItem.setVisibility(cropItem.getVisibility());
             updateSelectedCount();
         }
 
@@ -3534,11 +3836,17 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         } else if (!imagesArrLocals.isEmpty()) {
             Object entry = imagesArrLocals.get(index);
             CharSequence caption = null;
+            boolean allowTimeItem = parentChatActivity != null && !parentChatActivity.isSecretChat() && parentChatActivity.getCurrentUser() != null;
             if (entry instanceof MediaController.PhotoEntry) {
                 MediaController.PhotoEntry photoEntry = ((MediaController.PhotoEntry) entry);
                 if (photoEntry.isVideo) {
                     preparePlayer(new File(photoEntry.path), false, false);
                 }
+            } else if (allowTimeItem && entry instanceof MediaController.SearchImage) {
+                allowTimeItem = ((MediaController.SearchImage) entry).type == 0;
+            }
+            if (allowTimeItem) {
+                timeItem.setVisibility(View.VISIBLE);
             }
         }
     }
@@ -3590,8 +3898,7 @@ private void setImageIndex(int index, boolean init) {
                 setCurrentCaption(currentMessageObject.messageOwner.media.description);
                 allowShare = false;
                 bottomLayout.setTranslationY(AndroidUtilities.dp(48));
-                captionTextViewOld.setTranslationY(AndroidUtilities.dp(48));
-                captionTextViewNew.setTranslationY(AndroidUtilities.dp(48));
+                captionTextView.setTranslationY(AndroidUtilities.dp(48));
             } else {
                 masksItem.setVisibility(currentMessageObject.hasPhotoStickers() && (int) currentMessageObject.getDialogId() != 0 ? View.VISIBLE : View.INVISIBLE);
                 if (currentMessageObject.canDeleteMessage(null)) {
@@ -3599,7 +3906,7 @@ private void setImageIndex(int index, boolean init) {
                 } else {
                     menuItem.hideSubItem(gallery_menu_delete);
                 }
-                if (isVideo && Build.VERSION.SDK_INT >= 16) {
+                if (isVideo) {
                     menuItem.showSubItem(gallery_menu_openin);
                 } else {
                     menuItem.hideSubItem(gallery_menu_openin);
@@ -3689,7 +3996,7 @@ private void setImageIndex(int index, boolean init) {
                 } else {
                     allowShare = true;
                     menuItem.showSubItem(gallery_menu_save);
-                    shareButton.setVisibility(videoPlayerControlFrameLayout == null || videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
+                    shareButton.setVisibility(videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
                     if (shareButton.getVisibility() == View.VISIBLE) {
                         menuItem.hideSubItem(gallery_menu_share);
                     } else {
@@ -3721,7 +4028,7 @@ private void setImageIndex(int index, boolean init) {
             }
             menuItem.showSubItem(gallery_menu_save);
             allowShare = true;
-            shareButton.setVisibility(videoPlayerControlFrameLayout == null || videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
+            shareButton.setVisibility(videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE ? View.VISIBLE : View.GONE);
             if (shareButton.getVisibility() == View.VISIBLE) {
                 menuItem.hideSubItem(gallery_menu_share);
             } else {
@@ -3734,6 +4041,10 @@ private void setImageIndex(int index, boolean init) {
             }
             Object object = imagesArrLocals.get(index);
             CharSequence caption = null;
+            int ttl = 0;
+            boolean isFiltered = false;
+            boolean isPainted = false;
+            boolean isCropped = false;
             if (object instanceof MediaController.PhotoEntry) {
                 MediaController.PhotoEntry photoEntry = ((MediaController.PhotoEntry) object);
                 currentPathObject = photoEntry.path;
@@ -3741,6 +4052,10 @@ private void setImageIndex(int index, boolean init) {
                 caption = photoEntry.caption;
                 isVideo = photoEntry.isVideo;
                 videoPath = photoEntry.path;
+                ttl = photoEntry.ttl;
+                isFiltered = photoEntry.isFiltered;
+                isPainted = photoEntry.isPainted;
+                isCropped = photoEntry.isCropped;
             } else if (object instanceof TLRPC.BotInlineResult) {
                 TLRPC.BotInlineResult botInlineResult = currentBotInlineResult = ((TLRPC.BotInlineResult) object);
                 if (botInlineResult.document != null) {
@@ -3762,54 +4077,50 @@ private void setImageIndex(int index, boolean init) {
                     currentPathObject = searchImage.imageUrl;
                 }
                 caption = searchImage.caption;
+                ttl = searchImage.ttl;
+                isFiltered = searchImage.isFiltered;
+                isPainted = searchImage.isPainted;
+                isCropped = searchImage.isCropped;
+            }
+            bottomLayout.setVisibility(View.GONE);
+            if (isVideo) {
+                muteItem.setVisibility(View.VISIBLE);
+                compressItem.setVisibility(View.VISIBLE);
+                isCurrentVideo = true;
+                processOpenVideo(currentPathObject);
+                videoTimelineView.setVisibility(View.VISIBLE);
+                paintItem.setVisibility(View.GONE);
+                cropItem.setVisibility(View.GONE);
+                tuneItem.setVisibility(View.GONE);
+            } else {
+                videoTimelineView.setVisibility(View.GONE);
+                muteItem.setVisibility(View.GONE);
+                isCurrentVideo = false;
+                compressItem.setVisibility(View.GONE);
+                paintItem.setVisibility(View.VISIBLE);
+                cropItem.setVisibility(View.VISIBLE);
+                tuneItem.setVisibility(View.VISIBLE);
+                actionBar.setSubtitle(null);
             }
             if (fromCamera) {
                 if (isVideo) {
-                    muteItem.setVisibility(View.VISIBLE);
-                    captionItem.setVisibility(View.VISIBLE);
-                    captionTextViewNew.setTranslationY(AndroidUtilities.dp(96));
-                    captionTextViewOld.setTranslationY(AndroidUtilities.dp(96));
-                    videoTimelineViewContainer.setVisibility(View.VISIBLE);
-                    processOpenVideo(currentPathObject);
                     actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
                 } else {
                     actionBar.setTitle(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
                 }
             } else {
-                if (isVideo) {
-                    if (Build.VERSION.SDK_INT >= 16) {
-                        muteItem.setVisibility(View.VISIBLE);
-                        compressItem.setVisibility(View.VISIBLE);
-                        bottomLayout.setTranslationY(-AndroidUtilities.dp(48));
-                        bottomLayout.setVisibility(View.VISIBLE);
-                        processOpenVideo(currentPathObject);
-                        videoTimelineViewContainer.setVisibility(View.VISIBLE);
-                    } else {
-                        bottomLayout.setVisibility(View.GONE);
-                    }
-                    captionItem.setVisibility(View.VISIBLE);
-                    paintItem.setVisibility(View.GONE);
-                    cropItem.setVisibility(View.GONE);
-                    tuneItem.setVisibility(View.GONE);
-                    captionTextViewNew.setTranslationY(AndroidUtilities.dp(96));
-                    captionTextViewOld.setTranslationY(AndroidUtilities.dp(96));
+                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
+            }
+            if (parentChatActivity != null) {
+                TLRPC.Chat chat = parentChatActivity.getCurrentChat();
+                if (chat != null) {
+                    actionBar.setTitle(chat.title);
                 } else {
-                    muteItem.setVisibility(View.GONE);
-                    captionItem.setVisibility(View.GONE);
-                    compressItem.setVisibility(View.GONE);
-                    paintItem.setVisibility(View.VISIBLE);
-                    cropItem.setVisibility(View.VISIBLE);
-                    tuneItem.setVisibility(View.VISIBLE);
-                    bottomLayout.setVisibility(View.GONE);
-                    bottomLayout.setTranslationY(0);
-                    if (videoTimelineViewContainer != null) {
-                        videoTimelineViewContainer.setVisibility(View.GONE);
+                    TLRPC.User user = parentChatActivity.getCurrentUser();
+                    if (user != null) {
+                        actionBar.setTitle(ContactsController.formatName(user.first_name, user.last_name));
                     }
-                    captionTextViewNew.setTranslationY(0);
-                    captionTextViewOld.setTranslationY(0);
-                    actionBar.setSubtitle(null);
                 }
-                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
             }
             if (sendPhotoType == 0) {
                 checkImageView.setChecked(placeProvider.isPhotoChecked(currentIndex), false);
@@ -3817,6 +4128,10 @@ private void setImageIndex(int index, boolean init) {
 
             setCurrentCaption(caption);
             updateCaptionTextForCurrentPhoto(object);
+            timeItem.setColorFilter(ttl != 0 ? new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY) : null);
+            paintItem.setColorFilter(isPainted ? new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY) : null);
+            cropItem.setColorFilter(isCropped ? new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY) : null);
+            tuneItem.setColorFilter(isFiltered ? new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY) : null);
         }
 
 
@@ -3913,10 +4228,27 @@ private void setImageIndex(int index, boolean init) {
     }
 
     private void setCurrentCaption(final CharSequence caption) {
-        if (caption != null && caption.length() > 0) {
-            captionTextView = captionTextViewOld;
-            captionTextViewOld = captionTextViewNew;
-            captionTextViewNew = captionTextView;
+        if (needCaptionLayout) {
+            if (captionTextView.getParent() != pickerView) {
+                captionTextView.setBackgroundDrawable(null);
+                containerView.removeView(captionTextView);
+                pickerView.addView(captionTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 76, 48));
+            }
+        } else {
+            if (captionTextView.getParent() != containerView) {
+                captionTextView.setBackgroundColor(0x7f000000);
+                pickerView.removeView(captionTextView);
+                containerView.addView(captionTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
+            }
+        }
+        if (isCurrentVideo) {
+            captionTextView.setMaxLines(1);
+            captionTextView.setSingleLine(true);
+        } else {
+            captionTextView.setSingleLine(false);
+            captionTextView.setMaxLines(10);
+        }
+        if (!TextUtils.isEmpty(caption)) {
             Theme.createChatResources(null, true);
             CharSequence str = Emoji.replaceEmoji(new SpannableStringBuilder(caption.toString()), captionTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
             captionTextView.setTag(str);
@@ -3927,21 +4259,10 @@ private void setCurrentCaption(final CharSequence caption) {
             }
             captionTextView.setTextColor(0xffffffff);
             captionTextView.setAlpha(bottomLayout.getVisibility() == View.VISIBLE || pickerView.getVisibility() == View.VISIBLE ? 1.0f : 0.0f);
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    captionTextViewOld.setTag(null);
-                    captionTextViewOld.setVisibility(View.INVISIBLE);
-                    captionTextViewNew.setVisibility(bottomLayout.getVisibility() == View.VISIBLE || pickerView.getVisibility() == View.VISIBLE ? View.VISIBLE : View.INVISIBLE);
-                }
-            });
+            captionTextView.setVisibility(bottomLayout.getVisibility() == View.VISIBLE || pickerView.getVisibility() == View.VISIBLE ? View.VISIBLE : View.INVISIBLE);
         } else {
             if (needCaptionLayout) {
-                try {
-                    captionTextView.setText(LocaleController.getString("AddCaption", R.string.AddCaption));
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
+                captionTextView.setText(LocaleController.getString("AddCaption", R.string.AddCaption));
                 captionTextView.setTag("empty");
                 captionTextView.setVisibility(View.VISIBLE);
                 captionTextView.setTextColor(0xb2ffffff);
@@ -3954,13 +4275,13 @@ public void run() {
     }
 
     private void checkProgress(int a, boolean animated) {
+        int index = currentIndex;
+        if (a == 1) {
+            index += 1;
+        } else if (a == 2) {
+            index -= 1;
+        }
         if (currentFileNames[a] != null) {
-            int index = currentIndex;
-            if (a == 1) {
-                index += 1;
-            } else if (a == 2) {
-                index -= 1;
-            }
             File f = null;
             boolean isVideo = false;
             if (currentMessageObject != null) {
@@ -4027,7 +4348,19 @@ private void checkProgress(int a, boolean animated) {
                 canZoom = !imagesArrLocals.isEmpty() || (currentFileNames[0] != null && !isVideo && photoProgressViews[0].backgroundState != 0);
             }
         } else {
-            photoProgressViews[a].setBackgroundState(-1, animated);
+            boolean isLocalVideo = false;
+            if (!imagesArrLocals.isEmpty() && index >= 0 && index < imagesArrLocals.size()) {
+                Object object = imagesArrLocals.get(index);
+                if (object instanceof MediaController.PhotoEntry) {
+                    MediaController.PhotoEntry photoEntry = ((MediaController.PhotoEntry) object);
+                    isLocalVideo = photoEntry.isVideo;
+                }
+            }
+            if (isLocalVideo) {
+                photoProgressViews[a].setBackgroundState(3, animated);
+            } else {
+                photoProgressViews[a].setBackgroundState(-1, animated);
+            }
         }
     }
 
@@ -4104,9 +4437,9 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                     filter = "d";
                 }
                 if (document != null) {
-                    imageReceiver.setImage(document, null, "d", placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, placeHolder == null ? document.thumb.location : null, String.format(Locale.US, "%d_%d", size, size), imageSize, null, false);
+                    imageReceiver.setImage(document, null, "d", placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, placeHolder == null ? document.thumb.location : null, String.format(Locale.US, "%d_%d", size, size), imageSize, null, 0);
                 } else if (photo != null) {
-                    imageReceiver.setImage(photo, null, filter, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, null, String.format(Locale.US, "%d_%d", size, size), imageSize, null, false);
+                    imageReceiver.setImage(photo, null, filter, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, null, String.format(Locale.US, "%d_%d", size, size), imageSize, null, 0);
                 } else {
                     imageReceiver.setImage(path, filter, placeHolder != null ? new BitmapDrawable(null, placeHolder) : (isVideo && parentActivity != null ? parentActivity.getResources().getDrawable(R.drawable.nophotos) : null), null, imageSize);
                 }
@@ -4135,7 +4468,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                             placeHolder = currentThumb;
                         }
                         TLRPC.PhotoSize thumbLocation = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
-                        imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation.location, "b", 0, null, true);
+                        imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation.location, "b", 0, null, 1);
                     } else {
                         imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                     }
@@ -4143,7 +4476,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                     imageReceiver.setImageBitmap(currentAnimation);
                     currentAnimation.setSecondParentView(containerView);
                 } else {
-                    imageReceiver.setNeedsQualityThumb(false);
+                    imageReceiver.setNeedsQualityThumb(true);
                     Bitmap placeHolder = null;
                     if (currentThumb != null && imageReceiver == centerImage) {
                         placeHolder = currentThumb;
@@ -4152,10 +4485,10 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                         size[0] = -1;
                     }
                     TLRPC.PhotoSize thumbLocation = messageObject != null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100) : null;
-                    imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], null, avatarsDialogId != 0 || isEvent);
+                    imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], null, avatarsDialogId != 0 || isEvent ? 1 : 0);
                 }
             } else {
-                imageReceiver.setNeedsQualityThumb(false);
+                imageReceiver.setNeedsQualityThumb(true);
                 imageReceiver.setParentMessageObject(null);
                 if (size[0] == 0) {
                     imageReceiver.setImageBitmap((Bitmap) null);
@@ -4200,8 +4533,20 @@ public boolean openPhoto(final ArrayList<MessageObject> messages, final int inde
 
     public boolean openPhotoForSelect(final ArrayList<Object> photos, final int index, int type, final PhotoViewerProvider provider, ChatActivity chatActivity) {
         sendPhotoType = type;
-        if (pickerView != null) {
-            pickerView.doneButton.setText(sendPhotoType == 1 ? LocaleController.getString("Set", R.string.Set).toUpperCase() : LocaleController.getString("Send", R.string.Send).toUpperCase());
+        if (pickerViewSendButton != null) {
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) itemsLayout.getLayoutParams();
+            if (sendPhotoType == 1) {
+                pickerView.setPadding(0, AndroidUtilities.dp(14), 0, 0);
+                pickerViewSendButton.setImageResource(R.drawable.bigcheck);
+                pickerViewSendButton.setPadding(0, AndroidUtilities.dp(1), 0, 0);
+                layoutParams.bottomMargin = AndroidUtilities.dp(16);
+            } else {
+                pickerView.setPadding(0, 0, 0, 0);
+                pickerViewSendButton.setImageResource(R.drawable.ic_send);
+                pickerViewSendButton.setPadding(AndroidUtilities.dp(4), 0, 0, 0);
+                layoutParams.bottomMargin = 0;
+            }
+            itemsLayout.setLayoutParams(layoutParams);
         }
         return openPhoto(null, null, null, photos, index, provider, chatActivity, 0, 0);
     }
@@ -4238,7 +4583,6 @@ public boolean openPhoto(final MessageObject messageObject, final TLRPC.FileLoca
             }
         }
 
-
         try {
             windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
             if (Build.VERSION.SDK_INT >= 21) {
@@ -4481,7 +4825,7 @@ public void run() {
             switchToEditMode(0);
             return;
         }
-        if (Build.VERSION.SDK_INT >= 16 && qualityChooseView != null && qualityChooseView.getTag() != null) {
+        if (qualityChooseView != null && qualityChooseView.getTag() != null) {
             qualityPicker.cancelButton.callOnClick();
             return;
         }
@@ -4850,7 +5194,7 @@ private int getAdditionX() {
 
     private int getAdditionY() {
         if (currentEditMode == 3) {
-            return ActionBar.getCurrentActionBarHeight() + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+            return AndroidUtilities.dp(8) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
         } else if (currentEditMode != 0) {
             return AndroidUtilities.dp(14) + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
         }
@@ -4881,7 +5225,7 @@ private int getContainerViewHeight(int mode) {
         if (mode == 1) {
             height -= AndroidUtilities.dp(48 + 32 + 64);
         } else if (mode == 2) {
-            height -= AndroidUtilities.dp(154);
+            height -= AndroidUtilities.dp(154 + 60);
         } else if (mode == 3) {
             height -= AndroidUtilities.dp(48) + ActionBar.getCurrentActionBarHeight();
         }
@@ -4898,10 +5242,6 @@ private boolean onTouchEvent(MotionEvent ev) {
             return true;
         }
 
-        if (qualityChooseView != null && qualityChooseView.getVisibility() == View.VISIBLE) {
-            return true;
-        }
-
         if (currentEditMode == 1) {
             return true;
         }
@@ -4973,6 +5313,9 @@ private boolean onTouchEvent(MotionEvent ev) {
                 float dy = Math.abs(ev.getY() - dragY);
                 if (dx > AndroidUtilities.dp(3) || dy > AndroidUtilities.dp(3)) {
                     discardTap = true;
+                    if (qualityChooseView != null && qualityChooseView.getVisibility() == View.VISIBLE) {
+                        return true;
+                    }
                 }
                 if (!(placeProvider instanceof EmptyPhotoViewerProvider) && currentEditMode == 0 && canDragDown && !draggingDown && scale == 1 && dy >= AndroidUtilities.dp(30) && dy / 2 > dx) {
                     draggingDown = true;
@@ -5183,7 +5526,7 @@ public float getAnimationValue() {
         return animationValue;
     }
 
-    @SuppressLint("NewApi")
+    @SuppressLint({"NewApi", "DrawAllocation"})
     private void onDraw(Canvas canvas) {
         if (animationInProgress == 1 || !isVisible && animationInProgress != 2) {
             return;
@@ -5238,9 +5581,19 @@ private void onDraw(Canvas canvas) {
             }
             if (switchImageAfterAnimation != 0) {
                 if (switchImageAfterAnimation == 1) {
-                    setImageIndex(currentIndex + 1, false);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            setImageIndex(currentIndex + 1, false);
+                        }
+                    });
                 } else if (switchImageAfterAnimation == 2) {
-                    setImageIndex(currentIndex - 1, false);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            setImageIndex(currentIndex - 1, false);
+                        }
+                    });
                 }
                 switchImageAfterAnimation = 0;
             }
@@ -5319,7 +5672,7 @@ private void onDraw(Canvas canvas) {
             alpha = 1.0f - alpha;
             translateX = maxX;
         }
-        boolean drawTextureView = Build.VERSION.SDK_INT >= 16 && aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == View.VISIBLE;
+        boolean drawTextureView = aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == View.VISIBLE;
         if (centerImage.hasBitmapImage()) {
             canvas.save();
             canvas.translate(getContainerViewWidth() / 2 + getAdditionX(), getContainerViewHeight() / 2 + getAdditionY());
@@ -5365,7 +5718,7 @@ private void onDraw(Canvas canvas) {
                     long newUpdateTime = System.currentTimeMillis();
                     long dt = newUpdateTime - videoCrossfadeAlphaLastTime;
                     videoCrossfadeAlphaLastTime = newUpdateTime;
-                    videoCrossfadeAlpha += dt / 300.0f;
+                    videoCrossfadeAlpha += dt / 200.0f;
                     containerView.invalidate();
                     if (videoCrossfadeAlpha > 1.0f) {
                         videoCrossfadeAlpha = 1.0f;
@@ -5374,7 +5727,13 @@ private void onDraw(Canvas canvas) {
             }
             canvas.restore();
         }
-        if (!drawTextureView && (videoPlayerControlFrameLayout == null || videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE)) {
+        boolean drawProgress;
+        if (isCurrentVideo) {
+            drawProgress = progressView.getVisibility() != View.VISIBLE && (videoPlayer == null || !videoPlayer.isPlaying());
+        } else {
+            drawProgress = !drawTextureView && videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE;
+        }
+        if (drawProgress) {
             canvas.save();
             canvas.translate(translateX, currentTranslationY / currentScale);
             photoProgressViews[0].setScale(1.0f - scaleDiff);
@@ -5448,14 +5807,14 @@ private void onActionClick(boolean download) {
             if (download) {
                 if (currentMessageObject !=  null) {
                     if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
-                        FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
+                        FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, 0);
                     } else {
                         FileLoader.getInstance().cancelLoadFile(currentMessageObject.getDocument());
                     }
                 } else if (currentBotInlineResult != null) {
                     if (currentBotInlineResult.document != null) {
                         if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
-                            FileLoader.getInstance().loadFile(currentBotInlineResult.document, true, false);
+                            FileLoader.getInstance().loadFile(currentBotInlineResult.document, true, 0);
                         } else {
                             FileLoader.getInstance().cancelLoadFile(currentBotInlineResult.document);
                         }
@@ -5469,18 +5828,7 @@ private void onActionClick(boolean download) {
                 }
             }
         } else {
-            if (Build.VERSION.SDK_INT >= 16) {
-                preparePlayer(file, true, false);
-            } else {
-                Intent intent = new Intent(Intent.ACTION_VIEW);
-                if (Build.VERSION.SDK_INT >= 24) {
-                    intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-                    intent.setDataAndType(FileProvider.getUriForFile(parentActivity, BuildConfig.APPLICATION_ID + ".provider", file), "video/mp4");
-                } else {
-                    intent.setDataAndType(Uri.fromFile(file), "video/mp4");
-                }
-                parentActivity.startActivityForResult(intent, 500);
-            }
+            preparePlayer(file, true, false);
         }
     }
 
@@ -5525,7 +5873,7 @@ public boolean onSingleTapConfirmed(MotionEvent e) {
             return false;
         }
         if (canShowBottom) {
-            boolean drawTextureView = Build.VERSION.SDK_INT >= 16 && aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == View.VISIBLE;
+            boolean drawTextureView = aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == View.VISIBLE;
             if (photoProgressViews[0] != null && containerView != null && !drawTextureView) {
                 int state = photoProgressViews[0].backgroundState;
                 if (state > 0 && state <= 3) {
@@ -5541,7 +5889,11 @@ public boolean onSingleTapConfirmed(MotionEvent e) {
             }
             toggleActionBar(!isActionBarVisible, true);
         } else if (sendPhotoType == 0) {
-            checkImageView.performClick();
+            if (isCurrentVideo) {
+                videoPlayButton.callOnClick();
+            } else {
+                checkImageView.performClick();
+            }
         } else if (currentBotInlineResult != null && (currentBotInlineResult.type.equals("video") || MessageObject.isVideoDocument(currentBotInlineResult.document))) {
             int state = photoProgressViews[0].backgroundState;
             if (state > 0 && state <= 3) {
@@ -5554,6 +5906,10 @@ public boolean onSingleTapConfirmed(MotionEvent e) {
                     return true;
                 }
             }
+        } else if (sendPhotoType == 2) {
+            if (isCurrentVideo) {
+                videoPlayButton.callOnClick();
+            }
         }
         return true;
     }
@@ -5597,8 +5953,7 @@ public boolean onDoubleTapEvent(MotionEvent e) {
     private QualityChooseView qualityChooseView;
     private PickerBottomLayoutViewer qualityPicker;
     private RadialProgressView progressView;
-    private VideoTimelineView videoTimelineView;
-    private FrameLayout videoTimelineViewContainer;
+    private VideoTimelinePlayView videoTimelineView;
     private AnimatorSet qualityChooseViewAnimation;
 
     private int selectedCompression;
@@ -5765,11 +6120,9 @@ public void updateMuteButton() {
             videoPlayer.setMute(muteVideo);
         }
         if (muteVideo) {
-            if (fromCamera) {
-                actionBar.setTitle(LocaleController.getString("AttachGif", R.string.AttachGif));
-            }
             actionBar.setSubtitle(null);
             muteItem.setImageResource(R.drawable.volume_off);
+            muteItem.setColorFilter(new PorterDuffColorFilter(0xff3dadee, PorterDuff.Mode.MULTIPLY));
             if (compressItem.getTag() != null) {
                 compressItem.setClickable(false);
                 compressItem.setAlpha(0.5f);
@@ -5777,9 +6130,7 @@ public void updateMuteButton() {
             }
             videoTimelineView.setMaxProgressDiff(30000.0f / videoDuration);
         } else {
-            if (fromCamera) {
-                actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
-            }
+            muteItem.setColorFilter(null);
             actionBar.setSubtitle(currentSubtitle);
             muteItem.setImageResource(R.drawable.volume_on);
             if (compressItem.getTag() != null) {
@@ -5857,9 +6208,6 @@ private void updateVideoInfo() {
     }
 
     private void requestVideoPreview(int request) {
-        if (Build.VERSION.SDK_INT < 16) {
-            return;
-        }
         if (videoPreviewMessageObject != null) {
             MediaController.getInstance().cancelVideoConvert(videoPreviewMessageObject);
         }
@@ -5919,6 +6267,7 @@ private void requestVideoPreview(int request) {
                 preparePlayer(currentPlayingVideoFile, false, false);
             }
         }
+        containerView.invalidate();
     }
 
     private void updateWidthHeightBitrateForCompression() {
@@ -5969,7 +6318,6 @@ private void showQualityView(final boolean show) {
             qualityChooseView.setTag(1);
             qualityChooseViewAnimation.playTogether(
                     ObjectAnimator.ofFloat(pickerView, "translationY", 0, AndroidUtilities.dp(152)),
-                    ObjectAnimator.ofFloat(videoTimelineViewContainer, "translationY", 0, AndroidUtilities.dp(152)),
                     ObjectAnimator.ofFloat(bottomLayout, "translationY", -AndroidUtilities.dp(48), AndroidUtilities.dp(104))
             );
         } else {
@@ -6000,7 +6348,6 @@ public void onAnimationEnd(Animator animation) {
                     qualityPicker.setVisibility(View.INVISIBLE);
                     qualityChooseViewAnimation.playTogether(
                             ObjectAnimator.ofFloat(pickerView, "translationY", 0),
-                            ObjectAnimator.ofFloat(videoTimelineViewContainer, "translationY", 0),
                             ObjectAnimator.ofFloat(bottomLayout, "translationY", -AndroidUtilities.dp(48))
                     );
                 }
@@ -6037,6 +6384,7 @@ private void processOpenVideo(final String videoPath) {
         muteVideo = false;
         videoTimelineView.setVideoPath(videoPath);
         compressionsCount = -1;
+        rotationValue = 0;
         File file = new File(videoPath);
         originalSize = file.length();
 
@@ -6132,6 +6480,8 @@ public void run() {
                             rotationValue = 180;
                         } else if (matrix.equals(Matrix.ROTATE_270)) {
                             rotationValue = 270;
+                        } else {
+                            rotationValue = 0;
                         }
                         resultWidth = originalWidth = (int) trackHeaderBoxFinal.getWidth();
                         resultHeight = originalHeight = (int) trackHeaderBoxFinal.getHeight();
@@ -6158,7 +6508,7 @@ public void run() {
                         updateWidthHeightBitrateForCompression();
 
                         setCompressItemEnabled(compressionsCount > 1, true);
-                        if (Build.VERSION.SDK_INT >= 16 && Build.VERSION.SDK_INT < 18 && compressItem.getTag() != null) {
+                        if (Build.VERSION.SDK_INT < 18 && compressItem.getTag() != null) {
                             try {
                                 MediaCodecInfo codecInfo = MediaController.selectCodec(MediaController.MIME_TYPE);
                                 if (codecInfo == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 5e3330a30..923f88557 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -196,6 +196,7 @@
     private int sectionRow;
     private int userSectionRow;
     private int userInfoRow;
+    private int userInfoDetailedRow;
     private int membersSectionRow;
     private int membersEndRow;
     private int loadMoreMembersRow;
@@ -1256,7 +1257,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             });
             showDialog(builder.create());
             return true;
-        } else if (position == channelInfoRow || position == userInfoRow) {
+        } else if (position == channelInfoRow || position == userInfoRow || position == userInfoDetailedRow) {
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
                 @Override
@@ -1869,9 +1870,7 @@ protected AnimatorSet onCustomTransitionAnimation(final boolean isOpen, final Ru
         if (playProfileAnimation && allowProfileAnimation) {
             final AnimatorSet animatorSet = new AnimatorSet();
             animatorSet.setDuration(180);
-            if (Build.VERSION.SDK_INT > 15) {
-                listView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-            }
+            listView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             ActionBarMenu menu = actionBar.createMenu();
             if (menu.getItem(10) == null) {
                 if (animatingItem == null) {
@@ -1955,9 +1954,7 @@ protected AnimatorSet onCustomTransitionAnimation(final boolean isOpen, final Ru
             animatorSet.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {
-                    if (Build.VERSION.SDK_INT > 15) {
-                        listView.setLayerType(View.LAYER_TYPE_NONE, null);
-                    }
+                    listView.setLayerType(View.LAYER_TYPE_NONE, null);
                     if (animatingItem != null) {
                         ActionBarMenu menu = actionBar.createMenu();
                         menu.clearItems();
@@ -2185,6 +2182,7 @@ private void updateRowsIds() {
         emptyRow = -1;
         phoneRow = -1;
         userInfoRow = -1;
+        userInfoDetailedRow = -1;
         userSectionRow = -1;
         sectionRow = -1;
         sharedMediaRow = -1;
@@ -2211,22 +2209,28 @@ private void updateRowsIds() {
         if (user_id != 0) {
             TLRPC.User user = MessagesController.getInstance().getUser(user_id);
             emptyRow = rowCount++;
-            if (user == null || !user.bot) {
+            if ((user == null || !user.bot) && !TextUtils.isEmpty(user.phone)) {
                 phoneRow = rowCount++;
             }
-            if (user != null && user.username != null && user.username.length() > 0) {
+
+            TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(user.id);
+            boolean hasUsername = user != null && !TextUtils.isEmpty(user.username);
+            if (userFull != null && !TextUtils.isEmpty(userFull.about)) {
+                if (phoneRow != -1) {
+                    userSectionRow = rowCount++;
+                }
+                if (hasUsername) {
+                    userInfoRow = rowCount++;
+                } else {
+                    userInfoDetailedRow = rowCount++;
+                }
+            }
+            if (hasUsername) {
                 usernameRow = rowCount++;
             }
-            TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(user.id);
-            String about = userFull != null ? userFull.about : null;
-            if (about != null) {
-                userSectionRow = rowCount++;
-                userInfoRow = rowCount++;
-            } else {
-                userSectionRow = -1;
-                userInfoRow = -1;
+            if (phoneRow != -1 || userInfoRow != -1 || userInfoDetailedRow != -1 || usernameRow != -1) {
+                sectionRow = rowCount++;
             }
-            sectionRow = rowCount++;
             if (user_id != UserConfig.getClientUserId()) {
                 settingsNotificationsRow = rowCount++;
             }
@@ -2706,6 +2710,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                     break;
                 case 2:
                     TextDetailCell textDetailCell = (TextDetailCell) holder.itemView;
+                    textDetailCell.setMultiline(false);
                     if (i == phoneRow) {
                         String text;
                         final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
@@ -2714,24 +2719,32 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                         } else {
                             text = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
                         }
-                        textDetailCell.setTextAndValueAndIcon(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), R.drawable.profile_phone);
+                        textDetailCell.setTextAndValueAndIcon(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), R.drawable.profile_phone, 0);
                     } else if (i == usernameRow) {
                         String text;
                         final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        if (user != null && user.username != null && user.username.length() != 0) {
+                        if (user != null && !TextUtils.isEmpty(user.username)) {
                             text = "@" + user.username;
                         } else {
                             text = "-";
                         }
-                        textDetailCell.setTextAndValue(text, LocaleController.getString("Username", R.string.Username));
+                        if (phoneRow == -1 && userInfoRow == -1 && userInfoDetailedRow == -1) {
+                            textDetailCell.setTextAndValueAndIcon(text, LocaleController.getString("Username", R.string.Username), R.drawable.profile_info, 11);
+                        } else {
+                            textDetailCell.setTextAndValue(text, LocaleController.getString("Username", R.string.Username));
+                        }
                     } else if (i == channelNameRow) {
                         String text;
-                        if (currentChat != null && currentChat.username != null && currentChat.username.length() != 0) {
+                        if (currentChat != null && !TextUtils.isEmpty(currentChat.username)) {
                             text = "@" + currentChat.username;
                         } else {
                             text = "-";
                         }
                         textDetailCell.setTextAndValue(text, MessagesController.getInstance().linkPrefix + "/" + currentChat.username);
+                    } else if (i == userInfoDetailedRow) {
+                        TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(user_id);
+                        textDetailCell.setMultiline(true);
+                        textDetailCell.setTextAndValueAndIcon(userFull != null ? userFull.about : null, LocaleController.getString("UserBio", R.string.UserBio), R.drawable.profile_info, 11);
                     }
                     break;
                 case 3:
@@ -2891,14 +2904,13 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                     AboutLinkCell aboutLinkCell = (AboutLinkCell) holder.itemView;
                     if (i == userInfoRow) {
                         TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(user_id);
-                        String about = userFull != null ? userFull.about : null;
-                        aboutLinkCell.setTextAndIcon(about, R.drawable.profile_info);
+                        aboutLinkCell.setTextAndIcon(userFull != null ? userFull.about : null, R.drawable.profile_info, false);
                     } else if (i == channelInfoRow) {
                         String text = info.about;
                         while (text.contains("\n\n\n")) {
                             text = text.replace("\n\n\n", "\n\n");
                         }
-                        aboutLinkCell.setTextAndIcon(text, R.drawable.profile_info);
+                        aboutLinkCell.setTextAndIcon(text, R.drawable.profile_info, true);
                     }
                     break;
             }
@@ -2909,7 +2921,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             int i = holder.getAdapterPosition();
             if (user_id != 0) {
                 return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow ||
-                        i == sharedMediaRow || i == startSecretChatRow || i == usernameRow || i == userInfoRow || i == groupsInCommonRow;
+                        i == sharedMediaRow || i == startSecretChatRow || i == usernameRow || i == userInfoRow || i == groupsInCommonRow || i == userInfoDetailedRow;
             } else if (chat_id != 0) {
                 return i == convertRow || i == settingsNotificationsRow || i == sharedMediaRow || i > emptyRowChat2 && i < membersEndRow ||
                         i == addMemberRow || i == channelNameRow || i == leaveChannelRow || i == channelInfoRow || i == membersRow;
@@ -2928,7 +2940,7 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == sectionRow || i == userSectionRow) {
                 return 1;
-            } else if (i == phoneRow || i == usernameRow || i == channelNameRow) {
+            } else if (i == phoneRow || i == usernameRow || i == channelNameRow || i == userInfoDetailedRow) {
                 return 2;
             } else if (i == leaveChannelRow || i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == startSecretChatRow || i == settingsKeyRow || i == convertRow || i == addMemberRow || i == groupsInCommonRow || i == membersRow) {
                 return 3;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
index bf2a9e505..6e7fad2a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
@@ -114,7 +114,7 @@ public void onFragmentDestroy() {
 
     @Override
     public View createView(Context context) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         useProxySettings = preferences.getBoolean("proxy_enabled", false);
         useProxyForCalls = preferences.getBoolean("proxy_enabled_calls", false);
 
@@ -198,8 +198,10 @@ public void onItemClick(int id) {
             public void onClick(View v) {
                 useProxySettings = !useProxySettings;
                 checkCell1.setChecked(useProxySettings);
-                if(!useProxySettings)
+                if(!useProxySettings){
                     useForCallsCell.setChecked(false);
+                    preferences.edit().putBoolean("proxy_enabled_calls", false).apply();
+                }
                 useForCallsCell.setEnabled(useProxySettings);
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
new file mode 100644
index 000000000..13f166712
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
@@ -0,0 +1,1660 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2017.
+ */
+
+package org.telegram.ui;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Build;
+import android.util.SparseArray;
+import android.view.GestureDetector;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.TextureView;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.WindowInsets;
+import android.view.WindowManager;
+import android.view.animation.DecelerateInterpolator;
+import android.widget.FrameLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ImageReceiver;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.exoplayer2.C;
+import org.telegram.messenger.exoplayer2.ExoPlayer;
+import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.Scroller;
+import org.telegram.ui.Components.VideoPlayer;
+
+import java.io.File;
+import java.util.ArrayList;
+
+public class SecretMediaViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
+
+    private class FrameLayoutDrawer extends FrameLayout {
+        public FrameLayoutDrawer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            processTouchEvent(event);
+            return true;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            SecretMediaViewer.this.onDraw(canvas);
+        }
+
+        @Override
+        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+            return child != aspectRatioFrameLayout && super.drawChild(canvas, child, drawingTime);
+        }
+    }
+
+    private class SecretDeleteTimer extends FrameLayout {
+
+        private Paint deleteProgressPaint;
+        private Paint afterDeleteProgressPaint;
+        private Paint circlePaint;
+        private Paint particlePaint;
+        private RectF deleteProgressRect = new RectF();
+
+        private long destroyTime;
+        private long lastAnimationTime;
+        private long destroyTtl;
+        private boolean useVideoProgress;
+
+        private class Particle {
+            float x;
+            float y;
+            float vx;
+            float vy;
+            float velocity;
+            float alpha;
+            float lifeTime;
+            float currentTime;
+        }
+
+        private ArrayList<Particle> particles = new ArrayList<>();
+        private ArrayList<Particle> freeParticles = new ArrayList<>();
+
+        private Drawable drawable;
+
+        public SecretDeleteTimer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+
+            particlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            particlePaint.setStrokeWidth(AndroidUtilities.dp(1.5f));
+            particlePaint.setColor(0xffe6e6e6);
+            particlePaint.setStrokeCap(Paint.Cap.ROUND);
+            particlePaint.setStyle(Paint.Style.STROKE);
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(0xffe6e6e6);
+
+            afterDeleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            afterDeleteProgressPaint.setStyle(Paint.Style.STROKE);
+            afterDeleteProgressPaint.setStrokeCap(Paint.Cap.ROUND);
+            afterDeleteProgressPaint.setColor(0xffe6e6e6);
+            afterDeleteProgressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+
+            circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            circlePaint.setColor(0x7f000000);
+
+            drawable = context.getResources().getDrawable(R.drawable.flame_small);
+            for (int a = 0; a < 40; a++) {
+                freeParticles.add(new Particle());
+            }
+        }
+
+        private void setDestroyTime(long time, long ttl, boolean videoProgress) {
+            destroyTime = time;
+            destroyTtl = ttl;
+            useVideoProgress = videoProgress;
+            lastAnimationTime = System.currentTimeMillis();
+            invalidate();
+        }
+
+        private void updateParticles(long dt) {
+            int count = particles.size();
+            for (int a = 0; a < count; a++) {
+                Particle particle = particles.get(a);
+                if (particle.currentTime >= particle.lifeTime) {
+                    if (freeParticles.size() < 40) {
+                        freeParticles.add(particle);
+                    }
+                    particles.remove(a);
+                    a--;
+                    count--;
+                    continue;
+                }
+                particle.alpha = 1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(particle.currentTime / particle.lifeTime);
+                particle.x += particle.vx * particle.velocity * dt / 500.0f;
+                particle.y += particle.vy * particle.velocity * dt / 500.0f;
+                particle.currentTime += dt;
+            }
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            int y = getMeasuredHeight() / 2 - AndroidUtilities.dp(28) / 2;
+            deleteProgressRect.set(getMeasuredWidth() - AndroidUtilities.dp(30 + 19), y, getMeasuredWidth() - AndroidUtilities.dp(2 + 19), y + AndroidUtilities.dp(28));
+        }
+
+        @SuppressLint("DrawAllocation")
+        @Override
+        protected void onDraw(Canvas canvas) {
+            if (currentMessageObject == null || currentMessageObject.messageOwner.destroyTime == 0) {
+                return;
+            }
+
+            canvas.drawCircle(getMeasuredWidth() - AndroidUtilities.dp(16 + 19), getMeasuredHeight() / 2, AndroidUtilities.dp(16), circlePaint);
+
+            float progress;
+
+            if (useVideoProgress) {
+                if (videoPlayer != null) {
+                    long duration = videoPlayer.getDuration();
+                    long position = videoPlayer.getCurrentPosition();
+                    if (duration != C.TIME_UNSET && position != C.TIME_UNSET) {
+                        progress = 1.0f - (position / (float) duration);
+                    } else {
+                        progress = 1;
+                    }
+                } else {
+                    progress = 1;
+                }
+            } else {
+                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+                progress = Math.max(0, destroyTime - msTime) / (destroyTtl * 1000.0f);
+            }
+
+            int x = getMeasuredWidth() - AndroidUtilities.dp(32 - 11 + 19);
+            int y = (getMeasuredHeight() - AndroidUtilities.dp(14)) / 2 - AndroidUtilities.dp(0.5f);
+            drawable.setBounds(x, y, x + AndroidUtilities.dp(10), y + AndroidUtilities.dp(14));
+            drawable.draw(canvas);
+            float radProgress = -360 * progress;
+            canvas.drawArc(deleteProgressRect, -90, radProgress, false, afterDeleteProgressPaint);
+
+            int count = particles.size();
+            for (int a = 0; a < count; a++) {
+                Particle particle = particles.get(a);
+                particlePaint.setAlpha((int) (255 * particle.alpha));
+                canvas.drawPoint(particle.x, particle.y, particlePaint);
+            }
+
+            double vx = Math.sin(Math.PI / 180.0 * (radProgress - 90));
+            double vy = -Math.cos(Math.PI / 180.0 * (radProgress - 90));
+            int rad = AndroidUtilities.dp(14);
+            float cx = (float) (-vy * rad + deleteProgressRect.centerX());
+            float cy = (float) (vx * rad + deleteProgressRect.centerY());
+            for (int a = 0; a < 1; a++) {
+                Particle newParticle;
+                if (!freeParticles.isEmpty()) {
+                    newParticle = freeParticles.get(0);
+                    freeParticles.remove(0);
+                } else {
+                    newParticle = new Particle();
+                }
+                newParticle.x = cx;
+                newParticle.y = cy;
+
+                double angle = (Math.PI / 180.0) * (Utilities.random.nextInt(140) - 70);
+                if (angle < 0) {
+                    angle = Math.PI * 2 + angle;
+                }
+                newParticle.vx = (float) (vx * Math.cos(angle) - vy * Math.sin(angle));
+                newParticle.vy = (float) (vx * Math.sin(angle) + vy * Math.cos(angle));
+
+                newParticle.alpha = 1.0f;
+                newParticle.currentTime = 0;
+
+                newParticle.lifeTime = 400 + Utilities.random.nextInt(100);
+                newParticle.velocity = 20.0f + Utilities.random.nextFloat() * 4.0f;
+                particles.add(newParticle);
+            }
+
+            long newTime = System.currentTimeMillis();
+            long dt = (newTime - lastAnimationTime);
+            updateParticles(dt);
+            lastAnimationTime = newTime;
+            invalidate();
+        }
+    }
+
+    private class PhotoBackgroundDrawable extends ColorDrawable {
+
+        private Runnable drawRunnable;
+        private int frame;
+
+        public PhotoBackgroundDrawable(int color) {
+            super(color);
+        }
+
+        @Override
+        public void setAlpha(int alpha) {
+            if (parentActivity instanceof LaunchActivity) {
+                ((LaunchActivity) parentActivity).drawerLayoutContainer.setAllowDrawContent(!isPhotoVisible || alpha != 255);
+            }
+            super.setAlpha(alpha);
+        }
+
+        @Override
+        public void draw(Canvas canvas) {
+            super.draw(canvas);
+            if (getAlpha() != 0) {
+                if (frame == 2 && drawRunnable != null) {
+                    drawRunnable.run();
+                    drawRunnable = null;
+                } else {
+                    invalidateSelf();
+                }
+                frame++;
+            }
+        }
+    }
+
+    private Activity parentActivity;
+    private WindowManager.LayoutParams windowLayoutParams;
+    private FrameLayout windowView;
+    private FrameLayoutDrawer containerView;
+    private ImageReceiver centerImage = new ImageReceiver();
+    private SecretDeleteTimer secretDeleteTimer;
+    private boolean isVisible;
+    private int currentChannelId;
+    private AspectRatioFrameLayout aspectRatioFrameLayout;
+    private TextureView videoTextureView;
+    private VideoPlayer videoPlayer;
+    private boolean isPlaying;
+    private ActionBar actionBar;
+    private AnimatorSet currentActionBarAnimation;
+    private boolean videoWatchedOneTime;
+    private boolean closeVideoAfterWatch;
+    private boolean isVideo;
+    private long openTime;
+    private long closeTime;
+    private boolean disableShowCheck;
+    private PhotoViewer.PhotoViewerProvider currentProvider;
+
+    private boolean textureUploaded;
+    private boolean videoCrossfadeStarted;
+    private float videoCrossfadeAlpha;
+    private long videoCrossfadeAlphaLastTime;
+
+    private Object lastInsets;
+
+    private MessageObject currentMessageObject;
+
+    private int coords[] = new int[2];
+
+    private boolean isPhotoVisible;
+
+    private boolean isActionBarVisible = true;
+
+    private PhotoBackgroundDrawable photoBackgroundDrawable = new PhotoBackgroundDrawable(0xff000000);
+    private Paint blackPaint = new Paint();
+
+    private int photoAnimationInProgress;
+    private long photoTransitionAnimationStartTime;
+    private Runnable photoAnimationEndRunnable;
+
+    private boolean draggingDown;
+    private float dragY;
+    private float clipTop;
+    private float clipBottom;
+    private float clipHorizontal;
+    private float translationX;
+    private float translationY;
+    private float scale = 1;
+    private boolean useOvershootForScale;
+    private float animateToX;
+    private float animateToY;
+    private float animateToScale;
+    private float animateToClipTop;
+    private float animateToClipBottom;
+    private float animateToClipHorizontal;
+    private float animationValue;
+    private int currentRotation;
+    private long animationStartTime;
+    private AnimatorSet imageMoveAnimation;
+    private GestureDetector gestureDetector;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator(1.5f);
+    private float pinchStartDistance;
+    private float pinchStartScale = 1;
+    private float pinchCenterX;
+    private float pinchCenterY;
+    private float pinchStartX;
+    private float pinchStartY;
+    private float moveStartX;
+    private float moveStartY;
+    private float minX;
+    private float maxX;
+    private float minY;
+    private float maxY;
+    private boolean zooming;
+    private boolean moving;
+    private boolean doubleTap;
+    private boolean invalidCoords;
+    private boolean canDragDown = true;
+    private boolean zoomAnimation;
+    private boolean discardTap;
+    private VelocityTracker velocityTracker;
+    private Scroller scroller;
+
+    @SuppressLint("StaticFieldLeak")
+    private static volatile SecretMediaViewer Instance = null;
+    public static SecretMediaViewer getInstance() {
+        SecretMediaViewer localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (PhotoViewer.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new SecretMediaViewer();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.messagesDeleted) {
+            if (currentMessageObject == null) {
+                return;
+            }
+            int channelId = (Integer) args[1];
+            if (channelId != 0) {
+                return;
+            }
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
+            if (markAsDeletedMessages.contains(currentMessageObject.getId())) {
+                if (isVideo && !videoWatchedOneTime) {
+                    closeVideoAfterWatch = true;
+                } else {
+                    closePhoto(true, true);
+                }
+            }
+        } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
+            if (currentMessageObject == null || secretDeleteTimer == null) {
+                return;
+            }
+            SparseArray<ArrayList<Long>> mids = (SparseArray<ArrayList<Long>>)args[0];
+            for(int i = 0; i < mids.size(); i++) {
+                int key = mids.keyAt(i);
+                ArrayList<Long> arr = mids.get(key);
+                for (int a = 0; a < arr.size(); a++) {
+                    long mid = arr.get(a);
+                    if (a == 0) {
+                        int channelId = (int) (mid >> 32);
+                        if (channelId < 0) {
+                            channelId = 0;
+                        }
+                        if (channelId != currentChannelId) {
+                            return;
+                        }
+                    }
+                    if (currentMessageObject.getId() == mid) {
+                        currentMessageObject.messageOwner.destroyTime = key;
+                        secretDeleteTimer.invalidate();
+                        return;
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.updateMessageMedia) {
+            TLRPC.Message message = (TLRPC.Message) args[0];
+            if (currentMessageObject.getId() == message.id) {
+                if (isVideo && !videoWatchedOneTime) {
+                    closeVideoAfterWatch = true;
+                } else {
+                    closePhoto(true, true);
+                }
+            }
+        }
+    }
+
+    private void preparePlayer(File file) {
+        if (parentActivity == null) {
+            return;
+        }
+        releasePlayer();
+        if (videoTextureView == null) {
+            aspectRatioFrameLayout = new AspectRatioFrameLayout(parentActivity);
+            aspectRatioFrameLayout.setVisibility(View.INVISIBLE);
+            containerView.addView(aspectRatioFrameLayout, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER));
+
+            videoTextureView = new TextureView(parentActivity);
+            videoTextureView.setOpaque(false);
+            aspectRatioFrameLayout.addView(videoTextureView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER));
+        }
+        textureUploaded = false;
+        videoCrossfadeStarted = false;
+        videoTextureView.setAlpha(videoCrossfadeAlpha = 0.0f);
+        if (videoPlayer == null) {
+            videoPlayer = new VideoPlayer();
+            videoPlayer.setTextureView(videoTextureView);
+            videoPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate() {
+                @Override
+                public void onStateChanged(boolean playWhenReady, int playbackState) {
+                    if (videoPlayer == null || currentMessageObject == null) {
+                        return;
+                    }
+                    if (playbackState != ExoPlayer.STATE_ENDED && playbackState != ExoPlayer.STATE_IDLE) {
+                        try {
+                            parentActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                        } catch (Exception e) {
+                            FileLog.e(e);
+                        }
+                    } else {
+                        try {
+                            parentActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                        } catch (Exception e) {
+                            FileLog.e(e);
+                        }
+                    }
+                    if (playbackState == ExoPlayer.STATE_READY && aspectRatioFrameLayout.getVisibility() != View.VISIBLE) {
+                        aspectRatioFrameLayout.setVisibility(View.VISIBLE);
+                    }
+                    if (videoPlayer.isPlaying() && playbackState != ExoPlayer.STATE_ENDED) {
+                        if (!isPlaying) {
+                            isPlaying = true;
+                        }
+                    } else if (isPlaying) {
+                        isPlaying = false;
+                        if (playbackState == ExoPlayer.STATE_ENDED) {
+                            videoWatchedOneTime = true;
+                            if (closeVideoAfterWatch) {
+                                closePhoto(true, true);
+                            } else {
+                                videoPlayer.seekTo(0);
+                                videoPlayer.play();
+                            }
+                        }
+                    }
+                }
+
+                @Override
+                public void onError(Exception e) {
+                    FileLog.e(e);
+                }
+
+                @Override
+                public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) {
+                    if (aspectRatioFrameLayout != null) {
+                        if (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270) {
+                            int temp = width;
+                            width = height;
+                            height = temp;
+                        }
+                        aspectRatioFrameLayout.setAspectRatio(height == 0 ? 1 : (width * pixelWidthHeightRatio) / height, unappliedRotationDegrees);
+                    }
+                }
+
+                @Override
+                public void onRenderedFirstFrame() {
+                    if (!textureUploaded) {
+                        textureUploaded = true;
+                        containerView.invalidate();
+                    }
+                }
+
+                @Override
+                public boolean onSurfaceDestroyed(SurfaceTexture surfaceTexture) {
+                    return false;
+                }
+
+                @Override
+                public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
+
+                }
+            });
+        }
+        videoPlayer.preparePlayer(Uri.fromFile(file), "other");
+        videoPlayer.setPlayWhenReady(true);
+    }
+
+    private void releasePlayer() {
+        if (videoPlayer != null) {
+            videoPlayer.releasePlayer();
+            videoPlayer = null;
+        }
+        try {
+            if (parentActivity != null) {
+                parentActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+            }
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+        if (aspectRatioFrameLayout != null) {
+            containerView.removeView(aspectRatioFrameLayout);
+            aspectRatioFrameLayout = null;
+        }
+        if (videoTextureView != null) {
+            videoTextureView = null;
+        }
+        isPlaying = false;
+    }
+
+    public void setParentActivity(Activity activity) {
+        if (parentActivity == activity) {
+            return;
+        }
+        parentActivity = activity;
+
+        scroller = new Scroller(activity);
+
+        windowView = new FrameLayout(activity) {
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+                int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+                if (Build.VERSION.SDK_INT >= 21 && lastInsets != null) {
+                    WindowInsets insets = (WindowInsets) lastInsets;
+                    if (AndroidUtilities.incorrectDisplaySizeFix) {
+                        if (heightSize > AndroidUtilities.displaySize.y) {
+                            heightSize = AndroidUtilities.displaySize.y;
+                        }
+                        heightSize += AndroidUtilities.statusBarHeight;
+                    }
+                    heightSize -= insets.getSystemWindowInsetBottom();
+                    widthSize -= insets.getSystemWindowInsetRight();
+                } else {
+                    if (heightSize > AndroidUtilities.displaySize.y) {
+                        heightSize = AndroidUtilities.displaySize.y;
+                    }
+                }
+                setMeasuredDimension(widthSize, heightSize);
+                if (Build.VERSION.SDK_INT >= 21 && lastInsets != null) {
+                    widthSize -= ((WindowInsets) lastInsets).getSystemWindowInsetLeft();
+                }
+                containerView.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(heightSize, MeasureSpec.EXACTLY));
+            }
+
+            @SuppressWarnings("DrawAllocation")
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                int x = 0;
+                if (Build.VERSION.SDK_INT >= 21 && lastInsets != null) {
+                    x += ((WindowInsets) lastInsets).getSystemWindowInsetLeft();
+                }
+                containerView.layout(x, 0, x + containerView.getMeasuredWidth(), containerView.getMeasuredHeight());
+                if (changed) {
+                    if (imageMoveAnimation == null) {
+                        scale = 1;
+                        translationX = 0;
+                        translationY = 0;
+                    }
+                    updateMinMax(scale);
+                }
+            }
+        };
+        windowView.setBackgroundDrawable(photoBackgroundDrawable);
+        windowView.setFocusable(true);
+        windowView.setFocusableInTouchMode(true);
+
+        containerView = new FrameLayoutDrawer(activity) {
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                super.onLayout(changed, left, top, right, bottom);
+                if (secretDeleteTimer != null) {
+                    int y = (ActionBar.getCurrentActionBarHeight() - secretDeleteTimer.getMeasuredHeight()) / 2 + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                    secretDeleteTimer.layout(secretDeleteTimer.getLeft(), y, secretDeleteTimer.getRight(), y + secretDeleteTimer.getMeasuredHeight());
+                }
+            }
+        };
+        containerView.setFocusable(false);
+        windowView.addView(containerView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
+        layoutParams.width = LayoutHelper.MATCH_PARENT;
+        layoutParams.height = LayoutHelper.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        containerView.setLayoutParams(layoutParams);
+        if (Build.VERSION.SDK_INT >= 21) {
+            containerView.setFitsSystemWindows(true);
+            containerView.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() {
+                @SuppressLint("NewApi")
+                @Override
+                public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
+                    WindowInsets oldInsets = (WindowInsets) lastInsets;
+                    lastInsets = insets;
+                    if (oldInsets == null || !oldInsets.toString().equals(insets.toString())) {
+                        windowView.requestLayout();
+                    }
+                    return insets.consumeSystemWindowInsets();
+                }
+            });
+            containerView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+        }
+
+        gestureDetector = new GestureDetector(containerView.getContext(), this);
+        gestureDetector.setOnDoubleTapListener(this);
+
+        actionBar = new ActionBar(activity);
+        actionBar.setTitleColor(0xffffffff);
+        actionBar.setSubtitleColor(0xffffffff);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_PHOTO_VIEWER_COLOR);
+        actionBar.setOccupyStatusBar(Build.VERSION.SDK_INT >= 21);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR, false);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setTitleRightMargin(AndroidUtilities.dp(70));
+        containerView.addView(actionBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    closePhoto(true, false);
+                }
+            }
+        });
+
+        secretDeleteTimer = new SecretDeleteTimer(activity);
+        containerView.addView(secretDeleteTimer, LayoutHelper.createFrame(119, 48, Gravity.TOP | Gravity.RIGHT, 0, 0, 0, 0));
+
+        windowLayoutParams = new WindowManager.LayoutParams();
+        windowLayoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
+        windowLayoutParams.format = PixelFormat.TRANSLUCENT;
+        windowLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
+        windowLayoutParams.gravity = Gravity.TOP;
+        windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+        if (Build.VERSION.SDK_INT >= 21) {
+            windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
+                    WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR |
+                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
+                    WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS;
+        } else {
+            windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+        }
+        centerImage.setParentView(containerView);
+        centerImage.setForceCrossfade(true);
+    }
+
+    public void openMedia(MessageObject messageObject, PhotoViewer.PhotoViewerProvider provider) {
+        if (parentActivity == null || messageObject == null || !messageObject.isSecretPhoto() || provider == null) {
+            return;
+        }
+        final PhotoViewer.PlaceProviderObject object = provider.getPlaceForPhoto(messageObject, null, 0);
+        if (object == null) {
+            return;
+        }
+
+        //messageObject.messageOwner.destroyTime = (int) (System.currentTimeMillis() / 1000 + ConnectionsManager.getInstance().getTimeDifference()) + 4;
+
+        currentProvider = provider;
+        openTime = System.currentTimeMillis();
+        closeTime = 0;
+        isActionBarVisible = true;
+        isPhotoVisible = true;
+        draggingDown = false;
+        if (aspectRatioFrameLayout != null) {
+            aspectRatioFrameLayout.setVisibility(View.INVISIBLE);
+        }
+        releasePlayer();
+
+        pinchStartDistance = 0;
+        pinchStartScale = 1;
+        pinchCenterX = 0;
+        pinchCenterY = 0;
+        pinchStartX = 0;
+        pinchStartY = 0;
+        moveStartX = 0;
+        moveStartY = 0;
+        zooming = false;
+        moving = false;
+        doubleTap = false;
+        invalidCoords = false;
+        canDragDown = true;
+        updateMinMax(scale);
+        photoBackgroundDrawable.setAlpha(0);
+        containerView.setAlpha(1.0f);
+        containerView.setVisibility(View.VISIBLE);
+        secretDeleteTimer.setAlpha(1.0f);
+        isVideo = false;
+        videoWatchedOneTime = false;
+        closeVideoAfterWatch = false;
+        disableShowCheck = true;
+        centerImage.setManualAlphaAnimator(false);
+
+        final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+        float width = (drawRegion.right - drawRegion.left);
+        float height = (drawRegion.bottom - drawRegion.top);
+        int viewWidth = AndroidUtilities.displaySize.x;
+        int viewHeight = AndroidUtilities.displaySize.y + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+        scale = Math.max(width / viewWidth, height / viewHeight);
+
+        translationX = object.viewX + drawRegion.left + width / 2 -  viewWidth / 2;
+        translationY = object.viewY + drawRegion.top + height / 2 - viewHeight / 2;
+        clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+        int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+        int coords2[] = new int[2];
+        object.parentView.getLocationInWindow(coords2);
+        clipTop = coords2[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight) - (object.viewY + drawRegion.top) + object.clipTopAddition;
+        if (clipTop < 0) {
+            clipTop = 0;
+        }
+        clipBottom = (object.viewY + drawRegion.top + (int) height) - (coords2[1] + object.parentView.getHeight() - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight)) + object.clipBottomAddition;
+        if (clipBottom < 0) {
+            clipBottom = 0;
+        }
+        clipTop = Math.max(clipTop, clipVertical);
+        clipBottom = Math.max(clipBottom, clipVertical);
+
+
+        animationStartTime = System.currentTimeMillis();
+        animateToX = 0;
+        animateToY = 0;
+        animateToClipBottom = 0;
+        animateToClipHorizontal = 0;
+        animateToClipTop = 0;
+        animateToScale = 1.0f;
+        zoomAnimation = true;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateMessageMedia);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        currentChannelId = messageObject.messageOwner.to_id != null ? messageObject.messageOwner.to_id.channel_id : 0;
+        toggleActionBar(true, false);
+
+        currentMessageObject = messageObject;
+        TLRPC.Document document = messageObject.getDocument();
+        Bitmap thumb = object.imageReceiver.getThumbBitmap();
+        if (document != null) {
+            actionBar.setTitle(LocaleController.getString("DisappearingVideo", R.string.DisappearingVideo));
+            File f = new File(messageObject.messageOwner.attachPath);
+            if (f.exists()) {
+                preparePlayer(f);
+            } else {
+                File file = FileLoader.getPathToMessage(messageObject.messageOwner);
+                File encryptedFile = new File(file.getAbsolutePath() + ".enc");
+                if (encryptedFile.exists()) {
+                    file = encryptedFile;
+                }
+                preparePlayer(file);
+            }
+            isVideo = true;
+            centerImage.setImage(null, null, thumb != null ? new BitmapDrawable(thumb) : null, -1, null, 2);
+            long destroyTime = (long) messageObject.messageOwner.destroyTime * 1000;
+            long currentTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+            long timeToDestroy = destroyTime - currentTime;
+            long duration = messageObject.getDuration() * 1000;
+            if (duration > timeToDestroy) {
+                secretDeleteTimer.setDestroyTime(-1, -1, true);
+            } else {
+                secretDeleteTimer.setDestroyTime((long) messageObject.messageOwner.destroyTime * 1000, messageObject.messageOwner.ttl, false);
+            }
+        } else {
+            actionBar.setTitle(LocaleController.getString("DisappearingPhoto", R.string.DisappearingPhoto));
+            TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+            centerImage.setImage(sizeFull.location, null, thumb != null ? new BitmapDrawable(thumb) : null, -1, null, 2);
+            secretDeleteTimer.setDestroyTime((long) messageObject.messageOwner.destroyTime * 1000, messageObject.messageOwner.ttl, false);
+        }
+        try {
+            if (windowView.getParent() != null) {
+                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                wm.removeView(windowView);
+            }
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+
+        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+        wm.addView(windowView, windowLayoutParams);
+        secretDeleteTimer.invalidate();
+        isVisible = true;
+
+        imageMoveAnimation = new AnimatorSet();
+        imageMoveAnimation.playTogether(
+                ObjectAnimator.ofFloat(actionBar, "alpha", 0, 1.0f),
+                ObjectAnimator.ofFloat(secretDeleteTimer, "alpha", 0, 1.0f),
+                ObjectAnimator.ofInt(photoBackgroundDrawable, "alpha", 0, 255),
+                ObjectAnimator.ofFloat(secretDeleteTimer, "alpha", 0, 1.0f),
+                ObjectAnimator.ofFloat(this, "animationValue", 0, 1)
+        );
+        photoAnimationInProgress = 3;
+        photoAnimationEndRunnable = new Runnable() {
+            @Override
+            public void run() {
+                photoAnimationInProgress = 0;
+                imageMoveAnimation = null;
+                if (containerView == null) {
+                    return;
+                }
+                if (Build.VERSION.SDK_INT >= 18) {
+                    containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                }
+                containerView.invalidate();
+            }
+        };
+        imageMoveAnimation.setDuration(250);
+        imageMoveAnimation.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (photoAnimationEndRunnable != null) {
+                    photoAnimationEndRunnable.run();
+                    photoAnimationEndRunnable = null;
+                }
+            }
+        });
+        photoTransitionAnimationStartTime = System.currentTimeMillis();
+        if (Build.VERSION.SDK_INT >= 18) {
+            containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+        }
+        imageMoveAnimation.setInterpolator(new DecelerateInterpolator());
+        photoBackgroundDrawable.frame = 0;
+        photoBackgroundDrawable.drawRunnable = new Runnable() {
+            @Override
+            public void run() {
+                disableShowCheck = false;
+                object.imageReceiver.setVisible(false, true);
+            }
+        };
+        imageMoveAnimation.start();
+    }
+
+    public boolean isShowingImage(MessageObject object) {
+        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.getId() == object.getId();
+    }
+
+    private void toggleActionBar(boolean show, final boolean animated) {
+        if (show) {
+            actionBar.setVisibility(View.VISIBLE);
+        }
+        actionBar.setEnabled(show);
+        isActionBarVisible = show;
+
+        if (animated) {
+            ArrayList<Animator> arrayList = new ArrayList<>();
+            arrayList.add(ObjectAnimator.ofFloat(actionBar, "alpha", show ? 1.0f : 0.0f));
+            currentActionBarAnimation = new AnimatorSet();
+            currentActionBarAnimation.playTogether(arrayList);
+            if (!show) {
+                currentActionBarAnimation.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        if (currentActionBarAnimation != null && currentActionBarAnimation.equals(animation)) {
+                            actionBar.setVisibility(View.GONE);
+                            currentActionBarAnimation = null;
+                        }
+                    }
+                });
+            }
+
+            currentActionBarAnimation.setDuration(200);
+            currentActionBarAnimation.start();
+        } else {
+            actionBar.setAlpha(show ? 1.0f : 0.0f);
+            if (!show) {
+                actionBar.setVisibility(View.GONE);
+            }
+        }
+    }
+
+    public boolean isVisible() {
+        return isVisible;
+    }
+
+    public void destroyPhotoViewer() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateMessageMedia);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        isVisible = false;
+        currentProvider = null;
+        releasePlayer();
+        if (parentActivity != null && windowView != null) {
+            try {
+                if (windowView.getParent() != null) {
+                    WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                    wm.removeViewImmediate(windowView);
+                }
+                windowView = null;
+            } catch (Exception e) {
+                FileLog.e(e);
+            }
+        }
+        Instance = null;
+
+    }
+
+    private void onDraw(Canvas canvas) {
+        if (!isPhotoVisible) {
+            return;
+        }
+
+        float currentTranslationY;
+        float currentTranslationX;
+        float currentScale;
+        float currentClipTop;
+        float currentClipBottom;
+        float currentClipHorizontal;
+        float aty = -1;
+
+        if (imageMoveAnimation != null) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+
+            if (useOvershootForScale) {
+                final float overshoot = 1.02f;
+                final float overshootTime = 0.9f;
+                float av;
+                if (animationValue < overshootTime) {
+                    av = animationValue / overshootTime;
+                    currentScale = scale + (animateToScale * overshoot - scale) * av;
+                } else {
+                    av = 1;
+                    currentScale = animateToScale + (animateToScale * (overshoot - 1.0f)) * (1.0f - (animationValue - overshootTime) / (1.0f - overshootTime));
+                }
+                currentTranslationY = translationY + (animateToY - translationY) * av;
+                currentTranslationX = translationX + (animateToX - translationX) * av;
+                currentClipTop = clipTop + (animateToClipTop - clipTop) * av;
+                currentClipBottom = clipBottom + (animateToClipBottom - clipBottom) * av;
+                currentClipHorizontal = clipHorizontal + (animateToClipHorizontal - clipHorizontal) * av;
+            } else {
+                currentScale = scale + (animateToScale - scale) * animationValue;
+                currentTranslationY = translationY + (animateToY - translationY) * animationValue;
+                currentTranslationX = translationX + (animateToX - translationX) * animationValue;
+                currentClipTop = clipTop + (animateToClipTop - clipTop) * animationValue;
+                currentClipBottom = clipBottom + (animateToClipBottom - clipBottom) * animationValue;
+                currentClipHorizontal = clipHorizontal + (animateToClipHorizontal - clipHorizontal) * animationValue;
+            }
+            if (animateToScale == 1 && scale == 1 && translationX == 0) {
+                aty = currentTranslationY;
+            }
+
+            containerView.invalidate();
+        } else {
+            if (animationStartTime != 0) {
+                translationX = animateToX;
+                translationY = animateToY;
+                clipBottom = animateToClipBottom;
+                clipTop = animateToClipTop;
+                clipHorizontal = animateToClipHorizontal;
+                scale = animateToScale;
+                animationStartTime = 0;
+                updateMinMax(scale);
+                zoomAnimation = false;
+                useOvershootForScale = false;
+            }
+            if (!scroller.isFinished()) {
+                if (scroller.computeScrollOffset()) {
+                    if (scroller.getStartX() < maxX && scroller.getStartX() > minX) {
+                        translationX = scroller.getCurrX();
+                    }
+                    if (scroller.getStartY() < maxY && scroller.getStartY() > minY) {
+                        translationY = scroller.getCurrY();
+                    }
+                    containerView.invalidate();
+                }
+            }
+            currentScale = scale;
+            currentTranslationY = translationY;
+            currentTranslationX = translationX;
+            currentClipTop = clipTop;
+            currentClipBottom = clipBottom;
+            currentClipHorizontal = clipHorizontal;
+            if (!moving) {
+                aty = translationY;
+            }
+        }
+
+        float translateX = currentTranslationX;
+        float scaleDiff = 0;
+        float alpha = 1;
+        if (photoAnimationInProgress != 3) {
+            if (scale == 1 && aty != -1 && !zoomAnimation) {
+                float maxValue = getContainerViewHeight() / 4.0f;
+                photoBackgroundDrawable.setAlpha((int) Math.max(127, 255 * (1.0f - (Math.min(Math.abs(aty), maxValue) / maxValue))));
+            } else {
+                photoBackgroundDrawable.setAlpha(255);
+            }
+            if (!zoomAnimation && translateX > maxX) {
+                alpha = Math.min(1.0f, (translateX - maxX) / canvas.getWidth());
+                scaleDiff = alpha * 0.3f;
+                alpha = 1.0f - alpha;
+                translateX = maxX;
+            }
+        }
+
+        boolean drawTextureView = aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == View.VISIBLE;
+        canvas.save();
+        float sc = currentScale - scaleDiff;
+        canvas.translate(getContainerViewWidth() / 2 + translateX, getContainerViewHeight() / 2 + currentTranslationY);
+        canvas.scale(sc, sc);
+
+        int bitmapWidth = centerImage.getBitmapWidth();
+        int bitmapHeight = centerImage.getBitmapHeight();
+        if (drawTextureView && textureUploaded) {
+            float scale1 = bitmapWidth / (float) bitmapHeight;
+            float scale2 = videoTextureView.getMeasuredWidth() / (float) videoTextureView.getMeasuredHeight();
+            if (Math.abs(scale1 - scale2) > 0.01f) {
+                bitmapWidth = videoTextureView.getMeasuredWidth();
+                bitmapHeight = videoTextureView.getMeasuredHeight();
+            }
+        }
+
+        float scale = Math.min((float) getContainerViewHeight() / (float) bitmapHeight, (float) getContainerViewWidth() / (float) bitmapWidth);
+        int width = (int) (bitmapWidth * scale);
+        int height = (int) (bitmapHeight * scale);
+
+        canvas.clipRect(-width / 2 + currentClipHorizontal / sc, -height / 2 + currentClipTop / sc, width / 2 - currentClipHorizontal / sc, height / 2 - currentClipBottom / sc);
+
+        if (!drawTextureView || !textureUploaded || !videoCrossfadeStarted || videoCrossfadeAlpha != 1.0f) {
+            centerImage.setAlpha(alpha);
+            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
+        }
+        if (drawTextureView) {
+            if (!videoCrossfadeStarted && textureUploaded) {
+                videoCrossfadeStarted = true;
+                videoCrossfadeAlpha = 0.0f;
+                videoCrossfadeAlphaLastTime = System.currentTimeMillis();
+            }
+            canvas.translate(-width / 2, -height / 2);
+            videoTextureView.setAlpha(alpha * videoCrossfadeAlpha);
+            aspectRatioFrameLayout.draw(canvas);
+            if (videoCrossfadeStarted && videoCrossfadeAlpha < 1.0f) {
+                long newUpdateTime = System.currentTimeMillis();
+                long dt = newUpdateTime - videoCrossfadeAlphaLastTime;
+                videoCrossfadeAlphaLastTime = newUpdateTime;
+                videoCrossfadeAlpha += dt / 200.0f;
+                containerView.invalidate();
+                if (videoCrossfadeAlpha > 1.0f) {
+                    videoCrossfadeAlpha = 1.0f;
+                }
+            }
+        }
+        canvas.restore();
+    }
+
+    public float getVideoCrossfadeAlpha() {
+        return videoCrossfadeAlpha;
+    }
+
+    public void setVideoCrossfadeAlpha(float value) {
+        videoCrossfadeAlpha = value;
+        containerView.invalidate();
+    }
+
+    private boolean checkPhotoAnimation() {
+        if (photoAnimationInProgress != 0) {
+            if (Math.abs(photoTransitionAnimationStartTime - System.currentTimeMillis()) >= 500) {
+                if (photoAnimationEndRunnable != null) {
+                    photoAnimationEndRunnable.run();
+                    photoAnimationEndRunnable = null;
+                }
+                photoAnimationInProgress = 0;
+            }
+        }
+        return photoAnimationInProgress != 0;
+    }
+
+    public long getOpenTime() {
+        return openTime;
+    }
+
+    public long getCloseTime() {
+        return closeTime;
+    }
+
+    public MessageObject getCurrentMessageObject() {
+        return currentMessageObject;
+    }
+
+    public void closePhoto(boolean animated, boolean byDelete) {
+        if (parentActivity == null || !isPhotoVisible || checkPhotoAnimation()) {
+            return;
+        }
+
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateMessageMedia);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+
+        isActionBarVisible = false;
+
+        if (velocityTracker != null) {
+            velocityTracker.recycle();
+            velocityTracker = null;
+        }
+        closeTime = System.currentTimeMillis();
+        final PhotoViewer.PlaceProviderObject object;
+        if (currentMessageObject.messageOwner.media.photo instanceof TLRPC.TL_photoEmpty || currentMessageObject.messageOwner.media.document instanceof TLRPC.TL_documentEmpty) {
+            object = null;
+        } else {
+            object = currentProvider.getPlaceForPhoto(currentMessageObject, null, 0);
+        }
+        if (videoPlayer != null) {
+            videoPlayer.pause();
+        }
+        if (animated) {
+            photoAnimationInProgress = 3;
+            containerView.invalidate();
+
+            imageMoveAnimation = new AnimatorSet();
+
+            if (object != null && object.imageReceiver.getThumbBitmap() != null && !byDelete) {
+                object.imageReceiver.setVisible(false, true);
+
+                final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+                float width = (drawRegion.right - drawRegion.left);
+                float height = (drawRegion.bottom - drawRegion.top);
+                int viewWidth = AndroidUtilities.displaySize.x;
+                int viewHeight = AndroidUtilities.displaySize.y + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                animateToScale = Math.max(width / viewWidth, height / viewHeight);
+                animateToX = object.viewX + drawRegion.left + width / 2 -  viewWidth / 2;
+                animateToY = object.viewY + drawRegion.top + height / 2 - viewHeight / 2;
+                animateToClipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                animateToClipTop = coords2[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight) - (object.viewY + drawRegion.top) + object.clipTopAddition;
+                if (animateToClipTop < 0) {
+                    animateToClipTop = 0;
+                }
+                animateToClipBottom = (object.viewY + drawRegion.top + (int) height) - (coords2[1] + object.parentView.getHeight() - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight)) + object.clipBottomAddition;
+                if (animateToClipBottom < 0) {
+                    animateToClipBottom = 0;
+                }
+                animationStartTime = System.currentTimeMillis();
+                animateToClipBottom = Math.max(animateToClipBottom, clipVertical);
+                animateToClipTop = Math.max(animateToClipTop, clipVertical);
+                zoomAnimation = true;
+            } else {
+                int h = (AndroidUtilities.displaySize.y + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0));
+                animateToY = translationY >= 0 ? h : -h;
+            }
+            if (isVideo) {
+                videoCrossfadeStarted = false;
+                textureUploaded = false;
+                imageMoveAnimation.playTogether(
+                        ObjectAnimator.ofInt(photoBackgroundDrawable, "alpha", 0),
+                        ObjectAnimator.ofFloat(this, "animationValue", 0, 1),
+                        ObjectAnimator.ofFloat(actionBar, "alpha", 0),
+                        ObjectAnimator.ofFloat(secretDeleteTimer, "alpha", 0),
+                        ObjectAnimator.ofFloat(this, "videoCrossfadeAlpha", 0)
+                );
+            } else {
+                centerImage.setManualAlphaAnimator(true);
+                imageMoveAnimation.playTogether(
+                        ObjectAnimator.ofInt(photoBackgroundDrawable, "alpha", 0),
+                        ObjectAnimator.ofFloat(this, "animationValue", 0, 1),
+                        ObjectAnimator.ofFloat(actionBar, "alpha", 0),
+                        ObjectAnimator.ofFloat(secretDeleteTimer, "alpha", 0),
+                        ObjectAnimator.ofFloat(centerImage, "currentAlpha", 0.0f)
+                );
+            }
+
+            photoAnimationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    imageMoveAnimation = null;
+                    photoAnimationInProgress = 0;
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
+                    containerView.setVisibility(View.INVISIBLE);
+                    onPhotoClosed(object);
+                }
+            };
+
+            imageMoveAnimation.setInterpolator(new DecelerateInterpolator());
+            imageMoveAnimation.setDuration(250);
+            imageMoveAnimation.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (object != null) {
+                        object.imageReceiver.setVisible(true, true);
+                    }
+                    isVisible = false;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (photoAnimationEndRunnable != null) {
+                                photoAnimationEndRunnable.run();
+                                photoAnimationEndRunnable = null;
+                            }
+                        }
+                    });
+                }
+            });
+            photoTransitionAnimationStartTime = System.currentTimeMillis();
+            if (Build.VERSION.SDK_INT >= 18) {
+                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            }
+            imageMoveAnimation.start();
+        } else {
+            AnimatorSet animatorSet = new AnimatorSet();
+            animatorSet.playTogether(
+                    ObjectAnimator.ofFloat(containerView, "scaleX", 0.9f),
+                    ObjectAnimator.ofFloat(containerView, "scaleY", 0.9f),
+                    ObjectAnimator.ofInt(photoBackgroundDrawable, "alpha", 0),
+                    ObjectAnimator.ofFloat(actionBar, "alpha", 0)
+            );
+            photoAnimationInProgress = 2;
+            photoAnimationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (containerView == null) {
+                        return;
+                    }
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
+                    containerView.setVisibility(View.INVISIBLE);
+                    photoAnimationInProgress = 0;
+                    onPhotoClosed(object);
+                    containerView.setScaleX(1.0f);
+                    containerView.setScaleY(1.0f);
+                }
+            };
+            animatorSet.setDuration(200);
+            animatorSet.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (photoAnimationEndRunnable != null) {
+                        photoAnimationEndRunnable.run();
+                        photoAnimationEndRunnable = null;
+                    }
+                }
+            });
+            photoTransitionAnimationStartTime = System.currentTimeMillis();
+            if (Build.VERSION.SDK_INT >= 18) {
+                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            }
+            animatorSet.start();
+        }
+    }
+
+    private void onPhotoClosed(PhotoViewer.PlaceProviderObject object) {
+        isVisible = false;
+        currentProvider = null;
+        disableShowCheck = false;
+        releasePlayer();
+        ArrayList<File> filesToDelete = new ArrayList<>();
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                centerImage.setImageBitmap((Bitmap) null);
+                try {
+                    if (windowView.getParent() != null) {
+                        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                        wm.removeView(windowView);
+                    }
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                isPhotoVisible = false;
+            }
+        }, 50);
+    }
+
+    private void updateMinMax(float scale) {
+        int maxW = (int) (centerImage.getImageWidth() * scale - getContainerViewWidth()) / 2;
+        int maxH = (int) (centerImage.getImageHeight() * scale - getContainerViewHeight()) / 2;
+        if (maxW > 0) {
+            minX = -maxW;
+            maxX = maxW;
+        } else {
+            minX = maxX = 0;
+        }
+        if (maxH > 0) {
+            minY = -maxH;
+            maxY = maxH;
+        } else {
+            minY = maxY = 0;
+        }
+    }
+
+    private int getContainerViewWidth() {
+        return containerView.getWidth();
+    }
+
+    private int getContainerViewHeight() {
+        return containerView.getHeight();
+    }
+
+    private boolean processTouchEvent(MotionEvent ev) {
+        if (photoAnimationInProgress != 0 || animationStartTime != 0) {
+            return false;
+        }
+
+        if (ev.getPointerCount() == 1 && gestureDetector.onTouchEvent(ev) && doubleTap) {
+            doubleTap = false;
+            moving = false;
+            zooming = false;
+            checkMinMax(false);
+            return true;
+        }
+
+        if (ev.getActionMasked() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
+            discardTap = false;
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+            if (!draggingDown) {
+                if (ev.getPointerCount() == 2) {
+                    pinchStartDistance = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0));
+                    pinchStartScale = scale;
+                    pinchCenterX = (ev.getX(0) + ev.getX(1)) / 2.0f;
+                    pinchCenterY = (ev.getY(0) + ev.getY(1)) / 2.0f;
+                    pinchStartX = translationX;
+                    pinchStartY = translationY;
+                    zooming = true;
+                    moving = false;
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                } else if (ev.getPointerCount() == 1) {
+                    moveStartX = ev.getX();
+                    dragY = moveStartY = ev.getY();
+                    draggingDown = false;
+                    canDragDown = true;
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                }
+            }
+        } else if (ev.getActionMasked() == MotionEvent.ACTION_MOVE) {
+            if (ev.getPointerCount() == 2 && !draggingDown && zooming) {
+                discardTap = true;
+                scale = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0)) / pinchStartDistance * pinchStartScale;
+                translationX = (pinchCenterX - getContainerViewWidth() / 2) - ((pinchCenterX - getContainerViewWidth() / 2) - pinchStartX) * (scale / pinchStartScale);
+                translationY = (pinchCenterY - getContainerViewHeight() / 2) - ((pinchCenterY - getContainerViewHeight() / 2) - pinchStartY) * (scale / pinchStartScale);
+                updateMinMax(scale);
+                containerView.invalidate();
+            } else if (ev.getPointerCount() == 1) {
+                if (velocityTracker != null) {
+                    velocityTracker.addMovement(ev);
+                }
+                float dx = Math.abs(ev.getX() - moveStartX);
+                float dy = Math.abs(ev.getY() - dragY);
+                if (dx > AndroidUtilities.dp(3) || dy > AndroidUtilities.dp(3)) {
+                    discardTap = true;
+                }
+                if (canDragDown && !draggingDown && scale == 1 && dy >= AndroidUtilities.dp(30) && dy / 2 > dx) {
+                    draggingDown = true;
+                    moving = false;
+                    dragY = ev.getY();
+                    if (isActionBarVisible) {
+                        toggleActionBar(false, true);
+                    }
+                    return true;
+                } else if (draggingDown) {
+                    translationY = ev.getY() - dragY;
+                    containerView.invalidate();
+                } else if (!invalidCoords && animationStartTime == 0) {
+                    float moveDx = moveStartX - ev.getX();
+                    float moveDy = moveStartY - ev.getY();
+                    if (moving || scale == 1 && Math.abs(moveDy) + AndroidUtilities.dp(12) < Math.abs(moveDx) || scale != 1) {
+                        if (!moving) {
+                            moveDx = 0;
+                            moveDy = 0;
+                            moving = true;
+                            canDragDown = false;
+                        }
+
+                        moveStartX = ev.getX();
+                        moveStartY = ev.getY();
+                        updateMinMax(scale);
+                        if (translationX < minX || translationX > maxX) {
+                            moveDx /= 3.0f;
+                        }
+                        if (maxY == 0 && minY == 0) {
+                            if (translationY - moveDy < minY) {
+                                translationY = minY;
+                                moveDy = 0;
+                            } else if (translationY - moveDy > maxY) {
+                                translationY = maxY;
+                                moveDy = 0;
+                            }
+                        } else {
+                            if (translationY < minY || translationY > maxY) {
+                                moveDy /= 3.0f;
+                            }
+                        }
+
+                        translationX -= moveDx;
+                        if (scale != 1) {
+                            translationY -= moveDy;
+                        }
+                        containerView.invalidate();
+                    }
+                } else {
+                    invalidCoords = false;
+                    moveStartX = ev.getX();
+                    moveStartY = ev.getY();
+                }
+            }
+        } else if (ev.getActionMasked() == MotionEvent.ACTION_CANCEL || ev.getActionMasked() == MotionEvent.ACTION_UP || ev.getActionMasked() == MotionEvent.ACTION_POINTER_UP) {
+            if (zooming) {
+                invalidCoords = true;
+                if (scale < 1.0f) {
+                    updateMinMax(1.0f);
+                    animateTo(1.0f, 0, 0, true);
+                } else if (scale > 3.0f) {
+                    float atx = (pinchCenterX - getContainerViewWidth() / 2) - ((pinchCenterX - getContainerViewWidth() / 2) - pinchStartX) * (3.0f / pinchStartScale);
+                    float aty = (pinchCenterY - getContainerViewHeight() / 2) - ((pinchCenterY - getContainerViewHeight() / 2) - pinchStartY) * (3.0f / pinchStartScale);
+                    updateMinMax(3.0f);
+                    if (atx < minX) {
+                        atx = minX;
+                    } else if (atx > maxX) {
+                        atx = maxX;
+                    }
+                    if (aty < minY) {
+                        aty = minY;
+                    } else if (aty > maxY) {
+                        aty = maxY;
+                    }
+                    animateTo(3.0f, atx, aty, true);
+                } else {
+                    checkMinMax(true);
+                }
+                zooming = false;
+            } else if (draggingDown) {
+                if (Math.abs(dragY - ev.getY()) > getContainerViewHeight() / 6.0f) {
+                    closePhoto(true, false);
+                } else {
+                    animateTo(1, 0, 0, false);
+                }
+                draggingDown = false;
+            } else if (moving) {
+                float moveToX = translationX;
+                float moveToY = translationY;
+                updateMinMax(scale);
+                moving = false;
+                canDragDown = true;
+                if (velocityTracker != null && scale == 1) {
+                    velocityTracker.computeCurrentVelocity(1000);
+                }
+                if (translationX < minX) {
+                    moveToX = minX;
+                } else if (translationX > maxX) {
+                    moveToX = maxX;
+                }
+                if (translationY < minY) {
+                    moveToY = minY;
+                } else if (translationY > maxY) {
+                    moveToY = maxY;
+                }
+                animateTo(scale, moveToX, moveToY, false);
+            }
+        }
+        return false;
+    }
+
+    private void checkMinMax(boolean zoom) {
+        float moveToX = translationX;
+        float moveToY = translationY;
+        updateMinMax(scale);
+        if (translationX < minX) {
+            moveToX = minX;
+        } else if (translationX > maxX) {
+            moveToX = maxX;
+        }
+        if (translationY < minY) {
+            moveToY = minY;
+        } else if (translationY > maxY) {
+            moveToY = maxY;
+        }
+        animateTo(scale, moveToX, moveToY, zoom);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy, boolean isZoom) {
+        animateTo(newScale, newTx, newTy, isZoom, 250);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy, boolean isZoom, int duration) {
+        if (scale == newScale && translationX == newTx && translationY == newTy) {
+            return;
+        }
+        zoomAnimation = isZoom;
+        animateToScale = newScale;
+        animateToX = newTx;
+        animateToY = newTy;
+        animationStartTime = System.currentTimeMillis();
+        imageMoveAnimation = new AnimatorSet();
+        imageMoveAnimation.playTogether(
+                ObjectAnimator.ofFloat(this, "animationValue", 0, 1)
+        );
+        imageMoveAnimation.setInterpolator(interpolator);
+        imageMoveAnimation.setDuration(duration);
+        imageMoveAnimation.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                imageMoveAnimation = null;
+                containerView.invalidate();
+            }
+        });
+        imageMoveAnimation.start();
+    }
+
+    public void setAnimationValue(float value) {
+        animationValue = value;
+        containerView.invalidate();
+    }
+
+    public float getAnimationValue() {
+        return animationValue;
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+        return false;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        if (scale != 1) {
+            scroller.abortAnimation();
+            scroller.fling(Math.round(translationX), Math.round(translationY), Math.round(velocityX), Math.round(velocityY), (int) minX, (int) maxX, (int) minY, (int) maxY);
+            containerView.postInvalidate();
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onSingleTapConfirmed(MotionEvent e) {
+        if (discardTap) {
+            return false;
+        }
+        toggleActionBar(!isActionBarVisible, true);
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTap(MotionEvent e) {
+        if (scale == 1.0f && (translationY != 0 || translationX != 0)) {
+            return false;
+        }
+        if (animationStartTime != 0 || photoAnimationInProgress != 0) {
+            return false;
+        }
+        if (scale == 1.0f) {
+            float atx = (e.getX() - getContainerViewWidth() / 2) - ((e.getX() - getContainerViewWidth() / 2) - translationX) * (3.0f / scale);
+            float aty = (e.getY() - getContainerViewHeight() / 2) - ((e.getY() - getContainerViewHeight() / 2) - translationY) * (3.0f / scale);
+            updateMinMax(3.0f);
+            if (atx < minX) {
+                atx = minX;
+            } else if (atx > maxX) {
+                atx = maxX;
+            }
+            if (aty < minY) {
+                aty = minY;
+            } else if (aty > maxY) {
+                aty = maxY;
+            }
+            animateTo(3.0f, atx, aty, true);
+        } else {
+            animateTo(1.0f, 0, 0, true);
+        }
+        doubleTap = true;
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTapEvent(MotionEvent e) {
+        return false;
+    }
+
+    private boolean scaleToFill() {
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
deleted file mode 100644
index aa4646dfa..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ /dev/null
@@ -1,379 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.ui;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.util.SparseArray;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.FrameLayout;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ImageLoader;
-import org.telegram.messenger.ImageReceiver;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.tgnet.ConnectionsManager;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.io.File;
-import java.util.ArrayList;
-
-public class SecretPhotoViewer implements NotificationCenter.NotificationCenterDelegate {
-
-    private class FrameLayoutDrawer extends FrameLayout {
-        public FrameLayoutDrawer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
-        }
-    }
-
-    private class SecretDeleteTimer extends FrameLayout {
-        private String currentInfoString;
-        private int infoWidth;
-        private TextPaint infoPaint = null;
-        private StaticLayout infoLayout = null;
-        private Paint deleteProgressPaint;
-        private RectF deleteProgressRect = new RectF();
-        private Drawable drawable = null;
-
-        public SecretDeleteTimer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(15));
-            infoPaint.setColor(0xffffffff);
-
-            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            deleteProgressPaint.setColor(0xffe6e6e6);
-
-            drawable = getResources().getDrawable(R.drawable.circle1);
-        }
-
-        private void updateSecretTimeText() {
-            if (currentMessageObject == null) {
-                return;
-            }
-            String str = currentMessageObject.getSecretTimeString();
-            if (str == null) {
-                return;
-            }
-            if (currentInfoString == null || !currentInfoString.equals(str)) {
-                currentInfoString = str;
-                infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
-                CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                invalidate();
-            }
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-            deleteProgressRect.set(getMeasuredWidth() - AndroidUtilities.dp(30), AndroidUtilities.dp(2), getMeasuredWidth() - AndroidUtilities.dp(2), AndroidUtilities.dp(30));
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            if (currentMessageObject == null || currentMessageObject.messageOwner.destroyTime == 0) {
-                return;
-            }
-
-            if (drawable != null) {
-                drawable.setBounds(getMeasuredWidth() - AndroidUtilities.dp(32), 0, getMeasuredWidth(), AndroidUtilities.dp(32));
-                drawable.draw(canvas);
-            }
-
-            long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-            float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-            canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
-            if (progress != 0) {
-                int offset = AndroidUtilities.dp(2);
-                invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
-            }
-            updateSecretTimeText();
-
-            if (infoLayout != null) {
-                canvas.save();
-                canvas.translate(getMeasuredWidth() - AndroidUtilities.dp(38) - infoWidth, AndroidUtilities.dp(7));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        }
-    }
-
-    private Activity parentActivity;
-    private WindowManager.LayoutParams windowLayoutParams;
-    private FrameLayout windowView;
-    private FrameLayoutDrawer containerView;
-    private ImageReceiver centerImage = new ImageReceiver();
-    private SecretDeleteTimer secretDeleteTimer;
-    private boolean isVisible = false;
-
-    private MessageObject currentMessageObject = null;
-
-    @SuppressLint("StaticFieldLeak")
-    private static volatile SecretPhotoViewer Instance = null;
-    public static SecretPhotoViewer getInstance() {
-        SecretPhotoViewer localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (PhotoViewer.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new SecretPhotoViewer();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.messagesDeleted) {
-            if (currentMessageObject == null) {
-                return;
-            }
-            int channelId = (Integer) args[1];
-            if (channelId != 0) {
-                return;
-            }
-            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
-            if (markAsDeletedMessages.contains(currentMessageObject.getId())) {
-                closePhoto();
-            }
-        } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
-            if (currentMessageObject == null || secretDeleteTimer == null) {
-                return;
-            }
-            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>)args[0];
-            for(int i = 0; i < mids.size(); i++) {
-                int key = mids.keyAt(i);
-                ArrayList<Integer> arr = mids.get(key);
-                for (Integer mid : arr) {
-                    if (currentMessageObject.getId() == mid) {
-                        currentMessageObject.messageOwner.destroyTime = key;
-                        secretDeleteTimer.invalidate();
-                        return;
-                    }
-                }
-            }
-        }
-    }
-
-    public void setParentActivity(Activity activity) {
-        if (parentActivity == activity) {
-            return;
-        }
-        parentActivity = activity;
-
-        windowView = new FrameLayout(activity);
-        windowView.setBackgroundColor(0xff000000);
-        windowView.setFocusable(true);
-        windowView.setFocusableInTouchMode(true);
-        if (Build.VERSION.SDK_INT >= 23) {
-            windowView.setFitsSystemWindows(true);
-        }
-
-        containerView = new FrameLayoutDrawer(activity);
-        containerView.setFocusable(false);
-        windowView.addView(containerView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)containerView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        containerView.setLayoutParams(layoutParams);
-        containerView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_POINTER_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    closePhoto();
-                }
-                return true;
-            }
-        });
-
-        secretDeleteTimer = new SecretDeleteTimer(activity);
-        containerView.addView(secretDeleteTimer);
-        layoutParams = (FrameLayout.LayoutParams)secretDeleteTimer.getLayoutParams();
-        layoutParams.gravity = Gravity.TOP | Gravity.RIGHT;
-        layoutParams.width = AndroidUtilities.dp(100);
-        layoutParams.height = AndroidUtilities.dp(32);
-        layoutParams.rightMargin = AndroidUtilities.dp(19);
-        layoutParams.topMargin = AndroidUtilities.dp(19);
-        secretDeleteTimer.setLayoutParams(layoutParams);
-
-        windowLayoutParams = new WindowManager.LayoutParams();
-        windowLayoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
-        windowLayoutParams.format = PixelFormat.TRANSLUCENT;
-        windowLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
-        windowLayoutParams.gravity = Gravity.TOP;
-        windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
-        windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
-
-        centerImage.setParentView(containerView);
-    }
-
-    public void openPhoto(MessageObject messageObject) {
-        if (parentActivity == null || messageObject == null || messageObject.messageOwner.media == null || messageObject.messageOwner.media.photo == null) {
-            return;
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-
-        TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-        int size = sizeFull.size;
-        if (size == 0) {
-            size = -1;
-        }
-        BitmapDrawable drawable = ImageLoader.getInstance().getImageFromMemory(sizeFull.location, null, null);
-        if (drawable == null) {
-            File file = FileLoader.getPathToAttach(sizeFull);
-            Bitmap bitmap = null;
-            BitmapFactory.Options options = null;
-            if (Build.VERSION.SDK_INT < 21) {
-                options = new BitmapFactory.Options();
-                options.inDither = true;
-                options.inPreferredConfig = Bitmap.Config.ARGB_8888;
-                options.inPurgeable = true;
-                options.inSampleSize = 1;
-                options.inMutable = true;
-            }
-            try {
-                bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
-            } catch (Throwable e) {
-                FileLog.e(e);
-            }
-            if (bitmap != null) {
-                drawable = new BitmapDrawable(bitmap);
-                ImageLoader.getInstance().putImageToCache(drawable, sizeFull.location.volume_id + "_" + sizeFull.location.local_id);
-            }
-        }
-        if (drawable != null) {
-            centerImage.setImageBitmap(drawable);
-        } else {
-            centerImage.setImage(sizeFull.location, null, null, size, null, false);
-        }
-
-        currentMessageObject = messageObject;
-
-        AndroidUtilities.lockOrientation(parentActivity);
-
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeView(windowView);
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-
-        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-        wm.addView(windowView, windowLayoutParams);
-        secretDeleteTimer.invalidate();
-        isVisible = true;
-    }
-
-    public boolean isVisible() {
-        return isVisible;
-    }
-
-    public void closePhoto() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        if (parentActivity == null) {
-            return;
-        }
-        currentMessageObject = null;
-        isVisible = false;
-        AndroidUtilities.unlockOrientation(parentActivity);
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                centerImage.setImageBitmap((Bitmap)null);
-            }
-        });
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeView(windowView);
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-    }
-
-    public void destroyPhotoViewer() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        isVisible = false;
-        currentMessageObject = null;
-        if (parentActivity == null || windowView == null) {
-            return;
-        }
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeViewImmediate(windowView);
-            }
-            windowView = null;
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-        Instance = null;
-    }
-
-    private void onDraw(Canvas canvas) {
-        canvas.save();
-        canvas.translate(containerView.getWidth() / 2, containerView.getHeight() / 2);
-        Bitmap bitmap = centerImage.getBitmap();
-        if (bitmap != null) {
-            int bitmapWidth = bitmap.getWidth();
-            int bitmapHeight = bitmap.getHeight();
-
-            float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
-            float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
-            float scale = scaleX > scaleY ? scaleY : scaleX;
-            int width = (int) (bitmapWidth * scale);
-            int height = (int) (bitmapHeight * scale);
-
-            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
-            centerImage.draw(canvas);
-        }
-        canvas.restore();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 97075dd97..e0c8a9574 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -130,6 +130,7 @@
     private int numberSectionRow;
     private int numberRow;
     private int usernameRow;
+    private int bioRow;
     private int settingsSectionRow;
     private int settingsSectionRow2;
     private int enableAnimationsRow;
@@ -236,6 +237,7 @@ public void run() {
         };
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.featuredStickersDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userInfoDidLoaded);
 
         rowCount = 0;
         overscrollRow = rowCount++;
@@ -243,6 +245,7 @@ public void run() {
         numberSectionRow = rowCount++;
         numberRow = rowCount++;
         usernameRow = rowCount++;
+        bioRow = rowCount++;
         settingsSectionRow = rowCount++;
         settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
@@ -296,6 +299,7 @@ public void onFragmentDestroy() {
         MessagesController.getInstance().cancelLoadFullUser(UserConfig.getClientUserId());
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.featuredStickersDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.userInfoDidLoaded);
         avatarUpdater.clear();
     }
 
@@ -375,10 +379,17 @@ protected boolean drawChild(@NonNull Canvas canvas, @NonNull View child, long dr
 
         listView = new RecyclerListView(context);
         listView.setVerticalScrollBarEnabled(false);
-        listView.setLayoutManager(layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
+        listView.setLayoutManager(layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
+            @Override
+            public boolean supportsPredictiveItemAnimations() {
+                return false;
+            }
+        });
         listView.setGlowColor(Theme.getColor(Theme.key_avatar_backgroundActionBarBlue));
         frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
         listView.setAdapter(listAdapter);
+        listView.setItemAnimator(null);
+        listView.setLayoutAnimation(null);
         listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
             public void onItemClick(View view, final int position) {
@@ -547,6 +558,11 @@ public void onClick(DialogInterface dialog, int which) {
                     showDialog(builder.create());
                 } else if (position == usernameRow) {
                     presentFragment(new ChangeUsernameActivity());
+                } else if (position == bioRow) {
+                    TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(UserConfig.getClientUserId());
+                    if (userFull != null) {
+                        presentFragment(new ChangeBioActivity());
+                    }
                 } else if (position == numberRow) {
                     presentFragment(new ChangePhoneHelpActivity());
                 } else if (position == stickersRow) {
@@ -1003,6 +1019,11 @@ public void didReceivedNotification(int id, Object... args) {
             if (listAdapter != null) {
                 listAdapter.notifyItemChanged(stickersRow);
             }
+        } else if (id == NotificationCenter.userInfoDidLoaded) {
+            Integer uid = (Integer) args[0];
+            if (uid == UserConfig.getClientUserId()) {
+                listAdapter.notifyItemChanged(bioRow);
+            }
         }
     }
 
@@ -1286,12 +1307,23 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     } else if (position == usernameRow) {
                         TLRPC.User user = UserConfig.getCurrentUser();
                         String value;
-                        if (user != null && user.username != null && user.username.length() != 0) {
+                        if (user != null && !TextUtils.isEmpty(user.username)) {
                             value = "@" + user.username;
                         } else {
                             value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
                         }
-                        textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), false);
+                        textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), true);
+                    } else if (position == bioRow) {
+                        TLRPC.TL_userFull userFull = MessagesController.getInstance().getUserFull(UserConfig.getClientUserId());
+                        String value;
+                        if (userFull == null) {
+                            value = LocaleController.getString("Loading", R.string.Loading);
+                        } else if (userFull != null && !TextUtils.isEmpty(userFull.about)) {
+                            value = userFull.about;
+                        } else {
+                            value = LocaleController.getString("UserBioEmpty", R.string.UserBioEmpty);
+                        }
+                        textCell.setTextAndValue(value, LocaleController.getString("UserBio", R.string.UserBio), false);
                     }
                     break;
                 }
@@ -1303,7 +1335,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             int position = holder.getAdapterPosition();
             return position == textSizeRow || position == enableAnimationsRow || position == notificationRow || position == backgroundRow || position == numberRow ||
                     position == askQuestionRow || position == sendLogsRow || position == sendByEnterRow || position == autoplayGifsRow || position == privacyRow ||
-                    position == clearLogsRow || position == languageRow || position == usernameRow ||
+                    position == clearLogsRow || position == languageRow || position == usernameRow || position == bioRow ||
                     position == switchBackendButtonRow || position == telegramFaqRow || position == contactsSortRow || position == contactsReimportRow || position == saveToGalleryRow ||
                     position == stickersRow || position == raiseToSpeakRow || position == privacyPolicyRow || position == customTabsRow || position == directShareRow || position == versionRow ||
                     position == emojiRow || position == dataRow || position == themeRow || position == dumpCallStatsRow;
@@ -1382,7 +1414,7 @@ public int getItemViewType(int position) {
                 return 2;
             } else if (position == versionRow) {
                 return 5;
-            } else if (position == numberRow || position == usernameRow) {
+            } else if (position == numberRow || position == usernameRow || position == bioRow) {
                 return 6;
             } else if (position == settingsSectionRow2 || position == messagesSectionRow2 || position == supportSectionRow2 || position == numberSectionRow) {
                 return 4;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
index fe7bd8a32..6240f9c26 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
@@ -55,7 +55,7 @@ public FrameLayoutDrawer(Context context) {
 
         @Override
         protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
+            StickerPreviewViewer.this.onDraw(canvas);
         }
     }
 
@@ -423,7 +423,7 @@ public void open(TLRPC.Document sticker, boolean isRecent) {
             }
         }
         currentSet = newSet;
-        centerImage.setImage(sticker, null, sticker.thumb.location, null, "webp", true);
+        centerImage.setImage(sticker, null, sticker.thumb.location, null, "webp", 1);
         stickerEmojiLayout = null;
         for (int a = 0; a < sticker.attributes.size(); a++) {
             TLRPC.DocumentAttribute attribute = sticker.attributes.get(a);
@@ -522,7 +522,7 @@ private void onDraw(Canvas canvas) {
 
         canvas.save();
         int size = (int) (Math.min(containerView.getWidth(), containerView.getHeight()) / 1.8f);
-        canvas.translate(containerView.getWidth() / 2, Math.max(size / 2 + AndroidUtilities.statusBarHeight, (containerView.getHeight() - keyboardHeight) / 2));
+        canvas.translate(containerView.getWidth() / 2, Math.max(size / 2 + AndroidUtilities.statusBarHeight + (stickerEmojiLayout!=null ? AndroidUtilities.dp(40) : 0), (containerView.getHeight() - keyboardHeight) / 2));
         Bitmap bitmap = centerImage.getBitmap();
         if (bitmap != null) {
             float scale = 0.8f * showProgress / 0.8f;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
index 2c0dcba27..824ef2896 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
@@ -617,6 +617,7 @@ public MessagesAdapter(Context context) {
             message.from_id = 0;
             message.id = 5;
             message.media = new TLRPC.TL_messageMediaDocument();
+            message.media.flags |= 3;
             message.media.document = new TLRPC.TL_document();
             message.media.document.mime_type = "audio/mp4";
             message.media.document.thumb = new TLRPC.TL_photoSizeEmpty();
@@ -655,6 +656,7 @@ public MessagesAdapter(Context context) {
             message.from_id = UserConfig.getClientUserId();
             message.id = 1;
             message.media = new TLRPC.TL_messageMediaDocument();
+            message.media.flags |= 3;
             message.media.document = new TLRPC.TL_document();
             message.media.document.mime_type = "audio/ogg";
             message.media.document.thumb = new TLRPC.TL_photoSizeEmpty();
@@ -685,6 +687,7 @@ public MessagesAdapter(Context context) {
             message.from_id = 0;
             message.id = 1;
             message.media = new TLRPC.TL_messageMediaPhoto();
+            message.media.flags |= 3;
             message.media.photo = new TLRPC.TL_photo();
             message.media.photo.has_stickers = false;
             message.media.photo.id = 1;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
deleted file mode 100644
index fd3f4dc20..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ /dev/null
@@ -1,1676 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.ui;
-
-import android.animation.Animator;
-import android.animation.AnimatorListenerAdapter;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.SharedPreferences;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.SurfaceTexture;
-import android.media.MediaCodecInfo;
-import android.media.MediaPlayer;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.Surface;
-import android.view.TextureView;
-import android.view.View;
-import android.view.WindowManager;
-import android.view.animation.AccelerateInterpolator;
-import android.view.animation.DecelerateInterpolator;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-
-import com.coremedia.iso.IsoFile;
-import com.coremedia.iso.boxes.Box;
-import com.coremedia.iso.boxes.MediaBox;
-import com.coremedia.iso.boxes.MediaHeaderBox;
-import com.coremedia.iso.boxes.SampleSizeBox;
-import com.coremedia.iso.boxes.TrackBox;
-import com.coremedia.iso.boxes.TrackHeaderBox;
-import com.googlecode.mp4parser.util.Matrix;
-import com.googlecode.mp4parser.util.Path;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.VideoEditedInfo;
-import org.telegram.messenger.support.widget.LinearLayoutManager;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.AlertDialog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ActionBar.Theme;
-import org.telegram.ui.Adapters.MentionsAdapter;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PhotoViewerCaptionEnterView;
-import org.telegram.ui.Components.PickerBottomLayoutViewer;
-import org.telegram.ui.Components.RadialProgressView;
-import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
-import org.telegram.ui.Components.VideoSeekBarView;
-import org.telegram.ui.Components.VideoTimelineView;
-
-import java.io.File;
-import java.util.List;
-
-@TargetApi(16)
-public class VideoEditorActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private TextureView textureView;
-    private MediaPlayer videoPlayer;
-    private VideoSeekBarView videoSeekBarView;
-    private VideoTimelineView videoTimelineView;
-    private ImageView muteItem;
-    private ImageView captionItem;
-    private ImageView compressItem;
-    private ImageView playButton;
-    private RadialProgressView progressView;
-    private PhotoViewerCaptionEnterView captionEditText;
-    private PickerBottomLayoutViewer pickerView;
-
-    private MessageObject videoPreviewMessageObject;
-    private boolean tryStartRequestPreviewOnFinish;
-    private boolean loadInitialVideo;
-    private boolean inPreview;
-    private int previewViewEnd;
-    private boolean requestingPreview;
-
-    private QualityChooseView qualityChooseView;
-    private PickerBottomLayoutViewer qualityPicker;
-
-    private ChatActivity parentChatActivity;
-    private MentionsAdapter mentionsAdapter;
-    private RecyclerListView mentionListView;
-    private LinearLayoutManager mentionLayoutManager;
-    private AnimatorSet mentionListAnimation;
-    private boolean firstCaptionLayout;
-    private boolean allowMentions;
-
-    private boolean created;
-    private boolean playerPrepared;
-    private boolean muteVideo;
-
-    private int selectedCompression;
-    private int compressionsCount = -1;
-    private int previousCompression;
-
-    private String currentSubtitle;
-
-    private String videoPath;
-    private float lastProgress;
-    private boolean needSeek;
-    private VideoEditorActivityDelegate delegate;
-    private CharSequence currentCaption;
-
-    private final Object sync = new Object();
-    private Thread thread;
-
-    private int rotationValue;
-    private int originalWidth;
-    private int originalHeight;
-    private int resultWidth;
-    private int resultHeight;
-    private int bitrate;
-    private int originalBitrate;
-    private float videoDuration;
-    private long startTime;
-    private long endTime;
-    private long audioFramesSize;
-    private long videoFramesSize;
-    private int estimatedSize;
-    private long esimatedDuration;
-    private long originalSize;
-
-    public interface VideoEditorActivityDelegate {
-        void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration, String caption);
-    }
-
-    private Runnable progressRunnable = new Runnable() {
-        @Override
-        public void run() {
-            boolean playerCheck;
-
-            while (true) {
-                synchronized (sync) {
-                    try {
-                        playerCheck = videoPlayer != null && videoPlayer.isPlaying();
-                    } catch (Exception e) {
-                        playerCheck = false;
-                        FileLog.e(e);
-                    }
-                }
-                if (!playerCheck) {
-                    break;
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (videoPlayer != null && videoPlayer.isPlaying()) {
-                            float startTime;
-                            float endTime;
-                            float lrdiff;
-                            if (inPreview) {
-                                startTime = 0;
-                                endTime = previewViewEnd;
-                                lrdiff = 1.0f;
-                            } else {
-                                startTime = videoTimelineView.getLeftProgress() * videoDuration;
-                                endTime = videoTimelineView.getRightProgress() * videoDuration;
-                                lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
-                            }
-                            if (startTime == endTime) {
-                                startTime = endTime - 0.01f;
-                            }
-                            float progress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
-                            if (!inPreview) {
-                                progress = videoTimelineView.getLeftProgress() + lrdiff * progress;
-                            }
-                            if (progress > lastProgress) {
-                                videoSeekBarView.setProgress(progress);
-                                lastProgress = progress;
-                            }
-                            int position = videoPlayer.getCurrentPosition();
-                            if (videoPlayer.getCurrentPosition() >= endTime) {
-                                try {
-                                    videoPlayer.pause();
-                                    onPlayComplete();
-                                    try {
-                                        getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                                    } catch (Exception e) {
-                                        FileLog.e(e);
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e(e);
-                                }
-                            }
-                        }
-                    }
-                });
-                try {
-                    Thread.sleep(50);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            synchronized (sync) {
-                thread = null;
-            }
-        }
-    };
-
-    private class QualityChooseView extends View {
-
-        private Paint paint;
-        private TextPaint textPaint;
-
-        private int circleSize;
-        private int gapSize;
-        private int sideSide;
-        private int lineSize;
-
-        private boolean moving;
-        private boolean startMoving;
-        private float startX;
-
-        private int startMovingQuality;
-
-        public QualityChooseView(Context context) {
-            super(context);
-
-            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            textPaint.setTextSize(AndroidUtilities.dp(12));
-            textPaint.setColor(0xffcdcdcd);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            float x = event.getX();
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                getParent().requestDisallowInterceptTouchEvent(true);
-                for (int a = 0; a < compressionsCount; a++) {
-                    int cx = sideSide + (lineSize + gapSize * 2 + circleSize) * a + circleSize / 2;
-                    if (x > cx - AndroidUtilities.dp(15) && x < cx + AndroidUtilities.dp(15)) {
-                        startMoving = a == selectedCompression;
-                        startX = x;
-                        startMovingQuality = selectedCompression;
-                        break;
-                    }
-                }
-            } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                if (startMoving) {
-                    if (Math.abs(startX - x) >= AndroidUtilities.getPixelsInCM(0.5f, true)) {
-                        moving = true;
-                        startMoving = false;
-                    }
-                } else if (moving) {
-                    for (int a = 0; a < compressionsCount; a++) {
-                        int cx = sideSide + (lineSize + gapSize * 2 + circleSize) * a + circleSize / 2;
-                        int diff = lineSize / 2 + circleSize / 2 + gapSize;
-                        if (x > cx - diff && x < cx + diff) {
-                            if (selectedCompression != a) {
-                                selectedCompression = a;
-                                didChangedCompressionLevel(false);
-                                invalidate();
-                            }
-                            break;
-                        }
-                    }
-                }
-            } else if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
-                if (!moving) {
-                    for (int a = 0; a < compressionsCount; a++) {
-                        int cx = sideSide + (lineSize + gapSize * 2 + circleSize) * a + circleSize / 2;
-                        if (x > cx - AndroidUtilities.dp(15) && x < cx + AndroidUtilities.dp(15)) {
-                            if (selectedCompression != a) {
-                                selectedCompression = a;
-                                didChangedCompressionLevel(true);
-                                invalidate();
-                            }
-                            break;
-                        }
-                    }
-                } else {
-                    if (selectedCompression != startMovingQuality) {
-                        requestVideoPreview(1);
-                    }
-                }
-                startMoving = false;
-                moving = false;
-            }
-            return true;
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-            int width = MeasureSpec.getSize(widthMeasureSpec);
-            circleSize = AndroidUtilities.dp(12);
-            gapSize = AndroidUtilities.dp(2);
-            sideSide = AndroidUtilities.dp(18);
-            lineSize = (getMeasuredWidth() - circleSize * compressionsCount - gapSize * 8 - sideSide * 2) / (compressionsCount - 1);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            int cy = getMeasuredHeight() / 2 + AndroidUtilities.dp(6);
-            for (int a = 0; a < compressionsCount; a++) {
-                int cx = sideSide + (lineSize + gapSize * 2 + circleSize) * a + circleSize / 2;
-                if (a <= selectedCompression) {
-                    paint.setColor(0xff53aeef);
-                } else {
-                    paint.setColor(0xff222222);
-                }
-                String text;
-                if (a == compressionsCount - 1) {
-                    text = originalHeight + "p";
-                } else if (a == 0) {
-                    text = "240p";
-                } else if (a == 1) {
-                    text = "360p";
-                } else if (a == 2) {
-                    text = "480p";
-                } else {
-                    text = "720p";
-                }
-                float width = textPaint.measureText(text);
-                canvas.drawCircle(cx, cy, a == selectedCompression ? AndroidUtilities.dp(8) : circleSize / 2, paint);
-                canvas.drawText(text, cx - width / 2, cy - AndroidUtilities.dp(16), textPaint);
-                if (a != 0) {
-                    int x = cx - circleSize / 2 - gapSize - lineSize;
-                    canvas.drawRect(x, cy - AndroidUtilities.dp(1), x + lineSize, cy + AndroidUtilities.dp(2), paint);
-                }
-            }
-        }
-    }
-
-    public VideoEditorActivity(Bundle args) {
-        super(args);
-        videoPath = args.getString("videoPath");
-    }
-
-    private void destroyPlayer() {
-        if (videoPlayer != null) {
-            try {
-                if (videoPlayer != null) {
-                    videoPlayer.stop();
-                }
-            } catch (Exception ignore) {
-
-            }
-            try {
-                if (videoPlayer != null) {
-                    videoPlayer.release();
-                }
-            } catch (Exception ignore) {
-
-            }
-            videoPlayer = null;
-        }
-    }
-
-    private boolean reinitPlayer(String path) {
-        destroyPlayer();
-        if (playButton != null) {
-            playButton.setImageResource(R.drawable.video_edit_play);
-        }
-        lastProgress = 0;
-        videoPlayer = new MediaPlayer();
-        videoPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
-            @Override
-            public void onPrepared(MediaPlayer mp) {
-                playerPrepared = true;
-                previewViewEnd = videoPlayer.getDuration();
-                if (videoTimelineView != null && videoPlayer != null) {
-                    if (inPreview) {
-                        videoPlayer.seekTo(0);
-                    } else {
-                        videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-                    }
-                }
-            }
-        });
-        try {
-            videoPlayer.setDataSource(path);
-            videoPlayer.prepareAsync();
-        } catch (Exception e) {
-            FileLog.e(e);
-            return false;
-        }
-        float volume = muteVideo ? 0.0f : 1.0f;
-        if (videoPlayer != null) {
-            videoPlayer.setVolume(volume, volume);
-        }
-        inPreview = !path.equals(videoPath);
-        if (textureView != null) {
-            try {
-                Surface s = new Surface(textureView.getSurfaceTexture());
-                videoPlayer.setSurface(s);
-            } catch (Exception e) {
-                FileLog.e(e);
-            }
-        }
-        return true;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        if (created) {
-            return true;
-        }
-        if (videoPath == null || !processOpenVideo()) {
-            return false;
-        }
-        if (!reinitPlayer(videoPath)) {
-            return false;
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingFailed);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
-
-        created = true;
-
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        try {
-            getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-        if (videoTimelineView != null) {
-            videoTimelineView.destroy();
-        }
-        if (videoPlayer != null) {
-            try {
-                videoPlayer.stop();
-                videoPlayer.release();
-                videoPlayer = null;
-            } catch (Exception e) {
-                FileLog.e(e);
-            }
-        }
-        if (captionEditText != null) {
-            captionEditText.onDestroy();
-        }
-        requestVideoPreview(0);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FilePreparingFailed);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileNewChunkAvailable);
-        super.onFragmentDestroy();
-    }
-
-    @Override
-    public View createView(Context context) {
-        actionBar.setBackgroundColor(Theme.ACTION_BAR_VIDEO_EDIT_COLOR);
-        actionBar.setTitleColor(0xffffffff);
-        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
-        actionBar.setSubtitleColor(0xffffffff);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    if (pickerView.getVisibility() != View.VISIBLE) {
-                        closeCaptionEnter(false);
-                        return;
-                    }
-                    finishFragment();
-                } else if (id == 1) {
-                    closeCaptionEnter(true);
-                }
-            }
-        });
-
-        fragmentView = new SizeNotifierFrameLayoutPhoto(context) {
-
-            int lastWidth;
-
-            @Override
-            public boolean dispatchKeyEventPreIme(KeyEvent event) {
-                if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
-                    if (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible()) {
-                        closeCaptionEnter(false);
-                        return false;
-                    }
-                }
-                return super.dispatchKeyEventPreIme(event);
-            }
-
-            @Override
-            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                int widthSize = MeasureSpec.getSize(widthMeasureSpec);
-                int heightSize = MeasureSpec.getSize(heightMeasureSpec);
-                setMeasuredDimension(widthSize, heightSize);
-                if (!AndroidUtilities.isTablet()) {
-                    heightSize = AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight();
-                } else {
-                    heightSize = AndroidUtilities.dp(424);
-                }
-
-                measureChildWithMargins(captionEditText, widthMeasureSpec, 0, heightMeasureSpec, 0);
-                int inputFieldHeight = captionEditText.getMeasuredHeight();
-
-                int childCount = getChildCount();
-                for (int i = 0; i < childCount; i++) {
-                    View child = getChildAt(i);
-                    if (child.getVisibility() == GONE || child == captionEditText) {
-                        continue;
-                    }
-                    if (captionEditText.isPopupView(child)) {
-                        if (AndroidUtilities.isInMultiwindow || AndroidUtilities.isTablet()) {
-                            if (AndroidUtilities.isTablet()) {
-                                child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320), MeasureSpec.getSize(heightMeasureSpec) - inputFieldHeight), MeasureSpec.EXACTLY));
-                            } else {
-                                child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(heightSize - inputFieldHeight - AndroidUtilities.statusBarHeight, MeasureSpec.EXACTLY));
-                            }
-                        } else {
-                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, MeasureSpec.EXACTLY));
-                        }
-                    } else if (child == textureView) {
-                        int width = widthSize;
-                        int height = heightSize - AndroidUtilities.dp(14 + 152);
-
-                        int vwidth = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
-                        int vheight = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-                        float wr = (float) width / (float) vwidth;
-                        float hr = (float) height / (float) vheight;
-                        float ar = (float) vwidth / (float) vheight;
-
-                        if (wr > hr) {
-                            width = (int) (height * ar);
-                        } else {
-                            height = (int) (width / ar);
-                        }
-
-                        child.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY));
-                    } else {
-                        measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
-                    }
-                }
-
-                if (lastWidth != widthSize) {
-                    videoTimelineView.clearFrames();
-                    lastWidth = widthSize;
-                }
-            }
-
-            @Override
-            protected void onLayout(boolean changed, int l, int t, int r, int b) {
-                final int count = getChildCount();
-                int paddingBottom = getKeyboardHeight() <= AndroidUtilities.dp(20) && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet() ? captionEditText.getEmojiPadding() : 0;
-
-                int heightSize;
-                if (!AndroidUtilities.isTablet()) {
-                    heightSize = AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight();
-                } else {
-                    heightSize = AndroidUtilities.dp(424);
-                }
-
-                for (int i = 0; i < count; i++) {
-                    final View child = getChildAt(i);
-                    if (child.getVisibility() == GONE) {
-                        continue;
-                    }
-                    final LayoutParams lp = (LayoutParams) child.getLayoutParams();
-
-                    final int width = child.getMeasuredWidth();
-                    final int height = child.getMeasuredHeight();
-
-                    int childLeft;
-                    int childTop;
-
-                    int gravity = lp.gravity;
-                    if (gravity == -1) {
-                        gravity = Gravity.TOP | Gravity.LEFT;
-                    }
-
-                    final int absoluteGravity = gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
-                    final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;
-
-                    switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
-                        case Gravity.CENTER_HORIZONTAL:
-                            childLeft = (r - l - width) / 2 + lp.leftMargin - lp.rightMargin;
-                            break;
-                        case Gravity.RIGHT:
-                            childLeft = r - width - lp.rightMargin;
-                            break;
-                        case Gravity.LEFT:
-                        default:
-                            childLeft = lp.leftMargin;
-                    }
-
-                    switch (verticalGravity) {
-                        case Gravity.TOP:
-                            childTop = lp.topMargin;
-                            break;
-                        case Gravity.CENTER_VERTICAL:
-                            childTop = (heightSize - height) / 2 + lp.topMargin - lp.bottomMargin;
-                            break;
-                        case Gravity.BOTTOM:
-                            childTop = heightSize - height - lp.bottomMargin;
-                            break;
-                        default:
-                            childTop = lp.topMargin;
-                    }
-
-                    if (child == mentionListView) {
-                        childTop = ((b - paddingBottom) - t) - height - lp.bottomMargin;
-                        if (pickerView.getVisibility() == VISIBLE || firstCaptionLayout && !captionEditText.isPopupShowing() && !captionEditText.isKeyboardVisible() && captionEditText.getEmojiPadding() == 0) {
-                            childTop += AndroidUtilities.dp(400);
-                        } else {
-                            childTop -= captionEditText.getMeasuredHeight();
-                        }
-                    } else if (child == captionEditText) {
-                        childTop = ((b - paddingBottom) - t) - height - lp.bottomMargin;
-                        if (pickerView.getVisibility() == VISIBLE || firstCaptionLayout && !captionEditText.isPopupShowing() && !captionEditText.isKeyboardVisible() && captionEditText.getEmojiPadding() == 0) {
-                            childTop += AndroidUtilities.dp(400);
-                        } else {
-                            firstCaptionLayout = false;
-                        }
-                    } else if (captionEditText.isPopupView(child)) {
-                        if (AndroidUtilities.isInMultiwindow || AndroidUtilities.isTablet()) {
-                            childTop = captionEditText.getTop() - child.getMeasuredHeight() + AndroidUtilities.dp(1);
-                        } else {
-                            childTop = captionEditText.getBottom();
-                        }
-                    } else if (child == textureView) {
-                        childLeft = (r - l - textureView.getMeasuredWidth()) / 2;
-                        if (AndroidUtilities.isTablet()) {
-                            childTop = (heightSize - AndroidUtilities.dp(14 + 152) - textureView.getMeasuredHeight()) / 2 + AndroidUtilities.dp(14);
-                        } else {
-                            childTop = (heightSize - AndroidUtilities.dp(14 + 152) - textureView.getMeasuredHeight()) / 2 + AndroidUtilities.dp(14);
-                        }
-                    }
-                    child.layout(childLeft, childTop, childLeft + width, childTop + height);
-                }
-
-                notifyHeightChanged();
-            }
-        };
-        fragmentView.setBackgroundColor(0xff000000);
-        SizeNotifierFrameLayoutPhoto frameLayout = (SizeNotifierFrameLayoutPhoto) fragmentView;
-        frameLayout.setWithoutWindow(true);
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        pickerView = new PickerBottomLayoutViewer(context);
-        pickerView.setBackgroundColor(0);
-        pickerView.updateSelectedCount(0, false);
-        frameLayout.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
-        pickerView.cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                finishFragment();
-            }
-        });
-        pickerView.doneButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                synchronized (sync) {
-                    if (videoPlayer != null) {
-                        try {
-                            videoPlayer.stop();
-                            videoPlayer.release();
-                            videoPlayer = null;
-                        } catch (Exception e) {
-                            FileLog.e(e);
-                        }
-                    }
-                }
-                if (delegate != null) {
-                    if (!muteVideo && (compressItem.getVisibility() == View.GONE || compressItem.getVisibility() == View.VISIBLE && selectedCompression == compressionsCount - 1)) {
-                        delegate.didFinishEditVideo(videoPath, startTime, endTime, originalWidth, originalHeight, rotationValue, originalWidth, originalHeight, muteVideo ? -1 : originalBitrate, estimatedSize, esimatedDuration, currentCaption != null ? currentCaption.toString() : null);
-                    } else {
-                        if (muteVideo) {
-                            selectedCompression = 1;
-                            updateWidthHeightBitrateForCompression();
-                        }
-                        delegate.didFinishEditVideo(videoPath, startTime, endTime, resultWidth, resultHeight, rotationValue, originalWidth, originalHeight, muteVideo ? -1 : bitrate, estimatedSize, esimatedDuration, currentCaption != null ? currentCaption.toString() : null);
-                    }
-                }
-                finishFragment();
-            }
-        });
-
-        LinearLayout itemsLayout = new LinearLayout(context);
-        itemsLayout.setOrientation(LinearLayout.HORIZONTAL);
-        pickerView.addView(itemsLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 48, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
-
-        captionItem = new ImageView(context);
-        captionItem.setScaleType(ImageView.ScaleType.CENTER);
-        captionItem.setImageResource(TextUtils.isEmpty(currentCaption) ? R.drawable.photo_text : R.drawable.photo_text2);
-        captionItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        itemsLayout.addView(captionItem, LayoutHelper.createLinear(56, 48));
-        captionItem.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                captionEditText.setFieldText(currentCaption);
-                pickerView.setVisibility(View.GONE);
-                firstCaptionLayout = true;
-                if (!AndroidUtilities.isTablet()) {
-                    videoSeekBarView.setVisibility(View.GONE);
-                    videoTimelineView.setVisibility(View.GONE);
-                }
-                captionEditText.openKeyboard();
-                actionBar.setTitle(muteVideo ? LocaleController.getString("GifCaption", R.string.GifCaption) : LocaleController.getString("VideoCaption", R.string.VideoCaption));
-                actionBar.setSubtitle(null);
-            }
-        });
-
-        compressItem = new ImageView(context);
-        compressItem.setScaleType(ImageView.ScaleType.CENTER);
-        compressItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-        compressItem.setVisibility(compressionsCount > 1 ? View.VISIBLE : View.GONE);
-        itemsLayout.addView(compressItem, LayoutHelper.createLinear(56, 48));
-        compressItem.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                showQualityView(true);
-                requestVideoPreview(1);
-            }
-        });
-        if (Build.VERSION.SDK_INT < 18) {
-            try {
-                MediaCodecInfo codecInfo = MediaController.selectCodec(MediaController.MIME_TYPE);
-                if (codecInfo == null) {
-                    compressItem.setVisibility(View.GONE);
-                } else {
-                    String name = codecInfo.getName();
-                    if (name.equals("OMX.google.h264.encoder") ||
-                            name.equals("OMX.ST.VFM.H264Enc") ||
-                            name.equals("OMX.Exynos.avc.enc") ||
-                            name.equals("OMX.MARVELL.VIDEO.HW.CODA7542ENCODER") ||
-                            name.equals("OMX.MARVELL.VIDEO.H264ENCODER") ||
-                            name.equals("OMX.k3.video.encoder.avc") || //fix this later
-                            name.equals("OMX.TI.DUCATI1.VIDEO.H264E")) { //fix this later
-                        compressItem.setVisibility(View.GONE);
-                    } else {
-                        if (MediaController.selectColorFormat(codecInfo, MediaController.MIME_TYPE) == 0) {
-                            compressItem.setVisibility(View.GONE);
-                        }
-                    }
-                }
-            } catch (Exception e) {
-                compressItem.setVisibility(View.GONE);
-                FileLog.e(e);
-            }
-        }
-
-        muteItem = new ImageView(context);
-        muteItem.setScaleType(ImageView.ScaleType.CENTER);
-        muteItem.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
-//        muteItem.setVisibility(videoDuration >= 30000 ? View.GONE : View.VISIBLE);
-        itemsLayout.addView(muteItem, LayoutHelper.createLinear(56, 48));
-        muteItem.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                muteVideo = !muteVideo;
-                updateMuteButton();
-            }
-        });
-
-        videoTimelineView = new VideoTimelineView(context);
-        videoTimelineView.setVideoPath(videoPath);
-        videoTimelineView.setDelegate(new VideoTimelineView.VideoTimelineViewDelegate() {
-            @Override
-            public void onLeftProgressChanged(float progress) {
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                try {
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
-                        playButton.setImageResource(R.drawable.video_edit_play);
-                        try {
-                            getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                        } catch (Exception e) {
-                            FileLog.e(e);
-                        }
-                    }
-                    videoPlayer.setOnSeekCompleteListener(null);
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-                needSeek = true;
-                videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-                updateVideoInfo();
-            }
-
-            @Override
-            public void onRifhtProgressChanged(float progress) {
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                try {
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
-                        playButton.setImageResource(R.drawable.video_edit_play);
-                        try {
-                            getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                        } catch (Exception e) {
-                            FileLog.e(e);
-                        }
-                    }
-                    videoPlayer.setOnSeekCompleteListener(null);
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-                needSeek = true;
-                videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-                updateVideoInfo();
-            }
-
-            @Override
-            public void didStartDragging() {
-
-            }
-
-            @Override
-            public void didStopDragging() {
-
-            }
-        });
-        frameLayout.addView(videoTimelineView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 44, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 67));
-
-        videoSeekBarView = new VideoSeekBarView(context);
-        videoSeekBarView.setDelegate(new VideoSeekBarView.SeekBarDelegate() {
-            @Override
-            public void onSeekBarDrag(float progress) {
-                if (progress < videoTimelineView.getLeftProgress()) {
-                    progress = videoTimelineView.getLeftProgress();
-                    videoSeekBarView.setProgress(progress);
-                } else if (progress > videoTimelineView.getRightProgress()) {
-                    progress = videoTimelineView.getRightProgress();
-                    videoSeekBarView.setProgress(progress);
-                }
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                try {
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                    lastProgress = progress;
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-        });
-        frameLayout.addView(videoSeekBarView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 40, Gravity.LEFT | Gravity.BOTTOM, 11, 0, 11, 112));
-
-        textureView = new TextureView(context);
-        textureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
-            @Override
-            public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
-                if (textureView == null || !textureView.isAvailable() || videoPlayer == null) {
-                    return;
-                }
-                try {
-                    Surface s = new Surface(textureView.getSurfaceTexture());
-                    videoPlayer.setSurface(s);
-                    if (playerPrepared) {
-                        if (inPreview) {
-                            videoPlayer.seekTo(0);
-                        } else {
-                            videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-                        }
-                    }
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-
-            @Override
-            public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
-
-            }
-
-            @Override
-            public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
-                if (videoPlayer == null) {
-                    return true;
-                }
-                videoPlayer.setDisplay(null);
-                return true;
-            }
-
-            @Override
-            public void onSurfaceTextureUpdated(SurfaceTexture surface) {
-
-            }
-        });
-        frameLayout.addView(textureView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 14, 0, 140));
-
-        progressView = new RadialProgressView(context);
-        progressView.setProgressColor(0xffffffff);
-        progressView.setBackgroundResource(R.drawable.circle_big);
-        progressView.setVisibility(View.INVISIBLE);
-        frameLayout.addView(progressView, LayoutHelper.createFrame(54, 54, Gravity.CENTER, 0, 0, 0, 70));
-
-        playButton = new ImageView(context);
-        playButton.setScaleType(ImageView.ScaleType.CENTER);
-        playButton.setImageResource(R.drawable.video_edit_play);
-        playButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (videoPlayer == null || !playerPrepared || requestingPreview || loadInitialVideo) {
-                    return;
-                }
-                if (videoPlayer.isPlaying()) {
-                    videoPlayer.pause();
-                    playButton.setImageResource(R.drawable.video_edit_play);
-                    try {
-                        getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                    } catch (Exception e) {
-                        FileLog.e(e);
-                    }
-                } else {
-                    try {
-                        playButton.setImageDrawable(null);
-                        lastProgress = 0;
-                        if (needSeek) {
-                            videoPlayer.seekTo((int) (videoDuration * videoSeekBarView.getProgress()));
-                            needSeek = false;
-                        }
-                        videoPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
-                            @Override
-                            public void onSeekComplete(MediaPlayer mp) {
-                                if (inPreview) {
-                                    float startTime = 0;
-                                    float endTime = 1.0f;
-                                    lastProgress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
-                                } else {
-                                    float startTime = videoTimelineView.getLeftProgress() * videoDuration;
-                                    float endTime = videoTimelineView.getRightProgress() * videoDuration;
-                                    if (startTime == endTime) {
-                                        startTime = endTime - 0.01f;
-                                    }
-                                    lastProgress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
-                                    float lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
-                                    lastProgress = videoTimelineView.getLeftProgress() + lrdiff * lastProgress;
-                                    videoSeekBarView.setProgress(lastProgress);
-                                }
-                            }
-                        });
-                        videoPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-                            @Override
-                            public void onCompletion(MediaPlayer mp) {
-                                try {
-                                    getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                                } catch (Exception e) {
-                                    FileLog.e(e);
-                                }
-                                onPlayComplete();
-                            }
-                        });
-                        videoPlayer.start();
-                        try {
-                            getParentActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-                        } catch (Exception e) {
-                            FileLog.e(e);
-                        }
-                        synchronized (sync) {
-                            if (thread == null) {
-                                thread = new Thread(progressRunnable);
-                                thread.start();
-                            }
-                        }
-                    } catch (Exception e) {
-                        FileLog.e(e);
-                    }
-                }
-            }
-        });
-        frameLayout.addView(playButton, LayoutHelper.createFrame(100, 100, Gravity.CENTER, 0, 0, 0, 70));
-
-        if (captionEditText != null) {
-            captionEditText.onDestroy();
-        }
-        captionEditText = new PhotoViewerCaptionEnterView(context, frameLayout, null);
-        captionEditText.setForceFloatingEmoji(AndroidUtilities.isTablet());
-        captionEditText.setDelegate(new PhotoViewerCaptionEnterView.PhotoViewerCaptionEnterViewDelegate() {
-
-            private int previousSize;
-            private int[] location = new int[2];
-            private int previousY;
-
-            @Override
-            public void onCaptionEnter() {
-                closeCaptionEnter(true);
-            }
-
-            @Override
-            public void onTextChanged(CharSequence text) {
-                if (mentionsAdapter != null && captionEditText != null && parentChatActivity != null && text != null) {
-                    mentionsAdapter.searchUsernameOrHashtag(text.toString(), captionEditText.getCursorPosition(), parentChatActivity.messages);
-                }
-            }
-
-            @Override
-            public void onWindowSizeChanged(int size) {
-                int height = AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0));
-                if (size - ActionBar.getCurrentActionBarHeight() * 2 < height) {
-                    allowMentions = false;
-                    if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
-                        mentionListView.setVisibility(View.INVISIBLE);
-                    }
-                } else {
-                    allowMentions = true;
-                    if (mentionListView != null && mentionListView.getVisibility() == View.INVISIBLE) {
-                        mentionListView.setVisibility(View.VISIBLE);
-                    }
-                }
-                fragmentView.getLocationInWindow(location);
-                if (previousSize != size || previousY != location[1]) {
-                    fragmentView.requestLayout();
-                    previousSize = size;
-                    previousY = location[1];
-                }
-            }
-        });
-        frameLayout.addView(captionEditText, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT));
-        captionEditText.onCreate();
-
-        mentionListView = new RecyclerListView(context);
-        mentionListView.setTag(5);
-        mentionLayoutManager = new LinearLayoutManager(context) {
-            @Override
-            public boolean supportsPredictiveItemAnimations() {
-                return false;
-            }
-        };
-        mentionLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
-        mentionListView.setLayoutManager(mentionLayoutManager);
-        mentionListView.setBackgroundColor(0x7f000000);
-        mentionListView.setVisibility(View.GONE);
-        mentionListView.setClipToPadding(true);
-        mentionListView.setOverScrollMode(RecyclerListView.OVER_SCROLL_NEVER);
-        frameLayout.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
-
-        mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(context, true, 0, new MentionsAdapter.MentionsAdapterDelegate() {
-            @Override
-            public void needChangePanelVisibility(boolean show) {
-                if (show) {
-                    FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
-                    int height = 36 * Math.min(3, mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0);
-                    layoutParams3.height = AndroidUtilities.dp(height);
-                    layoutParams3.topMargin = -AndroidUtilities.dp(height);
-                    mentionListView.setLayoutParams(layoutParams3);
-
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.VISIBLE) {
-                        mentionListView.setAlpha(1.0f);
-                        return;
-                    } else {
-                        mentionLayoutManager.scrollToPositionWithOffset(0, 10000);
-                    }
-                    if (allowMentions) {
-                        mentionListView.setVisibility(View.VISIBLE);
-                        mentionListAnimation = new AnimatorSet();
-                        mentionListAnimation.playTogether(
-                                ObjectAnimator.ofFloat(mentionListView, "alpha", 0.0f, 1.0f)
-                        );
-                        mentionListAnimation.addListener(new AnimatorListenerAdapter() {
-                            @Override
-                            public void onAnimationEnd(Animator animation) {
-                                if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                    mentionListAnimation = null;
-                                }
-                            }
-                        });
-                        mentionListAnimation.setDuration(200);
-                        mentionListAnimation.start();
-                    } else {
-                        mentionListView.setAlpha(1.0f);
-                        mentionListView.setVisibility(View.INVISIBLE);
-                    }
-                } else {
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.GONE) {
-                        return;
-                    }
-                    if (allowMentions) {
-                        mentionListAnimation = new AnimatorSet();
-                        mentionListAnimation.playTogether(
-                                ObjectAnimator.ofFloat(mentionListView, "alpha", 0.0f)
-                        );
-                        mentionListAnimation.addListener(new AnimatorListenerAdapter() {
-                            @Override
-                            public void onAnimationEnd(Animator animation) {
-                                if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                    mentionListView.setVisibility(View.GONE);
-                                    mentionListAnimation = null;
-                                }
-                            }
-                        });
-                        mentionListAnimation.setDuration(200);
-                        mentionListAnimation.start();
-                    } else {
-                        mentionListView.setVisibility(View.GONE);
-                    }
-                }
-            }
-
-            @Override
-            public void onContextSearch(boolean searching) {
-
-            }
-
-            @Override
-            public void onContextClick(TLRPC.BotInlineResult result) {
-
-            }
-        }));
-        mentionsAdapter.setAllowNewMentions(false);
-
-        mentionListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
-            @Override
-            public void onItemClick(View view, int position) {
-                Object object = mentionsAdapter.getItem(position);
-                int start = mentionsAdapter.getResultStartPosition();
-                int len = mentionsAdapter.getResultLength();
-                if (object instanceof TLRPC.User) {
-                    TLRPC.User user = (TLRPC.User) object;
-                    if (user != null) {
-                        captionEditText.replaceWithText(start, len, "@" + user.username + " ");
-                    }
-                } else if (object instanceof String) {
-                    captionEditText.replaceWithText(start, len, object + " ");
-                }
-            }
-        });
-
-        mentionListView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemClick(View view, int position) {
-                if (getParentActivity() == null) {
-                    return false;
-                }
-                Object object = mentionsAdapter.getItem(position);
-                if (object instanceof String) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
-                    builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            mentionsAdapter.clearRecentHashtags();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        if (compressionsCount > 1) {
-            qualityPicker = new PickerBottomLayoutViewer(context);
-            qualityPicker.setBackgroundColor(0);
-            qualityPicker.updateSelectedCount(0, false);
-            qualityPicker.setTranslationY(AndroidUtilities.dp(120));
-            qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
-            frameLayout.addView(qualityPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
-            qualityPicker.cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    selectedCompression = previousCompression;
-                    didChangedCompressionLevel(false);
-                    showQualityView(false);
-                    requestVideoPreview(2);
-                }
-            });
-            qualityPicker.doneButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    showQualityView(false);
-                    requestVideoPreview(2);
-                }
-            });
-
-            qualityChooseView = new QualityChooseView(context);
-            qualityChooseView.setTranslationY(AndroidUtilities.dp(120));
-            qualityChooseView.setVisibility(View.INVISIBLE);
-            frameLayout.addView(qualityChooseView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 90, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 44));
-        }
-
-        updateVideoInfo();
-        updateMuteButton();
-
-        return fragmentView;
-    }
-
-    private void didChangedCompressionLevel(boolean request) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putInt("compress_video2", selectedCompression);
-        editor.commit();
-        updateWidthHeightBitrateForCompression();
-        updateVideoInfo();
-        if (request) {
-            requestVideoPreview(1);
-        }
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if (pickerView.getVisibility() == View.GONE) {
-            closeCaptionEnter(true);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (textureView != null) {
-            try {
-                if (playerPrepared && !videoPlayer.isPlaying()) {
-                    videoPlayer.seekTo((int) (videoSeekBarView.getProgress() * videoDuration));
-                }
-            } catch (Exception e) {
-                FileLog.e(e);
-            }
-        }
-    }
-
-    private void showQualityView(final boolean show) {
-        if (show) {
-            previousCompression = selectedCompression;
-        }
-        AnimatorSet animatorSet = new AnimatorSet();
-        if (show) {
-            animatorSet.playTogether(
-                    ObjectAnimator.ofFloat(pickerView, "translationY", 0, AndroidUtilities.dp(152)),
-                    ObjectAnimator.ofFloat(videoTimelineView, "translationY", 0, AndroidUtilities.dp(152)),
-                    ObjectAnimator.ofFloat(videoSeekBarView, "translationY", 0, AndroidUtilities.dp(152)));
-        } else {
-            animatorSet.playTogether(
-                    ObjectAnimator.ofFloat(qualityChooseView, "translationY", 0, AndroidUtilities.dp(120)),
-                    ObjectAnimator.ofFloat(qualityPicker, "translationY", 0, AndroidUtilities.dp(120)));
-        }
-        animatorSet.addListener(new AnimatorListenerAdapter() {
-            @Override
-            public void onAnimationEnd(Animator animation) {
-                AnimatorSet animatorSet = new AnimatorSet();
-                if (show) {
-                    qualityChooseView.setVisibility(View.VISIBLE);
-                    qualityPicker.setVisibility(View.VISIBLE);
-                    animatorSet.playTogether(
-                            ObjectAnimator.ofFloat(qualityChooseView, "translationY", 0),
-                            ObjectAnimator.ofFloat(qualityPicker, "translationY", 0));
-                } else {
-                    qualityChooseView.setVisibility(View.INVISIBLE);
-                    qualityPicker.setVisibility(View.INVISIBLE);
-                    animatorSet.playTogether(
-                            ObjectAnimator.ofFloat(pickerView, "translationY", 0),
-                            ObjectAnimator.ofFloat(videoTimelineView, "translationY", 0),
-                            ObjectAnimator.ofFloat(videoSeekBarView, "translationY", 0));
-                }
-                animatorSet.setDuration(200);
-                animatorSet.setInterpolator(new AccelerateInterpolator());
-                animatorSet.start();
-            }
-        });
-        animatorSet.setDuration(200);
-        animatorSet.setInterpolator(new DecelerateInterpolator());
-        animatorSet.start();
-    }
-
-    public void setParentChatActivity(ChatActivity chatActivity) {
-        parentChatActivity = chatActivity;
-    }
-
-    private void closeCaptionEnter(boolean apply) {
-        if (apply) {
-            currentCaption = captionEditText.getFieldCharSequence();
-        }
-        pickerView.setVisibility(View.VISIBLE);
-        if (!AndroidUtilities.isTablet()) {
-            videoSeekBarView.setVisibility(View.VISIBLE);
-            videoTimelineView.setVisibility(View.VISIBLE);
-        }
-
-        actionBar.setTitle(muteVideo ? LocaleController.getString("AttachGif", R.string.AttachGif) : LocaleController.getString("AttachVideo", R.string.AttachVideo));
-        actionBar.setSubtitle(muteVideo ? null : currentSubtitle);
-        captionItem.setImageResource(TextUtils.isEmpty(currentCaption) ? R.drawable.photo_text : R.drawable.photo_text2);
-        if (captionEditText.isPopupShowing()) {
-            captionEditText.hidePopup();
-        }
-        captionEditText.closeKeyboard();
-    }
-
-    private void requestVideoPreview(int request) {
-        if (videoPreviewMessageObject != null) {
-            MediaController.getInstance().cancelVideoConvert(videoPreviewMessageObject);
-        }
-        boolean wasRequestingPreview = requestingPreview && !tryStartRequestPreviewOnFinish;
-        requestingPreview = false;
-        loadInitialVideo = false;
-        progressView.setVisibility(View.INVISIBLE);
-        if (request == 1) {
-            if (selectedCompression == compressionsCount - 1) {
-                tryStartRequestPreviewOnFinish = false;
-                if (!wasRequestingPreview) {
-                    reinitPlayer(videoPath);
-                } else {
-                    playButton.setImageDrawable(null);
-                    progressView.setVisibility(View.VISIBLE);
-                    loadInitialVideo = true;
-                }
-            } else {
-                destroyPlayer();
-                if (videoPreviewMessageObject == null) {
-                    TLRPC.TL_message message = new TLRPC.TL_message();
-                    message.id = 0;
-                    message.message = "";
-                    message.media = new TLRPC.TL_messageMediaEmpty();
-                    message.action = new TLRPC.TL_messageActionEmpty();
-                    videoPreviewMessageObject = new MessageObject(message, null, false);
-                    videoPreviewMessageObject.messageOwner.attachPath = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), "video_preview.mp4").getAbsolutePath();
-                    videoPreviewMessageObject.videoEditedInfo = new VideoEditedInfo();
-                    videoPreviewMessageObject.videoEditedInfo.rotationValue = rotationValue;
-                    videoPreviewMessageObject.videoEditedInfo.originalWidth = originalWidth;
-                    videoPreviewMessageObject.videoEditedInfo.originalHeight = originalHeight;
-                    videoPreviewMessageObject.videoEditedInfo.originalPath = videoPath;
-                }
-                long start = videoPreviewMessageObject.videoEditedInfo.startTime = startTime;
-                long end = videoPreviewMessageObject.videoEditedInfo.endTime = endTime;
-                if (start == -1) {
-                    start = 0;
-                }
-                if (end == -1) {
-                    end = (long) (videoDuration * 1000);
-                }
-                if (end - start > 5000000) {
-                    videoPreviewMessageObject.videoEditedInfo.endTime = start + 5000000;
-                }
-                videoPreviewMessageObject.videoEditedInfo.bitrate = bitrate;
-                videoPreviewMessageObject.videoEditedInfo.resultWidth = resultWidth;
-                videoPreviewMessageObject.videoEditedInfo.resultHeight = resultHeight;
-                if (!MediaController.getInstance().scheduleVideoConvert(videoPreviewMessageObject, true)) {
-                    tryStartRequestPreviewOnFinish = true;
-                }
-                if (videoPlayer == null) {
-                    requestingPreview = true;
-                    playButton.setImageDrawable(null);
-                    progressView.setVisibility(View.VISIBLE);
-                }
-            }
-        } else {
-            tryStartRequestPreviewOnFinish = false;
-            if (request == 2) {
-                reinitPlayer(videoPath);
-            }
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        } else if (id == NotificationCenter.FilePreparingFailed) {
-            MessageObject messageObject = (MessageObject) args[0];
-            if (loadInitialVideo) {
-                loadInitialVideo = false;
-                progressView.setVisibility(View.INVISIBLE);
-                reinitPlayer(videoPath);
-            } else if (tryStartRequestPreviewOnFinish) {
-                destroyPlayer();
-                tryStartRequestPreviewOnFinish = !MediaController.getInstance().scheduleVideoConvert(videoPreviewMessageObject, true);
-            } else if (messageObject == videoPreviewMessageObject) {
-                requestingPreview = false;
-                progressView.setVisibility(View.INVISIBLE);
-                playButton.setImageResource(R.drawable.video_edit_play);
-            }
-        } else if (id == NotificationCenter.FileNewChunkAvailable) {
-            MessageObject messageObject = (MessageObject) args[0];
-            if (messageObject == videoPreviewMessageObject) {
-                String finalPath = (String) args[1];
-                long finalSize = (Long) args[2];
-                if (finalSize != 0) {
-                    requestingPreview = false;
-                    progressView.setVisibility(View.INVISIBLE);
-                    reinitPlayer(finalPath);
-                }
-            }
-        }
-    }
-
-    public void updateMuteButton() {
-        if (videoPlayer != null) {
-            float volume = muteVideo ? 0.0f : 1.0f;
-            if (videoPlayer != null) {
-                videoPlayer.setVolume(volume, volume);
-            }
-        }
-        if (muteVideo) {
-            actionBar.setTitle(LocaleController.getString("AttachGif", R.string.AttachGif));
-            actionBar.setSubtitle(null);
-            muteItem.setImageResource(R.drawable.volume_off);
-            if (compressItem.getVisibility() == View.VISIBLE) {
-                compressItem.setClickable(false);
-                compressItem.setAlpha(0.5f);
-                compressItem.setEnabled(false);
-            }
-            videoTimelineView.setMaxProgressDiff(30000.0f / videoDuration);
-        } else {
-            actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
-            actionBar.setSubtitle(currentSubtitle);
-            muteItem.setImageResource(R.drawable.volume_on);
-            if (compressItem.getVisibility() == View.VISIBLE) {
-                compressItem.setClickable(true);
-                compressItem.setAlpha(1.0f);
-                compressItem.setEnabled(true);
-            }
-            videoTimelineView.setMaxProgressDiff(1.0f);
-        }
-    }
-
-    private void onPlayComplete() {
-        if (playButton != null) {
-            playButton.setImageResource(R.drawable.video_edit_play);
-        }
-        if (videoSeekBarView != null && videoTimelineView != null) {
-            if (inPreview) {
-                videoSeekBarView.setProgress(0);
-            } else {
-                videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-            }
-        }
-        try {
-            if (videoPlayer != null) {
-                if (videoTimelineView != null) {
-                    if (inPreview) {
-                        videoPlayer.seekTo(0);
-                    } else {
-                        videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-    }
-
-    private void updateVideoInfo() {
-        if (actionBar == null) {
-            return;
-        }
-
-        if (selectedCompression == 0) {
-            compressItem.setImageResource(R.drawable.video_240);
-        } else if (selectedCompression == 1) {
-            compressItem.setImageResource(R.drawable.video_360);
-        } else if (selectedCompression == 2) {
-            compressItem.setImageResource(R.drawable.video_480);
-        } else if (selectedCompression == 3) {
-            compressItem.setImageResource(R.drawable.video_720);
-        } else if (selectedCompression == 4) {
-            compressItem.setImageResource(R.drawable.video_1080);
-        }
-
-        esimatedDuration = (long) Math.ceil((videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
-
-        int width;
-        int height;
-
-        if (compressItem.getVisibility() == View.GONE || compressItem.getVisibility() == View.VISIBLE && selectedCompression == compressionsCount - 1) {
-            width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
-            height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-            estimatedSize = (int) (originalSize * ((float) esimatedDuration / videoDuration));
-        } else {
-            width = rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
-            height = rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
-
-            estimatedSize = (int) ((audioFramesSize + videoFramesSize) * ((float) esimatedDuration / videoDuration));
-            estimatedSize += estimatedSize / (32 * 1024) * 16;
-        }
-
-        if (videoTimelineView.getLeftProgress() == 0) {
-            startTime = -1;
-        } else {
-            startTime = (long) (videoTimelineView.getLeftProgress() * videoDuration) * 1000;
-        }
-        if (videoTimelineView.getRightProgress() == 1) {
-            endTime = -1;
-        } else {
-            endTime = (long) (videoTimelineView.getRightProgress() * videoDuration) * 1000;
-        }
-
-        String videoDimension = String.format("%dx%d", width, height);
-        int minutes = (int) (esimatedDuration / 1000 / 60);
-        int seconds = (int) Math.ceil(esimatedDuration / 1000) - minutes * 60;
-        String videoTimeSize = String.format("%d:%02d, ~%s", minutes, seconds, AndroidUtilities.formatFileSize(estimatedSize));
-        currentSubtitle = String.format("%s, %s", videoDimension, videoTimeSize);
-        actionBar.setSubtitle(muteVideo ? null : currentSubtitle);
-    }
-
-    public void setDelegate(VideoEditorActivityDelegate videoEditorActivityDelegate) {
-        delegate = videoEditorActivityDelegate;
-    }
-
-    private void updateWidthHeightBitrateForCompression() {
-        if (compressionsCount == -1) {
-            if (originalWidth > 1280 || originalHeight > 1280) {
-                compressionsCount = 5;
-            } else if (originalWidth > 848 || originalHeight > 848) {
-                compressionsCount = 4;
-            } else if (originalWidth > 640 || originalHeight > 640) {
-                compressionsCount = 3;
-            } else if (originalWidth > 480 || originalHeight > 480) {
-                compressionsCount = 2;
-            } else {
-                compressionsCount = 1;
-            }
-        }
-        if (selectedCompression >= compressionsCount) {
-            selectedCompression = compressionsCount - 1;
-        }
-        if (selectedCompression != compressionsCount - 1) {
-            float maxSize;
-            int targetBitrate;
-            switch (selectedCompression) {
-                case 0:
-                    maxSize = 432.0f;
-                    targetBitrate = 400000;
-                    break;
-                case 1:
-                    maxSize = 640.0f;
-                    targetBitrate = 900000;
-                    break;
-                case 2:
-                    maxSize = 848.0f;
-                    targetBitrate = 1100000;
-                    break;
-                case 3:
-                default:
-                    targetBitrate = 1600000;
-                    maxSize = 1280.0f;
-                    break;
-            }
-            float scale = originalWidth > originalHeight ? maxSize / originalWidth : maxSize / originalHeight;
-            resultWidth = Math.round(originalWidth * scale / 2) * 2;
-            resultHeight = Math.round(originalHeight * scale / 2) * 2;
-            if (bitrate != 0) {
-                bitrate = Math.min(targetBitrate, (int) (originalBitrate / scale));
-                videoFramesSize = (long) (bitrate / 8 * videoDuration / 1000);
-            }
-        }
-    }
-
-    private boolean processOpenVideo() {
-        try {
-            File file = new File(videoPath);
-            originalSize = file.length();
-
-            IsoFile isoFile = new IsoFile(videoPath);
-            List<Box> boxes = Path.getPaths(isoFile, "/moov/trak/");
-            TrackHeaderBox trackHeaderBox = null;
-            boolean isAvc = true;
-            boolean isMp4A = true;
-
-            Box boxTest = Path.getPath(isoFile, "/moov/trak/mdia/minf/stbl/stsd/mp4a/");
-            if (boxTest == null) {
-                FileLog.d("audio track not found");
-                isMp4A = false;
-            }
-
-            if (!isMp4A) {
-                return false;
-            }
-
-            boxTest = Path.getPath(isoFile, "/moov/trak/mdia/minf/stbl/stsd/avc1/");
-            if (boxTest == null) {
-                FileLog.d("video track not found");
-                isAvc = false;
-            }
-
-            for (int b = 0; b < boxes.size(); b++) {
-                Box box = boxes.get(b);
-                TrackBox trackBox = (TrackBox) box;
-                long sampleSizes = 0;
-                long trackBitrate = 0;
-                try {
-                    MediaBox mediaBox = trackBox.getMediaBox();
-                    MediaHeaderBox mediaHeaderBox = mediaBox.getMediaHeaderBox();
-                    SampleSizeBox sampleSizeBox = mediaBox.getMediaInformationBox().getSampleTableBox().getSampleSizeBox();
-                    long[] sizes = sampleSizeBox.getSampleSizes();
-                    for (int a = 0; a < sizes.length; a++) {
-                        sampleSizes += sizes[a];
-                    }
-                    videoDuration = (float) mediaHeaderBox.getDuration() / (float) mediaHeaderBox.getTimescale();
-                    trackBitrate = (int) (sampleSizes * 8 / videoDuration);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-                TrackHeaderBox headerBox = trackBox.getTrackHeaderBox();
-                if (headerBox.getWidth() != 0 && headerBox.getHeight() != 0) {
-                    trackHeaderBox = headerBox;
-                    originalBitrate = bitrate = (int) (trackBitrate / 100000 * 100000);
-                    if (bitrate > 900000) {
-                        bitrate = 900000;
-                    }
-                    videoFramesSize += sampleSizes;
-                } else {
-                    audioFramesSize += sampleSizes;
-                }
-            }
-            if (trackHeaderBox == null) {
-                FileLog.d("video track header box not found");
-                return false;
-            }
-
-            Matrix matrix = trackHeaderBox.getMatrix();
-            if (matrix.equals(Matrix.ROTATE_90)) {
-                rotationValue = 90;
-            } else if (matrix.equals(Matrix.ROTATE_180)) {
-                rotationValue = 180;
-            } else if (matrix.equals(Matrix.ROTATE_270)) {
-                rotationValue = 270;
-            }
-            resultWidth = originalWidth = (int) trackHeaderBox.getWidth();
-            resultHeight = originalHeight = (int) trackHeaderBox.getHeight();
-
-            videoDuration *= 1000;
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-            selectedCompression = preferences.getInt("compress_video2", 1);
-            updateWidthHeightBitrateForCompression();
-
-            if (!isAvc && (resultWidth == originalWidth || resultHeight == originalHeight)) {
-                FileLog.d("video is not mp4");
-                return false;
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-            return false;
-        }
-
-        updateVideoInfo();
-        return true;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index c90880c93..3b59b2669 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -302,7 +302,7 @@ private void processSelectedBackground() {
                     progressView.setVisibility(View.VISIBLE);
                     loadingSize = size;
                     selectedColor = 0;
-                    FileLoader.getInstance().loadFile(size, null, true);
+                    FileLoader.getInstance().loadFile(size, null, 1);
                     backgroundImage.setBackgroundColor(0);
                 } else {
                     if (loadingFile != null) {
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
deleted file mode 100644
index 34fa70643..000000000
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha android:fromAlpha="0.0"
-        android:toAlpha="1.0"
-        android:duration="200"
-        android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
deleted file mode 100644
index 915208c6c..000000000
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha android:fromAlpha="1.0"
-        android:toAlpha="0.0"
-        android:duration="200"
-        android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bigcheck.png b/TMessagesProj/src/main/res/drawable-hdpi/bigcheck.png
new file mode 100644
index 000000000..e7c336bdc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bigcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png
old mode 100755
new mode 100644
index 7d255cf57..4067689eb
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png and b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png
deleted file mode 100755
index 9103cc6c2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png
old mode 100755
new mode 100644
index 172256dca..70dba57ce
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png and b/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png
deleted file mode 100755
index 22124bcf4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png
old mode 100755
new mode 100644
index 0e4d1b76e..205ea4aa1
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png and b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png
deleted file mode 100755
index 73725eea9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/circle1.png b/TMessagesProj/src/main/res/drawable-hdpi/circle1.png
deleted file mode 100755
index 7587e047b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/circle1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/flame_small.png b/TMessagesProj/src/main/res/drawable-hdpi/flame_small.png
new file mode 100755
index 000000000..40773a63c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/flame_small.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png
deleted file mode 100755
index a1f0b063c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro2.png b/TMessagesProj/src/main/res/drawable-hdpi/intro2.png
deleted file mode 100755
index 5c06bd550..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro3.png b/TMessagesProj/src/main/res/drawable-hdpi/intro3.png
deleted file mode 100755
index 26a0d42c9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro4.png b/TMessagesProj/src/main/res/drawable-hdpi/intro4.png
deleted file mode 100755
index f203953e6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro5.png b/TMessagesProj/src/main/res/drawable-hdpi/intro5.png
deleted file mode 100755
index 25cc8bcf6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro5.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro6.png b/TMessagesProj/src/main/res/drawable-hdpi/intro6.png
deleted file mode 100755
index 02bd0dfd6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro6.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro7.png b/TMessagesProj/src/main/res/drawable-hdpi/intro7.png
deleted file mode 100755
index fe87f5a5d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro7.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_crop.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_crop.png
old mode 100755
new mode 100644
index aa78fee8b..f32bdf9cb
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_crop.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_crop.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_outline.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_outline.png
index a675d51c6..f9dcc42e6 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_outline.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_outline.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint.png
index c8aa20ca2..9fb4c684e 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint2.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint2.png
deleted file mode 100644
index 431a6fdc9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_brush.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_brush.png
index f7f7a3db8..7636ed84a 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_brush.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_brush.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_text.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_text.png
index 98074e3a2..118367b02 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_text.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_paint_text.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_sticker.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_sticker.png
index 3aeae65b1..692b2004e 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_sticker.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_sticker.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_text2.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_text2.png
deleted file mode 100755
index 7efa1adb6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_text2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_timer.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_timer.png
new file mode 100644
index 000000000..554fee811
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photo_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_tools.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_tools.png
old mode 100755
new mode 100644
index 195c6626f..c8f09f606
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_tools.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_tools.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_undo.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_undo.png
index eb7522cdb..3d36fa079 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_undo.png and b/TMessagesProj/src/main/res/drawable-hdpi/photo_undo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png
old mode 100755
new mode 100644
index c8614ecb9..b5d4a6419
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png and b/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_brightness.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_brightness.png
deleted file mode 100755
index fe2ae0640..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_brightness.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_contrast.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_contrast.png
deleted file mode 100755
index 21a65034b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_contrast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix.png
old mode 100755
new mode 100644
index 8039e1bc7..78d0fa455
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix.png and b/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix_active.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix_active.png
deleted file mode 100644
index d551d6f7d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_cropfix_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_curve.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_curve.png
old mode 100755
new mode 100644
index 6ba637583..3e0922c49
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_curve.png and b/TMessagesProj/src/main/res/drawable-hdpi/tool_curve.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_details.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_details.png
deleted file mode 100755
index 85549500b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_details.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_enhance.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_enhance.png
deleted file mode 100755
index a365ce793..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_enhance.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_fade.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_fade.png
deleted file mode 100755
index 041898e9f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_fade.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_grain.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_grain.png
deleted file mode 100755
index 39a73a1f7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_grain.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_highlights.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_highlights.png
deleted file mode 100755
index 5530def4b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_highlights.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_rotate.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_rotate.png
old mode 100755
new mode 100644
index 00475a721..06816100e
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_rotate.png and b/TMessagesProj/src/main/res/drawable-hdpi/tool_rotate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_saturation.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_saturation.png
deleted file mode 100755
index 5d79e93f1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_saturation.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_shadows.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_shadows.png
deleted file mode 100755
index 0dc33aa00..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_shadows.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_tint.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_tint.png
deleted file mode 100755
index 5fd37eb57..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_tint.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_vignette.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_vignette.png
deleted file mode 100755
index a6ac05878..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_vignette.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_warmth.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_warmth.png
deleted file mode 100755
index 2392e7389..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tool_warmth.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_1080.png b/TMessagesProj/src/main/res/drawable-hdpi/video_1080.png
old mode 100755
new mode 100644
index 0851e53cd..09074b170
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/video_1080.png and b/TMessagesProj/src/main/res/drawable-hdpi/video_1080.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_240.png b/TMessagesProj/src/main/res/drawable-hdpi/video_240.png
old mode 100755
new mode 100644
index 31396f872..07bf28438
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/video_240.png and b/TMessagesProj/src/main/res/drawable-hdpi/video_240.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_360.png b/TMessagesProj/src/main/res/drawable-hdpi/video_360.png
old mode 100755
new mode 100644
index f3a34f9f0..a512bd5ca
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/video_360.png and b/TMessagesProj/src/main/res/drawable-hdpi/video_360.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_480.png b/TMessagesProj/src/main/res/drawable-hdpi/video_480.png
old mode 100755
new mode 100644
index 6f2c5c1c1..44119ad85
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/video_480.png and b/TMessagesProj/src/main/res/drawable-hdpi/video_480.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_720.png b/TMessagesProj/src/main/res/drawable-hdpi/video_720.png
old mode 100755
new mode 100644
index f2f6bf1c8..a838191a6
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/video_720.png and b/TMessagesProj/src/main/res/drawable-hdpi/video_720.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_cropleft.png b/TMessagesProj/src/main/res/drawable-hdpi/video_cropleft.png
new file mode 100644
index 000000000..dd39ff800
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/video_cropleft.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_cropright.png b/TMessagesProj/src/main/res/drawable-hdpi/video_cropright.png
new file mode 100644
index 000000000..d52101460
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/video_cropright.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/volume_off.png b/TMessagesProj/src/main/res/drawable-hdpi/volume_off.png
old mode 100755
new mode 100644
index 26c954369..bb22a2e83
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/volume_off.png and b/TMessagesProj/src/main/res/drawable-hdpi/volume_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/volume_on.png b/TMessagesProj/src/main/res/drawable-hdpi/volume_on.png
old mode 100755
new mode 100644
index c6b68f97d..01ef347eb
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/volume_on.png and b/TMessagesProj/src/main/res/drawable-hdpi/volume_on.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bigcheck.png b/TMessagesProj/src/main/res/drawable-mdpi/bigcheck.png
new file mode 100644
index 000000000..07c70e2b8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bigcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png
old mode 100755
new mode 100644
index 06d029c46..51ac41fad
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png and b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png
deleted file mode 100755
index c3ffe1bef..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png
old mode 100755
new mode 100644
index 424aaa5b4..13b951054
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png and b/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png
deleted file mode 100755
index 5dfc12a2b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png
old mode 100755
new mode 100644
index a30d6619b..817a51000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png and b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png
deleted file mode 100755
index a385ca60a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/circle1.png b/TMessagesProj/src/main/res/drawable-mdpi/circle1.png
deleted file mode 100755
index 1590ab4e2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/circle1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/flame_small.png b/TMessagesProj/src/main/res/drawable-mdpi/flame_small.png
new file mode 100755
index 000000000..1fc51cc65
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/flame_small.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png
deleted file mode 100755
index 3c3317fce..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro2.png b/TMessagesProj/src/main/res/drawable-mdpi/intro2.png
deleted file mode 100755
index 0fb5a82ad..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro3.png b/TMessagesProj/src/main/res/drawable-mdpi/intro3.png
deleted file mode 100755
index 24f173ab2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro4.png b/TMessagesProj/src/main/res/drawable-mdpi/intro4.png
deleted file mode 100755
index 4d8bad25b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro5.png b/TMessagesProj/src/main/res/drawable-mdpi/intro5.png
deleted file mode 100755
index d4693ec57..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro5.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro6.png b/TMessagesProj/src/main/res/drawable-mdpi/intro6.png
deleted file mode 100755
index 37469c380..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro6.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro7.png b/TMessagesProj/src/main/res/drawable-mdpi/intro7.png
deleted file mode 100755
index fd7e1bb6a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro7.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_crop.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_crop.png
old mode 100755
new mode 100644
index 9133959b4..0e0cfd83e
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_crop.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_crop.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_outline.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_outline.png
index 1b45ea0b4..e172b0cb9 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_outline.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_outline.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_paint.png
index ae4dd03dc..1acfcc770 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_paint.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint2.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_paint2.png
deleted file mode 100644
index 0ef560bd9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint_brush.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_paint_brush.png
index b4db2cc79..0120118fa 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_paint_brush.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_paint_brush.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_sticker.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_sticker.png
index e6cc505f9..8e942e352 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_sticker.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_sticker.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_text2.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_text2.png
deleted file mode 100755
index 078f115db..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_text2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_timer.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_timer.png
new file mode 100644
index 000000000..60d24143c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photo_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_tools.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_tools.png
old mode 100755
new mode 100644
index 86296a075..8832fb1dc
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_tools.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_tools.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_undo.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_undo.png
index 294b57578..d1c42c2bc 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_undo.png and b/TMessagesProj/src/main/res/drawable-mdpi/photo_undo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png
old mode 100755
new mode 100644
index 9c0592331..7b488f92f
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png and b/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_brightness.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_brightness.png
deleted file mode 100755
index bc83f7365..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_brightness.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_contrast.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_contrast.png
deleted file mode 100755
index ff596a32d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_contrast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix.png
old mode 100755
new mode 100644
index af519d761..defd1458d
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix.png and b/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix_active.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix_active.png
deleted file mode 100644
index 983953f21..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_cropfix_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_curve.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_curve.png
old mode 100755
new mode 100644
index 58842bff3..833c4b666
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_curve.png and b/TMessagesProj/src/main/res/drawable-mdpi/tool_curve.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_details.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_details.png
deleted file mode 100755
index 758b1be91..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_details.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_enhance.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_enhance.png
deleted file mode 100755
index caf3478b3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_enhance.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_fade.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_fade.png
deleted file mode 100755
index ea4c13196..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_fade.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_grain.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_grain.png
deleted file mode 100755
index abf87a45e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_grain.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_highlights.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_highlights.png
deleted file mode 100755
index ed936c7d6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_highlights.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_rotate.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_rotate.png
old mode 100755
new mode 100644
index e4ee283e2..cef52efb8
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_rotate.png and b/TMessagesProj/src/main/res/drawable-mdpi/tool_rotate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_saturation.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_saturation.png
deleted file mode 100755
index 297178d03..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_saturation.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_shadows.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_shadows.png
deleted file mode 100755
index 62adb55d0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_shadows.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_tint.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_tint.png
deleted file mode 100755
index d61b17745..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_tint.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_vignette.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_vignette.png
deleted file mode 100755
index fd9972ceb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_vignette.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_warmth.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_warmth.png
deleted file mode 100755
index 6f3d4d9fa..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tool_warmth.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/video_cropleft.png b/TMessagesProj/src/main/res/drawable-mdpi/video_cropleft.png
new file mode 100644
index 000000000..998abb9f2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/video_cropleft.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/video_cropright.png b/TMessagesProj/src/main/res/drawable-mdpi/video_cropright.png
new file mode 100644
index 000000000..6fe7617ac
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/video_cropright.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/volume_off.png b/TMessagesProj/src/main/res/drawable-mdpi/volume_off.png
old mode 100755
new mode 100644
index 22728387b..f37883f34
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/volume_off.png and b/TMessagesProj/src/main/res/drawable-mdpi/volume_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/volume_on.png b/TMessagesProj/src/main/res/drawable-mdpi/volume_on.png
old mode 100755
new mode 100644
index 8dc379854..0fa849130
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/volume_on.png and b/TMessagesProj/src/main/res/drawable-mdpi/volume_on.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bigcheck.png b/TMessagesProj/src/main/res/drawable-xhdpi/bigcheck.png
new file mode 100644
index 000000000..b400932e4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bigcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png
old mode 100755
new mode 100644
index 94ab2c803..3794193ee
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png
deleted file mode 100755
index a7d39b91c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png
old mode 100755
new mode 100644
index 06001a130..0b4205973
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png
deleted file mode 100755
index c37ef8d8e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png
old mode 100755
new mode 100644
index 10caa4fa4..907d8a6fa
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png
deleted file mode 100755
index 86585c39a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/circle1.png b/TMessagesProj/src/main/res/drawable-xhdpi/circle1.png
deleted file mode 100755
index 8ba4640c0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/circle1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/flame_small.png b/TMessagesProj/src/main/res/drawable-xhdpi/flame_small.png
new file mode 100755
index 000000000..12f787053
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/flame_small.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png
deleted file mode 100755
index 11d506d7d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro2.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro2.png
deleted file mode 100755
index 4a9341b2e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro3.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro3.png
deleted file mode 100755
index 355d2e82a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro4.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro4.png
deleted file mode 100755
index eef2a1a2e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro5.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro5.png
deleted file mode 100755
index c528456e4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro5.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro6.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro6.png
deleted file mode 100755
index 50353cd4c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro6.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro7.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro7.png
deleted file mode 100755
index 1985c12c5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro7.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_crop.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_crop.png
old mode 100755
new mode 100644
index 312b56546..aa3c9f1b9
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_crop.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_crop.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_outline.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_outline.png
index 612d14386..b2cc45dbb 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_outline.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_outline.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint.png
index 6a7239478..a0b50a307 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint2.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint2.png
deleted file mode 100644
index ba319b20c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint_brush.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint_brush.png
index 205132551..7abb99831 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint_brush.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_paint_brush.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_sticker.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_sticker.png
index c97abc49f..9da291fa3 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_sticker.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_sticker.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_text2.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_text2.png
deleted file mode 100755
index d537cbc0a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_text2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_timer.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_timer.png
new file mode 100644
index 000000000..3a0b07e4d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_tools.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_tools.png
old mode 100755
new mode 100644
index c4ff608ae..2a8a2b0c3
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_tools.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_tools.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_undo.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_undo.png
index c4c28d0a4..5a77382e1 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_undo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_undo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png
old mode 100755
new mode 100644
index 81511a35a..35aa4a801
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png and b/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_brightness.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_brightness.png
deleted file mode 100755
index 1d1269e01..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_brightness.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_contrast.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_contrast.png
deleted file mode 100755
index 52ca3c908..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_contrast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix.png
old mode 100755
new mode 100644
index 6cfea5aa0..5b3c7682c
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix.png and b/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix_active.png
deleted file mode 100644
index 2cdc13f11..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_cropfix_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_curve.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_curve.png
old mode 100755
new mode 100644
index 9113acad4..afd39fc85
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_curve.png and b/TMessagesProj/src/main/res/drawable-xhdpi/tool_curve.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_details.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_details.png
deleted file mode 100755
index db56a7a9f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_details.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_enhance.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_enhance.png
deleted file mode 100755
index c0e3627a9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_enhance.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_fade.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_fade.png
deleted file mode 100755
index 56d76eced..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_fade.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_grain.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_grain.png
deleted file mode 100755
index e811faeaa..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_grain.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_highlights.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_highlights.png
deleted file mode 100755
index 38cae4551..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_highlights.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_rotate.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_rotate.png
old mode 100755
new mode 100644
index b47bd668c..9eaec36d0
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_rotate.png and b/TMessagesProj/src/main/res/drawable-xhdpi/tool_rotate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_saturation.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_saturation.png
deleted file mode 100755
index 92f8d6c75..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_saturation.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_shadows.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_shadows.png
deleted file mode 100755
index 99cc7f7b5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_shadows.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_tint.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_tint.png
deleted file mode 100755
index 8419721d4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_tint.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_vignette.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_vignette.png
deleted file mode 100755
index c9ae138cf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_vignette.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_warmth.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_warmth.png
deleted file mode 100755
index aca145d12..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tool_warmth.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_1080.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_1080.png
old mode 100755
new mode 100644
index f6df8f95f..210f681f8
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/video_1080.png and b/TMessagesProj/src/main/res/drawable-xhdpi/video_1080.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_240.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_240.png
old mode 100755
new mode 100644
index 6ca42671a..5cc634a7a
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/video_240.png and b/TMessagesProj/src/main/res/drawable-xhdpi/video_240.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_360.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_360.png
old mode 100755
new mode 100644
index cd6375e3b..359b00d2e
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/video_360.png and b/TMessagesProj/src/main/res/drawable-xhdpi/video_360.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_480.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_480.png
old mode 100755
new mode 100644
index a6633e92f..7c226d6af
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/video_480.png and b/TMessagesProj/src/main/res/drawable-xhdpi/video_480.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_720.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_720.png
old mode 100755
new mode 100644
index 9dc84f250..1231ca0e6
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/video_720.png and b/TMessagesProj/src/main/res/drawable-xhdpi/video_720.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_cropleft.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_cropleft.png
new file mode 100644
index 000000000..7a6ccf247
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/video_cropleft.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_cropright.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_cropright.png
new file mode 100644
index 000000000..4b314d88c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/video_cropright.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/volume_off.png b/TMessagesProj/src/main/res/drawable-xhdpi/volume_off.png
old mode 100755
new mode 100644
index d0c5ef558..3282f8318
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/volume_off.png and b/TMessagesProj/src/main/res/drawable-xhdpi/volume_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/volume_on.png b/TMessagesProj/src/main/res/drawable-xhdpi/volume_on.png
old mode 100755
new mode 100644
index 11e48f184..8bd76be8a
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/volume_on.png and b/TMessagesProj/src/main/res/drawable-xhdpi/volume_on.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bigcheck.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bigcheck.png
new file mode 100644
index 000000000..0189c773d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bigcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png
old mode 100755
new mode 100644
index 7a9a7d59d..2536335bd
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png
deleted file mode 100755
index d6802f74b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png
old mode 100755
new mode 100644
index 954cd8ac5..6f467b2c9
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png
deleted file mode 100755
index 539299f2d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png
old mode 100755
new mode 100644
index d7d8bc1b8..6a025fd43
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png
deleted file mode 100755
index 137912f15..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/circle1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/circle1.png
deleted file mode 100755
index 1c277d250..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/circle1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/flame_small.png b/TMessagesProj/src/main/res/drawable-xxhdpi/flame_small.png
new file mode 100755
index 000000000..7d0263826
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/flame_small.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png
deleted file mode 100755
index 41511be20..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro2.png
deleted file mode 100755
index ce726aac5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro3.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro3.png
deleted file mode 100755
index ab055dfb8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro4.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro4.png
deleted file mode 100755
index d5adc24a4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro5.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro5.png
deleted file mode 100755
index fdd12de0a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro5.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro6.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro6.png
deleted file mode 100755
index 659ce6249..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro6.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro7.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro7.png
deleted file mode 100755
index 22d3becc5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro7.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_crop.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_crop.png
old mode 100755
new mode 100644
index 1276ad189..4e5183fa5
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_crop.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_crop.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_outline.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_outline.png
index 2d76a1da7..348741607 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_outline.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_outline.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint.png
index 300529d20..5758aa96f 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint2.png
deleted file mode 100644
index 2141c3a92..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint_brush.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint_brush.png
index 619dcf43a..8927dea1c 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint_brush.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_paint_brush.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_sticker.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_sticker.png
index 4bfd75186..21c7098da 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_sticker.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_sticker.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_text2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_text2.png
deleted file mode 100755
index 63e514b02..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_text2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_timer.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_timer.png
new file mode 100644
index 000000000..7c781ac2f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_tools.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_tools.png
old mode 100755
new mode 100644
index ab1bb0e95..896447358
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_tools.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_tools.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_undo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_undo.png
index 1e1e3d866..af1165606 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_undo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_undo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png
old mode 100755
new mode 100644
index b935f2f74..cd7469701
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_brightness.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_brightness.png
deleted file mode 100755
index fca4f193c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_brightness.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_contrast.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_contrast.png
deleted file mode 100755
index b7f4ea77c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_contrast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix.png
old mode 100755
new mode 100644
index 4601e79e9..da85e5414
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix_active.png
deleted file mode 100644
index 0ee059e2e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_cropfix_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_curve.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_curve.png
old mode 100755
new mode 100644
index 5cc0a860e..84fe36543
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_curve.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_curve.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_details.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_details.png
deleted file mode 100755
index 92e5078a5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_details.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_enhance.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_enhance.png
deleted file mode 100755
index d3f893339..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_enhance.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_fade.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_fade.png
deleted file mode 100755
index 72d5a1028..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_fade.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_grain.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_grain.png
deleted file mode 100755
index fd194574e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_grain.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_highlights.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_highlights.png
deleted file mode 100755
index f9b3e0b14..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_highlights.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_rotate.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_rotate.png
old mode 100755
new mode 100644
index 6043d8e3f..0d5767689
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_rotate.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_rotate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_saturation.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_saturation.png
deleted file mode 100755
index 9918b34d4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_saturation.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_shadows.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_shadows.png
deleted file mode 100755
index ba854d4b5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_shadows.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_tint.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_tint.png
deleted file mode 100755
index 5d0605889..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_tint.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_vignette.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_vignette.png
deleted file mode 100755
index ba153fd42..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_vignette.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_warmth.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_warmth.png
deleted file mode 100755
index cfbf0d516..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_warmth.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_1080.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_1080.png
old mode 100755
new mode 100644
index c3f130075..1c7c5d84c
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/video_1080.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_1080.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_240.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_240.png
old mode 100755
new mode 100644
index fa9e09728..0c8acfc0b
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/video_240.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_240.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_360.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_360.png
old mode 100755
new mode 100644
index 1ec1b8aa8..4855eb8a9
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/video_360.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_360.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_480.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_480.png
old mode 100755
new mode 100644
index a3f37d6f5..a1d765ca0
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/video_480.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_480.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_720.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_720.png
old mode 100755
new mode 100644
index 84bca9b05..f2d2822dd
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/video_720.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_720.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropleft.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropleft.png
new file mode 100644
index 000000000..94f79a8a9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropleft.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropright.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropright.png
new file mode 100644
index 000000000..3742bd6d7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_cropright.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/volume_off.png b/TMessagesProj/src/main/res/drawable-xxhdpi/volume_off.png
old mode 100755
new mode 100644
index ebb96753b..f49733d49
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/volume_off.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/volume_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/volume_on.png b/TMessagesProj/src/main/res/drawable-xxhdpi/volume_on.png
old mode 100755
new mode 100644
index e885b6937..e3ee4703e
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/volume_on.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/volume_on.png differ
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 173030c1d..db7023f93 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">حساب محذوف</string>
     <string name="SelectChat">اختر محادثة</string>
     <string name="PhotoTip">اضغط بإستمرار على المستخدم العرض</string>
+    <string name="DisappearingPhoto">صورة سرية</string>
+    <string name="DisappearingVideo">فيديو سري</string>
     <string name="CompatibilityChat">%1$s يستخدم إصدار قديم من تيليجرام، لذلك، الصور السرية ستظهر في وضع الموافقة.\n\nعندما يقوم %2$s بتحديث تيليجرام، الصور التي بها عداد دقيقة أو أقل ستعمل بطريقة \"الاستمرار بالضغط للإستعراض\"، وسيتم إخبارك عندما يلتقط المستقبل صورة من شاشته.</string>
     <string name="SearchMessages">الرسائل</string>
     <string name="Search">بحث</string>
@@ -355,7 +357,7 @@
     <string name="EventLogEmptyChannel"><![CDATA[1]]>لا توجد أحداث هنا بعد<![CDATA[1]]>\n\nمشرفي القناة\nلم يقوموا بأي عمليات\nخلال 48 ساعة الماضية.</string>
     <string name="EventLogEmptySearch"><![CDATA[<b>]]>لم يتم العثور على أحداث <![CDATA[</b>]]>\n\nلا توجد أحداث مؤخرًا تحتوي على ما بحثت عنه.</string>
     <string name="EventLogEmptyTextSearch">لا توجد أحداث مؤخرًا تحتوي على \'<![CDATA[<b>]]>%1$s<![CDATA[</b>]]>\' تم العثور عليها.</string>
-    <string name="EventLogInfoTitle">What is the Recent Actions?</string>
+    <string name="EventLogInfoTitle">ما هي العمليات الحديثة؟</string>
     <string name="EventLogInfoDetail">هذه قائمة بجميع العمليات التي قام بها أعضاء المجموعة ومشرفيها خلال 48 ساعة.</string>
     <string name="EventLogInfoDetailChannel">هذه قائمة بجميع العمليات التي قام بها أعضاء القناة ومشرفيها خلال 48 ساعة.</string>
     <string name="EventLogEditedGroupTitle">un1 قام بتغيير اسم المجموعة إلى \"%1$s\"</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s قام بإرسال رسالة لك</string>
     <string name="NotificationMessagePhoto">%1$s قام بإرسال صورة لك</string>
     <string name="NotificationMessageVideo">%1$s قام بإرسال مقطع مرئي لك</string>
+    <string name="NotificationMessageSDPhoto">%1$s أرسل لك صورة بتدمير ذاتي</string>
+    <string name="NotificationMessageSDVideo">%1$s أرسل لك فيديو بتدمير ذاتي </string>
     <string name="NotificationMessageContact">%1$s قام بإرسال جهة اتصال لك</string>
     <string name="NotificationMessageMap">%1$s قام بإرسال موقع لك</string>
     <string name="NotificationMessageGame">%1$s قام بدعوتك للعب %2$s</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">العمل</string>
     <string name="PhoneOther">آخر</string>
     <string name="PhoneMain">الرئيسية</string>
+    <string name="UserBio">نبذة</string>
+    <string name="UserBioEmpty">لا يوجد</string>
+    <string name="UserBioInfo">يمكنك إضافة بعض المعلومات عن نفسك. يمكن لمن يستعرض حسابك رؤية هذه المعلمات.</string>
     <string name="StartEncryptedChat">إبدأ محادثة سرية</string>
     <string name="GroupsInCommon">المجموعات المشتركة</string>
     <string name="GroupsInCommonTitle">المجموعات المشتركة</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">حدث خطأ.</string>
     <string name="EncryptionKey">مفتاح التشفير</string>
     <string name="MessageLifetime">عداد التدمير الذاتي</string>
+    <string name="MessageLifetimePhoto">إذا اخترت العداد، الصورة ستقوم بتدمير ذاتها تلقائيًا بعد استعراضها.</string>
+    <string name="MessageLifetimeVideo">إذا اخترت العداد، الفيديو سيقوم بتدمير ذاته تلقائيًا بعد استعراضه.</string>
     <string name="ShortMessageLifetimeForever">إيقاف</string>
     <string name="EncryptionKeyDescription">هذه الصورة والنص تم اشتقاقهم من مفتاح التشفير لهذه المحادثة السرية مع <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nإذا كانت مطابقة لما يظهر على جهاز <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> ، التشفير من البداية للنهاية مضمون.\n\nللاستزادة، اطلع على telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
@@ -961,8 +970,8 @@
     <string name="UseProxyPort">المنفذ</string>
     <string name="UseProxyUsername">اسم المستخدم</string>
     <string name="UseProxyInfo">إعدادات بروكسي SOCKS 5</string>
-    <string name="UseProxyForCalls">Use proxy for calls</string>
-    <string name="UseProxyForCallsInfo">Proxy servers may degrade the quality of your calls.</string>
+    <string name="UseProxyForCalls">استخدم البروكسي للمكالمات</string>
+    <string name="UseProxyForCallsInfo">خوادم البروكسي ربما تقلل من جودة الاتصال في تيليجرام.</string>
     <!--cache view-->
     <string name="LocalDatabase">قاعدة البيانات على الجهاز</string>
     <string name="LocalDatabaseClear">هل ترغب في مسح الرسائل المحفوظة في الذاكرة المخبئية؟</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">نسخة تيليجرام الموجودة لديك لا تدعم هذه الرسالة. الرجاء التحديث لأحدث نسخة: https://telegram.org/update</string>
     <string name="AttachPhoto">صورة</string>
     <string name="AttachVideo">مقطع مرئي</string>
+    <string name="AttachPhotoExpired">انتهت صلاحية الصورة</string>
+    <string name="AttachVideoExpired">انتهت صلاحية الفيديو</string>
     <string name="AttachGif">صورة متحركة</string>
     <string name="AttachLocation">موقع</string>
     <string name="AttachContact">جهة اتصال</string>
@@ -1308,8 +1319,8 @@
     <string name="AttachRound">رسالة مرئية</string>
     <string name="AttachGame">لعبة</string>
     <string name="FromYou">أنت</string>
-    <string name="ActionTakeScreenshootYou">أنت أخذت لقطة للشاشة !</string>
-    <string name="ActionTakeScreenshoot">un1 أخذ لقطة للشاشة !</string>
+    <string name="ActionTakeScreenshootYou">لقد قمت بتصوير الشاشة !</string>
+    <string name="ActionTakeScreenshoot">un1 قام بتصوير الشاشة !</string>
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">رقم الهاتف غير صحيح</string>
     <string name="BannedPhoneNumber">رقم هاتف محظور</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">آمن</string>
     <string name="Page5Title">قوي</string>
     <string name="Page6Title">مرتبط بالسحاب</string>
-    <string name="Page7Title">خصوصي</string>
     <string name="Page1Message">تيليجرام هو <![CDATA[<b>أسرع</b>]]> تطبيق مراسلة في العالم.\n,وهو كذلك <![CDATA[<b>مجاني</b>]]> و <![CDATA[<b>آمن</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>تيليجرام</b>]]> يوصل الرّسائل أسرع من\nأي تطبيق آخر.</string>
     <string name="Page3Message"><![CDATA[<b>تيليجرام</b>]]> مجّاني دائماً. لا إعلانات.\nدون رسوم إشتراك.</string>
     <string name="Page4Message"><![CDATA[<b>تيليجرام</b>]]> يحمي الرسائل الخاصة بك\nمن هجمات المخترقين.</string>
     <string name="Page5Message"><![CDATA[<b>تيليجرام</b>]]> لا يفرض حدوداً على حجم\nمحادثاتك و وسائطك.</string>
     <string name="Page6Message"><![CDATA[<b>تيليجرام</b>]]> يمكنك من الوصول إلى الرسائل الخاصة بك\nمن أجهزة متعددة.</string>
-    <string name="Page7Message">رسائل <![CDATA[<b>تيليجرام</b>]]> مشفرة بشكل قوي\nوتستطيع تدمير ذاتها.</string>
     <string name="StartMessaging">إبدأ المراسلة</string>
     <!--VoIP-->
     <string name="AccountSettings">إعدادات الحساب</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index d37859c92..f0b1ee3a2 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Gelöschtes Konto</string>
     <string name="SelectChat">Chat auswählen</string>
     <string name="PhotoTip">Tippen und Halten</string>
+    <string name="DisappearingPhoto">Geheimes Bild</string>
+    <string name="DisappearingVideo">Geheimes Video</string>
     <string name="CompatibilityChat">%1$s benutzt eine ältere Version von Telegram, sodass Bilder in Geheimen Chats im Kompatibilitätsmodus angezeigt werden.\n\nSobald %2$s Telegram aktualisiert, werden Bilder mit Timern von 1 Minute und kürzer per \"Tippen und Halten\" angezeigt. Du wirst benachrichtigt, sobald dein Chatpartner ein Bildschirmfoto macht.</string>
     <string name="SearchMessages">NACHRICHTEN</string>
     <string name="Search">Suche</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s hat dir eine Nachricht gesendet</string>
     <string name="NotificationMessagePhoto">%1$s hat dir ein Bild gesendet</string>
     <string name="NotificationMessageVideo">%1$s hat dir ein Video gesendet</string>
+    <string name="NotificationMessageSDPhoto">%1$s hat dir ein selbstzerstörendes Bild gesendet</string>
+    <string name="NotificationMessageSDVideo">%1$s hat dir ein selbstzerstörendes Video gesendet</string>
     <string name="NotificationMessageContact">%1$s hat dir einen Kontakt gesendet</string>
     <string name="NotificationMessageMap">%1$s hat dir einen Standort gesendet</string>
     <string name="NotificationMessageGame">%1$s hat dich eingeladen, %2$s zu spielen</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Arbeit</string>
     <string name="PhoneOther">Sonstiges</string>
     <string name="PhoneMain">Hauptnummer</string>
+    <string name="UserBio">Bio</string>
+    <string name="UserBioEmpty">Keine</string>
+    <string name="UserBioInfo">Hier kannst du etwas über dich schreiben. Jeder der dein Profil öffnet, kann diesen Text lesen.</string>
     <string name="StartEncryptedChat">Geheimen Chat starten</string>
     <string name="GroupsInCommon">Gemeinsame Gruppen</string>
     <string name="GroupsInCommonTitle">Gemeinsame Gruppen</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">Es ist ein Fehler aufgetreten.</string>
     <string name="EncryptionKey">Geheimer Schlüssel</string>
     <string name="MessageLifetime">Selbstzerstörungs-Timer</string>
+    <string name="MessageLifetimePhoto">Bild wird nach Ablauf der Zeit selbst zerstört.</string>
+    <string name="MessageLifetimeVideo">Video wird nach Ablauf der Zeit selbst zerstört.</string>
     <string name="ShortMessageLifetimeForever">Aus</string>
     <string name="EncryptionKeyDescription">Bild und Text zeigen den Schlüssel dieses geheimen Chats mit <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nSehen sie auf dem Gerät von <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> genau so aus, ist Ende-zu-Ende Verschlüsselung garantiert.\n\nErfahre mehr unter telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq/de#geheime-chats</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstützt. Bitte aktualisiere Telegram um sie zu sehen: https://telegram.org/update</string>
     <string name="AttachPhoto">Bild</string>
     <string name="AttachVideo">Video</string>
+    <string name="AttachPhotoExpired">Bild ist abgelaufen</string>
+    <string name="AttachVideoExpired">Video ist abgelaufen</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Standort</string>
     <string name="AttachContact">Kontakt</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Sicher</string>
     <string name="Page5Title">Leistungsstark</string>
     <string name="Page6Title">Cloud-Basiert</string>
-    <string name="Page7Title">Vertraulich</string>
     <string name="Page1Message">Die <![CDATA[<b>schnellste</b>]]> Messaging App der Welt.\n<![CDATA[<b>Kostenlos</b>]]> und <![CDATA[<b>sicher</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> übermittelt Nachrichten\nschneller als jede andere Anwendung.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> bleibt immer gratis.\nKeine Werbung. Keine Abo-Gebühren.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schützt deine Nachrichten\nvor Hacker-Angriffen.</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> hat keine Begrenzungen auf\ndie Größe deiner Medien oder Chats.</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> kannst du vom Handy\nTablet oder auch Computer\nsynchronisiert benutzen.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]>-Nachrichten sind stark verschlüsselt\nund können sich selbst zerstören.</string>
     <string name="StartMessaging">Jetzt beginnen</string>
     <!--VoIP-->
     <string name="AccountSettings">Kontoeinstellungen</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 76345828a..17b886fda 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Cuenta eliminada</string>
     <string name="SelectChat">Elige el chat</string>
     <string name="PhotoTip">Mantén pulsado para ver</string>
+    <string name="DisappearingPhoto">Foto secreta</string>
+    <string name="DisappearingVideo">Vídeo secreto</string>
     <string name="CompatibilityChat">%1$s usa una versión antigua de Telegram, así que las fotos secretas serán mostradas en un modo de compatibilidad.\n\nCuando %2$s actualice Telegram, las fotos con autodestrucción de 1 minuto o menos funcionarán con el modo “Mantén pulsado para ver”, y te notificaremos siempre que la otra parte haga una captura de pantalla.</string>
     <string name="SearchMessages">MENSAJES</string>
     <string name="Search">Buscar</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s te envió un mensaje</string>
     <string name="NotificationMessagePhoto">%1$s te envió una foto</string>
     <string name="NotificationMessageVideo">%1$s te envió un vídeo</string>
+    <string name="NotificationMessageSDPhoto">%1$s te envió una foto con autodestrucción</string>
+    <string name="NotificationMessageSDVideo">%1$s te envió un vídeo con autodestrucción</string>
     <string name="NotificationMessageContact">%1$s compartió un contacto contigo</string>
     <string name="NotificationMessageMap">%1$s te envió una ubicación</string>
     <string name="NotificationMessageGame">%1$s te invitó a jugar a %2$s</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Trabajo</string>
     <string name="PhoneOther">Otro</string>
     <string name="PhoneMain">Principal</string>
+    <string name="UserBio">Biografía</string>
+    <string name="UserBioEmpty">Ninguna</string>
+    <string name="UserBioInfo">Puedes añadir algunas palabras sobre ti. Cualquiera que abra tu perfil verá este texto.</string>
     <string name="StartEncryptedChat">Iniciar chat secreto</string>
     <string name="GroupsInCommon">Grupos en común</string>
     <string name="GroupsInCommonTitle">Grupos en común</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">Ocurrió un error.</string>
     <string name="EncryptionKey">Clave de cifrado</string>
     <string name="MessageLifetime">Autodestrucción</string>
+    <string name="MessageLifetimePhoto">Si pones un temporizador, la foto se autodestruirá después de ser vista.</string>
+    <string name="MessageLifetimeVideo">Si pones un temporizador, el vídeo se autodestruirá después ser visto.</string>
     <string name="ShortMessageLifetimeForever">Apagada</string>
     <string name="EncryptionKeyDescription">El texto e imagen derivan de la clave de cifrado para el chat secreto creado con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nSi se ven igual en el dispositivo de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, el cifrado end-to-end está garantizado.\n\nConoce más en telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq/es#chats-secretos</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">Tu versión de Telegram no soporta este mensaje. Por favor, actualiza tu app para verlo: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Vídeo</string>
+    <string name="AttachPhotoExpired">La foto expiró</string>
+    <string name="AttachVideoExpired">El vídeo expiró</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Ubicación</string>
     <string name="AttachContact">Contacto</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Segura</string>
     <string name="Page5Title">Poderosa</string>
     <string name="Page6Title">Basada en la nube</string>
-    <string name="Page7Title">Privada</string>
     <string name="Page1Message">La aplicación de mensajería más <![CDATA[<b>veloz</b>]]> del mundo.\nEs <![CDATA[<b>gratis</b>]]> y <![CDATA[<b>segura</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> entrega mensajes más rápido\nque cualquier otra aplicación.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> es gratis para siempre. Sin publicidad.\nSin suscripciones.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantiene tus mensajes\na salvo del ataque de hackers.</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> no tiene límites en el\ntamaño de tus chats y archivos.</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> te permite acceder a tus mensajes\ndesde múltiples dispositivos.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> posee mensajes fuertemente\ncifrados y se pueden autodestruir.</string>
     <string name="StartMessaging">Comenzar</string>
     <!--VoIP-->
     <string name="AccountSettings">Ajustes de la cuenta</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 3af4bcd72..8011b9616 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Account eliminato</string>
     <string name="SelectChat">Seleziona chat</string>
     <string name="PhotoTip">Tieni premuto per vedere</string>
+    <string name="DisappearingPhoto">Foto segreta</string>
+    <string name="DisappearingVideo">Video segreto</string>
     <string name="CompatibilityChat">%1$s sta usando una versione vecchia di Telegram, quindi le foto segrete verranno visualizzate in modalità di compatibilità.\n\nUna volta che %2$s avrà aggiornato Telegram, le foto con il timer minore di 1 minuto funzioneranno in modalità \'Tieni premuto per vedere\' , e verrai notificato ogni volta che l\'altro esegue uno screenshot.</string>
     <string name="SearchMessages">MESSAGGI</string>
     <string name="Search">Cerca</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s ti ha inviato un messaggio</string>
     <string name="NotificationMessagePhoto">%1$s ti ha inviato una foto</string>
     <string name="NotificationMessageVideo">%1$s ti ha inviato un video</string>
+    <string name="NotificationMessageSDPhoto">%1$s ti ha inviato una foto con autodistruzione</string>
+    <string name="NotificationMessageSDVideo">%1$s ti ha inviato un video con autodistruzione</string>
     <string name="NotificationMessageContact">%1$s ha condiviso un contatto con te</string>
     <string name="NotificationMessageMap">%1$s ti ha inviato una posizione</string>
     <string name="NotificationMessageGame">%1$s ti ha invitato a giocare a %2$s</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Lavoro</string>
     <string name="PhoneOther">Altro</string>
     <string name="PhoneMain">Principale</string>
+    <string name="UserBio">Bio</string>
+    <string name="UserBioEmpty">Nessuna</string>
+    <string name="UserBioInfo">Puoi aggiungere qualche riga su di te. Chiunque apra il tuo profilo vedrà questo testo.</string>
     <string name="StartEncryptedChat">Inizia chat segreta</string>
     <string name="GroupsInCommon">Gruppi in comune</string>
     <string name="GroupsInCommonTitle">Gruppi in comune</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">Si è verificato un errore.</string>
     <string name="EncryptionKey">Chiave di crittografia</string>
     <string name="MessageLifetime">Timer di autodistruzione</string>
+    <string name="MessageLifetimePhoto">Se imposti un timer, la foto si autodistruggerà dopo essere stata vista.</string>
+    <string name="MessageLifetimeVideo">Se imposti un timer, il video si autodistruggerà dopo essere stato visto.</string>
     <string name="ShortMessageLifetimeForever">Spento</string>
     <string name="EncryptionKeyDescription">L\'immagine e il testo sono derivati dalla chiave di crittografia di questa chat segreta con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nSe sono uguali sul dispositivo di <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, la crittografia end-to-end è garantita.\n\nUlteriori informazioni su telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq/it#chat-segrete</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">Questo messaggio non è supportato dalla tua versione di Telegram. Aggiorna l\'app per visualizzarlo: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
+    <string name="AttachPhotoExpired">La foto è scaduta</string>
+    <string name="AttachVideoExpired">Il video è scaduto</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Posizione</string>
     <string name="AttachContact">Contatto</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Sicuro</string>
     <string name="Page5Title">Potente</string>
     <string name="Page6Title">Basato sul cloud</string>
-    <string name="Page7Title">Privato</string>
     <string name="Page1Message">L\'app di messaggi <![CDATA[<b>più veloce</b>]]> al mondo.\nÈ <![CDATA[<b>gratuita</b>]]> e <![CDATA[<b>sicura</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> consegna i messaggi più\nvelocemente di qualsiasi altra app.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> sarà sempre gratuito.\nNessuna pubblicità. Nessun abbonamento.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> protegge i tuoi messaggi\ndagli attacchi degli hacker.</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> non ha limiti di dimensione\nper le tue chat e i file multimediali.</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> ti consente di accedere\nai tuoi messaggi da più dispositivi.</string>
-    <string name="Page7Message">I messaggi di <![CDATA[<b>Telegram</b>]]> sono fortemente\ncriptati e possono autodistruggersi.</string>
     <string name="StartMessaging">Inizia a messaggiare</string>
     <!--VoIP-->
     <string name="AccountSettings">Impostazioni account</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 8fe6376d0..b3518700e 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">탈퇴한 계정</string>
     <string name="SelectChat">채팅방 선택</string>
     <string name="PhotoTip">꾹 눌러서 보기</string>
+    <string name="DisappearingPhoto">비밀 사진</string>
+    <string name="DisappearingVideo">비밀 동영상</string>
     <string name="CompatibilityChat">%1$s님의 텔레그램 버전이 낮아 비밀 사진을 호환성 모드로 표시합니다.\n\n%2$s님이 텔레그램을 업데이트하고 나면, 자동삭제 시간이 1분 이하인 사진은 \"탭하고 누르고 있어야 보임\" 상태가 되며, 상대방이 화면을 캡처할 때 마다 알림을 받습니다.</string>
     <string name="SearchMessages">메시지</string>
     <string name="Search">검색</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s님이 메시지를 보냈습니다</string>
     <string name="NotificationMessagePhoto">%1$s님이 사진을 보냈습니다</string>
     <string name="NotificationMessageVideo">%1$s님이 동영상을 보냈습니다</string>
+    <string name="NotificationMessageSDPhoto">%1$s 님이 자동삭제되는 사진을 전송했습니다</string>
+    <string name="NotificationMessageSDVideo">%1$s 님이 자동삭제되는 동영상을 전송했습니다</string>
     <string name="NotificationMessageContact">%1$s님이 연락처를 공유했습니다</string>
     <string name="NotificationMessageMap">%1$s님이 위치를 보냈습니다</string>
     <string name="NotificationMessageGame">%1$s님이 %2$s 게임으로 초대했습니다</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">직장</string>
     <string name="PhoneOther">기타</string>
     <string name="PhoneMain">주</string>
+    <string name="UserBio">자기소개</string>
+    <string name="UserBioEmpty">없음</string>
+    <string name="UserBioInfo">자기소개에 대한 몇줄을 추가 할 수 있습니다. 회원님 정보를 보시는 분들에게 표시가 됩니다</string>
     <string name="StartEncryptedChat">비밀대화 시작</string>
     <string name="GroupsInCommon">공통 그룹</string>
     <string name="GroupsInCommonTitle">공통 그룹</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">오류가 발생했습니다.</string>
     <string name="EncryptionKey">암호화 키</string>
     <string name="MessageLifetime">자동삭제 타이머</string>
+    <string name="MessageLifetimePhoto">타이머를 설정시, 사진을 읽은 후 자동삭제가 됩니다.</string>
+    <string name="MessageLifetimeVideo">타이머 설정시, 동영상 시청 후 자동삭제가 됩니다.</string>
     <string name="ShortMessageLifetimeForever">해제</string>
     <string name="EncryptionKeyDescription">이 이미지와 텍스트는 <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>님과의 비밀대화시 생성된 암호화키에서 파생되었습니다.\n\n이 이미지와 텍스트가 <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> 님의 휴대전화와 동일하다면 단말기간(end-to-end)의 암호화가 정상적으로 진행되고 있음을 보장합니다.\n\n더 자세한 사항은 telegram.org를 참고해 주세요.</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
@@ -961,8 +970,8 @@
     <string name="UseProxyPort">포트</string>
     <string name="UseProxyUsername">아이디</string>
     <string name="UseProxyInfo">SOCKS5 프록시 설정</string>
-    <string name="UseProxyForCalls">Use proxy for calls</string>
-    <string name="UseProxyForCallsInfo">Proxy servers may degrade the quality of your calls.</string>
+    <string name="UseProxyForCalls">전화에 프록시 사용</string>
+    <string name="UseProxyForCallsInfo">프록시 서버는 통화 품질을 저하시킬 수 있습니다.</string>
     <!--cache view-->
     <string name="LocalDatabase">로컬 데이터베이스</string>
     <string name="LocalDatabaseClear">캐시된 텍스트 메시지를 삭제하시겠습니까?</string>
@@ -982,7 +991,7 @@
     <string name="KeepMediaInfo">이 기간 동안 클라우드 채팅방에서  <![CDATA[<b>접근하지 않은</b>]]> 사진이나 동영상, 기타 파일 등은 공간 절약을 위해 이 기기에서 삭제됩니다.\n\n모든 파일은 Telegram 클라우드에 여전히 남으며 필요하시면 언제든 다시 다운로드하실 수 있습니다.</string>
     <string name="KeepMediaForever">영원히</string>
     <string name="AudioAutodownload">음성 메시지</string>
-    <string name="VideoMessagesAutodownload">음성 메시지</string>
+    <string name="VideoMessagesAutodownload">영상 메시지</string>
     <!--sessions view-->
     <string name="SessionsTitle">활성화된 세션</string>
     <string name="CurrentSession">현재 세션</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">이 메시지는 현재 사용 중인 버전의 Telegram에서 지원되지 않습니다. 메시지를 보려면 http://telegram.org/update에서 앱을 업데이트하세요.</string>
     <string name="AttachPhoto">사진</string>
     <string name="AttachVideo">동영상</string>
+    <string name="AttachPhotoExpired">사진이 만료되었습니다</string>
+    <string name="AttachVideoExpired">동영상이 만료되었습니다</string>
     <string name="AttachGif">GIF파일</string>
     <string name="AttachLocation">위치</string>
     <string name="AttachContact">연락처</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">보안성</string>
     <string name="Page5Title">강력함</string>
     <string name="Page6Title">클라우드 기반</string>
-    <string name="Page7Title">사생활 보호</string>
     <string name="Page1Message">세상에서 가장 <![CDATA[<b>빠른</b>]]> 메신저입니다.\n <![CDATA[<b>무료</b>]]> 이며 <![CDATA[<b>안전합니다</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>텔레그램</b>]]>은 어떤 메신저보다도\n빠르게 메시지를 전송합니다.</string>
     <string name="Page3Message"><![CDATA[<b>텔레그램</b>]]>은 영원히 무료입니다. \n광고도 없고 이용료도 없습니다.</string>
     <string name="Page4Message"><![CDATA[<b>텔레그램</b>]]>은 그 어떤 누구로부터도\n메시지를 안전하게 보호합니다.</string>
     <string name="Page5Message"><![CDATA[<b>텔레그램</b>]]>은 대화나 미디어의 용량에\n제한이 없습니다.</string>
     <string name="Page6Message"><![CDATA[<b>텔레그램</b>]]>은 다른 기기에서도\n동시에 사용할 수 있습니다.</string>
-    <string name="Page7Message"><![CDATA[<b>텔레그램</b>]]>은 메시지를 강력하게 암호화하며\n자동으로 삭제되게 할 수 있습니다.</string>
     <string name="StartMessaging">시작하기</string>
     <!--VoIP-->
     <string name="AccountSettings">계정설정</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 623f5b9e2..187b193ce 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Verwijderd account</string>
     <string name="SelectChat">Kies een chat</string>
     <string name="PhotoTip">Druk en houd ingedrukt</string>
+    <string name="DisappearingPhoto">Geheime foto</string>
+    <string name="DisappearingVideo">Geheime video</string>
     <string name="CompatibilityChat">%1$s gebruikt een oudere versie van Telegram, dus worden geheime foto\'s weergegeven in de compatibiliteitsmodus.\n\nZodra %2$s Telegram updatet werken foto\'s met timers voor 1 minuut of minder in de \'Druk en houd ingedrukt\'-modus en krijg je een bericht wanneer de andere partij een schermafdruk maakt.</string>
     <string name="SearchMessages">BERICHTEN</string>
     <string name="Search">Zoeken</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s heeft je een bericht gestuurd</string>
     <string name="NotificationMessagePhoto">%1$s heeft je een foto gestuurd</string>
     <string name="NotificationMessageVideo">%1$s heeft je een video gestuurd</string>
+    <string name="NotificationMessageSDPhoto">%1$s heeft je een zelfvernietigende foto gestuurd</string>
+    <string name="NotificationMessageSDVideo">%1$s heeft je een zelfvernietigende video gestuurd</string>
     <string name="NotificationMessageContact">%1$s heeft een contact met je gedeeld</string>
     <string name="NotificationMessageMap">%1$s heeft je een locatie gestuurd</string>
     <string name="NotificationMessageGame">%1$s wil %2$s met je spelen</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Werk</string>
     <string name="PhoneOther">Overig</string>
     <string name="PhoneMain">Hoofd</string>
+    <string name="UserBio">Bio</string>
+    <string name="UserBioEmpty">Geen</string>
+    <string name="UserBioInfo">Je kunt hier wat over jezelf vertellen. Iedereen die je profiel opent kan deze tekst zien.</string>
     <string name="StartEncryptedChat">Geheime chat starten</string>
     <string name="GroupsInCommon">Gedeelde groepen</string>
     <string name="GroupsInCommonTitle">Gedeelde groepen</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">Er is een fout opgetreden.</string>
     <string name="EncryptionKey">Encryptiesleutel</string>
     <string name="MessageLifetime">Zelfvernietigingstimer</string>
+    <string name="MessageLifetimePhoto">Als je een timer instelt vernietigt de foto zichzelf na het bekijken.</string>
+    <string name="MessageLifetimeVideo">Als je een timer instelt vernietigt de video zichzelf na het bekijken.</string>
     <string name="ShortMessageLifetimeForever">Uit</string>
     <string name="EncryptionKeyDescription">Deze afbeelding en tekst zijn afgeleid van de encryptiesleutel voor deze geheime chat met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nAls dit er hetzelfde uitziet op het apparaat van <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, dan is end-to-end-encryptie gegarandeerd.<![CDATA[<br><br>]]>Lees meer op telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">Dit bericht wordt niet ondersteund door jouw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
+    <string name="AttachPhotoExpired">Foto is verlopen</string>
+    <string name="AttachVideoExpired">Video is verlopen</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Locatie</string>
     <string name="AttachContact">Contact</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Veilig</string>
     <string name="Page5Title">Krachtig</string>
     <string name="Page6Title">In de cloud</string>
-    <string name="Page7Title">Privé</string>
     <string name="Page1Message">\'s Werelds <![CDATA[<b>snelste</b>]]> berichtendienst.\nHet is <![CDATA[<b>gratis</b>]]> en <![CDATA[<b>veilig</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> bezorgt berichten sneller dan\nelke andere applicatie.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is altijd gratis. Geen advertenties.\nGeen abonnementskosten.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligd je berichten\ntegen aanvallen van hackers.</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> beperkt je niet in de grootte van\nje media of chats.</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten\nvanaf meerdere apparaten.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld\nen kunnen zichzelf vernietigen.</string>
     <string name="StartMessaging">Begin met chatten</string>
     <!--VoIP-->
     <string name="AccountSettings">Accountinstellingen</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 23f1b6255..8daf50da5 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Conta Excluída</string>
     <string name="SelectChat">Selecione um Chat</string>
     <string name="PhotoTip">Toque e segure para ver</string>
+    <string name="DisappearingPhoto">Foto Secreta</string>
+    <string name="DisappearingVideo">Vídeo Secreto</string>
     <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualizar o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
     <string name="SearchMessages">MENSAGENS</string>
     <string name="Search">Busca</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s te enviou uma mensagem</string>
     <string name="NotificationMessagePhoto">%1$s te enviou uma foto</string>
     <string name="NotificationMessageVideo">%1$s te enviou um vídeo</string>
+    <string name="NotificationMessageSDPhoto">%1$s te enviou uma foto auto-destrutiva</string>
+    <string name="NotificationMessageSDVideo">%1$s te enviou um video auto-destrutivo</string>
     <string name="NotificationMessageContact">%1$s compartilhou um contato com você</string>
     <string name="NotificationMessageMap">%1$s enviou uma localização</string>
     <string name="NotificationMessageGame">%1$s te convidou para jogar %2$s</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Trabalho</string>
     <string name="PhoneOther">Outro</string>
     <string name="PhoneMain">Principal</string>
+    <string name="UserBio">Bio</string>
+    <string name="UserBioEmpty">Nenhuma</string>
+    <string name="UserBioInfo">Você pode adicionar algumas linhas sobre você. Qualquer um que abra seu perfil verá esse texto.</string>
     <string name="StartEncryptedChat">Iniciar Chat Secreto</string>
     <string name="GroupsInCommon">Grupos em Comum</string>
     <string name="GroupsInCommonTitle">Grupos em Comum</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
     <string name="EncryptionKey">Chave criptográfica</string>
     <string name="MessageLifetime">Tempo de autodestruição</string>
+    <string name="MessageLifetimePhoto">Se você definir um temporizador, a foto irá se auto-destruir após ser vista.</string>
+    <string name="MessageLifetimeVideo">Se você definir um temporizador, o vídeo irá se auto-destruir após ser visto.</string>
     <string name="ShortMessageLifetimeForever">Desativado</string>
     <string name="EncryptionKeyDescription">Essa imagem e texto foram derivadas da chave criptográfica para esse chat secreto com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nSe você vê o mesmo no dispositivo de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, a criptografia ponta a ponta está garantida.</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq/br#chats-secretos</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualizá-la atualize seu aplicativo em https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Vídeo</string>
+    <string name="AttachPhotoExpired">A foto expirou</string>
+    <string name="AttachVideoExpired">O vídeo expirou</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Localização</string>
     <string name="AttachContact">Contato</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Seguro</string>
     <string name="Page5Title">Poderoso</string>
     <string name="Page6Title">Baseado na nuvem</string>
-    <string name="Page7Title">Privado</string>
     <string name="Page1Message">O aplicativo de mensagem mais <![CDATA[<b>rápido</b>]]> do mundo.\nÉ <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
     <string name="Page2Message">O <![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido que qualquer outro aplicativo.</string>
     <string name="Page3Message">O <![CDATA[<b>Telegram</b>]]> é gratuito para sempre. Sem propagandas.\nSem taxas.</string>
     <string name="Page4Message">O <![CDATA[<b>Telegram</b>]]> mantém suas mensagens seguras\nde ataques de hackers.</string>
     <string name="Page5Message">O <![CDATA[<b>Telegram</b>]]> não possui limites no tamanho de\nsuas mídia e conversas.</string>
     <string name="Page6Message">O <![CDATA[<b>Telegram</b>]]> te permite acessar suas mensagens \nde múltiplos dispositivos.</string>
-    <string name="Page7Message">O <![CDATA[<b>Telegram</b>]]> possui mensagens fortemente criptografadas\ne que podem se auto-destruir.</string>
     <string name="StartMessaging">Comece a conversar</string>
     <!--VoIP-->
     <string name="AccountSettings">Configurações de Conta</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 5d9bbecfd..4b3f85b39 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -126,6 +126,8 @@
     <string name="HiddenName">Deleted Account</string>
     <string name="SelectChat">Select Chat</string>
     <string name="PhotoTip">Tap and hold to view</string>
+    <string name="DisappearingPhoto">Secret Photo</string>
+    <string name="DisappearingVideo">Secret Video</string>
     <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
     <string name="SearchMessages">MESSAGES</string>
     <string name="Search">Search</string>
@@ -587,6 +589,8 @@
     <string name="NotificationMessageNoText">%1$s sent you a message</string>
     <string name="NotificationMessagePhoto">%1$s sent you a photo</string>
     <string name="NotificationMessageVideo">%1$s sent you a video</string>
+    <string name="NotificationMessageSDPhoto">%1$s sent you a self-destructing photo</string>
+    <string name="NotificationMessageSDVideo">%1$s sent you a self-destructing video</string>
     <string name="NotificationMessageContact">%1$s shared a contact with you</string>
     <string name="NotificationMessageMap">%1$s sent you a location</string>
     <string name="NotificationMessageGame">%1$s invited you to play %2$s</string>
@@ -732,6 +736,9 @@
     <string name="PhoneWork">Work</string>
     <string name="PhoneOther">Other</string>
     <string name="PhoneMain">Main</string>
+    <string name="UserBio">Bio</string>
+    <string name="UserBioEmpty">None</string>
+    <string name="UserBioInfo">You can add a few lines about yourself. Anyone who opens your profile will see this text.</string>
     <string name="StartEncryptedChat">Start Secret Chat</string>
     <string name="GroupsInCommon">Groups in Common</string>
     <string name="GroupsInCommonTitle">Groups in common</string>
@@ -739,6 +746,8 @@
     <string name="CreateEncryptedChatError">An error occurred.</string>
     <string name="EncryptionKey">Encryption Key</string>
     <string name="MessageLifetime">Self-Destruct Timer</string>
+    <string name="MessageLifetimePhoto">If you set a timer, the photo will self-destruct after it was viewed.</string>
+    <string name="MessageLifetimeVideo">If you set a timer, the video will self-destruct after it was viewed.</string>
     <string name="ShortMessageLifetimeForever">Off</string>
     <string name="EncryptionKeyDescription">This image and text were derived from the encryption key for this secret chat with <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nIf they look the same on <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> device, end-to-end encryption is guaranteed.\n\nLearn more at telegram.org</string>
     <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
@@ -1299,6 +1308,8 @@
     <string name="UnsupportedMedia">This message is not supported on your version of Telegram. Update the app to view: https://telegram.org/update</string>
     <string name="AttachPhoto">Photo</string>
     <string name="AttachVideo">Video</string>
+    <string name="AttachPhotoExpired">Photo has expired</string>
+    <string name="AttachVideoExpired">Video has expired</string>
     <string name="AttachGif">GIF</string>
     <string name="AttachLocation">Location</string>
     <string name="AttachContact">Contact</string>
@@ -1396,14 +1407,12 @@
     <string name="Page4Title">Secure</string>
     <string name="Page5Title">Powerful</string>
     <string name="Page6Title">Cloud-Based</string>
-    <string name="Page7Title">Private</string>
     <string name="Page1Message">The world\'s <![CDATA[<b>fastest</b>]]> messaging app.\nIt is <![CDATA[<b>free</b>]]> and <![CDATA[<b>secure</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> delivers messages faster than\nany other application.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is free forever. No ads.\nNo subscription fees.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> keeps your messages safe\nfrom hacker attacks.</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> has no limits on the size of\nyour media and chats.</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lets you access your messages\nfrom multiple devices.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> messages are heavily encrypted\nand can self-destruct.</string>
     <string name="StartMessaging">Start Messaging</string>
     <!-- VoIP -->
     <string name="AccountSettings">Account Settings</string>
