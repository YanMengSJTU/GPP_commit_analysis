diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 372124bc8..39d30d1b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -11,8 +11,8 @@
 public class BuildVars {
     public static boolean DEBUG_VERSION = true;
     public static int BUILD_VERSION = 627;
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static int APP_ID = 34798; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "6fff96da381a0de22a32a22899bcad68"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
     // public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
     public static String GCM_SENDER_ID = "760348033672";
     public static String SEND_LOGS_EMAIL = "zeqing.g@gmail.com";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index cf6b51926..62b95a425 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -163,6 +163,9 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
                 database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
 
+                // SPA
+                database.executeFast("CREATE TABLE spa_user_with_weight(uid INTEGER PRIMARY KEY, weight INTEGER DEFAULT 5)").stepThis().dispose();
+
                 //version
                 database.executeFast("PRAGMA user_version = 23").stepThis().dispose();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
new file mode 100644
index 000000000..4a9b47e5f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
@@ -0,0 +1,9 @@
+package org.telegram.messenger;
+
+/**
+ * Created by zqguo on 2015/11/20.
+ */
+public class SPAConfig {
+    public static String keyManager = "http://175.186.104.194/keyManager/";
+    public static String resultMergeServer = "http://10.131.1.38/results/";
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/FriendListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/FriendListActivity.java
new file mode 100644
index 000000000..bcb25e5f8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/FriendListActivity.java
@@ -0,0 +1,263 @@
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Build;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextInfoCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.LinkedList;
+
+/**
+ * Created by zqguo on 2015/10/28.
+ */
+public class FriendListActivity extends BaseFragment implements ContactsActivity.ContactsActivityDelegate {
+
+    private ListView listView;
+    private ListAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private FrameLayout progressView;
+    private int selectedUserId;
+    private ArrayList<Integer> usersId = new ArrayList<>();
+
+    private final static int invite_friends = 1;
+
+    @Override
+    public boolean onFragmentCreate() {
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("SPAFriendsList", R.string.SPAFriendsList));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == invite_friends) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlyUsers", true);
+                    args.putBoolean("destroyAfterSelect", true);
+                    args.putBoolean("returnAsResult", true);
+                    ContactsActivity fragment = new ContactsActivity(args);
+                    fragment.setDelegate(FriendListActivity.this);
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        menu.addItem(invite_friends, R.drawable.plus);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff808080);
+        emptyTextView.setTextSize(20);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setVisibility(View.INVISIBLE);
+        emptyTextView.setText(LocaleController.getString("NoSelected", R.string.NoSelected));
+        frameLayout.addView(emptyTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        progressView = new FrameLayout(context);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressView.addView(progressBar, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
+
+        listView = new ListView(context);
+        listView.setEmptyView(emptyTextView);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setAdapter(listViewAdapter = new ListAdapter(context));
+        if (Build.VERSION.SDK_INT >= 11) {
+            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+        }
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (i < usersId.size()) {
+                    Bundle args = new Bundle();
+                    args.putInt("user_id", usersId.get(i));
+                    presentFragment(new ProfileActivity(args));
+                }
+            }
+        });
+
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (i < 0 || i >= usersId.size() || getParentActivity() == null) {
+                    return true;
+                }
+                selectedUserId = usersId.get(i);
+                final int selectedItem = i;
+
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                CharSequence[] items = new CharSequence[]{LocaleController.getString("Deselect", R.string.Deselect)};
+                builder.setItems(items, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (i == 0) {
+                            usersId.remove(selectedItem);
+                            listViewAdapter.notifyDataSetChanged();
+                        }
+                    }
+                });
+                showDialog(builder.create());
+
+                return true;
+            }
+        });
+
+        if (!usersId.isEmpty()) {
+            progressView.setVisibility(View.VISIBLE);
+            emptyTextView.setVisibility(View.GONE);
+            listView.setEmptyView(null);
+        } else {
+            progressView.setVisibility(View.GONE);
+            listView.setEmptyView(emptyTextView);
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void didSelectContact(TLRPC.User user, String param) {
+        if (user == null) {
+            return;
+        }
+        usersId.add(user.id);
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != usersId.size();
+        }
+
+        @Override
+        public int getCount() {
+            if (usersId.isEmpty()) {
+                return 0;
+            }
+            return usersId.size() + 1;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new UserCell(mContext, 1);
+                }
+                TLRPC.User user = MessagesController.getInstance().getUser(usersId.get(i));
+                if (user != null) {
+                    ((UserCell) view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoCell(mContext);
+                    ((TextInfoCell) view).setText(LocaleController.getString("CancelUserText", R.string.CancelUserText));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if(i == usersId.size()) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return usersId.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
index 1b71cbb0a..4177e6767 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
@@ -1,18 +1,26 @@
 package org.telegram.ui;
 
+import android.app.Activity;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
-import android.widget.ListAdapter;
 import android.widget.ListView;
 
-import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.volley.Request;
+import org.telegram.messenger.volley.RequestQueue;
+import org.telegram.messenger.volley.Response;
+import org.telegram.messenger.volley.VolleyError;
+import org.telegram.messenger.volley.toolbox.StringRequest;
+import org.telegram.messenger.volley.toolbox.Volley;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
@@ -54,6 +62,7 @@ public boolean onFragmentCreate() {
         spaResultRow2 = rowCount++;
         spaResultDetailRow = rowCount++;
 
+
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
 
         return true;
@@ -67,6 +76,28 @@ public void onFragmentDestroy() {
 
     @Override
     public View createView(Context context) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("spaconfig", Activity.MODE_PRIVATE);
+        if (!preferences.contains("private_key")) {
+            RequestQueue queue = Volley.newRequestQueue(context);
+            String url = SPAConfig.keyManager;
+            // Request a string response from the provided URL.
+            StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
+                    new Response.Listener<String>() {
+                        @Override
+                        public void onResponse(String response) {
+                            // Display the first 500 characters of the response string.
+                            Log.v("SPA", "Response is: "+ response.substring(0,500));
+                        }
+                    }, new Response.ErrorListener() {
+                @Override
+                public void onErrorResponse(VolleyError error) {
+                    Log.v("SPA", "That didn't work!");
+                }
+            });
+// Add the request to the RequestQueue.
+            queue.add(stringRequest);
+        }
+
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("SPASettings", R.string.SPASettings));
@@ -98,9 +129,10 @@ public void onItemClick(int id) {
             public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
                if (i == selectPrivacyItemsRow)  {
                    Log.v("SPA", "select privacy items");
-                   presentFragment(new SelectPrivacyItems());
+                   presentFragment(new SelectPrivacyItemsActivity());
                } else if (i == friendsListRow) {
                    Log.v("SPA", "friends list");
+                   presentFragment(new FriendListActivity());
                } else if (i == sendSpaRequstRow) {
                    Log.v("SPA", "send spa request");
                } else if (i == spaResultRow2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java b/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItemsActivity.java
similarity index 91%
rename from TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java
rename to TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItemsActivity.java
index f40f1b7be..17c430b32 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItemsActivity.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.util.Log;
+import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -27,7 +28,7 @@
 /**
  * Created by zqguo on 2015/10/27.
  */
-public class SelectPrivacyItems extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+public class SelectPrivacyItemsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private ListAdapter listAdapter;
 
     private int privacySectionRow;
@@ -65,7 +66,7 @@ public void onFragmentDestroy() {
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("SPASettings", R.string.SPASettings));
+        actionBar.setTitle(LocaleController.getString("SPASelectItems", R.string.SPASelectItems));
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -86,14 +87,15 @@ public void onItemClick(int id) {
         listView.setDividerHeight(0);
         listView.setVerticalScrollBarEnabled(false);
         listView.setDrawSelectorOnTop(true);
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        //frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
         listView.setAdapter(listAdapter);
 
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
                 if (i == lastSeenRow)  {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("spaconfig", Activity.MODE_PRIVATE);
                     boolean last_seen_setting = preferences.getBoolean("last_seen_setting", false);
                     SharedPreferences.Editor editor = preferences.edit();
                     editor.putBoolean("last_seen_setting", !last_seen_setting);
@@ -102,7 +104,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         ((TextCheckCell) view).setChecked(!last_seen_setting);
                     }
                 } else if (i == passcodeLock) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("spaconfig", Activity.MODE_PRIVATE);
                     boolean passcode_setting = preferences.getBoolean("passcode_setting", false);
                     SharedPreferences.Editor editor = preferences.edit();
                     editor.putBoolean("passcode_setting", !passcode_setting);
@@ -177,9 +179,10 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             if (type == 0) {
                 if (view == null) {
                     view = new TextCheckCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
                 }
                 TextCheckCell textCell = (TextCheckCell) view;
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("spaconfig", Activity.MODE_PRIVATE);
                 if (i == lastSeenRow) {
                     textCell.setTextAndCheck(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), preferences.getBoolean("last_seen_setting", false), false);
                 } else if (i == passcodeLock) {
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index c5c64d5b6..9f0fdb9ce 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -478,6 +478,9 @@
     <string name="SPAResult">SPA Result</string>
     <string name="SPAPrivacyDetailHelp">Choose privacy settings being proposed by SPA.</string>
     <string name="SPASecurityDetailHelp">Choose security settings being proposed by SPA.</string>
+    <string name="CancelUserText">Tap and hold on user to deselect.</string>
+    <string name="NoSelected">No Selected User yet</string>
+    <string name="Deselect">Deselect</string>
     <!--sessions view-->
     <string name="SessionsTitle">Active Sessions</string>
     <string name="CurrentSession">Current session</string>
