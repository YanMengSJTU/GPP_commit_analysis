diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 2009cf46a..84e72592f 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -159,6 +159,7 @@
                 android:resource="@xml/contacts" />
         </service>
 
+        <service android:name="org.telegram.android.DeleteMessageRepeat" android:enabled="true"/>
         <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
         <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
         <service android:name="org.telegram.android.NotificationDelay" android:exported="false"/>
diff --git a/TMessagesProj/src/main/java/org/telegram/android/DeleteMessageRepeat.java b/TMessagesProj/src/main/java/org/telegram/android/DeleteMessageRepeat.java
new file mode 100644
index 000000000..0a22f576a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/DeleteMessageRepeat.java
@@ -0,0 +1,21 @@
+package org.telegram.android;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.util.Log;
+
+/**
+ * Created by jun0813 on 2015. 7. 10..
+ */
+public class DeleteMessageRepeat extends IntentService {
+    public DeleteMessageRepeat() { super("DeleteMessageRepeat");}
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                MessagesController.getInstance().deleteMesaages();
+            }
+        });
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 156d4b38c..988c2c8f4 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -17,6 +17,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.util.Base64;
+import android.util.Log;
 import android.util.SparseArray;
 import android.widget.Toast;
 
@@ -43,6 +44,7 @@
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Semaphore;
+import java.util.concurrent.TimeUnit;
 
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
@@ -1663,6 +1665,79 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
+    public void deleteDialogHistory(long did) {
+
+        int lower_part = (int) did;
+        int high_id = (int) (did >> 32);
+
+        if (high_id == 1) {
+            return;
+        }
+
+        final Semaphore semaphore = new Semaphore(0);
+        if (lower_part != 0) {
+            TLRPC.TL_messages_deleteHistory req = new TLRPC.TL_messages_deleteHistory();
+            req.peer = new TLRPC.TL_inputPeerContact();
+            req.peer.user_id = lower_part;
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error == null) {
+                        TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
+                    }
+                    semaphore.release();
+                }
+            });
+        }
+
+        try {
+            semaphore.acquire();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public void deleteMesaages() {
+        TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
+        req.offset = 0;
+        req.limit = 100;
+
+        final ArrayList<Integer> usersToLoad = new ArrayList<>();
+        final Semaphore semaphore = new Semaphore(0);
+
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    final TLRPC.messages_Dialogs dialogsRes = (TLRPC.messages_Dialogs) response;
+                    for (int a = 0; a < dialogsRes.dialogs.size(); a++) {
+                        TLRPC.TL_dialog dialog = dialogsRes.dialogs.get(a);
+                        if (dialog.peer.chat_id > 0 && dialog.unread_count == 0) {
+                            MessagesController.getInstance().deleteUserFromChat(dialog.peer.chat_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                        } else {
+                            if (dialog.peer.user_id != 0 && dialog.unread_count == 0) {
+                                MessagesStorage.getInstance().deleteSyncDialog(dialog.peer.user_id, false);
+                                usersToLoad.add(dialog.peer.user_id);
+                            }
+                        }
+                    }
+                }
+                semaphore.release();
+
+            }
+        });
+
+        try {
+            semaphore.tryAcquire(2, TimeUnit.SECONDS);;
+        } catch (Exception e) {
+            //FileLog.e("tmessages", e);
+        }
+
+        for (Integer did : usersToLoad) {
+            deleteDialogHistory(did);
+        }
+    }
+
     private void applyDialogsNotificationsSettings(ArrayList<TLRPC.TL_dialog> dialogs) {
         SharedPreferences.Editor editor = null;
         for (TLRPC.TL_dialog dialog : dialogs) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index b5030041b..015310239 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -879,6 +879,107 @@ public void run() {
         });
     }
 
+    public void deleteDialog() {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    database.executeFast("DELETE FROM dialogs WHERE 1").stepThis().dispose();
+                    database.executeFast("DELETE FROM chat_settings WHERE 1").stepThis().dispose();
+                    database.executeFast("DELETE FROM messages WHERE 1").stepThis().dispose();
+                    database.executeFast("DELETE FROM chats WHERE 1").stepThis().dispose();
+                    database.executeFast("DELETE FROM enc_chats WHERE 1").stepThis().dispose();
+                    database.executeFast("DELETE FROM messages_seq WHERE 1").stepThis().dispose();
+                } catch (Exception e) {
+                    cleanUp(true);
+                }
+            }
+            });
+    }
+
+    public void deleteSyncDialog(final long did, final boolean messagesOnly) {
+        try {
+            if (!messagesOnly) {
+                database.executeFast("DELETE FROM dialogs WHERE did = " + did).stepThis().dispose();
+                database.executeFast("DELETE FROM chat_settings WHERE uid = " + did).stepThis().dispose();
+                int lower_id = (int)did;
+                int high_id = (int)(did >> 32);
+                if (lower_id != 0) {
+                    if (high_id == 1) {
+                        database.executeFast("DELETE FROM chats WHERE uid = " + lower_id).stepThis().dispose();
+                    } else if (lower_id < 0) {
+                        database.executeFast("DELETE FROM chats WHERE uid = " + (-lower_id)).stepThis().dispose();
+                    }
+                } else {
+                    database.executeFast("DELETE FROM enc_chats WHERE uid = " + high_id).stepThis().dispose();
+                    //database.executeFast("DELETE FROM secret_holes WHERE uid = " + high_id).stepThis().dispose();
+                }
+            }
+
+            if ((int) did == 0) {
+                SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
+                ArrayList<File> filesToDelete = new ArrayList<>();
+                try {
+                    while (cursor.next()) {
+                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
+                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                            if (message == null || message.media == null) {
+                                continue;
+                            }
+                            if (message.media instanceof TLRPC.TL_messageMediaAudio) {
+                                File file = FileLoader.getPathToAttach(message.media.audio);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                                for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
+                                    File file = FileLoader.getPathToAttach(photoSize);
+                                    if (file != null && file.toString().length() > 0) {
+                                        filesToDelete.add(file);
+                                    }
+                                }
+                            } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
+                                File file = FileLoader.getPathToAttach(message.media.video);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                                file = FileLoader.getPathToAttach(message.media.video.thumb);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                                File file = FileLoader.getPathToAttach(message.media.document);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                                file = FileLoader.getPathToAttach(message.media.document.thumb);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                            }
+                        }
+                        buffersStorage.reuseFreeBuffer(data);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                cursor.dispose();
+                FileLoader.getInstance().deleteFiles(filesToDelete);
+            }
+
+            database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + did).stepThis().dispose();
+            database.executeFast("DELETE FROM messages WHERE uid = " + did).stepThis().dispose();
+            database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + did).stepThis().dispose();
+            database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + did).stepThis().dispose();
+            database.executeFast("DELETE FROM media_v2 WHERE uid = " + did).stepThis().dispose();
+            BotQuery.clearBotKeyboard(did, null);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+    }
+
     public void deleteDialog(final long did, final boolean messagesOnly) {
         storageQueue.postRunnable(new Runnable() {
             @Override
@@ -2916,7 +3017,9 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                 state.bindInteger(3, MessageObject.getUnreadFlags(message));
                 state.bindInteger(4, message.send_state);
                 state.bindInteger(5, message.date);
-                state.bindByteBuffer(6, data.buffer);
+                if (message instanceof TLRPC.TL_message_secret) {
+                    state.bindByteBuffer(6, data.buffer);
+                }
                 state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
                 state.bindInteger(8, message.ttl);
                 state.bindInteger(9, getMessageMediaType(message));
@@ -3738,7 +3841,9 @@ public void run() {
                             state.bindInteger(3, MessageObject.getUnreadFlags(message));
                             state.bindInteger(4, message.send_state);
                             state.bindInteger(5, message.date);
-                            state.bindByteBuffer(6, data.buffer);
+                            if (message instanceof TLRPC.TL_message_secret) {
+                                state.bindByteBuffer(6, data.buffer);
+                            }
                             state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
                             state.bindInteger(8, 0);
                             state.bindInteger(9, 0);
@@ -3778,6 +3883,106 @@ public void run() {
         });
     }
 
+    public void loadDialogs(final int offset, final int serverOffset, final int count) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                TLRPC.messages_Dialogs dialogs = new TLRPC.messages_Dialogs();
+                ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
+                try {
+                    ArrayList<Integer> usersToLoad = new ArrayList<>();
+                    usersToLoad.add(UserConfig.getClientUserId());
+                    ArrayList<Integer> chatsToLoad = new ArrayList<>();
+                    ArrayList<Integer> encryptedToLoad = new ArrayList<>();
+                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.date DESC LIMIT %d,%d", offset, count));
+                    while (cursor.next()) {
+                        TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
+                        dialog.id = cursor.longValue(0);
+                        dialog.top_message = cursor.intValue(1);
+                        dialog.unread_count = cursor.intValue(2);
+                        dialog.last_message_date = cursor.intValue(3);
+                        long flags = cursor.longValue(8);
+                        int low_flags = (int)flags;
+                        dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
+                        if ((low_flags & 1) != 0) {
+                            dialog.notify_settings.mute_until = (int)(flags >> 32);
+                            if (dialog.notify_settings.mute_until == 0) {
+                                dialog.notify_settings.mute_until = Integer.MAX_VALUE;
+                            }
+                        }
+
+                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(4));
+                        if (data != null && cursor.byteBufferValue(4, data.buffer) != 0) {
+                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                            if (message != null) {
+                                MessageObject.setUnreadFlags(message, cursor.intValue(5));
+                                message.id = cursor.intValue(6);
+                                int date = cursor.intValue(9);
+                                if (date != 0) {
+                                    dialog.last_message_date = date;
+                                }
+                                message.send_state = cursor.intValue(7);
+
+                                if (!usersToLoad.contains(message.from_id)) {
+                                    usersToLoad.add(message.from_id);
+                                }
+                                if (message.action != null && message.action.user_id != 0) {
+                                    if (!usersToLoad.contains(message.action.user_id)) {
+                                        usersToLoad.add(message.action.user_id);
+                                    }
+                                }
+                                if (message.fwd_from_id != 0) {
+                                    if (!usersToLoad.contains(message.fwd_from_id)) {
+                                        usersToLoad.add(message.fwd_from_id);
+                                    }
+                                }
+                            }
+                        }
+                        buffersStorage.reuseFreeBuffer(data);
+
+                        int lower_id = (int)dialog.id;
+                        int high_id = (int)(dialog.id >> 32);
+                        if (lower_id != 0) {
+                            if (high_id == 1) {
+                                if (!chatsToLoad.contains(lower_id)) {
+                                    chatsToLoad.add(lower_id);
+                                }
+                            } else {
+                                if (lower_id > 0) {
+                                    if (!usersToLoad.contains(lower_id)) {
+                                        usersToLoad.add(lower_id);
+                                    }
+                                } else {
+                                    if (!chatsToLoad.contains(-lower_id)) {
+                                        chatsToLoad.add(-lower_id);
+                                    }
+                                }
+                            }
+                        } else {
+                            if (!encryptedToLoad.contains(high_id)) {
+                                encryptedToLoad.add(high_id);
+                                dialogs.dialogs.add(dialog);
+
+                            }
+                        }
+                    }
+                    cursor.dispose();
+
+                    if (!encryptedToLoad.isEmpty()) {
+                        getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
+                    }
+                    else {
+                        return;
+                    }
+                    MessagesController.getInstance().processLoadedDialogs(dialogs, encryptedChats, offset, serverOffset, count, true, false);
+                } catch (Exception e) {
+                }
+            }
+        });
+    }
+
+
+
     public void getDialogs(final int offset, final int serverOffset, final int count) {
         storageQueue.postRunnable(new Runnable() {
             @Override
@@ -3939,7 +4144,9 @@ public void run() {
                                 state.bindInteger(3, MessageObject.getUnreadFlags(message));
                                 state.bindInteger(4, message.send_state);
                                 state.bindInteger(5, message.date);
-                                state.bindByteBuffer(6, data.buffer);
+                                if (message instanceof TLRPC.TL_message_secret) {
+                                    state.bindByteBuffer(6, data.buffer);
+                                }
                                 state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
                                 state.bindInteger(8, 0);
                                 state.bindInteger(9, 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
index 9732b4aa7..17f130b9e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
@@ -29,3 +29,4 @@ public void run() {
         });
     }
 }
+
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 3283523ab..6a32f25ca 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -30,6 +30,7 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 import android.support.v4.app.RemoteInput;
+import android.util.Log;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -331,6 +332,24 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
         return msg;
     }
 
+    public void scheduleDeleteMessageRepeat() {
+        try {
+            PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, DeleteMessageRepeat.class), 0);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            int minutes = preferences.getInt("repeat_delete_time", 240);
+            if (minutes > 0) {
+                Log.d("NotificationsController::scheduleDeleteMessageRepeat", "minutes = " + minutes);
+                alarmManager.cancel(pintent);
+                alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + minutes * 60 * 1000 , minutes * 60 * 1000, pintent);
+            } else {
+                alarmManager.cancel(pintent);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+    }
+
     private void scheduleNotificationRepeat() {
         try {
             PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class), 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index c7b0937a6..acb993931 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -32,6 +32,7 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.MediaController;
+import org.telegram.android.NotificationsController;
 import org.telegram.android.NotificationsService;
 import org.telegram.android.SendMessagesHelper;
 import org.telegram.android.LocaleController;
@@ -164,6 +165,7 @@ public static void postInitApplication() {
             ConnectionsManager.getInstance().initPushConnection();
             MessagesController.getInstance().getBlockedUsers(true);
             SendMessagesHelper.getInstance().checkUnsentMessages();
+            NotificationsController.getInstance().scheduleDeleteMessageRepeat();
         }
 
         ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 15c858b24..293c6cf46 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -11,11 +11,11 @@
 public class BuildVars {
     public static boolean DEBUG_VERSION = false;
     public static int BUILD_VERSION = 572;
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String GCM_SENDER_ID = "760348033672";
-    public static String SEND_LOGS_EMAIL = "email@gmail.com";
+    public static int APP_ID = 34112; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "e4cab2862b5dd28f315bdc9e305ffa37"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "e4cab2862b5dd28f315bdc9e305ffa37";
+    public static String GCM_SENDER_ID = "1085627379354";
+    public static String SEND_LOGS_EMAIL = "jun0813@gmail.com";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 53ec757da..5ae0c4f63 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -11,13 +11,16 @@
 import android.animation.ObjectAnimator;
 import android.animation.StateListAnimator;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.graphics.Outline;
 import android.os.Build;
 import android.os.Bundle;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -40,6 +43,7 @@
 import org.telegram.android.UserObject;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.ContactsController;
@@ -137,7 +141,20 @@ public boolean onFragmentCreate() {
 
 
         if (!dialogsLoaded) {
-            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            boolean startDeleteMessage = preferences.getBoolean("start_delete_message", true);
+            if (startDeleteMessage) {
+                try {
+                    MessagesController.getInstance().deleteMesaages(); // 서버  및 캐쉬 메시지 삭제
+                    MessagesStorage.getInstance().loadDialogs(0, 0, 100); // 캐쉬에서 비밀대화만 읽음
+                    MessagesController.getInstance().loadDialogs(0, 0, 100, false); // 서버 에서 읽어 들임
+
+                } catch (Exception e) {
+                }
+            }
+            else {
+                MessagesController.getInstance().loadDialogs(0, 0, 100, true); // 캐쉬 에서 읽어 들임
+            }
             ContactsController.getInstance().checkInviteText();
             dialogsLoaded = true;
         }
@@ -161,6 +178,7 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
         }
+
         delegate = null;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
index 6b6449365..4d787ee4d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -8,10 +8,12 @@
 
 package org.telegram.ui;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.SharedPreferences;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -23,6 +25,8 @@
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
+import org.telegram.android.NotificationsController;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -34,6 +38,8 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
 import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.Components.LayoutHelper;
@@ -43,6 +49,7 @@
 public class PrivacySettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
     private ListAdapter listAdapter;
+    private ListView listView;
 
     private int privacySectionRow;
     private int blockedRow;
@@ -50,6 +57,8 @@
     private int lastSeenDetailRow;
     private int securitySectionRow;
     private int sessionsRow;
+    private int enableStartdeleteMessagesRow;
+    private int repeatDeleteMessagesRow;
     private int passwordRow;
     private int passcodeRow;
     private int sessionsDetailRow;
@@ -70,6 +79,8 @@ public boolean onFragmentCreate() {
         lastSeenRow = rowCount++;
         lastSeenDetailRow = rowCount++;
         securitySectionRow = rowCount++;
+        enableStartdeleteMessagesRow = rowCount++;
+        repeatDeleteMessagesRow = rowCount++;
         passcodeRow = rowCount++;
         passwordRow = rowCount++;
         sessionsRow = rowCount++;
@@ -109,7 +120,7 @@ public void onItemClick(int id) {
         FrameLayout frameLayout = (FrameLayout) fragmentView;
         frameLayout.setBackgroundColor(0xfff0f0f0);
 
-        ListView listView = new ListView(context);
+        listView = new ListView(context);
         listView.setDivider(null);
         listView.setDividerHeight(0);
         listView.setVerticalScrollBarEnabled(false);
@@ -189,6 +200,54 @@ public void run() {
                     } else {
                         presentFragment(new PasscodeActivity(0));
                     }
+                } else if (i == enableStartdeleteMessagesRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean startDeleteMessage = preferences.getBoolean("start_delete_message", true);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("start_delete_message", !startDeleteMessage);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!startDeleteMessage);
+                    }
+                } else if (i == repeatDeleteMessagesRow) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("RepeatDeleteMessages", R.string.RepeatDeleteMessages));
+                    builder.setItems(new CharSequence[] {
+                                    LocaleController.getString("RepeatDisabled", R.string.RepeatDisabled),
+                                    LocaleController.formatPluralString("Minutes", 5),
+                                    LocaleController.formatPluralString("Minutes", 10),
+                                    LocaleController.formatPluralString("Minutes", 30),
+                                    LocaleController.formatPluralString("Hours", 1),
+                                    LocaleController.formatPluralString("Hours", 2),
+                                    LocaleController.formatPluralString("Hours", 4)
+                            }, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    int minutes = 0;
+                                    if (which == 1) {
+                                        minutes = 5;
+                                    } else if (which == 2) {
+                                        minutes = 10;
+                                    } else if (which == 3) {
+                                        minutes = 30;
+                                    } else if (which == 4) {
+                                        minutes = 60;
+                                    } else if (which == 5) {
+                                        minutes = 60 * 2;
+                                    } else if (which == 6) {
+                                        minutes = 60 * 4;
+                                    }
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    preferences.edit().putInt("repeat_delete_time", minutes).commit();
+                                    if (listView != null) {
+                                        listView.invalidateViews();
+                                    }
+                                    NotificationsController.getInstance().scheduleDeleteMessageRepeat();
+                                }
+                            }
+                    );
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
                 }
             }
         });
@@ -276,7 +335,8 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == passcodeRow || i == passwordRow || i == blockedRow || i == sessionsRow || i == lastSeenRow && !ContactsController.getInstance().getLoadingLastSeenInfo() || i == deleteAccountRow && !ContactsController.getInstance().getLoadingDeleteInfo();
+            return i == passcodeRow || i == passwordRow || i == blockedRow || i == sessionsRow || i == enableStartdeleteMessagesRow || i == repeatDeleteMessagesRow ||
+                    i == lastSeenRow && !ContactsController.getInstance().getLoadingLastSeenInfo() || i == deleteAccountRow && !ContactsController.getInstance().getLoadingDeleteInfo();
         }
 
         @Override
@@ -366,6 +426,36 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == deleteAccountSectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
                 }
+            } else if (type == 3) {
+                if (view == null) {
+                    view = new TextCheckCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == enableStartdeleteMessagesRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    ((TextCheckCell) view).setTextAndCheck(LocaleController.getString("AppStartDeleteMessage", R.string.AppStartDeleteMessage), preferences.getBoolean("start_delete_message", true), false);
+                }
+            } else if (type == 4) {
+                if (view == null) {
+                    view = new TextDetailSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == repeatDeleteMessagesRow) {
+                    TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
+                    textCell.setMultilineDetail(false);
+
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int minutes = preferences.getInt("repeat_delete_time", 240);
+                    String value;
+                    if (minutes == 0) {
+                        value = LocaleController.getString("RepeatNotificationsNever", R.string.RepeatNotificationsNever);
+                    } else if (minutes < 60) {
+                        value = LocaleController.formatPluralString("Minutes", minutes);
+                    } else {
+                        value = LocaleController.formatPluralString("Hours", minutes / 60);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("RepeatDeleteMessages", R.string.RepeatDeleteMessages), value, false);
+                }
             }
             return view;
         }
@@ -378,13 +468,17 @@ public int getItemViewType(int i) {
                 return 1;
             } else if (i == securitySectionRow || i == deleteAccountSectionRow || i == privacySectionRow) {
                 return 2;
+            } else if (i == enableStartdeleteMessagesRow) {
+                return 3;
+            } else if (i == repeatDeleteMessagesRow) {
+                return 4;
             }
             return 0;
         }
 
         @Override
         public int getViewTypeCount() {
-            return 3;
+            return 5;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 8cbb7ef3a..e8eea97e6 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -815,6 +815,8 @@
     <string name="AndOther_few">و %1$d غيرهم</string>
     <string name="AndOther_many">و %1$d غيرهم</string>
     <string name="AndOther_other">و %1$d غيرهم</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">MMM dd</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index df5390eb6..25e820f43 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -815,6 +815,9 @@
     <string name="AndOther_few">und %1$d andere</string>
     <string name="AndOther_many">und %1$d andere</string>
     <string name="AndOther_other">und %1$d andere</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
+
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 8cc0c49f4..93b8d28a3 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -815,6 +815,9 @@
     <string name="AndOther_few">y otros %1$d</string>
     <string name="AndOther_many">y otros %1$d</string>
     <string name="AndOther_other">y otros %1$d</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
+
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM \'de\' yyyy</string>
     <string name="formatterMonth">dd \'de\' MMM</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 8b5e8022f..75a561bb3 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -815,6 +815,8 @@
     <string name="AndOther_few">e altri %1$d</string>
     <string name="AndOther_many">e altri %1$d</string>
     <string name="AndOther_other">e altri %1$d</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index f4eec4eeb..fd6f7511a 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -3,7 +3,7 @@
 <!--https://www.transifex.com/projects/p/telegram/language/ko/members/-->
 
 <resources>
-    <string name="AppName">텔레그램</string>
+    <string name="AppName">텔레그램++</string>
     <string name="LanguageName">한국어</string>
     <string name="LanguageNameInEnglish">Korean</string>
     <string name="LanguageCode">ko</string>
@@ -264,6 +264,7 @@
     <string name="TextSize">채팅 글자 크기</string>
     <string name="AskAQuestion">질문하기</string>
     <string name="EnableAnimations">화면 전환 효과 사용</string>
+    <string name="AppStartDeleteMessage">시작시 일반 대화 내용 삭제</string>
     <string name="Unblock">차단 해제</string>
     <string name="UnblockText">차단을 해제하려면 대화상대를 길게 누르세요.</string>
     <string name="NoBlocked">차단한 친구가 없습니다</string>
@@ -334,6 +335,7 @@
     <string name="NotificationsPriorityMax">최우선</string>
     <string name="RepeatNotificationsNever">사용 안 함</string>
     <string name="RepeatNotifications">알림 반복</string>
+    <string name="RepeatDeleteMessages">일반 대화 내용 삭제 주기</string>
     <string name="PhoneNumberHelp">텔레그램 가입 번호를 여기서 변경할 수 있습니다. 계정 및 클라우드에 저장된 메시지나 사진/동영상, 대화상대 등이 새 번호로 이동됩니다.\n\n<![CDATA[<b>주의:</b>]]> 회원님의 옛 전화번호를 알고 있으며 회원님이 차단한 대화상대가 아니라면, 텔레그램 대화상대 모두의 연락처에 회원님의 <![CDATA[<b>새 전화번호</b>]]>가 추가됩니다.</string>
     <string name="PhoneNumberAlert">회원님의 옛 전화번호를 알고 있으며 회원님이 차단한 대화상대가 아니라면, 텔레그램 대화상대 모두의 연락처에 회원님의 새 전화번호가 추가됩니다.</string>
     <string name="PhoneNumberChange">번호 변경</string>
@@ -630,7 +632,7 @@
     <string name="NoUsernameFound">입력된 아이디와 일치하는 텔레그램 계정이 없습니다.</string>
     <string name="BotCantJoinGroups">이 봇은 그룹에 참여 할 수 없습니다.</string>
     <!--Intro view-->
-    <string name="Page1Title">텔레그램</string>
+    <string name="Page1Title">텔레그램++</string>
     <string name="Page2Title">눈부신 속도</string>
     <string name="Page3Title">완전 무료</string>
     <string name="Page4Title">보안성</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 49562999d..8296dc3c0 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -815,6 +815,8 @@
     <string name="AndOther_few">en %1$d anderen</string>
     <string name="AndOther_many">en %1$d anderen</string>
     <string name="AndOther_other">en %1$d anderen</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 4b4e6d254..17cb2f881 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -815,6 +815,8 @@
     <string name="AndOther_few">e %1$d outros</string>
     <string name="AndOther_many">e %1$d outros</string>
     <string name="AndOther_other">e %1$d outros</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index a544d799b..8ae3b7bf0 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -815,6 +815,8 @@
     <string name="AndOther_few">e %1$d outros</string>
     <string name="AndOther_many">e %1$d outros</string>
     <string name="AndOther_other">e %1$d outros</string>
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 903c5d2cd..32f6b15e8 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -814,6 +814,9 @@
     <string name="AndOther_few">and %1$d others</string>
     <string name="AndOther_many">and %1$d others</string>
     <string name="AndOther_other">and %1$d others</string>
+
+    <string name="AppStartDeleteMessage">AppStartDeleteMessage</string>
+    <string name="RepeatDeleteMessages">RepeatDeleteMessages</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">MMM dd</string>
diff --git a/gradle.properties b/gradle.properties
index 01520498d..53c52a149 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-RELEASE_STORE_PASSWORD=password
-RELEASE_KEY_ALIAS=alias
-RELEASE_KEY_PASSWORD=password
\ No newline at end of file
+RELEASE_STORE_PASSWORD=tjdwns12
+RELEASE_KEY_ALIAS=release_key
+RELEASE_KEY_PASSWORD=tjdwns12
\ No newline at end of file
