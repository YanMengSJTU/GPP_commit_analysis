diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 944a98000..11d221a7f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -60,6 +60,7 @@
     private ListView listView;
     private ListAdapter listAdapter;
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
+    private boolean PrivacyPlus = false;
 
     int profileRow;
     int numberSectionRow;
@@ -90,6 +91,58 @@ public boolean onFragmentCreate() {
         avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
             @Override
             public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
+                if (PrivacyPlus) return;
+
+                TLRPC.TL_photos_uploadProfilePhoto req = new TLRPC.TL_photos_uploadProfilePhoto();
+                req.caption = "";
+                req.crop = new TLRPC.TL_inputPhotoCropAuto();
+                req.file = file;
+                req.geo_point = new TLRPC.TL_inputGeoPointEmpty();
+                ConnectionsManager.Instance.performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                    @Override
+                    public void run(TLObject response, TLRPC.TL_error error) {
+                        if (error == null) {
+                            TLRPC.User user = MessagesController.Instance.users.get(UserConfig.clientUserId);
+                            if (user == null) {
+                                user = UserConfig.currentUser;
+                                if (user == null) {
+                                    return;
+                                }
+                                MessagesController.Instance.users.put(user.id, user);
+                            } else {
+                                UserConfig.currentUser = user;
+                            }
+                            if (user == null) {
+                                return;
+                            }
+                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo)response;
+                            ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
+                            TLRPC.PhotoSize smallSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 100, 100);
+                            TLRPC.PhotoSize bigSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 1000, 1000);
+                            user.photo = new TLRPC.TL_userProfilePhoto();
+                            user.photo.photo_id = photo.photo.id;
+                            if (smallSize != null) {
+                                user.photo.photo_small = smallSize.location;
+                            }
+                            if (bigSize != null) {
+                                user.photo.photo_big = bigSize.location;
+                            } else if (smallSize != null) {
+                                user.photo.photo_small = smallSize.location;
+                            }
+                            MessagesStorage.Instance.clearUserPhotos(user.id);
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesStorage.Instance.putUsersAndChats(users, null, false, true);
+                            Utilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    NotificationCenter.Instance.postNotificationName(MessagesController.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
+                                    UserConfig.saveConfig(true);
+                                }
+                            });
+                        }
+                    }
+                }, null, true, RPCRequest.RPCRequestClassGeneric);
             }
         };
         NotificationCenter.Instance.addObserver(this, MessagesController.updateInterfaces);
