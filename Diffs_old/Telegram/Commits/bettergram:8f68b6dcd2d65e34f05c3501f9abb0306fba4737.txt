diff --git a/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java b/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
index a07bf27e2..e39ac6c9f 100644
--- a/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
+++ b/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
@@ -5,6 +5,10 @@
 import android.content.SharedPreferences;
 import android.support.annotation.Nullable;
 
+import com.crashlytics.android.Crashlytics;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -135,17 +139,19 @@ public void run() {
                 if (!isEmpty(savedCryptoInfoJson)) {
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.updateCurrencyData, savedCryptoInfoJson);
                 }
-
                 boolean fetchCryptoCurrencies = intent.getBooleanExtra(KEY_CRYPTO_CURRENCIES, false);
                 String savedCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES, null);
                 List<CryptoCurrency> currencies = new ArrayList<>();
+                CryptoCurrencyData currencyData = null;
                 if (fetchCryptoCurrencies || isEmpty(savedCryptoJson)) {
                     Request request = new Request.Builder().url(CURRENCY_URL).build();
                     try {
                         Response response = okhttp_client().newCall(request).execute();
-
                         if (response.isSuccessful() && response.body() != null) {
-                            String fetchedCryptoJson = response.body().string();
+                            final JsonParser parser = new JsonFactory().createParser(response.body().byteStream());
+                            currencyData = CryptoCurrencyData__JsonHelper.parseFromJson(parser);
+                            //String fetchedCryptoJson = response.body().string();
+                            String fetchedCryptoJson = CryptoCurrencyData__JsonHelper.serializeToJson(currencyData);
                             preferences.edit().putString(KEY_CRYPTO_CURRENCIES, fetchedCryptoJson).apply();
                             savedCryptoJson = fetchedCryptoJson;
                         } else {
@@ -157,14 +163,18 @@ public void run() {
                         e.printStackTrace();
                     }
                 }
-
                 try {
-                    if (!isEmpty(savedCryptoJson)) {
-                        CryptoCurrencyData currencyData = CryptoCurrencyData__JsonHelper.parseFromJson(savedCryptoJson);
+                    if (currencyData != null) {
+                        //if (!isEmpty(savedCryptoJson)) {
+                        //CryptoCurrencyData currencyData = CryptoCurrencyData__JsonHelper.parseFromJson(savedCryptoJson);
+                        currencies.addAll(currencyData.data);
+                    } else if (!isEmpty(savedCryptoJson)) {
+                        currencyData = CryptoCurrencyData__JsonHelper.parseFromJson(savedCryptoJson);
                         currencies.addAll(currencyData.data);
                     }
-                } catch (IOException e) {
+                } catch (Exception e) {
                     e.printStackTrace();
+                    Crashlytics.logException(e);
                 }
                 String sortBy = intent.getStringExtra(EXTRA_SORT_BY);
                 String orderBy = intent.getStringExtra(EXTRA_ORDER_BY);
@@ -192,26 +202,31 @@ public void onFailure(Call call, IOException e) {
 
                     @Override
                     public void onResponse(Call call, Response response) throws IOException {
-                        if (!call.isCanceled() && response != null && response.isSuccessful() && response.body() != null) {
-                            String fetchedCurrencyJson = response.body().string();
-                            CryptoCurrencyInfoResponse cryptoResponse = CryptoCurrencyInfoResponse__JsonHelper.parseFromJson(fetchedCurrencyJson);
-                            cryptoResponse.data.list = addIcons(cryptoResponse.data.list, currencies);
-                            String savedFaveCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
-                            if (!isEmpty(savedFaveCryptoJson)) {
-                                CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(savedFaveCryptoJson);
-                                if (data != null && data.list != null && !data.list.isEmpty()) {
-                                    for (int i = 0, size = cryptoResponse.data.list.size(); i < size; i++) {
-                                        final int index = i;
-                                        CryptoCurrencyInfo inf = CollectionUtil.find(data.list,
-                                                item -> cryptoResponse.data.list
-                                                        .get(index).code.equals(item.code));
-                                        cryptoResponse.data.list.get(index).favorite = inf != null;
+                        try {
+                            if (!call.isCanceled() && response != null && response.isSuccessful() && response.body() != null) {
+                                JsonParser parser = new JsonFactory().createParser(response.body().byteStream());
+                                //String fetchedCurrencyJson = response.body().string();
+                                CryptoCurrencyInfoResponse cryptoResponse = CryptoCurrencyInfoResponse__JsonHelper.parseFromJson(parser);
+                                cryptoResponse.data.list = addIcons(cryptoResponse.data.list, currencies);
+                                String savedFaveCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
+                                if (!isEmpty(savedFaveCryptoJson)) {
+                                    CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(savedFaveCryptoJson);
+                                    if (data != null && data.list != null && !data.list.isEmpty()) {
+                                        for (int i = 0, size = cryptoResponse.data.list.size(); i < size; i++) {
+                                            final int index = i;
+                                            CryptoCurrencyInfo inf = CollectionUtil.find(data.list,
+                                                    item -> cryptoResponse.data.list
+                                                            .get(index).code.equals(item.code));
+                                            cryptoResponse.data.list.get(index).favorite = inf != null;
+                                        }
                                     }
                                 }
+                                String json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(cryptoResponse);
+                                preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
+                                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.updateCurrencyData, json);
                             }
-                            String json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(cryptoResponse);
-                            preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
-                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.updateCurrencyData, json);
+                        } catch (Exception e) {
+                            e.printStackTrace();
                         }
                     }
                 });
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/TabsView.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/TabsView.java
index 304d12a05..4788ed21e 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/TabsView.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/TabsView.java
@@ -324,13 +324,6 @@ public void forceUpdateTabCounters() {
 
     private void unreadCount() {
         MessagesController messagesController = MessagesController.getInstance(currentAccount);
-        //unreadCount(messagesController.dialogsUnread, positions[8]);
-        //unreadCount(messagesController.dialogsAdmin, positions[7]);
-        //unreadCount(messagesController.dialogsFavs, positions[6]);
-        //unreadCount(messagesController.dialogsBots, positions[5]);
-        //unreadCount(messagesController.dialogsChannels, positions[4]);
-        //unreadCountGroups();
-        //unreadCount(messagesController.dialogsUsers, positions[1]);
         ArrayList<TLRPC.TL_dialog> dialogs = messagesController.dialogs;
         for (int i = 0; i < tabs.size(); i++) {
             force = true;
@@ -338,36 +331,24 @@ private void unreadCount() {
         }
     }
 
-//    private void unreadCountGroups() {
-//        MessagesController messagesController = MessagesController.getInstance(currentAccount);
-//        if(!Theme.plusHideGroupsTab)unreadCount(!Theme.plusHideSuperGroupsTab ? messagesController.dialogsGroups : messagesController.dialogsGroupsAll, positions[2]);
-//        if(!Theme.plusHideSuperGroupsTab)unreadCount(messagesController.dialogsMegaGroups, positions[3]);
-//    }
-
     private void unreadCount(final ArrayList<TLRPC.TL_dialog> dialogs, int position) {
         if (position == -1) {
             counting = false;
             return;
         }
-        SharedPreferences plusPreferences = ApplicationLoader.applicationContext.getSharedPreferences("plusconfig", Activity.MODE_PRIVATE);
         boolean allMuted = true;
         int unreadCount = 0;
-        int i;
         if (dialogs != null && !dialogs.isEmpty()) {
             for (int a = 0; a < dialogs.size(); a++) {
                 TLRPC.TL_dialog dialg = dialogs.get(a);
                 if (dialg != null && dialg.unread_count > 0) {
-                    //boolean isMuted = MessagesController.getInstance(currentAccount).isDialogMuted(dialg.id);
-                    //if (!isMuted) {
-                    i = dialg.unread_count;
-                    //if (i == 0 && plusPreferences.getInt("unread_" + dialg.id, 0) == 1) i = 1;
-                    //if (i > 0) {
-                    if (position == 0 || (position == 1 && isDirect(dialg)) || (position == 2 && isGroup(dialg)) || (position == 3 && isAnnouncement(dialg)) || (position == 4 & isFavorite(dialg))) {
-                        unreadCount++;
+                    boolean isMuted = MessagesController.getInstance(currentAccount).isDialogMuted(dialg.id);
+                    if (!isMuted) {
+                        if (position == 0 || (position == 1 && isDirect(dialg)) || (position == 2 && isGroup(dialg)) || (position == 3 && isAnnouncement(dialg)) || (position == 4 & isFavorite(dialg))) {
+                            unreadCount++;
+                        }
+                        allMuted = false;
                     }
-                    allMuted = false;
-                    //}
-                    //}
                 }
             }
         }
