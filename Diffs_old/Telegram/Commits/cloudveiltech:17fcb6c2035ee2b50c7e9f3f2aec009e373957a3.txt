diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 183601b05..1cdd15bb3 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -186,7 +186,7 @@ android {
     defaultConfig {
         minSdkVersion 14
         targetSdkVersion 25
-        versionName "4.2.0"
+        versionName "4.6.0"
         multiDexEnabled true
 
         externalNativeBuild {
diff --git a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
index 31002f4e3..8a14b77aa 100644
--- a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
+++ b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
@@ -82,6 +82,7 @@
             android:enabled="false"
             android:exported="false" />
 
+        <service android:name="org.cloudveil.messenger.service.ChannelCheckingService"/>
     </application>
 
 </manifest>
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
index 3d507e35b..2f7c9d766 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
@@ -20,6 +20,7 @@
 
 
     private static boolean DEFAULT_LOCK_DISABLE_SECRET_CHAT = false;
+    private static int DEFAULT_MIN_SECRET_CHAT_TTL = 0;
     public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
     public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
     public static final boolean LOCK_DISABLE_GIFS = true;
@@ -35,4 +36,14 @@ public static void setDisableSecretChat(boolean isDisabled) {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
         preferences.edit().putBoolean("disabledSecretChat", isDisabled).apply();
     }
+
+    public static int getMinSecretChatTtl() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        return preferences.getInt("minChatTtl", DEFAULT_MIN_SECRET_CHAT_TTL);
+    }
+
+    public static void setMinSecretChatTtl(int ttl) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        preferences.edit().putInt("minChatTtl", ttl).apply();
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index 31a9c2065..e16f14a50 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -80,6 +80,7 @@ private void sendDataCheckRequest() {
         request.userName = UserConfig.getCurrentUser().username;
 
         if (request.isEmpty()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
             return;
         }
 
@@ -133,6 +134,7 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
         }
 
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
+        GlobalSecuritySettings.setMinSecretChatTtl(settingsResponse.secretChatMinimumLength);
 
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 75fb3def0..e48eea80a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -21,6 +21,7 @@
 import android.util.SparseIntArray;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.query.BotQuery;
 import org.telegram.messenger.query.DraftQuery;
@@ -9041,6 +9042,7 @@ public boolean isDialogIdAllowed(long currentDialogId) {
         int high_id = (int) (currentDialogId >> 32);
         TLRPC.Chat chat = null;
         TLRPC.User user = null;
+        TLRPC.EncryptedChat encryptedChat = null;
         if (lower_id != 0) {
             if (high_id == 1) {
                 chat = MessagesController.getInstance().getChat(lower_id);
@@ -9058,13 +9060,16 @@ public boolean isDialogIdAllowed(long currentDialogId) {
                 }
             }
         } else {
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
             if (encryptedChat != null) {
                 user = MessagesController.getInstance().getUser(encryptedChat.user_id);
             }
         }
 
-        if (chat != null) {
+        if(encryptedChat != null && GlobalSecuritySettings.isDisabledSecretChat()) {
+            return false;
+        }
+        else if (chat != null) {
             return allowedDialogs.containsKey(currentDialogId);
         } else if (user != null) {
             return !user.bot || allowedBots.containsKey(currentDialogId);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index 217ddd1e3..7be925728 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -22,6 +22,7 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
@@ -206,6 +207,9 @@ public void setNeedUsernames(boolean value) {
     }
 
     public void setNeedBotContext(boolean value) {
+        if(GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
+            value = false;
+        }
         needBotContext = value;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 2492fe22a..5031beef4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -854,16 +854,22 @@ public void setDialogSelected(boolean value) {
     }
 
     private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        //CloudVeil start
+        ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance().dialogs;
+            dialogs = MessagesController.getInstance().dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance().dialogsServerOnly;
+            dialogs = MessagesController.getInstance().dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance().dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance().dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance().dialogsForward;
+            dialogs = MessagesController.getInstance().dialogsForward;
+        } else {
+            return null;
         }
-        return null;
+        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        //CloudVeil end
+        return dialogs;
     }
 
     public void checkCurrentDialogIndex() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index a28260cb7..442c51ddc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -21,6 +21,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
@@ -972,8 +973,33 @@ public void onClick(View v) {
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
         builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
         final NumberPicker numberPicker = new NumberPicker(context);
-        numberPicker.setMinValue(0);
+
+        //CloudVeil start
+        int ttls[] = new int[] {
+                0,
+                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
+                30, 60, 60*60, 60*60*24, 60*60*24*7
+        };
+
+        int serverMinLength = GlobalSecuritySettings.getMinSecretChatTtl();
+        int minValue = 0;
+        int minLength = 0;
+        for(int i=0; i<ttls.length; i++) {
+            if(ttls[i] >= serverMinLength) {
+                minValue = i;
+                minLength = ttls[i];
+                break;
+            }
+        }
+
+        numberPicker.setMinValue(minValue);
         numberPicker.setMaxValue(20);
+
+        if(encryptedChat.ttl < minLength) {
+            encryptedChat.ttl = minLength;
+        }
+        //CloudVeil end
+
         if (encryptedChat.ttl > 0 && encryptedChat.ttl < 16) {
             numberPicker.setValue(encryptedChat.ttl);
         } else if (encryptedChat.ttl == 30) {
@@ -989,6 +1015,7 @@ public void onClick(View v) {
         } else if (encryptedChat.ttl == 0) {
             numberPicker.setValue(0);
         }
+
         numberPicker.setFormatter(new NumberPicker.Formatter() {
             @Override
             public String format(int value) {
@@ -1010,7 +1037,12 @@ public String format(int value) {
                 return "";
             }
         });
+
         builder.setView(numberPicker);
+
+        //CloudVeil start
+        final int actualMinLength = minLength;
+
         builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialog, int which) {
@@ -1029,12 +1061,17 @@ public void onClick(DialogInterface dialog, int which) {
                 } else if (which == 20) {
                     encryptedChat.ttl = 60 * 60 * 24 * 7;
                 }
+                if(encryptedChat.ttl < actualMinLength) {
+                    encryptedChat.ttl = actualMinLength;
+                }
+
                 if (oldValue != encryptedChat.ttl) {
                     SecretChatHelper.getInstance().sendTTLMessage(encryptedChat, null);
                     MessagesStorage.getInstance().updateEncryptedChatTTL(encryptedChat);
                 }
             }
         });
+        //CloudVeil end
         return builder;
     }
 //
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index d6b38214d..29e4df339 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -225,23 +225,44 @@ public void onFragmentDestroy() {
     }
 
     //CloudVeil start
-    private void showPopup(Context context) {
+    private void showPopup(final Context context) {
         SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
-        if(defaultSharedPreferences.getBoolean("popupShown", false)) {
+        if (defaultSharedPreferences.getBoolean("popupShown", false)) {
             return;
         }
 
-        defaultSharedPreferences.edit().putBoolean("popupShown", true).apply();
-
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         builder.setTitle(context.getString(R.string.warning))
                 .setMessage(context.getString(R.string.cloudveil_message_warning))
                 .setPositiveButton(context.getString(R.string.OK), new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                dialog.dismiss();
-                            }
-                        });
-        showDialog(builder.create());
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.dismiss();
+                        setPopupShown();
+                    }
+                })
+                .setOnDismissListener(new DialogInterface.OnDismissListener() {
+                    @Override
+                    public void onDismiss(DialogInterface dialog) {
+                        setPopupShown();
+                    }
+                })
+                .setOnBackButtonListener(new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        setPopupShown();
+                    }
+                });
+        showDialog(builder.create(), new DialogInterface.OnDismissListener() {
+            @Override
+            public void onDismiss(DialogInterface dialog) {
+                setPopupShown();
+            }
+        });
+    }
+
+    private void setPopupShown() {
+        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(ApplicationLoader.applicationContext);
+        defaultSharedPreferences.edit().putBoolean("popupShown", true).apply();
     }
     //CloudVeil end
 
@@ -1183,10 +1204,6 @@ public void needShowMediaBanHint() {
             });
         }
 
-        //CloudVeil start
-        showPopup(context);
-        //CloadVeil end
-
         return fragmentView;
     }
 
@@ -1224,6 +1241,8 @@ public void onResume() {
                     }
                 }
             }
+        } else {
+            showPopup(getParentActivity());
         }
     }
 
