diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index b60305f39..b5ef20852 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -39,6 +39,7 @@
 import org.telegram.ui.Cells.ProfileSearchCell;
 import org.telegram.ui.Components.DayNightActivity;
 import org.telegram.ui.Components.ForegroundDetector;
+import org.telegram.ui.Components.TwilightManager;
 
 import java.io.File;
 import java.io.RandomAccessFile;
@@ -325,7 +326,10 @@ public void onCreate() {
         startPushService();
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        DayNightActivity.setDefaultNightMode(preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_NO));
+        TwilightManager.setSunset(preferences.getInt("nightModeSunset", 22), preferences.getInt("nightModeSunsetMinute", 0));
+        TwilightManager.setSunrise(preferences.getInt("nightModeSunrise", 6), preferences.getInt("nightModeSunriseMinute", 0));
+        TwilightManager.setUseLocation(preferences.getBoolean("nightModeUseLocation", false));
+        DayNightActivity.setDefaultNightMode(preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM));
     }
 
     /*public static void sendRegIdToBackend(final String token) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 6f354f640..4d049300b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -82,6 +82,10 @@ public void onScrollChanged() {
         private ScrollView scrollView;
         private LinearLayout linearLayout;
 
+        public static void resetDrawable() {
+            backgroundDrawable = null;
+        }
+
         public ActionBarPopupWindowLayout(Context context) {
             super(context);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 980688b56..edc87853e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -89,12 +89,12 @@
     public static int REPLY_PANEL_MESSAGE_TEXT_COLOR = 0xff222222;
 
     public static final int ALERT_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
-    public static final int ALERT_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
+    public static int ALERT_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
 
     public static final int AUTODOWNLOAD_SHEET_SAVE_TEXT_COLOR = 0xff3a8ccf;
 
-    public static final int JOIN_SHEET_NAME_TEXT_COLOR = 0xff212121;
-    public static final int JOIN_SHEET_COUNT_TEXT_COLOR = 0xff999999;
+    public static int JOIN_SHEET_NAME_TEXT_COLOR = 0xff212121;
+    public static int JOIN_SHEET_COUNT_TEXT_COLOR = 0xff999999;
 
     public static final int SHARE_SHEET_COPY_TEXT_COLOR = 0xff3a8ccf;
     public static final int SHARE_SHEET_SEND_TEXT_COLOR = 0xff3ec1f9;
@@ -110,7 +110,7 @@
     public static final int STICKERS_SHEET_REMOVE_TEXT_COLOR = 0xffcd5a5a;
 
     public static final int PINNED_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
-    public static final int PINNED_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
+    public static int PINNED_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
 
     public static final int SECRET_CHAT_INFO_TEXT_COLOR = 0xffffffff;
 
@@ -413,18 +413,25 @@ private static void tintDrawable(Context context) {
     private static void resetColor(Context context) {
         int white = ContextCompat.getColor(context, R.color.material_white_1000);
         int primary = ContextCompat.getColor(context, R.color.primary_text);
+        int secondary = ContextCompat.getColor(context, R.color.secondary_text);
         int forward = ContextCompat.getColor(context, R.color.message_forward_name);
 
         EmojiView.BACKGROUND_COLOR = ContextCompat.getColor(context, R.color.sticker_select_background);
         EmojiView.INDICATOR_COLOR = ContextCompat.getColor(context, R.color.sticker_indicator_background);
 
+        JOIN_SHEET_NAME_TEXT_COLOR = primary;
+
+        ALERT_PANEL_MESSAGE_TEXT_COLOR = secondary;
+        PINNED_PANEL_MESSAGE_TEXT_COLOR = secondary;
+        JOIN_SHEET_COUNT_TEXT_COLOR = secondary;
+
         ACTION_BAR_COLOR = ContextCompat.getColor(context, R.color.colorPrimary);
         ACTION_BAR_PROFILE_COLOR = ContextCompat.getColor(context, R.color.profile_color);
 
         REPLY_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
         REPLY_PANEL_MESSAGE_TEXT_COLOR = ContextCompat.getColor(context, R.color.replay_panel_text);
 
-        ATTACH_SHEET_TEXT_COLOR = ContextCompat.getColor(context, R.color.secondary_text);
+        ATTACH_SHEET_TEXT_COLOR = secondary;
 
         MSG_SELECTED_BACKGROUND_COLOR = 0x6633b5e5;
         MSG_WEB_PREVIEW_DURATION_TEXT_COLOR = white;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
index eb390d5ed..de6a4859b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
@@ -100,7 +100,7 @@ public void onItemClick(int id) {
 
         fragmentView = new FrameLayout(context);
         FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(ContextCompat.getColor(context, R.color.card_background));
+        frameLayout.setBackgroundColor(ContextCompat.getColor(context, R.color.settings_background));
 
         emptyView = new EmptyTextProgressView(context);
         if (currentType == StickersQuery.TYPE_IMAGE) {
@@ -287,7 +287,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             switch (viewType) {
                 case 0:
                     view = new ArchivedStickerSetCell(mContext, true);
-                    view.setBackgroundResource(R.drawable.list_selector_white);
+                    ((ArchivedStickerSetCell) view).setForeground(R.drawable.list_selector);
                     ((ArchivedStickerSetCell) view).setOnCheckClick(new CompoundButton.OnCheckedChangeListener() {
                         @Override
                         public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
index 29aa50cd8..3a2164b5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
@@ -107,6 +107,7 @@ public void setTextAndIcon(String text, int resId) {
             imageView.setImageDrawable(null);
         } else {
             imageView.setImageResource(resId);
+            imageView.getDrawable().setTint(ContextCompat.getColor(getContext(), R.color.secondary_text));
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
index b178ad145..6a48b88dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchivedStickerSetCell.java
@@ -30,10 +30,11 @@
 import org.telegram.messenger.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.ForegroundFrameLayout;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.Switch;
 
-public class ArchivedStickerSetCell extends FrameLayout {
+public class ArchivedStickerSetCell extends ForegroundFrameLayout {
 
     private TextView textView;
     private TextView valueTextView;
@@ -49,6 +50,9 @@
     public ArchivedStickerSetCell(Context context, boolean needCheckBox) {
         super(context);
 
+        setBackgroundColor(ContextCompat.getColor(context, R.color.card_background));
+        setElevation(AndroidUtilities.dp(2));
+
         if (paint == null) {
             paint = new Paint();
             paint.setColor(ContextCompat.getColor(context, R.color.divider));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
index 3784bd06e..af9a3a1d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
@@ -32,7 +32,7 @@ public ChatUnreadCell(Context context) {
         FrameLayout frameLayout = new FrameLayout(context);
         frameLayout.setBackgroundColor(ContextCompat.getColor(context, R.color.chat_drawable_tint)); //setBackgroundResource(R.drawable.newmsg_divider);
         frameLayout.setElevation(AndroidUtilities.dp(1));
-        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 27, Gravity.LEFT | Gravity.TOP, 0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4)));
+        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 27, Gravity.LEFT | Gravity.TOP, 0, 8, 0, 4));
 
         ImageView imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.ic_ab_new);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
index 042fd89f5..5d5ae2e8f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
@@ -14,6 +14,7 @@
 import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.support.v4.content.ContextCompat;
 import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
@@ -100,19 +101,23 @@
 
     private ContextLinkCellDelegate delegate;
 
+    private static int DESCRIPTION_TEXT_COLOR;
+
     public ContextLinkCell(Context context) {
         super(context);
 
         if (titleTextPaint == null) {
             titleTextPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             titleTextPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            titleTextPaint.setColor(0xff212121);
+            titleTextPaint.setColor(ContextCompat.getColor(context, R.color.primary_text));
 
             descriptionTextPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
 
             paint = new Paint();
-            paint.setColor(0xffd9d9d9);
+            paint.setColor(ContextCompat.getColor(context, R.color.divider));
             paint.setStrokeWidth(1);
+
+            DESCRIPTION_TEXT_COLOR = ContextCompat.getColor(context, R.color.secondary_text);
         }
 
         titleTextPaint.setTextSize(AndroidUtilities.dp(15));
@@ -124,6 +129,10 @@ public ContextLinkCell(Context context) {
         TAG = MediaController.getInstance().generateObserverTag();
     }
 
+    public static void resetPaint() {
+        titleTextPaint = null;
+    }
+
     @SuppressLint("DrawAllocation")
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
@@ -597,7 +606,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (descriptionLayout != null) {
-            descriptionTextPaint.setColor(0xff8a8a8a);
+            descriptionTextPaint.setColor(DESCRIPTION_TEXT_COLOR/*0xff8a8a8a*/);
             canvas.save();
             canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline), descriptionY);
             descriptionLayout.draw(canvas);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
index 4a38ef998..edaad2f74 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
@@ -35,10 +35,11 @@
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.ForegroundFrameLayout;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.Switch;
 
-public class FeaturedStickerSetCell extends FrameLayout {
+public class FeaturedStickerSetCell extends ForegroundFrameLayout {
 
     private TextView textView;
     private TextView valueTextView;
@@ -66,6 +67,9 @@
     public FeaturedStickerSetCell(Context context) {
         super(context);
 
+        setBackgroundColor(ContextCompat.getColor(context, R.color.card_background));
+        setElevation(AndroidUtilities.dp(2));
+
         if (paint == null) {
             paint = new Paint();
             paint.setColor(ContextCompat.getColor(context, R.color.divider));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
index b7cb57c32..4cd3ffe14 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
@@ -14,6 +14,7 @@
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
+import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -91,7 +92,8 @@ public FeaturedStickerSetInfoCell(Context context, int left) {
         botProgressPaint.setStrokeWidth(AndroidUtilities.dp(2));
 
         nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff333333);
+        // TODO
+        nameTextView.setTextColor(ContextCompat.getColor(context, R.color.primary_text) /*0xff333333*/);
         nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
         nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         nameTextView.setEllipsize(TextUtils.TruncateAt.END);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
index e824b5d07..8d39fd2ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
@@ -75,5 +75,7 @@ public void setTextAndValueAndIcon(String text, String value, int resId) {
         valueTextView.setText(value);
         imageView.setVisibility(VISIBLE);
         imageView.setImageResource(resId);
+
+        imageView.getDrawable().setTint(ContextCompat.getColor(getContext(), R.color.secondary_text));
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
index 7e2d455af..3402392b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
@@ -106,6 +106,16 @@ public void setText(String text, boolean divider) {
         setWillNotDraw(!divider);
     }
 
+    public void setValue(String value) {
+        valueImageView.setVisibility(INVISIBLE);
+        if (value != null) {
+            valueTextView.setText(value);
+            valueTextView.setVisibility(VISIBLE);
+        } else {
+            valueTextView.setVisibility(INVISIBLE);
+        }
+    }
+
     public void setTextAndValue(String text, String value, boolean divider) {
         textView.setText(text);
         valueImageView.setVisibility(INVISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 3af498a7f..20f747cdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -11,6 +11,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.support.v4.content.ContextCompat;
 import android.text.InputType;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -88,8 +89,8 @@ public boolean onTouch(View v, MotionEvent event) {
 
         firstNameField = new EditText(context);
         firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        firstNameField.setHintTextColor(0xff979797);
-        firstNameField.setTextColor(0xff212121);
+        //firstNameField.setHintTextColor(0xff979797);
+        firstNameField.setTextColor(ContextCompat.getColor(context, R.color.primary_text));
         firstNameField.setMaxLines(1);
         firstNameField.setLines(1);
         firstNameField.setSingleLine(true);
@@ -113,8 +114,8 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
         lastNameField = new EditText(context);
         lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        lastNameField.setHintTextColor(0xff979797);
-        lastNameField.setTextColor(0xff212121);
+        //lastNameField.setHintTextColor(0xff979797);
+        lastNameField.setTextColor(ContextCompat.getColor(context, R.color.primary_text));
         lastNameField.setMaxLines(1);
         lastNameField.setLines(1);
         lastNameField.setSingleLine(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 741c922f1..15bf6aff5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Components;
 
+import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
@@ -15,6 +16,7 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.support.v4.content.ContextCompat;
 import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
@@ -39,10 +41,21 @@
     private static int[] arrColorsButtons = {Theme.ACTION_BAR_RED_SELECTOR_COLOR, Theme.ACTION_BAR_ORANGE_SELECTOR_COLOR, Theme.ACTION_BAR_VIOLET_SELECTOR_COLOR,
             Theme.ACTION_BAR_GREEN_SELECTOR_COLOR, Theme.ACTION_BAR_CYAN_SELECTOR_COLOR, Theme.ACTION_BAR_BLUE_SELECTOR_COLOR, Theme.ACTION_BAR_VIOLET_SELECTOR_COLOR, Theme.ACTION_BAR_BLUE_SELECTOR_COLOR};
 
-    public static void resetColor() {
+    public static void resetColor(Context context) {
+        // red, origin, purple, green, cyan, [ACTION BAR], purple, blue
         arrColors = new int[]{0xffe56555, 0xfff28c48, 0xff8e85ee, 0xff76c84d, 0xff5fbed5, 0xff549cdd, 0xff8e85ee, 0xfff2749a};
         arrColorsProfiles = new int[]{0xffd86f65, 0xfff69d61, 0xff8c79d2, 0xff67b35d, 0xff56a2bb, Theme.ACTION_BAR_MAIN_AVATAR_COLOR, 0xff8c79d2, 0xfff37fa6};
-        arrColorsProfilesBack = new int[]{0xffca6056, 0xfff18944, 0xff7d6ac4, 0xff56a14c, 0xff4492ac, Theme.ACTION_BAR_PROFILE_COLOR, 0xff7d6ac4, 0xff4c84b6};
+
+        arrColorsProfilesBack = new int[]{
+                ContextCompat.getColor(context, R.color.avatar_profile_back_red),
+                ContextCompat.getColor(context, R.color.avatar_profile_back_origin),
+                ContextCompat.getColor(context, R.color.avatar_profile_back_purple),
+                ContextCompat.getColor(context, R.color.avatar_profile_back_green),
+                ContextCompat.getColor(context, R.color.avatar_profile_back_cyan),
+                Theme.ACTION_BAR_PROFILE_COLOR,
+                ContextCompat.getColor(context, R.color.avatar_profile_back_purple),
+                ContextCompat.getColor(context, R.color.avatar_profile_back_blue)};
+
         arrColorsProfilesText = new int[]{0xfff9cbc5, 0xfffdddc8, 0xffcdc4ed, 0xffc0edba, 0xffb8e2f0, Theme.ACTION_BAR_PROFILE_SUBTITLE_COLOR, 0xffcdc4ed, 0xffb3d7f7};
         arrColorsNames = new int[]{0xffca5650, 0xffd87b29, 0xff4e92cc, 0xff50b232, 0xff42b1a8, 0xff4e92cc, 0xff4e92cc, 0xff4e92cc};
         arrColorsButtons = new int[]{Theme.ACTION_BAR_RED_SELECTOR_COLOR, Theme.ACTION_BAR_ORANGE_SELECTOR_COLOR, Theme.ACTION_BAR_VIOLET_SELECTOR_COLOR,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/NightModeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/NightModeActivity.java
new file mode 100644
index 000000000..1448a1360
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/NightModeActivity.java
@@ -0,0 +1,221 @@
+package org.telegram.ui.Components;
+
+import android.app.Activity;
+import android.app.TimePickerDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.support.v4.content.ContextCompat;
+import android.text.format.DateFormat;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TimePicker;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+
+import java.util.Calendar;
+
+/**
+ * Created by Rikka on 2016/10/21.
+ */
+
+public class NightModeActivity extends BaseFragment implements TimePickerDialog.OnTimeSetListener {
+
+    private TextSettingsCell sunriseCell;
+    private TextSettingsCell sunsetCell;
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("NightMode", R.string.NightMode));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        fragmentView = new LinearLayout(context);
+        fragmentView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        fragmentView.setBackgroundColor(ContextCompat.getColor(context, R.color.settings_background));
+
+        ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        int nightMode = preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM);
+
+        TextSettingsCell nightModeCell = new TextSettingsCell(context);
+        nightModeCell.setTextAndValue(LocaleController.getString("NightModeStatus", R.string.NightModeStatus), NightModeActivity.getNightModeStatus(nightMode), false);
+        nightModeCell.setForeground(R.drawable.list_selector);
+        ((LinearLayout) fragmentView).addView(nightModeCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
+        infoCell.setText(LocaleController.getString("NightModeInfo", R.string.NightModeInfo));
+        ((LinearLayout) fragmentView).addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        HeaderCell headerCell = new HeaderCell(context);
+        headerCell.setText(LocaleController.getString("NightModeAutoSwitch", R.string.NightModeAutoSwitch));
+        ((LinearLayout) fragmentView).addView(headerCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(System.currentTimeMillis());
+        calendar.set(Calendar.SECOND, 0);
+
+        CharSequence sunset, sunrise;
+        if (DateFormat.is24HourFormat(context)) {
+            calendar.set(Calendar.HOUR_OF_DAY, preferences.getInt("nightModeSunrise", 6));
+            calendar.set(Calendar.MINUTE, preferences.getInt("nightModeSunriseMinute", 0));
+            sunrise = DateFormat.format("HH:mm", calendar);
+            calendar.set(Calendar.HOUR_OF_DAY, preferences.getInt("nightModeSunset", 22));
+            calendar.set(Calendar.MINUTE, preferences.getInt("nightModeSunsetMinute", 0));
+            sunset = DateFormat.format("HH:mm", calendar);
+        } else {
+            calendar.set(Calendar.HOUR_OF_DAY, preferences.getInt("nightModeSunrise", 6));
+            calendar.set(Calendar.MINUTE, preferences.getInt("nightModeSunriseMinute", 0));
+            sunrise = DateFormat.format("hh:mm a", calendar);
+            calendar.set(Calendar.HOUR_OF_DAY, preferences.getInt("nightModeSunset", 22));
+            calendar.set(Calendar.MINUTE, preferences.getInt("nightModeSunsetMinute", 0));
+            sunset = DateFormat.format("hh:mm a", calendar);
+        }
+
+        sunsetCell = new TextSettingsCell(context);
+        sunsetCell.setForeground(R.drawable.list_selector);
+        sunsetCell.setTextAndValue(LocaleController.getString("NightModeStartTime", R.string.NightModeStartTime), sunset.toString(), true);
+        ((LinearLayout) fragmentView).addView(sunsetCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        sunriseCell = new TextSettingsCell(context);
+        sunriseCell.setTextAndValue(LocaleController.getString("NightModeEndTime", R.string.NightModeEndTime), sunrise.toString(), false);
+        ((LinearLayout) fragmentView).addView(sunriseCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextInfoPrivacyCell infoCell2 = new TextInfoPrivacyCell(context);
+        infoCell2.setText(LocaleController.getString("NightModeAutoSwitchInfo", R.string.NightModeAutoSwitchInfo));
+        ((LinearLayout) fragmentView).addView(infoCell2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nightModeCell.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+                builder.setApplyTopPadding(false);
+                builder.setApplyBottomPadding(false);
+                builder.setItems(new String[]{
+                                getNightModeStatus(DayNightActivity.MODE_NIGHT_YES),
+                                getNightModeStatus(DayNightActivity.MODE_NIGHT_NO),
+                                getNightModeStatus(DayNightActivity.MODE_NIGHT_AUTO),
+                                getNightModeStatus(DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM),
+                        },
+                        new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                int nightMode = DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM;
+
+                                switch (i) {
+                                    case 0: nightMode = DayNightActivity.MODE_NIGHT_YES; break;
+                                    case 1: nightMode = DayNightActivity.MODE_NIGHT_NO; break;
+                                    case 2: nightMode = DayNightActivity.MODE_NIGHT_AUTO; break;
+                                    case 3: nightMode = DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM; break;
+                                }
+
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("nightMode", nightMode);
+                                editor.commit();
+                                DayNightActivity.setDefaultNightMode(nightMode);
+
+                                getParentActivity().getWindow().setWindowAnimations(R.style.AnimationFadeInOut);
+                                getParentActivity().recreate();
+                            }
+                        });
+                showDialog(builder.create());
+            }
+        });
+
+        sunsetCell.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                showDataPickerDialog(false, 22);
+            }
+        });
+
+        sunriseCell.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                showDataPickerDialog(true, 6);
+            }
+        });
+
+        return fragmentView;
+    }
+
+    private boolean isEditingSunrise;
+
+    private void showDataPickerDialog(boolean isEnd, int hour) {
+        isEditingSunrise = isEnd;
+        showDialog(new TimePickerDialog(getParentActivity(), this, hour, 0, DateFormat.is24HourFormat(getParentActivity())));
+    }
+
+    @Override
+    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (isEditingSunrise) {
+            preferences.edit()
+                    .putInt("nightModeSunrise", hourOfDay)
+                    .putInt("nightModeSunriseMinute", minute)
+                    .apply();
+            sunriseCell.setValue(getFormattedTime(view.getContext(), hourOfDay, minute));
+        } else {
+            preferences.edit()
+                    .putInt("nightModeSunset", hourOfDay)
+                    .putInt("nightModeSunsetMinute", minute)
+                    .apply();
+            sunsetCell.setValue(getFormattedTime(view.getContext(), hourOfDay, minute));
+        }
+    }
+
+    private static String getFormattedTime(Context context, int hourOfDay, int minute) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(System.currentTimeMillis());
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MINUTE, minute);
+        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
+
+        if (DateFormat.is24HourFormat(context)) {
+            return DateFormat.format("HH:mm", calendar).toString();
+        } else {
+            return DateFormat.format("hh:mm a", calendar).toString();
+        }
+    }
+
+    public static String getNightModeStatus(int value) {
+        switch (value) {
+            case DayNightActivity.MODE_NIGHT_YES:
+                return LocaleController.getString("NightModeEnable", R.string.NightModeEnable);
+            case DayNightActivity.MODE_NIGHT_AUTO:
+                return LocaleController.getString("NightModeAuto", R.string.NightModeAuto);
+            case DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM:
+                return LocaleController.getString("NightModeFollowSystem", R.string.NightModeFollowSystem);
+            default:
+                return LocaleController.getString("NightModeDisable", R.string.NightModeDisable);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TwilightManager.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TwilightManager.java
index e03793ff7..407cffc60 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TwilightManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TwilightManager.java
@@ -35,15 +35,33 @@
 /**
  * Class which managing whether we are in the night or not.
  */
-class TwilightManager {
+public class TwilightManager {
 
     private static final String TAG = "TwilightManager";
 
-    private static final int SUNRISE = 6; // 6am
-    private static final int SUNSET = 22; // 10pm
+    private static int SUNRISE = 6; // 6am
+    private static int SUNRISE_MINUTE = 0;
+    private static int SUNSET = 22; // 10pm
+    private static int SUNSET_MINUTE = 0;
+
+    private static boolean useLocation;
 
     private static TwilightManager sInstance;
 
+    public static void setUseLocation(boolean useLocation) {
+        TwilightManager.useLocation = useLocation;
+    }
+
+    public static void setSunrise(int hour, int minute) {
+        TwilightManager.SUNRISE = hour;
+        TwilightManager.SUNRISE_MINUTE = minute;
+    }
+
+    public static void setSunset(int hour, int minute) {
+        TwilightManager.SUNSET = hour;
+        TwilightManager.SUNSET_MINUTE = minute;
+    }
+
     static TwilightManager getInstance(@NonNull Context context) {
         if (sInstance == null) {
             context = context.getApplicationContext();
@@ -84,20 +102,23 @@ boolean isNight() {
 
         // Else, we will try and grab the last known location
         final Location location = getLastKnownLocation();
-        if (location != null) {
+        if (!useLocation || location == null) {
+            if (location == null) {
+                Log.i(TAG, "Could not get last known location. This is probably because the app does not"
+                        + " have any location permissions. Falling back to hardcoded"
+                        + " sunrise/sunset values.");
+            }
+
+            // If we don't have a location, we'll use our hardcoded sunrise/sunset values.
+            // These aren't great, but it's better than nothing.
+            Calendar calendar = Calendar.getInstance();
+            final int hour = calendar.get(Calendar.HOUR_OF_DAY);
+            final int minute = calendar.get(Calendar.MINUTE);
+            return (hour < SUNRISE && minute < SUNRISE_MINUTE) || (hour >= SUNSET && minute >= SUNSET_MINUTE);
+        } else {
             updateState(location);
             return state.isNight;
         }
-
-        Log.i(TAG, "Could not get last known location. This is probably because the app does not"
-                + " have any location permissions. Falling back to hardcoded"
-                + " sunrise/sunset values.");
-
-        // If we don't have a location, we'll use our hardcoded sunrise/sunset values.
-        // These aren't great, but it's better than nothing.
-        Calendar calendar = Calendar.getInstance();
-        final int hour = calendar.get(Calendar.HOUR_OF_DAY);
-        return hour < SUNRISE || hour >= SUNSET;
     }
 
     private Location getLastKnownLocation() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
index 739a7f190..472cab7e0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
@@ -84,7 +84,7 @@ public void onItemClick(int id) {
 
         fragmentView = new FrameLayout(context);
         FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(ContextCompat.getColor(context, R.color.card_background));
+        frameLayout.setBackgroundColor(ContextCompat.getColor(context, R.color.settings_background));
 
         RecyclerListView listView = new RecyclerListView(context);
         listView.setItemAnimator(null);
@@ -234,7 +234,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             switch (viewType) {
                 case 0:
                     view = new FeaturedStickerSetCell(mContext);
-                    view.setBackgroundResource(R.drawable.list_selector_white);
+                    ((FeaturedStickerSetCell) view).setForeground(R.drawable.list_selector);
                     ((FeaturedStickerSetCell) view).setAddOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View v) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 7117b2ae3..7968a11b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -69,12 +69,14 @@
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
 import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 import org.telegram.ui.Cells.ArchivedStickerSetCell;
 import org.telegram.ui.Cells.CheckBoxCell;
+import org.telegram.ui.Cells.ContextLinkCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.FeaturedStickerSetCell;
@@ -179,7 +181,7 @@ protected void onCreate(Bundle savedInstanceState) {
             AndroidUtilities.isInMultiwindow = isInMultiWindowMode();
         }
         Theme.loadRecources(this);
-        AvatarDrawable.resetColor();
+        AvatarDrawable.resetColor(this);
         MessageObject.resetPaint();
         ProfileSearchCell.resetPaint(this);
         DialogCell.resetPaintColor(this);
@@ -198,6 +200,8 @@ protected void onCreate(Bundle savedInstanceState) {
         TextBlockCell.resetDivider();
         FeaturedStickerSetCell.resetDivider();
         ArchivedStickerSetCell.resetDivider();
+        ActionBarPopupWindow.ActionBarPopupWindowLayout.resetDrawable();
+        ContextLinkCell.resetPaint();
 
         ApplicationLoader.reloadWallpaperNightModeChanged();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index c6435f859..20639331d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -36,7 +36,6 @@
 import android.text.TextUtils;
 import android.text.method.LinkMovementMethod;
 import android.util.Base64;
-import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -52,16 +51,23 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimatorListenerAdapterProxy;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.UserObject;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
@@ -71,44 +77,28 @@
 import org.telegram.tgnet.SerializedData;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.MessagesStorage;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.MessageObject;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.CheckBoxCell;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Cells.DividerCell;
-import org.telegram.ui.Cells.HashtagSearchCell;
-import org.telegram.ui.Cells.RadioButtonCell;
-import org.telegram.ui.Cells.RadioCell;
-import org.telegram.ui.Cells.SessionCell;
-import org.telegram.ui.Cells.SharedDocumentCell;
-import org.telegram.ui.Cells.SharedLinkCell;
-import org.telegram.ui.Cells.StickerSetCell;
-import org.telegram.ui.Cells.TextBlockCell;
-import org.telegram.ui.Cells.TextInfoCell;
 import org.telegram.ui.Cells.EmptyCell;
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Cells.ShadowSectionCell;
 import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.Cells.TextInfoCell;
 import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.AvatarUpdater;
 import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.DayNightActivity;
 import org.telegram.ui.Components.ForegroundFrameLayout;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NightModeActivity;
 import org.telegram.ui.Components.NumberPicker;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.RecyclerListView;
 
 import java.io.File;
@@ -183,6 +173,9 @@
     private final static int edit_name = 1;
     private final static int logout = 2;
 
+    public SettingsActivity() {
+    }
+
     private static class LinkMovementMethodMy extends LinkMovementMethod {
         @Override
         public boolean onTouchEvent(@NonNull TextView widget, @NonNull Spannable buffer, @NonNull MotionEvent event) {
@@ -264,12 +257,8 @@ public void run() {
         privacyRow = rowCount++;
         backgroundRow = rowCount++;
         languageRow = rowCount++;
-        enableAnimationsRow = rowCount++;
-
-        // Rikkagram
-        //fakeBoldRow = rowCount++;
         nightModeRow = rowCount++;
-
+        enableAnimationsRow = rowCount++;
         mediaDownloadSection = rowCount++;
         mediaDownloadSection2 = rowCount++;
         mobileDownloadRow = rowCount++;
@@ -751,18 +740,7 @@ public void onClick(View v) {
                         ((TextCheckCell) view).setChecked(!fakeBold);
                     }
                 } else if (position == nightModeRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int nightMode = preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_NO);
-                    nightMode = nightMode != DayNightActivity.MODE_NIGHT_YES ? DayNightActivity.MODE_NIGHT_YES : DayNightActivity.MODE_NIGHT_NO;
-                    SharedPreferences.Editor editor = preferences.edit();
-                    editor.putInt("nightMode", nightMode);
-                    editor.commit();
-                    DayNightActivity.setDefaultNightMode(nightMode);
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(nightMode == DayNightActivity.MODE_NIGHT_YES);
-                    }
-
-                    getParentActivity().recreate();
+                    presentFragment(new NightModeActivity());
                 }
             }
         });
@@ -1382,6 +1360,10 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setText(LocaleController.getString("PrivacyPolicy", R.string.PrivacyPolicy), true);
                     } else if (position == emojiRow) {
                         textCell.setText(LocaleController.getString("Emoji", R.string.Emoji), true);
+                    } else if (position == nightModeRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        int nightMode = preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_FOLLOW_SYSTEM);
+                        textCell.setTextAndValue(LocaleController.getString("NightMode", R.string.NightMode), NightModeActivity.getNightModeStatus(nightMode), true);
                     }
                     break;
                 }
@@ -1389,7 +1371,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     TextCheckCell textCell = (TextCheckCell) holder.itemView;
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                     if (position == enableAnimationsRow) {
-                        textCell.setTextAndCheck(LocaleController.getString("EnableAnimations", R.string.EnableAnimations), preferences.getBoolean("view_animations", true), true);
+                        textCell.setTextAndCheck(LocaleController.getString("EnableAnimations", R.string.EnableAnimations), preferences.getBoolean("view_animations", true), false);
                     } else if (position == sendByEnterRow) {
                         textCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), false);
                     } else if (position == saveToGalleryRow) {
@@ -1406,8 +1388,6 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setTextAndValueAndCheck(LocaleController.getString("UseGoogleEmoji", R.string.UseGoogleEmoji), LocaleController.getString("UseGoogleEmojiInfo", R.string.UseGoogleEmojiInfo), preferences.getBoolean("useGoogleEmoji", true), false, true);
                     } else if (position == fakeBoldRow) {
                         textCell.setTextAndValueAndCheck("Replace medium font as bold"/*LocaleController.getString("UseGoogleEmoji", R.string.UseGoogleEmoji)*/, "Use it if no medium font in system"/*LocaleController.getString("UseGoogleEmojiInfo", R.string.UseGoogleEmojiInfo)*/, preferences.getBoolean("fakeBold", false), false, true);
-                    } else if (position == nightModeRow) {
-                        textCell.setTextAndCheck(LocaleController.getString("NightMode", R.string.NightMode), preferences.getInt("nightMode", DayNightActivity.MODE_NIGHT_NO) != DayNightActivity.MODE_NIGHT_NO, false);
                     }
                     break;
                 }
@@ -1511,7 +1491,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         position == mobileDownloadRow || position == clearLogsRow || position == roamingDownloadRow || position == languageRow || position == usernameRow ||
                         position == switchBackendButtonRow || position == telegramFaqRow || position == contactsSortRow || position == contactsReimportRow || position == saveToGalleryRow ||
                         position == stickersRow || position == cacheRow || position == raiseToSpeakRow || position == privacyPolicyRow || position == customTabsRow || position == directShareRow || position == versionRow ||
-                        position == emojiRow || position == googleEmojiRow || position == fakeBoldRow || position == nightModeRow) { // Rikkagram
+                        position == emojiRow || position == googleEmojiRow || position == fakeBoldRow || position == nightModeRow) {
                     if (holder.itemView instanceof ForegroundFrameLayout) {
                         if (holder.itemView.getForeground() == null) {
                             holder.itemView.setForeground(holder.itemView.getContext()
@@ -1587,9 +1567,9 @@ public int getItemViewType(int position) {
             }
             if (position == settingsSectionRow || position == supportSectionRow || position == messagesSectionRow || position == mediaDownloadSection || position == contactsSectionRow) {
                 return 1;
-            } else if (position == enableAnimationsRow || position == sendByEnterRow || position == saveToGalleryRow || position == autoplayGifsRow || position == raiseToSpeakRow || position == customTabsRow || position == directShareRow || position == googleEmojiRow || position == fakeBoldRow || position == nightModeRow) { // Rikkagram
+            } else if (position == enableAnimationsRow || position == sendByEnterRow || position == saveToGalleryRow || position == autoplayGifsRow || position == raiseToSpeakRow || position == customTabsRow || position == directShareRow || position == googleEmojiRow || position == fakeBoldRow) {
                 return 3;
-            } else if (position == notificationRow || position == backgroundRow || position == askQuestionRow || position == sendLogsRow || position == privacyRow || position == clearLogsRow || position == switchBackendButtonRow || position == telegramFaqRow || position == contactsReimportRow || position == textSizeRow || position == languageRow || position == contactsSortRow || position == stickersRow || position == cacheRow || position == privacyPolicyRow || position == emojiRow) {
+            } else if (position == notificationRow || position == backgroundRow || position == askQuestionRow || position == sendLogsRow || position == privacyRow || position == clearLogsRow || position == switchBackendButtonRow || position == telegramFaqRow || position == contactsReimportRow || position == textSizeRow || position == languageRow || position == contactsSortRow || position == stickersRow || position == cacheRow || position == privacyPolicyRow || position == emojiRow || position == nightModeRow) {
                 return 2;
             } else if (position == versionRow) {
                 return 5;
diff --git a/TMessagesProj/src/main/res/anim/fade_in.xml b/TMessagesProj/src/main/res/anim/fade_in.xml
new file mode 100644
index 000000000..ddd222e15
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/fade_in.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+       android:interpolator="@android:interpolator/decelerate_quad"
+       android:fromAlpha="0.0" android:toAlpha="1.0"
+       android:duration="@android:integer/config_shortAnimTime" />
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/fade_out.xml b/TMessagesProj/src/main/res/anim/fade_out.xml
new file mode 100644
index 000000000..454a37330
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/fade_out.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android" android:interpolator="@android:interpolator/accelerate_quad"
+       android:fromAlpha="1.0"
+       android:toAlpha="0.0"
+       android:duration="@android:integer/config_shortAnimTime"/>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-night-hdpi/blockpanel.png b/TMessagesProj/src/main/res/drawable-night-hdpi/blockpanel.png
new file mode 100644
index 000000000..f80b2b83a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-hdpi/blockpanel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-hdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-night-hdpi/popup_fixed.9.png
new file mode 100644
index 000000000..c49fba482
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-hdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-mdpi/blockpanel.png b/TMessagesProj/src/main/res/drawable-night-mdpi/blockpanel.png
new file mode 100644
index 000000000..d58e61a75
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-mdpi/blockpanel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-mdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-night-mdpi/popup_fixed.9.png
new file mode 100644
index 000000000..dae9defdd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-mdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-xhdpi/blockpanel.png b/TMessagesProj/src/main/res/drawable-night-xhdpi/blockpanel.png
new file mode 100644
index 000000000..a7f00a78b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-xhdpi/blockpanel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-xhdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-night-xhdpi/popup_fixed.9.png
new file mode 100644
index 000000000..4b14804c4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-xhdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-xxhdpi/blockpanel.png b/TMessagesProj/src/main/res/drawable-night-xxhdpi/blockpanel.png
new file mode 100644
index 000000000..cfa181b9f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-xxhdpi/blockpanel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-night-xxhdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-night-xxhdpi/popup_fixed.9.png
new file mode 100644
index 000000000..6670ad9af
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-night-xxhdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 154a7cec6..24595d0cb 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index df215e5fc..bfb4d2caa 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index f4134c143..996f23076 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -1296,8 +1296,17 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s a las %2$s</string>
 
-    <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index a2508b88a..88d9c7091 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1296,8 +1296,17 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s alle %2$s</string>
 
-    <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 96538abdd..57c7a0e7b 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-night/colors.xml b/TMessagesProj/src/main/res/values-night/colors.xml
index 4ffdb6fe4..b93ad9edf 100644
--- a/TMessagesProj/src/main/res/values-night/colors.xml
+++ b/TMessagesProj/src/main/res/values-night/colors.xml
@@ -42,4 +42,11 @@
     <color name="shared_photo_placeholder">@color/material_grey_850</color>
 
     <color name="dialog_count_color">@color/material_grey_850</color>
+
+    <color name="avatar_profile_back_red">#8f2e24</color>
+    <color name="avatar_profile_back_origin">#a55927</color>
+    <color name="avatar_profile_back_purple">#473070</color>
+    <color name="avatar_profile_back_green">#3c6c36</color>
+    <color name="avatar_profile_back_cyan">#1a7579</color>
+    <color name="avatar_profile_back_blue">#3a5c7a</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index a0e6336bc..b3837559f 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index e9a48a7b0..0909ee261 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 1d3139cdb..d61f14baa 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -1299,5 +1299,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index ae95cf34b..f3274f7b6 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -47,6 +47,7 @@
         <item name="android:actionBarItemBackground">@drawable/bar_selector_style</item>
         <item name="android:colorPrimaryDark">#33000000</item>
         <item name="android:colorPrimary">@color/colorPrimary</item>
+        <item name="android:dialogTheme">@style/Theme.TMessages.Dialog</item>
         <item name="android:alertDialogTheme">@style/Theme.TMessages.Dialog.Alert</item>
         <item name="android:colorControlActivated">#4991cc</item>
     </style>
@@ -60,6 +61,10 @@
         <item name="android:colorPrimaryDark">#99000000</item>
     </style>
 
+    <style name="Theme.TMessages.Dialog" parent="@style/Theme.DayNight.Dialog">
+        <item name="android:colorAccent">#4991cc</item>
+    </style>
+
     <style name="Theme.TMessages.Dialog.Alert" parent="@style/Theme.DayNight.Dialog.Alert">
         <item name="android:colorAccent">#4991cc</item>
     </style>
diff --git a/TMessagesProj/src/main/res/values-zh-rCN/strings.xml b/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
index 6c0ff8964..110118bf0 100644
--- a/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
+++ b/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
@@ -1302,5 +1302,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">使用 Noto Color Emoji 而不是 iOS emoji</string>
-    <string name="NightMode">暗色主题（开发中）</string>
+    <string name="NightMode">夜间模式</string>
+    <string name="NightModeStatus">状态</string>
+    <string name="NightModeEnable">开启</string>
+    <string name="NightModeDisable">关闭</string>
+    <string name="NightModeAuto">自动</string>
+    <string name="NightModeFollowSystem">跟随系统</string>
+    <string name="NightModeAutoSwitch">自动切换时间</string>
+    <string name="NightModeStartTime">夜间模式开始时间</string>
+    <string name="NightModeEndTime">夜间模式结束时间</string>
+    <string name="NightModeAutoSwitchInfo">该设置只在您选择自动时生效。</string>
+    <string name="NightModeInfo">跟随系统可能需要您强制停止并重启应用才能生效。</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index eb5c08043..e73150816 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -54,4 +54,13 @@
     <color name="shared_photo_placeholder">#fff5f5f5</color>
 
     <color name="dialog_count_color">#ffffffff</color>
+
+    <!--<color name="avatar_red"></color>
+    <color name="avatar_profile_red"></color>-->
+    <color name="avatar_profile_back_red">#ffca6056</color>
+    <color name="avatar_profile_back_origin">#fff18944</color>
+    <color name="avatar_profile_back_purple">#ff7d6ac4</color>
+    <color name="avatar_profile_back_green">#ff56a14c</color>
+    <color name="avatar_profile_back_cyan">#ff4492ac</color>
+    <color name="avatar_profile_back_blue">#4c84b6</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 8cb95cf3a..523472265 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1301,5 +1301,15 @@
     <!--Rikkagram-->
     <string name="UseGoogleEmoji">Google emoji</string>
     <string name="UseGoogleEmojiInfo">Use Noto Color Emoji instead of iOS emoji</string>
-    <string name="NightMode">Dark Theme (developing)</string>
+    <string name="NightMode">Night Mode</string>
+    <string name="NightModeStatus">Status</string>
+    <string name="NightModeEnable">Enable</string>
+    <string name="NightModeDisable">Disable</string>
+    <string name="NightModeAuto">Auto</string>
+    <string name="NightModeFollowSystem">Follow System</string>
+    <string name="NightModeAutoSwitch">Auto switch time</string>
+    <string name="NightModeStartTime">Start time</string>
+    <string name="NightModeAutoSwitchInfo">This setting only take effect when you select auto.</string>
+    <string name="NightModeEndTime">End time</string>
+    <string name="NightModeInfo">Follow System may need you to force stop and restart app to take effect.</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index 96809a32e..77ca64e06 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -100,4 +100,9 @@
         <item name="android:windowFullscreen">false</item>
     </style>
 
+    <style name="AnimationFadeInOut" parent="@android:style/Animation">
+        <item name="@android:windowEnterAnimation">@anim/fade_in</item>
+        <item name="@android:windowExitAnimation">@anim/fade_out</item>
+    </style>
+
 </resources>
