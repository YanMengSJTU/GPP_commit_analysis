diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index a592de442..0d209aa9a 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -85,7 +85,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 274
+        versionCode 279
         versionName "1.6.0"
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index ff9768a55..4ad6fe01f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -1039,7 +1039,7 @@ public void sendTyping(long dialog_id, int classGuid) {
                 public void run(TLObject response, TLRPC.TL_error error) {
 
                 }
-            });
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
             ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
         } else {
             int encId = (int)(dialog_id >> 32);
@@ -1055,7 +1055,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     public void run(TLObject response, TLRPC.TL_error error) {
 
                     }
-                });
+                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
                 ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
             }
         }
@@ -1542,8 +1542,26 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
             req.max_id = max_positive_id;
             req.offset = offset;
             if (offset == 0) {
-                NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_id);
+                NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id);
                 MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, false);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
+                                if (dialog != null) {
+                                    dialog.unread_count = 0;
+                                    NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                                }
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                dialogsToUpdate.put(dialog_id, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                            }
+                        });
+                    }
+                });
             }
             if (req.max_id != Integer.MAX_VALUE) {
                 ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -1579,26 +1597,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 });
             }
 
-            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (offset == 0) {
-                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                                if (dialog != null) {
-                                    dialog.unread_count = 0;
-                                    NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                                }
-                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                                dialogsToUpdate.put(dialog_id, 0);
-                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
-                            }
-                        }
-                    });
-                }
-            });
             if (offset == 0) {
                 TLRPC.TL_messages_receivedMessages req2 = new TLRPC.TL_messages_receivedMessages();
                 req2.max_id = max_positive_id;
@@ -2568,15 +2566,15 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (newMsgObj != null) {
                     if (error == null) {
-                        TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
+                        final TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
                         newMsgObj.messageOwner.date = res.date;
                         if (res.file instanceof TLRPC.TL_encryptedFile) {
                             processSentMessage(newMsgObj.messageOwner, null, res.file, req, originalPath);
                         }
-                        MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, true);
                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                             @Override
                             public void run() {
+                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, false);
                                 Utilities.RunOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
@@ -2608,7 +2606,7 @@ private void performSendMessageRequest(TLObject req, final MessageObject newMsgO
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
                     final int oldId = newMsgObj.messageOwner.id;
-                    ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
+                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
 
                     if (response instanceof TLRPC.TL_messages_sentMessage) {
                         TLRPC.TL_messages_sentMessage res = (TLRPC.TL_messages_sentMessage) response;
@@ -2683,13 +2681,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             }
                         }
                     }
-                    MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, newMsgObj.messageOwner.id, 0, true);
-                    if (!sentMessages.isEmpty()) {
-                        MessagesStorage.getInstance().putMessages(sentMessages, true, true);
-                    }
                     MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
+                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, newMsgObj.messageOwner.id, 0, false);
+                            MessagesStorage.getInstance().putMessages(sentMessages, true, false);
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
@@ -3509,9 +3505,6 @@ public void run() {
                                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                                                 if (!pushMessages.isEmpty()) {
                                                     NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
-                                                    if (res.other_updates == null || res.other_updates.isEmpty()) {
-                                                        NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
-                                                    }
                                                 }
                                             }
                                         });
@@ -3614,7 +3607,6 @@ public void run() {
                             }
                             if (!obj.isFromMe() && obj.isUnread()) {
                                 NotificationsController.getInstance().processNewMessages(objArr, true);
-                                NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
                             }
                             updateInterfaceWithMessages(-updates.chat_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -3670,7 +3662,6 @@ public void run() {
                             }
                             if (!obj.isFromMe() && obj.isUnread()) {
                                 NotificationsController.getInstance().processNewMessages(objArr, true);
-                                NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
                             }
                             updateInterfaceWithMessages(updates.from_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -4260,7 +4251,7 @@ public void run() {
                         }
                     }
                 }
-                if (!markAsReadMessages.isEmpty() || !messages.isEmpty()) {
+                if (!markAsReadMessages.isEmpty()) {
                     NotificationsController.getInstance().processReadMessages(markAsReadMessages, 0, 0, 0);
                 }
                 if (!deletedMessages.isEmpty()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index da1be2154..a98c54c06 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -789,7 +789,7 @@ public void run() {
                         //database.executeFast("DELETE FROM pending_read WHERE uid = " + dialog_id).stepThis().dispose();
                     } else {
                         database.beginTransaction();
-                        SQLitePreparedStatement state;/*) = database.executeFast("REPLACE INTO pending_read VALUES(?, ?)");
+                        SQLitePreparedStatement state;/* = database.executeFast("REPLACE INTO pending_read VALUES(?, ?)");
                         state.requery();
                         state.bindLong(1, dialog_id);
                         state.bindInteger(2, max_id);
@@ -1801,9 +1801,6 @@ public void run() {
     }
 
     private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final boolean withTransaction) {
-        if (Thread.currentThread().getId() != storageQueue.getId()) {
-            throw new RuntimeException("wrong db thread");
-        }
         try {
             if (withTransaction) {
                 database.beginTransaction();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 8339743a8..66a446a45 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -475,7 +475,7 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
         if (messageObjects.isEmpty()) {
             return;
         }
-        notifyCheck = isLast;
+        boolean added = false;
 
         int oldCount = popupMessages.size();
         HashMap<Long, Boolean> settingsCache = new HashMap<Long, Boolean>();
@@ -487,9 +487,10 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
                 continue;
             }
             long dialog_id = messageObject.getDialogId();
-            if (dialog_id == openned_dialog_id) {
+            if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
                 continue;
             }
+            added = true;
 
             Boolean value = settingsCache.get(dialog_id);
             boolean isChat = (int)dialog_id < 0;
@@ -508,6 +509,10 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
             }
         }
 
+        if (added) {
+            notifyCheck = isLast;
+        }
+
         if (!popupMessages.isEmpty() && oldCount != popupMessages.size()) {
             if (ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
                 MessageObject messageObject = messageObjects.get(0);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 9019f118d..fe0659d5e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -946,8 +946,14 @@ public void run() {
                             }
                         }
                     };
+
+                    boolean isLocalFile = false;
+                    if (httpUrl != null && !httpUrl.startsWith("http")) {
+                        isLocalFile = true;
+                    }
+
                     img.loadOperation = loadOperation;
-                    if (runningOperation.size() < maxConcurentLoadingOpertaionsCount) {
+                    if (runningOperation.size() < maxConcurentLoadingOpertaionsCount || isLocalFile) {
                         loadOperation.start();
                         runningOperation.add(loadOperation);
                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 875b14270..d918f1590 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -596,7 +596,6 @@ public boolean onTouch(View v, MotionEvent event) {
                 actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete);
             }
             actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
-    //TODO:        actionMode.getItem(quoteforward).setVisibility([is object downloaded] ? View.VISIBLE : View.GONE);
 
             View avatarLayout = menu.addItemResource(chat_menu_avatar, R.layout.chat_header_layout);
             avatarImageView = (BackupImageView)avatarLayout.findViewById(R.id.chat_avatar_image);
@@ -2928,38 +2927,40 @@ private void processForwardFromMe(MessageObject messageObject, long did) {
         }
     }
 
-    @Override
-    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
-        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
-            if (forwaringMessage != null) {
-                if (forwaringMessage.messageOwner.id > 0) {
-                    if (QuoteForward) {
-                        MessagesController.getInstance().sendMessage(forwaringMessage, did);
-                    } else {
-                        processForwardFromMe(forwaringMessage, did);
-                    }
+    private void forwardSelectedMessages(long did, boolean fromMyName) {
+        if (forwaringMessage != null) {
+            if (forwaringMessage.messageOwner.id > 0) {
+                if (!fromMyName) {
+                    MessagesController.getInstance().sendMessage(forwaringMessage, did);
+                } else {
+                    processForwardFromMe(forwaringMessage, did);
                 }
-                forwaringMessage = null;
-            } else {
-                ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
-                Collections.sort(ids);
-                for (Integer id : ids) {
-                    if (id > 0) {
-                        if (QuoteForward) {
-                            MessagesController.getInstance().sendMessage(selectedMessagesIds.get(id), did);
-                        } else {
-                            processForwardFromMe(selectedMessagesIds.get(id), did);
-                        }
+            }
+            forwaringMessage = null;
+        } else {
+            ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+            Collections.sort(ids);
+            for (Integer id : ids) {
+                if (id > 0) {
+                    if (!fromMyName) {
+                        MessagesController.getInstance().sendMessage(selectedMessagesIds.get(id), did);
+                    } else {
+                        processForwardFromMe(selectedMessagesIds.get(id), did);
                     }
                 }
-                selectedMessagesCanCopyIds.clear();
-                selectedMessagesIds.clear();
             }
+            selectedMessagesCanCopyIds.clear();
+            selectedMessagesIds.clear();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
+        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
+
             if (did != dialog_id) {
                 int lower_part = (int)did;
                 if (lower_part != 0) {
-                    activity.removeSelfFromStack();
-
                     Bundle args = new Bundle();
                     args.putBoolean("scrollToTopOnResume", scrollToTopOnResume);
                     if (lower_part > 0) {
@@ -2967,14 +2968,15 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                     } else if (lower_part < 0) {
                         args.putInt("chat_id", -lower_part);
                     }
-                    presentFragment(new ChatActivity(args));
-
+                    presentFragment(new ChatActivity(args), true);
                     removeSelfFromStack();
+                    forwardSelectedMessages(did, param);
                 } else {
                     activity.finishFragment();
                 }
             } else {
                 activity.finishFragment();
+                forwardSelectedMessages(did, param);
                 chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
                 scrollToTopOnResume = true;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index abb1a5f0b..9e23803d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -24,6 +24,7 @@
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.EditText;
+import android.widget.FrameLayout;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
@@ -350,6 +351,9 @@ private void didSelectResult(final TLRPC.User user, boolean useAlert, String par
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
             builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
             final EditText editText = new EditText(getParentActivity());
+            if (android.os.Build.VERSION.SDK_INT < 11) {
+                editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
+            }
             editText.setTextSize(18);
             editText.setText("50");
             editText.setGravity(Gravity.CENTER);
@@ -366,9 +370,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
             showAlertDialog(builder);
             ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
             if (layoutParams != null) {
+                if (layoutParams instanceof FrameLayout.LayoutParams) {
+                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                }
                 layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
                 editText.setLayoutParams(layoutParams);
             }
+            editText.setSelection(editText.getText().length());
         } else {
             if (delegate != null) {
                 delegate.didSelectContact(user, param);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index f9b627349..0b9e21bd0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -500,6 +500,7 @@ protected void onPause() {
 
     @Override
     protected void onDestroy() {
+        PhotoViewer.getInstance().destroyPhotoViewer();
         super.onDestroy();
         onFinish();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index d7211fb67..becadcd99 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -1697,6 +1697,22 @@ public void onAnimationRepeat(Animation animation) {
         }
     }
 
+    public void destroyPhotoViewer() {
+        if (parentActivity == null || windowView == null) {
+            return;
+        }
+        try {
+            WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+            if (windowView.getParent() != null) {
+                wm.removeViewImmediate(windowView);
+            }
+            windowView = null;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        Instance = null;
+    }
+
     private void onPhotoClosed(PlaceProviderObject object) {
         disableShowCheck = true;
         currentMessageObject = null;
