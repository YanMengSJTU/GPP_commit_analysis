diff --git a/TMessagesProj/jni/audio.c b/TMessagesProj/jni/audio.c
index b2290cceb..50f11b4a5 100644
--- a/TMessagesProj/jni/audio.c
+++ b/TMessagesProj/jni/audio.c
@@ -335,7 +335,7 @@ int initRecorder(const char *path) {
     }
     
 #ifdef OPUS_SET_LSB_DEPTH
-    result = opus_encoder_ctl(_encoder, OPUS_SET_LSB_DEPTH(max(8, min(24, inopt.samplesize))));
+    result = opus_encoder_ctl(_encoder, OPUS_SET_LSB_DEPTH(u_max(8, u_min(24, inopt.samplesize))));
     if (result != OPUS_OK) {
         LOGE("Warning OPUS_SET_LSB_DEPTH returned: %s", opus_strerror(result));
     }
@@ -447,7 +447,7 @@ int writeFrame(uint8_t *framePcmBytes, uint32_t frameByteCount) {
         
         enc_granulepos += cur_frame_size * 48000 / coding_rate;
         size_segments = (nbBytes + 255) / 255;
-        min_bytes = min(nbBytes, min_bytes);
+        min_bytes = u_min(nbBytes, min_bytes);
     }
     
     while ((((size_segments <= 255) && (last_segments + size_segments > 255)) || (enc_granulepos - last_granulepos > max_ogg_delay)) && ogg_stream_flush_fill(&os, &og, 255 * 255)) {
@@ -548,7 +548,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform2(JN
     uint16_t *samples = malloc(100 * 2);
     uint64_t sampleIndex = 0;
     uint16_t peakSample = 0;
-    int32_t sampleRate = (int32_t) max(1, length / resultSamples);
+    int32_t sampleRate = (int32_t) u_max(1, length / resultSamples);
     int32_t index = 0;
 
     for (int32_t i = 0; i < length; i++) {
@@ -588,7 +588,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform2(JN
         uint8_t *bytes = malloc(bitstreamLength + 4);
         memset(bytes, 0, bitstreamLength + 4);
         for (int32_t i = 0; i < resultSamples; i++) {
-            int32_t value = min(31, abs((int32_t) samples[i]) * 31 / peak);
+            int32_t value = u_min(31, abs((int32_t) samples[i]) * 31 / peak);
             set_bits(bytes, i * 5, value & 31);
         }
         (*env)->SetByteArrayRegion(env, result, 0, bitstreamLength, (jbyte *) bytes);
@@ -609,7 +609,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform(JNI
     if (opusFile != NULL && error == OPUS_OK) {
         int64_t totalSamples = op_pcm_total(opusFile, -1);
         const uint32_t resultSamples = 100;
-        int32_t sampleRate = max(1, (int32_t) (totalSamples / resultSamples));
+        int32_t sampleRate = u_max(1, (int32_t) (totalSamples / resultSamples));
 
         uint16_t *samples = malloc(100 * 2);
 
@@ -667,7 +667,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform(JNI
             memset(bytes, 0, bitstreamLength + 4);
 
             for (int32_t i = 0; i < resultSamples; i++) {
-                int32_t value = min(31, abs((int32_t) samples[i]) * 31 / peak);
+                int32_t value = u_min(31, abs((int32_t) samples[i]) * 31 / peak);
                 set_bits(bytes, i * 5, value & 31);
             }
 
diff --git a/TMessagesProj/jni/fast-edge.cpp b/TMessagesProj/jni/fast-edge.cpp
index 56c17ea74..fec66e077 100644
--- a/TMessagesProj/jni/fast-edge.cpp
+++ b/TMessagesProj/jni/fast-edge.cpp
@@ -35,8 +35,8 @@
 #define PI 3.14159265
 #define HIGH_THRESHOLD_PERCENTAGE 0.10 // percentage of pixels that meet the high threshold - for example 0.15 will ensure that at least 15% of edge pixels are considered to meet the high threshold
 
-#define min(X,Y) ((X) < (Y) ? (X) : (Y))
-#define max(X,Y) ((X) < (Y) ? (Y) : (X))
+#define u_min(X,Y) ((X) < (Y) ? (X) : (Y))
+#define u_max(X,Y) ((X) < (Y) ? (Y) : (X))
 
 namespace ocr{
 /*
@@ -465,7 +465,7 @@ void dilate_1d_h(struct image * img, struct image * img_out) {
 	for (y = 2 * img->width; y < y_max; y += img->width) {
 		for (x = 2; x < img->width - 2; x++) {
 			offset = x + y;
-			img_out->pixel_data[offset] = max(max(max(max(img->pixel_data[offset-2], img->pixel_data[offset-1]), img->pixel_data[offset]), img->pixel_data[offset+1]), img->pixel_data[offset+2]);	
+			img_out->pixel_data[offset] = u_max(u_max(u_max(u_max(img->pixel_data[offset-2], img->pixel_data[offset-1]), img->pixel_data[offset]), img->pixel_data[offset+1]), img->pixel_data[offset+2]);
 		}
 	}
 }
@@ -476,7 +476,7 @@ void dilate_1d_v(struct image * img, struct image * img_out) {
 	for (y = 2 * img->width; y < y_max; y += img->width) {
 		for (x = 2; x < img->width - 2; x++) {
 			offset = x + y;
-			img_out->pixel_data[offset] = max(max(max(max(img->pixel_data[offset-2 * img->width], img->pixel_data[offset-img->width]), img->pixel_data[offset]), img->pixel_data[offset+img->width]), img->pixel_data[offset+2*img->width]);	
+			img_out->pixel_data[offset] = u_max(u_max(u_max(u_max(img->pixel_data[offset-2 * img->width], img->pixel_data[offset-img->width]), img->pixel_data[offset]), img->pixel_data[offset+img->width]), img->pixel_data[offset+2*img->width]);
 		}
 	}
 }
@@ -487,7 +487,7 @@ void erode_1d_h(struct image * img, struct image * img_out) {
 	for (y = 2 * img->width; y < y_max; y += img->width) {
 		for (x = 2; x < img->width - 2; x++) {
 			offset = x + y;
-			img_out->pixel_data[offset] = min(min(min(min(img->pixel_data[offset-2], img->pixel_data[offset-1]), img->pixel_data[offset]), img->pixel_data[offset+1]), img->pixel_data[offset+2]);	
+			img_out->pixel_data[offset] = u_min(u_min(u_min(u_min(img->pixel_data[offset-2], img->pixel_data[offset-1]), img->pixel_data[offset]), img->pixel_data[offset+1]), img->pixel_data[offset+2]);
 		}
 	}
 }
@@ -498,7 +498,7 @@ void erode_1d_v(struct image * img, struct image * img_out) {
 	for (y = 2 * img->width; y < y_max; y += img->width) {
 		for (x = 2; x < img->width - 2; x++) {
 			offset = x + y;
-			img_out->pixel_data[offset] = min(min(min(min(img->pixel_data[offset-2 * img->width], img->pixel_data[offset-img->width]), img->pixel_data[offset]), img->pixel_data[offset+img->width]), img->pixel_data[offset+2*img->width]);	
+			img_out->pixel_data[offset] = u_min(u_min(u_min(u_min(img->pixel_data[offset-2 * img->width], img->pixel_data[offset-img->width]), img->pixel_data[offset]), img->pixel_data[offset+img->width]), img->pixel_data[offset+2*img->width]);
 		}
 	}
 }
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index 2327ef9b5..4664e8315 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -476,7 +476,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_calcCDT(JNIEnv *env, jclass
 
     uint32_t totalSegments = PGPhotoEnhanceSegments * PGPhotoEnhanceSegments;
     uint32_t tileArea = (uint32_t) (floorf(imageWidth / PGPhotoEnhanceSegments) * floorf(imageHeight / PGPhotoEnhanceSegments));
-    uint32_t clipLimit = (uint32_t) max(1, _clipLimit * tileArea / (float) PGPhotoEnhanceHistogramBins);
+    uint32_t clipLimit = (uint32_t) u_max(1, _clipLimit * tileArea / (float) PGPhotoEnhanceHistogramBins);
     float scale = 255.0f / (float) tileArea;
 
     unsigned char *bytes = (*env)->GetDirectBufferAddress(env, hsvBuffer);
@@ -540,7 +540,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_calcCDT(JNIEnv *env, jclass
         uint32_t cdf = 0;
         for (uint32_t j = hMin; j < PGPhotoEnhanceHistogramBins; ++j) {
             cdf += cdfs[i][j];
-            cdfs[i][j] = (uint8_t) min(255, cdf * scale);
+            cdfs[i][j] = (uint8_t) u_min(255, cdf * scale);
         }
         
         cdfsMin[i] = cdfs[i][hMin];
diff --git a/TMessagesProj/jni/secureid_ocr.cpp b/TMessagesProj/jni/secureid_ocr.cpp
index a865ef052..c71d562e3 100644
--- a/TMessagesProj/jni/secureid_ocr.cpp
+++ b/TMessagesProj/jni/secureid_ocr.cpp
@@ -15,9 +15,9 @@
 #include "fast-edge.h"
 #include "genann.h"
 
-#ifndef max
-#define max(a, b) (a>b ? a : b)
-#define min(a, b) (a<b ? a : b)
+#ifndef u_max
+#define u_max(a, b) (a>b ? a : b)
+#define u_min(a, b) (a<b ? a : b)
 #endif
 
 
@@ -48,7 +48,7 @@ namespace ocr{
 		int width=img->width;
 		int height=img->height;
 		// Calculate the maximum height the hough array needs to have
-		int houghHeight = (int) (sqrt(2.0) * max(height, width)) / 2;
+		int houghHeight = (int) (sqrt(2.0) * u_max(height, width)) / 2;
 
 		// Double the height of the hough array to cope with negative r values
 		int doubleHeight = 2 * houghHeight;
@@ -445,11 +445,11 @@ extern "C" JNIEXPORT jobjectArray Java_org_telegram_messenger_MrzRecognizer_bina
 			if(outPixels[y*outInfo.stride+x]==0){
 				consecutiveEmptyPixels++;
 			}else{
-				maxEmptyPixels=max(maxEmptyPixels, consecutiveEmptyPixels);
+				maxEmptyPixels=u_max(maxEmptyPixels, consecutiveEmptyPixels);
 				consecutiveEmptyPixels=0;
 			}
 		}
-		maxEmptyPixels=max(maxEmptyPixels, consecutiveEmptyPixels);
+		maxEmptyPixels=u_max(maxEmptyPixels, consecutiveEmptyPixels);
 		if(maxEmptyPixels>width/10*8){
 			consecutiveEmptyRows++;
 		}else if(consecutiveEmptyRows>0){
@@ -479,7 +479,7 @@ extern "C" JNIEXPORT jobjectArray Java_org_telegram_messenger_MrzRecognizer_bina
 					if(outPixels[y*outInfo.stride+x]==0){
 						consecutiveEmptyPixels++;
 					}else{
-						maxEmptyPixels=max(maxEmptyPixels, consecutiveEmptyPixels);
+						maxEmptyPixels=u_max(maxEmptyPixels, consecutiveEmptyPixels);
 						consecutiveEmptyPixels=0;
 						if(y>p->first-3)
 							bottomFilledPixels++;
diff --git a/TMessagesProj/jni/utils.h b/TMessagesProj/jni/utils.h
index 34805a1d7..c03bbb0b7 100644
--- a/TMessagesProj/jni/utils.h
+++ b/TMessagesProj/jni/utils.h
@@ -17,11 +17,11 @@
 #define LOGV(...)
 #endif
 
-#ifndef max
-#define max(x, y) ((x) > (y)) ? (x) : (y)
+#ifndef u_mmax
+#define u_max(x, y) ((x) > (y)) ? (x) : (y)
 #endif
-#ifndef min
-#define min(x, y) ((x) < (y)) ? (x) : (y)
+#ifndef u_min
+#define u_min(x, y) ((x) < (y)) ? (x) : (y)
 #endif
 
 void throwException(JNIEnv *env, char *format, ...);
