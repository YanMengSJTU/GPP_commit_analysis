diff --git a/README.md b/README.md
index f5c49b6d3..3b7dd499f 100644
--- a/README.md
+++ b/README.md
@@ -30,21 +30,30 @@ The original application README content:
 ## Telegram messenger for Android
 
 [Telegram](http://telegram.org) is a messaging app with a focus on speed and security. It’s superfast, simple and free.
+This repo contains the official source code for [Telegram App for Android](https://play.google.com/store/apps/details?id=org.telegram.messenger).
 
-This repo contains official [Telegram App for Android](https://play.google.com/store/apps/details?id=org.telegram.messenger) source code.
+##Creating your Telegram Application
+
+We welcome all developers to use our API and source code to create applications on our platform.
+There are several things we require from **all developers** for the moment.
+
+1. [**Obtain your own api_id**](https://core.telegram.org/api/obtaining_api_id) for your application.
+2. Please **do not** use the name Telegram for your app — or make sure your users understand that it is unofficial.
+3. Kindly **do not** use our standard logo (white paper plane in a blue circle) as your app's logo.
+3. Please study our [**security guidelines**](https://core.telegram.org/mtproto/security_guidelines) and take good care of your users' data and privacy.
+4. Please remember to publish **your** code too in order to comply with the licences.
 
 ### API, Protocol documentation
 
-Documentation for Telegram API is available here: http://core.telegram.org/api
+Telegram API manuals: http://core.telegram.org/api
 
-Documentation for MTproto protocol is available here: http://core.telegram.org/mtproto
+MTproto protocol manuals: http://core.telegram.org/mtproto
 
 ### Usage
 
-**Beware of using dev branch and uploading it to any markets, in most cases it will work as you expecting**
-
-First of all your should take a look to **src/main/java/org/telegram/messenger/BuildVars.java** and fill it with correct values.
+**Beware of using the dev branch and uploading it to any markets, in many cases it not will work as expected**.
 
+First of all, take a look at **src/main/java/org/telegram/messenger/BuildVars.java** and fill it with correct values.
 Import the root folder into your IDE (tested on Android Studio), then run project.
 
 ### Localization
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 235ad19bf..13c41af8e 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -24,8 +24,8 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion '20.0.0'
+    compileSdkVersion 21
+    buildToolsVersion '21.0.2'
 
     signingConfigs {
         debug {
@@ -80,7 +80,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 358
-        versionName "1.9.5"
+        versionCode 374
+        versionName "1.9.6"
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 21c5bc62f..3b346fd00 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -23,6 +23,8 @@
 import android.view.View;
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.TextView;
 
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -32,6 +34,7 @@
 import org.telegram.ui.Views.NumberPicker;
 
 import java.io.File;
+import java.lang.reflect.Field;
 import java.util.Hashtable;
 import java.util.Locale;
 
@@ -215,7 +218,7 @@ public static void hideKeyboard(View view) {
     }
 
     public static File getCacheDir() {
-        if (Environment.getExternalStorageState().startsWith(Environment.MEDIA_MOUNTED)) {
+        if (Environment.getExternalStorageState() == null || Environment.getExternalStorageState().startsWith(Environment.MEDIA_MOUNTED)) {
             try {
                 File file = ApplicationLoader.applicationContext.getExternalCacheDir();
                 if (file != null) {
@@ -416,13 +419,13 @@ public static String formatTTLString(int ttl) {
         }
     }
 
-    public static AlertDialog.Builder buildTTLAlert(Context context, final TLRPC.EncryptedChat encryptedChat) {
+    public static AlertDialog.Builder buildTTLAlert(final Context context, final TLRPC.EncryptedChat encryptedChat) {
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
         builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
         final NumberPicker numberPicker = new NumberPicker(context);
         numberPicker.setMinValue(0);
         numberPicker.setMaxValue(20);
-        if (encryptedChat.ttl >= 0 && encryptedChat.ttl < 16) {
+        if (encryptedChat.ttl > 0 && encryptedChat.ttl < 16) {
             numberPicker.setValue(encryptedChat.ttl);
         } else if (encryptedChat.ttl == 30) {
             numberPicker.setValue(16);
@@ -434,6 +437,8 @@ public static String formatTTLString(int ttl) {
             numberPicker.setValue(19);
         } else if (encryptedChat.ttl == 60 * 60 * 24 * 7) {
             numberPicker.setValue(20);
+        } else if (encryptedChat.ttl == 0) {
+            numberPicker.setValue(5);
         }
         numberPicker.setFormatter(new NumberPicker.Formatter() {
             @Override
@@ -476,11 +481,24 @@ public void onClick(DialogInterface dialog, int which) {
                     encryptedChat.ttl = 60 * 60 * 24 * 7;
                 }
                 if (oldValue != encryptedChat.ttl) {
-                    SendMessagesHelper.getInstance().sendTTLMessage(encryptedChat);
+                    SendMessagesHelper.getInstance().sendTTLMessage(encryptedChat, null);
                     MessagesStorage.getInstance().updateEncryptedChatTTL(encryptedChat);
                 }
             }
         });
         return builder;
     }
+
+    public static void clearCursorDrawable(EditText editText) {
+        if (editText == null || Build.VERSION.SDK_INT < 12) {
+            return;
+        }
+        try {
+            Field mCursorDrawableRes = TextView.class.getDeclaredField("mCursorDrawableRes");
+            mCursorDrawableRes.setAccessible(true);
+            mCursorDrawableRes.setInt(editText, 0);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index aaa5d0e7b..415bbc5e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -9,8 +9,13 @@
 package org.telegram.android;
 
 import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
 import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.view.View;
@@ -36,6 +41,12 @@
     private boolean isAspectFit = false;
     private boolean lastCacheOnly = false;
     private boolean forcePreview = false;
+    private int roundRadius = 0;
+    private BitmapShader bitmapShader = null;
+    private Paint roundPaint = null;
+    private RectF roundRect = null;
+    private RectF bitmapRect = null;
+    private Matrix shaderMatrix = null;
 
     public ImageReceiver() {
 
@@ -66,6 +77,7 @@ public void setImage(TLRPC.FileLocation fileLocation, String httpUrl, String fil
             last_httpUrl = null;
             last_filter = null;
             lastCacheOnly = false;
+            bitmapShader = null;
             last_placeholder = placeholder;
             last_size = 0;
             currentImage = null;
@@ -105,9 +117,13 @@ public void setImage(TLRPC.FileLocation fileLocation, String httpUrl, String fil
         last_placeholder = placeholder;
         last_size = size;
         lastCacheOnly = cacheOnly;
+        bitmapShader = null;
         if (img == null) {
             isPlaceholder = true;
             ImageLoader.getInstance().loadImage(fileLocation, httpUrl, this, size, cacheOnly);
+            if (parentView != null) {
+                parentView.invalidate();
+            }
         } else {
             setImageBitmap(img, currentPath);
         }
@@ -120,6 +136,11 @@ public void setImageBitmap(BitmapDrawable bitmap, String imgKey) {
         isPlaceholder = false;
         ImageLoader.getInstance().incrementUseCount(currentPath);
         currentImage = bitmap;
+        if (roundRadius != 0) {
+            bitmapShader = new BitmapShader(bitmap.getBitmap(), Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+            roundPaint.setShader(bitmapShader);
+            bitmapRect.set(0, 0, bitmap.getIntrinsicWidth(), bitmap.getIntrinsicHeight());
+        }
         if (parentView != null) {
             parentView.invalidate();
         }
@@ -139,6 +160,7 @@ public void setImageBitmap(Bitmap bitmap) {
         last_httpUrl = null;
         last_filter = null;
         currentImage = null;
+        bitmapShader = null;
         last_size = 0;
         lastCacheOnly = false;
         if (parentView != null) {
@@ -156,6 +178,7 @@ public void setImageBitmap(Drawable bitmap) {
         last_path = null;
         last_httpUrl = null;
         last_filter = null;
+        bitmapShader = null;
         last_size = 0;
         lastCacheOnly = false;
         if (parentView != null) {
@@ -193,83 +216,92 @@ private void recycleBitmap(BitmapDrawable newBitmap) {
         }
     }
 
-    public boolean draw(Canvas canvas, int x, int y, int w, int h) {
+    public boolean draw(Canvas canvas) {
         try {
             Drawable bitmapDrawable = currentImage;
             if (forcePreview || bitmapDrawable == null && last_placeholder != null && last_placeholder instanceof BitmapDrawable) {
                 bitmapDrawable = last_placeholder;
             }
             if (bitmapDrawable != null) {
-                int bitmapW = bitmapDrawable.getIntrinsicWidth();
-                int bitmapH = bitmapDrawable.getIntrinsicHeight();
-                float scaleW = bitmapW / (float)w;
-                float scaleH = bitmapH / (float)h;
-
-                if (isAspectFit) {
-                    float scale = Math.max(scaleW, scaleH);
-                    canvas.save();
-                    bitmapW /= scale;
-                    bitmapH /= scale;
-                    drawRegion.set(x + (w - bitmapW) / 2, y + (h - bitmapH) / 2, x + (w + bitmapW) / 2, y + (h + bitmapH) / 2);
-                    bitmapDrawable.setBounds(drawRegion);
-                    try {
-                        bitmapDrawable.draw(canvas);
-                    } catch (Exception e) {
-                        if (currentPath != null) {
-                            ImageLoader.getInstance().removeImage(currentPath);
-                            currentPath = null;
-                        }
-                        setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
-                        FileLog.e("tmessages", e);
-                    }
-                    canvas.restore();
+                if (bitmapShader != null) {
+                    drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                    roundRect.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                    shaderMatrix.reset();
+                    shaderMatrix.setScale(1.5f, 1.5f);
+                    bitmapShader.setLocalMatrix(shaderMatrix);
+                    canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
                 } else {
-                    if (Math.abs(scaleW - scaleH) > 0.00001f) {
-                        canvas.save();
-                        canvas.clipRect(x, y, x + w, y + h);
+                    int bitmapW = bitmapDrawable.getIntrinsicWidth();
+                    int bitmapH = bitmapDrawable.getIntrinsicHeight();
+                    float scaleW = bitmapW / (float) imageW;
+                    float scaleH = bitmapH / (float) imageH;
 
-                        if (bitmapW / scaleH > w) {
-                            bitmapW /= scaleH;
-                            drawRegion.set(x - (bitmapW - w) / 2, y, x + (bitmapW + w) / 2, y + h);
-                        } else {
-                            bitmapH /= scaleW;
-                            drawRegion.set(x, y - (bitmapH - h) / 2, x + w, y + (bitmapH + h) / 2);
-                        }
+                    if (isAspectFit) {
+                        float scale = Math.max(scaleW, scaleH);
+                        canvas.save();
+                        bitmapW /= scale;
+                        bitmapH /= scale;
+                        drawRegion.set(imageX + (imageW - bitmapW) / 2, imageY + (imageH - bitmapH) / 2, imageX + (imageW + bitmapW) / 2, imageY + (imageH + bitmapH) / 2);
                         bitmapDrawable.setBounds(drawRegion);
-                        if (isVisible) {
-                            try {
-                                bitmapDrawable.draw(canvas);
-                            } catch (Exception e) {
-                                if (currentPath != null) {
-                                    ImageLoader.getInstance().removeImage(currentPath);
-                                    currentPath = null;
-                                }
-                                setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
-                                FileLog.e("tmessages", e);
+                        try {
+                            bitmapDrawable.draw(canvas);
+                        } catch (Exception e) {
+                            if (currentPath != null) {
+                                ImageLoader.getInstance().removeImage(currentPath);
+                                currentPath = null;
                             }
+                            setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                            FileLog.e("tmessages", e);
                         }
-
                         canvas.restore();
                     } else {
-                        drawRegion.set(x, y, x + w, y + h);
-                        bitmapDrawable.setBounds(drawRegion);
-                        if (isVisible) {
-                            try {
-                                bitmapDrawable.draw(canvas);
-                            } catch (Exception e) {
-                                if (currentPath != null) {
-                                    ImageLoader.getInstance().removeImage(currentPath);
-                                    currentPath = null;
+                        if (Math.abs(scaleW - scaleH) > 0.00001f) {
+                            canvas.save();
+                            canvas.clipRect(imageX, imageY, imageX + imageW, imageY + imageH);
+
+                            if (bitmapW / scaleH > imageW) {
+                                bitmapW /= scaleH;
+                                drawRegion.set(imageX - (bitmapW - imageW) / 2, imageY, imageX + (bitmapW + imageW) / 2, imageY + imageH);
+                            } else {
+                                bitmapH /= scaleW;
+                                drawRegion.set(imageX, imageY - (bitmapH - imageH) / 2, imageX + imageW, imageY + (bitmapH + imageH) / 2);
+                            }
+                            bitmapDrawable.setBounds(drawRegion);
+                            if (isVisible) {
+                                try {
+                                    bitmapDrawable.draw(canvas);
+                                } catch (Exception e) {
+                                    if (currentPath != null) {
+                                        ImageLoader.getInstance().removeImage(currentPath);
+                                        currentPath = null;
+                                    }
+                                    setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+
+                            canvas.restore();
+                        } else {
+                            drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                            bitmapDrawable.setBounds(drawRegion);
+                            if (isVisible) {
+                                try {
+                                    bitmapDrawable.draw(canvas);
+                                } catch (Exception e) {
+                                    if (currentPath != null) {
+                                        ImageLoader.getInstance().removeImage(currentPath);
+                                        currentPath = null;
+                                    }
+                                    setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                                    FileLog.e("tmessages", e);
                                 }
-                                setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
-                                FileLog.e("tmessages", e);
                             }
                         }
                     }
                 }
                 return true;
             } else if (last_placeholder != null) {
-                drawRegion.set(x, y, x + w, y + h);
+                drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
                 last_placeholder.setBounds(drawRegion);
                 if (isVisible) {
                     try {
@@ -376,4 +408,19 @@ public String getKey() {
     public void setForcePreview(boolean value) {
         forcePreview = value;
     }
+
+    public void setRoundRadius(int value) {
+        roundRadius = value;
+        if (roundRadius != 0) {
+            roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            roundRect = new RectF();
+            shaderMatrix = new Matrix();
+            bitmapRect = new RectF();
+        } else {
+            roundPaint = null;
+            roundRect = null;
+            shaderMatrix = null;
+            bitmapRect = null;
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 48e974fe5..ad08add77 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -18,6 +18,8 @@
 import android.content.SharedPreferences;
 import android.database.ContentObserver;
 import android.database.Cursor;
+import android.graphics.BitmapFactory;
+import android.graphics.Point;
 import android.media.AudioFormat;
 import android.media.AudioManager;
 import android.media.AudioRecord;
@@ -36,7 +38,9 @@
 import android.os.ParcelFileDescriptor;
 import android.os.Vibrator;
 import android.provider.MediaStore;
+import android.view.Display;
 import android.view.View;
+import android.view.WindowManager;
 
 import org.telegram.android.video.InputSurface;
 import org.telegram.android.video.MP4Builder;
@@ -58,6 +62,7 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
@@ -340,13 +345,7 @@ public void run() {
             }
         }
     }
-    private String[] mediaProjections = new String[] {
-            MediaStore.Images.ImageColumns.DATA,
-            MediaStore.Images.ImageColumns.DISPLAY_NAME,
-            MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
-            MediaStore.Images.ImageColumns.DATE_TAKEN,
-            MediaStore.Images.ImageColumns.TITLE
-    };
+    private String[] mediaProjections = null;
 
     private static volatile MediaController Instance = null;
     public static MediaController getInstance() {
@@ -400,6 +399,8 @@ public MediaController() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileUploadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
 
         BroadcastReceiver networkStateReceiver = new BroadcastReceiver() {
             @Override
@@ -413,6 +414,26 @@ public void onReceive(Context context, Intent intent) {
         if (UserConfig.isClientActivated()) {
             checkAutodownloadSettings();
         }
+
+        if (Build.VERSION.SDK_INT >= 16) {
+            mediaProjections = new String[] {
+                    MediaStore.Images.ImageColumns.DATA,
+                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.DATE_TAKEN,
+                    MediaStore.Images.ImageColumns.TITLE,
+                    MediaStore.Images.ImageColumns.WIDTH,
+                    MediaStore.Images.ImageColumns.HEIGHT
+            };
+        } else {
+            mediaProjections = new String[] {
+                    MediaStore.Images.ImageColumns.DATA,
+                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.DATE_TAKEN,
+                    MediaStore.Images.ImageColumns.TITLE
+            };
+        }
     }
 
     private void startProgressTimer() {
@@ -684,7 +705,7 @@ private void checkDownloadFinished(String fileName, int state) {
     }
 
     public void startMediaObserver() {
-        if (android.os.Build.VERSION.SDK_INT > 0) { //disable while it's not perferct
+        if (android.os.Build.VERSION.SDK_INT < 14) {
             return;
         }
         ApplicationLoader.applicationHandler.removeCallbacks(stopMediaObserverRunnable);
@@ -706,7 +727,7 @@ public void startMediaObserver() {
     }
 
     public void stopMediaObserver() {
-        if (android.os.Build.VERSION.SDK_INT > 0) { //disable while it's not perferct
+        if (android.os.Build.VERSION.SDK_INT < 14) {
             return;
         }
         if (stopMediaObserverRunnable == null) {
@@ -718,6 +739,30 @@ public void stopMediaObserver() {
 
     public void processMediaObserver(Uri uri) {
         try {
+            int width = 0;
+            int height = 0;
+
+            try {
+                WindowManager windowManager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                    Point size = new Point();
+                    windowManager.getDefaultDisplay().getRealSize(size);
+                    width = size.x;
+                    height = size.y;
+                } else {
+                    try {
+                        Method mGetRawW = Display.class.getMethod("getRawWidth");
+                        Method mGetRawH = Display.class.getMethod("getRawHeight");
+                        width = (Integer) mGetRawW.invoke(windowManager.getDefaultDisplay());
+                        height = (Integer) mGetRawH.invoke(windowManager.getDefaultDisplay());
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
             Cursor cursor = ApplicationLoader.applicationContext.getContentResolver().query(uri, mediaProjections, null, null, "date_added DESC LIMIT 1");
             final ArrayList<Long> screenshotDates = new ArrayList<Long>();
             if (cursor != null) {
@@ -726,75 +771,33 @@ public void processMediaObserver(Uri uri) {
                     String data = cursor.getString(0);
                     String display_name = cursor.getString(1);
                     String album_name = cursor.getString(2);
-                    String title = cursor.getString(4);
                     long date = cursor.getLong(3);
+                    String title = cursor.getString(4);
+                    int photoW = 0;
+                    int photoH = 0;
+                    if (Build.VERSION.SDK_INT >= 16) {
+                        photoW = cursor.getInt(5);
+                        photoH = cursor.getInt(6);
+                    }
                     if (data != null && data.toLowerCase().contains("screenshot") ||
                             display_name != null && display_name.toLowerCase().contains("screenshot") ||
                             album_name != null && album_name.toLowerCase().contains("screenshot") ||
                             title != null && title.toLowerCase().contains("screenshot")) {
-                        /*BitmapRegionDecoder bitmapRegionDecoder = null;
-                        boolean added = false;
                         try {
-                            int waitCount = 0;
-                            while (waitCount < 5 && bitmapRegionDecoder == null) {
-                                try {
-                                    bitmapRegionDecoder = BitmapRegionDecoder.newInstance(data, true);
-                                    if (bitmapRegionDecoder != null) {
-                                        break;
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                                Thread.sleep(1000);
+                            if (photoW == 0 || photoH == 0) {
+                                BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+                                bmOptions.inJustDecodeBounds = true;
+                                BitmapFactory.decodeFile(data, bmOptions);
+                                photoW = bmOptions.outWidth;
+                                photoH = bmOptions.outHeight;
                             }
-                            if (bitmapRegionDecoder != null) {
-                                Bitmap bitmap = bitmapRegionDecoder.decodeRegion(new Rect(0, 0, AndroidUtilities.dp(44), AndroidUtilities.dp(44)), null);
-                                int w = bitmap.getWidth();
-                                int h = bitmap.getHeight();
-                                for (int y = 0; y < h; y++) {
-                                    int rowCount = 0;
-                                    for (int x = 0; x < w; x++) {
-                                        int px = bitmap.getPixel(x, y);
-                                        if (px == 0xffffffff) {
-                                            rowCount++;
-                                        } else {
-                                            rowCount = 0;
-                                        }
-                                        if (rowCount > 8) {
-                                            break;
-                                        }
-                                    }
-                                    if (rowCount > 8) {
-                                        screenshotDates.add(date);
-                                        added = true;
-                                        break;
-                                    }
-                                }
-                                bitmapRegionDecoder.recycle();
-                                try {
-                                    if (bitmap != null) {
-                                        bitmap.recycle();
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                            try {
-                                if (bitmapRegionDecoder != null) {
-                                    bitmapRegionDecoder.recycle();
-                                }
-                            } catch (Exception e2) {
-                                FileLog.e("tmessages", e2);
-                            }
-                            if (!added) {
+                            if (photoW <= 0 || photoH <= 0 || (photoW == width && photoH == height || photoH == width && photoW == height)) {
                                 screenshotDates.add(date);
                             }
-                        }*/
-                        screenshotDates.add(date);
+                        } catch (Exception e) {
+                            screenshotDates.add(date);
+                        }
                     }
-                    FileLog.e("tmessages", "screenshot!");
                 }
                 cursor.close();
             }
@@ -831,7 +834,7 @@ private void checkScreenshots(ArrayList<Long> dates) {
             }
         }
         if (send) {
-            SendMessagesHelper.getInstance().sendScreenshotMessage(lastSecretChat, lastSecretChatVisibleMessages);
+            SendMessagesHelper.getInstance().sendScreenshotMessage(lastSecretChat, lastSecretChatVisibleMessages, null);
         }
     }
 
@@ -898,6 +901,7 @@ private void processLaterArrays() {
         deleteLaterArray.clear();
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
@@ -961,6 +965,18 @@ public void didReceivedNotification(int id, Object... args) {
             }
             listenerInProgress = false;
             processLaterArrays();
+        } else if (id == NotificationCenter.messagesDeleted) {
+            if (playingMessageObject != null) {
+                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
+                if (markAsDeletedMessages.contains(playingMessageObject.messageOwner.id)) {
+                    clenupPlayer(false);
+                }
+            }
+        } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
+            long did = (Long)args[0];
+            if (playingMessageObject != null && playingMessageObject.getDialogId() == did) {
+                clenupPlayer(false);
+            }
         }
     }
 
@@ -1180,6 +1196,7 @@ public boolean playAudio(MessageObject messageObject) {
             }
             return true;
         }
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
         clenupPlayer(true);
         final File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
 
@@ -1205,7 +1222,6 @@ public void run() {
 
                     audioTrackPlayer = new AudioTrack(AudioManager.STREAM_MUSIC, 48000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, playerBufferSize, AudioTrack.MODE_STREAM);
                     audioTrackPlayer.setStereoVolume(1.0f, 1.0f);
-                    //audioTrackPlayer.setNotificationMarkerPosition((int)currentTotalPcmDuration);
                     audioTrackPlayer.setPlaybackPositionUpdateListener(new AudioTrack.OnPlaybackPositionUpdateListener() {
                         @Override
                         public void onMarkerReached(AudioTrack audioTrack) {
@@ -2081,12 +2097,7 @@ private long readAndWriteTrack(final MessageObject messageObject, MediaExtractor
                         if (end < 0 || info.presentationTimeUs < end) {
                             info.offset = 0;
                             info.flags = extractor.getSampleFlags();
-                            if (!isAudio) {
-                                buffer.limit(info.offset + info.size);
-                                buffer.position(info.offset);
-                                buffer.putInt(info.size - 4);
-                            }
-                            if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info)) {
+                            if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info, isAudio)) {
                                 didWriteData(messageObject, file, false, false);
                             }
                             extractor.advance();
@@ -2168,10 +2179,28 @@ private boolean convertVideo(final MessageObject messageObject) {
             resultWidth = temp;
             rotationValue = 90;
             rotateRender = 270;
+        } else if (Build.VERSION.SDK_INT > 20) {
+            if (rotationValue == 90) {
+                int temp = resultHeight;
+                resultHeight = resultWidth;
+                resultWidth = temp;
+                rotationValue = 0;
+                rotateRender = 270;
+            } else if (rotationValue == 180) {
+                rotateRender = 180;
+                rotationValue = 0;
+            } else if (rotationValue == 270) {
+                int temp = resultHeight;
+                resultHeight = resultWidth;
+                resultWidth = temp;
+                rotationValue = 0;
+                rotateRender = 90;
+            }
         }
 
         File inputFile = new File(videoPath);
         if (!inputFile.canRead()) {
+            didWriteData(messageObject, cacheFile, true, true);
             return false;
         }
 
@@ -2374,10 +2403,7 @@ private boolean convertVideo(final MessageObject messageObject) {
                                         }
                                         if (info.size > 1) {
                                             if ((info.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) == 0) {
-                                                encodedData.limit(info.offset + info.size);
-                                                encodedData.position(info.offset);
-                                                encodedData.putInt(Integer.reverseBytes(info.size - 4));
-                                                if (mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info)) {
+                                                if (mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info, false)) {
                                                     didWriteData(messageObject, cacheFile, false, false);
                                                 }
                                             } else if (videoTrackIndex == -5) {
@@ -2552,6 +2578,7 @@ private boolean convertVideo(final MessageObject messageObject) {
                 FileLog.e("tmessages", "time = " + (System.currentTimeMillis() - time));
             }
         } else {
+            didWriteData(messageObject, cacheFile, true, true);
             return false;
         }
         didWriteData(messageObject, cacheFile, true, error);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 39fb504f8..4ccc08d0a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -235,7 +235,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     } else {
                         messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
                     }
-                } else if (message.action instanceof TLRPC.TL_messageEcryptedAction) {
+                } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
                     if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
                         if (isFromMe()) {
                             messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
@@ -246,6 +246,29 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                                 messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", "");
                             }
                         }
+                    } else if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) message.action.encryptedAction;
+                        if (action.ttl_seconds != 0) {
+                            if (isFromMe()) {
+                                messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(action.ttl_seconds));
+                            } else {
+                                if (fromUser != null) {
+                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(action.ttl_seconds));
+                                } else {
+                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(action.ttl_seconds));
+                                }
+                            }
+                        } else {
+                            if (isFromMe()) {
+                                messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
+                            } else {
+                                if (fromUser != null) {
+                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
+                                } else {
+                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
+                                }
+                            }
+                        }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
                     messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
@@ -321,6 +344,14 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto || message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                 contentType = 4;
                 type = 11;
+            } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
+                if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                    contentType = 4;
+                    type = 10;
+                } else {
+                    contentType = -1;
+                    type = -1;
+                }
             } else {
                 contentType = 4;
                 type = 10;
@@ -627,10 +658,17 @@ public void setIsRead() {
         messageOwner.flags &=~ TLRPC.MESSAGE_FLAG_UNREAD;
     }
 
-    public boolean isSecretMedia() {
+    public boolean isSecretPhoto() {
         return messageOwner instanceof TLRPC.TL_message_secret && messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60;
     }
 
+    public boolean isSecretMedia() {
+        return messageOwner instanceof TLRPC.TL_message_secret &&
+                (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60 ||
+                messageOwner.media instanceof TLRPC.TL_messageMediaAudio ||
+                messageOwner.media instanceof TLRPC.TL_messageMediaVideo);
+    }
+
     public static void setIsUnread(TLRPC.Message message, boolean unread) {
         if (unread) {
             message.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index b4e1a6f42..80838222c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -67,6 +67,8 @@
     private long updatesStartWaitTime = 0;
     public ArrayList<TLRPC.Update> delayedEncryptedChatUpdates = new ArrayList<TLRPC.Update>();
     private boolean startingSecretChat = false;
+    private ArrayList<Integer> loadingFullUsers = new ArrayList<Integer>();
+    private ArrayList<Integer> loadedFullUsers = new ArrayList<Integer>();
 
     private boolean gettingNewDeleteTask = false;
     private int currentDeletingTaskTime = 0;
@@ -318,6 +320,8 @@ public void cleanUp() {
         delayedEncryptedChatUpdates.clear();
         blockedUsers.clear();
         sendingTypings.clear();
+        loadingFullUsers.clear();
+        loadedFullUsers.clear();
 
         updatesStartWaitTime = 0;
         currentDeletingTaskTime = 0;
@@ -389,6 +393,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
             users.put(user.id, user);
             if (user.id == UserConfig.getClientUserId()) {
                 UserConfig.setCurrentUser(user);
+                UserConfig.saveConfig(true);
             }
             if (oldUser != null && user.status != null && oldUser.status != null && user.status.expires != oldUser.status.expires) {
                 return true;
@@ -459,10 +464,15 @@ public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats, boo
         }
     }
 
+    public void cancelLoadFullUser(int uid) {
+        loadingFullUsers.remove((Integer) uid);
+    }
+
     public void loadFullUser(final TLRPC.User user, final int classGuid) {
-        if (user == null) {
+        if (user == null || loadingFullUsers.contains(user.id) || loadedFullUsers.contains(user.id)) {
             return;
         }
+        loadingFullUsers.add(user.id);
         TLRPC.TL_users_getFullUser req = new TLRPC.TL_users_getFullUser();
         req.id = getInputUser(user);
         long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -472,10 +482,24 @@ public void run(final TLObject response, TLRPC.TL_error error) {
                     AndroidUtilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            loadingFullUsers.remove((Integer)user.id);
+                            loadedFullUsers.add(user.id);
+                            String names = user.first_name + user.last_name + user.username;
                             TLRPC.TL_userFull userFull = (TLRPC.TL_userFull)response;
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
                             users.add(userFull.user);
                             putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                            if (!names.equals(userFull.user.first_name + userFull.user.last_name + userFull.user.username)) {
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_NAME);
+                            }
+                        }
+                    });
+                } else {
+                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            loadingFullUsers.remove((Integer)user.id);
                         }
                     });
                 }
@@ -956,7 +980,7 @@ public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms,
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, messages);
 
         if (randoms != null && encryptedChat != null && !randoms.isEmpty()) {
-            SendMessagesHelper.getInstance().sendMessagesDeleteMessage(randoms, encryptedChat);
+            SendMessagesHelper.getInstance().sendMessagesDeleteMessage(encryptedChat, randoms, null);
         }
 
         ArrayList<Integer> toSend = new ArrayList<Integer>();
@@ -1047,7 +1071,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 });
             } else {
                 if (onlyHistory) {
-                    SendMessagesHelper.getInstance().sendClearHistoryMessage(getEncryptedChat(high_id));
+                    SendMessagesHelper.getInstance().sendClearHistoryMessage(getEncryptedChat(high_id), null);
                 } else {
                     declineSecretChat(high_id);
                 }
@@ -1619,6 +1643,9 @@ public void run() {
                         putChats(dialogsRes.chats, isCache);
                         if (encChats != null) {
                             for (TLRPC.EncryptedChat encryptedChat : encChats) {
+                                if (encryptedChat instanceof TLRPC.TL_encryptedChat && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) < SendMessagesHelper.CURRENT_SECRET_CHAT_LAYER) {
+                                    SendMessagesHelper.getInstance().sendNotifyLayerMessage(encryptedChat, null);
+                                }
                                 putEncryptedChat(encryptedChat, true);
                             }
                         }
@@ -1683,8 +1710,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         });
     }
 
-    public void markMessageAsRead(final long dialog_id, final long random_id) {
-        if (random_id == 0 || dialog_id == 0) {
+    public void markMessageAsRead(final long dialog_id, final long random_id, int ttl) {
+        if (random_id == 0 || dialog_id == 0 || ttl <= 0) {
             return;
         }
         int lower_part = (int)dialog_id;
@@ -1698,12 +1725,9 @@ public void markMessageAsRead(final long dialog_id, final long random_id) {
         }
         ArrayList<Long> random_ids = new ArrayList<Long>();
         random_ids.add(random_id);
-        SendMessagesHelper.getInstance().sendMessagesReadMessage(random_ids, chat);
-        if (chat.ttl > 0) {
-            int time = ConnectionsManager.getInstance().getCurrentTime();
-            MessagesStorage.getInstance().createTaskForSecretChat(chat.id, time, time, 0, random_ids);
-        }
-        //TODO resend request
+        SendMessagesHelper.getInstance().sendMessagesReadMessage(chat, random_ids, null);
+        int time = ConnectionsManager.getInstance().getCurrentTime();
+        MessagesStorage.getInstance().createTaskForSecretChat(chat.id, time, time, 0, random_ids);
     }
 
     public void markDialogAsRead(final long dialog_id, final int max_id, final int max_positive_id, final int offset, final int max_date, final boolean was, final boolean popup) {
@@ -3153,6 +3177,8 @@ public void run() {
                                 newChat.user_id = exist.user_id;
                                 newChat.auth_key = exist.auth_key;
                                 newChat.ttl = exist.ttl;
+                                newChat.seq_in = exist.seq_in;
+                                newChat.seq_out = exist.seq_out;
                                 putEncryptedChat(newChat, false);
                             }
                             MessagesStorage.getInstance().updateEncryptedChat(newChat);
@@ -3189,6 +3215,8 @@ public void run() {
                 });
             } else if (update instanceof TLRPC.TL_updateNotifySettings) {
                 updatesOnMainThread.add(update);
+            } else if (update instanceof TLRPC.TL_updateServiceNotification) {
+                //TODO
             }
         }
         if (!messages.isEmpty()) {
@@ -3257,9 +3285,11 @@ public void run() {
                             if (currentUser != null) {
                                 currentUser.first_name = update.first_name;
                                 currentUser.last_name = update.last_name;
+                                currentUser.username = update.username;
                             }
                             toDbUser.first_name = update.first_name;
                             toDbUser.last_name = update.last_name;
+                            toDbUser.username = update.username;
                             dbUsers.add(toDbUser);
                         } else if (update instanceof TLRPC.TL_updateUserPhoto) {
                             if (currentUser != null) {
@@ -3528,7 +3558,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
 
     public TLRPC.Message decryptMessage(TLRPC.EncryptedMessage message) {
         final TLRPC.EncryptedChat chat = getEncryptedChatDB(message.chat_id);
-        if (chat == null) {
+        if (chat == null || chat instanceof TLRPC.TL_encryptedChatDiscarded) {
             return null;
         }
         ByteBufferDesc is = BuffersStorage.getInstance().getFreeBuffer(message.bytes.length);
@@ -3552,13 +3582,38 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
 
                 if (object instanceof TLRPC.TL_decryptedMessageLayer) {
                     final TLRPC.TL_decryptedMessageLayer layer = (TLRPC.TL_decryptedMessageLayer)object;
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            chat.seq_in = layer.out_seq_no;
-                            MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
+                    if (chat.seq_in == 0 && chat.seq_out == 0) {
+                        if (chat.admin_id == UserConfig.getClientUserId()) {
+                            chat.seq_out = 1;
+                        } else {
+                            chat.seq_in = 1;
                         }
-                    });
+                    }
+                    if (chat.seq_in != layer.out_seq_no && chat.seq_in != layer.out_seq_no - 2) {
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                final TLRPC.TL_encryptedChatDiscarded newChat = new TLRPC.TL_encryptedChatDiscarded();
+                                newChat.id = chat.id;
+                                newChat.user_id = chat.user_id;
+                                newChat.auth_key = chat.auth_key;
+                                newChat.seq_in = chat.seq_in;
+                                newChat.seq_out = chat.seq_out;
+                                MessagesStorage.getInstance().updateEncryptedChat(newChat);
+                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        putEncryptedChat(newChat, false);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
+                                    }
+                                });
+                                declineSecretChat(chat.id);
+                            }
+                        });
+                        return null;
+                    }
+                    chat.seq_in = layer.out_seq_no;
+                    MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
                     object = layer.message;
                 }
 
@@ -3567,8 +3622,10 @@ public void run() {
                     TLRPC.TL_message newMessage = null;
                     if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 17) {
                         newMessage = new TLRPC.TL_message_secret();
+                        newMessage.ttl = decryptedMessage.ttl;
                     } else {
                         newMessage = new TLRPC.TL_message();
+                        newMessage.ttl = chat.ttl;
                     }
                     newMessage.message = decryptedMessage.message;
                     newMessage.date = message.date;
@@ -3580,7 +3637,6 @@ public void run() {
                     newMessage.to_id.user_id = UserConfig.getClientUserId();
                     newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
                     newMessage.dialog_id = ((long)chat.id) << 32;
-                    newMessage.ttl = chat.ttl;
                     if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaEmpty) {
                         newMessage.media = new TLRPC.TL_messageMediaEmpty();
                     } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaContact) {
@@ -3657,6 +3713,9 @@ public void run() {
                         newMessage.media.video.key = decryptedMessage.media.key;
                         newMessage.media.video.iv = decryptedMessage.media.iv;
                         newMessage.media.video.mime_type = decryptedMessage.media.mime_type;
+                        if (newMessage.ttl != 0) {
+                            newMessage.ttl = Math.max(newMessage.media.video.duration + 1, newMessage.ttl);
+                        }
                         if (newMessage.media.video.mime_type == null) {
                             newMessage.media.video.mime_type = "video/mp4";
                         }
@@ -3703,6 +3762,9 @@ public void run() {
                         newMessage.media.audio.dc_id = message.file.dc_id;
                         newMessage.media.audio.duration = decryptedMessage.media.duration;
                         newMessage.media.audio.mime_type = decryptedMessage.media.mime_type;
+                        if (newMessage.ttl != 0) {
+                            newMessage.ttl = Math.max(newMessage.media.audio.duration + 1, newMessage.ttl);
+                        }
                         if (newMessage.media.audio.mime_type == null) {
                             newMessage.media.audio.mime_type = "audio/ogg";
                         }
@@ -3715,13 +3777,15 @@ public void run() {
                     if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL || serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
                         TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
                         if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                            newMessage.action = new TLRPC.TL_messageActionTTLChange();
+                            newMessage.action = new TLRPC.TL_messageEncryptedAction();
                             if (serviceMessage.action.ttl_seconds < 0 || serviceMessage.action.ttl_seconds > 60 * 60 * 24 * 365) {
                                 serviceMessage.action.ttl_seconds = 60 * 60 * 24 * 365;
                             }
-                            newMessage.action.ttl = chat.ttl = serviceMessage.action.ttl_seconds;
+                            chat.ttl = serviceMessage.action.ttl_seconds;
+                            newMessage.action.encryptedAction = serviceMessage.action;
+                            MessagesStorage.getInstance().updateEncryptedChatTTL(chat);
                         } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                            newMessage.action = new TLRPC.TL_messageEcryptedAction();
+                            newMessage.action = new TLRPC.TL_messageEncryptedAction();
                             newMessage.action.encryptedAction = serviceMessage.action;
                         }
                         newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
@@ -3732,7 +3796,6 @@ public void run() {
                         newMessage.to_id = new TLRPC.TL_peerUser();
                         newMessage.to_id.user_id = UserConfig.getClientUserId();
                         newMessage.dialog_id = ((long)chat.id) << 32;
-                        MessagesStorage.getInstance().updateEncryptedChatTTL(chat);
                         return newMessage;
                     } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
                         final long did = ((long)chat.id) << 32;
@@ -3771,7 +3834,7 @@ public void run() {
                         return null;
                     } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
                         if (!serviceMessage.action.random_ids.isEmpty()) {
-                            MessagesStorage.getInstance().createTaskForSecretChat(chat.id, ConnectionsManager.getInstance().getCurrentTime(), message.date, 1, serviceMessage.action.random_ids);
+                            MessagesStorage.getInstance().createTaskForSecretChat(chat.id, ConnectionsManager.getInstance().getCurrentTime(), ConnectionsManager.getInstance().getCurrentTime(), 1, serviceMessage.action.random_ids);
                         }
                     } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
                         AndroidUtilities.RunOnUIThread(new Runnable() {
@@ -3782,10 +3845,12 @@ public void run() {
                                 chat.layer = AndroidUtilities.setPeerLayerVersion(chat.layer, serviceMessage.action.layer);
                                 MessagesStorage.getInstance().updateEncryptedChatLayer(chat);
                                 if (currentPeerLayer < 17) {
-                                    SendMessagesHelper.getInstance().sendNotifyLayerMessage(chat);
+                                    SendMessagesHelper.getInstance().sendNotifyLayerMessage(chat, null);
                                 }
                             }
                         });
+                    } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionResend) {
+
                     } else {
                         return null;
                     }
@@ -3832,12 +3897,15 @@ public void processAcceptedSecretChat(final TLRPC.EncryptedChat encryptedChat) {
         long fingerprint = Utilities.bytesToLong(authKeyId);
         if (encryptedChat.key_fingerprint == fingerprint) {
             encryptedChat.auth_key = authKey;
+            encryptedChat.seq_in = 0;
+            encryptedChat.seq_out = 1;
             MessagesStorage.getInstance().updateEncryptedChat(encryptedChat);
             AndroidUtilities.RunOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     putEncryptedChat(encryptedChat, false);
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, encryptedChat);
+                    SendMessagesHelper.getInstance().sendNotifyLayerMessage(encryptedChat, null);
                 }
             });
         } else {
@@ -3845,6 +3913,8 @@ public void run() {
             newChat.id = encryptedChat.id;
             newChat.user_id = encryptedChat.user_id;
             newChat.auth_key = encryptedChat.auth_key;
+            newChat.seq_in = encryptedChat.seq_in;
+            newChat.seq_out = encryptedChat.seq_out;
             MessagesStorage.getInstance().updateEncryptedChat(newChat);
             AndroidUtilities.RunOnUIThread(new Runnable() {
                 @Override
@@ -3952,12 +4022,15 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 final TLRPC.EncryptedChat newChat = (TLRPC.EncryptedChat) response;
                                 newChat.auth_key = encryptedChat.auth_key;
                                 newChat.user_id = encryptedChat.user_id;
+                                newChat.seq_in = encryptedChat.seq_in;
+                                newChat.seq_out = encryptedChat.seq_out;
                                 MessagesStorage.getInstance().updateEncryptedChat(newChat);
                                 AndroidUtilities.RunOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         putEncryptedChat(newChat, false);
                                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
+                                        SendMessagesHelper.getInstance().sendNotifyLayerMessage(newChat, null);
                                     }
                                 });
                             }
@@ -4101,7 +4174,7 @@ public void run() {
                                             }
                                             AlertDialog.Builder builder = new AlertDialog.Builder(context);
                                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                            builder.setMessage(LocaleController.formatString("CreateEncryptedChatOutdatedError", R.string.CreateEncryptedChatOutdatedError, user.first_name, user.first_name));
+                                            builder.setMessage(LocaleController.getString("CreateEncryptedChatError", R.string.CreateEncryptedChatError));
                                             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                             builder.show().setCanceledOnTouchOutside(true);
                                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 09dffff17..4b8598b7a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -109,6 +109,8 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE blocked_users(uid INTEGER PRIMARY KEY)").stepThis().dispose();
                 database.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, PRIMARY KEY (uid, type));").stepThis().dispose();
                 database.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
+                database.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
+
                 //database.executeFast("CREATE TABLE attach_data(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
 
                 database.executeFast("CREATE TABLE user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
@@ -136,6 +138,9 @@ public void openDatabase() {
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
                 database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                 database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages ON messages(mid, send_state, date) WHERE mid < 0 AND send_state = 1;").stepThis().dispose();
+
+                database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
+
                 database.executeFast("PRAGMA user_version = 7").stepThis().dispose();
             } else {
                 try {
@@ -290,6 +295,8 @@ public void run() {
                         version = 6;
                     }
                     if (version == 6 && version < 7) {
+                        database.executeFast("CREATE TABLE IF NOT EXISTS messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
+                        database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
                         database.executeFast("ALTER TABLE enc_chats ADD COLUMN layer INTEGER default 0").stepThis().dispose();
                         database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_in INTEGER default 0").stepThis().dispose();
                         database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_out INTEGER default 0").stepThis().dispose();
@@ -492,58 +499,15 @@ public void run() {
                         cursor.dispose();
 
                         if (!encryptedChatIds.isEmpty()) {
-                            String stringToLoad = TextUtils.join(",", encryptedChatIds);
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid IN(%s)", stringToLoad));
-                            while (cursor.next()) {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    encryptedChats.add(chat);
-                                    chat.user_id = cursor.intValue(1);
-                                    if (!userIds.contains(chat.user_id)) {
-                                        userIds.add(chat.user_id);
-                                    }
-                                    chat.a_or_b = cursor.byteArrayValue(2);
-                                    chat.auth_key = cursor.byteArrayValue(3);
-                                    chat.ttl = cursor.intValue(4);
-                                    chat.layer = cursor.intValue(5);
-                                    chat.seq_in = cursor.intValue(6);
-                                    chat.seq_out = cursor.intValue(7);
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            }
-                            cursor.dispose();
+                            getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats, userIds);
                         }
 
                         if (!userIds.isEmpty()) {
-                            String stringToLoad = TextUtils.join(",", userIds);
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", stringToLoad));
-                            while (cursor.next()) {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    if (user.status != null) {
-                                        user.status.expires = cursor.intValue(1);
-                                    }
-                                    users.add(user);
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            }
-                            cursor.dispose();
+                            getUsersInternal(TextUtils.join(",", userIds), users);
                         }
 
                         if (!chatIds.isEmpty()) {
-                            String stringToLoad = TextUtils.join(",", chatIds);
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", stringToLoad));
-                            while (cursor.next()) {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.Chat chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    chats.add(chat);
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            }
-                            cursor.dispose();
+                            getChatsInternal(TextUtils.join(",", chatIds), chats);
                         }
                     }
                     Collections.reverse(messages);
@@ -632,19 +596,7 @@ public void run() {
                     cursor.dispose();
 
                     if (usersToLoad.length() != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad.toString()));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                users.add(user);
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getUsersInternal(usersToLoad.toString(), users);
                     }
 
                     MessagesController.getInstance().processLoadedBlockedUsers(ids, users, true);
@@ -865,8 +817,12 @@ public void run() {
                         cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages as m INNER JOIN randoms as r ON m.mid = r.mid WHERE r.random_id IN (%s)", ids));
                     }
                     while (cursor.next()) {
+                        int ttl = cursor.intValue(1);
+                        if (ttl <= 0) {
+                            continue;
+                        }
                         int mid = cursor.intValue(0);
-                        int date = Math.min(readTime, time) + cursor.intValue(1);
+                        int date = Math.min(readTime, time) + ttl;
                         minDate = Math.min(minDate, date);
                         ArrayList<Integer> arr = messages.get(date);
                         if (arr == null) {
@@ -1119,19 +1075,7 @@ public void run() {
                             }
                         }
                         if (usersToLoad.length() != 0) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad.toString()));
-                            while (cursor.next()) {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    loadedUsers.add(user);
-                                    if (user.status != null) {
-                                        user.status.expires = cursor.intValue(1);
-                                    }
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            }
-                            cursor.dispose();
+                            getUsersInternal(usersToLoad.toString(), loadedUsers);
                         }
                         if (modified) {
                             updateChatInfo(chat_id, info, false);
@@ -1218,7 +1162,18 @@ public void run() {
                     SQLiteCursor cursor = database.queryFinalized("SELECT u.data, u.status, u.name FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
                     while (cursor.next()) {
                         String name = cursor.stringValue(2);
+                        String username = null;
+                        int usernamePos = name.lastIndexOf(";;;");
+                        if (usernamePos != -1) {
+                            username = name.substring(usernamePos + 3);
+                        }
+                        int found = 0;
                         if (name.startsWith(q) || name.contains(" " + q)) {
+                            found = 1;
+                        } else if (username != null && username.startsWith(q)) {
+                            found = 2;
+                        }
+                        if (found != 0) {
                             ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                             if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
                                 TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
@@ -1226,7 +1181,11 @@ public void run() {
                                     if (user.status != null) {
                                         user.status.expires = cursor.intValue(1);
                                     }
-                                    resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                    if (found == 1) {
+                                        resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                    } else {
+                                        resultArrayNames.add(Utilities.generateSearchName("@" + user.username, null, "@" + q));
+                                    }
                                     resultArray.add(user);
                                 }
                             }
@@ -1239,7 +1198,20 @@ public void run() {
                         cursor = database.queryFinalized("SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out FROM enc_chats as q INNER JOIN dialogs as d ON (q.uid << 32) = d.did INNER JOIN users as u ON q.user = u.uid");
                         while (cursor.next()) {
                             String name = cursor.stringValue(1);
+
+                            String username = null;
+                            int usernamePos = name.lastIndexOf(";;;");
+                            if (usernamePos != -1) {
+                                username = name.substring(usernamePos + 2);
+                            }
+                            int found = 0;
                             if (name.startsWith(q) || name.contains(" " + q)) {
+                                found = 1;
+                            } else if (username != null && username.startsWith(q)) {
+                                found = 2;
+                            }
+
+                            if (found != 0) {
                                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                                 ByteBufferDesc data2 = buffersStorage.getFreeBuffer(cursor.byteArrayLength(6));
                                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0 && cursor.byteBufferValue(6, data2.buffer) != 0) {
@@ -1256,7 +1228,11 @@ public void run() {
                                     if (user.status != null) {
                                         user.status.expires = cursor.intValue(7);
                                     }
-                                    resultArrayNames.add(Html.fromHtml("<font color=\"#00a60e\">" + ContactsController.formatName(user.first_name, user.last_name) + "</font>"));
+                                    if (found == 1) {
+                                        resultArrayNames.add(Html.fromHtml("<font color=\"#00a60e\">" + ContactsController.formatName(user.first_name, user.last_name) + "</font>"));
+                                    } else {
+                                        resultArrayNames.add(Utilities.generateSearchName("@" + user.username, null, "@" + q));
+                                    }
                                     resultArray.add(chat);
                                     encUsers.add(user);
                                 }
@@ -1466,19 +1442,7 @@ public void run() {
                     cursor.dispose();
 
                     if (uids.length() != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", uids.toString()));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                users.add(user);
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getUsersInternal(uids.toString(), users);
                     }
                 } catch (Exception e) {
                     contacts.clear();
@@ -1557,9 +1521,9 @@ public void run() {
                         }
                     } else {
                         if (max_id != 0) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media WHERE uid = %d AND mid > %d ORDER BY mid ASC LIMIT %d", uid, max_id, count));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.data, m.mid, r.random_id FROM media as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", uid, max_id, count));
                         } else {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media WHERE uid = %d ORDER BY mid ASC LIMIT %d,%d", uid, offset, count));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.data, m.mid, r.random_id FROM media as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", uid, offset, count));
                         }
                     }
 
@@ -1569,6 +1533,9 @@ public void run() {
                             TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             message.id = cursor.intValue(1);
                             message.dialog_id = uid;
+                            if ((int)uid == 0) {
+                                message.random_id = cursor.longValue(2);
+                            }
                             res.messages.add(message);
                             fromUser.add(message.from_id);
                         }
@@ -1587,20 +1554,7 @@ public void run() {
                         }
                     }
                     if (usersToLoad.length() != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad.toString()));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                loadedUsers.add(user.id);
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                                res.users.add(user);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getUsersInternal(usersToLoad.toString(), res.users);
                     }
                 } catch (Exception e) {
                     res.messages.clear();
@@ -1657,7 +1611,7 @@ public void run() {
                     ArrayList<Integer> chatIds = new ArrayList<Integer>();
                     ArrayList<Integer> broadcastIds = new ArrayList<Integer>();
                     ArrayList<Integer> encryptedChatIds = new ArrayList<Integer>();
-                    SQLiteCursor cursor = database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.mid < 0 AND m.send_state = 1 ORDER BY m.mid DESC LIMIT " + count);
+                    SQLiteCursor cursor = database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.mid < 0 AND m.send_state = 1 ORDER BY m.mid DESC LIMIT " + count);
                     while (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
                         if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
@@ -1669,6 +1623,8 @@ public void run() {
                                 message.random_id = cursor.longValue(5);
                             }
                             message.dialog_id = cursor.longValue(6);
+                            message.seq_in = cursor.intValue(7);
+                            message.seq_out = cursor.intValue(8);
                             messages.add(message);
 
                             int lower_id = (int)message.dialog_id;
@@ -1725,45 +1681,11 @@ public void run() {
 
 
                     if (!encryptedChatIds.isEmpty()) {
-                        String stringToLoad = TextUtils.join(",", encryptedChatIds);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid IN(%s)", stringToLoad));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                encryptedChats.add(chat);
-                                chat.user_id = cursor.intValue(1);
-                                if (!userIds.contains(chat.user_id)) {
-                                    userIds.add(chat.user_id);
-                                }
-                                chat.a_or_b = cursor.byteArrayValue(2);
-                                chat.auth_key = cursor.byteArrayValue(3);
-                                chat.ttl = cursor.intValue(4);
-                                chat.layer = cursor.intValue(5);
-                                chat.seq_in = cursor.intValue(6);
-                                chat.seq_out = cursor.intValue(7);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats, userIds);
                     }
 
-
                     if (!userIds.isEmpty()) {
-                        String stringToLoad = TextUtils.join(",", userIds);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", stringToLoad));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                                users.add(user);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getUsersInternal(TextUtils.join(",", userIds), users);
                     }
 
                     if (!chatIds.isEmpty() || !broadcastIds.isEmpty()) {
@@ -1780,16 +1702,7 @@ public void run() {
                             }
                             stringToLoad.append(-cid);
                         }
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", stringToLoad.toString()));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.Chat chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                chats.add(chat);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getChatsInternal(stringToLoad.toString(), chats);
                     }
 
                     SendMessagesHelper.getInstance().processUnsentMessages(messages, users, chats, encryptedChats);
@@ -2005,20 +1918,7 @@ public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
                         }
                     }
                     if (usersToLoad.length() != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad.toString()));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                loadedUsers.add(user.id);
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                                res.users.add(user);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+                        getUsersInternal(usersToLoad.toString(), res.users);
                     }
                 } catch (Exception e) {
                     res.messages.clear();
@@ -2258,42 +2158,15 @@ public void getEncryptedChat(final int chat_id, final Semaphore semaphore, final
             @Override
             public void run() {
                 try {
-                    int userToLoad = 0;
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid = %d", chat_id));
-                    if (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                            result.add(chat);
-                            chat.user_id = cursor.intValue(1);
-                            userToLoad = chat.user_id;
-                            chat.a_or_b = cursor.byteArrayValue(2);
-                            chat.auth_key = cursor.byteArrayValue(3);
-                            chat.ttl = cursor.intValue(4);
-                            chat.layer = cursor.intValue(5);
-                            chat.seq_in = cursor.intValue(6);
-                            chat.seq_out = cursor.intValue(7);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-                    if (userToLoad != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid = %d", userToLoad));
-                        if (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                if (user.status != null) {
-                                    user.status.expires = cursor.intValue(1);
-                                }
-                                result.add(user);
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-
-                        if (result.size() != 2) {
-                            result.clear();
+                    ArrayList<Integer> usersToLoad = new ArrayList<Integer>();
+                    ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<TLRPC.EncryptedChat>();
+                    getEncryptedChatsInternal("" + chat_id, encryptedChats, usersToLoad);
+                    if (!encryptedChats.isEmpty() && !usersToLoad.isEmpty()) {
+                        ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                        getUsersInternal(TextUtils.join(",", usersToLoad), users);
+                        if (!users.isEmpty()) {
+                            result.add(encryptedChats.get(0));
+                            result.add(users.get(0));
                         }
                     }
                 } catch (Exception e) {
@@ -2321,12 +2194,7 @@ public void run() {
                     chat.serializeToStream(data);
                     state.bindInteger(1, chat.id);
                     state.bindInteger(2, user.id);
-                    if (user.first_name != null && user.last_name != null) {
-                        String name = (user.first_name + " " + user.last_name).toLowerCase();
-                        state.bindString(3, name);
-                    } else {
-                        state.bindString(3, "");
-                    }
+                    state.bindString(3, formatUserSearchName(user));
                     state.bindByteBuffer(4, data.buffer);
                     if (chat.a_or_b != null) {
                         data2.writeRaw(chat.a_or_b);
@@ -2362,54 +2230,157 @@ public void run() {
         });
     }
 
-    private void putUsersAndChatsInternal(final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final boolean withTransaction) {
-        try {
-            if (withTransaction) {
-                database.beginTransaction();
+    private String formatUserSearchName(TLRPC.User user) {
+        StringBuilder str = new StringBuilder("");
+        if (user.first_name != null && user.first_name.length() > 0) {
+            str.append(user.first_name);
+        }
+        if (user.last_name != null && user.last_name.length() > 0) {
+            if (str.length() > 0) {
+                str.append(" ");
             }
-            if (users != null && !users.isEmpty()) {
-                SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
-                for (TLRPC.User user : users) {
-                    state.requery();
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
-                    user.serializeToStream(data);
-                    state.bindInteger(1, user.id);
-                    if (user.first_name != null && user.last_name != null) {
-                        String name = (user.first_name + " " + user.last_name).toLowerCase();
-                        state.bindString(2, name);
-                    } else {
-                        state.bindString(2, "");
+            str.append(user.last_name);
+        }
+        str.append(";;;");
+        if (user.username != null && user.username.length() > 0) {
+            str.append(user.username);
+        }
+        return str.toString().toLowerCase();
+    }
+
+    private void putUsersInternal(ArrayList<TLRPC.User> users) throws Exception {
+        if (users == null || users.isEmpty()) {
+            return;
+        }
+        SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
+        for (TLRPC.User user : users) {
+            state.requery();
+            ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
+            user.serializeToStream(data);
+            state.bindInteger(1, user.id);
+            state.bindString(2, formatUserSearchName(user));
+            if (user.status != null) {
+                state.bindInteger(3, user.status.expires);
+            } else {
+                state.bindInteger(3, 0);
+            }
+            state.bindByteBuffer(4, data.buffer);
+            state.step();
+            buffersStorage.reuseFreeBuffer(data);
+        }
+        state.dispose();
+    }
+
+    private void putChatsInternal(ArrayList<TLRPC.Chat> chats) throws Exception {
+        if (chats == null || chats.isEmpty()) {
+            return;
+        }
+        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
+        for (TLRPC.Chat chat : chats) {
+            state.requery();
+            ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
+            chat.serializeToStream(data);
+            state.bindInteger(1, chat.id);
+            if (chat.title != null) {
+                String name = chat.title.toLowerCase();
+                state.bindString(2, name);
+            } else {
+                state.bindString(2, "");
+            }
+            state.bindByteBuffer(3, data.buffer);
+            state.step();
+            buffersStorage.reuseFreeBuffer(data);
+        }
+        state.dispose();
+    }
+
+    private void getUsersInternal(String usersToLoad, ArrayList<TLRPC.User> result) throws Exception {
+        if (usersToLoad == null || usersToLoad.length() == 0 || result == null) {
+            return;
+        }
+        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad));
+        while (cursor.next()) {
+            try {
+                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
+                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                    TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    if (user != null) {
+                        if (user.status != null) {
+                            user.status.expires = cursor.intValue(1);
+                        }
+                        result.add(user);
                     }
-                    if (user.status != null) {
-                        state.bindInteger(3, user.status.expires);
-                    } else {
-                        state.bindInteger(3, 0);
+                }
+                buffersStorage.reuseFreeBuffer(data);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        cursor.dispose();
+    }
+
+    private void getChatsInternal(String chatsToLoad, ArrayList<TLRPC.Chat> result) throws Exception {
+        if (chatsToLoad == null || chatsToLoad.length() == 0 || result == null) {
+            return;
+        }
+        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", chatsToLoad));
+        while (cursor.next()) {
+            try {
+                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
+                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                    TLRPC.Chat chat = (TLRPC.Chat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    if (chat != null) {
+                        result.add(chat);
                     }
-                    state.bindByteBuffer(4, data.buffer);
-                    state.step();
-                    buffersStorage.reuseFreeBuffer(data);
                 }
-                state.dispose();
+                buffersStorage.reuseFreeBuffer(data);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
             }
-            if (chats != null && !chats.isEmpty()) {
-                SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
-                for (TLRPC.Chat chat : chats) {
-                    state.requery();
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-                    chat.serializeToStream(data);
-                    state.bindInteger(1, chat.id);
-                    if (chat.title != null) {
-                        String name = chat.title.toLowerCase();
-                        state.bindString(2, name);
-                    } else {
-                        state.bindString(2, "");
+        }
+        cursor.dispose();
+    }
+
+    private void getEncryptedChatsInternal(String chatsToLoad, ArrayList<TLRPC.EncryptedChat> result, ArrayList<Integer> usersToLoad) throws Exception {
+        if (chatsToLoad == null || chatsToLoad.length() == 0 || result == null) {
+            return;
+        }
+
+        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid IN(%s)", chatsToLoad));
+        while (cursor.next()) {
+            try {
+                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
+                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                    TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    if (chat != null) {
+                        chat.user_id = cursor.intValue(1);
+                        if (usersToLoad != null && !usersToLoad.contains(chat.user_id)) {
+                            usersToLoad.add(chat.user_id);
+                        }
+                        chat.a_or_b = cursor.byteArrayValue(2);
+                        chat.auth_key = cursor.byteArrayValue(3);
+                        chat.ttl = cursor.intValue(4);
+                        chat.layer = cursor.intValue(5);
+                        chat.seq_in = cursor.intValue(6);
+                        chat.seq_out = cursor.intValue(7);
+                        result.add(chat);
                     }
-                    state.bindByteBuffer(3, data.buffer);
-                    state.step();
-                    buffersStorage.reuseFreeBuffer(data);
                 }
-                state.dispose();
+                buffersStorage.reuseFreeBuffer(data);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
             }
+        }
+        cursor.dispose();
+    }
+
+    private void putUsersAndChatsInternal(final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final boolean withTransaction) {
+        try {
+            if (withTransaction) {
+                database.beginTransaction();
+            }
+            putUsersInternal(users);
+            putChatsInternal(chats);
             if (withTransaction) {
                 database.commitTransaction();
             }
@@ -2509,8 +2480,20 @@ public void run() {
         });
     }
 
-    private int getMessageMediaType(TLRPC.Message message) {
+    private boolean canAddMessageToMedia(TLRPC.Message message) {
         if (message instanceof TLRPC.TL_message_secret && message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60) {
+            return false;
+        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
+            return true;
+        }
+        return false;
+    }
+
+    private int getMessageMediaType(TLRPC.Message message) {
+        if (message instanceof TLRPC.TL_message_secret && (
+                message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60 ||
+                message.media instanceof TLRPC.TL_messageMediaAudio ||
+                message.media instanceof TLRPC.TL_messageMediaVideo)) {
             return 1;
         } else if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
             return 0;
@@ -2553,7 +2536,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                     messagesIdsMap.put(message.id, dialog_id);
                 }
 
-                if (getMessageMediaType(message) == 0) {
+                if (canAddMessageToMedia(message)) {
                     if (messageMediaIds.length() > 0) {
                         messageMediaIds.append(",");
                     }
@@ -2615,10 +2598,19 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
 
                 ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
                 message.serializeToStream(data);
-                TLRPC.Message lastMessage = messagesMap.get(dialog_id);
-                if (lastMessage == null || message.date > lastMessage.date) {
-                    messagesMap.put(dialog_id, message);
+
+                boolean updateDialog = true;
+                if (message.action != null && message.action instanceof TLRPC.TL_messageEncryptedAction && !(message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages)) {
+                    updateDialog = false;
                 }
+
+                if (updateDialog) {
+                    TLRPC.Message lastMessage = messagesMap.get(dialog_id);
+                    if (lastMessage == null || message.date > lastMessage.date) {
+                        messagesMap.put(dialog_id, message);
+                    }
+                }
+
                 state.bindInteger(1, messageId);
                 state.bindLong(2, dialog_id);
                 state.bindInteger(3, (MessageObject.isUnread(message) ? 0 : 1));
@@ -2637,7 +2629,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                     state3.step();
                 }
 
-                if (getMessageMediaType(message) == 0) {
+                if (canAddMessageToMedia(message)) {
                     state2.requery();
                     state2.bindInteger(1, messageId);
                     state2.bindLong(2, dialog_id);
@@ -2806,6 +2798,25 @@ public void run() {
         });
     }
 
+    public void setMessageSeq(final int mid, final int seq_in, final int seq_out) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
+                    state.requery();
+                    state.bindInteger(1, mid);
+                    state.bindInteger(2, seq_in);
+                    state.bindInteger(3, seq_out);
+                    state.step();
+                    state.dispose();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
     private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId, int newId, int date) {
         if (_oldId != null && _oldId == newId && date != 0) {
             SQLitePreparedStatement state = null;
@@ -2821,6 +2832,7 @@ private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId,
                     state.dispose();
                 }
             }
+
             return newId;
         } else {
             Integer oldId = _oldId;
@@ -2861,6 +2873,7 @@ private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId,
             } finally {
                 if (state != null) {
                     state.dispose();
+                    state = null;
                 }
             }
 
@@ -2874,6 +2887,7 @@ private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId,
             } finally {
                 if (state != null) {
                     state.dispose();
+                    state = null;
                 }
             }
 
@@ -2887,6 +2901,7 @@ private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId,
             } finally {
                 if (state != null) {
                     state.dispose();
+                    state = null;
                 }
             }
 
@@ -2943,52 +2958,25 @@ private void updateUsersInternal(final ArrayList<TLRPC.User> users, final boolea
                     usersDict.put(user.id, user);
                 }
                 ArrayList<TLRPC.User> loadedUsers = new ArrayList<TLRPC.User>();
-                SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", ids.toString()));
-                while (cursor.next()) {
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                        TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                        loadedUsers.add(user);
-                        if (user.status != null) {
-                            user.status.expires = cursor.intValue(1);
-                        }
-                        TLRPC.User updateUser = usersDict.get(user.id);
+                getUsersInternal(ids.toString(), loadedUsers);
+                for (TLRPC.User user : loadedUsers) {
+                    TLRPC.User updateUser = usersDict.get(user.id);
+                    if (updateUser != null) {
                         if (updateUser.first_name != null && updateUser.last_name != null) {
                             user.first_name = updateUser.first_name;
                             user.last_name = updateUser.last_name;
+                            user.username = updateUser.username;
                         } else if (updateUser.photo != null) {
                             user.photo = updateUser.photo;
                         }
                     }
-                    buffersStorage.reuseFreeBuffer(data);
                 }
-                cursor.dispose();
+
                 if (!loadedUsers.isEmpty()) {
                     if (withTransaction) {
                         database.beginTransaction();
                     }
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
-                    for (TLRPC.User user : loadedUsers) {
-                        state.requery();
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
-                        user.serializeToStream(data);
-                        state.bindInteger(1, user.id);
-                        if (user.first_name != null && user.last_name != null) {
-                            String name = (user.first_name + " " + user.last_name).toLowerCase();
-                            state.bindString(2, name);
-                        } else {
-                            state.bindString(2, "");
-                        }
-                        if (user.status != null) {
-                            state.bindInteger(3, user.status.expires);
-                        } else {
-                            state.bindInteger(3, 0);
-                        }
-                        state.bindByteBuffer(4, data.buffer);
-                        state.step();
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    state.dispose();
+                    putUsersInternal(loadedUsers);
                     if (withTransaction) {
                         database.commitTransaction();
                     }
@@ -3098,10 +3086,63 @@ private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages) {
         }
         try {
             String ids = TextUtils.join(",", messages);
+            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, data FROM messages WHERE mid IN(%s)", ids));
+            ArrayList<File> filesToDelete = new ArrayList<File>();
+            try {
+                while (cursor.next()) {
+                    long did = cursor.longValue(0);
+                    if ((int)did != 0) {
+                        continue;
+                    }
+                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
+                    if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
+                        TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                        if (message == null || message.media == null) {
+                            continue;
+                        }
+                        if (message.media instanceof TLRPC.TL_messageMediaAudio) {
+                            File file = FileLoader.getPathToAttach(message.media.audio);
+                            if (file != null && file.toString().length() > 0) {
+                                filesToDelete.add(file);
+                            }
+                        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                            for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
+                                File file = FileLoader.getPathToAttach(photoSize);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                            }
+                        } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
+                            File file = FileLoader.getPathToAttach(message.media.video);
+                            if (file != null && file.toString().length() > 0) {
+                                filesToDelete.add(file);
+                            }
+                            file = FileLoader.getPathToAttach(message.media.video.thumb);
+                            if (file != null && file.toString().length() > 0) {
+                                filesToDelete.add(file);
+                            }
+                        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                            File file = FileLoader.getPathToAttach(message.media.document);
+                            if (file != null && file.toString().length() > 0) {
+                                filesToDelete.add(file);
+                            }
+                            file = FileLoader.getPathToAttach(message.media.document.thumb);
+                            if (file != null && file.toString().length() > 0) {
+                                filesToDelete.add(file);
+                            }
+                        }
+                    }
+                    buffersStorage.reuseFreeBuffer(data);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            cursor.dispose();
+            FileLoader.getInstance().deleteFiles(filesToDelete);
             database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN(%s)", ids)).stepThis().dispose();
+            database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid IN(%s)", ids)).stepThis().dispose();
             database.executeFast(String.format(Locale.US, "DELETE FROM media WHERE mid IN(%s)", ids)).stepThis().dispose();
             database.executeFast("DELETE FROM media_counts WHERE 1").stepThis().dispose();
-
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -3198,58 +3239,15 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
             cursor.dispose();
 
             if (!encryptedToLoad.isEmpty()) {
-                String toLoad = TextUtils.join(",", encryptedToLoad);
-                cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid IN(%s)", toLoad));
-                while (cursor.next()) {
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                        encryptedChats.add(chat);
-                        chat.user_id = cursor.intValue(1);
-                        if (!usersToLoad.contains(chat.user_id)) {
-                            usersToLoad.add(chat.user_id);
-                        }
-                        chat.a_or_b = cursor.byteArrayValue(2);
-                        chat.auth_key = cursor.byteArrayValue(3);
-                        chat.ttl = cursor.intValue(4);
-                        chat.layer = cursor.intValue(5);
-                        chat.seq_in = cursor.intValue(6);
-                        chat.seq_out = cursor.intValue(7);
-                    }
-                    buffersStorage.reuseFreeBuffer(data);
-                }
-                cursor.dispose();
+                getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
             }
 
             if (!chatsToLoad.isEmpty()) {
-                String toLoad = TextUtils.join(",", chatsToLoad);
-                cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", toLoad));
-                while (cursor.next()) {
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                        TLRPC.Chat chat = (TLRPC.Chat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                        dialogs.chats.add(chat);
-                    }
-                    buffersStorage.reuseFreeBuffer(data);
-                }
-                cursor.dispose();
+                getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs.chats);
             }
 
             if (!usersToLoad.isEmpty()) {
-                String toLoad = TextUtils.join(",", usersToLoad);
-                cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", toLoad));
-                while (cursor.next()) {
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                        TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                        if (user.status != null) {
-                            user.status.expires = cursor.intValue(1);
-                        }
-                        dialogs.users.add(user);
-                    }
-                    buffersStorage.reuseFreeBuffer(data);
-                }
-                cursor.dispose();
+                getUsersInternal(TextUtils.join(",", usersToLoad), dialogs.users);
             }
 
             if (!dialogs.dialogs.isEmpty() || !encryptedChats.isEmpty()) {
@@ -3332,49 +3330,8 @@ public void run() {
                         state.dispose();
                         state2.dispose();
                     }
-                    if (!messages.users.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
-                        for (TLRPC.User user : messages.users) {
-                            state.requery();
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
-                            user.serializeToStream(data);
-                            state.bindInteger(1, user.id);
-                            if (user.first_name != null && user.last_name != null) {
-                                String name = (user.first_name + " " + user.last_name).toLowerCase();
-                                state.bindString(2, name);
-                            } else {
-                                state.bindString(2, "");
-                            }
-                            if (user.status != null) {
-                                state.bindInteger(3, user.status.expires);
-                            } else {
-                                state.bindInteger(3, 0);
-                            }
-                            state.bindByteBuffer(4, data.buffer);
-                            state.step();
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                    }
-                    if (!messages.chats.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
-                        for (TLRPC.Chat chat : messages.chats) {
-                            state.requery();
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-                            chat.serializeToStream(data);
-                            state.bindInteger(1, chat.id);
-                            if (chat.title != null) {
-                                String name = chat.title.toLowerCase();
-                                state.bindString(2, name);
-                            } else {
-                                state.bindString(2, "");
-                            }
-                            state.bindByteBuffer(3, data.buffer);
-                            state.step();
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                    }
+                    putUsersInternal(messages.users);
+                    putChatsInternal(messages.chats);
 
                     database.commitTransaction();
                 } catch (Exception e) {
@@ -3457,76 +3414,15 @@ public void run() {
                     cursor.dispose();
 
                     if (!encryptedToLoad.isEmpty()) {
-                        String toLoad = TextUtils.join(",", encryptedToLoad);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid IN(%s)", toLoad));
-                        while (cursor.next()) {
-                            try {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    if (chat != null) {
-                                        encryptedChats.add(chat);
-                                        chat.user_id = cursor.intValue(1);
-                                        if (!usersToLoad.contains(chat.user_id)) {
-                                            usersToLoad.add(chat.user_id);
-                                        }
-                                        chat.a_or_b = cursor.byteArrayValue(2);
-                                        chat.auth_key = cursor.byteArrayValue(3);
-                                        chat.ttl = cursor.intValue(4);
-                                        chat.layer = cursor.intValue(5);
-                                        chat.seq_in = cursor.intValue(6);
-                                        chat.seq_out = cursor.intValue(7);
-                                    }
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                        cursor.dispose();
+                        getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
                     }
 
                     if (!chatsToLoad.isEmpty()) {
-                        String toLoad = TextUtils.join(",", chatsToLoad);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", toLoad));
-                        while (cursor.next()) {
-                            try {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.Chat chat = (TLRPC.Chat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    if (chat != null) {
-                                        dialogs.chats.add(chat);
-                                    }
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                        cursor.dispose();
+                        getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs.chats);
                     }
 
                     if (!usersToLoad.isEmpty()) {
-                        String toLoad = TextUtils.join(",", usersToLoad);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", toLoad));
-                        while (cursor.next()) {
-                            try {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    if (user != null) {
-                                        if (user.status != null) {
-                                            user.status.expires = cursor.intValue(1);
-                                        }
-                                        dialogs.users.add(user);
-                                    }
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                        cursor.dispose();
+                        getUsersInternal(TextUtils.join(",", usersToLoad), dialogs.users);
                     }
                     MessagesController.getInstance().processLoadedDialogs(dialogs, encryptedChats, offset, serverOffset, count, true, false);
                 } catch (Exception e) {
@@ -3615,50 +3511,8 @@ public void run() {
                         state4.dispose();
                     }
 
-                    if (!dialogs.users.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
-                        for (TLRPC.User user : dialogs.users) {
-                            state.requery();
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
-                            user.serializeToStream(data);
-                            state.bindInteger(1, user.id);
-                            if (user.first_name != null && user.last_name != null) {
-                                String name = (user.first_name + " " + user.last_name).toLowerCase();
-                                state.bindString(2, name);
-                            } else {
-                                state.bindString(2, "");
-                            }
-                            if (user.status != null) {
-                                state.bindInteger(3, user.status.expires);
-                            } else {
-                                state.bindInteger(3, 0);
-                            }
-                            state.bindByteBuffer(4, data.buffer);
-                            state.step();
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                    }
-
-                    if (!dialogs.chats.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
-                        for (TLRPC.Chat chat : dialogs.chats) {
-                            state.requery();
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-                            chat.serializeToStream(data);
-                            state.bindInteger(1, chat.id);
-                            if (chat.title != null) {
-                                String name = chat.title.toLowerCase();
-                                state.bindString(2, name);
-                            } else {
-                                state.bindString(2, "");
-                            }
-                            state.bindByteBuffer(3, data.buffer);
-                            state.step();
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                    }
+                    putUsersInternal(dialogs.users);
+                    putChatsInternal(dialogs.chats);
 
                     database.commitTransaction();
 
@@ -3673,56 +3527,23 @@ public void run() {
     public TLRPC.User getUser(final int user_id) {
         TLRPC.User user = null;
         try {
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid = %d", user_id));
-            if (cursor.next()) {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                    if (user != null) {
-                        if (user.status != null) {
-                            user.status.expires = cursor.intValue(1);
-                        }
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
+            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+            getUsersInternal("" + user_id, users);
+            if (!users.isEmpty()) {
+                user = users.get(0);
             }
-            cursor.dispose();
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
         return user;
     }
 
-    public ArrayList<TLRPC.User> getUsers(final ArrayList<Integer> uids, final boolean[] error) {
+    public ArrayList<TLRPC.User> getUsers(final ArrayList<Integer> uids) {
         ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
         try {
-            String uidsStr = TextUtils.join(",", uids);
-
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN (%s)", uidsStr));
-            while (cursor.next()) {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                    if (user != null) {
-                        if (user.status != null) {
-                            user.status.expires = cursor.intValue(1);
-                        }
-                        users.add(user);
-                    } else {
-                        error[0] = true;
-                        buffersStorage.reuseFreeBuffer(data);
-                        break;
-                    }
-                } else {
-                    error[0] = true;
-                    buffersStorage.reuseFreeBuffer(data);
-                    break;
-                }
-                buffersStorage.reuseFreeBuffer(data);
-            }
-            cursor.dispose();
+            getUsersInternal(TextUtils.join(",", uids), users);
         } catch (Exception e) {
-            error[0] = true;
+            users.clear();
             FileLog.e("tmessages", e);
         }
         return users;
@@ -3731,15 +3552,11 @@ public void run() {
     public TLRPC.Chat getChat(final int chat_id) {
         TLRPC.Chat chat = null;
         try {
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", chat_id));
-            if (cursor.next()) {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                }
-                buffersStorage.reuseFreeBuffer(data);
+            ArrayList<TLRPC.Chat> chats = new ArrayList<TLRPC.Chat>();
+            getChatsInternal("" + chat_id, chats);
+            if (!chats.isEmpty()) {
+                chat = chats.get(0);
             }
-            cursor.dispose();
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -3749,24 +3566,11 @@ public void run() {
     public TLRPC.EncryptedChat getEncryptedChat(final int chat_id) {
         TLRPC.EncryptedChat chat = null;
         try {
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out FROM enc_chats WHERE uid = %d", chat_id));
-            if (cursor.next()) {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    chat = (TLRPC.EncryptedChat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                    if (chat != null) {
-                        chat.user_id = cursor.intValue(1);
-                        chat.a_or_b = cursor.byteArrayValue(2);
-                        chat.auth_key = cursor.byteArrayValue(3);
-                        chat.ttl = cursor.intValue(4);
-                        chat.layer = cursor.intValue(5);
-                        chat.seq_in = cursor.intValue(6);
-                        chat.seq_out = cursor.intValue(7);
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
+            ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<TLRPC.EncryptedChat>();
+            getEncryptedChatsInternal("" + chat_id, encryptedChats, null);
+            if (!encryptedChats.isEmpty()) {
+                chat = encryptedChats.get(0);
             }
-            cursor.dispose();
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 2a53670a0..1b9896166 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -68,6 +68,7 @@
     public final static int screenshotTook = 50007;
     public final static int albumsDidLoaded = 50008;
     public final static int audioDidSent = 50009;
+    public final static int audioDidStarted = 50010;
 
     final private HashMap<Integer, ArrayList<Object>> observers = new HashMap<Integer, ArrayList<Object>>();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index d37614a02..770a38c55 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -113,18 +113,18 @@ public void run() {
                             if (file != null && media != null) {
                                 if (message.type == 0) {
                                     media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                 } else if (message.type == 1) {
                                     if (media.file == null) {
                                         media.file = file;
                                         if (media.thumb == null && message.location != null) {
                                             performSendDelayedMessage(message);
                                         } else {
-                                            performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                         }
                                     } else {
                                         media.thumb = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                     }
                                 } else if (message.type == 2) {
                                     if (media.file == null) {
@@ -132,22 +132,22 @@ public void run() {
                                         if (media.thumb == null && message.location != null) {
                                             performSendDelayedMessage(message);
                                         } else {
-                                            performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                         }
                                     } else {
                                         media.thumb = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                     }
                                 } else if (message.type == 3) {
                                     media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
+                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
                                 }
                                 arr.remove(a);
                                 a--;
                             } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
                                 message.sendEncryptedRequest.media.key = encryptedFile.key;
                                 message.sendEncryptedRequest.media.iv = encryptedFile.iv;
-                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj, message.encryptedChat, encryptedFile, message.originalPath, null);
+                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj.messageOwner, message.encryptedChat, encryptedFile, message.originalPath);
                                 arr.remove(a);
                                 a--;
                             }
@@ -288,6 +288,35 @@ public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
         if (messageObject.messageOwner.id >= 0) {
             return false;
         }
+        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
+            int enc_id = (int) (messageObject.getDialogId() >> 32);
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(enc_id);
+            if (encryptedChat == null) {
+                MessagesStorage.getInstance().markMessageAsSendError(messageObject.messageOwner.id);
+                messageObject.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.messageOwner.id);
+                processSentMessage(messageObject.messageOwner.id);
+                return false;
+            }
+            if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                sendTTLMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
+                sendMessagesDeleteMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
+                sendClearHistoryMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
+                sendNotifyLayerMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
+                sendMessagesReadMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                sendScreenshotMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionTyping) {
+
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionResend) {
+
+            }
+            return true;
+        }
         if (unsent) {
             unsentMessages.put(messageObject.messageOwner.id, messageObject);
         }
@@ -373,7 +402,11 @@ public void sendMessage(TLRPC.TL_audio audio, String path, long peer) {
         sendMessage(null, null, null, null, null, null, null, null, audio, null, peer, false, path);
     }
 
-    private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry, String path) {
+    private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry, String path) {
+        if (peer == 0) {
+            return;
+        }
+
         TLRPC.Message newMsg = null;
         int type = -1;
         int lower_id = (int) peer;
@@ -548,7 +581,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
             if (high_id == 1) {
                 if (currentChatInfo == null) {
                     processSentMessage(newMsg.id);
-                    return 0;
+                    return;
                 }
                 sendToPeers = new ArrayList<TLRPC.InputUser>();
                 for (TLRPC.TL_chatParticipant participant : currentChatInfo.participants) {
@@ -573,7 +606,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                     TLRPC.User sendToUser = MessagesController.getInstance().getUser(lower_id);
                     if (sendToUser == null) {
                         processSentMessage(newMsg.id);
-                        return 0;
+                        return;
                     }
                     if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
                         sendToPeer = new TLRPC.TL_inputPeerForeign();
@@ -593,6 +626,13 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                 newMsg.to_id.user_id = encryptedChat.participant_id;
             }
             newMsg.ttl = encryptedChat.ttl;
+            if (newMsg.ttl != 0) {
+                if (newMsg.media instanceof TLRPC.TL_messageMediaAudio) {
+                    newMsg.ttl = Math.max(encryptedChat.ttl, newMsg.media.audio.duration + 1);
+                } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo) {
+                    newMsg.ttl = Math.max(encryptedChat.ttl, newMsg.media.video.duration + 1);
+                }
+            }
         }
 
         MessageObject newMsgObj = new MessageObject(newMsg, null, 2);
@@ -614,19 +654,19 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                         reqSend.message = message;
                         reqSend.contacts = sendToPeers;
                         reqSend.media = new TLRPC.TL_inputMediaEmpty();
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                     } else {
                         TLRPC.TL_messages_sendMessage reqSend = new TLRPC.TL_messages_sendMessage();
                         reqSend.message = message;
                         reqSend.peer = sendToPeer;
                         reqSend.random_id = newMsg.random_id;
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                     }
                 } else {
                     TLRPC.TL_decryptedMessage reqSend;
                     if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
                         reqSend = new TLRPC.TL_decryptedMessage();
-                        reqSend.ttl = encryptedChat.ttl;
+                        reqSend.ttl = newMsg.ttl;
                     } else {
                         reqSend = new TLRPC.TL_decryptedMessage_old();
                         reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
@@ -635,7 +675,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                     reqSend.random_id = newMsg.random_id;
                     reqSend.message = message;
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaEmpty();
-                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null, null);
+                    performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
                 }
             } else if (type >= 1 && type <= 3 || type >= 5 && type <= 8) {
                 if (encryptedChat == null) {
@@ -752,39 +792,39 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                         reqSend = request;
                     }
                     if (type == 1) {
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                     } else if (type == 2) {
                         if (photo.access_hash == 0) {
                             performSendDelayedMessage(delayedMessage);
                         } else {
-                            performSendMessageRequest(reqSend, newMsgObj, null);
+                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                         }
                     } else if (type == 3) {
                         if (video.access_hash == 0) {
                             performSendDelayedMessage(delayedMessage);
                         } else {
-                            performSendMessageRequest(reqSend, newMsgObj, null);
+                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                         }
                     } else if (type == 6) {
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                     } else if (type == 7) {
                         if (document.access_hash == 0) {
                             performSendDelayedMessage(delayedMessage);
                         } else {
-                            performSendMessageRequest(reqSend, newMsgObj, null);
+                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                         }
                     } else if (type == 8) {
                         if (audio.access_hash == 0) {
                             performSendDelayedMessage(delayedMessage);
                         } else {
-                            performSendMessageRequest(reqSend, newMsgObj, null);
+                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                         }
                     }
                 } else {
                     TLRPC.TL_decryptedMessage reqSend;
                     if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
                         reqSend = new TLRPC.TL_decryptedMessage();
-                        reqSend.ttl = encryptedChat.ttl;
+                        reqSend.ttl = newMsg.ttl;
                     } else {
                         reqSend = new TLRPC.TL_decryptedMessage_old();
                         reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
@@ -796,7 +836,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                         reqSend.media = new TLRPC.TL_decryptedMessageMediaGeoPoint();
                         reqSend.media.lat = lat;
                         reqSend.media._long = lon;
-                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null, null);
+                        performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
                     } else if (type == 2) {
                         TLRPC.PhotoSize small = photo.sizes.get(0);
                         TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
@@ -822,7 +862,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                             encryptedFile.access_hash = big.location.secret;
                             reqSend.media.key = big.location.key;
                             reqSend.media.iv = big.location.iv;
-                            performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null, null);
+                            performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
                         }
                     } else if (type == 3) {
                         if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
@@ -853,7 +893,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                             encryptedFile.access_hash = video.access_hash;
                             reqSend.media.key = video.key;
                             reqSend.media.iv = video.iv;
-                            performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null, null);
+                            performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
                         }
                     } else if (type == 6) {
                         reqSend.media = new TLRPC.TL_decryptedMessageMediaContact();
@@ -861,7 +901,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                         reqSend.media.first_name = user.first_name;
                         reqSend.media.last_name = user.last_name;
                         reqSend.media.user_id = user.id;
-                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null, null);
+                        performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
                     } else if (type == 7) {
                         reqSend.media = new TLRPC.TL_decryptedMessageMediaDocument();
                         reqSend.media.size = document.size;
@@ -891,7 +931,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                             encryptedFile.access_hash = document.access_hash;
                             reqSend.media.key = document.key;
                             reqSend.media.iv = document.iv;
-                            performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null, null);
+                            performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
                         }
                     } else if (type == 8) {
                         if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
@@ -921,7 +961,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
                 } else {
                     reqSend.id = msgObj.messageOwner.fwd_msg_id;
                 }
-                performSendMessageRequest(reqSend, newMsgObj, null);
+                performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -929,9 +969,7 @@ private int sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo p
             newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
             processSentMessage(newMsgObj.messageOwner.id);
-            return 0;
         }
-        return newMsg != null ? newMsg.id : 0;
     }
 
     private void performSendDelayedMessage(final DelayedMessage message) {
@@ -1039,26 +1077,26 @@ public void run() {
         });
     }
 
-    private void performSendMessageRequest(final TLObject req, final MessageObject newMsgObj, final String originalPath) {
+    private void performSendMessageRequest(final TLObject req, final TLRPC.Message newMsgObj, final String originalPath) {
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
-                    final int oldId = newMsgObj.messageOwner.id;
+                    final int oldId = newMsgObj.id;
                     final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
                     final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
-                    final String attachPath = newMsgObj.messageOwner.attachPath;
+                    final String attachPath = newMsgObj.attachPath;
 
                     if (response instanceof TLRPC.messages_SentMessage) {
                         TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
-                        newMsgObj.messageOwner.id = res.id;
-                        newMsgObj.messageOwner.date = res.date;
+                        newMsgObj.id = res.id;
+                        newMsgObj.date = res.date;
                         MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date);
                     } else if (response instanceof TLRPC.messages_StatedMessage) {
                         TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                         sentMessages.add(res.message);
-                        newMsgObj.messageOwner.id = res.message.id;
-                        processSentMessage(newMsgObj.messageOwner, res.message, null, null, originalPath);
+                        newMsgObj.id = res.message.id;
+                        processSentMessage(newMsgObj, res.message, null, null, originalPath);
                         MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date);
                     } else if (response instanceof TLRPC.messages_StatedMessages) {
                         TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
@@ -1066,27 +1104,27 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             sentMessages.addAll(res.messages);
                             TLRPC.Message message = res.messages.get(0);
                             if (!isBroadcast) {
-                                newMsgObj.messageOwner.id = message.id;
+                                newMsgObj.id = message.id;
                             }
-                            processSentMessage(newMsgObj.messageOwner, message, null, null, originalPath);
+                            processSentMessage(newMsgObj, message, null, null, originalPath);
                         }
                         MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1);
                     }
                     MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, (isBroadcast ? oldId : newMsgObj.messageOwner.id), 0, false);
+                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, (isBroadcast ? oldId : newMsgObj.id), 0, false);
                             MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast, 0);
                             if (isBroadcast) {
                                 ArrayList<TLRPC.Message> currentMessage = new ArrayList<TLRPC.Message>();
-                                currentMessage.add(newMsgObj.messageOwner);
-                                newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                currentMessage.add(newMsgObj);
+                                newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
                                 MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
                             }
                             AndroidUtilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
                                     if (isBroadcast) {
                                         for (TLRPC.Message message : sentMessages) {
                                             ArrayList<MessageObject> arr = new ArrayList<MessageObject>();
@@ -1096,25 +1134,25 @@ public void run() {
                                         }
                                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
                                     }
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.messageOwner.id), newMsgObj);
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj);
                                     processSentMessage(oldId);
                                 }
                             });
-                            if (newMsgObj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
                                 stopVideoService(attachPath);
                             }
                         }
                     });
                 } else {
-                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
+                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
                     AndroidUtilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
-                            processSentMessage(newMsgObj.messageOwner.id);
-                            if (newMsgObj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                stopVideoService(newMsgObj.messageOwner.attachPath);
+                            newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
+                            processSentMessage(newMsgObj.id);
+                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                stopVideoService(newMsgObj.attachPath);
                             }
                         }
                     });
@@ -1123,11 +1161,11 @@ public void run() {
         }, (req instanceof TLRPC.TL_messages_forwardMessages ? null : new RPCRequest.RPCQuickAckDelegate() {
             @Override
             public void quickAck() {
-                final int msg_id = newMsgObj.messageOwner.id;
+                final int msg_id = newMsgObj.id;
                 AndroidUtilities.RunOnUIThread(new Runnable() {
                     @Override
                     public void run() {
-                        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByAck, msg_id);
                     }
                 });
@@ -1135,7 +1173,7 @@ public void run() {
         }), true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
     }
 
-    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final MessageObject newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath, final Runnable callback) {
+    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final TLRPC.Message newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath) {
         if (req == null || chat.auth_key == null || chat instanceof TLRPC.TL_encryptedChatRequested || chat instanceof TLRPC.TL_encryptedChatWaiting) {
             return;
         }
@@ -1143,15 +1181,33 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
         if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 17) {
             TLRPC.TL_decryptedMessageLayer layer = new TLRPC.TL_decryptedMessageLayer();
             layer.layer = CURRENT_SECRET_CHAT_LAYER;
-            layer.in_seq_no = chat.seq_in;
-            layer.out_seq_no = chat.seq_out;
             layer.message = req;
             layer.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(layer.random_bytes);
             toEncryptObject = layer;
 
-            chat.seq_out += 2;
-            MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
+            if (chat.seq_in == 0 && chat.seq_out == 0) {
+                if (chat.admin_id == UserConfig.getClientUserId()) {
+                    chat.seq_out = 1;
+                } else {
+                    chat.seq_in = 1;
+                }
+            }
+
+            if (newMsgObj.seq_in == 0 && newMsgObj.seq_out == 0) {
+                layer.in_seq_no = chat.seq_in;
+                layer.out_seq_no = chat.seq_out;
+                chat.seq_out += 2;
+                MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
+                if (newMsgObj != null) {
+                    newMsgObj.seq_in = layer.in_seq_no;
+                    newMsgObj.seq_out = layer.out_seq_no;
+                    MessagesStorage.getInstance().setMessageSeq(newMsgObj.id, newMsgObj.seq_in, newMsgObj.seq_out);
+                }
+            } else {
+                layer.in_seq_no = newMsgObj.seq_in;
+                layer.out_seq_no = newMsgObj.seq_out;
+            }
         } else {
             toEncryptObject = req;
         }
@@ -1192,13 +1248,23 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
         TLObject reqToSend = null;
 
         if (encryptedFile == null) {
-            TLRPC.TL_messages_sendEncrypted req2 = new TLRPC.TL_messages_sendEncrypted();
-            req2.data = data;
-            req2.random_id = req.random_id;
-            req2.peer = new TLRPC.TL_inputEncryptedChat();
-            req2.peer.chat_id = chat.id;
-            req2.peer.access_hash = chat.access_hash;
-            reqToSend = req2;
+            if (req instanceof TLRPC.TL_decryptedMessageService) {
+                TLRPC.TL_messages_sendEncryptedService req2 = new TLRPC.TL_messages_sendEncryptedService();
+                req2.data = data;
+                req2.random_id = req.random_id;
+                req2.peer = new TLRPC.TL_inputEncryptedChat();
+                req2.peer.chat_id = chat.id;
+                req2.peer.access_hash = chat.access_hash;
+                reqToSend = req2;
+            } else {
+                TLRPC.TL_messages_sendEncrypted req2 = new TLRPC.TL_messages_sendEncrypted();
+                req2.data = data;
+                req2.random_id = req.random_id;
+                req2.peer = new TLRPC.TL_inputEncryptedChat();
+                req2.peer.chat_id = chat.id;
+                req2.peer.access_hash = chat.access_hash;
+                reqToSend = req2;
+            }
         } else {
             TLRPC.TL_messages_sendEncryptedFile req2 = new TLRPC.TL_messages_sendEncryptedFile();
             req2.data = data;
@@ -1212,28 +1278,47 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
         ConnectionsManager.getInstance().performRpc(reqToSend, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null && callback != null) {
-                    callback.run();
+                if (error == null) {
+                    if (req.action instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                TLRPC.EncryptedChat currentChat = MessagesController.getInstance().getEncryptedChat(chat.id);
+                                sendingNotifyLayer.remove((Integer)currentChat.id);
+                                currentChat.layer = AndroidUtilities.setMyLayerVersion(currentChat.layer, CURRENT_SECRET_CHAT_LAYER);
+                                MessagesStorage.getInstance().updateEncryptedChatLayer(currentChat);
+                            }
+                        });
+                    }
                 }
                 if (newMsgObj != null) {
                     if (error == null) {
-                        final String attachPath = newMsgObj.messageOwner.attachPath;
+                        final String attachPath = newMsgObj.attachPath;
                         final TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
-                        newMsgObj.messageOwner.date = res.date;
+                        if (newMsgObj.action instanceof TLRPC.TL_messageEncryptedAction) {
+                            if (newMsgObj.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || newMsgObj.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                                newMsgObj.date = res.date;
+                            }
+                        }
                         if (res.file instanceof TLRPC.TL_encryptedFile) {
-                            processSentMessage(newMsgObj.messageOwner, null, res.file, req, originalPath);
+                            processSentMessage(newMsgObj, null, res.file, req, originalPath);
                         }
                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                             @Override
                             public void run() {
-                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, false);
+                                if (newMsgObj.action instanceof TLRPC.TL_messageEncryptedAction) {
+                                    if (!(newMsgObj.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || newMsgObj.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL)) {
+                                        res.date = 0;
+                                    }
+                                }
+                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, newMsgObj.id, newMsgObj.id, res.date, false);
                                 AndroidUtilities.RunOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
-                                        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, newMsgObj);
-                                        processSentMessage(newMsgObj.messageOwner.id);
-                                        if (newMsgObj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, newMsgObj.id, newMsgObj.id, newMsgObj);
+                                        processSentMessage(newMsgObj.id);
+                                        if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
                                             stopVideoService(attachPath);
                                         }
                                     }
@@ -1241,15 +1326,15 @@ public void run() {
                             }
                         });
                     } else {
-                        MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
+                        MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
                         AndroidUtilities.RunOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
-                                processSentMessage(newMsgObj.messageOwner.id);
-                                if (newMsgObj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                    stopVideoService(newMsgObj.messageOwner.attachPath);
+                                newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
+                                processSentMessage(newMsgObj.id);
+                                if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                    stopVideoService(newMsgObj.attachPath);
                                 }
                             }
                         });
@@ -1485,7 +1570,38 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
         }
     }
 
-    public void sendMessagesReadMessage(ArrayList<Long> random_ids, TLRPC.EncryptedChat encryptedChat) {
+    private TLRPC.TL_messageService createServiceSecretMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.DecryptedMessageAction decryptedMessage) {
+        TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
+
+        newMsg.action = new TLRPC.TL_messageEncryptedAction();
+        newMsg.action.encryptedAction = decryptedMessage;
+        newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
+        newMsg.from_id = UserConfig.getClientUserId();
+        newMsg.flags = TLRPC.MESSAGE_FLAG_UNREAD | TLRPC.MESSAGE_FLAG_OUT;
+        newMsg.dialog_id = ((long)encryptedChat.id) << 32;
+        newMsg.to_id = new TLRPC.TL_peerUser();
+        newMsg.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
+            newMsg.to_id.user_id = encryptedChat.admin_id;
+        } else {
+            newMsg.to_id.user_id = encryptedChat.participant_id;
+        }
+        if (decryptedMessage instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || decryptedMessage instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
+        } else {
+            newMsg.date = 0;
+        }
+        newMsg.random_id = getNextRandomId();
+        UserConfig.saveConfig(false);
+
+        ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
+        arr.add(newMsg);
+        MessagesStorage.getInstance().putMessages(arr, false, true, true, 0);
+
+        return newMsg;
+    }
+
+    public void sendMessagesReadMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
         if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
             return;
         }
@@ -1497,13 +1613,23 @@ public void sendMessagesReadMessage(ArrayList<Long> random_ids, TLRPC.EncryptedC
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = getNextRandomId();
-        reqSend.action = new TLRPC.TL_decryptedMessageActionReadMessages();
-        reqSend.action.random_ids = random_ids;
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null, null);
+
+        TLRPC.Message message = null;
+
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
+        } else {
+            reqSend.action = new TLRPC.TL_decryptedMessageActionReadMessages();
+            reqSend.action.random_ids = random_ids;
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
+        }
+        reqSend.random_id = message.random_id;
+
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
     }
 
-    public void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.EncryptedChat encryptedChat) {
+    public void sendMessagesDeleteMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
         if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
             return;
         }
@@ -1515,13 +1641,23 @@ public void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.Encrypte
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = getNextRandomId();
-        reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
-        reqSend.action.random_ids = random_ids;
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null, null);
+
+        TLRPC.Message message = null;
+
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
+        } else {
+            reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
+            reqSend.action.random_ids = random_ids;
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
+        }
+        reqSend.random_id = message.random_id;
+
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
     }
 
-    public void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
+    public void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
         if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
             return;
         }
@@ -1533,12 +1669,22 @@ public void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = getNextRandomId();
-        reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null, null);
+
+        TLRPC.Message message = null;
+
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
+        } else {
+            reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
+        }
+        reqSend.random_id = message.random_id;
+
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
     }
 
-    public void sendNotifyLayerMessage(final TLRPC.EncryptedChat encryptedChat) {
+    public void sendNotifyLayerMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
         if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
             return;
         }
@@ -1554,57 +1700,26 @@ public void sendNotifyLayerMessage(final TLRPC.EncryptedChat encryptedChat) {
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = getNextRandomId();
-        reqSend.action = new TLRPC.TL_decryptedMessageActionNotifyLayer();
-        reqSend.action.layer = CURRENT_SECRET_CHAT_LAYER;
-        Runnable callback = new Runnable() {
-            @Override
-            public void run() {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(encryptedChat.id);
-                        sendingNotifyLayer.remove((Integer)chat.id);
-                        chat.layer = AndroidUtilities.setMyLayerVersion(chat.layer, CURRENT_SECRET_CHAT_LAYER);
-                        MessagesStorage.getInstance().updateEncryptedChatLayer(chat);
-                    }
-                });
-            }
-        };
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null, callback);
-    }
 
-    public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
+        TLRPC.Message message = null;
 
-        newMsg.action = new TLRPC.TL_messageActionTTLChange();
-        newMsg.action.ttl = encryptedChat.ttl;
-        newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.getClientUserId();
-        newMsg.flags = TLRPC.MESSAGE_FLAG_UNREAD | TLRPC.MESSAGE_FLAG_OUT;
-        newMsg.dialog_id = ((long)encryptedChat.id) << 32;
-        newMsg.to_id = new TLRPC.TL_peerUser();
-        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
-            newMsg.to_id.user_id = encryptedChat.admin_id;
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
         } else {
-            newMsg.to_id.user_id = encryptedChat.participant_id;
+            reqSend.action = new TLRPC.TL_decryptedMessageActionNotifyLayer();
+            reqSend.action.layer = CURRENT_SECRET_CHAT_LAYER;
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
         }
-        newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-        newMsg.random_id = getNextRandomId();
-        UserConfig.saveConfig(false);
-        final MessageObject newMsgObj = new MessageObject(newMsg, null);
-        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+        reqSend.random_id = message.random_id;
 
-        final ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
-        objArr.add(newMsgObj);
-        ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
-        arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-        MessagesController.getInstance().updateInterfaceWithMessages(newMsg.dialog_id, objArr);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
+    }
+
+    public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
 
         TLRPC.TL_decryptedMessageService reqSend = null;
         if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
@@ -1614,48 +1729,33 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = newMsg.random_id;
-        reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
-        reqSend.action.ttl_seconds = encryptedChat.ttl;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null, null);
-    }
-
-    public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
 
-        TLRPC.TL_decryptedMessageActionScreenshotMessages action = new TLRPC.TL_decryptedMessageActionScreenshotMessages();
-        action.random_ids = random_ids;
+        TLRPC.Message message = null;
 
-        TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
-
-        newMsg.action = new TLRPC.TL_messageEcryptedAction();
-        newMsg.action.encryptedAction = action;
-
-        newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.getClientUserId();
-        newMsg.flags = TLRPC.MESSAGE_FLAG_UNREAD | TLRPC.MESSAGE_FLAG_OUT;
-        newMsg.dialog_id = ((long)encryptedChat.id) << 32;
-        newMsg.to_id = new TLRPC.TL_peerUser();
-        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
-            newMsg.to_id.user_id = encryptedChat.admin_id;
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
         } else {
-            newMsg.to_id.user_id = encryptedChat.participant_id;
+            reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
+            reqSend.action.ttl_seconds = encryptedChat.ttl;
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
+
+            MessageObject newMsgObj = new MessageObject(message, null);
+            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+            ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
+            objArr.add(newMsgObj);
+            MessagesController.getInstance().updateInterfaceWithMessages(message.dialog_id, objArr);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
         }
-        newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-        newMsg.random_id = getNextRandomId();
-        UserConfig.saveConfig(false);
-        final MessageObject newMsgObj = new MessageObject(newMsg, null);
-        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+        reqSend.random_id = message.random_id;
 
-        final ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
-        objArr.add(newMsgObj);
-        ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
-        arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-        MessagesController.getInstance().updateInterfaceWithMessages(newMsg.dialog_id, objArr);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
+    }
+
+    public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
 
         TLRPC.TL_decryptedMessageService reqSend = null;
         if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
@@ -1665,9 +1765,27 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
             reqSend.random_bytes = new byte[Math.max(1, (int) Math.ceil(Utilities.random.nextDouble() * 16))];
             Utilities.random.nextBytes(reqSend.random_bytes);
         }
-        reqSend.random_id = newMsg.random_id;
-        reqSend.action = action;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null, null);
+
+        TLRPC.Message message = null;
+
+        if (resendMessage != null) {
+            message = resendMessage;
+            reqSend.action = message.action.encryptedAction;
+        } else {
+            reqSend.action = new TLRPC.TL_decryptedMessageActionScreenshotMessages();
+            reqSend.action.random_ids = random_ids;
+            message = createServiceSecretMessage(encryptedChat, reqSend.action);
+
+            MessageObject newMsgObj = new MessageObject(message, null);
+            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+            ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
+            objArr.add(newMsgObj);
+            MessagesController.getInstance().updateInterfaceWithMessages(message.dialog_id, objArr);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        }
+        reqSend.random_id = message.random_id;
+
+        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
     }
 
     private void putToDelayedMessages(String location, DelayedMessage message) {
@@ -1688,7 +1806,7 @@ private long getNextRandomId() {
     }
 
     public void checkUnsentMessages() {
-        MessagesStorage.getInstance().getUnsentMessages(10);
+        MessagesStorage.getInstance().getUnsentMessages(1000);
     }
 
     protected void processUnsentMessages(final ArrayList<TLRPC.Message> messages, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
index a04e8d4c4..9d9eca96d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
@@ -54,12 +54,13 @@
 
     private InterleaveChunkMdat mdat = null;
     private Mp4Movie currentMp4Movie = null;
-    FileOutputStream fos = null;
+    private FileOutputStream fos = null;
     private FileChannel fc = null;
     private long dataOffset = 0;
     private long writedSinceLastMdat = 0;
     private boolean writeNewMdat = true;
-    HashMap<Track, long[]> track2SampleSizes = new HashMap<Track, long[]>();
+    private HashMap<Track, long[]> track2SampleSizes = new HashMap<Track, long[]>();
+    private ByteBuffer sizeBuffer = null;
 
     public MP4Builder createMovie(Mp4Movie mp4Movie) throws Exception {
         currentMp4Movie = mp4Movie;
@@ -74,6 +75,8 @@ public MP4Builder createMovie(Mp4Movie mp4Movie) throws Exception {
 
         mdat = new InterleaveChunkMdat();
 
+        sizeBuffer = ByteBuffer.allocateDirect(4);
+
         return this;
     }
 
@@ -87,7 +90,7 @@ private void flushCurrentMdat() throws Exception {
         fos.flush();
     }
 
-    public boolean writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo) throws Exception {
+    public boolean writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo, boolean isAudio) throws Exception {
         if (writeNewMdat) {
             mdat.setContentSize(0);
             mdat.getBox(fc);
@@ -109,9 +112,16 @@ public boolean writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.Bu
         }
 
         currentMp4Movie.addSample(trackIndex, dataOffset, bufferInfo);
-        byteBuf.position(bufferInfo.offset);
+        byteBuf.position(bufferInfo.offset + (isAudio ? 0 : 4));
         byteBuf.limit(bufferInfo.offset + bufferInfo.size);
 
+        if (!isAudio) {
+            sizeBuffer.position(0);
+            sizeBuffer.putInt(bufferInfo.size - 4);
+            sizeBuffer.position(0);
+            fc.write(sizeBuffer);
+        }
+
         fc.write(byteBuf);
         dataOffset += bufferInfo.size;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 755deabc8..81ed6d884 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -833,7 +833,7 @@ private TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest reque
                 }
                 object = invoke;
             }
-            TLRPC.invokeWithLayer17 invoke = new TLRPC.invokeWithLayer17();
+            TLRPC.invokeWithLayer18 invoke = new TLRPC.invokeWithLayer18();
             invoke.query = object;
             FileLog.d("wrap in layer", "" + object);
             return invoke;
@@ -1386,7 +1386,9 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                     if (rawRequest != null && (rawRequest instanceof TLRPC.TL_messages_sendMessage ||
                             rawRequest instanceof TLRPC.TL_messages_sendMedia ||
                             rawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                            rawRequest instanceof TLRPC.TL_messages_sendEncrypted)) {
+                            rawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
+                            rawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
+                            rawRequest instanceof TLRPC.TL_messages_sendEncryptedService)) {
 
                         if (rawRequest instanceof TLRPC.TL_messages_sendMessage) {
                             hasSendMessage = true;
@@ -1404,7 +1406,9 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                                 if (currentRawRequest instanceof TLRPC.TL_messages_sendMessage ||
                                         currentRawRequest instanceof TLRPC.TL_messages_sendMedia ||
                                         currentRawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncrypted) {
+                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
+                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
+                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncryptedService) {
                                     currentRequests.add(currentMessage.msg_id);
                                 }
                             }
@@ -1414,7 +1418,9 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                                 if (request.rawRequest instanceof TLRPC.TL_messages_sendMessage ||
                                         request.rawRequest instanceof TLRPC.TL_messages_sendMedia ||
                                         request.rawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncrypted) {
+                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
+                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
+                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncryptedService) {
                                     if (!currentRequests.contains(request.runningMessageId)) {
                                         maxRequestId = Math.max(maxRequestId, request.runningMessageId);
                                     }
@@ -1608,12 +1614,12 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayLis
             TLRPC.TL_protoMessage message = networkMessage.protoMessage;
 
             if (BuildVars.DEBUG_VERSION) {
-                if (message.body instanceof TLRPC.invokeWithLayer17) {
-                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer17)message.body).query);
+                if (message.body instanceof TLRPC.invokeWithLayer18) {
+                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)message.body).query);
                 } else if (message.body instanceof TLRPC.initConnection) {
                     TLRPC.initConnection r = (TLRPC.initConnection)message.body;
-                    if (r.query instanceof TLRPC.invokeWithLayer17) {
-                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer17)r.query).query);
+                    if (r.query instanceof TLRPC.invokeWithLayer18) {
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)r.query).query);
                     } else {
                         FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                     }
@@ -1648,12 +1654,12 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayLis
                 TLRPC.TL_protoMessage message = networkMessage.protoMessage;
                 containerMessages.add(message);
                 if (BuildVars.DEBUG_VERSION) {
-                    if (message.body instanceof TLRPC.invokeWithLayer17) {
-                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer17)message.body).query);
+                    if (message.body instanceof TLRPC.invokeWithLayer18) {
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)message.body).query);
                     } else if (message.body instanceof TLRPC.initConnection) {
                         TLRPC.initConnection r = (TLRPC.initConnection)message.body;
-                        if (r.query instanceof TLRPC.invokeWithLayer17) {
-                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer17)r.query).query);
+                        if (r.query instanceof TLRPC.invokeWithLayer18) {
+                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)r.query).query);
                         } else {
                             FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                         }
@@ -2070,12 +2076,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                 int errorCode = ((TLRPC.RpcError) resultContainer.result).error_code;
 
                                 if (errorCode == 500 || errorCode < 0) {
-                                    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {
-                                        if (request.serverFailureCount < 1) {
-                                            discardResponse = true;
-                                            request.runningMinStartTime = request.runningStartTime + 1;
-                                        }
-                                    } else {
+                                    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {
                                         discardResponse = true;
                                         int delay = Math.min(1, request.serverFailureCount * 2);
                                         request.runningMinStartTime = request.runningStartTime + delay;
@@ -2437,6 +2438,7 @@ public void run() {
                 }
             });
         } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+            FileLog.e("tmessages", "call connection closed");
             sendingPushPing = false;
             lastPushPingTime = System.currentTimeMillis() - 60000 * 3 + 4000;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index f67e955f9..0a134c094 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -176,7 +176,7 @@ public void run() {
                                 }
                                 if (small) {
                                     currentUploadSmallOperationsCount--;
-                                    if (currentUploadSmallOperationsCount < 2) {
+                                    if (currentUploadSmallOperationsCount < 1) {
                                         FileUploadOperation operation = uploadSmallOperationQueue.poll();
                                         if (operation != null) {
                                             currentUploadSmallOperationsCount++;
@@ -185,7 +185,7 @@ public void run() {
                                     }
                                 } else {
                                     currentUploadOperationsCount--;
-                                    if (currentUploadOperationsCount < 2) {
+                                    if (currentUploadOperationsCount < 1) {
                                         FileUploadOperation operation = uploadOperationQueue.poll();
                                         if (operation != null) {
                                             currentUploadOperationsCount++;
@@ -227,7 +227,7 @@ public void run() {
                                 });
                                 if (small) {
                                     currentUploadSmallOperationsCount--;
-                                    if (currentUploadSmallOperationsCount < 2) {
+                                    if (currentUploadSmallOperationsCount < 1) {
                                         FileUploadOperation operation = uploadSmallOperationQueue.poll();
                                         if (operation != null) {
                                             currentUploadSmallOperationsCount++;
@@ -236,7 +236,7 @@ public void run() {
                                     }
                                 } else {
                                     currentUploadOperationsCount--;
-                                    if (currentUploadOperationsCount < 2) {
+                                    if (currentUploadOperationsCount < 1) {
                                         FileUploadOperation operation = uploadOperationQueue.poll();
                                         if (operation != null) {
                                             currentUploadOperationsCount++;
@@ -259,14 +259,14 @@ public void didChangedUploadProgress(FileUploadOperation operation, final float
                     }
                 };
                 if (small) {
-                    if (currentUploadSmallOperationsCount < 2) {
+                    if (currentUploadSmallOperationsCount < 1) {
                         currentUploadSmallOperationsCount++;
                         operation.start();
                     } else {
                         uploadSmallOperationQueue.add(operation);
                     }
                 } else {
-                    if (currentUploadOperationsCount < 2) {
+                    if (currentUploadOperationsCount < 1) {
                         currentUploadOperationsCount++;
                         operation.start();
                     } else {
@@ -704,4 +704,26 @@ public static String getAttachFileName(TLObject attach) {
         }
         return "";
     }
+
+    public void deleteFiles(final ArrayList<File> files) {
+        if (files == null || files.isEmpty()) {
+            return;
+        }
+        fileLoaderQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                for (File file : files) {
+                    if (file.exists()) {
+                        try {
+                            if (!file.delete()) {
+                                file.deleteOnExit();
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+            }
+        });
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index 2e2f94524..aa690ca1e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -198,6 +198,7 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_updateReadMessages.constructor, TLRPC.TL_updateReadMessages.class);
         classStore.put(TLRPC.TL_updateChatParticipantDelete.constructor, TLRPC.TL_updateChatParticipantDelete.class);
         classStore.put(TLRPC.TL_updateRestoreMessages.constructor, TLRPC.TL_updateRestoreMessages.class);
+        classStore.put(TLRPC.TL_updateServiceNotification.constructor, TLRPC.TL_updateServiceNotification.class);
         classStore.put(TLRPC.TL_updateNotifySettings.constructor, TLRPC.TL_updateNotifySettings.class);
         classStore.put(TLRPC.TL_updateUserTyping.constructor, TLRPC.TL_updateUserTyping.class);
         classStore.put(TLRPC.TL_updateChatUserTyping.constructor, TLRPC.TL_updateChatUserTyping.class);
@@ -226,6 +227,7 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_inputEncryptedFileEmpty.constructor, TLRPC.TL_inputEncryptedFileEmpty.class);
         classStore.put(TLRPC.TL_inputEncryptedFileUploaded.constructor, TLRPC.TL_inputEncryptedFileUploaded.class);
         classStore.put(TLRPC.TL_decryptedMessageActionFlushHistory.constructor, TLRPC.TL_decryptedMessageActionFlushHistory.class);
+        classStore.put(TLRPC.TL_decryptedMessageActionResend.constructor, TLRPC.TL_decryptedMessageActionResend.class);
         classStore.put(TLRPC.TL_decryptedMessageActionNotifyLayer.constructor, TLRPC.TL_decryptedMessageActionNotifyLayer.class);
         classStore.put(TLRPC.TL_decryptedMessageActionSetMessageTTL.constructor, TLRPC.TL_decryptedMessageActionSetMessageTTL.class);
         classStore.put(TLRPC.TL_decryptedMessageActionDeleteMessages.constructor, TLRPC.TL_decryptedMessageActionDeleteMessages.class);
@@ -363,6 +365,12 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_decryptedMessageService_old.constructor, TLRPC.TL_decryptedMessageService_old.class);
         classStore.put(TLRPC.TL_decryptedMessage_old.constructor, TLRPC.TL_decryptedMessage_old.class);
         classStore.put(TLRPC.TL_message_secret.constructor, TLRPC.TL_message_secret.class);
+        classStore.put(TLRPC.TL_userSelf_old.constructor, TLRPC.TL_userSelf_old.class);
+        classStore.put(TLRPC.TL_userContact_old.constructor, TLRPC.TL_userContact_old.class);
+        classStore.put(TLRPC.TL_userRequest_old.constructor, TLRPC.TL_userRequest_old.class);
+        classStore.put(TLRPC.TL_userForeign_old.constructor, TLRPC.TL_userForeign_old.class);
+        classStore.put(TLRPC.TL_userDeleted_old.constructor, TLRPC.TL_userDeleted_old.class);
+        classStore.put(TLRPC.TL_messageEncryptedAction.constructor, TLRPC.TL_messageEncryptedAction.class);
     }
 
     static TLClassStore store = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index f985df2ce..af8559cb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -2084,13 +2084,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userContact extends User {
-        public static int constructor = 0xf2fb8319;
+        public static int constructor = 0xcab35e18;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
             access_hash = stream.readInt64();
             phone = stream.readString();
             photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
@@ -2102,6 +2103,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
             stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
@@ -2110,13 +2112,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userRequest extends User {
-        public static int constructor = 0x22e8ceb0;
+        public static int constructor = 0xd9ccc4ef;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
             access_hash = stream.readInt64();
             phone = stream.readString();
             photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
@@ -2128,6 +2131,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
             stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
@@ -2136,13 +2140,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userForeign extends User {
-        public static int constructor = 0x5214c89d;
+        public static int constructor = 0x75cf7a8;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
             access_hash = stream.readInt64();
             photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
@@ -2153,6 +2158,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
             stream.writeInt64(access_hash);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
@@ -2160,13 +2166,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userDeleted extends User {
-        public static int constructor = 0xb29ad7cc;
+        public static int constructor = 0xd6016d7a;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -2174,17 +2181,19 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
         }
     }
 
     public static class TL_userSelf extends User {
-        public static int constructor = 0x720535ec;
+        public static int constructor = 0x7007b451;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
             phone = stream.readString();
             photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
@@ -2196,6 +2205,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
             stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
@@ -3425,11 +3435,15 @@ public void serializeToStream(AbsSerializedData stream) {
         public ArrayList<Integer> messages = new ArrayList<Integer>();
         public int pts;
         public int version;
+        public String type;
+        public MessageMedia media;
+        public boolean popup;
         public NotifyPeer peer;
         public PeerNotifySettings notify_settings;
         public SendMessageAction action;
         public String first_name;
         public String last_name;
+        public String username;
         public int qts;
         public int id;
         public long random_id;
@@ -3550,6 +3564,27 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_updateServiceNotification extends Update {
+        public static int constructor = 0x382dd3e4;
+
+        public String message;
+
+        public void readParams(AbsSerializedData stream) {
+            type = stream.readString();
+            message = stream.readString();
+            media = (MessageMedia)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            popup = stream.readBool();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(type);
+            stream.writeString(message);
+            media.serializeToStream(stream);
+            stream.writeBool(popup);
+        }
+    }
+
     public static class TL_updateNotifySettings extends Update {
         public static int constructor = 0xbec268ef;
 
@@ -3601,13 +3636,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateUserName extends Update {
-        public static int constructor = 0xda22d9ad;
+        public static int constructor = 0xa7332b73;
 
 
         public void readParams(AbsSerializedData stream) {
             user_id = stream.readInt32();
             first_name = stream.readString();
             last_name = stream.readString();
+            username = stream.readString();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3615,6 +3651,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(user_id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
         }
     }
 
@@ -4037,6 +4074,8 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class DecryptedMessageAction extends TLObject {
+        public int start_seq_no;
+        public int end_seq_no;
         public int layer;
         public int ttl_seconds;
         public ArrayList<Long> random_ids = new ArrayList<Long>();
@@ -4064,6 +4103,22 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_decryptedMessageActionResend extends DecryptedMessageAction {
+        public static int constructor = 0x511110b0;
+
+
+        public void readParams(AbsSerializedData stream) {
+            start_seq_no = stream.readInt32();
+            end_seq_no = stream.readInt32();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(start_seq_no);
+            stream.writeInt32(end_seq_no);
+        }
+    }
+
     public static class TL_decryptedMessageActionNotifyLayer extends DecryptedMessageAction {
         public static int constructor = 0xf3048883;
 
@@ -4572,6 +4627,44 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_account_checkUsername extends TLObject {
+        public static int constructor = 0x2714d86c;
+
+        public String username;
+
+        public Class responseClass () {
+            return Bool.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            username = stream.readString();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(username);
+        }
+    }
+
+    public static class TL_account_updateUsername extends TLObject {
+        public static int constructor = 0x3e0bdd7c;
+
+        public String username;
+
+        public Class responseClass () {
+            return User.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            username = stream.readString();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(username);
+        }
+    }
+
     public static class InputAudio extends TLObject {
         public long id;
         public long access_hash;
@@ -8336,32 +8429,157 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    //manually created
+
     public static class TL_messages_sendEncryptedService extends TLObject {
         public static int constructor = 0x32d439a4;
 
         public TL_inputEncryptedChat peer;
         public long random_id;
-        public byte[] data;
+        public ByteBufferDesc data;
 
         public Class responseClass () {
             return messages_SentEncryptedMessage.class;
         }
 
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            peer.serializeToStream(stream);
+            stream.writeInt64(random_id);
+            stream.writeByteBuffer(data);
+        }
+
+        @Override
+        public void freeResources() {
+            if (disableFree) {
+                return;
+            }
+            if (data != null) {
+                BuffersStorage.getInstance().reuseFreeBuffer(data);
+                data = null;
+            }
+        }
+    }
+
+    public static class TL_userDeleted_old extends TL_userDeleted {
+        public static int constructor = 0xb29ad7cc;
+
+
         public void readParams(AbsSerializedData stream) {
-            peer = (TL_inputEncryptedChat)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
-            random_id = stream.readInt64();
-            data = stream.readByteArray();
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
-            peer.serializeToStream(stream);
-            stream.writeInt64(random_id);
-            stream.writeByteArray(data);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
         }
     }
 
-    //manually created
+    public static class TL_userForeign_old extends TL_userForeign {
+        public static int constructor = 0x5214c89d;
+
+
+        public void readParams(AbsSerializedData stream) {
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
+            access_hash = stream.readInt64();
+            photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeInt64(access_hash);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_userRequest_old extends TL_userRequest {
+        public static int constructor = 0x22e8ceb0;
+
+
+        public void readParams(AbsSerializedData stream) {
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
+            access_hash = stream.readInt64();
+            phone = stream.readString();
+            photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeInt64(access_hash);
+            stream.writeString(phone);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_userContact_old extends TL_userContact {
+        public static int constructor = 0xf2fb8319;
+
+
+        public void readParams(AbsSerializedData stream) {
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
+            access_hash = stream.readInt64();
+            phone = stream.readString();
+            photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeInt64(access_hash);
+            stream.writeString(phone);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_userSelf_old extends TL_userSelf {
+        public static int constructor = 0x720535ec;
+
+
+        public void readParams(AbsSerializedData stream) {
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
+            phone = stream.readString();
+            photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            inactive = stream.readBool();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeString(phone);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+            stream.writeBool(inactive);
+        }
+    }
 
     public static class TL_set_client_DH_params extends TLObject {
         public static int constructor = 0xf5045f1f;
@@ -8777,6 +8995,8 @@ public void serializeToStream(AbsSerializedData stream) {
         public int ttl;
         public int destroyTime;
         public int layer;
+        public int seq_in;
+        public int seq_out;
         public VideoEditedInfo videoEditedInfo = null;
     }
 
@@ -9129,6 +9349,7 @@ public void parseVector(Vector vector, AbsSerializedData data) {
         public int id;
         public String first_name;
         public String last_name;
+        public String username;
         public long access_hash;
         public String phone;
         public UserProfilePhoto photo;
@@ -9629,8 +9850,8 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class invokeWithLayer17 extends TLObject {
-        public static int constructor = 0x50858a19;
+    public static class invokeWithLayer18 extends TLObject {
+        public static int constructor = 0x1c900537;
 
         public TLObject query;
 
@@ -9779,7 +10000,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messageEcryptedAction extends MessageAction {
+    public static class TL_messageEncryptedAction extends MessageAction {
         public static int constructor = 0x555555F7;
 
         public void readParams(AbsSerializedData stream) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
new file mode 100644
index 000000000..e639fb166
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
@@ -0,0 +1,61 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+
+import java.util.ArrayList;
+
+public class BaseContactsSearchAdapter extends BaseFragmentAdapter {
+
+    protected ArrayList<TLRPC.User> globalSearch = new ArrayList<TLRPC.User>();
+    private long reqId = 0;
+    private int lastReqId;
+    protected String lastFoundUsername = null;
+
+    public void queryServerSearch(final String query) {
+        if (query == null || query.length() < 5) {
+            if (reqId != 0) {
+                ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                reqId = 0;
+            }
+            globalSearch.clear();
+            lastReqId = 0;
+            notifyDataSetChanged();
+            return;
+        }
+        TLRPC.TL_contacts_search req = new TLRPC.TL_contacts_search();
+        req.q = query;
+        req.limit = 50;
+        final int currentReqId = ++lastReqId;
+        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (currentReqId == lastReqId) {
+                            if (error == null) {
+                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
+                                globalSearch = res.users;
+                                lastFoundUsername = query;
+                                notifyDataSetChanged();
+                            }
+                        }
+                        reqId = 0;
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
index e148cf9c6..184e06a1e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
@@ -14,6 +14,7 @@
 import android.widget.BaseAdapter;
 
 public class BaseFragmentAdapter extends BaseAdapter {
+
     public void onFragmentCreate() {
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java
index 78cb606e4..1bc0b293f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java
@@ -21,6 +21,7 @@
 import org.telegram.messenger.R;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Views.SectionedBaseAdapter;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -202,12 +203,10 @@ public View getSectionHeaderView(int section, View convertView, ViewGroup parent
         if (usersAsSections) {
             if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
                 if (convertView == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    convertView = li.inflate(R.layout.settings_section_layout, parent, false);
+                    convertView = new SettingsSectionLayout(mContext);
                     convertView.setBackgroundColor(0xffffffff);
                 }
-                TextView textView = (TextView)convertView.findViewById(R.id.settings_section_text);
-                textView.setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
                 return convertView;
             }
         } else {
@@ -221,12 +220,10 @@ public View getSectionHeaderView(int section, View convertView, ViewGroup parent
         }
 
         if (convertView == null) {
-            LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            convertView = li.inflate(R.layout.settings_section_layout, parent, false);
+            convertView = new SettingsSectionLayout(mContext);
             convertView.setBackgroundColor(0xffffffff);
         }
-        TextView textView = (TextView)convertView.findViewById(R.id.settings_section_text);
-        textView.setText(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
+        ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
         return convertView;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
index c6fc1baf0..d58d86bdf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
@@ -9,10 +9,13 @@
 package org.telegram.ui.Adapters;
 
 import android.content.Context;
+import android.text.Html;
 import android.view.View;
 import android.view.ViewGroup;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.ContactsController;
 import org.telegram.messenger.FileLog;
@@ -20,28 +23,34 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Cells.ChatOrUserCell;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Timer;
 import java.util.TimerTask;
 
-public class ContactsActivitySearchAdapter extends BaseFragmentAdapter {
+public class ContactsActivitySearchAdapter extends BaseContactsSearchAdapter {
     private Context mContext;
     private HashMap<Integer, TLRPC.User> ignoreUsers;
     private ArrayList<TLRPC.User> searchResult;
     private ArrayList<CharSequence> searchResultNames;
     private Timer searchTimer;
+    private boolean allowUsernameSearch;
 
-    public ContactsActivitySearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1) {
+    public ContactsActivitySearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
         mContext = context;
         ignoreUsers = arg1;
+        allowUsernameSearch = usernameSearch;
     }
 
     public void searchDialogs(final String query) {
         if (query == null) {
-            searchResult = null;
-            searchResultNames = null;
+            searchResult.clear();
+            searchResultNames.clear();
+            if (allowUsernameSearch) {
+                queryServerSearch(null);
+            }
             notifyDataSetChanged();
         } else {
             try {
@@ -63,7 +72,7 @@ public void run() {
                     }
                     processSearch(query);
                 }
-            }, 100, 300);
+            }, 200, 300);
         }
     }
 
@@ -71,6 +80,9 @@ private void processSearch(final String query) {
         AndroidUtilities.RunOnUIThread(new Runnable() {
             @Override
             public void run() {
+                if (allowUsernameSearch) {
+                    queryServerSearch(query);
+                }
                 final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
                 contactsCopy.addAll(ContactsController.getInstance().contacts);
                 Utilities.searchQueue.postRunnable(new Runnable() {
@@ -87,12 +99,25 @@ public void run() {
 
                         for (TLRPC.TL_contact contact : contactsCopy) {
                             TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                            if (user.id == UserConfig.getClientUserId()) {
+                                continue;
+                            }
+
                             String name = ContactsController.formatName(user.first_name, user.last_name).toLowerCase();
+
+                            int found = 0;
                             if (name.startsWith(q) || name.contains(" " + q)) {
-                                if (user.id == UserConfig.getClientUserId()) {
-                                    continue;
+                                found = 1;
+                            } else if (user.username != null && user.username.startsWith(q)) {
+                                found = 2;
+                            }
+
+                            if (found != 0) {
+                                if (found == 1) {
+                                    resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                } else {
+                                    resultArrayNames.add(Utilities.generateSearchName("@" + user.username, null, "@" + q));
                                 }
-                                resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
                                 resultArray.add(user);
                             }
                         }
@@ -117,28 +142,43 @@ public void run() {
 
     @Override
     public boolean areAllItemsEnabled() {
-        return true;
+        return false;
     }
 
     @Override
     public boolean isEnabled(int i) {
-        return true;
+        return i != searchResult.size();
     }
 
     @Override
     public int getCount() {
-        if (searchResult == null) {
-            return 0;
+        int count = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (globalCount != 0) {
+            count += globalCount + 1;
         }
-        return searchResult.size();
+        return count;
+    }
+
+    public boolean isGlobalSearch(int i) {
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return false;
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return true;
+        }
+        return false;
     }
 
     @Override
     public TLRPC.User getItem(int i) {
-        if (searchResult != null) {
-            if (i >= 0 && i < searchResult.size()) {
-                return searchResult.get(i);
-            }
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return searchResult.get(i);
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return globalSearch.get(i - localCount - 1);
         }
         return null;
     }
@@ -155,24 +195,47 @@ public boolean hasStableIds() {
 
     @Override
     public View getView(int i, View view, ViewGroup viewGroup) {
-        if (view == null) {
-            view = new ChatOrUserCell(mContext);
-            ((ChatOrUserCell)view).usePadding = false;
-        }
-
-        ((ChatOrUserCell) view).useSeparator = i != searchResult.size() - 1;
+        if (i == searchResult.size()) {
+            if (view == null) {
+                view = new SettingsSectionLayout(mContext);
+                ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+            }
+        } else {
+            if (view == null) {
+                view = new ChatOrUserCell(mContext);
+                ((ChatOrUserCell) view).usePadding = false;
+            }
 
-        Object obj = searchResult.get(i);
-        TLRPC.User user = MessagesController.getInstance().getUser(((TLRPC.User)obj).id);
+            ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+            TLRPC.User user = getItem(i);
+            if (user != null) {
+                CharSequence username = null;
+                CharSequence name = null;
+                if (i < searchResult.size()) {
+                    name = searchResultNames.get(i);
+                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                        if (name.toString().startsWith("@" + user.username)) {
+                            username = name;
+                            name = null;
+                        }
+                    }
+                } else if (i > searchResult.size() && user.username != null) {
+                    try {
+                        username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                    } catch (Exception e) {
+                        username = user.username;
+                        FileLog.e("tmessages", e);
+                    }
+                }
 
-        if (user != null) {
-            ((ChatOrUserCell)view).setData(user, null, null, searchResultNames.get(i), null);
+                ((ChatOrUserCell) view).setData(user, null, null, name, username);
 
-            if (ignoreUsers != null) {
-                if (ignoreUsers.containsKey(user.id)) {
-                    ((ChatOrUserCell)view).drawAlpha = 0.5f;
-                } else {
-                    ((ChatOrUserCell)view).drawAlpha = 1.0f;
+                if (ignoreUsers != null) {
+                    if (ignoreUsers.containsKey(user.id)) {
+                        ((ChatOrUserCell) view).drawAlpha = 0.5f;
+                    } else {
+                        ((ChatOrUserCell) view).drawAlpha = 1.0f;
+                    }
                 }
             }
         }
@@ -181,16 +244,19 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
     @Override
     public int getItemViewType(int i) {
+        if (i == searchResult.size()) {
+            return 1;
+        }
         return 0;
     }
 
     @Override
     public int getViewTypeCount() {
-        return 1;
+        return 2;
     }
 
     @Override
     public boolean isEmpty() {
-        return searchResult == null || searchResult.size() == 0;
+        return searchResult.isEmpty() && globalSearch.isEmpty();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 7dd0b4c98..02849344c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -275,12 +275,14 @@ protected void onDraw(Canvas canvas) {
         backgroundDrawable.draw(canvas);
 
         if (currentMessageObject.type == 11) {
-            imageReceiver.draw(canvas, imageReceiver.getImageX(), imageReceiver.getImageY(), imageReceiver.getImageWidth(), imageReceiver.getImageHeight());
+            imageReceiver.draw(canvas);
         }
 
-        canvas.save();
-        canvas.translate(textXLeft, textY);
-        textLayout.draw(canvas);
-        canvas.restore();
+        if (textLayout != null) {
+            canvas.save();
+            canvas.translate(textXLeft, textY);
+            textLayout.draw(canvas);
+            canvas.restore();
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index b6041c688..4569a7094 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -36,6 +36,7 @@
     private static TextPaint timePaint;
 
     private ImageReceiver avatarImage;
+    private boolean needAvatarImage = false;
     private SeekBar seekBar;
     private ProgressView progressView;
     private int seekBarX;
@@ -117,7 +118,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     buttonPressed = true;
                     invalidate();
                     result = true;
-                } else if (avatarImage.isInsideImage(x, y)) {
+                } else if (needAvatarImage && avatarImage.isInsideImage(x, y)) {
                     avatarPressed = true;
                     result = true;
                 }
@@ -317,11 +318,19 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
                 timeX = AndroidUtilities.dp(80);
             }
         }
-        avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+        int diff = 0;
+        if (needAvatarImage) {
+            avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+        } else {
+            diff = AndroidUtilities.dp(56);
+            seekBarX -= diff;
+            buttonX -= diff;
+            timeX -= diff;
+        }
 
-        seekBar.width = backgroundWidth - AndroidUtilities.dp(112);
+        seekBar.width = backgroundWidth - AndroidUtilities.dp(112) + diff;
         seekBar.height = AndroidUtilities.dp(30);
-        progressView.width = backgroundWidth - AndroidUtilities.dp(136);
+        progressView.width = backgroundWidth - AndroidUtilities.dp(136) + diff;
         progressView.height = AndroidUtilities.dp(30);
         seekBarY = AndroidUtilities.dp(13);
         buttonY = AndroidUtilities.dp(10);
@@ -348,14 +357,18 @@ public void setMessageObject(MessageObject messageObject) {
             if (uid == 0) {
                 uid = messageObject.messageOwner.from_id;
             }
+            needAvatarImage = !(messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id != 0 && !messageObject.isOut() && messageObject.messageOwner.media.audio.user_id == messageObject.messageOwner.from_id);
             audioUser = MessagesController.getInstance().getUser(uid);
-            if (audioUser != null) {
-                if (audioUser.photo != null) {
-                    currentPhoto = audioUser.photo.photo_small;
+
+            if (needAvatarImage) {
+                if (audioUser != null) {
+                    if (audioUser.photo != null) {
+                        currentPhoto = audioUser.photo.photo_small;
+                    }
+                    avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                } else {
+                    avatarImage.setImage(null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
                 }
-                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
-            } else {
-                avatarImage.setImage(null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
             }
 
             if (messageObject.isOut()) {
@@ -379,7 +392,9 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
-        avatarImage.draw(canvas, avatarImage.getImageX(), avatarImage.getImageY(), avatarImage.getImageHeight(), avatarImage.getImageHeight());
+        if (needAvatarImage) {
+            avatarImage.draw(canvas);
+        }
 
         canvas.save();
         if (buttonState == 0 || buttonState == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index ebc90b2ce..b3ad22bf6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -430,7 +430,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (isAvatarVisible) {
-            avatarImage.draw(canvas, AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(45), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+            avatarImage.draw(canvas);
         }
 
         Drawable currentBackgroundDrawable = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 7b0f14d2d..4803d4114 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -10,7 +10,6 @@
 
 import android.content.Context;
 import android.graphics.Canvas;
-import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
 import android.text.StaticLayout;
@@ -39,8 +38,8 @@
 
     private static TextPaint namePaint;
     private static TextPaint phonePaint;
-    private static Drawable addContactDrawable;
-    private static Paint linePaint;
+    private static Drawable addContactDrawableIn;
+    private static Drawable addContactDrawableOut;
 
     private ImageReceiver avatarImage;
 
@@ -67,10 +66,8 @@ public ChatContactCell(Context context) {
             phonePaint.setTextSize(AndroidUtilities.dp(15));
             phonePaint.setColor(0xff000000);
 
-            addContactDrawable = getResources().getDrawable(R.drawable.ic_ab_add_member);
-
-            linePaint = new Paint();
-            linePaint.setStrokeWidth(AndroidUtilities.dp(1));
+            addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_blue);
+            addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_green);
         }
         avatarImage = new ImageReceiver(this);
     }
@@ -85,6 +82,12 @@ protected boolean isUserDataChanged() {
             return false;
         }
 
+        int uid = currentMessageObject.messageOwner.media.user_id;
+        boolean newDrawAdd = contactUser != null && uid != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(uid) == null;
+        if (newDrawAdd != drawAddButton) {
+            return true;
+        }
+
         contactUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.user_id);
 
         TLRPC.FileLocation newPhoto = null;
@@ -103,10 +106,10 @@ public boolean onTouchEvent(MotionEvent event) {
         boolean result = false;
         int side = AndroidUtilities.dp(36);
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
+            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
                 avatarPressed = true;
                 result = true;
-            } else if (x >= avatarImage.getImageX() - AndroidUtilities.dp(44) && y >= AndroidUtilities.dp(20) && x <= avatarImage.getImageX() - AndroidUtilities.dp(10) && y <= AndroidUtilities.dp(52)) {
+            } else if (x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52)) {
                 buttonPressed = true;
                 result = true;
             }
@@ -133,7 +136,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     avatarPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!avatarImage.isInsideImage(x, y)) {
+                    if (!(x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight())) {
                         avatarPressed = false;
                     }
                 }
@@ -147,7 +150,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     buttonPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() - AndroidUtilities.dp(44) && y >= AndroidUtilities.dp(20) && x <= avatarImage.getImageX() - AndroidUtilities.dp(10) && y <= AndroidUtilities.dp(52))) {
+                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52))) {
                         buttonPressed = false;
                     }
                 }
@@ -175,7 +178,7 @@ public void setMessageObject(MessageObject messageObject) {
             } else {
                 maxWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
             }
-            maxWidth -= AndroidUtilities.dp(58 + (drawAddButton ? 52 : 0));
+            maxWidth -= AndroidUtilities.dp(58 + (drawAddButton ? 42 : 0));
 
             if (contactUser != null) {
                 if (contactUser.photo != null) {
@@ -204,7 +207,7 @@ public void setMessageObject(MessageObject messageObject) {
                 }
                 phone = PhoneFormat.getInstance().format(phone);
             } else {
-                phone = LocaleController.getString("Unknown", R.string.Unknown);
+                phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
             }
             int phoneWidth = Math.min((int) Math.ceil(phonePaint.measureText(phone)), maxWidth);
             stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), phonePaint, phoneWidth, TextUtils.TruncateAt.END);
@@ -216,7 +219,7 @@ public void setMessageObject(MessageObject messageObject) {
             }
 
             namesWidth = Math.max(nameWidth, phoneWidth);
-            backgroundWidth = AndroidUtilities.dp(75 + (drawAddButton ? 52 : 0)) + namesWidth;
+            backgroundWidth = AndroidUtilities.dp(77 + (drawAddButton ? 42 : 0)) + namesWidth;
 
             super.setMessageObject(messageObject);
         }
@@ -238,15 +241,15 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int x;
 
         if (currentMessageObject.isOut()) {
-            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
+            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
         } else {
             if (isChat) {
-                x = AndroidUtilities.dp(67);
+                x = AndroidUtilities.dp(69);
             } else {
-                x = AndroidUtilities.dp(14);
+                x = AndroidUtilities.dp(16);
             }
         }
-        avatarImage.setImageCoords(x + (drawAddButton ? AndroidUtilities.dp(52) : 0), AndroidUtilities.dp(7), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+        avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
     }
 
     @Override
@@ -257,31 +260,30 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
-        avatarImage.draw(canvas, avatarImage.getImageX(), avatarImage.getImageY(), avatarImage.getImageWidth(), avatarImage.getImageWidth());
+        avatarImage.draw(canvas);
 
         if (nameLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(8));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10));
             namePaint.setColor(AndroidUtilities.getColorForId(currentMessageObject.messageOwner.media.user_id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
         if (phoneLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(29));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31));
             phoneLayout.draw(canvas);
             canvas.restore();
         }
 
         if (drawAddButton) {
+            Drawable addContactDrawable;
             if (currentMessageObject.isOut()) {
-                linePaint.setColor(0x9670b15c);
+                addContactDrawable = addContactDrawableOut;
             } else {
-                linePaint.setColor(0xffe8e8e8);
+                addContactDrawable = addContactDrawableIn;
             }
-            canvas.drawLine(avatarImage.getImageX() - AndroidUtilities.dp(4), avatarImage.getImageY(), avatarImage.getImageX() - AndroidUtilities.dp(4), AndroidUtilities.dp(62), linePaint);
-
-            setDrawableBounds(addContactDrawable, avatarImage.getImageX() - AndroidUtilities.dp(44), AndroidUtilities.dp(20));
+            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13));
             addContactDrawable.draw(canvas);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 4407708d2..ead0ad32c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -217,7 +217,7 @@ public boolean onTouchEvent(MotionEvent event) {
                         }
                     }
                 }
-                if (imagePressed && currentMessageObject.isSecretMedia()) {
+                if (imagePressed && currentMessageObject.isSecretPhoto()) {
                     imagePressed = false;
                 } else if (result) {
                     startCheckLongPress();
@@ -594,7 +594,7 @@ public void setMessageObject(MessageObject messageObject) {
                         w = timeWidthTotal;
                     }
 
-                    if (currentMessageObject.isSecretMedia()) {
+                    if (currentMessageObject.isSecretPhoto()) {
                         if (AndroidUtilities.isTablet()) {
                             w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
                         } else {
@@ -642,7 +642,7 @@ public void setMessageObject(MessageObject messageObject) {
                     photoImage.setImageBitmap(messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
                 }
             }
-            photoImage.setForcePreview(messageObject.isSecretMedia());
+            photoImage.setForcePreview(messageObject.isSecretPhoto());
 
             invalidate();
         }
@@ -839,7 +839,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             canvas.restore();
         } else {
             photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
-            imageDrawn = photoImage.draw(canvas, photoImage.getImageX(), photoImage.getImageY(), photoWidth, photoHeight);
+            imageDrawn = photoImage.draw(canvas);
             drawTime = photoImage.getVisible();
         }
 
@@ -899,7 +899,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             currentButtonDrawable.draw(canvas);
         }
 
-        if (buttonState == -1 && currentMessageObject.isSecretMedia()) {
+        if (buttonState == -1 && currentMessageObject.isSecretPhoto()) {
             int drawable = 5;
             if (currentMessageObject.messageOwner.destroyTime != 0) {
                 if (currentMessageObject.isOut()) {
@@ -945,7 +945,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
                 infoLayout.draw(canvas);
                 canvas.restore();
             }
-        } else if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretMedia()  || (buttonState == 2 && currentMessageObject.type == 8) )) {
+        } else if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto()  || (buttonState == 2 && currentMessageObject.type == 8) )) {
             infoPaint.setColor(0xffffffff);
             if (currentMessageObject.type == 1){
                 setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dpf(16.5f));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 7a9e7bbc8..a28e59ba2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -43,36 +43,41 @@ public boolean onTouchEvent(MotionEvent event) {
                     y -= textY;
                     int blockNum = Math.max(0, y / currentMessageObject.blockHeight);
                     if (blockNum < currentMessageObject.textLayoutBlocks.size()) {
-                        MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
-                        x -= textX - (int)Math.ceil(block.textXOffset);
-                        y -= block.textYOffset;
-                        final int line = block.textLayout.getLineForVertical(y);
-                        final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
-
-                        final float left = block.textLayout.getLineLeft(line);
-                        if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
-                            Spannable buffer = (Spannable)currentMessageObject.messageText;
-                            ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-
-                            if (link.length != 0) {
-                                if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                                    pressedLink = link[0];
-                                    return true;
-                                } else {
-                                    if (link[0] == pressedLink) {
-                                        try {
-                                            pressedLink.onClick(this);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
+                        try {
+                            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
+                            x -= textX - (int)Math.ceil(block.textXOffset);
+                            y -= block.textYOffset;
+                            final int line = block.textLayout.getLineForVertical(y);
+                            final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
+
+                            final float left = block.textLayout.getLineLeft(line);
+                            if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
+                                Spannable buffer = (Spannable)currentMessageObject.messageText;
+                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+
+                                if (link.length != 0) {
+                                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                                        pressedLink = link[0];
                                         return true;
+                                    } else {
+                                        if (link[0] == pressedLink) {
+                                            try {
+                                                pressedLink.onClick(this);
+                                            } catch (Exception e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            return true;
+                                        }
                                     }
+                                } else {
+                                    pressedLink = null;
                                 }
                             } else {
                                 pressedLink = null;
                             }
-                        } else {
+                        } catch (Exception e) {
                             pressedLink = null;
+                            FileLog.e("tmessages", e);
                         }
                     } else {
                         pressedLink = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
index 4b782b913..7008878d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
@@ -41,7 +41,7 @@
 
     private CharSequence currentName;
     private ImageReceiver avatarImage;
-    private String subLabel;
+    private CharSequence subLabel;
 
     private ChatOrUserCellLayout cellLayout;
     private TLRPC.User user = null;
@@ -112,7 +112,7 @@ private void init() {
         }
     }
 
-    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, String s) {
+    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
         currentName = n;
         user = u;
         chat = c;
@@ -236,6 +236,15 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
+        if (useSeparator) {
+            int h = getMeasuredHeight();
+            if (!usePadding) {
+                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
+            }
+        }
+
         if (drawAlpha != 1) {
             canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
         }
@@ -263,16 +272,7 @@ protected void onDraw(Canvas canvas) {
             canvas.restore();
         }
 
-        avatarImage.draw(canvas, cellLayout.avatarLeft, cellLayout.avatarTop, AndroidUtilities.dp(50), AndroidUtilities.dp(50));
-
-        if (useSeparator) {
-            int h = getMeasuredHeight();
-            if (!usePadding) {
-                canvas.drawLine(0, h - 1, getMeasuredWidth(), h, linePaint);
-            } else {
-                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h, linePaint);
-            }
-        }
+        avatarImage.draw(canvas);
     }
 
     private class ChatOrUserCellLayout {
@@ -381,7 +381,7 @@ public void build(int width, int height) {
                     onlineLeft = usePadding ? AndroidUtilities.dp(11) : 0;
                 }
 
-                String onlineString = "";
+                CharSequence onlineString = "";
                 TextPaint currentOnlinePaint = offlinePaint;
 
                 if (subLabel != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 99970c904..f13332df1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -10,6 +10,7 @@
 
 import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.text.Html;
 import android.text.Layout;
@@ -48,6 +49,8 @@
     private static Drawable groupDrawable;
     private static Drawable broadcastDrawable;
 
+    private static Paint linePaint;
+
     private TLRPC.TL_dialog currentDialog;
     private ImageReceiver avatarImage;
 
@@ -57,6 +60,8 @@
     private TLRPC.EncryptedChat encryptedChat = null;
     private CharSequence lastPrintString = null;
 
+    public boolean useSeparator = false;
+
     private void init() {
         if (namePaint == null) {
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
@@ -85,6 +90,11 @@ private void init() {
             messagePaint.setColor(0xff808080);
         }
 
+        if (linePaint == null) {
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+        }
+
         if (messagePrintingPaint == null) {
             messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             messagePrintingPaint.setTextSize(AndroidUtilities.dp(16));
@@ -340,7 +350,16 @@ protected void onDraw(Canvas canvas) {
             canvas.restore();
         }
 
-        avatarImage.draw(canvas, cellLayout.avatarLeft, cellLayout.avatarTop, AndroidUtilities.dp(54), AndroidUtilities.dp(54));
+        avatarImage.draw(canvas);
+
+        if (useSeparator) {
+            int h = getMeasuredHeight();
+            if (AndroidUtilities.isTablet()) {
+                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
+            }
+        }
     }
 
     private class DialogCellLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 0bfc37b1e..36ff6cfc3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -71,7 +71,6 @@
 import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.Cells.ChatMessageCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarLayout;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Views.BackupImageView;
@@ -131,7 +130,7 @@
     private View pagedownButton;
     private TextView topPanelText;
     private long dialog_id;
-    private boolean isBraodcast = false;
+    private boolean isBroadcast = false;
     private HashMap<Integer, MessageObject> selectedMessagesIds = new HashMap<Integer, MessageObject>();
     private HashMap<Integer, MessageObject> selectedMessagesCanCopyIds = new HashMap<Integer, MessageObject>();
 
@@ -244,15 +243,15 @@ public void run() {
             if (chatId > 0) {
                 dialog_id = -chatId;
             } else {
-                isBraodcast = true;
+                isBroadcast = true;
                 dialog_id = AndroidUtilities.makeBroadcastId(chatId);
             }
             Semaphore semaphore = null;
-            if (isBraodcast) {
+            if (isBroadcast) {
                 semaphore = new Semaphore(0);
             }
             MessagesController.getInstance().loadChatInfo(currentChat.id, semaphore);
-            if (isBraodcast) {
+            if (isBroadcast) {
                 try {
                     semaphore.acquire();
                 } catch (Exception e) {
@@ -371,6 +370,7 @@ public void needSendTyping() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
 
         super.onFragmentCreate();
 
@@ -390,7 +390,7 @@ public void needSendTyping() {
         typingDotsDrawable.setIsChat(currentChat != null);
 
         if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != SendMessagesHelper.CURRENT_SECRET_CHAT_LAYER) {
-            SendMessagesHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat);
+            SendMessagesHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat, null);
         }
 
         return true;
@@ -423,6 +423,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileNewChunkAvailable);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
         }
@@ -658,7 +659,7 @@ public void startDocumentSelectActivity() {
 
             actionModeViews.clear();
 
-            ActionBarMenu actionMode = actionBarLayer.createActionMode();
+            final ActionBarMenu actionMode = actionBarLayer.createActionMode();
             actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode));
 
             FrameLayout layout = new FrameLayout(actionMode.getContext());
@@ -831,6 +832,9 @@ public boolean onTouch(View v, MotionEvent event) {
             chatListView.setOnInterceptTouchEventListener(new LayoutListView.OnInterceptTouchEventListener() {
                 @Override
                 public boolean onInterceptTouchEvent(MotionEvent event) {
+                    if (actionBarLayer.isActionModeShowed()) {
+                        return false;
+                    }
                     if (event.getAction() == MotionEvent.ACTION_DOWN) {
                         int x = (int)event.getX();
                         int y = (int)event.getY();
@@ -849,7 +853,7 @@ public boolean onInterceptTouchEvent(MotionEvent event) {
                             }
                             final ChatMediaCell cell = (ChatMediaCell)view;
                             final MessageObject messageObject = cell.getMessageObject();
-                            if (messageObject == null || !messageObject.isSecretMedia() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
+                            if (messageObject == null || !messageObject.isSecretPhoto() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
                                 break;
                             }
                             File file = FileLoader.getPathToMessage(messageObject.messageOwner);
@@ -858,6 +862,7 @@ public boolean onInterceptTouchEvent(MotionEvent event) {
                             }
                             startX = x;
                             startY = y;
+                            chatListView.setOnItemClickListener(null);
                             openSecretPhotoRunnable = new Runnable() {
                                 @Override
                                 public void run() {
@@ -866,12 +871,9 @@ public void run() {
                                     }
                                     chatListView.requestDisallowInterceptTouchEvent(true);
                                     chatListView.setOnItemLongClickListener(null);
-                                    chatListView.setOnItemClickListener(null);
                                     chatListView.setLongClickable(false);
                                     openSecretPhotoRunnable = null;
-                                    if (!messageObject.isOut() && messageObject.messageOwner.destroyTime == 0) {
-                                        MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id);
-                                        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance().getCurrentTime();
+                                    if (sendSecretMessageRead(messageObject)) {
                                         cell.invalidate();
                                     }
                                     SecretPhotoViewer.getInstance().setParentActivity(getParentActivity());
@@ -891,16 +893,26 @@ public void run() {
                 public boolean onTouch(View v, MotionEvent event) {
                     if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
                         if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
+                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    chatListView.setOnItemClickListener(onItemClickListener);
+                                }
+                            }, 150);
                             if (openSecretPhotoRunnable != null) {
                                 AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
                                 openSecretPhotoRunnable = null;
+                                try {
+                                    Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
                             } else {
                                 if (SecretPhotoViewer.getInstance().isVisible()) {
                                     AndroidUtilities.RunOnUIThread(new Runnable() {
                                         @Override
                                         public void run() {
                                             chatListView.setOnItemLongClickListener(onItemLongClickListener);
-                                            chatListView.setOnItemClickListener(onItemClickListener);
                                             chatListView.setLongClickable(true);
                                         }
                                     });
@@ -936,7 +948,7 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
                 @Override
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                     if (visibleItemCount > 0) {
-                        if (firstVisibleItem <= 4) {
+                        if (firstVisibleItem <= 10) {
                             if (!endReached && !loading) {
                                 if (messagesByDays.size() != 0) {
                                     MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced, minDate, classGuid, false, false, null);
@@ -1037,6 +1049,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
         return fragmentView;
     }
 
+    private boolean sendSecretMessageRead(MessageObject messageObject) {
+        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
+            return false;
+        }
+        MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance().getCurrentTime();
+        return true;
+    }
+
     private void scrollToLastMessage() {
         if (unread_end_reached || first_unread_id == 0) {
             chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
@@ -1186,7 +1207,7 @@ public void onClick(View view) {
                 if (currentChat.photo != null) {
                     photo = currentChat.photo.photo_small;
                 }
-                if (isBraodcast) {
+                if (isBroadcast) {
                     placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
                 } else {
                     placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
@@ -1213,9 +1234,12 @@ private void updateOnlineCount() {
     }
 
     private int getMessageType(MessageObject messageObject) {
+        if (messageObject == null) {
+            return -1;
+        }
         if (currentEncryptedChat == null) {
-            boolean isBroadcastError = isBraodcast && messageObject.messageOwner.id <= 0 && messageObject.isSendError();
-            if (!isBraodcast && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
+            boolean isBroadcastError = isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isSendError();
+            if (!isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
                 if (messageObject.isSendError()) {
                     if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
                         return 0;
@@ -1276,11 +1300,12 @@ private int getMessageType(MessageObject messageObject) {
                 } else {
                     return 6;
                 }
-            } else if (messageObject.type == 10 || messageObject.type == 11 || messageObject.isSending()) {
-                if (messageObject.messageOwner.id == 0) {
+            } else if (messageObject.type == 10 || messageObject.type == 11) {
+                if (messageObject.isSending()) {
                     return -1;
+                } else {
+                    return 1;
                 }
-                return 1;
             } else {
                 if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
                     if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo ||
@@ -1457,7 +1482,7 @@ private void checkAndUpdateAvatar() {
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
-            if (isBraodcast) {
+            if (isBroadcast) {
                 placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
             } else {
                 placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
@@ -1468,7 +1493,7 @@ private void checkAndUpdateAvatar() {
         }
     }
 
-    public boolean openVideoEditor(String videoPath, boolean removeLast, ActionBarLayout parentLayout) {
+    public boolean openVideoEditor(String videoPath, boolean removeLast) {
         Bundle args = new Bundle();
         args.putString("videoPath", videoPath);
         VideoEditorActivity fragment = new VideoEditorActivity(args);
@@ -1488,10 +1513,12 @@ public void didFinishEditVideo(String videoPath, long startTime, long endTime, i
                 SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id);
             }
         });
-        if (parentLayout == null || !parentLayout.presentFragment(fragment, removeLast, true, true)) {
+
+        if (parentLayout == null || !fragment.onFragmentCreate()) {
             SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
             return false;
         }
+        parentLayout.presentFragment(fragment, removeLast, true, true);
         return true;
     }
 
@@ -1553,7 +1580,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     if (paused) {
                         startVideoEdit = videoPath;
                     } else {
-                        openVideoEditor(videoPath, false, parentLayout);
+                        openVideoEditor(videoPath, false);
                     }
                 } else {
                     SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
@@ -1672,6 +1699,11 @@ public void didReceivedNotification(int id, final Object... args) {
                     if (minDate == 0 || obj.messageOwner.date < minDate) {
                         minDate = obj.messageOwner.date;
                     }
+
+                    if (obj.type < 0) {
+                        continue;
+                    }
+
                     if (!obj.isOut() && obj.isUnread()) {
                         wasUnread = true;
                     }
@@ -1745,7 +1777,7 @@ public void didReceivedNotification(int id, final Object... args) {
                     if (messArr.size() != count) {
                         if (isCache) {
                             cacheEndReaced = true;
-                            if (currentEncryptedChat != null || isBraodcast) {
+                            if (currentEncryptedChat != null || isBroadcast) {
                                 endReached = true;
                             }
                         } else {
@@ -1861,6 +1893,22 @@ public void run() {
                 boolean hasFromMe = false;
                 ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[1];
 
+                if (currentEncryptedChat != null && arr.size() == 1) {
+                    MessageObject obj = arr.get(0);
+
+                    if (currentEncryptedChat != null && obj.isOut() && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                            obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && getParentActivity() != null) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                        if (AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 17 && currentEncryptedChat.ttl > 0 && currentEncryptedChat.ttl <= 60) {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(R.string.OK, null);
+                            builder.setMessage(LocaleController.formatString("CompatibilityChat", R.string.CompatibilityChat, currentUser.first_name, currentUser.first_name));
+                            showAlertDialog(builder);
+                        }
+                    }
+                }
+
                 if (!unread_end_reached) {
                     int currentMaxDate = Integer.MIN_VALUE;
                     int currentMinMsgId = Integer.MIN_VALUE;
@@ -1870,8 +1918,10 @@ public void run() {
                     boolean currentMarkAsRead = false;
 
                     for (MessageObject obj : arr) {
-                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageActionTTLChange && timerButton != null) {
-                            timerButton.setTime(obj.messageOwner.action.ttl);
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                            timerButton.setTime(action.ttl_seconds);
                         }
                         if (obj.isOut() && obj.isSending()) {
                             scrollToLastMessage();
@@ -1912,8 +1962,10 @@ public void run() {
                     boolean markAsRead = false;
                     int oldCount = messages.size();
                     for (MessageObject obj : arr) {
-                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageActionTTLChange && timerButton != null) {
-                            timerButton.setTime(obj.messageOwner.action.ttl);
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                            timerButton.setTime(action.ttl_seconds);
                         }
                         if (messagesDict.containsKey(obj.messageOwner.id)) {
                             continue;
@@ -2082,9 +2134,9 @@ public void run() {
             MessageObject obj = messagesDict.get(msgId);
             if (obj != null) {
                 Integer newMsgId = (Integer)args[1];
-                MessageObject newMsgObj = (MessageObject)args[2];
+                TLRPC.Message newMsgObj = (TLRPC.Message)args[2];
                 if (newMsgObj != null) {
-                    obj.messageOwner.media = newMsgObj.messageOwner.media;
+                    obj.messageOwner.media = newMsgObj.media;
                     obj.generateThumbs(true, 1);
                 }
                 messagesDict.remove(msgId);
@@ -2112,7 +2164,7 @@ public void run() {
             if (currentChat != null && chatId == currentChat.id) {
                 info = (TLRPC.ChatParticipants)args[1];
                 updateOnlineCount();
-                if (isBraodcast) {
+                if (isBroadcast) {
                     SendMessagesHelper.getInstance().setCurrentChatInfo(info);
                 }
             }
@@ -2174,24 +2226,27 @@ public void run() {
                 }
             }
         } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
-            messages.clear();
-            messagesByDays.clear();
-            messagesDict.clear();
-            progressView.setVisibility(View.GONE);
-            chatListView.setEmptyView(emptyViewContainer);
-            if (currentEncryptedChat == null) {
-                maxMessageId = Integer.MAX_VALUE;
-                minMessageId = Integer.MIN_VALUE;
-            } else {
-                maxMessageId = Integer.MIN_VALUE;
-                minMessageId = Integer.MAX_VALUE;
+            long did = (Long)args[0];
+            if (dialog_id == did) {
+                messages.clear();
+                messagesByDays.clear();
+                messagesDict.clear();
+                progressView.setVisibility(View.GONE);
+                chatListView.setEmptyView(emptyViewContainer);
+                if (currentEncryptedChat == null) {
+                    maxMessageId = Integer.MAX_VALUE;
+                    minMessageId = Integer.MIN_VALUE;
+                } else {
+                    maxMessageId = Integer.MIN_VALUE;
+                    minMessageId = Integer.MAX_VALUE;
+                }
+                maxDate = Integer.MIN_VALUE;
+                minDate = 0;
+                selectedMessagesIds.clear();
+                selectedMessagesCanCopyIds.clear();
+                actionBarLayer.hideActionMode();
+                chatAdapter.notifyDataSetChanged();
             }
-            maxDate = Integer.MIN_VALUE;
-            minDate = 0;
-            selectedMessagesIds.clear();
-            selectedMessagesCanCopyIds.clear();
-            actionBarLayer.hideActionMode();
-            chatAdapter.notifyDataSetChanged();
         } else if (id == NotificationCenter.screenshotTook) {
             updateInformationForScreenshotDetector();
         } else if (id == NotificationCenter.blockedUsersDidLoaded) {
@@ -2229,6 +2284,9 @@ public void run() {
             if (changed) {
                 updateVisibleRows();
             }
+        } else if (id == NotificationCenter.audioDidStarted) {
+            MessageObject messageObject = (MessageObject)args[0];
+            sendSecretMessageRead(messageObject);
         }
     }
 
@@ -2396,7 +2454,7 @@ public void onResume() {
             AndroidUtilities.RunOnUIThread(new Runnable() {
                 @Override
                 public void run() {
-                    openVideoEditor(startVideoEdit, false, parentLayout);
+                    openVideoEditor(startVideoEdit, false);
                     startVideoEdit = null;
                 }
             });
@@ -2432,13 +2490,16 @@ public void onPause() {
         chatActivityEnterView.setFieldFocused(false);
         MessagesController.getInstance().cancelTyping(dialog_id);
 
-        /*if (currentEncryptedChat != null) { disabled
+        if (currentEncryptedChat != null) {
             chatLeaveTime = System.currentTimeMillis();
             updateInformationForScreenshotDetector();
-        }*/
+        }
     }
 
     private void updateInformationForScreenshotDetector() {
+        if (currentEncryptedChat == null) {
+            return;
+        }
         ArrayList<Long> visibleMessages = new ArrayList<Long>();
         if (chatListView != null) {
             int count = chatListView.getChildCount();
@@ -2511,6 +2572,9 @@ public void createMenu(View v, boolean single) {
         } else if (v instanceof ChatActionCell) {
             message = ((ChatActionCell)v).getMessageObject();
         }
+        if (message == null) {
+            return;
+        }
         final int type = getMessageType(message);
 
         selectedObject = null;
@@ -2841,7 +2905,7 @@ private void forwardSelectedMessages(long did, boolean fromMyName) {
     @Override
     public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
         if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
-            if (isBraodcast) {
+            if (isBroadcast) {
                 param = true;
             }
             if (did != dialog_id) {
@@ -2955,9 +3019,9 @@ private void alertUserOpenError(MessageObject message) {
         }
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        builder.setPositiveButton(R.string.OK, null);
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
         if (message.type == 3) {
-            builder.setMessage(R.string.NoPlayerInstalled);
+            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
         } else {
             builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.messageOwner.media.document.mime_type));
         }
@@ -3166,6 +3230,7 @@ public void didClickedImage(ChatMediaCell cell) {
                                     PhotoViewer.getInstance().setParentActivity(getParentActivity());
                                     PhotoViewer.getInstance().openPhoto(message, ChatActivity.this);
                                 } else if (message.type == 3) {
+                                    sendSecretMessageRead(message);
                                     try {
                                         File f = null;
                                         if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
@@ -3245,9 +3310,10 @@ public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
                                     processRowSelect(cell);
                                     return;
                                 }
+                                MessageObject messageObject = cell.getMessageObject();
                                 Bundle args = new Bundle();
-                                args.putInt("user_id", message.messageOwner.media.user_id);
-                                args.putString("phone", message.messageOwner.media.phone_number);
+                                args.putInt("user_id", messageObject.messageOwner.media.user_id);
+                                args.putString("phone", messageObject.messageOwner.media.phone_number);
                                 presentFragment(new ContactAddActivity(args));
                             }
 
@@ -3262,7 +3328,7 @@ public void didClickPhone(ChatContactCell cell) {
                                     return;
                                 }
                                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setItems(new CharSequence[] {LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
+                                builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
                                             @Override
                                             public void onClick(DialogInterface dialogInterface, int i) {
                                                 if (i == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index d3253ada9..f8f556b48 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -42,6 +42,7 @@
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -476,6 +477,7 @@ private void openAddMenu() {
         args.putBoolean("destroyAfterSelect", true);
         args.putBoolean("usersAsSections", true);
         args.putBoolean("returnAsResult", true);
+        //args.putBoolean("allowUsernameSearch", false);
         if (chat_id > 0) {
             args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
         }
@@ -646,21 +648,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 return view;
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                    view = new SettingsSectionLayout(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
                 if (i == settingsSectionRow) {
-                    textView.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
                 } else if (i == sharedMediaSectionRow) {
-                    textView.setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
                 } else if (i == membersSectionRow) {
                     TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
                     int count = chat.participants_count;
                     if (info != null) {
                         count = info.participants.size();
                     }
-                    textView.setText(LocaleController.formatPluralString("Members", count).toUpperCase());
+                    ((SettingsSectionLayout) view).setText(LocaleController.formatPluralString("Members", count).toUpperCase());
                 }
             } else if (type == 2) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
index 6bafe5681..a77ea02e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
@@ -11,6 +11,9 @@
 import android.app.Activity;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.text.InputType;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -18,6 +21,7 @@
 import android.view.inputmethod.EditorInfo;
 import android.widget.Button;
 import android.widget.EditText;
+import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
@@ -26,6 +30,7 @@
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 public class ChatProfileChangeNameActivity extends BaseFragment {
     private EditText firstNameField;
@@ -71,16 +76,27 @@ public void onClick(View view) {
             TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
             textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
 
-            fragmentView = inflater.inflate(R.layout.chat_profile_change_name_layout, container, false);
-
             TLRPC.Chat currentChat = MessagesController.getInstance().getChat(chat_id);
 
-            firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
-            if (chat_id > 0) {
-                firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
-            } else {
-                firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
-            }
+            fragmentView = new LinearLayout(inflater.getContext());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
+            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setText(currentChat.title);
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            firstNameField.setHintTextColor(0xffa3a3a3);
+            firstNameField.setTextColor(0xff000000);
+            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setMaxLines(3);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            AndroidUtilities.clearCursorDrawable(firstNameField);
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -91,15 +107,25 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            firstNameField.setText(currentChat.title);
-            firstNameField.setSelection(firstNameField.length());
+            if (LocaleController.isRTL) {
+                firstNameField.setGravity(Gravity.RIGHT);
+            }
+
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            firstNameField.setLayoutParams(layoutParams);
 
-            TextView headerLabel = (TextView)fragmentView.findViewById(R.id.settings_section_text);
             if (chat_id > 0) {
-                headerLabel.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
+                settingsSectionLayout.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
+                firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
             } else {
-                headerLabel.setText(LocaleController.getString("EnterListName", R.string.EnterListName).toUpperCase());
+                settingsSectionLayout.setText(LocaleController.getString("EnterListName", R.string.EnterListName).toUpperCase());
+                firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
             }
+            firstNameField.setSelection(firstNameField.length());
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index d530fdc83..a65ce45d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -30,6 +30,7 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesStorage;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
@@ -72,6 +73,7 @@
 
     private String inviteText;
     private boolean updatingInviteText = false;
+    private boolean allowUsernameSearch = true;
     private ContactsActivityDelegate delegate;
 
     public static interface ContactsActivityDelegate {
@@ -91,11 +93,12 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
         if (arguments != null) {
             onlyUsers = getArguments().getBoolean("onlyUsers", false);
-            destroyAfterSelect = getArguments().getBoolean("destroyAfterSelect", false);
-            usersAsSections = getArguments().getBoolean("usersAsSections", false);
-            returnAsResult = getArguments().getBoolean("returnAsResult", false);
-            createSecretChat = getArguments().getBoolean("createSecretChat", false);
+            destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
+            usersAsSections = arguments.getBoolean("usersAsSections", false);
+            returnAsResult = arguments.getBoolean("returnAsResult", false);
+            createSecretChat = arguments.getBoolean("createSecretChat", false);
             selectAlertString = arguments.getString("selectAlertString");
+            allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
         }
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -199,7 +202,7 @@ public void onTextChanged(EditText editText) {
 
             emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-            searchListViewAdapter = new ContactsActivitySearchAdapter(getParentActivity(), ignoreUsers);
+            searchListViewAdapter = new ContactsActivitySearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
 
             listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
             listView.setEmptyView(emptyTextView);
@@ -221,6 +224,12 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         if (user == null || user.id == UserConfig.getClientUserId()) {
                             return;
                         }
+                        if (searchListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
                         if (returnAsResult) {
                             if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
                                 return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 332381d6c..9a733f9f8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -31,6 +31,7 @@
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.PinnedHeaderListView;
 import org.telegram.ui.Views.SectionedBaseAdapter;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -484,12 +485,10 @@ public int getSectionHeaderViewTypeCount() {
         @Override
         public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
             if (convertView == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                convertView = li.inflate(R.layout.settings_section_layout, parent, false);
+                convertView = new SettingsSectionLayout(mContext);
                 convertView.setBackgroundColor(0xfffafafa);
             }
-            TextView textView = (TextView)convertView.findViewById(R.id.settings_section_text);
-            textView.setText(sortedCountries.get(section).toUpperCase());
+            ((SettingsSectionLayout) convertView).setText(sortedCountries.get(section).toUpperCase());
             return convertView;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 52395ca14..a8eccbdb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -51,6 +51,7 @@
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.PinnedHeaderListView;
 import org.telegram.ui.Views.SectionedBaseAdapter;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -597,15 +598,13 @@ public int getSectionHeaderViewTypeCount() {
         @Override
         public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
             if (convertView == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                convertView = li.inflate(R.layout.settings_section_layout, parent, false);
+                convertView = new SettingsSectionLayout(mContext);
                 convertView.setBackgroundColor(0xffffffff);
             }
-            TextView textView = (TextView)convertView.findViewById(R.id.settings_section_text);
             if (searching && searchWas) {
-                textView.setText(LocaleController.getString("AllContacts", R.string.AllContacts));
+                ((SettingsSectionLayout) convertView).setText(LocaleController.getString("AllContacts", R.string.AllContacts));
             } else {
-                textView.setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
             }
             return convertView;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index ac3dfe5fd..331dc705f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -38,6 +38,7 @@
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.PinnedHeaderListView;
 import org.telegram.ui.Views.SectionedBaseAdapter;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.concurrent.Semaphore;
@@ -81,11 +82,10 @@ public boolean onFragmentCreate() {
         if (!usersToLoad.isEmpty()) {
             final Semaphore semaphore = new Semaphore(0);
             final ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-            final boolean[] error = new boolean[1];
             MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    users.addAll(MessagesStorage.getInstance().getUsers(usersToLoad, error));
+                    users.addAll(MessagesStorage.getInstance().getUsers(usersToLoad));
                     semaphore.release();
                 }
             });
@@ -94,7 +94,7 @@ public void run() {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
-            if (error[0]) {
+            if (usersToLoad.size() != users.size()) {
                 return false;
             }
             if (!users.isEmpty()) {
@@ -420,12 +420,10 @@ public int getSectionHeaderViewTypeCount() {
         @Override
         public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
             if (convertView == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                convertView = li.inflate(R.layout.settings_section_layout, parent, false);
+                convertView = new SettingsSectionLayout(mContext);
                 convertView.setBackgroundColor(0xffffffff);
             }
-            TextView textView = (TextView)convertView.findViewById(R.id.settings_section_text);
-            textView.setText(LocaleController.formatPluralString("Members", selectedContacts.size()).toUpperCase());
+            ((SettingsSectionLayout) convertView).setText(LocaleController.formatPluralString("Members", selectedContacts.size()).toUpperCase());
             return convertView;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index f61b30d5f..9806c5d89 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -661,12 +661,14 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                         actionBarLayout.presentFragment(fragment, false, true, true);
                     }
 
-                    if (!fragment.openVideoEditor(videoPath, true, actionBarLayout)) {
+                    if (!AndroidUtilities.isTablet()) {
+                        actionBarLayout.addFragmentToStack(fragment, actionBarLayout.fragmentsStack.size() - 1);
+                    }
+
+                    if (!fragment.openVideoEditor(videoPath, true)) {
                         if (!AndroidUtilities.isTablet()) {
-                            actionBarLayout.presentFragment(fragment, true);
+                            messageFragment.finishFragment(true);
                         }
-                    } else if (!AndroidUtilities.isTablet()) {
-                        actionBarLayout.addFragmentToStack(fragment, actionBarLayout.fragmentsStack.size() - 1);
                     }
                 } else {
                     actionBarLayout.presentFragment(fragment, true);
@@ -785,6 +787,9 @@ public void needLayout() {
 
     public void fixLayout() {
         if (AndroidUtilities.isTablet()) {
+            if (actionBarLayout == null) {
+                return;
+            }
             actionBarLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
                 @Override
                 public void onGlobalLayout() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 9471d2fb9..477a519a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -12,6 +12,7 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
+import android.text.Html;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -35,13 +36,14 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.BaseContactsSearchAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 import java.util.Timer;
@@ -64,10 +66,6 @@
     private int activityToken = (int)(Utilities.random.nextDouble() * Integer.MAX_VALUE);
     private long selectedDialog;
 
-    private Timer searchTimer;
-    public ArrayList<TLObject> searchResult;
-    public ArrayList<CharSequence> searchResultNames;
-
     private MessagesActivityDelegate delegate;
 
     private long openedDialogId = 0;
@@ -144,7 +142,6 @@ public void onSearchExpand() {
 
                 @Override
                 public void onSearchCollapse() {
-                    searchDialogs(null);
                     searching = false;
                     searchWas = false;
                     if (messagesListView != null) {
@@ -152,14 +149,16 @@ public void onSearchCollapse() {
                         searchEmptyView.setVisibility(View.GONE);
                     }
                     if (messagesListViewAdapter != null) {
-                        messagesListViewAdapter.notifyDataSetChanged();
+                        messagesListViewAdapter.searchDialogs(null);
                     }
                 }
 
                 @Override
                 public void onTextChanged(EditText editText) {
                     String text = editText.getText().toString();
-                    searchDialogs(text);
+                    if (messagesListViewAdapter != null) {
+                        messagesListViewAdapter.searchDialogs(text);
+                    }
                     if (text.length() != 0) {
                         searchWas = true;
                         if (messagesListViewAdapter != null) {
@@ -231,10 +230,6 @@ public void onItemClick(int id) {
 
             messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
             messagesListView.setAdapter(messagesListViewAdapter);
-            if (delegate == null && AndroidUtilities.isTablet()) {
-                messagesListView.setDivider(inflater.getContext().getResources().getDrawable(R.drawable.messages_list_divider2));
-                messagesListView.setDividerHeight(1);
-            }
 
             progressView = fragmentView.findViewById(R.id.progressLayout);
             messagesListViewAdapter.notifyDataSetChanged();
@@ -277,38 +272,34 @@ public boolean onTouch(View v, MotionEvent event) {
             messagesListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (messagesListViewAdapter == null) {
+                        return;
+                    }
+                    TLObject obj = messagesListViewAdapter.getItem(i);
+                    if (obj == null) {
+                        return;
+                    }
                     long dialog_id = 0;
-                    if (searching && searchWas) {
-                        if (i >= searchResult.size()) {
-                            return;
-                        }
-                        TLObject obj = searchResult.get(i);
-                        if (obj instanceof TLRPC.User) {
-                            dialog_id = ((TLRPC.User) obj).id;
-                        } else if (obj instanceof TLRPC.Chat) {
-                            if (((TLRPC.Chat) obj).id > 0) {
-                                dialog_id = -((TLRPC.Chat) obj).id;
-                            } else {
-                                dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
-                            }
-                        } else if (obj instanceof TLRPC.EncryptedChat) {
-                            dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
+                    if (obj instanceof TLRPC.User) {
+                        dialog_id = ((TLRPC.User) obj).id;
+                        if (messagesListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add((TLRPC.User)obj);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                         }
-                    } else {
-                        if (serverOnly) {
-                            if (i >= MessagesController.getInstance().dialogsServerOnly.size()) {
-                                return;
-                            }
-                            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
-                            dialog_id = dialog.id;
+                    } else if (obj instanceof TLRPC.Chat) {
+                        if (((TLRPC.Chat) obj).id > 0) {
+                            dialog_id = -((TLRPC.Chat) obj).id;
                         } else {
-                            if (i >= MessagesController.getInstance().dialogs.size()) {
-                                return;
-                            }
-                            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs.get(i);
-                            dialog_id = dialog.id;
+                            dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
                         }
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
+                    } else if (obj instanceof TLRPC.TL_dialog) {
+                        dialog_id = ((TLRPC.TL_dialog) obj).id;
                     }
+
                     if (onlySelect) {
                         didSelectResult(dialog_id, true, false);
                     } else {
@@ -497,7 +488,7 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.reloadSearchResults) {
             int token = (Integer)args[0];
             if (token == activityToken) {
-                updateSearchResults((ArrayList<TLObject>)args[1], (ArrayList<CharSequence>)args[2], (ArrayList<TLRPC.User>)args[3]);
+                messagesListViewAdapter.updateSearchResults((ArrayList<TLObject>) args[1], (ArrayList<CharSequence>) args[2], (ArrayList<TLRPC.User>) args[3]);
             }
         } else if (id == NotificationCenter.appDidLogout) {
             dialogsLoaded = false;
@@ -624,86 +615,113 @@ public void onClick(DialogInterface dialogInterface, int i) {
         }
     }
 
-    public void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                for (TLObject obj : result) {
-                    if (obj instanceof TLRPC.User) {
-                        TLRPC.User user = (TLRPC.User) obj;
+    private class MessagesAdapter extends BaseContactsSearchAdapter {
+
+        private Context mContext;
+        private Timer searchTimer;
+        private ArrayList<TLObject> searchResult = new ArrayList<TLObject>();
+        private ArrayList<CharSequence> searchResultNames = new ArrayList<CharSequence>();
+
+        public MessagesAdapter(Context context) {
+            mContext = context;
+        }
+
+        public void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    for (TLObject obj : result) {
+                        if (obj instanceof TLRPC.User) {
+                            TLRPC.User user = (TLRPC.User) obj;
+                            MessagesController.getInstance().putUser(user, true);
+                        } else if (obj instanceof TLRPC.Chat) {
+                            TLRPC.Chat chat = (TLRPC.Chat) obj;
+                            MessagesController.getInstance().putChat(chat, true);
+                        } else if (obj instanceof TLRPC.EncryptedChat) {
+                            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
+                            MessagesController.getInstance().putEncryptedChat(chat, true);
+                        }
+                    }
+                    for (TLRPC.User user : encUsers) {
                         MessagesController.getInstance().putUser(user, true);
-                    } else if (obj instanceof TLRPC.Chat) {
-                        TLRPC.Chat chat = (TLRPC.Chat) obj;
-                        MessagesController.getInstance().putChat(chat, true);
-                    } else if (obj instanceof TLRPC.EncryptedChat) {
-                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
-                        MessagesController.getInstance().putEncryptedChat(chat, true);
+                    }
+                    searchResult = result;
+                    searchResultNames = names;
+                    if (searching) {
+                        messagesListViewAdapter.notifyDataSetChanged();
                     }
                 }
-                for (TLRPC.User user : encUsers) {
-                    MessagesController.getInstance().putUser(user, true);
-                }
-                searchResult = result;
-                searchResultNames = names;
-                if (searching) {
-                    messagesListViewAdapter.notifyDataSetChanged();
-                }
-            }
-        });
-    }
+            });
+        }
 
-    public void searchDialogs(final String query) {
-        if (query == null) {
-            searchResult = null;
-            searchResultNames = null;
-        } else {
-            try {
-                if (searchTimer != null) {
-                    searchTimer.cancel();
+        public boolean isGlobalSearch(int i) {
+            if (searching && searchWas) {
+                int localCount = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (i >= 0 && i < localCount) {
+                    return false;
+                } else if (i > localCount && i <= globalCount + localCount) {
+                    return true;
                 }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
             }
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
+            return false;
+        }
+
+        public void searchDialogs(final String query) {
+            if (query == null) {
+                searchResult.clear();
+                searchResultNames.clear();
+                queryServerSearch(null);
+                notifyDataSetChanged();
+            } else {
+                try {
+                    if (searchTimer != null) {
                         searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
                     }
-                    MessagesStorage.getInstance().searchDialogs(activityToken, query, !serverOnly);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            }, 100, 300);
-        }
-    }
-
-    private class MessagesAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public MessagesAdapter(Context context) {
-            mContext = context;
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        MessagesStorage.getInstance().searchDialogs(activityToken, query, !serverOnly);
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                queryServerSearch(query);
+                            }
+                        });
+                    }
+                }, 200, 300);
+            }
         }
 
         @Override
         public boolean areAllItemsEnabled() {
-            return true;
+            return false;
         }
 
         @Override
         public boolean isEnabled(int i) {
-            return true;
+            return !(searching && searchWas) || i != searchResult.size();
         }
 
         @Override
         public int getCount() {
             if (searching && searchWas) {
-                if (searchResult == null) {
-                    return 0;
+                int count = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (globalCount != 0) {
+                    count += globalCount + 1;
                 }
-                return searchResult.size();
+                return count;
             }
             int count;
             if (serverOnly) {
@@ -721,8 +739,28 @@ public int getCount() {
         }
 
         @Override
-        public Object getItem(int i) {
-            return null;
+        public TLObject getItem(int i) {
+            if (searching && searchWas) {
+                int localCount = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (i >= 0 && i < localCount) {
+                    return searchResult.get(i);
+                } else if (i > localCount && i <= globalCount + localCount) {
+                    return globalSearch.get(i - localCount - 1);
+                }
+                return null;
+            }
+            if (serverOnly) {
+                if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                    return null;
+                }
+                return MessagesController.getInstance().dialogsServerOnly.get(i);
+            } else {
+                if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
+                    return null;
+                }
+                return MessagesController.getInstance().dialogs.get(i);
+            }
         }
 
         @Override
@@ -732,57 +770,86 @@ public long getItemId(int i) {
 
         @Override
         public boolean hasStableIds() {
-            return false;
+            return true;
         }
 
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
-            if (searching && searchWas) {
+            int type = getItemViewType(i);
+
+            if (type == 3) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                    view.setPadding(AndroidUtilities.dp(11), 0, AndroidUtilities.dp(11), 0);
+                }
+            } else if (type == 2) {
                 if (view == null) {
                     view = new ChatOrUserCell(mContext);
                 }
-                TLRPC.User user = null;
-                TLRPC.Chat chat = null;
-                TLRPC.EncryptedChat encryptedChat = null;
+                if (searching && searchWas) {
+                    TLRPC.User user = null;
+                    TLRPC.Chat chat = null;
+                    TLRPC.EncryptedChat encryptedChat = null;
 
-                TLObject obj = searchResult.get(i);
-                if (obj instanceof TLRPC.User) {
-                    user = MessagesController.getInstance().getUser(((TLRPC.User)obj).id);
-                } else if (obj instanceof TLRPC.Chat) {
-                    chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
-                } else if (obj instanceof TLRPC.EncryptedChat) {
-                    encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
-                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-                }
+                    ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+                    TLObject obj = getItem(i);
+                    if (obj instanceof TLRPC.User) {
+                        user = MessagesController.getInstance().getUser(((TLRPC.User) obj).id);
+                        if (user == null) {
+                            user = (TLRPC.User) obj;
+                        }
+                    } else if (obj instanceof TLRPC.Chat) {
+                        chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
+                        user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                    }
 
-                ((ChatOrUserCell)view).setData(user, chat, encryptedChat, searchResultNames.get(i), null);
+                    CharSequence username = null;
+                    CharSequence name = null;
+                    if (i < searchResult.size()) {
+                        name = searchResultNames.get(i);
+                        if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                            if (name.toString().startsWith("@" + user.username)) {
+                                username = name;
+                                name = null;
+                            }
+                        }
+                    } else if (i > searchResult.size() && user != null && user.username != null) {
+                        try {
+                            username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                        } catch (Exception e) {
+                            username = user.username;
+                            FileLog.e("tmessages", e);
+                        }
+                    }
 
-                return view;
-            }
-            int type = getItemViewType(i);
-            if (type == 1) {
+                    ((ChatOrUserCell) view).setData(user, chat, encryptedChat, name, username);
+                }
+            } else if (type == 1) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.loading_more_layout, viewGroup, false);
                 }
-                return view;
-            }
-
-            if (view == null) {
-                view = new DialogCell(mContext);
-            }
-            if (serverOnly) {
-                ((DialogCell)view).setDialog(MessagesController.getInstance().dialogsServerOnly.get(i));
-            } else {
-                TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs.get(i);
-                if (AndroidUtilities.isTablet()) {
-                    if (dialog.id == openedDialogId) {
-                        view.setBackgroundColor(0x0f000000);
-                    } else {
-                        view.setBackgroundColor(0);
+            } else if (type == 0) {
+                if (view == null) {
+                    view = new DialogCell(mContext);
+                }
+                ((DialogCell) view).useSeparator = (i != getCount() - 1);
+                if (serverOnly) {
+                    ((DialogCell) view).setDialog(MessagesController.getInstance().dialogsServerOnly.get(i));
+                } else {
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs.get(i);
+                    if (AndroidUtilities.isTablet()) {
+                        if (dialog.id == openedDialogId) {
+                            view.setBackgroundColor(0x0f000000);
+                        } else {
+                            view.setBackgroundColor(0);
+                        }
                     }
+                    ((DialogCell) view).setDialog(dialog);
                 }
-                ((DialogCell)view).setDialog(dialog);
             }
 
             return view;
@@ -791,12 +858,10 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         @Override
         public int getItemViewType(int i) {
             if (searching && searchWas) {
-                TLObject obj = searchResult.get(i);
-                if (obj instanceof TLRPC.User || obj instanceof TLRPC.EncryptedChat) {
-                    return 2;
-                } else {
+                if (i == searchResult.size()) {
                     return 3;
                 }
+                return 2;
             }
             if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
                 return 1;
@@ -812,7 +877,7 @@ public int getViewTypeCount() {
         @Override
         public boolean isEmpty() {
             if (searching && searchWas) {
-                return searchResult == null || searchResult.size() == 0;
+                return searchResult.size() == 0 && globalSearch.isEmpty();
             }
             if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
                 return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 351d86b3d..8b93ea57c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -279,6 +279,9 @@ public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation
         int count = listView.getChildCount();
         for (int a = 0; a < count; a++) {
             View view = listView.getChildAt(a);
+            if (view.getTag() == null) {
+                continue;
+            }
             int num = (Integer)view.getTag();
             if (num < 0 || num >= selectedAlbum.photos.size()) {
                 continue;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 635ed9043..c566a2ba3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -101,6 +101,7 @@
     private View pickerView;
     private TextView doneButtonTextView;
     private TextView doneButtonBadgeTextView;
+    private ImageView shareButton;
     private boolean canShowBottom = true;
     private boolean overlayViewVisible = true;
 
@@ -595,7 +596,7 @@ public boolean canOpenMenu() {
         bottomLayout.setLayoutParams(layoutParams);
         bottomLayout.setBackgroundColor(0x7F000000);
 
-        ImageView shareButton = new ImageView(containerView.getContext());
+        shareButton = new ImageView(containerView.getContext());
         shareButton.setImageResource(R.drawable.ic_ab_share_white);
         shareButton.setScaleType(ImageView.ScaleType.CENTER);
         shareButton.setBackgroundResource(R.drawable.bar_selector_white);
@@ -656,7 +657,16 @@ public void onClick(View v) {
                     if (obj.isSent()) {
                         ArrayList<Integer> arr = new ArrayList<Integer>();
                         arr.add(obj.messageOwner.id);
-                        MessagesController.getInstance().deleteMessages(arr, null, null);
+
+                        ArrayList<Long> random_ids = null;
+                        TLRPC.EncryptedChat encryptedChat = null;
+                        if ((int)obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
+                            random_ids = new ArrayList<Long>();
+                            random_ids.add(obj.messageOwner.random_id);
+                            encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(obj.getDialogId() >> 32));
+                        }
+
+                        MessagesController.getInstance().deleteMessages(arr, random_ids, encryptedChat);
                         closePhoto(false);
                     }
                 } else if (!avatarsArr.isEmpty()) {
@@ -1159,6 +1169,13 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             } else {
                 menuItem.hideSubItem(gallery_menu_showall);
             }
+            if ((int) currentDialogId == 0) {
+                menuItem.hideSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.GONE);
+            } else {
+                menuItem.showSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.VISIBLE);
+            }
             setImageIndex(0, true);
         } else if (fileLocation != null) {
             avatarsUserId = object.user_id;
@@ -1166,6 +1183,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             imagesArrLocationsSizes.add(object.size);
             avatarsArr.add(new TLRPC.TL_photoEmpty());
             bottomLayout.setVisibility(View.GONE);
+            shareButton.setVisibility(View.VISIBLE);
             menuItem.hideSubItem(gallery_menu_showall);
             setImageIndex(0, true);
             currentUserAvatarLocation = fileLocation;
@@ -1194,6 +1212,13 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                     }
                 }
             }
+            if ((int) currentDialogId == 0) {
+                menuItem.hideSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.GONE);
+            } else {
+                menuItem.showSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.VISIBLE);
+            }
             opennedFromMedia = true;
             setImageIndex(index, true);
         } else if (photos != null) {
@@ -1203,6 +1228,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             setImageIndex(index, true);
             pickerView.setVisibility(View.VISIBLE);
             bottomLayout.setVisibility(View.GONE);
+            shareButton.setVisibility(View.VISIBLE);
             canShowBottom = false;
             updateSelectedCount();
         }
@@ -2140,7 +2166,7 @@ private void onDraw(Canvas canvas) {
         float ai = -1;
         if (System.currentTimeMillis() - animationStartTime < animationDuration) {
             ai = interpolator.getInterpolation((float)(System.currentTimeMillis() - animationStartTime) / animationDuration);
-            if (ai >= 0.999f) {
+            if (ai >= 0.95f) {
                 ai = -1;
             }
         }
@@ -2221,7 +2247,7 @@ private void onDraw(Canvas canvas) {
             int height = (int) (bitmapHeight * scale);
 
             centerImage.setImageCoords(-width / 2, -height / 2, width, height);
-            centerImage.draw(canvas, -width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
         }
 
         if (scale >= 1.0f) {
@@ -2252,7 +2278,7 @@ private void onDraw(Canvas canvas) {
                     int height = (int) (bitmapHeight * scale);
 
                     sideImage.setImageCoords(-width / 2, -height / 2, width, height);
-                    sideImage.draw(canvas, -width / 2, -height / 2, width, height);
+                    sideImage.draw(canvas);
                 }
             } else {
                 changingPage = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
index 3dd8e29d5..a0164a47a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
@@ -365,7 +365,7 @@ private void onDraw(Canvas canvas) {
             int height = (int) (bitmapHeight * scale);
 
             centerImage.setImageCoords(-width / 2, -height / 2, width, height);
-            centerImage.draw(canvas, -width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
         }
         canvas.restore();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 230aa7ac2..6fb4af375 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -60,6 +60,7 @@
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.NumberPicker;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -73,6 +74,7 @@
     private int profileRow;
     private int numberSectionRow;
     private int numberRow;
+    private int usernameRow;
     private int settingsSectionRow;
     private int textSizeRow;
     private int enableAnimationsRow;
@@ -180,6 +182,7 @@ public void run() {
         profileRow = rowCount++;
         numberSectionRow = rowCount++;
         numberRow = rowCount++;
+        usernameRow = rowCount++;
         settingsSectionRow = rowCount++;
         enableAnimationsRow = rowCount++;
         enableMarkdownRow = rowCount++;
@@ -210,12 +213,15 @@ public void run() {
         logoutRow = rowCount++;
         versionRow = rowCount++;
 
+        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid);
+
         return true;
     }
 
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
+        MessagesController.getInstance().cancelLoadFullUser(UserConfig.getClientUserId());
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         avatarUpdater.clear();
     }
@@ -488,6 +494,8 @@ public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                                 });
                         builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                         showAlertDialog(builder);
+                    } else if (i == usernameRow) {
+                        presentFragment(new SettingsChangeUsernameActivity());
                     }
                 }
             });
@@ -720,7 +728,7 @@ public boolean areAllItemsEnabled() {
         public boolean isEnabled(int i) {
             return i == textSizeRow || i == enableAnimationsRow || i == blockedRow || i == notificationRow || i == backgroundRow ||
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == terminateSessionsRow || i == wifiDownloadRow ||
-                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == enableMarkdownRow ||
+                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow || i == enableMarkdownRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow;
         }
 
@@ -835,22 +843,20 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 return view;
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                    view = new SettingsSectionLayout(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
                 if (i == numberSectionRow) {
-                    textView.setText(LocaleController.getString("YourPhoneNumber", R.string.YourPhoneNumber));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
                 } else if (i == settingsSectionRow) {
-                    textView.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
                 } else if (i == supportSectionRow) {
-                    textView.setText(LocaleController.getString("Support", R.string.Support));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Support", R.string.Support));
                 } else if (i == messagesSectionRow) {
-                    textView.setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
                 } else if (i == mediaDownloadSection) {
-                    textView.setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
                 } else if (i == contactsSectionRow) {
-                    textView.setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
                 }
             } else if (type == 2) {
                 if (view == null) {
@@ -859,15 +865,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == numberRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    if (user != null && user.phone != null && user.phone.length() != 0) {
-                        textView.setText(PhoneFormat.getInstance().format("+" + user.phone));
-                    } else {
-                        textView.setText(LocaleController.getString("Unknown", R.string.Unknown));
-                    }
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == notificationRow) {
+                if (i == notificationRow) {
                     textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
                     divider.setVisibility(View.VISIBLE);
                 } else if (i == blockedRow) {
@@ -986,7 +984,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
                 TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == textSizeRow) {
+                if (i == numberRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    textView.setText(LocaleController.getString("Phone", R.string.Phone));
+                    if (user != null && user.phone != null && user.phone.length() != 0) {
+                        detailTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
+                    } else {
+                        detailTextView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
+                    }
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == textSizeRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                     int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
                     detailTextView.setText(String.format("%d", size));
@@ -1008,6 +1015,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     } else if (sort == 2) {
                         detailTextView.setText(LocaleController.getString("LastName", R.string.SortLastName));
                     }
+                } else if (i == usernameRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    textView.setText(LocaleController.getString("Username", R.string.Username));
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        detailTextView.setText("@" + user.username);
+                    } else {
+                        detailTextView.setText(LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty));
+                    }
+                    divider.setVisibility(View.INVISIBLE);
                 }
             } else if (type == 6) {
                 if (view == null) {
@@ -1081,11 +1097,11 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == numberSectionRow || i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
-            } else if (i == textSizeRow || i == languageRow || i == contactsSortRow) {
+            } else if (i == textSizeRow || i == languageRow || i == contactsSortRow || i == numberRow || i == usernameRow) {
                 return 5;
             } else if (i == enableAnimationsRow || i == sendByEnterRow ||i == enableMarkdownRow || i == saveToGalleryRow) {
                 return 3;
-            } else if (i == numberRow || i == notificationRow || i == blockedRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
+            } else if (i == notificationRow || i == blockedRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
                 return 2;
             } else if (i == logoutRow) {
                 return 4;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java
index b2e169a63..49f3f8791 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java
@@ -249,7 +249,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((ChatOrUserCell)view).useSeparator = true;
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
-                ((ChatOrUserCell)view).setData(user, null, null, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("Unknown", R.string.Unknown));
+                ((ChatOrUserCell)view).setData(user, null, null, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
             } else if (type == 1) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
index 2806c0500..2d616aff7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
@@ -10,6 +10,9 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
+import android.text.InputType;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -17,6 +20,7 @@
 import android.view.inputmethod.EditorInfo;
 import android.widget.Button;
 import android.widget.EditText;
+import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
@@ -30,6 +34,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 public class SettingsChangeNameActivity extends BaseFragment {
     private EditText firstNameField;
@@ -63,14 +68,31 @@ public void onClick(View view) {
             TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
             textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
 
-            fragmentView = inflater.inflate(R.layout.settings_change_name_layout, container, false);
-
             TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
             if (user == null) {
                 user = UserConfig.getCurrentUser();
             }
 
-            firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
+            fragmentView = new LinearLayout(inflater.getContext());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
+            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+            settingsSectionLayout.setText(LocaleController.getString("YourFirstNameAndLastName", R.string.YourFirstNameAndLastName).toUpperCase());
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            firstNameField.setHintTextColor(0xffa3a3a3);
+            firstNameField.setTextColor(0xff000000);
+            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setMaxLines(1);
+            firstNameField.setLines(1);
+            firstNameField.setSingleLine(true);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
             firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
@@ -83,7 +105,25 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            lastNameField = (EditText)fragmentView.findViewById(R.id.last_name_field);
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            firstNameField.setLayoutParams(layoutParams);
+
+            lastNameField = new EditText(inflater.getContext());
+            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            lastNameField.setHintTextColor(0xffa3a3a3);
+            lastNameField.setTextColor(0xff000000);
+            lastNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            lastNameField.setMaxLines(1);
+            lastNameField.setLines(1);
+            lastNameField.setSingleLine(true);
+            lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
             lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
             lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
@@ -95,15 +135,19 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
+            AndroidUtilities.clearCursorDrawable(lastNameField);
+            ((LinearLayout) fragmentView).addView(lastNameField);
+            layoutParams = (LinearLayout.LayoutParams)lastNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(10);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            lastNameField.setLayoutParams(layoutParams);
 
             if (user != null) {
                 firstNameField.setText(user.first_name);
                 firstNameField.setSelection(firstNameField.length());
                 lastNameField.setText(user.last_name);
             }
-
-            TextView headerLabel = (TextView)fragmentView.findViewById(R.id.settings_section_text);
-            headerLabel.setText(LocaleController.getString("YourFirstNameAndLastName", R.string.YourFirstNameAndLastName));
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -125,12 +169,18 @@ public void onResume() {
     }
 
     private void saveName() {
-        TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
-        if (UserConfig.getCurrentUser() == null || lastNameField.getText() == null || firstNameField.getText() == null) {
+        TLRPC.User currentUser = UserConfig.getCurrentUser();
+        if (currentUser == null || lastNameField.getText() == null || firstNameField.getText() == null) {
+            return;
+        }
+        String newFirst = firstNameField.getText().toString();
+        String newLast = lastNameField.getText().toString();
+        if (currentUser.first_name != null && currentUser.first_name.equals(newFirst) && currentUser.last_name != null && currentUser.last_name.equals(newLast)) {
             return;
         }
-        UserConfig.getCurrentUser().first_name = req.first_name = firstNameField.getText().toString();
-        UserConfig.getCurrentUser().last_name = req.last_name = lastNameField.getText().toString();
+        TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
+        currentUser.first_name = req.first_name = newFirst;
+        currentUser.last_name = req.last_name = newLast;
         TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
         if (user != null) {
             user.first_name = req.first_name;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
new file mode 100644
index 000000000..3f893ca79
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
@@ -0,0 +1,407 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.text.Editable;
+import android.text.Html;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+
+public class SettingsChangeUsernameActivity extends BaseFragment {
+
+    private EditText firstNameField;
+    private View doneButton;
+    private TextView checkTextView;
+    private long checkReqId = 0;
+    private String lastCheckName = null;
+    private Runnable checkRunnable = null;
+    private boolean lastNameAvailable = false;
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    saveName();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+            if (user == null) {
+                user = UserConfig.getCurrentUser();
+            }
+
+            fragmentView = new LinearLayout(inflater.getContext());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
+            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+            settingsSectionLayout.setText(LocaleController.getString("Username", R.string.Username).toUpperCase());
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            firstNameField.setHintTextColor(0xffa3a3a3);
+            firstNameField.setTextColor(0xff000000);
+            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setMaxLines(1);
+            firstNameField.setLines(1);
+            firstNameField.setSingleLine(true);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            firstNameField.setHint(LocaleController.getString("UsernamePlaceholder", R.string.UsernamePlaceholder));
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            firstNameField.setLayoutParams(layoutParams);
+
+            if (user != null && user.username != null && user.username.length() > 0) {
+                firstNameField.setText(user.username);
+                firstNameField.setSelection(firstNameField.length());
+            }
+
+            checkTextView = new TextView(inflater.getContext());
+            checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            checkTextView.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+            checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            ((LinearLayout) fragmentView).addView(checkTextView);
+            layoutParams = (LinearLayout.LayoutParams)checkTextView.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(12);
+            layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            checkTextView.setLayoutParams(layoutParams);
+
+            TextView helpTextView = new TextView(inflater.getContext());
+            helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            helpTextView.setTextColor(0xff6d6d72);
+            helpTextView.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+            helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            helpTextView.setText(Html.fromHtml(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
+            ((LinearLayout) fragmentView).addView(helpTextView);
+            layoutParams = (LinearLayout.LayoutParams)helpTextView.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(10);
+            layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            helpTextView.setLayoutParams(layoutParams);
+
+            firstNameField.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                    checkUserName(firstNameField.getText().toString(), false);
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+
+                }
+            });
+
+            checkTextView.setVisibility(View.GONE);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    private void showErrorAlert(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        if (error.equals("USERNAME_INVALID")) {
+            builder.setMessage(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+        } else if (error.equals("USERNAME_OCCUPIED")) {
+            builder.setMessage(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
+        } else if (error.equals("USERNAMES_UNAVAILABLE")) {
+            builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
+        } else {
+            builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
+        }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showAlertDialog(builder);
+    }
+
+    private boolean checkUserName(final String name, boolean alert) {
+        if (name != null && name.length() > 0) {
+            checkTextView.setVisibility(View.VISIBLE);
+        } else {
+            checkTextView.setVisibility(View.GONE);
+        }
+        if (alert && name.length() == 0) {
+            return true;
+        }
+        if (checkRunnable != null) {
+            AndroidUtilities.CancelRunOnUIThread(checkRunnable);
+            checkRunnable = null;
+            lastCheckName = null;
+            if (checkReqId != 0) {
+                ConnectionsManager.getInstance().cancelRpc(checkReqId, true);
+            }
+        }
+        lastNameAvailable = false;
+        if (name != null) {
+            for (int a = 0; a < name.length(); a++) {
+                char ch = name.charAt(a);
+                if (a == 0 && ch >= '0' && ch <= '9') {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+            }
+        }
+        if (name == null || name.length() < 5) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
+            } else {
+                checkTextView.setText(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+        if (name.length() > 32) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
+            } else {
+                checkTextView.setText(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+
+        if (!alert) {
+            String currentName = UserConfig.getCurrentUser().username;
+            if (currentName == null) {
+                currentName = "";
+            }
+            if (name.equals(currentName)) {
+                checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
+                checkTextView.setTextColor(0xff26972c);
+                return true;
+            }
+
+            checkTextView.setText(LocaleController.getString("UsernameChecking", R.string.UsernameChecking));
+            checkTextView.setTextColor(0xff6d6d72);
+            lastCheckName = name;
+            checkRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    TLRPC.TL_account_checkUsername req = new TLRPC.TL_account_checkUsername();
+                    req.username = name;
+                    checkReqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                        @Override
+                        public void run(final TLObject response, final TLRPC.TL_error error) {
+                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    checkReqId = 0;
+                                    if (lastCheckName != null && lastCheckName.equals(name)) {
+                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                            checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
+                                            checkTextView.setTextColor(0xff26972c);
+                                            lastNameAvailable = true;
+                                        } else {
+                                            checkTextView.setText(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
+                                            checkTextView.setTextColor(0xffcf3030);
+                                            lastNameAvailable = false;
+                                        }
+                                    }
+                                }
+                            });
+                        }
+                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                }
+            };
+            AndroidUtilities.RunOnUIThread(checkRunnable, 300);
+        }
+        return true;
+    }
+
+    private void saveName() {
+        if (!checkUserName(firstNameField.getText().toString(), true)) {
+            return;
+        }
+        TLRPC.User user = UserConfig.getCurrentUser();
+        if (getParentActivity() == null || user == null) {
+            return;
+        }
+        String currentName = user.username;
+        if (currentName == null) {
+            currentName = "";
+        }
+        String newName = firstNameField.getText().toString();
+        if (currentName.equals(newName)) {
+            finishFragment();
+            return;
+        }
+
+        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+
+        TLRPC.TL_account_updateUsername req = new TLRPC.TL_account_updateUsername();
+        req.username = newName;
+
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, final TLRPC.TL_error error) {
+                if (error == null) {
+                    final TLRPC.User user = (TLRPC.User)response;
+                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                            UserConfig.saveConfig(true);
+                            finishFragment();
+                        }
+                    });
+                } else {
+                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            showErrorAlert(error.text);
+                        }
+                    });
+                }
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+
+        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                try {
+                    dialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+        progressDialog.show();
+    }
+
+    @Override
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index 7d7c41aec..0e2f2c0ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -42,6 +42,7 @@
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.ColorPickerView;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 public class SettingsNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private ListView listView;
@@ -541,22 +542,20 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                    view = new SettingsSectionLayout(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
                 if (i == messageSectionRow) {
-                    textView.setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
                 } else if (i == groupSectionRow) {
-                    textView.setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
                 } else if (i == inappSectionRow) {
-                    textView.setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
                 } else if (i == eventsSectionRow) {
-                    textView.setText(LocaleController.getString("Events", R.string.Events));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Events", R.string.Events));
                 } else if (i == otherSectionRow) {
-                    textView.setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
                 } else if (i == resetSectionRow) {
-                    textView.setText(LocaleController.getString("Reset", R.string.Reset));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Reset", R.string.Reset));
                 }
             } if (type == 1) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index 0d41355fd..236ce54b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -41,6 +41,7 @@
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.IdenticonView;
+import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 
@@ -63,6 +64,7 @@
     private int avatarRow;
     private int phoneSectionRow;
     private int phoneRow;
+    private int usernameRow;
     private int settingsSectionRow;
     private int settingsTimerRow;
     private int settingsKeyRow;
@@ -93,6 +95,9 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
         userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
+
+        MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
+
         return true;
     }
 
@@ -105,6 +110,8 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+
+        MessagesController.getInstance().cancelLoadFullUser(user_id);
     }
 
     private void updateRowsIds() {
@@ -112,6 +119,12 @@ private void updateRowsIds() {
         avatarRow = rowCount++;
         phoneSectionRow = rowCount++;
         phoneRow = rowCount++;
+        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        if (user != null && user.username != null && user.username.length() > 0) {
+            usernameRow = rowCount++;
+        } else {
+            usernameRow = -1;
+        }
         settingsSectionRow = rowCount++;
         if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
             settingsTimerRow = rowCount++;
@@ -281,6 +294,7 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
             int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateRowsIds();
                 if (listView != null) {
                     listView.invalidateViews();
                 }
@@ -526,16 +540,14 @@ public void onClick(View view) {
                 return view;
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                    view = new SettingsSectionLayout(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
                 if (i == phoneSectionRow) {
-                    textView.setText(LocaleController.getString("PHONE", R.string.PHONE));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
                 } else if (i == settingsSectionRow) {
-                    textView.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
                 } else if (i == sharedMediaSectionRow) {
-                    textView.setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
                 }
             } else if (type == 2) {
                 final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
@@ -608,9 +620,9 @@ public void onClick(View view) {
                     if (user.phone != null && user.phone.length() != 0) {
                         textView.setText(PhoneFormat.getInstance().format("+" + user.phone));
                     } else {
-                        textView.setText(LocaleController.getString("Unknown", R.string.Unknown));
+                        textView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
                     }
-                    divider.setVisibility(View.INVISIBLE);
+                    divider.setVisibility(usernameRow != -1 ? View.VISIBLE : View.INVISIBLE);
                     detailTextView.setText(LocaleController.getString("PhoneMobile", R.string.PhoneMobile));
                 }
             } else if (type == 3) {
@@ -639,6 +651,15 @@ public void onClick(View view) {
                     } else {
                         detailTextView.setText(AndroidUtilities.formatTTLString(encryptedChat.ttl));
                     }
+                } else if (i == usernameRow) {
+                    TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                    textView.setText(LocaleController.getString("Username", R.string.Username));
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        detailTextView.setText("@" + user.username);
+                    } else {
+                        detailTextView.setText("-");
+                    }
+                    divider.setVisibility(View.INVISIBLE);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -675,7 +696,7 @@ public int getItemViewType(int i) {
                 return 1;
             } else if (i == phoneRow) {
                 return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow) {
+            } else if (i == sharedMediaRow || i == settingsTimerRow || i == usernameRow) {
                 return 3;
             } else if (i == settingsKeyRow) {
                 return 4;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 1de738432..18ed3fd96 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -58,6 +58,7 @@
 @TargetApi(16)
 public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener {
 
+    private boolean created = false;
     private MediaPlayer videoPlayer = null;
     private VideoTimelineView videoTimelineView = null;
     private View videoContainerView = null;
@@ -161,6 +162,9 @@ public VideoEditorActivity(Bundle args) {
 
     @Override
     public boolean onFragmentCreate() {
+        if (created) {
+            return true;
+        }
         if (videoPath == null || !processOpenVideo()) {
             return false;
         }
@@ -191,6 +195,8 @@ public void onPrepared(MediaPlayer mp) {
             return false;
         }
 
+        created = true;
+
         return super.onFragmentCreate();
     }
 
@@ -451,11 +457,17 @@ public void onSurfaceTextureUpdated(SurfaceTexture surface) {
     }
 
     private void onPlayComplete() {
-        playButton.setImageResource(R.drawable.video_play);
-        videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
+        if (playButton != null) {
+            playButton.setImageResource(R.drawable.video_play);
+        }
+        if (videoSeekBarView != null && videoTimelineView != null) {
+            videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
+        }
         try {
             if (videoPlayer != null) {
-                videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
+                if (videoTimelineView != null) {
+                    videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
+                }
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
index 529f715cd..b584dcdaf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
@@ -91,6 +91,6 @@ protected void onDetachedFromWindow() {
     @Override
     protected void onDraw(Canvas canvas) {
         imageReceiver.setImageCoords(0, 0, getWidth(), getHeight());
-        imageReceiver.draw(canvas, 0, 0, getWidth(), getHeight());
+        imageReceiver.draw(canvas);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
index cd5181e2d..88ef289b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
@@ -606,24 +606,22 @@ public void onBackspace() {
                 messsageEditText.dispatchKeyEvent(new KeyEvent(0, 67));
             }
 
-            public void onEmojiSelected(String paramAnonymousString) {
+            public void onEmojiSelected(String symbol) {
                 int i = messsageEditText.getSelectionEnd();
-                CharSequence localCharSequence = Emoji.replaceEmoji(paramAnonymousString, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                messsageEditText.setText(messsageEditText.getText().insert(i, localCharSequence));
-                int j = i + localCharSequence.length();
-                messsageEditText.setSelection(j, j);
+                if (i < 0) {
+                    i = 0;
+                }
+                try {
+                    CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                    messsageEditText.setText(messsageEditText.getText().insert(i, localCharSequence));
+                    int j = i + localCharSequence.length();
+                    messsageEditText.setSelection(j, j);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
             }
         });
         emojiPopup = new PopupWindow(emojiView);
-
-        /*try {
-            Method method = emojiPopup.getClass().getMethod("setWindowLayoutType", int.class);
-            if (method != null) {
-                method.invoke(emojiPopup, WindowManager.LayoutParams.LAST_SUB_WINDOW);
-            }
-        } catch (Exception e) {
-            //don't promt
-        }*/
     }
 
     public void setDelegate(ChatActivityEnterViewDelegate delegate) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java
index 3c94f8f9f..bd5e23b29 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java
@@ -36,7 +36,6 @@
 import android.view.ViewGroup;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.LinearLayout;
-import android.widget.Scroller;
 import android.widget.TextView;
 
 import org.telegram.messenger.R;
@@ -57,14 +56,14 @@
     private static final int DEFAULT_LAYOUT_RESOURCE_ID = 0;
     private static final int SIZE_UNSPECIFIED = -1;
 
-    private final TextView mInputText;
-    private final int mSelectionDividersDistance;
-    private final int mMinHeight;
-    private final int mMaxHeight;
-    private final int mMinWidth;
+    private TextView mInputText;
+    private int mSelectionDividersDistance;
+    private int mMinHeight;
+    private int mMaxHeight;
+    private int mMinWidth;
     private int mMaxWidth;
-    private final boolean mComputeMaxWidth;
-    private final int mTextSize;
+    private boolean mComputeMaxWidth;
+    private int mTextSize;
     private int mSelectorTextGapHeight;
     private String[] mDisplayedValues;
     private int mMinValue;
@@ -76,13 +75,13 @@
     private long mLongPressUpdateInterval = DEFAULT_LONG_PRESS_UPDATE_INTERVAL;
     private final SparseArray<String> mSelectorIndexToStringCache = new SparseArray<String>();
     private final int[] mSelectorIndices = new int[SELECTOR_WHEEL_ITEM_COUNT];
-    private final Paint mSelectorWheelPaint;
-    private final Drawable mVirtualButtonPressedDrawable;
+    private Paint mSelectorWheelPaint;
+    private Drawable mVirtualButtonPressedDrawable;
     private int mSelectorElementHeight;
     private int mInitialScrollOffset = Integer.MIN_VALUE;
     private int mCurrentScrollOffset;
-    private final Scroller mFlingScroller;
-    private final Scroller mAdjustScroller;
+    private Scroller mFlingScroller;
+    private Scroller mAdjustScroller;
     private int mPreviousScrollerY;
     private ChangeCurrentByOneFromLongPressCommand mChangeCurrentByOneFromLongPressCommand;
     private float mLastDownEventY;
@@ -93,9 +92,9 @@
     private int mMinimumFlingVelocity;
     private int mMaximumFlingVelocity;
     private boolean mWrapSelectorWheel;
-    private final int mSolidColor;
-    private final Drawable mSelectionDivider;
-    private final int mSelectionDividerHeight;
+    private int mSolidColor;
+    private Drawable mSelectionDivider;
+    private int mSelectionDividerHeight;
     private int mScrollState = OnScrollListener.SCROLL_STATE_IDLE;
     private boolean mIngonreMoveEvents;
     private int mTopSelectionDividerTop;
@@ -103,7 +102,7 @@
     private int mLastHoveredChildVirtualViewId;
     private boolean mIncrementVirtualButtonPressed;
     private boolean mDecrementVirtualButtonPressed;
-    private final PressedStateHelper mPressedStateHelper;
+    private PressedStateHelper mPressedStateHelper;
     private int mLastHandledDownDpadKeyCode = -1;
 
     public interface OnValueChangeListener {
@@ -122,17 +121,7 @@
         public String format(int value);
     }
 
-    public NumberPicker(Context context) {
-        this(context, null);
-    }
-
-    public NumberPicker(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-
+    private void init() {
         mSolidColor = 0;
         mSelectionDivider = getResources().getDrawable(R.drawable.numberpicker_selection_divider);
 
@@ -166,10 +155,10 @@ public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
         mInputText.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
         mInputText.setGravity(Gravity.CENTER);
         mInputText.setSingleLine(true);
-        mInputText.setBackground(null);
+        mInputText.setBackgroundResource(0);
         mInputText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
 
-        ViewConfiguration configuration = ViewConfiguration.get(context);
+        ViewConfiguration configuration = ViewConfiguration.get(getContext());
         mTouchSlop = configuration.getScaledTouchSlop();
         mMinimumFlingVelocity = configuration.getScaledMinimumFlingVelocity();
         mMaximumFlingVelocity = configuration.getScaledMaximumFlingVelocity() / SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT;
@@ -191,6 +180,21 @@ public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
         updateInputTextView();
     }
 
+    public NumberPicker(Context context) {
+        super(context);
+        init();
+    }
+
+    public NumberPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init();
+    }
+
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         final int msrdWdth = getMeasuredWidth();
@@ -721,6 +725,28 @@ private int resolveSizeAndStateRespectingMinSize(
         }
     }
 
+    public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {
+        int result = size;
+        int specMode = MeasureSpec.getMode(measureSpec);
+        int specSize =  MeasureSpec.getSize(measureSpec);
+        switch (specMode) {
+            case MeasureSpec.UNSPECIFIED:
+                result = size;
+                break;
+            case MeasureSpec.AT_MOST:
+                if (specSize < size) {
+                    result = specSize | 16777216;
+                } else {
+                    result = size;
+                }
+                break;
+            case MeasureSpec.EXACTLY:
+                result = specSize;
+                break;
+        }
+        return result | (childMeasuredState & (-16777216));
+    }
+
     private void initializeSelectorWheelIndices() {
         mSelectorIndexToStringCache.clear();
         int[] selectorIndices = mSelectorIndices;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java
new file mode 100644
index 000000000..b87b9b7cb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java
@@ -0,0 +1,502 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.hardware.SensorManager;
+import android.util.FloatMath;
+import android.view.ViewConfiguration;
+import android.view.animation.AnimationUtils;
+import android.view.animation.Interpolator;
+
+
+/**
+ * This class encapsulates scrolling.  The duration of the scroll
+ * can be passed in the constructor and specifies the maximum time that
+ * the scrolling animation should take.  Past this time, the scrolling is 
+ * automatically moved to its final stage and computeScrollOffset()
+ * will always return false to indicate that scrolling is over.
+ */
+public class Scroller  {
+    private int mMode;
+
+    private int mStartX;
+    private int mStartY;
+    private int mFinalX;
+    private int mFinalY;
+
+    private int mMinX;
+    private int mMaxX;
+    private int mMinY;
+    private int mMaxY;
+
+    private int mCurrX;
+    private int mCurrY;
+    private long mStartTime;
+    private int mDuration;
+    private float mDurationReciprocal;
+    private float mDeltaX;
+    private float mDeltaY;
+    private boolean mFinished;
+    private Interpolator mInterpolator;
+    private boolean mFlywheel;
+
+    private float mVelocity;
+
+    private static final int DEFAULT_DURATION = 250;
+    private static final int SCROLL_MODE = 0;
+    private static final int FLING_MODE = 1;
+
+    private static float DECELERATION_RATE = (float) (Math.log(0.75) / Math.log(0.9));
+    private static float START_TENSION = 0.4f; // Tension at start: (0.4 * total T, 1.0 * Distance)
+    private static float END_TENSION = 1.0f - START_TENSION;
+    private static final int NB_SAMPLES = 100;
+    private static final float[] SPLINE = new float[NB_SAMPLES + 1];
+
+    private float mDeceleration;
+    private final float mPpi;
+
+    static {
+        float x_min = 0.0f;
+        for (int i = 0; i <= NB_SAMPLES; i++) {
+            final float t = (float) i / NB_SAMPLES;
+            float x_max = 1.0f;
+            float x, tx, coef;
+            while (true) {
+                x = x_min + (x_max - x_min) / 2.0f;
+                coef = 3.0f * x * (1.0f - x);
+                tx = coef * ((1.0f - x) * START_TENSION + x * END_TENSION) + x * x * x;
+                if (Math.abs(tx - t) < 1E-5) break;
+                if (tx > t) x_max = x;
+                else x_min = x;
+            }
+            final float d = coef + x * x * x;
+            SPLINE[i] = d;
+        }
+        SPLINE[NB_SAMPLES] = 1.0f;
+
+        // This controls the viscous fluid effect (how much of it)
+        sViscousFluidScale = 8.0f;
+        // must be set to 1.0 (used in viscousFluid())
+        sViscousFluidNormalize = 1.0f;
+        sViscousFluidNormalize = 1.0f / viscousFluid(1.0f);
+    }
+
+    private static float sViscousFluidScale;
+    private static float sViscousFluidNormalize;
+
+    /**
+     * Create a Scroller with the default duration and interpolator.
+     */
+    public Scroller(Context context) {
+        this(context, null);
+    }
+
+    /**
+     * Create a Scroller with the specified interpolator. If the interpolator is
+     * null, the default (viscous) interpolator will be used. "Flywheel" behavior will
+     * be in effect for apps targeting Honeycomb or newer.
+     */
+    public Scroller(Context context, Interpolator interpolator) {
+        this(context, interpolator, true);
+    }
+
+    /**
+     * Create a Scroller with the specified interpolator. If the interpolator is
+     * null, the default (viscous) interpolator will be used. Specify whether or
+     * not to support progressive "flywheel" behavior in flinging.
+     */
+    public Scroller(Context context, Interpolator interpolator, boolean flywheel) {
+        mFinished = true;
+        mInterpolator = interpolator;
+        mPpi = context.getResources().getDisplayMetrics().density * 160.0f;
+        mDeceleration = computeDeceleration(ViewConfiguration.getScrollFriction());
+        mFlywheel = flywheel;
+    }
+
+    /**
+     * The amount of friction applied to flings. The default value
+     * is {@link android.view.ViewConfiguration#getScrollFriction}.
+     * 
+     * @param friction A scalar dimension-less value representing the coefficient of
+     *         friction.
+     */
+    public final void setFriction(float friction) {
+        mDeceleration = computeDeceleration(friction);
+    }
+    
+    private float computeDeceleration(float friction) {
+        return SensorManager.GRAVITY_EARTH   // g (m/s^2)
+                      * 39.37f               // inch/meter
+                      * mPpi                 // pixels per inch
+                      * friction;
+    }
+
+    /**
+     * 
+     * Returns whether the scroller has finished scrolling.
+     * 
+     * @return True if the scroller has finished scrolling, false otherwise.
+     */
+    public final boolean isFinished() {
+        return mFinished;
+    }
+    
+    /**
+     * Force the finished field to a particular value.
+     *  
+     * @param finished The new finished value.
+     */
+    public final void forceFinished(boolean finished) {
+        mFinished = finished;
+    }
+    
+    /**
+     * Returns how long the scroll event will take, in milliseconds.
+     * 
+     * @return The duration of the scroll in milliseconds.
+     */
+    public final int getDuration() {
+        return mDuration;
+    }
+    
+    /**
+     * Returns the current X offset in the scroll. 
+     * 
+     * @return The new X offset as an absolute distance from the origin.
+     */
+    public final int getCurrX() {
+        return mCurrX;
+    }
+    
+    /**
+     * Returns the current Y offset in the scroll. 
+     * 
+     * @return The new Y offset as an absolute distance from the origin.
+     */
+    public final int getCurrY() {
+        return mCurrY;
+    }
+    
+    /**
+     * Returns the current velocity.
+     *
+     * @return The original velocity less the deceleration. Result may be
+     * negative.
+     */
+    public float getCurrVelocity() {
+        return mVelocity - mDeceleration * timePassed() / 2000.0f;
+    }
+
+    /**
+     * Returns the start X offset in the scroll. 
+     * 
+     * @return The start X offset as an absolute distance from the origin.
+     */
+    public final int getStartX() {
+        return mStartX;
+    }
+    
+    /**
+     * Returns the start Y offset in the scroll. 
+     * 
+     * @return The start Y offset as an absolute distance from the origin.
+     */
+    public final int getStartY() {
+        return mStartY;
+    }
+    
+    /**
+     * Returns where the scroll will end. Valid only for "fling" scrolls.
+     * 
+     * @return The final X offset as an absolute distance from the origin.
+     */
+    public final int getFinalX() {
+        return mFinalX;
+    }
+    
+    /**
+     * Returns where the scroll will end. Valid only for "fling" scrolls.
+     * 
+     * @return The final Y offset as an absolute distance from the origin.
+     */
+    public final int getFinalY() {
+        return mFinalY;
+    }
+
+    /**
+     * Call this when you want to know the new location.  If it returns true,
+     * the animation is not yet finished.  loc will be altered to provide the
+     * new location.
+     */ 
+    public boolean computeScrollOffset() {
+        if (mFinished) {
+            return false;
+        }
+
+        int timePassed = (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);
+    
+        if (timePassed < mDuration) {
+            switch (mMode) {
+            case SCROLL_MODE:
+                float x = timePassed * mDurationReciprocal;
+    
+                if (mInterpolator == null)
+                    x = viscousFluid(x); 
+                else
+                    x = mInterpolator.getInterpolation(x);
+    
+                mCurrX = mStartX + Math.round(x * mDeltaX);
+                mCurrY = mStartY + Math.round(x * mDeltaY);
+                break;
+            case FLING_MODE:
+                final float t = (float) timePassed / mDuration;
+                final int index = (int) (NB_SAMPLES * t);
+                final float t_inf = (float) index / NB_SAMPLES;
+                final float t_sup = (float) (index + 1) / NB_SAMPLES;
+                final float d_inf = SPLINE[index];
+                final float d_sup = SPLINE[index + 1];
+                final float distanceCoef = d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);
+                
+                mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));
+                // Pin to mMinX <= mCurrX <= mMaxX
+                mCurrX = Math.min(mCurrX, mMaxX);
+                mCurrX = Math.max(mCurrX, mMinX);
+                
+                mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));
+                // Pin to mMinY <= mCurrY <= mMaxY
+                mCurrY = Math.min(mCurrY, mMaxY);
+                mCurrY = Math.max(mCurrY, mMinY);
+
+                if (mCurrX == mFinalX && mCurrY == mFinalY) {
+                    mFinished = true;
+                }
+
+                break;
+            }
+        }
+        else {
+            mCurrX = mFinalX;
+            mCurrY = mFinalY;
+            mFinished = true;
+        }
+        return true;
+    }
+    
+    /**
+     * Start scrolling by providing a starting point and the distance to travel.
+     * The scroll will use the default value of 250 milliseconds for the
+     * duration.
+     * 
+     * @param startX Starting horizontal scroll offset in pixels. Positive
+     *        numbers will scroll the content to the left.
+     * @param startY Starting vertical scroll offset in pixels. Positive numbers
+     *        will scroll the content up.
+     * @param dx Horizontal distance to travel. Positive numbers will scroll the
+     *        content to the left.
+     * @param dy Vertical distance to travel. Positive numbers will scroll the
+     *        content up.
+     */
+    public void startScroll(int startX, int startY, int dx, int dy) {
+        startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
+    }
+
+    /**
+     * Start scrolling by providing a starting point and the distance to travel.
+     * 
+     * @param startX Starting horizontal scroll offset in pixels. Positive
+     *        numbers will scroll the content to the left.
+     * @param startY Starting vertical scroll offset in pixels. Positive numbers
+     *        will scroll the content up.
+     * @param dx Horizontal distance to travel. Positive numbers will scroll the
+     *        content to the left.
+     * @param dy Vertical distance to travel. Positive numbers will scroll the
+     *        content up.
+     * @param duration Duration of the scroll in milliseconds.
+     */
+    public void startScroll(int startX, int startY, int dx, int dy, int duration) {
+        mMode = SCROLL_MODE;
+        mFinished = false;
+        mDuration = duration;
+        mStartTime = AnimationUtils.currentAnimationTimeMillis();
+        mStartX = startX;
+        mStartY = startY;
+        mFinalX = startX + dx;
+        mFinalY = startY + dy;
+        mDeltaX = dx;
+        mDeltaY = dy;
+        mDurationReciprocal = 1.0f / (float) mDuration;
+    }
+
+    /**
+     * Start scrolling based on a fling gesture. The distance travelled will
+     * depend on the initial velocity of the fling.
+     * 
+     * @param startX Starting point of the scroll (X)
+     * @param startY Starting point of the scroll (Y)
+     * @param velocityX Initial velocity of the fling (X) measured in pixels per
+     *        second.
+     * @param velocityY Initial velocity of the fling (Y) measured in pixels per
+     *        second
+     * @param minX Minimum X value. The scroller will not scroll past this
+     *        point.
+     * @param maxX Maximum X value. The scroller will not scroll past this
+     *        point.
+     * @param minY Minimum Y value. The scroller will not scroll past this
+     *        point.
+     * @param maxY Maximum Y value. The scroller will not scroll past this
+     *        point.
+     */
+    public void fling(int startX, int startY, int velocityX, int velocityY,
+            int minX, int maxX, int minY, int maxY) {
+        // Continue a scroll or fling in progress
+        if (mFlywheel && !mFinished) {
+            float oldVel = getCurrVelocity();
+
+            float dx = (float) (mFinalX - mStartX);
+            float dy = (float) (mFinalY - mStartY);
+            float hyp = FloatMath.sqrt(dx * dx + dy * dy);
+
+            float ndx = dx / hyp;
+            float ndy = dy / hyp;
+
+            float oldVelocityX = ndx * oldVel;
+            float oldVelocityY = ndy * oldVel;
+            if (Math.signum(velocityX) == Math.signum(oldVelocityX) &&
+                    Math.signum(velocityY) == Math.signum(oldVelocityY)) {
+                velocityX += oldVelocityX;
+                velocityY += oldVelocityY;
+            }
+        }
+
+        mMode = FLING_MODE;
+        mFinished = false;
+
+        float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
+     
+        mVelocity = velocity;
+        float ALPHA = 800;
+        final double l = Math.log(START_TENSION * velocity / ALPHA);
+        mDuration = (int) (1000.0 * Math.exp(l / (DECELERATION_RATE - 1.0)));
+        mStartTime = AnimationUtils.currentAnimationTimeMillis();
+        mStartX = startX;
+        mStartY = startY;
+
+        float coeffX = velocity == 0 ? 1.0f : velocityX / velocity;
+        float coeffY = velocity == 0 ? 1.0f : velocityY / velocity;
+
+        int totalDistance =
+                (int) (ALPHA * Math.exp(DECELERATION_RATE / (DECELERATION_RATE - 1.0) * l));
+        
+        mMinX = minX;
+        mMaxX = maxX;
+        mMinY = minY;
+        mMaxY = maxY;
+
+        mFinalX = startX + Math.round(totalDistance * coeffX);
+        // Pin to mMinX <= mFinalX <= mMaxX
+        mFinalX = Math.min(mFinalX, mMaxX);
+        mFinalX = Math.max(mFinalX, mMinX);
+        
+        mFinalY = startY + Math.round(totalDistance * coeffY);
+        // Pin to mMinY <= mFinalY <= mMaxY
+        mFinalY = Math.min(mFinalY, mMaxY);
+        mFinalY = Math.max(mFinalY, mMinY);
+    }
+    
+    static float viscousFluid(float x)
+    {
+        x *= sViscousFluidScale;
+        if (x < 1.0f) {
+            x -= (1.0f - (float)Math.exp(-x));
+        } else {
+            float start = 0.36787944117f;   // 1/e == exp(-1)
+            x = 1.0f - (float)Math.exp(1.0f - x);
+            x = start + x * (1.0f - start);
+        }
+        x *= sViscousFluidNormalize;
+        return x;
+    }
+    
+    /**
+     * Stops the animation. Contrary to {@link #forceFinished(boolean)},
+     * aborting the animating cause the scroller to move to the final x and y
+     * position
+     *
+     * @see #forceFinished(boolean)
+     */
+    public void abortAnimation() {
+        mCurrX = mFinalX;
+        mCurrY = mFinalY;
+        mFinished = true;
+    }
+    
+    /**
+     * Extend the scroll animation. This allows a running animation to scroll
+     * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.
+     *
+     * @param extend Additional time to scroll in milliseconds.
+     * @see #setFinalX(int)
+     * @see #setFinalY(int)
+     */
+    public void extendDuration(int extend) {
+        int passed = timePassed();
+        mDuration = passed + extend;
+        mDurationReciprocal = 1.0f / mDuration;
+        mFinished = false;
+    }
+
+    /**
+     * Returns the time elapsed since the beginning of the scrolling.
+     *
+     * @return The elapsed time in milliseconds.
+     */
+    public int timePassed() {
+        return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);
+    }
+
+    /**
+     * Sets the final position (X) for this scroller.
+     *
+     * @param newX The new X offset as an absolute distance from the origin.
+     * @see #extendDuration(int)
+     * @see #setFinalY(int)
+     */
+    public void setFinalX(int newX) {
+        mFinalX = newX;
+        mDeltaX = mFinalX - mStartX;
+        mFinished = false;
+    }
+
+    /**
+     * Sets the final position (Y) for this scroller.
+     *
+     * @param newY The new Y offset as an absolute distance from the origin.
+     * @see #extendDuration(int)
+     * @see #setFinalX(int)
+     */
+    public void setFinalY(int newY) {
+        mFinalY = newY;
+        mDeltaY = mFinalY - mStartY;
+        mFinished = false;
+    }
+
+    public boolean isScrollingInDirection(float xvel, float yvel) {
+        return !mFinished && Math.signum(xvel) == Math.signum(mFinalX - mStartX) &&
+                Math.signum(yvel) == Math.signum(mFinalY - mStartY);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
new file mode 100644
index 000000000..547e5352f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
@@ -0,0 +1,85 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class SettingsSectionLayout extends LinearLayout {
+
+    private TextView textView;
+
+    private void init() {
+        setOrientation(LinearLayout.VERTICAL);
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
+        textView.setTextColor(0xff3b84c0);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams)textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(8);
+        layoutParams.rightMargin = AndroidUtilities.dp(8);
+        layoutParams.topMargin = AndroidUtilities.dp(6);
+        layoutParams.bottomMargin = AndroidUtilities.dp(4);
+        if (LocaleController.isRTL) {
+            textView.setGravity(Gravity.RIGHT);
+            layoutParams.gravity = Gravity.RIGHT;
+        }
+        textView.setLayoutParams(layoutParams);
+
+        View view = new View(getContext());
+        view.setBackgroundColor(0xff6caae4);
+        addView(view);
+        layoutParams = (LayoutParams)view.getLayoutParams();
+        layoutParams.weight = LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.dp(1);
+        view.setLayoutParams(layoutParams);
+    }
+
+    public SettingsSectionLayout(Context context) {
+        super(context);
+        init();
+    }
+
+    public SettingsSectionLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public SettingsSectionLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public SettingsSectionLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec), MeasureSpec.UNSPECIFIED));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/res/anim/scale_in.xml b/TMessagesProj/src/main/res/anim/scale_in.xml
index 406fd345a..a0aa6293b 100644
--- a/TMessagesProj/src/main/res/anim/scale_in.xml
+++ b/TMessagesProj/src/main/res/anim/scale_in.xml
@@ -20,12 +20,12 @@
         android:fromAlpha="0.0"
         android:toAlpha="1.0"
         android:interpolator="@anim/decelerate_cubic"
-        android:duration="220"/>
+        android:duration="150"/>
 
     <scale
         android:fromXScale=".8" android:toXScale="1.0"
         android:fromYScale=".8" android:toYScale="1.0"
         android:pivotX="50%p" android:pivotY="50%p"
         android:interpolator="@anim/decelerate_cubic"
-        android:duration="220"/>
+        android:duration="150"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/scale_out.xml b/TMessagesProj/src/main/res/anim/scale_out.xml
index 17bd0e7cd..11135b976 100644
--- a/TMessagesProj/src/main/res/anim/scale_out.xml
+++ b/TMessagesProj/src/main/res/anim/scale_out.xml
@@ -20,7 +20,7 @@
         android:fromAlpha="1.0"
         android:toAlpha="0.0"
         android:interpolator="@anim/decelerate_cubic"
-        android:duration="220"/>
+        android:duration="150"/>
 
     <scale
         android:fromXScale="1.0"
@@ -30,5 +30,5 @@
         android:pivotX="50%p"
         android:pivotY="50%p"
         android:interpolator="@anim/decelerate_cubic"
-        android:duration="220"/>
+        android:duration="150"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png
new file mode 100755
index 000000000..a90b6ce9c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png
new file mode 100755
index 000000000..a553f495f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_add_member.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_add_member.png
deleted file mode 100644
index cd5eaa0af..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_add_member.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_activated_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_activated.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_activated_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-hdpi/textfield_activated.9.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_default_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_default.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_default_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-hdpi/textfield_default.9.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_disabled_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_disabled_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled.9.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_disabled_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled2.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_disabled_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled2.9.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_focused.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/holo_textfield_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-hdpi/textfield_focused.9.png
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png
new file mode 100755
index 000000000..fd1dd7433
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png
new file mode 100755
index 000000000..cfa9e2b03
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_add_member.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_add_member.png
deleted file mode 100644
index a97cc796b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_add_member.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png
new file mode 100755
index 000000000..ec9b9c028
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png
new file mode 100755
index 000000000..45d6ac2b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_add_member.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_add_member.png
deleted file mode 100644
index b36768f14..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_add_member.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_activated_holo_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_activated.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_activated_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/textfield_activated.9.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_default_holo_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_default.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_default_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/textfield_default.9.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_disabled_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_disabled_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled.9.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_disabled_holo_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled2.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_disabled_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled2.9.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_focused.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/holo_textfield_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/textfield_focused.9.png
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
new file mode 100644
index 000000000..7c7941ef9
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff45658d">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
new file mode 100644
index 000000000..386d01cee
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#fff0f0f0">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
new file mode 100644
index 000000000..8c28f1d3f
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff3d3d3d">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml
new file mode 100644
index 000000000..ed6784f52
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#40a0bcdd">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml
new file mode 100644
index 000000000..46b442850
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#40ffffff">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/list_selector.xml b/TMessagesProj/src/main/res/drawable-v21/list_selector.xml
new file mode 100644
index 000000000..0ba2177bc
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/list_selector.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#2f000000">
+    <item android:id="@android:id/mask" android:drawable="@android:color/white"/>
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png
new file mode 100755
index 000000000..3ba0c9c35
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png
new file mode 100755
index 000000000..5beefa1c3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_add_member.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_add_member.png
deleted file mode 100644
index 36803948a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_add_member.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_activated_holo_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_activated.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_activated_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/textfield_activated.9.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_default_holo_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_default.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_default_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/textfield_default.9.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_disabled_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_disabled_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled.9.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_disabled_holo_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled2.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_disabled_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled2.9.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_focused_holo_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_focused.9.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/holo_textfield_focused_holo_light.9.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/textfield_focused.9.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png
new file mode 100755
index 000000000..a592549b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png
new file mode 100755
index 000000000..fd4bada3d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_add_member.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_add_member.png
deleted file mode 100644
index 3f064c690..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_add_member.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable/holo_edit_text_light.xml b/TMessagesProj/src/main/res/drawable/edit_text.xml
similarity index 50%
rename from TMessagesProj/src/main/res/drawable/holo_edit_text_light.xml
rename to TMessagesProj/src/main/res/drawable/edit_text.xml
index 65ab33c7c..492bc906a 100644
--- a/TMessagesProj/src/main/res/drawable/holo_edit_text_light.xml
+++ b/TMessagesProj/src/main/res/drawable/edit_text.xml
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_window_focused="false" android:state_enabled="true" android:drawable="@drawable/holo_textfield_default_holo_light" />
-    <item android:state_window_focused="false" android:state_enabled="false" android:drawable="@drawable/holo_textfield_disabled_holo_light" />
-    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/holo_textfield_activated_holo_light" />
-    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/holo_textfield_focused_holo_light" />
-    <item android:state_enabled="true" android:drawable="@drawable/holo_textfield_default_holo_light" />
-    <item android:state_focused="true" android:drawable="@drawable/holo_textfield_disabled_focused_holo_light" />
-    <item android:drawable="@drawable/holo_textfield_disabled_holo_light" />
+    <item android:state_window_focused="false" android:state_enabled="true" android:drawable="@drawable/textfield_default" />
+    <item android:state_window_focused="false" android:state_enabled="false" android:drawable="@drawable/textfield_disabled2" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/textfield_activated" />
+    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/textfield_focused" />
+    <item android:state_enabled="true" android:drawable="@drawable/textfield_default" />
+    <item android:state_focused="true" android:drawable="@drawable/textfield_disabled" />
+    <item android:drawable="@drawable/textfield_disabled2" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/chat_profile_change_name_layout.xml b/TMessagesProj/src/main/res/layout-ar/chat_profile_change_name_layout.xml
deleted file mode 100644
index 0ace49c83..000000000
--- a/TMessagesProj/src/main/res/layout-ar/chat_profile_change_name_layout.xml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout android:orientation="vertical"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:paddingTop="8dp">
-
-        <include layout="@layout/settings_section_layout"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:maxLines="3"
-            android:inputType="textCapSentences|textAutoCorrect|textMultiLine"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:gravity="right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </LinearLayout>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/messages_list.xml b/TMessagesProj/src/main/res/layout-ar/messages_list.xml
index 535c825b3..15d7d46a1 100644
--- a/TMessagesProj/src/main/res/layout-ar/messages_list.xml
+++ b/TMessagesProj/src/main/res/layout-ar/messages_list.xml
@@ -11,8 +11,8 @@
         android:layout_alignParentBottom="true"
         android:clipToPadding="false"
         android:fadingEdge="none"
-        android:divider="@drawable/messages_list_divider"
-        android:dividerHeight="1px"
+        android:divider="@null"
+        android:dividerHeight="0px"
         android:fadingEdgeLength="0dp"
         android:verticalScrollbarPosition="left"/>
 
diff --git a/TMessagesProj/src/main/res/layout-ar/notification_layout.xml b/TMessagesProj/src/main/res/layout-ar/notification_layout.xml
deleted file mode 100644
index 5b1d7ca66..000000000
--- a/TMessagesProj/src/main/res/layout-ar/notification_layout.xml
+++ /dev/null
@@ -1,65 +0,0 @@
-<org.telegram.ui.Views.NotificationView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:id="@+id/container_view"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:layout_weight="1"
-        android:background="#ffffff">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:layout_height="48dp"
-            android:layout_width="48dp"
-            android:id="@+id/avatar_image"
-            android:layout_gravity="right|top"/>
-
-        <FrameLayout
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:layout_marginLeft="40dp"
-            android:orientation="vertical"
-            android:layout_marginRight="56dp"
-            android:layout_gravity="top|right"
-            android:id="@+id/text_layout">
-
-            <TextView
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:gravity="right|center"
-                android:textSize="15dp"
-                android:textColor="#000000"
-                android:id="@+id/name_text_view"
-                android:paddingTop="4dp"
-                android:ellipsize="end"
-                android:layout_gravity="top|right"
-                android:singleLine="true"/>
-
-            <TextView
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:gravity="right|center"
-                android:textColor="#000000"
-                android:textSize="15dp"
-                android:id="@+id/message_text_view"
-                android:paddingTop="24dp"
-                android:ellipsize="end"
-                android:layout_gravity="top|right"
-                android:singleLine="true"/>
-
-        </FrameLayout>
-
-        <ImageView
-            android:layout_height="40dp"
-            android:layout_width="40dp"
-            android:layout_gravity="left|center"
-            android:src="@drawable/ic_profile_cross"
-            android:scaleType="center"
-            android:id="@+id/close_button"/>
-
-    </FrameLayout>
-
-</org.telegram.ui.Views.NotificationView>
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_change_name_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_change_name_layout.xml
deleted file mode 100644
index 8f51da6dd..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_change_name_layout.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:background="#ffffff">
-
-    <LinearLayout
-        android:orientation="vertical"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:paddingTop="8dp">
-
-        <include layout="@layout/settings_section_layout"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionNext"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:gravity="right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/last_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:gravity="right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </LinearLayout>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_section_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_section_layout.xml
deleted file mode 100644
index 79793ba33..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_section_layout.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="wrap_content"
-              android:id="@+id/settings_section_view"
-              android:layout_gravity="top">
-
-    <TextView android:textSize="14dp"
-              android:textStyle="bold"
-              android:textColor="#3b84c0"
-              android:layout_width="wrap_content"
-              android:layout_height="wrap_content"
-              android:layout_marginLeft="8dp"
-              android:layout_marginTop="6dp"
-              android:layout_marginRight="8dp"
-              android:layout_marginBottom="4dp"
-              android:id="@+id/settings_section_text"
-              android:layout_gravity="top|right"
-              android:gravity="right"/>
-
-    <View android:background="#6caae4"
-          android:layout_width="fill_parent"
-          android:layout_height="1dip" />
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_profile_change_name_layout.xml b/TMessagesProj/src/main/res/layout/chat_profile_change_name_layout.xml
deleted file mode 100644
index 81e5e34ea..000000000
--- a/TMessagesProj/src/main/res/layout/chat_profile_change_name_layout.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:orientation="vertical"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:paddingTop="8dp">
-
-        <include
-            layout="@layout/settings_section_layout"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:maxLines="3"
-            android:inputType="textCapSentences|textAutoCorrect|textMultiLine"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </LinearLayout>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml b/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml
index bb5acfc34..60c5e3e7d 100644
--- a/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml
@@ -15,7 +15,6 @@
         android:id="@+id/done_button"
         android:paddingRight="16dp"
         android:paddingLeft="16dp"
-        android:background="@drawable/bar_selector"
         android:minHeight="60dp"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/messages_list.xml b/TMessagesProj/src/main/res/layout/messages_list.xml
index bd3eb6002..1615aa8ea 100644
--- a/TMessagesProj/src/main/res/layout/messages_list.xml
+++ b/TMessagesProj/src/main/res/layout/messages_list.xml
@@ -9,11 +9,10 @@
         android:layout_alignParentTop="true"
         android:layout_alignParentLeft="true"
         android:layout_alignParentBottom="true"
-        android:clipToPadding="false"
         android:fadingEdge="none"
         android:fadingEdgeLength="0dp"
-        android:divider="@drawable/messages_list_divider"
-        android:dividerHeight="1px"
+        android:divider="@null"
+        android:dividerHeight="0px"
         android:animationCache="false"/>
 
     <TextView android:layout_width="match_parent"
diff --git a/TMessagesProj/src/main/res/layout/notification_layout.xml b/TMessagesProj/src/main/res/layout/notification_layout.xml
deleted file mode 100644
index e557bca37..000000000
--- a/TMessagesProj/src/main/res/layout/notification_layout.xml
+++ /dev/null
@@ -1,62 +0,0 @@
-<org.telegram.ui.Views.NotificationView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:id="@+id/container_view"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:layout_weight="1"
-        android:background="#ffffff">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:layout_height="48dp"
-            android:layout_width="48dp"
-            android:id="@+id/avatar_image"/>
-
-        <FrameLayout
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:layout_marginLeft="56dp"
-            android:orientation="vertical"
-            android:layout_marginRight="40dp"
-            android:layout_gravity="top|left"
-            android:id="@+id/text_layout">
-
-            <TextView
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:gravity="left|center"
-                android:textSize="15dp"
-                android:textColor="#000000"
-                android:id="@+id/name_text_view"
-                android:paddingTop="4dp"
-                android:ellipsize="end"
-                android:singleLine="true"/>
-
-            <TextView
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:gravity="left|center"
-                android:textColor="#000000"
-                android:textSize="15dp"
-                android:id="@+id/message_text_view"
-                android:paddingTop="24dp"
-                android:ellipsize="end"
-                android:singleLine="true"/>
-
-        </FrameLayout>
-
-        <ImageView
-            android:layout_height="40dp"
-            android:layout_width="40dp"
-            android:layout_gravity="right|center"
-            android:src="@drawable/ic_profile_cross"
-            android:scaleType="center"
-            android:id="@+id/close_button"/>
-
-    </FrameLayout>
-
-</org.telegram.ui.Views.NotificationView>
diff --git a/TMessagesProj/src/main/res/layout/settings_change_name_layout.xml b/TMessagesProj/src/main/res/layout/settings_change_name_layout.xml
deleted file mode 100644
index f85588786..000000000
--- a/TMessagesProj/src/main/res/layout/settings_change_name_layout.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="#ffffff">
-
-    <LinearLayout
-        android:orientation="vertical"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:paddingTop="8dp">
-
-        <include layout="@layout/settings_section_layout"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionNext"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/last_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </LinearLayout>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_section_layout.xml b/TMessagesProj/src/main/res/layout/settings_section_layout.xml
deleted file mode 100644
index a9b6d8512..000000000
--- a/TMessagesProj/src/main/res/layout/settings_section_layout.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:id="@+id/settings_section_view"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="14dp"
-        android:textStyle="bold"
-        android:textColor="#3b84c0"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginTop="6dp"
-        android:layout_marginRight="8dp"
-        android:layout_marginBottom="4dp"
-        android:id="@+id/settings_section_text"
-        android:layout_gravity="top"/>
-
-    <View
-        android:background="#6caae4"
-        android:layout_width="fill_parent"
-        android:layout_height="1dp" />
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index d13a5f61c..e5c66758d 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -51,9 +51,11 @@
     <string name="DeleteChat">حذف وخروج</string>
     <string name="HiddenName">الاسم مخفي</string>
     <string name="SelectChat">اختر محادثة</string>
+    <string name="PhotoTip">إضغط بإستمرار على المستخدم العرض</string>
+    <string name="CompatibilityChat">%1$s يستخدم إصدار قديم من تيليجرام، لذلك، الصور السرية ستظهر في وضع الموافقة.\n\nعندما يقوم %2$s بتحديث تيليجرام، الصور التي بها عداد دقيقة أو أقل ستعمل بطريقة \"الاستمرار بالضغط للإستعراض\"، وسيتم إخبارك عندما يلتقط المستقبل صورة من شاشته.</string>
     <!--broadcasts-->
     <string name="BroadcastList">قائمة الرسالة الجماعية</string>
-    <string name="NewBroadcastList">قائمة رسالة جماعية جديدة</string>
+    <string name="NewBroadcastList">رسالة جماعية جديدة</string>
     <string name="EnterListName">أدخل اسم القائمة</string>
     <string name="YouCreatedBroadcastList">أنت قمت بإنشاء قائمة رسالة جماعية</string>
     <string name="AddRecipient">إضافة مستلم</string>
@@ -146,8 +148,8 @@
     <string name="NotificationUnrecognizedDevice">%1$s,\nتم تسجيل الدخول لحسابك من جهاز جديد يوم %2$s\n\nالجهاز: %3$s\nالموقع: %4$s\n\nإذا لم يكن أنت من سجل الدخول، يمكنك الذهاب للإعدادات ثم تسجيل الخروج من كافة الأجهزة الأخرى.\n\nشكرًا,\nفريق عمل تيليجرام</string>
     <string name="NotificationContactNewPhoto">%1$s قام بتغيير صورته الشخصية</string>
     <string name="Reply">الرد</string>
-    <string name="ReplyToGroup">Reply to %1$s</string>
-    <string name="ReplyToUser">Reply to %1$s</string>
+    <string name="ReplyToGroup">الرد على %1$s</string>
+    <string name="ReplyToUser">الرد على %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
     <string name="SelectContact">اختر جهة اتصال</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">آخر ظهور</string>
     <string name="LastSeenDate">آخر ظهور</string>
     <string name="InviteFriends">قم بدعوة صديق</string>
+    <string name="GlobalSearch">بحث شامل</string>
     <!--group create view-->
     <string name="SendMessageTo">إرسال الرسالة إلى...</string>
     <string name="EnterGroupNamePlaceholder">أدخل اسم للمجموعة</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">الهاتف</string>
     <string name="StartEncryptedChat">إبدأ محادثة سرية</string>
     <string name="CreateEncryptedChatError">حدث خطأ.</string>
-    <string name="CreateEncryptedChatOutdatedError">لا يمكن إنشاء محادثة سرية مع  %1$s.\n\n%2$s  يستخدم إصدار قديم من تيليجرام ولا بد أن يقوم بالتحديث أولًا.</string>
     <string name="SecretTitle">محادثة سرية</string>
     <string name="EncryptionKey">مفتاح التشفير</string>
     <string name="MessageLifetime">عداد التدمير الذاتي</string>
     <string name="ShortMessageLifetimeForever">إيقاف</string>
     <string name="EncryptionKeyDescription">هذه الصورة هي تصور لمفتاح التشفير لهذه المحادثة السرية مع <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>إذا كانت مطابقة للصورة التي في جهاز <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, فمحادثتكم آمنة ٢٠٠٪.<![CDATA[<br><br>]]>للمزيد نرجو الذهاب إلى telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">غير معروف</string>
+    <string name="Info">معلومات</string>
+    <string name="Phone">هاتف</string>
+    <!--usernames-->
+    <string name="Username">اسم مستخدم</string>
+    <string name="UsernamePlaceholder">معرّفك</string>
+    <string name="UsernameInUse">المعذرة، اسم المستخدم تم اختياره مسبقًا.</string>
+    <string name="UsernameInvalid">المعذرة، اسم المستخدم غير مقبول.</string>
+    <string name="UsernameInvalidShort">سم المستخدم يجب أن يتكوّن من ٥ حروف على الأقل.</string>
+    <string name="UsernameInvalidLong">اسم المستخدم يجب ألا يتخطى ٣٢ حرف كحد أقصى.</string>
+    <string name="UsernameInvalidStartNumber">المعذرة، اسم المستخدم لا يمكن أن يبدأ برقم.</string>
+    <string name="UsernameHelp">يمكنك اختيار اسم مستخدم في <![CDATA[<b>]]>تيليجرام<![CDATA[</b>]]>. إذا قمت بذلك، سيستطيع الناس إيجادك باستخدام الاسم المستخدم والتواصل معك من دون معرفة رقمك.<![CDATA[<br><br>]]>يمكنك استخدام <![CDATA[<b>]]>حروف اللغة الإنجليزية<![CDATA[</b>]]>, <![CDATA[<b>]]>وأرقامها<![CDATA[</b>]]> و كذلك الخط. لا بد من استخدام <![CDATA[<b>]]>٥<![CDATA[</b>]]> حروف على الأقل.</string>
+    <string name="UsernameChecking">جاري مراجعة اسم المستخدم...</string>
+    <string name="UsernameAvailable">%1$s متاح.</string>
+    <string name="UsernameEmpty">لا يوجد</string>
+    <string name="ErrorOccurred">حدث خطأ.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">تم تعيين كافة الإشعارات افتراضيا</string>
     <string name="TextSize">حجم نص الرسائل</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">إلغاء الحظر</string>
     <string name="UnblockText">إضغط بإستمرار على المستخدم لإلغاء الحظر</string>
     <string name="NoBlocked">لا توجد جهات اتصال محظورة</string>
-    <string name="YourPhoneNumber">رقم هاتفك</string>
     <string name="MessageNotifications">إشعارات الرسائل</string>
     <string name="Alert">التنبيه</string>
     <string name="MessagePreview">معاينة الرسالة</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">أعد الإرسال باستخدام اسمي</string>
     <string name="SendMessagesToGroup">هل ترغب في إرسال رسالة إلى %1$s؟</string>
     <string name="ForwardMessagesToGroup">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
+    <string name="FeatureUnavailable">.Sorry, this feature is currently not available in your country</string>
     <!--Intro view-->
     <string name="Page1Title">تيليجرام</string>
     <string name="Page2Title">سريع</string>
@@ -381,7 +398,7 @@
     <string name="Page5Title">قوي</string>
     <string name="Page6Title">مرتبط بالسحاب</string>
     <string name="Page7Title">خصوصي</string>
-    <string name="Page1Message">أسرع تطبيق مراسلة في العالم.<![CDATA[<br/>]]>كما أنه مجاني و آمن.</string>
+    <string name="Page1Message">أسرع تطبيق مراسلة في العالم. <![CDATA[<br/>]]>كما أنه مجاني و آمن.</string>
     <string name="Page2Message"><![CDATA[<b>تيليجرام</b>]]> يوصل الرسائل أسرع من أي تطبيق آخر.</string>
     <string name="Page3Message"><![CDATA[<b>تيليجرام</b>]]> مجاني للأبد. بدون أية إعلانات. وبدون رسوم إشتراك.</string>
     <string name="Page4Message"><![CDATA[<b>تيليجرام</b>]]>  يحمي الرسائل الخاصة بك من هجمات المخترقين.</string>
@@ -389,7 +406,7 @@
     <string name="Page6Message"><![CDATA[<b>تيليجرام</b>]]> يمكنك الوصول إلى الرسائل الخاصة بك من أجهزة متعددة.</string>
     <string name="Page7Message"><![CDATA[<b>تيليجرام</b>]]> الرسائل مشفرة بشكل قوي وتستطيع تدمير ذاتها</string>
     <string name="StartMessaging">إبدأ المراسلة</string>
-    <!--plurals-->
+    <!--plural-->
     <string name="Online_zero">%1$d متصل</string>
     <string name="Online_one">%1$d متصل</string>
     <string name="Online_two">%1$d متصل</string>
@@ -426,42 +443,42 @@
     <string name="FromContacts_few">من %1$d جهات اتصال</string>
     <string name="FromContacts_many">من %1$d جهة اتصال</string>
     <string name="FromContacts_other">من %1$d جهة اتصال</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d ثانية</string>
+    <string name="Seconds_one">%1$d ثانية</string>
+    <string name="Seconds_two">%1$d ثانيتان</string>
+    <string name="Seconds_few">%1$d ثوانٍ</string>
+    <string name="Seconds_many">%1$d ثانية</string>
+    <string name="Seconds_other">%1$d ثانية</string>
+    <string name="Minutes_zero">%1$d دقيقة</string>
+    <string name="Minutes_one">%1$d دقيقة</string>
+    <string name="Minutes_two">%1$d دقيقتان</string>
+    <string name="Minutes_few">%1$d دقائق</string>
+    <string name="Minutes_many">%1$d دقيقة</string>
+    <string name="Minutes_other">%1$d دقيقة</string>
+    <string name="Hours_zero">%1$d ساعة</string>
+    <string name="Hours_one">%1$d ساعة</string>
+    <string name="Hours_two">%1$d ساعتان</string>
+    <string name="Hours_few">%1$d ساعات</string>
+    <string name="Hours_many">%1$d ساعة</string>
+    <string name="Hours_other">%1$d ساعة</string>
+    <string name="Days_zero">%1$d يوم</string>
+    <string name="Days_one">%1$d يوم</string>
+    <string name="Days_two">%1$d يومان</string>
+    <string name="Days_few">%1$d أيام</string>
+    <string name="Days_many">%1$d يوم</string>
+    <string name="Days_other">%1$d يوم</string>
+    <string name="Weeks_zero">%1$d أسبوع</string>
+    <string name="Weeks_one">%1$d أسبوع</string>
+    <string name="Weeks_two">%1$d أسبوعان</string>
+    <string name="Weeks_few">%1$d أسابيع</string>
+    <string name="Weeks_many">%1$d أسبوع</string>
+    <string name="Weeks_other">%1$d أسبوع</string>
     <!--date formatters-->
-    <string name="formatterMonth">dd MMM</string>
+    <string name="formatterMonth">MMM dd</string>
     <string name="formatterYear">dd.MM.yy</string>
     <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM yyyy</string>
+    <string name="chatDate">MMMM d</string>
+    <string name="chatFullDate">MMMM d, yyyy</string>
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index c6ae335bc..9ff2ba274 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Löschen und beenden</string>
     <string name="HiddenName">Versteckter Name</string>
     <string name="SelectChat">Chat auswählen</string>
+    <string name="PhotoTip">Tippen und Halten</string>
+    <string name="CompatibilityChat">%1$s benutzt eine ältere Version von Telegram, sodass Fotos in Geheimen Chats im Kompatibilitätsmodus angezeigt werden.\n\nSobald %2$s Telegram aktualisiert, werden Fotos mit Timern von 1 Minute und kürzer per \"Tippen und Halten\" angezeigt. Du wirst benachrichtigt, sobald dein Chatpartner ein Bildschirmfoto macht.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Broadcast Liste</string>
     <string name="NewBroadcastList">Neue Broadcast Liste</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">zul. online</string>
     <string name="LastSeenDate">zul. online</string>
     <string name="InviteFriends">Freunde einladen</string>
+    <string name="GlobalSearch">GLOBALE SUCHE</string>
     <!--group create view-->
     <string name="SendMessageTo">Sende Nachricht an…</string>
     <string name="EnterGroupNamePlaceholder">Gruppenname</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELEFON</string>
     <string name="StartEncryptedChat">Geheimen Chat starten</string>
     <string name="CreateEncryptedChatError">Es ist ein Fehler aufgetreten.</string>
-    <string name="CreateEncryptedChatOutdatedError">Geheimer Chat konnte mit %1$s nicht gestartet werden.\n\n%2$s benutzt eine ältere Version von Telegram und muss diese erst aktualisieren.</string>
     <string name="SecretTitle">Geheimer Chat</string>
     <string name="EncryptionKey">Geheimer Schlüssel</string>
     <string name="MessageLifetime">Selbstzerstörungs-Timer</string>
     <string name="ShortMessageLifetimeForever">Aus</string>
     <string name="EncryptionKeyDescription">Das ist eine Darstellung des Schlüssels für den Geheimen Chat mit <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Wenn dieses Bild auf <![CDATA[<b>]]>%2$s\s<![CDATA[</b>]]>s Telefon genau so aussieht, ist euer Chat zu 200%% sicher.<![CDATA[<br><br>]]>Erfahre mehr auf telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Unbekannt</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Telefon</string>
+    <!--usernames-->
+    <string name="Username">Benutzername</string>
+    <string name="UsernamePlaceholder">Dein Benutzername</string>
+    <string name="UsernameInUse">Leider ist dieser Benutzername vergeben.</string>
+    <string name="UsernameInvalid">Benutzername leider nicht erlaubt.</string>
+    <string name="UsernameInvalidShort">Ein Benutzername benötigt mindestens 5 Zeichen.</string>
+    <string name="UsernameInvalidLong">Ein Benutzername darf maximal 32 Zeichen haben.</string>
+    <string name="UsernameInvalidStartNumber">Benutzernamen dürfen leider nicht mit einer Zahl anfangen.</string>
+    <string name="UsernameHelp">Wähle einen Benutzernamen, wenn du von anderen bei<![CDATA[<b>]]>Telegram<![CDATA[</b>]]>gefunden werden willst — ohne, dass sie deine Nummer kennen müssen.<![CDATA[<br><br>]]>Erlaubt sind <![CDATA[<b>]]>a-z<![CDATA[<b>]]>, <![CDATA[<b>]]>0-9<![CDATA[<b>]]> und Unterstriche. Die Mindestlänge beträgt <![CDATA[<b>]]>5<![CDATA[<b>]]> Zeichen.</string>
+    <string name="UsernameChecking">Prüfe Benutzername...</string>
+    <string name="UsernameAvailable">%1$s ist verfügbar.</string>
+    <string name="UsernameEmpty">Keiner</string>
+    <string name="ErrorOccurred">Es ist ein Fehler aufgetreten.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Alle Einstellungen für Mitteilungen zurücksetzen</string>
     <string name="TextSize">Textgröße für Nachrichten</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Freigeben</string>
     <string name="UnblockText">Gedrückt halten um freizugeben.</string>
     <string name="NoBlocked">Keine blockierten Benutzer</string>
-    <string name="YourPhoneNumber">DEINE TELEFONNUMMER</string>
     <string name="MessageNotifications">NACHRICHTEN</string>
     <string name="Alert">Benachrichtigung</string>
     <string name="MessagePreview">Vorschau</string>
@@ -239,8 +255,8 @@
     <string name="Language">Sprache</string>
     <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von einem ehrenamtlichen Team betreut wird. Wir versuchen so schnell wie möglich zu antworten, dies kann jedoch manchmal ein bisschen dauern.<![CDATA[<br><br>]]>Bitte schau auch in den <![CDATA[<a href=\"http://telegram.org/faq/de\">Fragen und Antworten </a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href=\"https://telegram.org/faq/de#problembehandlung\">Problembehandlung</a>]]>.</string>
     <string name="AskButton">Frage einen Freiwilligen</string>
-    <string name="TelegramFaq">Fragen und Antworten zu Telegram</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
+    <string name="TelegramFaq">Fragen und Antworten</string>
+    <string name="TelegramFaqUrl">https://telegram.org/faq/de</string>
     <string name="DeleteLocalization">Lokalisierung löschen?</string>
     <string name="IncorrectLocalization">Falsche Sprachdatei</string>
     <string name="Enabled">Aktiviert</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">mit meinem Namen weiterleiten</string>
     <string name="SendMessagesToGroup">Nachricht an %1$s senden?</string>
     <string name="ForwardMessagesToGroup">Weiterleiten an %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Schnell</string>
@@ -426,36 +443,36 @@
     <string name="FromContacts_few">von %1$d Kontakten</string>
     <string name="FromContacts_many">von %1$d Kontakten</string>
     <string name="FromContacts_other">von %1$d Kontakten</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d Sekunden</string>
+    <string name="Seconds_one">%1$d Sekunde</string>
+    <string name="Seconds_two">%1$d Sekunden</string>
+    <string name="Seconds_few">%1$d Sekunden</string>
+    <string name="Seconds_many">%1$d Sekunden</string>
+    <string name="Seconds_other">%1$d Sekunden</string>
+    <string name="Minutes_zero">%1$d Minuten</string>
+    <string name="Minutes_one">%1$d Minute</string>
+    <string name="Minutes_two">%1$d Minuten</string>
+    <string name="Minutes_few">%1$d Minuten</string>
+    <string name="Minutes_many">%1$d Minuten</string>
+    <string name="Minutes_other">%1$d Minuten</string>
+    <string name="Hours_zero">%1$d Stunden</string>
+    <string name="Hours_one">%1$d Stunde</string>
+    <string name="Hours_two">%1$d Stunden</string>
+    <string name="Hours_few">%1$d Stunden</string>
+    <string name="Hours_many">%1$d Stunden</string>
+    <string name="Hours_other">%1$d Stunden</string>
+    <string name="Days_zero">%1$d Tage</string>
+    <string name="Days_one">%1$d Tag</string>
+    <string name="Days_two">%1$d Tage</string>
+    <string name="Days_few">%1$d Tage</string>
+    <string name="Days_many">%1$d Tage</string>
+    <string name="Days_other">%1$d Tage</string>
+    <string name="Weeks_zero">%1$d Wochen</string>
+    <string name="Weeks_one">%1$d Woche</string>
+    <string name="Weeks_two">%1$d Wochen</string>
+    <string name="Weeks_few">%1$d Wochen</string>
+    <string name="Weeks_many">%1$d Wochen</string>
+    <string name="Weeks_other">%1$d Wochen</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 4216536f9..f639bba89 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -22,10 +22,10 @@
     <string name="DidNotGetTheCode">¿No recibiste el código?</string>
     <!--signup view-->
     <string name="YourName">Tu nombre</string>
-    <string name="RegisterText">Ingresa tu nombre y apellido</string>
+    <string name="RegisterText">Ingresa tu nombre y apellidos</string>
     <!--<string name="RegisterText">Set up your name and picture</string>-->
     <string name="FirstName">Nombre (requerido)</string>
-    <string name="LastName">Apellido (opcional)</string>
+    <string name="LastName">Apellidos (opcional)</string>
     <string name="CancelRegistration">Cancelar registro</string>
     <!--chats view-->
     <string name="Chats">Chats</string>
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Eliminar y salir</string>
     <string name="HiddenName">Nombre oculto</string>
     <string name="SelectChat">Elige el chat</string>
+    <string name="PhotoTip">Mantén pulsado para ver</string>
+    <string name="CompatibilityChat">%1$s usa una versión antigua de Telegram, así que las fotos secretas serán mostradas en un modo de compatibilidad.\n\nCuando %2$s actualice Telegram, las fotos con autodestrucción de 1 minuto o menos funcionarán con el modo \'Mantén pulsado para ver\', y te notificaremos siempre que la otra parte haga una captura de pantalla.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Lista de difusión</string>
     <string name="NewBroadcastList">Nueva difusión</string>
@@ -73,10 +75,10 @@
     <string name="SdCard">Tarjeta SD</string>
     <!--chat view-->
     <string name="Invisible">invisible</string>
-    <string name="Typing">escribe...</string>
+    <string name="Typing">escribiendo...</string>
     <string name="Attach">Adjuntar</string>
-    <string name="IsTyping">escribe...</string>
-    <string name="AreTyping">escriben...</string>
+    <string name="IsTyping">está escribiendo...</string>
+    <string name="AreTyping">están escribiendo...</string>
     <string name="GotAQuestion">¿Tienes preguntas\nsobre Telegram?</string>
     <string name="ChatTakePhoto">Hacer foto</string>
     <string name="ChatGallery">Galería</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">últ. vez</string>
     <string name="LastSeenDate">últ. vez el</string>
     <string name="InviteFriends">Invitar a amigos</string>
+    <string name="GlobalSearch">BÚSQUEDA GLOBAL</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensaje a...</string>
     <string name="EnterGroupNamePlaceholder">Nombre del grupo</string>
@@ -169,7 +172,7 @@
     <!--group info view-->
     <string name="EnterGroupNameTitle">PON EL NOMBRE DEL GRUPO</string>
     <string name="SharedMedia">Fotos y vídeos</string>
-    <string name="GroupInfo">Información</string>
+    <string name="GroupInfo">Información </string>
     <string name="SHAREDMEDIA">FOTOS Y VÍDEOS</string>
     <string name="SETTINGS">AJUSTES</string>
     <string name="AddMember">Añadir miembro</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELÉFONO</string>
     <string name="StartEncryptedChat">Iniciar chat secreto</string>
     <string name="CreateEncryptedChatError">Ocurrió un error.</string>
-    <string name="CreateEncryptedChatOutdatedError">No podemos crear un chat secreto con %1$s.\n\n%2$s está usando una versión antigua de Telegram y debe actualizarla.</string>
     <string name="SecretTitle">Chat secreto</string>
     <string name="EncryptionKey">Clave de cifrado</string>
     <string name="MessageLifetime">Autodestrucción</string>
     <string name="ShortMessageLifetimeForever">Apagada</string>
     <string name="EncryptionKeyDescription">Esta imagen es una visualización de la clave de cifrado para el chat secreto con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Si esta imagen se ve igual en el teléfono de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, tu chat es seguro en un 200%%.<![CDATA[<br><br>]]>Aprende más en telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Desconocido</string>
+    <string name="Info">INFORMACIÓN</string>
+    <string name="Phone">Teléfono</string>
+    <!--usernames-->
+    <string name="Username">Apodo</string>
+    <string name="UsernamePlaceholder">Tu apodo</string>
+    <string name="UsernameInUse">Lo siento, este apodo ya está ocupado.</string>
+    <string name="UsernameInvalid">Lo siento, este apodo es inválido.</string>
+    <string name="UsernameInvalidShort">Un apodo debe tener al menos 5 caracteres.</string>
+    <string name="UsernameInvalidLong">El apodo no debe exceder los 32 caracteres.</string>
+    <string name="UsernameInvalidStartNumber">Lo siento, un apodo no puede comenzar con un número.</string>
+    <string name="UsernameHelp">Puedes elegir un apodo en <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Si lo haces, otras personas te podrán encontrar por ese apodo y contactarte sin saber tu número de teléfono.<![CDATA[<br><br>]]>Puedes usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> y guiones bajos. La longitud mínima es de <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
+    <string name="UsernameChecking">Verificando apodo...</string>
+    <string name="UsernameAvailable">%1$s está disponible.</string>
+    <string name="UsernameEmpty">Ninguno</string>
+    <string name="ErrorOccurred">Ocurrió un error.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Restablecer las notificaciones</string>
     <string name="TextSize">Tamaño del texto</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Desbloquear</string>
     <string name="UnblockText">Para desbloquear, mantén pulsado sobre un usuario.</string>
     <string name="NoBlocked">Sin usuarios bloqueados</string>
-    <string name="YourPhoneNumber">TU NÚMERO DE TELÉFONO</string>
     <string name="MessageNotifications">NOTIFICACIONES DE MENSAJES</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Vista previa del mensaje</string>
@@ -225,7 +241,7 @@
     <string name="BlockedUsers">Usuarios bloqueados</string>
     <string name="SaveIncomingPhotos">Guardar fotos entrantes</string>
     <string name="LogOut">Cerrar sesión</string>
-    <string name="YourFirstNameAndLastName">TU NOMBRE Y APELLIDO</string>
+    <string name="YourFirstNameAndLastName">TU NOMBRE Y APELLIDOS</string>
     <string name="NoSound">Sin sonido</string>
     <string name="Default">Por defecto</string>
     <string name="Support">SOPORTE</string>
@@ -251,13 +267,13 @@
     <string name="ImportContacts">Importar contactos</string>
     <string name="WiFiOnly">Sólo vía Wi-Fi</string>
     <string name="SortFirstName">Nombre</string>
-    <string name="SortLastName">Apellido</string>
+    <string name="SortLastName">Apellidos</string>
     <string name="LedColor">Color del LED</string>
     <string name="PopupNotification">Notificaciones emergentes</string>
     <string name="NoPopup">Desactivadas</string>
     <string name="OnlyWhenScreenOn">Con pantalla encendida</string>
     <string name="OnlyWhenScreenOff">Con pantalla apagada</string>
-    <string name="AlwaysShowPopup">Mostrar siempre</string>
+    <string name="AlwaysShowPopup">Mostrar siempre </string>
     <string name="BadgeNumber">Globo en el ícono</string>
     <string name="Short">Corto</string>
     <string name="Long">Largo</string>
@@ -282,7 +298,7 @@
     <string name="SendLocation">Enviar ubicación</string>
     <string name="ShareLocation">Compartir ubicación</string>
     <!--photo gallery view-->
-    <string name="ShowAllMedia">Mostrar todas las fotos y vídeos</string>
+    <string name="ShowAllMedia">Ir a Fotos y vídeos</string>
     <string name="SaveToGallery">Guardar en galería</string>
     <string name="Of">%1$d de %2$d</string>
     <string name="Gallery">Galería</string>
@@ -349,7 +365,7 @@
     <string name="FloodWait">Muchos intentos. Por favor, inténtalo más tarde.</string>
     <string name="InvalidCode">Código inválido</string>
     <string name="InvalidFirstName">Nombre inválido</string>
-    <string name="InvalidLastName">Apellido inválido</string>
+    <string name="InvalidLastName">Apellidos inválidos</string>
     <string name="Loading">Cargando...</string>
     <string name="NoPlayerInstalled">No tienes reproductor de vídeo. Por favor, instala uno para continuar.</string>
     <string name="NoMailInstalled">Por favor, envíanos un correo electrónico a sms@telegram.org y cuéntanos tu problema.</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">reenviar desde mi nombre</string>
     <string name="SendMessagesToGroup">¿Enviar mensajes a %1$s?</string>
     <string name="ForwardMessagesToGroup">¿Reenviar mensajes a %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápida</string>
@@ -402,12 +419,12 @@
     <string name="Members_few">%1$d miembros</string>
     <string name="Members_many">%1$d miembros</string>
     <string name="Members_other">%1$d miembros</string>
-    <string name="AndMoreTyping_zero">y %1$d personas más escriben</string>
-    <string name="AndMoreTyping_one">y %1$d personas más escriben</string>
-    <string name="AndMoreTyping_two">y %1$d personas más escriben</string>
-    <string name="AndMoreTyping_few">y %1$d personas más escriben</string>
-    <string name="AndMoreTyping_many">y %1$d personas más escriben</string>
-    <string name="AndMoreTyping_other">y %1$d personas más escriben</string>
+    <string name="AndMoreTyping_zero">y %1$d personas más están escribiendo</string>
+    <string name="AndMoreTyping_one">y %1$d persona más están escribiendo</string>
+    <string name="AndMoreTyping_two">y %1$d personas más están escribiendo</string>
+    <string name="AndMoreTyping_few">y %1$d personas más están escribiendo</string>
+    <string name="AndMoreTyping_many">y %1$d personas más están escribiendo</string>
+    <string name="AndMoreTyping_other">y %1$d personas más están escribiendo</string>
     <string name="NewMessages_zero">Sin mensajes nuevos</string>
     <string name="NewMessages_one">%1$d nuevo mensaje</string>
     <string name="NewMessages_two">%1$d nuevos mensajes</string>
@@ -426,36 +443,36 @@
     <string name="FromContacts_few">de %1$d contactos</string>
     <string name="FromContacts_many">de %1$d contactos</string>
     <string name="FromContacts_other">de %1$d contactos</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d segundos</string>
+    <string name="Seconds_one">%1$d segundo</string>
+    <string name="Seconds_two">%1$d segundos</string>
+    <string name="Seconds_few">%1$d segundos</string>
+    <string name="Seconds_many">%1$d segundos</string>
+    <string name="Seconds_other">%1$d segundos</string>
+    <string name="Minutes_zero">%1$d minutos</string>
+    <string name="Minutes_one">%1$d minuto</string>
+    <string name="Minutes_two">%1$d minutos</string>
+    <string name="Minutes_few">%1$d minutos</string>
+    <string name="Minutes_many">%1$d minutos</string>
+    <string name="Minutes_other">%1$d minutos</string>
+    <string name="Hours_zero">%1$d horas</string>
+    <string name="Hours_one">%1$d hora</string>
+    <string name="Hours_two">%1$d horas</string>
+    <string name="Hours_few">%1$d horas</string>
+    <string name="Hours_many">%1$d horas</string>
+    <string name="Hours_other">%1$d horas</string>
+    <string name="Days_zero">%1$d días</string>
+    <string name="Days_one">%1$d día</string>
+    <string name="Days_two">%1$d días</string>
+    <string name="Days_few">%1$d días</string>
+    <string name="Days_many">%1$d días</string>
+    <string name="Days_other">%1$d días</string>
+    <string name="Weeks_zero">%1$d semanas</string>
+    <string name="Weeks_one">%1$d semana</string>
+    <string name="Weeks_two">%1$d semanas</string>
+    <string name="Weeks_few">%1$d semanas</string>
+    <string name="Weeks_many">%1$d semanas</string>
+    <string name="Weeks_other">%1$d semanas</string>
     <!--date formatters-->
     <string name="formatterMonth">dd \'de\' MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 2c164a12b..9aa74e097 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Elimina ed esci</string>
     <string name="HiddenName">Nome nascosto</string>
     <string name="SelectChat">Seleziona chat</string>
+    <string name="PhotoTip">Tieni premuto per vedere</string>
+    <string name="CompatibilityChat">%1$s sta usando una versione vecchia di Telegram, quindi le foto segrete verranno visualizzate in modalità di compatibilità.\n\nUna volta che %2$s avrà aggiornato Telegram, le foto con il timer minore di 1 minuto funzioneranno in modalità \'Tieni premuto per vedere\' , e verrai notificato ogni volta che l\'altro esegue uno screenshot.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Lista broadcast</string>
     <string name="NewBroadcastList">Nuova lista broadcast</string>
@@ -152,7 +154,7 @@
     <!--contacts view-->
     <string name="SelectContact">Seleziona contatto</string>
     <string name="NoContacts">Ancora nessun contatto</string>
-    <string name="InviteText">Ciao, passa a Telegram: http://telegram.org/dl2</string>
+    <string name="InviteText">Ehi, è il momento di passare a Telegram: http://telegram.org/dl2</string>
     <string name="TodayAt">oggi alle</string>
     <string name="YesterdayAt">ieri alle</string>
     <string name="Online">in linea</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">ultimo accesso</string>
     <string name="LastSeenDate">ultimo accesso</string>
     <string name="InviteFriends">Invita amici</string>
+    <string name="GlobalSearch">RICERCA GLOBALE</string>
     <!--group create view-->
     <string name="SendMessageTo">Invia messaggio a...</string>
     <string name="EnterGroupNamePlaceholder">Immetti il nome del gruppo</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELEFONO</string>
     <string name="StartEncryptedChat">Inizia chat segreta</string>
     <string name="CreateEncryptedChatError">Si è verificato un errore.</string>
-    <string name="CreateEncryptedChatOutdatedError">Impossibile creare una chat segreta con %1$s.\n\n%2$s sta usando una vecchia versione di Telegram e deve prima aggiornarla.</string>
     <string name="SecretTitle">Chat segreta</string>
     <string name="EncryptionKey">Chiave di cifratura</string>
     <string name="MessageLifetime">Timer di autodistruzione</string>
     <string name="ShortMessageLifetimeForever">Spento</string>
     <string name="EncryptionKeyDescription">Questa immagine è una visualizzazione della chiave di cifratura per questa chat segreta con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se questa immagine è uguale sul telefono di <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, la chat è sicura al 200%%.<![CDATA[<br><br>]]>Per saperne di più, visita Telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Sconosciuto</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Telefono</string>
+    <!--usernames-->
+    <string name="Username">Nome utente</string>
+    <string name="UsernamePlaceholder">Il tuo Nome Utente</string>
+    <string name="UsernameInUse">Nome utente già preso.</string>
+    <string name="UsernameInvalid">Nome utente non valido.</string>
+    <string name="UsernameInvalidShort">Il minimo per un nome utente è 5 caratteri.</string>
+    <string name="UsernameInvalidLong">Il massimo per un nome utente è 32 caratteri.</string>
+    <string name="UsernameInvalidStartNumber">Un nome utente non può iniziare con numeri.</string>
+    <string name="UsernameHelp">Puoi scegliere un nome utente su <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Se lo fai, le altre persone potranno trovarti tramite questo nome utente e contattarti senza conoscere il tuo numero di telefono.<![CDATA[<br><br>]]>Puoi usare <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underscore. La lunghezza minima è di <![CDATA[<b>]]>5<![CDATA[</b>]]>  caratteri.</string>
+    <string name="UsernameChecking">Controllando il nome utente...</string>
+    <string name="UsernameAvailable">%1$s è disponibile.</string>
+    <string name="UsernameEmpty">Nessuno</string>
+    <string name="ErrorOccurred">Si è verificato un errore.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Ripristina tutte le impostazioni di notifica predefinite</string>
     <string name="TextSize">Dimensione testo messaggi</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Sblocca</string>
     <string name="UnblockText">Tieni premuto sull’utente per sbloccarlo.</string>
     <string name="NoBlocked">Ancora nessun utente bloccato</string>
-    <string name="YourPhoneNumber">IL TUO NUMERO DI TELEFONO</string>
     <string name="MessageNotifications">NOTIFICHE MESSAGGI</string>
     <string name="Alert">Avviso</string>
     <string name="MessagePreview">Anteprima messaggio</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">inoltra dal mio nome</string>
     <string name="SendMessagesToGroup">Inviare messaggi a %1$s?</string>
     <string name="ForwardMessagesToGroup">Inoltra messaggi a %1$s?</string>
+    <string name="FeatureUnavailable">Ci spiace, questa funzione non è disponibile nel tuo paese.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Veloce</string>
@@ -381,7 +398,7 @@
     <string name="Page5Title">Potente</string>
     <string name="Page6Title">Basato sul cloud</string>
     <string name="Page7Title">Privato</string>
-    <string name="Page1Message">L\'app di messaggi <![CDATA[<b>più veloce</b>]]>al mondo.<![CDATA[<br/>]]>È <![CDATA[<b>gratuita</b>]]> e <![CDATA[<b>sicura</b>]]>.</string>
+    <string name="Page1Message">L\'app di messaggi <![CDATA[<b>più veloce</b>]]> al mondo.<![CDATA[<br/>]]>È <![CDATA[<b>gratuita</b>]]> e <![CDATA[<b>sicura</b>]]>.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> consegna i messaggi più<![CDATA[<br/>]]>velocemente di qualsiasi altra app.</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> sarà sempre gratuito.<![CDATA[<br/>]]>Nessuna pubblicità. Nessun abbonamento.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> protegge i tuoi messaggi<![CDATA[<br/>]]>dagli attacchi degli hacker.</string>
@@ -426,36 +443,36 @@
     <string name="FromContacts_few">da %1$d contatti</string>
     <string name="FromContacts_many">da %1$d contatti</string>
     <string name="FromContacts_other">da %1$d contatti</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d secondi</string>
+    <string name="Seconds_one">%1$d secondo</string>
+    <string name="Seconds_two">%1$d secondi</string>
+    <string name="Seconds_few">%1$d secondi</string>
+    <string name="Seconds_many">%1$d secondi</string>
+    <string name="Seconds_other">%1$d secondi</string>
+    <string name="Minutes_zero">%1$d minuti</string>
+    <string name="Minutes_one">%1$d minuto</string>
+    <string name="Minutes_two">%1$d minuti</string>
+    <string name="Minutes_few">%1$d minuti</string>
+    <string name="Minutes_many">%1$d minuti</string>
+    <string name="Minutes_other">%1$d minuti</string>
+    <string name="Hours_zero">%1$d ore</string>
+    <string name="Hours_one">%1$d ora</string>
+    <string name="Hours_two">%1$d ore</string>
+    <string name="Hours_few">%1$d ore</string>
+    <string name="Hours_many">%1$d ore</string>
+    <string name="Hours_other">%1$d ore</string>
+    <string name="Days_zero">%1$d giorni</string>
+    <string name="Days_one">%1$d giorno</string>
+    <string name="Days_two">%1$d giorni</string>
+    <string name="Days_few">%1$d giorni</string>
+    <string name="Days_many">%1$d giorni</string>
+    <string name="Days_other">%1$d giorni</string>
+    <string name="Weeks_zero">%1$d settimane</string>
+    <string name="Weeks_one">%1$d settimana</string>
+    <string name="Weeks_two">%1$d settimane</string>
+    <string name="Weeks_few">%1$d settimane</string>
+    <string name="Weeks_many">%1$d settimane</string>
+    <string name="Weeks_other">%1$d settimane</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 2fdf9922e..c930efc8d 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -38,7 +38,7 @@
     <string name="NoResult">결과 없음</string>
     <string name="NoChats">채팅방이 없습니다...</string>
     <string name="NoChatsHelp">대화를 시작하려면 우측 상단의\n초대하기 버튼을 누르거나\n메뉴 버튼을 눌러 보세요.</string>
-    <string name="WaitingForNetwork">네트워크 연결을 기다리는 중...</string>
+    <string name="WaitingForNetwork">대기 중...</string>
     <string name="Connecting">연결 중...</string>
     <string name="Updating">업데이트 중...</string>
     <string name="NewSecretChat">비밀대화 시작</string>
@@ -51,6 +51,8 @@
     <string name="DeleteChat">채팅방 나가기</string>
     <string name="HiddenName">숨긴 이름</string>
     <string name="SelectChat">채팅방 선택</string>
+    <string name="PhotoTip">꾹 눌러서 보기</string>
+    <string name="CompatibilityChat">%1$s님의 텔레그램 버전이 낮아 비밀 사진을 호환성 모드로 표시합니다.\n\n%2$s님이 텔레그램을 업데이트하고 나면, 자동삭제 시간이 1분 이하인 사진은 \"탭하고 누르고 있어야 보임\" 상태가 되며, 상대방이 화면을 캡처할 때 마다 알림을 받습니다.</string>
     <!--broadcasts-->
     <string name="BroadcastList">단체 메시지 리스트</string>
     <string name="NewBroadcastList">새 단체 메시지 리스트</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">마지막 접속: </string>
     <string name="LastSeenDate">마지막 접속: </string>
     <string name="InviteFriends">친구 초대</string>
+    <string name="GlobalSearch">전체 검색</string>
     <!--group create view-->
     <string name="SendMessageTo">메시지 보내기...</string>
     <string name="EnterGroupNamePlaceholder">그룹 이름 입력</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">전화번호</string>
     <string name="StartEncryptedChat">비밀대화 시작</string>
     <string name="CreateEncryptedChatError">오류가 발생했습니다.</string>
-    <string name="CreateEncryptedChatOutdatedError">%1$s님의 텔레그램 버전이 낮아 비밀대화를 시작할 수 없습니다.\n\n비밀대화를 시작하려면 %2$s님이 텔레그램을 업데이트해야 합니다.</string>
     <string name="SecretTitle">비밀대화</string>
     <string name="EncryptionKey">암호화 키</string>
     <string name="MessageLifetime">자동삭제 타이머</string>
     <string name="ShortMessageLifetimeForever">해제</string>
     <string name="EncryptionKeyDescription">이 이미지는 <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>님과의 비밀대화에 사용 중인 암호화 키의 모습입니다.<![CDATA[<br><br>]]>이 이미지가 <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>님의 암호화 키와 똑같다면 대화는 200%% 안전합니다.<![CDATA[<br><br>]]>더 자세한 사항은 telegram.org 를 참고해 주세요.</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">알 수 없음</string>
+    <string name="Info">정보</string>
+    <string name="Phone">전화번호</string>
+    <!--usernames-->
+    <string name="Username">아이디</string>
+    <string name="UsernamePlaceholder">아이디</string>
+    <string name="UsernameInUse">이미 사용 중인 아이디입니다.</string>
+    <string name="UsernameInvalid">올바른 아이디를 입력하세요.</string>
+    <string name="UsernameInvalidShort">아이디는 최소 다섯 글자 이상 입력해야 합니다.</string>
+    <string name="UsernameInvalidLong">아이디는 최대 32자까지만 가능합니다.</string>
+    <string name="UsernameInvalidStartNumber">아이디는 숫자로 시작할 수 없습니다.</string>
+    <string name="UsernameHelp">텔레그램 아이디를 설정할 수 있습니다. 아이디를 설정하면 회원님의 전화번호를 몰라도 아이디로 회원님을 찾아 대화를 나눌 수 있습니다.<![CDATA[<br><br>]]>아이디는 영문, 밑줄, 숫자로 (<![CDATA[<b>]]>a~z<![CDATA[</b>]]>, <![CDATA[<b>]]>_<![CDATA[</b>]]>, <![CDATA[<b>]]>0~9<![CDATA[</b>]]>) <![CDATA[<b>]]>다섯 글자<![CDATA[</b>]]> 이상으로 설정해 주세요.</string>
+    <string name="UsernameChecking">아이디 확인 중...</string>
+    <string name="UsernameAvailable">%1$s: 사용 가능합니다.</string>
+    <string name="UsernameEmpty">없음</string>
+    <string name="ErrorOccurred">오류가 발생했습니다.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">모든 알림 설정이 초기화되었습니다</string>
     <string name="TextSize">채팅 글자 크기</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">차단 해제</string>
     <string name="UnblockText">차단을 해제하려면 대화상대를 길게 누르세요.</string>
     <string name="NoBlocked">차단한 친구가 없습니다</string>
-    <string name="YourPhoneNumber">전화번호</string>
     <string name="MessageNotifications">메시지 알림</string>
     <string name="Alert">알림 사용</string>
     <string name="MessagePreview">메시지 미리보기</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">내 이름으로 전달</string>
     <string name="SendMessagesToGroup">%1$s 그룹에 메시지를 보낼까요?</string>
     <string name="ForwardMessagesToGroup">%1$s 그룹에 메시지를 전달할까요?</string>
+    <string name="FeatureUnavailable">이 기능은 회원님의 국가에서는 사용할 수 없습니다.</string>
     <!--Intro view-->
     <string name="Page1Title">텔레그램</string>
     <string name="Page2Title">눈부신 속도</string>
@@ -426,36 +443,36 @@
     <string name="FromContacts_few">채팅방 %1$d개에서</string>
     <string name="FromContacts_many">채팅방 %1$d개에서</string>
     <string name="FromContacts_other">채팅방 %1$d개에서</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d초</string>
+    <string name="Seconds_one">%1$d초</string>
+    <string name="Seconds_two">%1$d초</string>
+    <string name="Seconds_few">%1$d초</string>
+    <string name="Seconds_many">%1$d초</string>
+    <string name="Seconds_other">%1$d초</string>
+    <string name="Minutes_zero">%1$d분</string>
+    <string name="Minutes_one">%1$d분</string>
+    <string name="Minutes_two">%1$d분</string>
+    <string name="Minutes_few">%1$d분</string>
+    <string name="Minutes_many">%1$d분</string>
+    <string name="Minutes_other">%1$d분</string>
+    <string name="Hours_zero">%1$d시간</string>
+    <string name="Hours_one">%1$d시간</string>
+    <string name="Hours_two">%1$d시간</string>
+    <string name="Hours_few">%1$d시간</string>
+    <string name="Hours_many">%1$d시간</string>
+    <string name="Hours_other">%1$d시간</string>
+    <string name="Days_zero">%1$d일</string>
+    <string name="Days_one">%1$d일</string>
+    <string name="Days_two">%1$d일</string>
+    <string name="Days_few">%1$d일</string>
+    <string name="Days_many">%1$d일</string>
+    <string name="Days_other">%1$d일</string>
+    <string name="Weeks_zero">%1$d주</string>
+    <string name="Weeks_one">%1$d주</string>
+    <string name="Weeks_two">%1$d주</string>
+    <string name="Weeks_few">%1$d주</string>
+    <string name="Weeks_many">%1$d주</string>
+    <string name="Weeks_other">%1$d주</string>
     <!--date formatters-->
     <string name="formatterMonth">M\'월\' d\'일\'</string>
     <string name="formatterYear">yyyy.MM.dd.</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index ee7d5fa76..dc6dd8f58 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Verwijderen en verlaten</string>
     <string name="HiddenName">Verborgen naam</string>
     <string name="SelectChat">Kies een gesprek</string>
+    <string name="PhotoTip">Druk en houd ingedrukt</string>
+    <string name="CompatibilityChat">%1$s gebruikt een oudere versie van Telegram, dus worden geheime foto\'s weergegeven in de compatibiliteitsmodus.\n\nZodra %2$s Telegram updatet werken foto\'s met timers voor 1 minuut of minder in de \'Druk en houd ingedrukt\'-modus en krijg je een bericht wanneer de andere partij een schermafbeelding maakt.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Verzendlijst</string>
     <string name="NewBroadcastList">Nieuwe verzendlijst</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">gezien</string>
     <string name="LastSeenDate">gezien</string>
     <string name="InviteFriends">Vrienden uitnodigen</string>
+    <string name="GlobalSearch">WERELDWIJD ZOEKEN</string>
     <!--group create view-->
     <string name="SendMessageTo">Bericht verzenden naar…</string>
     <string name="EnterGroupNamePlaceholder">Groepsnaam...</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELEFOON</string>
     <string name="StartEncryptedChat">Geheime chat starten</string>
     <string name="CreateEncryptedChatError">Er is een fout opgetreden.</string>
-    <string name="CreateEncryptedChatOutdatedError">Kan geen geheime chat starten met %1$s.\n\n%2$s gebruikt een oudere versie van Telegram en moet eerst een update installeren.</string>
     <string name="SecretTitle">Geheime chat</string>
     <string name="EncryptionKey">Encryptiesleutel</string>
     <string name="MessageLifetime">Zelfvernietigingstimer</string>
     <string name="ShortMessageLifetimeForever">Uit</string>
     <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor deze geheime chat met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is jullie gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Onbekend</string>
+    <string name="Info">INFORMATIE</string>
+    <string name="Phone">Telefoon</string>
+    <!--usernames-->
+    <string name="Username">Gebruikersnaam</string>
+    <string name="UsernamePlaceholder">Kies een naam</string>
+    <string name="UsernameInUse">Sorry, deze gebruikersnaam is al bezet.</string>
+    <string name="UsernameInvalid">Sorry, deze gebruikersnaam is ongeldig.</string>
+    <string name="UsernameInvalidShort">Je naam moet minimaal 5 tekens hebben.</string>
+    <string name="UsernameInvalidLong">Je naam mag niet langer zijn dan 32 tekens.</string>
+    <string name="UsernameInvalidStartNumber">Sorry, begincijfers zijn niet toegestaan.</string>
+    <string name="UsernameHelp">Je kan een gebruikersnaam kiezen voor <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Hiermee kunnen anderen je vinden  en contact met je opnemen zonder je telefoonnummer te weten.<![CDATA[<br><br>]]>Je mag <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> en liggend streepje gebruiken. De minimale lengte is <![CDATA[<b>]]>5<![CDATA[</b>]]> tekens.</string>
+    <string name="UsernameChecking">Gebruikersnaam controleren.</string>
+    <string name="UsernameAvailable">%1$s is beschikbaar.</string>
+    <string name="UsernameEmpty">Geen</string>
+    <string name="ErrorOccurred">Er is een fout opgetreden.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Alle meldingsinstellingen herstellen</string>
     <string name="TextSize">Tekstgrootte berichten</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Deblokkeren</string>
     <string name="UnblockText">Houd een gebruiker ingedrukt om hem/haar te deblokkeren.</string>
     <string name="NoBlocked">Geen geblokkeerde gebruikers</string>
-    <string name="YourPhoneNumber">JE TELEFOONNUMMER</string>
     <string name="MessageNotifications">BERICHTMELDINGEN</string>
     <string name="Alert">Waarschuwing</string>
     <string name="MessagePreview">Voorvertoning</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">doorsturen via mijn eigen naam</string>
     <string name="SendMessagesToGroup">Berichten naar %1$s verzenden?</string>
     <string name="ForwardMessagesToGroup">Berichten naar %1$s doorsturen?</string>
+    <string name="FeatureUnavailable">Sorry, deze functie is momenteel niet beschikbaar in jouw land.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Snel</string>
@@ -426,36 +443,36 @@
     <string name="FromContacts_few">van %1$d contactpersonen</string>
     <string name="FromContacts_many">van %1$d contactpersonen</string>
     <string name="FromContacts_other">van %1$d contactpersonen</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d seconden</string>
+    <string name="Seconds_one">%1$d seconde</string>
+    <string name="Seconds_two">%1$d seconden</string>
+    <string name="Seconds_few">%1$d seconden</string>
+    <string name="Seconds_many">%1$d seconden</string>
+    <string name="Seconds_other">%1$d seconden</string>
+    <string name="Minutes_zero">%1$d minuten</string>
+    <string name="Minutes_one">%1$d minuut</string>
+    <string name="Minutes_two">%1$d minuten</string>
+    <string name="Minutes_few">%1$d minuten</string>
+    <string name="Minutes_many">%1$d minuten</string>
+    <string name="Minutes_other">%1$d minuten</string>
+    <string name="Hours_zero">%1$d uren</string>
+    <string name="Hours_one">%1$d uur</string>
+    <string name="Hours_two">%1$d uren</string>
+    <string name="Hours_few">%1$d uren</string>
+    <string name="Hours_many">%1$d uren</string>
+    <string name="Hours_other">%1$d uren</string>
+    <string name="Days_zero">%1$d dagen</string>
+    <string name="Days_one">%1$d dag</string>
+    <string name="Days_two">%1$d dagen</string>
+    <string name="Days_few">%1$d dagen</string>
+    <string name="Days_many">%1$d dagen</string>
+    <string name="Days_other">%1$d dagen</string>
+    <string name="Weeks_zero">%1$d weken</string>
     <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Weeks_two">%1$d weken</string>
+    <string name="Weeks_few">%1$d weken</string>
+    <string name="Weeks_many">%1$d weken</string>
+    <string name="Weeks_other">%1$d weken</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd-MM-yy</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index dcbca1b05..4554671f2 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Apagar e sair</string>
     <string name="HiddenName">Nome oculto</string>
     <string name="SelectChat">Selecione uma Conversa</string>
+    <string name="PhotoTip">Toque e segure para ver</string>
+    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualize o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Lista de Broadcast</string>
     <string name="NewBroadcastList">Nova Lista de Broadcast</string>
@@ -114,7 +116,7 @@
     <!--notification-->
     <string name="EncryptedChatRequested">Conversa secreta solicitada</string>
     <string name="EncryptedChatAccepted">Conversa secreta iniciada</string>
-    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s</string>
+    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
     <string name="MessageLifetimeYouRemoved">Você desativou o temporizador de autodestruição</string>
@@ -146,8 +148,8 @@
     <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um login na sua conta de um novo dispositivo %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\nSe não foi você, você pode ir em Configurações - Terminar todas as sessões.\n\nAtenciosamente,\nTime do Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
     <string name="Reply">Responder</string>
-    <string name="ReplyToGroup">Reply to %1$s</string>
-    <string name="ReplyToUser">Reply to %1$s</string>
+    <string name="ReplyToGroup">Responder para %1$s</string>
+    <string name="ReplyToUser">Responder para %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
     <string name="SelectContact">Selecionar Contato</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">visto</string>
     <string name="LastSeenDate">visto</string>
     <string name="InviteFriends">Convidar Amigos</string>
+    <string name="GlobalSearch">BUSCA GLOBAL</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensagem para...</string>
     <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELEFONE</string>
     <string name="StartEncryptedChat">Iniciar Conversa Secreta</string>
     <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="CreateEncryptedChatOutdatedError">Não é possível criar uma conversa secreta com %1$s.\n\n%2$s está usando uma versão antiga do Telegram e precisa ser atualizada.</string>
     <string name="SecretTitle">Conversa Secreta</string>
     <string name="EncryptionKey">Chave criptográfica</string>
     <string name="MessageLifetime">Tempo de autodestruição</string>
     <string name="ShortMessageLifetimeForever">Desativado</string>
     <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para esta conversa secreta com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Desconhecido</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Telefone</string>
+    <!--usernames-->
+    <string name="Username">Nome de Usuário</string>
+    <string name="UsernamePlaceholder">Seu nome de usuário</string>
+    <string name="UsernameInUse">Desculpe, este usuário já existe.</string>
+    <string name="UsernameInvalid">Desculpe, este usuário é inválido.</string>
+    <string name="UsernameInvalidShort">O nome de usuário deve ter pelo menos 5 caracteres.</string>
+    <string name="UsernameInvalidLong">O nome de usuário não pode exceder 32 caracteres.</string>
+    <string name="UsernameInvalidStartNumber">Desculpe, o nome de usuário não pode começar com um número.</string>
+    <string name="UsernameHelp">Você pode escolher um nome de usuário no <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Assim, outras pessoas poderão te encontrar pelo nome de usuário e entrar em contato sem precisar saber seu telefone. <![CDATA[<br><br>]]>Você pode usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underline. O tamanho mínimo é <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
+    <string name="UsernameChecking">Verificando nome de usuário...</string>
+    <string name="UsernameAvailable">%1$s está disponível.</string>
+    <string name="UsernameEmpty">Nenhum</string>
+    <string name="ErrorOccurred">Ocorreu um erro.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Restaurar todas as configurações de notificação</string>
     <string name="TextSize">Tamanho do texto nas mensagens</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Desbloquear</string>
     <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
     <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="YourPhoneNumber">SEU NÚMERO DE TELEFONE</string>
     <string name="MessageNotifications">NOTIFICAÇÕES DE MENSAGENS</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Visualização de Mensagem</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">encaminhar pelo meu nome</string>
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápido</string>
@@ -389,7 +406,7 @@
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
     <string name="StartMessaging">Comece a conversar</string>
-    <!--plurals-->
+    <!--plural-->
     <string name="Online_zero">%1$d online</string>
     <string name="Online_one">%1$d online</string>
     <string name="Online_two">%1$d online</string>
@@ -426,42 +443,42 @@
     <string name="FromContacts_few">de %1$d contatos</string>
     <string name="FromContacts_many">de %1$d contatos</string>
     <string name="FromContacts_other">de %1$d contatos</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d segundos</string>
+    <string name="Seconds_one">%1$d segundo</string>
+    <string name="Seconds_two">%1$d segundos</string>
+    <string name="Seconds_few">%1$d segundos</string>
+    <string name="Seconds_many">%1$d segundos</string>
+    <string name="Seconds_other">%1$d segundos</string>
+    <string name="Minutes_zero">%1$d minutos</string>
+    <string name="Minutes_one">%1$d minuto</string>
+    <string name="Minutes_two">%1$d minutos</string>
+    <string name="Minutes_few">%1$d minutos</string>
+    <string name="Minutes_many">%1$d minutos</string>
+    <string name="Minutes_other">%1$d minutos</string>
+    <string name="Hours_zero">%1$d horas</string>
+    <string name="Hours_one">%1$d hora</string>
+    <string name="Hours_two">%1$d horas</string>
+    <string name="Hours_few">%1$d horas</string>
+    <string name="Hours_many">%1$d horas</string>
+    <string name="Hours_other">%1$d horas</string>
+    <string name="Days_zero">%1$d dias</string>
+    <string name="Days_one">%1$d dia</string>
+    <string name="Days_two">%1$d dias</string>
+    <string name="Days_few">%1$d dias</string>
+    <string name="Days_many">%1$d dias</string>
+    <string name="Days_other">%1$d dias</string>
+    <string name="Weeks_zero">%1$d semanas</string>
+    <string name="Weeks_one">%1$d semana</string>
+    <string name="Weeks_two">%1$d semanas</string>
+    <string name="Weeks_few">%1$d semanas</string>
+    <string name="Weeks_many">%1$d semanas</string>
+    <string name="Weeks_other">%1$d semanas</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
     <string name="formatterYearMax">dd.MM.yyyy</string>
     <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM yyyy</string>
+    <string name="chatFullDate">MMMM d, yyyy</string>
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 334d37204..e9042393c 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Apagar e sair</string>
     <string name="HiddenName">Nome oculto</string>
     <string name="SelectChat">Selecione uma Conversa</string>
+    <string name="PhotoTip">Toque e segure para ver</string>
+    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualize o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Lista de Broadcast</string>
     <string name="NewBroadcastList">Nova Lista de Broadcast</string>
@@ -114,7 +116,7 @@
     <!--notification-->
     <string name="EncryptedChatRequested">Conversa secreta solicitada</string>
     <string name="EncryptedChatAccepted">Conversa secreta iniciada</string>
-    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s</string>
+    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
     <string name="MessageLifetimeYouRemoved">Você desativou o temporizador de autodestruição</string>
@@ -146,8 +148,8 @@
     <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um login na sua conta de um novo dispositivo %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\nSe não foi você, você pode ir em Configurações - Terminar todas as sessões.\n\nAtenciosamente,\nTime do Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
     <string name="Reply">Responder</string>
-    <string name="ReplyToGroup">Reply to %1$s</string>
-    <string name="ReplyToUser">Reply to %1$s</string>
+    <string name="ReplyToGroup">Responder para %1$s</string>
+    <string name="ReplyToUser">Responder para %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
     <string name="SelectContact">Selecionar Contato</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">visto</string>
     <string name="LastSeenDate">visto</string>
     <string name="InviteFriends">Convidar Amigos</string>
+    <string name="GlobalSearch">BUSCA GLOBAL</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensagem para...</string>
     <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">TELEFONE</string>
     <string name="StartEncryptedChat">Iniciar Conversa Secreta</string>
     <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="CreateEncryptedChatOutdatedError">Não é possível criar uma conversa secreta com %1$s.\n\n%2$s está usando uma versão antiga do Telegram e precisa ser atualizada.</string>
     <string name="SecretTitle">Conversa Secreta</string>
     <string name="EncryptionKey">Chave criptográfica</string>
     <string name="MessageLifetime">Tempo de autodestruição</string>
     <string name="ShortMessageLifetimeForever">Desativado</string>
     <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para esta conversa secreta com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Desconhecido</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Telefone</string>
+    <!--usernames-->
+    <string name="Username">Nome de Usuário</string>
+    <string name="UsernamePlaceholder">Seu nome de usuário</string>
+    <string name="UsernameInUse">Desculpe, este usuário já existe.</string>
+    <string name="UsernameInvalid">Desculpe, este usuário é inválido.</string>
+    <string name="UsernameInvalidShort">O nome de usuário deve ter pelo menos 5 caracteres.</string>
+    <string name="UsernameInvalidLong">O nome de usuário não pode exceder 32 caracteres.</string>
+    <string name="UsernameInvalidStartNumber">Desculpe, o nome de usuário não pode começar com um número.</string>
+    <string name="UsernameHelp">Você pode escolher um nome de usuário no <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Assim, outras pessoas poderão te encontrar pelo nome de usuário e entrar em contato sem precisar saber seu telefone. <![CDATA[<br><br>]]>Você pode usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underline. O tamanho mínimo é <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
+    <string name="UsernameChecking">Verificando nome de usuário...</string>
+    <string name="UsernameAvailable">%1$s está disponível.</string>
+    <string name="UsernameEmpty">Nenhum</string>
+    <string name="ErrorOccurred">Ocorreu um erro.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Restaurar todas as configurações de notificação</string>
     <string name="TextSize">Tamanho do texto nas mensagens</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Desbloquear</string>
     <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
     <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="YourPhoneNumber">SEU NÚMERO DE TELEFONE</string>
     <string name="MessageNotifications">NOTIFICAÇÕES DE MENSAGENS</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Visualização de Mensagem</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">encaminhar pelo meu nome</string>
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápido</string>
@@ -389,7 +406,7 @@
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
     <string name="StartMessaging">Comece a conversar</string>
-    <!--plurals-->
+    <!--plural-->
     <string name="Online_zero">%1$d online</string>
     <string name="Online_one">%1$d online</string>
     <string name="Online_two">%1$d online</string>
@@ -426,42 +443,42 @@
     <string name="FromContacts_few">de %1$d contatos</string>
     <string name="FromContacts_many">de %1$d contatos</string>
     <string name="FromContacts_other">de %1$d contatos</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
+    <string name="Seconds_zero">%1$d segundos</string>
+    <string name="Seconds_one">%1$d segundo</string>
+    <string name="Seconds_two">%1$d segundos</string>
+    <string name="Seconds_few">%1$d segundos</string>
+    <string name="Seconds_many">%1$d segundos</string>
+    <string name="Seconds_other">%1$d segundos</string>
+    <string name="Minutes_zero">%1$d minutos</string>
+    <string name="Minutes_one">%1$d minuto</string>
+    <string name="Minutes_two">%1$d minutos</string>
+    <string name="Minutes_few">%1$d minutos</string>
+    <string name="Minutes_many">%1$d minutos</string>
+    <string name="Minutes_other">%1$d minutos</string>
+    <string name="Hours_zero">%1$d horas</string>
+    <string name="Hours_one">%1$d hora</string>
+    <string name="Hours_two">%1$d horas</string>
+    <string name="Hours_few">%1$d horas</string>
+    <string name="Hours_many">%1$d horas</string>
+    <string name="Hours_other">%1$d horas</string>
+    <string name="Days_zero">%1$d dias</string>
+    <string name="Days_one">%1$d dia</string>
+    <string name="Days_two">%1$d dias</string>
+    <string name="Days_few">%1$d dias</string>
+    <string name="Days_many">%1$d dias</string>
+    <string name="Days_other">%1$d dias</string>
+    <string name="Weeks_zero">%1$d semanas</string>
+    <string name="Weeks_one">%1$d semana</string>
+    <string name="Weeks_two">%1$d semanas</string>
+    <string name="Weeks_few">%1$d semanas</string>
+    <string name="Weeks_many">%1$d semanas</string>
+    <string name="Weeks_other">%1$d semanas</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
     <string name="formatterYearMax">dd.MM.yyyy</string>
     <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM yyyy</string>
+    <string name="chatFullDate">MMMM d, yyyy</string>
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
new file mode 100644
index 000000000..bf6a19182
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -0,0 +1,74 @@
+<!--
+  ~ This is the source code of Telegram for Android v. 1.7.x.
+  ~ It is licensed under GNU GPL v. 2 or later.
+  ~ You should have received a copy of the license in this archive (see LICENSE).
+  ~
+  ~ Copyright Nikolai Kudashov, 2013-2014.
+  -->
+
+<resources
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <!--THEMES-->
+
+    <style name="Theme.TMessages.Start" parent="@android:style/Theme.Material">
+        <item name="android:actionBarStyle">@style/ActionBar.Transparent.TMessages.Start</item>
+        <item name="android:colorBackground">@android:color/white</item>
+        <item name="android:windowBackground">@android:color/white</item>
+        <item name="android:windowContentOverlay">@null</item>
+    </style>
+
+    <style name="Theme.TMessages" parent="@android:style/Theme.Material.Light">
+        <item name="android:windowActionBar">false</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowActionBarOverlay">false</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:colorBackground">@android:color/white</item>
+        <item name="android:windowBackground">@android:color/white</item>
+        <item name="android:itemTextAppearance">@style/ActionBar.Transparent.TMessages.Item</item>
+        <item name="android:listViewStyle">@style/Theme.TMessages.ListView</item>
+        <item name="android:listChoiceBackgroundIndicator">@drawable/list_selector</item>
+        <item name="android:editTextStyle">@style/Theme.TMessages.EditText</item>
+        <item name="android:actionBarItemBackground">@drawable/bar_selector_style</item>
+    </style>
+
+    <style name="Theme.TMessages.PopupNotification" parent="Theme.TMessages">
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowAnimationStyle">@null</item>
+        <item name="android:windowActionBar">false</item>
+        <item name="android:windowNoTitle">true</item>
+    </style>
+
+    <!--ACTION BAR-->
+
+    <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Material.Light.ActionBar">
+        <item name="android:background">@color/header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR ITEMS-->
+
+    <style name="ActionBar.Transparent.TMessages.Item" parent="@android:TextAppearance.Widget.IconMenu.Item">
+        <item name="android:textColor">#000000</item>
+        <item name="android:textSize">18sp</item>
+    </style>
+
+    <!--LIST VIEW-->
+
+    <style name="Theme.TMessages.ListView" parent="@android:style/Widget.Material.Light.ListView">
+        <!--<item name="android:listSelector">@drawable/list_selector</item>-->
+        <item name="android:fadingEdge">none</item>
+        <item name="android:dividerHeight">1dp</item>
+        <item name="android:divider">@color/divider</item>
+    </style>
+
+    <!--EDIT TEXT-->
+
+    <style name="Theme.TMessages.EditText" parent="android:Widget.Material.Light.EditText">
+        <item name="android:background">@drawable/edit_text</item>
+        <item name="android:textColor">#000000</item>
+    </style>
+
+</resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index ede5035a4..d8b80d29f 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -51,6 +51,8 @@
     <string name="DeleteChat">Delete and exit</string>
     <string name="HiddenName">Hidden Name</string>
     <string name="SelectChat">Select Chat</string>
+    <string name="PhotoTip">Tap and hold to view</string>
+    <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Broadcast List</string>
     <string name="NewBroadcastList">New Broadcast List</string>
@@ -160,6 +162,7 @@
     <string name="LastSeen">last seen</string>
     <string name="LastSeenDate">last seen</string>
     <string name="InviteFriends">Invite Friends</string>
+    <string name="GlobalSearch">GLOBAL SEARCH</string>
     <!--group create view-->
     <string name="SendMessageTo">Send message to...</string>
     <string name="EnterGroupNamePlaceholder">Enter group name</string>
@@ -191,13 +194,27 @@
     <string name="PHONE">PHONE</string>
     <string name="StartEncryptedChat">Start Secret Chat</string>
     <string name="CreateEncryptedChatError">An error occurred.</string>
-    <string name="CreateEncryptedChatOutdatedError">Cannot create a secret chat with %1$s.\n\n%2$s is using an older version of Telegram and needs to update first.</string>
     <string name="SecretTitle">Secret Chat</string>
     <string name="EncryptionKey">Encryption Key</string>
     <string name="MessageLifetime">Self-Destruct Timer</string>
     <string name="ShortMessageLifetimeForever">Off</string>
     <string name="EncryptionKeyDescription">This image is a visualization of the encryption key for this secret chat with <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>If this image looks the same on <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> phone, your chat is 200%% secure.<![CDATA[<br><br>]]>Learn more at telegram.org</string>
-    <string name="Unknown">Unknown</string>
+    <string name="NumberUnknown">Unknown</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Phone</string>
+    <!--usernames-->
+    <string name="Username">Username</string>
+    <string name="UsernamePlaceholder">Your Username</string>
+    <string name="UsernameInUse">Sorry, this username is already taken.</string>
+    <string name="UsernameInvalid">Sorry, this username is invalid.</string>
+    <string name="UsernameInvalidShort">A username must have at least 5 characters.</string>
+    <string name="UsernameInvalidLong">The username must not exceed 32 characters.</string>
+    <string name="UsernameInvalidStartNumber">Sorry, a username can\'t start with a number.</string>
+    <string name="UsernameHelp">You can choose a username on <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. If you do, other people will be able to find you by this username and contact you without knowing your phone number.<![CDATA[<br><br>]]>You can use <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> and underscores. Minimum length is <![CDATA[<b>]]>5<![CDATA[</b>]]> characters.</string>
+    <string name="UsernameChecking">Checking username...</string>
+    <string name="UsernameAvailable">%1$s is available.</string>
+    <string name="UsernameEmpty">None</string>
+    <string name="ErrorOccurred">An error occurred.</string>
     <!--settings view-->
     <string name="ResetNotificationsText">Reset all notification settings to default</string>
     <string name="TextSize">Messages Text Size</string>
@@ -207,7 +224,6 @@
     <string name="Unblock">Unblock</string>
     <string name="UnblockText">Tap and hold on user to unblock.</string>
     <string name="NoBlocked">No blocked users yet</string>
-    <string name="YourPhoneNumber">YOUR PHONE NUMBER</string>
     <string name="MessageNotifications">MESSAGE NOTIFICATIONS</string>
     <string name="Alert">Alert</string>
     <string name="MessagePreview">Message Preview</string>
@@ -373,6 +389,7 @@
     <string name="ForwardFromMyName">forward from my name</string>
     <string name="SendMessagesToGroup">Send messages to %1$s?</string>
     <string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Fast</string>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index a6dcf0b96..d3f110e3b 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -59,7 +59,7 @@
     <!--EDIT TEXT-->
 
     <style name="Theme.TMessages.EditText" parent="android:Widget.EditText">
-        <item name="android:background">@drawable/holo_edit_text_light</item>
+        <item name="android:background">@drawable/edit_text</item>
         <item name="android:textColor">#000000</item>
     </style>
 
