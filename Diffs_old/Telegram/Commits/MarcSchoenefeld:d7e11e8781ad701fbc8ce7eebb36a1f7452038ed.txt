diff --git a/TMessagesProj/jni/exoplayer/ffmpeg_jni.cc b/TMessagesProj/jni/exoplayer/ffmpeg_jni.cc
index d459712f4..3a3b54b8a 100755
--- a/TMessagesProj/jni/exoplayer/ffmpeg_jni.cc
+++ b/TMessagesProj/jni/exoplayer/ffmpeg_jni.cc
@@ -286,7 +286,7 @@ int decodePacket(AVCodecContext *context, AVPacket *packet,
     int outSampleSize = av_get_bytes_per_sample(context->request_sample_fmt);
     int outSamples = avresample_get_out_samples(resampleContext, sampleCount);
     int bufferOutSize = outSampleSize * channelCount * outSamples;
-    if (outSize + bufferOutSize > outputSize) {
+    if (outSize + bufferOutSize > outputSize) {  // never ever overflows
       LOGE("Output buffer size (%d) too small for output data (%d).",
            outputSize, outSize + bufferOutSize);
       av_frame_free(&frame);
@@ -314,9 +314,11 @@ int decodePacket(AVCodecContext *context, AVPacket *packet,
 
 void logError(const char *functionName, int errorNumber) {
   char *buffer = (char *) malloc(ERROR_STRING_BUFFER_LENGTH * sizeof(char));
-  av_strerror(errorNumber, buffer, ERROR_STRING_BUFFER_LENGTH);
-  LOGE("Error in %s: %s", functionName, buffer);
-  free(buffer);
+  if (buffer) {
+    av_strerror(errorNumber, buffer, ERROR_STRING_BUFFER_LENGTH);
+    LOGE("Error in %s: %s", functionName, buffer);
+    free(buffer);
+  }
 }
 
 void releaseContext(AVCodecContext *context) {
