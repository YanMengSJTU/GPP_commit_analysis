diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 7885c5a6e..4ad9b30e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -37,6 +37,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ChatActivity;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.ProfileActivity;
@@ -9042,7 +9043,7 @@ public boolean isUserAllowed(TLRPC.User user) {
             if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 return false;
             }
-            long id = (long)user.id;
+            long id = (long) user.id;
             return !allowedBots.containsKey(id) || allowedBots.get(id);
         }
         return true;
@@ -9101,5 +9102,35 @@ public boolean isDialogIdAllowed(long currentDialogId) {
         }
         return filtered;
     }
+
+
+    public boolean isMessageAllowed(MessageObject messageObject) {
+        if (messageObject.messageOwner.via_bot_id <= 0) {
+            return true;
+        }
+
+        TLRPC.User botUser = MessagesController.getInstance().getUser(messageObject.messageOwner.via_bot_id);
+        if (botUser != null && botUser.username != null && botUser.username.length() > 0) {
+            return isUserAllowed(botUser);
+        }
+        return false;
+    }
+
+
+    public ArrayList<MessageObject> filterMessages(ArrayList<MessageObject> messages) {
+        ArrayList<MessageObject> filtered = new ArrayList<>();
+        if (messages == null) {
+            return filtered;
+        }
+
+        for (MessageObject messageObject : messages) {
+            if (isMessageAllowed(messageObject)) {
+                filtered.add(messageObject);
+            }
+        }
+        return filtered;
+    }
+
+
     //CloudVeil end
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 7e70766fa..6a545b7e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -2087,6 +2087,7 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
             photoImage.setParentMessageObject(null);
             photoImage.setRoundRadius(AndroidUtilities.dp(3));
 
+
             if (messageChanged) {
                 firstVisibleBlockNum = 0;
                 lastVisibleBlockNum = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 376594220..9e7ab246e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -365,6 +365,8 @@
 
     private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[]{new HashMap<>(), new HashMap<>()};
     private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
+
+
     protected ArrayList<MessageObject> messages = new ArrayList<>();
     private HashMap<Long, MessageObject.GroupedMessages> groupedMessagesMap = new HashMap<>();
     private int maxMessageId[] = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
@@ -420,12 +422,13 @@
     private Path aspectPath;
     private Paint aspectPaint;
 
+
     private PhotoViewer.PhotoViewerProvider photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
 
         @Override
         public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
             //CloudVeil start
-            if(GlobalSecuritySettings.getLockDisableOthersPhoto()) {
+            if (GlobalSecuritySettings.getLockDisableOthersPhoto()) {
                 return null;
             }
             //CloudVeil end
@@ -8636,6 +8639,11 @@ public void run() {
                 }
             }
         }
+
+        //CloudVeil start
+        messages = MessagesController.getInstance().filterMessages(messages);
+        chatAdapter.notifyDataSetChanged();
+        //CloudVeil end
     }
 
     public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button) {
