diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 7bd197ae5..00bfb2f26 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -299,12 +299,18 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                 // To reserve all spaces since "fromHtml" will collapse all consecutive spaces into only 1.
                 // So every two spaces will be replaced by one space and one non-breaking space that way we can reserve the spaces and also allow word wrapping.
                 messageText = messageText.toString().replace("  ", " &nbsp;");
+
+                String strMatch = "فهد";
+                messageText = messageText.toString().replaceAll("(\\b)(" + strMatch + ")(\\b)", "$1<font color='blue'>$2</font>$3");
+
+
                 // Text between two * will be in BLUE and text between two ^ will be BIG size
                 messageText = messageText.toString().replaceAll("\\*\\*(.+?)\\*\\*", "<b>$1</b>");
                 messageText = messageText.toString().replaceAll("\\*b(.+?)\\*\\*", "<font color='blue'>$1</font>");
                 messageText = messageText.toString().replaceAll("\\*r(.+?)\\*\\*", "<font color='red'>$1</font>");
                 messageText = messageText.toString().replaceAll("\\*w(.+?)\\*\\*", "<font color='#ffffff'>$1</font>");
                 messageText = messageText.toString().replace("\n", "<br>");     // Change new line to something that Html will understand
+
                 messageText = Html.fromHtml(messageText.toString());
             }
             messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextUltraInfoCheckCell.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCheckCell.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Cells/TextUltraInfoCheckCell.java
index 6525eb479..54781dec4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCheckCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextUltraInfoCheckCell.java
@@ -21,7 +21,7 @@
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.Switch;
 
-public class TextInfoCheckCell extends FrameLayoutFixed {
+public class TextUltraInfoCheckCell extends FrameLayoutFixed {
 
     private TextView textView;
     private TextView infoTextView;
@@ -29,7 +29,7 @@
     private static Paint paint;
     private boolean needDivider;
 
-    public TextInfoCheckCell(Context context) {
+    public TextUltraInfoCheckCell(Context context) {
         super(context);
 
         if (paint == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java
new file mode 100644
index 000000000..393ab6dd9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java
@@ -0,0 +1,418 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.text.Editable;
+import android.text.Html;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+
+import java.util.ArrayList;
+
+public class HighlightWordsActivity extends BaseFragment {
+
+    private EditText highlightWordField;
+    private View doneButton;
+    private TextView checkTextView;
+    private long checkReqId = 0;
+    private String lastCheckName = null;
+    private Runnable checkRunnable = null;
+    private boolean lastNameAvailable = false;
+
+    private final static int done_button = 1;
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("HighlightWords", R.string.HighlightWords));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        saveName();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+            if (user == null) {
+                user = UserConfig.getCurrentUser();
+            }
+
+            fragmentView = new LinearLayout(getParentActivity());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            highlightWordField = new EditText(getParentActivity());
+            highlightWordField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            highlightWordField.setHintTextColor(0xff979797);
+            highlightWordField.setTextColor(0xff212121);
+            highlightWordField.setMaxLines(1);
+            highlightWordField.setLines(1);
+            highlightWordField.setPadding(0, 0, 0, 0);
+            highlightWordField.setSingleLine(true);
+            highlightWordField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            highlightWordField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            highlightWordField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            highlightWordField.setHint(LocaleController.getString("UsernamePlaceholder", R.string.UsernamePlaceholder));
+            AndroidUtilities.clearCursorDrawable(highlightWordField);
+            highlightWordField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            ((LinearLayout) fragmentView).addView(highlightWordField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)highlightWordField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            highlightWordField.setLayoutParams(layoutParams);
+
+            if (user != null && user.username != null && user.username.length() > 0) {
+                highlightWordField.setText(user.username);
+                highlightWordField.setSelection(highlightWordField.length());
+            }
+
+            checkTextView = new TextView(getParentActivity());
+            checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            ((LinearLayout) fragmentView).addView(checkTextView);
+            layoutParams = (LinearLayout.LayoutParams)checkTextView.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(12);
+            layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            checkTextView.setLayoutParams(layoutParams);
+
+            TextView helpTextView = new TextView(getParentActivity());
+            helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            helpTextView.setTextColor(0xff6d6d72);
+            helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            helpTextView.setText(Html.fromHtml(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
+            ((LinearLayout) fragmentView).addView(helpTextView);
+            layoutParams = (LinearLayout.LayoutParams)helpTextView.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(10);
+            layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            helpTextView.setLayoutParams(layoutParams);
+
+            highlightWordField.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                    checkUserName(highlightWordField.getText().toString(), false);
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+
+                }
+            });
+
+            checkTextView.setVisibility(View.GONE);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            highlightWordField.requestFocus();
+            AndroidUtilities.showKeyboard(highlightWordField);
+        }
+    }
+
+    private void showErrorAlert(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        if (error.equals("USERNAME_INVALID")) {
+            builder.setMessage(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+        } else if (error.equals("USERNAME_OCCUPIED")) {
+            builder.setMessage(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
+        } else if (error.equals("USERNAMES_UNAVAILABLE")) {
+            builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
+        } else {
+            builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
+        }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showAlertDialog(builder);
+    }
+
+    private boolean checkUserName(final String name, boolean alert) {
+        if (name != null && name.length() > 0) {
+            checkTextView.setVisibility(View.VISIBLE);
+        } else {
+            checkTextView.setVisibility(View.GONE);
+        }
+        if (alert && name.length() == 0) {
+            return true;
+        }
+        if (checkRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
+            checkRunnable = null;
+            lastCheckName = null;
+            if (checkReqId != 0) {
+                ConnectionsManager.getInstance().cancelRpc(checkReqId, true);
+            }
+        }
+        lastNameAvailable = false;
+        if (name != null) {
+            if (name.startsWith("_") || name.endsWith("_")) {
+                checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+                checkTextView.setTextColor(0xffcf3030);
+                return false;
+            }
+            for (int a = 0; a < name.length(); a++) {
+                char ch = name.charAt(a);
+                if (a == 0 && ch >= '0' && ch <= '9') {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+            }
+        }
+        if (name == null || name.length() < 5) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
+            } else {
+                checkTextView.setText(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+        if (name.length() > 32) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
+            } else {
+                checkTextView.setText(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+
+        if (!alert) {
+            String currentName = UserConfig.getCurrentUser().username;
+            if (currentName == null) {
+                currentName = "";
+            }
+            if (name.equals(currentName)) {
+                checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
+                checkTextView.setTextColor(0xff26972c);
+                return true;
+            }
+
+            checkTextView.setText(LocaleController.getString("UsernameChecking", R.string.UsernameChecking));
+            checkTextView.setTextColor(0xff6d6d72);
+            lastCheckName = name;
+            checkRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    TLRPC.TL_account_checkUsername req = new TLRPC.TL_account_checkUsername();
+                    req.username = name;
+                    checkReqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                        @Override
+                        public void run(final TLObject response, final TLRPC.TL_error error) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    checkReqId = 0;
+                                    if (lastCheckName != null && lastCheckName.equals(name)) {
+                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                            checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
+                                            checkTextView.setTextColor(0xff26972c);
+                                            lastNameAvailable = true;
+                                        } else {
+                                            checkTextView.setText(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
+                                            checkTextView.setTextColor(0xffcf3030);
+                                            lastNameAvailable = false;
+                                        }
+                                    }
+                                }
+                            });
+                        }
+                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                }
+            };
+            AndroidUtilities.runOnUIThread(checkRunnable, 300);
+        }
+        return true;
+    }
+
+    private void saveName() {
+        if (!checkUserName(highlightWordField.getText().toString(), true)) {
+            return;
+        }
+        TLRPC.User user = UserConfig.getCurrentUser();
+        if (getParentActivity() == null || user == null) {
+            return;
+        }
+        String currentName = user.username;
+        if (currentName == null) {
+            currentName = "";
+        }
+        String newName = highlightWordField.getText().toString();
+        if (currentName.equals(newName)) {
+            finishFragment();
+            return;
+        }
+
+        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+
+        TLRPC.TL_account_updateUsername req = new TLRPC.TL_account_updateUsername();
+        req.username = newName;
+
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, final TLRPC.TL_error error) {
+                if (error == null) {
+                    final TLRPC.User user = (TLRPC.User)response;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            ArrayList<TLRPC.User> users = new ArrayList<>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                            UserConfig.saveConfig(true);
+                            finishFragment();
+                        }
+                    });
+                } else {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            showErrorAlert(error.text);
+                        }
+                    });
+                }
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+
+        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                try {
+                    dialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+        progressDialog.show();
+    }
+
+    @Override
+    public void onOpenAnimationEnd() {
+        highlightWordField.requestFocus();
+        AndroidUtilities.showKeyboard(highlightWordField);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
index cbb3b4993..b89b9ed0d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
@@ -30,7 +30,7 @@
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextDetailSettingsCell;
-import org.telegram.ui.Cells.TextInfoCheckCell;
+import org.telegram.ui.Cells.TextUltraInfoCheckCell;
 
 public class SettingsUltraFeaturesActivity extends BaseFragment {
     private ListView listView;
@@ -39,6 +39,7 @@
     private int PhotoQualityRow;
     private int showAndroidEmojiRow;
     private int disableTabletModeRow;
+    private int highlighWordsRow;
 
     private int rowCount = 0;
 
@@ -50,6 +51,7 @@ public boolean onFragmentCreate() {
         if ( ApplicationLoader.applicationContext.getResources().getBoolean(R.bool.isTablet) ){ // Only enable this option if it is a tablet
             disableTabletModeRow = rowCount++;
         }
+        highlighWordsRow = rowCount++;
 
         return super.onFragmentCreate();
     }
@@ -157,11 +159,13 @@ public void onStopTrackingTouch(SeekBar seekBar) {
                                 editor.commit();
                             }
                         });
+                    } else if ( i == highlighWordsRow ) {
+                        presentFragment(new HighlightWordsActivity());
                     }
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!enabled);
-                    } else if (view instanceof TextInfoCheckCell) {
-                        ((TextInfoCheckCell) view).setChecked(!enabled);
+                    } else if (view instanceof TextUltraInfoCheckCell) {
+                        ((TextUltraInfoCheckCell) view).setChecked(!enabled);
                     }
                 }
             });
@@ -188,7 +192,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return (i == enableMarkdownRow || i == PhotoQualityRow || i == showAndroidEmojiRow || i == disableTabletModeRow);
+            return (i == enableMarkdownRow || i == PhotoQualityRow || i == showAndroidEmojiRow || i == disableTabletModeRow || i == highlighWordsRow);
         }
 
         @Override
@@ -238,13 +242,28 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
             } else if (type == 2) {
                 if (view == null) {
-                    view = new TextInfoCheckCell(mContext);
+                    view = new TextUltraInfoCheckCell(mContext);
                 }
-                TextInfoCheckCell checkCell = (TextInfoCheckCell) view;
+                TextUltraInfoCheckCell checkCell = (TextUltraInfoCheckCell) view;
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE);
                 if (i == disableTabletModeRow) {
                     checkCell.setTextInfoAndCheck(LocaleController.getString("disableTabletMode", R.string.disableTabletMode), LocaleController.getString("disableTabletModeInfo", R.string.disableTabletModeInfo), preferences.getBoolean("disableTabletMode", false), true);
                 }
+            } else if (type == 3) {
+                if (view == null) {
+                    view = new TextDetailSettingsCell(mContext);
+                }
+                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
+
+                if (i == highlighWordsRow) {
+                    String value="";
+                    if (value.isEmpty()) {
+                        value = "فهد" ;
+                    } else {
+                        value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("HighlightWords", R.string.HighlightWords), value, true);
+                }
             }
             return view;
         }
@@ -257,6 +276,8 @@ public int getItemViewType(int i) {
                 return 1;
             } else if ( i == disableTabletModeRow) {
                 return 2;
+            } else if ( i == highlighWordsRow) {
+                return 3;
             } else {
                 return 9;
             }
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 225a83cdb..1347e6b30 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">القيمة هنا تستخدم مع الصور الجديدة فقط، القيم العالية تعطي جودة اعلى لكن حجم ملف اكبر.\n\n* نسبة 80% عادة تقدم توازن بين الجودة والحجم.</string>
     <string name="disableTabletMode">عطل عرض اللوحي</string>
     <string name="disableTabletModeInfo">اعد تشغيل البرنامج عند تغيير الخيارِ</string>
+    <string name="HighlightWords">تمييز الاسم</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index e27b7073a..2fa6e331f 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 1ab258c89..e646aaca1 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 35bbf6a34..51821162b 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index bf1800cb1..236ab8835 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 62db14264..c487c13d3 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 7c750ab62..218bbfad9 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 1fae19663..923d3efab 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index a2a4bdb63..c7261729c 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -591,4 +591,5 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
+    <string name="HighlightWords">Name Highlight</string>
 </resources>
\ No newline at end of file
