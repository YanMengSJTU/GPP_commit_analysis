diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index fe5948a99..117ac6022 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -1548,13 +1548,13 @@ public void run() {
                                     dialog.unread_count = 0;
                                     NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                                 }
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                dialogsToUpdate.put(dialog_id, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
                             }
                         });
                     }
                 });
-                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                dialogsToUpdate.put(dialog_id, 0);
-                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
             }
             if (req.max_id != Integer.MAX_VALUE) {
                 ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -1634,15 +1634,14 @@ public void run() {
                                 dialog.unread_count = 0;
                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                             }
+                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                            dialogsToUpdate.put(dialog_id, 0);
+                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
                         }
                     });
                 }
             });
 
-            HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-            dialogsToUpdate.put(dialog_id, 0);
-            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
-
             if (chat.ttl > 0 && was) {
                 int serverTime = Math.max(ConnectionsManager.getInstance().getCurrentTime(), max_date);
                 MessagesStorage.getInstance().createTaskForDate(chat.id, serverTime, serverTime, 0);
@@ -2488,15 +2487,15 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (newMsgObj != null) {
                     if (error == null) {
-                        TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
+                        final TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
                         newMsgObj.messageOwner.date = res.date;
                         if (res.file instanceof TLRPC.TL_encryptedFile) {
                             processSentMessage(newMsgObj.messageOwner, null, res.file, req, originalPath);
                         }
-                        MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, true);
                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                             @Override
                             public void run() {
+                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, false);
                                 Utilities.RunOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
@@ -2528,7 +2527,7 @@ private void performSendMessageRequest(TLObject req, final MessageObject newMsgO
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
                     final int oldId = newMsgObj.messageOwner.id;
-                    ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
+                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
 
                     if (response instanceof TLRPC.TL_messages_sentMessage) {
                         TLRPC.TL_messages_sentMessage res = (TLRPC.TL_messages_sentMessage) response;
@@ -2603,19 +2602,17 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             }
                         }
                     }
-                    MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, newMsgObj.messageOwner.id, 0, true);
-                    if (!sentMessages.isEmpty()) {
-                        MessagesStorage.getInstance().putMessages(sentMessages, true, true);
-                    }
                     MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
+                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, newMsgObj.messageOwner.id, 0, false);
+                            MessagesStorage.getInstance().putMessages(sentMessages, true, false);
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENT;
                                     NotificationCenter.getInstance().postNotificationName(messageReceivedByServer, oldId, newMsgObj.messageOwner.id, newMsgObj);
-                                    sendingMessages.remove(oldId); //TODO CHECK THIS!!!
+                                    sendingMessages.remove(oldId);
                                 }
                             });
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 8339743a8..66a446a45 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -475,7 +475,7 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
         if (messageObjects.isEmpty()) {
             return;
         }
-        notifyCheck = isLast;
+        boolean added = false;
 
         int oldCount = popupMessages.size();
         HashMap<Long, Boolean> settingsCache = new HashMap<Long, Boolean>();
@@ -487,9 +487,10 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
                 continue;
             }
             long dialog_id = messageObject.getDialogId();
-            if (dialog_id == openned_dialog_id) {
+            if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
                 continue;
             }
+            added = true;
 
             Boolean value = settingsCache.get(dialog_id);
             boolean isChat = (int)dialog_id < 0;
@@ -508,6 +509,10 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
             }
         }
 
+        if (added) {
+            notifyCheck = isLast;
+        }
+
         if (!popupMessages.isEmpty() && oldCount != popupMessages.size()) {
             if (ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
                 MessageObject messageObject = messageObjects.get(0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index d6737a91d..2232f493f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -2860,38 +2860,40 @@ private void processForwardFromMe(MessageObject messageObject, long did) {
         }
     }
 
-    @Override
-    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
-        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
-            if (forwaringMessage != null) {
-                if (forwaringMessage.messageOwner.id > 0) {
-                    if (!param) {
-                        MessagesController.getInstance().sendMessage(forwaringMessage, did);
-                    } else {
-                        processForwardFromMe(forwaringMessage, did);
-                    }
+    private void forwardSelectedMessages(long did, boolean fromMyName) {
+        if (forwaringMessage != null) {
+            if (forwaringMessage.messageOwner.id > 0) {
+                if (!fromMyName) {
+                    MessagesController.getInstance().sendMessage(forwaringMessage, did);
+                } else {
+                    processForwardFromMe(forwaringMessage, did);
                 }
-                forwaringMessage = null;
-            } else {
-                ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
-                Collections.sort(ids);
-                for (Integer id : ids) {
-                    if (id > 0) {
-                        if (!param) {
-                            MessagesController.getInstance().sendMessage(selectedMessagesIds.get(id), did);
-                        } else {
-                            processForwardFromMe(selectedMessagesIds.get(id), did);
-                        }
+            }
+            forwaringMessage = null;
+        } else {
+            ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+            Collections.sort(ids);
+            for (Integer id : ids) {
+                if (id > 0) {
+                    if (!fromMyName) {
+                        MessagesController.getInstance().sendMessage(selectedMessagesIds.get(id), did);
+                    } else {
+                        processForwardFromMe(selectedMessagesIds.get(id), did);
                     }
                 }
-                selectedMessagesCanCopyIds.clear();
-                selectedMessagesIds.clear();
             }
+            selectedMessagesCanCopyIds.clear();
+            selectedMessagesIds.clear();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
+        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
+
             if (did != dialog_id) {
                 int lower_part = (int)did;
                 if (lower_part != 0) {
-                    activity.removeSelfFromStack();
-
                     Bundle args = new Bundle();
                     args.putBoolean("scrollToTopOnResume", scrollToTopOnResume);
                     if (lower_part > 0) {
@@ -2899,14 +2901,15 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                     } else if (lower_part < 0) {
                         args.putInt("chat_id", -lower_part);
                     }
-                    presentFragment(new ChatActivity(args));
-
+                    presentFragment(new ChatActivity(args), true);
                     removeSelfFromStack();
+                    forwardSelectedMessages(did, param);
                 } else {
                     activity.finishFragment();
                 }
             } else {
                 activity.finishFragment();
+                forwardSelectedMessages(did, param);
                 chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
                 scrollToTopOnResume = true;
             }
