diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index bcb8eb274..20dcbe4c3 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -81,7 +81,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 250
-        versionName "1.5.0"
+        versionCode 267
+        versionName "1.5.7"
     }
 }
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index 2a4ee466a..a45cb8de3 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -1,12 +1,13 @@
 LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
+LOCAL_PRELINK_MODULE := false
 LOCAL_MODULE 	:= tmessages
-LOCAL_CFLAGS 	:= -w -std=gnu99 -O3 -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
+LOCAL_CFLAGS 	:= -w -std=gnu99 -O2 -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64 -DLOG_DISABLED
 LOCAL_CFLAGS 	+= -Drestrict='' -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA -DHAVE_LRINT -DHAVE_LRINTF -fno-math-errno
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT
-LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -O3 -funroll-loops
-LOCAL_LDLIBS 	:= -llog -lm -ljnigraphics
+LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -O2 -funroll-loops
+#LOCAL_LDLIBS 	:= -llog
 
 LOCAL_SRC_FILES     := \
 ./opus/src/opus.c \
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index e60eed7b8..1482314d3 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -1,7 +1,6 @@
 #include <jni.h>
 #include <stdio.h>
 #include <setjmp.h>
-#include <android/bitmap.h>
 #include <libjpeg/jpeglib.h>
 #include "utils.h"
 
@@ -17,23 +16,23 @@ METHODDEF(void) my_error_exit(j_common_ptr cinfo) {
     longjmp(myerr->setjmp_buffer, 1);
 }
 
-JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jobject bitmap, int scale) {
+JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jintArray bitmap, int scale, int format, int width, int height) {
     
-    AndroidBitmapInfo info;
     int i;
     
-    if ((i = AndroidBitmap_getInfo(env, bitmap, &info)) >= 0) {
-        char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
-        FILE *infile;
+    char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
+    FILE *infile;
+    
+    if ((infile = fopen(fileName, "rb"))) {
+        struct my_error_mgr jerr;
+        struct jpeg_decompress_struct cinfo;
+        
+        cinfo.err = jpeg_std_error(&jerr.pub);
+        jerr.pub.error_exit = my_error_exit;
         
-        if ((infile = fopen(fileName, "rb"))) {
-            struct my_error_mgr jerr;
-            struct jpeg_decompress_struct cinfo;
-            
-            cinfo.err = jpeg_std_error(&jerr.pub);
-            jerr.pub.error_exit = my_error_exit;
-            
-            if (!setjmp(jerr.setjmp_buffer)) {
+        if (!setjmp(jerr.setjmp_buffer)) {
+            unsigned char *bitmapBuf = (*env)->GetPrimitiveArrayCritical(env, bitmap, 0);
+            if (bitmapBuf) {
                 jpeg_create_decompress(&cinfo);
                 jpeg_stdio_src(&cinfo, infile);
                 
@@ -45,60 +44,60 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
                 jpeg_start_decompress(&cinfo);
                 int row_stride = cinfo.output_width * cinfo.output_components;
                 JSAMPARRAY buffer = (*cinfo.mem->alloc_sarray) ((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 1);
+                int stride = width;
+                if (format == 0) {
+                    stride *= 4;
+                } else if (format == 1) {
+                    stride *= 2;
+                }
+
+                unsigned char *pixels = bitmapBuf;
+
+                int rowCount = min(cinfo.output_height, height);
+                int colCount = min(cinfo.output_width, width);
                 
-                unsigned char *pixels;
-                if ((i = AndroidBitmap_lockPixels(env, bitmap, &pixels)) >= 0) {
+                while (cinfo.output_scanline < rowCount) {
+                    jpeg_read_scanlines(&cinfo, buffer, 1);
                     
-                    int rowCount = min(cinfo.output_height, info.height);
-                    int colCount = min(cinfo.output_width, info.width);
-                    
-                    while (cinfo.output_scanline < rowCount) {
-                        jpeg_read_scanlines(&cinfo, buffer, 1);
-                        
-                        if (info.format == ANDROID_BITMAP_FORMAT_RGBA_8888) {
-                            if (cinfo.out_color_space == JCS_GRAYSCALE) {
-                                for (i = 0; i < colCount; i++) {
-                                    float alpha = buffer[0][i] / 255.0f;
-                                    pixels[i * 4] *= alpha;
-                                    pixels[i * 4 + 1] *= alpha;
-                                    pixels[i * 4 + 2] *= alpha;
-                                    pixels[i * 4 + 3] = buffer[0][i];
-                                }
-                            } else {
-                                int c = 0;
-                                for (i = 0; i < colCount; i++) {
-                                    pixels[i * 4] = buffer[0][i * 3];
-                                    pixels[i * 4 + 1] = buffer[0][i * 3 + 1];
-                                    pixels[i * 4 + 2] = buffer[0][i * 3 + 2];
-                                    pixels[i * 4 + 3] = 255;
-                                    c += 4;
-                                }
+                    if (format == 0) {
+                        if (cinfo.out_color_space == JCS_GRAYSCALE) {
+                            for (i = 0; i < colCount; i++) {
+                                float alpha = buffer[0][i] / 255.0f;
+                                pixels[i * 4] *= alpha;
+                                pixels[i * 4 + 1] *= alpha;
+                                pixels[i * 4 + 2] *= alpha;
+                                pixels[i * 4 + 3] = buffer[0][i];
+                            }
+                        } else {
+                            int c = 0;
+                            for (i = 0; i < colCount; i++) {
+                                pixels[i * 4] = buffer[0][i * 3 + 2];
+                                pixels[i * 4 + 1] = buffer[0][i * 3 + 1];
+                                pixels[i * 4 + 2] = buffer[0][i * 3];
+                                pixels[i * 4 + 3] = 255;
+                                c += 4;
                             }
-                        } else if (info.format == ANDROID_BITMAP_FORMAT_RGB_565) {
-                            
                         }
+                    } else if (format == 1) {
                         
-                        pixels += info.stride;
                     }
                     
-                    AndroidBitmap_unlockPixels(env, bitmap);
-                } else {
-                    throwException(env, "AndroidBitmap_lockPixels() failed ! error=%d", i);
+                    pixels += stride;
                 }
-                
+                (*env)->ReleasePrimitiveArrayCritical(env, bitmap, bitmapBuf, 0);
                 jpeg_finish_decompress(&cinfo);
             } else {
-                throwException(env, "the JPEG code has signaled an error");
+                throwException(env, "can't get bitmap buff");
             }
-            
-            jpeg_destroy_decompress(&cinfo);
-            fclose(infile);
         } else {
-            throwException(env, "can't open %s\n", fileName);
+            throwException(env, "the JPEG code has signaled an error");
         }
         
-        (*env)->ReleaseStringUTFChars(env, path, fileName);
+        jpeg_destroy_decompress(&cinfo);
+        fclose(infile);
     } else {
-        throwException(env, "AndroidBitmap_getInfo() failed ! error=%d", i);
+        throwException(env, "can't open %s", fileName);
     }
+    
+    (*env)->ReleaseStringUTFChars(env, path, fileName);
 }
diff --git a/TMessagesProj/jni/utils.h b/TMessagesProj/jni/utils.h
index d18734f87..34805a1d7 100644
--- a/TMessagesProj/jni/utils.h
+++ b/TMessagesProj/jni/utils.h
@@ -5,10 +5,17 @@
 #include <jni.h>
 
 #define LOG_TAG "tmessages_native"
+#ifndef LOG_DISABLED
 #define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
 #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
 #define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
 #define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
+#else
+#define LOGI(...)
+#define LOGD(...)
+#define LOGE(...)
+#define LOGV(...)
+#endif
 
 #ifndef max
 #define max(x, y) ((x) > (y)) ? (x) : (y)
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.so
index d3d44495a..9d9f73384 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.so b/TMessagesProj/libs/armeabi/libtmessages.so
index 690ed1698..13a6c5a3c 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.so and b/TMessagesProj/libs/armeabi/libtmessages.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.so b/TMessagesProj/libs/x86/libtmessages.so
index ffce8b6d5..963e616ec 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.so and b/TMessagesProj/libs/x86/libtmessages.so differ
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
index b960f817b..9d1da19e0 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
@@ -17,7 +17,7 @@
 public class SQLiteDatabase {
 	private final int sqliteHandle;
 
-	private final Map<String, SQLitePreparedStatement> preparedMap;
+	private final Map<String, SQLitePreparedStatement> preparedMap = new HashMap<String, SQLitePreparedStatement>();
 	private boolean isOpen = false;
     private boolean inTransaction = false;
 
@@ -28,7 +28,6 @@ public int getSQLiteHandle() {
 	public SQLiteDatabase(String fileName) throws SQLiteException {
 		sqliteHandle = opendb(fileName, ApplicationLoader.applicationContext.getFilesDir().getPath());
 		isOpen = true;
-		preparedMap = new HashMap<String, SQLitePreparedStatement>();
 	}
 
 	public boolean tableExists(String tableName) throws SQLiteException {
@@ -47,7 +46,7 @@ public void execute(String sql, Object... args) throws SQLiteException {
 		}
 	}
 
-    public SQLitePreparedStatement executeFast(String sql) throws SQLiteException{
+    public SQLitePreparedStatement executeFast(String sql) throws SQLiteException {
         return new SQLitePreparedStatement(this, sql, true);
     }
 
@@ -64,29 +63,6 @@ public Integer executeInt(String sql, Object... args) throws SQLiteException {
 		}
 	}
 
-	public int executeIntOrThrow(String sql, Object... args) throws SQLiteException, SQLiteNoRowException {
-		checkOpened();
-		Integer val = executeInt(sql, args);
-		if (val != null) {
-			return val;
-		}
-
-		throw new SQLiteNoRowException();
-	}
-
-	public String executeString(String sql, Object... args) throws SQLiteException {
-		checkOpened();
-		SQLiteCursor cursor = query(sql, args);
-		try {
-			if (!cursor.next()) {
-				return null;
-			}
-			return cursor.stringValue(0);
-		} finally {
-			cursor.dispose();
-		}
-	}
-
 	public SQLiteCursor query(String sql, Object... args) throws SQLiteException {
 		checkOpened();
 		SQLitePreparedStatement stmt = preparedMap.get(sql);
@@ -110,6 +86,7 @@ public void close() {
 				for (SQLitePreparedStatement stmt : preparedMap.values()) {
 					stmt.finalizeQuery();
 				}
+                commitTransaction();
 				closedb(sqliteHandle);
 			} catch (SQLiteException e) {
                 FileLog.e("tmessages", e.getMessage(), e);
@@ -139,6 +116,9 @@ public void beginTransaction() throws SQLiteException {
     }
 
     public void commitTransaction() {
+        if (!inTransaction) {
+            return;
+        }
         inTransaction = false;
         commitTransaction(sqliteHandle);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
index 5d25fae38..d09803789 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
@@ -17,6 +17,7 @@
     private final ArrayList<ByteBufferDesc> freeBuffers4096;
     private final ArrayList<ByteBufferDesc> freeBuffers16384;
     private final ArrayList<ByteBufferDesc> freeBuffers32768;
+    private final ArrayList<ByteBufferDesc> freeBuffersBig;
 
     private static volatile BuffersStorage Instance = null;
     public static BuffersStorage getInstance() {
@@ -38,6 +39,7 @@ public BuffersStorage() {
         freeBuffers4096 = new ArrayList<ByteBufferDesc>();
         freeBuffers16384 = new ArrayList<ByteBufferDesc>();
         freeBuffers32768 = new ArrayList<ByteBufferDesc>();
+        freeBuffersBig = new ArrayList<ByteBufferDesc>();
 
         for (int a = 0; a < 5; a++) {
             freeBuffers128.add(new ByteBufferDesc(128));
@@ -113,6 +115,17 @@ public ByteBufferDesc getFreeBuffer(int size) {
                 buffer = new ByteBufferDesc(40000);
                 FileLog.e("tmessages", "create new 40000 buffer");
             }
+        } else if (size <= 280000) {
+            synchronized (freeBuffersBig) {
+                if (freeBuffersBig.size() > 0) {
+                    buffer = freeBuffersBig.get(0);
+                    freeBuffersBig.remove(0);
+                }
+            }
+            if (buffer == null) {
+                buffer = new ByteBufferDesc(280000);
+                FileLog.e("tmessages", "create new big buffer");
+            }
         } else {
             buffer = new ByteBufferDesc(size);
         }
@@ -126,23 +139,39 @@ public void reuseFreeBuffer(ByteBufferDesc buffer) {
         }
         if (buffer.buffer.capacity() == 128) {
             synchronized (freeBuffers128) {
-                freeBuffers128.add(buffer);
+                if (freeBuffers128.size() < 10) {
+                    freeBuffers128.add(buffer);
+                }
             }
         } else if (buffer.buffer.capacity() == 1024 + 200) {
             synchronized (freeBuffers1024) {
-                freeBuffers1024.add(buffer);
+                if (freeBuffers1024.size() < 10) {
+                    freeBuffers1024.add(buffer);
+                }
             }
         } else if (buffer.buffer.capacity() == 4096 + 200) {
             synchronized (freeBuffers4096) {
-                freeBuffers4096.add(buffer);
+                if (freeBuffers4096.size() < 10) {
+                    freeBuffers4096.add(buffer);
+                }
             }
         } else if (buffer.buffer.capacity() == 16384 + 200) {
             synchronized (freeBuffers16384) {
-                freeBuffers16384.add(buffer);
+                if (freeBuffers16384.size() < 10) {
+                    freeBuffers16384.add(buffer);
+                }
             }
         } else if (buffer.buffer.capacity() == 40000) {
             synchronized (freeBuffers32768) {
-                freeBuffers32768.add(buffer);
+                if (freeBuffers32768.size() < 10) {
+                    freeBuffers32768.add(buffer);
+                }
+            }
+        } else if (buffer.buffer.capacity() == 280000) {
+            synchronized (freeBuffersBig) {
+                if (freeBuffersBig.size() < 4) {
+                    freeBuffersBig.add(buffer);
+                }
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index b6d0af3f7..a35f25703 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -44,6 +44,11 @@
     private ArrayList<RPCRequest> runningRequests = new ArrayList<RPCRequest>();
     private ArrayList<Action> actionQueue = new ArrayList<Action>();
 
+    private ArrayList<Integer> unknownDatacenterIds = new ArrayList<Integer>();
+    private ArrayList<Integer> neededDatacenterIds = new ArrayList<Integer>();
+    private ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
+    final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
+
     private TLRPC.TL_auth_exportedAuthorization movingAuthorization;
     public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
     public static final int DC_UPDATE_TIME = 60 * 60;
@@ -63,8 +68,13 @@
 
     private boolean paused = false;
     private long lastPingTime = System.currentTimeMillis();
-    private long lastPushPingTime = System.currentTimeMillis();
+    private long lastPushPingTime = 0;
+    private boolean sendingPushPing = false;
     private int nextSleepTimeout = 30000;
+    private long nextPingId = 0;
+
+    public static long lastPauseTime = System.currentTimeMillis();
+    public static boolean appPaused = true;
 
     private static volatile ConnectionsManager Instance = null;
     public static ConnectionsManager getInstance() {
@@ -87,7 +97,11 @@ public void run() {
             Utilities.stageQueue.handler.removeCallbacks(stageRunnable);
             t = System.currentTimeMillis();
             if (datacenters != null) {
-                if (lastPushPingTime < System.currentTimeMillis() - 29000) {
+                if (sendingPushPing && lastPushPingTime < System.currentTimeMillis() - 30000 || Math.abs(lastPushPingTime - System.currentTimeMillis()) > 60000 * 4) {
+                    lastPushPingTime = 0;
+                    sendingPushPing = false;
+                }
+                if (lastPushPingTime < System.currentTimeMillis() - 60000 * 3) {
                     lastPushPingTime = System.currentTimeMillis();
                     Datacenter datacenter = datacenterWithId(currentDatacenterId);
                     if (datacenter != null) {
@@ -97,7 +111,7 @@ public void run() {
             }
 
             long currentTime = System.currentTimeMillis();
-            if (ApplicationLoader.lastPauseTime != 0 && ApplicationLoader.lastPauseTime < currentTime - nextSleepTimeout) {
+            if (lastPauseTime != 0 && lastPauseTime < currentTime - nextSleepTimeout) {
                 boolean dontSleep = false;
                 for (RPCRequest request : runningRequests) {
                     if (request.retryCount < 10 && (request.runningStartTime + 60 > (int)(currentTime / 1000)) && ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0)) {
@@ -117,15 +131,7 @@ public void run() {
                     if (!paused) {
                         FileLog.e("tmessages", "pausing network and timers by sleep time = " + nextSleepTimeout);
                         for (Datacenter datacenter : datacenters.values()) {
-                            if (datacenter.connection != null) {
-                                datacenter.connection.suspendConnection(true);
-                            }
-                            if (datacenter.uploadConnection != null) {
-                                datacenter.uploadConnection.suspendConnection(true);
-                            }
-                            if (datacenter.downloadConnection != null) {
-                                datacenter.downloadConnection.suspendConnection(true);
-                            }
+                            datacenter.suspendConnections();
                         }
                     }
                     try {
@@ -136,7 +142,7 @@ public void run() {
                         FileLog.e("tmessages", e);
                     }
                 } else {
-                    ApplicationLoader.lastPauseTime += 30 * 1000;
+                    lastPauseTime += 30 * 1000;
                     FileLog.e("tmessages", "don't sleep 30 seconds because of upload or download request");
                 }
             }
@@ -200,12 +206,12 @@ public void resumeNetworkMaybe() {
             @Override
             public void run() {
                 if (paused) {
-                    ApplicationLoader.lastPauseTime = System.currentTimeMillis();
+                    lastPauseTime = System.currentTimeMillis();
                     nextSleepTimeout = 30000;
-                    FileLog.e("tmessages", "wakeup network in background by received push");
-                } else if (ApplicationLoader.lastPauseTime != 0) {
-                    ApplicationLoader.lastPauseTime = System.currentTimeMillis();
-                    FileLog.e("tmessages", "reset sleep timeout by received push");
+                    FileLog.e("tmessages", "wakeup network in background");
+                } else if (lastPauseTime != 0) {
+                    lastPauseTime = System.currentTimeMillis();
+                    FileLog.e("tmessages", "reset sleep timeout");
                 }
             }
         });
@@ -224,6 +230,28 @@ public void run() {
         });
     }
 
+    public static void resetLastPauseTime() {
+        if (appPaused) {
+            return;
+        }
+        FileLog.e("tmessages", "reset app pause time");
+        if (lastPauseTime != 0 && System.currentTimeMillis() - lastPauseTime > 5000) {
+            ContactsController.getInstance().checkContacts();
+        }
+        lastPauseTime = 0;
+        ConnectionsManager.getInstance().applicationMovedToForeground();
+    }
+
+    public static void setAppPaused(boolean value) {
+        appPaused = value;
+        FileLog.e("tmessages", "app paused = " + value);
+        if (!appPaused) {
+            resetLastPauseTime();
+        } else {
+            lastPauseTime = System.currentTimeMillis();
+        }
+    }
+
     //================================================================================
     // Config and session manage
     //================================================================================
@@ -334,7 +362,7 @@ public void run() {
                     }
                 }
 
-                if (currentDatacenterId != 0 && UserConfig.clientActivated) {
+                if (currentDatacenterId != 0 && UserConfig.isClientActivated()) {
                     Datacenter datacenter = datacenterWithId(currentDatacenterId);
                     if (datacenter.authKey == null) {
                         currentDatacenterId = 0;
@@ -441,15 +469,7 @@ public void run() {
                         editor.putLong("pushSessionId", pushSessionId);
 
                         ArrayList<Long> sessions = new ArrayList<Long>();
-                        if (currentDatacenter.connection != null) {
-                            sessions.add(currentDatacenter.connection.getSissionId());
-                        }
-                        if (currentDatacenter.downloadConnection != null) {
-                            sessions.add(currentDatacenter.downloadConnection.getSissionId());
-                        }
-                        if (currentDatacenter.uploadConnection != null) {
-                            sessions.add(currentDatacenter.uploadConnection.getSissionId());
-                        }
+                        currentDatacenter.getSessions(sessions);
 
                         if (!sessions.isEmpty()) {
                             SerializedData data = new SerializedData(sessions.size() * 8 + 4);
@@ -507,20 +527,36 @@ public void cleanUp() {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                if (datacenter.connection != null) {
-                    datacenter.connection.recreateSession();
+                while (requestQueue.size() != 0) {
+                    RPCRequest request = requestQueue.get(0);
+                    requestQueue.remove(0);
+                    if (request.completionBlock != null) {
+                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
+                        implicitError.code = -1000;
+                        implicitError.text = "";
+                        request.completionBlock.run(null, implicitError);
+                    }
                 }
-                if (datacenter.downloadConnection != null) {
-                    datacenter.downloadConnection.recreateSession();
+                while (runningRequests.size() != 0) {
+                    RPCRequest request = runningRequests.get(0);
+                    runningRequests.remove(0);
+                    if (request.completionBlock != null) {
+                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
+                        implicitError.code = -1000;
+                        implicitError.text = "";
+                        request.completionBlock.run(null, implicitError);
+                    }
                 }
-                if (datacenter.uploadConnection != null) {
-                    datacenter.uploadConnection.recreateSession();
+                pingIdToDate.clear();
+                quickAckIdToRequestIds.clear();
+
+                for (Datacenter datacenter : datacenters.values()) {
+                    datacenter.recreateSessions();
+                    datacenter.authorized = false;
                 }
 
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
+                sessionsToDestroy.clear();
+                saveSession();
             }
         });
     }
@@ -601,18 +637,8 @@ public void run() {
                     addresses.add(ip_address);
                     ports.put(ip_address, port);
                     exist.replaceAddressesAndPorts(addresses, ports);
-                    if (exist.connection != null) {
-                        exist.connection.suspendConnection(true);
-                    }
-                    if (exist.uploadConnection != null) {
-                        exist.uploadConnection.suspendConnection(true);
-                    }
-                    if (exist.downloadConnection != null) {
-                        exist.downloadConnection.suspendConnection(true);
-                    }
-                    if (dc == 1) {
-                        updateDcSettings(1);
-                    }
+                    exist.suspendConnections();
+                    updateDcSettings(dc);
                 }
             }
         });
@@ -632,7 +658,7 @@ public void run() {
                         datacenter.pushConnection.connect();
                         generatePing(datacenter, true);
                     } else {
-                        if (UserConfig.clientActivated && !UserConfig.registeredForInternalPush) {
+                        if (UserConfig.isClientActivated() && !UserConfig.registeredForInternalPush) {
                             registerForPush();
                         }
                     }
@@ -652,15 +678,7 @@ public void run() {
                     for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
                         Datacenter datacenter = entry.getValue();
                         datacenter.overridePort = 8888;
-                        if (datacenter.connection != null) {
-                            datacenter.connection.suspendConnection(true);
-                        }
-                        if (datacenter.uploadConnection != null) {
-                            datacenter.uploadConnection.suspendConnection(true);
-                        }
-                        if (datacenter.downloadConnection != null) {
-                            datacenter.downloadConnection.suspendConnection(true);
-                        }
+                        datacenter.suspendConnections();
                     }
                 } else {
                     for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
@@ -722,7 +740,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 }
                 updatingDcSettings = false;
             }
-        }, null, true, RPCRequest.RPCRequestClassEnableUnauthorized | RPCRequest.RPCRequestClassGeneric, dcNum == 0 ? currentDatacenterId : dcNum);
+        }, null, true, RPCRequest.RPCRequestClassEnableUnauthorized | RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, dcNum == 0 ? currentDatacenterId : dcNum);
     }
 
     public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, final RPCRequest.RPCProgressDelegate progressBlock, boolean requiresCompletion, int requestClass) {
@@ -748,7 +766,7 @@ TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest request) {
                         invoke.device_model = "Android unknown";
                     }
                     PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                    invoke.app_version = pInfo.versionName;
+                    invoke.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
                     if (invoke.app_version == null) {
                         invoke.app_version = "App version unknown";
                     }
@@ -782,8 +800,12 @@ TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest request) {
         return object;
     }
 
-    public static volatile long nextCallToken = 0;
+    public static volatile long nextCallToken = 1;
     long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, final RPCRequest.RPCProgressDelegate progressBlock, final RPCRequest.RPCQuickAckDelegate quickAckBlock, final boolean requiresCompletion, final int requestClass, final int datacenterId) {
+        if (!UserConfig.isClientActivated() && (requestClass & RPCRequest.RPCRequestClassWithoutLogin) == 0) {
+            FileLog.e("tmessages", "can't do request without login " + rpc);
+            return 0;
+        }
 
         final long requestToken = nextCallToken++;
 
@@ -806,7 +828,7 @@ public void run() {
                 requestQueue.add(request);
 
                 if (paused && ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0)) {
-                    ApplicationLoader.lastPauseTime = System.currentTimeMillis();
+                    lastPauseTime = System.currentTimeMillis();
                     nextSleepTimeout = 30000;
                     FileLog.e("tmessages", "wakeup by download or upload request");
                 }
@@ -819,6 +841,13 @@ public void run() {
     }
 
     public void cancelRpc(final long token, final boolean notifyServer) {
+        cancelRpc(token, notifyServer, false);
+    }
+
+    public void cancelRpc(final long token, final boolean notifyServer, final boolean ifNotSent) {
+        if (token == 0) {
+            return;
+        }
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -835,30 +864,32 @@ public void run() {
                     }
                 }
 
-                for (int i = 0; i < runningRequests.size(); i++) {
-                    RPCRequest request = runningRequests.get(i);
-                    if (request.token == token) {
-                        found = true;
+                if (!ifNotSent) {
+                    for (int i = 0; i < runningRequests.size(); i++) {
+                        RPCRequest request = runningRequests.get(i);
+                        if (request.token == token) {
+                            found = true;
 
-                        FileLog.d("tmessages", "===== Cancelled running rpc request " + request.rawRequest);
+                            FileLog.d("tmessages", "===== Cancelled running rpc request " + request.rawRequest);
 
-                        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                            if (notifyServer) {
-                                TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
-                                dropAnswer.req_msg_id = request.runningMessageId;
-                                performRpc(dropAnswer, null, null, false, request.flags);
+                            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                                if (notifyServer) {
+                                    TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
+                                    dropAnswer.req_msg_id = request.runningMessageId;
+                                    performRpc(dropAnswer, null, null, false, request.flags);
+                                }
                             }
-                        }
 
-                        request.cancelled = true;
-                        request.rawRequest.freeResources();
-                        request.rpcRequest.freeResources();
-                        runningRequests.remove(i);
-                        break;
+                            request.cancelled = true;
+                            request.rawRequest.freeResources();
+                            request.rpcRequest.freeResources();
+                            runningRequests.remove(i);
+                            break;
+                        }
+                    }
+                    if (!found) {
+                        FileLog.d("tmessages", "***** Warning: cancelling unknown request");
                     }
-                }
-                if (!found) {
-                    FileLog.d("tmessages", "***** Warning: cancelling unknown request");
                 }
             }
         });
@@ -868,20 +899,17 @@ public static boolean isNetworkOnline() {
         try {
             ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
             NetworkInfo netInfo = cm.getActiveNetworkInfo();
-            if (netInfo != null && netInfo.isConnected()) {
+            if (netInfo != null && (netInfo.isConnectedOrConnecting() || netInfo.isRoaming() || netInfo.isAvailable())) {
                 return true;
             }
 
             netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
-            if (netInfo.isConnected()) {
-                return true;
-            }
 
-            if (netInfo != null && netInfo.getState() == NetworkInfo.State.CONNECTED) {
+            if (netInfo != null && (netInfo.isConnectedOrConnecting() || netInfo.isRoaming())) {
                 return true;
             } else {
                 netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
-                if(netInfo != null && netInfo.getState() == NetworkInfo.State.CONNECTED) {
+                if(netInfo != null && (netInfo.isConnectedOrConnecting() || netInfo.isRoaming())) {
                     return true;
                 }
             }
@@ -911,129 +939,34 @@ public int getCurrentTime() {
     }
 
     private void processRequestQueue(int requestClass, int _datacenterId) {
-        final HashMap<Integer, Integer> activeTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> transportsToResume = new ArrayList<Integer>();
-
-        final HashMap<Integer, Integer> activeDownloadTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> downloadTransportsToResume = new ArrayList<Integer>();
+        boolean haveNetwork = true;//isNetworkOnline();
 
-        final HashMap<Integer, Integer> activeUploadTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> uploadTransportsToResume = new ArrayList<Integer>();
+        genericMessagesToDatacenters.clear();
+        unknownDatacenterIds.clear();
+        neededDatacenterIds.clear();
+        unauthorizedDatacenterIds.clear();
 
-        for (Datacenter datacenter : datacenters.values()) {
-            if (datacenter.connection != null) {
-                int channelToken = datacenter.connection.channelToken;
-                if (channelToken != 0) {
-                    activeTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-            if (datacenter.downloadConnection != null) {
-                int channelToken = datacenter.downloadConnection.channelToken;
-                if (channelToken != 0) {
-                    activeDownloadTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-            if (datacenter.uploadConnection != null) {
-                int channelToken = datacenter.uploadConnection.channelToken;
-                if (channelToken != 0) {
-                    activeUploadTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-        }
-        for (RPCRequest request : runningRequests) {
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeTransportTokens.containsKey(requestDatacenter.datacenterId) && !transportsToResume.contains(requestDatacenter.datacenterId)) {
-                    transportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeDownloadTransportTokens.containsKey(requestDatacenter.datacenterId) && !downloadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    downloadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeUploadTransportTokens.containsKey(requestDatacenter.datacenterId) && !uploadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    uploadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            }
+        TcpConnection genericConnection = null;
+        Datacenter defaultDatacenter = datacenterWithId(currentDatacenterId);
+        if (defaultDatacenter != null) {
+            genericConnection = defaultDatacenter.getGenericConnection(this);
         }
-        for (RPCRequest request : requestQueue) {
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeTransportTokens.containsKey(requestDatacenter.datacenterId) && !transportsToResume.contains(requestDatacenter.datacenterId)) {
-                    transportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeDownloadTransportTokens.containsKey(requestDatacenter.datacenterId) && !downloadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    downloadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeUploadTransportTokens.containsKey(requestDatacenter.datacenterId) && !uploadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    uploadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            }
-        }
-
-        boolean haveNetwork = true;//activeTransportTokens.size() != 0 || isNetworkOnline();
-
-        if (!activeTransportTokens.containsKey(currentDatacenterId) && !transportsToResume.contains(currentDatacenterId)) {
-            transportsToResume.add(currentDatacenterId);
-        }
-
-        for (int it : transportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.connection == null) {
-                    datacenter.connection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.connection.delegate = this;
-                    datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
-                }
-                datacenter.connection.connect();
-            }
-        }
-        for (int it : downloadTransportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.downloadConnection == null) {
-                    datacenter.downloadConnection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.downloadConnection.delegate = this;
-                    datacenter.downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
-                }
-                datacenter.downloadConnection.connect();
-            }
-        }
-        for (int it : uploadTransportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.uploadConnection == null) {
-                    datacenter.uploadConnection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.uploadConnection.delegate = this;
-                    datacenter.uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
-                }
-                datacenter.uploadConnection.connect();
-            }
-        }
-
-        final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
-
-        final ArrayList<Integer> unknownDatacenterIds = new ArrayList<Integer>();
-        final ArrayList<Integer> neededDatacenterIds = new ArrayList<Integer>();
-        final ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
 
         int currentTime = (int)(System.currentTimeMillis() / 1000);
         for (int i = 0; i < runningRequests.size(); i++) {
             RPCRequest request = runningRequests.get(i);
 
-            if (updatingDcSettings && datacenters.size() > 1 && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
-                if (updatingDcStartTime < currentTime - 60) {
-                    FileLog.e("tmessages", "move TL_help_getConfig to requestQueue");
-                    requestQueue.add(request);
-                    runningRequests.remove(i);
-                    i--;
-                    continue;
+            if (datacenters.size() > 1) {
+                if (updatingDcSettings && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
+                    if (updatingDcStartTime < currentTime - 60) {
+                        FileLog.e("tmessages", "move TL_help_getConfig to requestQueue");
+                        requestQueue.add(request);
+                        runningRequests.remove(i);
+                        i--;
+                        continue;
+                    }
+                } else if (request.rawRequest instanceof TLRPC.TL_auth_sendCode || request.rawRequest instanceof TLRPC.TL_auth_signIn || request.rawRequest instanceof TLRPC.TL_auth_signUp) {
+
                 }
             }
 
@@ -1070,48 +1003,27 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 continue;
             }
 
-            Integer tokenIt = activeTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterTransportToken = tokenIt != null ? tokenIt : 0;
-
-            Integer uploadTokenIt = activeUploadTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterUploadTransportToken = uploadTokenIt != null ? uploadTokenIt : 0;
-
-            Integer downloadTokenIt = activeDownloadTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterDownloadTransportToken = downloadTokenIt != null ? downloadTokenIt : 0;
-
-            double maxTimeout = 8.0;
+            float maxTimeout = 8.0f;
 
+            TcpConnection connection = null;
             if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                if (datacenterTransportToken == 0) {
-                    continue;
-                }
+                connection = requestDatacenter.getGenericConnection(this);
             } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                if (!haveNetwork) {
-                    FileLog.d("tmessages", "Don't have any network connection, skipping download request");
-                    continue;
-                }
-                if (datacenterDownloadTransportToken == 0) {
-                    continue;
-                }
-                maxTimeout = 40.0;
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                if (!haveNetwork) {
-                    FileLog.d("tmessages", "Don't have any network connection, skipping upload request");
+                int num = (request.flags & RPCRequest.RPCRequestClassDownloadMedia2) != 0 ? 1 : 0;
+                connection = requestDatacenter.getDownloadConnection(num, this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0 ) {
+                connection = requestDatacenter.getUploadConnection(this);
+            }
+
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                if (connection.channelToken == 0) {
                     continue;
                 }
-                if (datacenterUploadTransportToken == 0) {
+            } else {
+                if (!haveNetwork || connection.channelToken == 0) {
                     continue;
                 }
-                maxTimeout = 30.0;
-            }
-
-            TcpConnection connection = null;
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                connection = requestDatacenter.connection;
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                connection = requestDatacenter.downloadConnection;
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0 ) {
-                connection = requestDatacenter.uploadConnection;
+                maxTimeout = 30.0f;
             }
 
             boolean forceThisRequest = (request.flags & requestClass) != 0 && (_datacenterId == Integer.MIN_VALUE || requestDatacenter.datacenterId == _datacenterId);
@@ -1128,19 +1040,14 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
             if (((Math.abs(currentTime - request.runningStartTime) > maxTimeout) && (currentTime > request.runningMinStartTime || Math.abs(currentTime - request.runningMinStartTime) > 60.0)) || forceThisRequest) {
                 if (!forceThisRequest && request.transportChannelToken > 0) {
-                    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && datacenterTransportToken == request.transportChannelToken) {
+                    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && request.transportChannelToken == connection.channelToken) {
                         FileLog.d("tmessages", "Request token is valid, not retrying " + request.rawRequest);
                         continue;
-                    } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                        if (datacenterDownloadTransportToken != 0 && request.transportChannelToken == datacenterDownloadTransportToken) {
+                    } else {
+                        if (connection.channelToken != 0 && request.transportChannelToken == connection.channelToken) {
                             FileLog.d("tmessages", "Request download token is valid, not retrying " + request.rawRequest);
                             continue;
                         }
-                    } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                        if (datacenterUploadTransportToken != 0 && request.transportChannelToken == datacenterUploadTransportToken) {
-                            FileLog.d("tmessages", "Request upload token is valid, not retrying " + request.rawRequest);
-                            continue;
-                        }
                     }
                 }
 
@@ -1162,15 +1069,15 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 request.runningStartTime = currentTime;
 
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    request.transportChannelToken = datacenterTransportToken;
-                    addMessageToDatacenter(genericMessagesToDatacenters, requestDatacenter.datacenterId, networkMessage);
+                    request.transportChannelToken = connection.channelToken;
+                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    request.transportChannelToken = datacenterDownloadTransportToken;
+                    request.transportChannelToken = connection.channelToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
                     proceedToSendingMessages(arr, connection, false);
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    request.transportChannelToken = datacenterUploadTransportToken;
+                    request.transportChannelToken = connection.channelToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
                     proceedToSendingMessages(arr, connection, false);
@@ -1180,7 +1087,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
         boolean updatingState = MessagesController.getInstance().updatingState;
 
-        if (activeTransportTokens.get(currentDatacenterId) != null) {
+        if (genericConnection != null && genericConnection.channelToken != 0) {
             if (!updatingState) {
                 Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
 
@@ -1197,7 +1104,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                         NetworkMessage networkMessage = new NetworkMessage();
                         networkMessage.protoMessage = wrapMessage(destroySession, currentDatacenter.connection, false);
                         if (networkMessage.protoMessage != null) {
-                            addMessageToDatacenter(genericMessagesToDatacenters, currentDatacenter.datacenterId, networkMessage);
+                            addMessageToDatacenter(currentDatacenter.datacenterId, networkMessage);
                         }
                     }
                 }
@@ -1266,7 +1173,17 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 continue;
             }
 
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && activeTransportTokens.get(requestDatacenter.datacenterId) == null) {
+            TcpConnection connection = null;
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                connection = requestDatacenter.getGenericConnection(this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
+                int num = (request.flags & RPCRequest.RPCRequestClassDownloadMedia2) != 0 ? 1 : 0;
+                connection = requestDatacenter.getDownloadConnection(num, this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
+                connection = requestDatacenter.getUploadConnection(this);
+            }
+
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && connection.channelToken == 0) {
                 continue;
             }
 
@@ -1276,40 +1193,19 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
             if (request.requiresCompletion) {
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    if (genericRunningRequestCount >= 60)
+                    if (genericRunningRequestCount >= 60) {
                         continue;
-
+                    }
                     genericRunningRequestCount++;
-
-                    Integer tokenIt = activeTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = tokenIt != null ? tokenIt : 0;
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    if (!haveNetwork) {
-                        FileLog.d("tmessages", "Don't have any network connection, skipping upload request");
-                        continue;
-                    }
-
-                    if (uploadRunningRequestCount >= 5) {
+                    if (!haveNetwork || uploadRunningRequestCount >= 5) {
                         continue;
                     }
-
-                    Integer uploadTokenIt = activeUploadTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = uploadTokenIt != null ? uploadTokenIt : 0;
-
                     uploadRunningRequestCount++;
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    if (!haveNetwork) {
-                        FileLog.d("tmessages", "Don't have any network connection, skipping download request");
+                    if (!haveNetwork || downloadRunningRequestCount >= 5) {
                         continue;
                     }
-
-                    if (downloadRunningRequestCount >= 5) {
-                        continue;
-                    }
-
-                    Integer downloadTokenIt = activeDownloadTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = downloadTokenIt != null ? downloadTokenIt : 0;
-
                     downloadRunningRequestCount++;
                 }
             }
@@ -1323,15 +1219,6 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
             int requestLength = os.length();
 
             if (requestLength != 0) {
-                TcpConnection connection = null;
-                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    connection = requestDatacenter.connection;
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    connection = requestDatacenter.downloadConnection;
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    connection = requestDatacenter.uploadConnection;
-                }
-
                 if (canCompress) {
                     try {
                         byte[] data = Utilities.compress(os.toByteArray());
@@ -1361,22 +1248,17 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 request.runningMessageSeqNo = networkMessage.protoMessage.seqno;
                 request.serializedLength = requestLength;
                 request.runningStartTime = (int)(System.currentTimeMillis() / 1000);
+                request.transportChannelToken = connection.channelToken;
                 if (request.requiresCompletion) {
                     runningRequests.add(request);
                 }
 
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    addMessageToDatacenter(genericMessagesToDatacenters, requestDatacenter.datacenterId, networkMessage);
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
-                    arr.add(networkMessage);
-                    proceedToSendingMessages(arr, requestDatacenter.downloadConnection, false);
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
+                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
+                } else {
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, requestDatacenter.uploadConnection, false);
-                } else {
-                    FileLog.e("tmessages", "***** Error: request " + request.rawRequest + " has undefined session");
+                    proceedToSendingMessages(arr, connection, false);
                 }
             } else {
                 FileLog.e("tmessages", "***** Couldn't serialize " + request.rawRequest);
@@ -1510,7 +1392,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         }
 
         for (int num : unauthorizedDatacenterIds) {
-            if (num != currentDatacenterId && num != movingToDatacenterId && UserConfig.clientUserId != 0) {
+            if (num != currentDatacenterId && num != movingToDatacenterId && UserConfig.isClientActivated()) {
                 boolean notFound = true;
                 for (Action actor : actionQueue) {
                     if (actor instanceof ExportAuthorizationAction) {
@@ -1530,11 +1412,11 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         }
     }
 
-    void addMessageToDatacenter(HashMap<Integer, ArrayList<NetworkMessage>> pMap, int datacenterId, NetworkMessage message) {
-        ArrayList<NetworkMessage> arr = pMap.get(datacenterId);
+    void addMessageToDatacenter(int datacenterId, NetworkMessage message) {
+        ArrayList<NetworkMessage> arr = genericMessagesToDatacenters.get(datacenterId);
         if (arr == null) {
             arr = new ArrayList<NetworkMessage>();
-            pMap.put(datacenterId, arr);
+            genericMessagesToDatacenters.put(datacenterId, arr);
         }
         arr.add(message);
     }
@@ -1786,7 +1668,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     saveSession();
                 }
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric, datacenter.datacenterId);
+        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, datacenter.datacenterId);
     }
 
     void messagesConfirmed(final long requestMsgId) {
@@ -1839,7 +1721,7 @@ private void registerForPush() {
             }
             req.system_version = "SDK " + Build.VERSION.SDK_INT;
             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-            req.app_version = pInfo.versionName;
+            req.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
             if (req.app_version == null) {
                 req.app_version = "App version unknown";
             }
@@ -1918,11 +1800,11 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
 
                 saveSession();
 
-                if (datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {
-                    if ((connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-                        MessagesController.getInstance().getDifference();
-                    } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+                if (datacenter.datacenterId == currentDatacenterId && UserConfig.isClientActivated()) {
+                    if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
                         registerForPush();
+                    } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
+                        MessagesController.getInstance().getDifference();
                     }
                 }
                 connection.addProcessedSession(newSession.unique_id);
@@ -1947,34 +1829,38 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                 connection.addProcessedMessageId(innerMessageId);
             }
         } else if (message instanceof TLRPC.TL_pong) {
-            if (UserConfig.clientActivated && !UserConfig.registeredForInternalPush && (connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+            if (UserConfig.isClientActivated() && !UserConfig.registeredForInternalPush && (connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
                 registerForPush();
             }
-            TLRPC.TL_pong pong = (TLRPC.TL_pong)message;
-            long pingId = pong.ping_id;
+            if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) == 0) {
+                TLRPC.TL_pong pong = (TLRPC.TL_pong) message;
+                long pingId = pong.ping_id;
 
-            ArrayList<Long> itemsToDelete = new ArrayList<Long>();
-            for (Long pid : pingIdToDate.keySet()) {
-                if (pid == pingId) {
-                    int time = pingIdToDate.get(pid);
-                    int pingTime = (int)(System.currentTimeMillis() / 1000) - time;
+                ArrayList<Long> itemsToDelete = new ArrayList<Long>();
+                for (Long pid : pingIdToDate.keySet()) {
+                    if (pid == pingId) {
+                        int time = pingIdToDate.get(pid);
+                        int pingTime = (int) (System.currentTimeMillis() / 1000) - time;
 
-                    if (Math.abs(pingTime) < 10) {
-                        currentPingTime = (pingTime + currentPingTime) / 2;
+                        if (Math.abs(pingTime) < 10) {
+                            currentPingTime = (pingTime + currentPingTime) / 2;
 
-                        if (messageId != 0) {
-                            long timeMessage = getTimeFromMsgId(messageId);
-                            long currentTime = System.currentTimeMillis();
-                            timeDifference = (int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);
+                            if (messageId != 0) {
+                                long timeMessage = getTimeFromMsgId(messageId);
+                                long currentTime = System.currentTimeMillis();
+                                timeDifference = (int) ((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);
+                            }
                         }
+                        itemsToDelete.add(pid);
+                    } else if (pid < pingId) {
+                        itemsToDelete.add(pid);
                     }
-                    itemsToDelete.add(pid);
-                } else if (pid < pingId) {
-                    itemsToDelete.add(pid);
                 }
-            }
-            for (Long pid : itemsToDelete) {
-                pingIdToDate.remove(pid);
+                for (Long pid : itemsToDelete) {
+                    pingIdToDate.remove(pid);
+                }
+            } else {
+                sendingPushPing = false;
             }
         } else if (message instanceof TLRPC.TL_futuresalts) {
             TLRPC.TL_futuresalts futureSalts = (TLRPC.TL_futuresalts)message;
@@ -2143,6 +2029,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                     }
                                     implicitError = new TLRPC.TL_error();
                                     implicitError.code = -1000;
+                                    implicitError.text = "";
                                 }
                             }
 
@@ -2159,7 +2046,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                 isError = true;
                                 if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {
                                     if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                                        if (UserConfig.clientActivated) {
+                                        if (UserConfig.isClientActivated()) {
                                             UserConfig.clearConfig();
                                             Utilities.RunOnUIThread(new Runnable() {
                                                 @Override
@@ -2237,16 +2124,7 @@ public void run() {
                     timeDifference = (int)((time - currentTime) / 1000 - currentPingTime / 2.0);
                 }
 
-                if (datacenter.connection != null) {
-                    datacenter.connection.recreateSession();
-                }
-                if (datacenter.downloadConnection != null) {
-                    datacenter.downloadConnection.recreateSession();
-                }
-                if (datacenter.uploadConnection != null) {
-                    datacenter.uploadConnection.recreateSession();
-                }
-
+                datacenter.recreateSessions();
                 saveSession();
 
                 lastOutgoingMessageId = 0;
@@ -2333,7 +2211,6 @@ void generatePing() {
         }
     }
 
-    static long nextPingId = 0;
     private ByteBufferDesc generatePingData(TcpConnection connection) {
         if (connection == null) {
             return null;
@@ -2341,8 +2218,23 @@ private ByteBufferDesc generatePingData(TcpConnection connection) {
 
         TLRPC.TL_ping_delay_disconnect ping = new TLRPC.TL_ping_delay_disconnect();
         ping.ping_id = nextPingId++;
-        ping.disconnect_delay = 35;
-        pingIdToDate.put(ping.ping_id, (int)(System.currentTimeMillis() / 1000));
+        if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+            ping.disconnect_delay = 60 * 7;
+        } else {
+            ping.disconnect_delay = 35;
+            pingIdToDate.put(ping.ping_id, (int) (System.currentTimeMillis() / 1000));
+            if (pingIdToDate.size() > 20) {
+                ArrayList<Long> itemsToDelete = new ArrayList<Long>();
+                for (Long pid : pingIdToDate.keySet()) {
+                    if (pid < nextPingId - 10) {
+                        itemsToDelete.add(pid);
+                    }
+                }
+                for (Long pid : itemsToDelete) {
+                    pingIdToDate.remove(pid);
+                }
+            }
+        }
 
         NetworkMessage networkMessage = new NetworkMessage();
         networkMessage.protoMessage = wrapMessage(ping, connection, false);
@@ -2362,6 +2254,9 @@ void generatePing(Datacenter datacenter, boolean push) {
         if (connection != null && (push || !push && connection.channelToken != 0)) {
             ByteBufferDesc transportData = generatePingData(connection);
             if (transportData != null) {
+                if (push) {
+                    sendingPushPing = true;
+                }
                 connection.sendData(null, transportData, false);
             }
         }
@@ -2543,6 +2438,9 @@ public void run() {
                     NotificationCenter.getInstance().postNotificationName(703, stateCopy);
                 }
             });
+        } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+            sendingPushPing = false;
+            lastPushPingTime = System.currentTimeMillis() - 60000 * 3 + 5000;
         }
     }
 
@@ -2550,7 +2448,15 @@ public void run() {
     public void tcpConnectionConnected(TcpConnection connection) {
         Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
         if (datacenter.authKey != null) {
-            processRequestQueue(connection.transportRequestClass, connection.getDatacenterId());
+            if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
+                sendingPushPing = false;
+                lastPushPingTime = System.currentTimeMillis() - 60000 * 3 + 10000;
+            } else {
+                if (paused && connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
+                    resumeNetworkMaybe();
+                }
+                processRequestQueue(connection.transportRequestClass, connection.getDatacenterId());
+            }
         }
     }
 
@@ -2598,6 +2504,13 @@ public void run() {
                 });
             }
         }
+        if (length == 4) {
+            int error = data.readInt32();
+            FileLog.e("tmessages", "mtproto error = " + error);
+            connection.suspendConnection(true);
+            connection.connect();
+            return;
+        }
         Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
 
         long keyId = data.readInt64();
@@ -2721,7 +2634,7 @@ void moveToDatacenter(final int datacenterId) {
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, currentDatacenter);
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, currentDatacenter);
 
-        if (UserConfig.clientUserId != 0) {
+        if (UserConfig.isClientActivated()) {
             TLRPC.TL_auth_exportAuthorization exportAuthorization = new TLRPC.TL_auth_exportAuthorization();
             exportAuthorization.dc_id = datacenterId;
 
@@ -2732,7 +2645,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         movingAuthorization = (TLRPC.TL_auth_exportedAuthorization)response;
                         authorizeOnMovingDatacenter();
                     } else {
-                        Utilities.globalQueue.postRunnable(new Runnable() {
+                        Utilities.stageQueue.postRunnable(new Runnable() {
                             @Override
                             public void run() {
                                 moveToDatacenter(datacenterId);
@@ -2740,7 +2653,7 @@ public void run() {
                         }, 1000);
                     }
                 }
-            }, null, true, RPCRequest.RPCRequestClassGeneric, currentDatacenterId);
+            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, currentDatacenterId);
         } else {
             authorizeOnMovingDatacenter();
         }
@@ -2755,15 +2668,7 @@ void authorizeOnMovingDatacenter() {
             return;
         }
 
-        if (datacenter.connection != null) {
-            datacenter.connection.recreateSession();
-        }
-        if (datacenter.downloadConnection != null) {
-            datacenter.downloadConnection.recreateSession();
-        }
-        if (datacenter.uploadConnection != null) {
-            datacenter.uploadConnection.recreateSession();
-        }
+        datacenter.recreateSessions();
 
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
@@ -2778,7 +2683,7 @@ void authorizeOnMovingDatacenter() {
 
         if (movingAuthorization != null) {
             TLRPC.TL_auth_importAuthorization importAuthorization = new TLRPC.TL_auth_importAuthorization();
-            importAuthorization.id = UserConfig.clientUserId;
+            importAuthorization.id = UserConfig.getClientUserId();
             importAuthorization.bytes = movingAuthorization.bytes;
             performRpc(importAuthorization, new RPCRequest.RPCRequestDelegate() {
                 @Override
@@ -2790,7 +2695,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         moveToDatacenter(movingToDatacenterId);
                     }
                 }
-            }, null, true, RPCRequest.RPCRequestClassGeneric, datacenter.datacenterId);
+            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, datacenter.datacenterId);
         } else {
             authorizedOnMovingDatacenter();
         }
@@ -2828,16 +2733,7 @@ public void ActionDidFinishExecution(final Action action, HashMap<String, Object
 
             if (eactor.datacenter.datacenterId == currentDatacenterId || eactor.datacenter.datacenterId == movingToDatacenterId) {
                 timeDifference = (Integer)params.get("timeDifference");
-
-                if (eactor.datacenter.connection != null) {
-                    eactor.datacenter.connection.recreateSession();
-                }
-                if (eactor.datacenter.downloadConnection != null) {
-                    eactor.datacenter.downloadConnection.recreateSession();
-                }
-                if (eactor.datacenter.uploadConnection != null) {
-                    eactor.datacenter.uploadConnection.recreateSession();
-                }
+                eactor.datacenter.recreateSessions();
 
                 clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, eactor.datacenter);
                 clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, eactor.datacenter);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 4cbb77033..f270ab3b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -30,7 +30,8 @@
 
 public class ContactsController {
     private Account currentAccount;
-    public boolean loadingContacts = false;
+    private boolean loadingContacts = false;
+    private static final Integer loadContactsSync = 1;
     private boolean ignoreChanges = false;
     private boolean contactsSyncInProgress = false;
     private final Integer observerLock = 1;
@@ -118,10 +119,10 @@ public void checkAppAccount() {
         AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
         Account[] accounts = am.getAccountsByType("org.telegram.account");
         boolean recreateAccount = false;
-        if (UserConfig.currentUser != null) {
+        if (UserConfig.isClientActivated()) {
             if (accounts.length == 1) {
                 Account acc = accounts[0];
-                if (!acc.name.equals(UserConfig.currentUser.phone)) {
+                if (!acc.name.equals(UserConfig.getCurrentUser().phone)) {
                     recreateAccount = true;
                 } else {
                     currentAccount = acc;
@@ -139,9 +140,9 @@ public void checkAppAccount() {
             for (Account c : accounts) {
                 am.removeAccount(c, null, null);
             }
-            if (UserConfig.currentUser != null) {
+            if (UserConfig.isClientActivated()) {
                 try {
-                    currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.account");
+                    currentAccount = new Account(UserConfig.getCurrentUser().phone, "org.telegram.account");
                     am.addAccountExplicitly(currentAccount, "", null);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -180,6 +181,10 @@ private boolean checkContactsInternal() {
                 }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
+            } finally {
+                if (pCur != null) {
+                    pCur.close();
+                }
             }
             try {
                 pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[]{ContactsContract.CommonDataKinds.Phone._COUNT}, null, null, null);
@@ -194,6 +199,10 @@ private boolean checkContactsInternal() {
                 }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
+            } finally {
+                if (pCur != null) {
+                    pCur.close();
+                }
             }
             try {
                 pCur = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._COUNT}, ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, null);
@@ -208,6 +217,10 @@ private boolean checkContactsInternal() {
                 }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
+            } finally {
+                if (pCur != null) {
+                    pCur.close();
+                }
             }
             try {
                 pCur = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._ID}, ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, ContactsContract.Data._ID + " desc LIMIT 1");
@@ -222,6 +235,10 @@ private boolean checkContactsInternal() {
                 }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
+            } finally {
+                if (pCur != null) {
+                    pCur.close();
+                }
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -230,13 +247,20 @@ private boolean checkContactsInternal() {
     }
 
     public void readContacts() {
-        if (loadingContacts) {
-            return;
+        synchronized (loadContactsSync) {
+            if (loadingContacts) {
+                return;
+            }
+            loadingContacts = true;
         }
+
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 if (!contacts.isEmpty() || contactsLoaded) {
+                    synchronized (loadContactsSync) {
+                        loadingContacts = false;
+                    }
                     return;
                 }
                 loadContacts(true, false);
@@ -423,15 +447,15 @@ public void performSyncPhoneBook(final HashMap<Integer, Contact> contactHashMap,
             public void run() {
 
                 boolean disableDeletion = true; //disable contacts deletion, because phone numbers can't be compared due to different numbers format
-                if (schedule) {
+                /*if (schedule) {
                     try {
                         AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
                         Account[] accounts = am.getAccountsByType("org.telegram.account");
                         boolean recreateAccount = false;
-                        if (UserConfig.currentUser != null) {
+                        if (UserConfig.isClientActivated()) {
                             if (accounts.length != 1) {
                                 FileLog.e("tmessages", "detected account deletion!");
-                                currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.account");
+                                currentAccount = new Account(UserConfig.getCurrentUser().phone, "org.telegram.account");
                                 am.addAccountExplicitly(currentAccount, "", null);
                                 Utilities.RunOnUIThread(new Runnable() {
                                     @Override
@@ -444,7 +468,7 @@ public void run() {
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
-                }
+                }*/
 
                 boolean request = requ;
                 if (request && first) {
@@ -748,13 +772,16 @@ public void run() {
         });
     }
 
+    public boolean isLoadingContacts() {
+        synchronized (loadContactsSync) {
+            return loadingContacts;
+        }
+    }
+
     public void loadContacts(boolean fromCache, boolean cacheEmpty) {
-        Utilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                loadingContacts = true;
-            }
-        });
+        synchronized (loadContactsSync) {
+            loadingContacts = true;
+        }
         if (fromCache) {
             FileLog.e("tmessages", "load contacts from cache");
             MessagesStorage.getInstance().getContacts();
@@ -776,7 +803,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    loadingContacts = false;
+                                    synchronized (loadContactsSync) {
+                                        loadingContacts = false;
+                                    }
                                     NotificationCenter.getInstance().postNotificationName(MessagesController.contactsDidLoaded);
                                 }
                             });
@@ -800,8 +829,8 @@ public void run() {
                         MessagesController.getInstance().users.putIfAbsent(user.id, user);
                     } else {
                         MessagesController.getInstance().users.put(user.id, user);
-                        if (user.id == UserConfig.clientUserId) {
-                            UserConfig.currentUser = user;
+                        if (user.id == UserConfig.getClientUserId()) {
+                            UserConfig.setCurrentUser(user);
                         }
                     }
                 }
@@ -840,7 +869,7 @@ public void run() {
                         }
 
                         for (TLRPC.TL_contact contact : contactsArr) {
-                            if (usersDict.get(contact.user_id) == null && contact.user_id != UserConfig.clientUserId) {
+                            if (usersDict.get(contact.user_id) == null && contact.user_id != UserConfig.getClientUserId()) {
                                 loadContacts(false, true);
                                 FileLog.e("tmessages", "contacts are broken, load from server");
                                 return;
@@ -953,7 +982,9 @@ public void run() {
                                 usersSectionsDict = sectionsDict;
                                 sortedUsersSectionsArray = sortedSectionsArray;
                                 if (from != 2) {
-                                    loadingContacts = false;
+                                    synchronized (loadContactsSync) {
+                                        loadingContacts = false;
+                                    }
                                 }
                                 performWriteContactsToPhoneBook();
                                 updateUnregisteredContacts(contactsArr);
@@ -1180,7 +1211,7 @@ private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact>
     private void performWriteContactsToPhoneBook() {
         final ArrayList<TLRPC.TL_contact> contactsArray = new ArrayList<TLRPC.TL_contact>();
         contactsArray.addAll(contacts);
-        Utilities.globalQueue.postRunnable(new Runnable() {
+        Utilities.photoBookQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 performWriteContactsToPhoneBookInternal(contactsArray);
@@ -1237,7 +1268,7 @@ private void applyContactsUpdates(ArrayList<Integer> ids, ConcurrentHashMap<Inte
         }
 
         for (final Integer uid : contactsTD) {
-            Utilities.globalQueue.postRunnable(new Runnable() {
+            Utilities.photoBookQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
                     deleteContactFromPhoneBook(uid);
@@ -1467,7 +1498,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
 //                }
 
                 for (final TLRPC.User u : res.users) {
-                    Utilities.globalQueue.postRunnable(new Runnable() {
+                    Utilities.photoBookQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
                             addContactToPhoneBook(u, true);
@@ -1533,7 +1564,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     return;
                 }
                 MessagesStorage.getInstance().deleteContacts(uids);
-                Utilities.globalQueue.postRunnable(new Runnable() {
+                Utilities.photoBookQueue.postRunnable(new Runnable() {
                     @Override
                     public void run() {
                         for (TLRPC.User user : users) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
index f13560ba1..43fa8428a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
@@ -35,8 +35,8 @@
     private volatile int currentAddressNum = 0;
 
     public TcpConnection connection;
-    public TcpConnection downloadConnection;
-    public TcpConnection uploadConnection;
+    private ArrayList<TcpConnection> downloadConnections = new ArrayList<TcpConnection>();
+    private TcpConnection uploadConnection;
     public TcpConnection pushConnection;
 
     private ArrayList<ServerSalt> authServerSaltSet = new ArrayList<ServerSalt>();
@@ -319,4 +319,81 @@ boolean containsServerSalt(long value) {
         }
         return false;
     }
+
+    public void suspendConnections() {
+        if (connection != null) {
+            connection.suspendConnection(true);
+        }
+        if (uploadConnection != null) {
+            uploadConnection.suspendConnection(true);
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            downloadConnection.suspendConnection(true);
+        }
+    }
+
+    public void getSessions(ArrayList<Long> sessions) {
+        if (connection != null) {
+            sessions.add(connection.getSissionId());
+        }
+        if (uploadConnection != null) {
+            sessions.add(uploadConnection.getSissionId());
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            sessions.add(downloadConnection.getSissionId());
+        }
+    }
+
+    public void recreateSessions() {
+        if (connection != null) {
+            connection.recreateSession();
+        }
+        if (uploadConnection != null) {
+            uploadConnection.recreateSession();
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            downloadConnection.recreateSession();
+        }
+    }
+
+    public TcpConnection getDownloadConnection(int num, TcpConnection.TcpConnectionDelegate delegate) {
+        if (num >= 0 && authKey != null) {
+            TcpConnection downloadConnection = null;
+            if (num < downloadConnections.size()) {
+                downloadConnection = downloadConnections.get(num);
+            } else {
+                downloadConnection = new TcpConnection(datacenterId);
+                downloadConnection.delegate = delegate;
+                downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
+                downloadConnections.add(downloadConnection);
+            }
+            downloadConnection.connect();
+            return downloadConnection;
+        }
+        return null;
+    }
+
+    public TcpConnection getUploadConnection(TcpConnection.TcpConnectionDelegate delegate) {
+        if (authKey != null) {
+            if (uploadConnection == null) {
+                uploadConnection = new TcpConnection(datacenterId);
+                uploadConnection.delegate = delegate;
+                uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
+            }
+            uploadConnection.connect();
+        }
+        return uploadConnection;
+    }
+
+    public TcpConnection getGenericConnection(TcpConnection.TcpConnectionDelegate delegate) {
+        if (authKey != null) {
+            if (connection == null) {
+                connection = new TcpConnection(datacenterId);
+                connection.delegate = delegate;
+                connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
+            }
+            connection.connect();
+        }
+        return connection;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java b/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
index 7c717140b..bb260020a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
@@ -11,7 +11,6 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import android.util.Log;
 
 public class DispatchQueue extends Thread {
     public volatile Handler handler = null;
@@ -68,6 +67,12 @@ public void postRunnable(Runnable runnable, int delay) {
         }
     }
 
+    public void cleanupQueue() {
+        if (handler != null) {
+            handler.removeCallbacksAndMessages(null);
+        }
+    }
+
     public void run() {
         Looper.prepare();
         synchronized (handlerSyncObject) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
index 45c5586e6..5bd32559d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
@@ -13,7 +13,6 @@
 import java.util.HashMap;
 import java.util.Locale;
 
-import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
@@ -34,8 +33,21 @@
 	private static int drawImgSize, bigImgSize;
 	private static boolean inited = false;
 	private static Paint placeholderPaint;
-	private static Bitmap emojiBmp[] = new Bitmap[5];
+	private static EmojiBitmap emojiBmp[] = new EmojiBitmap[5];
 	private static boolean loadingEmoji[] = new boolean[5];
+    private static int emojiFullSize;
+
+    private static class EmojiBitmap {
+        public int[] colors;
+        public int width;
+        public int height;
+
+        public EmojiBitmap(int[] colors, int width, int height) {
+            this.colors = colors;
+            this.width = width;
+            this.height = height;
+        }
+    }
 
     private static final int[] cols = {
             13, 10, 15, 10, 14
@@ -190,22 +202,21 @@
                     0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
 	
 	static {
-        int imgSize = 30;
         if (Utilities.density <= 1.0f) {
-            imgSize = 30;
+            emojiFullSize = 30;
         } else if (Utilities.density <= 1.5f) {
-            imgSize = 45;
+            emojiFullSize = 45;
         } else if (Utilities.density <= 2.0f) {
-            imgSize = 60;
+            emojiFullSize = 60;
         } else {
-            imgSize = 90;
+            emojiFullSize = 90;
         }
 		drawImgSize = Utilities.dp(20);
 		bigImgSize = Utilities.dp(30);
 
 		for (int j = 1; j < data.length; j++) {
 			for (int i = 0; i < data[j].length; i++) {
-				Rect rect = new Rect((i % cols[j - 1]) * imgSize, (i / cols[j - 1]) * imgSize, (i % cols[j - 1] + 1) * imgSize, (i / cols[j - 1] + 1) * imgSize);
+				Rect rect = new Rect((i % cols[j - 1]) * emojiFullSize, (i / cols[j - 1]) * emojiFullSize, emojiFullSize, emojiFullSize);
 				rects.put(data[j][i], new DrawableInfo(rect, (byte)(j - 1)));
 			}
 		}
@@ -213,7 +224,7 @@
 		placeholderPaint.setColor(0x00000000);
 	}
 
-	private static Bitmap loadEmoji(final int page) {
+	private static void loadEmoji(final int page) {
 		try {
             float scale = 1.0f;
             int imageResize = 1;
@@ -241,8 +252,10 @@ private static Bitmap loadEmoji(final int page) {
             opts.inJustDecodeBounds = true;
             BitmapFactory.decodeFile(imageFile.getAbsolutePath(), opts);
 
-            final Bitmap colorsBitmap = Bitmap.createBitmap(opts.outWidth / imageResize, opts.outHeight / imageResize, Bitmap.Config.ARGB_8888);
-            Utilities.loadBitmap(imageFile.getAbsolutePath(), colorsBitmap, imageResize);
+            int width = opts.outWidth / imageResize;
+            int height = opts.outHeight / imageResize;
+            int[] bitmap = new int[width * height];
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, 0, width, height);
 
             imageName = String.format(Locale.US, "emoji%.01fx_a_%d.jpg", scale, page);
             imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
@@ -252,21 +265,19 @@ private static Bitmap loadEmoji(final int page) {
                 is.close();
             }
 
-            Utilities.loadBitmap(imageFile.getAbsolutePath(), colorsBitmap, imageResize);
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, 0, width, height);
 
+            final EmojiBitmap emojiBitmap = new EmojiBitmap(bitmap, width, height);
             Utilities.RunOnUIThread(new Runnable() {
                 @Override
                 public void run() {
-                    emojiBmp[page] = colorsBitmap;
+                    emojiBmp[page] = emojiBitmap;
                     NotificationCenter.getInstance().postNotificationName(999);
                 }
             });
-
-			return colorsBitmap;
 		} catch(Throwable x) {
             FileLog.e("tmessages", "Error loading emoji", x);
         }
-		return null;
 	}
 	
 	private static void loadEmojiAsync(final int page) {
@@ -318,7 +329,7 @@ public static Drawable getEmojiBigDrawable(long code) {
         private DrawableInfo info;
 		boolean fullSize = false;
 		private static Paint paint;
-		
+
 		static {
 			paint = new Paint();
             paint.setFlags(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
@@ -330,20 +341,25 @@ public EmojiDrawable(DrawableInfo i) {
 		
 		@Override
 		public void draw(Canvas canvas) {
-			if (emojiBmp[info.page] == null) {
+            EmojiBitmap bitmap = emojiBmp[info.page];
+			if (bitmap == null) {
                 loadEmojiAsync(info.page);
 				canvas.drawRect(getBounds(), placeholderPaint);
 				return;
 			}
-			Rect b = copyBounds();
-			int cX = b.centerX(), cY = b.centerY();
-			b.left = cX - (fullSize ? bigImgSize : drawImgSize) / 2;
-			b.right = cX + (fullSize ? bigImgSize : drawImgSize) / 2;
-			b.top = cY - (fullSize ? bigImgSize : drawImgSize) / 2;
-			b.bottom = cY + (fullSize ? bigImgSize : drawImgSize) / 2;
-            if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
-                canvas.drawBitmap(emojiBmp[info.page], info.rect, b, paint);
+            float scale = 1;
+            int offset = 0;
+            if (fullSize) {
+                scale = (float) bigImgSize / (float) emojiFullSize;
+                offset = (getBounds().width() - bigImgSize) / 2;
+            } else {
+                scale = (float) getBounds().width() / (float) emojiFullSize;
             }
+
+            canvas.save();
+            canvas.scale(scale, scale);
+            canvas.drawBitmap(bitmap.colors, info.rect.top * bitmap.width + info.rect.left, bitmap.width, offset, offset, info.rect.right, info.rect.bottom, true, paint);
+            canvas.restore();
 		}
 
 		@Override
@@ -393,64 +409,74 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
         }
         long buf = 0;
         int emojiCount = 0;
-        for (int i = 0; i < cs.length(); i++) {
-            char c = cs.charAt(i);
-            if (c == 0xD83C || c == 0xD83D || (buf != 0 && (buf & 0xFFFFFFFF00000000L) == 0 && (c >= 0xDDE6 && c <= 0xDDFA))) {
-                buf <<= 16;
-                buf |= c;
-            } else if (buf > 0 && (c & 0xF000) == 0xD000) {
-                buf <<= 16;
-                buf |= c;
-                Drawable d = Emoji.getEmojiDrawable(buf);
-                if (d != null) {
-                    EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                    emojiCount++;
-                    if (c>= 0xDDE6 && c <= 0xDDFA) {
-                        s.setSpan(span, i - 3, i + 1, 0);
-                    } else {
-                        s.setSpan(span, i - 1, i + 1, 0);
-                    }
-                }
-                buf = 0;
-            } else if (c == 0x20E3) {
-                if (i > 0) {
-                    char c2 = cs.charAt(i - 1);
-                    if ((c2 >= '0' && c2 <= '9') || c2 == '#') {
-                        buf = c2;
-                        buf <<= 16;
-                        buf |= c;
-                        Drawable d = Emoji.getEmojiDrawable(buf);
-                        if (d != null) {
-                            EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                            emojiCount++;
+        try {
+            for (int i = 0; i < cs.length(); i++) {
+                char c = cs.charAt(i);
+                if (c == 0xD83C || c == 0xD83D || (buf != 0 && (buf & 0xFFFFFFFF00000000L) == 0 && (c >= 0xDDE6 && c <= 0xDDFA))) {
+                    buf <<= 16;
+                    buf |= c;
+                } else if (buf > 0 && (c & 0xF000) == 0xD000) {
+                    buf <<= 16;
+                    buf |= c;
+                    Drawable d = Emoji.getEmojiDrawable(buf);
+                    if (d != null) {
+                        EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        emojiCount++;
+                        if (c>= 0xDDE6 && c <= 0xDDFA) {
+                            s.setSpan(span, i - 3, i + 1, 0);
+                        } else {
                             s.setSpan(span, i - 1, i + 1, 0);
                         }
-                        buf = 0;
+                    }
+                    buf = 0;
+                } else if (c == 0x20E3) {
+                    if (i > 0) {
+                        char c2 = cs.charAt(i - 1);
+                        if ((c2 >= '0' && c2 <= '9') || c2 == '#') {
+                            buf = c2;
+                            buf <<= 16;
+                            buf |= c;
+                            Drawable d = Emoji.getEmojiDrawable(buf);
+                            if (d != null) {
+                                EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                                emojiCount++;
+                                s.setSpan(span, i - 1, i + 1, 0);
+                            }
+                            buf = 0;
+                        }
+                    }
+                } else if (inArray(c, emojiChars)) {
+                    Drawable d = Emoji.getEmojiDrawable(c);
+                    if (d != null) {
+                        EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        emojiCount++;
+                        s.setSpan(span, i, i + 1, 0);
                     }
                 }
-            } else if (inArray(c, emojiChars)) {
-                Drawable d = Emoji.getEmojiDrawable(c);
-                if (d != null) {
-                    EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                    emojiCount++;
-                    s.setSpan(span, i, i + 1, 0);
+                if (emojiCount >= 50) {
+                    break;
                 }
             }
-            if (emojiCount >= 50) {
-                break;
-            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return cs;
         }
         return s;
     }
 
     public static class EmojiSpan extends ImageSpan {
         private Paint.FontMetricsInt fontMetrics = null;
-        private int size = Utilities.dp(20);
+        int size = Utilities.dp(20);
 
         public EmojiSpan(Drawable d, int verticalAlignment, int s, Paint.FontMetricsInt original) {
             super(d, verticalAlignment);
             fontMetrics = original;
-            size = s;
+            if (original != null) {
+                size = Math.abs(fontMetrics.descent) + Math.abs(fontMetrics.ascent);
+                if (size == 0) {
+                    size = Utilities.dp(20);
+                }
+            }
         }
 
         @Override
@@ -479,6 +505,9 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
                     fm.top = fontMetrics.top;
                     fm.bottom = fontMetrics.bottom;
                 }
+                if (getDrawable() != null) {
+                    getDrawable().setBounds(0, 0, size, size);
+                }
                 return size;
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java
index a27d9a280..be79765a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java
@@ -85,6 +85,6 @@ public void run() {
                     }
                 }
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassEnableUnauthorized, datacenter.datacenterId);
+        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassEnableUnauthorized | RPCRequest.RPCRequestClassWithoutLogin, datacenter.datacenterId);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index b3b641bf7..cd577fbae 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -12,7 +12,6 @@
 import android.graphics.BitmapFactory;
 import android.os.Build;
 import android.provider.MediaStore;
-import android.util.Log;
 
 import org.telegram.ui.ApplicationLoader;
 
@@ -26,7 +25,7 @@
 import java.util.Scanner;
 
 public class FileLoadOperation {
-    private int downloadChunkSize = 1024 * 32;
+    private int downloadChunkSize = 1024 * 256;
 
     public int datacenter_id;
     public TLRPC.InputFileLocation location;
@@ -39,6 +38,13 @@
     private byte[] key;
     private byte[] iv;
     private long requestToken = 0;
+    private long requestToken2 = 0;
+    private int requestProgress = 0;
+    private int requestProgress2 = 0;
+    private int nextDownloadOffset = 0;
+    private TLRPC.TL_upload_file delayedRes = null;
+    private int delayedResOffset = 0;
+    private int delayedResTokenNum = 0;
 
     private File cacheFileTemp;
     private File cacheFileFinal;
@@ -79,12 +85,7 @@ public FileLoadOperation(TLRPC.FileLocation fileLocation) {
     }
 
     public FileLoadOperation(TLRPC.Video videoLocation) {
-        if (videoLocation instanceof TLRPC.TL_video) {
-            location = new TLRPC.TL_inputVideoFileLocation();
-            datacenter_id = videoLocation.dc_id;
-            location.id = videoLocation.id;
-            location.access_hash = videoLocation.access_hash;
-        } else if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
+        if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
             location.id = videoLocation.id;
             location.access_hash = videoLocation.access_hash;
@@ -92,6 +93,11 @@ public FileLoadOperation(TLRPC.Video videoLocation) {
             iv = new byte[32];
             System.arraycopy(videoLocation.iv, 0, iv, 0, iv.length);
             key = videoLocation.key;
+        } else if (videoLocation instanceof TLRPC.TL_video) {
+            location = new TLRPC.TL_inputVideoFileLocation();
+            datacenter_id = videoLocation.dc_id;
+            location.id = videoLocation.id;
+            location.access_hash = videoLocation.access_hash;
         }
         ext = ".mp4";
     }
@@ -115,12 +121,7 @@ public FileLoadOperation(TLRPC.Audio audioLocation) {
     }
 
     public FileLoadOperation(TLRPC.Document documentLocation) {
-        if (documentLocation instanceof TLRPC.TL_document) {
-            location = new TLRPC.TL_inputDocumentFileLocation();
-            datacenter_id = documentLocation.dc_id;
-            location.id = documentLocation.id;
-            location.access_hash = documentLocation.access_hash;
-        } else if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
+        if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
             location.id = documentLocation.id;
             location.access_hash = documentLocation.access_hash;
@@ -128,6 +129,11 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
             iv = new byte[32];
             System.arraycopy(documentLocation.iv, 0, iv, 0, iv.length);
             key = documentLocation.key;
+        } else if (documentLocation instanceof TLRPC.TL_document) {
+            location = new TLRPC.TL_inputDocumentFileLocation();
+            datacenter_id = documentLocation.dc_id;
+            location.id = documentLocation.id;
+            location.access_hash = documentLocation.access_hash;
         }
         ext = documentLocation.file_name;
         int idx = -1;
@@ -336,7 +342,7 @@ public void run() {
             cacheFileTemp = new File(Utilities.getCacheDir(), fileNameTemp);
             if (cacheFileTemp.exists()) {
                 downloadedBytes = (int)cacheFileTemp.length();
-                downloadedBytes = downloadedBytes / 1024 * 1024;
+                nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
             }
             if (fileNameIv != null) {
                 cacheIvTemp = new File(Utilities.getCacheDir(), fileNameIv);
@@ -377,6 +383,11 @@ public void run() {
             if (httpUrl != null) {
                 startDownloadHTTPRequest();
             } else {
+                if (totalBytesCount >= 1024 * 1024) {
+                    downloadChunkSize = 1024 * 256;
+                } else {
+                    downloadChunkSize = 1024 * 32;
+                }
                 startDownloadRequest();
             }
         }
@@ -388,8 +399,9 @@ public void cancel() {
         }
         state = 2;
         cleanup();
-        if (httpUrl == null && requestToken != 0) {
+        if (httpUrl == null) {
             ConnectionsManager.getInstance().cancelRpc(requestToken, true);
+            ConnectionsManager.getInstance().cancelRpc(requestToken2, true);
         }
         delegate.didFailedLoadingFile(FileLoadOperation.this);
     }
@@ -423,6 +435,12 @@ private void cleanup() {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
+
+            if (delayedRes != null) {
+                delayedRes.disableFree = false;
+                delayedRes.freeResources();
+                delayedRes = null;
+            }
         }
     }
 
@@ -594,101 +612,171 @@ public void run() {
         }
     }
 
-    private void startDownloadRequest() {
-        if (state != 1) {
-            return;
-        }
-        TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
-        req.location = location;
-        //if (totalBytesCount == -1) {
-        //    req.offset = 0;
-        //    req.limit = 0;
-        //} else {
-            req.offset = downloadedBytes;
-            req.limit = downloadChunkSize;
-        //}
-        requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                requestToken = 0;
-                if (error == null) {
-                    TLRPC.TL_upload_file res = (TLRPC.TL_upload_file)response;
+    private void processRequestResult(TLRPC.TL_upload_file res, TLRPC.TL_error error, int dowloadOffset, int tokenNum) {
+        if (error == null) {
+            try {
+                if (downloadedBytes != dowloadOffset) {
+                    if (delayedRes != null) {
+                        FileLog.e("tmessages", "something went wrong!");
+                    }
+                    delayedRes = res;
+                    delayedRes.disableFree = true;
+                    delayedResOffset = dowloadOffset;
+                    delayedResTokenNum = tokenNum;
+                    return;
+                } else {
+                    if (tokenNum == 0) {
+                        requestToken = 0;
+                    } else if (tokenNum == 1) {
+                        requestToken2 = 0;
+                    }
+                }
+
+                if (res.bytes.limit() == 0) {
+                    onFinishLoadingFile();
+                    return;
+                }
+                if (key != null) {
+                    Utilities.aesIgeEncryption2(res.bytes.buffer, key, iv, false, true, res.bytes.limit());
+                }
+                if (fileOutputStream != null) {
+                    FileChannel channel = fileOutputStream.getChannel();
+                    channel.write(res.bytes.buffer);
+                }
+                if (fiv != null) {
+                    fiv.seek(0);
+                    fiv.write(iv);
+                }
+                downloadedBytes += res.bytes.limit();
+                if (totalBytesCount > 0 && state == 1) {
+                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
+                }
+
+                if(delayedRes != null && res != delayedRes) {
+                    TLRPC.TL_upload_file temp = delayedRes;
+                    processRequestResult(temp, null, delayedResOffset, delayedResTokenNum);
+                    if (delayedRes != null) {
+                        delayedRes.disableFree = false;
+                        delayedRes.freeResources();
+                        delayedRes = null;
+                    }
+                }
+
+                if (downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount != downloadedBytes) {
+                    startDownloadRequest();
+                } else {
+                    onFinishLoadingFile();
+                }
+            } catch (Exception e) {
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this);
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            if (error.text.contains("FILE_MIGRATE_")) {
+                String errorMsg = error.text.replace("FILE_MIGRATE_", "");
+                Scanner scanner = new Scanner(errorMsg);
+                scanner.useDelimiter("");
+                Integer val;
+                try {
+                    val = scanner.nextInt();
+                } catch (Exception e) {
+                    val = null;
+                }
+                if (val == null) {
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this);
+                } else {
+                    datacenter_id = val;
+                    nextDownloadOffset = 0;
+                    startDownloadRequest();
+                }
+            } else if (error.text.contains("OFFSET_INVALID")) {
+                if (downloadedBytes % downloadChunkSize == 0) {
                     try {
-                        if (res.bytes.limit() == 0) {
-                            onFinishLoadingFile();
-                            return;
-                        }
-                        if (key != null) {
-                            Utilities.aesIgeEncryption2(res.bytes.buffer, key, iv, false, true, res.bytes.limit());
-                        }
-                        if (fileOutputStream != null) {
-                            FileChannel channel = fileOutputStream.getChannel();
-                            channel.write(res.bytes.buffer);
-                        }
-                        if (fiv != null) {
-                            fiv.seek(0);
-                            fiv.write(iv);
-                        }
-                        downloadedBytes += res.bytes.limit();
-                        if (totalBytesCount > 0) {
-                            delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
-                        }
-                        if (downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount != downloadedBytes) {
-                            startDownloadRequest();
-                        } else {
-                            onFinishLoadingFile();
-                        }
+                        onFinishLoadingFile();
                     } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                         cleanup();
                         delegate.didFailedLoadingFile(FileLoadOperation.this);
-                        FileLog.e("tmessages", e);
                     }
                 } else {
-                    if (error.text.contains("FILE_MIGRATE_")) {
-                        String errorMsg = error.text.replace("FILE_MIGRATE_", "");
-                        Scanner scanner = new Scanner(errorMsg);
-                        scanner.useDelimiter("");
-                        Integer val;
-                        try {
-                            val = scanner.nextInt();
-                        } catch (Exception e) {
-                            val = null;
-                        }
-                        if (val == null) {
-                            cleanup();
-                            delegate.didFailedLoadingFile(FileLoadOperation.this);
-                        } else {
-                            datacenter_id = val;
-                            startDownloadRequest();
-                        }
-                    } else if (error.text.contains("OFFSET_INVALID")) {
-                        if (downloadedBytes % downloadChunkSize == 0) {
-                            try {
-                                onFinishLoadingFile();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                                cleanup();
-                                delegate.didFailedLoadingFile(FileLoadOperation.this);
-                            }
-                        } else {
-                            cleanup();
-                            delegate.didFailedLoadingFile(FileLoadOperation.this);
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this);
+                }
+            } else {
+                if (location != null) {
+                    FileLog.e("tmessages", "" + location + " id = " + location.id + " access_hash = " + location.access_hash + " volume_id = " + location.local_id + " secret = " + location.secret);
+                }
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this);
+            }
+        }
+    }
+
+    private void processRequestProgress() {
+        delegate.didChangedLoadProgress(FileLoadOperation.this, Math.min(1.0f, (float) (downloadedBytes + requestProgress + requestProgress2) / (float) totalBytesCount));
+    }
+
+    private void startDownloadRequest() {
+        if (state != 1) {
+            return;
+        }
+        if (requestToken == 0) {
+            requestProgress = 0;
+            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
+                return;
+            }
+            final TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
+            req.location = location;
+            req.offset = nextDownloadOffset;
+            req.limit = downloadChunkSize;
+            nextDownloadOffset += downloadChunkSize;
+            final long time = System.currentTimeMillis();
+            requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    processRequestResult((TLRPC.TL_upload_file) response, error, req.offset, 0);
+                }
+            }, new RPCRequest.RPCProgressDelegate() {
+                @Override
+                public void progress(int length, int progress) {
+                    if (state == 1) {
+                        requestProgress = progress;
+                        if (totalBytesCount == -1) {
+                            delegate.didChangedLoadProgress(FileLoadOperation.this, Math.min(1.0f, (float) (progress) / (float) length));
+                        } else if (totalBytesCount > 0) {
+                            processRequestProgress();
                         }
-                    } else {
-                        cleanup();
-                        delegate.didFailedLoadingFile(FileLoadOperation.this);
                     }
                 }
+            }, null, true, RPCRequest.RPCRequestClassDownloadMedia, datacenter_id);
+        }
+        if (totalBytesCount > 0 && requestToken2 == 0) {
+            requestProgress2 = 0;
+            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
+                return;
             }
-        }, new RPCRequest.RPCProgressDelegate() {
-            @Override
-            public void progress(int length, int progress) {
-                if (totalBytesCount > 0) {
-                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)(downloadedBytes + progress) / (float)totalBytesCount));
-                } else if (totalBytesCount == -1) {
-                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)(progress) / (float)length));
+            final long time = System.currentTimeMillis();
+            final TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
+            req.location = location;
+            req.offset = nextDownloadOffset;
+            req.limit = downloadChunkSize;
+            nextDownloadOffset += downloadChunkSize;
+            requestToken2 = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    processRequestResult((TLRPC.TL_upload_file) response, error, req.offset, 1);
                 }
-            }
-        }, null, true, RPCRequest.RPCRequestClassDownloadMedia, datacenter_id);
+            }, new RPCRequest.RPCProgressDelegate() {
+                @Override
+                public void progress(int length, int progress) {
+                    if (state == 1) {
+                        requestProgress2 = progress;
+                        processRequestProgress();
+                    }
+                }
+            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | RPCRequest.RPCRequestClassDownloadMedia2, datacenter_id);
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 97a0289e7..9194bb178 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -337,11 +337,11 @@ public boolean isInCache(String key) {
         return memCache.get(key) != null;
     }
 
-    public void uploadFile(final String location, final byte[] key, final byte[] iv) {
+    public void uploadFile(final String location, final boolean encrypted) {
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                if (key != null) {
+                if (encrypted) {
                     if (uploadOperationPathsEnc.containsKey(location)) {
                         return;
                     }
@@ -350,8 +350,8 @@ public void run() {
                         return;
                     }
                 }
-                FileUploadOperation operation = new FileUploadOperation(location, key, iv);
-                if (key != null) {
+                FileUploadOperation operation = new FileUploadOperation(location, encrypted);
+                if (encrypted) {
                     uploadOperationPathsEnc.put(location, operation);
                 } else {
                     uploadOperationPaths.put(location, operation);
@@ -369,7 +369,7 @@ public void run() {
                                         fileProgresses.remove(location);
                                     }
                                 });
-                                if (key != null) {
+                                if (encrypted) {
                                     uploadOperationPathsEnc.remove(location);
                                 } else {
                                     uploadOperationPaths.remove(location);
@@ -396,11 +396,11 @@ public void run() {
                                     public void run() {
                                         fileProgresses.remove(location);
                                         if (operation.state != 2) {
-                                            NotificationCenter.getInstance().postNotificationName(FileDidFailUpload, location, key != null);
+                                            NotificationCenter.getInstance().postNotificationName(FileDidFailUpload, location, encrypted);
                                         }
                                     }
                                 });
-                                if (key != null) {
+                                if (encrypted) {
                                     uploadOperationPathsEnc.remove(location);
                                 } else {
                                     uploadOperationPaths.remove(location);
@@ -428,7 +428,7 @@ public void didChangedUploadProgress(FileUploadOperation operation, final float
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    NotificationCenter.getInstance().postNotificationName(FileUploadProgressChanged, location, progress, key != null);
+                                    NotificationCenter.getInstance().postNotificationName(FileUploadProgressChanged, location, progress, encrypted);
                                 }
                             });
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
index 7daea61f7..9ba567200 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
@@ -44,18 +44,22 @@ public FileLog() {
             return;
         }
         dateFormat = FastDateFormat.getInstance("dd_MM_yyyy_HH_mm_ss", Locale.US);
-        File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
-        if (sdCard == null) {
-            return;
-        }
-        File dir = new File(sdCard.getAbsolutePath() + "/logs");
-        if (dir == null) {
-            return;
-        }
-        dir.mkdirs();
-        currentFile = new File(dir, dateFormat.format(System.currentTimeMillis()) + ".txt");
-        if (currentFile == null) {
-            return;
+        try {
+            File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
+            if (sdCard == null) {
+                return;
+            }
+            File dir = new File(sdCard.getAbsolutePath() + "/logs");
+            if (dir == null) {
+                return;
+            }
+            dir.mkdirs();
+            currentFile = new File(dir, dateFormat.format(System.currentTimeMillis()) + ".txt");
+            if (currentFile == null) {
+                return;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
         try {
             currentFile.createNewFile();
@@ -110,7 +114,7 @@ public void run() {
         }
     }
 
-    public static void e(final String tag, final Exception e) {
+    public static void e(final String tag, final Throwable e) {
         if (!BuildVars.DEBUG_VERSION) {
             return;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index a23775a3a..87e0a1a35 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -30,6 +30,7 @@
     private long currentUploaded = 0;
     private byte[] key;
     private byte[] iv;
+    private byte[] ivChange;
     private int fingerprint;
     private boolean isBigFile = false;
     FileInputStream stream;
@@ -41,12 +42,15 @@
         public abstract void didChangedUploadProgress(FileUploadOperation operation, float progress);
     }
 
-    public FileUploadOperation(String location, byte[] keyarr, byte[] ivarr) {
+    public FileUploadOperation(String location, boolean encrypted) {
         uploadingFilePath = location;
-        if (ivarr != null && keyarr != null) {
+        if (encrypted) {
             iv = new byte[32];
-            key = keyarr;
-            System.arraycopy(ivarr, 0, iv, 0, 32);
+            key = new byte[32];
+            ivChange = new byte[32];
+            Utilities.random.nextBytes(iv);
+            Utilities.random.nextBytes(key);
+            System.arraycopy(iv, 0, ivChange, 0, 32);
             try {
                 java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
                 byte[] arr = new byte[64];
@@ -106,7 +110,7 @@ private void startUploadRequest() {
                     isBigFile = true;
                 }
 
-                uploadChunkSize = (int)Math.max(32, Math.ceil(totalFileSize / (1024.0f * 3000)));
+                uploadChunkSize = (int) Math.max(32, Math.ceil(totalFileSize / (1024.0f * 3000)));
                 if (1024 % uploadChunkSize != 0) {
                     int chunkSize = 64;
                     while (uploadChunkSize > chunkSize) {
@@ -116,7 +120,7 @@ private void startUploadRequest() {
                 }
 
                 uploadChunkSize *= 1024;
-                totalPartsCount = (int)Math.ceil((float)totalFileSize / (float)uploadChunkSize);
+                totalPartsCount = (int) Math.ceil((float) totalFileSize / (float) uploadChunkSize);
                 readBuffer = new byte[uploadChunkSize];
             }
 
@@ -134,7 +138,7 @@ private void startUploadRequest() {
                 for (int a = 0; a < toAdd; a++) {
                     sendBuffer.writeByte(0);
                 }
-                Utilities.aesIgeEncryption2(sendBuffer.buffer, key, iv, true, true, readed + toAdd);
+                Utilities.aesIgeEncryption2(sendBuffer.buffer, key, ivChange, true, true, readed + toAdd);
             }
             sendBuffer.rewind();
             if (!isBigFile) {
@@ -161,55 +165,57 @@ private void startUploadRequest() {
             return;
         }
         requestToken = ConnectionsManager.getInstance().performRpc(finalRequest, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        requestToken = 0;
-                        if (error == null) {
-                            if (response instanceof TLRPC.TL_boolTrue) {
-                                currentPartNum++;
-                                delegate.didChangedUploadProgress(FileUploadOperation.this, (float)currentUploaded / (float)totalFileSize);
-                                if (isLastPart) {
-                                    state = 3;
-                                    if (key == null) {
-                                        TLRPC.InputFile result;
-                                        if (isBigFile) {
-                                            result = new TLRPC.TL_inputFileBig();
-                                        } else {
-                                            result = new TLRPC.TL_inputFile();
-                                            result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-                                        }
-                                        result.parts = currentPartNum;
-                                        result.id = currentFileId;
-                                        result.name = uploadingFilePath.substring(uploadingFilePath.lastIndexOf("/") + 1);
-                                        delegate.didFinishUploadingFile(FileUploadOperation.this, result, null);
-                                    } else {
-                                        TLRPC.InputEncryptedFile result;
-                                        if (isBigFile) {
-                                            result = new TLRPC.TL_inputEncryptedFileBigUploaded();
-                                        } else {
-                                            result = new TLRPC.TL_inputEncryptedFileUploaded();
-                                            result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-                                        }
-                                        result.parts = currentPartNum;
-                                        result.id = currentFileId;
-                                        result.key_fingerprint = fingerprint;
-                                        delegate.didFinishUploadingFile(FileUploadOperation.this, null, result);
-                                    }
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                requestToken = 0;
+                if (error == null) {
+                    if (response instanceof TLRPC.TL_boolTrue) {
+                        currentPartNum++;
+                        delegate.didChangedUploadProgress(FileUploadOperation.this, (float) currentUploaded / (float) totalFileSize);
+                        if (isLastPart) {
+                            state = 3;
+                            if (key == null) {
+                                TLRPC.InputFile result;
+                                if (isBigFile) {
+                                    result = new TLRPC.TL_inputFileBig();
                                 } else {
-                                    startUploadRequest();
+                                    result = new TLRPC.TL_inputFile();
+                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
                                 }
+                                result.parts = currentPartNum;
+                                result.id = currentFileId;
+                                result.name = uploadingFilePath.substring(uploadingFilePath.lastIndexOf("/") + 1);
+                                delegate.didFinishUploadingFile(FileUploadOperation.this, result, null);
                             } else {
-                                delegate.didFailedUploadingFile(FileUploadOperation.this);
+                                TLRPC.InputEncryptedFile result;
+                                if (isBigFile) {
+                                    result = new TLRPC.TL_inputEncryptedFileBigUploaded();
+                                } else {
+                                    result = new TLRPC.TL_inputEncryptedFileUploaded();
+                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
+                                }
+                                result.parts = currentPartNum;
+                                result.id = currentFileId;
+                                result.key_fingerprint = fingerprint;
+                                result.iv = iv;
+                                result.key = key;
+                                delegate.didFinishUploadingFile(FileUploadOperation.this, null, result);
                             }
                         } else {
-                            delegate.didFailedUploadingFile(FileUploadOperation.this);
+                            startUploadRequest();
                         }
+                    } else {
+                        delegate.didFailedUploadingFile(FileUploadOperation.this);
                     }
-                }, new RPCRequest.RPCProgressDelegate() {
-                    @Override
-                    public void progress(int length, int progress) {
+                } else {
+                    delegate.didFailedUploadingFile(FileUploadOperation.this);
+                }
+            }
+        }, new RPCRequest.RPCProgressDelegate() {
+            @Override
+            public void progress(int length, int progress) {
 
-                    }
-                }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
+            }
+        }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmBroadcastReceiver.java
index 39858fb41..763265830 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GcmBroadcastReceiver.java
@@ -12,7 +12,6 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.os.PowerManager;
 
 import org.json.JSONObject;
 import org.telegram.ui.ApplicationLoader;
@@ -20,7 +19,6 @@
 public class GcmBroadcastReceiver extends BroadcastReceiver {
 
     public static final int NOTIFICATION_ID = 1;
-    private static PowerManager.WakeLock wakeLock = null;
     private static final Integer sync = 1;
 
     @Override
@@ -28,27 +26,6 @@ public void onReceive(final Context context, final Intent intent) {
         FileLog.d("tmessages", "GCM received intent: " + intent);
 
         if (intent.getAction().equals("com.google.android.c2dm.intent.RECEIVE")) {
-            synchronized (sync) {
-                try {
-                    if (wakeLock == null) {
-                        PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
-                        wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "lock");
-                    }
-                    if (!wakeLock.isHeld()) {
-                        wakeLock.acquire(5000);
-                    }
-                } catch (Exception e) {
-                    try {
-                        if (wakeLock != null) {
-                            wakeLock.release();
-                        }
-                    } catch (Exception e2) {
-                        FileLog.e("tmessages", e2);
-                    }
-                    FileLog.e("tmessages", e);
-                }
-            }
-
             Utilities.RunOnUIThread(new Runnable() {
                 @Override
                 public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index 0abc8340a..e28cbbbca 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -52,9 +52,9 @@ public void execute(HashMap params) {
     void beginHandshake(boolean dropConnection) {
         if (datacenter.connection == null) {
             datacenter.connection = new TcpConnection(datacenter.datacenterId);
-            datacenter.connection.delegate = this;
             datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
         }
+        datacenter.connection.delegate = this;
 
         processedMessageIds = new ArrayList<Long>();
         authNonce = null;
@@ -209,7 +209,7 @@ void processMessage(TLObject message, long messageId) {
                 ByteBuffer data = ByteBuffer.wrap(resPq.pq);
                 final long pqf = data.getLong();
                 final long messageIdf = messageId;
-                Utilities.globalQueue.postRunnable(new Runnable() {
+                new Thread(new Runnable() {
                     @Override
                     public void run() {
 
@@ -281,7 +281,7 @@ public void run() {
                             }
                         });
                     }
-                });
+                }).start();
             } else {
                 FileLog.e("tmessages", "***** Error: invalid handshake nonce");
                 beginHandshake(false);
@@ -566,8 +566,14 @@ public void tcpConnectionProgressChanged(TcpConnection connection, long messageI
     }
 
     @Override
-    public void tcpConnectionClosed(TcpConnection connection) {
+    public void tcpConnectionClosed(final TcpConnection connection) {
         wasDisconnect = true;
+        Utilities.stageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                connection.connect();
+            }
+        }, 1000);
     }
 
     @Override
@@ -591,9 +597,7 @@ public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
 
     @Override
     public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length) {
-
         long keyId = data.readInt64();
-
         if (keyId == 0) {
             long messageId = data.readInt64();
             if (processedMessageIds.contains(messageId)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index cb8690a7b..edd741ede 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -1024,7 +1024,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
             fileDecodingQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    if (playingMessageObject.audioProgress != 0) {
+                    if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
                         lastPlayPcm = (long)(currentTotalPcmDuration * playingMessageObject.audioProgress);
                         seekOpusFile(playingMessageObject.audioProgress);
                     }
@@ -1143,7 +1143,7 @@ public void run() {
                 recordingAudio = new TLRPC.TL_audio();
                 recordingAudio.dc_id = Integer.MIN_VALUE;
                 recordingAudio.id = UserConfig.lastLocalId;
-                recordingAudio.user_id = UserConfig.clientUserId;
+                recordingAudio.user_id = UserConfig.getClientUserId();
                 UserConfig.lastLocalId--;
                 UserConfig.saveConfig(false);
 
@@ -1352,7 +1352,7 @@ public static void saveFile(String path, String fullPath, Context context, final
 
             final ProgressDialog finalProgress = progressDialog;
 
-            Utilities.globalQueue.postRunnable(new Runnable() {
+            new Thread(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -1427,7 +1427,7 @@ public void run() {
                         });
                     }
                 }
-            });
+            }).start();
         }
     }
 
@@ -1536,7 +1536,7 @@ public static boolean isGif(Uri uri) {
         return false;
     }
 
-    public static String copyDocumentToCache(Uri uri) {
+    public static String copyDocumentToCache(Uri uri, String ext) {
         ParcelFileDescriptor parcelFD = null;
         FileInputStream input = null;
         FileOutputStream output = null;
@@ -1545,7 +1545,7 @@ public static String copyDocumentToCache(Uri uri) {
             UserConfig.lastLocalId--;
             parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
             input = new FileInputStream(parcelFD.getFileDescriptor());
-            File f = new File(Utilities.getCacheDir(), String.format(Locale.US, "%d.gif", id));
+            File f = new File(Utilities.getCacheDir(), String.format(Locale.US, "%d.%s", id, ext));
             output = new FileOutputStream(f);
             input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
             UserConfig.saveConfig(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 56e2bb0b4..0522800fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -127,6 +127,7 @@
         public TLRPC.TL_messages_sendMedia sendRequest;
         public TLRPC.TL_decryptedMessage sendEncryptedRequest;
         public int type;
+        public String originalPath;
         public TLRPC.FileLocation location;
         public TLRPC.TL_video videoLocation;
         public TLRPC.TL_audio audioLocation;
@@ -216,7 +217,7 @@ public void addSupportUser() {
             return null;
         }
         TLRPC.InputUser inputUser = null;
-        if (user.id == UserConfig.clientUserId) {
+        if (user.id == UserConfig.getClientUserId()) {
             inputUser = new TLRPC.TL_inputUserSelf();
         } else if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
             inputUser = new TLRPC.TL_inputUserForeign();
@@ -249,7 +250,7 @@ public void didReceivedNotification(int id, Object... args) {
                 if (obj.messageOwner.to_id.chat_id != 0) {
                     uid = -obj.messageOwner.to_id.chat_id;
                 } else {
-                    if (obj.messageOwner.to_id.user_id == UserConfig.clientUserId) {
+                    if (obj.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
                         obj.messageOwner.to_id.user_id = obj.messageOwner.from_id;
                     }
                     uid = obj.messageOwner.to_id.user_id;
@@ -467,8 +468,8 @@ public void run() {
                             users.putIfAbsent(user.id, user);
                         } else {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                     }
@@ -587,7 +588,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
     public void uploadAndApplyUserAvatar(TLRPC.PhotoSize bigPhoto) {
         if (bigPhoto != null) {
             uploadingAvatar = Utilities.getCacheDir() + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
-            FileLoader.getInstance().uploadFile(uploadingAvatar, null, null);
+            FileLoader.getInstance().uploadFile(uploadingAvatar, false);
         }
     }
 
@@ -722,8 +723,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         public void run() {
                             for (TLRPC.User user : res.users) {
                                 users.put(user.id, user);
-                                if (user.id == UserConfig.clientUserId) {
-                                    UserConfig.currentUser = user;
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
                                 }
                             }
                             for (TLRPC.Chat chat : res.chats) {
@@ -743,8 +744,8 @@ public void run() {
                             users.putIfAbsent(user.id, user);
                         } else {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                     }
@@ -759,8 +760,8 @@ public void updateTimerProc() {
 
         checkDeletingTask();
 
-        if (UserConfig.clientUserId != 0) {
-            if (ApplicationLoader.lastPauseTime == 0) {
+        if (UserConfig.isClientActivated()) {
+            if (ConnectionsManager.lastPauseTime == 0) {
                 if (statusSettingState != 1 && (lastStatusUpdateTime == 0 || lastStatusUpdateTime <= System.currentTimeMillis() - 55000 || offlineSent)) {
                     statusSettingState = 1;
 
@@ -786,7 +787,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         }
                     }, null, true, RPCRequest.RPCRequestClassGeneric);
                 }
-            } else if (statusSettingState != 2 && !offlineSent && ApplicationLoader.lastPauseTime <= System.currentTimeMillis() - 2000) {
+            } else if (statusSettingState != 2 && !offlineSent && ConnectionsManager.lastPauseTime <= System.currentTimeMillis() - 2000) {
                 statusSettingState = 2;
                 if (statusRequest != 0) {
                     ConnectionsManager.getInstance().cancelRpc(statusRequest, true);
@@ -1015,15 +1016,15 @@ public void run() {
                     public void run() {
                         for (TLRPC.User u : messagesRes.users) {
                             if (isCache) {
-                                if (u.id == UserConfig.clientUserId || u.id / 1000 == 333) {
+                                if (u.id == UserConfig.getClientUserId() || u.id / 1000 == 333) {
                                     users.put(u.id, u);
                                 } else {
                                     users.putIfAbsent(u.id, u);
                                 }
                             } else {
                                 users.put(u.id, u);
-                                if (u.id == UserConfig.clientUserId) {
-                                    UserConfig.currentUser = u;
+                                if (u.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(u);
                                 }
                             }
                         }
@@ -1188,15 +1189,15 @@ public void run() {
                         public void run() {
                             for (TLRPC.User u : dialogsRes.users) {
                                 if (isCache) {
-                                    if (u.id == UserConfig.clientUserId || u.id / 1000 == 333) {
+                                    if (u.id == UserConfig.getClientUserId() || u.id / 1000 == 333) {
                                         users.put(u.id, u);
                                     } else {
                                         users.putIfAbsent(u.id, u);
                                     }
                                 } else {
                                     users.put(u.id, u);
-                                    if (u.id == UserConfig.clientUserId) {
-                                        UserConfig.currentUser = u;
+                                    if (u.id == UserConfig.getClientUserId()) {
+                                        UserConfig.setCurrentUser(u);
                                     }
                                 }
                             }
@@ -1256,15 +1257,15 @@ public void run() {
                     public void run() {
                         for (TLRPC.User u : dialogsRes.users) {
                             if (isCache) {
-                                if (u.id == UserConfig.clientUserId || u.id / 1000 == 333) {
+                                if (u.id == UserConfig.getClientUserId() || u.id / 1000 == 333) {
                                     users.put(u.id, u);
                                 } else {
                                     users.putIfAbsent(u.id, u);
                                 }
                             } else {
                                 users.put(u.id, u);
-                                if (u.id == UserConfig.clientUserId) {
-                                    UserConfig.currentUser = u;
+                                if (u.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(u);
                                 }
                             }
                         }
@@ -1369,7 +1370,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         } else {
             UserConfig.saveConfig(false);
             TLRPC.TL_photo photo = new TLRPC.TL_photo();
-            photo.user_id = UserConfig.clientUserId;
+            photo.user_id = UserConfig.getClientUserId();
             photo.date = ConnectionsManager.getInstance().getCurrentTime();
             photo.sizes = sizes;
             photo.caption = "";
@@ -1546,39 +1547,39 @@ private long getNextRandomId() {
     }
 
     public void sendMessage(TLRPC.User user, long peer) {
-        sendMessage(null, 0, 0, null, null, null, null, user, null, null, peer);
+        sendMessage(null, 0, 0, null, null, null, null, user, null, null, null, peer);
     }
 
     public void sendMessage(MessageObject message, long peer) {
-        sendMessage(null, 0, 0, null, null, message, null, null, null, null, peer);
+        sendMessage(null, 0, 0, null, null, message, null, null, null, null, null, peer);
     }
 
-    public void sendMessage(TLRPC.TL_document document, long peer) {
-        sendMessage(null, 0, 0, null, null, null, null, null, document, null, peer);
+    public void sendMessage(TLRPC.TL_document document, String originalPath, long peer) {
+        sendMessage(null, 0, 0, null, null, null, null, null, document, null, originalPath, peer);
     }
 
     public void sendMessage(String message, long peer) {
-        sendMessage(message, 0, 0, null, null, null, null, null, null, null, peer);
+        sendMessage(message, 0, 0, null, null, null, null, null, null, null, null, peer);
     }
 
     public void sendMessage(TLRPC.FileLocation location, long peer) {
-        sendMessage(null, 0, 0, null, null, null, location, null, null, null, peer);
+        sendMessage(null, 0, 0, null, null, null, location, null, null, null, null, peer);
     }
 
     public void sendMessage(double lat, double lon, long peer) {
-        sendMessage(null, lat, lon, null, null, null, null, null, null, null, peer);
+        sendMessage(null, lat, lon, null, null, null, null, null, null, null, null, peer);
     }
 
-    public void sendMessage(TLRPC.TL_photo photo, long peer) {
-        sendMessage(null, 0, 0, photo, null, null, null, null, null, null, peer);
+    public void sendMessage(TLRPC.TL_photo photo, String originalPath, long peer) {
+        sendMessage(null, 0, 0, photo, null, null, null, null, null, null, originalPath, peer);
     }
 
-    public void sendMessage(TLRPC.TL_video video, long peer) {
-        sendMessage(null, 0, 0, null, video, null, null, null, null, null, peer);
+    public void sendMessage(TLRPC.TL_video video, String originalPath, long peer) {
+        sendMessage(null, 0, 0, null, video, null, null, null, null, null, originalPath, peer);
     }
 
     public void sendMessage(TLRPC.TL_audio audio, long peer) {
-        sendMessage(null, 0, 0, null, null, null, null, null, null, audio, peer);
+        sendMessage(null, 0, 0, null, null, null, null, null, null, audio, null, peer);
     }
 
     private void processPendingEncMessages() {
@@ -1600,7 +1601,7 @@ private void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.Encrypt
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
         reqSend.action.random_ids = random_ids;
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null);
 
     }
 
@@ -1613,7 +1614,7 @@ private void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null);
     }
 
     public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
@@ -1625,11 +1626,11 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
         newMsg.action = new TLRPC.TL_messageActionTTLChange();
         newMsg.action.ttl = encryptedChat.ttl;
         newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.clientUserId;
+        newMsg.from_id = UserConfig.getClientUserId();
         newMsg.unread = true;
         newMsg.dialog_id = ((long)encryptedChat.id) << 32;
         newMsg.to_id = new TLRPC.TL_peerUser();
-        if (encryptedChat.participant_id == UserConfig.clientUserId) {
+        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
             newMsg.to_id.user_id = encryptedChat.admin_id;
         } else {
             newMsg.to_id.user_id = encryptedChat.participant_id;
@@ -1657,7 +1658,7 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
         reqSend.action.ttl_seconds = encryptedChat.ttl;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
     }
 
     public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids) {
@@ -1674,11 +1675,11 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
         newMsg.action.encryptedAction = action;
 
         newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.clientUserId;
+        newMsg.from_id = UserConfig.getClientUserId();
         newMsg.unread = true;
         newMsg.dialog_id = ((long)encryptedChat.id) << 32;
         newMsg.to_id = new TLRPC.TL_peerUser();
-        if (encryptedChat.participant_id == UserConfig.clientUserId) {
+        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
             newMsg.to_id.user_id = encryptedChat.admin_id;
         } else {
             newMsg.to_id.user_id = encryptedChat.participant_id;
@@ -1705,10 +1706,10 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = action;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
     }
 
-    private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.FileLocation location, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, long peer) {
+    private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.FileLocation location, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer) {
         TLRPC.Message newMsg = null;
         int type = -1;
         if (message != null) {
@@ -1749,14 +1750,6 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 newMsg.fwd_msg_id = msgObj.messageOwner.id;
                 newMsg.attachPath = msgObj.messageOwner.attachPath;
                 type = 4;
-            } else if (msgObj.type == 11) {
-                newMsg.fwd_from_id = msgObj.messageOwner.from_id;
-                newMsg.fwd_date = msgObj.messageOwner.date;
-                newMsg.media = new TLRPC.TL_messageMediaPhoto();
-                newMsg.media.photo = msgObj.messageOwner.action.photo;
-                newMsg.message = "";
-                newMsg.fwd_msg_id = msgObj.messageOwner.id;
-                type = 5;
             } else {
                 newMsg.fwd_from_id = msgObj.messageOwner.from_id;
                 newMsg.fwd_date = msgObj.messageOwner.date;
@@ -1796,7 +1789,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             return;
         }
         newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.clientUserId;
+        newMsg.from_id = UserConfig.getClientUserId();
         newMsg.unread = true;
         newMsg.dialog_id = peer;
         int lower_id = (int)peer;
@@ -1828,7 +1821,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
         } else {
             encryptedChat = encryptedChats.get((int)(peer >> 32));
             newMsg.to_id = new TLRPC.TL_peerUser();
-            if (encryptedChat.participant_id == UserConfig.clientUserId) {
+            if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
                 newMsg.to_id.user_id = encryptedChat.admin_id;
             } else {
                 newMsg.to_id.user_id = encryptedChat.participant_id;
@@ -1858,7 +1851,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 reqSend.message = message;
                 reqSend.peer = sendToPeer;
                 reqSend.random_id = newMsg.random_id;
-                performSendMessageRequest(reqSend, newMsgObj);
+                performSendMessageRequest(reqSend, newMsgObj, null);
             } else {
                 TLRPC.TL_decryptedMessage reqSend = new TLRPC.TL_decryptedMessage();
                 reqSend.random_id = newMsg.random_id;
@@ -1866,7 +1859,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 Utilities.random.nextBytes(reqSend.random_bytes);
                 reqSend.message = message;
                 reqSend.media = new TLRPC.TL_decryptedMessageMediaEmpty();
-                performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
             }
         } else if (type >= 1 && type <= 3 || type >= 5 && type <= 8) {
             if (encryptedChat == null) {
@@ -1878,55 +1871,78 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media.geo_point = new TLRPC.TL_inputGeoPoint();
                     reqSend.media.geo_point.lat = lat;
                     reqSend.media.geo_point._long = lon;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    performSendMessageRequest(reqSend, newMsgObj, null);
                 } else if (type == 2) {
-                    reqSend.media = new TLRPC.TL_inputMediaUploadedPhoto();
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 0;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                    performSendDelayedMessage(delayedMessage);
+                    if (photo.access_hash == 0) {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedPhoto();
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 0;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputMediaPhoto media = new TLRPC.TL_inputMediaPhoto();
+                        media.id = new TLRPC.TL_inputPhoto();
+                        media.id.id = photo.id;
+                        media.id.access_hash = photo.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
                 } else if (type == 3) {
-                    reqSend.media = new TLRPC.TL_inputMediaUploadedThumbVideo();
-                    reqSend.media.duration = video.duration;
-                    reqSend.media.w = video.w;
-                    reqSend.media.h = video.h;
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 1;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.location = video.thumb.location;
-                    delayedMessage.videoLocation = video;
-                    performSendDelayedMessage(delayedMessage);
-                } else if (type == 5) {
-                    reqSend.media = new TLRPC.TL_inputMediaPhoto();
-                    TLRPC.TL_inputPhoto ph = new TLRPC.TL_inputPhoto();
-                    ph.id = msgObj.messageOwner.action.photo.id;
-                    ph.access_hash = msgObj.messageOwner.action.photo.access_hash;
-                    ((TLRPC.TL_inputMediaPhoto)reqSend.media).id = ph;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    if (video.access_hash == 0) {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbVideo();
+                        reqSend.media.duration = video.duration;
+                        reqSend.media.w = video.w;
+                        reqSend.media.h = video.h;
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 1;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.location = video.thumb.location;
+                        delayedMessage.videoLocation = video;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputMediaVideo media = new TLRPC.TL_inputMediaVideo();
+                        media.id = new TLRPC.TL_inputVideo();
+                        media.id.id = video.id;
+                        media.id.access_hash = video.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
                 } else if (type == 6) {
                     reqSend.media = new TLRPC.TL_inputMediaContact();
                     reqSend.media.phone_number = user.phone;
                     reqSend.media.first_name = user.first_name;
                     reqSend.media.last_name = user.last_name;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    performSendMessageRequest(reqSend, newMsgObj, null);
                 } else if (type == 7) {
-                    if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                    if (document.access_hash == 0) {
+                        if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
+                            reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                        } else {
+                            reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                        }
+                        reqSend.media.mime_type = document.mime_type;
+                        reqSend.media.file_name = document.file_name;
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 2;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.documentLocation = document;
+                        delayedMessage.location = document.thumb.location;
+                        performSendDelayedMessage(delayedMessage);
                     } else {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                        TLRPC.TL_inputMediaDocument media = new TLRPC.TL_inputMediaDocument();
+                        media.id = new TLRPC.TL_inputDocument();
+                        media.id.id = document.id;
+                        media.id.access_hash = document.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
                     }
-                    reqSend.media.mime_type = document.mime_type;
-                    reqSend.media.file_name = document.file_name;
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 2;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.documentLocation = document;
-                    delayedMessage.location = document.thumb.location;
-                    performSendDelayedMessage(delayedMessage);
                 } else if (type == 8) {
                     reqSend.media = new TLRPC.TL_inputMediaUploadedAudio();
                     reqSend.media.duration = audio.duration;
@@ -1947,35 +1963,36 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaGeoPoint();
                     reqSend.media.lat = lat;
                     reqSend.media._long = lon;
-                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
                 } else if (type == 2) {
-                    reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
-                    reqSend.media.iv = new byte[32];
-                    reqSend.media.key = new byte[32];
-                    Utilities.random.nextBytes(reqSend.media.iv);
-                    Utilities.random.nextBytes(reqSend.media.key);
                     TLRPC.PhotoSize small = photo.sizes.get(0);
                     TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
+                    reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
                     reqSend.media.thumb = small.bytes;
                     reqSend.media.thumb_h = small.h;
                     reqSend.media.thumb_w = small.w;
                     reqSend.media.w = big.w;
                     reqSend.media.h = big.h;
                     reqSend.media.size = big.size;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 0;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                    performSendDelayedMessage(delayedMessage);
+                    if (big.location.key == null) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 0;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = big.location.volume_id;
+                        encryptedFile.access_hash = big.location.secret;
+                        reqSend.media.key = big.location.key;
+                        reqSend.media.iv = big.location.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 3) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaVideo();
-                    reqSend.media.iv = new byte[32];
-                    reqSend.media.key = new byte[32];
-                    Utilities.random.nextBytes(reqSend.media.iv);
-                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.duration = video.duration;
                     reqSend.media.size = video.size;
                     reqSend.media.w = video.w;
@@ -1983,29 +2000,32 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media.thumb = video.thumb.bytes;
                     reqSend.media.thumb_h = video.thumb.h;
                     reqSend.media.thumb_w = video.thumb.w;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 1;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.videoLocation = video;
-                    performSendDelayedMessage(delayedMessage);
-                } else if (type == 5) {
-
+                    if (video.access_hash == 0) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 1;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.videoLocation = video;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = video.id;
+                        encryptedFile.access_hash = video.access_hash;
+                        reqSend.media.key = video.key;
+                        reqSend.media.iv = video.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 6) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaContact();
                     reqSend.media.phone_number = user.phone;
                     reqSend.media.first_name = user.first_name;
                     reqSend.media.last_name = user.last_name;
                     reqSend.media.user_id = user.id;
-                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
                 } else if (type == 7) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaDocument();
-                    reqSend.media.iv = new byte[32];
-                    reqSend.media.key = new byte[32];
-                    Utilities.random.nextBytes(reqSend.media.iv);
-                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.size = document.size;
                     if (!(document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
                         reqSend.media.thumb = document.thumb.bytes;
@@ -2018,20 +2038,25 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     }
                     reqSend.media.file_name = document.file_name;
                     reqSend.media.mime_type = document.mime_type;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 2;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.documentLocation = document;
-                    performSendDelayedMessage(delayedMessage);
+                    if (document.access_hash == 0) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 2;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.documentLocation = document;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = document.id;
+                        encryptedFile.access_hash = document.access_hash;
+                        reqSend.media.key = document.key;
+                        reqSend.media.iv = document.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 8) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaAudio();
-                    reqSend.media.iv = new byte[32];
-                    reqSend.media.key = new byte[32];
-                    Utilities.random.nextBytes(reqSend.media.iv);
-                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.duration = audio.duration;
                     reqSend.media.size = audio.size;
 
@@ -2053,13 +2078,15 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             } else {
                 reqSend.id = msgObj.messageOwner.fwd_msg_id;
             }
-            performSendMessageRequest(reqSend, newMsgObj);
+            performSendMessageRequest(reqSend, newMsgObj, null);
         }
     }
 
-    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, TLRPC.EncryptedFile file, TLRPC.DecryptedMessage decryptedMessage) {
+    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, TLRPC.EncryptedFile file, TLRPC.DecryptedMessage decryptedMessage, String originalPath) {
         if (sentMessage != null) {
             if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+
                 for (TLRPC.PhotoSize size : sentMessage.media.photo.sizes) {
                     if (size instanceof TLRPC.TL_photoSizeEmpty) {
                         continue;
@@ -2083,6 +2110,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
             } else if (sentMessage.media instanceof TLRPC.TL_messageMediaVideo && sentMessage.media.video != null && newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.video, 2);
+
                 TLRPC.PhotoSize size2 = newMsg.media.video.thumb;
                 TLRPC.PhotoSize size = sentMessage.media.video.thumb;
                 if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
@@ -2099,6 +2128,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
             } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
+
                 TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
                 TLRPC.PhotoSize size = sentMessage.media.document.thumb;
                 if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
@@ -2161,12 +2192,13 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.photo, 3);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
                 TLRPC.Video video = newMsg.media.video;
                 newMsg.media.video = new TLRPC.TL_videoEncrypted();
                 newMsg.media.video.duration = video.duration;
                 newMsg.media.video.thumb = video.thumb;
-                newMsg.media.video.id = video.id;
                 newMsg.media.video.dc_id = file.dc_id;
                 newMsg.media.video.w = video.w;
                 newMsg.media.video.h = video.h;
@@ -2182,6 +2214,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.video, 5);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
                 TLRPC.Document document = newMsg.media.document;
                 newMsg.media.document = new TLRPC.TL_documentEncrypted();
@@ -2207,6 +2241,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.document, 4);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
                 TLRPC.Audio audio = newMsg.media.audio;
                 newMsg.media.audio = new TLRPC.TL_audioEncrypted();
@@ -2236,7 +2272,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
         }
     }
 
-    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final MessageObject newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile) {
+    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final MessageObject newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath) {
         if (req == null || chat.auth_key == null || chat instanceof TLRPC.TL_encryptedChatRequested || chat instanceof TLRPC.TL_encryptedChatWaiting) {
             return;
         }
@@ -2301,7 +2337,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
                         newMsgObj.messageOwner.date = res.date;
                         if (res.file instanceof TLRPC.TL_encryptedFile) {
-                            processSentMessage(newMsgObj.messageOwner, null, res.file, req);
+                            processSentMessage(newMsgObj.messageOwner, null, res.file, req, originalPath);
                         }
                         MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, true);
                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
@@ -2332,7 +2368,7 @@ public void run() {
         }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress);
     }
 
-    private void performSendMessageRequest(TLObject req, final MessageObject newMsgObj) {
+    private void performSendMessageRequest(TLObject req, final MessageObject newMsgObj, final String originalPath) {
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
@@ -2366,7 +2402,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                         sentMessages.add(res.message);
                         newMsgObj.messageOwner.id = res.message.id;
-                        processSentMessage(newMsgObj.messageOwner, res.message, null, null);
+                        processSentMessage(newMsgObj.messageOwner, res.message, null, null, originalPath);
                         if (MessagesStorage.lastSeqValue + 1 == res.seq) {
                             MessagesStorage.lastSeqValue = res.seq;
                             MessagesStorage.lastPtsValue = res.pts;
@@ -2392,7 +2428,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             TLRPC.Message message = res.messages.get(0);
                             newMsgObj.messageOwner.id = message.id;
                             sentMessages.add(message);
-                            processSentMessage(newMsgObj.messageOwner, message, null, null);
+                            processSentMessage(newMsgObj.messageOwner, message, null, null, originalPath);
                         }
                         if (MessagesStorage.lastSeqValue + 1 == res.seq) {
                             MessagesStorage.lastSeqValue = res.seq;
@@ -2470,23 +2506,23 @@ private void performSendDelayedMessage(final DelayedMessage message) {
             String location = Utilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
             putToDelayedMessages(location, message);
             if (message.sendRequest != null) {
-                FileLoader.getInstance().uploadFile(location, null, null);
+                FileLoader.getInstance().uploadFile(location, false);
             } else {
-                FileLoader.getInstance().uploadFile(location, message.sendEncryptedRequest.media.key, message.sendEncryptedRequest.media.iv);
+                FileLoader.getInstance().uploadFile(location, true);
             }
         } else if (message.type == 1) {
             if (message.sendRequest != null) {
                 if (message.sendRequest.media.thumb == null) {
                     String location = Utilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                     putToDelayedMessages(location, message);
-                    FileLoader.getInstance().uploadFile(location, null, null);
+                    FileLoader.getInstance().uploadFile(location, false);
                 } else {
                     String location = message.videoLocation.path;
                     if (location == null) {
                         location = Utilities.getCacheDir() + "/" + message.videoLocation.id + ".mp4";
                     }
                     putToDelayedMessages(location, message);
-                    FileLoader.getInstance().uploadFile(location, null, null);
+                    FileLoader.getInstance().uploadFile(location, false);
                 }
             } else {
                 String location = message.videoLocation.path;
@@ -2494,29 +2530,29 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                     location = Utilities.getCacheDir() + "/" + message.videoLocation.id + ".mp4";
                 }
                 putToDelayedMessages(location, message);
-                FileLoader.getInstance().uploadFile(location, message.sendEncryptedRequest.media.key, message.sendEncryptedRequest.media.iv);
+                FileLoader.getInstance().uploadFile(location, true);
             }
         } else if (message.type == 2) {
             if (message.sendRequest != null && message.sendRequest.media.thumb == null && message.location != null) {
                 String location = Utilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                 putToDelayedMessages(location, message);
-                FileLoader.getInstance().uploadFile(location, null, null);
+                FileLoader.getInstance().uploadFile(location, false);
             } else {
                 String location = message.documentLocation.path;
                 putToDelayedMessages(location, message);
                 if (message.sendRequest != null) {
-                    FileLoader.getInstance().uploadFile(location, null, null);
+                    FileLoader.getInstance().uploadFile(location, false);
                 } else {
-                    FileLoader.getInstance().uploadFile(location, message.sendEncryptedRequest.media.key, message.sendEncryptedRequest.media.iv);
+                    FileLoader.getInstance().uploadFile(location, true);
                 }
             }
         } else if (message.type == 3) {
             String location = message.audioLocation.path;
             putToDelayedMessages(location, message);
             if (message.sendRequest != null) {
-                FileLoader.getInstance().uploadFile(location, null, null);
+                FileLoader.getInstance().uploadFile(location, false);
             } else {
-                FileLoader.getInstance().uploadFile(location, message.sendEncryptedRequest.media.key, message.sendEncryptedRequest.media.iv);
+                FileLoader.getInstance().uploadFile(location, true);
             }
         }
     }
@@ -2560,12 +2596,12 @@ public void fileDidUploaded(final String location, final TLRPC.InputFile file, f
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
-                        TLRPC.User user = users.get(UserConfig.clientUserId);
+                        TLRPC.User user = users.get(UserConfig.getClientUserId());
                         if (user == null) {
-                            user = UserConfig.currentUser;
+                            user = UserConfig.getCurrentUser();
                             users.put(user.id, user);
                         } else {
-                            UserConfig.currentUser = user;
+                            UserConfig.setCurrentUser(user);
                         }
                         if (user == null) {
                             return;
@@ -2609,14 +2645,14 @@ public void run() {
                             if (file != null && message.sendRequest != null) {
                                 if (message.type == 0) {
                                     message.sendRequest.media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj);
+                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                 } else if (message.type == 1) {
                                     if (message.sendRequest.media.thumb == null) {
                                         message.sendRequest.media.thumb = file;
                                         performSendDelayedMessage(message);
                                     } else {
                                         message.sendRequest.media.file = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj);
+                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     }
                                 } else if (message.type == 2) {
                                     if (message.sendRequest.media.thumb == null && message.location != null) {
@@ -2624,16 +2660,18 @@ public void run() {
                                         performSendDelayedMessage(message);
                                     } else {
                                         message.sendRequest.media.file = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj);
+                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     }
                                 } else if (message.type == 3) {
                                     message.sendRequest.media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj);
+                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                 }
                                 arr.remove(a);
                                 a--;
                             } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
-                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj, message.encryptedChat, encryptedFile);
+                                message.sendEncryptedRequest.media.key = encryptedFile.key;
+                                message.sendEncryptedRequest.media.iv = encryptedFile.iv;
+                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj, message.encryptedChat, encryptedFile, message.originalPath);
                                 arr.remove(a);
                                 a--;
                             }
@@ -2677,8 +2715,8 @@ public void run() {
                     public void run() {
                         for (TLRPC.User user : res.users) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                         for (TLRPC.Chat chat : res.chats) {
@@ -2746,8 +2784,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     public void run() {
                         for (TLRPC.User user : res.users) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                         for (TLRPC.Chat chat : res.chats) {
@@ -2769,7 +2807,7 @@ public void run() {
                             }
                             TLRPC.TL_chatParticipant newPart = new TLRPC.TL_chatParticipant();
                             newPart.user_id = user.id;
-                            newPart.inviter_id = UserConfig.clientUserId;
+                            newPart.inviter_id = UserConfig.getClientUserId();
                             newPart.date = ConnectionsManager.getInstance().getCurrentTime();
                             info.participants.add(0, newPart);
                             MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
@@ -2824,14 +2862,14 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     public void run() {
                         for (TLRPC.User user : res.users) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                         for (TLRPC.Chat chat : res.chats) {
                             chats.put(chat.id, chat);
                         }
-                        if (user.id != UserConfig.clientUserId) {
+                        if (user.id != UserConfig.getClientUserId()) {
                             final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
                             messagesObj.add(new MessageObject(res.message, users));
                             TLRPC.Chat chat = res.chats.get(0);
@@ -2858,7 +2896,7 @@ public void run() {
                     }
                 });
 
-                if (user.id != UserConfig.clientUserId) {
+                if (user.id != UserConfig.getClientUserId()) {
                     final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
                     messages.add(res.message);
                     MessagesStorage.getInstance().putMessages(messages, true, true);
@@ -2903,8 +2941,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     public void run() {
                         for (TLRPC.User user : res.users) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                         for (TLRPC.Chat chat : res.chats) {
@@ -2969,8 +3007,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     public void run() {
                         for (TLRPC.User user : res.users) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                         for (TLRPC.Chat chat : res.chats) {
@@ -3023,18 +3061,20 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 }
             }, null, true, RPCRequest.RPCRequestClassGeneric);
         }
+    }
 
-        TLRPC.TL_auth_logOut req2 = new TLRPC.TL_auth_logOut();
-        ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
+    public void logOut() {
+        TLRPC.TL_auth_logOut req = new TLRPC.TL_auth_logOut();
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
-
+                ConnectionsManager.getInstance().cleanUp();
             }
         }, null, true, RPCRequest.RPCRequestClassGeneric);
     }
 
     public void registerForPush(final String regid) {
-        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.clientUserId == 0) {
+        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == 0) {
             return;
         }
         if (UserConfig.registeredForPush && regid.equals(UserConfig.pushString)) {
@@ -3053,7 +3093,7 @@ public void registerForPush(final String regid) {
             }
             req.system_version = "SDK " + Build.VERSION.SDK_INT;
             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-            req.app_version = pInfo.versionName;
+            req.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
             if (req.app_version == null) {
                 req.app_version = "App version unknown";
             }
@@ -3266,8 +3306,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         public void run() {
                             for (TLRPC.User user : res.users) {
                                 users.put(user.id, user);
-                                if (user.id == UserConfig.clientUserId) {
-                                    UserConfig.currentUser = user;
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
                                 }
                             }
                             for (TLRPC.Chat chat : res.chats) {
@@ -3335,7 +3375,7 @@ public void run() {
                                             }
 
                                             if (!(res instanceof TLRPC.TL_updates_differenceSlice)) {
-                                                if ((dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) && !obj.isOut() && obj.messageOwner.unread && (lastMessage == null || lastMessage.messageOwner.date < obj.messageOwner.date)) {
+                                                if ((dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) && !obj.isOut() && obj.messageOwner.unread && (lastMessage == null || lastMessage.messageOwner.date < obj.messageOwner.date)) {
                                                     if (!readMessages.contains(obj.messageOwner.id)) {
                                                         lastMessage = obj;
                                                     }
@@ -3348,7 +3388,7 @@ public void run() {
                                                 if (message.to_id.chat_id != 0) {
                                                     uid = -message.to_id.chat_id;
                                                 } else {
-                                                    if (message.to_id.user_id == UserConfig.clientUserId) {
+                                                    if (message.to_id.user_id == UserConfig.getClientUserId()) {
                                                         message.to_id.user_id = message.from_id;
                                                     }
                                                     uid = message.to_id.user_id;
@@ -3476,14 +3516,14 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (obj.messageOwner.from_id != UserConfig.clientUserId) {
+                            if (obj.messageOwner.from_id != UserConfig.getClientUserId()) {
                                 long dialog_id;
                                 if (obj.messageOwner.to_id.chat_id != 0) {
                                     dialog_id = -obj.messageOwner.to_id.chat_id;
                                 } else {
                                     dialog_id = obj.messageOwner.to_id.user_id;
                                 }
-                                if (dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
+                                if (dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
                                     showInAppNotification(obj);
                                 }
                             }
@@ -3539,14 +3579,14 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (obj.messageOwner.from_id != UserConfig.clientUserId) {
+                            if (obj.messageOwner.from_id != UserConfig.getClientUserId()) {
                                 long dialog_id;
                                 if (obj.messageOwner.to_id.chat_id != 0) {
                                     dialog_id = -obj.messageOwner.to_id.chat_id;
                                 } else {
                                     dialog_id = obj.messageOwner.to_id.user_id;
                                 }
-                                if (dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
+                                if (dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
                                     showInAppNotification(obj);
                                 }
                             }
@@ -3702,8 +3742,8 @@ public void run() {
                     if (usersArr != null) {
                         for (TLRPC.User user : usersArr) {
                             users.put(user.id, user);
-                            if (user.id == UserConfig.clientUserId) {
-                                UserConfig.currentUser = user;
+                            if (user.id == UserConfig.getClientUserId()) {
+                                UserConfig.setCurrentUser(user);
                             }
                         }
                     }
@@ -3737,7 +3777,7 @@ public void run() {
                 if (upd.message.to_id.chat_id != 0) {
                     uid = -upd.message.to_id.chat_id;
                 } else {
-                    if (upd.message.to_id.user_id == UserConfig.clientUserId) {
+                    if (upd.message.to_id.user_id == UserConfig.getClientUserId()) {
                         upd.message.to_id.user_id = upd.message.from_id;
                     }
                     uid = upd.message.to_id.user_id;
@@ -3749,8 +3789,8 @@ public void run() {
                 }
                 arr.add(obj);
                 MessagesStorage.lastPtsValue = update.pts;
-                if (upd.message.from_id != UserConfig.clientUserId && upd.message.to_id != null) {
-                    if (uid != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) {
+                if (upd.message.from_id != UserConfig.getClientUserId() && upd.message.to_id != null) {
+                    if (uid != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
                         lastMessage = obj;
                     }
                 }
@@ -3765,7 +3805,7 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateRestoreMessages) {
                 MessagesStorage.lastPtsValue = update.pts;
             } else if (update instanceof TLRPC.TL_updateUserTyping || update instanceof TLRPC.TL_updateChatUserTyping) {
-                if (update.user_id != UserConfig.clientUserId) {
+                if (update.user_id != UserConfig.getClientUserId()) {
                     long uid = -update.chat_id;
                     if (uid == 0) {
                         uid = update.user_id;
@@ -3845,7 +3885,7 @@ public void run() {
                     newMessage.date = update.date;
                     newMessage.from_id = update.user_id;
                     newMessage.to_id = new TLRPC.TL_peerUser();
-                    newMessage.to_id.user_id = UserConfig.clientUserId;
+                    newMessage.to_id.user_id = UserConfig.getClientUserId();
                     newMessage.out = false;
                     newMessage.dialog_id = update.user_id;
 
@@ -3857,15 +3897,12 @@ public void run() {
                         messages.put(newMessage.dialog_id, arr);
                     }
                     arr.add(obj);
-                    if (newMessage.from_id != UserConfig.clientUserId && newMessage.to_id != null) {
-                        if (newMessage.dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) {
+                    if (newMessage.from_id != UserConfig.getClientUserId() && newMessage.to_id != null) {
+                        if (newMessage.dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
                             lastMessage = obj;
                         }
                     }
                 }
-//                if (!contactsIds.contains(update.user_id)) {
-//                    contactsIds.add(update.user_id);
-//                }
             } else if (update instanceof TLRPC.TL_updateContactLink) {
                 if (update.my_link instanceof TLRPC.TL_contacts_myLinkContact || update.my_link instanceof TLRPC.TL_contacts_myLinkRequested && update.my_link.contact) {
                     int idx = contactsIds.indexOf(-update.user_id);
@@ -3897,7 +3934,7 @@ public void run() {
                 newMessage.date = update.date;
                 newMessage.from_id = 333000;
                 newMessage.to_id = new TLRPC.TL_peerUser();
-                newMessage.to_id.user_id = UserConfig.clientUserId;
+                newMessage.to_id.user_id = UserConfig.getClientUserId();
                 newMessage.out = false;
                 newMessage.dialog_id = 333000;
 
@@ -3909,8 +3946,8 @@ public void run() {
                     messages.put(newMessage.dialog_id, arr);
                 }
                 arr.add(obj);
-                if (newMessage.from_id != UserConfig.clientUserId && newMessage.to_id != null) {
-                    if (newMessage.dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) {
+                if (newMessage.from_id != UserConfig.getClientUserId() && newMessage.to_id != null) {
+                    if (newMessage.dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
                         lastMessage = obj;
                     }
                 }
@@ -3930,8 +3967,8 @@ public void run() {
                         messages.put(uid, arr);
                     }
                     arr.add(obj);
-                    if (message.from_id != UserConfig.clientUserId && message.to_id != null) {
-                        if (uid != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) {
+                    if (message.from_id != UserConfig.getClientUserId() && message.to_id != null) {
+                        if (uid != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
                             lastMessage = obj;
                         }
                     }
@@ -3978,7 +4015,7 @@ public void run() {
 
                 if (newChat instanceof TLRPC.TL_encryptedChatRequested && existingChat == null) {
                     int user_id = newChat.participant_id;
-                    if (user_id == UserConfig.clientUserId) {
+                    if (user_id == UserConfig.getClientUserId()) {
                         user_id = newChat.admin_id;
                     }
                     TLRPC.User user = users.get(user_id);
@@ -4273,11 +4310,11 @@ private void playNotificationSound() {
     }
 
     private void showInAppNotification(MessageObject messageObject) {
-        if (!UserConfig.clientActivated) {
+        if (!UserConfig.isClientActivated()) {
             return;
         }
-        if (ApplicationLoader.lastPauseTime != 0) {
-            ApplicationLoader.lastPauseTime = System.currentTimeMillis();
+        if (ConnectionsManager.lastPauseTime != 0) {
+            ConnectionsManager.lastPauseTime = System.currentTimeMillis();
             FileLog.e("tmessages", "reset sleep timeout by received message");
         }
         if (messageObject == null) {
@@ -4292,7 +4329,7 @@ private void showInAppNotification(MessageObject messageObject) {
         int user_id = messageObject.messageOwner.to_id.user_id;
         if (user_id == 0) {
             user_id = messageObject.messageOwner.from_id;
-        } else if (user_id == UserConfig.clientUserId) {
+        } else if (user_id == UserConfig.getClientUserId()) {
             user_id = messageObject.messageOwner.from_id;
         }
 
@@ -4323,7 +4360,7 @@ private void showInAppNotification(MessageObject messageObject) {
 
         int vibrate_override = preferences.getInt("vibrate_" + dialog_id, 0);
 
-        if (ApplicationLoader.lastPauseTime == 0 && ApplicationLoader.isScreenOn) {
+        if (ConnectionsManager.lastPauseTime == 0 && ApplicationLoader.isScreenOn) {
             boolean inAppSounds = preferences.getBoolean("EnableInAppSounds", true);
             boolean inAppVibrate = preferences.getBoolean("EnableInAppVibrate", true);
             boolean inAppPreview = preferences.getBoolean("EnableInAppPreview", true);
@@ -4375,7 +4412,7 @@ private void showInAppNotification(MessageObject messageObject) {
                                 msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                                 String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long)messageObject.messageOwner.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long)messageObject.messageOwner.date) * 1000));
-                                msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.currentUser.first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
+                                msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
                             }
                         } else {
                             if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
@@ -4405,7 +4442,7 @@ private void showInAppNotification(MessageObject messageObject) {
                     if (preferences.getBoolean("EnablePreviewGroup", true)) {
                         if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                             if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                                if (messageObject.messageOwner.action.user_id == UserConfig.clientUserId) {
+                                if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
                                     msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, Utilities.formatName(user.first_name, user.last_name), chat.title);
                                 } else {
                                     TLRPC.User u2 = users.get(messageObject.messageOwner.action.user_id);
@@ -4419,7 +4456,7 @@ private void showInAppNotification(MessageObject messageObject) {
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
                                 msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                                if (messageObject.messageOwner.action.user_id == UserConfig.clientUserId) {
+                                if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
                                     msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, Utilities.formatName(user.first_name, user.last_name), chat.title);
                                 } else if (messageObject.messageOwner.action.user_id == user.id) {
                                     msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, Utilities.formatName(user.first_name, user.last_name), chat.title);
@@ -4467,23 +4504,29 @@ private void showInAppNotification(MessageObject messageObject) {
 
             boolean needVibrate = false;
             String choosenSoundPath = null;
+            int ledColor = 0xff00ff00;
+
+            choosenSoundPath = preferences.getString("sound_path_" + dialog_id, null);
 
             if (chat_id != 0) {
-                choosenSoundPath = preferences.getString("sound_chat_path_" + chat_id, null);
                 if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
                     choosenSoundPath = null;
                 } else if (choosenSoundPath == null) {
                     choosenSoundPath = preferences.getString("GroupSoundPath", defaultPath);
                 }
                 needVibrate = preferences.getBoolean("EnableVibrateGroup", true);
+                ledColor = preferences.getInt("GroupLed", 0xff00ff00);
             } else if (user_id != 0) {
-                choosenSoundPath = preferences.getString("sound_path_" + user_id, null);
                 if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
                     choosenSoundPath = null;
                 } else if (choosenSoundPath == null) {
                     choosenSoundPath = preferences.getString("GlobalSoundPath", defaultPath);
                 }
                 needVibrate = preferences.getBoolean("EnableVibrateAll", true);
+                ledColor = preferences.getInt("MessagesLed", 0xff00ff00);
+            }
+            if (preferences.contains("color_" + dialog_id)) {
+                ledColor = preferences.getInt("color_" + dialog_id, 0);
             }
 
             if (!needVibrate && vibrate_override == 1) {
@@ -4493,6 +4536,9 @@ private void showInAppNotification(MessageObject messageObject) {
             }
 
             String name = Utilities.formatName(user.first_name, user.last_name);
+            if ((int)dialog_id == 0) {
+                name = LocaleController.getString("AppName", R.string.AppName);
+            }
             String msgShort = msg.replace(name + ": ", "").replace(name + " ", "");
 
             intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
@@ -4526,11 +4572,12 @@ private void showInAppNotification(MessageObject messageObject) {
             mBuilder.setContentIntent(contentIntent);
             mNotificationManager.cancel(1);
             Notification notification = mBuilder.build();
-            notification.ledARGB = 0xff00ff00;
+            if (ledColor != 0) {
+                notification.ledARGB = ledColor;
+            }
             notification.ledOnMS = 1000;
             notification.ledOffMS = 1000;
             if (needVibrate) {
-                notification.defaults = Notification.DEFAULT_VIBRATE;
                 notification.vibrate = new long[]{0, 100, 0, 100};
             } else {
                 notification.vibrate = new long[]{0, 0};
@@ -4684,7 +4731,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
             if (object != null) {
 
                 int from_id = chat.admin_id;
-                if (from_id == UserConfig.clientUserId) {
+                if (from_id == UserConfig.getClientUserId()) {
                     from_id = chat.participant_id;
                 }
 
@@ -4698,7 +4745,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                     newMessage.from_id = from_id;
                     newMessage.to_id = new TLRPC.TL_peerUser();
                     newMessage.random_id = message.random_id;
-                    newMessage.to_id.user_id = UserConfig.clientUserId;
+                    newMessage.to_id.user_id = UserConfig.getClientUserId();
                     newMessage.out = false;
                     newMessage.unread = true;
                     newMessage.dialog_id = ((long)chat.id) << 32;
@@ -4813,7 +4860,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newMessage.media.audio = new TLRPC.TL_audioEncrypted();
                         newMessage.media.audio.id = message.file.id;
                         newMessage.media.audio.access_hash = message.file.access_hash;
-                        newMessage.media.audio.user_id = decryptedMessage.media.user_id;
+                        newMessage.media.audio.user_id = from_id;
                         newMessage.media.audio.date = message.date;
                         newMessage.media.audio.size = message.file.size;
                         newMessage.media.audio.key = decryptedMessage.media.key;
@@ -4843,7 +4890,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newMessage.date = message.date;
                         newMessage.from_id = from_id;
                         newMessage.to_id = new TLRPC.TL_peerUser();
-                        newMessage.to_id.user_id = UserConfig.clientUserId;
+                        newMessage.to_id.user_id = UserConfig.getClientUserId();
                         newMessage.out = false;
                         newMessage.dialog_id = ((long)chat.id) << 32;
                         MessagesStorage.getInstance().updateEncryptedChatTTL(chat);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index 2cf722f2f..1448f6ff1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -36,6 +36,11 @@
     public static byte[] secretPBytes = null;
     public static int secretG = 0;
 
+    private int lastSavedSeq = 0;
+    private int lastSavedPts = 0;
+    private int lastSavedDate = 0;
+    private int lastSavedQts = 0;
+
     public static final int wallpapersDidLoaded = 171;
 
     private static volatile MessagesStorage Instance = null;
@@ -92,6 +97,8 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
                 database.executeFast("CREATE TABLE user_phones_v6(uid INTEGER, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (uid, phone))").stepThis().dispose();
 
+                database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
+
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
 
                 database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
@@ -161,6 +168,8 @@ public void openDatabase() {
                 database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
 
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
+
+                database.executeFast("CREATE TABLE IF NOT EXISTS sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -168,6 +177,7 @@ public void openDatabase() {
     }
 
     public void cleanUp() {
+        storageQueue.cleanupQueue();
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -176,6 +186,12 @@ public void run() {
                 lastPtsValue = 0;
                 lastQtsValue = 0;
                 lastSecretVersion = 0;
+
+                lastSavedSeq = 0;
+                lastSavedPts = 0;
+                lastSavedDate = 0;
+                lastSavedQts = 0;
+
                 secretPBytes = null;
                 secretG = 0;
                 if (database != null) {
@@ -186,6 +202,7 @@ public void run() {
                     cacheFile.delete();
                     cacheFile = null;
                 }
+                storageQueue.cleanupQueue();
                 openDatabase();
             }
         });
@@ -218,6 +235,9 @@ public void saveDiffParams(final int seq, final int pts, final int date, final i
             @Override
             public void run() {
                 try {
+                    if (lastSavedSeq == seq && lastSavedPts == pts && lastSavedDate == date && lastQtsValue == qts) {
+                        return;
+                    }
                     SQLitePreparedStatement state = database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
                     state.bindInteger(1, seq);
                     state.bindInteger(2, pts);
@@ -225,6 +245,10 @@ public void run() {
                     state.bindInteger(4, qts);
                     state.step();
                     state.dispose();
+                    lastSavedSeq = seq;
+                    lastSavedPts = pts;
+                    lastSavedDate = date;
+                    lastSavedQts = qts;
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -781,7 +805,7 @@ public void run() {
                                 if (userData != null) {
                                     SerializedData data = new SerializedData(userData);
                                     TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    if (user.id == UserConfig.clientUserId) {
+                                    if (user.id == UserConfig.getClientUserId()) {
                                         continue;
                                     }
                                     if (user.status != null) {
@@ -1018,7 +1042,7 @@ public void run() {
                     String uids = "";
                     while (cursor.next()) {
                         int user_id = cursor.intValue(0);
-                        if (user_id == UserConfig.clientUserId) {
+                        if (user_id == UserConfig.getClientUserId()) {
                             continue;
                         }
                         TLRPC.TL_contact contact = new TLRPC.TL_contact();
@@ -1415,6 +1439,73 @@ public void run() {
         }
     }
 
+    public TLObject getSentFile(final String path, final int type) {
+        if (path == null) {
+            return null;
+        }
+        final Semaphore semaphore = new Semaphore(0);
+        final ArrayList<TLObject> result = new ArrayList<TLObject>();
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    String id = Utilities.MD5(path);
+                    if (id != null) {
+                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM sent_files_v2 WHERE uid = '%s' AND type = %d", id, type));
+                        if (cursor.next()) {
+                            byte[] fileData = cursor.byteArrayValue(0);
+                            if (fileData != null) {
+                                SerializedData data = new SerializedData(fileData);
+                                TLObject file = TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                if (file != null) {
+                                    result.add(file);
+                                }
+                            }
+                        }
+                        cursor.dispose();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                } finally {
+                    semaphore.release();
+                }
+            }
+        });
+        try {
+            semaphore.acquire();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return !result.isEmpty() ? result.get(0) : null;
+    }
+
+    public void putSentFile(final String path, final TLObject file, final int type) {
+        if (path == null || file == null) {
+            return;
+        }
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    String id = Utilities.MD5(path);
+                    if (id != null) {
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?)");
+                        state.requery();
+                        SerializedData data = new SerializedData();
+                        file.serializeToStream(data);
+                        state.bindString(1, id);
+                        state.bindInteger(2, type);
+                        state.bindByteArray(3, data.toByteArray());
+                        state.step();
+                        state.dispose();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
     public void updateEncryptedChatTTL(final TLRPC.EncryptedChat chat) {
         if (chat == null) {
             return;
@@ -1838,6 +1929,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                         state.bindInteger(2, count);
                         state.step();
                     }
+                    cursor.dispose();
                 }
                 state.dispose();
             }
@@ -2484,7 +2576,7 @@ public void run() {
                 ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<TLRPC.EncryptedChat>();
                 try {
                     ArrayList<Integer> usersToLoad = new ArrayList<Integer>();
-                    usersToLoad.add(UserConfig.clientUserId);
+                    usersToLoad.add(UserConfig.getClientUserId());
                     ArrayList<Integer> chatsToLoad = new ArrayList<Integer>();
                     ArrayList<Integer> encryptedToLoad = new ArrayList<Integer>();
                     SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid ORDER BY d.date DESC LIMIT %d,%d", offset, count));
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
index 6c3b014e3..58a966076 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
@@ -22,9 +22,9 @@
 public class NativeLoader {
 
     private static final long sizes[] = new long[] {
-            922256,     //armeabi
-            991908,     //armeabi-v7a
-            1713204,    //x86
+            795280,     //armeabi
+            844452,     //armeabi-v7a
+            1242164,    //x86
             0,          //mips
     };
 
@@ -48,6 +48,53 @@ private static File getNativeLibraryDir(Context context) {
         return null;
     }
 
+    private static boolean loadFromZip(Context context, File destLocalFile, String folder) {
+        ZipFile zipFile = null;
+        InputStream stream = null;
+        try {
+            zipFile = new ZipFile(context.getApplicationInfo().sourceDir);
+            ZipEntry entry = zipFile.getEntry("lib/" + folder + "/libtmessages.so");
+            if (entry == null) {
+                throw new Exception("Unable to find file in apk:" + "lib/" + folder + "/libtmessages.so");
+            }
+            stream = zipFile.getInputStream(entry);
+
+            OutputStream out = new FileOutputStream(destLocalFile);
+            byte[] buf = new byte[4096];
+            int len;
+            while ((len = stream.read(buf)) > 0) {
+                Thread.yield();
+                out.write(buf, 0, len);
+            }
+            out.close();
+
+            try {
+                System.load(destLocalFile.getAbsolutePath());
+                nativeLoaded = true;
+            } catch (Error e) {
+                FileLog.e("tmessages", e);
+            }
+            return true;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            if (stream != null) {
+                try {
+                    stream.close();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            if (zipFile != null) {
+                try {
+                    zipFile.close();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+        return false;
+    }
 
     public static synchronized void initNativeLibs(Context context) {
         if (nativeLoaded) {
@@ -87,6 +134,12 @@ public static synchronized void initNativeLibs(Context context) {
                 libSize2 = sizes[1];
             }
 
+            String javaArch = System.getProperty("os.arch");
+            if (javaArch != null && javaArch.contains("686")) {
+                folder = "x86";
+                libSize = sizes[2];
+            }
+
             File destFile = getNativeLibraryDir(context);
             if (destFile != null) {
                 destFile = new File(destFile, "libtmessages.so");
@@ -96,22 +149,22 @@ public static synchronized void initNativeLibs(Context context) {
                         System.loadLibrary("tmessages");
                         nativeLoaded = true;
                         return;
-                    } catch (Exception e) {
-                        e.printStackTrace();
+                    } catch (Error e) {
+                        FileLog.e("tmessages", e);
                     }
                 }
             }
 
             File destLocalFile = new File(context.getFilesDir().getAbsolutePath() + "/libtmessages.so");
-            if (destLocalFile.exists()) {
+            if (destLocalFile != null && destLocalFile.exists()) {
                 if (destLocalFile.length() == libSize) {
                     try {
                         FileLog.d("tmessages", "Load local lib");
                         System.load(destLocalFile.getAbsolutePath());
                         nativeLoaded = true;
                         return;
-                    } catch (Exception e) {
-                        e.printStackTrace();
+                    } catch (Error e) {
+                        FileLog.e("tmessages", e);
                     }
                 } else {
                     destLocalFile.delete();
@@ -120,51 +173,24 @@ public static synchronized void initNativeLibs(Context context) {
 
             FileLog.e("tmessages", "Library not found, arch = " + folder);
 
-            ZipFile zipFile = null;
-            InputStream stream = null;
-            try {
-                zipFile = new ZipFile(context.getApplicationInfo().sourceDir);
-                ZipEntry entry = zipFile.getEntry("lib/" + folder + "/libtmessages.so");
-                if (entry == null) {
-                    throw new Exception("Unable to find file in apk:" + "lib/" + folder + "/libtmessages.so");
-                }
-                stream = zipFile.getInputStream(entry);
-
-                OutputStream out = new FileOutputStream(destLocalFile);
-                byte[] buf = new byte[4096];
-                int len;
-                while ((len = stream.read(buf)) > 0) {
-                    Thread.yield();
-                    out.write(buf, 0, len);
-                }
-                out.close();
-
-                System.load(destLocalFile.getAbsolutePath());
-                nativeLoaded = true;
-                return;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (stream != null) {
-                    try {
-                        stream.close();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                if (zipFile != null) {
-                    try {
-                        zipFile.close();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
+            if (!loadFromZip(context, destLocalFile, folder)) {
+                folder = "x86";
+                destLocalFile = new File(context.getFilesDir().getAbsolutePath() + "/libtmessages86.so");
+                if (!loadFromZip(context, destLocalFile, folder)) {
+                    destLocalFile = new File(context.getFilesDir().getAbsolutePath() + "/libtmessagesarm.so");
+                    folder = "armeabi";
+                    loadFromZip(context, destLocalFile, folder);
                 }
             }
         } catch (Throwable e) {
             e.printStackTrace();
         }
 
-        System.loadLibrary("tmessages");
-        nativeLoaded = true;
+        try {
+            System.loadLibrary("tmessages");
+            nativeLoaded = true;
+        } catch (Error e) {
+            FileLog.e("tmessages", e);
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
index e444d9837..ab6162aed 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
@@ -28,6 +28,8 @@
     public static int RPCRequestClassFailOnServerErrors = 16;
     public static int RPCRequestClassCanCompress = 32;
     public static int RPCRequestClassPush = 64;
+    public static int RPCRequestClassWithoutLogin = 128;
+    public static int RPCRequestClassDownloadMedia2 = 256;
 
     static int RPCRequestClassTransportMask = (RPCRequestClassGeneric | RPCRequestClassDownloadMedia | RPCRequestClassUploadMedia);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ScreenReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ScreenReceiver.java
index 2abdd5d02..b557d0e5f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ScreenReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ScreenReceiver.java
@@ -19,9 +19,13 @@
     public void onReceive(Context context, Intent intent) {
         if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
             FileLog.e("tmessages", "screen off");
+            if (ConnectionsManager.lastPauseTime == 0) {
+                ConnectionsManager.lastPauseTime = System.currentTimeMillis();
+            }
             ApplicationLoader.isScreenOn = false;
         } else if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {
             FileLog.e("tmessages", "screen on");
+            ConnectionsManager.resetLastPauseTime();
             ApplicationLoader.isScreenOn = true;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
index 1aceb8283..9c40cb6e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
@@ -9,6 +9,8 @@
 package org.telegram.messenger;
 
 public class TLObject {
+    public boolean disableFree = false;
+
     public TLObject () {
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index b78678a8a..0cbc8368a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -3783,14 +3783,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class InputEncryptedFile extends TLObject {
-        public long id;
-        public long access_hash;
-        public int parts;
-        public int key_fingerprint;
-        public String md5_checksum;
-    }
-
     public static class TL_inputEncryptedFile extends InputEncryptedFile {
         public static int constructor = 0x5a17b5e5;
 
@@ -8144,6 +8136,9 @@ public void readParams(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
@@ -8295,6 +8290,9 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (result != null) {
                 result.freeResources();
             }
@@ -8834,7 +8832,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_documentEncrypted extends Document {
+    public static class TL_documentEncrypted extends TL_document {
         public static int constructor = 0x55555556;
 
 
@@ -8868,7 +8866,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_videoEncrypted extends Video {
+    public static class TL_videoEncrypted extends TL_video {
         public static int constructor = 0x55555553;
 
 
@@ -9179,6 +9177,9 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
@@ -9206,10 +9207,23 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
             }
         }
     }
+
+    public static class InputEncryptedFile extends TLObject {
+        public long id;
+        public long access_hash;
+        public int parts;
+        public int key_fingerprint;
+        public String md5_checksum;
+        public byte[] key;
+        public byte[] iv;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 2bc8153c5..717cb3297 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -135,7 +135,7 @@ public void run() {
                     client.addListener(TcpConnection.this);
                     if ((transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
                         if (isNextPort) {
-                            client.setTimeout(15000);
+                            client.setTimeout(20000);
                         } else {
                             client.setTimeout(30000);
                         }
@@ -424,7 +424,7 @@ public void run() {
                 datacenter.storeCurrentAddressAndPortNum();
                 isNextPort = false;
                 if ((transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-                    client.setTimeout(40000);
+                    client.setTimeout(60000 * 3 + 20000);
                 } else {
                     client.setTimeout(25000);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 6bdf8d0d3..4869a96f0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -17,9 +17,7 @@
 import java.io.File;
 
 public class UserConfig {
-    public static TLRPC.User currentUser;
-    public static int clientUserId = 0;
-    public static boolean clientActivated = false;
+    private static TLRPC.User currentUser;
     public static boolean registeredForPush = false;
     public static boolean registeredForInternalPush = false;
     public static String pushString = "";
@@ -62,8 +60,6 @@ public static void saveConfig(boolean withFile, File oldFile) {
                     if (withFile) {
                         SerializedData data = new SerializedData();
                         currentUser.serializeToStream(data);
-                        clientUserId = currentUser.id;
-                        clientActivated = true;
                         String userString = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
                         editor.putString("user", userString);
                     }
@@ -80,6 +76,30 @@ public static void saveConfig(boolean withFile, File oldFile) {
         }
     }
 
+    public static boolean isClientActivated() {
+        synchronized (sync) {
+            return currentUser != null;
+        }
+    }
+
+    public static int getClientUserId() {
+        synchronized (sync) {
+            return currentUser != null ? currentUser.id : 0;
+        }
+    }
+
+    public static TLRPC.User getCurrentUser() {
+        synchronized (sync) {
+            return currentUser;
+        }
+    }
+
+    public static void setCurrentUser(TLRPC.User user) {
+        synchronized (sync) {
+            currentUser = user;
+        }
+    }
+
     public static void loadConfig() {
         synchronized (sync) {
             final File configFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "user.dat");
@@ -90,8 +110,6 @@ public static void loadConfig() {
                     if (ver == 1) {
                         int constructor = data.readInt32();
                         currentUser = (TLRPC.TL_userSelf)TLClassStore.Instance().TLdeserialize(data, constructor);
-                        clientUserId = currentUser.id;
-                        clientActivated = true;
                         MessagesStorage.lastDateValue = data.readInt32();
                         MessagesStorage.lastPtsValue = data.readInt32();
                         MessagesStorage.lastSeqValue = data.readInt32();
@@ -119,8 +137,6 @@ public void run() {
                     } else if (ver == 2) {
                         int constructor = data.readInt32();
                         currentUser = (TLRPC.TL_userSelf)TLClassStore.Instance().TLdeserialize(data, constructor);
-                        clientUserId = currentUser.id;
-                        clientActivated = true;
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
                         registeredForPush = preferences.getBoolean("registeredForPush", false);
@@ -164,21 +180,13 @@ public void run() {
                     if (userBytes != null) {
                         SerializedData data = new SerializedData(userBytes);
                         currentUser = (TLRPC.TL_userSelf)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                        clientUserId = currentUser.id;
-                        clientActivated = true;
                     }
                 }
-                if (currentUser == null) {
-                    clientActivated = false;
-                    clientUserId = 0;
-                }
             }
         }
     }
 
     public static void clearConfig() {
-        clientUserId = 0;
-        clientActivated = false;
         currentUser = null;
         registeredForInternalPush = false;
         registeredForPush = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index ea76ec3f1..59b64ffcc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -15,8 +15,8 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
 import android.database.Cursor;
-import android.graphics.Bitmap;
 import android.graphics.Point;
 import android.graphics.Typeface;
 import android.net.Uri;
@@ -34,6 +34,7 @@
 import android.view.inputmethod.InputMethodManager;
 
 import net.hockeyapp.android.CrashManager;
+import net.hockeyapp.android.CrashManagerListener;
 import net.hockeyapp.android.UpdateManager;
 
 import org.telegram.ui.ApplicationLoader;
@@ -87,6 +88,8 @@
 
     public static volatile DispatchQueue stageQueue = new DispatchQueue("stageQueue");
     public static volatile DispatchQueue globalQueue = new DispatchQueue("globalQueue");
+    public static volatile DispatchQueue searchQueue = new DispatchQueue("searchQueue");
+    public static volatile DispatchQueue photoBookQueue = new DispatchQueue("photoBookQueue");
 
     public static int[] arrColors = {0xffee4928, 0xff41a903, 0xffe09602, 0xff0f94ed, 0xff8f3bf7, 0xfffc4380, 0xff00a1c4, 0xffeb7002};
     public static int[] arrUsersAvatars = {
@@ -153,7 +156,7 @@
     public native static long doPQNative(long _what);
     public native static byte[] aesIgeEncryption(byte[] _what, byte[] _key, byte[] _iv, boolean encrypt, boolean changeIv, int len);
     public native static void aesIgeEncryption2(ByteBuffer _what, byte[] _key, byte[] _iv, boolean encrypt, boolean changeIv, int len);
-    public native static void loadBitmap(String path, Bitmap bitmap, int scale);
+    public native static void loadBitmap(String path, int[] bitmap, int scale, int format, int width, int height);
 
     public static void lockOrientation(Activity activity) {
         if (prevOrientation != -10) {
@@ -164,19 +167,47 @@ public static void lockOrientation(Activity activity) {
             WindowManager manager = (WindowManager)activity.getSystemService(Activity.WINDOW_SERVICE);
             if (manager != null && manager.getDefaultDisplay() != null) {
                 int rotation = manager.getDefaultDisplay().getRotation();
+                int orientation = activity.getResources().getConfiguration().orientation;
+
                 if (rotation == Surface.ROTATION_270) {
-                    if (Build.VERSION.SDK_INT >= 9) {
-                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+                    if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                     } else {
-                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                        if (Build.VERSION.SDK_INT >= 9) {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+                        } else {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                        }
                     }
                 } else if (rotation == Surface.ROTATION_90) {
-                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                    if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+                        if (Build.VERSION.SDK_INT >= 9) {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+                        } else {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+                        }
+                    } else {
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                    }
                 } else if (rotation == Surface.ROTATION_0) {
-                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+                    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                    } else {
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+                    }
                 } else {
-                    if (Build.VERSION.SDK_INT >= 9) {
-                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+                    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                        if (Build.VERSION.SDK_INT >= 9) {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+                        } else {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                        }
+                    } else {
+                        if (Build.VERSION.SDK_INT >= 9) {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+                        } else {
+                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+                        }
                     }
                 }
             }
@@ -231,10 +262,17 @@ public static String parseIntToString(String value) {
     public static File getCacheDir() {
         if (externalCacheNotAvailableState == 1 || externalCacheNotAvailableState == 0 && Environment.getExternalStorageState().startsWith(Environment.MEDIA_MOUNTED)) {
             externalCacheNotAvailableState = 1;
-            return ApplicationLoader.applicationContext.getExternalCacheDir();
+            File file = ApplicationLoader.applicationContext.getExternalCacheDir();
+            if (file != null) {
+                return file;
+            }
         }
         externalCacheNotAvailableState = 2;
-        return ApplicationLoader.applicationContext.getCacheDir();
+        File file = ApplicationLoader.applicationContext.getCacheDir();
+        if (file != null) {
+            return file;
+        }
+        return new File("");
     }
 
     public static String bytesToHex(byte[] bytes) {
@@ -668,7 +706,7 @@ public static int getColorIndex(int id) {
         try {
             String str;
             if (id >= 0) {
-                str = String.format(Locale.US, "%d%d", id, UserConfig.clientUserId);
+                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
             } else {
                 str = String.format(Locale.US, "%d", id);
             }
@@ -707,6 +745,9 @@ public static int getGroupAvatarForId(int id) {
     }
 
     public static String MD5(String md5) {
+        if (md5 == null) {
+            return null;
+        }
         try {
             java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
             byte[] array = md.digest(md5.getBytes());
@@ -949,7 +990,12 @@ public static String formatFileSize(long size) {
     }
 
     public static void checkForCrashes(Activity context) {
-        CrashManager.register(context, BuildVars.HOCKEY_APP_HASH);
+        CrashManager.register(context, BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
+            @Override
+            public boolean includeDeviceData() {
+                return true;
+            }
+        });
     }
 
     public static void checkForUpdates(Activity context) {
@@ -957,4 +1003,8 @@ public static void checkForUpdates(Activity context) {
             UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
         }
     }
+
+    public static boolean isTablet(Context context) {
+        return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index 17edcef7b..c3a28d8aa 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -107,7 +107,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (who != null && fromUser != null) {
                             if (isFromMe()) {
                                 messageText = LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser).replace("un2", Utilities.formatName(who.first_name, who.last_name));
-                            } else if (message.action.user_id == UserConfig.clientUserId) {
+                            } else if (message.action.user_id == UserConfig.getClientUserId()) {
                                 messageText = LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
                             } else {
                                 messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", Utilities.formatName(who.first_name, who.last_name)).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
@@ -124,7 +124,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     if (whoUser != null && fromUser != null) {
                         if (isFromMe()) {
                             messageText = LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser).replace("un2", Utilities.formatName(whoUser.first_name, whoUser.last_name));
-                        } else if (message.action.user_id == UserConfig.clientUserId) {
+                        } else if (message.action.user_id == UserConfig.getClientUserId()) {
                             messageText = LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
                         } else {
                             messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", Utilities.formatName(whoUser.first_name, whoUser.last_name)).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
@@ -206,7 +206,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                     String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long)message.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long)message.date) * 1000));
-                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.currentUser.first_name, date, message.action.title, message.action.address);
+                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, message.action.title, message.action.address);
                 } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
                     if (fromUser != null) {
                         messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(fromUser.first_name, fromUser.last_name));
@@ -537,6 +537,6 @@ public boolean isOut() {
     }
 
     public boolean isFromMe() {
-        return messageOwner.from_id == UserConfig.clientUserId;
+        return messageOwner.from_id == UserConfig.getClientUserId();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
index 1ab8d8b60..e148cf9c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Adapters;
 
+import android.database.DataSetObserver;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
@@ -38,4 +39,11 @@ public long getItemId(int i) {
     public View getView(int i, View view, ViewGroup viewGroup) {
         return null;
     }
+
+    @Override
+    public void unregisterDataSetObserver(DataSetObserver observer) {
+        if (observer != null) {
+            super.unregisterDataSetObserver(observer);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
index 99bcfcb75..0da5808d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
@@ -72,7 +72,7 @@ private void processSearch(final String query) {
             public void run() {
                 final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
                 contactsCopy.addAll(ContactsController.getInstance().contacts);
-                Utilities.globalQueue.postRunnable(new Runnable() {
+                Utilities.searchQueue.postRunnable(new Runnable() {
                     @Override
                     public void run() {
                         String q = query.trim().toLowerCase();
@@ -87,7 +87,7 @@ public void run() {
                         for (TLRPC.TL_contact contact : contactsCopy) {
                             TLRPC.User user = MessagesController.getInstance().users.get(contact.user_id);
                             if (user.first_name != null && user.first_name.toLowerCase().startsWith(q) || user.last_name != null && user.last_name.toLowerCase().startsWith(q)) {
-                                if (user.id == UserConfig.clientUserId) {
+                                if (user.id == UserConfig.getClientUserId()) {
                                     continue;
                                 }
                                 resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index 42ddb9889..52a7660ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -20,7 +20,7 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
-import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.PowerManager;
@@ -29,7 +29,6 @@
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.android.gms.gcm.GoogleCloudMessaging;
 
-import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.NotificationsService;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
@@ -41,7 +40,6 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 
-import java.util.Calendar;
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class ApplicationLoader extends Application {
@@ -52,12 +50,12 @@
     public static final String PROPERTY_REG_ID = "registration_id";
     private static final String PROPERTY_APP_VERSION = "appVersion";
     private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
-    public static long lastPauseTime;
-    public static Bitmap cachedWallpaper = null;
+    public static Drawable cachedWallpaper = null;
 
     public static volatile Context applicationContext = null;
     public static volatile Handler applicationHandler = null;
     private static volatile boolean applicationInited = false;
+
     public static volatile boolean isScreenOn = false;
 
     public static void postInitApplication() {
@@ -93,7 +91,7 @@ public static void postInitApplication() {
         }
 
         UserConfig.loadConfig();
-        if (UserConfig.currentUser != null) {
+        if (UserConfig.getCurrentUser() != null) {
             boolean changed = false;
             SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
             int v = preferences.getInt("v", 0);
@@ -122,8 +120,8 @@ public static void postInitApplication() {
                 editor.commit();
             }
 
-            MessagesController.getInstance().users.put(UserConfig.clientUserId, UserConfig.currentUser);
-            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.currentUser.phone);
+            MessagesController.getInstance().users.put(UserConfig.getClientUserId(), UserConfig.getCurrentUser());
+            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
             ConnectionsManager.getInstance().initPushConnection();
         }
 
@@ -135,7 +133,6 @@ public static void postInitApplication() {
     @Override
     public void onCreate() {
         super.onCreate();
-        lastPauseTime = System.currentTimeMillis();
         applicationContext = getApplicationContext();
 
         applicationHandler = new Handler(applicationContext.getMainLooper());
@@ -153,10 +150,14 @@ public static void startPushService() {
             applicationContext.startService(new Intent(applicationContext, NotificationsService.class));
 
             if (android.os.Build.VERSION.SDK_INT >= 19) {
-                Calendar cal = Calendar.getInstance();
+//                Calendar cal = Calendar.getInstance();
+//                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+//                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
+//                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
+
                 PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
-                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
-                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
+                AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
+                alarm.cancel(pintent);
             }
         } else {
             stopPushService();
@@ -182,14 +183,6 @@ public void onConfigurationChanged(Configuration newConfig) {
         }
     }
 
-    public static void resetLastPauseTime() {
-        if (lastPauseTime != 0 && System.currentTimeMillis() - lastPauseTime > 5000) {
-            ContactsController.getInstance().checkContacts();
-        }
-        lastPauseTime = 0;
-        ConnectionsManager.getInstance().applicationMovedToForeground();
-    }
-
     private void initPlayServices() {
         if (checkPlayServices()) {
             gcm = GoogleCloudMessaging.getInstance(this);
@@ -294,12 +287,14 @@ public void run() {
                 UserConfig.pushString = regid;
                 UserConfig.registeredForPush = !isNew;
                 UserConfig.saveConfig(false);
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        MessagesController.getInstance().registerForPush(regid);
-                    }
-                });
+                if (UserConfig.getClientUserId() != 0) {
+                    Utilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            MessagesController.getInstance().registerForPush(regid);
+                        }
+                    });
+                }
             }
         });
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index 1cfbccf23..552b411fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -233,7 +233,7 @@ protected boolean isUserDataChanged() {
 
         newUser = MessagesController.getInstance().users.get(currentMessageObject.messageOwner.fwd_from_id);
         newNameString = null;
-        if (drawForwardedName && currentMessageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+        if (newUser != null && drawForwardedName && currentMessageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
             newNameString = Utilities.formatName(newUser.first_name, newUser.last_name);
         }
         return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
index 856f24d2e..3a6563775 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
@@ -16,7 +16,6 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.text.TextUtils;
-import android.view.View;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.LocaleController;
@@ -28,8 +27,6 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.ImageReceiver;
 
-import java.lang.ref.WeakReference;
-
 public class ChatOrUserCell extends BaseCell {
     private static TextPaint namePaint;
     private static TextPaint nameEncryptedPaint;
@@ -347,7 +344,7 @@ public void build(int width, int height) {
                     onlineString = subLabel;
                 } else {
                     onlineString = LocaleController.formatUserStatus(user);
-                    if (user != null && (user.id == UserConfig.clientUserId || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
+                    if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
                         currentOnlinePaint = onlinePaint;
                         onlineString = LocaleController.getString("Online", R.string.Online);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 496c13f17..b7a742c9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -423,7 +423,7 @@ public void build(int width, int height) {
                         } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
                             messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
                         } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
-                            if (encryptedChat.admin_id == UserConfig.clientUserId) {
+                            if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
                                 if (user != null && user.first_name != null) {
                                     messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
                                 } else {
@@ -546,8 +546,8 @@ public void build(int width, int height) {
             if (chat != null) {
                 nameString = chat.title;
             } else if (user != null) {
-                if (user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
-                    if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().loadingContacts)) {
+                if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                    if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
                         nameString = Utilities.formatName(user.first_name, user.last_name);
                     } else {
                         if (user.phone != null && user.phone.length() != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 55f1208c1..74f44d1f5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -21,7 +21,7 @@
 import android.graphics.Bitmap;
 import android.graphics.Rect;
 import android.graphics.drawable.AnimationDrawable;
-import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
 import android.media.MediaPlayer;
 import android.media.ThumbnailUtils;
 import android.net.Uri;
@@ -50,7 +50,6 @@
 import android.webkit.MimeTypeMap;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageButton;
@@ -60,6 +59,7 @@
 import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.LocaleController;
@@ -78,6 +78,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatAudioCell;
 import org.telegram.ui.Cells.ChatBaseCell;
 import org.telegram.ui.Cells.ChatMediaCell;
@@ -511,7 +512,11 @@ public void onItemClick(int id) {
                             if (str.length() != 0) {
                                 str += "\n";
                             }
-                            str += messageObject.messageOwner.message;
+                            if (messageObject.messageOwner.message != null) {
+                                str += messageObject.messageOwner.message;
+                            } else {
+                                str += messageObject.messageText;
+                            }
                         }
                         if (str.length() != 0) {
                             if (android.os.Build.VERSION.SDK_INT < 11) {
@@ -643,33 +648,41 @@ public void onItemClick(int id) {
 
             updateContactStatus();
 
-            ImageView backgroundImage = (ImageView) fragmentView.findViewById(R.id.background_image);
-
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
             int selectedBackground = preferences.getInt("selectedBackground", 1000001);
             int selectedColor = preferences.getInt("selectedColor", 0);
             if (selectedColor != 0) {
-                backgroundImage.setBackgroundColor(selectedColor);
+                contentView.setBackgroundColor(selectedColor);
                 chatListView.setCacheColorHint(selectedColor);
             } else {
                 chatListView.setCacheColorHint(0);
-                if (selectedBackground == 1000001) {
-                    backgroundImage.setImageResource(R.drawable.background_hd);
-                } else {
-                    File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                    if (toFile.exists()) {
-                        if (ApplicationLoader.cachedWallpaper != null) {
-                            backgroundImage.setImageBitmap(ApplicationLoader.cachedWallpaper);
-                        } else {
-                            backgroundImage.setImageURI(Uri.fromFile(toFile));
-                            if (backgroundImage.getDrawable() instanceof BitmapDrawable) {
-                                ApplicationLoader.cachedWallpaper = ((BitmapDrawable)backgroundImage.getDrawable()).getBitmap();
+                try {
+                    if (selectedBackground == 1000001) {
+                        ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(R.drawable.background_hd);
+                    } else {
+                        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                        if (toFile.exists()) {
+                            if (ApplicationLoader.cachedWallpaper != null) {
+                                ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(ApplicationLoader.cachedWallpaper);
+                            } else {
+                                Drawable drawable = Drawable.createFromPath(toFile.getAbsolutePath());
+                                if (drawable != null) {
+                                    ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(drawable);
+                                    ApplicationLoader.cachedWallpaper = drawable;
+                                } else {
+                                    contentView.setBackgroundColor(-2693905);
+                                    chatListView.setCacheColorHint(-2693905);
+                                }
                             }
+                            isCustomTheme = true;
+                        } else {
+                            ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(R.drawable.background_hd);
                         }
-                        isCustomTheme = true;
-                    } else {
-                        backgroundImage.setImageResource(R.drawable.background_hd);
                     }
+                } catch (Exception e) {
+                    contentView.setBackgroundColor(-2693905);
+                    chatListView.setCacheColorHint(-2693905);
+                    FileLog.e("tmessages", e);
                 }
             }
 
@@ -686,7 +699,7 @@ public void onItemClick(int id) {
                 View v = contentView.findViewById(R.id.secret_placeholder);
                 v.setVisibility(View.VISIBLE);
 
-                if (currentEncryptedChat.admin_id == UserConfig.clientUserId) {
+                if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
                     if (currentUser.first_name.length() > 0) {
                         secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
                     } else {
@@ -979,6 +992,9 @@ public void afterTextChanged(Editable editable) {
             bottomOverlayChat.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1252,6 +1268,9 @@ private void checkActionBarMenu() {
             timerButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
                     builder.setItems(new CharSequence[]{
@@ -1337,7 +1356,7 @@ private void updateOnlineCount() {
         int currentTime = ConnectionsManager.getInstance().getCurrentTime();
         for (TLRPC.TL_chatParticipant participant : info.participants) {
             TLRPC.User user = MessagesController.getInstance().users.get(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.clientUserId) && user.status.expires > 10000) {
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
                 onlineCount++;
             }
         }
@@ -1495,7 +1514,7 @@ private void updateSubtitle() {
         if (currentChat != null) {
             actionBarLayer.setTitle(currentChat.title);
         } else if (currentUser != null) {
-            if (currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().loadingContacts)) {
+            if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
                     actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
@@ -1625,25 +1644,10 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                 currentPicturePath = null;
             } else if (requestCode == 1) {
                 if (data == null || data.getData() == null) {
+                    showAttachmentError();
                     return;
                 }
-                String tempPath = Utilities.getPath(data.getData());
-
-                boolean isGif = false;
-                if (tempPath != null && tempPath.endsWith(".gif")) {
-                    isGif = true;
-                } else if (tempPath == null) {
-                    isGif = MediaController.isGif(data.getData());
-                    if (isGif) {
-                        tempPath = MediaController.copyDocumentToCache(data.getData());
-                    }
-                }
-
-                if (tempPath != null && isGif) {
-                    processSendingDocument(tempPath);
-                } else {
-                    processSendingPhoto(null, data.getData());
-                }
+                processSendingPhoto(null, data.getData());
             } else if (requestCode == 2) {
                 String videoPath = null;
                 if (data != null) {
@@ -1678,10 +1682,34 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     currentPicturePath = null;
                 }
                 processSendingVideo(videoPath);
+            } else if (requestCode == 21) {
+                if (data == null || data.getData() == null) {
+                    showAttachmentError();
+                    return;
+                }
+                String tempPath = Utilities.getPath(data.getData());
+                String originalPath = tempPath;
+                if (tempPath == null) {
+                    originalPath = data.toString();
+                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
+                }
+                if (tempPath == null) {
+                    showAttachmentError();
+                    return;
+                }
+                processSendingDocument(tempPath, originalPath);
             }
         }
     }
 
+    private void showAttachmentError() {
+        if (getParentActivity() == null) {
+            return;
+        }
+        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
+        toast.show();
+    }
+
     @Override
     public void saveSelfArgs(Bundle args) {
         if (currentPicturePath != null) {
@@ -1708,17 +1736,17 @@ public boolean processSendingText(String text) {
     }
 
     public void processSendingPhoto(String imageFilePath, Uri imageUri) {
-        if ((imageFilePath == null || imageFilePath.length() == 0) && imageUri == null) {
-            return;
+        ArrayList<String> paths = null;
+        ArrayList<Uri> uris = null;
+        if (imageFilePath != null && imageFilePath.length() != 0) {
+            paths = new ArrayList<String>();
+            paths.add(imageFilePath);
         }
-        TLRPC.TL_photo photo = MessagesController.getInstance().generatePhotoSizes(imageFilePath, imageUri);
-        if (photo != null) {
-            MessagesController.getInstance().sendMessage(photo, dialog_id);
-            if (chatListView != null) {
-                chatListView.setSelection(messages.size() + 1);
-            }
-            scrollToTopOnResume = true;
+        if (imageUri != null) {
+            uris = new ArrayList<Uri>();
+            uris.add(imageUri);
         }
+        processSendingPhotos(paths, uris);
     }
 
     public void processSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris) {
@@ -1736,6 +1764,8 @@ public void processSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris) {
         new Thread(new Runnable() {
             @Override
             public void run() {
+                ArrayList<String> sendAsDocuments = null;
+                ArrayList<String> sendAsDocumentsOriginal = null;
                 int count = !pathsCopy.isEmpty() ? pathsCopy.size() : urisCopy.size();
                 String path = null;
                 Uri uri = null;
@@ -1745,115 +1775,223 @@ public void run() {
                     } else if (!urisCopy.isEmpty()) {
                         uri = urisCopy.get(a);
                     }
-                    final TLRPC.TL_photo photo = MessagesController.getInstance().generatePhotoSizes(path, uri);
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (photo != null) {
-                                MessagesController.getInstance().sendMessage(photo, dialog_id);
-                                if (chatListView != null) {
-                                    chatListView.setSelection(messages.size() + 1);
+
+                    String originalPath = path;
+                    String tempPath = path;
+                    if (tempPath == null && uri != null) {
+                        tempPath = Utilities.getPath(uri);
+                        originalPath = uri.toString();
+                    }
+
+                    boolean isGif = false;
+                    if (tempPath != null && tempPath.endsWith(".gif")) {
+                        isGif = true;
+                    } else if (tempPath == null && uri != null) {
+                        isGif = MediaController.isGif(uri);
+                        if (isGif) {
+                            originalPath = uri.toString();
+                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
+                        }
+                    }
+
+                    if (isGif) {
+                        if (sendAsDocuments == null) {
+                            sendAsDocuments = new ArrayList<String>();
+                            sendAsDocumentsOriginal = new ArrayList<String>();
+                        }
+                        sendAsDocuments.add(tempPath);
+                        sendAsDocumentsOriginal.add(originalPath);
+                    } else {
+                        TLRPC.TL_photo photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(originalPath, currentEncryptedChat == null ? 0 : 3);
+                        if (photo == null && uri != null) {
+                            photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(Utilities.getPath(uri), currentEncryptedChat == null ? 0 : 3);
+                        }
+                        if (photo == null) {
+                            photo = MessagesController.getInstance().generatePhotoSizes(path, uri);
+                        }
+                        if (photo != null) {
+                            final String originalPathFinal = originalPath;
+                            final TLRPC.TL_photo photoFinal = photo;
+                            Utilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    MessagesController.getInstance().sendMessage(photoFinal, originalPathFinal, dialog_id);
+                                    if (chatListView != null) {
+                                        chatListView.setSelection(messages.size() + 1);
+                                    }
+                                    if (paused) {
+                                        scrollToTopOnResume = true;
+                                    }
                                 }
-                                scrollToTopOnResume = true;
-                            }
+                            });
                         }
-                    });
+                    }
+                }
+                if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
+                    for (int a = 0; a < sendAsDocuments.size(); a++) {
+                        processSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a));
+                    }
                 }
             }
         }).start();
     }
 
-    public void processSendingDocument(String documentFilePath) {
-        if (documentFilePath == null || documentFilePath.length() == 0) {
+    private void processSendingDocumentInternal(String path, String originalPath) {
+        if (path == null || path.length() == 0) {
             return;
         }
-        File f = new File(documentFilePath);
+        final File f = new File(path);
         if (!f.exists() || f.length() == 0) {
             return;
         }
+
         String name = f.getName();
         if (name == null) {
             name = "noname";
         }
         String ext = "";
-        int idx = documentFilePath.lastIndexOf(".");
+        int idx = path.lastIndexOf(".");
         if (idx != -1) {
-            ext = documentFilePath.substring(idx + 1);
+            ext = path.substring(idx + 1);
         }
-        TLRPC.TL_document document = new TLRPC.TL_document();
-        document.id = 0;
-        document.user_id = UserConfig.clientUserId;
-        document.date = ConnectionsManager.getInstance().getCurrentTime();
-        document.file_name = name;
-        document.size = (int)f.length();
-        document.dc_id = 0;
-        document.path = documentFilePath;
-        if (ext.length() != 0) {
-            MimeTypeMap myMime = MimeTypeMap.getSingleton();
-            String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-            if (mimeType != null) {
-                document.mime_type = mimeType;
+        if (originalPath != null) {
+            originalPath += "" + f.length();
+        }
+
+        TLRPC.TL_document document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(originalPath, currentEncryptedChat == null ? 1 : 4);
+        if (document == null && !path.equals(originalPath)) {
+            document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(path + f.length(), currentEncryptedChat == null ? 1 : 4);
+        }
+        if (document == null) {
+            document = new TLRPC.TL_document();
+            document.id = 0;
+            document.user_id = UserConfig.getClientUserId();
+            document.date = ConnectionsManager.getInstance().getCurrentTime();
+            document.file_name = name;
+            document.size = (int)f.length();
+            document.dc_id = 0;
+            if (ext.length() != 0) {
+                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                if (mimeType != null) {
+                    document.mime_type = mimeType;
+                } else {
+                    document.mime_type = "application/octet-stream";
+                }
             } else {
                 document.mime_type = "application/octet-stream";
             }
-        } else {
-            document.mime_type = "application/octet-stream";
-        }
-        if (document.mime_type.equals("image/gif")) {
-            try {
-                Bitmap bitmap = FileLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
-                if (bitmap != null) {
-                    document.thumb = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 55, currentEncryptedChat != null);
-                    document.thumb.type = "s";
+            if (document.mime_type.equals("image/gif")) {
+                try {
+                    Bitmap bitmap = FileLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
+                    if (bitmap != null) {
+                        document.thumb = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 55, currentEncryptedChat != null);
+                        document.thumb.type = "s";
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
+            }
+            if (document.thumb == null) {
+                document.thumb = new TLRPC.TL_photoSizeEmpty();
+                document.thumb.type = "s";
             }
         }
-        if (document.thumb == null) {
-            document.thumb = new TLRPC.TL_photoSizeEmpty();
-            document.thumb.type = "s";
-        }
-        MessagesController.getInstance().sendMessage(document, dialog_id);
+        document.path = path;
+
+        final TLRPC.TL_document documentFinal = document;
+        final String originalPathFinal = originalPath;
+        Utilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                MessagesController.getInstance().sendMessage(documentFinal, originalPathFinal, dialog_id);
+                if (chatListView != null) {
+                    chatListView.setSelection(messages.size() + 1);
+                }
+                if (paused) {
+                    scrollToTopOnResume = true;
+                }
+            }
+        });
     }
 
-    public void processSendingVideo(final String videoPath) {
-        if (videoPath == null || videoPath.length() == 0) {
+    public void processSendingDocument(String path, String originalPath) {
+        if (path == null || originalPath == null) {
             return;
         }
-        Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
-        TLRPC.PhotoSize size = FileLoader.scaleAndSaveImage(thumb, 90, 90, 55, currentEncryptedChat != null);
-        if (size == null) {
+        ArrayList<String> paths = new ArrayList<String>();
+        ArrayList<String> originalPaths = new ArrayList<String>();
+        paths.add(path);
+        originalPaths.add(originalPath);
+        processSendingDocuments(paths, originalPaths);
+    }
+
+    public void processSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths) {
+        if (paths == null && originalPaths == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
             return;
         }
-        size.type = "s";
-        TLRPC.TL_video video = new TLRPC.TL_video();
-        video.thumb = size;
-        video.caption = "";
-        video.id = 0;
-        video.path = videoPath;
-        File temp = new File(videoPath);
-        if (temp != null && temp.exists()) {
-            video.size = (int)temp.length();
-        }
-        UserConfig.lastLocalId--;
-        UserConfig.saveConfig(false);
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                for (int a = 0; a < paths.size(); a++) {
+                    processSendingDocumentInternal(paths.get(a), originalPaths.get(a));
+                }
+            }
+        }).start();
+    }
 
-        MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
-        if (mp == null) {
+    public void processSendingVideo(final String videoPath) {
+        if (videoPath == null || videoPath.length() == 0) {
             return;
         }
-        video.duration = (int)Math.ceil(mp.getDuration() / 1000.0f);
-        video.w = mp.getVideoWidth();
-        video.h = mp.getVideoHeight();
-        mp.release();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                TLRPC.TL_video video = (TLRPC.TL_video)MessagesStorage.getInstance().getSentFile(videoPath, currentEncryptedChat == null ? 2 : 5);
+                if (video == null) {
+                    Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
+                    TLRPC.PhotoSize size = FileLoader.scaleAndSaveImage(thumb, 90, 90, 55, currentEncryptedChat != null);
+                    if (size == null) {
+                        return;
+                    }
+                    size.type = "s";
+                    video = new TLRPC.TL_video();
+                    video.thumb = size;
+                    video.caption = "";
+                    video.id = 0;
+                    File temp = new File(videoPath);
+                    if (temp != null && temp.exists()) {
+                        video.size = (int) temp.length();
+                    }
+                    UserConfig.lastLocalId--;
+                    UserConfig.saveConfig(false);
 
-        MediaStore.Video.Media media = new MediaStore.Video.Media();
-        MessagesController.getInstance().sendMessage(video, dialog_id);
-        if (chatListView != null) {
-            chatListView.setSelection(messages.size() + 1);
-        }
-        scrollToTopOnResume = true;
+                    MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
+                    if (mp == null) {
+                        return;
+                    }
+                    video.duration = (int) Math.ceil(mp.getDuration() / 1000.0f);
+                    video.w = mp.getVideoWidth();
+                    video.h = mp.getVideoHeight();
+                    mp.release();
+                }
+                video.path = videoPath;
+
+                final TLRPC.TL_video videoFinal = video;
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        MessagesController.getInstance().sendMessage(videoFinal, videoPath, dialog_id);
+                        if (chatListView != null) {
+                            chatListView.setSelection(messages.size() + 1);
+                        }
+                        if (paused) {
+                            scrollToTopOnResume = true;
+                        }
+                    }
+                });
+            }
+        }).start();
     }
 
     private void removeUnreadPlane(boolean reload) {
@@ -2285,9 +2423,7 @@ public void run() {
                         dayArr.remove(obj);
                         if (dayArr.isEmpty()) {
                             messagesByDays.remove(obj.dateKey);
-                            if (index != -1) {
-                                messages.remove(index);
-                            }
+                            messages.remove(index);
                         }
                         updated = true;
                     }
@@ -2514,10 +2650,11 @@ private void updateContactStatus() {
             }
             if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
                     || currentUser.id / 1000 == 333
+                    || currentUser.id / 1000 == 777
                     || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
                     || (currentUser.phone != null && currentUser.phone.length() != 0 &&
                     ContactsController.getInstance().contactsDict.get(currentUser.id) != null &&
-                    (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().loadingContacts))) {
+                    (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts()))) {
                 topPanel.setVisibility(View.GONE);
             } else {
                 topPanel.setVisibility(View.VISIBLE);
@@ -2560,6 +2697,9 @@ public void onClick(View v) {
                         topPanel.setOnClickListener(new View.OnClickListener() {
                             @Override
                             public void onClick(View v) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
                                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                 builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -2568,7 +2708,7 @@ public void onClick(View v) {
                                     public void onClick(DialogInterface dialogInterface, int i) {
                                         MessagesController.getInstance().hidenAddToContacts.put(currentUser.id, currentUser);
                                         topPanel.setVisibility(View.GONE);
-                                        MessagesController.getInstance().sendMessage(UserConfig.currentUser, dialog_id);
+                                        MessagesController.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id);
                                         chatListView.post(new Runnable() {
                                             @Override
                                             public void run() {
@@ -2588,6 +2728,9 @@ public void run() {
     }
 
     private void createEmojiPopup() {
+        if (getParentActivity() == null) {
+            return;
+        }
         emojiView = new EmojiView(getParentActivity());
         emojiView.setListener(new EmojiView.Listener() {
             public void onBackspace() {
@@ -2682,16 +2825,13 @@ public void onResume() {
             scrollToTopUnReadOnResume = false;
             scrollToTopOnResume = false;
         }
-        if (emojiView != null) {
-            emojiView.loadRecents();
-        }
         paused = false;
         if (readWhenResume && !messages.isEmpty()) {
             readWhenResume = false;
             MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true);
         }
 
-        fixLayout();
+        fixLayout(true);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
         if (lastMessageText != null) {
@@ -2809,7 +2949,8 @@ private void updateInformationForScreenshotDetector() {
         MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
     }
 
-    private void fixLayout() {
+    private void fixLayout(final boolean resume) {
+        final int lastPos = chatListView.getLastVisiblePosition();
         ViewTreeObserver obs = chatListView.getViewTreeObserver();
         obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
             @Override
@@ -2821,7 +2962,7 @@ public boolean onPreDraw() {
                     return true;
                 }
                 int height = Utilities.dp(48);
-                if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                if (!Utilities.isTablet(getParentActivity()) && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                     height = Utilities.dp(40);
                     selectedMessagesCountTextView.setTextSize(16);
                 } else {
@@ -2833,6 +2974,14 @@ public boolean onPreDraw() {
                     params.height = height;
                     avatarImageView.setLayoutParams(params);
                 }
+                if (!resume && lastPos >= messages.size() - 1) {
+                    chatListView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                        }
+                    });
+                }
                 return false;
             }
         });
@@ -2840,7 +2989,7 @@ public boolean onPreDraw() {
 
     @Override
     public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        fixLayout();
+        fixLayout(false);
     }
 
     private View getRowParentView(View v) {
@@ -2866,10 +3015,6 @@ public void createMenu(View v, boolean single) {
             return;
         }
 
-        selectedObject = null;
-        forwaringMessage = null;
-        selectedMessagesCanCopyIds.clear();
-        selectedMessagesIds.clear();
         View parentView = getRowParentView(v);
         if (parentView == null) {
             return;
@@ -2882,9 +3027,18 @@ public void createMenu(View v, boolean single) {
             message = holder.message;
         }
         final int type = getMessageType(message);
+
+        selectedObject = null;
+        forwaringMessage = null;
+        selectedMessagesCanCopyIds.clear();
+        selectedMessagesIds.clear();
+
         if (single || type < 2) {
             if (type >= 0) {
                 selectedObject = message;
+                if (getParentActivity() == null) {
+                    return;
+                }
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
                 CharSequence[] items = null;
@@ -2924,6 +3078,9 @@ public void createMenu(View v, boolean single) {
                 builder.setItems(items, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
+                        if (selectedObject == null) {
+                            return;
+                        }
                         if (type == 0) {
                             if (i == 0) {
                                 processSelectedOption(0);
@@ -3020,6 +3177,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                     if (LocaleController.getInstance().applyLanguageFile(locFile)) {
                                         presentFragment(new LanguageSelectActivity());
                                     } else {
+                                        if (getParentActivity() == null) {
+                                            return;
+                                        }
                                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                         builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
@@ -3059,7 +3219,7 @@ private void processSelectedOption(int option) {
                         MessagesController.getInstance().sendMessage(selectedObject, dialog_id);
                     } else {
                         TLRPC.TL_photo photo = (TLRPC.TL_photo)selectedObject.messageOwner.media.photo;
-                        MessagesController.getInstance().sendMessage(photo, dialog_id);
+                        MessagesController.getInstance().sendMessage(photo, selectedObject.messageOwner.attachPath, dialog_id);
                     }
                 } else if (selectedObject.type == 3) {
                     if (selectedObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
@@ -3067,7 +3227,7 @@ private void processSelectedOption(int option) {
                     } else {
                         TLRPC.TL_video video = (TLRPC.TL_video)selectedObject.messageOwner.media.video;
                         video.path = selectedObject.messageOwner.attachPath;
-                        MessagesController.getInstance().sendMessage(video, dialog_id);
+                        MessagesController.getInstance().sendMessage(video, video.path, dialog_id);
                     }
                 } else if (selectedObject.type == 12 || selectedObject.type == 13) {
                     TLRPC.User user = MessagesController.getInstance().users.get(selectedObject.messageOwner.media.user_id);
@@ -3075,7 +3235,7 @@ private void processSelectedOption(int option) {
                 } else if (selectedObject.type == 8 || selectedObject.type == 9) {
                     TLRPC.TL_document document = (TLRPC.TL_document)selectedObject.messageOwner.media.document;
                     document.path = selectedObject.messageOwner.attachPath;
-                    MessagesController.getInstance().sendMessage(document, dialog_id);
+                    MessagesController.getInstance().sendMessage(document, document.path, dialog_id);
                 } else if (selectedObject.type == 2) {
                     TLRPC.TL_audio audio = (TLRPC.TL_audio)selectedObject.messageOwner.media.audio;
                     audio.path = selectedObject.messageOwner.attachPath;
@@ -3133,43 +3293,20 @@ private void processSelectedOption(int option) {
     }
 
     @Override
-    public void didSelectFile(DocumentSelectActivity activity, String path, String name, String ext, long size) {
+    public void didSelectFile(DocumentSelectActivity activity, String path) {
         activity.finishFragment();
-        TLRPC.TL_document document = new TLRPC.TL_document();
-        document.id = 0;
-        document.user_id = UserConfig.clientUserId;
-        document.date = ConnectionsManager.getInstance().getCurrentTime();
-        document.file_name = name;
-        document.size = (int)size;
-        document.dc_id = 0;
-        document.path = path;
-        if (ext.length() != 0) {
-            MimeTypeMap myMime = MimeTypeMap.getSingleton();
-            String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-            if (mimeType != null) {
-                document.mime_type = mimeType;
-            } else {
-                document.mime_type = "application/octet-stream";
-            }
-        } else {
-            document.mime_type = "application/octet-stream";
-        }
-        if (document.mime_type.equals("image/gif")) {
-            try {
-                Bitmap bitmap = FileLoader.loadBitmap(path, null, 90, 90);
-                if (bitmap != null) {
-                    document.thumb = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 80, currentEncryptedChat != null);
-                    document.thumb.type = "s";
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        if (document.thumb == null) {
-            document.thumb = new TLRPC.TL_photoSizeEmpty();
-            document.thumb.type = "s";
+        processSendingDocument(path, path);
+    }
+
+    @Override
+    public void startDocumentSelectActivity() {
+        try {
+            Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+            photoPickerIntent.setType("*/*");
+            getParentActivity().startActivityForResult(photoPickerIntent, 21);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
         }
-        MessagesController.getInstance().sendMessage(document, dialog_id);
     }
 
     @Override
@@ -3251,9 +3388,12 @@ public boolean onBackPressed() {
 
     public boolean isGoogleMapsInstalled() {
         try {
-            ApplicationInfo info = ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0 );
+            ApplicationInfo info = ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
             return true;
         } catch(PackageManager.NameNotFoundException e) {
+            if (getParentActivity() == null) {
+                return false;
+            }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setMessage("Install Google Maps?");
             builder.setCancelable(true);
@@ -3374,6 +3514,9 @@ private void updateRowBackground(ChatListRowHolderEx holder, boolean disableSele
     }
 
     private void alertUserOpenError(MessageObject message) {
+        if (getParentActivity() == null) {
+            return;
+        }
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
         builder.setPositiveButton(R.string.OK, null);
@@ -3451,7 +3594,7 @@ public void sendButtonPressed(int index) { }
     @Override
     public int getSelectedCount() { return 0; }
 
-    private class ChatAdapter extends BaseAdapter {
+    private class ChatAdapter extends BaseFragmentAdapter {
 
         private Context mContext;
 
@@ -3573,7 +3716,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 ((ChatBaseCell)view).delegate = new ChatBaseCell.ChatBaseCellDelegate() {
                     @Override
                     public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
-                        if (user != null && user.id != UserConfig.clientUserId) {
+                        if (user != null && user.id != UserConfig.getClientUserId()) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", user.id);
                             presentFragment(new UserProfileActivity(args));
@@ -3756,10 +3899,14 @@ public void update() {
                         photoImage.setImage(message.messageOwner.action.newUserPhoto.photo_small, "50_50", Utilities.getUserAvatarForId(currentUser.id));
                     } else {
                         PhotoObject photo = PhotoObject.getClosestImageWithSize(message.photoThumbs, Utilities.dp(64), Utilities.dp(64));
-                        if (photo.image != null) {
-                            photoImage.setImageBitmap(photo.image);
+                        if (photo != null) {
+                            if (photo.image != null) {
+                                photoImage.setImageBitmap(photo.image);
+                            } else {
+                                photoImage.setImage(photo.photoOwner.location, "50_50", Utilities.getGroupAvatarForId(currentChat.id));
+                            }
                         } else {
-                            photoImage.setImage(photo.photoOwner.location, "50_50", Utilities.getGroupAvatarForId(currentChat.id));
+                            photoImage.setImageResource(Utilities.getGroupAvatarForId(currentChat.id));
                         }
                     }
                     photoImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(message), false);
@@ -3784,7 +3931,7 @@ public void update() {
                     }
                     int placeHolderId = Utilities.getUserAvatarForId(contactUser.id);
                     contactAvatar.setImage(photo, "50_50", placeHolderId);
-                    if (contactUser.id != UserConfig.clientUserId && ContactsController.getInstance().contactsDict.get(contactUser.id) == null) {
+                    if (contactUser.id != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(contactUser.id) == null) {
                         addContactView.setVisibility(View.VISIBLE);
                     } else {
                         addContactView.setVisibility(View.GONE);
@@ -3870,14 +4017,17 @@ public void update() {
                             if (actionView != null) {
                                 actionView.setVisibility(View.VISIBLE);
                             }
-                            Float progress = FileLoader.getInstance().fileProgresses.get(message.messageOwner.attachPath);
+                            Float progress = null;
+                            if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                                progress = FileLoader.getInstance().fileProgresses.get(message.messageOwner.attachPath);
+                                progressByTag.put((Integer)actionProgress.getTag(), message.messageOwner.attachPath);
+                                progressBarMap.put(message.messageOwner.attachPath, actionProgress);
+                            }
                             if (progress != null) {
                                 actionProgress.setProgress((int)(progress * 100));
                             } else {
                                 actionProgress.setProgress(0);
                             }
-                            progressByTag.put((Integer)actionProgress.getTag(), message.messageOwner.attachPath);
-                            progressBarMap.put(message.messageOwner.attachPath, actionProgress);
                         }
                         if (actionAttachButton != null) {
                             actionAttachButton.setVisibility(View.GONE);
@@ -4090,7 +4240,7 @@ public void onClick(View view) {
                                 processRowSelect(view);
                                 return;
                             }
-                            if (message.messageOwner.media.user_id != UserConfig.clientUserId) {
+                            if (message.messageOwner.media.user_id != UserConfig.getClientUserId()) {
                                 TLRPC.User user = null;
                                 if (message.messageOwner.media.user_id != 0) {
                                     user = MessagesController.getInstance().users.get(message.messageOwner.media.user_id);
@@ -4103,6 +4253,9 @@ public void onClick(View view) {
                                     if (message.messageOwner.media.phone_number == null || message.messageOwner.media.phone_number.length() == 0) {
                                         return;
                                     }
+                                    if (getParentActivity() == null) {
+                                        return;
+                                    }
                                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                     builder.setItems(new CharSequence[] {LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
                                                 @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index e3d3faf0e..21dff9963 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -8,29 +8,22 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Typeface;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
 import android.os.Bundle;
-import android.provider.Settings;
 import android.text.Html;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ListView;
 import android.widget.TextView;
 
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
@@ -40,6 +33,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
@@ -51,6 +45,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.concurrent.Semaphore;
 
 public class ChatProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate, PhotoViewer.PhotoViewerProvider {
     private ListView listView;
@@ -63,15 +58,15 @@
     private int totalMediaCount = -1;
     private int onlineCount = -1;
     private ArrayList<Integer> sortedUsers = new ArrayList<Integer>();
+    private TLRPC.Chat currentChat;
 
     private int avatarRow;
     private int settingsSectionRow;
     private int settingsNotificationsRow;
-    private int settingsVibrateRow;
-    private int settingsSoundRow;
     private int sharedMediaSectionRow;
     private int sharedMediaRow;
     private int membersSectionRow;
+    private int membersEndRow;
     private int addMemberRow;
     private int leaveGroupRow;
     private int rowCount = 0;
@@ -85,12 +80,35 @@ public ChatProfileActivity(Bundle args) {
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
+
+        chat_id = getArguments().getInt("chat_id", 0);
+        currentChat = MessagesController.getInstance().chats.get(chat_id);
+        if (currentChat == null) {
+            final Semaphore semaphore = new Semaphore(0);
+            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    currentChat = MessagesStorage.getInstance().getChat(chat_id);
+                    semaphore.release();
+                }
+            });
+            try {
+                semaphore.acquire();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (currentChat != null) {
+                MessagesController.getInstance().chats.put(currentChat.id, currentChat);
+            } else {
+                return false;
+            }
+        }
+
         NotificationCenter.getInstance().addObserver(this, MessagesController.updateInterfaces);
         NotificationCenter.getInstance().addObserver(this, MessagesController.chatInfoDidLoaded);
         NotificationCenter.getInstance().addObserver(this, MessagesController.mediaCountDidLoaded);
         NotificationCenter.getInstance().addObserver(this, MessagesController.closeChats);
 
-        chat_id = getArguments().getInt("chat_id", 0);
         updateOnlineCount();
         MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
         avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
@@ -113,19 +131,19 @@ private void updateRowsIds() {
         avatarRow = rowCount++;
         settingsSectionRow = rowCount++;
         settingsNotificationsRow = rowCount++;
-        settingsVibrateRow = rowCount++;
-        settingsSoundRow = rowCount++;
         sharedMediaSectionRow = rowCount++;
         sharedMediaRow = rowCount++;
         if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
             membersSectionRow = rowCount++;
             rowCount += info.participants.size();
+            membersEndRow = rowCount;
             if (info.participants.size() < 200) {
                 addMemberRow = rowCount++;
             } else {
                 addMemberRow = -1;
             }
         } else {
+            membersEndRow = -1;
             addMemberRow = -1;
             membersSectionRow = -1;
         }
@@ -171,12 +189,16 @@ public void onItemClick(int id) {
             listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                 @Override
                 public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i > membersSectionRow && i < addMemberRow) {
+                    if (i > membersSectionRow && i < membersEndRow) {
+                        if (getParentActivity() == null) {
+                            return false;
+                        }
+
                         TLRPC.TL_chatParticipant user = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
-                        if (user.user_id == UserConfig.clientUserId) {
+                        if (user.user_id == UserConfig.getClientUserId()) {
                             return false;
                         }
-                        if (info.admin_id != UserConfig.clientUserId && user.inviter_id != UserConfig.clientUserId) {
+                        if (info.admin_id != UserConfig.getClientUserId() && user.inviter_id != UserConfig.getClientUserId()) {
                             return false;
                         }
                         selectedUser = user;
@@ -203,74 +225,24 @@ public void onClick(DialogInterface dialogInterface, int i) {
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == settingsSoundRow) {
-                        try {
-                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            Uri currentSound = null;
-
-                            String defaultPath = null;
-                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                            if (defaultUri != null) {
-                                defaultPath = defaultUri.getPath();
-                            }
-
-                            String path = preferences.getString("sound_chat_path_" + chat_id, defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                            getParentActivity().startActivityForResult(tmpIntent, 3);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (i == sharedMediaRow) {
+                    if (i == sharedMediaRow) {
                         Bundle args = new Bundle();
                         args.putLong("dialog_id", -chat_id);
                         presentFragment(new MediaActivity(args));
                     } else if (i == addMemberRow) {
                         openAddMenu();
-                    } else if (i > membersSectionRow && i < addMemberRow) {
+                    } else if (i > membersSectionRow && i < membersEndRow) {
                         int user_id = info.participants.get(sortedUsers.get(i - membersSectionRow - 1)).user_id;
-                        if (user_id == UserConfig.clientUserId) {
+                        if (user_id == UserConfig.getClientUserId()) {
                             return;
                         }
                         Bundle args = new Bundle();
                         args.putInt("user_id", user_id);
                         presentFragment(new UserProfileActivity(args));
-                    } else if (i == settingsVibrateRow || i == settingsNotificationsRow) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Default", R.string.Default),
-                                LocaleController.getString("Enabled", R.string.Enabled),
-                                LocaleController.getString("Disabled", R.string.Disabled)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == settingsVibrateRow) {
-                                    editor.putInt("vibrate_" + (-chat_id), which);
-                                } else if (i == settingsNotificationsRow) {
-                                    editor.putInt("notify2_" + (-chat_id), which);
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", -chat_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
                     }
                 }
             });
@@ -288,41 +260,6 @@ public void didSelectContact(TLRPC.User user) {
         MessagesController.getInstance().addUserToChat(chat_id, user, info);
     }
 
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        avatarUpdater.onActivityResult(requestCode, resultCode, data);
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == 3) {
-                Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                String name = null;
-                if (ringtone != null) {
-                    Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
-                    if (rng != null) {
-                        if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                            name = LocaleController.getString("Default", R.string.Default);
-                        } else {
-                            name = rng.getTitle(getParentActivity());
-                        }
-                        rng.stop();
-                    }
-                }
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-
-                if (name != null && ringtone != null) {
-                    editor.putString("sound_chat_" + chat_id, name);
-                    editor.putString("sound_chat_path_" + chat_id, ringtone.toString());
-                } else {
-                    editor.putString("sound_chat_" + chat_id, "NoSound");
-                    editor.putString("sound_chat_path_" + chat_id, "NoSound");
-                }
-                editor.commit();
-                listView.invalidateViews();
-            }
-        }
-    }
-
     @Override
     public void saveSelfArgs(Bundle args) {
         if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
@@ -458,7 +395,7 @@ private void updateOnlineCount() {
         int i = 0;
         for (TLRPC.TL_chatParticipant participant : info.participants) {
             TLRPC.User user = MessagesController.getInstance().users.get(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.clientUserId) && user.status.expires > 10000) {
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
                 onlineCount++;
             }
             sortedUsers.add(i);
@@ -473,14 +410,14 @@ public int compare(Integer lhs, Integer rhs) {
                 Integer status1 = 0;
                 Integer status2 = 0;
                 if (user1 != null && user1.status != null) {
-                    if (user1.id == UserConfig.clientUserId) {
+                    if (user1.id == UserConfig.getClientUserId()) {
                         status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
                     } else {
                         status1 = user1.status.expires;
                     }
                 }
                 if (user2 != null && user2.status != null) {
-                    if (user2.id == UserConfig.clientUserId) {
+                    if (user2.id == UserConfig.getClientUserId()) {
                         status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
                     } else {
                         status2 = user2.status.expires;
@@ -535,13 +472,13 @@ private void kickUser(TLRPC.TL_chatParticipant user) {
         } else {
             NotificationCenter.getInstance().removeObserver(this, MessagesController.closeChats);
             NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
-            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().users.get(UserConfig.clientUserId), info);
+            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().users.get(UserConfig.getClientUserId()), info);
             MessagesController.getInstance().deleteDialog(-chat_id, 0, false);
             finishFragment();
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -555,7 +492,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == settingsNotificationsRow || i == settingsSoundRow || i == sharedMediaRow || i > membersSectionRow && i <= addMemberRow || i == settingsVibrateRow;
+            return i == settingsNotificationsRow || i == sharedMediaRow || i == addMemberRow || i > membersSectionRow && i < membersEndRow;
         }
 
         @Override
@@ -604,6 +541,9 @@ public void onClick(View view) {
                     button2.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             CharSequence[] items;
                             int type;
@@ -700,30 +640,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         detailTextView.setText(String.format("%d", totalMediaCount));
                     }
                     divider.setVisibility(View.INVISIBLE);
-                } else if (i == settingsVibrateRow) {
-                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    int value = preferences.getInt("vibrate_" + (-chat_id), 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
-                } else if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    int value = preferences.getInt("notify2_" + (-chat_id), 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
                 }
             } else if (type == 3) {
                 TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
@@ -736,12 +652,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
 
                 ((ChatOrUserCell)view).setData(user, null, null, null, null);
-
-//                if (info.admin_id != UserConfig.clientUserId && part.inviter_id != UserConfig.clientUserId && part.user_id != UserConfig.clientUserId) {
-//
-//                } else {
-//
-//                }
             } else if (type == 4) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
@@ -758,6 +668,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     textView.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -775,20 +688,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
             } else if (type == 6) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsSoundRow) {
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String name = preferences.getString("sound_chat_" + chat_id, LocaleController.getString("Default", R.string.Default));
-                    if (name.equals("NoSound")) {
-                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        detailTextView.setText(name);
-                    }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
                     divider.setVisibility(View.INVISIBLE);
                 }
             }
@@ -801,16 +706,16 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == settingsSectionRow || i == sharedMediaSectionRow || i == membersSectionRow) {
                 return 1;
-            } else if (i == sharedMediaRow || i == settingsVibrateRow || i == settingsNotificationsRow) {
+            } else if (i == sharedMediaRow) {
                 return 2;
-            } else if (i == settingsSoundRow) {
-                return 6;
             } else if (i == addMemberRow) {
                 return 4;
             } else if (i == leaveGroupRow) {
                 return 5;
-            } else if (i > membersSectionRow && i < addMemberRow) {
+            } else if (i > membersSectionRow && i < membersEndRow) {
                 return 3;
+            } else if (i == settingsNotificationsRow) {
+                return 6;
             }
             return 0;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index 552e5f889..b0ff3c5c5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -102,6 +102,7 @@ public void onClick(View view) {
 
             onlineText = (TextView)fragmentView.findViewById(R.id.settings_online);
             avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
+            avatarImage.processDetach = false;
             phoneText = (TextView)fragmentView.findViewById(R.id.settings_name);
             Typeface typeface = Utilities.getTypeface("fonts/rmedium.ttf");
             phoneText.setTypeface(typeface);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index b3f8ee191..5d1e82f1f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -146,6 +146,7 @@ public void onSearchCollapse() {
                     searchWas = false;
                     ViewGroup group = (ViewGroup) listView.getParent();
                     listView.setAdapter(listViewAdapter);
+                    listViewAdapter.notifyDataSetChanged();
                     if (!LocaleController.isRTL) {
                         listView.setPadding(Utilities.dp(16), listView.getPaddingTop(), Utilities.dp(30), listView.getPaddingBottom());
                     } else {
@@ -171,6 +172,7 @@ public void onTextChanged(EditText editText) {
                         if (listView != null) {
                             listView.setPadding(Utilities.dp(16), listView.getPaddingTop(), Utilities.dp(16), listView.getPaddingBottom());
                             listView.setAdapter(searchListViewAdapter);
+                            searchListViewAdapter.notifyDataSetChanged();
                             if(android.os.Build.VERSION.SDK_INT >= 11) {
                                 listView.setFastScrollAlwaysVisible(false);
                             }
@@ -205,7 +207,7 @@ public void onTextChanged(EditText editText) {
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     if (searching && searchWas) {
                         TLRPC.User user = searchListViewAdapter.getItem(i);
-                        if (user == null || user.id == UserConfig.clientUserId) {
+                        if (user == null || user.id == UserConfig.getClientUserId()) {
                             return;
                         }
                         if (returnAsResult) {
@@ -263,7 +265,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         }
 
                         if (user != null) {
-                            if (user.id == UserConfig.clientUserId) {
+                            if (user.id == UserConfig.getClientUserId()) {
                                 return;
                             }
                             if (returnAsResult) {
@@ -288,7 +290,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             if (!contact.phones.isEmpty()) {
                                 usePhone = contact.phones.get(0);
                             }
-                            if (usePhone == null) {
+                            if (usePhone == null || getParentActivity() == null) {
                                 return;
                             }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -337,6 +339,9 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
 
     private void didSelectResult(final TLRPC.User user, boolean useAlert) {
         if (useAlert && selectAlertString != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
             builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 405a64e4a..86c3d7eb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -22,6 +22,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -85,7 +86,7 @@ public boolean onFragmentCreate() {
                 }
                 arr.add(c);
             }
-            reader.close();//TODO
+            reader.close();
             stream.close();
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -280,7 +281,7 @@ public void run() {
     }
 
     private void processSearch(final String query) {
-        Utilities.globalQueue.postRunnable(new Runnable() {
+        Utilities.searchQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
 
@@ -321,7 +322,7 @@ public void run() {
         });
     }
 
-    private class SearchAdapter extends BaseAdapter {
+    private class SearchAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public SearchAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index b59867c12..a869af45f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -20,7 +20,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -28,7 +27,10 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.Views.ActionBar.ActionBarMenu;
+import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 
@@ -43,7 +45,8 @@
 public class DocumentSelectActivity extends BaseFragment {
 
     public static abstract interface DocumentSelectActivityDelegate {
-        public void didSelectFile(DocumentSelectActivity activity, String path, String name, String ext, long size);
+        public void didSelectFile(DocumentSelectActivity activity, String path);
+        public void startDocumentSelectActivity();
     }
 
     private ListView listView;
@@ -134,9 +137,16 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
                 public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
+                    } else if (id == 1) {
+                        if (delegate != null) {
+                            delegate.startDocumentSelectActivity();
+                        }
+                        finishFragment(false);
                     }
                 }
             });
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenuItem item = menu.addItem(1, R.drawable.ic_ab_other);
 
             fragmentView = inflater.inflate(R.layout.document_select_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
@@ -176,7 +186,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             return;
                         }
                         if (delegate != null) {
-                            delegate.didSelectFile(DocumentSelectActivity.this, file.getAbsolutePath(), item.title, item.ext, file.length());
+                            delegate.didSelectFile(DocumentSelectActivity.this, file.getAbsolutePath());
                         }
                     }
                 }
@@ -290,7 +300,10 @@ public int compare(File lhs, File rhs) {
         return true;
     }
 
-    private void showErrorBox(String error){
+    private void showErrorBox(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
         new AlertDialog.Builder(getParentActivity())
                 .setTitle(LocaleController.getString("AppName", R.string.AppName))
                 .setMessage(error)
@@ -374,7 +387,7 @@ private String getRootSubtitle(String path){
         return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, Utilities.formatFileSize(free), Utilities.formatFileSize(total));
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 8e3b54196..1192082d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -382,7 +382,7 @@ private void processSearch(final String query) {
             public void run() {
                 final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
                 contactsCopy.addAll(ContactsController.getInstance().contacts);
-                Utilities.globalQueue.postRunnable(new Runnable() {
+                Utilities.searchQueue.postRunnable(new Runnable() {
                     @Override
                     public void run() {
                         if (query.length() == 0) {
@@ -397,7 +397,7 @@ public void run() {
                         for (TLRPC.TL_contact contact : contactsCopy) {
                             TLRPC.User user = MessagesController.getInstance().users.get(contact.user_id);
                             if (user.first_name.toLowerCase().startsWith(q) || user.last_name.toLowerCase().startsWith(q)) {
-                                if (user.id == UserConfig.clientUserId) {
+                                if (user.id == UserConfig.getClientUserId()) {
                                     continue;
                                 }
                                 resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index d5386df27..da86a8149 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -176,7 +176,9 @@ public void onClick(DialogInterface dialog, int which) {
             button2.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-
+                    if (getParentActivity() == null) {
+                        return;
+                    }
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
                     CharSequence[] items;
@@ -206,6 +208,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             });
 
             avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
+            avatarImage.setImageResource(R.drawable.group_blue);
 
             nameTextView = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
             nameTextView.setHint(LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
@@ -302,7 +305,7 @@ public void run() {
                     }
                     Bundle args2 = new Bundle();
                     args2.putInt("chat_id", (Integer)args[0]);
-                    presentFragment(new ChatActivity(args2));
+                    presentFragment(new ChatActivity(args2), true);
                 }
             });
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index b8fa101be..8c7d563a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -10,6 +10,7 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.database.DataSetObserver;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.support.v4.view.PagerAdapter;
@@ -283,5 +284,12 @@ public Parcelable saveState() {
         @Override
         public void startUpdate(View arg0) {
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index ffa06d574..559613897 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -16,7 +16,6 @@
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -25,6 +24,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -35,11 +35,11 @@
 import java.util.TimerTask;
 
 public class LanguageSelectActivity extends BaseFragment {
-    private BaseAdapter listAdapter;
+    private BaseFragmentAdapter listAdapter;
     private ListView listView;
     private boolean searchWas;
     private boolean searching;
-    private BaseAdapter searchListViewAdapter;
+    private BaseFragmentAdapter searchListViewAdapter;
     private TextView emptyTextView;
 
     private Timer searchTimer;
@@ -143,7 +143,7 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                             localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
                         }
                     }
-                    if (localeInfo == null || localeInfo.pathToFile == null) {
+                    if (localeInfo == null || localeInfo.pathToFile == null || getParentActivity() == null) {
                         return false;
                     }
                     final LocaleController.LocaleInfo finalLocaleInfo = localeInfo;
@@ -232,7 +232,7 @@ public void run() {
     }
 
     private void processSearch(final String query) {
-        Utilities.globalQueue.postRunnable(new Runnable() {
+        Utilities.searchQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
 
@@ -265,7 +265,7 @@ public void run() {
         });
     }
 
-    private class SearchAdapter extends BaseAdapter {
+    private class SearchAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public SearchAdapter(Context context) {
@@ -341,7 +341,7 @@ public boolean isEmpty() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index c876df8cf..23de06c11 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -30,7 +30,6 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
@@ -51,12 +50,11 @@
 public class LaunchActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
     private boolean finished = false;
     private NotificationView notificationView;
-    private Uri photoPath = null;
     private String videoPath = null;
     private String sendingText = null;
-    private String documentPath = null;
-    private ArrayList<Uri> imagesPathArray = null;
-    private ArrayList<String> documentsPathArray = null;
+    private ArrayList<Uri> photoPathsArray = null;
+    private ArrayList<String> documentsPathsArray = null;
+    private ArrayList<String> documentsOriginalPathsArray = null;
     private ArrayList<TLRPC.User> contactsToSend = null;
     private int currentConnectionState;
 
@@ -64,7 +62,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         ApplicationLoader.postInitApplication();
 
-        if (!UserConfig.clientActivated) {
+        if (!UserConfig.isClientActivated()) {
             Intent intent = getIntent();
             if (intent != null && intent.getAction() != null && (Intent.ACTION_SEND.equals(intent.getAction()) || intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE))) {
                 super.onCreateFinish(savedInstanceState);
@@ -101,7 +99,7 @@ protected void onCreate(Bundle savedInstanceState) {
         NotificationCenter.getInstance().addObserver(this, 703);
 
         if (fragmentsStack.isEmpty()) {
-            if (!UserConfig.clientActivated) {
+            if (!UserConfig.isClientActivated()) {
                 addFragmentToStack(new LoginActivity());
             } else {
                 addFragmentToStack(new MessagesActivity(null));
@@ -162,15 +160,14 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
         Integer push_enc_id = 0;
         Integer open_settings = 0;
 
-        photoPath = null;
+        photoPathsArray = null;
         videoPath = null;
         sendingText = null;
-        documentPath = null;
-        imagesPathArray = null;
-        documentsPathArray = null;
+        documentsPathsArray = null;
+        documentsOriginalPathsArray = null;
+        contactsToSend = null;
 
         if ((intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
-
             if (intent != null && intent.getAction() != null && !restore) {
                 if (Intent.ACTION_SEND.equals(intent.getAction())) {
                     boolean error = false;
@@ -273,19 +270,10 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                         Uri uri = (Uri) parcelable;
                         if (uri != null && type != null && type.startsWith("image/")) {
                             String tempPath = Utilities.getPath(uri);
-                            boolean isGif = false;
-                            if (tempPath != null && tempPath.endsWith(".gif")) {
-                                isGif = true;
-                                documentPath = tempPath;
-                            } else if (tempPath == null) {
-                                isGif = MediaController.isGif(uri);
-                                if (isGif) {
-                                    documentPath = MediaController.copyDocumentToCache(uri);
-                                }
-                            }
-                            if (!isGif || documentPath == null) {
-                                photoPath = uri;
+                            if (photoPathsArray == null) {
+                                photoPathsArray = new ArrayList<Uri>();
                             }
+                            photoPathsArray.add(uri);
                         } else {
                             path = Utilities.getPath(uri);
                             if (path != null) {
@@ -295,7 +283,12 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                 if (type != null && type.startsWith("video/")) {
                                     videoPath = path;
                                 } else {
-                                    documentPath = path;
+                                    if (documentsPathsArray == null) {
+                                        documentsPathsArray = new ArrayList<String>();
+                                        documentsOriginalPathsArray = new ArrayList<String>();
+                                    }
+                                    documentsPathsArray.add(path);
+                                    documentsOriginalPathsArray.add(uri.toString());
                                 }
                             } else {
                                 error = true;
@@ -317,32 +310,10 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                         parcelable = Uri.parse(parcelable.toString());
                                     }
                                     Uri uri = (Uri) parcelable;
-                                    String tempPath = Utilities.getPath(uri);
-
-                                    boolean isGif = false;
-                                    if (tempPath != null && tempPath.endsWith(".gif")) {
-                                        isGif = true;
-                                    } else if (tempPath == null) {
-                                        isGif = MediaController.isGif(uri);
-                                        if (isGif) {
-                                            tempPath = MediaController.copyDocumentToCache(uri);
-                                        }
-                                    }
-                                    if (isGif && tempPath != null) {
-                                        if (documentsPathArray == null) {
-                                            documentsPathArray = new ArrayList<String>();
-                                        }
-                                        try {
-                                            documentsPathArray.add(tempPath);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                    } else {
-                                        if (imagesPathArray == null) {
-                                            imagesPathArray = new ArrayList<Uri>();
-                                        }
-                                        imagesPathArray.add(uri);
+                                    if (photoPathsArray == null) {
+                                        photoPathsArray = new ArrayList<Uri>();
                                     }
+                                    photoPathsArray.add(uri);
                                 }
                             } else {
                                 for (Parcelable parcelable : uris) {
@@ -350,14 +321,20 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                         parcelable = Uri.parse(parcelable.toString());
                                     }
                                     String path = Utilities.getPath((Uri) parcelable);
+                                    String originalPath = parcelable.toString();
+                                    if (originalPath == null) {
+                                        originalPath = path;
+                                    }
                                     if (path != null) {
                                         if (path.startsWith("file:")) {
                                             path = path.replace("file://", "");
                                         }
-                                        if (documentsPathArray == null) {
-                                            documentsPathArray = new ArrayList<String>();
+                                        if (documentsPathsArray == null) {
+                                            documentsPathsArray = new ArrayList<String>();
+                                            documentsOriginalPathsArray = new ArrayList<String>();
                                         }
-                                        documentsPathArray.add(path);
+                                        documentsPathsArray.add(path);
+                                        documentsOriginalPathsArray.add(originalPath);
                                     }
                                 }
                             }
@@ -417,7 +394,7 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
         }
 
         if (push_user_id != 0) {
-            if (push_user_id == UserConfig.clientUserId) {
+            if (push_user_id == UserConfig.getClientUserId()) {
                 open_settings = 1;
             } else {
                 Bundle args = new Bundle();
@@ -442,7 +419,7 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                 pushOpened = true;
             }
         }
-        if (videoPath != null || photoPath != null || sendingText != null || documentPath != null || documentsPathArray != null || imagesPathArray != null || contactsToSend != null) {
+        if (videoPath != null || photoPathsArray != null || sendingText != null || documentsPathsArray != null || contactsToSend != null) {
             NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
@@ -488,37 +465,29 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
             }
             ChatActivity fragment = new ChatActivity(args);
             presentFragment(fragment, true);
-            if (photoPath != null) {
-                fragment.processSendingPhoto(null, photoPath);
-            }
             if (videoPath != null) {
                 fragment.processSendingVideo(videoPath);
             }
             if (sendingText != null) {
                 fragment.processSendingText(sendingText);
             }
-            if (documentPath != null) {
-                fragment.processSendingDocument(documentPath);
+            if (photoPathsArray != null) {
+                fragment.processSendingPhotos(null, photoPathsArray);
             }
-            if (imagesPathArray != null) {
-                fragment.processSendingPhotos(null, imagesPathArray);
-            }
-            if (documentsPathArray != null) {
-                for (String path : documentsPathArray) {
-                    fragment.processSendingDocument(path);
-                }
+            if (documentsPathsArray != null) {
+                fragment.processSendingDocuments(documentsPathsArray, documentsOriginalPathsArray);
             }
             if (contactsToSend != null && !contactsToSend.isEmpty()) {
                 for (TLRPC.User user : contactsToSend) {
                     MessagesController.getInstance().sendMessage(user, dialog_id);
                 }
             }
-            photoPath = null;
+
+            photoPathsArray = null;
             videoPath = null;
             sendingText = null;
-            documentPath = null;
-            imagesPathArray = null;
-            documentsPathArray = null;
+            documentsPathsArray = null;
+            documentsOriginalPathsArray = null;
             contactsToSend = null;
         }
     }
@@ -535,7 +504,7 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     @Override
     protected void onPause() {
         super.onPause();
-        ApplicationLoader.lastPauseTime = System.currentTimeMillis();
+        ConnectionsManager.setAppPaused(true);
         if (notificationView != null) {
             notificationView.hide(false);
         }
@@ -559,7 +528,7 @@ protected void onResume() {
         }
         Utilities.checkForCrashes(this);
         Utilities.checkForUpdates(this);
-        ApplicationLoader.resetLastPauseTime();
+        ConnectionsManager.setAppPaused(false);
         actionBar.setBackOverlayVisible(currentConnectionState != 0);
         try {
             NotificationManager mNotificationManager = (NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
@@ -602,7 +571,7 @@ public void needLayout() {
             int rotation = manager.getDefaultDisplay().getRotation();
 
             int height = Utilities.dp(48);
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 height = Utilities.dp(40);
             }
             notificationView.applyOrientationPaddings(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90, height);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index ccc43d62e..ddaa34639 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -60,6 +60,7 @@
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
+        swipeBackEnabled = false;
         NotificationCenter.getInstance().addObserver(this, MessagesController.closeChats);
         if (messageObject != null) {
             NotificationCenter.getInstance().addObserver(this, MessagesController.updateInterfaces);
@@ -314,7 +315,11 @@ public void didReceivedNotification(int id, Object... args) {
     public void onPause() {
         super.onPause();
         if (mapView != null) {
-            mapView.onPause();
+            try {
+                mapView.onPause();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 7e1625826..d19df2b59 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -10,6 +10,7 @@
 
 import android.animation.Animator;
 import android.app.AlertDialog;
+import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Bundle;
@@ -17,6 +18,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AccelerateDecelerateInterpolator;
+import android.widget.FrameLayout;
+import android.widget.ScrollView;
 import android.widget.TextView;
 
 import org.telegram.messenger.FileLog;
@@ -34,6 +37,7 @@
 public class LoginActivity extends BaseFragment implements SlideView.SlideViewDelegate {
     private int currentViewNum = 0;
     private SlideView[] views = new SlideView[3];
+    private ProgressDialog progressDialog;
 
     private final static int done_button = 1;
 
@@ -79,6 +83,19 @@ public void onItemClick(int id) {
             views[1] = (SlideView)fragmentView.findViewById(R.id.login_page2);
             views[2] = (SlideView)fragmentView.findViewById(R.id.login_page3);
 
+            try {
+                if (views[0] == null || views[1] == null || views[2] == null) {
+                    FrameLayout parent = (FrameLayout)((ScrollView) fragmentView).getChildAt(0);
+                    for (int a = 0; a < views.length; a++) {
+                        if (views[a] == null) {
+                            views[a] = (SlideView)parent.getChildAt(a);
+                        }
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
             actionBarLayer.setTitle(views[0].getHeaderName());
 
             Bundle savedInstanceState = loadCurrentState();
@@ -205,29 +222,38 @@ public boolean onBackPressed() {
 
     @Override
     public void needShowAlert(final String text) {
-        if (text == null) {
+        if (text == null || getParentActivity() == null) {
             return;
         }
-        getParentActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                builder.setMessage(text);
-                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                showAlertDialog(builder);
-            }
-        });
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setMessage(text);
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showAlertDialog(builder);
     }
 
     @Override
     public void needShowProgress() {
-        Utilities.ShowProgressDialog(getParentActivity(), LocaleController.getString("Loading", R.string.Loading));
+        if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
+            return;
+        }
+        progressDialog = new ProgressDialog(getParentActivity());
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+        progressDialog.show();
     }
 
     @Override
     public void needHideProgress() {
-        Utilities.HideProgressDialog(getParentActivity());
+        if (progressDialog == null) {
+            return;
+        }
+        try {
+            progressDialog.dismiss();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
index 786cdcf33..6d228ad8d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
@@ -57,6 +57,7 @@
     private boolean ignoreSelection = false;
     private boolean ignoreOnTextChange = false;
     private boolean ignoreOnPhoneChange = false;
+    private boolean nextPressed = false;
 
     public LoginActivityPhoneView(Context context) {
         super(context);
@@ -319,6 +320,9 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
     @Override
     public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
         if (countryState == 1) {
             delegate.needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
             return;
@@ -345,48 +349,47 @@ public void onNextPressed() {
         final Bundle params = new Bundle();
         params.putString("phone", "+" + codeField.getText() + phoneField.getText());
         params.putString("phoneFormated", phone);
-
+        nextPressed = true;
         delegate.needShowProgress();
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
-                    params.putString("phoneHash", res.phone_code_hash);
-                    params.putInt("calltime", res.send_call_timeout * 1000);
-                    if (res.phone_registered) {
-                        params.putString("registered", "true");
-                    }
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        nextPressed = false;
+                        if (error == null) {
+                            final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
+                            params.putString("phoneHash", res.phone_code_hash);
+                            params.putInt("calltime", res.send_call_timeout * 1000);
+                            if (res.phone_registered) {
+                                params.putString("registered", "true");
+                            }
                             if (delegate != null) {
                                 delegate.setPage(1, true, params, false);
                             }
-                        }
-                    });
-                } else {
-                    if (delegate != null) {
-                        if (error.text != null) {
-                            if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                            } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                            } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                            } else if (error.text.contains("FLOOD_WAIT")) {
-                                delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                            } else {
-                                delegate.needShowAlert(error.text);
+                        } else {
+                            if (delegate != null && error.text != null) {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
                             }
                         }
+                        if (delegate != null) {
+                            delegate.needHideProgress();
+                        }
                     }
-                }
-                if (delegate != null) {
-                    delegate.needHideProgress();
-                }
+                });
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
index 1f234b4af..7515aa74d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
@@ -39,6 +39,7 @@
     private String phoneHash;
     private String phoneCode;
     private Bundle currentParams;
+    private boolean nextPressed = false;
 
     public LoginActivityRegisterView(Context context) {
         super(context);
@@ -122,32 +123,36 @@ public void setParams(Bundle params) {
 
     @Override
     public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
+        nextPressed = true;
         TLRPC.TL_auth_signUp req = new TLRPC.TL_auth_signUp();
         req.phone_code = phoneCode;
         req.phone_code_hash = phoneHash;
         req.phone_number = requestPhone;
         req.first_name = firstNameField.getText().toString();
         req.last_name = lastNameField.getText().toString();
-        delegate.needShowProgress();
+        if (delegate != null) {
+            delegate.needShowProgress();
+        }
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (delegate != null) {
-                    delegate.needHideProgress();
-                }
-                if (error == null) {
-                    final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        nextPressed = false;
+                        if (delegate != null) {
+                            delegate.needHideProgress();
+                        }
+                        if (error == null) {
+                            final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
                             TLRPC.TL_userSelf user = (TLRPC.TL_userSelf)res.user;
                             UserConfig.clearConfig();
                             MessagesStorage.getInstance().cleanUp();
                             MessagesController.getInstance().cleanUp();
-                            ConnectionsManager.getInstance().cleanUp();
-                            UserConfig.currentUser = user;
-                            UserConfig.clientActivated = true;
-                            UserConfig.clientUserId = user.id;
+                            UserConfig.setCurrentUser(user);
                             UserConfig.saveConfig(true);
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
                             users.add(user);
@@ -159,27 +164,27 @@ public void run() {
                                 delegate.needFinishActivity();
                             }
                             ConnectionsManager.getInstance().initPushConnection();
-                        }
-                    });
-                } else {
-                    if (delegate != null) {
-                        if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                            delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                        } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                            delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                        } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                            delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                        } else if (error.text.contains("FIRSTNAME_INVALID")) {
-                            delegate.needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
-                        } else if (error.text.contains("LASTNAME_INVALID")) {
-                            delegate.needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
                         } else {
-                            delegate.needShowAlert(error.text);
+                            if (delegate != null) {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
+                                } else if (error.text.contains("LASTNAME_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
+                            }
                         }
                     }
-                }
+                });
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric);
+        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
index cfee4afb3..7c80b277b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
@@ -48,10 +48,11 @@
     private Bundle currentParams;
 
     private Timer timeTimer;
-    private final Integer timerSync = 1;
+    private static final Integer timerSync = 1;
     private volatile int time = 60000;
     private double lastCurrentTime;
     private boolean waitingForSms = false;
+    private boolean nextPressed = false;
 
     public LoginActivitySmsView(Context context) {
         super(context);
@@ -129,18 +130,17 @@ public void setParams(Bundle params) {
         Utilities.showKeyboard(codeField);
         codeField.requestFocus();
 
-        try {
-            synchronized(timerSync) {
-                if (timeTimer != null) {
-                    timeTimer.cancel();
-                    timeTimer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
+        destroyTimer();
         timeText.setText(String.format("%s 1:00", LocaleController.getString("CallText", R.string.CallText)));
         lastCurrentTime = System.currentTimeMillis();
+
+        createTimer();
+    }
+
+    private void createTimer() {
+        if (timeTimer != null) {
+            return;
+        }
         timeTimer = new Timer();
         timeTimer.schedule(new TimerTask() {
             @Override
@@ -158,12 +158,7 @@ public void run() {
                             timeText.setText(String.format("%s %d:%02d", LocaleController.getString("CallText", R.string.CallText), minutes, seconds));
                         } else {
                             timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                            synchronized(timerSync) {
-                                if (timeTimer != null) {
-                                    timeTimer.cancel();
-                                    timeTimer = null;
-                                }
-                            }
+                            destroyTimer();
                             TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
                             req.phone_number = requestPhone;
                             req.phone_code_hash = phoneHash;
@@ -171,7 +166,7 @@ public void run() {
                                 @Override
                                 public void run(TLObject response, TLRPC.TL_error error) {
                                 }
-                            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
                         }
                     }
                 });
@@ -179,15 +174,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }, 0, 1000);
     }
 
-    @Override
-    public void onNextPressed() {
-        waitingForSms = false;
-        Utilities.setWaitingForSms(false);
-        NotificationCenter.getInstance().removeObserver(this, 998);
-        final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
-        req.phone_number = requestPhone;
-        req.phone_code = codeField.getText().toString();
-        req.phone_code_hash = phoneHash;
+    private void destroyTimer() {
         try {
             synchronized(timerSync) {
                 if (timeTimer != null) {
@@ -198,142 +185,83 @@ public void onNextPressed() {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+    }
+
+    @Override
+    public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
+        nextPressed = true;
+        waitingForSms = false;
+        Utilities.setWaitingForSms(false);
+        NotificationCenter.getInstance().removeObserver(this, 998);
+        final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
+        req.phone_number = requestPhone;
+        req.phone_code = codeField.getText().toString();
+        req.phone_code_hash = phoneHash;
+        destroyTimer();
         if (delegate != null) {
             delegate.needShowProgress();
         }
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (delegate != null) {
-                    delegate.needHideProgress();
-                }
-                if (error == null) {
-                    final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (delegate == null) {
-                                return;
-                            }
-                            try {
-                                synchronized(timerSync) {
-                                    if (timeTimer != null) {
-                                        timeTimer.cancel();
-                                        timeTimer = null;
-                                    }
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (delegate == null) {
+                            return;
+                        }
+                        delegate.needHideProgress();
+                        nextPressed = false;
+                        if (error == null) {
+                            TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
+                            destroyTimer();
                             UserConfig.clearConfig();
                             MessagesStorage.getInstance().cleanUp();
                             MessagesController.getInstance().cleanUp();
-                            ConnectionsManager.getInstance().cleanUp();
-                            UserConfig.currentUser = res.user;
-                            UserConfig.clientActivated = true;
-                            UserConfig.clientUserId = res.user.id;
+                            UserConfig.setCurrentUser(res.user);
                             UserConfig.saveConfig(true);
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                            users.add(UserConfig.currentUser);
+                            users.add(res.user);
                             MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
                             MessagesController.getInstance().users.put(res.user.id, res.user);
                             ContactsController.getInstance().checkAppAccount();
-                            if (delegate != null) {
-                                delegate.needFinishActivity();
-                            }
+                            delegate.needFinishActivity();
                             ConnectionsManager.getInstance().initPushConnection();
-                        }
-                    });
-                } else {
-                    if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
-                        Utilities.RunOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
+                        } else {
+                            if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
                                 Bundle params = new Bundle();
                                 params.putString("phoneFormated", requestPhone);
                                 params.putString("phoneHash", phoneHash);
                                 params.putString("code", req.phone_code);
                                 delegate.setPage(2, true, params, false);
-                                try {
-                                    synchronized(timerSync) {
-                                        if (timeTimer != null) {
-                                            timeTimer.cancel();
-                                            timeTimer = null;
-                                        }
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        });
-                    } else {
-                        if (timeTimer == null) {
-                            timeTimer = new Timer();
-                            timeTimer.schedule(new TimerTask() {
-                                @Override
-                                public void run() {
-                                    double currentTime = System.currentTimeMillis();
-                                    double diff = currentTime - lastCurrentTime;
-                                    time -= diff;
-                                    lastCurrentTime = currentTime;
-                                    Utilities.RunOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            if (time >= 1000) {
-                                                int minutes = time / 1000 / 60;
-                                                int seconds = time / 1000 - minutes * 60;
-                                                timeText.setText(String.format("%s %d:%02d", LocaleController.getString("CallText", R.string.CallText), minutes, seconds));
-                                            } else {
-                                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                                                synchronized(timerSync) {
-                                                    if (timeTimer != null) {
-                                                        timeTimer.cancel();
-                                                        timeTimer = null;
-                                                    }
-                                                }
-                                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                                                req.phone_number = requestPhone;
-                                                req.phone_code_hash = phoneHash;
-                                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                                    @Override
-                                                    public void run(TLObject response, TLRPC.TL_error error) {
-                                                    }
-                                                }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                                            }
-                                        }
-                                    });
-                                }
-                            }, 0, 1000);
-                        }
-                        if (delegate != null) {
-                            if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                            } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                            } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                destroyTimer();
                             } else {
-                                delegate.needShowAlert(error.text);
+                                createTimer();
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
                             }
                         }
                     }
-                }
+                });
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
     }
 
     @Override
     public void onBackPressed() {
-        try {
-            synchronized(timerSync) {
-                if (timeTimer != null) {
-                    timeTimer.cancel();
-                    timeTimer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
+        destroyTimer();
         currentParams = null;
         Utilities.setWaitingForSms(false);
         NotificationCenter.getInstance().removeObserver(this, 998);
@@ -345,16 +273,7 @@ public void onDestroyActivity() {
         super.onDestroyActivity();
         Utilities.setWaitingForSms(false);
         NotificationCenter.getInstance().removeObserver(this, 998);
-        try {
-            synchronized(timerSync) {
-                if (timeTimer != null) {
-                    timeTimer.cancel();
-                    timeTimer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
+        destroyTimer();
         waitingForSms = false;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 6df22b7ac..087b7e60a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -20,7 +20,6 @@
 import android.view.WindowManager;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.GridView;
 import android.widget.TextView;
 
@@ -32,6 +31,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -347,7 +347,7 @@ public boolean onPreDraw() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index c1b5b94d5..0913bfc83 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -17,7 +17,6 @@
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -33,6 +32,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
@@ -297,7 +297,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
             messagesListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                 @Override
                 public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (onlySelect || searching && searchWas) {
+                    if (onlySelect || searching && searchWas || getParentActivity() == null) {
                         return false;
                     }
                     TLRPC.TL_dialog dialog;
@@ -324,7 +324,7 @@ public void onClick(DialogInterface dialog, int which) {
                                 if (which == 0) {
                                     MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
                                 } else if (which == 1) {
-                                    MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().users.get(UserConfig.clientUserId), null);
+                                    MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().users.get(UserConfig.getClientUserId()), null);
                                     MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
                                 }
                             }
@@ -455,6 +455,9 @@ public void setDelegate(MessagesActivityDelegate delegate) {
 
     private void didSelectResult(final long dialog_id, boolean useAlert) {
         if (useAlert && selectAlertString != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
             int lower_part = (int)dialog_id;
@@ -555,7 +558,7 @@ public void run() {
         }
     }
 
-    private class MessagesAdapter extends BaseAdapter {
+    private class MessagesAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public MessagesAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index 6c2feab37..22e8395f4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -100,6 +100,9 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                         } else {
                             draggingState = 0;
                         }
+                        if (draggingState != 0) {
+                            PhotoCropView.this.requestDisallowInterceptTouchEvent(true);
+                        }
                         oldX = x;
                         oldY = y;
                     } else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 5a69f2f2e..6e17f0edc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -18,7 +18,6 @@
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.GridView;
 import android.widget.ImageView;
@@ -32,6 +31,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -107,7 +107,7 @@ public void onItemClick(int id) {
                         }
                     } else if (id == 1) {
                         if (delegate != null) {
-                            finishFragment();
+                            finishFragment(false);
                             delegate.startPhotoSelectActivity();
                         }
                     }
@@ -441,7 +441,7 @@ private void updateSelectedPhoto(View view, MediaController.PhotoEntry photoEntr
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 1dc630877..a4168a8c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -42,6 +42,7 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
+import android.widget.Scroller;
 import android.widget.TextView;
 
 import org.telegram.messenger.ConnectionsManager;
@@ -101,6 +102,8 @@
     private boolean overlayViewVisible = true;
 
     private int animationInProgress = 0;
+    private PlaceProviderObject showAfterAnimation;
+    private PlaceProviderObject hideAfterAnimation;
     private boolean disableShowCheck = false;
     private Animation.AnimationListener animationListener;
 
@@ -158,6 +161,7 @@
     private boolean zoomAnimation = false;
     private int switchImageAfterAnimation = 0;
     private VelocityTracker velocityTracker = null;
+    private Scroller scroller = null;
 
     private ArrayList<MessageObject> imagesArrTemp = new ArrayList<MessageObject>();
     private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<Integer, MessageObject>();
@@ -310,13 +314,18 @@ public void didReceivedNotification(int id, Object... args) {
                 imagesArrLocations.clear();
                 imagesArrLocationsSizes.clear();
                 for (TLRPC.Photo photo : photos) {
-                    if (photo instanceof TLRPC.TL_photoEmpty) {
+                    if (photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
                         continue;
                     }
                     TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(photo.sizes, 640, 640);
                     if (sizeFull != null) {
-                        if (currentFileLocation != null && sizeFull.location.local_id == currentFileLocation.local_id && sizeFull.location.volume_id == currentFileLocation.volume_id) {
-                            setToImage = imagesArrLocations.size();
+                        if (currentFileLocation != null) {
+                            for (TLRPC.PhotoSize size : photo.sizes) {
+                                if (size.location.local_id == currentFileLocation.local_id && size.location.volume_id == currentFileLocation.volume_id) {
+                                    setToImage = imagesArrLocations.size();
+                                    break;
+                                }
+                            }
                         }
                         imagesArrLocations.add(sizeFull.location);
                         imagesArrLocationsSizes.add(sizeFull.size);
@@ -327,6 +336,8 @@ public void didReceivedNotification(int id, Object... args) {
                 if (setToImage != -1) {
                     setImageIndex(setToImage, true);
                 } else {
+                    imagesArrLocations.add(0, currentFileLocation);
+                    imagesArrLocationsSizes.add(0, 0);
                     setImageIndex(0, true);
                 }
                 if (fromCache) {
@@ -423,6 +434,8 @@ public void didReceivedNotification(int id, Object... args) {
     public void setParentActivity(Activity activity) {
         parentActivity = activity;
 
+        scroller = new Scroller(activity);
+
         windowView = new FrameLayoutTouchListener(activity);
         windowView.setBackgroundDrawable(backgroundDrawable);
         windowView.setFocusable(false);
@@ -1038,7 +1051,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                     if (messageObject.messageOwner.to_id.chat_id != 0) {
                         currentDialogId = -messageObject.messageOwner.to_id.chat_id;
                     } else {
-                        if (messageObject.messageOwner.to_id.user_id == UserConfig.clientUserId) {
+                        if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
                             currentDialogId = messageObject.messageOwner.from_id;
                         } else {
                             currentDialogId = messageObject.messageOwner.to_id.user_id;
@@ -1076,7 +1089,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                 if (messageObject.messageOwner.to_id.chat_id != 0) {
                     currentDialogId = -messageObject.messageOwner.to_id.chat_id;
                 } else {
-                    if (messageObject.messageOwner.to_id.user_id == UserConfig.clientUserId) {
+                    if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
                         currentDialogId = messageObject.messageOwner.from_id;
                     } else {
                         currentDialogId = messageObject.messageOwner.to_id.user_id;
@@ -1147,15 +1160,20 @@ public void setImageIndex(int index, boolean init) {
             }
         }
 
-        if (!init) {
-            if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+
+        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+            if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(true, true);
+            } else {
+                showAfterAnimation = currentPlaceObject;
             }
         }
         currentPlaceObject = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
-        if (!init) {
-            if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+            if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
+            } else {
+                hideAfterAnimation = currentPlaceObject;
             }
         }
 
@@ -1343,6 +1361,7 @@ public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocatio
         }
 
         disableShowCheck = true;
+        animationInProgress = 1;
         onPhotoShow(messageObject, fileLocation, messages, photos, index, object);
         isVisible = true;
         backgroundDrawable.setAlpha(255);
@@ -1352,8 +1371,6 @@ public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocatio
         if(android.os.Build.VERSION.SDK_INT >= 11) {
             Utilities.lockOrientation(parentActivity);
 
-            animationInProgress = 1;
-
             animatingImageView.setVisibility(View.VISIBLE);
             animatingImageView.setImageBitmap(object.thumb);
 
@@ -1419,6 +1436,12 @@ public void onAnimationEnd(Animator animation) {
                             containerView.invalidate();
                             animatingImageView.setVisibility(View.GONE);
                             Utilities.unlockOrientation(parentActivity);
+                            if (showAfterAnimation != null) {
+                                showAfterAnimation.imageReceiver.setVisible(true, true);
+                            }
+                            if (hideAfterAnimation != null) {
+                                hideAfterAnimation.imageReceiver.setVisible(false, true);
+                            }
                         }
                     });
                     animatorSet.start();
@@ -1437,6 +1460,7 @@ public void onDraw() {
                 }
             });
         } else {
+            animationInProgress = 0;
             containerView.invalidate();
             AnimationSet animationSet = new AnimationSet(true);
             AlphaAnimation animation = new AlphaAnimation(0.0f, 1.0f);
@@ -1604,7 +1628,7 @@ private void onPhotoClosed(PlaceProviderObject object) {
         currentPathObject = null;
         currentThumb = null;
         centerImage.setImageBitmap((Bitmap)null);
-        leftImage.setImageBitmap((Bitmap) null);
+        leftImage.setImageBitmap((Bitmap)null);
         rightImage.setImageBitmap((Bitmap)null);
         if (android.os.Build.VERSION.SDK_INT >= 11 && object != null) {
             object.imageReceiver.setVisible(true, true);
@@ -1668,6 +1692,9 @@ private boolean onTouchEvent(MotionEvent ev) {
         }
 
         if (ev.getActionMasked() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
             if (!draggingDown && !changingPage) {
                 if (canZoom && ev.getPointerCount() == 2) {
                     pinchStartDistance = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0));
@@ -1703,7 +1730,9 @@ private boolean onTouchEvent(MotionEvent ev) {
                 if (velocityTracker != null) {
                     velocityTracker.addMovement(ev);
                 }
-                if (canDragDown && !draggingDown && scale == 1 && Math.abs(ev.getY() - dragY) >= Utilities.dp(30)) {
+                float dx = Math.abs(ev.getX() - moveStartX);
+                float dy = Math.abs(ev.getY() - dragY);
+                if (canDragDown && !draggingDown && scale == 1 && dy >= Utilities.dp(30) && dy / 2 > dx) {
                     draggingDown = true;
                     moving = false;
                     dragY = ev.getY();
@@ -1734,8 +1763,18 @@ private boolean onTouchEvent(MotionEvent ev) {
                         if (translationX < minX && !rightImage.hasImage() || translationX > maxX && !leftImage.hasImage()) {
                             moveDx /= 3.0f;
                         }
-                        if (translationY < minY || translationY > maxY) {
-                            moveDy /= 3.0f;
+                        if (maxY == 0 && minY == 0) {
+                            if (translationY - moveDy < minY) {
+                                translationY = minY;
+                                moveDy = 0;
+                            } else if (translationY - moveDy > maxY) {
+                                translationY = maxY;
+                                moveDy = 0;
+                            }
+                        } else {
+                            if (translationY < minY || translationY > maxY) {
+                                moveDy /= 3.0f;
+                            }
                         }
 
                         translationX -= moveDx;
@@ -1900,6 +1939,10 @@ private void onDraw(Canvas canvas) {
         }
 
         if (ai != -1) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+
             float ts = scale + (animateToScale - scale) * ai;
             float tx = translationX + (animateToX - translationX) * ai;
             float ty = translationY + (animateToY - translationY) * ai;
@@ -1922,6 +1965,17 @@ private void onDraw(Canvas canvas) {
                 Utilities.unlockOrientation(parentActivity);
                 zoomAnimation = false;
             }
+            if (!scroller.isFinished()) {
+                if (scroller.computeScrollOffset()) {
+                    if (scroller.getStartX() < maxX && scroller.getStartX() > minX) {
+                        translationX = scroller.getCurrX();
+                    }
+                    if (scroller.getStartY() < maxY && scroller.getStartY() > minY) {
+                        translationY = scroller.getCurrY();
+                    }
+                    containerView.invalidate();
+                }
+            }
             if (switchImageAfterAnimation != 0) {
                 if (switchImageAfterAnimation == 1) {
                     setImageIndex(currentIndex + 1, false);
@@ -2097,6 +2151,11 @@ public void onLongPress(MotionEvent e) {
 
     @Override
     public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        if (scale != 1) {
+            scroller.abortAnimation();
+            scroller.fling(Math.round(translationX), Math.round(translationY), Math.round(velocityX), Math.round(velocityY), (int) minX, (int) maxX, (int) minY, (int) maxY);
+            containerView.postInvalidate();
+        }
         return false;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
new file mode 100644
index 000000000..7acc1fbb3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -0,0 +1,392 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.ColorPickerView;
+
+public class ProfileNotificationsActivity extends BaseFragment {
+
+    private ListView listView;
+    private long dialog_id;
+
+    private int settingsNotificationsRow;
+    private int settingsVibrateRow;
+    private int settingsSoundRow;
+    private int settingsLedRow;
+    private int rowCount = 0;
+
+    public ProfileNotificationsActivity(Bundle args) {
+        super(args);
+        dialog_id = args.getLong("dialog_id");
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        settingsNotificationsRow = rowCount++;
+        settingsVibrateRow = rowCount++;
+        settingsLedRow = rowCount++;
+        settingsSoundRow = rowCount++;
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+
+            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == settingsVibrateRow || i == settingsNotificationsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("Enabled", R.string.Enabled),
+                                LocaleController.getString("Disabled", R.string.Disabled)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == settingsVibrateRow) {
+                                    editor.putInt("vibrate_" + dialog_id, which);
+                                } else if (i == settingsNotificationsRow) {
+                                    editor.putInt("notify2_" + dialog_id, which);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == settingsSoundRow) {
+                        try {
+                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            Uri currentSound = null;
+
+                            String defaultPath = null;
+                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
+                            if (defaultUri != null) {
+                                defaultPath = defaultUri.getPath();
+                            }
+
+                            String path = preferences.getString("sound_path_" + dialog_id, defaultPath);
+                            if (path != null && !path.equals("NoSound")) {
+                                if (path.equals(defaultPath)) {
+                                    currentSound = defaultUri;
+                                } else {
+                                    currentSound = Uri.parse(path);
+                                }
+                            }
+
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
+                            getParentActivity().startActivityForResult(tmpIntent, 12);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == settingsLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (preferences.contains("color_" + dialog_id)) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                        } else {
+                            if ((int)dialog_id < 0) {
+                                colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                            } else {
+                                colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                            }
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, colorPickerView.getColor());
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, 0);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.remove("color_" + dialog_id);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (data == null) {
+                return;
+            }
+            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            String name = null;
+            if (ringtone != null) {
+                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
+                if (rng != null) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                        name = LocaleController.getString("Default", R.string.Default);
+                    } else {
+                        name = rng.getTitle(getParentActivity());
+                    }
+                    rng.stop();
+                }
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+
+            if (requestCode == 12) {
+                if (name != null && ringtone != null) {
+                    editor.putString("sound_" + dialog_id, name);
+                    editor.putString("sound_path_" + dialog_id, ringtone.toString());
+                } else {
+                    editor.putString("sound_" + dialog_id, "NoSound");
+                    editor.putString("sound_path_" + dialog_id, "NoSound");
+                }
+            }
+            editor.commit();
+            listView.invalidateViews();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsVibrateRow) {
+                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("vibrate_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    }
+                } else if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("notify2_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    }
+                }
+            } if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsSoundRow) {
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    String name = preferences.getString("sound_" + dialog_id, LocaleController.getString("Default", R.string.Default));
+                    if (name.equals("NoSound")) {
+                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        detailTextView.setText(name);
+                    }
+                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+
+                if (preferences.contains("color_" + dialog_id)) {
+                    colorView.setBackgroundColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                } else {
+                    if ((int)dialog_id < 0) {
+                        colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                    } else {
+                        colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                    }
+                }
+                divider.setVisibility(View.VISIBLE);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == settingsNotificationsRow || i == settingsVibrateRow) {
+                return 0;
+            } else if (i == settingsSoundRow) {
+                return 1;
+            } else if (i == settingsLedRow) {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 56f5ede27..6568bad52 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -28,7 +28,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.ListView;
@@ -53,6 +52,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
@@ -127,15 +127,15 @@ public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.
                     @Override
                     public void run(TLObject response, TLRPC.TL_error error) {
                         if (error == null) {
-                            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                             if (user == null) {
-                                user = UserConfig.currentUser;
+                                user = UserConfig.getCurrentUser();
                                 if (user == null) {
                                     return;
                                 }
                                 MessagesController.getInstance().users.put(user.id, user);
                             } else {
-                                UserConfig.currentUser = user;
+                                UserConfig.setCurrentUser(user);
                             }
                             if (user == null) {
                                 return;
@@ -240,6 +240,9 @@ public void onItemClick(int id) {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
                     if (i == textSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
                         builder.setItems(new CharSequence[]{String.format("%d", 12), String.format("%d", 13), String.format("%d", 14), String.format("%d", 15), String.format("%d", 16), String.format("%d", 17), String.format("%d", 18), String.format("%d", 19), String.format("%d", 20), String.format("%d", 21), String.format("%d", 22), String.format("%d", 23), String.format("%d", 24)}, new DialogInterface.OnClickListener() {
@@ -273,6 +276,9 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == backgroundRow) {
                         presentFragment(new SettingsWallpapersActivity());
                     } else if (i == askQuestionRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         final TextView message = new TextView(getParentActivity());
                         message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
                         message.setTextSize(18);
@@ -303,6 +309,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             listView.invalidateViews();
                         }
                     } else if (i == terminateSessionsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -312,16 +321,27 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                 TLRPC.TL_auth_resetAuthorizations req = new TLRPC.TL_auth_resetAuthorizations();
                                 ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                                     @Override
-                                    public void run(TLObject response, TLRPC.TL_error error) {
-                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                            Toast toast = Toast.makeText(getParentActivity(), R.string.TerminateAllSessions, Toast.LENGTH_SHORT);
-                                            toast.show();
-                                        } else {
-                                            Toast toast = Toast.makeText(getParentActivity(), R.string.UnknownError, Toast.LENGTH_SHORT);
-                                            toast.show();
-                                        }
+                                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                                        Utilities.RunOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                if (getParentActivity() == null) {
+                                                    return;
+                                                }
+                                                if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                } else {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                }
+                                            }
+                                        });
                                         UserConfig.registeredForPush = false;
+                                        UserConfig.registeredForInternalPush = false;
+                                        UserConfig.saveConfig(false);
                                         MessagesController.getInstance().registerForPush(UserConfig.pushString);
+                                        ConnectionsManager.getInstance().initPushConnection();
                                     }
                                 }, null, true, RPCRequest.RPCRequestClassGeneric);
                             }
@@ -331,6 +351,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     } else if (i == languageRow) {
                         presentFragment(new LanguageSelectActivity());
                     } else if (i == switchBackendButtonRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -352,6 +375,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     } else if (i == contactsReimportRow) {
 
                     } else if (i == contactsSortRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("SortBy", R.string.SortBy));
                         builder.setItems(new CharSequence[] {
@@ -373,6 +399,9 @@ public void onClick(DialogInterface dialog, int which) {
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
                     } else if (i == photoDownloadChatRow || i == photoDownloadPrivateRow || i == audioDownloadChatRow || i == audioDownloadPrivateRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                         builder.setItems(new CharSequence[] {
@@ -418,7 +447,7 @@ public void onClick(DialogInterface dialog, int which) {
         if (fileLocation == null) {
             return null;
         }
-        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
         if (user != null && user.photo != null && user.photo.photo_big != null) {
             TLRPC.FileLocation photoBig = user.photo.photo_big;
             if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
@@ -434,7 +463,7 @@ public void onClick(DialogInterface dialog, int which) {
                         object.viewY = coords[1] - Utilities.statusBarHeight;
                         object.parentView = listView;
                         object.imageReceiver = avatarImage.imageReceiver;
-                        object.user_id = UserConfig.clientUserId;
+                        object.user_id = UserConfig.getClientUserId();
                         object.thumb = object.imageReceiver.getBitmap();
                         object.size = -1;
                         return object;
@@ -607,7 +636,7 @@ public void onResume() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -667,13 +696,16 @@ public void onClick(View view) {
                     button2.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
                             CharSequence[] items;
 
-                            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                             if (user == null) {
-                                user = UserConfig.currentUser;
+                                user = UserConfig.getCurrentUser();
                             }
                             if (user == null) {
                                 return;
@@ -691,7 +723,7 @@ public void onClick(View view) {
                                 @Override
                                 public void onClick(DialogInterface dialogInterface, int i) {
                                     if (i == 0 && full) {
-                                        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                                        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                                         if (user != null && user.photo != null && user.photo.photo_big != null) {
                                             PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
                                         }
@@ -703,28 +735,28 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                         TLRPC.TL_photos_updateProfilePhoto req = new TLRPC.TL_photos_updateProfilePhoto();
                                         req.id = new TLRPC.TL_inputPhotoEmpty();
                                         req.crop = new TLRPC.TL_inputPhotoCropAuto();
-                                        UserConfig.currentUser.photo = new TLRPC.TL_userProfilePhotoEmpty();
-                                        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                                        UserConfig.getCurrentUser().photo = new TLRPC.TL_userProfilePhotoEmpty();
+                                        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                                         if (user == null) {
-                                            user = UserConfig.currentUser;
+                                            user = UserConfig.getCurrentUser();
                                         }
                                         if (user == null) {
                                             return;
                                         }
                                         if (user != null) {
-                                            user.photo = UserConfig.currentUser.photo;
+                                            user.photo = UserConfig.getCurrentUser().photo;
                                         }
                                         NotificationCenter.getInstance().postNotificationName(MessagesController.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
                                         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                                             @Override
                                             public void run(TLObject response, TLRPC.TL_error error) {
                                                 if (error == null) {
-                                                    TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                                                    TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                                                     if (user == null) {
-                                                        user = UserConfig.currentUser;
+                                                        user = UserConfig.getCurrentUser();
                                                         MessagesController.getInstance().users.put(user.id, user);
                                                     } else {
-                                                        UserConfig.currentUser = user;
+                                                        UserConfig.setCurrentUser(user);
                                                     }
                                                     if (user == null) {
                                                         return;
@@ -757,9 +789,9 @@ public void run() {
                 textView = (TextView)view.findViewById(R.id.settings_name);
                 Typeface typeface = Utilities.getTypeface("fonts/rmedium.ttf");
                 textView.setTypeface(typeface);
-                TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+                TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
                 if (user == null) {
-                    user = UserConfig.currentUser;
+                    user = UserConfig.getCurrentUser();
                 }
                 if (user != null) {
                     textView.setText(Utilities.formatName(user.first_name, user.last_name));
@@ -804,7 +836,7 @@ public void run() {
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
                 View divider = view.findViewById(R.id.settings_row_divider);
                 if (i == numberRow) {
-                    TLRPC.User user = UserConfig.currentUser;
+                    TLRPC.User user = UserConfig.getCurrentUser();
                     if (user != null && user.phone != null && user.phone.length() != 0) {
                         textView.setText(PhoneFormat.getInstance().format("+" + user.phone));
                     } else {
@@ -890,6 +922,9 @@ public void run() {
                     textView.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -898,10 +933,10 @@ public void onClick(View view) {
                                 public void onClick(DialogInterface dialogInterface, int i) {
                                     NotificationCenter.getInstance().postNotificationName(1234);
                                     MessagesController.getInstance().unregistedPush();
+                                    MessagesController.getInstance().logOut();
+                                    UserConfig.clearConfig();
                                     MessagesStorage.getInstance().cleanUp();
                                     MessagesController.getInstance().cleanUp();
-                                    ConnectionsManager.getInstance().cleanUp();
-                                    UserConfig.clearConfig();
                                 }
                             });
                             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
index b0643ce6e..0029f53c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
@@ -16,7 +16,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -30,6 +29,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
@@ -120,7 +120,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
             listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                 @Override
                 public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i >= blockedContacts.size()) {
+                    if (i >= blockedContacts.size() || getParentActivity() == null) {
                         return true;
                     }
                     selectedUserId = blockedContacts.get(i).user_id;
@@ -276,7 +276,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }, null, true, RPCRequest.RPCRequestClassGeneric);
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
index 866e0b10c..15b8578d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
@@ -65,9 +65,9 @@ public void onClick(View view) {
 
             fragmentView = inflater.inflate(R.layout.settings_change_name_layout, container, false);
 
-            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+            TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
             if (user == null) {
-                user = UserConfig.currentUser;
+                user = UserConfig.getCurrentUser();
             }
 
             firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
@@ -126,12 +126,12 @@ public void onResume() {
 
     private void saveName() {
         TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
-        if (UserConfig.currentUser == null || lastNameField.getText() == null || firstNameField.getText() == null) {
+        if (UserConfig.getCurrentUser() == null || lastNameField.getText() == null || firstNameField.getText() == null) {
             return;
         }
-        UserConfig.currentUser.first_name = req.first_name = firstNameField.getText().toString();
-        UserConfig.currentUser.last_name = req.last_name = lastNameField.getText().toString();
-        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.clientUserId);
+        UserConfig.getCurrentUser().first_name = req.first_name = firstNameField.getText().toString();
+        UserConfig.getCurrentUser().last_name = req.last_name = lastNameField.getText().toString();
+        TLRPC.User user = MessagesController.getInstance().users.get(UserConfig.getClientUserId());
         if (user != null) {
             user.first_name = req.first_name;
             user.last_name = req.last_name;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index 7c268ea67..c313a3d06 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -22,7 +22,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -37,8 +36,10 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.ColorPickerView;
 
 public class SettingsNotificationsActivity extends BaseFragment {
     private ListView listView;
@@ -50,11 +51,13 @@
     private int messagePreviewRow;
     private int messageVibrateRow;
     private int messageSoundRow;
+    private int messageLedRow;
     private int groupSectionRow;
     private int groupAlertRow;
     private int groupPreviewRow;
     private int groupVibrateRow;
     private int groupSoundRow;
+    private int groupLedRow;
     private int inappSectionRow;
     private int inappSoundRow;
     private int inappVibrateRow;
@@ -74,11 +77,13 @@ public boolean onFragmentCreate() {
         messageAlertRow = rowCount++;
         messagePreviewRow = rowCount++;
         messageVibrateRow = rowCount++;
+        messageLedRow = rowCount++;
         messageSoundRow = rowCount++;
         groupSectionRow = rowCount++;
         groupAlertRow = rowCount++;
         groupPreviewRow = rowCount++;
         groupVibrateRow = rowCount++;
+        groupLedRow = rowCount++;
         groupSoundRow = rowCount++;
         inappSectionRow = rowCount++;
         inappSoundRow = rowCount++;
@@ -110,12 +115,12 @@ public void onItemClick(int id) {
             });
 
             fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
-            ListAdapter listAdapter = new ListAdapter(getParentActivity());
+            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
             listView = (ListView)fragmentView.findViewById(R.id.listView);
             listView.setAdapter(listAdapter);
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
                     if (i == messageAlertRow || i == groupAlertRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
@@ -217,7 +222,7 @@ public void run() {
                                             listView.invalidateViews();
                                         }
                                         if (getParentActivity() != null) {
-                                            Toast toast = Toast.makeText(getParentActivity(), R.string.ResetNotificationsText, Toast.LENGTH_SHORT);
+                                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
                                             toast.show();
                                         }
                                     }
@@ -270,6 +275,9 @@ public void run() {
                             listView.invalidateViews();
                             ApplicationLoader.startPushService();
                         } else {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -286,6 +294,54 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                             showAlertDialog(builder);
                         }
+                    } else if (i == messageLedRow || i == groupLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (i == messageLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                        } else if (i == groupLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", colorPickerView.getColor());
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", colorPickerView.getColor());
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", 0);
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", 0);
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
                     }
                 }
             });
@@ -340,7 +396,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -498,8 +554,23 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
                     divider.setVisibility(View.INVISIBLE);
                 }
+            } else if (type == 3) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                if (i == messageLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                } else if (i == groupLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                }
+                divider.setVisibility(View.VISIBLE);
             }
-
             return view;
         }
 
@@ -513,6 +584,8 @@ public int getItemViewType(int i) {
                     i == contactJoinedRow ||
                     i == pebbleAlertRow || i == notificationsServiceRow) {
                 return 1;
+            } else if (i == messageLedRow || i == groupLedRow) {
+                return 3;
             } else {
                 return 2;
             }
@@ -520,7 +593,7 @@ public int getItemViewType(int i) {
 
         @Override
         public int getViewTypeCount() {
-            return 3;
+            return 4;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
index 536876128..088354b21 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
@@ -24,7 +24,6 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
@@ -42,6 +41,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.HorizontalListView;
@@ -111,7 +111,14 @@ public void onClick(View view) {
                     boolean done;
                     TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
                     if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
-                        TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, Utilities.dp(320), Utilities.dp(480));
+                        int width = Utilities.displaySize.x;
+                        int height = Utilities.displaySize.y;
+                        if (width > height) {
+                            int temp = width;
+                            width = height;
+                            height = temp;
+                        }
+                        TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
                         String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
                         File f = new File(Utilities.getCacheDir(), fileName);
                         File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
@@ -158,6 +165,9 @@ public void onClick(View view) {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     if (i == 0) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
                         CharSequence[] items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
@@ -251,7 +261,14 @@ public void restoreSelfArgs(Bundle args) {
     private void processSelectedBackground() {
         TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
         if (selectedBackground != -1 && selectedBackground != 1000001 && wallPaper != null && wallPaper instanceof TLRPC.TL_wallPaper) {
-            TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, Utilities.dp(320), Utilities.dp(480));
+            int width = Utilities.displaySize.x;
+            int height = Utilities.displaySize.y;
+            if (width > height) {
+                int temp = width;
+                width = height;
+                height = temp;
+            }
+            TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
             String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
             File f = new File(Utilities.getCacheDir(), fileName);
             if (!f.exists()) {
@@ -432,7 +449,7 @@ public void onResume() {
         fixLayout();
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index 496ed2afe..f2fe59641 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -8,23 +8,17 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Typeface;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.Bundle;
-import android.provider.Settings;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -43,6 +37,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -75,8 +70,6 @@
     private int settingsTimerRow;
     private int settingsKeyRow;
     private int settingsNotificationsRow;
-    private int settingsVibrateRow;
-    private int settingsSoundRow;
     private int sharedMediaSectionRow;
     private int sharedMediaRow;
     private int rowCount = 0;
@@ -125,8 +118,6 @@ private void updateRowsIds() {
             settingsKeyRow = -1;
         }
         settingsNotificationsRow = rowCount++;
-        settingsVibrateRow = rowCount++;
-        settingsSoundRow = rowCount++;
         sharedMediaSectionRow = rowCount++;
         sharedMediaRow = rowCount++;
     }
@@ -148,21 +139,31 @@ public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
                     } else if (id == block_contact) {
-                        TLRPC.User user = MessagesController.getInstance().users.get(user_id);
-                        if (user == null) {
-                            return;
-                        }
-                        TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
-                        req.id = MessagesController.getInputUser(user);
-                        TLRPC.TL_contactBlocked blocked = new TLRPC.TL_contactBlocked();
-                        blocked.user_id = user_id;
-                        blocked.date = (int)(System.currentTimeMillis() / 1000);
-                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                             @Override
-                            public void run(TLObject response, TLRPC.TL_error error) {
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                TLRPC.User user = MessagesController.getInstance().users.get(user_id);
+                                if (user == null) {
+                                    return;
+                                }
+                                TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
+                                req.id = MessagesController.getInputUser(user);
+                                TLRPC.TL_contactBlocked blocked = new TLRPC.TL_contactBlocked();
+                                blocked.user_id = user_id;
+                                blocked.date = (int)(System.currentTimeMillis() / 1000);
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(TLObject response, TLRPC.TL_error error) {
 
+                                    }
+                                }, null, true, RPCRequest.RPCRequestClassGeneric);
                             }
-                        }, null, true, RPCRequest.RPCRequestClassGeneric);
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
                     } else if (id == add_contact) {
                         TLRPC.User user = MessagesController.getInstance().users.get(user_id);
                         Bundle args = new Bundle();
@@ -181,7 +182,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         presentFragment(new ContactAddActivity(args));
                     } else if (id == delete_contact) {
                         final TLRPC.User user = MessagesController.getInstance().users.get(user_id);
-                        if (user == null) {
+                        if (user == null || getParentActivity() == null) {
                             return;
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -213,6 +214,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
             startSecretButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -238,69 +242,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == settingsVibrateRow || i == settingsNotificationsRow) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Default", R.string.Default),
-                                LocaleController.getString("Enabled", R.string.Enabled),
-                                LocaleController.getString("Disabled", R.string.Disabled)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == settingsVibrateRow) {
-                                    if (dialog_id == 0) {
-                                        editor.putInt("vibrate_" + user_id, which);
-                                    } else {
-                                        editor.putInt("vibrate_" + dialog_id, which);
-                                    }
-                                } else if (i == settingsNotificationsRow) {
-                                    if (dialog_id == 0) {
-                                        editor.putInt("notify2_" + user_id, which);
-                                    } else {
-                                        editor.putInt("notify2_" + dialog_id, which);
-                                    }
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    } else if (i == settingsSoundRow) {
-                        try {
-                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            Uri currentSound = null;
-
-                            String defaultPath = null;
-                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                            if (defaultUri != null) {
-                                defaultPath = defaultUri.getPath();
-                            }
-
-                            String path = preferences.getString("sound_path_" + user_id, defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                            getParentActivity().startActivityForResult(tmpIntent, 12);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (i == sharedMediaRow) {
+                    if (i == sharedMediaRow) {
                         Bundle args = new Bundle();
                         if (dialog_id != 0) {
                             args.putLong("dialog_id", dialog_id);
@@ -313,6 +255,9 @@ public void onClick(DialogInterface dialog, int which) {
                         args.putInt("chat_id", (int)(dialog_id >> 32));
                         presentFragment(new IdenticonActivity(args));
                     } else if (i == settingsTimerRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
                         builder.setItems(new CharSequence[]{
@@ -354,6 +299,10 @@ public void onClick(DialogInterface dialog, int which) {
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
                     }
                 }
             });
@@ -371,43 +320,6 @@ public void onClick(DialogInterface dialog, int which) {
         return fragmentView;
     }
 
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (data == null) {
-                return;
-            }
-            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-            String name = null;
-            if (ringtone != null) {
-                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
-                if (rng != null) {
-                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                        name = LocaleController.getString("Default", R.string.Default);
-                    } else {
-                        name = rng.getTitle(getParentActivity());
-                    }
-                    rng.stop();
-                }
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-
-            if (requestCode == 12) {
-                if (name != null && ringtone != null) {
-                    editor.putString("sound_" + user_id, name);
-                    editor.putString("sound_path_" + user_id, ringtone.toString());
-                } else {
-                    editor.putString("sound_" + user_id, "NoSound");
-                    editor.putString("sound_path_" + user_id, "NoSound");
-                }
-            }
-            editor.commit();
-            listView.invalidateViews();
-        }
-    }
-
     public void didReceivedNotification(int id, Object... args) {
         if (id == MessagesController.updateInterfaces) {
             int mask = (Integer)args[0];
@@ -556,7 +468,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -570,7 +482,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow || i == settingsSoundRow || i == settingsVibrateRow;
+            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow;
         }
 
         @Override
@@ -657,7 +569,7 @@ public void onClick(View view) {
                     view.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
-                            if (user.phone == null || user.phone.length() == 0) {
+                            if (user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
                                 return;
                             }
                             selectedPhone = user.phone;
@@ -756,44 +668,6 @@ public void onClick(View view) {
                     } else {
                         detailTextView.setText(String.format("%d", encryptedChat.ttl));
                     }
-                } else if (i == settingsVibrateRow) {
-                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                    String key;
-                    if (dialog_id == 0) {
-                        key = "vibrate_" + user_id;
-                    } else {
-                        key = "vibrate_" + dialog_id;
-                    }
-
-                    int value = preferences.getInt(key, 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
-                } else if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String key;
-                    if (dialog_id == 0) {
-                        key = "notify2_" + user_id;
-                    } else {
-                        key = "notify2_" + dialog_id;
-                    }
-                    int value = preferences.getInt(key, 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -810,25 +684,15 @@ public void onClick(View view) {
             } else if (type == 5) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsSoundRow) {
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String name = preferences.getString("sound_" + user_id, LocaleController.getString("Default", R.string.Default));
-                    if (name.equals("NoSound")) {
-                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        detailTextView.setText(name);
-                    }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
                     divider.setVisibility(View.INVISIBLE);
                 }
             }
-
             return view;
         }
 
@@ -840,11 +704,11 @@ public int getItemViewType(int i) {
                 return 1;
             } else if (i == phoneRow) {
                 return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == settingsVibrateRow) {
+            } else if (i == sharedMediaRow || i == settingsTimerRow) {
                 return 3;
             } else if (i == settingsKeyRow) {
                 return 4;
-            } else if (i == settingsSoundRow) {
+            } else if (i == settingsNotificationsRow) {
                 return 5;
             }
             return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
index a2309d722..76ae5d374 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
@@ -170,7 +170,7 @@ public void setupAnimations(ArrayList<Animator> animators, boolean back) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Utilities.dp(40), MeasureSpec.EXACTLY));
         } else {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Utilities.dp(48), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
index 0872171dd..3cdcd8ddb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
@@ -40,9 +40,21 @@
 
 public class ActionBarActivity extends Activity {
 
+    private class FrameLayoutAnimationListener extends FrameLayout {
+        public FrameLayoutAnimationListener(Context context) {
+            super(context);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            ActionBarActivity.this.onAnimationEnd();
+        }
+    }
+
     protected ActionBar actionBar;
-    private FrameLayout containerView;
-    private FrameLayout containerViewBack;
+    private FrameLayoutAnimationListener containerView;
+    private FrameLayoutAnimationListener containerViewBack;
     protected FrameLayout contentView;
     private View shadowView;
 
@@ -52,6 +64,7 @@
     private boolean maybeStartTracking = false;
     protected boolean startedTracking = false;
     private int startedTrackingX;
+    private int startedTrackingY;
     protected boolean animationInProgress = false;
     private VelocityTracker velocityTracker = null;
     private boolean beginTrackingSent = false;
@@ -59,7 +72,8 @@
     private long transitionAnimationStartTime;
     private boolean inActionMode = false;
     private int startedTrackingPointerId;
-    private Animation.AnimationListener listener;
+    private Runnable onCloseAnimationEndRunnable = null;
+    private Runnable onOpenAnimationEndRunnable = null;
 
     private class FrameLayoutTouch extends FrameLayout {
         public FrameLayoutTouch(Context context) {
@@ -115,10 +129,10 @@ protected void onCreate(Bundle savedInstanceState) {
         contentView = new FrameLayoutTouch(this);
         setContentView(contentView, new ViewGroup.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
 
-        containerViewBack = new FrameLayout(this);
+        containerViewBack = new FrameLayoutAnimationListener(this);
         contentView.addView(containerViewBack);
 
-        containerView = new FrameLayout(this);
+        containerView = new FrameLayoutAnimationListener(this);
         contentView.addView(containerView);
 
         shadowView = new FrameLayout(this);
@@ -157,17 +171,20 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     protected void onResume() {
         super.onResume();
         fixLayout();
-        if (transitionAnimationInProgress && listener != null) {
-            openAnimation.cancel();
-            closeAnimation.cancel();
-            listener.onAnimationEnd(null);
+        if (transitionAnimationInProgress) {
+            if (onCloseAnimationEndRunnable != null) {
+                closeAnimation.cancel();
+                onCloseAnimationEnd(false);
+            } else if (onOpenAnimationEndRunnable != null) {
+                openAnimation.cancel();
+                onOpenAnimationEnd(false);
+            }
         }
         if (!fragmentsStack.isEmpty()) {
             BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
             lastFragment.onResume();
 
             actionBar.setCurrentActionBarLayer(lastFragment.actionBarLayer);
-            onShowFragment();
         }
     }
 
@@ -193,7 +210,7 @@ private void onSlideAnimationEnd(boolean backAnimation) {
             lastFragment.setParentActivity(null);
             fragmentsStack.remove(fragmentsStack.size() - 1);
 
-            FrameLayout temp = containerView;
+            FrameLayoutAnimationListener temp = containerView;
             containerView = containerViewBack;
             containerViewBack = temp;
             ViewGroup parent = (ViewGroup)containerView.getParent();
@@ -249,9 +266,14 @@ private void prepareForMoving(MotionEvent ev) {
     public boolean onTouchEvent(MotionEvent ev) {
         if(android.os.Build.VERSION.SDK_INT >= 11 && !checkTransitionAnimation() && !inActionMode && fragmentsStack.size() > 1 && !animationInProgress) {
             if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {
+                BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+                if (!currentFragment.swipeBackEnabled) {
+                    return false;
+                }
                 startedTrackingPointerId = ev.getPointerId(0);
                 maybeStartTracking = true;
                 startedTrackingX = (int) ev.getX();
+                startedTrackingY = (int) ev.getY();
                 if (velocityTracker != null) {
                     velocityTracker.clear();
                 }
@@ -260,8 +282,9 @@ public boolean onTouchEvent(MotionEvent ev) {
                     velocityTracker = VelocityTracker.obtain();
                 }
                 int dx = Math.max(0, (int) (ev.getX() - startedTrackingX));
+                int dy = Math.abs((int)ev.getY() - startedTrackingY);
                 velocityTracker.addMovement(ev);
-                if (maybeStartTracking && !startedTracking && dx >= Utilities.dp(10)) {
+                if (maybeStartTracking && !startedTracking && dx >= Utilities.dp(10) && Math.abs(dx) / 3 > dy) {
                     prepareForMoving(ev);
                 } else if (startedTracking) {
                     if (!beginTrackingSent) {
@@ -370,7 +393,7 @@ public void onBackPressed() {
                 onFinish();
                 finish();
             } else if (!fragmentsStack.isEmpty()) {
-                closeLastFragment();
+                closeLastFragment(true);
             }
         }
     }
@@ -386,6 +409,7 @@ public void onLowMemory() {
     public boolean checkTransitionAnimation() {
         if (transitionAnimationInProgress && transitionAnimationStartTime < System.currentTimeMillis() - 400) {
             transitionAnimationInProgress = false;
+            onAnimationEnd();
         }
         return transitionAnimationInProgress;
     }
@@ -414,7 +438,7 @@ public void needLayout() {
 
         int height = 0;
         if (actionBar.getVisibility() == View.VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 height = Utilities.dp(40);
             } else {
                 height = Utilities.dp(48);
@@ -460,6 +484,7 @@ private void presentFragmentInternalRemoveOld(boolean removeLast, final BaseFrag
                 }
             }
         }
+        containerViewBack.setVisibility(View.GONE);
     }
 
     public boolean presentFragment(BaseFragment fragment) {
@@ -480,13 +505,10 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
         boolean needAnimation = openAnimation != null && !forceWithoutAnimation && getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
 
         final BaseFragment currentFragment = !fragmentsStack.isEmpty() ? fragmentsStack.get(fragmentsStack.size() - 1) : null;
-        if (!needAnimation) {
-            presentFragmentInternalRemoveOld(removeLast, currentFragment);
-        }
 
         fragment.setParentActivity(this);
         View fragmentView = fragment.createView(getLayoutInflater(), null);
-        containerView.addView(fragmentView);
+        containerViewBack.addView(fragmentView);
         ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
@@ -497,39 +519,31 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
         if (fragmentView.getBackground() == null) {
             fragmentView.setBackgroundColor(0xffffffff);
         }
-        onShowFragment();
-        if (needAnimation) {
-            transitionAnimationStartTime = System.currentTimeMillis();
-            transitionAnimationInProgress = true;
-            openAnimation.reset();
-            openAnimation.setAnimationListener(listener = new Animation.AnimationListener() {
-                @Override
-                public void onAnimationStart(Animation animation) {
 
-                }
+        FrameLayoutAnimationListener temp = containerView;
+        containerView = containerViewBack;
+        containerViewBack = temp;
+        containerView.setVisibility(View.VISIBLE);
+        ViewGroup parent = (ViewGroup)containerView.getParent();
+        parent.removeView(containerView);
+        parent.addView(containerView, 1);
 
-                @Override
-                public void onAnimationEnd(Animation animation) {
-                    if (transitionAnimationInProgress) {
-                        transitionAnimationInProgress = false;
-                        transitionAnimationStartTime = 0;
-                        fragment.onOpenAnimationEnd();
-                        new Handler().post(new Runnable() {
-                            @Override
-                            public void run() {
-                                presentFragmentInternalRemoveOld(removeLast, currentFragment);
-                            }
-                        });
-                        listener = null;
-                    }
-                }
+        if (!needAnimation) {
+            presentFragmentInternalRemoveOld(removeLast, currentFragment);
+        }
 
+        if (needAnimation) {
+            transitionAnimationStartTime = System.currentTimeMillis();
+            transitionAnimationInProgress = true;
+            onOpenAnimationEndRunnable = new Runnable() {
                 @Override
-                public void onAnimationRepeat(Animation animation) {
-
+                public void run() {
+                    presentFragmentInternalRemoveOld(removeLast, currentFragment);
+                    fragment.onOpenAnimationEnd();
                 }
-            });
-            fragmentView.startAnimation(openAnimation);
+            };
+            openAnimation.reset();
+            containerView.startAnimation(openAnimation);
         } else {
             fragment.onOpenAnimationEnd();
         }
@@ -550,25 +564,31 @@ private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
         fragment.onFragmentDestroy();
         fragment.setParentActivity(null);
         fragmentsStack.remove(fragment);
+        containerViewBack.setVisibility(View.GONE);
+        ViewGroup parent = (ViewGroup)containerView.getParent();
+        parent.removeView(containerViewBack);
+        parent.addView(containerViewBack, 0);
     }
 
-    public void closeLastFragment() {
+    public void closeLastFragment(boolean animated) {
         if (fragmentsStack.size() <= 1 || checkTransitionAnimation()) {
             return;
         }
         if (getCurrentFocus() != null) {
             Utilities.hideKeyboard(getCurrentFocus());
         }
-        boolean needAnimation = openAnimation != null && getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
+        boolean needAnimation = animated && closeAnimation != null && getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
         final BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
         BaseFragment previousFragment = fragmentsStack.get(fragmentsStack.size() - 2);
-        if (!needAnimation) {
-            closeLastFragmentInternalRemoveOld(currentFragment);
-        }
+
+        FrameLayoutAnimationListener temp = containerView;
+        containerView = containerViewBack;
+        containerViewBack = temp;
+        containerView.setVisibility(View.VISIBLE);
 
         previousFragment.setParentActivity(this);
         View fragmentView = previousFragment.createView(getLayoutInflater(), null);
-        containerView.addView(fragmentView, 0);
+        containerView.addView(fragmentView);
         ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
@@ -578,38 +598,22 @@ public void closeLastFragment() {
         if (fragmentView.getBackground() == null) {
             fragmentView.setBackgroundColor(0xffffffff);
         }
-        onShowFragment();
+
+        if (!needAnimation) {
+            closeLastFragmentInternalRemoveOld(currentFragment);
+        }
+
         if (needAnimation) {
             transitionAnimationStartTime = System.currentTimeMillis();
             transitionAnimationInProgress = true;
             closeAnimation.reset();
-            closeAnimation.setFillAfter(true);
-            closeAnimation.setAnimationListener(listener = new Animation.AnimationListener() {
-                @Override
-                public void onAnimationStart(Animation animation) {
-
-                }
-
-                @Override
-                public void onAnimationEnd(Animation animation) {
-                    if (transitionAnimationInProgress) {
-                        transitionAnimationInProgress = false;
-                        transitionAnimationStartTime = 0;
-                        new Handler().post(new Runnable() {
-                            public void run() {
-                                closeLastFragmentInternalRemoveOld(currentFragment);
-                            }
-                        });
-                        listener = null;
-                    }
-                }
-
+            onCloseAnimationEndRunnable = new Runnable() {
                 @Override
-                public void onAnimationRepeat(Animation animation) {
-
+                public void run() {
+                    closeLastFragmentInternalRemoveOld(currentFragment);
                 }
-            });
-            currentFragment.fragmentView.startAnimation(closeAnimation);
+            };
+            containerViewBack.startAnimation(closeAnimation);
         }
     }
 
@@ -627,7 +631,6 @@ public void showLastFragment() {
         if (fragmentView.getBackground() == null) {
             fragmentView.setBackgroundColor(0xffffffff);
         }
-        onShowFragment();
     }
 
     public void removeFragmentFromStack(BaseFragment fragment) {
@@ -647,10 +650,6 @@ protected void onFinish() {
 
     }
 
-    protected void onShowFragment() {
-
-    }
-
     public void showActionBar() {
         actionBar.setVisibility(View.VISIBLE);
         needLayout();
@@ -664,7 +663,6 @@ public void hideActionBar() {
     public boolean onKeyUp(int keyCode, KeyEvent event) {
         if (keyCode == KeyEvent.KEYCODE_MENU && !checkTransitionAnimation() && !startedTracking) {
             actionBar.onMenuButtonPressed();
-            return true;
         }
         return super.onKeyUp(keyCode, event);
     }
@@ -691,13 +689,73 @@ public boolean onPreIme() {
         return false;
     }
 
+    private void onCloseAnimationEnd(boolean post) {
+        if (transitionAnimationInProgress && onCloseAnimationEndRunnable != null) {
+            transitionAnimationInProgress = false;
+            transitionAnimationStartTime = 0;
+            if (post) {
+                new Handler().post(new Runnable() {
+                    public void run() {
+                        onCloseAnimationEndRunnable.run();
+                        onCloseAnimationEndRunnable = null;
+                    }
+                });
+            } else {
+                onCloseAnimationEndRunnable.run();
+                onCloseAnimationEndRunnable = null;
+            }
+        }
+    }
+
+    private void onOpenAnimationEnd(boolean post) {
+        if (transitionAnimationInProgress && onOpenAnimationEndRunnable != null) {
+            transitionAnimationInProgress = false;
+            transitionAnimationStartTime = 0;
+            if (post) {
+                new Handler().post(new Runnable() {
+                    public void run() {
+                        onOpenAnimationEndRunnable.run();
+                        onOpenAnimationEndRunnable = null;
+                    }
+                });
+            } else {
+                onOpenAnimationEndRunnable.run();
+                onOpenAnimationEndRunnable = null;
+            }
+        }
+    }
+
+    private void onAnimationEnd() {
+        onCloseAnimationEnd(false);
+        onOpenAnimationEnd(false);
+    }
+
     @Override
-    public void startActivityForResult(Intent intent, int requestCode) {
-        if (transitionAnimationInProgress && listener != null) {
-            openAnimation.cancel();
-            closeAnimation.cancel();
-            listener.onAnimationEnd(null);
+    public void startActivityForResult(final Intent intent, final int requestCode) {
+        if (transitionAnimationInProgress) {
+            if (onCloseAnimationEndRunnable != null) {
+                closeAnimation.cancel();
+                onCloseAnimationEnd(false);
+            } else if (onOpenAnimationEndRunnable != null) {
+                openAnimation.cancel();
+                onOpenAnimationEnd(false);
+            }
+            containerView.invalidate();
+            if (intent != null) {
+                try {
+                    ActionBarActivity.super.startActivityForResult(intent, requestCode);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        } else {
+            if (intent != null) {
+                try {
+                    super.startActivityForResult(intent, requestCode);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
         }
-        super.startActivityForResult(intent, requestCode);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
index 2096d434d..5e8567a18 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
@@ -107,7 +107,7 @@ private void positionBackImage(int height) {
     private void positionLogoImage(int height) {
         if (logoImageView != null) {
             LayoutParams layoutParams = (LayoutParams) logoImageView.getLayoutParams();
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 layoutParams.width = (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
                 layoutParams.height = (int)(logoImageView.getDrawable().getIntrinsicHeight() / 1.3f);
                 layoutParams.setMargins(Utilities.dp(12), (height - layoutParams.height) / 2, 0, 0);
@@ -123,7 +123,7 @@ private void positionLogoImage(int height) {
 
     private void positionTitle(int width, int height) {
         int offset = Utilities.dp(2);
-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             offset = Utilities.dp(1);
         }
         int maxTextWidth = 0;
@@ -131,7 +131,7 @@ private void positionTitle(int width, int height) {
         LayoutParams layoutParams = null;
 
         if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 titleTextView.setTextSize(16);
             } else {
                 titleTextView.setTextSize(18);
@@ -146,7 +146,7 @@ private void positionTitle(int width, int height) {
             maxTextWidth = titleTextView.getMeasuredWidth();
         }
         if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 subTitleTextView.setTextSize(12);
             } else {
                 subTitleTextView.setTextSize(14);
@@ -165,7 +165,7 @@ private void positionTitle(int width, int height) {
         if (logoImageView == null || logoImageView.getVisibility() == GONE) {
             x = Utilities.dp(16);
         } else {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 x = Utilities.dp(22) + (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
             } else {
                 x = Utilities.dp(22) + logoImageView.getDrawable().getIntrinsicWidth();
@@ -243,6 +243,7 @@ public void setSubtitle(CharSequence value) {
         if (value != null && subTitleTextView == null) {
             subTitleTextView = new TextView(getContext());
             backButtonFrameLayout.addView(subTitleTextView);
+            subTitleTextView.setGravity(Gravity.LEFT);
             subTitleTextView.setTextColor(0xffd7e8f7);
             subTitleTextView.setSingleLine(true);
             subTitleTextView.setLines(1);
@@ -260,6 +261,7 @@ public void setSubTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && subTitleTextView == null) {
             subTitleTextView = new TextView(getContext());
             backButtonFrameLayout.addView(subTitleTextView);
+            subTitleTextView.setGravity(Gravity.LEFT);
             subTitleTextView.setTextColor(0xffd7e8f7);
             subTitleTextView.setSingleLine(true);
             subTitleTextView.setLines(1);
@@ -276,7 +278,10 @@ public void setSubTitleIcon(int resourceId, int padding) {
     public void setTitle(CharSequence value) {
         if (value != null && titleTextView == null) {
             titleTextView = new TextView(getContext());
+            titleTextView.setGravity(Gravity.LEFT);
             titleTextView.setSingleLine(true);
+            titleTextView.setLines(1);
+            titleTextView.setMaxLines(1);
             titleTextView.setEllipsize(TextUtils.TruncateAt.END);
             backButtonFrameLayout.addView(titleTextView);
             titleTextView.setTextColor(0xffffffff);
@@ -291,6 +296,7 @@ public void setTitle(CharSequence value) {
     public void setTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && titleTextView == null) {
             titleTextView = new TextView(getContext());
+            titleTextView.setGravity(Gravity.LEFT);
             backButtonFrameLayout.addView(titleTextView);
             titleTextView.setTextColor(0xffffffff);
             titleTextView.setSingleLine(true);
@@ -377,7 +383,7 @@ public void hideActionMode() {
         }
         actionMode.setVisibility(GONE);
         if (backButtonFrameLayout != null) {
-            backButtonFrameLayout.setVisibility(VISIBLE);
+            backButtonFrameLayout.setVisibility(isSearchFieldVisible || actionOverlay == null || actionOverlay.getVisibility() == GONE ? VISIBLE : INVISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(VISIBLE);
@@ -455,6 +461,7 @@ public void setBackOverlay(int resourceId) {
         LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         actionOverlay = li.inflate(resourceId, null);
         addView(actionOverlay);
+        actionOverlay.setVisibility(GONE);
         actionOverlay.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -470,10 +477,10 @@ public void setBackOverlayVisible(boolean visible) {
             return;
         }
         isBackOverlayVisible = visible;
-        positionBackOverlay(getMeasuredWidth(), getMeasuredHeight());
         if (visible) {
             ((ActionBarActivity)getContext()).onOverlayShow(actionOverlay, parentFragment);
         }
+        positionBackOverlay(getMeasuredWidth(), getMeasuredHeight());
     }
 
     private void positionBackOverlay(int widthMeasureSpec, int heightMeasureSpec) {
@@ -484,9 +491,12 @@ private void positionBackOverlay(int widthMeasureSpec, int heightMeasureSpec) {
         actionOverlay.setVisibility(!isSearchFieldVisible && isBackOverlayVisible ? VISIBLE : GONE);
         if (actionOverlay.getVisibility() == VISIBLE) {
             ViewGroup.LayoutParams layoutParams = actionOverlay.getLayoutParams();
-            layoutParams.width = widthMeasureSpec - (menu != null ? menu.getMeasuredWidth() : 0);
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
             layoutParams.height = LayoutParams.MATCH_PARENT;
             actionOverlay.setLayoutParams(layoutParams);
+            actionOverlay.measure(widthMeasureSpec, heightMeasureSpec);
+            layoutParams.width = Math.min(actionOverlay.getMeasuredWidth() + Utilities.dp(4), widthMeasureSpec - (menu != null ? menu.getMeasuredWidth() : 0));
+            actionOverlay.setLayoutParams(layoutParams);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
index 2936dbad1..a655d93d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
@@ -9,13 +9,14 @@
 package org.telegram.ui.Views.ActionBar;
 
 import android.content.Context;
-import android.graphics.drawable.BitmapDrawable;
+import android.graphics.Rect;
 import android.os.Build;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.KeyEvent;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
@@ -38,13 +39,16 @@
         public abstract void onTextChanged(EditText editText);
     }
 
-    private LinearLayout popupLayout;
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
     private ActionBarMenu parentMenu;
     private ActionBarPopupWindow popupWindow;
     private ActionBar parentActionBar;
     private EditText searchField;
     private boolean isSearchField = false;
     private ActionBarMenuItemSearchListener listener;
+    private Rect rect = null;
+    private int[] location = null;
+    private View selectedMenuView = null;
 
     public ActionBarMenuItem(Context context, ActionBarMenu menu, ActionBar actionBar, int background) {
         super(context);
@@ -65,11 +69,82 @@ public ActionBarMenuItem(Context context, AttributeSet attrs, int defStyleAttr)
         super(context, attrs, defStyleAttr);
     }
 
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+            if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
+                if (event.getY() > getHeight()) {
+                    if (getParent() != null) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    toggleSubMenu();
+                    return true;
+                }
+            } else if (popupWindow != null && popupWindow.isShowing()) {
+                getLocationOnScreen(location);
+                float x = event.getX() + location[0];
+                float y = event.getY() + location[1];
+                popupLayout.getLocationOnScreen(location);
+                x -= location[0];
+                y -= location[1];
+                selectedMenuView = null;
+                for (int a = 0; a < popupLayout.getChildCount(); a++) {
+                    View child = popupLayout.getChildAt(a);
+                    child.getHitRect(rect);
+                    if ((Integer)child.getTag() < 100) {
+                        if (!rect.contains((int)x, (int)y)) {
+                            child.setSelected(false);
+                        } else {
+                            child.setSelected(true);
+                            selectedMenuView = child;
+                        }
+                    }
+                }
+            }
+        } else if (popupWindow != null && popupWindow.isShowing() && event.getActionMasked() == MotionEvent.ACTION_UP) {
+            if (selectedMenuView != null) {
+                selectedMenuView.setSelected(false);
+                parentMenu.onItemClick((Integer) selectedMenuView.getTag());
+            }
+            popupWindow.dismiss();
+        } else {
+            if (selectedMenuView != null) {
+                selectedMenuView.setSelected(false);
+                selectedMenuView = null;
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
     public void addSubItem(int id, String text, int icon) {
         if (popupLayout == null) {
-            popupLayout = new LinearLayout(getContext());
+            rect = new Rect();
+            location = new int[2];
+            popupLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
             popupLayout.setOrientation(LinearLayout.VERTICAL);
             popupLayout.setBackgroundResource(R.drawable.popup_fixed);
+            popupLayout.setOnTouchListener(new OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+                        if (popupWindow != null && popupWindow.isShowing()) {
+                            v.getHitRect(rect);
+                            if (!rect.contains((int)event.getX(), (int)event.getY())) {
+                                popupWindow.dismiss();
+                            }
+                        }
+                    }
+                    return false;
+                }
+            });
+            popupLayout.setDispatchKeyEventListener(new ActionBarPopupWindow.OnDispatchKeyEventListener() {
+                @Override
+                public void onDispatchKeyEvent(KeyEvent keyEvent) {
+                    if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && popupWindow != null && popupWindow.isShowing()) {
+                        popupWindow.dismiss();
+                    }
+                }
+            });
         }
         if (popupLayout.getChildCount() != 0) {
             View delimeter = new View(getContext());
@@ -121,14 +196,14 @@ public void toggleSubMenu() {
         }
         if (popupWindow == null) {
             popupWindow = new ActionBarPopupWindow(popupLayout, FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);
-            popupWindow.setFocusable(true);
-            popupWindow.setBackgroundDrawable(new BitmapDrawable());
+            //popupWindow.setBackgroundDrawable(new BitmapDrawable());
             popupWindow.setOutsideTouchable(true);
             popupWindow.setClippingEnabled(true);
             popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
             popupWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED);
             popupLayout.measure(MeasureSpec.makeMeasureSpec(Utilities.dp(1000), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(Utilities.dp(1000), MeasureSpec.AT_MOST));
         }
+        popupWindow.setFocusable(true);
         if (popupLayout.getMeasuredWidth() == 0) {
             popupWindow.showAsDropDown(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0);
             popupWindow.update(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0, -1, -1);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
index a011316d1..698ab7c39 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
@@ -12,8 +12,10 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
+import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewTreeObserver;
+import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 
 import java.lang.reflect.Field;
@@ -41,6 +43,39 @@ public void onScrollChanged() {
     private ViewTreeObserver.OnScrollChangedListener mSuperScrollListener;
     private ViewTreeObserver mViewTreeObserver;
 
+    public static interface OnDispatchKeyEventListener {
+        public void onDispatchKeyEvent(KeyEvent keyEvent);
+    }
+
+    public static class ActionBarPopupWindowLayout extends LinearLayout {
+
+        private OnDispatchKeyEventListener mOnDispatchKeyEventListener;
+
+        public ActionBarPopupWindowLayout(Context context) {
+            super(context);
+        }
+
+        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        public void setDispatchKeyEventListener(OnDispatchKeyEventListener listener) {
+            mOnDispatchKeyEventListener = listener;
+        }
+
+        @Override
+        public boolean dispatchKeyEvent(KeyEvent event) {
+            if (mOnDispatchKeyEventListener != null) {
+                mOnDispatchKeyEventListener.onDispatchKeyEvent(event);
+            }
+            return super.dispatchKeyEvent(event);
+        }
+    }
+
     public ActionBarPopupWindow() {
         super();
         init();
@@ -98,7 +133,6 @@ private void init() {
     }
 
     private void unregisterListener() {
-        // Don't do anything if we haven't managed to patch the super listener
         if (mSuperScrollListener != null && mViewTreeObserver != null) {
             if (mViewTreeObserver.isAlive()) {
                 mViewTreeObserver.removeOnScrollChangedListener(mSuperScrollListener);
@@ -108,13 +142,8 @@ private void unregisterListener() {
     }
 
     private void registerListener(View anchor) {
-        // Don't do anything if we haven't managed to patch the super listener.
-        // And don't bother attaching the listener if the anchor view isn't
-        // attached. This means we'll only have to deal with the real VTO owned
-        // by the ViewRoot.
         if (mSuperScrollListener != null) {
-            ViewTreeObserver vto = (anchor.getWindowToken() != null) ? anchor.getViewTreeObserver()
-                    : null;
+            ViewTreeObserver vto = (anchor.getWindowToken() != null) ? anchor.getViewTreeObserver() : null;
             if (vto != mViewTreeObserver) {
                 if (mViewTreeObserver != null && mViewTreeObserver.isAlive()) {
                     mViewTreeObserver.removeOnScrollChangedListener(mSuperScrollListener);
@@ -152,6 +181,7 @@ public void showAtLocation(View parent, int gravity, int x, int y) {
 
     @Override
     public void dismiss() {
+        setFocusable(false);
         super.dismiss();
         unregisterListener();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
index 1e7b14963..8ffc9c4ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
@@ -28,6 +28,7 @@
     protected int classGuid = 0;
     protected Bundle arguments;
     private AlertDialog visibleDialog = null;
+    protected boolean swipeBackEnabled = true;
 
     public BaseFragment() {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
@@ -69,10 +70,14 @@ public void setParentActivity(ActionBarActivity activity) {
     }
 
     public void finishFragment() {
+        finishFragment(true);
+    }
+
+    public void finishFragment(boolean animated) {
         if (isFinished || parentActivity == null) {
             return;
         }
-        parentActivity.closeLastFragment();
+        parentActivity.closeLastFragment(animated);
     }
 
     public void removeSelfFromStack() {
@@ -196,9 +201,13 @@ protected void showAlertDialog(AlertDialog.Builder builder) {
         if (parentActivity == null || parentActivity.checkTransitionAnimation() || parentActivity.animationInProgress || parentActivity.startedTracking) {
             return;
         }
-        if (visibleDialog != null && visibleDialog.isShowing()) {
-            visibleDialog.dismiss();
-            visibleDialog = null;
+        try {
+            if (visibleDialog != null) {
+                visibleDialog.dismiss();
+                visibleDialog = null;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
         }
         visibleDialog = builder.show();
         visibleDialog.setCanceledOnTouchOutside(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
index 91c5ca97d..0deea1222 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
@@ -129,7 +129,7 @@ private void processBitmap(Bitmap bitmap) {
                 uploadingAvatar = Utilities.getCacheDir() + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
                 NotificationCenter.getInstance().addObserver(AvatarUpdater.this, FileLoader.FileDidUpload);
                 NotificationCenter.getInstance().addObserver(AvatarUpdater.this, FileLoader.FileDidFailUpload);
-                FileLoader.getInstance().uploadFile(uploadingAvatar, null, null);
+                FileLoader.getInstance().uploadFile(uploadingAvatar, false);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
new file mode 100644
index 000000000..7386dea6a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
@@ -0,0 +1,383 @@
+/*
+ * Copyright 2012 Lars Werkman
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.SweepGradient;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+
+import org.telegram.messenger.Utilities;
+
+public class ColorPickerView extends View {
+
+    private static final String STATE_PARENT = "parent";
+    private static final String STATE_ANGLE = "angle";
+    private static final String STATE_OLD_COLOR = "color";
+    private static final String STATE_SHOW_OLD_COLOR = "showColor";
+
+    private static final int[] COLORS = new int[] { 0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFFFF, 0xFFFFFF00, 0xFFFF0000 };
+
+    private Paint mColorWheelPaint;
+    private Paint mPointerHaloPaint;
+    private Paint mPointerColor;
+    private int mColorWheelThickness;
+    private int mColorWheelRadius;
+    private int mPreferredColorWheelRadius;
+    private int mColorCenterRadius;
+    private int mPreferredColorCenterRadius;
+    private int mColorCenterHaloRadius;
+    private int mPreferredColorCenterHaloRadius;
+    private int mColorPointerRadius;
+    private int mColorPointerHaloRadius;
+    private RectF mColorWheelRectangle = new RectF();
+    private RectF mCenterRectangle = new RectF();
+    private boolean mUserIsMovingPointer = false;
+    private int mCenterOldColor;
+    private boolean mShowCenterOldColor;
+    private int mCenterNewColor;
+    private float mTranslationOffset;
+    private float mSlopX;
+    private float mSlopY;
+    private float mAngle;
+    private Paint mCenterOldPaint;
+    private Paint mCenterNewPaint;
+    private Paint mCenterHaloPaint;
+    private float[] mHSV = new float[3];
+
+    private OnColorChangedListener onColorChangedListener;
+    private OnColorSelectedListener onColorSelectedListener;
+
+    private int oldChangedListenerColor;
+    private int oldSelectedListenerColor;
+
+    public ColorPickerView(Context context) {
+        super(context);
+        init(null, 0);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(attrs, 0);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init(attrs, defStyle);
+    }
+
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    public interface OnColorSelectedListener {
+        public void onColorSelected(int color);
+    }
+
+    public void setOnColorChangedListener(OnColorChangedListener listener) {
+        this.onColorChangedListener = listener;
+    }
+
+    public void setOnColorSelectedListener(OnColorSelectedListener listener) {
+        this.onColorSelectedListener = listener;
+    }
+
+    private void init(AttributeSet attrs, int defStyle) {
+        mColorWheelThickness = Utilities.dp(8);
+        mColorWheelRadius = Utilities.dp(124);
+        mPreferredColorWheelRadius = mColorWheelRadius;
+        mColorCenterRadius = Utilities.dp(54);
+        mPreferredColorCenterRadius = mColorCenterRadius;
+        mColorCenterHaloRadius = Utilities.dp(60);
+        mPreferredColorCenterHaloRadius = mColorCenterHaloRadius;
+        mColorPointerRadius = Utilities.dp(14);
+        mColorPointerHaloRadius = Utilities.dp(18);
+
+        mAngle = (float) (-Math.PI / 2);
+
+        Shader s = new SweepGradient(0, 0, COLORS, null);
+
+        mColorWheelPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mColorWheelPaint.setShader(s);
+        mColorWheelPaint.setStyle(Paint.Style.STROKE);
+        mColorWheelPaint.setStrokeWidth(mColorWheelThickness);
+
+        mPointerHaloPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mPointerHaloPaint.setColor(Color.BLACK);
+        mPointerHaloPaint.setAlpha(0x50);
+
+        mPointerColor = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mPointerColor.setColor(calculateColor(mAngle));
+
+        mCenterNewPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mCenterNewPaint.setColor(calculateColor(mAngle));
+        mCenterNewPaint.setStyle(Paint.Style.FILL);
+
+        mCenterOldPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mCenterOldPaint.setColor(calculateColor(mAngle));
+        mCenterOldPaint.setStyle(Paint.Style.FILL);
+
+        mCenterHaloPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mCenterHaloPaint.setColor(Color.BLACK);
+        mCenterHaloPaint.setAlpha(0x00);
+
+        mCenterNewColor = calculateColor(mAngle);
+        mCenterOldColor = calculateColor(mAngle);
+        mShowCenterOldColor = true;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        canvas.translate(mTranslationOffset, mTranslationOffset);
+        canvas.drawOval(mColorWheelRectangle, mColorWheelPaint);
+
+        float[] pointerPosition = calculatePointerPosition(mAngle);
+
+        canvas.drawCircle(pointerPosition[0], pointerPosition[1], mColorPointerHaloRadius, mPointerHaloPaint);
+        canvas.drawCircle(pointerPosition[0], pointerPosition[1], mColorPointerRadius, mPointerColor);
+        canvas.drawCircle(0, 0, mColorCenterHaloRadius, mCenterHaloPaint);
+
+        if (mShowCenterOldColor) {
+            canvas.drawArc(mCenterRectangle, 90, 180, true, mCenterOldPaint);
+            canvas.drawArc(mCenterRectangle, 270, 180, true, mCenterNewPaint);
+        } else {
+            canvas.drawArc(mCenterRectangle, 0, 360, true, mCenterNewPaint);
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        final int intrinsicSize = 2 * (mPreferredColorWheelRadius + mColorPointerHaloRadius);
+
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+        int width;
+        int height;
+
+        if (widthMode == MeasureSpec.EXACTLY) {
+            width = widthSize;
+        } else if (widthMode == MeasureSpec.AT_MOST) {
+            width = Math.min(intrinsicSize, widthSize);
+        } else {
+            width = intrinsicSize;
+        }
+
+        if (heightMode == MeasureSpec.EXACTLY) {
+            height = heightSize;
+        } else if (heightMode == MeasureSpec.AT_MOST) {
+            height = Math.min(intrinsicSize, heightSize);
+        } else {
+            height = intrinsicSize;
+        }
+
+        int min = Math.min(width, height);
+        setMeasuredDimension(min, min);
+        mTranslationOffset = min * 0.5f;
+
+        mColorWheelRadius = min / 2 - mColorWheelThickness - mColorPointerHaloRadius;
+        mColorWheelRectangle.set(-mColorWheelRadius, -mColorWheelRadius, mColorWheelRadius, mColorWheelRadius);
+
+        mColorCenterRadius = (int) ((float) mPreferredColorCenterRadius * ((float) mColorWheelRadius / (float) mPreferredColorWheelRadius));
+        mColorCenterHaloRadius = (int) ((float) mPreferredColorCenterHaloRadius * ((float) mColorWheelRadius / (float) mPreferredColorWheelRadius));
+        mCenterRectangle.set(-mColorCenterRadius, -mColorCenterRadius, mColorCenterRadius, mColorCenterRadius);
+    }
+
+    private int ave(int s, int d, float p) {
+        return s + java.lang.Math.round(p * (d - s));
+    }
+
+    private int calculateColor(float angle) {
+        float unit = (float) (angle / (2 * Math.PI));
+        if (unit < 0) {
+            unit += 1;
+        }
+
+        if (unit <= 0) {
+            return COLORS[0];
+        }
+        if (unit >= 1) {
+            return COLORS[COLORS.length - 1];
+        }
+
+        float p = unit * (COLORS.length - 1);
+        int i = (int) p;
+        p -= i;
+
+        int c0 = COLORS[i];
+        int c1 = COLORS[i + 1];
+        int a = ave(Color.alpha(c0), Color.alpha(c1), p);
+        int r = ave(Color.red(c0), Color.red(c1), p);
+        int g = ave(Color.green(c0), Color.green(c1), p);
+        int b = ave(Color.blue(c0), Color.blue(c1), p);
+
+        return Color.argb(a, r, g, b);
+    }
+
+    public int getColor() {
+        return mCenterNewColor;
+    }
+
+    public void setColor(int color) {
+        mAngle = colorToAngle(color);
+        mPointerColor.setColor(calculateColor(mAngle));
+        mCenterNewPaint.setColor(calculateColor(mAngle));
+
+        invalidate();
+    }
+
+    private float colorToAngle(int color) {
+        float[] colors = new float[3];
+        Color.colorToHSV(color, colors);
+
+        return (float) Math.toRadians(-colors[0]);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        getParent().requestDisallowInterceptTouchEvent(true);
+
+        float x = event.getX() - mTranslationOffset;
+        float y = event.getY() - mTranslationOffset;
+
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                float[] pointerPosition = calculatePointerPosition(mAngle);
+                if (x >= (pointerPosition[0] - mColorPointerHaloRadius) && x <= (pointerPosition[0] + mColorPointerHaloRadius) && y >= (pointerPosition[1] - mColorPointerHaloRadius) && y <= (pointerPosition[1] + mColorPointerHaloRadius)) {
+                    mSlopX = x - pointerPosition[0];
+                    mSlopY = y - pointerPosition[1];
+                    mUserIsMovingPointer = true;
+                    invalidate();
+                } else if (x >= -mColorCenterRadius && x <= mColorCenterRadius && y >= -mColorCenterRadius && y <= mColorCenterRadius && mShowCenterOldColor) {
+                    mCenterHaloPaint.setAlpha(0x50);
+                    setColor(getOldCenterColor());
+                    invalidate();
+                } else {
+                    getParent().requestDisallowInterceptTouchEvent(false);
+                    return false;
+                }
+                break;
+            case MotionEvent.ACTION_MOVE:
+                if (mUserIsMovingPointer) {
+                    mAngle = (float) java.lang.Math.atan2(y - mSlopY, x - mSlopX);
+                    mPointerColor.setColor(calculateColor(mAngle));
+                    setNewCenterColor(mCenterNewColor = calculateColor(mAngle));
+                    invalidate();
+                } else {
+                    getParent().requestDisallowInterceptTouchEvent(false);
+                    return false;
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                mUserIsMovingPointer = false;
+                mCenterHaloPaint.setAlpha(0x00);
+
+                if (onColorSelectedListener != null && mCenterNewColor != oldSelectedListenerColor) {
+                    onColorSelectedListener.onColorSelected(mCenterNewColor);
+                    oldSelectedListenerColor = mCenterNewColor;
+                }
+
+                invalidate();
+                break;
+            case MotionEvent.ACTION_CANCEL:
+                if (onColorSelectedListener != null && mCenterNewColor != oldSelectedListenerColor) {
+                    onColorSelectedListener.onColorSelected(mCenterNewColor);
+                    oldSelectedListenerColor = mCenterNewColor;
+                }
+                break;
+        }
+        return true;
+    }
+
+    private float[] calculatePointerPosition(float angle) {
+        float x = (float) (mColorWheelRadius * Math.cos(angle));
+        float y = (float) (mColorWheelRadius * Math.sin(angle));
+
+        return new float[] { x, y };
+    }
+
+    public void setNewCenterColor(int color) {
+        mCenterNewColor = color;
+        mCenterNewPaint.setColor(color);
+        if (mCenterOldColor == 0) {
+            mCenterOldColor = color;
+            mCenterOldPaint.setColor(color);
+        }
+        if (onColorChangedListener != null && color != oldChangedListenerColor ) {
+            onColorChangedListener.onColorChanged(color);
+            oldChangedListenerColor  = color;
+        }
+        invalidate();
+    }
+
+    public void setOldCenterColor(int color) {
+        mCenterOldColor = color;
+        mCenterOldPaint.setColor(color);
+        invalidate();
+    }
+
+    public int getOldCenterColor() {
+        return mCenterOldColor;
+    }
+
+    public void setShowOldCenterColor(boolean show) {
+        mShowCenterOldColor = show;
+        invalidate();
+    }
+
+    public boolean getShowOldCenterColor() {
+        return mShowCenterOldColor;
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Parcelable superState = super.onSaveInstanceState();
+
+        Bundle state = new Bundle();
+        state.putParcelable(STATE_PARENT, superState);
+        state.putFloat(STATE_ANGLE, mAngle);
+        state.putInt(STATE_OLD_COLOR, mCenterOldColor);
+        state.putBoolean(STATE_SHOW_OLD_COLOR, mShowCenterOldColor);
+
+        return state;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        Bundle savedState = (Bundle) state;
+
+        Parcelable superState = savedState.getParcelable(STATE_PARENT);
+        super.onRestoreInstanceState(superState);
+
+        mAngle = savedState.getFloat(STATE_ANGLE);
+        setOldCenterColor(savedState.getInt(STATE_OLD_COLOR));
+        mShowCenterOldColor = savedState.getBoolean(STATE_SHOW_OLD_COLOR);
+        int currentColor = calculateColor(mAngle);
+        mPointerColor.setColor(currentColor);
+        setNewCenterColor(currentColor);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
index 023a7b4c2..cb162010c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
@@ -9,6 +9,7 @@
 package org.telegram.ui.Views;
 
 import android.content.Context;
+import android.database.DataSetObserver;
 import android.graphics.drawable.GradientDrawable;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
@@ -100,62 +101,58 @@ private String convert(long paramLong) {
     }
 
     private void init() {
-        setOrientation(1);
-        for (int i = 0; ; i++) {
-            if (i >= Emoji.data.length) {
-                setBackgroundDrawable(new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { -14145496, -16777216 }));
-                pager = new ViewPager(getContext());
-                pager.setAdapter(new EmojiPagesAdapter());
-                PagerSlidingTabStrip tabs = new PagerSlidingTabStrip(getContext());
-                tabs.setViewPager(this.pager);
-                tabs.setShouldExpand(true);
-                tabs.setIndicatorColor(0xff33b5e5);
-                tabs.setIndicatorHeight(Utilities.dpf(2.0f));
-                tabs.setUnderlineHeight(Utilities.dpf(2.0f));
-                tabs.setUnderlineColor(1711276032);
-                tabs.setTabBackground(0);
-                LinearLayout localLinearLayout = new LinearLayout(getContext());
-                localLinearLayout.setOrientation(0);
-                localLinearLayout.addView(tabs, new LinearLayout.LayoutParams(-1, -1, 1.0F));
-                ImageView localImageView = new ImageView(getContext());
-                localImageView.setImageResource(R.drawable.ic_emoji_backspace);
-                localImageView.setScaleType(ImageView.ScaleType.CENTER);
-                localImageView.setBackgroundResource(R.drawable.bg_emoji_bs);
-                localImageView.setOnClickListener(new View.OnClickListener() {
-                    public void onClick(View paramAnonymousView) {
-                        if (EmojiView.this.listener != null) {
-                            EmojiView.this.listener.onBackspace();
-                        }
-                    }
-                });
-                localImageView.setOnLongClickListener(new View.OnLongClickListener() {
-                    public boolean onLongClick(View paramAnonymousView) {
-                        EmojiView.this.getContext().getSharedPreferences("emoji", 0).edit().clear().commit();
-                        return true;
-                    }
-                });
-                localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(Utilities.dpf(61.0f), -1));
-                this.recentsWrap = new FrameLayout(getContext());
-                this.recentsWrap.addView(this.views.get(0));
-                TextView localTextView = new TextView(getContext());
-                localTextView.setText(LocaleController.getString("NoRecent", R.string.NoRecent));
-                localTextView.setTextSize(18.0f);
-                localTextView.setTextColor(-7829368);
-                localTextView.setGravity(17);
-                this.recentsWrap.addView(localTextView);
-                this.views.get(0).setEmptyView(localTextView);
-                addView(localLinearLayout, new LinearLayout.LayoutParams(-1, Utilities.dpf(48.0f)));
-                addView(this.pager);
-                loadRecents();
-                return;
-            }
-            GridView localGridView = new GridView(getContext());
-            localGridView.setColumnWidth(Utilities.dpf(45.0f));
-            localGridView.setNumColumns(-1);
+        setOrientation(LinearLayout.VERTICAL);
+        for (int i = 0; i < Emoji.data.length; i++) {
+            GridView gridView = new GridView(getContext());
+            gridView.setColumnWidth(Utilities.dpf(45.0f));
+            gridView.setNumColumns(-1);
+            views.add(gridView);
+
             EmojiGridAdapter localEmojiGridAdapter = new EmojiGridAdapter(Emoji.data[i]);
-            localGridView.setAdapter(localEmojiGridAdapter);
-            this.adapters.add(localEmojiGridAdapter);
-            this.views.add(localGridView);
+            gridView.setAdapter(localEmojiGridAdapter);
+            adapters.add(localEmojiGridAdapter);
+        }
+
+        setBackgroundDrawable(new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { -14145496, -16777216 }));
+        pager = new ViewPager(getContext());
+        pager.setAdapter(new EmojiPagesAdapter());
+        PagerSlidingTabStrip tabs = new PagerSlidingTabStrip(getContext());
+        tabs.setViewPager(pager);
+        tabs.setShouldExpand(true);
+        tabs.setIndicatorColor(0xff33b5e5);
+        tabs.setIndicatorHeight(Utilities.dpf(2.0f));
+        tabs.setUnderlineHeight(Utilities.dpf(2.0f));
+        tabs.setUnderlineColor(1711276032);
+        tabs.setTabBackground(0);
+        LinearLayout localLinearLayout = new LinearLayout(getContext());
+        localLinearLayout.setOrientation(LinearLayout.HORIZONTAL);
+        localLinearLayout.addView(tabs, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f));
+        ImageView localImageView = new ImageView(getContext());
+        localImageView.setImageResource(R.drawable.ic_emoji_backspace);
+        localImageView.setScaleType(ImageView.ScaleType.CENTER);
+        localImageView.setBackgroundResource(R.drawable.bg_emoji_bs);
+        localImageView.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View view) {
+                if (EmojiView.this.listener != null) {
+                    EmojiView.this.listener.onBackspace();
+                }
+            }
+        });
+        localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(Utilities.dpf(61.0f), LayoutParams.MATCH_PARENT));
+        recentsWrap = new FrameLayout(getContext());
+        recentsWrap.addView(views.get(0));
+        TextView localTextView = new TextView(getContext());
+        localTextView.setText(LocaleController.getString("NoRecent", R.string.NoRecent));
+        localTextView.setTextSize(18.0f);
+        localTextView.setTextColor(-7829368);
+        localTextView.setGravity(17);
+        recentsWrap.addView(localTextView);
+        views.get(0).setEmptyView(localTextView);
+        addView(localLinearLayout, new LinearLayout.LayoutParams(-1, Utilities.dpf(48.0f)));
+        addView(pager);
+        loadRecents();
+        if (Emoji.data[0] == null || Emoji.data[0].length == 0) {
+            pager.setCurrentItem(1);
         }
     }
 
@@ -236,11 +233,11 @@ public void onMeasure(int paramAnonymousInt1, int paramAnonymousInt2) {
                     }
                 };
                 localObject.setOnClickListener(new View.OnClickListener() {
-                    public void onClick(View paramAnonymousView) {
+                    public void onClick(View view) {
                         if (EmojiView.this.listener != null) {
-                            EmojiView.this.listener.onEmojiSelected(EmojiView.this.convert((Long)paramAnonymousView.getTag()));
+                            EmojiView.this.listener.onEmojiSelected(EmojiView.this.convert((Long)view.getTag()));
                         }
-                        EmojiView.this.addToRecent((Long)paramAnonymousView.getTag());
+                        EmojiView.this.addToRecent((Long)view.getTag());
                     }
                 });
                 localObject.setBackgroundResource(R.drawable.list_selector);
@@ -251,6 +248,13 @@ public void onClick(View paramAnonymousView) {
             localObject.setTag(this.data[paramInt]);
             return localObject;
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 
     private class EmojiPagesAdapter extends PagerAdapter implements PagerSlidingTabStrip.IconTabProvider {
@@ -290,6 +294,13 @@ public Object instantiateItem(ViewGroup paramViewGroup, int paramInt) {
         public boolean isViewFromObject(View paramView, Object paramObject) {
             return paramView == paramObject;
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 
     public static abstract interface Listener {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
index b6ca4be63..d9cad0479 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
@@ -113,7 +113,7 @@ public void setSelection(int position) {
 
     @Override
     public void setAdapter(ListAdapter adapter) {
-        if(mAdapter != null) {
+        if(mAdapter != null && mDataObserver != null) {
             mAdapter.unregisterDataSetObserver(mDataObserver);
         }
         mAdapter = adapter;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java
index f4c272852..6d31c0b40 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java
@@ -17,6 +17,8 @@
 import android.widget.*;
 import android.widget.AbsListView.OnScrollListener;
 
+import org.telegram.messenger.FileLog;
+
 public class PinnedHeaderListView extends ListView implements OnScrollListener, View.OnTouchListener {
 
     private OnScrollListener mOnScrollListener;
@@ -69,6 +71,9 @@ public void setPinHeaders(boolean shouldPin) {
 
     @Override
     public void setAdapter(ListAdapter adapter) {
+        if (mAdapter == adapter) {
+            return;
+        }
         mCurrentHeader = null;
         if (adapter instanceof PinnedSectionedHeaderAdapter) {
             mAdapter = (PinnedSectionedHeaderAdapter) adapter;
@@ -80,14 +85,14 @@ public void setAdapter(ListAdapter adapter) {
 
     @Override
     public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-        if (mAdapter == null) {
-            return;
-        }
         if (mOnScrollListener != null) {
             mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
         }
+        if (mAdapter == null) {
+            return;
+        }
 
-        if (mAdapter == null || mAdapter.getCount() == 0 || !mShouldPin || (firstVisibleItem < getHeaderViewsCount())) {
+        if (mAdapter.getCount() == 0 || !mShouldPin || (firstVisibleItem < getHeaderViewsCount())) {
             mCurrentHeader = null;
             mHeaderOffset = 0.0f;
             for (int i = firstVisibleItem; i < firstVisibleItem + visibleItemCount; i++) {
@@ -131,9 +136,6 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
 
     @Override
     public void onScrollStateChanged(AbsListView view, int scrollState) {
-        if (mAdapter == null) {
-            return;
-        }
         if (mOnScrollListener != null) {
             mOnScrollListener.onScrollStateChanged(view, scrollState);
         }
@@ -173,7 +175,11 @@ private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
             } else {
                 heightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
             }
-            header.measure(widthSpec, heightSpec);
+            try {
+                header.measure(widthSpec, heightSpec);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
             header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
index 5cfa5f3e0..1c9f97d68 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Views;
 
+import android.database.DataSetObserver;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
@@ -222,4 +223,11 @@ private int internalGetSectionCount() {
         mSectionCount = getSectionCount();
         return mSectionCount;
     }
+
+    @Override
+    public void unregisterDataSetObserver(DataSetObserver observer) {
+        if (observer != null) {
+            super.unregisterDataSetObserver(observer);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
index a2b81dd2f..13b594bd9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
@@ -9,8 +9,9 @@
 package org.telegram.ui.Views;
 
 import android.content.Context;
+import android.graphics.Canvas;
 import android.graphics.Rect;
-import android.util.Log;
+import android.graphics.drawable.Drawable;
 import android.widget.RelativeLayout;
 
 import org.telegram.messenger.Utilities;
@@ -18,6 +19,7 @@
 public class SizeNotifierRelativeLayout extends RelativeLayout {
 
     private Rect rect = new Rect();
+    private Drawable backgroundDrawable;
     public SizeNotifierRelativeLayoutDelegate delegate;
 
     public abstract interface SizeNotifierRelativeLayoutDelegate {
@@ -36,6 +38,14 @@ public SizeNotifierRelativeLayout(android.content.Context context, android.util.
         super(context, attrs, defStyle);
     }
 
+    public void setBackgroundImage(int resourceId) {
+        backgroundDrawable = getResources().getDrawable(resourceId);
+    }
+
+    public void setBackgroundImage(Drawable bitmap) {
+        backgroundDrawable = bitmap;
+    }
+
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
         super.onLayout(changed, l, t, r, b);
@@ -46,4 +56,19 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             delegate.onSizeChanged(keyboardHeight);
         }
     }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (backgroundDrawable != null) {
+            float scaleX = (float)Utilities.displaySize.x / (float)backgroundDrawable.getIntrinsicWidth();
+            float scaleY = (float)Utilities.displaySize.y / (float)backgroundDrawable.getIntrinsicHeight();
+            float scale = scaleX < scaleY ? scaleY : scaleX;
+            int width = (int)Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
+            int height = (int)Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
+            int x = (Utilities.displaySize.x - width) / 2;
+            int y = (Utilities.displaySize.y - height) / 2;
+            backgroundDrawable.setBounds(x, y, x + width, y + height);
+            backgroundDrawable.draw(canvas);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/res/layout-ar/document_item.xml b/TMessagesProj/src/main/res/layout-ar/document_item.xml
index d83e00d30..96d3d776e 100644
--- a/TMessagesProj/src/main/res/layout-ar/document_item.xml
+++ b/TMessagesProj/src/main/res/layout-ar/document_item.xml
@@ -69,7 +69,6 @@
         android:id="@+id/docs_item_thumb"
         android:layout_width="55dp"
         android:layout_height="42dp"
-        android:scaleType="centerCrop"
         android:layout_marginTop="11dp"
         android:layout_gravity="top|right"/>
 
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
index bfc162130..aea3bd3b2 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
@@ -21,8 +21,7 @@
             <org.telegram.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:src="@drawable/group_blue"/>
+                android:layout_height="fill_parent"/>
 
             <ImageButton
                 android:id="@+id/settings_change_avatar_button"
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
index d2eaad58c..3505f73aa 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
@@ -10,7 +10,6 @@
         android:layout_width="50dp"
         android:layout_height="50dp"
         android:id="@+id/messages_list_row_avatar"
-        android:contentDescription=""
         android:layout_marginTop="8dp"
         android:layout_gravity="top|right"/>
 
diff --git a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
index 97a2be17c..68445322f 100644
--- a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
@@ -22,7 +22,6 @@
         <org.telegram.ui.Views.BackupImageView
             android:layout_width="64dp"
             android:layout_height="64dp"
-            android:contentDescription=""
             android:id="@+id/location_avatar_view"
             android:layout_marginRight="12dp"
             android:layout_marginTop="16dp"
diff --git a/TMessagesProj/src/main/res/layout-ar/notification_layout.xml b/TMessagesProj/src/main/res/layout-ar/notification_layout.xml
index 71df49163..5b1d7ca66 100644
--- a/TMessagesProj/src/main/res/layout-ar/notification_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/notification_layout.xml
@@ -5,17 +5,20 @@
     android:id="@+id/container_view"
     android:orientation="vertical">
 
-    <FrameLayout android:layout_width="fill_parent"
+    <FrameLayout
+        android:layout_width="fill_parent"
         android:layout_height="0dp"
         android:layout_weight="1"
         android:background="#ffffff">
 
-        <org.telegram.ui.Views.BackupImageView android:layout_height="48dp"
+        <org.telegram.ui.Views.BackupImageView
+            android:layout_height="48dp"
             android:layout_width="48dp"
             android:id="@+id/avatar_image"
             android:layout_gravity="right|top"/>
 
-        <FrameLayout android:layout_width="fill_parent"
+        <FrameLayout
+            android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:layout_marginLeft="40dp"
             android:orientation="vertical"
@@ -23,7 +26,8 @@
             android:layout_gravity="top|right"
             android:id="@+id/text_layout">
 
-            <TextView android:layout_height="wrap_content"
+            <TextView
+                android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 android:gravity="right|center"
                 android:textSize="15dp"
@@ -34,7 +38,8 @@
                 android:layout_gravity="top|right"
                 android:singleLine="true"/>
 
-            <TextView android:layout_height="wrap_content"
+            <TextView
+                android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 android:gravity="right|center"
                 android:textColor="#000000"
@@ -47,7 +52,8 @@
 
         </FrameLayout>
 
-        <ImageView android:layout_height="40dp"
+        <ImageView
+            android:layout_height="40dp"
             android:layout_width="40dp"
             android:layout_gravity="left|center"
             android:src="@drawable/ic_profile_cross"
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml
new file mode 100644
index 000000000..389e955b8
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml
@@ -0,0 +1,41 @@
+<!--
+  ~ This is the source code of Telegram for Android v. 1.4.x.
+  ~ It is licensed under GNU GPL v. 2 or later.
+  ~ You should have received a copy of the license in this archive (see LICENSE).
+  ~
+  ~ Copyright Nikolai Kudashov, 2013-2014.
+  -->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="50dp"
+    android:layout_gravity="top">
+
+    <FrameLayout
+        android:id="@+id/settings_color"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        android:layout_marginLeft="14dp"
+        android:layout_marginRight="8dp"
+        android:layout_gravity="center_vertical"/>
+
+    <TextView
+        android:textSize="18dp"
+        android:textColor="#333333"
+        android:id="@+id/settings_row_text"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:layout_marginLeft="8dp"
+        android:layout_marginRight="8dp"
+        android:gravity="center_vertical|right"
+        android:layout_gravity="top|right"/>
+
+    <View
+        android:background="@color/divider"
+        android:layout_width="fill_parent"
+        android:layout_height="1px"
+        android:layout_gravity="bottom"
+        android:id="@+id/settings_row_divider"/>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_action_change_photo_layout.xml b/TMessagesProj/src/main/res/layout/chat_action_change_photo_layout.xml
index 500e7b768..73b62564b 100644
--- a/TMessagesProj/src/main/res/layout/chat_action_change_photo_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_action_change_photo_layout.xml
@@ -37,7 +37,6 @@
         android:layout_width="64dp"
         android:layout_height="64dp"
         android:layout_marginTop="5dp"
-        android:scaleType="fitCenter"
         android:id="@+id/chat_photo_image"/>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_group_incoming_contact_layout.xml b/TMessagesProj/src/main/res/layout/chat_group_incoming_contact_layout.xml
index f86882572..0445491b5 100644
--- a/TMessagesProj/src/main/res/layout/chat_group_incoming_contact_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_group_incoming_contact_layout.xml
@@ -14,7 +14,6 @@
         android:layout_height="42dp"
         android:layout_marginLeft="6dp"
         android:id="@+id/chat_group_avatar_image"
-        android:scaleType="fitCenter"
         android:layout_marginBottom="2dp"
         android:layout_marginRight="4dp"
         android:layout_gravity="bottom"/>
@@ -34,7 +33,8 @@
             android:id="@+id/shared_layout"
             android:layout_weight="1">
 
-            <org.telegram.ui.Views.BackupImageView android:layout_height="42dp"
+            <org.telegram.ui.Views.BackupImageView
+                android:layout_height="42dp"
                 android:layout_width="42dp"
                 android:id="@+id/contact_avatar"/>
 
diff --git a/TMessagesProj/src/main/res/layout/chat_group_incoming_document_layout.xml b/TMessagesProj/src/main/res/layout/chat_group_incoming_document_layout.xml
index 27931020e..85bf92b61 100644
--- a/TMessagesProj/src/main/res/layout/chat_group_incoming_document_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_group_incoming_document_layout.xml
@@ -13,7 +13,6 @@
         android:layout_height="42dp"
         android:layout_marginLeft="6dp"
         android:id="@+id/chat_group_avatar_image"
-        android:scaleType="fitCenter"
         android:layout_marginBottom="2dp"
         android:layout_marginRight="4dp"
         android:layout_gravity="bottom"/>
@@ -38,8 +37,6 @@
                 android:layout_width="42dp"
                 android:layout_height="42dp"
                 android:background="#40b7c9d7"
-                android:src="@drawable/doc_blue"
-                android:scaleType="center"
                 android:id="@+id/contact_avatar"/>
 
             <org.telegram.ui.Views.TightTextView
diff --git a/TMessagesProj/src/main/res/layout/chat_group_incoming_location_layout.xml b/TMessagesProj/src/main/res/layout/chat_group_incoming_location_layout.xml
index 75f035410..d10dbcf43 100644
--- a/TMessagesProj/src/main/res/layout/chat_group_incoming_location_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_group_incoming_location_layout.xml
@@ -14,7 +14,6 @@
         android:layout_height="42dp"
         android:layout_marginLeft="6dp"
         android:id="@+id/chat_group_avatar_image"
-        android:scaleType="fitCenter"
         android:layout_marginBottom="2dp"
         android:layout_gravity="bottom"/>
 
@@ -31,7 +30,6 @@
             android:layout_width="100dp"
             android:layout_margin="6dp"
             android:layout_gravity="top"
-            android:scaleType="centerCrop"
             android:id="@+id/chat_photo_image"/>
 
         <LinearLayout
diff --git a/TMessagesProj/src/main/res/layout/chat_header_layout.xml b/TMessagesProj/src/main/res/layout/chat_header_layout.xml
index 8fb0b2f79..35e9b977d 100644
--- a/TMessagesProj/src/main/res/layout/chat_header_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_header_layout.xml
@@ -1,9 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_alignParentRight="true">
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_alignParentRight="true">
 
     <org.telegram.ui.Views.BackupImageView
             android:layout_height="48dp"
diff --git a/TMessagesProj/src/main/res/layout/chat_incoming_contact_layout.xml b/TMessagesProj/src/main/res/layout/chat_incoming_contact_layout.xml
index 946a2649c..d7643a8a3 100644
--- a/TMessagesProj/src/main/res/layout/chat_incoming_contact_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_incoming_contact_layout.xml
@@ -21,7 +21,8 @@
             android:id="@+id/shared_layout"
             android:layout_weight="1">
 
-            <org.telegram.ui.Views.BackupImageView android:layout_height="42dp"
+            <org.telegram.ui.Views.BackupImageView
+                android:layout_height="42dp"
                 android:layout_width="42dp"
                 android:id="@+id/contact_avatar"/>
 
@@ -57,18 +58,21 @@
         </FrameLayout>
 
 
-        <FrameLayout android:layout_width="wrap_content"
+        <FrameLayout
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_marginLeft="8dp"
             android:layout_gravity="top"
             android:id="@+id/add_contact_view">
 
-            <FrameLayout android:layout_height="54dp"
+            <FrameLayout
+                android:layout_height="54dp"
                 android:layout_width="1dp"
                 android:background="#e8e8e8"
                 android:paddingRight="8dp"/>
 
-            <ImageView android:layout_width="38dp"
+            <ImageView
+                android:layout_width="38dp"
                 android:layout_height="54dp"
                 android:src="@drawable/ic_ab_add_member"
                 android:scaleType="center"
@@ -79,4 +83,5 @@
         </FrameLayout>
 
     </LinearLayout>
+
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_incoming_document_layout.xml b/TMessagesProj/src/main/res/layout/chat_incoming_document_layout.xml
index 5946e62d1..eb562cf14 100644
--- a/TMessagesProj/src/main/res/layout/chat_incoming_document_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_incoming_document_layout.xml
@@ -29,7 +29,6 @@
                 android:layout_height="42dp"
                 android:background="#40b7c9d7"
                 android:src="@drawable/doc_blue"
-                android:scaleType="center"
                 android:id="@+id/contact_avatar"/>
 
             <TextView
diff --git a/TMessagesProj/src/main/res/layout/chat_incoming_location_layout.xml b/TMessagesProj/src/main/res/layout/chat_incoming_location_layout.xml
index 53ce3ce41..5e25a7a86 100644
--- a/TMessagesProj/src/main/res/layout/chat_incoming_location_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_incoming_location_layout.xml
@@ -22,7 +22,6 @@
             android:layout_width="wrap_content"
             android:layout_margin="6dp"
             android:layout_gravity="top"
-            android:scaleType="centerCrop"
             android:minHeight="100dp"
             android:minWidth="100dp"
             android:id="@+id/chat_photo_image"/>
diff --git a/TMessagesProj/src/main/res/layout/chat_layout.xml b/TMessagesProj/src/main/res/layout/chat_layout.xml
index 9d7f7137d..b0b79a514 100644
--- a/TMessagesProj/src/main/res/layout/chat_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_layout.xml
@@ -4,12 +4,6 @@
     android:layout_height="match_parent"
     android:id="@+id/chat_layout">
 
-    <ImageView
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent"
-        android:id="@+id/background_image"
-        android:scaleType="centerCrop"/>
-
     <org.telegram.ui.Views.FrameLayoutFixed
         android:layout_height="fill_parent"
         android:layout_width="fill_parent"
diff --git a/TMessagesProj/src/main/res/layout/chat_outgoing_contact_layout.xml b/TMessagesProj/src/main/res/layout/chat_outgoing_contact_layout.xml
index a9d847728..f047bc8b6 100644
--- a/TMessagesProj/src/main/res/layout/chat_outgoing_contact_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_outgoing_contact_layout.xml
@@ -16,19 +16,22 @@
         android:layout_gravity="top|right"
         android:id="@+id/chat_bubble_layout">
 
-        <FrameLayout android:layout_width="wrap_content"
+        <FrameLayout
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_marginRight="8dp"
             android:layout_gravity="top"
             android:id="@+id/add_contact_view">
 
-            <FrameLayout android:layout_height="54dp"
+            <FrameLayout
+                android:layout_height="54dp"
                 android:layout_width="1dp"
                 android:background="#aa70b15c"
                 android:paddingLeft="8dp"
                 android:layout_gravity="right"/>
 
-            <ImageView android:layout_width="40dp"
+            <ImageView
+                android:layout_width="40dp"
                 android:layout_height="54dp"
                 android:src="@drawable/ic_ab_add_member"
                 android:scaleType="center"
@@ -38,16 +41,19 @@
 
         </FrameLayout>
 
-        <FrameLayout android:layout_height="58dp"
+        <FrameLayout
+            android:layout_height="58dp"
             android:layout_width="0dp"
             android:id="@+id/shared_layout"
             android:layout_weight="1">
 
-            <org.telegram.ui.Views.BackupImageView android:layout_height="42dp"
+            <org.telegram.ui.Views.BackupImageView
+                android:layout_height="42dp"
                 android:layout_width="42dp"
                 android:id="@+id/contact_avatar"/>
 
-            <TextView android:layout_height="wrap_content"
+            <TextView
+                android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 android:scrollHorizontally="true"
                 android:paddingLeft="51dp"
@@ -59,7 +65,8 @@
                 android:ellipsize="end"
                 android:id="@+id/chat_user_group_name"/>
 
-            <TextView android:layout_height="wrap_content"
+            <TextView
+                android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 android:paddingLeft="51dp"
                 android:layout_marginTop="20dp"
@@ -68,7 +75,8 @@
                 android:maxLines="1"
                 android:id="@+id/phone_text_view"/>
 
-            <LinearLayout android:layout_width="wrap_content"
+            <LinearLayout
+                android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:id="@+id/chat_time_layout"
                 android:layout_gravity="bottom|right">
diff --git a/TMessagesProj/src/main/res/layout/chat_outgoing_document_layout.xml b/TMessagesProj/src/main/res/layout/chat_outgoing_document_layout.xml
index 3e33ed78d..66044546d 100644
--- a/TMessagesProj/src/main/res/layout/chat_outgoing_document_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_outgoing_document_layout.xml
@@ -80,8 +80,6 @@
                 android:layout_width="42dp"
                 android:layout_height="42dp"
                 android:background="#408ed057"
-                android:src="@drawable/doc_green"
-                android:scaleType="center"
                 android:id="@+id/contact_avatar"/>
 
             <org.telegram.ui.Views.TightTextView
diff --git a/TMessagesProj/src/main/res/layout/chat_outgoing_location_layout.xml b/TMessagesProj/src/main/res/layout/chat_outgoing_location_layout.xml
index 911cc17f7..459e185f9 100644
--- a/TMessagesProj/src/main/res/layout/chat_outgoing_location_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_outgoing_location_layout.xml
@@ -39,7 +39,6 @@
             android:layout_width="wrap_content"
             android:layout_margin="6dp"
             android:layout_gravity="top"
-            android:scaleType="centerCrop"
             android:minHeight="100dp"
             android:minWidth="100dp"
             android:id="@+id/chat_photo_image"/>
diff --git a/TMessagesProj/src/main/res/layout/document_item.xml b/TMessagesProj/src/main/res/layout/document_item.xml
index aa20aba2b..f2511bcef 100644
--- a/TMessagesProj/src/main/res/layout/document_item.xml
+++ b/TMessagesProj/src/main/res/layout/document_item.xml
@@ -59,7 +59,6 @@
         android:id="@+id/docs_item_thumb"
         android:layout_width="55dp"
         android:layout_height="42dp"
-        android:scaleType="centerCrop"
         android:layout_marginTop="11dp"
         android:layout_gravity="top|left"/>
 
diff --git a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
index 2970282e3..1095df7c9 100644
--- a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
@@ -21,8 +21,7 @@
             <org.telegram.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:src="@drawable/group_blue"/>
+                android:layout_height="fill_parent"/>
 
             <ImageButton
                 android:id="@+id/settings_change_avatar_button"
diff --git a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
index 6323c035e..d72de6d6b 100644
--- a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
@@ -10,7 +10,6 @@
         android:layout_width="50dp"
         android:layout_height="50dp"
         android:id="@+id/messages_list_row_avatar"
-        android:contentDescription=""
         android:layout_marginTop="8dp"
         android:layout_gravity="top"/>
 
diff --git a/TMessagesProj/src/main/res/layout/location_view_layout.xml b/TMessagesProj/src/main/res/layout/location_view_layout.xml
index 9eda596f8..a5285024c 100644
--- a/TMessagesProj/src/main/res/layout/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_view_layout.xml
@@ -22,7 +22,6 @@
         <org.telegram.ui.Views.BackupImageView
             android:layout_width="64dp"
             android:layout_height="64dp"
-            android:contentDescription=""
             android:id="@+id/location_avatar_view"
             android:layout_marginLeft="12dp"
             android:layout_marginTop="16dp"
diff --git a/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
new file mode 100644
index 000000000..075480742
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
@@ -0,0 +1,14 @@
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_gravity="center">
+
+    <org.telegram.ui.Views.ColorPickerView
+        android:id="@+id/color_picker"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"/>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml
new file mode 100644
index 000000000..c0bf51125
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml
@@ -0,0 +1,33 @@
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="50dp"
+    android:layout_gravity="top">
+
+    <TextView
+        android:textSize="18dp"
+        android:textColor="#333333"
+        android:id="@+id/settings_row_text"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:layout_marginLeft="8dp"
+        android:layout_marginRight="8dp"
+        android:gravity="center_vertical"
+        android:layout_gravity="top"/>
+
+    <FrameLayout
+        android:id="@+id/settings_color"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        android:layout_marginLeft="8dp"
+        android:layout_marginRight="14dp"
+        android:layout_gravity="center_vertical|right"/>
+
+    <View
+        android:background="@color/divider"
+        android:layout_width="fill_parent"
+        android:layout_height="1px"
+        android:layout_gravity="bottom"
+        android:id="@+id/settings_row_divider"/>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
index f7873c527..2412415d3 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
@@ -6,7 +6,6 @@
     <org.telegram.ui.Views.BackupImageView
         android:layout_height="100dp"
         android:layout_width="100dp"
-        android:scaleType="centerCrop"
         android:id="@+id/image"
         android:layout_gravity="bottom"
         android:background="#5A475866"/>
diff --git a/TMessagesProj/src/main/res/layout/updating_state_layout.xml b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
index 815cbbe85..b00a8df1c 100644
--- a/TMessagesProj/src/main/res/layout/updating_state_layout.xml
+++ b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
@@ -1,9 +1,10 @@
-<FrameLayout
+<org.telegram.ui.Views.FrameLayoutFixed
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="400dp"
     android:layout_height="fill_parent"
     android:background="@drawable/bar_selector"
-    android:id="@+id/back_button_background">
+    android:id="@+id/back_button_background"
+    android:layout_gravity="top">
 
     <ProgressBar
         android:layout_height="32dp"
@@ -26,15 +27,15 @@
 
     <TextView
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
+        android:layout_width="wrap_content"
         android:layout_marginLeft="52dp"
         android:textColor="#ffffff"
         android:textSize="17dp"
         android:layout_gravity="center_vertical|left"
-        android:gravity="left"
+        android:gravity="top|left"
         android:ellipsize="end"
         android:singleLine="true"
         android:paddingRight="2dp"
         android:id="@+id/status_text"/>
 
-</FrameLayout>
\ No newline at end of file
+</org.telegram.ui.Views.FrameLayoutFixed>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index a2ba53e48..69397359b 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -64,7 +64,7 @@
     <string name="NoFiles">لا يوجد ملفات بعد...</string>
     <string name="FileUploadLimit">حجم الملف لا يمكن أن يكون أكبر من %1$s</string>
     <string name="NotMounted">الذاكرة غير مثبتة</string>
-    <string name="UsbActive">نقل اليو إس بي مفعل</string>
+    <string name="UsbActive">نقل USB مفعل</string>
     <string name="InternalStorage">الذاكرة الداخلية</string>
     <string name="ExternalStorage">الذاكرة الخارجية</string>
     <string name="SystemRoot">جذر النظام</string>
@@ -94,7 +94,7 @@
     <string name="Message">الرسالة</string>
     <string name="TypeMessage">أكتب رسالة</string>
     <string name="DOWNLOAD">تحميل</string>
-    <string name="Selected">محددة: %d</string>
+    <string name="Selected">تم تحديد : %d</string>
     <string name="ShareMyContactInfo">شارك جهة الاتصال الخاصة بي</string>
     <string name="AddToContacts">أضف لجهات الاتصال</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s قام بدعوتك لمحادثة سرية</string>
@@ -108,11 +108,12 @@
     <string name="FewNewMessages">%1$d رسائل جديدة</string>
     <string name="YouWereKicked">لقد تم إخراجك من هذه المجموعة</string>
     <string name="YouLeft">لقد قمت بمغادرة المجموعة</string>
-    <string name="DeleteThisGroup">حذف المجموعة</string>
+    <string name="DeleteThisGroup">حذف هذه المجموعة</string>
     <string name="DeleteThisChat">حذف هذه الدردشة</string>
     <string name="SlideToCancel">قم بالسحب للإلغاء</string>
     <string name="SaveToDownloads">حفظ في الجهاز</string>
     <string name="ApplyLocalizationFile">تطبيق ملف التعريب</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">تم طلب محادثة سرية</string>
@@ -133,7 +134,7 @@
     <string name="NotificationMessagePhoto">%1$s قام بإرسال صورة لك</string>
     <string name="NotificationMessageVideo">%1$s قام بإرسال مقطع مرئي لك</string>
     <string name="NotificationMessageContact">%1$s قام بإرسال جهة اتصال لك</string>
-    <string name="NotificationMessageMap">%1$s قام بإرسال خريطة لك</string>
+    <string name="NotificationMessageMap">%1$s قام بإرسال موقع لك</string>
     <string name="NotificationMessageDocument">%1$s قام بإرسال مستند لك</string>
     <string name="NotificationMessageAudio">%1$s قام بإرسال مقطع صوتي لك</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
@@ -141,7 +142,7 @@
     <string name="NotificationMessageGroupPhoto">%1$s قام بإرسال صورة للمجموعة %2$s</string>
     <string name="NotificationMessageGroupVideo">%1$s قام بإرسال مقطع مرئي للمجموعة %2$s</string>
     <string name="NotificationMessageGroupContact">%1$s قام بإرسال جهة اتصال للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s قام بإرسال خريطة للمجموعة %2$s</string>
+    <string name="NotificationMessageGroupMap">%1$s قام بإرسال موقع للمجموعة %2$s</string>
     <string name="NotificationMessageGroupDocument">%1$s قام بإرسال مستند للمجموعة %2$s</string>
     <string name="NotificationMessageGroupAudio">%1$s قام بإرسال مقطع صوتي للمجموعة %2$s</string>
     <string name="NotificationInvitedToGroup">%1$s قام بدعوتك للمجموعة %2$s</string>
@@ -250,14 +251,14 @@
     <string name="SendByEnter">أرسل بزر الإدخال</string>
     <string name="TerminateAllSessions">سجل الخروج من كافة الأجهزة الأخرى</string>
     <string name="AutomaticPhotoDownload">تنزيل الصور تلقائيًا</string>
-    <string name="AutomaticAudioDownload">تنزيل رسائل الصوت تلقائيا</string>
+    <string name="AutomaticAudioDownload">تنزيل رسائل الصوت تلقائياً</string>
     <string name="AutomaticPhotoDownloadGroups">المجموعات</string>
     <string name="AutomaticPhotoDownloadPrivateChats">المحادثات</string>
     <string name="Events">الأحداث</string>
     <string name="ContactJoined">اشترك صديق في تيليجرام</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">اللغة</string>
-    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]>يرجى الإطلاع على <![CDATA[<a href="http://telegram.org/faq/ar">صفحة الأسئلة الأكثر شيوعًا</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
+    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]>يرجى الإطلاع على <![CDATA[<a href="http://telegram.org/faq/ar">الأسئلة الشائعة عن تيليجرام</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
     <string name="AskButton">اسأل أحد المتطوعين</string>
     <string name="TelegramFaq">الأسئلة الشائعة عن تيليجرام</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/ar</string>
@@ -266,12 +267,13 @@
     <string name="Enabled">تمكين</string>
     <string name="Disabled">تعطيل</string>
     <string name="NotificationsService">خدمة الإشعارات</string>
-    <string name="NotificationsServiceDisableInfo">إذا كانت خدمات Google play كافية بالنسبة لك لتلقي الإشعارات ، يمكنك تعطيل " خدمة الإشعارات " . ومع ذلك نحن نوصي بترك هذه الخدمة مفعلة للحفاظ على تشغيل التطبيق في الخلفية ، ولتلقي إشعارات الدردشة .</string>
+    <string name="NotificationsServiceDisableInfo">إذا كانت خدمات Google play كافية بالنسبة لك لتلقي الإشعارات ، يمكنك تعطيل \" خدمة الإشعارات \" . ومع ذلك نحن نوصي بترك هذه الخدمة مفعلة للحفاظ على تشغيل التطبيق في الخلفية ، ولتلقي إشعارات الدردشة .</string>
     <string name="SortBy">فرز حسب</string>
     <string name="ImportContacts">استيراد جهات الاتصال</string>
     <string name="WiFiOnly">بواسطة WiFi فقط</string>
     <string name="SortFirstName">الاسم الأول</string>
     <string name="SortLastName">اسم العائلة</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">لا توجد وسائط بعد</string>
@@ -317,7 +319,7 @@
     <string name="OK">موافق</string>
 
     <!--messages-->
-    <string name="ActionKickUser">un1 قام بإخراج un2</string>
+    <string name="ActionKickUser">un1 أزال un2</string>
     <string name="ActionLeftUser">غادر المجموعة العضو un1</string>
     <string name="ActionAddUser">un1 قام بإضافة un2</string>
     <string name="ActionRemovedPhoto">تمت إزالة صورة المجموعة من قِبَل un1</string>
@@ -333,7 +335,7 @@
     <string name="ActionYouCreateGroup">لقد قمت بإنشاء المجموعة</string>
     <string name="ActionKickUserYou">un1 قام بإخراجك</string>
     <string name="ActionAddUserYou">un1 قام بإضافتك</string>
-    <string name="UnsuppotedMedia">نسخة تيليجرام التي تستخدمها لا تدعم هذه الرسالة</string>
+    <string name="UnsuppotedMedia">نسخة تيليجرام الموجودة لديك لا تدعم هذه الرسالة. الرجاء التحديث لأحدث نسخة:\nhttp://telegram.org/update</string>
     <string name="AttachPhoto">صورة</string>
     <string name="AttachVideo">مقطع مرئي</string>
     <string name="AttachLocation">موقع</string>
@@ -356,10 +358,10 @@
     <string name="NoHandleAppInstalled">لا يوجد لديك تطبيق يمكنه فتح \'%1$s\'، يرجى تنزيل تطبيق مناسب للإستمرار</string>
     <string name="InviteUser">هذا المستخدم ليس لديه تيليجرام بعد ، هل ترغب في دعوته الآن؟</string>
     <string name="AreYouSure">هل أنت متأكد؟</string>
-    <string name="DeleteChatQuestion">هل تريد حذف هذه الدردشة؟</string>
     <string name="AddContactQ">هل تريد إضافة جهة اتصال؟</string>
     <string name="AddToTheGroup">إلى المجموعة؟ %1$s هل تريد إضافة</string>
     <string name="ForwardMessagesTo">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
+    <string name="DeleteChatQuestion">هل تريد حذف هذه الدردشة؟</string>
 
     <!--Intro view-->
     <string name="Page1Title">تيليجرام</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index b6f10a09f..16e4137e4 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -12,14 +12,14 @@
     <!--signin view-->
     <string name="YourPhone">Dein Telefon</string>
     <string name="StartText">Bitte bestätige deine Landesvorwahl und deine Telefonnummer.</string>
-    <string name="ChooseCountry">Wähle dein Land</string>
+    <string name="ChooseCountry">Wähle ein Land</string>
     <string name="WrongCountry">Falsche Landesvorwahl</string>
 
     <!--code enter view-->
     <string name="YourCode">Dein Code</string>
-    <string name="SentSmsCode">Wir haben dir eine SMS mit einem Aktivierungscode zugeschickt: </string>
+    <string name="SentSmsCode">Wir haben dir eine SMS mit einem Aktivierungscode zugeschickt</string>
     <string name="CallText">Wir rufen dich an in</string>
-    <string name="Calling">Wir rufen dich an …</string>
+    <string name="Calling">Wir rufen dich an…</string>
     <string name="Code">Code</string>
     <string name="WrongNumber">Falsche Nummer?</string>
 
@@ -40,15 +40,15 @@
     <string name="NewGroup">Neue Gruppe</string>
     <string name="Yesterday">gestern</string>
     <string name="NoResult">Keine Ergebnisse</string>
-    <string name="NoChats">Noch keine Chats …</string>
+    <string name="NoChats">Noch keine Chats…</string>
     <string name="NoChatsHelp">Beginne Telegram zu nutzen, indem du\neine neue Nachricht erstellst (rechte obere Ecke)\noder deine Kontakte aufrufst.</string>
-    <string name="WaitingForNetwork">Warte auf Verbindung …</string>
-    <string name="Connecting">Verbinde …</string>
-    <string name="Updating">Aktualisiere …</string>
+    <string name="WaitingForNetwork">Warte auf Verbindung…</string>
+    <string name="Connecting">Verbinde…</string>
+    <string name="Updating">Aktualisiere…</string>
     <string name="NewSecretChat">Neuer geheimer Chat</string>
-    <string name="AwaitingEncryption">Warte, bis %s online geht …</string>
+    <string name="AwaitingEncryption">Warte, bis %s online geht…</string>
     <string name="EncryptionRejected">Geheimen Chat abgelehnt</string>
-    <string name="EncryptionProcessing">Tausche Schlüssel aus …</string>
+    <string name="EncryptionProcessing">Tausche Schlüssel aus…</string>
     <string name="EncryptedChatStartedOutgoing">%s ist deinem geheimen Chat beigetreten.</string>
     <string name="EncryptedChatStartedIncoming">Du bist dem geheimen Chat beigetreten.</string>
     <string name="ClearHistory">Verlauf löschen</string>
@@ -61,7 +61,7 @@
     <string name="FreeOfTotal">Freier Speicher: %1$s von %2$s</string>
     <string name="UnknownError">Unbekannter Fehler</string>
     <string name="AccessError">Zugriffsfehler</string>
-    <string name="NoFiles">Noch keine Dateien …</string>
+    <string name="NoFiles">Noch keine Dateien…</string>
     <string name="FileUploadLimit">Die Datei darf nicht größer als %1$s sein</string>
     <string name="NotMounted">Speicher nicht eingebunden</string>
     <string name="UsbActive">USB-Transfer aktiv</string>
@@ -72,10 +72,10 @@
 
     <!--chat view-->
     <string name="Invisible">unsichtbar</string>
-    <string name="Typing">schreibt …</string>
+    <string name="Typing">schreibt…</string>
     <string name="Attach">Anhängen</string>
-    <string name="IsTyping">schreibt</string>
-    <string name="AreTyping">tippen …</string>
+    <string name="IsTyping">schreibt...</string>
+    <string name="AreTyping">tippen…</string>
     <string name="AndMoreTyping">und %d weitere Personen</string>
     <string name="GotAQuestion">Du hast eine Frage\nzu Telegram?</string>
     <string name="ChatTakePhoto">Foto aufnehmen</string>
@@ -83,7 +83,7 @@
     <string name="ChatLocation">Standort</string>
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Dokument</string>
-    <string name="NoMessages">Noch keine Nachrichten …</string>
+    <string name="NoMessages">Noch keine Nachrichten…</string>
     <string name="ViewPhoto">Foto anzeigen</string>
     <string name="ViewLocation">Standort anzeigen</string>
     <string name="ViewVideo">Video abspielen</string>
@@ -100,7 +100,7 @@
     <string name="EncryptedPlaceholderTitleIncoming">%s hat dich zu einem geheimen Chat eingeladen.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Du hast %s zu einem geheimen Chat eingeladen.</string>
     <string name="EncryptedDescriptionTitle">Geheime Chats:</string>
-    <string name="EncryptedDescription1">Verwenden Ende-zu-Ende-Verschlüsselung</string>
+    <string name="EncryptedDescription1">Verwenden End-to-End-Verschlüsselung</string>
     <string name="EncryptedDescription2">Hinterlassen keine Spuren auf unseren Servern</string>
     <string name="EncryptedDescription3">Haben einen Selbstzerstörungs-Timer</string>
     <string name="EncryptedDescription4">Erlauben keine Weiterleitung von Nachrichten</string>
@@ -111,8 +111,9 @@
     <string name="DeleteThisGroup">Diese Gruppe löschen</string>
     <string name="DeleteThisChat">Diesen Chat löschen</string>
     <string name="SlideToCancel">WISCHEN UM ABZUBRECHEN</string>
-    <string name="SaveToDownloads">In Ordner Downloads speichern</string>
-    <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
+    <string name="SaveToDownloads">Im Ordner Downloads speichern</string>
+    <string name="ApplyLocalizationFile">Standort-Datei benutzen</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Geheimen Chat angefordert</string>
@@ -152,7 +153,7 @@
     <string name="NotificationGroupKickYou">%1$s hat dich aus der Gruppe %2$s entfernt</string>
     <string name="NotificationGroupLeftMember">%1$s hat die Gruppe %2$s verlassen</string>
     <string name="NotificationContactJoined">%1$s benutzt jetzt Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\n\nwir haben einen Zugriff auf dein Konto von einem neuen Gerät am %2$s erkannt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du das nicht gewesen bist, kannst du in den Einstellungen alle Sitzungen beenden.\n\nDanke,\ndas Telegram Team</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\n\nwir haben einen Zugriff auf dein Konto von einem neuen Gerät am %2$s erkannt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du das nicht warst, kannst du in den Einstellungen alle Sitzungen beenden.\n\nDanke,\ndas Telegram Team</string>
     <string name="NotificationContactNewPhoto">%1$s hat das Profilbild geändert</string>
 
     <!--contacts view-->
@@ -163,13 +164,13 @@
     <string name="YesterdayAt">gestern um</string>
     <string name="OtherAt">um</string>
     <string name="Online">online</string>
-    <string name="Offline">Offline</string>
+    <string name="Offline">offline</string>
     <string name="LastSeen">zul. online</string>
     <string name="LastSeenDate">zul. online</string>
     <string name="InviteFriends">Freunde einladen</string>
 
     <!--group create view-->
-    <string name="SendMessageTo">Sende Nachricht an …</string>
+    <string name="SendMessageTo">Sende Nachricht an…</string>
     <string name="EnterGroupNamePlaceholder">Gruppennamen eingeben</string>
     <string name="MEMBER">MITGLIED</string>
     <string name="GroupName">Gruppenname</string>
@@ -236,7 +237,7 @@
     <string name="InAppPreview">In-App-Vorschau</string>
     <string name="Reset">ZURÜCKSETZEN</string>
     <string name="ResetAllNotifications">Alle Benachrichtigungs-Einstellungen zurücksetzen</string>
-    <string name="UndoAllCustom">Setze alle benutzerdefinierten Einstellungen für Benachrichtigungen zurück</string>
+    <string name="UndoAllCustom">Setzt alle benutzerdefinierten Einstellungen für Benachrichtigungen zurück</string>
     <string name="NotificationsAndSounds">Benachrichtigungen</string>
     <string name="BlockedUsers">Blockierte Benutzer</string>
     <string name="SaveIncomingPhotos">Speichere eingehende Bilder</string>
@@ -257,7 +258,7 @@
     <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Sprache</string>
-    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von Freiwilligen geleistet wird. Wir versuchen so schnell wie möglich zu antworten. Dies kann jedoch manchmal etwas länger dauern.<![CDATA[<br><br>]]>Bitte schau in den <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]>: nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href="http://telegram.org/faq#troubleshooting">Problemlösung</a>]]>.</string>
+    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von Freiwilligen geleistet wird. Wir versuchen so schnell wie möglich zu antworten. Dies kann jedoch manchmal etwas länger dauern.<![CDATA[<br><br>]]>Bitte schau in den <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href="http://telegram.org/faq#troubleshooting">Problemlösung</a>]]>.</string>
     <string name="AskButton">Frage einen Freiwilligen</string>
     <string name="TelegramFaq">Telegram-FAQ</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
@@ -265,13 +266,14 @@
     <string name="IncorrectLocalization">Falsche Sprachdatei</string>
     <string name="Enabled">Aktiviert</string>
     <string name="Disabled">Deaktiviert</string>
-    <string name="NotificationsService">Benachrichtigungsdienst</string>
+    <string name="NotificationsService">Dienst für Benachrichtigungen</string>
     <string name="NotificationsServiceDisableInfo">Sofern Google Play Dienste ausreichend für deine Benachrichtigungen sind, kannst du unseren Benachrichtigungsdienst abschalten. Wir empfehlen allerdings, unseren Dienst dauerhaft aktiviert zu lassen um über neue Nachrichten in Echtzeit informiert zu werden.</string>
     <string name="SortBy">sortiert nach</string>
     <string name="ImportContacts">Kontakte importieren</string>
     <string name="WiFiOnly">nur über WLAN</string>
     <string name="SortFirstName">Vorname</string>
     <string name="SortLastName">Nachname</string>
+    <string name="LedColor">LED Farbe</string>
 
     <!--media view-->
     <string name="NoMedia">Noch keine geteilten Medien vorhanden</string>
@@ -284,7 +286,7 @@
     <string name="Hybrid">Hybrid</string>
     <string name="MetersAway">m entfernt</string>
     <string name="KMetersAway">km entfernt</string>
-    <string name="SendLocation">Sende Standort</string>
+    <string name="SendLocation">Standort senden</string>
     <string name="ShareLocation">Teile Standort</string>
 
     <!--photo gallery view-->
@@ -333,7 +335,7 @@
     <string name="ActionYouCreateGroup">Du hast die Gruppe erstellt</string>
     <string name="ActionKickUserYou">un1 hat dich aus der Gruppe entfernt</string>
     <string name="ActionAddUserYou">un1 hat dich hinzugefügt</string>
-    <string name="UnsuppotedMedia">Diese Nachricht wird auf deiner Version von Telegram nicht unterstützt. Bitte aktualisiere die App um sie zu sehen: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstützt. Bitte aktualisiere die App um sie zu sehen: http://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Standort</string>
@@ -351,7 +353,7 @@
     <string name="InvalidCode">Ungültiger Code</string>
     <string name="InvalidFirstName">Ungültiger Vorname</string>
     <string name="InvalidLastName">Ungültiger Nachname</string>
-    <string name="Loading">Lädt …</string>
+    <string name="Loading">Lädt…</string>
     <string name="NoPlayerInstalled">Du hast keinen Videoplayer. Bitte installiere einen um fortzufahren.</string>
     <string name="NoHandleAppInstalled">Du hast keine App, die den Dokumententyp \'%1$s\' öffnen kann.</string>
     <string name="InviteUser">Dieser Benutzer hat noch kein Telegram. Möchtest du ihn einladen?</string>
@@ -373,7 +375,7 @@
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> stellt Nachrichten schneller zu als andere Anwendungen</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist für immer kostenlos. Keine Werbung. Keine wiederkehrenden Kosten.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schützt deine Nachrichten vor Hacker-Angriffen</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> hat keine Grenzen in Sachen Größe deiner Chats und Medien</string>
+    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> unterstützt unbegrenzt große Chats und Mediendateien</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lässt sich von verschiedenen Geräten gleichzeitig nutzen</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]>-Nachrichten sind stark verschlüsselt und können sich selbst zerstören</string>
     <string name="StartMessaging">Jetzt beginnen</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 234cc4705..0b101766c 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -113,6 +113,7 @@
     <string name="SlideToCancel">DESLIZA PARA CANCELAR</string>
     <string name="SaveToDownloads">Guardar en descargas</string>
     <string name="ApplyLocalizationFile">Aplicar archivo de traducción</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Chat secreto solicitado</string>
@@ -272,6 +273,7 @@
     <string name="WiFiOnly">Sólo vía WiFi</string>
     <string name="SortFirstName">Nombre</string>
     <string name="SortLastName">Apellido</string>
+    <string name="LedColor">Color del LED</string>
 
     <!--media view-->
     <string name="NoMedia">No hay fotos ni vídeos compartidos aún</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index d502fbeed..fcb8cf810 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Messaggio</string>
     <string name="TypeMessage">Scrivi il messaggio</string>
     <string name="DOWNLOAD">Scarica</string>
-    <string name="Selected">Selezionato: %d</string>
+    <string name="Selected">Selezionati: %d</string>
     <string name="ShareMyContactInfo">CONDIVIDI LE MIE INFORMAZIONI DI CONTATTO</string>
     <string name="AddToContacts">AGGIUNGI AI CONTATTI</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s ti ha mandato un invito a una chat privata.</string>
@@ -113,6 +113,7 @@
     <string name="SlideToCancel">TRASCINA PER ANNULLARE</string>
     <string name="SaveToDownloads">Salva in download</string>
     <string name="ApplyLocalizationFile">Applica file di localizzazione</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Chat segreta richiesta</string>
@@ -269,9 +270,10 @@
     <string name="NotificationsServiceDisableInfo">Se i servizi di Google Play ti bastano per ricevere le notifiche, puoi disabilitare il Servizio notifiche. Tuttavia sarebbe meglio lasciarlo abilitato al fine di mantenere l\'applicazione attiva in background e ricevere notifiche istantanee.</string>
     <string name="SortBy">Ordina per</string>
     <string name="ImportContacts">Importa contatti</string>
-    <string name="WiFiOnly">solo tramite WiFi</string>
+    <string name="WiFiOnly">Solo tramite WiFi</string>
     <string name="SortFirstName">Nome</string>
     <string name="SortLastName">Cognome</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">Nessun media condiviso</string>
@@ -292,8 +294,8 @@
     <string name="SaveToGallery">Salva nella galleria</string>
     <string name="Of">%1$d di %2$d</string>
     <string name="Gallery">Galleria</string>
-    <string name="AllPhotos">All Photos</string>
-    <string name="NoPhotos">No photos yet</string>
+    <string name="AllPhotos">Tutte le foto</string>
+    <string name="NoPhotos">Ancora nessuna foto</string>
 
     <!--button titles-->
     <string name="Next">Avanti</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index a621b3589..abe731836 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -10,22 +10,22 @@
     <string name="LanguageCode">nl</string>
 
     <!--signin view-->
-    <string name="YourPhone">Uw telefoon</string>
-    <string name="StartText">Bevestig uw landcode\nen voer uw telefoonnummer in.</string>
+    <string name="YourPhone">Je telefoon</string>
+    <string name="StartText">Bevestig je landcode\nen voer je telefoonnummer in.</string>
     <string name="ChooseCountry">Kies een land</string>
     <string name="WrongCountry">Onjuist landcode</string>
 
     <!--code enter view-->
-    <string name="YourCode">Uw code</string>
-    <string name="SentSmsCode">We hebben een sms met een activatiecode verzonden naar uw telefoon</string>
-    <string name="CallText">We bellen u over</string>
-    <string name="Calling">We bellen u…</string>
+    <string name="YourCode">Je code</string>
+    <string name="SentSmsCode">We hebben een sms met een activatiecode verzonden naar je telefoon</string>
+    <string name="CallText">We bellen je over</string>
+    <string name="Calling">We bellen je…</string>
     <string name="Code">Code</string>
-    <string name="WrongNumber">Verkeerde nummer?</string>
+    <string name="WrongNumber">Verkeerd nummer?</string>
 
     <!--signup view-->
-    <string name="YourName">Uw naam</string>
-    <string name="RegisterText">Voer uw voor- en achternaam in</string>
+    <string name="YourName">Je naam</string>
+    <string name="RegisterText">Voer je voor- en achternaam in</string>
     <!--<string name="RegisterText">Set up your name and picture</string>-->
     <string name="FirstName">Voornaam (verplicht)</string>
     <string name="LastName">Achternaam (optioneel)</string>
@@ -50,7 +50,7 @@
     <string name="EncryptionRejected">Privégesprek geannuleerd</string>
     <string name="EncryptionProcessing">Encryptiesleutels uitwisselen…</string>
     <string name="EncryptedChatStartedOutgoing">%s neemt nu deel aan het privégesprek.</string>
-    <string name="EncryptedChatStartedIncoming">U neemt nu deel aan het privégesprek.</string>
+    <string name="EncryptedChatStartedIncoming">Je neemt nu deel aan het privégesprek.</string>
     <string name="ClearHistory">Geschiedenis wissen</string>
     <string name="DeleteChat">Verwijderen en verlaten</string>
     <string name="HiddenName">Verborgen naam</string>
@@ -77,7 +77,7 @@
     <string name="IsTyping">is aan het typen…</string>
     <string name="AreTyping">zijn aan het typen…</string>
     <string name="AndMoreTyping">en nog %d personen</string>
-    <string name="GotAQuestion">Hebt u een vraag\nover Telegram?</string>
+    <string name="GotAQuestion">Heb je een vraag\nover Telegram?</string>
     <string name="ChatTakePhoto">Foto maken</string>
     <string name="ChatGallery">Galerij</string>
     <string name="ChatLocation">Locatie</string>
@@ -97,8 +97,8 @@
     <string name="Selected">Geselecteerd: %d</string>
     <string name="ShareMyContactInfo">MIJN CONTACTGEGEVENS DELEN</string>
     <string name="AddToContacts">TOEVOEGEN AAN CONTACTEN</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s heeft u uitgenodigd voor een privégesprek.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">U hebt %s uitgenodigd voor een privégesprek.</string>
+    <string name="EncryptedPlaceholderTitleIncoming">%s heeft je uitgenodigd voor een privégesprek.</string>
+    <string name="EncryptedPlaceholderTitleOutgoing">Je hebt %s uitgenodigd voor een privégesprek.</string>
     <string name="EncryptedDescriptionTitle">Privégesprekken:</string>
     <string name="EncryptedDescription1">gebruiken end-to-endversleuteling</string>
     <string name="EncryptedDescription2">laten geen sporen achter op onze server</string>
@@ -106,36 +106,37 @@
     <string name="EncryptedDescription4">staan doorsturen niet toe</string>
     <string name="OneNewMessage">%1$d nieuw bericht</string>
     <string name="FewNewMessages">%1$d nieuwe berichten</string>
-    <string name="YouWereKicked">U bent verwijderd uit deze groep</string>
-    <string name="YouLeft">U hebt deze groep verlaten</string>
+    <string name="YouWereKicked">Je bent verwijderd uit deze groep</string>
+    <string name="YouLeft">Je hebt deze groep verlaten</string>
     <string name="DeleteThisGroup">Deze groep verwijderen</string>
     <string name="DeleteThisChat">Verwijder dit gesprek</string>
     <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
     <string name="SaveToDownloads">Opslaan in Downloads</string>
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Privégesprek aangevraagd</string>
     <string name="EncryptedChatAccepted">Privégesprek gestart</string>
     <string name="MessageLifetimeChanged">%1$s heeft de verlooptijd ingesteld op %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">U hebt de verlooptijd ingesteld op %1$s</string>
+    <string name="MessageLifetimeChangedOutgoing">Je hebt de verlooptijd ingesteld op %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s heeft de verlooptijd uitgeschakeld</string>
-    <string name="MessageLifetimeYouRemoved">U hebt de verlooptijd uitgeschakeld</string>
+    <string name="MessageLifetimeYouRemoved">Je hebt de verlooptijd uitgeschakeld</string>
     <string name="MessageLifetime2s">2 seconden</string>
     <string name="MessageLifetime5s">5 seconden</string>
     <string name="MessageLifetime1m">1 minuut</string>
     <string name="MessageLifetime1h">1 uur</string>
     <string name="MessageLifetime1d">1 dag</string>
     <string name="MessageLifetime1w">1 week</string>
-    <string name="YouHaveNewMessage">U hebt een nieuw bericht</string>
+    <string name="YouHaveNewMessage">Je hebt een nieuw bericht</string>
     <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s heeft u een bericht gestuurd</string>
-    <string name="NotificationMessagePhoto">%1$s heeft u een foto gestuurd</string>
-    <string name="NotificationMessageVideo">%1$s heeft u een video gestuurd</string>
-    <string name="NotificationMessageContact">%1$s heeft een contact met u gedeeld</string>
-    <string name="NotificationMessageMap">%1$s heeft u een locatie gestuurd</string>
-    <string name="NotificationMessageDocument">%1$s heeft u een document gestuurd</string>
-    <string name="NotificationMessageAudio">%1$s heeft u een geluidsbestand gestuurd</string>
+    <string name="NotificationMessageNoText">%1$s heeft je een bericht gestuurd</string>
+    <string name="NotificationMessagePhoto">%1$s heeft je een foto gestuurd</string>
+    <string name="NotificationMessageVideo">%1$s heeft je een video gestuurd</string>
+    <string name="NotificationMessageContact">%1$s heeft een contact met je gedeeld</string>
+    <string name="NotificationMessageMap">%1$s heeft je een locatie gestuurd</string>
+    <string name="NotificationMessageDocument">%1$s heeft je een document gestuurd</string>
+    <string name="NotificationMessageAudio">%1$s heeft je een geluidsbestand gestuurd</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
     <string name="NotificationMessageGroupNoText">%1$s heeft een bericht gestuurd naar de groep %2$s</string>
     <string name="NotificationMessageGroupPhoto">%1$s heeft een foto gestuurd naar de groep %2$s</string>
@@ -144,21 +145,21 @@
     <string name="NotificationMessageGroupMap">%1$s heeft een locatie gestuurd naar de groep %2$s</string>
     <string name="NotificationMessageGroupDocument">%1$s heeft een document gestuurd naar de groep %2$s</string>
     <string name="NotificationMessageGroupAudio">%1$s heeft een geluidsbestand gestuurd naar de groep %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s heeft u uitgenodigd voor de groep %2$s</string>
+    <string name="NotificationInvitedToGroup">%1$s heeft je uitgenodigd voor de groep %2$s</string>
     <string name="NotificationEditedGroupName">%1$s heeft de naam van de groep %2$s gewijzigd</string>
     <string name="NotificationEditedGroupPhoto">%1$s heeft de afbeelding van de groep %2$s gewijzigd</string>
     <string name="NotificationGroupAddMember">%1$s heeft %3$s uitgenodigd voor de groep %2$s</string>
     <string name="NotificationGroupKickMember">%1$s heeft %3$s verwijderd uit de groep %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s heeft u verwijderd uit de groep %2$s</string>
+    <string name="NotificationGroupKickYou">%1$s heeft je verwijderd uit de groep %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s heeft de groep %2$s verlaten</string>
     <string name="NotificationContactJoined">%1$s heeft nu Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nEr is op uw account ingelogd vanaf een nieuw apparaat op %2$s\n\nApparaat: %3$s\nLocatie: %4$s\n\nAls u dit niet was, kunt u alle sessies beëindigen via de instellingen.\n\nHet Telegram-team</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nEr is op je account ingelogd vanaf een nieuw apparaat op %2$s\n\nApparaat: %3$s\nLocatie: %4$s\n\nAls jij dit niet was, kun je alle sessies beëindigen via Instellingen – Alle andere sessies beëindigen.\n\nHet Telegram-team</string>
     <string name="NotificationContactNewPhoto">%1$s heeft zijn/haar profielfoto gewijzigd</string>
 
     <!--contacts view-->
     <string name="SelectContact">Kies een contact</string>
     <string name="NoContacts">Nog geen contacten</string>
-    <string name="InviteText">Hoi, zullen we overstappen op Telegram? http://telegram.org/dl2</string>
+    <string name="InviteText">Hey! Zullen we overstappen op Telegram? http://telegram.org/dl2</string>
     <string name="TodayAt">vandaag om</string>
     <string name="YesterdayAt">gisteren om</string>
     <string name="OtherAt">om</string>
@@ -213,7 +214,7 @@
     <string name="ShortMessageLifetime1h">1u</string>
     <string name="ShortMessageLifetime1d">1d</string>
     <string name="ShortMessageLifetime1w">1w</string>
-    <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor dit privégesprek met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is uw gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
+    <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor dit privégesprek met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is jullie gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
 
     <!--settings view-->
     <string name="ResetNotificationsText">Alle meldingsinstellingen herstellen</string>
@@ -222,18 +223,18 @@
     <string name="EnableAnimations">Animaties</string>
     <string name="Unblock">Deblokkeren</string>
     <string name="UnblockText">Houd een gebruiker ingedrukt om hem/haar te deblokkeren.</string>
-    <string name="NoBlocked">Nog geen geblokkeerde gebruikers</string>
-    <string name="YourPhoneNumber">UW TELEFOONNUMMER</string>
+    <string name="NoBlocked">Geen geblokkeerde gebruikers</string>
+    <string name="YourPhoneNumber">JE TELEFOONNUMMER</string>
     <string name="MessageNotifications">BERICHTMELDINGEN</string>
     <string name="Alert">Waarschuwing</string>
-    <string name="MessagePreview">Voorbeeld van berichten</string>
+    <string name="MessagePreview">Voorvertoning</string>
     <string name="GroupNotifications">GROEPSMELDINGEN</string>
     <string name="Sound">Geluid</string>
-    <string name="InAppNotifications">IN-APP MELDINGEN</string>
-    <string name="InAppSounds">In-app geluiden</string>
-    <string name="InAppVibrate">In-app trillen</string>
+    <string name="InAppNotifications">IN-APP BERICHTGEVING</string>
+    <string name="InAppSounds">Geluiden</string>
+    <string name="InAppVibrate">Trillen</string>
     <string name="Vibrate">Trillen</string>
-    <string name="InAppPreview">In-app voorbeelden</string>
+    <string name="InAppPreview">Voorvertoningen</string>
     <string name="Reset">RESETTEN</string>
     <string name="ResetAllNotifications">Alle meldingen resetten</string>
     <string name="UndoAllCustom">Alle aangepaste meldingsinstellingen ongedaan maken voor alle contacten en groepen.</string>
@@ -241,7 +242,7 @@
     <string name="BlockedUsers">Geblokkeerde gebruikers</string>
     <string name="SaveIncomingPhotos">Inkomende foto\'s opslaan</string>
     <string name="LogOut">Uitloggen</string>
-    <string name="YourFirstNameAndLastName">UW VOOR- EN ACHTERNAAM</string>
+    <string name="YourFirstNameAndLastName">JE VOOR- EN ACHTERNAAM</string>
     <string name="NoSound">Geen geluid</string>
     <string name="Default">Standaard</string>
     <string name="Support">ONDERSTEUNING</string>
@@ -257,21 +258,22 @@
     <string name="ContactJoined">Contact lid geworden van Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Taal</string>
-    <string name="AskAQuestionInfo">Houd er rekening mee dat de ondersteuning van Telegram door vrijwilligers wordt gedaan. We doen ons best om zo snel als mogelijk te antwoorden, maar het kan even even duren.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href="http://telegram.org/faq#general">veelgestelde vragen (FAQ)</a>]]>: hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href="http://telegram.org/faq#troubleshooting">het oplossen van problemen</a>]]>.</string>
+    <string name="AskAQuestionInfo">Houd er rekening mee dat de ondersteuning van Telegram door vrijwilligers wordt gedaan. We doen ons best om zo snel mogelijk te antwoorden, maar het kan even even duren.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href="http://telegram.org/faq#general">veelgestelde vragen</a>]]>: hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href="http://telegram.org/faq#troubleshooting">het oplossen van problemen</a>]]>.</string>
     <string name="AskButton">Vraag een vrijwilliger</string>
-    <string name="TelegramFaq">Telegram veelgestelde vragen (FAQ)</string>
+    <string name="TelegramFaq">Veelgestelde vragen</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Verwijder vertaling?</string>
     <string name="IncorrectLocalization">Ongeldig vertalingsbestand</string>
     <string name="Enabled">Inschakelen</string>
     <string name="Disabled">Uitschakelen</string>
-    <string name="NotificationsService">Meldingen service</string>
-    <string name="NotificationsServiceDisableInfo">Als Google Play services genoeg is om notificaties te ontvang, kan de meldingen service worden uitgeschakeld. Echter, we adviseren de service ingeschakeld te laten zodat de app in de achtergrond blijft draaien en meldingen direct worden ontvangen.</string>
+    <string name="NotificationsService">Meldingenservice</string>
+    <string name="NotificationsServiceDisableInfo">Als google play services genoeg is om notificaties te ontvangen, kan de meldingenservice worden uitgeschakeld. Echter, we adviseren de service ingeschakeld te laten zodat de app in de achtergrond blijft draaien en meldingen direct worden ontvangen.</string>
     <string name="SortBy">Sorteren op</string>
     <string name="ImportContacts">Importeer contacten</string>
-    <string name="WiFiOnly">alleen via WIFI</string>
+    <string name="WiFiOnly">Alleen via WiFi</string>
     <string name="SortFirstName">Voornaam</string>
     <string name="SortLastName">Achternaam</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">Nog geen media gedeeld</string>
@@ -292,8 +294,8 @@
     <string name="SaveToGallery">Opslaan in galerij</string>
     <string name="Of">%1$d van %2$d</string>
     <string name="Gallery">Galerij</string>
-    <string name="AllPhotos">All Photos</string>
-    <string name="NoPhotos">No photos yet</string>
+    <string name="AllPhotos">Alle foto\'s</string>
+    <string name="NoPhotos">Nog geen foto\'s</string>
 
     <!--button titles-->
     <string name="Next">Volgende</string>
@@ -324,24 +326,24 @@
     <string name="ActionChangedPhoto">un1 heeft de groepsafbeelding gewijzigd</string>
     <string name="ActionChangedTitle">un1 heeft de groepsnaam gewijzigd naar un2</string>
     <string name="ActionCreateGroup">un1 heeft de groep gemaakt</string>
-    <string name="ActionYouKickUser">U hebt un2 verwijderd</string>
-    <string name="ActionYouLeftUser">U hebt de groep verlaten</string>
-    <string name="ActionYouAddUser">U hebt un2 toegevoegd</string>
-    <string name="ActionYouRemovedPhoto">U hebt de groepsafbeelding verwijderd</string>
-    <string name="ActionYouChangedPhoto">U hebt de groepsafbeelding gewijzigd</string>
-    <string name="ActionYouChangedTitle">U hebt de groepsnaam gewijzigd naar un2</string>
-    <string name="ActionYouCreateGroup">U hebt de groep gemaakt</string>
-    <string name="ActionKickUserYou">un1 heeft u verwijderd</string>
-    <string name="ActionAddUserYou">un1 heeft u toegevoegd</string>
-    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund door uw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: http://telegram.org/update</string>
+    <string name="ActionYouKickUser">Je hebt un2 verwijderd</string>
+    <string name="ActionYouLeftUser">Je hebt de groep verlaten</string>
+    <string name="ActionYouAddUser">Je hebt un2 toegevoegd</string>
+    <string name="ActionYouRemovedPhoto">Je hebt de groepsafbeelding verwijderd</string>
+    <string name="ActionYouChangedPhoto">Je hebt de groepsafbeelding gewijzigd</string>
+    <string name="ActionYouChangedTitle">Je hebt de groepsnaam gewijzigd naar un2</string>
+    <string name="ActionYouCreateGroup">Je hebt de groep gemaakt</string>
+    <string name="ActionKickUserYou">un1 heeft je verwijderd</string>
+    <string name="ActionAddUserYou">un1 heeft je toegevoegd</string>
+    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund door jouw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: http://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Locatie</string>
     <string name="AttachContact">Contact</string>
     <string name="AttachDocument">Document</string>
     <string name="AttachAudio">Geluidsbestand</string>
-    <string name="FromYou">U</string>
-    <string name="ActionTakeScreenshootYou">U heeft een schermafbeelding gemaakt!</string>
+    <string name="FromYou">Jij</string>
+    <string name="ActionTakeScreenshootYou">Je hebt een schermafbeelding gemaakt!</string>
     <string name="ActionTakeScreenshoot">un1 maakte een schermafbeeling!</string>
 
     <!--Alert messages-->
@@ -352,10 +354,10 @@
     <string name="InvalidFirstName">Ongeldige voornaam</string>
     <string name="InvalidLastName">Ongeldige achternaam</string>
     <string name="Loading">Bezig met laden…</string>
-    <string name="NoPlayerInstalled">U hebt geen mediaspeler. Installeer een mediaspeler om door te gaan.</string>
-    <string name="NoHandleAppInstalled">U hebt geen applicaties die het MIME-type \'%1$s\' ondersteunen. Installeer een geschikte applicatie om door te gaan.</string>
-    <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wilt u een uitnodiging sturen?</string>
-    <string name="AreYouSure">Weet u het zeker?</string>
+    <string name="NoPlayerInstalled">Je hebt geen mediaspeler. Installeer een mediaspeler om door te gaan.</string>
+    <string name="NoHandleAppInstalled">Je hebt geen applicaties die het MIME-type \'%1$s\' ondersteunen. Installeer een geschikte applicatie om door te gaan.</string>
+    <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wil je een uitnodiging sturen?</string>
+    <string name="AreYouSure">Weet je het zeker?</string>
     <string name="AddContactQ">Contact toevoegen?</string>
     <string name="AddToTheGroup">%1$s toevoegen aan de groep?</string>
     <string name="ForwardMessagesTo">Berichten doorsturen naar %1$s?</string>
@@ -372,9 +374,9 @@
     <string name="Page1Message">Welkom in het tijdperk van snel en veilig chatten</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> bezorgt berichten sneller dan elke andere app</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is altijd gratis. Geen advertenties. Geen abonnementskosten</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligt uw berichten tegen hackers</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> heeft geen beperkingen op de grootte van uw media en gesprekken</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot uw berichten vanaf meerdere apparaten</string>
+    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligt je berichten tegen hackers</string>
+    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> heeft geen beperkingen op de grootte van je media en gesprekken</string>
+    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten vanaf meerdere apparaten</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld en kunnen zichzelf vernietigen</string>
     <string name="StartMessaging">Begin nu met chatten</string>
 
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index ff7b82f07..40fcdb908 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -100,8 +100,8 @@
     <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para uma conversa secreta.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para uma conversa secreta.</string>
     <string name="EncryptedDescriptionTitle">Conversas secretas:</string>
-    <string name="EncryptedDescription1">Utilizam criptografia ponta a ponta</string>
-    <string name="EncryptedDescription2">Não deixam rasto em nossos servidores</string>
+    <string name="EncryptedDescription1">Utilizam criptografia ponto a ponto</string>
+    <string name="EncryptedDescription2">Não deixam rastro em nossos servidores</string>
     <string name="EncryptedDescription3">Têm temporizador para a autodestruição das mensagens</string>
     <string name="EncryptedDescription4">Não permitem o reencaminhamento</string>
     <string name="OneNewMessage">%1$d nova mensagem</string>
@@ -113,6 +113,7 @@
     <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
     <string name="SaveToDownloads">Salvar em downloads</string>
     <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Conversa secreta solicitada</string>
@@ -272,6 +273,7 @@
     <string name="WiFiOnly">Unicamente com WiFi</string>
     <string name="SortFirstName">Primeiro nome</string>
     <string name="SortLastName">Sobrenome</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">Ainda não há mídia compartilhada</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 56fab818f..110e2c476 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -113,6 +113,7 @@
     <string name="SlideToCancel">DESLIZAR PARA CANCELAR</string>
     <string name="SaveToDownloads">Guardar nas transferências</string>
     <string name="ApplyLocalizationFile">Aplicar o ficheiro de localização</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Chat secreto pedido</string>
@@ -272,6 +273,7 @@
     <string name="WiFiOnly">Unicamente com WiFi</string>
     <string name="SortFirstName">Nome</string>
     <string name="SortLastName">Apelidos</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">Ainda não há multimédia partilhado</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 925862056..8030a4c68 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -113,6 +113,7 @@
     <string name="SlideToCancel">SLIDE TO CANCEL</string>
     <string name="SaveToDownloads">Save to downloads</string>
     <string name="ApplyLocalizationFile">Apply localization file</string>
+    <string name="UnsupportedAttachment">Unsupported attachment</string>
 
     <!--notification-->
     <string name="EncryptedChatRequested">Secret chat requested</string>
@@ -272,6 +273,7 @@
     <string name="WiFiOnly">Via WiFi only</string>
     <string name="SortFirstName">First name</string>
     <string name="SortLastName">Last name</string>
+    <string name="LedColor">LED Color</string>
 
     <!--media view-->
     <string name="NoMedia">No shared media yet</string>
diff --git a/Tools/EmojiTextureMaker.m b/Tools/EmojiTextureMaker.m
new file mode 100644
index 000000000..0d13bacb9
--- /dev/null
+++ b/Tools/EmojiTextureMaker.m
@@ -0,0 +1,263 @@
+//
+//  AppDelegate.m
+//  texmaker
+//
+//  Created by Nikolay Kudashov on 16.04.14.
+//  Copyright (c) 2014 telegram. All rights reserved.
+//
+
+#import "AppDelegate.h"
+
+@implementation AppDelegate
+
+- (NSData *)reversedData:(NSData *)data {
+    NSData *myData = data;
+    
+    NSMutableData *reversedData = [[NSMutableData alloc] init];
+    const char *bytes = [myData bytes];
+    int datalength = (int)[myData length];
+    
+    for (int i = datalength - 1; i >= 0; i--) {
+        [reversedData appendBytes:&bytes[i] length:1];
+    }
+    
+    return reversedData;
+}
+
+void CGImageWriteToFile(CGImageRef image, NSString *path) {
+    CFURLRef url = (__bridge CFURLRef)[NSURL fileURLWithPath:path];
+    CGImageDestinationRef destination = CGImageDestinationCreateWithURL(url, kUTTypePNG, 1, NULL);
+    CGImageDestinationAddImage(destination, image, nil);
+    if (!CGImageDestinationFinalize(destination)) {
+        NSLog(@"Failed to write image to %@", path);
+    }
+    CFRelease(destination);
+}
+
+NSInteger sortFunc(id obj1, id obj2, void *context) {
+    NSNumber *ov1 = (NSNumber *)obj1;
+    NSNumber *ov2 = (NSNumber *)obj2;
+    return [ov1 compare:ov2];
+}
+
+- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
+    NSArray *array2 = @[
+            @[@0x00000000D83DDE04, @0x00000000D83DDE03, @0x00000000D83DDE00, @0x00000000D83DDE0A, @0x000000000000263A, @0x00000000D83DDE09, @0x00000000D83DDE0D,
+            @0x00000000D83DDE18, @0x00000000D83DDE1A, @0x00000000D83DDE17, @0x00000000D83DDE19, @0x00000000D83DDE1C, @0x00000000D83DDE1D, @0x00000000D83DDE1B,
+            @0x00000000D83DDE33, @0x00000000D83DDE01, @0x00000000D83DDE14, @0x00000000D83DDE0C, @0x00000000D83DDE12, @0x00000000D83DDE1E, @0x00000000D83DDE23,
+            @0x00000000D83DDE22, @0x00000000D83DDE02, @0x00000000D83DDE2D, @0x00000000D83DDE2A, @0x00000000D83DDE25, @0x00000000D83DDE30, @0x00000000D83DDE05,
+            @0x00000000D83DDE13, @0x00000000D83DDE29, @0x00000000D83DDE2B, @0x00000000D83DDE28, @0x00000000D83DDE31, @0x00000000D83DDE20, @0x00000000D83DDE21,
+            @0x00000000D83DDE24, @0x00000000D83DDE16, @0x00000000D83DDE06, @0x00000000D83DDE0B, @0x00000000D83DDE37, @0x00000000D83DDE0E, @0x00000000D83DDE34,
+            @0x00000000D83DDE35, @0x00000000D83DDE32, @0x00000000D83DDE1F, @0x00000000D83DDE26, @0x00000000D83DDE27, @0x00000000D83DDE08, @0x00000000D83DDC7F,
+            @0x00000000D83DDE2E, @0x00000000D83DDE2C, @0x00000000D83DDE10, @0x00000000D83DDE15, @0x00000000D83DDE2F, @0x00000000D83DDE36, @0x00000000D83DDE07,
+            @0x00000000D83DDE0F, @0x00000000D83DDE11, @0x00000000D83DDC72, @0x00000000D83DDC73, @0x00000000D83DDC6E, @0x00000000D83DDC77, @0x00000000D83DDC82,
+            @0x00000000D83DDC76, @0x00000000D83DDC66, @0x00000000D83DDC67, @0x00000000D83DDC68, @0x00000000D83DDC69, @0x00000000D83DDC74, @0x00000000D83DDC75,
+            @0x00000000D83DDC71, @0x00000000D83DDC7C, @0x00000000D83DDC78, @0x00000000D83DDE3A, @0x00000000D83DDE38, @0x00000000D83DDE3B, @0x00000000D83DDE3D,
+            @0x00000000D83DDE3C, @0x00000000D83DDE40, @0x00000000D83DDE3F, @0x00000000D83DDE39, @0x00000000D83DDE3E, @0x00000000D83DDC79, @0x00000000D83DDC7A,
+            @0x00000000D83DDE48, @0x00000000D83DDE49, @0x00000000D83DDE4A, @0x00000000D83DDC80, @0x00000000D83DDC7D, @0x00000000D83DDCA9, @0x00000000D83DDD25,
+            @0x0000000000002728, @0x00000000D83CDF1F, @0x00000000D83DDCAB, @0x00000000D83DDCA5, @0x00000000D83DDCA2, @0x00000000D83DDCA6, @0x00000000D83DDCA7,
+            @0x00000000D83DDCA4, @0x00000000D83DDCA8, @0x00000000D83DDC42, @0x00000000D83DDC40, @0x00000000D83DDC43, @0x00000000D83DDC45, @0x00000000D83DDC44,
+            @0x00000000D83DDC4D, @0x00000000D83DDC4E, @0x00000000D83DDC4C, @0x00000000D83DDC4A, @0x000000000000270A, @0x000000000000270C, @0x00000000D83DDC4B,
+            @0x000000000000270B, @0x00000000D83DDC50, @0x00000000D83DDC46, @0x00000000D83DDC47, @0x00000000D83DDC49, @0x00000000D83DDC48, @0x00000000D83DDE4C,
+            @0x00000000D83DDE4F, @0x000000000000261D, @0x00000000D83DDC4F, @0x00000000D83DDCAA, @0x00000000D83DDEB6, @0x00000000D83CDFC3, @0x00000000D83DDC83,
+            @0x00000000D83DDC6B, @0x00000000D83DDC6A, @0x00000000D83DDC6C, @0x00000000D83DDC6D, @0x00000000D83DDC8F, @0x00000000D83DDC91, @0x00000000D83DDC6F,
+            @0x00000000D83DDE46, @0x00000000D83DDE45, @0x00000000D83DDC81, @0x00000000D83DDE4B, @0x00000000D83DDC86, @0x00000000D83DDC87, @0x00000000D83DDC85,
+            @0x00000000D83DDC70, @0x00000000D83DDE4E, @0x00000000D83DDE4D, @0x00000000D83DDE47, @0x00000000D83CDFA9, @0x00000000D83DDC51, @0x00000000D83DDC52,
+            @0x00000000D83DDC5F, @0x00000000D83DDC5E, @0x00000000D83DDC61, @0x00000000D83DDC60, @0x00000000D83DDC62, @0x00000000D83DDC55, @0x00000000D83DDC54,
+            @0x00000000D83DDC5A, @0x00000000D83DDC57, @0x00000000D83CDFBD, @0x00000000D83DDC56, @0x00000000D83DDC58, @0x00000000D83DDC59, @0x00000000D83DDCBC,
+            @0x00000000D83DDC5C, @0x00000000D83DDC5D, @0x00000000D83DDC5B, @0x00000000D83DDC53, @0x00000000D83CDF80, @0x00000000D83CDF02, @0x00000000D83DDC84,
+            @0x00000000D83DDC9B, @0x00000000D83DDC99, @0x00000000D83DDC9C, @0x00000000D83DDC9A, @0x0000000000002764, @0x00000000D83DDC94, @0x00000000D83DDC97,
+            @0x00000000D83DDC93, @0x00000000D83DDC95, @0x00000000D83DDC96, @0x00000000D83DDC9E, @0x00000000D83DDC98, @0x00000000D83DDC8C, @0x00000000D83DDC8B,
+            @0x00000000D83DDC8D, @0x00000000D83DDC8E, @0x00000000D83DDC64, @0x00000000D83DDC65, @0x00000000D83DDCAC, @0x00000000D83DDC63, @0x00000000D83DDCAD],
+
+            @[@0x00000000D83DDC36, @0x00000000D83DDC3A, @0x00000000D83DDC31, @0x00000000D83DDC2D, @0x00000000D83DDC39, @0x00000000D83DDC30, @0x00000000D83DDC38,
+            @0x00000000D83DDC2F, @0x00000000D83DDC28, @0x00000000D83DDC3B, @0x00000000D83DDC37, @0x00000000D83DDC3D, @0x00000000D83DDC2E, @0x00000000D83DDC17,
+            @0x00000000D83DDC35, @0x00000000D83DDC12, @0x00000000D83DDC34, @0x00000000D83DDC11, @0x00000000D83DDC18, @0x00000000D83DDC3C, @0x00000000D83DDC27,
+            @0x00000000D83DDC26, @0x00000000D83DDC24, @0x00000000D83DDC25, @0x00000000D83DDC23, @0x00000000D83DDC14, @0x00000000D83DDC0D, @0x00000000D83DDC22,
+            @0x00000000D83DDC1B, @0x00000000D83DDC1D, @0x00000000D83DDC1C, @0x00000000D83DDC1E, @0x00000000D83DDC0C, @0x00000000D83DDC19, @0x00000000D83DDC1A,
+            @0x00000000D83DDC20, @0x00000000D83DDC1F, @0x00000000D83DDC2C, @0x00000000D83DDC33, @0x00000000D83DDC0B, @0x00000000D83DDC04, @0x00000000D83DDC0F,
+            @0x00000000D83DDC00, @0x00000000D83DDC03, @0x00000000D83DDC05, @0x00000000D83DDC07, @0x00000000D83DDC09, @0x00000000D83DDC0E, @0x00000000D83DDC10,
+            @0x00000000D83DDC13, @0x00000000D83DDC15, @0x00000000D83DDC16, @0x00000000D83DDC01, @0x00000000D83DDC02, @0x00000000D83DDC32, @0x00000000D83DDC21,
+            @0x00000000D83DDC0A, @0x00000000D83DDC2B, @0x00000000D83DDC2A, @0x00000000D83DDC06, @0x00000000D83DDC08, @0x00000000D83DDC29, @0x00000000D83DDC3E,
+            @0x00000000D83DDC90, @0x00000000D83CDF38, @0x00000000D83CDF37, @0x00000000D83CDF40, @0x00000000D83CDF39, @0x00000000D83CDF3B, @0x00000000D83CDF3A,
+            @0x00000000D83CDF41, @0x00000000D83CDF43, @0x00000000D83CDF42, @0x00000000D83CDF3F, @0x00000000D83CDF3E, @0x00000000D83CDF44, @0x00000000D83CDF35,
+            @0x00000000D83CDF34, @0x00000000D83CDF32, @0x00000000D83CDF33, @0x00000000D83CDF30, @0x00000000D83CDF31, @0x00000000D83CDF3C, @0x00000000D83CDF10,
+            @0x00000000D83CDF1E, @0x00000000D83CDF1D, @0x00000000D83CDF1A, @0x00000000D83CDF11, @0x00000000D83CDF12, @0x00000000D83CDF13, @0x00000000D83CDF14,
+            @0x00000000D83CDF15, @0x00000000D83CDF16, @0x00000000D83CDF17, @0x00000000D83CDF18, @0x00000000D83CDF1C, @0x00000000D83CDF1B, @0x00000000D83CDF19,
+            @0x00000000D83CDF0D, @0x00000000D83CDF0E, @0x00000000D83CDF0F, @0x00000000D83CDF0B, @0x00000000D83CDF0C, @0x00000000D83CDF20, @0x0000000000002B50,
+            @0x0000000000002600, @0x00000000000026C5, @0x0000000000002601, @0x00000000000026A1, @0x0000000000002614, @0x0000000000002744, @0x00000000000026C4,
+            @0x00000000D83CDF00, @0x00000000D83CDF01, @0x00000000D83CDF08, @0x00000000D83CDF0A],
+            
+            @[@0x00000000D83CDF8D, @0x00000000D83DDC9D, @0x00000000D83CDF8E, @0x00000000D83CDF92, @0x00000000D83CDF93, @0x00000000D83CDF8F, @0x00000000D83CDF86, @0x00000000D83CDF87,
+            @0x00000000D83CDF90, @0x00000000D83CDF91, @0x00000000D83CDF83, @0x00000000D83DDC7B, @0x00000000D83CDF85, @0x00000000D83CDF84, @0x00000000D83CDF81,
+            @0x00000000D83CDF8B, @0x00000000D83CDF89, @0x00000000D83CDF8A, @0x00000000D83CDF88, @0x00000000D83CDF8C, @0x00000000D83DDD2E, @0x00000000D83CDFA5,
+            @0x00000000D83DDCF7, @0x00000000D83DDCF9, @0x00000000D83DDCFC, @0x00000000D83DDCBF, @0x00000000D83DDCC0, @0x00000000D83DDCBD, @0x00000000D83DDCBE,
+            @0x00000000D83DDCBB, @0x00000000D83DDCF1, @0x000000000000260E, @0x00000000D83DDCDE, @0x00000000D83DDCDF, @0x00000000D83DDCE0, @0x00000000D83DDCE1,
+            @0x00000000D83DDCFA, @0x00000000D83DDCFB, @0x00000000D83DDD0A, @0x00000000D83DDD09, @0x00000000D83DDD08, @0x00000000D83DDD07, @0x00000000D83DDD14, @0x00000000D83DDD15,
+            @0x00000000D83DDCE2, @0x00000000D83DDCE3, @0x00000000000023F3, @0x000000000000231B, @0x00000000000023F0, @0x000000000000231A,
+            @0x00000000D83DDD13, @0x00000000D83DDD12, @0x00000000D83DDD0F, @0x00000000D83DDD10, @0x00000000D83DDD11, @0x00000000D83DDD0E, @0x00000000D83DDCA1,
+            @0x00000000D83DDD26, @0x00000000D83DDD06, @0x00000000D83DDD05, @0x00000000D83DDD0C, @0x00000000D83DDD0B, @0x00000000D83DDD0D, @0x00000000D83DDEC1, @0x00000000D83DDEC0,
+            @0x00000000D83DDEBF, @0x00000000D83DDEBD, @0x00000000D83DDD27, @0x00000000D83DDD29, @0x00000000D83DDD28, @0x00000000D83DDEAA, @0x00000000D83DDEAC,
+            @0x00000000D83DDCA3, @0x00000000D83DDD2B, @0x00000000D83DDD2A, @0x00000000D83DDC8A, @0x00000000D83DDC89, @0x00000000D83DDCB0, @0x00000000D83DDCB4,
+            @0x00000000D83DDCB5, @0x00000000D83DDCB7, @0x00000000D83DDCB6, @0x00000000D83DDCB3, @0x00000000D83DDCB8, @0x00000000D83DDCF2, @0x00000000D83DDCE7,
+            @0x00000000D83DDCE5, @0x00000000D83DDCE4, @0x0000000000002709, @0x00000000D83DDCE9, @0x00000000D83DDCE8, @0x00000000D83DDCEF, @0x00000000D83DDCEB,
+            @0x00000000D83DDCEA, @0x00000000D83DDCEC, @0x00000000D83DDCED, @0x00000000D83DDCEE, @0x00000000D83DDCE6, @0x00000000D83DDCDD, @0x00000000D83DDCC4,
+            @0x00000000D83DDCC3, @0x00000000D83DDCD1, @0x00000000D83DDCCA, @0x00000000D83DDCC8, @0x00000000D83DDCC9, @0x00000000D83DDCDC, @0x00000000D83DDCCB,
+            @0x00000000D83DDCC5, @0x00000000D83DDCC6, @0x00000000D83DDCC7, @0x00000000D83DDCC1, @0x00000000D83DDCC2, @0x0000000000002702, @0x00000000D83DDCCC,
+            @0x00000000D83DDCCE, @0x0000000000002712, @0x000000000000270F, @0x00000000D83DDCCF, @0x00000000D83DDCD0, @0x00000000D83DDCD5, @0x00000000D83DDCD7,
+            @0x00000000D83DDCD8, @0x00000000D83DDCD9, @0x00000000D83DDCD3, @0x00000000D83DDCD4, @0x00000000D83DDCD2, @0x00000000D83DDCDA, @0x00000000D83DDCD6,
+            @0x00000000D83DDD16, @0x00000000D83DDCDB, @0x00000000D83DDD2C, @0x00000000D83DDD2D, @0x00000000D83DDCF0, @0x00000000D83CDFA8, @0x00000000D83CDFAC,
+            @0x00000000D83CDFA4, @0x00000000D83CDFA7, @0x00000000D83CDFBC, @0x00000000D83CDFB5, @0x00000000D83CDFB6, @0x00000000D83CDFB9, @0x00000000D83CDFBB,
+            @0x00000000D83CDFBA, @0x00000000D83CDFB7, @0x00000000D83CDFB8, @0x00000000D83DDC7E, @0x00000000D83CDFAE, @0x00000000D83CDCCF, @0x00000000D83CDFB4,
+            @0x00000000D83CDC04, @0x00000000D83CDFB2, @0x00000000D83CDFAF, @0x00000000D83CDFC8, @0x00000000D83CDFC0, @0x00000000000026BD, @0x00000000000026BE,
+            @0x00000000D83CDFBE, @0x00000000D83CDFB1, @0x00000000D83CDFC9, @0x00000000D83CDFB3, @0x00000000000026F3, @0x00000000D83DDEB5, @0x00000000D83DDEB4,
+            @0x00000000D83CDFC1, @0x00000000D83CDFC7, @0x00000000D83CDFC6, @0x00000000D83CDFBF, @0x00000000D83CDFC2, @0x00000000D83CDFCA, @0x00000000D83CDFC4,
+            @0x00000000D83CDFA3, @0x0000000000002615, @0x00000000D83CDF75, @0x00000000D83CDF76, @0x00000000D83CDF7C, @0x00000000D83CDF7A, @0x00000000D83CDF7B,
+            @0x00000000D83CDF78, @0x00000000D83CDF79, @0x00000000D83CDF77, @0x00000000D83CDF74, @0x00000000D83CDF55, @0x00000000D83CDF54, @0x00000000D83CDF5F,
+            @0x00000000D83CDF57, @0x00000000D83CDF56, @0x00000000D83CDF5D, @0x00000000D83CDF5B, @0x00000000D83CDF64, @0x00000000D83CDF71, @0x00000000D83CDF63,
+            @0x00000000D83CDF65, @0x00000000D83CDF59, @0x00000000D83CDF58, @0x00000000D83CDF5A, @0x00000000D83CDF5C, @0x00000000D83CDF72, @0x00000000D83CDF62,
+            @0x00000000D83CDF61, @0x00000000D83CDF73, @0x00000000D83CDF5E, @0x00000000D83CDF69, @0x00000000D83CDF6E, @0x00000000D83CDF66, @0x00000000D83CDF68,
+            @0x00000000D83CDF67, @0x00000000D83CDF82, @0x00000000D83CDF70, @0x00000000D83CDF6A, @0x00000000D83CDF6B, @0x00000000D83CDF6C, @0x00000000D83CDF6D,
+            @0x00000000D83CDF6F, @0x00000000D83CDF4E, @0x00000000D83CDF4F, @0x00000000D83CDF4A, @0x00000000D83CDF4B, @0x00000000D83CDF52, @0x00000000D83CDF47,
+            @0x00000000D83CDF49, @0x00000000D83CDF53, @0x00000000D83CDF51, @0x00000000D83CDF48, @0x00000000D83CDF4C, @0x00000000D83CDF50, @0x00000000D83CDF4D,
+            @0x00000000D83CDF60, @0x00000000D83CDF46, @0x00000000D83CDF45, @0x00000000D83CDF3D],
+            
+            @[@0x00000000D83CDFE0, @0x00000000D83CDFE1, @0x00000000D83CDFEB, @0x00000000D83CDFE2, @0x00000000D83CDFE3, @0x00000000D83CDFE5, @0x00000000D83CDFE6, @0x00000000D83CDFEA,
+            @0x00000000D83CDFE9, @0x00000000D83CDFE8, @0x00000000D83DDC92, @0x00000000000026EA, @0x00000000D83CDFEC, @0x00000000D83CDFE4, @0x00000000D83CDF07,
+            @0x00000000D83CDF06, @0x00000000D83CDFEF, @0x00000000D83CDFF0, @0x00000000000026FA, @0x00000000D83CDFED, @0x00000000D83DDDFC, @0x00000000D83DDDFE,
+            @0x00000000D83DDDFB, @0x00000000D83CDF04, @0x00000000D83CDF05, @0x00000000D83CDF03, @0x00000000D83DDDFD, @0x00000000D83CDF09, @0x00000000D83CDFA0,
+            @0x00000000D83CDFA1, @0x00000000000026F2, @0x00000000D83CDFA2, @0x00000000D83DDEA2, @0x00000000000026F5, @0x00000000D83DDEA4, @0x00000000D83DDEA3,
+            @0x0000000000002693, @0x00000000D83DDE80, @0x0000000000002708, @0x00000000D83DDCBA, @0x00000000D83DDE81, @0x00000000D83DDE82, @0x00000000D83DDE8A,
+            @0x00000000D83DDE89, @0x00000000D83DDE9E, @0x00000000D83DDE86, @0x00000000D83DDE84, @0x00000000D83DDE85, @0x00000000D83DDE88, @0x00000000D83DDE87,
+            @0x00000000D83DDE9D, @0x00000000D83DDE8B, @0x00000000D83DDE83, @0x00000000D83DDE8E, @0x00000000D83DDE8C, @0x00000000D83DDE8D, @0x00000000D83DDE99,
+            @0x00000000D83DDE98, @0x00000000D83DDE97, @0x00000000D83DDE95, @0x00000000D83DDE96, @0x00000000D83DDE9B, @0x00000000D83DDE9A, @0x00000000D83DDEA8,
+            @0x00000000D83DDE93, @0x00000000D83DDE94, @0x00000000D83DDE92, @0x00000000D83DDE91, @0x00000000D83DDE90, @0x00000000D83DDEB2, @0x00000000D83DDEA1,
+            @0x00000000D83DDE9F, @0x00000000D83DDEA0, @0x00000000D83DDE9C, @0x00000000D83DDC88, @0x00000000D83DDE8F, @0x00000000D83CDFAB, @0x00000000D83DDEA6,
+            @0x00000000D83DDEA5, @0x00000000000026A0, @0x00000000D83DDEA7, @0x00000000D83DDD30, @0x00000000000026FD, @0x00000000D83CDFEE, @0x00000000D83CDFB0,
+            @0x0000000000002668, @0x00000000D83DDDFF, @0x00000000D83CDFAA, @0x00000000D83CDFAD, @0x00000000D83DDCCD, @0x00000000D83DDEA9, @0xD83CDDEFD83CDDF5,
+            @0xD83CDDF0D83CDDF7, @0xD83CDDE9D83CDDEA, @0xD83CDDE8D83CDDF3, @0xD83CDDFAD83CDDF8, @0xD83CDDEBD83CDDF7, @0xD83CDDEAD83CDDF8, @0xD83CDDEED83CDDF9,
+            @0xD83CDDF7D83CDDFA, @0xD83CDDECD83CDDE7],
+            
+            @[@0x00000000003120E3, @0x00000000003220E3, @0x00000000003320E3, @0x00000000003420E3, @0x00000000003520E3, @0x00000000003620E3, @0x00000000003720E3, @0x00000000003820E3,
+            @0x00000000003920E3, @0x00000000003020E3, @0x00000000D83DDD1F, @0x00000000D83DDD22, @0x00000000002320E3, @0x00000000D83DDD23, @0x0000000000002B06,
+            @0x0000000000002B07, @0x0000000000002B05, @0x00000000000027A1, @0x00000000D83DDD20, @0x00000000D83DDD21, @0x00000000D83DDD24, @0x0000000000002197,
+            @0x0000000000002196, @0x0000000000002198, @0x0000000000002199, @0x0000000000002194, @0x0000000000002195, @0x00000000D83DDD04, @0x00000000000025C0,
+            @0x00000000000025B6, @0x00000000D83DDD3C, @0x00000000D83DDD3D, @0x00000000000021A9, @0x00000000000021AA, @0x0000000000002139, @0x00000000000023EA,
+            @0x00000000000023E9, @0x00000000000023EB, @0x00000000000023EC, @0x0000000000002935, @0x0000000000002934, @0x00000000D83CDD97, @0x00000000D83DDD00,
+            @0x00000000D83DDD01, @0x00000000D83DDD02, @0x00000000D83CDD95, @0x00000000D83CDD99, @0x00000000D83CDD92, @0x00000000D83CDD93, @0x00000000D83CDD96,
+            @0x00000000D83DDCF6, @0x00000000D83CDFA6, @0x00000000D83CDE01, @0x00000000D83CDE2F, @0x00000000D83CDE33, @0x00000000D83CDE35, @0x00000000D83CDE32,
+            @0x00000000D83CDE34, @0x00000000D83CDE50, @0x00000000D83CDE39, @0x00000000D83CDE3A, @0x00000000D83CDE36, @0x00000000D83CDE1A,
+            @0x00000000D83DDEBB, @0x00000000D83DDEB9, @0x00000000D83DDEBA, @0x00000000D83DDEBC, @0x00000000D83DDEBE, @0x00000000D83DDEB0, @0x00000000D83DDEAE,
+            @0x00000000D83CDD7F, @0x000000000000267F, @0x00000000D83DDEAD, @0x00000000D83CDE37, @0x00000000D83CDE38, @0x00000000D83CDE02, @0x00000000000024C2,
+            @0x00000000D83DDEC2, @0x00000000D83DDEC4, @0x00000000D83DDEC5, @0x00000000D83DDEC3,
+            @0x00000000D83CDE51, @0x0000000000003299, @0x0000000000003297, @0x00000000D83CDD91, @0x00000000D83CDD98, @0x00000000D83CDD94, @0x00000000D83DDEAB,
+            @0x00000000D83DDD1E, @0x00000000D83DDCF5, @0x00000000D83DDEAF, @0x00000000D83DDEB1, @0x00000000D83DDEB3, @0x00000000D83DDEB7, @0x00000000D83DDEB8,
+            @0x00000000000026D4, @0x0000000000002733, @0x0000000000002747, @0x000000000000274E, @0x0000000000002705, @0x0000000000002734, @0x00000000D83DDC9F,
+            @0x00000000D83CDD9A, @0x00000000D83DDCF3, @0x00000000D83DDCF4, @0x00000000D83CDD70, @0x00000000D83CDD71, @0x00000000D83CDD8E, @0x00000000D83CDD7E,
+            @0x00000000D83DDCA0, @0x00000000000027BF, @0x000000000000267B, @0x0000000000002648, @0x0000000000002649, @0x000000000000264A, @0x000000000000264B,
+            @0x000000000000264C, @0x000000000000264D, @0x000000000000264E, @0x000000000000264F, @0x0000000000002650, @0x0000000000002651, @0x0000000000002652,
+            @0x0000000000002653, @0x00000000000026CE, @0x00000000D83DDD2F, @0x00000000D83CDFE7, @0x00000000D83DDCB9, @0x00000000D83DDCB2, @0x00000000D83DDCB1,
+            @0x00000000000000A9, @0x00000000000000AE, @0x0000000000002122, @0x000000000000303D, @0x0000000000003030, @0x00000000D83DDD1D, @0x00000000D83DDD1A,
+            @0x00000000D83DDD19, @0x00000000D83DDD1B, @0x00000000D83DDD1C, @0x000000000000274C, @0x0000000000002B55, @0x0000000000002757, @0x000000000000203C, @0x0000000000002049, @0x0000000000002753,
+            @0x0000000000002755, @0x0000000000002754, @0x00000000D83DDD03, @0x00000000D83DDD5B, @0x00000000D83DDD67, @0x00000000D83DDD50, @0x00000000D83DDD5C,
+            @0x00000000D83DDD51, @0x00000000D83DDD5D, @0x00000000D83DDD52, @0x00000000D83DDD5E, @0x00000000D83DDD53, @0x00000000D83DDD5F, @0x00000000D83DDD54,
+            @0x00000000D83DDD60, @0x00000000D83DDD55, @0x00000000D83DDD56, @0x00000000D83DDD57, @0x00000000D83DDD58, @0x00000000D83DDD59, @0x00000000D83DDD5A,
+            @0x00000000D83DDD61, @0x00000000D83DDD62, @0x00000000D83DDD63, @0x00000000D83DDD64, @0x00000000D83DDD65, @0x00000000D83DDD66, @0x0000000000002716,
+            @0x0000000000002795, @0x0000000000002796, @0x0000000000002797, @0x0000000000002660, @0x0000000000002665, @0x0000000000002663, @0x0000000000002666,
+            @0x00000000D83DDCAE, @0x00000000D83DDCAF, @0x0000000000002714, @0x0000000000002611, @0x00000000D83DDD18, @0x00000000D83DDD17, @0x00000000000027B0,
+            @0x00000000D83DDD31, @0x00000000D83DDD32, @0x00000000D83DDD33, @0x00000000000025FC, @0x00000000000025FB, @0x00000000000025FE, @0x00000000000025FD,
+            @0x00000000000025AA, @0x00000000000025AB, @0x00000000D83DDD3A, @0x0000000000002B1C, @0x0000000000002B1B, @0x00000000000026AB, @0x00000000000026AA,
+            @0x00000000D83DDD34, @0x00000000D83DDD35, @0x00000000D83DDD3B, @0x00000000D83DDD36, @0x00000000D83DDD37, @0x00000000D83DDD38, @0x00000000D83DDD39]];
+    
+    float scales[] = {1.0f, 1.5f, 2.0f, 3.0f};
+    
+    for (int s = 0; s < 4; s++) {
+        float scale = scales[s];
+        
+        CTFontRef font = CTFontCreateWithName(CFSTR("AppleColorEmoji"), 30.0f * scale, nil);
+        NSDictionary *attributes = [NSDictionary dictionaryWithObjectsAndKeys:(__bridge id)(font), kCTFontAttributeName, nil];
+        
+        for (int b = 0; b < array2.count; b++) {
+            NSArray *array = [array2 objectAtIndex:b];
+            int countPerRow = sqrt(array.count);
+            int rowsCount = ceil(array.count / (float)countPerRow);
+            
+            // On iOS 4.0 and Mac OS X v10.6 you can pass null for data
+            size_t width = countPerRow * 30 * scale;
+            size_t height = rowsCount * 30 * scale;
+            char *data = malloc(width * height * 4);
+            char *dataGray = malloc(width * height);
+            memset(data, 0, width * height * 4);
+            memset(dataGray, 0, width * height);
+            
+            CGColorSpaceRef space = CGColorSpaceCreateDeviceRGB();
+            CGBitmapInfo bitmapInfo = (CGBitmapInfo)kCGImageAlphaPremultipliedLast;
+            CGContextRef ctx = CGBitmapContextCreate(data, width, height, 8, width * 4, space, bitmapInfo);
+            CGColorSpaceRelease(space);
+            CGContextSetRGBFillColor(ctx, 0.0, 0.0, 0.0, 0.0);
+            CGContextFillRect(ctx, CGRectMake(0.0, 0.0, width, height));
+            
+            CGColorSpaceRef spaceGray = CGColorSpaceCreateDeviceGray();
+            CGBitmapInfo bitmapInfoGray = (CGBitmapInfo)kCGImageAlphaNone;
+            CGContextRef ctxGray = CGBitmapContextCreate(dataGray, width, height, 8, width, spaceGray, bitmapInfoGray);
+            CGColorSpaceRelease(spaceGray);
+            CGContextSetRGBFillColor(ctxGray, 0.0, 0.0, 0.0, 0.0);
+            CGContextFillRect(ctxGray, CGRectMake(0.0, 0.0, width, height));
+        
+
+            for (int a = 0; a < array.count; a++) {
+                unsigned long long val = [[array objectAtIndex:a] unsignedLongLongValue];
+                NSData *buff = [NSData dataWithBytes:&val length:sizeof(unsigned long long)];
+                buff = [self reversedData:buff];
+                NSString *str = [[NSString alloc] initWithData:buff encoding:NSUnicodeStringEncoding];
+                NSLog(@"%llu %@", val, str);
+                
+                NSAttributedString *as = [[NSAttributedString alloc] initWithString:str attributes:attributes];
+                CTLineRef line = CTLineCreateWithAttributedString((CFAttributedStringRef)as);
+                CGFloat ascent, descent, leading;
+                size_t fWidth = CTLineGetTypographicBounds(line, &ascent, &descent, &leading);
+                CGRect rect = CTLineGetImageBounds(line, NULL);
+                
+                CGFloat x = a % countPerRow * 30 * scale + (30 * scale - fWidth);
+                CGFloat y = height - (a / countPerRow * 30 * scale) - rect.origin.y - 30 * scale;
+                CGContextSetTextPosition(ctx, x, y);
+                CTLineDraw(line, ctx);
+                
+                CFRelease(line);
+            }
+            
+            // Save as JPEG
+            CGImageRef imageRef = CGBitmapContextCreateImage(ctx);
+            NSBitmapImageRep *imageRep = [[NSBitmapImageRep alloc] initWithCGImage:imageRef];
+            NSAssert(imageRep, @"imageRep must not be nil");
+            NSData *imageData = [imageRep representationUsingType:NSJPEGFileType properties:@{NSImageCompressionFactor:@0.4f, NSImageFallbackBackgroundColor:[NSColor blackColor]}];
+            NSString *fileName = [NSString stringWithFormat:@"Desktop/emoji/emoji%.01fx_%d.jpg", scale, b];
+            NSString *fileDirectory = NSHomeDirectory();
+            NSString *filePath = [fileDirectory stringByAppendingPathComponent:fileName];
+            [imageData writeToFile:filePath atomically:YES];
+            CGImageRelease(imageRef);
+            
+            for (int a = 0; a < width * height; a++) {
+                char alpha = data[a * 4 + 3];
+                if (alpha == 0) {
+                    dataGray[a] = 0;
+                } else {
+                    dataGray[a] = alpha;
+                }
+            }
+            
+            imageRef = CGBitmapContextCreateImage(ctxGray);
+            imageRep = [[NSBitmapImageRep alloc] initWithCGImage:imageRef];
+            NSAssert(imageRep, @"imageRep must not be nil");
+            imageData = [imageRep representationUsingType:NSJPEGFileType properties:@{NSImageCompressionFactor:@0.01f, NSImageColorSyncProfileData:[NSColorSpace deviceGrayColorSpace]}];
+            fileName = [NSString stringWithFormat:@"Desktop/emoji/emoji%.01fx_a_%d.jpg", scale, b];
+            filePath = [fileDirectory stringByAppendingPathComponent:fileName];
+            [imageData writeToFile:filePath atomically:YES];
+            CGImageRelease(imageRef);
+            free(data);
+        }
+        CFRelease(font);
+    }
+}
+
+@end
