diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
index d34bd2272..374b3db21 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
@@ -109,8 +109,8 @@ public Vote getVotes(int userId, Option option){
         Vote v = voteMap.get(new UserIdOptionKey(userId,option.getId()));
         if (v == null) {
             // userId never vote for option v
-            v = new Vote(userId,option.getId());
-            Log.d(LOG_TAG,"vote not found for userId["+userId+"] and optionId["+option.getId()+"]");
+            v = new Vote(userId, option.getId());
+            //Log.d(LOG_TAG,"vote not found for userId["+userId+"] and optionId["+option.getId()+"]");
         }
         return v;
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index b7aa5e645..604bb1300 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -185,6 +185,7 @@ public ContentValues toCV(TextOption to) {
             cv.put(T_TextOption.FK_DECISION, to.getDecisionId());
             return cv;
         }
+
     };
 
     static boolean getBoolean(int num) {
@@ -229,6 +230,7 @@ public PGSqlLiteHelper() {
 
 
     public <T extends DBBean> T insert(T bean, DBObjectMapper<T> mapper) {
+        Log.d(LOG_TAG, "inserting bean["+bean+"] into table["+mapper.getTableName()+"]");
         SQLiteDatabase db = getWritableDatabase();
         try {
             long id = db.insert(mapper.getTableName(), null, mapper.toCV(bean));
@@ -244,6 +246,7 @@ public PGSqlLiteHelper() {
     }
 
     public <T extends DBBean> void update(T bean, DBObjectMapper<T> mapper) {
+        Log.d(LOG_TAG, "update bean["+bean+"] into table["+mapper.getTableName()+"]");
         SQLiteDatabase db = getWritableDatabase();
         try {
             int rowCount = db.update(mapper.getTableName(), mapper.toCV(bean),
@@ -261,6 +264,7 @@ public PGSqlLiteHelper() {
     public <T extends DBBean> List<T> query(DBObjectMapper<T> mapper, String selection,
                                             String[] selectionArgs, String groupBy, String having,
                                             String orderBy) {
+
         SQLiteDatabase db = getReadableDatabase();
         Cursor cursor = null;
         try {
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index fb98a071f..994b85700 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -249,7 +249,7 @@ public MessageType getMessageType(String msg){
                 int start = POLLGRAM_MESSAGE_PREFIX.length() + 1;
                 String msgEmoji = msg.substring(start, start + 2);
                 MessageType t = MessageType.byEmoji(msgEmoji);
-                Log.d(LOG_TAG, "MessageType for [" + Arrays.toString(msgEmoji.getBytes()) + "] is [" + t + "]");
+                Log.d(LOG_TAG, "MessageType for emoji[" + Arrays.toString(msgEmoji.getBytes()) + "] is [" + t + "]");
                 return t;
             } catch (IndexOutOfBoundsException | IllegalArgumentException e) {
                 Log.e(LOG_TAG, "Error parsing message type for message [" + msg + "] il will not be parset", e);
@@ -265,12 +265,13 @@ public int getMessageGroupId(MessageObject messageObject) {
         if (messageObject.messageOwner == null)
             return -1;
 
-        if (messageObject.messageOwner.dialog_id > 0){
+
+        if (messageObject.getDialogId() > 0){
             Log.d(LOG_TAG,"message.messageOwner.dialog_id positive, in not a group chat");
             return -1;
         }
 
-        int groupChatId = (int)(messageObject.messageOwner.dialog_id * -1);
+        int groupChatId = (int)(messageObject.getDialogId() * -1);
         if (ChatObject.isChannel(groupChatId)){
             Log.d(LOG_TAG,"is a channel");
             return -1;
@@ -360,8 +361,11 @@ public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws P
 
             String longDescription = strTok.nextToken();
             decision = pollgramDAO.getDecision(title, currentChat);
+            if (decision == null)
+                throw new PollgramParseException("Decision not found for title  [" + title + "]");
             winningOption = pollgramDAO.getOption(optionTitle, decision);
-
+            if (winningOption == null)
+                throw new PollgramParseException("winningOption not found for decision  [" + title + "]");
 
         } catch (NoSuchElementException e) {
             Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index 642810067..7d7704ed9 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -25,6 +25,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -45,7 +46,7 @@
     private static int nextId = 1;
     private static final int ID_TOGGLE_OPEN_CLOSE_DECISIONS = nextId++;
     private static final int ID_PURGE_ALL_DATA = nextId++;
-    //private static final int ID_PUT_STUB_DATA_DATA = nextId++;
+    private static final int ID_PUT_STUB_DATA_DATA = nextId++;
 
     private TLRPC.ChatFull chatInfo;
     private TLRPC.Chat currentChat;
@@ -85,7 +86,7 @@ public View createView(final Context context) {
         final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISIONS,
                 context.getString(hideCloseDecision ? R.string.viewCloseDecision : R.string.hideCloseDecision),0 );
         headerItem.addSubItem(ID_PURGE_ALL_DATA, "Remove current chat decisions", 0);
-        //headerItem.addSubItem(ID_PUT_STUB_DATA_DATA, "Put stub data for current chat", 0);
+        headerItem.addSubItem(ID_PUT_STUB_DATA_DATA, "Put stub data for current chat", 0);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -103,8 +104,8 @@ public void onItemClick(int id) {
                     for (Decision d : allDecisions){
                         pollgramDAO.delete(d);
                     }
-//                } else if (id == ID_PUT_STUB_DATA_DATA){
-//                    pollgramDAO.putStubData(currentChat.id, UserConfig.getCurrentUser().id);
+                } else if (id == ID_PUT_STUB_DATA_DATA){
+                    pollgramDAO.putStubData(currentChat.id, UserConfig.getCurrentUser().id);
                 }
                 updateResult();
             }
