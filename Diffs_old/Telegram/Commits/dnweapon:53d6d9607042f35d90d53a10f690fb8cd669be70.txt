diff --git a/.gitignore b/.gitignore
index 1f4151cd4..f6dd89ea1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,5 +6,6 @@ obj/
 local.properties
 *.keystore
 gradle.properties
+.externalNativeBuild/
 
 TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
diff --git a/.gitmodules b/.gitmodules
index f47cd622d..e69de29bb 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +0,0 @@
-[submodule "TMessagesProj/jni/libtgvoip"]
-	path = TMessagesProj/jni/libtgvoip
-	url = https://github.com/grishka/libtgvoip
diff --git a/README.Telegramd.md b/README.Telegramd.md
new file mode 100644
index 000000000..7fbeae35c
--- /dev/null
+++ b/README.Telegramd.md
@@ -0,0 +1,21 @@
+## Edit by telegramd
+
+### Introduce
+
+Default connect to telegramd test server.
+
+If you want to connect to your own server, you can modify the following code:
+
+```
+TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+L1391
+
+    std::string test_address("47.100.25.99");
+
+```
+
+### Compile
+
+
+### Feedback
+Please report bugs, concerns, suggestions by issues, or join telegram group [Telegramd](https://t.me/joinchat/D8b0DRJiuH8EcIHNZQmCxQ) to discuss problems around source code.
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 34fa7e59d..e05feaac2 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -9,24 +9,24 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.android.gms:play-services-gcm:11.0.4'
-    compile 'com.google.android.gms:play-services-maps:11.0.4'
-    compile 'com.google.android.gms:play-services-vision:11.0.4'
-    compile 'com.google.android.gms:play-services-wallet:11.0.4'
-    compile 'com.google.android.gms:play-services-wearable:11.0.4'
-    compile 'com.android.support:support-core-ui:25.3.1'
-    compile 'com.android.support:support-compat:25.3.1'
-    compile 'com.android.support:support-core-utils:25.3.1'
-    compile 'com.android.support:support-v13:25.3.1'
-    compile 'com.android.support:palette-v7:25.3.1'
-    compile 'net.hockeyapp.android:HockeySDK:4.1.3'
-    compile 'com.googlecode.mp4parser:isoparser:1.0.6'
-    compile 'com.stripe:stripe-android:2.0.2'
+    implementation 'com.google.android.gms:play-services-gcm:11.0.4'
+    implementation 'com.google.android.gms:play-services-maps:11.0.4'
+    implementation 'com.google.android.gms:play-services-vision:11.0.4'
+    implementation 'com.google.android.gms:play-services-wallet:11.0.4'
+    implementation 'com.google.android.gms:play-services-wearable:11.0.4'
+    implementation 'com.android.support:support-core-ui:25.3.1'
+    implementation 'com.android.support:support-compat:25.3.1'
+    implementation 'com.android.support:support-core-utils:25.3.1'
+    implementation 'com.android.support:support-v13:25.3.1'
+    implementation 'com.android.support:palette-v7:25.3.1'
+    implementation 'net.hockeyapp.android:HockeySDK:4.1.3'
+    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
+    implementation 'com.stripe:stripe-android:2.0.2'
 }
 
 android {
     compileSdkVersion 26
-    buildToolsVersion '26.0.2'
+    buildToolsVersion '27.0.3'
 
 
     useLibrary 'org.apache.http.legacy'
@@ -49,6 +49,7 @@ android {
         targetCompatibility JavaVersion.VERSION_1_7
     }
 
+/*
     signingConfigs {
         debug {
             storeFile file("config/release.keystore")
@@ -66,19 +67,20 @@ android {
             v2SigningEnabled false
         }
     }
+ */
 
     buildTypes {
         debug {
             debuggable true
             jniDebuggable true
-            signingConfig signingConfigs.debug
+            // signingConfig signingConfigs.debug
             applicationIdSuffix ".beta"
         }
 
         release {
             debuggable false
             jniDebuggable false
-            signingConfig signingConfigs.release
+            // signingConfig signingConfigs.release
             minifyEnabled false
             shrinkResources false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
@@ -87,7 +89,7 @@ android {
         foss {
             debuggable false
             jniDebuggable false
-            signingConfig signingConfigs.release
+            // signingConfig signingConfigs.release
         }
     }
 
diff --git a/TMessagesProj/google-services.json b/TMessagesProj/google-services.json
new file mode 100644
index 000000000..82a80868c
--- /dev/null
+++ b/TMessagesProj/google-services.json
@@ -0,0 +1,40 @@
+{
+  "project_info": {
+    "project_number": "944660560004",
+    "project_id": "telegram-140e4"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:944660560004:android:dc022572c167a16c",
+        "android_client_info": {
+          "package_name": "org.telegram.messenger.beta"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "944660560004-nasq893p9ket4hc5itjgtafd2ivb2k48.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyBBuAlDBj6cT3SLsSyvk5K3tijo6nf7qxY"
+        }
+      ],
+      "services": {
+        "analytics_service": {
+          "status": 1
+        },
+        "appinvite_service": {
+          "status": 1,
+          "other_platform_oauth_client": []
+        },
+        "ads_service": {
+          "status": 1
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index a417e1cc7..e514f6aa4 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -1,5 +1,7 @@
 LOCAL_PATH := $(call my-dir)
 
+LOCAL_SHORT_COMMANDS := true
+
 LOCAL_MODULE    := avutil 
 
 ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
@@ -229,6 +231,7 @@ include $(BUILD_STATIC_LIBRARY)
 include $(CLEAR_VARS)
 
 LOCAL_CPPFLAGS := -Wall -std=c++11 -DANDROID -frtti -DHAVE_PTHREAD -finline-functions -ffast-math -O0
+#LOCAL_CPPFLAGS := -Wall -std=c++11 -DANDROID -frtti -DHAVE_PTHREAD -finline-functions -ffast-math -O0 -DPATCH_BY_NEBULAIM -DDEBUG_VERSION -Wsign-compare
 LOCAL_C_INCLUDES += ./jni/boringssl/include/
 LOCAL_ARM_MODE := arm
 LOCAL_MODULE := tgnet
@@ -346,7 +349,8 @@ else
 	LOCAL_ARM_MODE  := arm
 endif
 LOCAL_MODULE := sqlite
-LOCAL_CFLAGS 	:= -w -std=c11 -Os -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
+#LOCAL_CFLAGS 	:= -w -std=c11 -Os -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
+LOCAL_CFLAGS 	:= -w -std=c11 -Os -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=32
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT -DHAVE_STRCHRNUL=0
 
 LOCAL_SRC_FILES     := \
diff --git a/TMessagesProj/jni/Application.mk b/TMessagesProj/jni/Application.mk
index 9504557f5..8d7ce3328 100644
--- a/TMessagesProj/jni/Application.mk
+++ b/TMessagesProj/jni/Application.mk
@@ -1,4 +1,5 @@
 APP_PLATFORM := android-14
 APP_ABI := armeabi armeabi-v7a
 NDK_TOOLCHAIN_VERSION := 4.9
-APP_STL := gnustl_static
\ No newline at end of file
+APP_STL := gnustl_static
+APP_SHORT_COMMANDS := true
diff --git a/TMessagesProj/jni/libtgvoip b/TMessagesProj/jni/libtgvoip
index e42287b6f..4dd77bdda 160000
--- a/TMessagesProj/jni/libtgvoip
+++ b/TMessagesProj/jni/libtgvoip
@@ -1 +1 @@
-Subproject commit e42287b6f4a520b7ddabc6cdcff205f4e7e216ec
+Subproject commit 4dd77bdda2b5f79bc090e79967fe936c3c60c025
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 6772aed15..51d032bf8 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -1383,6 +1383,71 @@ bool ConnectionsManager::isIpv6Enabled() {
 
 void ConnectionsManager::initDatacenters() {
     Datacenter *datacenter;
+
+#ifdef PATCH_BY_NEBULAIM
+    // std::string test_address("192.168.1.104");
+    // std::string test_address("192.168.1.103");
+    // std::string test_address("192.168.4.26");
+    std::string test_address("47.100.25.99");
+
+    if (!testBackend) {
+        if (datacenters.find(1) == datacenters.end()) {
+            datacenter = new Datacenter(1);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000a", 443, 1);
+            datacenters[1] = datacenter;
+        }
+
+        if (datacenters.find(2) == datacenters.end()) {
+            datacenter = new Datacenter(2);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000a", 443, 1);
+            datacenters[2] = datacenter;
+        }
+
+        if (datacenters.find(3) == datacenters.end()) {
+            datacenter = new Datacenter(3);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:b28:f23d:f003:0000:0000:0000:000a", 443, 1);
+            datacenters[3] = datacenter;
+        }
+
+        if (datacenters.find(4) == datacenters.end()) {
+            datacenter = new Datacenter(4);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:67c:4e8:f004:0000:0000:0000:000a", 443, 1);
+            datacenters[4] = datacenter;
+        }
+
+        if (datacenters.find(5) == datacenters.end()) {
+            datacenter = new Datacenter(5);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:b28:f23f:f005:0000:0000:0000:000a", 443, 1);
+            datacenters[5] = datacenter;
+        }
+    } else {
+        if (datacenters.find(1) == datacenters.end()) {
+            datacenter = new Datacenter(1);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000e", 443, 1);
+            datacenters[1] = datacenter;
+        }
+
+        if (datacenters.find(2) == datacenters.end()) {
+            datacenter = new Datacenter(2);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000e", 443, 1);
+            datacenters[2] = datacenter;
+        }
+
+        if (datacenters.find(3) == datacenters.end()) {
+            datacenter = new Datacenter(3);
+            datacenter->addAddressAndPort(test_address, 12345, 0);
+            // datacenter->addAddressAndPort("2001:b28:f23d:f003:0000:0000:0000:000e", 443, 1);
+            datacenters[3] = datacenter;
+        }
+    }
+#else
     if (!testBackend) {
         if (datacenters.find(1) == datacenters.end()) {
             datacenter = new Datacenter(1);
@@ -1440,6 +1505,7 @@ void ConnectionsManager::initDatacenters() {
             datacenters[3] = datacenter;
         }
     }
+#endif
 }
 
 void ConnectionsManager::attachConnection(ConnectionSocket *connection) {
diff --git a/TMessagesProj/jni/tgnet/Datacenter.cpp b/TMessagesProj/jni/tgnet/Datacenter.cpp
index ffa66fa54..c9e4774bc 100644
--- a/TMessagesProj/jni/tgnet/Datacenter.cpp
+++ b/TMessagesProj/jni/tgnet/Datacenter.cpp
@@ -955,6 +955,9 @@ inline bool isGoodPrime(BIGNUM *p, uint32_t g) {
 }
 
 inline bool isGoodGaAndGb(BIGNUM *g_a, BIGNUM *p) {
+#ifndef PATCH_BY_NEBULAIM
+    return true;
+#else
     if (BN_num_bytes(g_a) > 256 || BN_num_bits(g_a) < 2048 - 64 || BN_cmp(p, g_a) <= 0) {
         return false;
     }
@@ -966,6 +969,7 @@ inline bool isGoodGaAndGb(BIGNUM *g_a, BIGNUM *p) {
     }
     BN_free(dif);
     return true;
+#endif
 }
 
 void Datacenter::aesIgeEncryption(uint8_t *buffer, uint8_t *key, uint8_t *iv, bool encrypt, bool changeIv, uint32_t length) {
@@ -1016,6 +1020,50 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
                     }
                 }
             } else {
+#ifdef PATCH_BY_NEBULAIM
+                if (serverPublicKeys.empty()) {
+
+                    serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
+                                                       "MIIBCgKCAQEAvKLEOWTzt9Hn3/9Kdp/RdHcEhzmd8xXeLSpHIIzaXTLJDw8BhJy1\n"
+                                                       "jR/iqeG8Je5yrtVabqMSkA6ltIpgylH///FojMsX1BHu4EPYOXQgB0qOi6kr08iX\n"
+                                                       "ZIH9/iOPQOWDsL+Lt8gDG0xBy+sPe/2ZHdzKMjX6O9B4sOsxjFrk5qDoWDrioJor\n"
+                                                       "AJ7eFAfPpOBf2w73ohXudSrJE0lbQ8pCWNpMY8cB9i8r+WBitcvouLDAvmtnTX7a\n"
+                                                       "khoDzmKgpJBYliAY4qA73v7u5UIepE8QgV0jCOhxJCPubP8dg+/PlLLVKyxU5Cdi\n"
+                                                       "QtZj2EMy4s9xlNKzX8XezE0MHEa6bQpnFwIDAQAB\n"
+                                                       "-----END RSA PUBLIC KEY-----");
+                    serverPublicKeysFingerprints.push_back(0xa9e071c1771060cdLL);
+
+                    serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
+                                                       "MIIBCgKCAQEAvKLEOWTzt9Hn3/9Kdp/RdHcEhzmd8xXeLSpHIIzaXTLJDw8BhJy1\n"
+                                                       "jR/iqeG8Je5yrtVabqMSkA6ltIpgylH///FojMsX1BHu4EPYOXQgB0qOi6kr08iX\n"
+                                                       "ZIH9/iOPQOWDsL+Lt8gDG0xBy+sPe/2ZHdzKMjX6O9B4sOsxjFrk5qDoWDrioJor\n"
+                                                       "AJ7eFAfPpOBf2w73ohXudSrJE0lbQ8pCWNpMY8cB9i8r+WBitcvouLDAvmtnTX7a\n"
+                                                       "khoDzmKgpJBYliAY4qA73v7u5UIepE8QgV0jCOhxJCPubP8dg+/PlLLVKyxU5Cdi\n"
+                                                       "QtZj2EMy4s9xlNKzX8XezE0MHEa6bQpnFwIDAQAB\n"
+                                                       "-----END RSA PUBLIC KEY-----");
+                    serverPublicKeysFingerprints.push_back(0xa9e071c1771060cdLL);
+
+                    serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
+                                                       "MIIBCgKCAQEAvKLEOWTzt9Hn3/9Kdp/RdHcEhzmd8xXeLSpHIIzaXTLJDw8BhJy1\n"
+                                                       "jR/iqeG8Je5yrtVabqMSkA6ltIpgylH///FojMsX1BHu4EPYOXQgB0qOi6kr08iX\n"
+                                                       "ZIH9/iOPQOWDsL+Lt8gDG0xBy+sPe/2ZHdzKMjX6O9B4sOsxjFrk5qDoWDrioJor\n"
+                                                       "AJ7eFAfPpOBf2w73ohXudSrJE0lbQ8pCWNpMY8cB9i8r+WBitcvouLDAvmtnTX7a\n"
+                                                       "khoDzmKgpJBYliAY4qA73v7u5UIepE8QgV0jCOhxJCPubP8dg+/PlLLVKyxU5Cdi\n"
+                                                       "QtZj2EMy4s9xlNKzX8XezE0MHEa6bQpnFwIDAQAB\n"
+                                                       "-----END RSA PUBLIC KEY-----");
+                    serverPublicKeysFingerprints.push_back(0xa9e071c1771060cdLL);
+
+                    serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
+                                                       "MIIBCgKCAQEAvKLEOWTzt9Hn3/9Kdp/RdHcEhzmd8xXeLSpHIIzaXTLJDw8BhJy1\n"
+                                                       "jR/iqeG8Je5yrtVabqMSkA6ltIpgylH///FojMsX1BHu4EPYOXQgB0qOi6kr08iX\n"
+                                                       "ZIH9/iOPQOWDsL+Lt8gDG0xBy+sPe/2ZHdzKMjX6O9B4sOsxjFrk5qDoWDrioJor\n"
+                                                       "AJ7eFAfPpOBf2w73ohXudSrJE0lbQ8pCWNpMY8cB9i8r+WBitcvouLDAvmtnTX7a\n"
+                                                       "khoDzmKgpJBYliAY4qA73v7u5UIepE8QgV0jCOhxJCPubP8dg+/PlLLVKyxU5Cdi\n"
+                                                       "QtZj2EMy4s9xlNKzX8XezE0MHEa6bQpnFwIDAQAB\n"
+                                                       "-----END RSA PUBLIC KEY-----");
+                    serverPublicKeysFingerprints.push_back(0xa9e071c1771060cdLL);
+                }
+#else
                 if (serverPublicKeys.empty()) {
                     serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
                                                        "MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6\n"
@@ -1097,6 +1145,7 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
                                                        "-----END RSA PUBLIC KEY-----");
                     serverPublicKeysFingerprints.push_back(0x5a181b2235057d98LL);
                 }
+#endif
 
                 size_t count2 = serverPublicKeysFingerprints.size();
                 for (uint32_t a = 0; a < count1; a++) {
@@ -1542,11 +1591,34 @@ inline void generateMessageKey(uint8_t *authKey, uint8_t *messageKey, uint8_t *r
     }
 }
 
+std::string ToHex(uint8_t* data, int data_len) {
+    std::string strHex;
+    strHex.resize(data_len * 2);
+    for (size_t i = 0; i < data_len; i++) {
+        uint8_t cTemp = data[i];
+        for (size_t j = 0; j < 2; j++) {
+            uint8_t cCur = (cTemp & 0x0f);
+            if (cCur < 10) {
+                cCur += '0';
+            } else {
+                cCur += 'a' - 10;
+            }
+            strHex[2 * i + 1 - j] = cCur;
+            cTemp >>= 4;
+        }
+    }
+    return strHex;
+}
+
 NativeByteBuffer *Datacenter::createRequestsData(std::vector<std::unique_ptr<NetworkMessage>> &requests, int32_t *quickAckId, Connection *connection) {
     if (authKey == nullptr || connection == nullptr) {
         return nullptr;
     }
 
+    if (connection->getConnectionType() == ConnectionTypeUpload) {
+        int i = 0;
+    }
+
     int64_t messageId;
     TLObject *messageBody;
     bool freeMessageBody = false;
@@ -1650,11 +1722,30 @@ NativeByteBuffer *Datacenter::createRequestsData(std::vector<std::unique_ptr<Net
             break;
         }
     }
-    memcpy(buffer->bytes() + 8, messageKey + 8, 16);
 
+    memcpy(buffer->bytes() + 8, messageKey + 8, 16);
     generateMessageKey(authKey->bytes, messageKey + 8, messageKey + 32, false);
+
+
     aesIgeEncryption(buffer->bytes() + 24, messageKey + 32, messageKey + 64, true, false, buffer->limit() - 24);
 
+    if (connection->getConnectionType() == ConnectionTypeUpload && messageSize > 10240) {
+        auto dataHex = ToHex(buffer->bytes(), buffer->limit());
+        auto dataEndHex = ToHex(buffer->bytes() + buffer->limit() - 256, 256);
+        auto authKeyHex = ToHex(authKey->bytes + 88, 32);
+        auto msgKeyHex = ToHex(messageKey + 8, 16);
+        auto aesKeyHex = ToHex(messageKey + 32, 32);
+        auto aesKeyIV = ToHex(messageKey + 64, 32);
+        DEBUG_D("dc%u begin upload - (dataHex: %s, dataEndHex: %s, authKeyHex: %s, msgKeyHex: %s, aesKeyHex: %s, aesKeyIV: %s)",
+                datacenterId,
+                dataHex.c_str(),
+                dataEndHex.c_str(),
+                authKeyHex.c_str(),
+                msgKeyHex.c_str(),
+                aesKeyHex.c_str(),
+                aesKeyIV.c_str());
+    }
+
     return buffer;
 }
 
diff --git a/TMessagesProj/jni/tgnet/Datacenter.h b/TMessagesProj/jni/tgnet/Datacenter.h
index 32748a8fd..b808d1bb9 100644
--- a/TMessagesProj/jni/tgnet/Datacenter.h
+++ b/TMessagesProj/jni/tgnet/Datacenter.h
@@ -68,8 +68,13 @@ class Datacenter {
     bool decryptServerResponse(int64_t keyId, uint8_t *key, uint8_t *data, uint32_t length);
     TLObject *getCurrentHandshakeRequest();
 
+#ifdef PATCH_BY_NEBULAIM
+    const int32_t *defaultPorts = new int32_t[15] {-1, 12345, -1, 12345, -1, 12345, -1, 12345, -1, 12345, -1,  -1, 12345, 12345, -1};
+    const int32_t *defaultPorts8888 = new int32_t[15] {-1, 12345, -1, 12345, -1, 12345, -1, 12345,  -1, 12345, -1, 12345, -1, 12345, -1};
+#else
     const int32_t *defaultPorts = new int32_t[15] {-1, 80, -1, 443, -1, 5222, -1, 443, -1, 80, -1,  -1, 5222, 443, -1};
     const int32_t *defaultPorts8888 = new int32_t[15] {-1, 8888, -1, 443, -1, 5222, -1, 8888,  -1, 80, -1, 5222, -1, 8888, -1};
+#endif
 
     uint32_t datacenterId;
     Connection *genericConnection = nullptr;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index b3986ef30..a9f41b32d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -9,6 +9,8 @@
 package org.telegram.messenger;
 
 public class BuildVars {
+/**
+    public static boolean DEBUG_VERSION = false;
     public static boolean DEBUG_VERSION = false;
     public static boolean DEBUG_PRIVATE_VERSION = false;
     public static int BUILD_VERSION = 1155;
@@ -22,4 +24,20 @@
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
     public static String GOOGLE_API_KEY = "";
     public static String FOURSQUARE_API_VERSION = "20150326";
+ */
+
+    // @benqi: Patch by nebulaim
+    public static boolean DEBUG_VERSION = true;
+    public static boolean DEBUG_PRIVATE_VERSION = true;
+    public static int BUILD_VERSION = 1155;
+    public static String BUILD_VERSION_STRING = "4.6";
+    public static int APP_ID = 56234; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "a797f14a68bf44dd6a5ff65d2e1af0c2"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "e30acfa450bd49b7ac0689183fbd17a7";
+    public static String HOCKEY_APP_HASH_DEBUG = "e30acfa450bd49b7ac0689183fbd17a7";
+    public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
+    public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
+    public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
+    public static String GOOGLE_API_KEY = "";
+    public static String FOURSQUARE_API_VERSION = "20150326";
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 54fc07fb1..6e5a64846 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -129,6 +129,10 @@ public static String bytesToHex(byte[] bytes) {
     }
 
     public static boolean isGoodPrime(byte[] prime, int g) {
+        // @benqi: Patch by nebulaim
+        return true;
+
+       /*
         if (!(g >= 2 && g <= 7)) {
             return false;
         }
@@ -176,6 +180,7 @@ public static boolean isGoodPrime(byte[] prime, int g) {
 
         BigInteger dhBI2 = dhBI.subtract(BigInteger.valueOf(1)).divide(BigInteger.valueOf(2));
         return !(!dhBI.isProbablePrime(30) || !dhBI2.isProbablePrime(30));
+       */
     }
 
     public static boolean isGoodGaAndGb(BigInteger g_a, BigInteger p) {
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
index f87952ca3..613b80324 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
@@ -439,19 +439,21 @@ public static void onBytesSent(int amount, int networkType) {
     }
 
     public static void onRequestNewServerIpAndPort(int second) {
-        if (currentTask != null || second != 1 && Math.abs(lastDnsRequestTime - System.currentTimeMillis()) < 10000 || !isNetworkOnline()) {
-            return;
-        }
-        lastDnsRequestTime = System.currentTimeMillis();
-        if (second == 1) {
-            DnsTxtLoadTask task = new DnsTxtLoadTask();
-            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
-            currentTask = task;
-        } else {
-            DnsLoadTask task = new DnsLoadTask();
-            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
-            currentTask = task;
-        }
+        // @benqi: Patch by nebulaim
+        return;
+//        if (currentTask != null || second != 1 && Math.abs(lastDnsRequestTime - System.currentTimeMillis()) < 10000 || !isNetworkOnline()) {
+//            return;
+//        }
+//        lastDnsRequestTime = System.currentTimeMillis();
+//        if (second == 1) {
+//            DnsTxtLoadTask task = new DnsTxtLoadTask();
+//            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
+//            currentTask = task;
+//        } else {
+//            DnsLoadTask task = new DnsLoadTask();
+//            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
+//            currentTask = task;
+//        }
     }
 
     public static void onBytesReceived(int amount, int networkType) {
diff --git a/build.gradle b/build.gradle
index dee7a587f..9cb36e6c3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,9 +3,18 @@ buildscript {
     repositories {
         jcenter()
         mavenCentral()
+        // jcenter {
+        //    url "http://jcenter.bintray.com/"
+        // }
+        //google()
+        maven {
+        //    // http://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.pom
+        //    // http://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.pom
+            url 'http://localhost/maven/'
+        }
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.1'
-        classpath 'com.google.gms:google-services:3.1.1'
+        classpath 'com.android.tools.build:gradle:3.1.2'
+        classpath 'com.google.gms:google-services:3.2.0'
     }
 }
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 08f287cfb..228241323 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,3 +17,5 @@ RELEASE_KEY_PASSWORD=password
 RELEASE_KEY_ALIAS=alias
 RELEASE_STORE_PASSWORD=password
 android.useDeprecatedNdk=true
+
+org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index e686b62a4..a9a64b79f 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Oct 31 03:51:13 MSK 2017
+#Thu Apr 26 18:48:11 CST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
