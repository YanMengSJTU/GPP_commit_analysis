diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index ed6cbcd73..a858c6659 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -81,7 +81,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 261
-        versionName "1.5.6"
+        versionCode 268
+        versionName "1.5.7"
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
index d495ab8c1..d09803789 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
@@ -17,6 +17,7 @@
     private final ArrayList<ByteBufferDesc> freeBuffers4096;
     private final ArrayList<ByteBufferDesc> freeBuffers16384;
     private final ArrayList<ByteBufferDesc> freeBuffers32768;
+    private final ArrayList<ByteBufferDesc> freeBuffersBig;
 
     private static volatile BuffersStorage Instance = null;
     public static BuffersStorage getInstance() {
@@ -38,6 +39,7 @@ public BuffersStorage() {
         freeBuffers4096 = new ArrayList<ByteBufferDesc>();
         freeBuffers16384 = new ArrayList<ByteBufferDesc>();
         freeBuffers32768 = new ArrayList<ByteBufferDesc>();
+        freeBuffersBig = new ArrayList<ByteBufferDesc>();
 
         for (int a = 0; a < 5; a++) {
             freeBuffers128.add(new ByteBufferDesc(128));
@@ -113,6 +115,17 @@ public ByteBufferDesc getFreeBuffer(int size) {
                 buffer = new ByteBufferDesc(40000);
                 FileLog.e("tmessages", "create new 40000 buffer");
             }
+        } else if (size <= 280000) {
+            synchronized (freeBuffersBig) {
+                if (freeBuffersBig.size() > 0) {
+                    buffer = freeBuffersBig.get(0);
+                    freeBuffersBig.remove(0);
+                }
+            }
+            if (buffer == null) {
+                buffer = new ByteBufferDesc(280000);
+                FileLog.e("tmessages", "create new big buffer");
+            }
         } else {
             buffer = new ByteBufferDesc(size);
         }
@@ -154,6 +167,12 @@ public void reuseFreeBuffer(ByteBufferDesc buffer) {
                     freeBuffers32768.add(buffer);
                 }
             }
+        } else if (buffer.buffer.capacity() == 280000) {
+            synchronized (freeBuffersBig) {
+                if (freeBuffersBig.size() < 4) {
+                    freeBuffersBig.add(buffer);
+                }
+            }
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 4d5cea5a8..a35f25703 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -44,6 +44,11 @@
     private ArrayList<RPCRequest> runningRequests = new ArrayList<RPCRequest>();
     private ArrayList<Action> actionQueue = new ArrayList<Action>();
 
+    private ArrayList<Integer> unknownDatacenterIds = new ArrayList<Integer>();
+    private ArrayList<Integer> neededDatacenterIds = new ArrayList<Integer>();
+    private ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
+    final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
+
     private TLRPC.TL_auth_exportedAuthorization movingAuthorization;
     public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
     public static final int DC_UPDATE_TIME = 60 * 60;
@@ -126,15 +131,7 @@ public void run() {
                     if (!paused) {
                         FileLog.e("tmessages", "pausing network and timers by sleep time = " + nextSleepTimeout);
                         for (Datacenter datacenter : datacenters.values()) {
-                            if (datacenter.connection != null) {
-                                datacenter.connection.suspendConnection(true);
-                            }
-                            if (datacenter.uploadConnection != null) {
-                                datacenter.uploadConnection.suspendConnection(true);
-                            }
-                            if (datacenter.downloadConnection != null) {
-                                datacenter.downloadConnection.suspendConnection(true);
-                            }
+                            datacenter.suspendConnections();
                         }
                     }
                     try {
@@ -211,10 +208,10 @@ public void run() {
                 if (paused) {
                     lastPauseTime = System.currentTimeMillis();
                     nextSleepTimeout = 30000;
-                    FileLog.e("tmessages", "wakeup network in background by received push");
+                    FileLog.e("tmessages", "wakeup network in background");
                 } else if (lastPauseTime != 0) {
                     lastPauseTime = System.currentTimeMillis();
-                    FileLog.e("tmessages", "reset sleep timeout by received push");
+                    FileLog.e("tmessages", "reset sleep timeout");
                 }
             }
         });
@@ -472,15 +469,7 @@ public void run() {
                         editor.putLong("pushSessionId", pushSessionId);
 
                         ArrayList<Long> sessions = new ArrayList<Long>();
-                        if (currentDatacenter.connection != null) {
-                            sessions.add(currentDatacenter.connection.getSissionId());
-                        }
-                        if (currentDatacenter.downloadConnection != null) {
-                            sessions.add(currentDatacenter.downloadConnection.getSissionId());
-                        }
-                        if (currentDatacenter.uploadConnection != null) {
-                            sessions.add(currentDatacenter.uploadConnection.getSissionId());
-                        }
+                        currentDatacenter.getSessions(sessions);
 
                         if (!sessions.isEmpty()) {
                             SerializedData data = new SerializedData(sessions.size() * 8 + 4);
@@ -538,20 +527,36 @@ public void cleanUp() {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                if (datacenter.connection != null) {
-                    datacenter.connection.recreateSession();
+                while (requestQueue.size() != 0) {
+                    RPCRequest request = requestQueue.get(0);
+                    requestQueue.remove(0);
+                    if (request.completionBlock != null) {
+                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
+                        implicitError.code = -1000;
+                        implicitError.text = "";
+                        request.completionBlock.run(null, implicitError);
+                    }
                 }
-                if (datacenter.downloadConnection != null) {
-                    datacenter.downloadConnection.recreateSession();
+                while (runningRequests.size() != 0) {
+                    RPCRequest request = runningRequests.get(0);
+                    runningRequests.remove(0);
+                    if (request.completionBlock != null) {
+                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
+                        implicitError.code = -1000;
+                        implicitError.text = "";
+                        request.completionBlock.run(null, implicitError);
+                    }
                 }
-                if (datacenter.uploadConnection != null) {
-                    datacenter.uploadConnection.recreateSession();
+                pingIdToDate.clear();
+                quickAckIdToRequestIds.clear();
+
+                for (Datacenter datacenter : datacenters.values()) {
+                    datacenter.recreateSessions();
+                    datacenter.authorized = false;
                 }
 
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
+                sessionsToDestroy.clear();
+                saveSession();
             }
         });
     }
@@ -632,18 +637,8 @@ public void run() {
                     addresses.add(ip_address);
                     ports.put(ip_address, port);
                     exist.replaceAddressesAndPorts(addresses, ports);
-                    if (exist.connection != null) {
-                        exist.connection.suspendConnection(true);
-                    }
-                    if (exist.uploadConnection != null) {
-                        exist.uploadConnection.suspendConnection(true);
-                    }
-                    if (exist.downloadConnection != null) {
-                        exist.downloadConnection.suspendConnection(true);
-                    }
-                    if (dc == 1) {
-                        updateDcSettings(1);
-                    }
+                    exist.suspendConnections();
+                    updateDcSettings(dc);
                 }
             }
         });
@@ -683,15 +678,7 @@ public void run() {
                     for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
                         Datacenter datacenter = entry.getValue();
                         datacenter.overridePort = 8888;
-                        if (datacenter.connection != null) {
-                            datacenter.connection.suspendConnection(true);
-                        }
-                        if (datacenter.uploadConnection != null) {
-                            datacenter.uploadConnection.suspendConnection(true);
-                        }
-                        if (datacenter.downloadConnection != null) {
-                            datacenter.downloadConnection.suspendConnection(true);
-                        }
+                        datacenter.suspendConnections();
                     }
                 } else {
                     for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
@@ -779,7 +766,7 @@ TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest request) {
                         invoke.device_model = "Android unknown";
                     }
                     PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                    invoke.app_version = pInfo.versionName;
+                    invoke.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
                     if (invoke.app_version == null) {
                         invoke.app_version = "App version unknown";
                     }
@@ -854,6 +841,10 @@ public void run() {
     }
 
     public void cancelRpc(final long token, final boolean notifyServer) {
+        cancelRpc(token, notifyServer, false);
+    }
+
+    public void cancelRpc(final long token, final boolean notifyServer, final boolean ifNotSent) {
         if (token == 0) {
             return;
         }
@@ -873,30 +864,32 @@ public void run() {
                     }
                 }
 
-                for (int i = 0; i < runningRequests.size(); i++) {
-                    RPCRequest request = runningRequests.get(i);
-                    if (request.token == token) {
-                        found = true;
+                if (!ifNotSent) {
+                    for (int i = 0; i < runningRequests.size(); i++) {
+                        RPCRequest request = runningRequests.get(i);
+                        if (request.token == token) {
+                            found = true;
 
-                        FileLog.d("tmessages", "===== Cancelled running rpc request " + request.rawRequest);
+                            FileLog.d("tmessages", "===== Cancelled running rpc request " + request.rawRequest);
 
-                        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                            if (notifyServer) {
-                                TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
-                                dropAnswer.req_msg_id = request.runningMessageId;
-                                performRpc(dropAnswer, null, null, false, request.flags);
+                            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                                if (notifyServer) {
+                                    TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
+                                    dropAnswer.req_msg_id = request.runningMessageId;
+                                    performRpc(dropAnswer, null, null, false, request.flags);
+                                }
                             }
-                        }
 
-                        request.cancelled = true;
-                        request.rawRequest.freeResources();
-                        request.rpcRequest.freeResources();
-                        runningRequests.remove(i);
-                        break;
+                            request.cancelled = true;
+                            request.rawRequest.freeResources();
+                            request.rpcRequest.freeResources();
+                            runningRequests.remove(i);
+                            break;
+                        }
+                    }
+                    if (!found) {
+                        FileLog.d("tmessages", "***** Warning: cancelling unknown request");
                     }
-                }
-                if (!found) {
-                    FileLog.d("tmessages", "***** Warning: cancelling unknown request");
                 }
             }
         });
@@ -946,129 +939,34 @@ public int getCurrentTime() {
     }
 
     private void processRequestQueue(int requestClass, int _datacenterId) {
-        final HashMap<Integer, Integer> activeTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> transportsToResume = new ArrayList<Integer>();
-
-        final HashMap<Integer, Integer> activeDownloadTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> downloadTransportsToResume = new ArrayList<Integer>();
+        boolean haveNetwork = true;//isNetworkOnline();
 
-        final HashMap<Integer, Integer> activeUploadTransportTokens = new HashMap<Integer, Integer>();
-        final ArrayList<Integer> uploadTransportsToResume = new ArrayList<Integer>();
+        genericMessagesToDatacenters.clear();
+        unknownDatacenterIds.clear();
+        neededDatacenterIds.clear();
+        unauthorizedDatacenterIds.clear();
 
-        for (Datacenter datacenter : datacenters.values()) {
-            if (datacenter.connection != null) {
-                int channelToken = datacenter.connection.channelToken;
-                if (channelToken != 0) {
-                    activeTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-            if (datacenter.downloadConnection != null) {
-                int channelToken = datacenter.downloadConnection.channelToken;
-                if (channelToken != 0) {
-                    activeDownloadTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-            if (datacenter.uploadConnection != null) {
-                int channelToken = datacenter.uploadConnection.channelToken;
-                if (channelToken != 0) {
-                    activeUploadTransportTokens.put(datacenter.datacenterId, channelToken);
-                }
-            }
-        }
-        for (RPCRequest request : runningRequests) {
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeTransportTokens.containsKey(requestDatacenter.datacenterId) && !transportsToResume.contains(requestDatacenter.datacenterId)) {
-                    transportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeDownloadTransportTokens.containsKey(requestDatacenter.datacenterId) && !downloadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    downloadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeUploadTransportTokens.containsKey(requestDatacenter.datacenterId) && !uploadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    uploadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            }
-        }
-        for (RPCRequest request : requestQueue) {
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeTransportTokens.containsKey(requestDatacenter.datacenterId) && !transportsToResume.contains(requestDatacenter.datacenterId)) {
-                    transportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeDownloadTransportTokens.containsKey(requestDatacenter.datacenterId) && !downloadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    downloadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                if (requestDatacenter != null && !activeUploadTransportTokens.containsKey(requestDatacenter.datacenterId) && !uploadTransportsToResume.contains(requestDatacenter.datacenterId)) {
-                    uploadTransportsToResume.add(requestDatacenter.datacenterId);
-                }
-            }
-        }
-
-        boolean haveNetwork = true;//activeTransportTokens.size() != 0 || isNetworkOnline();
-
-        if (!activeTransportTokens.containsKey(currentDatacenterId) && !transportsToResume.contains(currentDatacenterId)) {
-            transportsToResume.add(currentDatacenterId);
-        }
-
-        for (int it : transportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.connection == null) {
-                    datacenter.connection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.connection.delegate = this;
-                    datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
-                }
-                datacenter.connection.connect();
-            }
-        }
-        for (int it : downloadTransportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.downloadConnection == null) {
-                    datacenter.downloadConnection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.downloadConnection.delegate = this;
-                    datacenter.downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
-                }
-                datacenter.downloadConnection.connect();
-            }
-        }
-        for (int it : uploadTransportsToResume) {
-            Datacenter datacenter = datacenterWithId(it);
-            if (datacenter.authKey != null) {
-                if (datacenter.uploadConnection == null) {
-                    datacenter.uploadConnection = new TcpConnection(datacenter.datacenterId);
-                    datacenter.uploadConnection.delegate = this;
-                    datacenter.uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
-                }
-                datacenter.uploadConnection.connect();
-            }
+        TcpConnection genericConnection = null;
+        Datacenter defaultDatacenter = datacenterWithId(currentDatacenterId);
+        if (defaultDatacenter != null) {
+            genericConnection = defaultDatacenter.getGenericConnection(this);
         }
 
-        final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
-
-        final ArrayList<Integer> unknownDatacenterIds = new ArrayList<Integer>();
-        final ArrayList<Integer> neededDatacenterIds = new ArrayList<Integer>();
-        final ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
-
         int currentTime = (int)(System.currentTimeMillis() / 1000);
         for (int i = 0; i < runningRequests.size(); i++) {
             RPCRequest request = runningRequests.get(i);
 
-            if (updatingDcSettings && datacenters.size() > 1 && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
-                if (updatingDcStartTime < currentTime - 60) {
-                    FileLog.e("tmessages", "move TL_help_getConfig to requestQueue");
-                    requestQueue.add(request);
-                    runningRequests.remove(i);
-                    i--;
-                    continue;
+            if (datacenters.size() > 1) {
+                if (updatingDcSettings && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
+                    if (updatingDcStartTime < currentTime - 60) {
+                        FileLog.e("tmessages", "move TL_help_getConfig to requestQueue");
+                        requestQueue.add(request);
+                        runningRequests.remove(i);
+                        i--;
+                        continue;
+                    }
+                } else if (request.rawRequest instanceof TLRPC.TL_auth_sendCode || request.rawRequest instanceof TLRPC.TL_auth_signIn || request.rawRequest instanceof TLRPC.TL_auth_signUp) {
+
                 }
             }
 
@@ -1105,48 +1003,27 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 continue;
             }
 
-            Integer tokenIt = activeTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterTransportToken = tokenIt != null ? tokenIt : 0;
-
-            Integer uploadTokenIt = activeUploadTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterUploadTransportToken = uploadTokenIt != null ? uploadTokenIt : 0;
-
-            Integer downloadTokenIt = activeDownloadTransportTokens.get(requestDatacenter.datacenterId);
-            int datacenterDownloadTransportToken = downloadTokenIt != null ? downloadTokenIt : 0;
-
-            double maxTimeout = 8.0;
+            float maxTimeout = 8.0f;
 
+            TcpConnection connection = null;
             if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                if (datacenterTransportToken == 0) {
-                    continue;
-                }
+                connection = requestDatacenter.getGenericConnection(this);
             } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                if (!haveNetwork) {
-                    FileLog.d("tmessages", "Don't have any network connection, skipping download request");
-                    continue;
-                }
-                if (datacenterDownloadTransportToken == 0) {
-                    continue;
-                }
-                maxTimeout = 40.0;
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                if (!haveNetwork) {
-                    FileLog.d("tmessages", "Don't have any network connection, skipping upload request");
+                int num = (request.flags & RPCRequest.RPCRequestClassDownloadMedia2) != 0 ? 1 : 0;
+                connection = requestDatacenter.getDownloadConnection(num, this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0 ) {
+                connection = requestDatacenter.getUploadConnection(this);
+            }
+
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                if (connection.channelToken == 0) {
                     continue;
                 }
-                if (datacenterUploadTransportToken == 0) {
+            } else {
+                if (!haveNetwork || connection.channelToken == 0) {
                     continue;
                 }
-                maxTimeout = 30.0;
-            }
-
-            TcpConnection connection = null;
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                connection = requestDatacenter.connection;
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                connection = requestDatacenter.downloadConnection;
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0 ) {
-                connection = requestDatacenter.uploadConnection;
+                maxTimeout = 30.0f;
             }
 
             boolean forceThisRequest = (request.flags & requestClass) != 0 && (_datacenterId == Integer.MIN_VALUE || requestDatacenter.datacenterId == _datacenterId);
@@ -1163,19 +1040,14 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
             if (((Math.abs(currentTime - request.runningStartTime) > maxTimeout) && (currentTime > request.runningMinStartTime || Math.abs(currentTime - request.runningMinStartTime) > 60.0)) || forceThisRequest) {
                 if (!forceThisRequest && request.transportChannelToken > 0) {
-                    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && datacenterTransportToken == request.transportChannelToken) {
+                    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && request.transportChannelToken == connection.channelToken) {
                         FileLog.d("tmessages", "Request token is valid, not retrying " + request.rawRequest);
                         continue;
-                    } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                        if (datacenterDownloadTransportToken != 0 && request.transportChannelToken == datacenterDownloadTransportToken) {
+                    } else {
+                        if (connection.channelToken != 0 && request.transportChannelToken == connection.channelToken) {
                             FileLog.d("tmessages", "Request download token is valid, not retrying " + request.rawRequest);
                             continue;
                         }
-                    } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                        if (datacenterUploadTransportToken != 0 && request.transportChannelToken == datacenterUploadTransportToken) {
-                            FileLog.d("tmessages", "Request upload token is valid, not retrying " + request.rawRequest);
-                            continue;
-                        }
                     }
                 }
 
@@ -1197,15 +1069,15 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 request.runningStartTime = currentTime;
 
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    request.transportChannelToken = datacenterTransportToken;
-                    addMessageToDatacenter(genericMessagesToDatacenters, requestDatacenter.datacenterId, networkMessage);
+                    request.transportChannelToken = connection.channelToken;
+                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    request.transportChannelToken = datacenterDownloadTransportToken;
+                    request.transportChannelToken = connection.channelToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
                     proceedToSendingMessages(arr, connection, false);
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    request.transportChannelToken = datacenterUploadTransportToken;
+                    request.transportChannelToken = connection.channelToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
                     proceedToSendingMessages(arr, connection, false);
@@ -1215,7 +1087,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
         boolean updatingState = MessagesController.getInstance().updatingState;
 
-        if (activeTransportTokens.get(currentDatacenterId) != null) {
+        if (genericConnection != null && genericConnection.channelToken != 0) {
             if (!updatingState) {
                 Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
 
@@ -1232,7 +1104,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                         NetworkMessage networkMessage = new NetworkMessage();
                         networkMessage.protoMessage = wrapMessage(destroySession, currentDatacenter.connection, false);
                         if (networkMessage.protoMessage != null) {
-                            addMessageToDatacenter(genericMessagesToDatacenters, currentDatacenter.datacenterId, networkMessage);
+                            addMessageToDatacenter(currentDatacenter.datacenterId, networkMessage);
                         }
                     }
                 }
@@ -1301,7 +1173,17 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 continue;
             }
 
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && activeTransportTokens.get(requestDatacenter.datacenterId) == null) {
+            TcpConnection connection = null;
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
+                connection = requestDatacenter.getGenericConnection(this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
+                int num = (request.flags & RPCRequest.RPCRequestClassDownloadMedia2) != 0 ? 1 : 0;
+                connection = requestDatacenter.getDownloadConnection(num, this);
+            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
+                connection = requestDatacenter.getUploadConnection(this);
+            }
+
+            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && connection.channelToken == 0) {
                 continue;
             }
 
@@ -1311,40 +1193,19 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
             if (request.requiresCompletion) {
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    if (genericRunningRequestCount >= 60)
+                    if (genericRunningRequestCount >= 60) {
                         continue;
-
+                    }
                     genericRunningRequestCount++;
-
-                    Integer tokenIt = activeTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = tokenIt != null ? tokenIt : 0;
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    if (!haveNetwork) {
-                        FileLog.d("tmessages", "Don't have any network connection, skipping upload request");
-                        continue;
-                    }
-
-                    if (uploadRunningRequestCount >= 5) {
+                    if (!haveNetwork || uploadRunningRequestCount >= 5) {
                         continue;
                     }
-
-                    Integer uploadTokenIt = activeUploadTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = uploadTokenIt != null ? uploadTokenIt : 0;
-
                     uploadRunningRequestCount++;
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    if (!haveNetwork) {
-                        FileLog.d("tmessages", "Don't have any network connection, skipping download request");
-                        continue;
-                    }
-
-                    if (downloadRunningRequestCount >= 5) {
+                    if (!haveNetwork || downloadRunningRequestCount >= 5) {
                         continue;
                     }
-
-                    Integer downloadTokenIt = activeDownloadTransportTokens.get(requestDatacenter.datacenterId);
-                    request.transportChannelToken = downloadTokenIt != null ? downloadTokenIt : 0;
-
                     downloadRunningRequestCount++;
                 }
             }
@@ -1358,15 +1219,6 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
             int requestLength = os.length();
 
             if (requestLength != 0) {
-                TcpConnection connection = null;
-                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    connection = requestDatacenter.connection;
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    connection = requestDatacenter.downloadConnection;
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    connection = requestDatacenter.uploadConnection;
-                }
-
                 if (canCompress) {
                     try {
                         byte[] data = Utilities.compress(os.toByteArray());
@@ -1396,22 +1248,17 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 request.runningMessageSeqNo = networkMessage.protoMessage.seqno;
                 request.serializedLength = requestLength;
                 request.runningStartTime = (int)(System.currentTimeMillis() / 1000);
+                request.transportChannelToken = connection.channelToken;
                 if (request.requiresCompletion) {
                     runningRequests.add(request);
                 }
 
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    addMessageToDatacenter(genericMessagesToDatacenters, requestDatacenter.datacenterId, networkMessage);
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
-                    arr.add(networkMessage);
-                    proceedToSendingMessages(arr, requestDatacenter.downloadConnection, false);
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
+                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
+                } else {
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, requestDatacenter.uploadConnection, false);
-                } else {
-                    FileLog.e("tmessages", "***** Error: request " + request.rawRequest + " has undefined session");
+                    proceedToSendingMessages(arr, connection, false);
                 }
             } else {
                 FileLog.e("tmessages", "***** Couldn't serialize " + request.rawRequest);
@@ -1565,11 +1412,11 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         }
     }
 
-    void addMessageToDatacenter(HashMap<Integer, ArrayList<NetworkMessage>> pMap, int datacenterId, NetworkMessage message) {
-        ArrayList<NetworkMessage> arr = pMap.get(datacenterId);
+    void addMessageToDatacenter(int datacenterId, NetworkMessage message) {
+        ArrayList<NetworkMessage> arr = genericMessagesToDatacenters.get(datacenterId);
         if (arr == null) {
             arr = new ArrayList<NetworkMessage>();
-            pMap.put(datacenterId, arr);
+            genericMessagesToDatacenters.put(datacenterId, arr);
         }
         arr.add(message);
     }
@@ -1874,7 +1721,7 @@ private void registerForPush() {
             }
             req.system_version = "SDK " + Build.VERSION.SDK_INT;
             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-            req.app_version = pInfo.versionName;
+            req.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
             if (req.app_version == null) {
                 req.app_version = "App version unknown";
             }
@@ -2182,6 +2029,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                     }
                                     implicitError = new TLRPC.TL_error();
                                     implicitError.code = -1000;
+                                    implicitError.text = "";
                                 }
                             }
 
@@ -2276,16 +2124,7 @@ public void run() {
                     timeDifference = (int)((time - currentTime) / 1000 - currentPingTime / 2.0);
                 }
 
-                if (datacenter.connection != null) {
-                    datacenter.connection.recreateSession();
-                }
-                if (datacenter.downloadConnection != null) {
-                    datacenter.downloadConnection.recreateSession();
-                }
-                if (datacenter.uploadConnection != null) {
-                    datacenter.uploadConnection.recreateSession();
-                }
-
+                datacenter.recreateSessions();
                 saveSession();
 
                 lastOutgoingMessageId = 0;
@@ -2829,15 +2668,7 @@ void authorizeOnMovingDatacenter() {
             return;
         }
 
-        if (datacenter.connection != null) {
-            datacenter.connection.recreateSession();
-        }
-        if (datacenter.downloadConnection != null) {
-            datacenter.downloadConnection.recreateSession();
-        }
-        if (datacenter.uploadConnection != null) {
-            datacenter.uploadConnection.recreateSession();
-        }
+        datacenter.recreateSessions();
 
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
         clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
@@ -2902,16 +2733,7 @@ public void ActionDidFinishExecution(final Action action, HashMap<String, Object
 
             if (eactor.datacenter.datacenterId == currentDatacenterId || eactor.datacenter.datacenterId == movingToDatacenterId) {
                 timeDifference = (Integer)params.get("timeDifference");
-
-                if (eactor.datacenter.connection != null) {
-                    eactor.datacenter.connection.recreateSession();
-                }
-                if (eactor.datacenter.downloadConnection != null) {
-                    eactor.datacenter.downloadConnection.recreateSession();
-                }
-                if (eactor.datacenter.uploadConnection != null) {
-                    eactor.datacenter.uploadConnection.recreateSession();
-                }
+                eactor.datacenter.recreateSessions();
 
                 clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, eactor.datacenter);
                 clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, eactor.datacenter);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
index f13560ba1..43fa8428a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
@@ -35,8 +35,8 @@
     private volatile int currentAddressNum = 0;
 
     public TcpConnection connection;
-    public TcpConnection downloadConnection;
-    public TcpConnection uploadConnection;
+    private ArrayList<TcpConnection> downloadConnections = new ArrayList<TcpConnection>();
+    private TcpConnection uploadConnection;
     public TcpConnection pushConnection;
 
     private ArrayList<ServerSalt> authServerSaltSet = new ArrayList<ServerSalt>();
@@ -319,4 +319,81 @@ boolean containsServerSalt(long value) {
         }
         return false;
     }
+
+    public void suspendConnections() {
+        if (connection != null) {
+            connection.suspendConnection(true);
+        }
+        if (uploadConnection != null) {
+            uploadConnection.suspendConnection(true);
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            downloadConnection.suspendConnection(true);
+        }
+    }
+
+    public void getSessions(ArrayList<Long> sessions) {
+        if (connection != null) {
+            sessions.add(connection.getSissionId());
+        }
+        if (uploadConnection != null) {
+            sessions.add(uploadConnection.getSissionId());
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            sessions.add(downloadConnection.getSissionId());
+        }
+    }
+
+    public void recreateSessions() {
+        if (connection != null) {
+            connection.recreateSession();
+        }
+        if (uploadConnection != null) {
+            uploadConnection.recreateSession();
+        }
+        for (TcpConnection downloadConnection : downloadConnections) {
+            downloadConnection.recreateSession();
+        }
+    }
+
+    public TcpConnection getDownloadConnection(int num, TcpConnection.TcpConnectionDelegate delegate) {
+        if (num >= 0 && authKey != null) {
+            TcpConnection downloadConnection = null;
+            if (num < downloadConnections.size()) {
+                downloadConnection = downloadConnections.get(num);
+            } else {
+                downloadConnection = new TcpConnection(datacenterId);
+                downloadConnection.delegate = delegate;
+                downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
+                downloadConnections.add(downloadConnection);
+            }
+            downloadConnection.connect();
+            return downloadConnection;
+        }
+        return null;
+    }
+
+    public TcpConnection getUploadConnection(TcpConnection.TcpConnectionDelegate delegate) {
+        if (authKey != null) {
+            if (uploadConnection == null) {
+                uploadConnection = new TcpConnection(datacenterId);
+                uploadConnection.delegate = delegate;
+                uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
+            }
+            uploadConnection.connect();
+        }
+        return uploadConnection;
+    }
+
+    public TcpConnection getGenericConnection(TcpConnection.TcpConnectionDelegate delegate) {
+        if (authKey != null) {
+            if (connection == null) {
+                connection = new TcpConnection(datacenterId);
+                connection.delegate = delegate;
+                connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
+            }
+            connection.connect();
+        }
+        return connection;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index b3b641bf7..cd577fbae 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -12,7 +12,6 @@
 import android.graphics.BitmapFactory;
 import android.os.Build;
 import android.provider.MediaStore;
-import android.util.Log;
 
 import org.telegram.ui.ApplicationLoader;
 
@@ -26,7 +25,7 @@
 import java.util.Scanner;
 
 public class FileLoadOperation {
-    private int downloadChunkSize = 1024 * 32;
+    private int downloadChunkSize = 1024 * 256;
 
     public int datacenter_id;
     public TLRPC.InputFileLocation location;
@@ -39,6 +38,13 @@
     private byte[] key;
     private byte[] iv;
     private long requestToken = 0;
+    private long requestToken2 = 0;
+    private int requestProgress = 0;
+    private int requestProgress2 = 0;
+    private int nextDownloadOffset = 0;
+    private TLRPC.TL_upload_file delayedRes = null;
+    private int delayedResOffset = 0;
+    private int delayedResTokenNum = 0;
 
     private File cacheFileTemp;
     private File cacheFileFinal;
@@ -79,12 +85,7 @@ public FileLoadOperation(TLRPC.FileLocation fileLocation) {
     }
 
     public FileLoadOperation(TLRPC.Video videoLocation) {
-        if (videoLocation instanceof TLRPC.TL_video) {
-            location = new TLRPC.TL_inputVideoFileLocation();
-            datacenter_id = videoLocation.dc_id;
-            location.id = videoLocation.id;
-            location.access_hash = videoLocation.access_hash;
-        } else if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
+        if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
             location.id = videoLocation.id;
             location.access_hash = videoLocation.access_hash;
@@ -92,6 +93,11 @@ public FileLoadOperation(TLRPC.Video videoLocation) {
             iv = new byte[32];
             System.arraycopy(videoLocation.iv, 0, iv, 0, iv.length);
             key = videoLocation.key;
+        } else if (videoLocation instanceof TLRPC.TL_video) {
+            location = new TLRPC.TL_inputVideoFileLocation();
+            datacenter_id = videoLocation.dc_id;
+            location.id = videoLocation.id;
+            location.access_hash = videoLocation.access_hash;
         }
         ext = ".mp4";
     }
@@ -115,12 +121,7 @@ public FileLoadOperation(TLRPC.Audio audioLocation) {
     }
 
     public FileLoadOperation(TLRPC.Document documentLocation) {
-        if (documentLocation instanceof TLRPC.TL_document) {
-            location = new TLRPC.TL_inputDocumentFileLocation();
-            datacenter_id = documentLocation.dc_id;
-            location.id = documentLocation.id;
-            location.access_hash = documentLocation.access_hash;
-        } else if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
+        if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
             location.id = documentLocation.id;
             location.access_hash = documentLocation.access_hash;
@@ -128,6 +129,11 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
             iv = new byte[32];
             System.arraycopy(documentLocation.iv, 0, iv, 0, iv.length);
             key = documentLocation.key;
+        } else if (documentLocation instanceof TLRPC.TL_document) {
+            location = new TLRPC.TL_inputDocumentFileLocation();
+            datacenter_id = documentLocation.dc_id;
+            location.id = documentLocation.id;
+            location.access_hash = documentLocation.access_hash;
         }
         ext = documentLocation.file_name;
         int idx = -1;
@@ -336,7 +342,7 @@ public void run() {
             cacheFileTemp = new File(Utilities.getCacheDir(), fileNameTemp);
             if (cacheFileTemp.exists()) {
                 downloadedBytes = (int)cacheFileTemp.length();
-                downloadedBytes = downloadedBytes / 1024 * 1024;
+                nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
             }
             if (fileNameIv != null) {
                 cacheIvTemp = new File(Utilities.getCacheDir(), fileNameIv);
@@ -377,6 +383,11 @@ public void run() {
             if (httpUrl != null) {
                 startDownloadHTTPRequest();
             } else {
+                if (totalBytesCount >= 1024 * 1024) {
+                    downloadChunkSize = 1024 * 256;
+                } else {
+                    downloadChunkSize = 1024 * 32;
+                }
                 startDownloadRequest();
             }
         }
@@ -388,8 +399,9 @@ public void cancel() {
         }
         state = 2;
         cleanup();
-        if (httpUrl == null && requestToken != 0) {
+        if (httpUrl == null) {
             ConnectionsManager.getInstance().cancelRpc(requestToken, true);
+            ConnectionsManager.getInstance().cancelRpc(requestToken2, true);
         }
         delegate.didFailedLoadingFile(FileLoadOperation.this);
     }
@@ -423,6 +435,12 @@ private void cleanup() {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
+
+            if (delayedRes != null) {
+                delayedRes.disableFree = false;
+                delayedRes.freeResources();
+                delayedRes = null;
+            }
         }
     }
 
@@ -594,101 +612,171 @@ public void run() {
         }
     }
 
-    private void startDownloadRequest() {
-        if (state != 1) {
-            return;
-        }
-        TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
-        req.location = location;
-        //if (totalBytesCount == -1) {
-        //    req.offset = 0;
-        //    req.limit = 0;
-        //} else {
-            req.offset = downloadedBytes;
-            req.limit = downloadChunkSize;
-        //}
-        requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                requestToken = 0;
-                if (error == null) {
-                    TLRPC.TL_upload_file res = (TLRPC.TL_upload_file)response;
+    private void processRequestResult(TLRPC.TL_upload_file res, TLRPC.TL_error error, int dowloadOffset, int tokenNum) {
+        if (error == null) {
+            try {
+                if (downloadedBytes != dowloadOffset) {
+                    if (delayedRes != null) {
+                        FileLog.e("tmessages", "something went wrong!");
+                    }
+                    delayedRes = res;
+                    delayedRes.disableFree = true;
+                    delayedResOffset = dowloadOffset;
+                    delayedResTokenNum = tokenNum;
+                    return;
+                } else {
+                    if (tokenNum == 0) {
+                        requestToken = 0;
+                    } else if (tokenNum == 1) {
+                        requestToken2 = 0;
+                    }
+                }
+
+                if (res.bytes.limit() == 0) {
+                    onFinishLoadingFile();
+                    return;
+                }
+                if (key != null) {
+                    Utilities.aesIgeEncryption2(res.bytes.buffer, key, iv, false, true, res.bytes.limit());
+                }
+                if (fileOutputStream != null) {
+                    FileChannel channel = fileOutputStream.getChannel();
+                    channel.write(res.bytes.buffer);
+                }
+                if (fiv != null) {
+                    fiv.seek(0);
+                    fiv.write(iv);
+                }
+                downloadedBytes += res.bytes.limit();
+                if (totalBytesCount > 0 && state == 1) {
+                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
+                }
+
+                if(delayedRes != null && res != delayedRes) {
+                    TLRPC.TL_upload_file temp = delayedRes;
+                    processRequestResult(temp, null, delayedResOffset, delayedResTokenNum);
+                    if (delayedRes != null) {
+                        delayedRes.disableFree = false;
+                        delayedRes.freeResources();
+                        delayedRes = null;
+                    }
+                }
+
+                if (downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount != downloadedBytes) {
+                    startDownloadRequest();
+                } else {
+                    onFinishLoadingFile();
+                }
+            } catch (Exception e) {
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this);
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            if (error.text.contains("FILE_MIGRATE_")) {
+                String errorMsg = error.text.replace("FILE_MIGRATE_", "");
+                Scanner scanner = new Scanner(errorMsg);
+                scanner.useDelimiter("");
+                Integer val;
+                try {
+                    val = scanner.nextInt();
+                } catch (Exception e) {
+                    val = null;
+                }
+                if (val == null) {
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this);
+                } else {
+                    datacenter_id = val;
+                    nextDownloadOffset = 0;
+                    startDownloadRequest();
+                }
+            } else if (error.text.contains("OFFSET_INVALID")) {
+                if (downloadedBytes % downloadChunkSize == 0) {
                     try {
-                        if (res.bytes.limit() == 0) {
-                            onFinishLoadingFile();
-                            return;
-                        }
-                        if (key != null) {
-                            Utilities.aesIgeEncryption2(res.bytes.buffer, key, iv, false, true, res.bytes.limit());
-                        }
-                        if (fileOutputStream != null) {
-                            FileChannel channel = fileOutputStream.getChannel();
-                            channel.write(res.bytes.buffer);
-                        }
-                        if (fiv != null) {
-                            fiv.seek(0);
-                            fiv.write(iv);
-                        }
-                        downloadedBytes += res.bytes.limit();
-                        if (totalBytesCount > 0) {
-                            delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
-                        }
-                        if (downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount != downloadedBytes) {
-                            startDownloadRequest();
-                        } else {
-                            onFinishLoadingFile();
-                        }
+                        onFinishLoadingFile();
                     } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                         cleanup();
                         delegate.didFailedLoadingFile(FileLoadOperation.this);
-                        FileLog.e("tmessages", e);
                     }
                 } else {
-                    if (error.text.contains("FILE_MIGRATE_")) {
-                        String errorMsg = error.text.replace("FILE_MIGRATE_", "");
-                        Scanner scanner = new Scanner(errorMsg);
-                        scanner.useDelimiter("");
-                        Integer val;
-                        try {
-                            val = scanner.nextInt();
-                        } catch (Exception e) {
-                            val = null;
-                        }
-                        if (val == null) {
-                            cleanup();
-                            delegate.didFailedLoadingFile(FileLoadOperation.this);
-                        } else {
-                            datacenter_id = val;
-                            startDownloadRequest();
-                        }
-                    } else if (error.text.contains("OFFSET_INVALID")) {
-                        if (downloadedBytes % downloadChunkSize == 0) {
-                            try {
-                                onFinishLoadingFile();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                                cleanup();
-                                delegate.didFailedLoadingFile(FileLoadOperation.this);
-                            }
-                        } else {
-                            cleanup();
-                            delegate.didFailedLoadingFile(FileLoadOperation.this);
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this);
+                }
+            } else {
+                if (location != null) {
+                    FileLog.e("tmessages", "" + location + " id = " + location.id + " access_hash = " + location.access_hash + " volume_id = " + location.local_id + " secret = " + location.secret);
+                }
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this);
+            }
+        }
+    }
+
+    private void processRequestProgress() {
+        delegate.didChangedLoadProgress(FileLoadOperation.this, Math.min(1.0f, (float) (downloadedBytes + requestProgress + requestProgress2) / (float) totalBytesCount));
+    }
+
+    private void startDownloadRequest() {
+        if (state != 1) {
+            return;
+        }
+        if (requestToken == 0) {
+            requestProgress = 0;
+            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
+                return;
+            }
+            final TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
+            req.location = location;
+            req.offset = nextDownloadOffset;
+            req.limit = downloadChunkSize;
+            nextDownloadOffset += downloadChunkSize;
+            final long time = System.currentTimeMillis();
+            requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    processRequestResult((TLRPC.TL_upload_file) response, error, req.offset, 0);
+                }
+            }, new RPCRequest.RPCProgressDelegate() {
+                @Override
+                public void progress(int length, int progress) {
+                    if (state == 1) {
+                        requestProgress = progress;
+                        if (totalBytesCount == -1) {
+                            delegate.didChangedLoadProgress(FileLoadOperation.this, Math.min(1.0f, (float) (progress) / (float) length));
+                        } else if (totalBytesCount > 0) {
+                            processRequestProgress();
                         }
-                    } else {
-                        cleanup();
-                        delegate.didFailedLoadingFile(FileLoadOperation.this);
                     }
                 }
+            }, null, true, RPCRequest.RPCRequestClassDownloadMedia, datacenter_id);
+        }
+        if (totalBytesCount > 0 && requestToken2 == 0) {
+            requestProgress2 = 0;
+            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
+                return;
             }
-        }, new RPCRequest.RPCProgressDelegate() {
-            @Override
-            public void progress(int length, int progress) {
-                if (totalBytesCount > 0) {
-                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)(downloadedBytes + progress) / (float)totalBytesCount));
-                } else if (totalBytesCount == -1) {
-                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)(progress) / (float)length));
+            final long time = System.currentTimeMillis();
+            final TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
+            req.location = location;
+            req.offset = nextDownloadOffset;
+            req.limit = downloadChunkSize;
+            nextDownloadOffset += downloadChunkSize;
+            requestToken2 = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    processRequestResult((TLRPC.TL_upload_file) response, error, req.offset, 1);
                 }
-            }
-        }, null, true, RPCRequest.RPCRequestClassDownloadMedia, datacenter_id);
+            }, new RPCRequest.RPCProgressDelegate() {
+                @Override
+                public void progress(int length, int progress) {
+                    if (state == 1) {
+                        requestProgress2 = progress;
+                        processRequestProgress();
+                    }
+                }
+            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | RPCRequest.RPCRequestClassDownloadMedia2, datacenter_id);
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index d86bdbd5e..e28cbbbca 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -52,9 +52,9 @@ public void execute(HashMap params) {
     void beginHandshake(boolean dropConnection) {
         if (datacenter.connection == null) {
             datacenter.connection = new TcpConnection(datacenter.datacenterId);
-            datacenter.connection.delegate = this;
             datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
         }
+        datacenter.connection.delegate = this;
 
         processedMessageIds = new ArrayList<Long>();
         authNonce = null;
@@ -566,8 +566,14 @@ public void tcpConnectionProgressChanged(TcpConnection connection, long messageI
     }
 
     @Override
-    public void tcpConnectionClosed(TcpConnection connection) {
+    public void tcpConnectionClosed(final TcpConnection connection) {
         wasDisconnect = true;
+        Utilities.stageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                connection.connect();
+            }
+        }, 1000);
     }
 
     @Override
@@ -591,9 +597,7 @@ public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
 
     @Override
     public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length) {
-
         long keyId = data.readInt64();
-
         if (keyId == 0) {
             long messageId = data.readInt64();
             if (processedMessageIds.contains(messageId)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index b3f900a2e..edd741ede 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -1024,7 +1024,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
             fileDecodingQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    if (playingMessageObject.audioProgress != 0) {
+                    if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
                         lastPlayPcm = (long)(currentTotalPcmDuration * playingMessageObject.audioProgress);
                         seekOpusFile(playingMessageObject.audioProgress);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 7ff9fbd23..49d857a56 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -131,6 +131,7 @@
         public TLRPC.TL_messages_sendMedia sendRequest;
         public TLRPC.TL_decryptedMessage sendEncryptedRequest;
         public int type;
+        public String originalPath;
         public TLRPC.FileLocation location;
         public TLRPC.TL_video videoLocation;
         public TLRPC.TL_audio audioLocation;
@@ -1609,7 +1610,7 @@ private void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.Encrypt
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
         reqSend.action.random_ids = random_ids;
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null);
 
     }
 
@@ -1622,7 +1623,7 @@ private void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
-        performSendEncryptedRequest(reqSend, null, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, null, encryptedChat, null, null);
     }
 
     public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
@@ -1666,7 +1667,7 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
         reqSend.action.ttl_seconds = encryptedChat.ttl;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
     }
 
     public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids) {
@@ -1714,7 +1715,7 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
         Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = action;
-        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
     }
 
     private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.FileLocation location, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer) {
@@ -1855,14 +1856,6 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 newMsg.fwd_msg_id = msgObj.messageOwner.id;
                 newMsg.attachPath = msgObj.messageOwner.attachPath;
                 type = 4;
-            } else if (msgObj.type == 11) {
-                newMsg.fwd_from_id = msgObj.messageOwner.from_id;
-                newMsg.fwd_date = msgObj.messageOwner.date;
-                newMsg.media = new TLRPC.TL_messageMediaPhoto();
-                newMsg.media.photo = msgObj.messageOwner.action.photo;
-                newMsg.message = "";
-                newMsg.fwd_msg_id = msgObj.messageOwner.id;
-                type = 5;
             } else {
                 newMsg.fwd_from_id = msgObj.messageOwner.from_id;
                 newMsg.fwd_date = msgObj.messageOwner.date;
@@ -1939,7 +1932,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 reqSend.message = message;
                 reqSend.peer = sendToPeer;
                 reqSend.random_id = newMsg.random_id;
-                performSendMessageRequest(reqSend, newMsgObj);
+                performSendMessageRequest(reqSend, newMsgObj, null);
             } else {
                 TLRPC.TL_decryptedMessage reqSend = new TLRPC.TL_decryptedMessage();
                 reqSend.random_id = newMsg.random_id;
@@ -1947,7 +1940,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 Utilities.random.nextBytes(reqSend.random_bytes);
                 reqSend.message = message;
                 reqSend.media = new TLRPC.TL_decryptedMessageMediaEmpty();
-                performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
             }
         } else if (type >= 1 && type <= 3 || type >= 5 && type <= 8) {
             if (encryptedChat == null) {
@@ -1959,55 +1952,78 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media.geo_point = new TLRPC.TL_inputGeoPoint();
                     reqSend.media.geo_point.lat = lat;
                     reqSend.media.geo_point._long = lon;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    performSendMessageRequest(reqSend, newMsgObj, null);
                 } else if (type == 2) {
-                    reqSend.media = new TLRPC.TL_inputMediaUploadedPhoto();
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 0;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                    performSendDelayedMessage(delayedMessage);
+                    if (photo.access_hash == 0) {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedPhoto();
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 0;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputMediaPhoto media = new TLRPC.TL_inputMediaPhoto();
+                        media.id = new TLRPC.TL_inputPhoto();
+                        media.id.id = photo.id;
+                        media.id.access_hash = photo.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
                 } else if (type == 3) {
-                    reqSend.media = new TLRPC.TL_inputMediaUploadedThumbVideo();
-                    reqSend.media.duration = video.duration;
-                    reqSend.media.w = video.w;
-                    reqSend.media.h = video.h;
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 1;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.location = video.thumb.location;
-                    delayedMessage.videoLocation = video;
-                    performSendDelayedMessage(delayedMessage);
-                } else if (type == 5) {
-                    reqSend.media = new TLRPC.TL_inputMediaPhoto();
-                    TLRPC.TL_inputPhoto ph = new TLRPC.TL_inputPhoto();
-                    ph.id = msgObj.messageOwner.action.photo.id;
-                    ph.access_hash = msgObj.messageOwner.action.photo.access_hash;
-                    ((TLRPC.TL_inputMediaPhoto)reqSend.media).id = ph;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    if (video.access_hash == 0) {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbVideo();
+                        reqSend.media.duration = video.duration;
+                        reqSend.media.w = video.w;
+                        reqSend.media.h = video.h;
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 1;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.location = video.thumb.location;
+                        delayedMessage.videoLocation = video;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputMediaVideo media = new TLRPC.TL_inputMediaVideo();
+                        media.id = new TLRPC.TL_inputVideo();
+                        media.id.id = video.id;
+                        media.id.access_hash = video.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
                 } else if (type == 6) {
                     reqSend.media = new TLRPC.TL_inputMediaContact();
                     reqSend.media.phone_number = user.phone;
                     reqSend.media.first_name = user.first_name;
                     reqSend.media.last_name = user.last_name;
-                    performSendMessageRequest(reqSend, newMsgObj);
+                    performSendMessageRequest(reqSend, newMsgObj, null);
                 } else if (type == 7) {
-                    if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                    if (document.access_hash == 0) {
+                        if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
+                            reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                        } else {
+                            reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                        }
+                        reqSend.media.mime_type = document.mime_type;
+                        reqSend.media.file_name = document.file_name;
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendRequest = reqSend;
+                        delayedMessage.type = 2;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.documentLocation = document;
+                        delayedMessage.location = document.thumb.location;
+                        performSendDelayedMessage(delayedMessage);
                     } else {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                        TLRPC.TL_inputMediaDocument media = new TLRPC.TL_inputMediaDocument();
+                        media.id = new TLRPC.TL_inputDocument();
+                        media.id.id = document.id;
+                        media.id.access_hash = document.access_hash;
+                        reqSend.media = media;
+                        performSendMessageRequest(reqSend, newMsgObj, null);
                     }
-                    reqSend.media.mime_type = document.mime_type;
-                    reqSend.media.file_name = document.file_name;
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendRequest = reqSend;
-                    delayedMessage.type = 2;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.documentLocation = document;
-                    delayedMessage.location = document.thumb.location;
-                    performSendDelayedMessage(delayedMessage);
                 } else if (type == 8) {
                     reqSend.media = new TLRPC.TL_inputMediaUploadedAudio();
                     reqSend.media.duration = audio.duration;
@@ -2028,25 +2044,34 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaGeoPoint();
                     reqSend.media.lat = lat;
                     reqSend.media._long = lon;
-                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
                 } else if (type == 2) {
-                    reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
                     TLRPC.PhotoSize small = photo.sizes.get(0);
                     TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
+                    reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
                     reqSend.media.thumb = small.bytes;
                     reqSend.media.thumb_h = small.h;
                     reqSend.media.thumb_w = small.w;
                     reqSend.media.w = big.w;
                     reqSend.media.h = big.h;
                     reqSend.media.size = big.size;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 0;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                    performSendDelayedMessage(delayedMessage);
+                    if (big.location.key == null) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 0;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = big.location.volume_id;
+                        encryptedFile.access_hash = big.location.secret;
+                        reqSend.media.key = big.location.key;
+                        reqSend.media.iv = big.location.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 3) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaVideo();
                     reqSend.media.duration = video.duration;
@@ -2056,23 +2081,30 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media.thumb = video.thumb.bytes;
                     reqSend.media.thumb_h = video.thumb.h;
                     reqSend.media.thumb_w = video.thumb.w;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 1;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.videoLocation = video;
-                    performSendDelayedMessage(delayedMessage);
-                } else if (type == 5) {
-
+                    if (video.access_hash == 0) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 1;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.videoLocation = video;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = video.id;
+                        encryptedFile.access_hash = video.access_hash;
+                        reqSend.media.key = video.key;
+                        reqSend.media.iv = video.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 6) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaContact();
                     reqSend.media.phone_number = user.phone;
                     reqSend.media.first_name = user.first_name;
                     reqSend.media.last_name = user.last_name;
                     reqSend.media.user_id = user.id;
-                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+                    performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null, null);
                 } else if (type == 7) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaDocument();
                     reqSend.media.size = document.size;
@@ -2087,14 +2119,23 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     }
                     reqSend.media.file_name = document.file_name;
                     reqSend.media.mime_type = document.mime_type;
-
-                    DelayedMessage delayedMessage = new DelayedMessage();
-                    delayedMessage.sendEncryptedRequest = reqSend;
-                    delayedMessage.type = 2;
-                    delayedMessage.obj = newMsgObj;
-                    delayedMessage.encryptedChat = encryptedChat;
-                    delayedMessage.documentLocation = document;
-                    performSendDelayedMessage(delayedMessage);
+                    if (document.access_hash == 0) {
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.originalPath = originalPath;
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 2;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.documentLocation = document;
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
+                        encryptedFile.id = document.id;
+                        encryptedFile.access_hash = document.access_hash;
+                        reqSend.media.key = document.key;
+                        reqSend.media.iv = document.iv;
+                        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, encryptedFile, null);
+                    }
                 } else if (type == 8) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaAudio();
                     reqSend.media.duration = audio.duration;
@@ -2118,13 +2159,15 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             } else {
                 reqSend.id = msgObj.messageOwner.fwd_msg_id;
             }
-            performSendMessageRequest(reqSend, newMsgObj);
+            performSendMessageRequest(reqSend, newMsgObj, null);
         }
     }
 
-    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, TLRPC.EncryptedFile file, TLRPC.DecryptedMessage decryptedMessage) {
+    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, TLRPC.EncryptedFile file, TLRPC.DecryptedMessage decryptedMessage, String originalPath) {
         if (sentMessage != null) {
             if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+
                 for (TLRPC.PhotoSize size : sentMessage.media.photo.sizes) {
                     if (size instanceof TLRPC.TL_photoSizeEmpty) {
                         continue;
@@ -2148,6 +2191,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
             } else if (sentMessage.media instanceof TLRPC.TL_messageMediaVideo && sentMessage.media.video != null && newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.video, 2);
+
                 TLRPC.PhotoSize size2 = newMsg.media.video.thumb;
                 TLRPC.PhotoSize size = sentMessage.media.video.thumb;
                 if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
@@ -2164,6 +2209,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
             } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
+                MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
+
                 TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
                 TLRPC.PhotoSize size = sentMessage.media.document.thumb;
                 if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
@@ -2226,12 +2273,13 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.photo, 3);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
                 TLRPC.Video video = newMsg.media.video;
                 newMsg.media.video = new TLRPC.TL_videoEncrypted();
                 newMsg.media.video.duration = video.duration;
                 newMsg.media.video.thumb = video.thumb;
-                newMsg.media.video.id = video.id;
                 newMsg.media.video.dc_id = file.dc_id;
                 newMsg.media.video.w = video.w;
                 newMsg.media.video.h = video.h;
@@ -2247,6 +2295,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.video, 5);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
                 TLRPC.Document document = newMsg.media.document;
                 newMsg.media.document = new TLRPC.TL_documentEncrypted();
@@ -2272,6 +2322,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
+
+                MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.document, 4);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
                 TLRPC.Audio audio = newMsg.media.audio;
                 newMsg.media.audio = new TLRPC.TL_audioEncrypted();
@@ -2301,7 +2353,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
         }
     }
 
-    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final MessageObject newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile) {
+    private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final MessageObject newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath) {
         if (req == null || chat.auth_key == null || chat instanceof TLRPC.TL_encryptedChatRequested || chat instanceof TLRPC.TL_encryptedChatWaiting) {
             return;
         }
@@ -2366,7 +2418,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
                         newMsgObj.messageOwner.date = res.date;
                         if (res.file instanceof TLRPC.TL_encryptedFile) {
-                            processSentMessage(newMsgObj.messageOwner, null, res.file, req);
+                            processSentMessage(newMsgObj.messageOwner, null, res.file, req, originalPath);
                         }
                         MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, res.date, true);
                         MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
@@ -2397,7 +2449,7 @@ public void run() {
         }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress);
     }
 
-    private void performSendMessageRequest(TLObject req, final MessageObject newMsgObj) {
+    private void performSendMessageRequest(TLObject req, final MessageObject newMsgObj, final String originalPath) {
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
@@ -2431,7 +2483,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                         sentMessages.add(res.message);
                         newMsgObj.messageOwner.id = res.message.id;
-                        processSentMessage(newMsgObj.messageOwner, res.message, null, null);
+                        processSentMessage(newMsgObj.messageOwner, res.message, null, null, originalPath);
                         if (MessagesStorage.lastSeqValue + 1 == res.seq) {
                             MessagesStorage.lastSeqValue = res.seq;
                             MessagesStorage.lastPtsValue = res.pts;
@@ -2457,7 +2509,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             TLRPC.Message message = res.messages.get(0);
                             newMsgObj.messageOwner.id = message.id;
                             sentMessages.add(message);
-                            processSentMessage(newMsgObj.messageOwner, message, null, null);
+                            processSentMessage(newMsgObj.messageOwner, message, null, null, originalPath);
                         }
                         if (MessagesStorage.lastSeqValue + 1 == res.seq) {
                             MessagesStorage.lastSeqValue = res.seq;
@@ -2674,14 +2726,14 @@ public void run() {
                             if (file != null && message.sendRequest != null) {
                                 if (message.type == 0) {
                                     message.sendRequest.media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj);
+                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                 } else if (message.type == 1) {
                                     if (message.sendRequest.media.thumb == null) {
                                         message.sendRequest.media.thumb = file;
                                         performSendDelayedMessage(message);
                                     } else {
                                         message.sendRequest.media.file = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj);
+                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     }
                                 } else if (message.type == 2) {
                                     if (message.sendRequest.media.thumb == null && message.location != null) {
@@ -2689,18 +2741,18 @@ public void run() {
                                         performSendDelayedMessage(message);
                                     } else {
                                         message.sendRequest.media.file = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj);
+                                        performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     }
                                 } else if (message.type == 3) {
                                     message.sendRequest.media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj);
+                                    performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                 }
                                 arr.remove(a);
                                 a--;
                             } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
                                 message.sendEncryptedRequest.media.key = encryptedFile.key;
                                 message.sendEncryptedRequest.media.iv = encryptedFile.iv;
-                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj, message.encryptedChat, encryptedFile);
+                                performSendEncryptedRequest(message.sendEncryptedRequest, message.obj, message.encryptedChat, encryptedFile, message.originalPath);
                                 arr.remove(a);
                                 a--;
                             }
@@ -3097,7 +3149,7 @@ public void logOut() {
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
-
+                ConnectionsManager.getInstance().cleanUp();
             }
         }, null, true, RPCRequest.RPCRequestClassGeneric);
     }
@@ -3122,7 +3174,7 @@ public void registerForPush(final String regid) {
             }
             req.system_version = "SDK " + Build.VERSION.SDK_INT;
             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-            req.app_version = pInfo.versionName;
+            req.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
             if (req.app_version == null) {
                 req.app_version = "App version unknown";
             }
@@ -4535,8 +4587,9 @@ private void showInAppNotification(MessageObject messageObject) {
             String choosenSoundPath = null;
             int ledColor = 0xff00ff00;
 
+            choosenSoundPath = preferences.getString("sound_path_" + dialog_id, null);
+
             if (chat_id != 0) {
-                choosenSoundPath = preferences.getString("sound_chat_path_" + chat_id, null);
                 if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
                     choosenSoundPath = null;
                 } else if (choosenSoundPath == null) {
@@ -4545,7 +4598,6 @@ private void showInAppNotification(MessageObject messageObject) {
                 needVibrate = preferences.getBoolean("EnableVibrateGroup", true);
                 ledColor = preferences.getInt("GroupLed", 0xff00ff00);
             } else if (user_id != 0) {
-                choosenSoundPath = preferences.getString("sound_path_" + user_id, null);
                 if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
                     choosenSoundPath = null;
                 } else if (choosenSoundPath == null) {
@@ -4889,7 +4941,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newMessage.media.audio = new TLRPC.TL_audioEncrypted();
                         newMessage.media.audio.id = message.file.id;
                         newMessage.media.audio.access_hash = message.file.access_hash;
-                        newMessage.media.audio.user_id = decryptedMessage.media.user_id;
+                        newMessage.media.audio.user_id = from_id;
                         newMessage.media.audio.date = message.date;
                         newMessage.media.audio.size = message.file.size;
                         newMessage.media.audio.key = decryptedMessage.media.key;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index 1466d87bd..1448f6ff1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -97,6 +97,8 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
                 database.executeFast("CREATE TABLE user_phones_v6(uid INTEGER, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (uid, phone))").stepThis().dispose();
 
+                database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
+
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
 
                 database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
@@ -166,6 +168,8 @@ public void openDatabase() {
                 database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
 
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
+
+                database.executeFast("CREATE TABLE IF NOT EXISTS sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -1435,6 +1439,73 @@ public void run() {
         }
     }
 
+    public TLObject getSentFile(final String path, final int type) {
+        if (path == null) {
+            return null;
+        }
+        final Semaphore semaphore = new Semaphore(0);
+        final ArrayList<TLObject> result = new ArrayList<TLObject>();
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    String id = Utilities.MD5(path);
+                    if (id != null) {
+                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM sent_files_v2 WHERE uid = '%s' AND type = %d", id, type));
+                        if (cursor.next()) {
+                            byte[] fileData = cursor.byteArrayValue(0);
+                            if (fileData != null) {
+                                SerializedData data = new SerializedData(fileData);
+                                TLObject file = TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                if (file != null) {
+                                    result.add(file);
+                                }
+                            }
+                        }
+                        cursor.dispose();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                } finally {
+                    semaphore.release();
+                }
+            }
+        });
+        try {
+            semaphore.acquire();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return !result.isEmpty() ? result.get(0) : null;
+    }
+
+    public void putSentFile(final String path, final TLObject file, final int type) {
+        if (path == null || file == null) {
+            return;
+        }
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    String id = Utilities.MD5(path);
+                    if (id != null) {
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?)");
+                        state.requery();
+                        SerializedData data = new SerializedData();
+                        file.serializeToStream(data);
+                        state.bindString(1, id);
+                        state.bindInteger(2, type);
+                        state.bindByteArray(3, data.toByteArray());
+                        state.step();
+                        state.dispose();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
     public void updateEncryptedChatTTL(final TLRPC.EncryptedChat chat) {
         if (chat == null) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
index 831b91f98..ab6162aed 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
@@ -29,6 +29,7 @@
     public static int RPCRequestClassCanCompress = 32;
     public static int RPCRequestClassPush = 64;
     public static int RPCRequestClassWithoutLogin = 128;
+    public static int RPCRequestClassDownloadMedia2 = 256;
 
     static int RPCRequestClassTransportMask = (RPCRequestClassGeneric | RPCRequestClassDownloadMedia | RPCRequestClassUploadMedia);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
index 1aceb8283..9c40cb6e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
@@ -9,6 +9,8 @@
 package org.telegram.messenger;
 
 public class TLObject {
+    public boolean disableFree = false;
+
     public TLObject () {
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index de0fe64ed..0cbc8368a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -8136,6 +8136,9 @@ public void readParams(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
@@ -8287,6 +8290,9 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (result != null) {
                 result.freeResources();
             }
@@ -8826,7 +8832,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_documentEncrypted extends Document {
+    public static class TL_documentEncrypted extends TL_document {
         public static int constructor = 0x55555556;
 
 
@@ -8860,7 +8866,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_videoEncrypted extends Video {
+    public static class TL_videoEncrypted extends TL_video {
         public static int constructor = 0x55555553;
 
 
@@ -9171,6 +9177,9 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
@@ -9198,6 +9207,9 @@ public void serializeToStream(AbsSerializedData stream) {
 
         @Override
         public void freeResources() {
+            if (disableFree) {
+                return;
+            }
             if (bytes != null) {
                 BuffersStorage.getInstance().reuseFreeBuffer(bytes);
                 bytes = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 9536d2d82..59b64ffcc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -1003,4 +1003,8 @@ public static void checkForUpdates(Activity context) {
             UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
         }
     }
+
+    public static boolean isTablet(Context context) {
+        return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
index 1ab8d8b60..e148cf9c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Adapters;
 
+import android.database.DataSetObserver;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
@@ -38,4 +39,11 @@ public long getItemId(int i) {
     public View getView(int i, View view, ViewGroup viewGroup) {
         return null;
     }
+
+    @Override
+    public void unregisterDataSetObserver(DataSetObserver observer) {
+        if (observer != null) {
+            super.unregisterDataSetObserver(observer);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index 7d5ba1aa9..52a7660ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -40,7 +40,6 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 
-import java.util.Calendar;
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class ApplicationLoader extends Application {
@@ -151,10 +150,14 @@ public static void startPushService() {
             applicationContext.startService(new Intent(applicationContext, NotificationsService.class));
 
             if (android.os.Build.VERSION.SDK_INT >= 19) {
-                Calendar cal = Calendar.getInstance();
+//                Calendar cal = Calendar.getInstance();
+//                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+//                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
+//                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
+
                 PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
-                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
-                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
+                AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
+                alarm.cancel(pintent);
             }
         } else {
             stopPushService();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index e549d4bfb..b7a742c9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -546,7 +546,7 @@ public void build(int width, int height) {
             if (chat != null) {
                 nameString = chat.title;
             } else if (user != null) {
-                if (user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
                     if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
                         nameString = Utilities.formatName(user.first_name, user.last_name);
                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index fc4cebaf9..96ce0d2b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -50,7 +50,6 @@
 import android.webkit.MimeTypeMap;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageButton;
@@ -79,6 +78,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatAudioCell;
 import org.telegram.ui.Cells.ChatBaseCell;
 import org.telegram.ui.Cells.ChatMediaCell;
@@ -513,7 +513,11 @@ public void onItemClick(int id) {
                             if (str.length() != 0) {
                                 str += "\n";
                             }
-                            str += messageObject.messageOwner.message;
+                            if (messageObject.messageOwner.message != null) {
+                                str += messageObject.messageOwner.message;
+                            } else {
+                                str += messageObject.messageText;
+                            }
                         }
                         if (str.length() != 0) {
                             if (android.os.Build.VERSION.SDK_INT < 11) {
@@ -1528,7 +1532,7 @@ private void updateSubtitle() {
         if (currentChat != null) {
             actionBarLayer.setTitle(currentChat.title);
         } else if (currentUser != null) {
-            if (currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+            if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
                     actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
@@ -1661,25 +1665,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     showAttachmentError();
                     return;
                 }
-                String tempPath = Utilities.getPath(data.getData());
-
-                boolean isGif = false;
-                String originalPath = null;
-                if (tempPath != null && tempPath.endsWith(".gif")) {
-                    isGif = true;
-                } else if (tempPath == null) {
-                    isGif = MediaController.isGif(data.getData());
-                    if (isGif) {
-                        originalPath = data.toString();
-                        tempPath = MediaController.copyDocumentToCache(data.getData(), "gif");
-                    }
-                }
-
-                if (tempPath != null && isGif) {
-                    processSendingDocument(tempPath, originalPath);
-                } else {
-                    processSendingPhoto(null, data.getData());
-                }
+                processSendingPhoto(null, data.getData());
             } else if (requestCode == 2) {
                 String videoPath = null;
                 if (data != null) {
@@ -1719,8 +1705,8 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     showAttachmentError();
                     return;
                 }
-                String originalPath = null;
                 String tempPath = Utilities.getPath(data.getData());
+                String originalPath = tempPath;
                 if (tempPath == null) {
                     originalPath = data.toString();
                     tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
@@ -1768,21 +1754,17 @@ public boolean processSendingText(String text) {
     }
 
     public void processSendingPhoto(String imageFilePath, Uri imageUri) {
-        if ((imageFilePath == null || imageFilePath.length() == 0) && imageUri == null) {
-            return;
+        ArrayList<String> paths = null;
+        ArrayList<Uri> uris = null;
+        if (imageFilePath != null && imageFilePath.length() != 0) {
+            paths = new ArrayList<String>();
+            paths.add(imageFilePath);
         }
-        TLRPC.TL_photo photo = MessagesController.getInstance().generatePhotoSizes(imageFilePath, imageUri);
-        if (photo != null) {
-            String originalPath = imageFilePath;
-            if (originalPath == null && imageUri != null) {
-                originalPath = imageUri.toString();
-            }
-            MessagesController.getInstance().sendMessage(photo, originalPath, dialog_id);
-            if (chatListView != null) {
-                chatListView.setSelection(messages.size() + 1);
-            }
-            scrollToTopOnResume = true;
+        if (imageUri != null) {
+            uris = new ArrayList<Uri>();
+            uris.add(imageUri);
         }
+        processSendingPhotos(paths, uris);
     }
 
     public void processSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris) {
@@ -1800,6 +1782,8 @@ public void processSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris) {
         new Thread(new Runnable() {
             @Override
             public void run() {
+                ArrayList<String> sendAsDocuments = null;
+                ArrayList<String> sendAsDocumentsOriginal = null;
                 int count = !pathsCopy.isEmpty() ? pathsCopy.size() : urisCopy.size();
                 String path = null;
                 Uri uri = null;
@@ -1810,131 +1794,222 @@ public void run() {
                         uri = urisCopy.get(a);
                     }
 
+                    String originalPath = path;
+                    String tempPath = path;
+                    if (tempPath == null && uri != null) {
+                        tempPath = Utilities.getPath(uri);
+                        originalPath = uri.toString();
+                    }
+
                     boolean isGif = false;
-                    if (path != null && path.endsWith(".gif")) {
-                        final String finalPath = path;
-                        Utilities.RunOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                processSendingDocument(finalPath, null);
-                            }
-                        });
-                    } else {
-                        final TLRPC.TL_photo photo = MessagesController.getInstance().generatePhotoSizes(path, uri);
-                        String originalPath = path;
-                        if (originalPath == null && uri != null) {
+                    if (tempPath != null && tempPath.endsWith(".gif")) {
+                        isGif = true;
+                    } else if (tempPath == null && uri != null) {
+                        isGif = MediaController.isGif(uri);
+                        if (isGif) {
                             originalPath = uri.toString();
+                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
                         }
-                        final String originalPathFinal = originalPath;
-                        Utilities.RunOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (photo != null) {
-                                    MessagesController.getInstance().sendMessage(photo, originalPathFinal, dialog_id);
+                    }
+
+                    if (isGif) {
+                        if (sendAsDocuments == null) {
+                            sendAsDocuments = new ArrayList<String>();
+                            sendAsDocumentsOriginal = new ArrayList<String>();
+                        }
+                        sendAsDocuments.add(tempPath);
+                        sendAsDocumentsOriginal.add(originalPath);
+                    } else {
+                        TLRPC.TL_photo photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(originalPath, currentEncryptedChat == null ? 0 : 3);
+                        if (photo == null && uri != null) {
+                            photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(Utilities.getPath(uri), currentEncryptedChat == null ? 0 : 3);
+                        }
+                        if (photo == null) {
+                            photo = MessagesController.getInstance().generatePhotoSizes(path, uri);
+                        }
+                        if (photo != null) {
+                            final String originalPathFinal = originalPath;
+                            final TLRPC.TL_photo photoFinal = photo;
+                            Utilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    MessagesController.getInstance().sendMessage(photoFinal, originalPathFinal, dialog_id);
                                     if (chatListView != null) {
                                         chatListView.setSelection(messages.size() + 1);
                                     }
-                                    scrollToTopOnResume = true;
+                                    if (paused) {
+                                        scrollToTopOnResume = true;
+                                    }
                                 }
-                            }
-                        });
+                            });
+                        }
+                    }
+                }
+                if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
+                    for (int a = 0; a < sendAsDocuments.size(); a++) {
+                        processSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a));
                     }
                 }
             }
         }).start();
     }
 
-    public void processSendingDocument(String documentFilePath, String originalPathOverride) {
-        if (documentFilePath == null || documentFilePath.length() == 0) {
+    private void processSendingDocumentInternal(String path, String originalPath) {
+        if (path == null || path.length() == 0) {
             return;
         }
-        File f = new File(documentFilePath);
+        final File f = new File(path);
         if (!f.exists() || f.length() == 0) {
             return;
         }
+
         String name = f.getName();
         if (name == null) {
             name = "noname";
         }
         String ext = "";
-        int idx = documentFilePath.lastIndexOf(".");
+        int idx = path.lastIndexOf(".");
         if (idx != -1) {
-            ext = documentFilePath.substring(idx + 1);
+            ext = path.substring(idx + 1);
+        }
+        if (originalPath != null) {
+            originalPath += "" + f.length();
         }
-        TLRPC.TL_document document = new TLRPC.TL_document();
-        document.id = 0;
-        document.user_id = UserConfig.getClientUserId();
-        document.date = ConnectionsManager.getInstance().getCurrentTime();
-        document.file_name = name;
-        document.size = (int)f.length();
-        document.dc_id = 0;
-        document.path = documentFilePath;
-        if (ext.length() != 0) {
-            MimeTypeMap myMime = MimeTypeMap.getSingleton();
-            String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-            if (mimeType != null) {
-                document.mime_type = mimeType;
+
+        TLRPC.TL_document document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(originalPath, currentEncryptedChat == null ? 1 : 4);
+        if (document == null && !path.equals(originalPath)) {
+            document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(path + f.length(), currentEncryptedChat == null ? 1 : 4);
+        }
+        if (document == null) {
+            document = new TLRPC.TL_document();
+            document.id = 0;
+            document.user_id = UserConfig.getClientUserId();
+            document.date = ConnectionsManager.getInstance().getCurrentTime();
+            document.file_name = name;
+            document.size = (int)f.length();
+            document.dc_id = 0;
+            if (ext.length() != 0) {
+                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                if (mimeType != null) {
+                    document.mime_type = mimeType;
+                } else {
+                    document.mime_type = "application/octet-stream";
+                }
             } else {
                 document.mime_type = "application/octet-stream";
             }
-        } else {
-            document.mime_type = "application/octet-stream";
-        }
-        if (document.mime_type.equals("image/gif")) {
-            try {
-                Bitmap bitmap = FileLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
-                if (bitmap != null) {
-                    document.thumb = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 55, currentEncryptedChat != null);
-                    document.thumb.type = "s";
+            if (document.mime_type.equals("image/gif")) {
+                try {
+                    Bitmap bitmap = FileLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
+                    if (bitmap != null) {
+                        document.thumb = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 55, currentEncryptedChat != null);
+                        document.thumb.type = "s";
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
+            }
+            if (document.thumb == null) {
+                document.thumb = new TLRPC.TL_photoSizeEmpty();
+                document.thumb.type = "s";
             }
         }
-        if (document.thumb == null) {
-            document.thumb = new TLRPC.TL_photoSizeEmpty();
-            document.thumb.type = "s";
-        }
-        MessagesController.getInstance().sendMessage(document, originalPathOverride == null ? (documentFilePath + document.size) : originalPathOverride, dialog_id);
+        document.path = path;
+
+        final TLRPC.TL_document documentFinal = document;
+        final String originalPathFinal = originalPath;
+        Utilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                MessagesController.getInstance().sendMessage(documentFinal, originalPathFinal, dialog_id);
+                if (chatListView != null) {
+                    chatListView.setSelection(messages.size() + 1);
+                }
+                if (paused) {
+                    scrollToTopOnResume = true;
+                }
+            }
+        });
     }
 
-    public void processSendingVideo(final String videoPath) {
-        if (videoPath == null || videoPath.length() == 0) {
+    public void processSendingDocument(String path, String originalPath) {
+        if (path == null || originalPath == null) {
             return;
         }
-        Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
-        TLRPC.PhotoSize size = FileLoader.scaleAndSaveImage(thumb, 90, 90, 55, currentEncryptedChat != null);
-        if (size == null) {
+        ArrayList<String> paths = new ArrayList<String>();
+        ArrayList<String> originalPaths = new ArrayList<String>();
+        paths.add(path);
+        originalPaths.add(originalPath);
+        processSendingDocuments(paths, originalPaths);
+    }
+
+    public void processSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths) {
+        if (paths == null && originalPaths == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
             return;
         }
-        size.type = "s";
-        TLRPC.TL_video video = new TLRPC.TL_video();
-        video.thumb = size;
-        video.caption = "";
-        video.id = 0;
-        video.path = videoPath;
-        File temp = new File(videoPath);
-        if (temp != null && temp.exists()) {
-            video.size = (int)temp.length();
-        }
-        UserConfig.lastLocalId--;
-        UserConfig.saveConfig(false);
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                for (int a = 0; a < paths.size(); a++) {
+                    processSendingDocumentInternal(paths.get(a), originalPaths.get(a));
+                }
+            }
+        }).start();
+    }
 
-        MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
-        if (mp == null) {
+    public void processSendingVideo(final String videoPath) {
+        if (videoPath == null || videoPath.length() == 0) {
             return;
         }
-        video.duration = (int)Math.ceil(mp.getDuration() / 1000.0f);
-        video.w = mp.getVideoWidth();
-        video.h = mp.getVideoHeight();
-        mp.release();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                TLRPC.TL_video video = (TLRPC.TL_video)MessagesStorage.getInstance().getSentFile(videoPath, currentEncryptedChat == null ? 2 : 5);
+                if (video == null) {
+                    Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
+                    TLRPC.PhotoSize size = FileLoader.scaleAndSaveImage(thumb, 90, 90, 55, currentEncryptedChat != null);
+                    if (size == null) {
+                        return;
+                    }
+                    size.type = "s";
+                    video = new TLRPC.TL_video();
+                    video.thumb = size;
+                    video.caption = "";
+                    video.id = 0;
+                    File temp = new File(videoPath);
+                    if (temp != null && temp.exists()) {
+                        video.size = (int) temp.length();
+                    }
+                    UserConfig.lastLocalId--;
+                    UserConfig.saveConfig(false);
 
-        MediaStore.Video.Media media = new MediaStore.Video.Media();
-        MessagesController.getInstance().sendMessage(video, videoPath, dialog_id);
-        if (chatListView != null) {
-            chatListView.setSelection(messages.size() + 1);
-        }
-        scrollToTopOnResume = true;
+                    MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
+                    if (mp == null) {
+                        return;
+                    }
+                    video.duration = (int) Math.ceil(mp.getDuration() / 1000.0f);
+                    video.w = mp.getVideoWidth();
+                    video.h = mp.getVideoHeight();
+                    mp.release();
+                }
+                video.path = videoPath;
+
+                final TLRPC.TL_video videoFinal = video;
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        MessagesController.getInstance().sendMessage(videoFinal, videoPath, dialog_id);
+                        if (chatListView != null) {
+                            chatListView.setSelection(messages.size() + 1);
+                        }
+                        if (paused) {
+                            scrollToTopOnResume = true;
+                        }
+                    }
+                });
+            }
+        }).start();
     }
 
     private void removeUnreadPlane(boolean reload) {
@@ -2593,6 +2668,7 @@ private void updateContactStatus() {
             }
             if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
                     || currentUser.id / 1000 == 333
+                    || currentUser.id / 1000 == 777
                     || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
                     || (currentUser.phone != null && currentUser.phone.length() != 0 &&
                     ContactsController.getInstance().contactsDict.get(currentUser.id) != null &&
@@ -2670,6 +2746,9 @@ public void run() {
     }
 
     private void createEmojiPopup() {
+        if (getParentActivity() == null) {
+            return;
+        }
         emojiView = new EmojiView(getParentActivity());
         emojiView.setListener(new EmojiView.Listener() {
             public void onBackspace() {
@@ -2770,7 +2849,7 @@ public void onResume() {
             MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true);
         }
 
-        fixLayout();
+        fixLayout(true);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
         if (lastMessageText != null) {
@@ -2888,7 +2967,7 @@ private void updateInformationForScreenshotDetector() {
         MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
     }
 
-    private void fixLayout() {
+    private void fixLayout(final boolean resume) {
         final int lastPos = chatListView.getLastVisiblePosition();
         ViewTreeObserver obs = chatListView.getViewTreeObserver();
         obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
@@ -2901,7 +2980,7 @@ public boolean onPreDraw() {
                     return true;
                 }
                 int height = Utilities.dp(48);
-                if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                if (!Utilities.isTablet(getParentActivity()) && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                     height = Utilities.dp(40);
                     selectedMessagesCountTextView.setTextSize(16);
                 } else {
@@ -2913,7 +2992,7 @@ public boolean onPreDraw() {
                     params.height = height;
                     avatarImageView.setLayoutParams(params);
                 }
-                if (lastPos >= messages.size() - 1) {
+                if (!resume && lastPos >= messages.size() - 1) {
                     chatListView.post(new Runnable() {
                         @Override
                         public void run() {
@@ -2928,7 +3007,7 @@ public void run() {
 
     @Override
     public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        fixLayout();
+        fixLayout(false);
     }
 
     private View getRowParentView(View v) {
@@ -3292,7 +3371,7 @@ private void processSelectedOption(int option) {
     @Override
     public void didSelectFile(DocumentSelectActivity activity, String path) {
         activity.finishFragment();
-        processSendingDocument(path, null);
+        processSendingDocument(path, path);
     }
 
     @Override
@@ -3591,7 +3670,7 @@ public void sendButtonPressed(int index) { }
     @Override
     public int getSelectedCount() { return 0; }
 
-    private class ChatAdapter extends BaseAdapter {
+    private class ChatAdapter extends BaseFragmentAdapter {
 
         private Context mContext;
 
@@ -4014,14 +4093,17 @@ public void update() {
                             if (actionView != null) {
                                 actionView.setVisibility(View.VISIBLE);
                             }
-                            Float progress = FileLoader.getInstance().fileProgresses.get(message.messageOwner.attachPath);
+                            Float progress = null;
+                            if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                                progress = FileLoader.getInstance().fileProgresses.get(message.messageOwner.attachPath);
+                                progressByTag.put((Integer)actionProgress.getTag(), message.messageOwner.attachPath);
+                                progressBarMap.put(message.messageOwner.attachPath, actionProgress);
+                            }
                             if (progress != null) {
                                 actionProgress.setProgress((int)(progress * 100));
                             } else {
                                 actionProgress.setProgress(0);
                             }
-                            progressByTag.put((Integer)actionProgress.getTag(), message.messageOwner.attachPath);
-                            progressBarMap.put(message.messageOwner.attachPath, actionProgress);
                         }
                         if (actionAttachButton != null) {
                             actionAttachButton.setVisibility(View.GONE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index 0a1472e2e..5647e0d07 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -8,24 +8,17 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Typeface;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
 import android.os.Bundle;
-import android.provider.Settings;
 import android.text.Html;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -41,13 +34,13 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.ColorPickerView;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -71,9 +64,6 @@
     private int avatarRow;
     private int settingsSectionRow;
     private int settingsNotificationsRow;
-    private int settingsVibrateRow;
-    private int settingsLedRow;
-    private int settingsSoundRow;
     private int sharedMediaSectionRow;
     private int sharedMediaRow;
     private int membersSectionRow;
@@ -142,9 +132,6 @@ private void updateRowsIds() {
         avatarRow = rowCount++;
         settingsSectionRow = rowCount++;
         settingsNotificationsRow = rowCount++;
-        settingsVibrateRow = rowCount++;
-        settingsLedRow = rowCount++;
-        settingsSoundRow = rowCount++;
         sharedMediaSectionRow = rowCount++;
         sharedMediaRow = rowCount++;
         if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
@@ -239,36 +226,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == settingsSoundRow) {
-                        try {
-                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            Uri currentSound = null;
-
-                            String defaultPath = null;
-                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                            if (defaultUri != null) {
-                                defaultPath = defaultUri.getPath();
-                            }
-
-                            String path = preferences.getString("sound_chat_path_" + chat_id, defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                            getParentActivity().startActivityForResult(tmpIntent, 3);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (i == sharedMediaRow) {
+                    if (i == sharedMediaRow) {
                         Bundle args = new Bundle();
                         args.putLong("dialog_id", -chat_id);
                         presentFragment(new MediaActivity(args));
@@ -282,84 +240,10 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         Bundle args = new Bundle();
                         args.putInt("user_id", user_id);
                         presentFragment(new UserProfileActivity(args));
-                    } else if (i == settingsVibrateRow || i == settingsNotificationsRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Default", R.string.Default),
-                                LocaleController.getString("Enabled", R.string.Enabled),
-                                LocaleController.getString("Disabled", R.string.Disabled)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == settingsVibrateRow) {
-                                    editor.putInt("vibrate_" + (-chat_id), which);
-                                } else if (i == settingsNotificationsRow) {
-                                    editor.putInt("notify2_" + (-chat_id), which);
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    } else if (i == settingsLedRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-
-                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
-                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
-
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        if (preferences.contains("color_" + (-chat_id))) {
-                            colorPickerView.setOldCenterColor(preferences.getInt("color_" + (-chat_id), 0xff00ff00));
-                        } else {
-                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
-                        }
-
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
-                        builder.setView(view);
-                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.putInt("color_" + (-chat_id), colorPickerView.getColor());
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.putInt("color_" + (-chat_id), 0);
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.remove("color_" + (-chat_id));
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        showAlertDialog(builder);
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", -chat_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
                     }
                 }
             });
@@ -380,36 +264,6 @@ public void didSelectContact(TLRPC.User user) {
     @Override
     public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
         avatarUpdater.onActivityResult(requestCode, resultCode, data);
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == 3) {
-                Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                String name = null;
-                if (ringtone != null) {
-                    Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
-                    if (rng != null) {
-                        if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                            name = LocaleController.getString("Default", R.string.Default);
-                        } else {
-                            name = rng.getTitle(getParentActivity());
-                        }
-                        rng.stop();
-                    }
-                }
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-
-                if (name != null && ringtone != null) {
-                    editor.putString("sound_chat_" + chat_id, name);
-                    editor.putString("sound_chat_path_" + chat_id, ringtone.toString());
-                } else {
-                    editor.putString("sound_chat_" + chat_id, "NoSound");
-                    editor.putString("sound_chat_path_" + chat_id, "NoSound");
-                }
-                editor.commit();
-                listView.invalidateViews();
-            }
-        }
     }
 
     @Override
@@ -630,7 +484,7 @@ private void kickUser(TLRPC.TL_chatParticipant user) {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -644,7 +498,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == settingsNotificationsRow || i == settingsSoundRow || i == sharedMediaRow || i == addMemberRow || i > membersSectionRow && i < membersEndRow || i == settingsVibrateRow || i == settingsLedRow;
+            return i == settingsNotificationsRow || i == sharedMediaRow || i == addMemberRow || i > membersSectionRow && i < membersEndRow;
         }
 
         @Override
@@ -792,30 +646,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         detailTextView.setText(String.format("%d", totalMediaCount));
                     }
                     divider.setVisibility(View.INVISIBLE);
-                } else if (i == settingsVibrateRow) {
-                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    int value = preferences.getInt("vibrate_" + (-chat_id), 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
-                } else if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    int value = preferences.getInt("notify2_" + (-chat_id), 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
                 }
             } else if (type == 3) {
                 TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
@@ -828,12 +658,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
 
                 ((ChatOrUserCell)view).setData(user, null, null, null, null);
-
-//                if (info.admin_id != UserConfig.clientUserId && part.inviter_id != UserConfig.clientUserId && part.user_id != UserConfig.clientUserId) {
-//
-//                } else {
-//
-//                }
             } else if (type == 4) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
@@ -870,39 +694,14 @@ public void onClick(DialogInterface dialogInterface, int i) {
             } else if (type == 6) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsSoundRow) {
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String name = preferences.getString("sound_chat_" + chat_id, LocaleController.getString("Default", R.string.Default));
-                    if (name.equals("NoSound")) {
-                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        detailTextView.setText(name);
-                    }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
                     divider.setVisibility(View.INVISIBLE);
                 }
-            } else if (type == 7) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View colorView = view.findViewById(R.id.settings_color);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                if (preferences.contains("color_" + (-chat_id))) {
-                    colorView.setBackgroundColor(preferences.getInt("color_" + (-chat_id), 0xff00ff00));
-                } else {
-                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
-                }
-                divider.setVisibility(View.VISIBLE);
             }
             return view;
         }
@@ -913,25 +712,23 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == settingsSectionRow || i == sharedMediaSectionRow || i == membersSectionRow) {
                 return 1;
-            } else if (i == sharedMediaRow || i == settingsVibrateRow || i == settingsNotificationsRow) {
+            } else if (i == sharedMediaRow) {
                 return 2;
-            } else if (i == settingsSoundRow) {
-                return 6;
             } else if (i == addMemberRow) {
                 return 4;
             } else if (i == leaveGroupRow) {
                 return 5;
             } else if (i > membersSectionRow && i < membersEndRow) {
                 return 3;
-            } else if (i == settingsLedRow) {
-                return 7;
+            } else if (i == settingsNotificationsRow) {
+                return 6;
             }
             return 0;
         }
 
         @Override
         public int getViewTypeCount() {
-            return 8;
+            return 7;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 7a08fe967..86c3d7eb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -22,6 +22,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -321,7 +322,7 @@ public void run() {
         });
     }
 
-    private class SearchAdapter extends BaseAdapter {
+    private class SearchAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public SearchAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 5679af075..a869af45f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -20,7 +20,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -28,6 +27,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -387,7 +387,7 @@ private String getRootSubtitle(String path){
         return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, Utilities.formatFileSize(free), Utilities.formatFileSize(total));
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index b8fa101be..8c7d563a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -10,6 +10,7 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.database.DataSetObserver;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.support.v4.view.PagerAdapter;
@@ -283,5 +284,12 @@ public Parcelable saveState() {
         @Override
         public void startUpdate(View arg0) {
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 7d207af1b..559613897 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -16,7 +16,6 @@
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -25,6 +24,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -35,11 +35,11 @@
 import java.util.TimerTask;
 
 public class LanguageSelectActivity extends BaseFragment {
-    private BaseAdapter listAdapter;
+    private BaseFragmentAdapter listAdapter;
     private ListView listView;
     private boolean searchWas;
     private boolean searching;
-    private BaseAdapter searchListViewAdapter;
+    private BaseFragmentAdapter searchListViewAdapter;
     private TextView emptyTextView;
 
     private Timer searchTimer;
@@ -265,7 +265,7 @@ public void run() {
         });
     }
 
-    private class SearchAdapter extends BaseAdapter {
+    private class SearchAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public SearchAdapter(Context context) {
@@ -341,7 +341,7 @@ public boolean isEmpty() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 93802b824..23de06c11 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -30,7 +30,6 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
@@ -51,12 +50,11 @@
 public class LaunchActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
     private boolean finished = false;
     private NotificationView notificationView;
-    private Uri photoPath = null;
     private String videoPath = null;
     private String sendingText = null;
-    private String documentPath = null;
-    private ArrayList<Uri> imagesPathArray = null;
-    private ArrayList<String> documentsPathArray = null;
+    private ArrayList<Uri> photoPathsArray = null;
+    private ArrayList<String> documentsPathsArray = null;
+    private ArrayList<String> documentsOriginalPathsArray = null;
     private ArrayList<TLRPC.User> contactsToSend = null;
     private int currentConnectionState;
 
@@ -162,15 +160,14 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
         Integer push_enc_id = 0;
         Integer open_settings = 0;
 
-        photoPath = null;
+        photoPathsArray = null;
         videoPath = null;
         sendingText = null;
-        documentPath = null;
-        imagesPathArray = null;
-        documentsPathArray = null;
+        documentsPathsArray = null;
+        documentsOriginalPathsArray = null;
+        contactsToSend = null;
 
         if ((intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
-
             if (intent != null && intent.getAction() != null && !restore) {
                 if (Intent.ACTION_SEND.equals(intent.getAction())) {
                     boolean error = false;
@@ -273,19 +270,10 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                         Uri uri = (Uri) parcelable;
                         if (uri != null && type != null && type.startsWith("image/")) {
                             String tempPath = Utilities.getPath(uri);
-                            boolean isGif = false;
-                            if (tempPath != null && tempPath.endsWith(".gif")) {
-                                isGif = true;
-                                documentPath = tempPath;
-                            } else if (tempPath == null) {
-                                isGif = MediaController.isGif(uri);
-                                if (isGif) {
-                                    documentPath = MediaController.copyDocumentToCache(uri, "gif");
-                                }
-                            }
-                            if (!isGif || documentPath == null) {
-                                photoPath = uri;
+                            if (photoPathsArray == null) {
+                                photoPathsArray = new ArrayList<Uri>();
                             }
+                            photoPathsArray.add(uri);
                         } else {
                             path = Utilities.getPath(uri);
                             if (path != null) {
@@ -295,7 +283,12 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                 if (type != null && type.startsWith("video/")) {
                                     videoPath = path;
                                 } else {
-                                    documentPath = path;
+                                    if (documentsPathsArray == null) {
+                                        documentsPathsArray = new ArrayList<String>();
+                                        documentsOriginalPathsArray = new ArrayList<String>();
+                                    }
+                                    documentsPathsArray.add(path);
+                                    documentsOriginalPathsArray.add(uri.toString());
                                 }
                             } else {
                                 error = true;
@@ -317,32 +310,10 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                         parcelable = Uri.parse(parcelable.toString());
                                     }
                                     Uri uri = (Uri) parcelable;
-                                    String tempPath = Utilities.getPath(uri);
-
-                                    boolean isGif = false;
-                                    if (tempPath != null && tempPath.endsWith(".gif")) {
-                                        isGif = true;
-                                    } else if (tempPath == null) {
-                                        isGif = MediaController.isGif(uri);
-                                        if (isGif) {
-                                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
-                                        }
-                                    }
-                                    if (isGif && tempPath != null) {
-                                        if (documentsPathArray == null) {
-                                            documentsPathArray = new ArrayList<String>();
-                                        }
-                                        try {
-                                            documentsPathArray.add(tempPath);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                    } else {
-                                        if (imagesPathArray == null) {
-                                            imagesPathArray = new ArrayList<Uri>();
-                                        }
-                                        imagesPathArray.add(uri);
+                                    if (photoPathsArray == null) {
+                                        photoPathsArray = new ArrayList<Uri>();
                                     }
+                                    photoPathsArray.add(uri);
                                 }
                             } else {
                                 for (Parcelable parcelable : uris) {
@@ -350,14 +321,20 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                         parcelable = Uri.parse(parcelable.toString());
                                     }
                                     String path = Utilities.getPath((Uri) parcelable);
+                                    String originalPath = parcelable.toString();
+                                    if (originalPath == null) {
+                                        originalPath = path;
+                                    }
                                     if (path != null) {
                                         if (path.startsWith("file:")) {
                                             path = path.replace("file://", "");
                                         }
-                                        if (documentsPathArray == null) {
-                                            documentsPathArray = new ArrayList<String>();
+                                        if (documentsPathsArray == null) {
+                                            documentsPathsArray = new ArrayList<String>();
+                                            documentsOriginalPathsArray = new ArrayList<String>();
                                         }
-                                        documentsPathArray.add(path);
+                                        documentsPathsArray.add(path);
+                                        documentsOriginalPathsArray.add(originalPath);
                                     }
                                 }
                             }
@@ -442,7 +419,7 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                 pushOpened = true;
             }
         }
-        if (videoPath != null || photoPath != null || sendingText != null || documentPath != null || documentsPathArray != null || imagesPathArray != null || contactsToSend != null) {
+        if (videoPath != null || photoPathsArray != null || sendingText != null || documentsPathsArray != null || contactsToSend != null) {
             NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
@@ -488,37 +465,29 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
             }
             ChatActivity fragment = new ChatActivity(args);
             presentFragment(fragment, true);
-            if (photoPath != null) {
-                fragment.processSendingPhoto(null, photoPath);
-            }
             if (videoPath != null) {
                 fragment.processSendingVideo(videoPath);
             }
             if (sendingText != null) {
                 fragment.processSendingText(sendingText);
             }
-            if (documentPath != null) {
-                fragment.processSendingDocument(documentPath, null);
+            if (photoPathsArray != null) {
+                fragment.processSendingPhotos(null, photoPathsArray);
             }
-            if (imagesPathArray != null) {
-                fragment.processSendingPhotos(null, imagesPathArray);
-            }
-            if (documentsPathArray != null) {
-                for (String path : documentsPathArray) {
-                    fragment.processSendingDocument(path, null);
-                }
+            if (documentsPathsArray != null) {
+                fragment.processSendingDocuments(documentsPathsArray, documentsOriginalPathsArray);
             }
             if (contactsToSend != null && !contactsToSend.isEmpty()) {
                 for (TLRPC.User user : contactsToSend) {
                     MessagesController.getInstance().sendMessage(user, dialog_id);
                 }
             }
-            photoPath = null;
+
+            photoPathsArray = null;
             videoPath = null;
             sendingText = null;
-            documentPath = null;
-            imagesPathArray = null;
-            documentsPathArray = null;
+            documentsPathsArray = null;
+            documentsOriginalPathsArray = null;
             contactsToSend = null;
         }
     }
@@ -602,7 +571,7 @@ public void needLayout() {
             int rotation = manager.getDefaultDisplay().getRotation();
 
             int height = Utilities.dp(48);
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 height = Utilities.dp(40);
             }
             notificationView.applyOrientationPaddings(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90, height);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
index 221db4cc0..7515aa74d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
@@ -152,7 +152,6 @@ public void run() {
                             UserConfig.clearConfig();
                             MessagesStorage.getInstance().cleanUp();
                             MessagesController.getInstance().cleanUp();
-                            ConnectionsManager.getInstance().cleanUp();
                             UserConfig.setCurrentUser(user);
                             UserConfig.saveConfig(true);
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
index 79789af97..7c80b277b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
@@ -221,7 +221,6 @@ public void run() {
                             UserConfig.clearConfig();
                             MessagesStorage.getInstance().cleanUp();
                             MessagesController.getInstance().cleanUp();
-                            ConnectionsManager.getInstance().cleanUp();
                             UserConfig.setCurrentUser(res.user);
                             UserConfig.saveConfig(true);
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 6df22b7ac..087b7e60a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -20,7 +20,6 @@
 import android.view.WindowManager;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.GridView;
 import android.widget.TextView;
 
@@ -32,6 +31,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -347,7 +347,7 @@ public boolean onPreDraw() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 3350ba3dc..0913bfc83 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -17,7 +17,6 @@
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -33,6 +32,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
@@ -558,7 +558,7 @@ public void run() {
         }
     }
 
-    private class MessagesAdapter extends BaseAdapter {
+    private class MessagesAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public MessagesAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 98e9c0da1..6e17f0edc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -18,7 +18,6 @@
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.GridView;
 import android.widget.ImageView;
@@ -32,6 +31,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -441,7 +441,7 @@ private void updateSelectedPhoto(View view, MediaController.PhotoEntry photoEntr
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 44c2633d9..a4168a8c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -42,6 +42,7 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
+import android.widget.Scroller;
 import android.widget.TextView;
 
 import org.telegram.messenger.ConnectionsManager;
@@ -160,6 +161,7 @@
     private boolean zoomAnimation = false;
     private int switchImageAfterAnimation = 0;
     private VelocityTracker velocityTracker = null;
+    private Scroller scroller = null;
 
     private ArrayList<MessageObject> imagesArrTemp = new ArrayList<MessageObject>();
     private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<Integer, MessageObject>();
@@ -432,6 +434,8 @@ public void didReceivedNotification(int id, Object... args) {
     public void setParentActivity(Activity activity) {
         parentActivity = activity;
 
+        scroller = new Scroller(activity);
+
         windowView = new FrameLayoutTouchListener(activity);
         windowView.setBackgroundDrawable(backgroundDrawable);
         windowView.setFocusable(false);
@@ -1624,7 +1628,7 @@ private void onPhotoClosed(PlaceProviderObject object) {
         currentPathObject = null;
         currentThumb = null;
         centerImage.setImageBitmap((Bitmap)null);
-        leftImage.setImageBitmap((Bitmap) null);
+        leftImage.setImageBitmap((Bitmap)null);
         rightImage.setImageBitmap((Bitmap)null);
         if (android.os.Build.VERSION.SDK_INT >= 11 && object != null) {
             object.imageReceiver.setVisible(true, true);
@@ -1688,6 +1692,9 @@ private boolean onTouchEvent(MotionEvent ev) {
         }
 
         if (ev.getActionMasked() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
             if (!draggingDown && !changingPage) {
                 if (canZoom && ev.getPointerCount() == 2) {
                     pinchStartDistance = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0));
@@ -1723,7 +1730,9 @@ private boolean onTouchEvent(MotionEvent ev) {
                 if (velocityTracker != null) {
                     velocityTracker.addMovement(ev);
                 }
-                if (canDragDown && !draggingDown && scale == 1 && Math.abs(ev.getY() - dragY) >= Utilities.dp(30)) {
+                float dx = Math.abs(ev.getX() - moveStartX);
+                float dy = Math.abs(ev.getY() - dragY);
+                if (canDragDown && !draggingDown && scale == 1 && dy >= Utilities.dp(30) && dy / 2 > dx) {
                     draggingDown = true;
                     moving = false;
                     dragY = ev.getY();
@@ -1754,8 +1763,18 @@ private boolean onTouchEvent(MotionEvent ev) {
                         if (translationX < minX && !rightImage.hasImage() || translationX > maxX && !leftImage.hasImage()) {
                             moveDx /= 3.0f;
                         }
-                        if (translationY < minY || translationY > maxY) {
-                            moveDy /= 3.0f;
+                        if (maxY == 0 && minY == 0) {
+                            if (translationY - moveDy < minY) {
+                                translationY = minY;
+                                moveDy = 0;
+                            } else if (translationY - moveDy > maxY) {
+                                translationY = maxY;
+                                moveDy = 0;
+                            }
+                        } else {
+                            if (translationY < minY || translationY > maxY) {
+                                moveDy /= 3.0f;
+                            }
                         }
 
                         translationX -= moveDx;
@@ -1920,6 +1939,10 @@ private void onDraw(Canvas canvas) {
         }
 
         if (ai != -1) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+
             float ts = scale + (animateToScale - scale) * ai;
             float tx = translationX + (animateToX - translationX) * ai;
             float ty = translationY + (animateToY - translationY) * ai;
@@ -1942,6 +1965,17 @@ private void onDraw(Canvas canvas) {
                 Utilities.unlockOrientation(parentActivity);
                 zoomAnimation = false;
             }
+            if (!scroller.isFinished()) {
+                if (scroller.computeScrollOffset()) {
+                    if (scroller.getStartX() < maxX && scroller.getStartX() > minX) {
+                        translationX = scroller.getCurrX();
+                    }
+                    if (scroller.getStartY() < maxY && scroller.getStartY() > minY) {
+                        translationY = scroller.getCurrY();
+                    }
+                    containerView.invalidate();
+                }
+            }
             if (switchImageAfterAnimation != 0) {
                 if (switchImageAfterAnimation == 1) {
                     setImageIndex(currentIndex + 1, false);
@@ -2117,6 +2151,11 @@ public void onLongPress(MotionEvent e) {
 
     @Override
     public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        if (scale != 1) {
+            scroller.abortAnimation();
+            scroller.fling(Math.round(translationX), Math.round(translationY), Math.round(velocityX), Math.round(velocityY), (int) minX, (int) maxX, (int) minY, (int) maxY);
+            containerView.postInvalidate();
+        }
         return false;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
new file mode 100644
index 000000000..7acc1fbb3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -0,0 +1,392 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.ColorPickerView;
+
+public class ProfileNotificationsActivity extends BaseFragment {
+
+    private ListView listView;
+    private long dialog_id;
+
+    private int settingsNotificationsRow;
+    private int settingsVibrateRow;
+    private int settingsSoundRow;
+    private int settingsLedRow;
+    private int rowCount = 0;
+
+    public ProfileNotificationsActivity(Bundle args) {
+        super(args);
+        dialog_id = args.getLong("dialog_id");
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        settingsNotificationsRow = rowCount++;
+        settingsVibrateRow = rowCount++;
+        settingsLedRow = rowCount++;
+        settingsSoundRow = rowCount++;
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+
+            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == settingsVibrateRow || i == settingsNotificationsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("Enabled", R.string.Enabled),
+                                LocaleController.getString("Disabled", R.string.Disabled)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == settingsVibrateRow) {
+                                    editor.putInt("vibrate_" + dialog_id, which);
+                                } else if (i == settingsNotificationsRow) {
+                                    editor.putInt("notify2_" + dialog_id, which);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == settingsSoundRow) {
+                        try {
+                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            Uri currentSound = null;
+
+                            String defaultPath = null;
+                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
+                            if (defaultUri != null) {
+                                defaultPath = defaultUri.getPath();
+                            }
+
+                            String path = preferences.getString("sound_path_" + dialog_id, defaultPath);
+                            if (path != null && !path.equals("NoSound")) {
+                                if (path.equals(defaultPath)) {
+                                    currentSound = defaultUri;
+                                } else {
+                                    currentSound = Uri.parse(path);
+                                }
+                            }
+
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
+                            getParentActivity().startActivityForResult(tmpIntent, 12);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == settingsLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (preferences.contains("color_" + dialog_id)) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                        } else {
+                            if ((int)dialog_id < 0) {
+                                colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                            } else {
+                                colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                            }
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, colorPickerView.getColor());
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, 0);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.remove("color_" + dialog_id);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (data == null) {
+                return;
+            }
+            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            String name = null;
+            if (ringtone != null) {
+                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
+                if (rng != null) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                        name = LocaleController.getString("Default", R.string.Default);
+                    } else {
+                        name = rng.getTitle(getParentActivity());
+                    }
+                    rng.stop();
+                }
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+
+            if (requestCode == 12) {
+                if (name != null && ringtone != null) {
+                    editor.putString("sound_" + dialog_id, name);
+                    editor.putString("sound_path_" + dialog_id, ringtone.toString());
+                } else {
+                    editor.putString("sound_" + dialog_id, "NoSound");
+                    editor.putString("sound_path_" + dialog_id, "NoSound");
+                }
+            }
+            editor.commit();
+            listView.invalidateViews();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsVibrateRow) {
+                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("vibrate_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    }
+                } else if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("notify2_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    }
+                }
+            } if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsSoundRow) {
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    String name = preferences.getString("sound_" + dialog_id, LocaleController.getString("Default", R.string.Default));
+                    if (name.equals("NoSound")) {
+                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        detailTextView.setText(name);
+                    }
+                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+
+                if (preferences.contains("color_" + dialog_id)) {
+                    colorView.setBackgroundColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                } else {
+                    if ((int)dialog_id < 0) {
+                        colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                    } else {
+                        colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                    }
+                }
+                divider.setVisibility(View.VISIBLE);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == settingsNotificationsRow || i == settingsVibrateRow) {
+                return 0;
+            } else if (i == settingsSoundRow) {
+                return 1;
+            } else if (i == settingsLedRow) {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 587fb768d..3e74a4021 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -28,7 +28,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.ListView;
@@ -53,6 +52,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
@@ -247,7 +247,26 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
-                        builder.setItems(new CharSequence[]{String.format("%d", 12), String.format("%d", 13), String.format("%d", 14), String.format("%d", 15), String.format("%d", 16), String.format("%d", 17), String.format("%d", 18), String.format("%d", 19), String.format("%d", 20), String.format("%d", 21), String.format("%d", 22), String.format("%d", 23), String.format("%d", 24)}, new DialogInterface.OnClickListener() {
+                        builder.setItems(new CharSequence[] {
+                                String.format("%d", 12),
+                                String.format("%d", 13),
+                                String.format("%d", 14),
+                                String.format("%d", 15),
+                                String.format("%d", 16),
+                                String.format("%d", 17),
+                                String.format("%d", 18),
+                                String.format("%d", 19),
+                                String.format("%d", 20),
+                                String.format("%d", 21),
+                                String.format("%d", 22),
+                                String.format("%d", 23),
+                                String.format("%d", 24),
+                                String.format("%d", 25),
+                                String.format("%d", 26),
+                                String.format("%d", 27),
+                                String.format("%d", 28),
+                                String.format("%d", 29),
+                                String.format("%d", 30)}, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int which) {
                                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -647,7 +666,7 @@ public void onResume() {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
index 3b250a4bb..0029f53c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
@@ -16,7 +16,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -30,6 +29,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
@@ -276,7 +276,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }, null, true, RPCRequest.RPCRequestClassGeneric);
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index ae5150432..c313a3d06 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -22,7 +22,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -37,6 +36,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.ColorPickerView;
@@ -396,7 +396,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
index c68f428ea..088354b21 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
@@ -24,7 +24,6 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
@@ -42,6 +41,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.PhotoObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 import org.telegram.ui.Views.HorizontalListView;
@@ -111,7 +111,14 @@ public void onClick(View view) {
                     boolean done;
                     TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
                     if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
-                        TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, Utilities.dp(320), Utilities.dp(480));
+                        int width = Utilities.displaySize.x;
+                        int height = Utilities.displaySize.y;
+                        if (width > height) {
+                            int temp = width;
+                            width = height;
+                            height = temp;
+                        }
+                        TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
                         String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
                         File f = new File(Utilities.getCacheDir(), fileName);
                         File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
@@ -254,7 +261,14 @@ public void restoreSelfArgs(Bundle args) {
     private void processSelectedBackground() {
         TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
         if (selectedBackground != -1 && selectedBackground != 1000001 && wallPaper != null && wallPaper instanceof TLRPC.TL_wallPaper) {
-            TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, Utilities.dp(320), Utilities.dp(480));
+            int width = Utilities.displaySize.x;
+            int height = Utilities.displaySize.y;
+            if (width > height) {
+                int temp = width;
+                width = height;
+                height = temp;
+            }
+            TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
             String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
             File f = new File(Utilities.getCacheDir(), fileName);
             if (!f.exists()) {
@@ -435,7 +449,7 @@ public void onResume() {
         fixLayout();
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index 59b31b1c9..f2fe59641 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -8,23 +8,17 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Typeface;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.Bundle;
-import android.provider.Settings;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.ImageButton;
 import android.widget.ListView;
 import android.widget.TextView;
@@ -43,12 +37,12 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.ColorPickerView;
 import org.telegram.ui.Views.IdenticonView;
 
 import java.util.ArrayList;
@@ -76,11 +70,8 @@
     private int settingsTimerRow;
     private int settingsKeyRow;
     private int settingsNotificationsRow;
-    private int settingsVibrateRow;
-    private int settingsSoundRow;
     private int sharedMediaSectionRow;
     private int sharedMediaRow;
-    private int settingsLedRow;
     private int rowCount = 0;
 
     public UserProfileActivity(Bundle args) {
@@ -127,9 +118,6 @@ private void updateRowsIds() {
             settingsKeyRow = -1;
         }
         settingsNotificationsRow = rowCount++;
-        settingsVibrateRow = rowCount++;
-        settingsLedRow = rowCount++;
-        settingsSoundRow = rowCount++;
         sharedMediaSectionRow = rowCount++;
         sharedMediaRow = rowCount++;
     }
@@ -254,72 +242,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == settingsVibrateRow || i == settingsNotificationsRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Default", R.string.Default),
-                                LocaleController.getString("Enabled", R.string.Enabled),
-                                LocaleController.getString("Disabled", R.string.Disabled)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == settingsVibrateRow) {
-                                    if (dialog_id == 0) {
-                                        editor.putInt("vibrate_" + user_id, which);
-                                    } else {
-                                        editor.putInt("vibrate_" + dialog_id, which);
-                                    }
-                                } else if (i == settingsNotificationsRow) {
-                                    if (dialog_id == 0) {
-                                        editor.putInt("notify2_" + user_id, which);
-                                    } else {
-                                        editor.putInt("notify2_" + dialog_id, which);
-                                    }
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    } else if (i == settingsSoundRow) {
-                        try {
-                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            Uri currentSound = null;
-
-                            String defaultPath = null;
-                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                            if (defaultUri != null) {
-                                defaultPath = defaultUri.getPath();
-                            }
-
-                            String path = preferences.getString("sound_path_" + user_id, defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                            getParentActivity().startActivityForResult(tmpIntent, 12);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (i == sharedMediaRow) {
+                    if (i == sharedMediaRow) {
                         Bundle args = new Bundle();
                         if (dialog_id != 0) {
                             args.putLong("dialog_id", dialog_id);
@@ -376,57 +299,10 @@ public void onClick(DialogInterface dialog, int which) {
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
-                    } else if (i == settingsLedRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-
-                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
-                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
-
-                        final String key = dialog_id == 0 ? "color_" + user_id : "color_" + dialog_id;
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        if (preferences.contains(key)) {
-                            colorPickerView.setOldCenterColor(preferences.getInt(key, 0xff00ff00));
-                        } else {
-                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                        }
-
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
-                        builder.setView(view);
-                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.putInt(key, colorPickerView.getColor());
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.putInt(key, 0);
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.remove(key);
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        showAlertDialog(builder);
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
                     }
                 }
             });
@@ -444,43 +320,6 @@ public void onClick(DialogInterface dialog, int which) {
         return fragmentView;
     }
 
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (data == null) {
-                return;
-            }
-            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-            String name = null;
-            if (ringtone != null) {
-                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
-                if (rng != null) {
-                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                        name = LocaleController.getString("Default", R.string.Default);
-                    } else {
-                        name = rng.getTitle(getParentActivity());
-                    }
-                    rng.stop();
-                }
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-
-            if (requestCode == 12) {
-                if (name != null && ringtone != null) {
-                    editor.putString("sound_" + user_id, name);
-                    editor.putString("sound_path_" + user_id, ringtone.toString());
-                } else {
-                    editor.putString("sound_" + user_id, "NoSound");
-                    editor.putString("sound_path_" + user_id, "NoSound");
-                }
-            }
-            editor.commit();
-            listView.invalidateViews();
-        }
-    }
-
     public void didReceivedNotification(int id, Object... args) {
         if (id == MessagesController.updateInterfaces) {
             int mask = (Integer)args[0];
@@ -629,7 +468,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
         }
     }
 
-    private class ListAdapter extends BaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
@@ -643,7 +482,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow || i == settingsSoundRow || i == settingsVibrateRow || i == settingsLedRow;
+            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow;
         }
 
         @Override
@@ -829,44 +668,6 @@ public void onClick(View view) {
                     } else {
                         detailTextView.setText(String.format("%d", encryptedChat.ttl));
                     }
-                } else if (i == settingsVibrateRow) {
-                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                    String key;
-                    if (dialog_id == 0) {
-                        key = "vibrate_" + user_id;
-                    } else {
-                        key = "vibrate_" + dialog_id;
-                    }
-
-                    int value = preferences.getInt(key, 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
-                } else if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String key;
-                    if (dialog_id == 0) {
-                        key = "notify2_" + user_id;
-                    } else {
-                        key = "notify2_" + dialog_id;
-                    }
-                    int value = preferences.getInt(key, 0);
-                    if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
-                    } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                    }
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -883,41 +684,14 @@ public void onClick(View view) {
             } else if (type == 5) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
                 View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsSoundRow) {
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String name = preferences.getString("sound_" + user_id, LocaleController.getString("Default", R.string.Default));
-                    if (name.equals("NoSound")) {
-                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        detailTextView.setText(name);
-                    }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
                     divider.setVisibility(View.INVISIBLE);
                 }
-            } else if (type == 6) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View colorView = view.findViewById(R.id.settings_color);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                String key = dialog_id == 0 ? "color_" + user_id : "color_" + dialog_id;
-                if (preferences.contains(key)) {
-                    colorView.setBackgroundColor(preferences.getInt(key, 0xff00ff00));
-                } else {
-                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                }
-                divider.setVisibility(View.VISIBLE);
             }
             return view;
         }
@@ -930,21 +704,19 @@ public int getItemViewType(int i) {
                 return 1;
             } else if (i == phoneRow) {
                 return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == settingsVibrateRow) {
+            } else if (i == sharedMediaRow || i == settingsTimerRow) {
                 return 3;
             } else if (i == settingsKeyRow) {
                 return 4;
-            } else if (i == settingsSoundRow) {
+            } else if (i == settingsNotificationsRow) {
                 return 5;
-            } else if (i == settingsLedRow) {
-                return 6;
             }
             return 0;
         }
 
         @Override
         public int getViewTypeCount() {
-            return 7;
+            return 6;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
index a2309d722..76ae5d374 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
@@ -170,7 +170,7 @@ public void setupAnimations(ArrayList<Animator> animators, boolean back) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Utilities.dp(40), MeasureSpec.EXACTLY));
         } else {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Utilities.dp(48), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
index 1daa7005c..3cdcd8ddb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
@@ -64,6 +64,7 @@ protected void onAnimationEnd() {
     private boolean maybeStartTracking = false;
     protected boolean startedTracking = false;
     private int startedTrackingX;
+    private int startedTrackingY;
     protected boolean animationInProgress = false;
     private VelocityTracker velocityTracker = null;
     private boolean beginTrackingSent = false;
@@ -272,6 +273,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                 startedTrackingPointerId = ev.getPointerId(0);
                 maybeStartTracking = true;
                 startedTrackingX = (int) ev.getX();
+                startedTrackingY = (int) ev.getY();
                 if (velocityTracker != null) {
                     velocityTracker.clear();
                 }
@@ -280,8 +282,9 @@ public boolean onTouchEvent(MotionEvent ev) {
                     velocityTracker = VelocityTracker.obtain();
                 }
                 int dx = Math.max(0, (int) (ev.getX() - startedTrackingX));
+                int dy = Math.abs((int)ev.getY() - startedTrackingY);
                 velocityTracker.addMovement(ev);
-                if (maybeStartTracking && !startedTracking && dx >= Utilities.dp(10)) {
+                if (maybeStartTracking && !startedTracking && dx >= Utilities.dp(10) && Math.abs(dx) / 3 > dy) {
                     prepareForMoving(ev);
                 } else if (startedTracking) {
                     if (!beginTrackingSent) {
@@ -435,7 +438,7 @@ public void needLayout() {
 
         int height = 0;
         if (actionBar.getVisibility() == View.VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 height = Utilities.dp(40);
             } else {
                 height = Utilities.dp(48);
@@ -660,7 +663,6 @@ public void hideActionBar() {
     public boolean onKeyUp(int keyCode, KeyEvent event) {
         if (keyCode == KeyEvent.KEYCODE_MENU && !checkTransitionAnimation() && !startedTracking) {
             actionBar.onMenuButtonPressed();
-            return true;
         }
         return super.onKeyUp(keyCode, event);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
index 3d74422cd..5e8567a18 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
@@ -107,7 +107,7 @@ private void positionBackImage(int height) {
     private void positionLogoImage(int height) {
         if (logoImageView != null) {
             LayoutParams layoutParams = (LayoutParams) logoImageView.getLayoutParams();
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 layoutParams.width = (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
                 layoutParams.height = (int)(logoImageView.getDrawable().getIntrinsicHeight() / 1.3f);
                 layoutParams.setMargins(Utilities.dp(12), (height - layoutParams.height) / 2, 0, 0);
@@ -123,7 +123,7 @@ private void positionLogoImage(int height) {
 
     private void positionTitle(int width, int height) {
         int offset = Utilities.dp(2);
-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             offset = Utilities.dp(1);
         }
         int maxTextWidth = 0;
@@ -131,7 +131,7 @@ private void positionTitle(int width, int height) {
         LayoutParams layoutParams = null;
 
         if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 titleTextView.setTextSize(16);
             } else {
                 titleTextView.setTextSize(18);
@@ -146,7 +146,7 @@ private void positionTitle(int width, int height) {
             maxTextWidth = titleTextView.getMeasuredWidth();
         }
         if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 subTitleTextView.setTextSize(12);
             } else {
                 subTitleTextView.setTextSize(14);
@@ -165,7 +165,7 @@ private void positionTitle(int width, int height) {
         if (logoImageView == null || logoImageView.getVisibility() == GONE) {
             x = Utilities.dp(16);
         } else {
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 x = Utilities.dp(22) + (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
             } else {
                 x = Utilities.dp(22) + logoImageView.getDrawable().getIntrinsicWidth();
@@ -243,6 +243,7 @@ public void setSubtitle(CharSequence value) {
         if (value != null && subTitleTextView == null) {
             subTitleTextView = new TextView(getContext());
             backButtonFrameLayout.addView(subTitleTextView);
+            subTitleTextView.setGravity(Gravity.LEFT);
             subTitleTextView.setTextColor(0xffd7e8f7);
             subTitleTextView.setSingleLine(true);
             subTitleTextView.setLines(1);
@@ -260,6 +261,7 @@ public void setSubTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && subTitleTextView == null) {
             subTitleTextView = new TextView(getContext());
             backButtonFrameLayout.addView(subTitleTextView);
+            subTitleTextView.setGravity(Gravity.LEFT);
             subTitleTextView.setTextColor(0xffd7e8f7);
             subTitleTextView.setSingleLine(true);
             subTitleTextView.setLines(1);
@@ -276,7 +278,10 @@ public void setSubTitleIcon(int resourceId, int padding) {
     public void setTitle(CharSequence value) {
         if (value != null && titleTextView == null) {
             titleTextView = new TextView(getContext());
+            titleTextView.setGravity(Gravity.LEFT);
             titleTextView.setSingleLine(true);
+            titleTextView.setLines(1);
+            titleTextView.setMaxLines(1);
             titleTextView.setEllipsize(TextUtils.TruncateAt.END);
             backButtonFrameLayout.addView(titleTextView);
             titleTextView.setTextColor(0xffffffff);
@@ -291,6 +296,7 @@ public void setTitle(CharSequence value) {
     public void setTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && titleTextView == null) {
             titleTextView = new TextView(getContext());
+            titleTextView.setGravity(Gravity.LEFT);
             backButtonFrameLayout.addView(titleTextView);
             titleTextView.setTextColor(0xffffffff);
             titleTextView.setSingleLine(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
index 50e3850cd..7386dea6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
@@ -38,7 +38,7 @@
     private static final String STATE_OLD_COLOR = "color";
     private static final String STATE_SHOW_OLD_COLOR = "showColor";
 
-    private static final int[] COLORS = new int[] { 0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFF00, 0xFFFF0000 };
+    private static final int[] COLORS = new int[] { 0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFFFF, 0xFFFFFF00, 0xFFFF0000 };
 
     private Paint mColorWheelPaint;
     private Paint mPointerHaloPaint;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
index f1cd9a09b..cb162010c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
@@ -9,6 +9,7 @@
 package org.telegram.ui.Views;
 
 import android.content.Context;
+import android.database.DataSetObserver;
 import android.graphics.drawable.GradientDrawable;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
@@ -247,6 +248,13 @@ public void onClick(View view) {
             localObject.setTag(this.data[paramInt]);
             return localObject;
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 
     private class EmojiPagesAdapter extends PagerAdapter implements PagerSlidingTabStrip.IconTabProvider {
@@ -286,6 +294,13 @@ public Object instantiateItem(ViewGroup paramViewGroup, int paramInt) {
         public boolean isViewFromObject(View paramView, Object paramObject) {
             return paramView == paramObject;
         }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
     }
 
     public static abstract interface Listener {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
index b6ca4be63..d9cad0479 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/HorizontalListView.java
@@ -113,7 +113,7 @@ public void setSelection(int position) {
 
     @Override
     public void setAdapter(ListAdapter adapter) {
-        if(mAdapter != null) {
+        if(mAdapter != null && mDataObserver != null) {
             mAdapter.unregisterDataSetObserver(mDataObserver);
         }
         mAdapter = adapter;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
index 5cfa5f3e0..1c9f97d68 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Views;
 
+import android.database.DataSetObserver;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
@@ -222,4 +223,11 @@ private int internalGetSectionCount() {
         mSectionCount = getSectionCount();
         return mSectionCount;
     }
+
+    @Override
+    public void unregisterDataSetObserver(DataSetObserver observer) {
+        if (observer != null) {
+            super.unregisterDataSetObserver(observer);
+        }
+    }
 }
