diff --git a/TMessagesProj/src/main/java/io/bettergram/Constants.java b/TMessagesProj/src/main/java/io/bettergram/Constants.java
deleted file mode 100644
index f06c6c0c0..000000000
--- a/TMessagesProj/src/main/java/io/bettergram/Constants.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package io.bettergram;
-
-public class Constants {
-    public static final String[] AUTOSUB_GROUPS = new String[]{"https://t.me/bettergramapp", "https://t.me/livecoinwatchofficial", "https://t.me/bgsecuritytokens", "https://t.me/bettergramchannel", "https://t.me/join_changelly"};
-}
diff --git a/TMessagesProj/src/main/java/io/bettergram/Global.java b/TMessagesProj/src/main/java/io/bettergram/Global.java
new file mode 100644
index 000000000..71d64fa11
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/Global.java
@@ -0,0 +1,22 @@
+package io.bettergram;
+
+public class Global {
+    public static final String[] AUTOSUB_GROUPS = new String[]{"https://t.me/bettergramapp", "https://t.me/livecoinwatchofficial", "https://t.me/bgsecuritytokens", "https://t.me/bettergramchannel", "https://t.me/join_changelly"};
+
+    private static Global instance = null;
+    public int userId;
+
+    private Global() {
+    }
+
+    public static Global getInstance() {
+        if (instance == null) {
+            instance = new Global();
+        }
+        return instance;
+    }
+
+    public void setUserId(int userId) {
+        this.userId = userId;
+    }
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/StoredDialog.java b/TMessagesProj/src/main/java/io/bettergram/data/StoredDialog.java
new file mode 100644
index 000000000..00b13d6ae
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/data/StoredDialog.java
@@ -0,0 +1,14 @@
+package io.bettergram.data;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+@JsonType
+public class StoredDialog {
+    @JsonField(fieldName = "did")
+    public long did;
+    @JsonField(fieldName = "pinned_num")
+    public int pinned_num;
+    @JsonField(fieldName = "favorited_date")
+    public int favorited_date;
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/StoredDialogList.java b/TMessagesProj/src/main/java/io/bettergram/data/StoredDialogList.java
new file mode 100644
index 000000000..040228fcc
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/data/StoredDialogList.java
@@ -0,0 +1,12 @@
+package io.bettergram.data;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+import java.util.List;
+
+@JsonType
+public class StoredDialogList {
+    @JsonField(fieldName = "dialogs")
+    public List<StoredDialog> dialogs;
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
index f7670ab75..af9034ef7 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MessagesController.java
@@ -18,6 +18,7 @@
 import android.os.SystemClock;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.LongSparseArray;
 import android.util.Pair;
 import android.util.SparseArray;
@@ -29,6 +30,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.ListIterator;
 import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
@@ -4293,11 +4295,15 @@ public void processLoadedDialogs(final TLRPC.messages_Dialogs dialogsRes, final
                     reloadDialogsReadValue(dialogsToReload, 0);
                 }
                 loadUnreadDialogs();
-//                loadLocalPinnedDialogs();
-//                if (!loadedFavoriteDialogs) {
-//                    loadLocalFavoriteDialogs();
-//                    loadedFavoriteDialogs = true;
-//                }
+
+                if (MigrationController.getInstance().isFirstRun()) {
+                    loadLocalPinnedDialogs();
+                    if (!loadedFavoriteDialogs) {
+                        loadLocalFavoriteDialogs();
+                        loadedFavoriteDialogs = true;
+                    }
+                    MigrationController.getInstance().toggleFirstRun();
+                }
             });
         });
     }
@@ -6562,7 +6568,7 @@ public void favoriteDialog(final long did) {
                     dialogs.get(i).favorite_date = dialogs_dict.get(did).favorite_date;
                 }
             }
-            //MigrationController.getInstance(currentAccount).storeFavoriteDialog(did, fave_date);
+            MigrationController.getInstance().storeFavoriteDialog(did, fave_date);
             loadedFavoriteDialogs = true;
             loadDialogs(0, 100, true);
             NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload);
@@ -6705,7 +6711,7 @@ public boolean pinDialog(long did, boolean pin, TLRPC.InputPeer peer, long taskI
             }
         }
         MessagesStorage.getInstance(currentAccount).setDialogPinned(did, dialog.pinnedNum);
-        //MigrationController.getInstance(currentAccount).storePinnedDialog(dialog);
+        MigrationController.getInstance().storePinnedDialog(dialog);
         NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload);
         return true;
     }
@@ -6717,6 +6723,7 @@ public void pinDialogInternal(ArrayList<Pair<Long, Integer>> dialogPairs) {
             for (int j = 0, size_j = dialogs.size(); j < size_j; j++) {
                 if (dialogs.get(j).id == d.first) {
                     dialogs.get(j).pinnedNum = d.second;
+                    MigrationController.getInstance().storePinnedDialog(dialogs.get(j));
                     break;
                 }
             }
@@ -6724,50 +6731,50 @@ public void pinDialogInternal(ArrayList<Pair<Long, Integer>> dialogPairs) {
         sortDialogs(null);
     }
 
-//    public void loadLocalPinnedDialogs() {
-//        MigrationController.getInstance(currentAccount).migratePinnedDialogs(dialogs);
-//        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
-//            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
-//            dialogs_dict.valueAt(i).pinnedNum = MigrationController.getInstance(currentAccount).restorePinnedNum(dialog);
-//        }
-//        for (int a = 0, size_a = dialogs_dict.size(); a < size_a; a++) {
-//            for (int b = 0, size_b = dialogs.size(); b < size_b; b++) {
-//                if (dialogs_dict.valueAt(a).id == dialogs.get(b).id) {
-//                    dialogs.get(b).pinnedNum = dialogs_dict.valueAt(a).pinnedNum;
-//                }
-//            }
-//        }
-//        for (int i = 0, size = dialogs.size(); i < size; i++) {
-//            TLRPC.TL_dialog dialog = dialogs.get(i);
-//            pinDialog(dialog.id, dialog.pinnedNum > 0, null, 0);
-//        }
-//        sortDialogs(null);
-//    }
-//
-//    public void loadLocalFavoriteDialogs() {
-//        MigrationController.getInstance(currentAccount).migrateFavoritedDialogs(dialogs);
-//        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
-//            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
-//            dialogs_dict.valueAt(i).favorite_date = MigrationController.getInstance(currentAccount).restoreFavoriteDate(dialog);
-//        }
-//        for (int a = 0, size = dialogs_dict.size(); a < size; a++) {
-//            TLRPC.TL_dialog d1 = dialogs_dict.valueAt(a);
-//            ListIterator<TLRPC.TL_dialog> iterator = dialogs.listIterator();
-//            while (iterator.hasNext()) {
-//                TLRPC.TL_dialog d2 = iterator.next();
-//                if (d2.id == d1.id) {
-//                    iterator.set(d1);
-//                }
-//            }
-//        }
-//        for (int i = 0, size = dialogs.size(); i < size; i++) {
-//            TLRPC.TL_dialog dialog = dialogs.get(i);
-//            if (dialog.favorite_date > 0) {
-//                updateDialogFavorite(dialog.id, dialog.favorite_date);
-//            }
-//        }
-//        sortDialogs(null);
-//    }
+    public void loadLocalPinnedDialogs() {
+        MigrationController.getInstance().migratePinnedDialogs(dialogs);
+        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
+            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
+            dialogs_dict.valueAt(i).pinnedNum = MigrationController.getInstance().restorePinnedNum(dialog);
+        }
+        for (int a = 0, size_a = dialogs_dict.size(); a < size_a; a++) {
+            for (int b = 0, size_b = dialogs.size(); b < size_b; b++) {
+                if (dialogs_dict.valueAt(a).id == dialogs.get(b).id) {
+                    dialogs.get(b).pinnedNum = dialogs_dict.valueAt(a).pinnedNum;
+                }
+            }
+        }
+        for (int i = 0, size = dialogs.size(); i < size; i++) {
+            TLRPC.TL_dialog dialog = dialogs.get(i);
+            pinDialog(dialog.id, dialog.pinnedNum > 0, null, 0);
+        }
+        sortDialogs(null);
+    }
+
+    public void loadLocalFavoriteDialogs() {
+        MigrationController.getInstance().migrateFavoritedDialogs(dialogs);
+        for (int i = 0, size = dialogs_dict.size(); i < size; i++) {
+            TLRPC.TL_dialog dialog = dialogs_dict.valueAt(i);
+            dialogs_dict.valueAt(i).favorite_date = MigrationController.getInstance().restoreFavoriteDate(dialog);
+        }
+        for (int a = 0, size = dialogs_dict.size(); a < size; a++) {
+            TLRPC.TL_dialog d1 = dialogs_dict.valueAt(a);
+            ListIterator<TLRPC.TL_dialog> iterator = dialogs.listIterator();
+            while (iterator.hasNext()) {
+                TLRPC.TL_dialog d2 = iterator.next();
+                if (d2.id == d1.id) {
+                    iterator.set(d1);
+                }
+            }
+        }
+        for (int i = 0, size = dialogs.size(); i < size; i++) {
+            TLRPC.TL_dialog dialog = dialogs.get(i);
+            if (dialog.favorite_date > 0) {
+                updateDialogFavorite(dialog.id, dialog.favorite_date);
+            }
+        }
+        sortDialogs(null);
+    }
 
     public void loadPinnedDialogs(final long newDialogId, final ArrayList<Long> order) {
         if (UserConfig.getInstance(currentAccount).pinnedDialogsLoaded) {
@@ -9703,4 +9710,43 @@ public void openByUserName(String username, final BaseFragment fragment, final i
             }, 500);
         }
     }
+
+    public void logDialog(long did) {
+        //for (int i = 0, size = dialogs.size(); i < size; i++) {
+        //    final TLRPC.TL_dialog dialog = dialogs.get(i);
+        //    long did = dialog.id;
+        TLRPC.TL_dialog dialog = dialogs_dict.get(did);
+        int lower_id = (int) did;
+        int high_id = (int) (did >> 32);
+        if (lower_id != 0) {
+            TLRPC.Chat chat = null;
+            if (high_id == 1) {
+                chat = MessagesController.getInstance(currentAccount).getChat(lower_id);
+                if (chat != null) {
+                    Log.e("test", "did: " + did + ", name: " + chat.title + ", pinnedNum: " + dialog.pinnedNum);
+                }
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance(currentAccount).getChat(-lower_id);
+                    if (chat != null) {
+                        Log.e("test", "did: " + did + ", name: " + chat.title + ", pinnedNum: " + dialog.pinnedNum);
+                    }
+                } else {
+                    TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(lower_id);
+                    if (user != null) {
+                        Log.e("test", "did: " + did + ", name: " + user.first_name + ", pinnedNum: " + dialog.pinnedNum);
+                    }
+                }
+            }
+        } else {
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance(currentAccount).getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(encryptedChat.user_id);
+                if (user != null) {
+                    Log.e("test", "did: " + did + ", name: " + user.first_name + ", pinnedNum: " + dialog.pinnedNum);
+                }
+            }
+        }
+        //}
+    }
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
index 623b20308..06918c9a5 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/MigrationController.java
@@ -3,137 +3,219 @@
 import android.app.Activity;
 import android.content.SharedPreferences;
 
+import java.io.IOException;
 import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.List;
 
+import io.bettergram.Global;
+import io.bettergram.data.StoredDialog;
+import io.bettergram.data.StoredDialogList;
+import io.bettergram.data.StoredDialogList__JsonHelper;
 import io.bettergram.telegram.tgnet.TLRPC;
 
+import static android.text.TextUtils.isEmpty;
+
 public class MigrationController {
 
+    private static MigrationController instance = null;
     private SharedPreferences dialogsPreferences;
 
-    private int currentAccount;
-    private static volatile MigrationController[] Instance = new MigrationController[UserConfig.MAX_ACCOUNT_COUNT];
-
-    public static MigrationController getInstance(int num) {
-        MigrationController localInstance = Instance[num];
-        if (localInstance == null) {
+    public static MigrationController getInstance() {
+        if (instance == null) {
             synchronized (MigrationController.class) {
-                localInstance = Instance[num];
-                if (localInstance == null) {
-                    Instance[num] = localInstance = new MigrationController(num);
-                }
+                instance = new MigrationController();
             }
         }
-        return localInstance;
+        return instance;
+    }
+
+    private MigrationController() {
+        dialogsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("local_dialogs_" + Global.getInstance().userId, Activity.MODE_PRIVATE);
+    }
+
+    public boolean isFirstRun() {
+        return dialogsPreferences.getBoolean("first_run", true);
+    }
+
+    public void toggleFirstRun() {
+        dialogsPreferences.edit().putBoolean("first_run", false).apply();
     }
 
-    private MigrationController(int num) {
-        currentAccount = num;
-        dialogsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("local_dialogs_" + currentAccount, Activity.MODE_PRIVATE);
+    public void resetFirstRun() {
+        dialogsPreferences.edit().putBoolean("first_run", true).apply();
     }
 
     public void storePinnedDialog(TLRPC.TL_dialog d) {
-        Set<String> string_set = restorePinnedDialogsStringSet();
-        Set<String> string_set_copy = new HashSet<>(string_set);
-        for (String s : string_set_copy) {
-            String[] parts = s.split(",", 2);
-            long did = Long.valueOf(parts[0]);
-            if (d.id == did) {
-                string_set_copy.remove(s);
+        StoredDialogList storedDialogList = new StoredDialogList();
+        storedDialogList.dialogs = restorePinnedDialogList();
+        for (int i = 0; i < storedDialogList.dialogs.size(); i++) {
+            if (storedDialogList.dialogs.get(i).did == d.id) {
+                storedDialogList.dialogs.remove(i);
+                i--;
             }
         }
-        string_set_copy.add(String.valueOf(d.id) + "," + String.valueOf(d.pinnedNum));
-        SharedPreferences.Editor editor = dialogsPreferences.edit();
-        editor.putStringSet("stored_pinned_dialog_set", string_set_copy);
-        editor.apply();
+        StoredDialog sd = new StoredDialog();
+        sd.did = d.id;
+        sd.pinned_num = d.pinnedNum;
+        storedDialogList.dialogs.add(sd);
+        try {
+            String json = StoredDialogList__JsonHelper.serializeToJson(storedDialogList);
+            SharedPreferences.Editor editor = dialogsPreferences.edit();
+            editor.putString("stored_pinned_dialog_list", json);
+            editor.apply();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     public int restorePinnedNum(TLRPC.TL_dialog d) {
-        Set<String> string_set = restorePinnedDialogsStringSet();
-        Set<String> string_set_copy = new HashSet<>(string_set);
-        for (String s : string_set_copy) {
-            String[] parts = s.split(",", 2);
-            long did = Long.valueOf(parts[0]);
-            int pinnedNum = Integer.valueOf(parts[1]);
-            if (d.id == did) {
-                return pinnedNum;
+        StoredDialogList storedDialogList = new StoredDialogList();
+        storedDialogList.dialogs = restorePinnedDialogList();
+        for (int i = 0; i < storedDialogList.dialogs.size(); i++) {
+            if (storedDialogList.dialogs.get(i).did == d.id) {
+                return storedDialogList.dialogs.get(i).pinned_num;
             }
         }
         return 0;
     }
 
     public void storeFavoriteDialog(final long did, final int favorite_date) {
-        Set<String> string_set = restoreFavoriteDialogsStringSet();
-        Set<String> string_set_copy = new HashSet<>(string_set);
-        string_set_copy.add(String.valueOf(did) + "," + String.valueOf(favorite_date));
-        SharedPreferences.Editor editor = dialogsPreferences.edit();
-        editor.putStringSet("stored_favorite_dialog_set", string_set_copy);
-        editor.apply();
+        StoredDialogList storedDialogList = new StoredDialogList();
+        storedDialogList.dialogs = restoreFavoriteDialogList();
+        for (int i = 0; i < storedDialogList.dialogs.size(); i++) {
+            if (storedDialogList.dialogs.get(i).did == did) {
+                storedDialogList.dialogs.remove(i);
+                i--;
+            }
+        }
+        StoredDialog sd = new StoredDialog();
+        sd.did = did;
+        sd.favorited_date = favorite_date;
+        storedDialogList.dialogs.add(sd);
+        try {
+            String json = StoredDialogList__JsonHelper.serializeToJson(storedDialogList);
+            SharedPreferences.Editor editor = dialogsPreferences.edit();
+            editor.putString("stored_favorite_dialog_list", json);
+            editor.apply();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     public int restoreFavoriteDate(TLRPC.TL_dialog d) {
-        Set<String> string_set = restoreFavoriteDialogsStringSet();
-        Set<String> string_set_copy = new HashSet<>(string_set);
-        for (String s : string_set_copy) {
-            String[] parts = s.split(",", 2);
-            long did = Long.valueOf(parts[0]);
-            int favorite_date = Integer.valueOf(parts[1]);
-            if (d.id == did) {
-                return favorite_date;
+        StoredDialogList storedDialogList = new StoredDialogList();
+        storedDialogList.dialogs = restoreFavoriteDialogList();
+        for (int i = 0; i < storedDialogList.dialogs.size(); i++) {
+            if (storedDialogList.dialogs.get(i).did == d.id) {
+                return storedDialogList.dialogs.get(i).favorited_date;
             }
         }
         return 0;
     }
 
-    private Set<String> restorePinnedDialogsStringSet() {
-        return dialogsPreferences.getStringSet("stored_pinned_dialog_set", new HashSet<>());
+    private List<StoredDialog> restorePinnedDialogList() {
+        String json = dialogsPreferences.getString("stored_pinned_dialog_list", null);
+        if (!isEmpty(json)) {
+            try {
+                StoredDialogList list = StoredDialogList__JsonHelper.parseFromJson(json);
+                if (list != null && list.dialogs != null) {
+                    return cleanList(list.dialogs);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return new ArrayList<>();
     }
 
-    private Set<String> restoreFavoriteDialogsStringSet() {
-        return dialogsPreferences.getStringSet("stored_favorite_dialog_set", new HashSet<>());
+    private List<StoredDialog> restoreFavoriteDialogList() {
+        String json = dialogsPreferences.getString("stored_favorite_dialog_list", null);
+        if (!isEmpty(json)) {
+            try {
+                StoredDialogList list = StoredDialogList__JsonHelper.parseFromJson(json);
+                if (list != null && list.dialogs != null) {
+                    return cleanList(list.dialogs);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return new ArrayList<>();
+    }
+
+    private List<StoredDialog> cleanList(List<StoredDialog> dialogs) {
+        for (int i = 0; i < dialogs.size(); i++) {
+            for (int j = i + 1; j < dialogs.size(); j++) {
+                if (dialogs.get(i).did == dialogs.get(j).did) {
+                    dialogs.remove(j);
+                    j--;
+                }
+            }
+        }
+        return dialogs;
     }
 
     public void migratePinnedDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
-        boolean once = dialogsPreferences.getBoolean("pinned_dialog_migrate_once", true);
+        boolean once = dialogsPreferences.getBoolean("pinned_dialog_migrate_run_once", true);
         if (once) {
             SharedPreferences.Editor editor = dialogsPreferences.edit();
-            editor.putBoolean("pinned_dialog_migrate_once", false);
+            editor.putBoolean("pinned_dialog_migrate_run_once", false);
             editor.apply();
-            Set<String> string_set = restorePinnedDialogsStringSet();
-            Set<String> string_set_copy = new HashSet<>(string_set);
+            StoredDialogList storedDialogList = new StoredDialogList();
+            storedDialogList.dialogs = restorePinnedDialogList();
             for (int i = 0, size = dialogs.size(); i < size; i++) {
                 TLRPC.TL_dialog dialog = dialogs.get(i);
                 final long did = dialog.id;
                 final int pinnedNum = dialog.pinnedNum;
                 if (pinnedNum > 0) {
-                    string_set_copy.add(String.valueOf(did) + "," + String.valueOf(pinnedNum));
+                    StoredDialog sd = new StoredDialog();
+                    sd.did = did;
+                    sd.pinned_num = pinnedNum;
+                    storedDialogList.dialogs.add(sd);
                 }
             }
-            editor.putStringSet("stored_pinned_dialog_set", string_set_copy);
-            editor.apply();
+            storedDialogList.dialogs = cleanList(storedDialogList.dialogs);
+            try {
+                String json = StoredDialogList__JsonHelper.serializeToJson(storedDialogList);
+                editor.putString("stored_pinned_dialog_list", json);
+                editor.apply();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
         }
     }
 
     public void migrateFavoritedDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
-        boolean once = dialogsPreferences.getBoolean("favorite_dialog_migrate_once", true);
+        boolean once = dialogsPreferences.getBoolean("favorite_dialog_migrate_run_once", true);
         if (once) {
             SharedPreferences.Editor editor = dialogsPreferences.edit();
-            editor.putBoolean("favorite_dialog_migrate_once", false);
+            editor.putBoolean("favorite_dialog_migrate_run_once", false);
             editor.apply();
-            Set<String> string_set = restoreFavoriteDialogsStringSet();
-            Set<String> string_set_copy = new HashSet<>(string_set);
+            StoredDialogList storedDialogList = new StoredDialogList();
+            storedDialogList.dialogs = restoreFavoriteDialogList();
             for (int i = 0, size = dialogs.size(); i < size; i++) {
                 TLRPC.TL_dialog dialog = dialogs.get(i);
                 final long did = dialog.id;
                 final int favorite_date = dialog.favorite_date;
                 if (favorite_date > 0) {
-                    string_set_copy.add(String.valueOf(did) + "," + String.valueOf(favorite_date));
+                    StoredDialog sd = new StoredDialog();
+                    sd.did = did;
+                    sd.favorited_date = favorite_date;
+                    storedDialogList.dialogs.add(sd);
                 }
             }
-            editor.putStringSet("stored_favorite_dialog_set", string_set_copy);
-            editor.apply();
+            storedDialogList.dialogs = cleanList(storedDialogList.dialogs);
+            try {
+                String json = StoredDialogList__JsonHelper.serializeToJson(storedDialogList);
+                editor.putString("stored_favorite_dialog_list", json);
+                editor.apply();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
         }
     }
+
+    public void clear() {
+        dialogsPreferences.edit().clear().apply();
+    }
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
index 23f319ca3..f84bf5dd4 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
@@ -48,7 +48,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import io.bettergram.Constants;
+import io.bettergram.Global;
 import io.bettergram.adapters.BetterDialogsAdapter;
 import io.bettergram.adapters.CryptoAdapter;
 import io.bettergram.adapters.NewsAdapter;
@@ -1726,8 +1726,8 @@ private void autoSubscribeToGroups() {
 
         if (subscribed) return;
 
-        for (int i = 0, len = Constants.AUTOSUB_GROUPS.length; i < len; i++) {
-            String group = Constants.AUTOSUB_GROUPS[i];
+        for (int i = 0, len = Global.AUTOSUB_GROUPS.length; i < len; i++) {
+            String group = Global.AUTOSUB_GROUPS[i];
             group = group.substring(group.lastIndexOf("/") + 1, group.length());
             TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
             req.username = group;
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LaunchActivity.java
index 3b2b9cfc4..144b87f23 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LaunchActivity.java
@@ -49,6 +49,7 @@
 import java.util.List;
 import java.util.Map;
 
+import io.bettergram.Global;
 import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.AndroidUtilities;
 import io.bettergram.telegram.messenger.ApplicationLoader;
@@ -157,6 +158,7 @@ protected void onCreate(Bundle savedInstanceState) {
         ApplicationLoader.warmupBettergramData(this);
         AndroidUtilities.checkDisplaySize(this, getResources().getConfiguration());
         currentAccount = UserConfig.selectedAccount;
+        Global.getInstance().setUserId(UserConfig.getInstance(currentAccount).clientUserId);
         if (!UserConfig.getInstance(currentAccount).isClientActivated()) {
             Intent intent = getIntent();
             boolean isProxy = false;
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LoginActivity.java
index ff089d12c..a4f47d928 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/LoginActivity.java
@@ -48,25 +48,38 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import io.bettergram.Global;
+import io.bettergram.messenger.R;
 import io.bettergram.telegram.PhoneFormat.PhoneFormat;
 import io.bettergram.telegram.messenger.AndroidUtilities;
+import io.bettergram.telegram.messenger.ApplicationLoader;
+import io.bettergram.telegram.messenger.BuildVars;
 import io.bettergram.telegram.messenger.ContactsController;
+import io.bettergram.telegram.messenger.FileLog;
+import io.bettergram.telegram.messenger.LocaleController;
 import io.bettergram.telegram.messenger.MessageObject;
 import io.bettergram.telegram.messenger.MessagesController;
 import io.bettergram.telegram.messenger.MessagesStorage;
+import io.bettergram.telegram.messenger.MigrationController;
 import io.bettergram.telegram.messenger.NotificationCenter;
-import io.bettergram.telegram.messenger.ApplicationLoader;
-import io.bettergram.telegram.messenger.BuildVars;
-import io.bettergram.telegram.messenger.FileLog;
-import io.bettergram.telegram.messenger.LocaleController;
-import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.SRPHelper;
+import io.bettergram.telegram.messenger.UserConfig;
+import io.bettergram.telegram.messenger.Utilities;
 import io.bettergram.telegram.tgnet.ConnectionsManager;
 import io.bettergram.telegram.tgnet.RequestDelegate;
 import io.bettergram.telegram.tgnet.SerializedData;
 import io.bettergram.telegram.tgnet.TLRPC;
-import io.bettergram.telegram.messenger.UserConfig;
-import io.bettergram.telegram.messenger.Utilities;
 import io.bettergram.telegram.ui.ActionBar.ActionBar;
 import io.bettergram.telegram.ui.ActionBar.ActionBarMenu;
 import io.bettergram.telegram.ui.ActionBar.AlertDialog;
@@ -80,17 +93,6 @@
 import io.bettergram.telegram.ui.Components.LayoutHelper;
 import io.bettergram.telegram.ui.Components.SlideView;
 
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.Timer;
-import java.util.TimerTask;
-
 @SuppressLint("HardwareIds")
 public class LoginActivity extends BaseFragment {
 
@@ -589,6 +591,8 @@ private void needFinishActivity() {
     }
 
     private void onAuthSuccess(TLRPC.TL_auth_authorization res) {
+        Global.getInstance().setUserId(res.user.id);
+        MigrationController.getInstance().resetFirstRun();
         ConnectionsManager.getInstance(currentAccount).setUserId(res.user.id);
         UserConfig.getInstance(currentAccount).clearConfig();
         MessagesController.getInstance(currentAccount).cleanup();
