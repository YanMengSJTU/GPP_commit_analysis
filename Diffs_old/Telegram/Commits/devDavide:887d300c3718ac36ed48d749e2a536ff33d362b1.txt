diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
index 21ed39412..2154a68ac 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
@@ -10,7 +10,6 @@
 import android.widget.TextView;
 
 import org.pollgram.decision.data.Decision;
-import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 
 import java.util.List;
@@ -20,7 +19,7 @@
  */
 public class DecisionAdapter extends ArrayAdapter<Decision> {
 
-    private static final int LAYOUT_RES_ID = R.layout.item_decision;
+    private static final int LAYOUT_RES_ID = R.layout.item_decision_list;
     private final int groupMemberCount;
 
     public DecisionAdapter(Context context,  List<Decision> items, int groupMemberCount) {
@@ -40,9 +39,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
         // put data
         Decision decision = getItem(position);
-        decisionTitle.setText(decision.getDescription());
-        String subTitle = LocaleController.formatString(R.string.howManyMemberVote+"",
-                R.string.howManyMemberVote, decision.getVoteCount(),groupMemberCount);
+        decisionTitle.setText(decision.getTitle());
+        String subTitle = getContext().getString(R.string.howManyMemberVote, decision.getUsersThatVoteCount(),groupMemberCount);
         decisionSubtitle.setText(subTitle);
         if (!decision.isOpen())
             rowView.setBackgroundColor(Color.LTGRAY);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
similarity index 82%
rename from TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index a7876af49..9b529480d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -19,6 +19,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -26,12 +27,12 @@
 /**
  * Created by davide on 04/10/15.
  */
-public class OptionAdapter extends ArrayAdapter<Vote> {
+public class VoteListAdapter extends ArrayAdapter<Vote> {
 
     private static final String LOG_TAG = "ChoiceAdapter";
 
-    private static final int LAYOUT_RES_ID = R.layout.option_choice;
-    private final List<Vote> votes;
+    private static final int LAYOUT_RES_ID = R.layout.item_vote_list;
+    private List<Vote> votes;
     private final List<Boolean> originalVotes;
     private final Set<Vote> newVoteSet;
     private OnVoteChangeListener onVoteChageListener;
@@ -40,8 +41,8 @@
         void voteChanges(boolean areThereChangesToSave);
     }
 
-    public OptionAdapter(Context context, List<Vote> votes) {
-        super(context, LAYOUT_RES_ID, votes.toArray(new Vote[votes.size()]));
+    public VoteListAdapter(Context context, List<Vote> votes) {
+        super(context, LAYOUT_RES_ID);
         this.votes = votes;
         this.newVoteSet = new HashSet<>();
         this.originalVotes = new ArrayList<>();
@@ -55,6 +56,25 @@ public void voteChanges(boolean areThereChangesToSave) {
         };
     }
 
+    public void setVotes(List<Vote> votes) {
+        this.votes = votes;
+    }
+
+    @Override
+    public int getCount() {
+        return votes.size();
+    }
+
+    @Override
+    public Vote getItem(int position) {
+        return votes.get(position);
+    }
+
+    @Override
+    public int getPosition(Vote item) {
+        return votes.indexOf(item);
+    }
+
     public void setOnVoteChageListener(OnVoteChangeListener onVoteChageListener){
         this.onVoteChageListener = onVoteChageListener;
     }
@@ -79,6 +99,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {
             @Override
             public void onClick(View v) {
                 vote.setVote(optionCheckBox.isChecked());
+                vote.setVoteTime(new Date());
                 if (vote.isVote() != null && vote.isVote().equals(originalVotes.get(position))){
                     newVoteSet.remove(vote);;
                 } else {
@@ -93,7 +114,7 @@ public void onClick(View v) {
         optionTitle.setText(o.getTitle());
         optionSubtitle.setText(o.getLongDescription());
         // TODO optionView
-        optionCheckBox.setChecked(vote.isVote());
+        optionCheckBox.setChecked(vote.isVote() != null && vote.isVote());
 
         return rowView;
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
index 778df0ce5..56ee48ad7 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
@@ -6,7 +6,12 @@
 /**
  * Created by davide on 27/10/15.
  */
-public interface DBObjectMapper<T> {
+interface DBObjectMapper<T> {
+
+    String getTableName();
+
+    String getIdFiledName();
+
     T from(Cursor c);
     ContentValues toCV(T t);
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
index 20bee94fc..810f03ffd 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
@@ -1,36 +1,323 @@
 package org.pollgram.decision.dao;
 
-import android.content.Context;
+import android.content.ContentValues;
+import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-public class PGSqlLiteHelper extends SQLiteOpenHelper {
-
-	public static final String DBName = "pollgramDecisions";
-	public static final int DatabaseVersion = 1;
-	private static final String LOG_TAG = "PGSQLH";
-
-	// id
-	public PGSqlLiteHelper(Context context) {
-		super(context, DBName, null, DatabaseVersion);
-	}
-
-	@Override
-	public void onCreate(SQLiteDatabase db) {
-		Log.d(LOG_TAG, "Creazione");
-
-		db.execSQL("DROP TABLE IF EXISTS operation");
-//		db.execSQL(OperationDAOImpl.getTableSqlDeclaration());
-//		db.execSQL(PaymentTypeDAOImpl.getTableSqlDeclaration());
-//		db.execSQL(CategoryDAOImpl.getTableSqlDeclaration());
-//		db.execSQL(PlannedOperationDAOImpl.getTableSqlDeclaration());
-		Log.d(LOG_TAG, "Creazione tab ok");
-	}
-
-	@Override
-	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-		throw new RuntimeException("Not yet implemented");
-	}
-	
+import org.pollgram.decision.data.DBBean;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.ApplicationLoader;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+class PGSqlLiteHelper extends SQLiteOpenHelper {
+
+    public static final String DB_NAME = "pollgramDecisions";
+    public static final int DATABASE_VERSION = 1;
+    private static final String LOG_TAG = "PGSQLH";
+    private static final String DEFAULT_ID_FILE_NAME = "id";
+
+    static class T_Decision {
+        static final String TABLE_NAME = "decision";
+
+        static final String ID = DEFAULT_ID_FILE_NAME;
+        static final String TITLE = "title";
+        static final String LONG_DESCRIPTION = "long_description";
+        static final String FULL_CHAT_ID = "full_chat_id";
+        static final String USER_CREATOR_ID = "user_creator_id";
+        static final String OPEN = "open";
+        static final String USER_VOTE_COUNT = "user_vote_count";
+    }
+
+    static class T_TextOption {
+        static final String TABLE_NAME = "text_option";
+        static final String ID = DEFAULT_ID_FILE_NAME;
+        static final String TITLE = "title";
+        static final String LONG_DESCRIPTION = "long_description";
+        static final String FK_DECISION = "fk_decision";
+    }
+
+    static class T_Vote {
+        static final String TABLE_NAME = "vote";
+        static final String ID = DEFAULT_ID_FILE_NAME;
+        static final String VOTE = "vote";
+        static final String VOTE_TIME = "voteTime";
+        static final String USER_ID = "user_id";
+        static final String FK_OPTION = "fk_option";
+
+        static String cloumns(String tableAlias){
+            return createColumns(tableAlias, new String[]{ID,VOTE,VOTE_TIME,USER_ID,FK_OPTION});
+        }
+    }
+
+    private static String createColumns(String tableName, String[] columnsNames){
+        StringBuilder sb = new StringBuilder();
+        for (int i=0; i < columnsNames.length - 1 ; i++) {
+            sb.append(tableName);
+            sb.append('.');
+            sb.append(columnsNames[i]);
+            sb.append(',');
+        }
+        sb.append(tableName);
+        sb.append('.');
+        sb.append(columnsNames[columnsNames.length - 1]);
+        sb.append(' ');
+        return sb.toString();
+    }
+
+    /**
+     * DBObjectMapper for Vote
+     */
+    static final DBObjectMapper<Vote> VOTE_MAPPER = new DBObjectMapper<Vote>() {
+        @Override
+        public String getTableName() {
+            return T_Vote.TABLE_NAME;
+        }
+
+        @Override
+        public String getIdFiledName() {
+            return T_Vote.ID;
+        }
+
+        @Override
+        public Vote from(Cursor c) {
+            long id = getLong(c, T_Vote.ID);
+            Boolean voteValue = getBoolean(c, T_Vote.VOTE);
+            Date voteTime = getDate(c, T_Vote.VOTE_TIME);
+            int userId = getInt(c, T_Vote.USER_ID);
+            long optionId = getLong(c, T_Vote.FK_OPTION);
+            return new Vote(id,voteValue, voteTime, userId, optionId);
+        }
+
+        @Override
+        public ContentValues toCV(Vote v) {
+            ContentValues cv = new ContentValues();
+            cv.put(T_Vote.VOTE, v.isVote());
+            cv.put(T_Vote.VOTE_TIME,v.getVoteTime().getTime());
+            cv.put(T_Vote.USER_ID, v.getUserId());
+            cv.put(T_Vote.FK_OPTION, v.getOptionId());
+            return cv;
+        }
+    };
+
+
+    /**
+     * DBObjectMapper for Decision
+     */
+    static final DBObjectMapper<Decision> DECISION_MAPPER = new DBObjectMapper<Decision>() {
+
+        @Override
+        public String getTableName() {
+            return T_Decision.TABLE_NAME;
+        }
+
+        @Override
+        public String getIdFiledName() {
+            return T_Decision.ID;
+        }
+
+        @Override
+        public Decision from(Cursor c) {
+            long id = getLong(c, T_Decision.ID);
+            String title = getString(c, T_Decision.TITLE);
+            String description = getString(c, T_Decision.LONG_DESCRIPTION);
+            int fullChatId = getInt(c, T_Decision.FULL_CHAT_ID);
+            long userCreatorId = getLong(c, T_Decision.USER_CREATOR_ID);
+            boolean isOpen = getBoolean(c, T_Decision.OPEN);
+            int userVoteCount = getInt(c, T_Decision.USER_VOTE_COUNT);
+            return new Decision(id, fullChatId, userCreatorId, title, description, isOpen, userVoteCount);
+        }
+
+        @Override
+        public ContentValues toCV(Decision d) {
+            ContentValues cv = new ContentValues();
+            cv.put(T_Decision.TITLE, d.getTitle());
+            cv.put(T_Decision.LONG_DESCRIPTION, d.getTitle());
+            cv.put(T_Decision.FULL_CHAT_ID, d.getFullChatId());
+            cv.put(T_Decision.USER_CREATOR_ID, d.getUserCreatorId());
+            cv.put(T_Decision.OPEN, d.isOpen());
+            cv.put(T_Decision.USER_VOTE_COUNT, d.getUsersThatVoteCount());
+            return cv;
+        }
+    };
+
+    /**
+     * DBObjectMapper for TextOption
+     */
+    static final DBObjectMapper<TextOption> TEXT_OPTION_MAPPER = new DBObjectMapper<TextOption>() {
+        @Override
+        public String getTableName() {
+            return T_TextOption.TABLE_NAME;
+        }
+
+        @Override
+        public String getIdFiledName() {
+            return T_TextOption.ID;
+        }
+
+        @Override
+        public TextOption from(Cursor c) {
+            long id = getLong(c, T_TextOption.ID);
+            String title = getString(c, T_TextOption.TITLE) ;
+            String longDescription = getString(c, T_TextOption.LONG_DESCRIPTION);
+            long decisionId = getLong(c, T_TextOption.FK_DECISION);
+            return new TextOption(id, title, longDescription, decisionId);
+        }
+
+        @Override
+        public ContentValues toCV(TextOption to) {
+            ContentValues cv = new ContentValues();
+            cv.put(T_TextOption.TITLE, to.getTitle());
+            cv.put(T_TextOption.LONG_DESCRIPTION, to.getLongDescription());
+            cv.put(T_TextOption.FK_DECISION, to.getDecisionId());
+            return cv;
+        }
+    };
+
+    static boolean getBoolean(int num) {
+        return num == 1;
+    }
+
+    static int toInt(boolean b) {
+        return b ? 1 : 0;
+    }
+
+    static String toString(boolean b) {
+        return Integer.toString(toInt(b));
+    }
+
+    private static Boolean getBoolean(Cursor c, String colName) {
+        int columnIdx = c.getColumnIndex(colName);
+        if (c.isNull(columnIdx))
+            return null;
+        else
+            return getBoolean(c.getInt(columnIdx));
+    }
+
+    private static String getString(Cursor c, String colName) {
+        return c.getString(c.getColumnIndex(colName));
+    }
+
+    private static long getLong(Cursor c, String colName) {
+        return c.getLong(c.getColumnIndex(colName));
+    }
+
+    private static int getInt(Cursor c, String colName) {
+        return c.getInt(c.getColumnIndex(colName));
+    }
+
+    private static Date getDate(Cursor c, String colName){
+        return new Date(c.getLong(c.getColumnIndex(colName)));
+    }
+
+    public PGSqlLiteHelper() {
+        super(ApplicationLoader.applicationContext, DB_NAME, null, DATABASE_VERSION);
+    }
+
+
+    public <T extends DBBean> T insert(T bean, DBObjectMapper<T> mapper) {
+        SQLiteDatabase db = getWritableDatabase();
+        try {
+            long id = db.insert(mapper.getTableName(), null, mapper.toCV(bean));
+            db.close();
+            if (id == -1)
+                throw new PollgramDAOException("Error inserting: " + bean);
+            bean.setId(id);
+            return bean;
+        } finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+    }
+
+    public <T extends DBBean> void update(T bean, DBObjectMapper<T> mapper) {
+        SQLiteDatabase db = getWritableDatabase();
+        try {
+            int nrow = db.update(mapper.getTableName(), mapper.toCV(bean),
+                    mapper.getIdFiledName() + "= ?", new String[]{Long.toString(bean.getId())});
+            if (nrow == 0)
+                throw new PollgramDAOException("Error updating: " + bean);
+
+        } finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+    }
+
+    public <T extends DBBean> List<T> query(DBObjectMapper<T> mapper, String selection,
+                                            String[] selectionArgs) {
+        SQLiteDatabase db = getReadableDatabase();
+        try {
+            Cursor cursor = db.query(mapper.getTableName(), null, selection,
+                    selectionArgs, null, null, null);
+            List<T> result = new ArrayList<>();
+            cursor.moveToFirst();
+            while (!cursor.isAfterLast()) {
+                result.add(mapper.from(cursor));
+                cursor.moveToNext();
+            }
+            return result;
+        } finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+    }
+
+
+    public <T extends DBBean> T findById(long id, DBObjectMapper<T> mapper) {
+        SQLiteDatabase db = getReadableDatabase();
+
+        try {
+            Cursor cursor = db.query(mapper.getTableName(), null, mapper.getIdFiledName() + "= ?",
+                    new String[]{Long.toString(id)}, null, null, null);
+            if (!cursor.moveToFirst())
+                return null;
+
+            return mapper.from(cursor);
+        } finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        Log.i(LOG_TAG, "Creating brand new db");
+        db.execSQL("CREATE TABLE " + T_Decision.TABLE_NAME + " (" +
+                T_Decision.ID + " INTEGER PRIMARY KEY, " +
+                T_Decision.TITLE + " TEXT, " +
+                T_Decision.LONG_DESCRIPTION + " TEXT, " +
+                T_Decision.FULL_CHAT_ID + " INTEGER," +
+                T_Decision.USER_CREATOR_ID + " INTEGER," +
+                T_Decision.OPEN + " INTEGER, " +
+                T_Decision.USER_VOTE_COUNT + " INTEGER" +
+                ") ;");
+        db.execSQL("CREATE TABLE " + T_TextOption.TABLE_NAME + " (" +
+                T_TextOption.ID + " INTEGER PRIMARY KEY, " +
+                T_TextOption.TITLE + " TEXT, " +
+                T_TextOption.LONG_DESCRIPTION + " TEXT, " +
+                T_TextOption.FK_DECISION + " INTEGER, " +
+                "FOREIGN KEY(" + T_TextOption.FK_DECISION + ") REFERENCES " + T_Decision.TABLE_NAME + "(" + T_Decision.ID + ") ) ;");
+        db.execSQL("CREATE TABLE " + T_Vote.TABLE_NAME + " (" +
+                T_Vote.ID + " INTEGER PRIMARY KEY," +
+                T_Vote.VOTE + " Boolean," +
+                T_Vote.VOTE_TIME + " TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
+                T_Vote.FK_OPTION + " INTEGER, " +
+                T_Vote.USER_ID + " INTEGER, " +
+                "FOREIGN KEY(" + T_Vote.FK_OPTION + ")REFERENCES " + T_TextOption.TABLE_NAME + " (" + T_TextOption.ID + ") ) ;");
+        Log.i(LOG_TAG, "Db creation completed");
+
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        throw new RuntimeException("Not yet implemented");
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
index bf4ce8dd2..a1edc928d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
@@ -2,13 +2,12 @@
 
 import android.support.annotation.Nullable;
 
-import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.telegram.tgnet.TLRPC;
 
-import java.util.Collection;
 import java.util.List;
 
 /**
@@ -16,10 +15,20 @@
  */
 public abstract class PollgramDAO {
 
+    public abstract Decision insert(Decision d);
+
+    public abstract void update(Decision d);
+
     public abstract Decision getDecision(long decisionId);
 
     public abstract List<Decision> getDecisions(@Nullable Boolean open);
 
+    public abstract Option insert(Option o);
+
+    public abstract void update(Option o);
+
+    public abstract Option getOption(long optionId);
+
     public abstract List<Option> getOptions(Decision decision);
 
     public abstract List<Option> getOptions(long decisionId);
@@ -28,7 +37,7 @@
 
     public abstract List<Vote> getUserVoteForDecision(long decisionId, int userId);
 
-    public abstract void save(Collection<Vote> votest2save);
+    public abstract Vote save(Vote vote);
 
     public abstract UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
 
@@ -40,7 +49,7 @@ public static PollgramDAO getInstance() {
             synchronized (PollgramDAO.class) {
                 localInstance = Instance;
                 if (localInstance == null) {
-                    Instance = localInstance = new PollgramDAOStubImpl();
+                    Instance = localInstance = new PollgramDAODBImpl();
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
index 217b4058d..93cae337e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
@@ -1,57 +1,231 @@
 package org.pollgram.decision.dao;
 
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
 import android.support.annotation.Nullable;
+import android.util.Log;
 
+import org.pollgram.decision.dao.PGSqlLiteHelper.T_Decision;
+import org.pollgram.decision.dao.PGSqlLiteHelper.T_TextOption;
+import org.pollgram.decision.dao.PGSqlLiteHelper.T_Vote;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.data.TimeRangeOption;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.MessagesController;
 import org.telegram.tgnet.TLRPC;
 
-import java.util.Collection;
+import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 
 /**
  * Created by davide on 18/10/15.
  */
-public class PollgramDAODBImpl extends PollgramDAO {
+class PollgramDAODBImpl extends PollgramDAO {
+
+    private static final String LOG_TAG = "PGDBDAO";
+    private final PGSqlLiteHelper helper;
+
+    public PollgramDAODBImpl() {
+        helper = new PGSqlLiteHelper();
+        putStubData();
+    }
+
+    private void putStubData() {
+
+
+        /// just for test
+        int chatId = 39379118;
+        int creatorId = 23483618;
+        List<Decision> decisions = new ArrayList<>();
+        decisions.add(new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", true, 0));
+        decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true, 0));
+        decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true, 0));
+        decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false, 0));
+        helper.getWritableDatabase().execSQL("DELETE FROM " + T_Decision.TABLE_NAME);
+        for (Decision d : decisions) {
+            Decision newD = insert(d);
+            Log.i(LOG_TAG, "inserted decision id:" + newD.getId());
+            Decision found = getDecision(newD.getId());
+        }
+        Log.i(LOG_TAG, "query getDecisions(null)");
+        for (Decision d : getDecisions(null)) {
+            Log.d(LOG_TAG, "found-1: " + d);
+        }
+
+        Log.i(LOG_TAG, "query getDecisions(true)");
+        for (Decision d : getDecisions(true)) {
+            Log.d(LOG_TAG, "found-2: " + d);
+        }
+        Log.i(LOG_TAG, "query getDecisions(false)");
+        for (Decision d : getDecisions(false)) {
+            Log.d(LOG_TAG, "found-3 " + d);
+        }
+
+        Decision decision1 = getDecisions(null).get(0);
+        List<TextOption> options = new ArrayList<>();
+        options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
+        options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
+        options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
+        options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
+        helper.getWritableDatabase().execSQL("DELETE FROM " + T_TextOption.TABLE_NAME);
+        for(TextOption te : options){
+            Option newOpt = insert(te);
+            Log.i(LOG_TAG, "inserted TextOption id:" + newOpt.getId());
+            Option found = getOption(newOpt.getId());
+        }
+
+        Log.i(LOG_TAG, "query getOptions(decision1.getId())");
+        List<Option> optionsQuery = getOptions(decision1.getId());
+        for (int i=0; i< optionsQuery.size() ; i++ ) {
+            Option o = optionsQuery.get(i);
+            Log.d(LOG_TAG, "optionFound " + o);
+            Vote v = new Vote(null, new Date(), 93880097, o.getId());
+            Vote newV = save(v);
+            Log.d(LOG_TAG, "insert vote: " + v);
+        }
+    }
+
+    @Override
+    public Decision insert(Decision d) {
+        return helper.insert(d, helper.DECISION_MAPPER);
+    }
+
+    @Override
+    public void update(Decision d) {
+        helper.update(d, helper.DECISION_MAPPER);
+    }
+
     @Override
     public Decision getDecision(long decisionId) {
-        return null;
+        return helper.findById(decisionId, helper.DECISION_MAPPER);
     }
 
     @Override
     public List<Decision> getDecisions(@Nullable Boolean open) {
-        return null;
+        if (open == null)
+            return helper.query(helper.DECISION_MAPPER, null, null);
+        else
+            return helper.query(helper.DECISION_MAPPER, T_Decision.OPEN + "= ?",
+                    new String[]{PGSqlLiteHelper.toString(open)});
+    }
+
+    @Override
+    public Option insert(Option o) {
+        if (o instanceof TimeRangeOption)
+            throw new RuntimeException("Not yet supported :-(");
+        else {
+            TextOption tOpt = (TextOption) o;
+            return helper.insert(tOpt, helper.TEXT_OPTION_MAPPER);
+        }
+    }
+
+    @Override
+    public void update(Option o) {
+        if (o instanceof TimeRangeOption)
+            throw new RuntimeException("Not yet supported :-(");
+        else {
+            TextOption tOpt = (TextOption) o;
+            helper.update(tOpt, helper.TEXT_OPTION_MAPPER);
+        }
+    }
+
+    @Override
+    public Option getOption(long optionId) {
+        return helper.findById(optionId, helper.TEXT_OPTION_MAPPER);
     }
 
     @Override
     public List<Option> getOptions(Decision decision) {
-        return null;
+        return getOptions(decision.getId());
     }
 
     @Override
     public List<Option> getOptions(long decisionId) {
-        return null;
+        List<TextOption> textOptions = helper.query(helper.TEXT_OPTION_MAPPER,
+                T_TextOption.FK_DECISION + "= ?",
+                new String[]{Long.toString(decisionId)});
+        // TODO eventually query time range options
+
+        List<Option> outList = new ArrayList<>();
+        outList.addAll(textOptions);
+        return outList;
     }
 
     @Override
     public List<TLRPC.User> getUsers(int[] usersIds) {
-        return null;
+        List<TLRPC.User> users = new ArrayList<>();
+        for (int i = 0 ; i< usersIds.length ; i++){
+            users.add(MessagesController.getInstance().getUser(usersIds[i]));
+        }
+        return users;
     }
 
+
     @Override
     public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
-        return null;
+        return getVote(decisionId, userId);
     }
 
-    @Override
-    public void save(Collection<Vote> votest2save) {
+    /**
+     * Votes for given decisionId and userId. UserId can be null, in this case will reurn the
+     * votes for any user
+     * @param decisionId decision
+     * @param userId userId, if null it means all user
+     * @return
+     */
+    private List<Vote> getVote(long decisionId, @Nullable Integer userId) {
+        SQLiteDatabase db = helper.getReadableDatabase();
+
+        List<String> params = new ArrayList<>(2);
+        params.add(Long.toString(decisionId));
+
+        StringBuilder strQuery =  new StringBuilder();
+        strQuery.append(" select ").append(T_Vote.cloumns("v"));
+        strQuery.append(" from text_option o inner join vote v ");
+        strQuery.append("  on o.id = v.fk_option ");
+        strQuery.append(" where o.fk_decision = ? ");
+        if (userId != null) {
+            strQuery.append(" and v.user_id = ? ");
+            params.add(Integer.toString(userId));
+        }
+        try {
+            List<Vote> result = new ArrayList<>();
+            Cursor cursor = db.rawQuery(strQuery.toString(),params.toArray(new String[params.size()]));
+            cursor.moveToFirst();
+            while (!cursor.isAfterLast()) {
+                result.add(helper.VOTE_MAPPER.from(cursor));
+                cursor.moveToNext();
+            }
+            return result;
+        } finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+    }
 
+    @Override
+    public Vote save(Vote vote) {
+        if (vote.getId() == Vote.ID_NOT_SET) {
+            return helper.insert(vote, helper.VOTE_MAPPER);
+        } else {
+            helper.update(vote, helper.VOTE_MAPPER);
+            return vote;
+        }
     }
 
+
     @Override
     public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
-        return null;
+        Decision decision = getDecision(decisionId);
+        List<TLRPC.User> users = getUsers(participantIds);
+        List<Option> options = getOptions(decisionId);
+        List<Vote> votes = getVote(decisionId, null);
+        UsersDecisionVotes udv = new UsersDecisionVotes(decision, users, options, votes);
+        return udv;
     }
 }
+
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
index f30f0a4c5..8b87c5597 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
@@ -3,5 +3,13 @@
 /**
  * Created by davide on 27/10/15.
  */
-public class PollgramDAOException {
+public class PollgramDAOException extends RuntimeException {
+
+    public PollgramDAOException(String detailMessage) {
+        super(detailMessage);
+    }
+
+    public PollgramDAOException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
index 807cca9bb..3132c9071 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
@@ -1,10 +1,9 @@
 package org.pollgram.decision.dao;
 
 import android.support.annotation.Nullable;
-import android.util.Log;
 
-import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
@@ -12,14 +11,14 @@
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Date;
 import java.util.List;
 
 /**
  * Created by davide on 03/10/15.
  */
-public class PollgramDAOStubImpl extends PollgramDAO {
+@Deprecated
+class PollgramDAOStubImpl extends PollgramDAO {
 
     private static final String LOG_TAG = "DecisionDAOImpl";
 
@@ -33,15 +32,26 @@ public PollgramDAOStubImpl() {
         /// just for test
         int chatId = 39379118;
         int creatorId = 23483618;
-        decisions.add(new Decision(id++,chatId, creatorId,"what present do we buy ?",true, 1));
-        decisions.add(new Decision(id++,chatId, creatorId,"Where do we go ?",true, 0));
-        decisions.add(new Decision(id++,chatId, creatorId,"When will the party be ?",true, 0));
-        decisions.add(new Decision(id++,chatId, creatorId,"Do we add Slomp to the group ?",false, 0));
+        decisions.add(new Decision(id++,chatId, creatorId,"what present do we buy ?", id+"huge bla bla bla" ,true ,1));
+        decisions.add(new Decision(id++, chatId, creatorId, "Where do we go ?", id + "huge bla bla bla", true, 0));
+        decisions.add(new Decision(id++, chatId, creatorId, "When will the party be ?", id + "huge bla bla bla", true, 0));
+        decisions.add(new Decision(id++, chatId, creatorId, "Do we add Slomp to the group ?", id + "huge bla bla bla", false, 0));
+
+        choiches.add(new TextOption(id++,"Ski","They cost 385EUR i saw them at the corner shop",decisions.get(0).getId()));
+        choiches.add(new TextOption(id++,"Phone","The new StonexOne is AWESOME !!!",decisions.get(0).getId()));
+        choiches.add(new TextOption(id++,"Trip", "Yeah a trip trought Europe can be a nice idea",decisions.get(0).getId()));
+        choiches.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/",decisions.get(0).getId()));
 
-        choiches.add(new TextOption(id++, 5,2, decisions.get(0),"Ski","They cost 385EUR i saw them at the corner shop"));
-        choiches.add(new TextOption(id++, 3,4, decisions.get(0),"Phone","The new StonexOne is AWESOME !!!"));
-        choiches.add(new TextOption(id++,2,5, decisions.get(0), "Trip", "Yeah a trip trought Europe can be a nice idea"));
-        choiches.add(new TextOption(id++,2,5, decisions.get(0), "A stupid idea", "it is late and i have no more ideas ;-/"));
+    }
+
+    @Override
+    public Decision insert(Decision d) {
+        decisions.add(d);
+        return d;
+    }
+
+    @Override
+    public void update(Decision d) {
 
     }
 
@@ -63,6 +73,10 @@ public Decision getDecision(long decisionId) {
         return outList;
     }
 
+    @Override
+    public Option getOption(long optionId) {
+        return null;
+    }
 
     @Override
     public List<Option> getOptions(Decision decision) {
@@ -83,15 +97,17 @@ public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participa
         Decision decision = getDecision(decisionId);
         List<TLRPC.User> usersForDecision = getUsers(participantIds);
         List<Option> choichesForDecision= getOptions(decision) ;
-        UsersDecisionVotes udv = new UsersDecisionVotes(decision, usersForDecision, choichesForDecision);
+        List<Vote> votes = new ArrayList<>();
         for (int i = 0; i < usersForDecision.size(); i++) {
             for (int j = 0; j < choichesForDecision.size(); j++) {
                 Vote vote = getVote(usersForDecision.get(i).id, choichesForDecision.get(j));
-                udv.setVote(i,j,vote);
-                if (i == 0)
+                votes.add(vote);
+                if (i == 0) {
                     vote.setVote(null);
+                }
             }
         }
+        UsersDecisionVotes udv = new UsersDecisionVotes(decision, usersForDecision, choichesForDecision, votes);
         return udv;
     }
 
@@ -99,7 +115,7 @@ private Vote getVote(int userId, Option option) {
         // TODO so stub
         long stubId = option.getId()*17;
         Boolean voteValue = option.getId()%2 ==0 ? true : (option.getId()%3 ==0 ? null : false);
-        return new Vote(stubId, option,userId, voteValue, new Date());
+        return new Vote(stubId, voteValue, new Date(), userId, option.getId());
     }
 
 
@@ -121,10 +137,19 @@ private Vote getVote(int userId, Option option) {
         return votes;
     }
 
+    @Override
+    public Option insert(Option o) {
+        return null;
+    }
+
+    @Override
+    public void update(Option o) {
+
+    }
 
     @Override
-    public void save(Collection<Vote> votest2save) {
-        Log.e(LOG_TAG, "save not yet implemnted :-(");
+    public Vote save(Vote vote) {
+        return null;
     }
 }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java
index 81dbe18f5..7dc7211d8 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/DBBean.java
@@ -3,5 +3,40 @@
 /**
  * Created by davide on 27/10/15.
  */
-public class DBBean {
+public abstract class DBBean {
+    public static final long ID_NOT_SET = -1;
+
+    private long id;
+
+    protected DBBean(){
+        this(ID_NOT_SET);
+    }
+
+    private DBBean(long id) {
+        this.id = id;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof DBBean)) return false;
+
+        DBBean dbBean = (DBBean) o;
+
+        return getId() == dbBean.getId();
+
+    }
+
+    @Override
+    public int hashCode() {
+        return (int) (getId() ^ (getId() >>> 32));
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
index be06180b5..e8dd08b9e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
@@ -3,39 +3,36 @@
 /**
  * Created by davide on 01/10/15.
  */
-public class Decision {
+public class Decision extends  DBBean {
 
-    private final long id;
+    private String title;
+    private final String longDescription;
     private final int fullChatId;
     private final long userCreatorId;
-
-    private String description;
     private boolean open;
-    private int voteCount;
+    private int userThatVoteCount;
 
     // icon/image will be retrived externally by url or file.
     // Like the file containing the decision image can be named like decisio_<id>.png, and cached on the fs
 
-    public Decision(long id, int fullChatId, long userCreatorId) {
-        this.id = id;
-        this.fullChatId = fullChatId;
-        this.userCreatorId = userCreatorId;
-    }
-
-    public Decision(long id, int fullChatId, long userCreatorId, String description, boolean open, int voteCount) {
-        this.id = id;
+    public Decision(int fullChatId, long userCreatorId, String title, String longDescription,
+                    boolean open, int userThatVoteCount) {
         this.fullChatId = fullChatId;
         this.userCreatorId = userCreatorId;
-        this.description = description;
+        this.title = title;
+        this.longDescription = longDescription;
         this.open = open;
-        this.voteCount = voteCount;
+        this.userThatVoteCount = userThatVoteCount;
     }
 
-    public long getId() {
-        return id;
+    public Decision(long id, int fullChatId, long userCreatorId, String title, String longDescription,
+                    boolean open, int userThatVoteCount) {
+        this(fullChatId,userCreatorId,title, longDescription, open, userThatVoteCount);
+        setId(id);
+
     }
 
-    /**
+    /*
      * @return the id of an TLRPC.ChatFull
      */
     public int getFullChatId() {
@@ -50,43 +47,47 @@ public long getUserCreatorId() {
         return userCreatorId;
     }
 
-    public String getDescription() {
-        return description;
+    public String getTitle() {
+        return title;
     }
 
-    public void setDescription(String description) {
-        this.description = description;
+    public void setTitle(String title) {
+        this.title = title;
     }
 
     public boolean isOpen() {
         return open;
     }
 
-    public void setOpen(boolean open) {
-        this.open = open;
+    public String getLongDescription() {
+        return longDescription;
     }
 
-    public int getVoteCount() {
-        return voteCount;
+    public int getUserThatVoteCount() {
+        return userThatVoteCount;
     }
 
-    public void setVoteCount(int voteCount) {
-        this.voteCount = voteCount;
+    public void setOpen(boolean open) {
+        this.open = open;
     }
 
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        Decision decision = (Decision) o;
+    public int getUsersThatVoteCount() {
+        return userThatVoteCount;
+    }
 
-        return id == decision.id;
+    public void setUserThatVoteCount(int userThatVoteCount) {
+        this.userThatVoteCount = userThatVoteCount;
     }
 
     @Override
-    public int hashCode() {
-        return (int) (id ^ (id >>> 32));
+    public String toString() {
+        return "Decision{" +
+                "fullChatId=" + fullChatId +
+                ", userCreatorId=" + userCreatorId +
+                ", longDescription='" + longDescription + '\'' +
+                ", title='" + title + '\'' +
+                ", open=" + open +
+                ", userThatVoteCount=" + userThatVoteCount +
+                '}';
     }
-
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
index c04ef6489..c8bc9222e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
@@ -3,35 +3,8 @@
 /**
  * Created by davide on 03/10/15.
  */
-public abstract class Option implements Comparable<Option> {
-
-    protected final long id;
-    private final int positiveVoteCount;
-    private final int negativeVoteCount;
-
-    public Option(long id, int positiveVoteCount, int negativeVoteCount) {
-        this.id = id;
-        this.positiveVoteCount = positiveVoteCount;
-        this.negativeVoteCount = negativeVoteCount;
-    }
-
-    public long getId() {
-        return id;
-    }
-
-    public int getPositiveVoteCount() {
-        return positiveVoteCount;
-    }
-
-    public int getNegativeVoteCount() {
-        return negativeVoteCount;
-    }
+public abstract class Option extends DBBean {
 
     public abstract String getTitle();
 
-    @Override
-    public int compareTo(Option another) {
-        return this.positiveVoteCount - another.positiveVoteCount;
-    }
-
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
index a8b8e4630..64ee432a7 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
@@ -3,29 +3,28 @@
 /**
  * Created by davide on 01/10/15.
  */
-public class TextOption extends Choice {
+public class TextOption extends Option {
 
-    private final Decision decision;
+    private final long decisionId;
 
     // icon/image will be retrived externally by url or file
 
     private String title;
     private String longDescription;
 
-    public TextOption(long id, int positiveVoteCount, int negativeVoteCount, Decision decision) {
-        super(id, positiveVoteCount, negativeVoteCount);
-        this.decision = decision;
-    }
-
-    public TextOption(long id, int positiveVoteCount, int negativeVoteCount, Decision decision, String title, String longDescription) {
-        super(id, positiveVoteCount, negativeVoteCount);
+    public TextOption(String title, String longDescription, long decisionId) {
         this.title = title;
-        this.decision = decision;
+        this.decisionId = decisionId;
         this.longDescription = longDescription;
     }
 
-    public Decision getDecision() {
-        return decision;
+    public TextOption(long id, String title, String longDescription, long decisionId) {
+        this(title,longDescription,decisionId);
+        setId(id);
+    }
+
+    public long getDecisionId() {
+        return decisionId;
     }
 
     @Override
@@ -45,21 +44,6 @@ public void setLongDescription(String longDescription) {
         this.longDescription = longDescription;
     }
 
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        TextOption textOption = (TextOption) o;
-
-        return id == textOption.id;
-    }
-
-    @Override
-    public int hashCode() {
-        return (int) (id ^ (id >>> 32));
-    }
-
     @Override
     public String toString() {
         return title;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
index 5a7845889..7fc2474ef 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
@@ -9,7 +9,7 @@
 /**
  * Created by davide on 03/10/15.
  */
-public class TimeRangeOption extends Choice {
+public class TimeRangeOption extends Option {
 
     private final DateFormat DAY_DF = new SimpleDateFormat("yyyy/MM/dd");
     private final DateFormat DAY_TIME_DF = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");
@@ -22,17 +22,17 @@
         DAY, HOUR;
     }
 
-    public TimeRangeOption(long id, int positiveVoteCount, int negativeVoteCount, long id1, Date from, Date to, Accuracy accuracy) {
-        super(id, positiveVoteCount, negativeVoteCount);
-        id = id1;
+    public TimeRangeOption(Date from, Date to, Accuracy accuracy) {
         this.from = from;
         this.to = to;
         this.accuracy = accuracy;
     }
 
-    @Override
-    public long getId() {
-        return id;
+
+    public TimeRangeOption(long id, Date from, Date to, Accuracy accuracy) {
+        this(from, to,accuracy);
+        setId(id);
+
     }
 
     public Date getFrom() {
@@ -48,17 +48,9 @@ public Accuracy getAccuracy() {
     }
 
     @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        TimeRangeOption that = (TimeRangeOption) o;
-        return id == that.id;
-    }
-
-    @Override
-    public int hashCode() {
-        return (int) (id ^ (id >>> 32));
+    public String getTitle() {
+        // TODO
+        return from + " - " + to;
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java
index 699fb0b06..b0015a6a1 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UserIdOptionKey.java
@@ -4,4 +4,38 @@
  * Created by davide on 29/10/15.
  */
 public class UserIdOptionKey {
+    private final int userId;
+    private final long optionId;
+
+    public UserIdOptionKey(int userId, long optionId) {
+        this.userId = userId;
+        this.optionId = optionId;
+    }
+
+    public long getOptionId() {
+        return optionId;
+    }
+
+    public int getUserId() {
+        return userId;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof UserIdOptionKey)) return false;
+
+        UserIdOptionKey that = (UserIdOptionKey) o;
+
+        if (getUserId() != that.getUserId()) return false;
+        return getOptionId() == that.getOptionId();
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = getUserId();
+        result = 31 * result + (int) (getOptionId() ^ (getOptionId() >>> 32));
+        return result;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
index dd1914d00..ef7a317fc 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
@@ -1,7 +1,139 @@
 package org.pollgram.decision.data;
 
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * Created by davide on 13/10/15.
  */
 public class UsersDecisionVotes {
+
+    private static final String LOG_TAG = "UserDecVotes";
+
+
+    private final Comparator<Option> optionsComparator = new Comparator<Option>() {
+        @Override
+        public int compare(Option o1, Option o2) {
+            int o1VoteCount = getPositiveVoteCount(o1);
+            int o2VoteCount = getPositiveVoteCount(o2);
+            if (o1VoteCount == o2VoteCount)
+                return o1.getTitle().compareTo(o2.getTitle());
+            else
+                return o1VoteCount > o2VoteCount ? -1 : 1;
+        }
+    };
+
+    private final Decision decision;
+    private final List<TLRPC.User> users;
+    private final List<Option> options;
+    private final Map<UserIdOptionKey, Vote> voteMap = new HashMap<>();
+
+    public UsersDecisionVotes(Decision decision, List<TLRPC.User> users, List<Option> optionsPar, List<Vote> votes) {
+        this.decision = decision;
+        this.options = optionsPar;
+        this.users = users;
+        Map<Long,Option> idOptionMap = new HashMap<>();
+        for (Vote v : votes) {
+            Option option = idOptionMap.get(v.getOptionId());
+            if (option == null){
+                for (Option o : options) {
+                    if (o.getId() == v.getOptionId()){
+                        option = o;
+                        idOptionMap.put(option.getId(),option);
+                        break;
+                    }
+                }
+            }
+            if (option == null) {
+                Log.e(LOG_TAG, "voteId ["+v.getId()+"] refers to unknown option ["+v.getOptionId()+"] it will be skipped");
+                continue;
+            }
+            voteMap.put(new UserIdOptionKey(v.getUserId(), option.getId()), v);
+        }
+        Collections.sort(options,optionsComparator);
+    }
+
+    public Decision getDecision(){
+        return decision;
+    }
+
+    public List<TLRPC.User> getUsers(){
+        return users;
+    }
+
+    public List<Option> getOptions(){
+        return options;
+    }
+
+
+    public List<Vote> getVotes(int userID){
+        List<Vote> votes = new ArrayList<>();
+        for (Option o : getOptions()){
+            votes.add(getVotes(userID, o));
+        }
+        return votes;
+    }
+
+    public Vote getVotes(int userId, Option option){
+        Vote v = voteMap.get(new UserIdOptionKey(userId,option.getId()));
+        if (v == null) {
+            // userId never vote for option v
+            v = new Vote(userId,option.getId());
+            Log.d(LOG_TAG,"vote not found for userId["+userId+"] and optionId["+option.getId()+"]");
+        }
+        return v;
+    }
+
+    public void setVote(int userItem, Option option, Vote vote){
+        voteMap.put(new UserIdOptionKey(userItem,option.getId()), vote);
+        // update cache
+        cachedPositiveVoteCount.put(option,calculateVoteCount(option));
+        Collections.sort(options, optionsComparator);
+    }
+
+    private final Map<Option, Integer> cachedPositiveVoteCount = new HashMap<>();
+
+    /**
+     * @param option
+     * @return the number of positive count for option in index optionIndex
+     */
+    public int getPositiveVoteCount(Option option) {
+        Integer count = cachedPositiveVoteCount.get(option);
+        if (count != null)
+            return count;
+
+        count = calculateVoteCount(option);
+        cachedPositiveVoteCount.put(option,count);
+        return count;
+    }
+
+    private int calculateVoteCount(Option option) {
+        int count = 0;
+        for (UserIdOptionKey key : voteMap.keySet()){
+            if (option.getId() == key.getOptionId()){
+                Vote v = voteMap.get(key);
+                if (v.isVote() != null && v.isVote())
+                    count++;
+            }
+        }
+        return count;
+    }
+
+    public @Nullable Option getOption(long optionId) {
+        for(Option o : options){
+            if (o.getId() == optionId)
+                return o;
+        }
+        Log.d(LOG_TAG, "Option ["+optionId+"] not found.");
+        return null;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
index 71817dd9f..6803770e0 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
@@ -1,60 +1,69 @@
 package org.pollgram.decision.data;
 
+import android.support.annotation.Nullable;
+
+import java.util.Date;
+
 /**
  * Created by davide on 01/10/15.
  */
-public class Vote {
+public class Vote extends DBBean {
 
-    private final long id;
-    private final Choice option;
+    private Boolean vote;
+    private final long optionId;
     private final int userId;
+    private Date voteTime;
 
-    private boolean vote;
-
+    public Vote(long id, Boolean vote, Date voteTime, int userId, long optionId) {
+        this(vote, voteTime, userId, optionId);
+        setId(id);
+    }
 
-    public Vote(long id, Choice option, int userId) {
-        this.id = id;
-        this.option = option;
+    public Vote(Boolean vote, Date voteTime, int userId, long optionId) {
+        this.vote = vote;
+        this.voteTime = voteTime;
         this.userId = userId;
+        this.optionId = optionId;
     }
 
-    public int getUserId() {
-        return userId;
+    /**
+     * User for express a vote that the user never express
+     * @param userId
+     * @param optionId
+     */
+    public Vote(int userId, long optionId) {
+        this(null, null ,userId,optionId);
+
     }
 
-    public long getId() {
-        return id;
+    public int getUserId() {
+        return userId;
     }
 
-    public Choice getChoice() {
-        return option;
+    public long getOptionId() {
+        return optionId;
     }
 
-    public boolean isVote() {
+    public
+    @Nullable
+    Boolean isVote() {
         return vote;
     }
 
-    public void setVote(boolean vote) {
+    public void setVote(@Nullable Boolean vote) {
         this.vote = vote;
     }
 
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        Vote vote = (Vote) o;
-
-        return id == vote.id;
+    public Date getVoteTime() {
+        return voteTime;
     }
 
-    @Override
-    public int hashCode() {
-        return (int) (id ^ (id >>> 32));
+    public void setVoteTime(Date voteTime) {
+        this.voteTime = voteTime;
     }
 
     @Override
     public String toString() {
-        return Boolean.toString(vote);
+        return "vote : " + vote;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index d96b8e937..6d1b8b2f8 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -19,7 +19,7 @@
 import android.widget.Toast;
 
 import org.pollgram.decision.adapter.DecisionAdapter;
-import org.pollgram.decision.dao.DecisionDAOImpl;
+import org.pollgram.decision.dao.PollgramDAO;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.utils.PolgramUtils;
 import org.telegram.messenger.AndroidUtilities;
@@ -52,24 +52,20 @@
     private Context context;
 
     private boolean hideCloseDecision;
-    private DecisionDAOImpl decisionDAO;
+    private PollgramDAO decisionDAO;
     private int[] participantsUserIds;
     private TextView tvSubtitle;
 
     public DecisionsListFragment(){
-
     }
 
     public DecisionsListFragment(Bundle bundle) {
         super(bundle);
     }
-    // Since this is an object collection, use a FragmentStatePagerAdapter,
-// and NOT a FragmentPagerAdapter.
-
 
     @Override
     public boolean onFragmentCreate() {
-        decisionDAO = new DecisionDAOImpl();
+        decisionDAO = PollgramDAO.getInstance();
         hideCloseDecision = true;
         return true;
     }
@@ -126,15 +122,10 @@ public void onItemClick(int id) {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 Decision decision = (Decision) parent.getAdapter().getItem(position);
-//                Intent intent = new Intent(getParentActivity(), DecisionDetailFragment.class);
-//                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-//                intent.putExtra(DecisionDetailFragment.PAR_DECISION_ID, decision.getId());
-//                intent.putExtra(DecisionDetailFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
-//                getParentActivity().startActivity(intent);
                 Bundle bundle = new Bundle();
-                bundle.putLong(DecisionDetailFragment.PAR_DECISION_ID, decision.getId());
-                bundle.putIntArray(DecisionDetailFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
-                presentFragment(new DecisionDetailFragment(bundle));
+                bundle.putLong(VotesManagerFragment.PAR_DECISION_ID, decision.getId());
+                bundle.putIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
+                presentFragment(new VotesManagerFragment(bundle));
 
             }
         });
@@ -175,7 +166,7 @@ public void onClick(View v) {
 
     private void updateResult() {
         Boolean queryPar = hideCloseDecision ? true : null;
-        List<Decision> allDecisions = decisionDAO.find(null);
+        List<Decision> allDecisions = decisionDAO.getDecisions(null);
         List<Decision> filterDecision = new ArrayList<>();
         int openCount = 0 ;
         for (Decision d : allDecisions){
@@ -186,7 +177,7 @@ private void updateResult() {
                 filterDecision.add(d);
         }
 
-        tvSubtitle.setText(context.getString(R.string.decisionsCount,openCount, allDecisions.size()));
+        tvSubtitle.setText(context.getString(R.string.decisionsCount,openCount, allDecisions.size() - openCount));
         decisionsListView.setAdapter(new DecisionAdapter(context, filterDecision, currentChat.participants_count));
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
similarity index 71%
rename from TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index 6dd7dc99a..896cc15b6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -7,24 +7,18 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import org.pollgram.decision.dao.DecisionDAO;
-import org.pollgram.decision.dao.DecisionDAOImpl;
-import org.pollgram.decision.data.Choice;
+import org.pollgram.decision.dao.PollgramDAO;
 import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PolgramUtils;
 import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 
-import java.util.Map;
-
 /**
  * Created by davide on 04/10/15.
  */
-public class ChoicesManagerFragment extends BaseFragment {
+public class VotesManagerFragment extends BaseFragment {
 
     static final String LOG_TAG = "SlidingTabs";
 
@@ -33,20 +27,21 @@
     public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
 
     private int[] participantsUserIds;
-    private DecisionDAO decisionDAO;
+    private PollgramDAO pollgramDAO;
     private Decision decision;
 
-    public ChoicesManagerFragment(Bundle bundle) {
+    public VotesManagerFragment(Bundle bundle) {
         super(bundle);
     }
 
     @Override
     public boolean onFragmentCreate() {
         // init field
-        decisionDAO = new DecisionDAOImpl();
+        super.swipeBackEnabled = false;
+        pollgramDAO = PollgramDAO.getInstance();
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         participantsUserIds = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
-        decision = decisionDAO.findById(decisionId);
+        decision = pollgramDAO.getDecision(decisionId);
         return super.onFragmentCreate();
     }
 
@@ -55,7 +50,7 @@ public boolean onFragmentCreate() {
     public View createView(Context context) {
         // set up action bar
         // TODO add real icon
-        PolgramUtils.init(actionBar, decision.getDescription(), 18, R.drawable.attach_camera);
+        PolgramUtils.init(actionBar, decision.getTitle(), 18, R.drawable.attach_camera);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
@@ -68,14 +63,13 @@ public void onItemClick(int id) {
         fragmentView = new SizeNotifierFrameLayout(context);
         SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
         LayoutInflater li = LayoutInflater.from(context);
-        ViewGroup rootView = (ViewGroup)li.inflate(R.layout.decision_detail_main, (ViewGroup) fragmentView);
+        ViewGroup rootView = (ViewGroup)li.inflate(R.layout.votes_manager_main, (ViewGroup) fragmentView);
         // Create view
         TextView title = (TextView) rootView.findViewById(R.id.decision_detail_top_title);
-        // TODO this description is wrong !!!!!
-        title.setText(context.getString(R.string.decisionDetailSummarizeTitle, decision.getVoteCount(), participantsUserIds.length));
+        title.setText(context.getString(R.string.decisionDetailSummarizeTitle, decision.getUsersThatVoteCount(), participantsUserIds.length));
 
         android.support.v4.app.FragmentTransaction transaction = getParentActivity().getSupportFragmentManager().beginTransaction();
-        DecisionTabsFragment fragment = new DecisionTabsFragment();
+        VotesManagerTabsFragment fragment = new VotesManagerTabsFragment();
         fragment.setArguments(getArguments());
         transaction.replace(R.id.sample_content_fragment, fragment);
         transaction.commit();
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
similarity index 66%
rename from TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index 7ca22dc14..f14ed1c8e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/ChoicesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -37,11 +37,9 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-
-import org.pollgram.decision.adapter.ChoiceAdapter;
-import org.pollgram.decision.dao.DecisionDAO;
-import org.pollgram.decision.dao.DecisionDAOImpl;
-import org.pollgram.decision.data.Choice;
+import org.pollgram.decision.adapter.VoteListAdapter;
+import org.pollgram.decision.dao.PollgramDAO;
+import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PolgramUtils;
@@ -54,31 +52,32 @@
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.util.Collection;
-import java.util.List;
 
-public class ChoicesManagerTabsFragment extends Fragment {
+public class VotesManagerTabsFragment extends Fragment {
 
     static final String LOG_TAG = "SlidingTabs";
 
     private SlidingTabLayout slidingTabLayout;
     private ViewPager viewPager;
 
-    private DecisionDAO decisionDAO;
-    private List<Vote> votes;
+    private PollgramDAO pollgramDAO;
     private UsersDecisionVotes usersDecisionVotes;
+    private int currentUserId;
+
+    private ViewGroup optionTableViewContainer;
 
-    public ChoicesManagerTabsFragment() {
+    public VotesManagerTabsFragment() {
     }
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        decisionDAO = new DecisionDAOImpl();
-        long decisionId = getArguments().getLong(ChoicesManagerFragment.PAR_DECISION_ID);
-        votes = decisionDAO.getUserVoteForDecision(decisionId, UserConfig.getCurrentUser().id);
-        int[] participantsUserIds = getArguments().getIntArray(ChoicesManagerFragment.PAR_PARTICIPANT_IDS);
-        usersDecisionVotes = new DecisionDAOImpl().getUsersDecisionVotes(decisionId, participantsUserIds);
+        pollgramDAO = PollgramDAO.getInstance();
+        long decisionId = getArguments().getLong(VotesManagerFragment.PAR_DECISION_ID);
+        int[] participantsUserIds = getArguments().getIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS);
+        usersDecisionVotes = pollgramDAO.getUsersDecisionVotes(decisionId, participantsUserIds);
+        currentUserId = UserConfig.getCurrentUser().id;
     }
 
     /**
@@ -100,6 +99,9 @@ public void onViewCreated(View view, Bundle savedInstanceState) {
         slidingTabLayout.setViewPager(viewPager);
     }
 
+    private boolean areThereNoOptions(){
+        return usersDecisionVotes.getOptions().size() == 0;
+    }
 
     /**
      * PagerAdapter for decisions
@@ -154,18 +156,24 @@ public CharSequence getPageTitle(int position) {
         public Object instantiateItem(ViewGroup container, int position) {
             View rootView = null;
             LayoutInflater inflater = getActivity().getLayoutInflater();
-            switch (position) {
-                case OPTION_ID: {
-                    rootView = getOptionsListView(container, inflater);
-                    break;
-                }
-                case TABLE_VIEW_ID: {
-                    rootView = getOptionsTable(container, inflater);
-                    break;
+            if (areThereNoOptions()) {
+                rootView = inflater.inflate(R.layout.votes_manager_no_option_present, container, false);
+            } else {
+                switch (position) {
+                    case OPTION_ID: {
+                        rootView = getOptionsListView(container, inflater);
+                        break;
+                    }
+                    case TABLE_VIEW_ID: {
+                        optionTableViewContainer = new LinearLayout(getContext());
+                        updateOptionsTableView(optionTableViewContainer, inflater);
+                        rootView = optionTableViewContainer;
+                        break;
+                    }
+                    default:
+                        rootView = null;
+                        break;
                 }
-                default:
-                    rootView = null;
-                    break;
             }
             container.addView(rootView);
             return rootView;
@@ -185,24 +193,38 @@ public void destroyItem(ViewGroup container, int position, Object object) {
     @NonNull
     private View getOptionsListView(ViewGroup container, LayoutInflater inflater) {
         View rootView;
-        rootView = inflater.inflate(R.layout.decision_option_list, container, false);
+        rootView = inflater.inflate(R.layout.votes_manager_list_tab, container, false);
         ListView listView = (ListView) rootView.findViewById(R.id.decision_option_lw_options);
-        final ChoiceAdapter adapter = new ChoiceAdapter(getActivity(), votes);
+        final VoteListAdapter adapter = new VoteListAdapter(getActivity(), usersDecisionVotes.getVotes(currentUserId));
         listView.setAdapter(adapter);
         final Button btnSaveOption = (Button) rootView.findViewById(R.id.decision_option_btn_save_votes);
         btnSaveOption.setOnClickListener(new View.OnClickListener() {
             @Override
-            public void onClick(View v) {
+            public void onClick(View view) {
+
+                Collection<Vote> votes2Save = adapter.getNewVoteSet();
+                Log.i(LOG_TAG, "saving votes[" + votes2Save + "]");
+                for (Vote v : votes2Save) {
+                    // update persistence
+                    Vote saved = pollgramDAO.save(v);
+
+                    // update data structure
+                    Option option = usersDecisionVotes.getOption(v.getOptionId());
+                    usersDecisionVotes.setVote(currentUserId, option, saved);
+                }
+                // set new sorted  votes in the adapter
+                adapter.setVotes(usersDecisionVotes.getVotes(currentUserId));
+                adapter.notifyDataSetChanged();
+
+                // Update table user interface
+                optionTableViewContainer.removeAllViews();
+                updateOptionsTableView(optionTableViewContainer, getActivity().getLayoutInflater());
 
-                Collection<Vote> votest2save = adapter.getNewVoteSet();
-                Log.i(LOG_TAG, "saving votes[" + votest2save + "]");
-                decisionDAO.save(votest2save);
                 Toast.makeText(getContext(), R.string.voteSaved, Toast.LENGTH_SHORT).show();
-                ;
             }
         });
 
-        adapter.setOnVoteChageListener(new ChoiceAdapter.OnVoteChangeListener() {
+        adapter.setOnVoteChageListener(new VoteListAdapter.OnVoteChangeListener() {
             @Override
             public void voteChanges(boolean areThereChangesToSave) {
                 if (areThereChangesToSave)
@@ -215,8 +237,8 @@ public void voteChanges(boolean areThereChangesToSave) {
     }
 
     @NonNull
-    private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
-        View rootView = inflater.inflate(R.layout.decision_option_table, container,false);
+    private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater) {
+        View rootView = inflater.inflate(R.layout.votes_manager_table_tab, container, false);
 
         TableLayout tableLayout = (TableLayout) rootView.findViewById(R.id.scrollable_part);
         TableLayout fixedColumn = (TableLayout) rootView.findViewById(R.id.fixed_column);
@@ -227,50 +249,43 @@ private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
             TableRow row = newRow();
             // first cell is empty
             TextView emptyCell = new TextView(getContext());
-
-            //add2Row(row, emptyCell,-1);
-            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
-                Choice c = usersDecisionVotes.getChoices().get(j);
+            for (Option option : usersDecisionVotes.getOptions()) {
                 TextView tvChoice = new TextView(getContext());
-                tvChoice.setText(c.getTitle());
+                tvChoice.setText(option.getTitle());
                 tvChoice.setGravity(Gravity.CENTER);
                 tvChoice.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
                 tvChoice.setTypeface(tvChoice.getTypeface(), Typeface.BOLD);
                 tvChoice.setEllipsize(TextUtils.TruncateAt.END);
                 tvChoice.setLines(1);
                 tvChoice.setWidth(AndroidUtilities.dp(80));
-                add2Row(row, tvChoice,firstRowHeight);
+                add2Row(row, tvChoice, firstRowHeight);
             }
             tableLayout.addView(row);
-            fixedColumn.addView(emptyCell,ViewGroup.LayoutParams.WRAP_CONTENT, firstRowHeight);
+            fixedColumn.addView(emptyCell, ViewGroup.LayoutParams.WRAP_CONTENT, firstRowHeight);
         }
         // build second row
         {
             int secondRowHeight = AndroidUtilities.dp(33);
-
             TextView emptyCell = new TextView(getContext());
-//            add2Row(row, emptyCell, -1);
 
             TableRow row = newRow();
-            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
-                Choice c = usersDecisionVotes.getChoices().get(j);
+            for (Option option : usersDecisionVotes.getOptions()) {
                 TextView tvVoteCount = new TextView(getContext());
                 tvVoteCount.setTextSize(18);
                 tvVoteCount.setGravity(Gravity.CENTER);
-                tvVoteCount.setText(Integer.toString(c.getPositiveVoteCount()));
+                tvVoteCount.setText(Integer.toString(usersDecisionVotes.getPositiveVoteCount(option)));
                 tvVoteCount.setHeight(secondRowHeight);
-                add2Row(row, tvVoteCount,secondRowHeight);
+                add2Row(row, tvVoteCount, secondRowHeight);
             }
             tableLayout.addView(row);
-            fixedColumn.addView(emptyCell,ViewGroup.LayoutParams.WRAP_CONTENT, secondRowHeight);
+            fixedColumn.addView(emptyCell, ViewGroup.LayoutParams.WRAP_CONTENT, secondRowHeight);
         }
 
         int otherRowHeight = AndroidUtilities.dp(33);
 
         // build other row row
-        for(int i=0; i < usersDecisionVotes.getUsers().size() ;i++){
+        for (final TLRPC.User user : usersDecisionVotes.getUsers()) {
             TableRow row = newRow();
-            TLRPC.User user = usersDecisionVotes.getUsers().get(i);
 
             LinearLayout usernameLayout = new LinearLayout(getContext());
             usernameLayout.setOrientation(LinearLayout.HORIZONTAL);
@@ -285,7 +300,7 @@ private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
                 AvatarDrawable avatarDrawable = new AvatarDrawable(user);
                 avatarImageView.setImage(newPhoto, "20_20", avatarDrawable);
                 int imageSize = otherRowHeight - 3;
-                usernameLayout.addView(avatarImageView, LayoutHelper.createFrame(30, 30,Gravity.CENTER,10,0,10,0));
+                usernameLayout.addView(avatarImageView, LayoutHelper.createFrame(30, 30, Gravity.CENTER, 10, 0, 10, 0));
             }
 
             {
@@ -295,7 +310,7 @@ private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
                 userNameTv.setPadding(15, 0, 0, 0);
                 userNameTv.setEllipsize(TextUtils.TruncateAt.END);
                 userNameTv.setText(PolgramUtils.asString(user));
-                int maxWith = AndroidUtilities.dp(105);
+                int maxWith = AndroidUtilities.dp(115);
                 userNameTv.setMaxWidth(maxWith);
                 userNameTv.setMaxLines(1);
                 userNameTv.setGravity(Gravity.CENTER_VERTICAL);
@@ -307,41 +322,54 @@ private View getOptionsTable(ViewGroup container, LayoutInflater inflater) {
             Button remindButton = new Button(getContext());
             remindButton.setBackgroundResource(R.drawable.ic_smiles_bell_active);
             remindButton.setGravity(Gravity.LEFT);
+            remindButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    String message = getContext().getString(R.string.remindToUserSent,PolgramUtils.asString(user));
+                    Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
+                    // TODO implement
+                }
+            });
+
             usernameLayout.addView(remindButton, LayoutHelper.createFrame(35, 35, Gravity.LEFT, 0, 3, 0, 0));
             usernameLayout.setBackgroundResource(R.drawable.cell_normal);
             fixedColumn.addView(usernameLayout, ViewGroup.LayoutParams.WRAP_CONTENT, otherRowHeight);
-            //   add2Row(row, linearLayout);
 
             boolean atLeastOneIsNull = false;
-            for (int j = 0; j < usersDecisionVotes.getChoices().size(); j++) {
-                Vote v = usersDecisionVotes.getVote(i, j);
+            for (Option option : usersDecisionVotes.getOptions()) {
+                Vote v = usersDecisionVotes.getVotes(user.id, option);
                 View item;
-                if (v.isVote() != null) {
-                    ImageView vote = new ImageView(getContext());
-                    if (v.isVote()) {
-                        vote.setImageResource(R.drawable.checkbig);
-                        vote.setBackgroundResource(R.drawable.cell_vote_positive);
-                        add2Row(row, vote, otherRowHeight,R.drawable.cell_vote_positive);
-                    } else
-                        add2Row(row, vote, otherRowHeight, R.drawable.cell_vote_negative);
-                } else {
+                if (v.isVote() == null)
                     atLeastOneIsNull = true;
-                    TextView noVoteTv = new TextView(getContext());
-                    noVoteTv.setText(R.string.no_vote_desc);
-                    noVoteTv.setTypeface(noVoteTv.getTypeface(), Typeface.BOLD);
-                    noVoteTv.setGravity(Gravity.CENTER);
-                    noVoteTv.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
-                    add2Row(row, noVoteTv, otherRowHeight,R.drawable.cell_vote_notpresent);
-                }
+                add2Row(row, newVoteView(v), otherRowHeight);
             }
             if (!atLeastOneIsNull)
                 remindButton.setVisibility(View.INVISIBLE);
 
             tableLayout.addView(row);
         }
+        container.addView(rootView, ViewGroup.LayoutParams.MATCH_PARENT,
+                ViewGroup.LayoutParams.MATCH_PARENT);
         return rootView;
     }
 
+    private ImageView newVoteView(Vote v) {
+        ImageView voteImageView = new ImageView(getContext());
+        if (v.isVote() != null) {
+            if (v.isVote()) {
+                voteImageView.setImageResource(R.drawable.checkbig);
+                voteImageView.setBackgroundResource(R.drawable.cell_vote_positive);
+            } else {
+                voteImageView.setImageResource(0);
+                voteImageView.setBackgroundResource(R.drawable.cell_vote_negative);
+            }
+        } else {
+            voteImageView.setImageResource(R.drawable.unknown_vote);
+            voteImageView.setBackgroundResource(R.drawable.cell_vote_notpresent);
+        }
+        return voteImageView;
+    }
+
 
     private TableRow newRow(){
         TableRow row = new TableRow(getContext());
@@ -351,16 +379,12 @@ private TableRow newRow(){
     }
 
 
-    private void add2Row(TableRow row, View view, int height, int drawableBackGround){
+    private void add2Row(TableRow row, View view, int height){
         view.setPadding(11,11,11,11);
-        view.setBackgroundResource(drawableBackGround);
         view.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                 height, Gravity.RIGHT));
         row.addView(view, ViewGroup.LayoutParams.WRAP_CONTENT, height);
     }
 
-    private void add2Row(TableRow row, View view, int heigth) {
-        add2Row(row, view, heigth, R.drawable.cell_normal);
-    }
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
index 275f8cdb0..3428ff059 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
@@ -6,9 +6,13 @@
 import android.view.Gravity;
 import android.widget.TextView;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.UserObject;
+import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
@@ -53,4 +57,23 @@ public static ActionBar init(ActionBar actionBar, String title,int titleFontSize
         return actionBar;
     }
 
+    public static String asString(TLRPC.User currentUser){
+        if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+            if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                return PhoneFormat.getInstance().format("+" + currentUser.phone);
+            } else {
+                return UserObject.getUserName(currentUser);
+            }
+        } else {
+            return UserObject.getUserName(currentUser);
+        }
+    }
+//
+//    public static String resize(String str, int maxLenght){
+//        if (str == null || str.length() < maxLenght)
+//            return str;
+//        else
+//            return str.substring(0,maxLenght -3) + "...";
+//    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
index 319428f0b..01bca2621 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
@@ -117,10 +117,10 @@ public int size() {
      * reference to the old item and puts the new item into the backing array even if
      * {@link Callback#areContentsTheSame(Object, Object)} returns false.
      * <p>
-     * If the sorting criteria of the item is changed, SortedList won't be able to find
+     * If the sorting criteria of the item is changed, SortedList won't be able to getOptions
      * its duplicate in the list which will result in having a duplicate of the Item in the list.
      * If you need to update sorting criteria of an item that already exists in the list,
-     * use {@link #updateItemAt(int, Object)}. You can find the index of the item using
+     * use {@link #updateItemAt(int, Object)}. You can getOptions the index of the item using
      * {@link #indexOf(Object)} before you update the object.
      *
      * @param item The item to be added into the list.
@@ -522,7 +522,7 @@ public void updateItemAt(int index, T item) {
      *     mSortedList.recalculatePositionOfItemAt(position);
      * </pre>
      * In the example above, because the sorting criteria of the item has been changed,
-     * mSortedList.indexOf(item) will not be able to find the item. This is why the code above
+     * mSortedList.indexOf(item) will not be able to getOptions the item. This is why the code above
      * first
      * gets the position before editing the item, edits it and informs the SortedList that item
      * should be repositioned.
@@ -569,7 +569,7 @@ public T get(int index) throws IndexOutOfBoundsException {
     /**
      * Returns the position of the provided item.
      *
-     * @param item The item to query for position.
+     * @param item The item to getDecisions for position.
      *
      * @return The position of the provided item or {@link #INVALID_POSITION} if item is not in the
      * list.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
index e247875c3..2e0d1ee81 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
@@ -197,7 +197,7 @@ void removeAllViewsUnfiltered() {
     }
 
     /**
-     * This can be used to find a disappearing view by position.
+     * This can be used to getOptions a disappearing view by position.
      *
      * @param position The adapter position of the item.
      * @param type     View type, can be {@link RecyclerView#INVALID_TYPE}.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
index 0c9596a89..2b402eaa5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
@@ -234,7 +234,7 @@ public boolean checkLayoutParams(RecyclerView.LayoutParams lp) {
     /**
      * Sets the source to get the number of spans occupied by each item in the adapter.
      *
-     * @param spanSizeLookup {@link SpanSizeLookup} instance to be used to query number of spans
+     * @param spanSizeLookup {@link SpanSizeLookup} instance to be used to getDecisions number of spans
      *                       occupied by each item
      */
     public void setSpanSizeLookup(SpanSizeLookup spanSizeLookup) {
@@ -346,10 +346,10 @@ private int getSpanGroupIndex(RecyclerView.Recycler recycler, RecyclerView.State
         final int adapterPosition = recycler.convertPreLayoutPositionToPostLayout(viewPosition);
         if (adapterPosition == -1) {
             if (DEBUG) {
-                throw new RuntimeException("Cannot find span group index for position "
+                throw new RuntimeException("Cannot getOptions span group index for position "
                         + viewPosition);
             }
-            Log.w(TAG, "Cannot find span size for pre layout position. " + viewPosition);
+            Log.w(TAG, "Cannot getOptions span size for pre layout position. " + viewPosition);
             return 0;
         }
         return mSpanSizeLookup.getSpanGroupIndex(adapterPosition, mSpanCount);
@@ -366,10 +366,10 @@ private int getSpanIndex(RecyclerView.Recycler recycler, RecyclerView.State stat
         final int adapterPosition = recycler.convertPreLayoutPositionToPostLayout(pos);
         if (adapterPosition == -1) {
             if (DEBUG) {
-                throw new RuntimeException("Cannot find span index for pre layout position. It is"
+                throw new RuntimeException("Cannot getOptions span index for pre layout position. It is"
                         + " not cached, not in the adapter. Pos:" + pos);
             }
-            Log.w(TAG, "Cannot find span size for pre layout position. It is"
+            Log.w(TAG, "Cannot getOptions span size for pre layout position. It is"
                     + " not cached, not in the adapter. Pos:" + pos);
             return 0;
         }
@@ -387,10 +387,10 @@ private int getSpanSize(RecyclerView.Recycler recycler, RecyclerView.State state
         final int adapterPosition = recycler.convertPreLayoutPositionToPostLayout(pos);
         if (adapterPosition == -1) {
             if (DEBUG) {
-                throw new RuntimeException("Cannot find span size for pre layout position. It is"
+                throw new RuntimeException("Cannot getOptions span size for pre layout position. It is"
                         + " not cached, not in the adapter. Pos:" + pos);
             }
-            Log.w(TAG, "Cannot find span size for pre layout position. It is"
+            Log.w(TAG, "Cannot getOptions span size for pre layout position. It is"
                     + " not cached, not in the adapter. Pos:" + pos);
             return 1;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
index 44864b0ff..eb6448e97 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
@@ -54,7 +54,7 @@
 
 
     /**
-     * While trying to find next view to focus, LayoutManager will not try to scroll more
+     * While trying to getOptions next view to focus, LayoutManager will not try to scroll more
      * than this factor times the total space of the list. If layout is vertical, total space is the
      * height minus padding, if layout is horizontal, total space is the width minus padding.
      */
@@ -437,7 +437,7 @@ public PointF computeScrollVectorForPosition(int targetPosition) {
     @Override
     public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
         // layout algorithm:
-        // 1) by checking children and other variables, find an anchor coordinate and an anchor
+        // 1) by checking children and other variables, getOptions an anchor coordinate and an anchor
         //  item position.
         // 2) fill towards start, stacking from bottom
         // 3) fill towards end, stacking from top
@@ -573,7 +573,7 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
         if (getChildCount() > 0) {
             // because layout from end may be changed by scroll to position
             // we re-calculate it.
-            // find which side we should check for gaps.
+            // getOptions which side we should check for gaps.
             if (mShouldReverseLayout ^ mStackFromEnd) {
                 int fixOffset = fixLayoutEndGap(endOffset, recycler, state, true);
                 startOffset += fixOffset;
@@ -620,7 +620,7 @@ void onAnchorReady(RecyclerView.Recycler recycler, RecyclerView.State state,
      */
     private void layoutForPredictiveAnimations(RecyclerView.Recycler recycler,
             RecyclerView.State state, int startOffset,  int endOffset) {
-        // If there are scrap children that we did not layout, we need to find where they did go
+        // If there are scrap children that we did not layout, we need to getOptions where they did go
         // and layout them accordingly so that animations can work as expected.
         // This case may happen if new views are added or an existing view expands and pushes
         // another view out of bounds.
@@ -1462,7 +1462,7 @@ private int convertFocusDirectionToLayoutDirection(int focusDirection) {
     }
 
     /**
-     * Convenience method to find the child closes to start. Caller should check it has enough
+     * Convenience method to getOptions the child closes to start. Caller should check it has enough
      * children.
      *
      * @return The child closes to start of the layout from user's perspective.
@@ -1472,7 +1472,7 @@ private View getChildClosestToStart() {
     }
 
     /**
-     * Convenience method to find the child closes to end. Caller should check it has enough
+     * Convenience method to getOptions the child closes to end. Caller should check it has enough
      * children.
      *
      * @return The child closes to end of the layout from user's perspective.
@@ -1482,7 +1482,7 @@ private View getChildClosestToEnd() {
     }
 
     /**
-     * Convenience method to find the visible child closes to start. Caller should check if it has
+     * Convenience method to getOptions the visible child closes to start. Caller should check if it has
      * enough children.
      *
      * @param completelyVisible Whether child should be completely visible or not
@@ -1500,7 +1500,7 @@ private View findFirstVisibleChildClosestToStart(boolean completelyVisible,
     }
 
     /**
-     * Convenience method to find the visible child closes to end. Caller should check if it has
+     * Convenience method to getOptions the visible child closes to end. Caller should check if it has
      * enough children.
      *
      * @param completelyVisible Whether child should be completely visible or not
@@ -1523,7 +1523,7 @@ private View findFirstVisibleChildClosestToEnd(boolean completelyVisible,
      * closest to the end of the layout.
      * <p>
      * Due to ambiguous adapter updates or children being removed, some children's positions may be
-     * invalid. This method is a best effort to find a position within adapter bounds if possible.
+     * invalid. This method is a best effort to getOptions a position within adapter bounds if possible.
      * <p>
      * It also prioritizes children that are within the visible bounds.
      * @return A View that can be used an an anchor View.
@@ -1539,7 +1539,7 @@ private View findReferenceChildClosestToEnd(RecyclerView.Recycler recycler,
      * closest to the start of the layout.
      * <p>
      * Due to ambiguous adapter updates or children being removed, some children's positions may be
-     * invalid. This method is a best effort to find a position within adapter bounds if possible.
+     * invalid. This method is a best effort to getOptions a position within adapter bounds if possible.
      * <p>
      * It also prioritizes children that are within the visible bounds.
      *
@@ -1717,7 +1717,7 @@ public View onFocusSearchFailed(View focused, int focusDirection,
         if (referenceChild == null) {
             if (DEBUG) {
                 Log.d(TAG,
-                        "Cannot find a child with a valid position to be used for focus search.");
+                        "Cannot getOptions a child with a valid position to be used for focus search.");
             }
             return null;
         }
@@ -1922,7 +1922,7 @@ public void prepareForDrop(View view, View target, int x, int y) {
 
         /**
          * When LLM needs to layout particular views, it sets this list in which case, LayoutState
-         * will only return views from this list and return null if it cannot find an item.
+         * will only return views from this list and return null if it cannot getOptions an item.
          */
         List<RecyclerView.ViewHolder> mScrapList = null;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
index dbb50209c..c02bedd58 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
@@ -224,7 +224,7 @@ protected int getVerticalSnapPreference() {
      * @see #computeScrollVectorForPosition(int)
      */
     protected void updateActionForInterimTarget(Action action) {
-        // find an interim target position
+        // getOptions an interim target position
         PointF scrollVector = computeScrollVectorForPosition(getTargetPosition());
         if (scrollVector == null || (scrollVector.x == 0 && scrollVector.y == 0)) {
             Log.e(TAG, "To support smooth scrolling, you should override \n"
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
index b2e508a2d..9be8f7708 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
@@ -112,7 +112,7 @@ void swapMoveRemove(List<UpdateOp> list, int movePos, UpdateOp moveOp,
             return;
         }
 
-        // now find out the new locations for move actions
+        // now getOptions out the new locations for move actions
         if (moveIsBackwards) {
             if (extraRm != null) {
                 if (moveOp.positionStart > extraRm.positionStart) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/PositionMap.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/PositionMap.java
index fc98b3f8f..19b364f2b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/PositionMap.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/PositionMap.java
@@ -296,7 +296,7 @@ public int indexOfKey(int key) {
      * specified value.
      * <p>Beware that this is a linear search, unlike lookups by key,
      * and that multiple keys can map to the same value and this will
-     * find only one of them.
+     * getOptions only one of them.
      * <p>Note also that unlike most collections' {@code indexOf} methods,
      * this method compares values using {@code ==} rather than {@code equals}.
      */
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
index 3ace50994..2707cafb8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
@@ -241,7 +241,7 @@
     ChildHelper mChildHelper;
 
     /**
-     * Prior to L, there is no way to query this variable which is why we override the setter and
+     * Prior to L, there is no way to getDecisions this variable which is why we override the setter and
      * track it here.
      */
     private boolean mClipToPadding;
@@ -304,7 +304,7 @@ public void run() {
     /**
      * This variable is incremented during a dispatchLayout and/or scroll.
      * Some methods should not be called during these periods (e.g. adapter data change).
-     * Doing so will create hard to find bugs so we better check it and throw an exception.
+     * Doing so will create hard to getOptions bugs so we better check it and throw an exception.
      *
      * @see #assertInLayoutOrScroll(String)
      * @see #assertNotInLayoutOrScroll(String)
@@ -488,7 +488,7 @@ private void createLayoutManager(Context context, String className, AttributeSet
                     setLayoutManager(constructor.newInstance(constructorArgs));
                 } catch (ClassNotFoundException e) {
                     throw new IllegalStateException(attrs.getPositionDescription()
-                            + ": Unable to find LayoutManager " + className, e);
+                            + ": Unable to getOptions LayoutManager " + className, e);
                 } catch (InvocationTargetException e) {
                     throw new IllegalStateException(attrs.getPositionDescription()
                             + ": Could not instantiate the LayoutManager: " + className, e);
@@ -628,7 +628,7 @@ public ViewHolder findViewHolder(int position) {
                 // LM thinks view is a child.
                 if (mChildHelper.isHidden(vh.itemView)) {
                     if (DEBUG) {
-                        Log.d(TAG, "assuming view holder cannot be find because it is hidden");
+                        Log.d(TAG, "assuming view holder cannot be getOptions because it is hidden");
                     }
                     return null;
                 }
@@ -2919,7 +2919,7 @@ void dispatchLayout() {
                         mRecycler.mChangedScrap.contains(oldHolder)) {
                     animateChange(oldHolder, newChangedHolders.get(key));
                 } else if (DEBUG) {
-                    Log.e(TAG, "cannot find old changed holder in changed scrap :/" + oldHolder);
+                    Log.e(TAG, "cannot getOptions old changed holder in changed scrap :/" + oldHolder);
                 }
             }
         }
@@ -3159,7 +3159,7 @@ public void draw(Canvas c) {
             mItemDecorations.get(i).onDrawOver(c, this, mState);
         }
         // TODO If padding is not 0 and chilChildrenToPadding is false, to draw glows properly, we
-        // need find children closest to edges. Not sure if it is worth the effort.
+        // need getOptions children closest to edges. Not sure if it is worth the effort.
         boolean needsInvalidate = false;
         if (mLeftGlow != null && !mLeftGlow.isFinished()) {
             final int restore = c.save();
@@ -3482,7 +3482,7 @@ public void invalidateItemDecorations() {
     /**
      * Retrieve the {@link ViewHolder} for the given child view.
      *
-     * @param child Child of this RecyclerView to query for its ViewHolder
+     * @param child Child of this RecyclerView to getDecisions for its ViewHolder
      * @return The child view's ViewHolder
      */
     public ViewHolder getChildViewHolder(View child) {
@@ -3513,7 +3513,7 @@ public int getChildPosition(View child) {
     /**
      * Return the adapter position that the given child view corresponds to.
      *
-     * @param child Child View to query
+     * @param child Child View to getDecisions
      * @return Adapter position corresponding to the given view or {@link #NO_POSITION}
      */
     public int getChildAdapterPosition(View child) {
@@ -3527,7 +3527,7 @@ public int getChildAdapterPosition(View child) {
      * This position may not be equal to Item's adapter position if there are pending changes
      * in the adapter which have not been reflected to the layout yet.
      *
-     * @param child Child View to query
+     * @param child Child View to getDecisions
      * @return Adapter position of the given View as of last layout pass or {@link #NO_POSITION} if
      * the View is representing a removed item.
      */
@@ -3539,7 +3539,7 @@ public int getChildLayoutPosition(View child) {
     /**
      * Return the stable item id that the given child view corresponds to.
      *
-     * @param child Child View to query
+     * @param child Child View to getDecisions
      * @return Item id corresponding to the given view or {@link #NO_ID}
      */
     public long getChildItemId(View child) {
@@ -3620,7 +3620,7 @@ ViewHolder findViewHolderForPosition(int position, boolean checkNewPosition) {
                 }
             }
         }
-        // This method should not query cached views. It creates a problem during adapter updates
+        // This method should not getDecisions cached views. It creates a problem during adapter updates
         // when we are dealing with already laid out views. Also, for the public method, it is more
         // reasonable to return null if position is not laid out.
         return null;
@@ -3645,7 +3645,7 @@ public ViewHolder findViewHolderForItemId(long id) {
                 return holder;
             }
         }
-        // this method should not query cached views. They are not children so they
+        // this method should not getDecisions cached views. They are not children so they
         // should not be returned in this public method
         return null;
     }
@@ -4451,7 +4451,7 @@ View getViewForPosition(int position, boolean dryRun) {
             }
             boolean fromScrap = false;
             ViewHolder holder = null;
-            // 0) If there is a changed scrap, try to find from there
+            // 0) If there is a changed scrap, try to getOptions from there
             if (mState.isPreLayout()) {
                 holder = getChangedScrapViewForPosition(position);
                 fromScrap = holder != null;
@@ -4821,7 +4821,7 @@ ViewHolder getChangedScrapViewForPosition(int position) {
             if (mChangedScrap == null || (changedScrapSize = mChangedScrap.size()) == 0) {
                 return null;
             }
-            // find by position
+            // getOptions by position
             for (int i = 0; i < changedScrapSize; i++) {
                 final ViewHolder holder = mChangedScrap.get(i);
                 if (!holder.wasReturnedFromScrap() && holder.getLayoutPosition() == position) {
@@ -4829,7 +4829,7 @@ ViewHolder getChangedScrapViewForPosition(int position) {
                     return holder;
                 }
             }
-            // find by id
+            // getOptions by id
             if (mAdapter.hasStableIds()) {
                 final int offsetPosition = mAdapterHelper.findPositionOffset(position);
                 if (offsetPosition > 0 && offsetPosition < mAdapter.getItemCount()) {
@@ -5143,7 +5143,7 @@ void markItemDecorInsetsDirty() {
      * ben controlled by the developer.
      * <p>
      * When {@link Recycler#getViewForPosition(int)} is called, Recycler checks attached scrap and
-     * first level cache to find a matching View. If it cannot find a suitable View, Recycler will
+     * first level cache to getOptions a matching View. If it cannot getOptions a suitable View, Recycler will
      * call the {@link #getViewForPositionAndType(Recycler, int, int)} before checking
      * {@link RecycledViewPool}.
      * <p>
@@ -5299,7 +5299,7 @@ public final void bindViewHolder(VH holder, int position) {
          * a single view type for the adapter. Unlike ListView adapters, types need not
          * be contiguous. Consider using id resources to uniquely identify item view types.
          *
-         * @param position position to query
+         * @param position position to getDecisions
          * @return integer value identifying the type of the view needed to represent the item at
          *                 <code>position</code>. Type codes need not be contiguous.
          */
@@ -5328,7 +5328,7 @@ public void setHasStableIds(boolean hasStableIds) {
          * would return false this method should return {@link #NO_ID}. The default implementation
          * of this method returns {@link #NO_ID}.
          *
-         * @param position Adapter position to query
+         * @param position Adapter position to getDecisions
          * @return the stable ID of the item at position
          */
         public long getItemId(int position) {
@@ -6358,7 +6358,7 @@ public int getBaseline() {
          * Returns the adapter position of the item represented by the given View. This does not
          * contain any adapter changes that might have happened after the last layout.
          *
-         * @param view The view to query
+         * @param view The view to getDecisions
          * @return The adapter position of the item which is rendered by this View.
          */
         public int getPosition(View view) {
@@ -6368,7 +6368,7 @@ public int getPosition(View view) {
         /**
          * Returns the View type defined by the adapter.
          *
-         * @param view The view to query
+         * @param view The view to getDecisions
          * @return The type of the view assigned by the adapter.
          */
         public int getItemViewType(View view) {
@@ -6959,7 +6959,7 @@ public static int getChildMeasureSpec(int parentSize, int padding, int childDime
          * Returns the measured width of the given child, plus the additional size of
          * any insets applied by {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child view to query
+         * @param child Child view to getDecisions
          * @return child's measured width plus <code>ItemDecoration</code> insets
          *
          * @see View#getMeasuredWidth()
@@ -6973,7 +6973,7 @@ public int getDecoratedMeasuredWidth(View child) {
          * Returns the measured height of the given child, plus the additional size of
          * any insets applied by {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child view to query
+         * @param child Child view to getDecisions
          * @return child's measured height plus <code>ItemDecoration</code> insets
          *
          * @see View#getMeasuredHeight()
@@ -7020,7 +7020,7 @@ public void layoutDecorated(View child, int left, int top, int right, int bottom
          * Returns the left edge of the given child view within its parent, offset by any applied
          * {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return Child left edge with offsets applied
          * @see #getLeftDecorationWidth(View)
          */
@@ -7032,7 +7032,7 @@ public int getDecoratedLeft(View child) {
          * Returns the top edge of the given child view within its parent, offset by any applied
          * {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return Child top edge with offsets applied
          * @see #getTopDecorationHeight(View)
          */
@@ -7044,7 +7044,7 @@ public int getDecoratedTop(View child) {
          * Returns the right edge of the given child view within its parent, offset by any applied
          * {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return Child right edge with offsets applied
          * @see #getRightDecorationWidth(View)
          */
@@ -7056,7 +7056,7 @@ public int getDecoratedRight(View child) {
          * Returns the bottom edge of the given child view within its parent, offset by any applied
          * {@link ItemDecoration ItemDecorations}.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return Child bottom edge with offsets applied
          * @see #getBottomDecorationHeight(View)
          */
@@ -7096,7 +7096,7 @@ public void calculateItemDecorationsForChild(View child, Rect outRect) {
          * Note that this value is not updated until the View is measured or
          * {@link #calculateItemDecorationsForChild(View, Rect)} is called.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return The total height of item decorations applied to the child's top.
          * @see #getDecoratedTop(View)
          * @see #calculateItemDecorationsForChild(View, Rect)
@@ -7111,7 +7111,7 @@ public int getTopDecorationHeight(View child) {
          * Note that this value is not updated until the View is measured or
          * {@link #calculateItemDecorationsForChild(View, Rect)} is called.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return The total height of item decorations applied to the child's bottom.
          * @see #getDecoratedBottom(View)
          * @see #calculateItemDecorationsForChild(View, Rect)
@@ -7126,7 +7126,7 @@ public int getBottomDecorationHeight(View child) {
          * Note that this value is not updated until the View is measured or
          * {@link #calculateItemDecorationsForChild(View, Rect)} is called.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return The total width of item decorations applied to the child's left.
          * @see #getDecoratedLeft(View)
          * @see #calculateItemDecorationsForChild(View, Rect)
@@ -7141,7 +7141,7 @@ public int getLeftDecorationWidth(View child) {
          * Note that this value is not updated until the View is measured or
          * {@link #calculateItemDecorationsForChild(View, Rect)} is called.
          *
-         * @param child Child to query
+         * @param child Child to getDecisions
          * @return The total width of item decorations applied to the child's right.
          * @see #getDecoratedRight(View)
          * @see #calculateItemDecorationsForChild(View, Rect)
@@ -7176,7 +7176,7 @@ public View onFocusSearchFailed(View focused, int direction, Recycler recycler,
         /**
          * This method gives a LayoutManager an opportunity to intercept the initial focus search
          * before the default behavior of {@link FocusFinder} is used. If this method returns
-         * null FocusFinder will attempt to find a focusable child view. If it fails
+         * null FocusFinder will attempt to getOptions a focusable child view. If it fails
          * then {@link #onFocusSearchFailed(View, int, RecyclerView.Recycler, RecyclerView.State)}
          * will be called to give the LayoutManager an opportunity to add new views for items
          * that did not have attached views representing them. The LayoutManager should not add
@@ -7423,7 +7423,7 @@ public int computeHorizontalScrollExtent(State state) {
          *
          * <p>Default implementation returns 0.</p>
          *
-         * @param state Current State of RecyclerView where you can find total item count
+         * @param state Current State of RecyclerView where you can getOptions total item count
          * @return The horizontal offset of the scrollbar's thumb
          * @see RecyclerView#computeHorizontalScrollOffset()
          */
@@ -7438,7 +7438,7 @@ public int computeHorizontalScrollOffset(State state) {
          *
          * <p>Default implementation returns 0.</p>
          *
-         * @param state Current State of RecyclerView where you can find total item count
+         * @param state Current State of RecyclerView where you can getOptions total item count
          * @return The total horizontal range represented by the vertical scrollbar
          * @see RecyclerView#computeHorizontalScrollRange()
          */
@@ -7468,7 +7468,7 @@ public int computeVerticalScrollExtent(State state) {
          *
          * <p>Default implementation returns 0.</p>
          *
-         * @param state Current State of RecyclerView where you can find total item count
+         * @param state Current State of RecyclerView where you can getOptions total item count
          * @return The vertical offset of the scrollbar's thumb
          * @see RecyclerView#computeVerticalScrollOffset()
          */
@@ -7483,7 +7483,7 @@ public int computeVerticalScrollOffset(State state) {
          *
          * <p>Default implementation returns 0.</p>
          *
-         * @param state Current State of RecyclerView where you can find total item count
+         * @param state Current State of RecyclerView where you can getOptions total item count
          * @return The total vertical range represented by the vertical scrollbar
          * @see RecyclerView#computeVerticalScrollRange()
          */
@@ -7534,10 +7534,10 @@ public int getMinimumHeight() {
             return ViewCompat.getMinimumHeight(mRecyclerView);
         }
         /**
-         * <p>Called when the LayoutManager should save its state. This is a good time to save your
+         * <p>Called when the LayoutManager should insert its state. This is a good time to insert your
          * scroll position, configuration and anything else that may be required to restore the same
          * layout state if the LayoutManager is recreated.</p>
-         * <p>RecyclerView does NOT verify if the LayoutManager has changed between state save and
+         * <p>RecyclerView does NOT verify if the LayoutManager has changed between state insert and
          * restore. This will let you share information between your LayoutManagers but it is also
          * your responsibility to make sure they use the same parcelable class.</p>
          *
@@ -9018,7 +9018,7 @@ protected void normalize(PointF scrollVector) {
         abstract protected void onStop();
 
         /**
-         * <p>RecyclerView will call this method each time it scrolls until it can find the target
+         * <p>RecyclerView will call this method each time it scrolls until it can getOptions the target
          * position in the layout.</p>
          * <p>SmoothScroller should check dx, dy and if scroll should be changed, update the
          * provided {@link Action} to define the next scroll.</p>
@@ -9613,7 +9613,7 @@ public void onChangeFinished(ViewHolder item) {
              * We ended up in this case because VH_2 played both roles. On the other hand,
              * we DO NOT want to clear its changed flag.
              *
-             * If second change was simply reverting first change, we would find VH_1 in
+             * If second change was simply reverting first change, we would getOptions VH_1 in
              * {@link Recycler#getScrapViewForPosition(int, int, boolean)} and recycle it before
              * re-using
              */
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
index 59e7f59f5..4bd3a521d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
@@ -1177,7 +1177,7 @@ public int getColumnCountForAccessibility(RecyclerView.Recycler recycler,
 
     /**
      * This is for internal use. Not necessarily the child closest to start but the first child
-     * we find that matches the criteria.
+     * we getOptions that matches the criteria.
      * This method does not do any sorting based on child's start coordinate, instead, it uses
      * children order.
      */
@@ -1208,7 +1208,7 @@ View findFirstVisibleItemClosestToStart(boolean fullyVisible, boolean acceptPart
 
     /**
      * This is for internal use. Not necessarily the child closest to bottom but the first child
-     * we find that matches the criteria.
+     * we getOptions that matches the criteria.
      * This method does not do any sorting based on child's end coordinate, instead, it uses
      * children order.
      */
@@ -1932,7 +1932,7 @@ int scrollBy(int dt, RecyclerView.Recycler recycler, RecyclerView.State state) {
         }
 
         mPrimaryOrientation.offsetChildren(-totalScroll);
-        // always reset this if we scroll for a proper save instance state
+        // always reset this if we scroll for a proper insert instance state
         mLastLayoutFromEnd = mShouldReverseLayout;
         return totalScroll;
     }
@@ -1950,7 +1950,7 @@ private int getFirstChildPosition() {
     /**
      * Finds the first View that can be used as an anchor View.
      *
-     * @return Position of the View or 0 if it cannot find any such View.
+     * @return Position of the View or 0 if it cannot getOptions any such View.
      */
     private int findFirstReferenceChildPosition(int itemCount) {
         final int limit = getChildCount();
@@ -1967,7 +1967,7 @@ private int findFirstReferenceChildPosition(int itemCount) {
     /**
      * Finds the last View that can be used as an anchor View.
      *
-     * @return Position of the View or 0 if it cannot find any such View.
+     * @return Position of the View or 0 if it cannot getOptions any such View.
      */
     private int findLastReferenceChildPosition(int itemCount) {
         for (int i = getChildCount() - 1; i >= 0; i--) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
index 4d80b8437..5a8da9aac 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
@@ -559,7 +559,7 @@ private void select(ViewHolder selected, int actionState) {
                 final int swipeDir = prevActionState == ACTION_STATE_DRAG ? 0
                         : swipeIfNecessary(prevSelected);
                 releaseVelocityTracker();
-                // find where we should animate to
+                // getOptions where we should animate to
                 final float targetTranslateX, targetTranslateY;
                 int animationType;
                 switch (swipeDir) {
@@ -780,7 +780,7 @@ private boolean scrollIfNecessary() {
             }
             final ViewHolder otherVh = mRecyclerView.getChildViewHolder(other);
             if (mCallback.canDropOver(mRecyclerView, mSelected, otherVh)) {
-                // find the index to add
+                // getOptions the index to add
                 final int dx = Math.abs(centerX - (other.getLeft() + other.getRight()) / 2);
                 final int dy = Math.abs(centerY - (other.getTop() + other.getBottom()) / 2);
                 final int dist = dx * dx + dy * dy;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/time/FastDatePrinter.java b/TMessagesProj/src/main/java/org/telegram/messenger/time/FastDatePrinter.java
index 587043091..4a5e2c50f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/time/FastDatePrinter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/time/FastDatePrinter.java
@@ -1095,7 +1095,7 @@ public void appendTo(final StringBuffer buffer, final int value) {
     /**
      * <p>Gets the time zone display name, using a cache for performance.</p>
      *
-     * @param tz       the zone to query
+     * @param tz       the zone to getDecisions
      * @param daylight true if daylight savings
      * @param style    the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}
      * @param locale   the locale to use
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java b/TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java
index 454578b03..075361501 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java
@@ -66,7 +66,7 @@ private void eglSetup() {
         int[] numConfigs = new int[1];
         if (!EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,
                 numConfigs, 0)) {
-            throw new RuntimeException("unable to find RGB888+recordable ES2 EGL config");
+            throw new RuntimeException("unable to getOptions RGB888+recordable ES2 EGL config");
         }
 
         int[] attrib_list = {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/video/OutputSurface.java b/TMessagesProj/src/main/java/org/telegram/messenger/video/OutputSurface.java
index 7ec7079fd..1f439b822 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/video/OutputSurface.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/video/OutputSurface.java
@@ -100,7 +100,7 @@ private void eglSetup(int width, int height) {
         EGLConfig[] configs = new EGLConfig[1];
         int[] numConfigs = new int[1];
         if (!mEGL.eglChooseConfig(mEGLDisplay, attribList, configs, configs.length, numConfigs)) {
-            throw new RuntimeException("unable to find RGB888+pbuffer EGL config");
+            throw new RuntimeException("unable to getOptions RGB888+pbuffer EGL config");
         }
         int[] attrib_list = {
                 EGL_CONTEXT_CLIENT_VERSION, 2,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 5a70d96c2..5e346e96d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -16,6 +16,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Handler;
+import android.support.v4.app.FragmentActivity;
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -28,11 +29,11 @@
 import android.widget.LinearLayout;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.R;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.util.ArrayList;
@@ -136,13 +137,13 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
     private String titleOverlayText;
 
     private ActionBarLayoutDelegate delegate = null;
-    protected Activity parentActivity = null;
+    protected FragmentActivity parentActivity = null;
 
     public ArrayList<BaseFragment> fragmentsStack = null;
 
     public ActionBarLayout(Context context) {
         super(context);
-        parentActivity = (Activity) context;
+        parentActivity = (FragmentActivity) context;
 
         if (layerShadowDrawable == null) {
             layerShadowDrawable = getResources().getDrawable(R.drawable.layer_shadow);
@@ -155,7 +156,7 @@ public void init(ArrayList<BaseFragment> stack) {
         fragmentsStack = stack;
         containerViewBack = new LinearLayoutContainer(parentActivity);
         addView(containerViewBack);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerViewBack.getLayoutParams();
+        LayoutParams layoutParams = (LayoutParams) containerViewBack.getLayoutParams();
         layoutParams.width = LayoutHelper.MATCH_PARENT;
         layoutParams.height = LayoutHelper.MATCH_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -163,7 +164,7 @@ public void init(ArrayList<BaseFragment> stack) {
 
         containerView = new LinearLayoutContainer(parentActivity);
         addView(containerView);
-        layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
+        layoutParams = (LayoutParams) containerView.getLayoutParams();
         layoutParams.width = LayoutHelper.MATCH_PARENT;
         layoutParams.height = LayoutHelper.MATCH_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 68103b395..be5401e34 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -8,12 +8,12 @@
 
 package org.telegram.ui.ActionBar;
 
-import android.app.Activity;
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -195,7 +195,7 @@ public boolean presentFragment(BaseFragment fragment, boolean removeLast, boolea
         return parentLayout != null && parentLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, true);
     }
 
-    public Activity getParentActivity() {
+    public FragmentActivity getParentActivity() {
         if (parentLayout != null) {
             return parentLayout.parentActivity;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
index c80eb04b8..64c343fdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
@@ -106,7 +106,7 @@ public void searchGooglePlacesWithQuery(final String query, final Location coord
             searching = true;
             String url = String.format(Locale.US, "https://api.foursquare.com/v2/venues/search/?v=%s&locale=en&limit=25&client_id=%s&client_secret=%s&ll=%s", BuildVars.FOURSQUARE_API_VERSION, BuildVars.FOURSQUARE_API_ID, BuildVars.FOURSQUARE_API_KEY,  String.format(Locale.US, "%f,%f", coordinate.getLatitude(), coordinate.getLongitude()));
             if (query != null && query.length() > 0) {
-                url += "&query=" + URLEncoder.encode(query, "UTF-8");
+                url += "&getDecisions=" + URLEncoder.encode(query, "UTF-8");
             }
             JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.GET, url, null,
                     new Response.Listener<JSONObject>() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 205e4a9bb..5b5c4edf6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -30,6 +30,7 @@
 import android.text.TextUtils;
 import android.text.style.ClickableSpan;
 import android.util.Base64;
+import android.util.Log;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 import android.util.TypedValue;
@@ -50,6 +51,7 @@
 import android.widget.Toast;
 
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.pollgram.decision.ui.DecisionsListFragment;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -127,7 +129,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.List;
 import java.util.concurrent.Semaphore;
 
 public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
@@ -620,13 +621,8 @@ public void onFragmentDestroy() {
             MessagesController.getInstance().startShortPoll(currentChat.id, true);
         }
     }
-
-    public static void addTab2ActionBar(ActionBar actionBar, String tag, Class<?> clazz, int title,
-                                        int icon, List<Integer> handledRequestCode) {
-    }
-
     @Override
-    public View createView(Context context) {
+    public View createView(final Context context) {
 
         for (int a = 0; a < 8; a++) {
             chatMessageCellsCache.add(new ChatMessageCell(context));
@@ -644,7 +640,6 @@ public View createView(Context context) {
         ResourceLoader.loadRecources(context);
 
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        // AAA
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(final int id) {
@@ -906,11 +901,30 @@ public View getRevealView() {
             }
         });
 
+        /// uuuuu add button
+        boolean isChannel = ChatObject.isChannel(currentChat);
+        Log.i("AAAZZZ","isChannel = "+isChannel);
+        if (currentChat != null && !isChannel) { // only incase of a group chat
+            ImageView aNewButton = new ImageView(context);
+            aNewButton.setScaleType(ImageView.ScaleType.CENTER);
+            aNewButton.setBackgroundResource(R.drawable.decision);
+            aNewButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    DecisionsListFragment fragment = new DecisionsListFragment();
+                    fragment.setChatInfo(info);
+                    presentFragment(fragment);
+                }
+            });
+            actionBar.addView(aNewButton, LayoutHelper.createFrame(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT,
+                    Gravity.RIGHT | Gravity.TOP, 56, 28, 42, 0));
+        }
+
         avatarContainer = new FrameLayoutFixed(context);
         avatarContainer.setBackgroundResource(R.drawable.bar_selector);
         avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
-        // AAA
-        actionBar.addView(avatarContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 56, 0, 40, 0));
+        actionBar.addView(avatarContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT,
+                Gravity.TOP | Gravity.LEFT, 56, 0, 40, 0));
         avatarContainer.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -1044,7 +1058,7 @@ public void run() {
                             searchItem.getSearchField().requestFocus();
                             AndroidUtilities.showKeyboard(searchItem.getSearchField());
                         }
-                    }, 300); //TODO find a better way to open keyboard
+                    }, 300); //TODO getOptions a better way to open keyboard
                 }
 
                 @Override
@@ -1078,7 +1092,6 @@ public void onSearchPressed(EditText editText) {
         if (channelMessagesImportant == 0) {
             headerItem.addSubItem(clear_history, LocaleController.getString("ClearHistory", R.string.ClearHistory), 0);
             if (currentChat != null && !isBroadcast) {
-                // Group chat menu ??
                 headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
             } else {
                 headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser), 0);
@@ -1258,7 +1271,6 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
         };
 
         SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
-
         contentView.setBackgroundImage(ApplicationLoader.getCachedWallpaper());
 
         emptyViewContainer = new FrameLayout(context);
@@ -5151,7 +5163,7 @@ public boolean onPreDraw() {
     }
 
     @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+    public void onConfigurationChanged(Configuration newConfig) {
         fixLayout(false);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
index abda6c200..bab3106ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
@@ -17,17 +17,17 @@
 import android.provider.MediaStore;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ImageLoader;
-import org.telegram.messenger.MediaController;
-import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.MediaController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PhotoAlbumPickerActivity;
 import org.telegram.ui.PhotoCropActivity;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.PhotoViewer;
 
 import java.io.File;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index 3fa6f3754..65885ae69 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -993,7 +993,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (UserConfig.passcodeType == 1 && (AndroidUtilities.isTablet() || getContext().getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)) {
             int t = 0;
-            if (passwordFrameLayout.getTag() != 0) {
+            if (passwordFrameLayout.getTag() != null) {
                 t = (Integer) passwordFrameLayout.getTag();
             }
             LayoutParams layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 312ada984..ade0f650a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -25,6 +25,7 @@
 import android.provider.Browser;
 import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
+import android.support.v4.app.FragmentActivity;
 import android.view.ActionMode;
 import android.view.Gravity;
 import android.view.KeyEvent;
@@ -76,7 +77,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
-public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
+public class LaunchActivity extends FragmentActivity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
 
     private boolean finished;
     private String videoPath;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index ab7f48277..a7f249235 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -1263,7 +1263,7 @@ public int compare(Integer lhs, Integer rhs) {
                 }
             });
         } catch (Exception e) {
-            FileLog.e("tmessages", e); //TODO find crash
+            FileLog.e("tmessages", e); //TODO getOptions crash
         }
 
         if (listView != null) {
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/content_save.png b/TMessagesProj/src/main/res/drawable-hdpi/content_save.png
new file mode 100644
index 000000000..07c2817b5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/content_save.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/decision.png b/TMessagesProj/src/main/res/drawable-hdpi/decision.png
new file mode 100644
index 000000000..0e1c1e556
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/decision.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating_plus.png b/TMessagesProj/src/main/res/drawable-hdpi/floating_plus.png
new file mode 100644
index 000000000..1a7f68eff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating_plus.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/content_save.png b/TMessagesProj/src/main/res/drawable-mdpi/content_save.png
new file mode 100644
index 000000000..d12760bbd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/content_save.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/decision.png b/TMessagesProj/src/main/res/drawable-mdpi/decision.png
new file mode 100644
index 000000000..3b8b201f2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/decision.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating_plus.png b/TMessagesProj/src/main/res/drawable-mdpi/floating_plus.png
new file mode 100644
index 000000000..853fbac08
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating_plus.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/content_save.png b/TMessagesProj/src/main/res/drawable-xhdpi/content_save.png
new file mode 100644
index 000000000..9460b391c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/content_save.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/decision.png b/TMessagesProj/src/main/res/drawable-xhdpi/decision.png
new file mode 100644
index 000000000..1c03688cf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/decision.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating_plus.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating_plus.png
new file mode 100644
index 000000000..4e2a4f081
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating_plus.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/_decision.png b/TMessagesProj/src/main/res/drawable-xxhdpi/_decision.png
new file mode 100644
index 000000000..23fc1c0e5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/_decision.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/content_save.png b/TMessagesProj/src/main/res/drawable-xxhdpi/content_save.png
new file mode 100644
index 000000000..800da9a9b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/content_save.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/decision.png b/TMessagesProj/src/main/res/drawable-xxhdpi/decision.png
new file mode 100644
index 000000000..bd9fd2286
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/decision.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_plus.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_plus.png
new file mode 100644
index 000000000..5a0813aff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_plus.png differ
diff --git a/TMessagesProj/src/main/res/drawable/cell_normal.xml b/TMessagesProj/src/main/res/drawable/cell_normal.xml
index 90343c178..935c602eb 100644
--- a/TMessagesProj/src/main/res/drawable/cell_normal.xml
+++ b/TMessagesProj/src/main/res/drawable/cell_normal.xml
@@ -4,6 +4,4 @@
     <stroke
         android:width="0.01dp"
         android:color="@android:color/black" />
-    <solid
-        android:color="#ffb9b9" />
 </shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_detail_main.xml b/TMessagesProj/src/main/res/layout/decision_detail_main.xml
deleted file mode 100644
index db19aae09..000000000
--- a/TMessagesProj/src/main/res/layout/decision_detail_main.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/pager"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent" />
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_list_layout.xml b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
index 3509b8411..0e78027df 100644
--- a/TMessagesProj/src/main/res/layout/decision_list_layout.xml
+++ b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
@@ -1,6 +1,61 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/decision_list_layout"
+    android:layout_width="match_parent"
     android:layout_height="match_parent">
 
-</LinearLayout>
\ No newline at end of file
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:text="Group name"
+        android:id="@+id/decision_list_tv_title"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_toRightOf="@+id/decision_icon_container"
+        android:layout_toEndOf="@+id/decision_icon_container" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="normal Text"
+        android:id="@+id/decision_list_tv_subtitle"
+        android:layout_below="@+id/decision_list_tv_title"
+        android:layout_toRightOf="@+id/decision_icon_container"
+        android:layout_toEndOf="@+id/decision_icon_container" />
+    />
+
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id = "@+id/decision_icon_container"
+        android:layout_above="@+id/decision_list_list_view"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:paddingRight="5dp"
+        android:paddingLeft="5dp"
+        android:paddingBottom="5dp"/>
+
+    <ListView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/decision_list_list_view"
+        android:layout_below="@+id/textPadding"
+        android:layout_alignRight="@+id/decision_list_tv_title"
+        android:layout_alignEnd="@+id/decision_list_tv_title" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text=""
+        android:id="@+id/textPadding"
+        android:layout_below="@+id/decision_list_tv_subtitle"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
+
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_no_option_present.xml b/TMessagesProj/src/main/res/layout/decision_no_option_present.xml
deleted file mode 100644
index 3509b8411..000000000
--- a/TMessagesProj/src/main/res/layout/decision_no_option_present.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_list.xml b/TMessagesProj/src/main/res/layout/decision_option_list.xml
deleted file mode 100644
index 3509b8411..000000000
--- a/TMessagesProj/src/main/res/layout/decision_option_list.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_table.xml b/TMessagesProj/src/main/res/layout/decision_option_table.xml
deleted file mode 100644
index 8469a4445..000000000
--- a/TMessagesProj/src/main/res/layout/decision_option_table.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent" android:layout_height="match_parent">
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/decision_option_table_row.xml b/TMessagesProj/src/main/res/layout/decision_option_table_row.xml
deleted file mode 100644
index 3509b8411..000000000
--- a/TMessagesProj/src/main/res/layout/decision_option_table_row.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/item_decision.xml b/TMessagesProj/src/main/res/layout/item_decision.xml
deleted file mode 100644
index 3509b8411..000000000
--- a/TMessagesProj/src/main/res/layout/item_decision.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/item_decision_list.xml b/TMessagesProj/src/main/res/layout/item_decision_list.xml
new file mode 100644
index 000000000..93f2b997d
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/item_decision_list.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/item_decision_iv_image"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:background="@drawable/attach_camera"
+        android:padding="2dp"
+        android:paddingLeft="2dp"
+        android:paddingTop="2dp"
+        android:paddingRight="2dp"
+        android:paddingBottom="2dp" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text="Title"
+        android:id="@+id/item_decision_tv_title"
+        android:layout_alignParentTop="true"
+        android:layout_toRightOf="@+id/item_decision_iv_image"
+        android:layout_toEndOf="@+id/item_decision_iv_image"
+        android:paddingLeft="10dp" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:text="sub title that my report bla bla"
+        android:id="@+id/item_decision_tv_subtitle"
+        android:layout_below="@+id/item_decision_tv_title"
+        android:layout_toRightOf="@+id/item_decision_iv_image"
+        android:layout_toEndOf="@+id/item_decision_iv_image"
+        android:paddingLeft="10dp" />
+</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/option_choice.xml b/TMessagesProj/src/main/res/layout/item_vote_list.xml
similarity index 78%
rename from TMessagesProj/src/main/res/layout/option_choice.xml
rename to TMessagesProj/src/main/res/layout/item_vote_list.xml
index b8f10dbe3..528596f4a 100644
--- a/TMessagesProj/src/main/res/layout/option_choice.xml
+++ b/TMessagesProj/src/main/res/layout/item_vote_list.xml
@@ -32,14 +32,15 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:textAppearance="?android:attr/textAppearanceSmall"
-        android:text="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. "
+        android:text="Lorem.ipsum.dolor.sit.amet,consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. "
         android:id="@+id/item_option_tv_subtitle"
         android:paddingLeft="10dp"
+        android:maxLines="2"
+        android:paddingRight="20dp"
         android:layout_below="@+id/item_option_tv_title"
         android:layout_toRightOf="@+id/item_option_iv_image"
-        android:maxLines="2"
-        android:layout_toLeftOf="@+id/item_option_sw_bar"
-        android:layout_toStartOf="@+id/item_option_sw_bar" />
+        android:layout_alignRight="@+id/item_option_tv_title"
+        android:layout_alignEnd="@+id/item_option_tv_title" />
 
     <CheckBox
         android:layout_width="wrap_content"
@@ -48,17 +49,16 @@
         android:checked="false"
         android:scaleX="2.3"
         android:scaleY="2.3"
-        android:paddingLeft="3dp"
-        android:paddingRight="3dp"
+        android:padding="10dp"
         android:layout_alignParentTop="true"
         android:layout_alignParentRight="true"
         android:layout_alignParentEnd="true"
-        android:layout_alignBottom="@+id/item_option_sw_bar" />
+        android:layout_alignBottom="@+id/item_option_tv_subtitle" />
 
-    <SurfaceView
+    <TextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:id="@+id/item_choice_sw_bar"
+        android:id="@+id/item_option_sw_bar"
         android:layout_toLeftOf="@+id/item_option_cb"
         android:layout_toStartOf="@+id/item_option_cb"
         android:layout_alignParentTop="true"
diff --git a/TMessagesProj/src/main/res/layout/tabbed_fragment.xml b/TMessagesProj/src/main/res/layout/tabbed_fragment.xml
new file mode 100644
index 000000000..aeaf36b01
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/tabbed_fragment.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"
+      android:orientation="vertical">
+
+    <org.pollgram.decision.ui.SlidingTabLayout
+          android:id="@+id/sliding_tabs"
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content" />
+
+    <android.support.v4.view.ViewPager
+          android:id="@+id/viewpager"
+          android:layout_width="match_parent"
+          android:layout_height="match_parent"
+          android:layout_weight="1"
+          />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_list_tab.xml b/TMessagesProj/src/main/res/layout/votes_manager_list_tab.xml
new file mode 100644
index 000000000..bd1e833cc
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/votes_manager_list_tab.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:weightSum="1">
+
+    <ListView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/decision_option_lw_options"
+        android:layout_weight="1" />
+
+    <Button
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/saveVotes"
+
+        android:id="@+id/decision_option_btn_save_votes"
+        android:background="#5795cc"
+        android:visibility="gone"
+        android:layout_gravity="right" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_main.xml b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
new file mode 100644
index 000000000..270dcb201
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
@@ -0,0 +1,49 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/sample_main_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <!--
+    <ViewAnimator
+          android:id="@+id/sample_output"
+          android:layout_width="match_parent"
+          android:layout_height="0px"
+
+              android:layout_weight="1">
+            <ScrollView
+                  style="@style/Widget.SampleMessageTile"
+                  android:layout_width="match_parent"
+                  android:layout_height="match_parent">
+    -->
+    <TextView
+        android:id="@+id/decision_detail_top_title"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text="Title"
+        android:padding="5dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
+
+    <!--
+            </ScrollView>
+
+            <fragment
+                  android:name="com.example.android.common.logger.LogFragment"
+                  android:id="@+id/log_fragment"
+                  android:layout_width="match_parent"
+                  android:layout_height="match_parent" />
+
+        </ViewAnimator>
+-->
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="@android:color/darker_gray" />
+
+    <FrameLayout
+        android:id="@+id/sample_content_fragment"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_weight="2" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_no_option_present.xml b/TMessagesProj/src/main/res/layout/votes_manager_no_option_present.xml
new file mode 100644
index 000000000..166e0ff3c
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/votes_manager_no_option_present.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:maxWidth="100dp"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:text="@string/noOptionPresent"
+        android:id="@+id/textView2" />
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_table_tab.xml b/TMessagesProj/src/main/res/layout/votes_manager_table_tab.xml
new file mode 100644
index 000000000..2086b88cc
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/votes_manager_table_tab.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:gravity="center_horizontal"
+    android:id="@+id/fillable_areaout">
+    <ScrollView
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <LinearLayout android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_horizontal"
+            android:id="@+id/fillable_areain">
+            <TableLayout
+                android:id="@+id/fixed_column"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"/>
+            <HorizontalScrollView
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content">
+                <TableLayout
+                    android:id="@+id/scrollable_part"
+                    android:layout_width="fill_parent"
+                    android:layout_height="fill_parent"/>
+            </HorizontalScrollView>
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index b4eac3ecb..5442d5c31 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="divider">#dcdcdc</color>
+    <color name="backgroud_blue">#4d83b3</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index cffeb803a..30a782b71 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -29,30 +29,7 @@
     <string name="CancelRegistration">Cancel registration</string>
     <!--chats view-->
     <string name="Settings">Settings</string>
-    <string name="
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-    ">Contacts</string>
+    <string name="Contacts">Contacts</string>
     <string name="NewGroup">New Group</string>
     <string name="Yesterday">yesterday</string>
     <string name="NoResult">No results</string>
@@ -93,7 +70,7 @@
     <string name="ChannelUsernamePlaceholder">link</string>
     <string name="ChannelPrivateLinkHelp">People can join your channel by following this link. You can revoke the link any time.</string>
     <string name="DescriptionPlaceholder">Description</string>
-    <string name="DescriptionInfo">You can provide an optional description for your channel.</string>
+    <string name="DescriptionInfo">You can provide an optional title for your channel.</string>
     <string name="ChannelPublic">Public Channel</string>
     <string name="ChannelPublicInfo">Public channels can be found in search, anyone can join them.</string>
     <string name="ChannelPrivate">Private Channel</string>
@@ -445,8 +422,8 @@
     <string name="LedColor">LED Color</string>
     <string name="PopupNotification">Popup Notifications</string>
     <string name="NoPopup">No popup</string>
-    <string name="OnlyWhenScreenOn">Only when screen \"on\"</string>
-    <string name="OnlyWhenScreenOff">Only when screen \"off\"</string>
+    <string name="OnlyWhenScreenOn">Only voteTime screen \"on\"</string>
+    <string name="OnlyWhenScreenOff">Only voteTime screen \"off\"</string>
     <string name="AlwaysShowPopup">Always show popup</string>
     <string name="BadgeNumber">Badge Counter</string>
     <string name="Short">Short</string>
@@ -580,7 +557,7 @@
     <!--password view-->
     <string name="TwoStepVerification">Two-Step Verification</string>
     <string name="SetAdditionalPassword">Set Additional Password</string>
-    <string name="SetAdditionalPasswordInfo">You can set a password that will be required when you log in on a new device in addition to the code you get in the SMS.</string>
+    <string name="SetAdditionalPasswordInfo">You can set a password that will be required voteTime you log in on a new device in addition to the code you get in the SMS.</string>
     <string name="YourPassword">Your Password</string>
     <string name="PleaseEnterCurrentPassword">Please enter your password</string>
     <string name="PleaseEnterFirstPassword">Enter a password</string>
@@ -609,7 +586,7 @@
     <string name="PasswordAsHintError">Hint must be different from your password</string>
     <string name="PasswordEmailInvalid">Invalid e-mail</string>
     <string name="RestorePasswordNoEmailTitle">Sorry</string>
-    <string name="RestorePasswordNoEmailText">Since you haven\'t provided a recovery e-mail when setting up your password, your remaining options are either to remember your password or to reset your account.</string>
+    <string name="RestorePasswordNoEmailText">Since you haven\'t provided a recovery e-mail voteTime setting up your password, your remaining options are either to remember your password or to reset your account.</string>
     <string name="RestoreEmailSent">We have sent a recovery code to the e-mail you provided:\n\n%1$s</string>
     <string name="RestoreEmailSentInfo">Please check your e-mail and enter the 6-digit code we have sent here.</string>
     <string name="RestoreEmailTrouble">Having trouble accessing your e-mail %1$s?</string>
@@ -974,4 +951,25 @@
     <!--update text-->
     <string name="updateText">Telegram for Android has been updated. New in version 3.2.0:\n\n- Introducing Channels – a great new way to broadcast your messages to unlimited audiences (replaces old Broadcasts).\n\nRead more: https://telegram.org/blog/channels</string>
     <string name="updateBuild">614</string>
+
+    <!-- START of Pollgram text -->
+
+    <string name="howManyMemberVote">%1$d members on %2$d have voted yet</string>
+    <string name="groupDecision">Group decisions</string>
+    <string name="decisionsCount">%1$d open decision, %2$d closed decisions</string>
+
+    <string name="viewCloseDecision">View closed decision</string>
+    <string name="hideCloseDecision">Hide closed decision</string>
+
+    <string name="decisionDetailSummarizeTitle">%1$d members on %2$d have already voted!</string>
+    <string name="optionTabName">Options</string>
+    <string name="tableViewTabName">Table View</string>
+    <string name="saveVotes">Save votes</string>
+    <string name="voteSaved">Vote saved</string>
+    <string name="no_vote_desc">\?</string>
+    <string name="noOptionPresent">There are no option\n for this decision</string>
+    <string name="remindToUserSent">remind sent to user %1$s (TODO IT MUST BE IMPLENTED)</string>
+    <!-- END of Pollgram text -->
+
+
 </resources>
\ No newline at end of file
