diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 17a9df38f..d3b62103d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -340,7 +340,20 @@ public void run() {
         });
     }
 
+
+    public static String ADDRESS = null;
+    public static int PORT = 443;
+
     private void fillDatacenters() {
+
+        if(ADDRESS != null) {
+            Datacenter datacenter = new Datacenter();
+            datacenter.datacenterId = 1;
+            datacenter.addAddressAndPort(ADDRESS, PORT);
+            datacenters.put(datacenter.datacenterId, datacenter);
+            return;
+        }
+
         if (datacenters.size() == 0) {
             if (isTestBackend == 0) {
                 Datacenter datacenter = new Datacenter();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
index 2bdce85de..b2e9ec6b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
@@ -129,7 +129,12 @@ public String getCurrentAddress() {
         return addresses.get(currentAddressNum);
     }
 
+
     public int getCurrentPort() {
+
+        if(ConnectionsManager.PORT != 443)
+            return ConnectionsManager.PORT;
+
         if (ports.isEmpty()) {
             return overridePort == -1 ? 443 : overridePort;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index 82679649b..c402f77ce 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -87,6 +87,14 @@ void beginHandshake(boolean dropConnection) {
                 serverPublicKeys = new ArrayList<HashMap<String, Object>>();
                 HashMap<String, Object> map;
 
+                // teleopen pubkeys
+                map = new HashMap<String, Object>();
+                map.put("key", new BigInteger[]{
+                        new BigInteger("0a0bafd9ab8d77af3ed30a5ed84295bdeb606ca92a1a62903339b954d39f5a77ce27232d5f16c3f7880520025eebd785b9cbb6a816dacce71a93083ff266347899b9639e4c510daf12273cc061ea3d99815c99153c2cbfae4b2de8de8d820fd0e01d7531fcb79988046d515c69430a4ccea3579581a9a958a7b91b412dc5babfa36cede689d955c35f5a6f1e54aac6b64f3e569cdfc98be8303c8e6d0db4be0d7ac01f37e035085b8fd72d040d361ef6c36fd86d28f14918930baca3a7888c96bd24667c1aa2f40063440e21a4a02df45b6a58f8ce6798e4e6725d0e4ab3ce3b678b9232eeba2cbc79d078a5a4e12bb308fc9a9b0ade063cb79014255e9024f37", 16),
+                        new BigInteger("010001", 16)});
+                map.put("fingerprint", 0x845a162dbcd2c171L);
+                serverPublicKeys.add(map);
+
                 map = new HashMap<String, Object>();
                 map.put("key", new BigInteger[]{
                         new BigInteger("c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135" +
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index efc7560e4..fffaa1ad7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -20,10 +20,13 @@
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.os.AsyncTask;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.preference.PreferenceManager;
 import android.view.ViewConfiguration;
 
+import android.widget.Toast;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.android.gms.gcm.GoogleCloudMessaging;
@@ -39,6 +42,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.BaseFragment;
 
+import java.io.*;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -131,9 +135,63 @@ public static void postInitApplication() {
         app.initPlayServices();
     }
 
+    public static void deleteDir (File dir)
+    {
+        if (dir.isDirectory())
+        {
+            File[] files = dir.listFiles();
+            for (File f:files)
+            {
+                deleteDir(f);
+            }
+            dir.delete();
+        }
+        else
+            dir.delete();
+    }
+
     @Override
     public void onCreate() {
         super.onCreate();
+
+        // customized configure
+        try {
+            final String configPath = Environment.getExternalStorageDirectory().getPath()+"/";
+            FileInputStream fi = new FileInputStream(configPath + "teleopen.conf");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(fi));
+            StringBuilder log = new StringBuilder();
+            String line = null;
+            while((line = reader.readLine()) != null) {
+                String key = line.indexOf("=")>0?
+                        line.substring(0, line.indexOf("=")).trim().toLowerCase()
+                        : line.trim();
+                String val = line.substring(line.indexOf("=")+1).trim();
+                if(key.equals("dc")) {
+                    if(val.indexOf(":")>0) {
+                        ConnectionsManager.ADDRESS = val.substring(0, val.indexOf(":")).trim();
+                        ConnectionsManager.PORT = Integer.parseInt(val.substring(val.indexOf(":")+1).trim());
+                    } else {
+                        ConnectionsManager.ADDRESS = val.trim();
+                    }
+                    log.append("dc->"+ConnectionsManager.ADDRESS+":"+ConnectionsManager.PORT+"\n");
+                } else if(key.equals("clean")
+                        || (key.equals("cleanonce") && !new File(configPath+"teleopen_clean_lock").exists())) {
+                    deleteDir(getApplicationContext().getFilesDir());
+                    deleteDir(getApplicationContext().getCacheDir());
+                    PreferenceManager.getDefaultSharedPreferences(this).edit().clear().commit();
+                    log.append("do cleanup\n");
+                    FileOutputStream lock = new FileOutputStream(new File(configPath+"teleopen_clean_lock"));
+                    lock.close();
+                }
+            }
+            reader.close();
+            fi.close();
+            Toast.makeText(this.getApplicationContext(), "conf\n" + log.toString().trim(), Toast.LENGTH_SHORT).show();
+        } catch (Exception e) {
+            Toast.makeText(this.getApplicationContext(),
+                    "read sdcard://teleopen.conf failed: "+e.getMessage(), Toast.LENGTH_SHORT).show();
+        }
+
         lastPauseTime = System.currentTimeMillis();
         applicationContext = getApplicationContext();
 
