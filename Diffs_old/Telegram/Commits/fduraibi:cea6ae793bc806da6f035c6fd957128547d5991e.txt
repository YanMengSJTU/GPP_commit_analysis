diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 1d2b79e9c..6cd896cc3 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -17,7 +17,7 @@ tasks.withType(JavaCompile) {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:20.0.+'
+    compile 'com.android.support:support-v4:21.0.+'
     compile 'com.google.android.gms:play-services:3.2.+'
     compile 'net.hockeyapp.android:HockeySDK:3.0.2'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
@@ -25,7 +25,7 @@ dependencies {
 
 android {
     compileSdkVersion 21
-    buildToolsVersion '21.0.2'
+    buildToolsVersion '21.1.1'
 
     signingConfigs {
         debug {
@@ -43,19 +43,19 @@ android {
     buildTypes {
         debug {
             debuggable true
-            jniDebugBuild false
+            jniDebuggable true
             signingConfig signingConfigs.debug
         }
 
         release {
             debuggable false
-            jniDebugBuild false
+            jniDebuggable false
             signingConfig signingConfigs.release
         }
 
         foss {
             debuggable false
-            jniDebugBuild false
+            jniDebuggable false
             signingConfig signingConfigs.release
         }
     }
@@ -79,8 +79,8 @@ android {
 
     defaultConfig {
         minSdkVersion 8
-        targetSdkVersion 19
-        versionCode 380
-        versionName "1.9.8"
+        targetSdkVersion 21
+        versionCode 391
+        versionName "2.0.2"
     }
 }
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index 87a470dcc..5c2a6c040 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -2,7 +2,7 @@ LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
 LOCAL_PRELINK_MODULE := false
-LOCAL_MODULE 	:= tmessages.2
+LOCAL_MODULE 	:= tmessages.3
 LOCAL_CFLAGS 	:= -w -std=gnu99 -O2 -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
 LOCAL_CFLAGS 	+= -Drestrict='' -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA -DHAVE_LRINT -DHAVE_LRINTF -fno-math-errno
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT -DHAVE_STRCHRNUL=0
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index afc1323ea..ce371880d 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -229,7 +229,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_blurBitmap(JNIEnv *env, jcl
     AndroidBitmap_unlockPixels(env, bitmap);
 }
 
-JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jobject bitmap, int scale) {
+JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jobject bitmap, int scale, int width, int height, int stride) {
     
     AndroidBitmapInfo info;
     int i;
@@ -260,13 +260,13 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
 
                 unsigned char *pixels;
                 if ((i = AndroidBitmap_lockPixels(env, bitmap, &pixels)) >= 0) {
-                    int rowCount = min(cinfo.output_height, info.height);
-                    int colCount = min(cinfo.output_width, info.width);
+                    int rowCount = min(cinfo.output_height, height);
+                    int colCount = min(cinfo.output_width, width);
                     
                     while (cinfo.output_scanline < rowCount) {
                         jpeg_read_scanlines(&cinfo, buffer, 1);
                         
-                        if (info.format == ANDROID_BITMAP_FORMAT_RGBA_8888) {
+                        //if (info.format == ANDROID_BITMAP_FORMAT_RGBA_8888) {
                             if (cinfo.out_color_space == JCS_GRAYSCALE) {
                                 for (i = 0; i < colCount; i++) {
                                     float alpha = buffer[0][i] / 255.0f;
@@ -285,11 +285,11 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
                                     c += 4;
                                 }
                             }
-                        } else if (info.format == ANDROID_BITMAP_FORMAT_RGB_565) {
+                        //} else if (info.format == ANDROID_BITMAP_FORMAT_RGB_565) {
                             
-                        }
+                        //}
                         
-                        pixels += info.stride;
+                        pixels += stride;
                     }
                     
                     AndroidBitmap_unlockPixels(env, bitmap);
diff --git a/TMessagesProj/jni/sqlite/sqlite3.c b/TMessagesProj/jni/sqlite/sqlite3.c
index 60d77ace7..62f39e991 100644
--- a/TMessagesProj/jni/sqlite/sqlite3.c
+++ b/TMessagesProj/jni/sqlite/sqlite3.c
@@ -1,6 +1,6 @@
 /******************************************************************************
 ** This file is an amalgamation of many separate C source files from SQLite
-** version 3.8.7.  By combining all the individual C code files into this 
+** version 3.8.7.1.  By combining all the individual C code files into this 
 ** single large file, the entire code can be compiled as a single translation
 ** unit.  This allows many compilers to do optimizations that would not be
 ** possible if the files were compiled separately.  Performance improvements
@@ -231,9 +231,9 @@ extern "C" {
 ** [sqlite3_libversion_number()], [sqlite3_sourceid()],
 ** [sqlite_version()] and [sqlite_source_id()].
 */
-#define SQLITE_VERSION        "3.8.7"
+#define SQLITE_VERSION        "3.8.7.1"
 #define SQLITE_VERSION_NUMBER 3008007
-#define SQLITE_SOURCE_ID      "2014-10-17 11:24:17 e4ab094f8afce0817f4074e823fabe59fc29ebb4"
+#define SQLITE_SOURCE_ID      "2014-10-29 13:59:56 3b7b72c4685aa5cf5e675c2c47ebec10d9704221"
 
 /*
 ** CAPI3REF: Run-Time Library Version Numbers
@@ -20756,11 +20756,7 @@ SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){
 ** the glibc version so the glibc version is definitely preferred.
 */
 #if !defined(HAVE_STRCHRNUL)
-# if defined(linux)
-#  define HAVE_STRCHRNUL 1
-# else
-#  define HAVE_STRCHRNUL 0
-# endif
+# define HAVE_STRCHRNUL 0
 #endif
 
 
@@ -42806,6 +42802,14 @@ static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){
         rc = SQLITE_OK;
       }else{
         rc = sqlite3OsTruncate(pPager->jfd, 0);
+        if( rc==SQLITE_OK && pPager->fullSync ){
+          /* Make sure the new file size is written into the inode right away.
+          ** Otherwise the journal might resurrect following a power loss and
+          ** cause the last transaction to roll back.  See
+          ** https://bugzilla.mozilla.org/show_bug.cgi?id=1072773
+          */
+          rc = sqlite3OsSync(pPager->jfd, pPager->syncFlags);
+        }
       }
       pPager->journalOff = 0;
     }else if( pPager->journalMode==PAGER_JOURNALMODE_PERSIST
@@ -71443,7 +71447,7 @@ case OP_Column: {
       if( pOp->p4type==P4_MEM ){
         sqlite3VdbeMemShallowCopy(pDest, pOp->p4.pMem, MEM_Static);
       }else{
-        MemSetTypeFlag(pDest, MEM_Null);
+        sqlite3VdbeMemSetNull(pDest);
       }
       goto op_column_out;
     }
@@ -93757,7 +93761,7 @@ SQLITE_PRIVATE void sqlite3DeleteFrom(
       assert( nKey==nPk );  /* OP_Found will use an unpacked key */
       assert( !IsVirtual(pTab) );
       if( aToOpen[iDataCur-iTabCur] ){
-        assert( pPk!=0 );
+        assert( pPk!=0 || pTab->pSelect!=0 );
         sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, addrBypass, iKey, nKey);
         VdbeCoverage(v);
       }
@@ -111281,8 +111285,8 @@ SQLITE_PRIVATE void sqlite3Update(
 
   /* Top of the update loop */
   if( okOnePass ){
-    if( aToOpen[iDataCur-iBaseCur] ){
-      assert( pPk!=0 );
+    if( aToOpen[iDataCur-iBaseCur] && !isView ){
+      assert( pPk );
       sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelBreak, regKey, nKey);
       VdbeCoverageNeverTaken(v);
     }
diff --git a/TMessagesProj/jni/sqlite/sqlite3.h b/TMessagesProj/jni/sqlite/sqlite3.h
index 431ee769f..184003ea9 100644
--- a/TMessagesProj/jni/sqlite/sqlite3.h
+++ b/TMessagesProj/jni/sqlite/sqlite3.h
@@ -107,9 +107,9 @@ extern "C" {
 ** [sqlite3_libversion_number()], [sqlite3_sourceid()],
 ** [sqlite_version()] and [sqlite_source_id()].
 */
-#define SQLITE_VERSION        "3.8.7"
+#define SQLITE_VERSION        "3.8.7.1"
 #define SQLITE_VERSION_NUMBER 3008007
-#define SQLITE_SOURCE_ID      "2014-10-17 11:24:17 e4ab094f8afce0817f4074e823fabe59fc29ebb4"
+#define SQLITE_SOURCE_ID      "2014-10-29 13:59:56 3b7b72c4685aa5cf5e675c2c47ebec10d9704221"
 
 /*
 ** CAPI3REF: Run-Time Library Version Numbers
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.2.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.3.so
similarity index 75%
rename from TMessagesProj/libs/armeabi-v7a/libtmessages.2.so
rename to TMessagesProj/libs/armeabi-v7a/libtmessages.3.so
index fcaae9627..6d9c8366b 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.2.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.3.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.2.so b/TMessagesProj/libs/armeabi/libtmessages.3.so
similarity index 71%
rename from TMessagesProj/libs/armeabi/libtmessages.2.so
rename to TMessagesProj/libs/armeabi/libtmessages.3.so
index 59a6ae55a..98fb21768 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.2.so and b/TMessagesProj/libs/armeabi/libtmessages.3.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.2.so b/TMessagesProj/libs/x86/libtmessages.3.so
similarity index 72%
rename from TMessagesProj/libs/x86/libtmessages.2.so
rename to TMessagesProj/libs/x86/libtmessages.3.so
index 18684217c..61ccbf61f 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.2.so and b/TMessagesProj/libs/x86/libtmessages.3.so differ
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index b6a7aa8a3..a5fb34f8a 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -51,7 +51,7 @@
 
         <activity
             android:name="org.telegram.ui.LaunchActivity"
-            android:windowSoftInputMode="adjustResize"
+            android:windowSoftInputMode="adjustPan"
             android:hardwareAccelerated="true"
             android:launchMode="singleTask"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
diff --git a/TMessagesProj/src/main/assets/fonts/rmedium.ttf b/TMessagesProj/src/main/assets/fonts/rmedium.ttf
index d0f6e2b64..a3c1a1f17 100644
Binary files a/TMessagesProj/src/main/assets/fonts/rmedium.ttf and b/TMessagesProj/src/main/assets/fonts/rmedium.ttf differ
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 3b346fd00..91ac10b6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -15,28 +15,33 @@
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.graphics.Point;
+import android.graphics.Rect;
 import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Environment;
+import android.util.StateSet;
 import android.view.Display;
 import android.view.Surface;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.AbsListView;
+import android.widget.EdgeEffect;
 import android.widget.EditText;
+import android.widget.ListView;
 import android.widget.TextView;
 
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ApplicationLoader;
 import org.telegram.ui.Views.NumberPicker;
 
 import java.io.File;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.util.Hashtable;
-import java.util.Locale;
 
 public class AndroidUtilities {
 
@@ -51,37 +56,6 @@
     public static Integer photoSize = null;
     private static Boolean isTablet = null;
 
-    public static int[] arrColors = {0xffee4928, 0xff41a903, 0xffe09602, 0xff0f94ed, 0xff8f3bf7, 0xfffc4380, 0xff00a1c4, 0xffeb7002};
-    public static int[] arrUsersAvatars = {
-            R.drawable.user_red,
-            R.drawable.user_green,
-            R.drawable.user_yellow,
-            R.drawable.user_blue,
-            R.drawable.user_violet,
-            R.drawable.user_pink,
-            R.drawable.user_aqua,
-            R.drawable.user_orange};
-
-    public static int[] arrGroupsAvatars = {
-            R.drawable.group_red,
-            R.drawable.group_green,
-            R.drawable.group_yellow,
-            R.drawable.group_blue,
-            R.drawable.group_violet,
-            R.drawable.group_pink,
-            R.drawable.group_aqua,
-            R.drawable.group_orange};
-
-    public static int[] arrBroadcastAvatars = {
-            R.drawable.broadcast_red,
-            R.drawable.broadcast_green,
-            R.drawable.broadcast_yellow,
-            R.drawable.broadcast_blue,
-            R.drawable.broadcast_violet,
-            R.drawable.broadcast_pink,
-            R.drawable.broadcast_aqua,
-            R.drawable.broadcast_orange};
-
     static {
         density = ApplicationLoader.applicationContext.getResources().getDisplayMetrics().density;
         checkDisplaySize();
@@ -97,24 +71,22 @@ public static void lockOrientation(Activity activity) {
             if (manager != null && manager.getDefaultDisplay() != null) {
                 int rotation = manager.getDefaultDisplay().getRotation();
                 int orientation = activity.getResources().getConfiguration().orientation;
+                int SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8;
+                int SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9;
+                if (Build.VERSION.SDK_INT < 9) {
+                    SCREEN_ORIENTATION_REVERSE_LANDSCAPE = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+                    SCREEN_ORIENTATION_REVERSE_PORTRAIT = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+                }
 
                 if (rotation == Surface.ROTATION_270) {
                     if (orientation == Configuration.ORIENTATION_PORTRAIT) {
                         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                     } else {
-                        if (Build.VERSION.SDK_INT >= 9) {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
-                        } else {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-                        }
+                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
                     }
                 } else if (rotation == Surface.ROTATION_90) {
                     if (orientation == Configuration.ORIENTATION_PORTRAIT) {
-                        if (Build.VERSION.SDK_INT >= 9) {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
-                        } else {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-                        }
+                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_PORTRAIT);
                     } else {
                         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
                     }
@@ -126,17 +98,9 @@ public static void lockOrientation(Activity activity) {
                     }
                 } else {
                     if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                        if (Build.VERSION.SDK_INT >= 9) {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
-                        } else {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-                        }
+                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
                     } else {
-                        if (Build.VERSION.SDK_INT >= 9) {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
-                        } else {
-                            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-                        }
+                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_PORTRAIT);
                     }
                 }
             }
@@ -239,11 +203,7 @@ public static File getCacheDir() {
         return new File("");
     }
 
-    public static int dp(int value) {
-        return (int)(Math.max(1, density * value));
-    }
-
-    public static int dpf(float value) {
+    public static int dp(float value) {
         return (int)Math.ceil(density * value);
     }
 
@@ -290,11 +250,11 @@ public static int setPeerLayerVersion(int layer, int version) {
         return layer & 0x0000ffff | (version << 16);
     }
 
-    public static void RunOnUIThread(Runnable runnable) {
-        RunOnUIThread(runnable, 0);
+    public static void runOnUIThread(Runnable runnable) {
+        runOnUIThread(runnable, 0);
     }
 
-    public static void RunOnUIThread(Runnable runnable, long delay) {
+    public static void runOnUIThread(Runnable runnable, long delay) {
         if (delay == 0) {
             ApplicationLoader.applicationHandler.post(runnable);
         } else {
@@ -302,7 +262,7 @@ public static void RunOnUIThread(Runnable runnable, long delay) {
         }
     }
 
-    public static void CancelRunOnUIThread(Runnable runnable) {
+    public static void cancelRunOnUIThread(Runnable runnable) {
         ApplicationLoader.applicationHandler.removeCallbacks(runnable);
     }
 
@@ -337,58 +297,6 @@ public static int getMinTabletSide() {
         }
     }
 
-    public static int getColorIndex(int id) {
-        int[] arr;
-        if (id >= 0) {
-            arr = arrUsersAvatars;
-        } else {
-            arr = arrGroupsAvatars;
-        }
-        try {
-            String str;
-            if (id >= 0) {
-                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
-            } else {
-                str = String.format(Locale.US, "%d", id);
-            }
-            if (str.length() > 15) {
-                str = str.substring(0, 15);
-            }
-            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
-            byte[] digest = md.digest(str.getBytes());
-            int b = digest[Math.abs(id % 16)];
-            if (b < 0) {
-                b += 256;
-            }
-            return Math.abs(b) % arr.length;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return id % arr.length;
-    }
-
-    public static int getColorForId(int id) {
-        if (id / 1000 == 333) {
-            return 0xff0f94ed;
-        }
-        return arrColors[getColorIndex(id)];
-    }
-
-    public static int getUserAvatarForId(int id) {
-        if (id / 1000 == 333 || id / 1000 == 777) {
-            return R.drawable.telegram_avatar;
-        }
-        return arrUsersAvatars[getColorIndex(id)];
-    }
-
-    public static int getGroupAvatarForId(int id) {
-        return arrGroupsAvatars[getColorIndex(-Math.abs(id))];
-    }
-
-    public static int getBroadcastAvatarForId(int id) {
-        return arrBroadcastAvatars[getColorIndex(-Math.abs(id))];
-    }
-
     public static int getPhotoSize() {
         if (photoSize == null) {
             if (Build.VERSION.SDK_INT >= 16) {
@@ -501,4 +409,97 @@ public static void clearCursorDrawable(EditText editText) {
             FileLog.e("tmessages", e);
         }
     }
+
+    public static int getViewInset(View view) {
+        if (view == null || Build.VERSION.SDK_INT < 21) {
+            return 0;
+        }
+        try {
+            Field mAttachInfoField = View.class.getDeclaredField("mAttachInfo");
+            mAttachInfoField.setAccessible(true);
+            Object mAttachInfo = mAttachInfoField.get(view);
+            if (mAttachInfo != null) {
+                Field mStableInsetsField = mAttachInfo.getClass().getDeclaredField("mStableInsets");
+                mStableInsetsField.setAccessible(true);
+                Rect insets = (Rect)mStableInsetsField.get(mAttachInfo);
+                return insets.bottom;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return 0;
+    }
+
+    public static int getCurrentActionBarHeight() {
+        if (isTablet()) {
+            return dp(64);
+        } else if (ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            return dp(48);
+        } else {
+            return dp(56);
+        }
+    }
+
+    public static Point getRealScreenSize() {
+        Point size = new Point();
+        try {
+            WindowManager windowManager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                windowManager.getDefaultDisplay().getRealSize(size);
+            } else {
+                try {
+                    Method mGetRawW = Display.class.getMethod("getRawWidth");
+                    Method mGetRawH = Display.class.getMethod("getRawHeight");
+                    size.set((Integer) mGetRawW.invoke(windowManager.getDefaultDisplay()), (Integer) mGetRawH.invoke(windowManager.getDefaultDisplay()));
+                } catch (Exception e) {
+                    size.set(windowManager.getDefaultDisplay().getWidth(), windowManager.getDefaultDisplay().getHeight());
+                    FileLog.e("tmessages", e);
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return size;
+    }
+
+    public static void setListViewEdgeEffectColor(AbsListView listView, int color) {
+        if (Build.VERSION.SDK_INT >= 21) {
+            try {
+                Field field = AbsListView.class.getDeclaredField("mEdgeGlowTop");
+                field.setAccessible(true);
+                EdgeEffect mEdgeGlowTop = (EdgeEffect) field.get(listView);
+                if (mEdgeGlowTop != null) {
+                    mEdgeGlowTop.setColor(color);
+                }
+
+                field = AbsListView.class.getDeclaredField("mEdgeGlowBottom");
+                field.setAccessible(true);
+                EdgeEffect mEdgeGlowBottom = (EdgeEffect) field.get(listView);
+                if (mEdgeGlowBottom != null) {
+                    mEdgeGlowBottom.setColor(color);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+    }
+
+    public static void clearDrawableAnimation(View view) {
+        if (Build.VERSION.SDK_INT < 21 || view == null) {
+            return;
+        }
+        Drawable drawable = null;
+        if (view instanceof ListView) {
+            drawable = ((ListView) view).getSelector();
+            if (drawable != null) {
+                drawable.setState(StateSet.NOTHING);
+            }
+        } else {
+            drawable = view.getBackground();
+            if (drawable != null) {
+                drawable.setState(StateSet.NOTHING);
+                drawable.jumpToCurrentState();
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
index a52ccccc4..5368465c1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
@@ -16,7 +16,7 @@
 
 public class AppStartReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent intent) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 ApplicationLoader.startPushService();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index d6f71a5c4..d10ae4e71 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -10,9 +10,11 @@
 
 import android.accounts.Account;
 import android.accounts.AccountManager;
+import android.app.Activity;
 import android.content.ContentProviderOperation;
 import android.content.ContentProviderResult;
 import android.content.ContentResolver;
+import android.content.SharedPreferences;
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.BaseColumns;
@@ -35,9 +37,11 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 
 public class ContactsController {
+
     private Account currentAccount;
     private boolean loadingContacts = false;
     private static final Object loadContactsSync = new Object();
@@ -48,6 +52,13 @@
     private boolean contactsBookLoaded = false;
     private String lastContactsVersions = "";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<Integer>();
+    private String inviteText;
+    private boolean updatingInviteText = false;
+
+    private int loadingDeleteInfo = 0;
+    private int deleteAccountTTL;
+    private int loadingLastSeenInfo = 0;
+    private ArrayList<TLRPC.PrivacyRule> privacyRules = null;
 
     public static class Contact {
         public int id;
@@ -75,8 +86,7 @@
 
     public HashMap<Integer, Contact> contactsBook = new HashMap<Integer, Contact>();
     public HashMap<String, Contact> contactsBookSPhones = new HashMap<String, Contact>();
-    public HashMap<String, ArrayList<Contact>> contactsSectionsDict = new HashMap<String, ArrayList<Contact>>();
-    public ArrayList<String> sortedContactsSectionsArray = new ArrayList<String>();
+    public ArrayList<Contact> phoneBookContacts = new ArrayList<Contact>();
 
     public ArrayList<TLRPC.TL_contact> contacts = new ArrayList<TLRPC.TL_contact>();
     public SparseArray<TLRPC.TL_contact> contactsDict = new SparseArray<TLRPC.TL_contact>();
@@ -99,11 +109,17 @@ public static ContactsController getInstance() {
         return localInstance;
     }
 
+    public ContactsController() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (preferences.getBoolean("needGetStatuses", false)) {
+            reloadContactsStatuses();
+        }
+    }
+
     public void cleanup() {
         contactsBook.clear();
         contactsBookSPhones.clear();
-        contactsSectionsDict.clear();
-        sortedContactsSectionsArray.clear();
+        phoneBookContacts.clear();
         contacts.clear();
         contactsDict.clear();
         usersSectionsDict.clear();
@@ -116,6 +132,49 @@ public void cleanup() {
         contactsLoaded = false;
         contactsBookLoaded = false;
         lastContactsVersions = "";
+        loadingDeleteInfo = 0;
+        deleteAccountTTL = 0;
+        loadingLastSeenInfo = 0;
+        privacyRules = null;
+    }
+
+    public void checkInviteText() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        inviteText = preferences.getString("invitetext", null);
+        int time = preferences.getInt("invitetexttime", 0);
+        if (!updatingInviteText && (inviteText == null || time + 86400 < (int)(System.currentTimeMillis() / 1000))) {
+            updatingInviteText = true;
+            TLRPC.TL_help_getInviteText req = new TLRPC.TL_help_getInviteText();
+            req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
+            if (req.lang_code == null || req.lang_code.length() == 0) {
+                req.lang_code = "en";
+            }
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error == null) {
+                        final TLRPC.TL_help_inviteText res = (TLRPC.TL_help_inviteText)response;
+                        if (res.message.length() != 0) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    updatingInviteText = false;
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putString("invitetext", res.message);
+                                    editor.putInt("invitetexttime", (int) (System.currentTimeMillis() / 1000));
+                                    editor.commit();
+                                }
+                            });
+                        }
+                    }
+                }
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        }
+    }
+
+    public String getInviteText() {
+        return inviteText != null ? inviteText : LocaleController.getString("InviteText", R.string.InviteText);
     }
 
     public void checkAppAccount() {
@@ -419,7 +478,7 @@ public void run() {
                                 FileLog.e("tmessages", "detected account deletion!");
                                 currentAccount = new Account(UserConfig.getCurrentUser().phone, "org.telegram.account");
                                 am.addAccountExplicitly(currentAccount, "", null);
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         performWriteContactsToPhoneBook();
@@ -546,7 +605,7 @@ public void run() {
                             MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
                         }
                         if (!disableDeletion && !contactHashMap.isEmpty()) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     if (BuildVars.DEBUG_VERSION) {
@@ -702,7 +761,7 @@ public void run() {
                                 }
                             }
                         });
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 updateUnregisteredContacts(contacts);
@@ -763,7 +822,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 applyContactsUpdates(delayedContactsUpdate, null, null, null);
                                 delayedContactsUpdate.clear();
                             }
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     synchronized (loadContactsSync) {
@@ -784,13 +843,15 @@ public void run() {
 
     public void processLoadedContacts(final ArrayList<TLRPC.TL_contact> contactsArr, final ArrayList<TLRPC.User> usersArr, final int from) {
         //from: 0 - from server, 1 - from db, 2 - from imported contacts
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 MessagesController.getInstance().putUsers(usersArr, from == 1);
 
                 final HashMap<Integer, TLRPC.User> usersDict = new HashMap<Integer, TLRPC.User>();
 
+                final boolean isEmpty = contactsArr.isEmpty();
+
                 if (!contacts.isEmpty()) {
                     for (int a = 0; a < contactsArr.size(); a++) {
                         TLRPC.TL_contact contact = contactsArr.get(a);
@@ -928,7 +989,7 @@ public int compare(String s, String s2) {
                             }
                         });
 
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 contacts = contactsArr;
@@ -944,6 +1005,12 @@ public void run() {
                                 updateUnregisteredContacts(contactsArr);
 
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
+
+                                if (from != 1 && !isEmpty) {
+                                    saveContactsLoadTime();
+                                } else {
+                                    reloadContactsStatusesMaybe();
+                                }
                             }
                         });
 
@@ -953,7 +1020,7 @@ public void run() {
                         }
 
                         if (contactsByPhonesDictFinal != null) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     Utilities.globalQueue.postRunnable(new Runnable() {
@@ -978,6 +1045,27 @@ public void run() {
         });
     }
 
+    private void reloadContactsStatusesMaybe() {
+        try {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            long lastReloadStatusTime = preferences.getLong("lastReloadStatusTime", 0);
+            if (lastReloadStatusTime < System.currentTimeMillis() - 1000 * 60 * 60 * 24) {
+                reloadContactsStatuses();
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private void saveContactsLoadTime() {
+        try {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().putLong("lastReloadStatusTime", System.currentTimeMillis()).commit();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
     private void updateUnregisteredContacts(final ArrayList<TLRPC.TL_contact> contactsArr) {
         final HashMap<String, TLRPC.TL_contact> contactsPhonesShort = new HashMap<String, TLRPC.TL_contact>();
 
@@ -989,8 +1077,7 @@ private void updateUnregisteredContacts(final ArrayList<TLRPC.TL_contact> contac
             contactsPhonesShort.put(user.phone, value);
         }
 
-        final HashMap<String, ArrayList<Contact>> sectionsPhoneDict = new HashMap<String, ArrayList<Contact>>();
-        final ArrayList<String> sortedSectionsPhoneArray = new ArrayList<String>();
+        final ArrayList<Contact> sortedPhoneBookContacts = new ArrayList<Contact>();
         for (HashMap.Entry<Integer, Contact> pair : contactsBook.entrySet()) {
             Contact value = pair.getValue();
             int id = pair.getKey();
@@ -1007,61 +1094,24 @@ private void updateUnregisteredContacts(final ArrayList<TLRPC.TL_contact> contac
                 continue;
             }
 
-            String key = value.first_name;
-            if (key.length() == 0) {
-                key = value.last_name;
-            }
-            if (key.length() == 0) {
-                key = "#";
-                if (value.phones.size() != 0) {
-                    value.first_name = "+" + value.phones.get(0);
-                }
-            } else {
-                key = key.toUpperCase();
-            }
-            if (key.length() > 1) {
-                key = key.substring(0, 1);
-            }
-            ArrayList<Contact> arr = sectionsPhoneDict.get(key);
-            if (arr == null) {
-                arr = new ArrayList<Contact>();
-                sectionsPhoneDict.put(key, arr);
-                sortedSectionsPhoneArray.add(key);
-            }
-            arr.add(value);
+            sortedPhoneBookContacts.add(value);
         }
-        for (HashMap.Entry<String, ArrayList<Contact>> entry : sectionsPhoneDict.entrySet()) {
-            Collections.sort(entry.getValue(), new Comparator<Contact>() {
-                @Override
-                public int compare(Contact contact, Contact contact2) {
-                    String toComapre1 = contact.first_name;
-                    if (toComapre1.length() == 0) {
-                        toComapre1 = contact.last_name;
-                    }
-                    String toComapre2 = contact2.first_name;
-                    if (toComapre2.length() == 0) {
-                        toComapre2 = contact2.last_name;
-                    }
-                    return toComapre1.compareTo(toComapre2);
-                }
-            });
-        }
-        Collections.sort(sortedSectionsPhoneArray, new Comparator<String>() {
+        Collections.sort(sortedPhoneBookContacts, new Comparator<Contact>() {
             @Override
-            public int compare(String s, String s2) {
-                char cv1 = s.charAt(0);
-                char cv2 = s2.charAt(0);
-                if (cv1 == '#') {
-                    return 1;
-                } else if (cv2 == '#') {
-                    return -1;
+            public int compare(Contact contact, Contact contact2) {
+                String toComapre1 = contact.first_name;
+                if (toComapre1.length() == 0) {
+                    toComapre1 = contact.last_name;
                 }
-                return s.compareTo(s2);
+                String toComapre2 = contact2.first_name;
+                if (toComapre2.length() == 0) {
+                    toComapre2 = contact2.last_name;
+                }
+                return toComapre1.compareTo(toComapre2);
             }
         });
 
-        contactsSectionsDict = sectionsPhoneDict;
-        sortedContactsSectionsArray = sortedSectionsPhoneArray;
+        phoneBookContacts = sortedPhoneBookContacts;
     }
 
     private void buildContactsSectionsArrays(boolean sort) {
@@ -1272,7 +1322,7 @@ public void run() {
         } else {
             final ArrayList<TLRPC.TL_contact> newContacts = newC;
             final ArrayList<Integer> contactsToDelete = contactsTD;
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     for (TLRPC.TL_contact contact : newContacts) {
@@ -1477,7 +1527,7 @@ public void run() {
                     }
                 }
 
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         for (TLRPC.User u : res.users) {
@@ -1541,7 +1591,7 @@ public void run() {
                     }
                 }
 
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         boolean remove = false;
@@ -1564,6 +1614,129 @@ public void run() {
         }, true, RPCRequest.RPCRequestClassGeneric);
     }
 
+    public void reloadContactsStatuses() {
+        saveContactsLoadTime();
+        MessagesController.getInstance().clearFullUsers();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        final SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("needGetStatuses", true).commit();
+        TLRPC.TL_contacts_getStatuses req = new TLRPC.TL_contacts_getStatuses();
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            editor.remove("needGetStatuses").commit();
+                            TLRPC.Vector vector = (TLRPC.Vector) response;
+                            if (!vector.objects.isEmpty()) {
+                                ArrayList<TLRPC.User> dbUsersStatus = new ArrayList<TLRPC.User>();
+                                for (Object object : vector.objects) {
+                                    TLRPC.User toDbUser = new TLRPC.User();
+                                    TLRPC.TL_contactStatus status = (TLRPC.TL_contactStatus) object;
+
+                                    if (status.status instanceof TLRPC.TL_userStatusRecently) {
+                                        status.status.expires = -100;
+                                    } else if (status.status instanceof TLRPC.TL_userStatusLastWeek) {
+                                        status.status.expires = -101;
+                                    } else if (status.status instanceof TLRPC.TL_userStatusLastMonth) {
+                                        status.status.expires = -102;
+                                    }
+
+                                    TLRPC.User user = MessagesController.getInstance().getUser(status.user_id);
+                                    if (user != null) {
+                                        user.status = status.status;
+                                    }
+                                    toDbUser.status = status.status;
+                                    dbUsersStatus.add(toDbUser);
+                                }
+                                MessagesStorage.getInstance().updateUsers(dbUsersStatus, true, true, true);
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_STATUS);
+                        }
+                    });
+                }
+            }
+        });
+    }
+
+    public void loadPrivacySettings() {
+        if (loadingDeleteInfo == 0) {
+            loadingDeleteInfo = 1;
+            TLRPC.TL_account_getAccountTTL req = new TLRPC.TL_account_getAccountTTL();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (error == null) {
+                                TLRPC.TL_accountDaysTTL ttl = (TLRPC.TL_accountDaysTTL) response;
+                                deleteAccountTTL = ttl.days;
+                                loadingDeleteInfo = 2;
+                            } else {
+                                loadingDeleteInfo = 0;
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
+                        }
+                    });
+                }
+            });
+        }
+        if (loadingLastSeenInfo == 0) {
+            loadingLastSeenInfo = 1;
+            TLRPC.TL_account_getPrivacy req = new TLRPC.TL_account_getPrivacy();
+            req.key = new TLRPC.TL_inputPrivacyKeyStatusTimestamp();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (error == null) {
+                                TLRPC.TL_account_privacyRules rules = (TLRPC.TL_account_privacyRules) response;
+                                MessagesController.getInstance().putUsers(rules.users, false);
+                                privacyRules = rules.rules;
+                                loadingLastSeenInfo = 2;
+                            } else {
+                                loadingLastSeenInfo = 0;
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
+                        }
+                    });
+                }
+            });
+        }
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
+    }
+
+    public void setDeleteAccountTTL(int ttl) {
+        deleteAccountTTL = ttl;
+    }
+
+    public int getDeleteAccountTTL() {
+        return deleteAccountTTL;
+    }
+
+    public boolean getLoadingDeleteInfo() {
+        return loadingDeleteInfo != 2;
+    }
+
+    public boolean getLoadingLastSeenInfo() {
+        return loadingLastSeenInfo != 2;
+    }
+
+    public ArrayList<TLRPC.PrivacyRule> getPrivacyRules() {
+        return privacyRules;
+    }
+
+    public void setPrivacyRules(ArrayList<TLRPC.PrivacyRule> rules) {
+        privacyRules = rules;
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
+        reloadContactsStatuses();
+    }
+
     public static String formatName(String firstName, String lastName) {
         String result = null;
         if (LocaleController.nameDisplayOrder == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index df47ba902..6a4ae5a48 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -736,8 +736,12 @@ private static void loadEmoji(final int page) {
             opts.inJustDecodeBounds = true;
             BitmapFactory.decodeFile(imageFile.getAbsolutePath(), opts);
 
-            final Bitmap bitmap = Bitmap.createBitmap(opts.outWidth / imageResize, opts.outHeight / imageResize, Bitmap.Config.ARGB_8888);
-            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize);
+            int width = opts.outWidth / imageResize;
+            int height = opts.outHeight / imageResize;
+            int stride = width * 4;
+
+            final Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, width, height, stride);
 
             imageName = String.format(Locale.US, "emoji%.01fx_a_%d.jpg", scale, page);
             imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
@@ -747,9 +751,9 @@ private static void loadEmoji(final int page) {
                 is.close();
             }
 
-            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize);
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, width, height, stride);
 
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     emojiBmp[page] = bitmap;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
index 04f282cb6..7b33e2c6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
@@ -27,7 +27,7 @@ public void onReceive(final Context context, final Intent intent) {
         FileLog.d("tmessages", "GCM received intent: " + intent);
 
         if (intent.getAction().equals("com.google.android.c2dm.intent.RECEIVE")) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     ApplicationLoader.postInitApplication();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 4b4fc71e8..1cf319be8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -307,7 +307,7 @@ public void run() {
         }
 
         private void onPostExecute(final BitmapDrawable bitmapDrawable) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     if (bitmapDrawable != null && memCache.get(cacheImage.key) == null) {
@@ -518,7 +518,7 @@ public void fileUploadProgressChanged(final String location, final float progres
                 if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
                     lastProgressUpdateTime = currentTime;
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileUploadProgressChanged, location, progress, isEncrypted);
@@ -549,7 +549,7 @@ public void run() {
 
             @Override
             public void fileDidLoaded(final String location, final File finalFile, final File tempFile) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (location != null) {
@@ -567,7 +567,7 @@ public void run() {
 
             @Override
             public void fileDidFailedLoad(final String location, final int state) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         ImageLoader.this.fileDidFailedLoad(location);
@@ -581,7 +581,7 @@ public void fileLoadProgressChanged(final String location, final float progress)
                 long currentTime = System.currentTimeMillis();
                 if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
                     lastProgressUpdateTime = currentTime;
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileLoadProgressChanged, location, progress);
@@ -601,7 +601,7 @@ public void run() {
                     }
                 };
                 if (Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {
-                    AndroidUtilities.RunOnUIThread(r, 1000);
+                    AndroidUtilities.runOnUIThread(r, 1000);
                 } else {
                     r.run();
                 }
@@ -816,7 +816,7 @@ public BitmapDrawable getImageFromMemory(TLRPC.FileLocation url, String httpUrl,
     }
 
     public void replaceImageInCache(final String oldKey, final String newKey) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 ArrayList<String> arr = memCache.getFilterKeys(oldKey);
@@ -1117,9 +1117,9 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
         return b;
     }
 
-    private static TLRPC.PhotoSize scaleAndSaveImageInternal(Bitmap bitmap, int w, int h, float photoW, float photoH, float scaleFactor, int quality, boolean cache) throws Exception {
+    private static TLRPC.PhotoSize scaleAndSaveImageInternal(Bitmap bitmap, int w, int h, float photoW, float photoH, float scaleFactor, int quality, boolean cache, boolean scaleAnyway) throws Exception {
         Bitmap scaledBitmap = null;
-        if (scaleFactor > 1) {
+        if (scaleFactor > 1 || scaleAnyway) {
             scaledBitmap = Bitmap.createScaledBitmap(bitmap, w, h, true);
         } else {
             scaledBitmap = bitmap;
@@ -1171,6 +1171,10 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
     }
 
     public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache) {
+        return scaleAndSaveImage(bitmap, maxWidth, maxHeight, quality, cache, 0, 0);
+    }
+
+    public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache, int minWidth, int minHeight) {
         if (bitmap == null) {
             return null;
         }
@@ -1179,7 +1183,12 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
         if (photoW == 0 || photoH == 0) {
             return null;
         }
+        boolean scaleAnyway = false;
         float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
+        if (scaleFactor < 1 && minWidth != 0 && minHeight != 0) {
+            scaleFactor = Math.max(photoW / minWidth, photoH / minHeight);
+            scaleAnyway = true;
+        }
         int w = (int)(photoW / scaleFactor);
         int h = (int)(photoH / scaleFactor);
         if (h == 0 || w == 0) {
@@ -1187,13 +1196,13 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
         }
 
         try {
-            return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache);
+            return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
         } catch (Throwable e) {
             FileLog.e("tmessages", e);
             ImageLoader.getInstance().clearMemory();
             System.gc();
             try {
-                return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache);
+                return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
             } catch (Throwable e2) {
                 FileLog.e("tmessages", e2);
                 return null;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 415bbc5e4..21229633d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -139,7 +139,7 @@ public void setImageBitmap(BitmapDrawable bitmap, String imgKey) {
         if (roundRadius != 0) {
             bitmapShader = new BitmapShader(bitmap.getBitmap(), Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
             roundPaint.setShader(bitmapShader);
-            bitmapRect.set(0, 0, bitmap.getIntrinsicWidth(), bitmap.getIntrinsicHeight());
+            bitmapRect.set(0, 0, bitmap.getBitmap().getWidth(), bitmap.getBitmap().getHeight());
         }
         if (parentView != null) {
             parentView.invalidate();
@@ -225,11 +225,13 @@ public boolean draw(Canvas canvas) {
             if (bitmapDrawable != null) {
                 if (bitmapShader != null) {
                     drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
-                    roundRect.set(imageX, imageY, imageX + imageW, imageY + imageH);
-                    shaderMatrix.reset();
-                    shaderMatrix.setScale(1.5f, 1.5f);
-                    bitmapShader.setLocalMatrix(shaderMatrix);
-                    canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
+                    if (isVisible) {
+                        roundRect.set(drawRegion);
+                        shaderMatrix.reset();
+                        shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                        bitmapShader.setLocalMatrix(shaderMatrix);
+                        canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
+                    }
                 } else {
                     int bitmapW = bitmapDrawable.getIntrinsicWidth();
                     int bitmapH = bitmapDrawable.getIntrinsicHeight();
@@ -412,10 +414,12 @@ public void setForcePreview(boolean value) {
     public void setRoundRadius(int value) {
         roundRadius = value;
         if (roundRadius != 0) {
-            roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            roundRect = new RectF();
-            shaderMatrix = new Matrix();
-            bitmapRect = new RectF();
+            if (roundPaint == null) {
+                roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+                roundRect = new RectF();
+                shaderMatrix = new Matrix();
+                bitmapRect = new RectF();
+            }
         } else {
             roundPaint = null;
             roundRect = null;
@@ -423,4 +427,8 @@ public void setRoundRadius(int value) {
             bitmapRect = null;
         }
     }
+
+    public int getRoundRadius() {
+        return roundRadius;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index fb20c9484..6da2ae3b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -782,8 +782,17 @@ public static String stringForMessageListDate(long date) {
     }
 
     public static String formatUserStatus(TLRPC.User user) {
+        if (user != null && user.status != null && user.status.expires == 0) {
+            if (user.status instanceof TLRPC.TL_userStatusRecently) {
+                user.status.expires = -100;
+            } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
+                user.status.expires = -101;
+            } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
+                user.status.expires = -102;
+            }
+        }
         if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
-            return getString("Offline", R.string.Offline);
+            return getString("ALongTimeAgo", R.string.ALongTimeAgo);
         } else {
             int currentTime = ConnectionsManager.getInstance().getCurrentTime();
             if (user.status.expires > currentTime) {
@@ -791,7 +800,13 @@ public static String formatUserStatus(TLRPC.User user) {
             } else {
                 if (user.status.expires == -1) {
                     return getString("Invisible", R.string.Invisible);
-                } else {
+                } else if (user.status.expires == -100) {
+                    return getString("Lately", R.string.Lately);
+                } else if (user.status.expires == -101) {
+                    return getString("WithinAWeek", R.string.WithinAWeek);
+                } else if (user.status.expires == -102) {
+                    return getString("WithinAMonth", R.string.WithinAMonth);
+                }  else {
                     return formatDateOnline(user.status.expires);
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index ad08add77..1bc67365a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -38,9 +38,7 @@
 import android.os.ParcelFileDescriptor;
 import android.os.Vibrator;
 import android.provider.MediaStore;
-import android.view.Display;
 import android.view.View;
-import android.view.WindowManager;
 
 import org.telegram.android.video.InputSurface;
 import org.telegram.android.video.MP4Builder;
@@ -62,7 +60,6 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.lang.ref.WeakReference;
-import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
@@ -273,7 +270,7 @@ public void run() {
                         });
                     }
                     recordQueue.postRunnable(recordRunnable);
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordProgressChanged, System.currentTimeMillis() - recordStartTime);
@@ -451,7 +448,7 @@ private void startProgressTimer() {
                 @Override
                 public void run() {
                     synchronized (sync) {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 if (playingMessageObject != null && (audioPlayer != null || audioTrackPlayer != null) && !isPaused) {
@@ -739,29 +736,7 @@ public void stopMediaObserver() {
 
     public void processMediaObserver(Uri uri) {
         try {
-            int width = 0;
-            int height = 0;
-
-            try {
-                WindowManager windowManager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                    Point size = new Point();
-                    windowManager.getDefaultDisplay().getRealSize(size);
-                    width = size.x;
-                    height = size.y;
-                } else {
-                    try {
-                        Method mGetRawW = Display.class.getMethod("getRawWidth");
-                        Method mGetRawH = Display.class.getMethod("getRawHeight");
-                        width = (Integer) mGetRawW.invoke(windowManager.getDefaultDisplay());
-                        height = (Integer) mGetRawH.invoke(windowManager.getDefaultDisplay());
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
+            Point size = AndroidUtilities.getRealScreenSize();
 
             Cursor cursor = ApplicationLoader.applicationContext.getContentResolver().query(uri, mediaProjections, null, null, "date_added DESC LIMIT 1");
             final ArrayList<Long> screenshotDates = new ArrayList<Long>();
@@ -791,7 +766,7 @@ public void processMediaObserver(Uri uri) {
                                 photoW = bmOptions.outWidth;
                                 photoH = bmOptions.outHeight;
                             }
-                            if (photoW <= 0 || photoH <= 0 || (photoW == width && photoH == height || photoH == width && photoW == height)) {
+                            if (photoW <= 0 || photoH <= 0 || (photoW == size.x && photoH == size.y || photoH == size.x && photoW == size.y)) {
                                 screenshotDates.add(date);
                             }
                         } catch (Exception e) {
@@ -802,7 +777,7 @@ public void processMediaObserver(Uri uri) {
                 cursor.close();
             }
             if (!screenshotDates.isEmpty()) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.screenshotTook);
@@ -1060,7 +1035,7 @@ public void run() {
                     if (count > 0) {
                         final long pcm = buffer.pcmOffset;
                         final int marker = buffer.finished == 1 ? buffer.size : -1;
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 lastPlayPcm = pcm;
@@ -1149,7 +1124,7 @@ public void run() {
                     freePlayerBuffers.addAll(usedPlayerBuffers);
                     usedPlayerBuffers.clear();
                 }
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (!isPaused) {
@@ -1404,7 +1379,7 @@ public void startRecording(final long dialog_id) {
             @Override
             public void run() {
                 if (audioRecorder != null) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
@@ -1425,7 +1400,7 @@ public void run() {
 
                 try {
                     if (startRecord(recordingAudioFile.getAbsolutePath()) == 0) {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
@@ -1453,7 +1428,7 @@ public void run() {
                         FileLog.e("tmessages", e2);
                     }
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
@@ -1463,7 +1438,7 @@ public void run() {
                 }
 
                 recordQueue.postRunnable(recordRunnable);
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStarted);
@@ -1481,7 +1456,7 @@ private void stopRecordingInternal(final boolean send) {
                 @Override
                 public void run() {
                     stopRecord();
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             audioToSend.date = ConnectionsManager.getInstance().getCurrentTime();
@@ -1536,7 +1511,7 @@ public void run() {
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStopped);
@@ -1609,7 +1584,7 @@ public void run() {
                                     if (lastProgress <= System.currentTimeMillis() - 500) {
                                         lastProgress = System.currentTimeMillis();
                                         final int progress = (int) ((float) a / (float) size * 100);
-                                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
                                             @Override
                                             public void run() {
                                                 try {
@@ -1641,7 +1616,7 @@ public void run() {
                         FileLog.e("tmessages", e);
                     }
                     if (finalProgress != null) {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 try {
@@ -1915,7 +1890,7 @@ public void run() {
                     }
                 }
                 final Integer cameraAlbumIdFinal = cameraAlbumId;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal);
@@ -2037,7 +2012,7 @@ private void didWriteData(final MessageObject messageObject, final File file, fi
         if (firstWrite) {
             videoConvertFirstWrite = false;
         }
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 if (error) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index e9fece9a8..69f5f2fff 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -60,7 +60,6 @@
     public boolean loadingBlockedUsers = false;
     public ArrayList<Integer> blockedUsers = new ArrayList<Integer>();
 
-    public HashMap<Integer, TLRPC.User> hidenAddToContacts = new HashMap<Integer, TLRPC.User>();
     private HashMap<Integer, TLRPC.EncryptedChat> acceptingChats = new HashMap<Integer, TLRPC.EncryptedChat>();
     private ArrayList<TLRPC.Updates> updatesQueue = new ArrayList<TLRPC.Updates>();
     private ArrayList<Long> pendingEncMessagesToDelete = new ArrayList<Long>();
@@ -69,6 +68,8 @@
     private boolean startingSecretChat = false;
     private ArrayList<Integer> loadingFullUsers = new ArrayList<Integer>();
     private ArrayList<Integer> loadedFullUsers = new ArrayList<Integer>();
+    private ArrayList<Integer> loadingFullChats = new ArrayList<Integer>();
+    private ArrayList<Integer> loadedFullChats = new ArrayList<Integer>();
 
     private HashMap<Integer, ArrayList<TLRPC.TL_decryptedMessageHolder>> secretHolesQueue = new HashMap<Integer, ArrayList<TLRPC.TL_decryptedMessageHolder>>();
 
@@ -110,6 +111,7 @@
     public static final int UPDATE_MASK_USER_PRINT = 64;
     public static final int UPDATE_MASK_USER_PHONE = 128;
     public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
+    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
     public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE;
 
     public static class PrintingUser {
@@ -150,7 +152,7 @@ public MessagesController() {
     }
 
     public void updateConfig(final TLRPC.TL_config config) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 maxBroadcastCount = config.broadcast_size_max;
@@ -247,7 +249,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
                             users.add(user);
                             MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_AVATAR);
@@ -316,7 +318,6 @@ public void cleanUp() {
         printingStrings.clear();
         totalDialogsCount = 0;
         lastPrintingStringCount = 0;
-        hidenAddToContacts.clear();
         updatesQueue.clear();
         pendingEncMessagesToDelete.clear();
         delayedEncryptedChatUpdates.clear();
@@ -324,6 +325,8 @@ public void cleanUp() {
         sendingTypings.clear();
         loadingFullUsers.clear();
         loadedFullUsers.clear();
+        loadingFullUsers.clear();
+        loadedFullUsers.clear();
         secretHolesQueue.clear();
 
         updatesStartWaitTime = 0;
@@ -390,7 +393,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
         if (user == null) {
             return false;
         }
-        fromCache = fromCache && user.id / 1000 != 333;
+        fromCache = fromCache && user.id / 1000 != 333 && user.id != 777000;
         TLRPC.User oldUser = users.get(user.id);
         if (!fromCache) {
             users.put(user.id, user);
@@ -418,7 +421,7 @@ public void putUsers(ArrayList<TLRPC.User> users, boolean fromCache) {
             }
         }
         if (updateStatus) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_STATUS);
@@ -471,6 +474,55 @@ public void cancelLoadFullUser(int uid) {
         loadingFullUsers.remove((Integer) uid);
     }
 
+    public void cancelLoadFullChat(int cid) {
+        loadingFullChats.remove((Integer) cid);
+    }
+
+    protected void clearFullUsers() {
+        loadedFullUsers.clear();
+        loadedFullChats.clear();
+    }
+
+    public void loadFullChat(final int chat_id, final int classGuid) {
+        if (loadingFullChats.contains(chat_id) || loadedFullChats.contains(chat_id)) {
+            return;
+        }
+        loadingFullChats.add(chat_id);
+        TLRPC.TL_messages_getFullChat req = new TLRPC.TL_messages_getFullChat();
+        req.chat_id = chat_id;
+        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    final TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+                    MessagesStorage.getInstance().updateChatInfo(chat_id, res.full_chat.participants, false);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            loadingFullChats.remove((Integer)chat_id);
+                            loadedFullChats.add(chat_id);
+
+                            putUsers(res.users, false);
+                            putChats(res.chats, false);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, chat_id, res.full_chat.participants);
+                        }
+                    });
+                } else {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            loadingFullChats.remove((Integer) chat_id);
+                        }
+                    });
+                }
+            }
+        });
+        if (classGuid != 0) {
+            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+        }
+    }
+
     public void loadFullUser(final TLRPC.User user, final int classGuid) {
         if (user == null || loadingFullUsers.contains(user.id) || loadedFullUsers.contains(user.id)) {
             return;
@@ -482,7 +534,7 @@ public void loadFullUser(final TLRPC.User user, final int classGuid) {
             @Override
             public void run(final TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             loadingFullUsers.remove((Integer)user.id);
@@ -499,7 +551,7 @@ public void run() {
                         }
                     });
                 } else {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             loadingFullUsers.remove((Integer)user.id);
@@ -546,7 +598,7 @@ public void run() {
                 }
             }
         });
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, mids);
@@ -573,7 +625,7 @@ private boolean checkDeletingTask(boolean runnable) {
                 Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
             }
             currentDeleteTaskRunnable = null;
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     deleteMessages(currentDeletingTaskMids, null, null);
@@ -721,7 +773,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     public void processLoadedBlockedUsers(final ArrayList<Integer> ids, final ArrayList<TLRPC.User> users, final boolean cache) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 if (users != null) {
@@ -757,6 +809,7 @@ public void deleteUserPhoto(TLRPC.InputPhoto photo) {
             if (user != null) {
                 user.photo = UserConfig.getCurrentUser().photo;
             }
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
             ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
@@ -777,7 +830,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         users.add(user);
                         MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                         user.photo = (TLRPC.UserProfilePhoto)response;
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
@@ -807,7 +860,7 @@ public void processLoadedUserPhotos(final TLRPC.photos_Photos res, final int uid
             loadUserPhotos(uid, offset, count, max_id, false, classGuid);
             return;
         }
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 putUsers(res.users, fromCache);
@@ -835,7 +888,7 @@ public void processLoadedMedia(final TLRPC.messages_Messages res, final long uid
                 objects.add(new MessageObject(message, usersLocal));
             }
 
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     int totalCount;
@@ -892,7 +945,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     public void processLoadedMediaCount(final int count, final long uid, final int classGuid, final boolean fromCache) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 int lower_part = (int)uid;
@@ -939,7 +992,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
                         MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 putUsers(res.users, false);
@@ -1006,6 +1059,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     public void deleteDialog(final long did, int offset, final boolean onlyHistory) {
+        if (offset == 0) {
+            MessagesStorage.getInstance().deleteDialog(did, onlyHistory);
+        }
         TLRPC.TL_dialog dialog = dialogs_dict.get(did);
         if (dialog != null) {
             int lower_part = (int)did;
@@ -1024,7 +1080,7 @@ public void deleteDialog(final long did, int offset, final boolean onlyHistory)
                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                     @Override
                     public void run() {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
@@ -1035,7 +1091,6 @@ public void run() {
                         });
                     }
                 });
-                MessagesStorage.getInstance().deleteDialog(did, onlyHistory);
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, did);
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
             }
@@ -1087,30 +1142,11 @@ public void loadChatInfo(final int chat_id, Semaphore semaphore) {
     }
 
     public void processChatInfo(final int chat_id, final TLRPC.ChatParticipants info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache) {
-        if (info == null && fromCache) {
-            TLRPC.TL_messages_getFullChat req = new TLRPC.TL_messages_getFullChat();
-            req.chat_id = chat_id;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error != null) {
-                        return;
-                    }
-                    final TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
-                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-                    MessagesStorage.getInstance().updateChatInfo(chat_id, res.full_chat.participants, false);
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            putUsers(res.users, false);
-                            putChats(res.chats, false);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, chat_id, res.full_chat.participants);
-                        }
-                    });
-                }
-            });
-        } else {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+        if (fromCache && chat_id > 0) {
+            loadFullChat(chat_id, 0);
+        }
+        if (info != null) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     putUsers(usersArr, fromCache);
@@ -1203,7 +1239,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
             updatePrintingStrings();
 
             if (updated) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
@@ -1253,7 +1289,7 @@ public void updatePrintingStrings() {
 
         lastPrintingStringCount = newPrintingStrings.size();
 
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 printingStrings = newPrintingStrings;
@@ -1303,7 +1339,7 @@ public void sendTyping(final long dialog_id, int classGuid) {
             long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             sendingTypings.remove(dialog_id);
@@ -1332,7 +1368,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type) {
+    public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type, final int last_message_id, final int first_message_id, final boolean allowCache) {
         int lower_part = (int)dialog_id;
         if (fromCache || lower_part == 0) {
             MessagesStorage.getInstance().getMessages(dialog_id, count, max_id, midDate, classGuid, load_type);
@@ -1352,7 +1388,13 @@ public void loadMessages(final long dialog_id, final int count, final int max_id
                     req.peer.user_id = user.id;
                 }
             }
-            req.offset = 0;
+            if (load_type == 3) {
+                req.offset = -count / 2;
+            } else if (load_type == 1) {
+                req.offset = -count - 1;
+            } else {
+                req.offset = 0;
+            }
             req.limit = count;
             req.max_id = max_id;
             long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -1360,7 +1402,7 @@ public void loadMessages(final long dialog_id, final int count, final int max_id
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
                         final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                        processLoadedMessages(res, dialog_id, count, max_id, false, classGuid, 0, 0, 0, 0, load_type);
+                        processLoadedMessages(res, dialog_id, count, max_id, false, classGuid, 0, last_message_id, first_message_id, 0, 0, load_type, allowCache);
                     }
                 }
             });
@@ -1368,19 +1410,21 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int count, final int max_id, final boolean isCache, final int classGuid, final int first_unread, final int last_message_id, final int unread_count, final int last_date, final int load_type) {
+    public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int count, final int max_id, final boolean isCache, final int classGuid,
+                                      final int first_unread, final int last_message_id, final int first_message_id, final int unread_count, final int last_date, final int load_type, final boolean allowCache) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 int lower_id = (int)dialog_id;
-                if (!isCache) {
+                int high_id = (int)(dialog_id >> 32);
+                if (!isCache && allowCache) {
                     MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
                 }
-                if (lower_id != 0 && isCache && messagesRes.messages.size() == 0 && (load_type == 0 || load_type == 3)) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                if (high_id != 1 && lower_id != 0 && isCache && messagesRes.messages.size() == 0 && (load_type == 0 || load_type == 2 || load_type == 3)) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            loadMessages(dialog_id, count, max_id, false, 0, classGuid, load_type);
+                            loadMessages(dialog_id, count, max_id, false, 0, classGuid, load_type, last_message_id, first_message_id, allowCache);
                         }
                     });
                     return;
@@ -1394,12 +1438,12 @@ public void run() {
                     message.dialog_id = dialog_id;
                     objects.add(new MessageObject(message, usersLocal, 2));
                 }
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         putUsers(messagesRes.users, isCache);
                         putChats(messagesRes.chats, isCache);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDidLoaded, dialog_id, count, objects, isCache, first_unread, last_message_id, unread_count, last_date, load_type);
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDidLoaded, dialog_id, count, objects, isCache, first_unread, last_message_id, first_message_id, unread_count, last_date, load_type);
                     }
                 });
             }
@@ -1453,7 +1497,7 @@ private void applyDialogsNotificationsSettings(ArrayList<TLRPC.TL_dialog> dialog
     }
 
     public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdate) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 for (HashMap.Entry<Long, Integer> entry : dialogsToUpdate.entrySet()) {
@@ -1502,7 +1546,7 @@ public void run() {
                     dialogsToUpdate.put(d.id, d.unread_count);
                 }
 
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         putUsers(dialogsRes.users, true);
@@ -1571,7 +1615,7 @@ public void processLoadedDialogs(final TLRPC.messages_Dialogs dialogsRes, final
             @Override
             public void run() {
                 if (isCache && dialogsRes.dialogs.size() == 0) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(dialogsRes.users, isCache);
@@ -1626,7 +1670,7 @@ public void run() {
                 }
 
                 final int arg1 = new_totalDialogsCount;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (!isCache) {
@@ -1754,13 +1798,13 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                     @Override
                     public void run() {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
                                 if (dialog != null) {
                                     dialog.unread_count = 0;
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_READ_DIALOG_MESSAGE);
                                 }
                                 if (!popup) {
                                     NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id, false);
@@ -1817,14 +1861,14 @@ public void run(TLObject response, TLRPC.TL_error error) {
             MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0, popup);
                             TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
                             if (dialog != null) {
                                 dialog.unread_count = 0;
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_READ_DIALOG_MESSAGE);
                             }
                             HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
                             dialogsToUpdate.put(dialog_id, 0);
@@ -1915,7 +1959,7 @@ public long createChat(String title, ArrayList<Integer> selectedContacts, final
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error != null) {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidFailCreate);
@@ -1926,7 +1970,7 @@ public void run() {
                     final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                     MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(res.users, false);
@@ -1973,7 +2017,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                     MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(res.users, false);
@@ -2049,9 +2093,12 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         return;
                     }
                     final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                    if (user.id == UserConfig.getClientUserId()) {
+                        res.chats = null;
+                    }
                     MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(res.users, false);
@@ -2136,7 +2183,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                     MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(res.users, false);
@@ -2186,7 +2233,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                 MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         putUsers(res.users, false);
@@ -2288,7 +2335,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         UserConfig.pushString = regid;
                         UserConfig.saveConfig(false);
                     }
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             registeringForPush = false;
@@ -2386,7 +2433,7 @@ public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
             updatesStartWaitTime = 0;
             if (state == 1) {
                 final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2396,7 +2443,7 @@ public void run() {
         } else {
             if (state == 1) {
                 final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2430,7 +2477,7 @@ public void getDifference() {
         if (ConnectionsManager.getInstance().getConnectionState() == 0) {
             ConnectionsManager.getInstance().setConnectionState(3);
             final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2462,7 +2509,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         }
                     }
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             putUsers(res.users, false);
@@ -2483,7 +2530,7 @@ public void run() {
                                 }
 
                                 if (!corrected.isEmpty()) {
-                                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                         @Override
                                         public void run() {
                                             for (HashMap.Entry<Integer, Integer> entry : corrected.entrySet()) {
@@ -2551,7 +2598,7 @@ public void run() {
 
                                         processPendingEncMessages();
 
-                                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
                                             @Override
                                             public void run() {
                                                 for (HashMap.Entry<Long, ArrayList<MessageObject>> pair : messages.entrySet()) {
@@ -2566,7 +2613,7 @@ public void run() {
                                             @Override
                                             public void run() {
                                                 if (!pushMessages.isEmpty()) {
-                                                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                                         @Override
                                                         public void run() {
                                                             NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
@@ -2616,7 +2663,7 @@ public void run() {
                     gettingDifference = false;
                     ConnectionsManager.getInstance().setConnectionState(0);
                     final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2661,7 +2708,7 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
                     if (printUpdate) {
                         updatePrintingStrings();
                     }
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             if (printUpdate) {
@@ -2675,7 +2722,7 @@ public void run() {
                     MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     if (!obj.isFromMe() && obj.isUnread()) {
@@ -2727,7 +2774,7 @@ public void run() {
                     if (printUpdate) {
                         updatePrintingStrings();
                     }
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             if (printUpdate) {
@@ -2740,7 +2787,7 @@ public void run() {
                     MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     if (!obj.isFromMe() && obj.isUnread()) {
@@ -2892,7 +2939,7 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
         }
 
         if (usersArr != null || chatsArr != null) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     putUsers(usersArr, false);
@@ -3127,7 +3174,7 @@ public void run() {
                     dialog.top_message = 0;
                     dialog.last_message_date = update.date;
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             dialogs_dict.put(dialog.id, dialog);
@@ -3174,7 +3221,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newChat.seq_in = exist.seq_in;
                         newChat.seq_out = exist.seq_out;
                     }
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             if (exist != null) {
@@ -3197,7 +3244,7 @@ public void run() {
                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                     @Override
                     public void run() {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 if (finalUpdate.blocked) {
@@ -3236,6 +3283,8 @@ public void run() {
                 }
                 arr.add(obj);
                 pushMessages.add(obj);
+            } else if (update instanceof TLRPC.TL_updatePrivacy) {
+                updatesOnMainThread.add(update);
             }
         }
         if (!messages.isEmpty()) {
@@ -3264,7 +3313,7 @@ public void run() {
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (!pushMessages.isEmpty()) {
@@ -3279,7 +3328,7 @@ public void run() {
             MessagesStorage.getInstance().putMessages(messagesArr, true, true, false, MediaController.getInstance().getAutodownloadMask());
         }
 
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 int updateMask = interfaceUpdateMaskFinal;
@@ -3293,7 +3342,18 @@ public void run() {
                         TLRPC.User toDbUser = new TLRPC.User();
                         toDbUser.id = update.user_id;
                         TLRPC.User currentUser = getUser(update.user_id);
-                        if (update instanceof TLRPC.TL_updateUserStatus) {
+                        if (update instanceof TLRPC.TL_updatePrivacy) {
+                            if (update.key instanceof TLRPC.TL_privacyKeyStatusTimestamp) {
+                                ContactsController.getInstance().setPrivacyRules(update.rules);
+                            }
+                        } else if (update instanceof TLRPC.TL_updateUserStatus) {
+                            if (update.status instanceof TLRPC.TL_userStatusRecently) {
+                                update.status.expires = -100;
+                            } else if (update.status instanceof TLRPC.TL_userStatusLastWeek) {
+                                update.status.expires = -101;
+                            } else if (update.status instanceof TLRPC.TL_userStatusLastMonth) {
+                                update.status.expires = -102;
+                            }
                             if (currentUser != null) {
                                 currentUser.id = update.user_id;
                                 currentUser.status = update.status;
@@ -3387,7 +3447,7 @@ public void run() {
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         int updateMask = 0;
@@ -3764,7 +3824,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                     return newMessage;
                 } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
                     final long did = ((long)chat.id) << 32;
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             TLRPC.TL_dialog dialog = dialogs_dict.get(did);
@@ -3775,7 +3835,7 @@ public void run() {
                             MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                                 @Override
                                 public void run() {
-                                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                         @Override
                                         public void run() {
                                             NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
@@ -3909,7 +3969,7 @@ public int compare(TLRPC.TL_decryptedMessageHolder lhs, TLRPC.TL_decryptedMessag
                         newChat.auth_key = chat.auth_key;
                         newChat.seq_in = chat.seq_in;
                         newChat.seq_out = chat.seq_out;
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 putEncryptedChat(newChat, false);
@@ -3980,7 +4040,7 @@ public void processAcceptedSecretChat(final TLRPC.EncryptedChat encryptedChat) {
             encryptedChat.seq_in = 0;
             encryptedChat.seq_out = 1;
             MessagesStorage.getInstance().updateEncryptedChat(encryptedChat);
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     putEncryptedChat(encryptedChat, false);
@@ -3996,7 +4056,7 @@ public void run() {
             newChat.seq_in = encryptedChat.seq_in;
             newChat.seq_out = encryptedChat.seq_out;
             MessagesStorage.getInstance().updateEncryptedChat(newChat);
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     putEncryptedChat(newChat, false);
@@ -4105,7 +4165,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 newChat.seq_in = encryptedChat.seq_in;
                                 newChat.seq_out = encryptedChat.seq_out;
                                 MessagesStorage.getInstance().updateEncryptedChat(newChat);
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         putEncryptedChat(newChat, false);
@@ -4142,7 +4202,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     TLRPC.messages_DhConfig res = (TLRPC.messages_DhConfig) response;
                     if (response instanceof TLRPC.TL_messages_dhConfig) {
                         if (!Utilities.isGoodPrime(res.p, res.g)) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     try {
@@ -4183,7 +4243,7 @@ public void run() {
                         @Override
                         public void run(final TLObject response, TLRPC.TL_error error) {
                             if (error == null) {
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         startingSecretChat = false;
@@ -4242,7 +4302,7 @@ public void run() {
                                 });
                             } else {
                                 delayedEncryptedChatUpdates.clear();
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         if (!((Activity) context).isFinishing()) {
@@ -4265,7 +4325,7 @@ public void run() {
                     }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
                 } else {
                     delayedEncryptedChatUpdates.clear();
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             startingSecretChat = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 9bf30b189..8a98a2067 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -130,6 +130,9 @@ public void openDatabase() {
 
                 database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
 
+                //database.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
+                //database.executeFast("CREATE INDEX IF NOT EXISTS type_uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
+
                 database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
 
                 database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
@@ -185,7 +188,7 @@ public void openDatabase() {
                 }
 
                 int version = database.executeInt("PRAGMA user_version");
-                if (version < 7) {
+                if (version < 9) {
                     updateDbToLastVersion(version);
                 }
             }
@@ -320,6 +323,12 @@ public void run() {
                         database.executeFast("PRAGMA user_version = 8").stepThis().dispose();
                         version = 8;
                     }*/
+                    /*if ((version == 7 || version == 8) && version < 9) {
+                        database.executeFast("CREATE TABLE IF NOT EXISTS messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
+                        database.executeFast("CREATE INDEX IF NOT EXISTS type_uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 9").stepThis().dispose();
+                        version = 9;
+                    }*/
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -528,7 +537,7 @@ public void run() {
                         }
                     }
                     Collections.reverse(messages);
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             NotificationsController.getInstance().processLoadedUnreadMessages(pushDialogs, messages, users, chats, encryptedChats);
@@ -1034,7 +1043,7 @@ public void run() {
                         info.version = version;
 
                         final TLRPC.ChatParticipants finalInfo = info;
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo.chat_id, finalInfo);
@@ -1606,6 +1615,29 @@ public void run() {
         });
     }
 
+    /*private ArrayList<Range<Integer>> getHoles(long dialog_id) {
+        int lower_id = (int)dialog_id;
+        int high_id = (int)(dialog_id >> 32);
+
+        if (lower_id == 0 || lower_id != 0 && high_id == 1) {
+            return null;
+        }
+        ArrayList<Range<Integer>> holes = null;
+        try {
+            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d", dialog_id));
+            while (cursor.next()) {
+                if (holes == null) {
+                    holes = new ArrayList<Range<Integer>>();
+                }
+                holes.add(new Range<Integer>(cursor.intValue(0), cursor.intValue(1)));
+            }
+            cursor.dispose();
+        } catch (Exception e) {
+            FileLog.e("tmessages" , e);
+        }
+        return holes;
+    }*/
+
     public void getMessages(final long dialog_id, final int count, final int max_id, final int minDate, final int classGuid, final int load_type) {
         storageQueue.postRunnable(new Runnable() {
             @Override
@@ -1616,24 +1648,39 @@ public void run() {
                 int offset_query = 0;
                 int min_unread_id = 0;
                 int last_message_id = 0;
+                int first_message_id = 0;
                 int max_unread_date = 0;
+                int hole_start = Integer.MAX_VALUE;
+                int hole_end = Integer.MAX_VALUE;
                 try {
                     ArrayList<Integer> loadedUsers = new ArrayList<Integer>();
                     ArrayList<Integer> fromUser = new ArrayList<Integer>();
 
-                    SQLiteCursor cursor;
+                    SQLiteCursor cursor = null;
                     int lower_id = (int)dialog_id;
 
                     if (lower_id != 0) {
                         if (load_type == 3) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", dialog_id));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid), min(mid) FROM messages WHERE uid = %d AND mid > 0", dialog_id));
                             if (cursor.next()) {
                                 last_message_id = cursor.intValue(0);
+                                first_message_id = cursor.intValue(1);
                             }
                             cursor.dispose();
 
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT read_state, data, send_state, mid, date FROM messages WHERE uid = %d AND mid <= %d ORDER BY date DESC, mid DESC LIMIT %d) UNION " +
-                                    "SELECT * FROM (SELECT read_state, data, send_state, mid, date FROM messages WHERE uid = %d AND mid > %d ORDER BY date ASC, mid ASC LIMIT %d)", dialog_id, max_id, count_query / 2, dialog_id, max_id, count_query / 2));
+                            boolean containMessage = false;
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE mid = %d", max_id));
+                            if (cursor.next()) {
+                                containMessage = true;
+                            }
+                            cursor.dispose();
+
+                            if (containMessage) {
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT read_state, data, send_state, mid, date FROM messages WHERE uid = %d AND mid <= %d ORDER BY date DESC, mid DESC LIMIT %d) UNION " +
+                                        "SELECT * FROM (SELECT read_state, data, send_state, mid, date FROM messages WHERE uid = %d AND mid > %d ORDER BY date ASC, mid ASC LIMIT %d)", dialog_id, max_id, count_query / 2, dialog_id, max_id, count_query / 2 - 1));
+                            } else {
+                                cursor = null;
+                            }
                         } else if (load_type == 1) {
                             cursor = database.queryFinalized(String.format(Locale.US, "SELECT read_state, data, send_state, mid, date FROM messages WHERE uid = %d AND date >= %d AND mid > %d ORDER BY date ASC, mid ASC LIMIT %d", dialog_id, minDate, max_id, count_query));
                         } else if (minDate != 0) {
@@ -1724,107 +1771,107 @@ public void run() {
                             cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
                         }
                     }
-                    while (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                        if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                            if (load_type == 3 && res.messages.isEmpty()) {
-                                int id = cursor.intValue(3);
-                                if (id > max_id) {
-                                    break;
+                    if (cursor != null) {
+                        while (cursor.next()) {
+                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
+                            if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
+                                TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                MessageObject.setIsUnread(message, cursor.intValue(0) != 1);
+                                message.id = cursor.intValue(3);
+                                message.date = cursor.intValue(4);
+                                message.dialog_id = dialog_id;
+                                res.messages.add(message);
+                                fromUser.add(message.from_id);
+                                if (message.action != null && message.action.user_id != 0) {
+                                    fromUser.add(message.action.user_id);
                                 }
-                            }
-                            TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                            MessageObject.setIsUnread(message, cursor.intValue(0) != 1);
-                            message.id = cursor.intValue(3);
-                            message.date = cursor.intValue(4);
-                            message.dialog_id = dialog_id;
-                            res.messages.add(message);
-                            fromUser.add(message.from_id);
-                            if (message.action != null && message.action.user_id != 0) {
-                                fromUser.add(message.action.user_id);
-                            }
-                            if (message.media != null && message.media.user_id != 0) {
-                                fromUser.add(message.media.user_id);
-                            }
-                            if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
-                                fromUser.add(message.media.audio.user_id);
-                            }
-                            if (message.fwd_from_id != 0) {
-                                fromUser.add(message.fwd_from_id);
-                            }
-                            message.send_state = cursor.intValue(2);
-                            if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
-                                message.send_state = 0;
-                            }
-                            if (lower_id == 0 && !cursor.isNull(5)) {
-                                message.random_id = cursor.longValue(5);
-                            }
-                            if ((int)dialog_id == 0 && message.media != null && message.media.photo != null) {
-                                try {
-                                    SQLiteCursor cursor2 = database.queryFinalized(String.format(Locale.US, "SELECT date FROM enc_tasks_v2 WHERE mid = %d", message.id));
-                                    if (cursor2.next()) {
-                                        message.destroyTime = cursor2.intValue(0);
+                                if (message.media != null && message.media.user_id != 0) {
+                                    fromUser.add(message.media.user_id);
+                                }
+                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
+                                    fromUser.add(message.media.audio.user_id);
+                                }
+                                if (message.fwd_from_id != 0) {
+                                    fromUser.add(message.fwd_from_id);
+                                }
+                                message.send_state = cursor.intValue(2);
+                                if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
+                                    message.send_state = 0;
+                                }
+                                if (lower_id == 0 && !cursor.isNull(5)) {
+                                    message.random_id = cursor.longValue(5);
+                                }
+                                if ((int) dialog_id == 0 && message.media != null && message.media.photo != null) {
+                                    try {
+                                        SQLiteCursor cursor2 = database.queryFinalized(String.format(Locale.US, "SELECT date FROM enc_tasks_v2 WHERE mid = %d", message.id));
+                                        if (cursor2.next()) {
+                                            message.destroyTime = cursor2.intValue(0);
+                                        }
+                                        cursor2.dispose();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
                                     }
-                                    cursor2.dispose();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
                                 }
                             }
+                            buffersStorage.reuseFreeBuffer(data);
                         }
-                        buffersStorage.reuseFreeBuffer(data);
+                        cursor.dispose();
                     }
-                    cursor.dispose();
 
                     Collections.sort(res.messages, new Comparator<TLRPC.Message>() {
                         @Override
                         public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
                             if (lhs.id > 0 && rhs.id > 0) {
-                                if (load_type != 1) {
-                                    if (lhs.id > rhs.id) {
-                                        return -1;
-                                    } else if (lhs.id < rhs.id) {
-                                        return 1;
-                                    }
-                                } else {
-                                    if (lhs.id < rhs.id) {
-                                        return -1;
-                                    } else if (lhs.id > rhs.id) {
-                                        return 1;
-                                    }
+                                if (lhs.id > rhs.id) {
+                                    return -1;
+                                } else if (lhs.id < rhs.id) {
+                                    return 1;
                                 }
                             } else if (lhs.id < 0 && rhs.id < 0) {
-                                if (load_type != 1) {
-                                    if (lhs.id < rhs.id) {
-                                        return -1;
-                                    } else if (lhs.id > rhs.id) {
-                                        return 1;
-                                    }
-                                } else {
-                                    if (lhs.id > rhs.id) {
-                                        return -1;
-                                    } else if (lhs.id < rhs.id) {
-                                        return 1;
-                                    }
+                                if (lhs.id < rhs.id) {
+                                    return -1;
+                                } else if (lhs.id > rhs.id) {
+                                    return 1;
                                 }
                             } else {
-                                if (load_type != 1) {
-                                    if (lhs.date > rhs.date) {
-                                        return -1;
-                                    } else if (lhs.date < rhs.date) {
-                                        return 1;
-                                    }
-                                } else {
-                                    if (lhs.date < rhs.date) {
-                                        return -1;
-                                    } else if (lhs.date > rhs.date) {
-                                        return 1;
-                                    }
+                                if (lhs.date > rhs.date) {
+                                    return -1;
+                                } else if (lhs.date < rhs.date) {
+                                    return 1;
                                 }
                             }
                             return 0;
                         }
                     });
 
+                    /*ArrayList<Range<Integer>> holes = getHoles(dialog_id);
+                    if (holes != null && !res.messages.isEmpty()) {
+                        int start = res.messages.get(res.messages.size() - 1).id;
+                        int end = res.messages.get(0).id;
+                        for (Range<Integer> range : holes) {
+                            if (range.contains(start) && range.contains(end)) {
+                                res.messages.clear();
+                            } else if (range.contains(start)) {
+                                while (!res.messages.isEmpty() && range.contains(res.messages.get(res.messages.size() - 1).id)) {
+                                    res.messages.remove(res.messages.size() - 1);
+                                }
+                                if (!res.messages.isEmpty()) {
+                                    start = res.messages.get(res.messages.size() - 1).id;
+                                }
+                            } else if (range.contains(end)) {
+                                while (!res.messages.isEmpty() && range.contains(res.messages.get(0).id)) {
+                                    res.messages.remove(0);
+                                }
+                                if (!res.messages.isEmpty()) {
+                                    end = res.messages.get(0).id;
+                                }
+                            } else if (start >= )
+                            if (res.messages.isEmpty()) {
+                                break;
+                            }
+                        }
+                    }*/
+
                     StringBuilder usersToLoad = new StringBuilder();
                     for (int uid : fromUser) {
                         if (!loadedUsers.contains(uid)) {
@@ -1844,7 +1891,7 @@ public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
                     res.users.clear();
                     FileLog.e("tmessages", e);
                 } finally {
-                    MessagesController.getInstance().processLoadedMessages(res, dialog_id, count_query, max_id, true, classGuid, min_unread_id, last_message_id, count_unread, max_unread_date, load_type);
+                    MessagesController.getInstance().processLoadedMessages(res, dialog_id, count_query, max_id, true, classGuid, min_unread_id, last_message_id, first_message_id, count_unread, max_unread_date, load_type, false);
                 }
             }
         });
@@ -2178,6 +2225,13 @@ private void putUsersInternal(ArrayList<TLRPC.User> users) throws Exception {
             state.bindInteger(1, user.id);
             state.bindString(2, formatUserSearchName(user));
             if (user.status != null) {
+                if (user.status instanceof TLRPC.TL_userStatusRecently) {
+                    user.status.expires = -100;
+                } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
+                    user.status.expires = -101;
+                } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
+                    user.status.expires = -102;
+                }
                 state.bindInteger(3, user.status.expires);
             } else {
                 state.bindInteger(3, 0);
@@ -2385,7 +2439,7 @@ public void run() {
                     }
                     cursor.dispose();
 
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             MediaController.getInstance().processDownloadObjects(type, objects);
@@ -2675,7 +2729,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
 
             if (downloadMediaMask != 0) {
                 final int downloadMediaMaskFinal = downloadMediaMask;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         MediaController.getInstance().newDownloadObjectsAvailable(downloadMediaMaskFinal);
@@ -3030,7 +3084,7 @@ public void run() {
                     }
                     cursor.dispose();
                     if (!mids.isEmpty()) {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 for (Integer id : mids) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
index d6ed6124e..a4716d283 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
@@ -23,7 +23,7 @@
 
 public class NativeLoader {
 
-    private final static int LIB_VERSION = 2;
+    private final static int LIB_VERSION = 3;
     private final static String LIB_NAME = "tmessages." + LIB_VERSION;
     private final static String LIB_SO_NAME = "lib" + LIB_NAME + ".so";
     private final static String LOCALE_LIB_SO_NAME = "lib" + LIB_NAME + "loc.so";
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 612e35be3..661e5ff21 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -41,10 +41,13 @@
     public static final int hideEmojiKeyboard = 30;
     public static final int stopEncodingService = 31;
     public static final int didCreatedNewDeleteTask = 32;
+    public static final int mainUserInfoChanged = 33;
+    public static final int privacyRulesUpdated = 34;
 
     public static final int wallpapersDidLoaded = 171;
     public static final int closeOtherAppActivities = 702;
     public static final int didUpdatedConnectionState = 703;
+    public static final int didReceiveSmsCode = 998;
     public static final int emojiDidLoaded = 999;
     public static final int appDidLogout = 1234;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
index f44a1f0c4..9732b4aa7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
@@ -21,7 +21,7 @@ public NotificationRepeat() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 NotificationsController.getInstance().repeatNotificationMaybe();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java b/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
index fb7ac51c8..b489d12ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 
 public class PhotoObject {
+
     public TLRPC.PhotoSize photoOwner;
     public Bitmap image;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index 07cb6acb7..be91dd15e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -97,7 +97,7 @@ public void didReceivedNotification(int id, Object... args) {
             final TLRPC.InputFile file = (TLRPC.InputFile)args[1];
             final TLRPC.InputEncryptedFile encryptedFile = (TLRPC.InputEncryptedFile)args[2];
 
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     ArrayList<DelayedMessage> arr = delayedMessages.get(location);
@@ -163,7 +163,7 @@ public void run() {
             final String location = (String) args[0];
             final boolean enc = (Boolean) args[1];
 
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     ArrayList<DelayedMessage> arr = delayedMessages.get(location);
@@ -1068,7 +1068,7 @@ private void stopVideoService(final String path) {
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopEncodingService, path);
@@ -1122,7 +1122,7 @@ public void run() {
                                 newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
                                 MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
                             }
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
@@ -1146,7 +1146,7 @@ public void run() {
                     });
                 } else {
                     MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
@@ -1163,7 +1163,7 @@ public void run() {
             @Override
             public void quickAck() {
                 final int msg_id = newMsgObj.id;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
@@ -1311,7 +1311,7 @@ public void run() {
                                             }
                                         }
                                         MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, newMsgObj.id, newMsgObj.id, res.date, false);
-                                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
                                             @Override
                                             public void run() {
                                                 newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
@@ -1326,7 +1326,7 @@ public void run() {
                                 });
                             } else {
                                 MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
@@ -1811,7 +1811,7 @@ public void checkUnsentMessages() {
     }
 
     protected void processUnsentMessages(final ArrayList<TLRPC.Message> messages, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 MessagesController.getInstance().putUsers(users, true);
@@ -1923,7 +1923,7 @@ private static void prepareSendingDocumentInternal(final String path, String ori
 
         final TLRPC.TL_document documentFinal = document;
         final String originalPathFinal = originalPath;
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, path, dialog_id);
@@ -2041,7 +2041,7 @@ public void run() {
                         if (photo != null) {
                             final String originalPathFinal = originalPath;
                             final TLRPC.TL_photo photoFinal = photo;
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, dialog_id);
@@ -2163,7 +2163,7 @@ public void run() {
                 final TLRPC.TL_video videoFinal = video;
                 final String originalPathFinal = originalPath;
                 final String finalPath = path;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         SendMessagesHelper.getInstance().sendMessage(videoFinal, originalPathFinal, finalPath, dialog_id);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
index ce57865a2..c4470fa41 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
@@ -48,7 +48,7 @@ public void onReceive(Context context, Intent intent) {
                         if (matcher.find()) {
                             String str = matcher.group(0);
                             if (str.length() >= 3) {
-                                NotificationCenter.getInstance().postNotificationName(998, matcher.group(0));
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceiveSmsCode, matcher.group(0));
                             }
                         }
                     } catch (Exception e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 0957bd19b..06570717a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -639,7 +639,7 @@ public void cancelRpcsForClassGuid(int guid) {
     }
 
     public void bindRequestToGuid(final Long request, final int guid) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 ArrayList<Long> requests = requestsByGuids.get(guid);
@@ -652,7 +652,7 @@ public void run() {
     }
 
     public void removeRequestInClass(final Long request) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 Integer guid = requestsByClass.get(request);
@@ -824,12 +824,11 @@ private TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest reque
                 if (invoke.system_version == null || invoke.system_version.length() == 0) {
                     invoke.system_version = "SDK Unknown";
                 }
-                object = invoke;
+                TLRPC.invokeWithLayer invoke2 = new TLRPC.invokeWithLayer();
+                invoke2.query = invoke;
+                FileLog.d("wrap in layer", "" + object);
+                object = invoke2;
             }
-            TLRPC.invokeWithLayer18 invoke = new TLRPC.invokeWithLayer18();
-            invoke.query = object;
-            FileLog.d("wrap in layer", "" + object);
-            return invoke;
         }
         return object;
     }
@@ -1607,12 +1606,12 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayLis
             TLRPC.TL_protoMessage message = networkMessage.protoMessage;
 
             if (BuildVars.DEBUG_VERSION) {
-                if (message.body instanceof TLRPC.invokeWithLayer18) {
-                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)message.body).query);
+                if (message.body instanceof TLRPC.invokeWithLayer) {
+                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer)message.body).query);
                 } else if (message.body instanceof TLRPC.initConnection) {
                     TLRPC.initConnection r = (TLRPC.initConnection)message.body;
-                    if (r.query instanceof TLRPC.invokeWithLayer18) {
-                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)r.query).query);
+                    if (r.query instanceof TLRPC.invokeWithLayer) {
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer)r.query).query);
                     } else {
                         FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                     }
@@ -1647,12 +1646,12 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayLis
                 TLRPC.TL_protoMessage message = networkMessage.protoMessage;
                 containerMessages.add(message);
                 if (BuildVars.DEBUG_VERSION) {
-                    if (message.body instanceof TLRPC.invokeWithLayer18) {
-                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)message.body).query);
+                    if (message.body instanceof TLRPC.invokeWithLayer) {
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer)message.body).query);
                     } else if (message.body instanceof TLRPC.initConnection) {
                         TLRPC.initConnection r = (TLRPC.initConnection)message.body;
-                        if (r.query instanceof TLRPC.invokeWithLayer18) {
-                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer18)r.query).query);
+                        if (r.query instanceof TLRPC.invokeWithLayer) {
+                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer)r.query).query);
                         } else {
                             FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                         }
@@ -2143,7 +2142,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                     if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
                                         if (UserConfig.isClientActivated()) {
                                             UserConfig.clearConfig();
-                                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
                                                 @Override
                                                 public void run() {
                                                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
@@ -2402,7 +2401,7 @@ public void tcpConnectionClosed(TcpConnection connection) {
                 }
             }
             final int stateCopy = connectionState;
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2452,7 +2451,7 @@ private void finishUpdatingState(TcpConnection connection) {
             if (ConnectionsManager.getInstance().connectionState == 3 && !MessagesController.getInstance().gettingDifference && !MessagesController.getInstance().gettingDifferenceAgain) {
                 ConnectionsManager.getInstance().connectionState = 0;
                 final int stateCopy = ConnectionsManager.getInstance().connectionState;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
@@ -2468,7 +2467,7 @@ public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc d
             if (connectionState == 1 || connectionState == 2) {
                 connectionState = 3;
                 final int stateCopy = connectionState;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index c81e30045..9a5bfdc68 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -51,6 +51,8 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_updates_difference.constructor, TLRPC.TL_updates_difference.class);
         classStore.put(TLRPC.TL_geoPointEmpty.constructor, TLRPC.TL_geoPointEmpty.class);
         classStore.put(TLRPC.TL_geoPoint.constructor, TLRPC.TL_geoPoint.class);
+        classStore.put(TLRPC.TL_privacyKeyStatusTimestamp.constructor, TLRPC.TL_privacyKeyStatusTimestamp.class);
+        classStore.put(TLRPC.TL_account_privacyRules.constructor, TLRPC.TL_account_privacyRules.class);
         classStore.put(TLRPC.TL_help_appUpdate.constructor, TLRPC.TL_help_appUpdate.class);
         classStore.put(TLRPC.TL_help_noAppUpdate.constructor, TLRPC.TL_help_noAppUpdate.class);
         classStore.put(TLRPC.TL_messageForwarded.constructor, TLRPC.TL_messageForwarded.class);
@@ -93,8 +95,15 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_audioEmpty.constructor, TLRPC.TL_audioEmpty.class);
         classStore.put(TLRPC.TL_audio.constructor, TLRPC.TL_audio.class);
         classStore.put(TLRPC.TL_destroy_sessions_res.constructor, TLRPC.TL_destroy_sessions_res.class);
+        classStore.put(TLRPC.TL_privacyValueAllowUsers.constructor, TLRPC.TL_privacyValueAllowUsers.class);
+        classStore.put(TLRPC.TL_privacyValueDisallowAll.constructor, TLRPC.TL_privacyValueDisallowAll.class);
+        classStore.put(TLRPC.TL_privacyValueAllowContacts.constructor, TLRPC.TL_privacyValueAllowContacts.class);
+        classStore.put(TLRPC.TL_privacyValueDisallowContacts.constructor, TLRPC.TL_privacyValueDisallowContacts.class);
+        classStore.put(TLRPC.TL_privacyValueAllowAll.constructor, TLRPC.TL_privacyValueAllowAll.class);
+        classStore.put(TLRPC.TL_privacyValueDisallowUsers.constructor, TLRPC.TL_privacyValueDisallowUsers.class);
         classStore.put(TLRPC.TL_contacts_contacts.constructor, TLRPC.TL_contacts_contacts.class);
         classStore.put(TLRPC.TL_contacts_contactsNotModified.constructor, TLRPC.TL_contacts_contactsNotModified.class);
+        classStore.put(TLRPC.TL_inputPrivacyKeyStatusTimestamp.constructor, TLRPC.TL_inputPrivacyKeyStatusTimestamp.class);
         classStore.put(TLRPC.TL_photos_photos.constructor, TLRPC.TL_photos_photos.class);
         classStore.put(TLRPC.TL_photos_photosSlice.constructor, TLRPC.TL_photos_photosSlice.class);
         classStore.put(TLRPC.TL_chatFull.constructor, TLRPC.TL_chatFull.class);
@@ -165,6 +174,12 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_messages_affectedHistory.constructor, TLRPC.TL_messages_affectedHistory.class);
         classStore.put(TLRPC.TL_documentEmpty.constructor, TLRPC.TL_documentEmpty.class);
         classStore.put(TLRPC.TL_document.constructor, TLRPC.TL_document.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueDisallowUsers.constructor, TLRPC.TL_inputPrivacyValueDisallowUsers.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueDisallowAll.constructor, TLRPC.TL_inputPrivacyValueDisallowAll.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueDisallowContacts.constructor, TLRPC.TL_inputPrivacyValueDisallowContacts.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueAllowAll.constructor, TLRPC.TL_inputPrivacyValueAllowAll.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueAllowContacts.constructor, TLRPC.TL_inputPrivacyValueAllowContacts.class);
+        classStore.put(TLRPC.TL_inputPrivacyValueAllowUsers.constructor, TLRPC.TL_inputPrivacyValueAllowUsers.class);
         classStore.put(TLRPC.TL_inputMediaContact.constructor, TLRPC.TL_inputMediaContact.class);
         classStore.put(TLRPC.TL_inputMediaUploadedThumbDocument.constructor, TLRPC.TL_inputMediaUploadedThumbDocument.class);
         classStore.put(TLRPC.TL_inputMediaAudio.constructor, TLRPC.TL_inputMediaAudio.class);
@@ -187,9 +202,12 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_contactSuggested.constructor, TLRPC.TL_contactSuggested.class);
         classStore.put(TLRPC.TL_server_DH_params_fail.constructor, TLRPC.TL_server_DH_params_fail.class);
         classStore.put(TLRPC.TL_server_DH_params_ok.constructor, TLRPC.TL_server_DH_params_ok.class);
+        classStore.put(TLRPC.TL_userStatusOffline.constructor, TLRPC.TL_userStatusOffline.class);
+        classStore.put(TLRPC.TL_userStatusLastWeek.constructor, TLRPC.TL_userStatusLastWeek.class);
         classStore.put(TLRPC.TL_userStatusEmpty.constructor, TLRPC.TL_userStatusEmpty.class);
+        classStore.put(TLRPC.TL_userStatusLastMonth.constructor, TLRPC.TL_userStatusLastMonth.class);
         classStore.put(TLRPC.TL_userStatusOnline.constructor, TLRPC.TL_userStatusOnline.class);
-        classStore.put(TLRPC.TL_userStatusOffline.constructor, TLRPC.TL_userStatusOffline.class);
+        classStore.put(TLRPC.TL_userStatusRecently.constructor, TLRPC.TL_userStatusRecently.class);
         classStore.put(TLRPC.TL_msg_copy.constructor, TLRPC.TL_msg_copy.class);
         classStore.put(TLRPC.TL_contacts_importedContacts.constructor, TLRPC.TL_contacts_importedContacts.class);
         classStore.put(TLRPC.TL_futureSalt.constructor, TLRPC.TL_futureSalt.class);
@@ -210,6 +228,7 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_updateEncryptedChatTyping.constructor, TLRPC.TL_updateEncryptedChatTyping.class);
         classStore.put(TLRPC.TL_updateDcOptions.constructor, TLRPC.TL_updateDcOptions.class);
         classStore.put(TLRPC.TL_updateChatParticipants.constructor, TLRPC.TL_updateChatParticipants.class);
+        classStore.put(TLRPC.TL_updatePrivacy.constructor, TLRPC.TL_updatePrivacy.class);
         classStore.put(TLRPC.TL_updateEncryption.constructor, TLRPC.TL_updateEncryption.class);
         classStore.put(TLRPC.TL_updateUserBlocked.constructor, TLRPC.TL_updateUserBlocked.class);
         classStore.put(TLRPC.TL_updateActivation.constructor, TLRPC.TL_updateActivation.class);
@@ -328,6 +347,7 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_inputPhotoEmpty.constructor, TLRPC.TL_inputPhotoEmpty.class);
         classStore.put(TLRPC.TL_inputPhoto.constructor, TLRPC.TL_inputPhoto.class);
         classStore.put(TLRPC.TL_importedContact.constructor, TLRPC.TL_importedContact.class);
+        classStore.put(TLRPC.TL_accountDaysTTL.constructor, TLRPC.TL_accountDaysTTL.class);
         classStore.put(TLRPC.TL_inputPeerContact.constructor, TLRPC.TL_inputPeerContact.class);
         classStore.put(TLRPC.TL_inputPeerChat.constructor, TLRPC.TL_inputPeerChat.class);
         classStore.put(TLRPC.TL_inputPeerEmpty.constructor, TLRPC.TL_inputPeerEmpty.class);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index e5f5c11a3..b00dd1534 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -272,20 +272,20 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_contactStatus extends TLObject {
-        public static int constructor = 0xaa77b873;
+        public static int constructor = 0xd3680c61;
 
         public int user_id;
-        public int expires;
+        public UserStatus status;
 
         public void readParams(AbsSerializedData stream) {
             user_id = stream.readInt32();
-            expires = stream.readInt32();
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stream.writeInt32(user_id);
-            stream.writeInt32(expires);
+            status.serializeToStream(stream);
         }
     }
 
@@ -769,6 +769,51 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_privacyKeyStatusTimestamp extends TLObject {
+        public static int constructor = 0xbc2eab30;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_account_privacyRules extends TLObject {
+        public static int constructor = 0x554abb6f;
+
+        public ArrayList<PrivacyRule> rules = new ArrayList<PrivacyRule>();
+        public ArrayList<User> users = new ArrayList<User>();
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                rules.add((PrivacyRule)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+            stream.readInt32();
+            count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = rules.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                rules.get(a).serializeToStream(stream);
+            }
+            stream.writeInt32(0x1cb5c415);
+            count = users.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                users.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
     public static class help_AppUpdate extends TLObject {
         public int id;
         public boolean critical;
@@ -1434,6 +1479,92 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class PrivacyRule extends TLObject {
+        public ArrayList<Integer> users = new ArrayList<Integer>();
+    }
+
+    public static class TL_privacyValueAllowUsers extends PrivacyRule {
+        public static int constructor = 0x4d5bbe0c;
+
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                users.add(stream.readInt32());
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = users.size();
+            stream.writeInt32(count);
+            for (Integer user : users) {
+                stream.writeInt32(user);
+            }
+        }
+    }
+
+    public static class TL_privacyValueDisallowAll extends PrivacyRule {
+        public static int constructor = 0x8b73e763;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_privacyValueAllowContacts extends PrivacyRule {
+        public static int constructor = 0xfffe1bac;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_privacyValueDisallowContacts extends PrivacyRule {
+        public static int constructor = 0xf888fa1a;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_privacyValueAllowAll extends PrivacyRule {
+        public static int constructor = 0x65427b82;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_privacyValueDisallowUsers extends PrivacyRule {
+        public static int constructor = 0xc7f49b7;
+
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                users.add(stream.readInt32());
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = users.size();
+            stream.writeInt32(count);
+            for (Integer user : users) {
+                stream.writeInt32(user);
+            }
+        }
+    }
+
     public static class contacts_Contacts extends TLObject {
         public ArrayList<TL_contact> contacts = new ArrayList<TL_contact>();
         public ArrayList<User> users = new ArrayList<User>();
@@ -1482,6 +1613,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_inputPrivacyKeyStatusTimestamp extends TLObject {
+        public static int constructor = 0x4f96cb18;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class photos_Photos extends TLObject {
         public ArrayList<Photo> photos = new ArrayList<Photo>();
         public ArrayList<User> users = new ArrayList<User>();
@@ -2841,6 +2981,92 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class InputPrivacyRule extends TLObject {
+        public ArrayList<InputUser> users = new ArrayList<InputUser>();
+    }
+
+    public static class TL_inputPrivacyValueDisallowUsers extends InputPrivacyRule {
+        public static int constructor = 0x90110467;
+
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                users.add((InputUser)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = users.size();
+            stream.writeInt32(count);
+            for (InputUser user : users) {
+                user.serializeToStream(stream);
+            }
+        }
+    }
+
+    public static class TL_inputPrivacyValueDisallowAll extends InputPrivacyRule {
+        public static int constructor = 0xd66b66c9;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_inputPrivacyValueDisallowContacts extends InputPrivacyRule {
+        public static int constructor = 0xba52007;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_inputPrivacyValueAllowAll extends InputPrivacyRule {
+        public static int constructor = 0x184b35ce;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_inputPrivacyValueAllowContacts extends InputPrivacyRule {
+        public static int constructor = 0xd09e07b;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_inputPrivacyValueAllowUsers extends InputPrivacyRule {
+        public static int constructor = 0x131cc67f;
+
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                users.add((InputUser)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = users.size();
+            stream.writeInt32(count);
+            for (InputUser user : users) {
+                user.serializeToStream(stream);
+            }
+        }
+    }
+
     public static class InputMedia extends TLObject {
         public String phone_number;
         public String first_name;
@@ -3449,6 +3675,8 @@ public void serializeToStream(AbsSerializedData stream) {
         public long random_id;
         public ArrayList<TL_dcOption> dc_options = new ArrayList<TL_dcOption>();
         public ChatParticipants participants;
+        public TL_privacyKeyStatusTimestamp key;
+        public ArrayList<PrivacyRule> rules = new ArrayList<PrivacyRule>();
         public EncryptedChat chat;
         public boolean blocked;
         public long auth_key_id;
@@ -3781,6 +4009,31 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_updatePrivacy extends Update {
+        public static int constructor = 0xee3b272a;
+
+
+        public void readParams(AbsSerializedData stream) {
+            key = (TL_privacyKeyStatusTimestamp)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                rules.add((PrivacyRule)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            key.serializeToStream(stream);
+            stream.writeInt32(0x1cb5c415);
+            int count = rules.size();
+            stream.writeInt32(count);
+            for (PrivacyRule rule : rules) {
+                rule.serializeToStream(stream);
+            }
+        }
+    }
+
     public static class TL_updateEncryption extends Update {
         public static int constructor = 0xb4a2e88d;
 
@@ -4627,6 +4880,107 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_account_getPrivacy extends TLObject {
+        public static int constructor = 0xdadbc950;
+
+        public TL_inputPrivacyKeyStatusTimestamp key;
+
+        public Class responseClass () {
+            return TL_account_privacyRules.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            key = (TL_inputPrivacyKeyStatusTimestamp)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            key.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_account_setPrivacy extends TLObject {
+        public static int constructor = 0xc9f81ce8;
+
+        public TL_inputPrivacyKeyStatusTimestamp key;
+        public ArrayList<InputPrivacyRule> rules = new ArrayList<InputPrivacyRule>();
+
+        public Class responseClass () {
+            return TL_account_privacyRules.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            key = (TL_inputPrivacyKeyStatusTimestamp)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                rules.add((InputPrivacyRule)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            key.serializeToStream(stream);
+            stream.writeInt32(0x1cb5c415);
+            int count = rules.size();
+            stream.writeInt32(count);
+            for (InputPrivacyRule rule : rules) {
+                rule.serializeToStream(stream);
+            }
+        }
+    }
+
+    public static class TL_account_deleteAccount extends TLObject {
+        public static int constructor = 0x418d4e0b;
+
+        public String reason;
+
+        public Class responseClass () {
+            return Bool.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            reason = stream.readString();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(reason);
+        }
+    }
+
+    public static class TL_account_getAccountTTL extends TLObject {
+        public static int constructor = 0x8fc711d;
+
+
+        public Class responseClass () {
+            return TL_accountDaysTTL.class;
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_account_setAccountTTL extends TLObject {
+        public static int constructor = 0x2442485e;
+
+        public TL_accountDaysTTL ttl;
+
+        public Class responseClass () {
+            return Bool.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            ttl = (TL_accountDaysTTL)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            ttl.serializeToStream(stream);
+        }
+    }
+
     public static class TL_account_checkUsername extends TLObject {
         public static int constructor = 0x2714d86c;
 
@@ -6267,6 +6621,21 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_accountDaysTTL extends TLObject {
+        public static int constructor = 0xb8d0afdf;
+
+        public int days;
+
+        public void readParams(AbsSerializedData stream) {
+            days = stream.readInt32();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(days);
+        }
+    }
+
     public static class InputPeer extends TLObject {
         public int user_id;
         public int chat_id;
@@ -7020,6 +7389,18 @@ public void serializeToStream(AbsSerializedData stream) {
     public static class TL_contacts_getStatuses extends TLObject {
         public static int constructor = 0xc4a353ee;
 
+        public ArrayList<TL_contactStatus> id = new ArrayList<TL_contactStatus>();
+
+        public Class responseClass () {
+            return Vector.class;
+        }
+
+        public void parseVector(Vector vector, AbsSerializedData data) {
+            int size = data.readInt32();
+            for (int a = 0; a < size; a++) {
+                vector.objects.add(TLClassStore.Instance().TLdeserialize(data, data.readInt32()));
+            }
+        }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
@@ -8744,6 +9125,15 @@ public void freeResources() {
         public int expires;
     }
 
+    public static class TL_userStatusLastWeek extends UserStatus {
+        public static int constructor = 0x7bf09fc;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_userStatusEmpty extends UserStatus {
         public static int constructor = 0x9d05049;
 
@@ -8753,6 +9143,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_userStatusLastMonth extends UserStatus {
+        public static int constructor = 0x77ebc742;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_userStatusOnline extends UserStatus {
         public static int constructor = 0xedb93949;
 
@@ -8767,6 +9166,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_userStatusRecently extends UserStatus {
+        public static int constructor = 0xe26f42f1;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_userStatusOffline extends UserStatus {
         public static int constructor = 0x8c703f;
 
@@ -9879,13 +10287,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class invokeWithLayer18 extends TLObject {
-        public static int constructor = 0x1c900537;
+    public static class invokeWithLayer extends TLObject {
+        public static int constructor = 0xda9b0d0d;
 
+        public int layer = 19;
         public TLObject query;
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
+            stream.writeInt32(layer);
             query.serializeToStream(stream);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 71ee8a2f4..9eedf8627 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -108,13 +108,13 @@
     }
 
     public native static long doPQNative(long _what);
-    public native static void loadBitmap(String path, Bitmap bitmap, int scale);
+    public native static void loadBitmap(String path, Bitmap bitmap, int scale, int width, int height, int stride);
     public native static void blurBitmap(Object bitmap, int radius);
     public native static int convertVideoFrame(ByteBuffer src, ByteBuffer dest, int destFormat, int width, int height, int padding, int swap);
     private native static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, int offset, int length);
 
     public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, boolean changeIv, int offset, int length) {
-        aesIgeEncryption(buffer, key, changeIv ? iv : iv.clone(), encrypt, offset, length);
+        aesIgeEncryption(buffer, key, changeIv ? iv : (byte [])iv.clone(), encrypt, offset, length);
     }
 
     public static Integer parseInt(String value) {
@@ -640,7 +640,7 @@ public static CharSequence generateSearchName(String name, String name2, String
                 builder.append(" ");
             }
             query.trim();
-            builder.append(Html.fromHtml("<font color=\"#357aa8\">" + query + "</font>"));
+            builder.append(Html.fromHtml("<font color=\"#4d83b3\">" + query + "</font>"));
 
             lastIndex = end;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
similarity index 51%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 1dfef5f50..4ae92f59b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -6,17 +6,17 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.telegram.ui.ActionBar;
 
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.text.TextUtils;
-import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -24,7 +24,7 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.R;
 
-public class ActionBarLayer extends FrameLayout {
+public class ActionBar extends FrameLayout {
 
     public static class ActionBarMenuOnItemClick {
         public void onItemClick(int id) {
@@ -36,96 +36,48 @@ public boolean canOpenMenu() {
         }
     }
 
-    private FrameLayout backButtonFrameLayout;
-    private ImageView logoImageView;
+    private FrameLayout titleFrameLayout;
     private ImageView backButtonImageView;
     private TextView titleTextView;
     private TextView subTitleTextView;
     private ActionBarMenu menu;
     private ActionBarMenu actionMode;
-    private int logoResourceId;
-    private int backResourceId;
-    protected ActionBar parentActionBar;
-    private boolean oldUseLogo;
-    private boolean oldUseBack;
-    private View actionOverlay;
+    private boolean occupyStatusBar = Build.VERSION.SDK_INT >= 21;
+
+    private boolean allowOverlayTitle;
+    private CharSequence lastTitle;
+    private boolean showingOverlayTitle;
+
     protected boolean isSearchFieldVisible;
     protected int itemsBackgroundResourceId;
     private boolean isBackOverlayVisible;
     protected BaseFragment parentFragment;
     public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
-    private int leftMargin = 0;
+    private int extraHeight;
 
-    public ActionBarLayer(Context context, ActionBar actionBar) {
+    public ActionBar(Context context) {
         super(context);
-        parentActionBar = actionBar;
-        backButtonFrameLayout = new FrameLayout(context);
-        addView(backButtonFrameLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)backButtonFrameLayout.getLayoutParams();
+        titleFrameLayout = new FrameLayout(context);
+        addView(titleFrameLayout);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)titleFrameLayout.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        backButtonFrameLayout.setLayoutParams(layoutParams);
-        backButtonFrameLayout.setPadding(0, 0, AndroidUtilities.dp(4), 0);
-        backButtonFrameLayout.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (isSearchFieldVisible) {
-                    closeSearchField();
-                    return;
-                }
-                if (actionBarMenuOnItemClick != null) {
-                    actionBarMenuOnItemClick.onItemClick(-1);
-                }
-            }
-        });
-        backButtonFrameLayout.setEnabled(false);
-    }
-
-    public ActionBarLayer(Context context) {
-        super(context);
-    }
-
-    public ActionBarLayer(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public ActionBarLayer(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-    }
-
-    public void setExtraLeftMargin(int margin) {
-        leftMargin = margin;
+        titleFrameLayout.setLayoutParams(layoutParams);
+        titleFrameLayout.setPadding(0, 0, AndroidUtilities.dp(4), 0);
+        titleFrameLayout.setEnabled(false);
     }
 
     private void positionBackImage(int height) {
         if (backButtonImageView != null) {
             LayoutParams layoutParams = (LayoutParams)backButtonImageView.getLayoutParams();
-            layoutParams.width = LayoutParams.WRAP_CONTENT;
-            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.width = AndroidUtilities.dp(54);
+            layoutParams.height = height;
             layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.setMargins(AndroidUtilities.dp(3 + leftMargin), (height - backButtonImageView.getDrawable().getIntrinsicHeight()) / 2, 0, 0);
             backButtonImageView.setLayoutParams(layoutParams);
         }
     }
 
-    private void positionLogoImage(int height) {
-        if (logoImageView != null && logoImageView.getDrawable() != null) {
-            LayoutParams layoutParams = (LayoutParams) logoImageView.getLayoutParams();
-            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                layoutParams.width = (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
-                layoutParams.height = (int)(logoImageView.getDrawable().getIntrinsicHeight() / 1.3f);
-                layoutParams.setMargins(AndroidUtilities.dp(12), (height - layoutParams.height) / 2, 0, 0);
-            } else {
-                layoutParams.width = logoImageView.getDrawable().getIntrinsicWidth();
-                layoutParams.height = logoImageView.getDrawable().getIntrinsicHeight();
-                layoutParams.setMargins(AndroidUtilities.dp(12), (height - layoutParams.width) / 2, 0, 0);
-            }
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            logoImageView.setLayoutParams(layoutParams);
-        }
-    }
-
     private void positionTitle(int width, int height) {
         int offset = AndroidUtilities.dp(2);
         if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
@@ -137,9 +89,9 @@ private void positionTitle(int width, int height) {
 
         if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
             if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                titleTextView.setTextSize(16);
-            } else {
                 titleTextView.setTextSize(18);
+            } else {
+                titleTextView.setTextSize(20);
             }
 
             layoutParams = (LayoutParams) titleTextView.getLayoutParams();
@@ -152,9 +104,9 @@ private void positionTitle(int width, int height) {
         }
         if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
             if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                subTitleTextView.setTextSize(12);
-            } else {
                 subTitleTextView.setTextSize(14);
+            } else {
+                subTitleTextView.setTextSize(16);
             }
 
             layoutParams = (LayoutParams) subTitleTextView.getLayoutParams();
@@ -167,13 +119,17 @@ private void positionTitle(int width, int height) {
         }
 
         int x = 0;
-        if (logoImageView == null || logoImageView.getVisibility() == GONE) {
-            x = AndroidUtilities.dp(16 + leftMargin);
+        if (backButtonImageView != null) {
+            if (AndroidUtilities.isTablet()) {
+                x = AndroidUtilities.dp(80);
+            } else {
+                x = AndroidUtilities.dp(72);
+            }
         } else {
-            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                x = AndroidUtilities.dp(22 + leftMargin) + (logoImageView.getDrawable() != null ? (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f) : 0);
+            if (AndroidUtilities.isTablet()) {
+                x = AndroidUtilities.dp(26);
             } else {
-                x = AndroidUtilities.dp(22 + leftMargin) + (logoImageView.getDrawable() != null ? logoImageView.getDrawable().getIntrinsicWidth() : 0);
+                x = AndroidUtilities.dp(18);
             }
         }
 
@@ -185,9 +141,11 @@ private void positionTitle(int width, int height) {
             layoutParams = (LayoutParams) titleTextView.getLayoutParams();
             layoutParams.width = LayoutParams.MATCH_PARENT;
             layoutParams.height = titleTextView.getMeasuredHeight();
-            int y = (height - titleTextView.getMeasuredHeight()) / 2;
+            int y;
             if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
                 y = (height / 2 - titleTextView.getMeasuredHeight()) / 2 + offset;
+            } else {
+                y = (height - titleTextView.getMeasuredHeight()) / 2 - AndroidUtilities.dp(1);
             }
             layoutParams.setMargins(x, y, 0, 0);
             titleTextView.setLayoutParams(layoutParams);
@@ -200,9 +158,10 @@ private void positionTitle(int width, int height) {
             subTitleTextView.setLayoutParams(layoutParams);
         }
 
-        ViewGroup.LayoutParams layoutParams1 = backButtonFrameLayout.getLayoutParams();
+        MarginLayoutParams layoutParams1 = (MarginLayoutParams) titleFrameLayout.getLayoutParams();
         layoutParams1.width = x + maxTextWidth + (isSearchFieldVisible ? 0 : AndroidUtilities.dp(6));
-        backButtonFrameLayout.setLayoutParams(layoutParams1);
+        layoutParams1.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
+        titleFrameLayout.setLayoutParams(layoutParams1);
     }
 
     public void positionMenu(int width, int height) {
@@ -211,52 +170,69 @@ public void positionMenu(int width, int height) {
         }
         FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)menu.getLayoutParams();
         layoutParams.width = isSearchFieldVisible ? LayoutParams.MATCH_PARENT : LayoutParams.WRAP_CONTENT;
-        layoutParams.leftMargin = isSearchFieldVisible ? AndroidUtilities.dp(26) + logoImageView.getDrawable().getIntrinsicWidth() : 0;
+        layoutParams.height = height;
+        layoutParams.leftMargin = isSearchFieldVisible ? AndroidUtilities.dp(54) : 0;
+        layoutParams.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
         menu.setLayoutParams(layoutParams);
         menu.measure(width, height);
     }
 
-    public void setDisplayUseLogoEnabled(boolean value, int resource) {
-        if (value && logoImageView == null) {
-            logoResourceId = resource;
-            logoImageView = new ImageView(getContext());
-            logoImageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-            backButtonFrameLayout.addView(logoImageView);
+    private void createBackButtonImage() {
+        if (backButtonImageView != null) {
+            return;
         }
-        if (logoImageView != null) {
-            logoImageView.setVisibility(value ? VISIBLE : GONE);
-            logoImageView.setImageResource(resource);
-            positionLogoImage(getMeasuredHeight());
+        backButtonImageView = new ImageView(getContext());
+        titleFrameLayout.addView(backButtonImageView);
+        backButtonImageView.setScaleType(ImageView.ScaleType.CENTER);
+        backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        backButtonImageView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (isSearchFieldVisible) {
+                    closeSearchField();
+                    return;
+                }
+                if (actionBarMenuOnItemClick != null) {
+                    actionBarMenuOnItemClick.onItemClick(-1);
+                }
+            }
+        });
+    }
+
+    public void setBackButtonDrawable(Drawable drawable) {
+        if (backButtonImageView == null) {
+            createBackButtonImage();
         }
+        backButtonImageView.setImageDrawable(drawable);
     }
 
-    public void setDisplayHomeAsUpEnabled(boolean value, int resource) {
-        if (value && backButtonImageView == null) {
-            backResourceId = resource;
-            backButtonImageView = new ImageView(getContext());
-            backButtonFrameLayout.addView(backButtonImageView);
+    public void setBackButtonImage(int resource) {
+        if (backButtonImageView == null) {
+            createBackButtonImage();
         }
-        if (backButtonImageView != null) {
-            backButtonImageView.setVisibility(value ? VISIBLE : GONE);
-            backButtonFrameLayout.setEnabled(value);
-            backButtonImageView.setImageResource(resource);
-            positionBackImage(getMeasuredHeight());
+        backButtonImageView.setImageResource(resource);
+    }
+
+    private void createSubtitleTextView() {
+        if (subTitleTextView != null) {
+            return;
         }
+        subTitleTextView = new TextView(getContext());
+        titleFrameLayout.addView(subTitleTextView);
+        subTitleTextView.setGravity(Gravity.LEFT);
+        subTitleTextView.setTextColor(0xffd7e8f7);
+        subTitleTextView.setSingleLine(true);
+        subTitleTextView.setLines(1);
+        subTitleTextView.setMaxLines(1);
+        subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
     }
 
     public void setSubtitle(CharSequence value) {
         if (value != null && subTitleTextView == null) {
-            subTitleTextView = new TextView(getContext());
-            backButtonFrameLayout.addView(subTitleTextView);
-            subTitleTextView.setGravity(Gravity.LEFT);
-            subTitleTextView.setTextColor(0xffd7e8f7);
-            subTitleTextView.setSingleLine(true);
-            subTitleTextView.setLines(1);
-            subTitleTextView.setMaxLines(1);
-            subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
+            createSubtitleTextView();
         }
         if (subTitleTextView != null) {
-            subTitleTextView.setVisibility(value != null ? VISIBLE : GONE);
+            subTitleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
             subTitleTextView.setText(value);
             positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
@@ -264,14 +240,7 @@ public void setSubtitle(CharSequence value) {
 
     public void setSubTitleIcon(int resourceId, Drawable drawable, int padding) {
         if ((resourceId != 0 || drawable != null) && subTitleTextView == null) {
-            subTitleTextView = new TextView(getContext());
-            backButtonFrameLayout.addView(subTitleTextView);
-            subTitleTextView.setGravity(Gravity.LEFT);
-            subTitleTextView.setTextColor(0xffd7e8f7);
-            subTitleTextView.setSingleLine(true);
-            subTitleTextView.setLines(1);
-            subTitleTextView.setMaxLines(1);
-            subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
+            createSubtitleTextView();
             positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
         if (subTitleTextView != null) {
@@ -284,19 +253,28 @@ public void setSubTitleIcon(int resourceId, Drawable drawable, int padding) {
         }
     }
 
+    private void createTitleTextView() {
+        if (titleTextView != null) {
+            return;
+        }
+        titleTextView = new TextView(getContext());
+        titleTextView.setGravity(Gravity.LEFT);
+        titleTextView.setSingleLine(true);
+        titleTextView.setLines(1);
+        titleTextView.setMaxLines(1);
+        titleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        titleFrameLayout.addView(titleTextView);
+        titleTextView.setTextColor(0xffffffff);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+    }
+
     public void setTitle(CharSequence value) {
         if (value != null && titleTextView == null) {
-            titleTextView = new TextView(getContext());
-            titleTextView.setGravity(Gravity.LEFT);
-            titleTextView.setSingleLine(true);
-            titleTextView.setLines(1);
-            titleTextView.setMaxLines(1);
-            titleTextView.setEllipsize(TextUtils.TruncateAt.END);
-            backButtonFrameLayout.addView(titleTextView);
-            titleTextView.setTextColor(0xffffffff);
+            createTitleTextView();
         }
         if (titleTextView != null) {
-            titleTextView.setVisibility(value != null ? VISIBLE : GONE);
+            lastTitle = value;
+            titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
             titleTextView.setText(value);
             positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
@@ -304,14 +282,7 @@ public void setTitle(CharSequence value) {
 
     public void setTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && titleTextView == null) {
-            titleTextView = new TextView(getContext());
-            titleTextView.setGravity(Gravity.LEFT);
-            backButtonFrameLayout.addView(titleTextView);
-            titleTextView.setTextColor(0xffffffff);
-            titleTextView.setSingleLine(true);
-            titleTextView.setLines(1);
-            titleTextView.setMaxLines(1);
-            titleTextView.setEllipsize(TextUtils.TruncateAt.END);
+            createTitleTextView();
             positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
         titleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
@@ -333,7 +304,7 @@ public ActionBarMenu createMenu() {
         if (menu != null) {
             return menu;
         }
-        menu = new ActionBarMenu(getContext(), parentActionBar, this);
+        menu = new ActionBarMenu(getContext(), this);
         addView(menu);
         FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)menu.getLayoutParams();
         layoutParams.height = LayoutParams.FILL_PARENT;
@@ -343,10 +314,6 @@ public ActionBarMenu createMenu() {
         return menu;
     }
 
-    public void onDestroy() {
-        parentActionBar.detachActionBarLayer(this);
-    }
-
     public void setActionBarMenuOnItemClick(ActionBarMenuOnItemClick listener) {
         actionBarMenuOnItemClick = listener;
     }
@@ -355,15 +322,21 @@ public void setCustomView(int resourceId) {
         LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         View view = li.inflate(resourceId, null);
         addView(view);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)view.getLayoutParams();
+        layoutParams.width = LayoutParams.FILL_PARENT;
+        layoutParams.height = LayoutParams.FILL_PARENT;
+        layoutParams.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
+        view.setLayoutParams(layoutParams);
     }
 
     public ActionBarMenu createActionMode() {
         if (actionMode != null) {
             return actionMode;
         }
-        actionMode = new ActionBarMenu(getContext(), parentActionBar, this);
+        actionMode = new ActionBarMenu(getContext(), this);
         actionMode.setBackgroundResource(R.drawable.editheader);
         addView(actionMode);
+        actionMode.setPadding(0, occupyStatusBar ? AndroidUtilities.statusBarHeight : 0, 0, 0);
         FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)actionMode.getLayoutParams();
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.width = LayoutParams.FILL_PARENT;
@@ -378,8 +351,8 @@ public void showActionMode() {
             return;
         }
         actionMode.setVisibility(VISIBLE);
-        if (backButtonFrameLayout != null) {
-            backButtonFrameLayout.setVisibility(INVISIBLE);
+        if (titleFrameLayout != null) {
+            titleFrameLayout.setVisibility(INVISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(INVISIBLE);
@@ -391,8 +364,8 @@ public void hideActionMode() {
             return;
         }
         actionMode.setVisibility(GONE);
-        if (backButtonFrameLayout != null) {
-            backButtonFrameLayout.setVisibility(isSearchFieldVisible || actionOverlay == null || actionOverlay.getVisibility() == GONE ? VISIBLE : INVISIBLE);
+        if (titleFrameLayout != null) {
+            titleFrameLayout.setVisibility(VISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(VISIBLE);
@@ -411,20 +384,10 @@ protected void onSearchFieldVisibilityChanged(boolean visible) {
         if (subTitleTextView != null) {
             subTitleTextView.setVisibility(visible ? GONE : VISIBLE);
         }
-        backButtonFrameLayout.setPadding(0, 0, visible ? 0 : AndroidUtilities.dp(4), 0);
-        if (visible) {
-            oldUseLogo = logoImageView != null && logoImageView.getVisibility() == VISIBLE;
-            setDisplayUseLogoEnabled(true, R.drawable.ic_ab_search);
-        } else {
-            setDisplayUseLogoEnabled(oldUseLogo, logoResourceId);
-        }
-        if (visible) {
-            oldUseBack = backButtonImageView != null && backButtonImageView.getVisibility() == VISIBLE;
-            setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-        } else {
-            setDisplayHomeAsUpEnabled(oldUseBack, backResourceId);
+        Drawable drawable = backButtonImageView.getDrawable();
+        if (drawable != null && drawable instanceof MenuDrawable) {
+            ((MenuDrawable)drawable).setRotation(visible ? 1 : 0, true);
         }
-        positionBackOverlay(getMeasuredWidth(), getMeasuredHeight());
     }
 
     public void closeSearchField() {
@@ -436,22 +399,12 @@ public void closeSearchField() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        positionLogoImage(MeasureSpec.getSize(heightMeasureSpec));
-        positionBackImage(MeasureSpec.getSize(heightMeasureSpec));
-        positionMenu(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));
-        positionTitle(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));
-        positionBackOverlay(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-    }
-
-    @Override
-    public void setAlpha(float alpha) {
-        if (menu != null) {
-            menu.setAlpha(alpha);
-        }
-        if (backButtonFrameLayout != null) {
-            backButtonFrameLayout.setAlpha(alpha);
-        }
+        int actionBarHeight = AndroidUtilities.getCurrentActionBarHeight();
+        positionBackImage(actionBarHeight);
+        positionMenu(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
+        positionTitle(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
+        actionBarHeight += occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(actionBarHeight + extraHeight, MeasureSpec.EXACTLY));
     }
 
     public void onMenuButtonPressed() {
@@ -466,51 +419,55 @@ protected void onPause() {
         }
     }
 
-    public void setBackOverlay(int resourceId) {
-        LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        actionOverlay = li.inflate(resourceId, null);
-        addView(actionOverlay);
-        actionOverlay.setVisibility(GONE);
-        actionOverlay.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (actionBarMenuOnItemClick != null) {
-                    actionBarMenuOnItemClick.onItemClick(-1);
-                }
-            }
-        });
+    public void setAllowOverlayTitle(boolean value) {
+        allowOverlayTitle = value;
     }
 
-    public void setBackOverlayVisible(boolean visible) {
-        if (actionOverlay == null || parentFragment == null || parentFragment.parentLayout == null) {
+    public void setTitleOverlayText(String text) {
+        if (showingOverlayTitle == (text != null) || !allowOverlayTitle || parentFragment.parentLayout == null) {
             return;
         }
-        isBackOverlayVisible = visible;
-        if (visible) {
-            parentFragment.parentLayout.onOverlayShow(actionOverlay, parentFragment);
+        showingOverlayTitle = text != null;
+        CharSequence textToSet = text != null ? text : lastTitle;
+        if (textToSet != null && titleTextView == null) {
+            createTitleTextView();
+        }
+        if (titleTextView != null) {
+            titleTextView.setVisibility(textToSet != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            titleTextView.setText(textToSet);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
-        positionBackOverlay(getMeasuredWidth(), getMeasuredHeight());
     }
 
-    private void positionBackOverlay(int widthMeasureSpec, int heightMeasureSpec) {
-        if (actionOverlay == null) {
-            return;
-        }
-        backButtonFrameLayout.setVisibility(isSearchFieldVisible || actionOverlay == null || actionOverlay.getVisibility() == GONE ? VISIBLE : INVISIBLE);
-        actionOverlay.setVisibility(!isSearchFieldVisible && isBackOverlayVisible ? VISIBLE : GONE);
-        if (actionOverlay.getVisibility() == VISIBLE) {
-            ViewGroup.LayoutParams layoutParams = actionOverlay.getLayoutParams();
-            layoutParams.width = LayoutParams.WRAP_CONTENT;
-            layoutParams.height = LayoutParams.MATCH_PARENT;
-            actionOverlay.setLayoutParams(layoutParams);
-            actionOverlay.measure(widthMeasureSpec, heightMeasureSpec);
-            layoutParams.width = Math.min(actionOverlay.getMeasuredWidth() + AndroidUtilities.dp(4), widthMeasureSpec - (menu != null ? menu.getMeasuredWidth() : 0));
-            actionOverlay.setLayoutParams(layoutParams);
+    public void setExtraHeight(int value, boolean layout) {
+        extraHeight = value;
+        if (layout) {
+            requestLayout();
         }
     }
 
+    public int getExtraHeight() {
+        return extraHeight;
+    }
+
+    public void setOccupyStatusBar(boolean value) {
+        occupyStatusBar = value;
+    }
+
+    public boolean getOccupyStatusBar() {
+        return occupyStatusBar;
+    }
+
     public void setItemsBackground(int resourceId) {
         itemsBackgroundResourceId = resourceId;
-        backButtonFrameLayout.setBackgroundResource(itemsBackgroundResourceId);
+        if (backButtonImageView != null) {
+            backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        super.onTouchEvent(event);
+        return true;
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
new file mode 100644
index 000000000..224a7b1d9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -0,0 +1,962 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.ActionBar;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.os.Handler;
+import android.view.ActionMode;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.DecelerateInterpolator;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+
+import java.util.ArrayList;
+
+public class ActionBarLayout extends FrameLayout {
+
+    public static interface ActionBarLayoutDelegate {
+        public abstract boolean onPreIme();
+        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
+        public abstract void onRebuildAllFragments(ActionBarLayout layout);
+    }
+
+    public class LinearLayoutContainer extends LinearLayout {
+
+        public LinearLayoutContainer(Context context) {
+            super(context);
+            setOrientation(VERTICAL);
+        }
+
+        @Override
+        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+            if (child instanceof ActionBar) {
+                return super.drawChild(canvas, child, drawingTime);
+            } else {
+                boolean wasActionBar = false;
+                int actionBarHeight = 0;
+                int childCount = getChildCount();
+                for (int a = 0; a < childCount; a++) {
+                    View view = getChildAt(a);
+                    if (view == child) {
+                        continue;
+                    }
+                    if (view instanceof ActionBar && view.getVisibility() == VISIBLE) {
+                        actionBarHeight = view.getMeasuredHeight();
+                        wasActionBar = true;
+                        break;
+                    }
+                }
+                /*if (!wasActionBar) {
+                    if (child instanceof ViewGroup) {
+                        ViewGroup viewGroup = (ViewGroup) child;
+                        childCount = viewGroup.getChildCount();
+                        for (int a = 0; a < childCount; a++) {
+                            View possibleActionBar = viewGroup.getChildAt(a);
+                            if (possibleActionBar instanceof ActionBar) {
+                                actionBarHeight = possibleActionBar.getMeasuredHeight();
+                                break;
+                            }
+                        }
+                    }
+                }*/
+                boolean result = super.drawChild(canvas, child, drawingTime);
+                if (actionBarHeight != 0 && headerShadowDrawable != null) {
+                    headerShadowDrawable.setBounds(0, actionBarHeight, getMeasuredWidth(), actionBarHeight + headerShadowDrawable.getIntrinsicHeight());
+                    headerShadowDrawable.draw(canvas);
+                }
+                return result;
+            }
+        }
+    }
+
+    private static Drawable headerShadowDrawable;
+    private static Drawable layerShadowDrawable;
+    private static Paint scrimPaint;
+
+    private LinearLayoutContainer containerView;
+    private LinearLayoutContainer containerViewBack;
+    private DrawerLayoutContainer drawerLayoutContainer;
+    private ActionBar currentActionBar;
+
+    private AnimatorSetProxy currentAnimation;
+
+    public float innerTranslationX;
+
+    private boolean maybeStartTracking;
+    protected boolean startedTracking;
+    private int startedTrackingX;
+    private int startedTrackingY;
+    protected boolean animationInProgress;
+    private VelocityTracker velocityTracker;
+    private boolean beginTrackingSent;
+    private boolean transitionAnimationInProgress;
+    private long transitionAnimationStartTime;
+    private boolean inActionMode;
+    private int startedTrackingPointerId;
+    private Runnable onCloseAnimationEndRunnable;
+    private Runnable onOpenAnimationEndRunnable;
+    private boolean useAlphaAnimations;
+    private View backgroundView;
+    private boolean removeActionBarExtraHeight;
+
+    private String titleOverlayText;
+
+    private ActionBarLayoutDelegate delegate = null;
+    protected Activity parentActivity = null;
+
+    public ArrayList<BaseFragment> fragmentsStack = null;
+
+    public ActionBarLayout(Context context) {
+        super(context);
+        parentActivity = (Activity) context;
+
+        if (layerShadowDrawable == null) {
+            layerShadowDrawable = getResources().getDrawable(R.drawable.layer_shadow);
+            headerShadowDrawable = getResources().getDrawable(R.drawable.header_shadow);
+            scrimPaint = new Paint();
+        }
+    }
+
+    public void init(ArrayList<BaseFragment> stack) {
+        fragmentsStack = stack;
+        containerViewBack = new LinearLayoutContainer(parentActivity);
+        addView(containerViewBack);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerViewBack.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        containerViewBack.setLayoutParams(layoutParams);
+
+        containerView = new LinearLayoutContainer(parentActivity);
+        addView(containerView);
+        layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        containerView.setLayoutParams(layoutParams);
+
+        for (BaseFragment fragment : fragmentsStack) {
+            fragment.setParentLayout(this);
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (!fragmentsStack.isEmpty()) {
+            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            lastFragment.onConfigurationChanged(newConfig);
+        }
+    }
+
+    public void setInnerTranslationX(float value) {
+        innerTranslationX = value;
+        invalidate();
+    }
+
+    public float getInnerTranslationX() {
+        return innerTranslationX;
+    }
+
+    public void onResume() {
+        if (transitionAnimationInProgress) {
+            if (currentAnimation != null) {
+                currentAnimation.cancel();
+                currentAnimation = null;
+            }
+            if (onCloseAnimationEndRunnable != null) {
+                onCloseAnimationEnd(false);
+            } else if (onOpenAnimationEndRunnable != null) {
+                onOpenAnimationEnd(false);
+            }
+        }
+        if (!fragmentsStack.isEmpty()) {
+            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            lastFragment.onResume();
+        }
+    }
+
+    public void onPause() {
+        if (!fragmentsStack.isEmpty()) {
+            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            lastFragment.onPause();
+        }
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        return !(!animationInProgress && !checkTransitionAnimation()) || onTouchEvent(ev);
+    }
+
+    @Override
+    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        onTouchEvent(null);
+        super.requestDisallowInterceptTouchEvent(disallowIntercept);
+    }
+
+    @Override
+    public boolean dispatchKeyEventPreIme(KeyEvent event) {
+        if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
+            return delegate != null && delegate.onPreIme() || super.dispatchKeyEventPreIme(event);
+        }
+        return super.dispatchKeyEventPreIme(event);
+    }
+
+    @Override
+    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+        int width = getWidth() - getPaddingLeft() - getPaddingRight();
+        int translationX = (int) innerTranslationX + getPaddingRight();
+        int clipLeft = getPaddingLeft();
+        int clipRight = width + getPaddingLeft();
+
+        if (child == containerViewBack) {
+            clipRight = translationX;
+        } else if (child == containerView) {
+            clipLeft = translationX;
+        }
+
+        final int restoreCount = canvas.save();
+        if (!transitionAnimationInProgress) {
+            canvas.clipRect(clipLeft, 0, clipRight, getHeight());
+        }
+        final boolean result = super.drawChild(canvas, child, drawingTime);
+        canvas.restoreToCount(restoreCount);
+
+        if (translationX != 0) {
+            if (child == containerView) {
+                final float alpha = Math.max(0, Math.min((width - translationX) / (float) AndroidUtilities.dp(20), 1.0f));
+                layerShadowDrawable.setBounds(translationX - layerShadowDrawable.getIntrinsicWidth(), child.getTop(), translationX, child.getBottom());
+                layerShadowDrawable.setAlpha((int) (0xff * alpha));
+                layerShadowDrawable.draw(canvas);
+            } else if (child == containerViewBack) {
+                final float opacity = Math.min(0.8f, (width - translationX) / (float)width);
+                scrimPaint.setColor((int) (((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
+                canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
+            }
+        }
+
+        return result;
+    }
+
+    public void setDelegate(ActionBarLayoutDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private void onSlideAnimationEnd(final boolean backAnimation) {
+        if (!backAnimation) {
+            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            lastFragment.onPause();
+            lastFragment.onFragmentDestroy();
+            lastFragment.setParentLayout(null);
+            fragmentsStack.remove(fragmentsStack.size() - 1);
+
+            LinearLayoutContainer temp = containerView;
+            containerView = containerViewBack;
+            containerViewBack = temp;
+            bringChildToFront(containerView);
+
+            lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            currentActionBar = lastFragment.actionBar;
+            lastFragment.onResume();
+        } else {
+            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
+            lastFragment.onPause();
+            if (lastFragment.fragmentView != null) {
+                ViewGroup parent = (ViewGroup) lastFragment.fragmentView.getParent();
+                if (parent != null) {
+                    parent.removeView(lastFragment.fragmentView);
+                }
+            }
+            if (lastFragment.needAddActionBar() && lastFragment.actionBar != null) {
+                ViewGroup parent = (ViewGroup) lastFragment.actionBar.getParent();
+                if (parent != null) {
+                    parent.removeView(lastFragment.actionBar);
+                }
+            }
+        }
+        containerViewBack.setVisibility(View.GONE);
+        //AndroidUtilities.unlockOrientation(parentActivity);
+        startedTracking = false;
+        animationInProgress = false;
+
+        ViewProxy.setTranslationX(containerView, 0);
+        ViewProxy.setTranslationX(containerViewBack, 0);
+        setInnerTranslationX(0);
+    }
+
+    private void prepareForMoving(MotionEvent ev) {
+        maybeStartTracking = false;
+        startedTracking = true;
+        startedTrackingX = (int) ev.getX();
+        containerViewBack.setVisibility(View.VISIBLE);
+        beginTrackingSent = false;
+
+        BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
+        View fragmentView = lastFragment.createView(parentActivity.getLayoutInflater(), null);
+        ViewGroup parent = (ViewGroup) fragmentView.getParent();
+        if (parent != null) {
+            parent.removeView(fragmentView);
+        }
+        if (lastFragment.needAddActionBar() && lastFragment.actionBar != null) {
+            parent = (ViewGroup) lastFragment.actionBar.getParent();
+            if (parent != null) {
+                parent.removeView(lastFragment.actionBar);
+            }
+            if (removeActionBarExtraHeight) {
+                lastFragment.actionBar.setOccupyStatusBar(false);
+            }
+            containerViewBack.addView(lastFragment.actionBar);
+            lastFragment.actionBar.setTitleOverlayText(titleOverlayText);
+        }
+        containerViewBack.addView(fragmentView);
+        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        fragmentView.setLayoutParams(layoutParams);
+        if (fragmentView.getBackground() == null) {
+            fragmentView.setBackgroundColor(0xffffffff);
+        }
+        lastFragment.onResume();
+
+        //AndroidUtilities.lockOrientation(parentActivity);
+    }
+
+    public boolean onTouchEvent(MotionEvent ev) {
+        if (!checkTransitionAnimation() && !inActionMode && !animationInProgress) {
+            if (fragmentsStack.size() > 1) {
+                if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {
+                    BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+                    if (!currentFragment.swipeBackEnabled) {
+                        return false;
+                    }
+                    startedTrackingPointerId = ev.getPointerId(0);
+                    maybeStartTracking = true;
+                    startedTrackingX = (int) ev.getX();
+                    startedTrackingY = (int) ev.getY();
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                } else if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {
+                    if (velocityTracker == null) {
+                        velocityTracker = VelocityTracker.obtain();
+                    }
+                    int dx = Math.max(0, (int) (ev.getX() - startedTrackingX));
+                    int dy = Math.abs((int) ev.getY() - startedTrackingY);
+                    velocityTracker.addMovement(ev);
+                    if (maybeStartTracking && !startedTracking && dx >= AndroidUtilities.dp(10) && Math.abs(dx) / 3 > dy) {
+                        prepareForMoving(ev);
+                    } else if (startedTracking) {
+                        if (!beginTrackingSent) {
+                            if (parentActivity.getCurrentFocus() != null) {
+                                AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
+                            }
+                            BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+                            currentFragment.onBeginSlide();
+                            beginTrackingSent = true;
+                        }
+                        ViewProxy.setTranslationX(containerView, dx);
+                        setInnerTranslationX(dx);
+                    }
+                } else if (ev != null && ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {
+                    if (velocityTracker == null) {
+                        velocityTracker = VelocityTracker.obtain();
+                    }
+                    velocityTracker.computeCurrentVelocity(1000);
+                    if (!startedTracking) {
+                        float velX = velocityTracker.getXVelocity();
+                        float velY = velocityTracker.getYVelocity();
+                        if (velX >= 3500 && velX > velY) {
+                            prepareForMoving(ev);
+                            if (!beginTrackingSent) {
+                                if (((Activity) getContext()).getCurrentFocus() != null) {
+                                    AndroidUtilities.hideKeyboard(((Activity) getContext()).getCurrentFocus());
+                                }
+                                beginTrackingSent = true;
+                            }
+                        }
+                    }
+                    if (startedTracking) {
+                        float x = ViewProxy.getX(containerView);
+                        AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+                        float velX = velocityTracker.getXVelocity();
+                        float velY = velocityTracker.getYVelocity();
+                        final boolean backAnimation = x < containerView.getMeasuredWidth() / 3.0f && (velX < 3500 || velX < velY);
+                        float distToMove = 0;
+                        if (!backAnimation) {
+                            distToMove = containerView.getMeasuredWidth() - x;
+                            animatorSet.playTogether(
+                                    ObjectAnimatorProxy.ofFloat(containerView, "x", containerView.getMeasuredWidth()),
+                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float)containerView.getMeasuredWidth())
+                            );
+                        } else {
+                            distToMove = x;
+                            animatorSet.playTogether(
+                                    ObjectAnimatorProxy.ofFloat(containerView, "x", 0),
+                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", 0.0f)
+                            );
+                        }
+
+                        animatorSet.setDuration(Math.max((int) (200.0f / containerView.getMeasuredWidth() * distToMove), 50));
+                        animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                            @Override
+                            public void onAnimationEnd(Object animator) {
+                                onSlideAnimationEnd(backAnimation);
+                            }
+
+                            @Override
+                            public void onAnimationCancel(Object animator) {
+                                onSlideAnimationEnd(backAnimation);
+                            }
+                        });
+                        animatorSet.start();
+                        animationInProgress = true;
+                    } else {
+                        maybeStartTracking = false;
+                        startedTracking = false;
+                    }
+                    if (velocityTracker != null) {
+                        velocityTracker.recycle();
+                        velocityTracker = null;
+                    }
+                } else if (ev == null) {
+                    maybeStartTracking = false;
+                    startedTracking = false;
+                    if (velocityTracker != null) {
+                        velocityTracker.recycle();
+                        velocityTracker = null;
+                    }
+                }
+            }
+            return startedTracking;
+        }
+        return false;
+    }
+
+    public void onBackPressed() {
+        if (startedTracking || checkTransitionAnimation() || fragmentsStack.isEmpty()) {
+            return;
+        }
+        if (currentActionBar != null && currentActionBar.isSearchFieldVisible) {
+            currentActionBar.closeSearchField();
+            return;
+        }
+        BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+        if (lastFragment.onBackPressed()) {
+            if (!fragmentsStack.isEmpty()) {
+                closeLastFragment(true);
+            }
+        }
+    }
+
+    public void onLowMemory() {
+        for (BaseFragment fragment : fragmentsStack) {
+            fragment.onLowMemory();
+        }
+    }
+
+    private void onAnimationEndCheck(boolean byCheck) {
+        onCloseAnimationEnd(false);
+        onOpenAnimationEnd(false);
+        if (currentAnimation != null) {
+            if (byCheck) {
+                currentAnimation.cancel();
+            }
+            currentAnimation = null;
+        }
+        ViewProxy.setAlpha(this, 1.0f);
+        ViewProxy.setAlpha(containerView, 1.0f);
+        ViewProxy.setScaleX(containerView, 1.0f);
+        ViewProxy.setScaleY(containerView, 1.0f);
+        ViewProxy.setAlpha(containerViewBack, 1.0f);
+        ViewProxy.setScaleX(containerViewBack, 1.0f);
+        ViewProxy.setScaleY(containerViewBack, 1.0f);
+    }
+
+    public boolean checkTransitionAnimation() {
+        if (transitionAnimationInProgress && transitionAnimationStartTime < System.currentTimeMillis() - 400) {
+            transitionAnimationInProgress = false;
+            onAnimationEndCheck(true);
+        }
+        return transitionAnimationInProgress;
+    }
+
+    private void presentFragmentInternalRemoveOld(boolean removeLast, final BaseFragment fragment) {
+        if (fragment == null) {
+            return;
+        }
+        fragment.onPause();
+        if (removeLast) {
+            fragment.onFragmentDestroy();
+            fragment.setParentLayout(null);
+            fragmentsStack.remove(fragment);
+        } else {
+            if (fragment.fragmentView != null) {
+                ViewGroup parent = (ViewGroup) fragment.fragmentView.getParent();
+                if (parent != null) {
+                    parent.removeView(fragment.fragmentView);
+                }
+            }
+            if (fragment.needAddActionBar() && fragment.actionBar != null) {
+                ViewGroup parent = (ViewGroup) fragment.actionBar.getParent();
+                if (parent != null) {
+                    parent.removeView(fragment.actionBar);
+                }
+            }
+        }
+        containerViewBack.setVisibility(View.GONE);
+    }
+
+    public boolean presentFragment(BaseFragment fragment) {
+        return presentFragment(fragment, false, false, true);
+    }
+
+    public boolean presentFragment(BaseFragment fragment, boolean removeLast) {
+        return presentFragment(fragment, removeLast, false, true);
+    }
+
+    public boolean presentFragment(final BaseFragment fragment, final boolean removeLast, boolean forceWithoutAnimation, boolean check) {
+        if (checkTransitionAnimation() || delegate != null && check && !delegate.needPresentFragment(fragment, removeLast, forceWithoutAnimation, this) || !fragment.onFragmentCreate()) {
+            return false;
+        }
+        if (parentActivity.getCurrentFocus() != null) {
+            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.hideEmojiKeyboard);
+        }
+        boolean needAnimation = Build.VERSION.SDK_INT > 10 && !forceWithoutAnimation && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
+
+        final BaseFragment currentFragment = !fragmentsStack.isEmpty() ? fragmentsStack.get(fragmentsStack.size() - 1) : null;
+
+        fragment.setParentLayout(this);
+        View fragmentView = fragment.createView(parentActivity.getLayoutInflater(), null);
+        if (fragment.needAddActionBar() && fragment.actionBar != null) {
+            if (removeActionBarExtraHeight) {
+                fragment.actionBar.setOccupyStatusBar(false);
+            }
+            ViewGroup parent = (ViewGroup) fragment.actionBar.getParent();
+            if (parent != null) {
+                parent.removeView(fragment.actionBar);
+            }
+            containerViewBack.addView(fragment.actionBar);
+            fragment.actionBar.setTitleOverlayText(titleOverlayText);
+        }
+        containerViewBack.addView(fragmentView);
+        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        fragmentView.setLayoutParams(layoutParams);
+        fragmentsStack.add(fragment);
+        fragment.onResume();
+        currentActionBar = fragment.actionBar;
+        if (fragmentView.getBackground() == null) {
+            fragmentView.setBackgroundColor(0xffffffff);
+        }
+
+        LinearLayoutContainer temp = containerView;
+        containerView = containerViewBack;
+        containerViewBack = temp;
+        containerView.setVisibility(View.VISIBLE);
+
+        bringChildToFront(containerView);
+
+        if (!needAnimation) {
+            presentFragmentInternalRemoveOld(removeLast, currentFragment);
+            if (backgroundView != null) {
+                backgroundView.setVisibility(VISIBLE);
+            }
+        }
+
+        if (needAnimation) {
+            if (useAlphaAnimations && fragmentsStack.size() == 1) {
+                presentFragmentInternalRemoveOld(removeLast, currentFragment);
+
+                ArrayList<Object> animators = new ArrayList<Object>();
+                animators.add(ObjectAnimatorProxy.ofFloat(this, "alpha", 0.0f, 1.0f));
+                if (backgroundView != null) {
+                    backgroundView.setVisibility(VISIBLE);
+                    animators.add(ObjectAnimatorProxy.ofFloat(backgroundView, "alpha", 0.0f, 1.0f));
+                }
+
+                currentAnimation = new AnimatorSetProxy();
+                currentAnimation.playTogether(animators);
+                currentAnimation.setInterpolator(new AccelerateDecelerateInterpolator());
+                currentAnimation.setDuration(200);
+                currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        onAnimationEndCheck(false);
+                    }
+                });
+                currentAnimation.start();
+            } else {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+                onOpenAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        presentFragmentInternalRemoveOld(removeLast, currentFragment);
+                        fragment.onOpenAnimationEnd();
+                    }
+                };
+                currentAnimation = new AnimatorSetProxy();
+                currentAnimation.playTogether(
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f),
+                        ObjectAnimatorProxy.ofFloat(containerView, "scaleX", 0.8f, 1.0f),
+                        ObjectAnimatorProxy.ofFloat(containerView, "scaleY", 0.8f, 1.0f));
+                currentAnimation.setInterpolator(new DecelerateInterpolator(1.5f));
+                currentAnimation.setDuration(200);
+                currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        onAnimationEndCheck(false);
+                    }
+                });
+                currentAnimation.start();
+            }
+        } else {
+            if (backgroundView != null) {
+                ViewProxy.setAlpha(backgroundView, 1.0f);
+                backgroundView.setVisibility(VISIBLE);
+            }
+            fragment.onOpenAnimationEnd();
+        }
+        return true;
+    }
+
+    public boolean addFragmentToStack(BaseFragment fragment) {
+        return addFragmentToStack(fragment, -1);
+    }
+
+    public boolean addFragmentToStack(BaseFragment fragment, int position) {
+        if (delegate != null && !delegate.needAddFragmentToStack(fragment, this) || !fragment.onFragmentCreate()) {
+            return false;
+        }
+        fragment.setParentLayout(this);
+        if (position == -1) {
+            fragmentsStack.add(fragment);
+        } else {
+            fragmentsStack.add(position, fragment);
+        }
+        return true;
+    }
+
+    private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
+        fragment.onPause();
+        fragment.onFragmentDestroy();
+        fragment.setParentLayout(null);
+        fragmentsStack.remove(fragment);
+        containerViewBack.setVisibility(View.GONE);
+        bringChildToFront(containerView);
+    }
+
+    public void closeLastFragment(boolean animated) {
+        if (delegate != null && !delegate.needCloseLastFragment(this) || checkTransitionAnimation()) {
+            return;
+        }
+        if (parentActivity.getCurrentFocus() != null) {
+            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
+        }
+        boolean needAnimation = Build.VERSION.SDK_INT > 10 && animated && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
+        final BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+        BaseFragment previousFragment = null;
+        if (fragmentsStack.size() > 1) {
+            previousFragment = fragmentsStack.get(fragmentsStack.size() - 2);
+        }
+
+        if (previousFragment != null) {
+            LinearLayoutContainer temp = containerView;
+            containerView = containerViewBack;
+            containerViewBack = temp;
+            containerView.setVisibility(View.VISIBLE);
+
+            previousFragment.setParentLayout(this);
+            View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
+            if (previousFragment.needAddActionBar() && previousFragment.actionBar != null) {
+                if (removeActionBarExtraHeight) {
+                    previousFragment.actionBar.setOccupyStatusBar(false);
+                }
+                ViewGroup parent = (ViewGroup) previousFragment.actionBar.getParent();
+                if (parent != null) {
+                    parent.removeView(previousFragment.actionBar);
+                }
+                containerView.addView(previousFragment.actionBar);
+                previousFragment.actionBar.setTitleOverlayText(titleOverlayText);
+            }
+            containerView.addView(fragmentView);
+            ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            fragmentView.setLayoutParams(layoutParams);
+            previousFragment.onResume();
+            currentActionBar = previousFragment.actionBar;
+            if (fragmentView.getBackground() == null) {
+                fragmentView.setBackgroundColor(0xffffffff);
+            }
+
+            if (!needAnimation) {
+                closeLastFragmentInternalRemoveOld(currentFragment);
+            }
+
+            if (needAnimation) {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+                onCloseAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        closeLastFragmentInternalRemoveOld(currentFragment);
+                    }
+                };
+
+                currentAnimation = new AnimatorSetProxy();
+                currentAnimation.playTogether(
+                        ObjectAnimatorProxy.ofFloat(containerViewBack, "alpha", 1.0f, 0.0f),
+                        ObjectAnimatorProxy.ofFloat(containerViewBack, "scaleX", 1.0f, 0.8f),
+                        ObjectAnimatorProxy.ofFloat(containerViewBack, "scaleY", 1.0f, 0.8f));
+                currentAnimation.setInterpolator(new DecelerateInterpolator(1.5f));
+                currentAnimation.setDuration(200);
+                currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        onAnimationEndCheck(false);
+                    }
+                });
+                currentAnimation.start();
+            }
+        } else {
+            if (useAlphaAnimations) {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+
+                onCloseAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        removeFragmentFromStack(currentFragment);
+                        setVisibility(GONE);
+                        if (backgroundView != null) {
+                            backgroundView.setVisibility(GONE);
+                        }
+                        if (drawerLayoutContainer != null) {
+                            drawerLayoutContainer.setAllowOpenDrawer(true);
+                        }
+                    }
+                };
+
+                ArrayList<Object> animators = new ArrayList<Object>();
+                animators.add(ObjectAnimatorProxy.ofFloat(this, "alpha", 1.0f, 0.0f));
+                if (backgroundView != null) {
+                    animators.add(ObjectAnimatorProxy.ofFloat(backgroundView, "alpha", 1.0f, 0.0f));
+                }
+
+                currentAnimation = new AnimatorSetProxy();
+                currentAnimation.playTogether(animators);
+                currentAnimation.setInterpolator(new AccelerateDecelerateInterpolator());
+                currentAnimation.setDuration(200);
+                currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        onAnimationEndCheck(false);
+                    }
+                });
+                currentAnimation.start();
+            } else {
+                removeFragmentFromStack(currentFragment);
+                setVisibility(GONE);
+                if (backgroundView != null) {
+                    backgroundView.setVisibility(GONE);
+                }
+            }
+        }
+    }
+
+    public void showLastFragment() {
+        if (fragmentsStack.isEmpty()) {
+            return;
+        }
+        BaseFragment previousFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+        previousFragment.setParentLayout(this);
+        View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
+        if (previousFragment.needAddActionBar() && previousFragment.actionBar != null) {
+            if (removeActionBarExtraHeight) {
+                previousFragment.actionBar.setOccupyStatusBar(false);
+            }
+            ViewGroup parent = (ViewGroup) previousFragment.actionBar.getParent();
+            if (parent != null) {
+                parent.removeView(previousFragment.actionBar);
+            }
+            containerView.addView(previousFragment.actionBar);
+            previousFragment.actionBar.setTitleOverlayText(titleOverlayText);
+        }
+        containerView.addView(fragmentView);
+        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        fragmentView.setLayoutParams(layoutParams);
+        previousFragment.onResume();
+        currentActionBar = previousFragment.actionBar;
+        if (fragmentView.getBackground() == null) {
+            fragmentView.setBackgroundColor(0xffffffff);
+        }
+    }
+
+    public void removeFragmentFromStack(BaseFragment fragment) {
+        fragment.onPause();
+        fragment.onFragmentDestroy();
+        fragment.setParentLayout(null);
+        fragmentsStack.remove(fragment);
+    }
+
+    public void removeAllFragments() {
+        for (int a = 0; a < fragmentsStack.size(); a++) {
+            removeFragmentFromStack(fragmentsStack.get(a));
+            a--;
+        }
+    }
+
+    public void rebuildAllFragmentViews(boolean last) {
+        for (int a = 0; a < fragmentsStack.size() - (last ? 0 : 1); a++) {
+            fragmentsStack.get(a).setParentLayout(null);
+            fragmentsStack.get(a).setParentLayout(this);
+        }
+        if (delegate != null) {
+            delegate.onRebuildAllFragments(this);
+        }
+    }
+
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        if (keyCode == KeyEvent.KEYCODE_MENU && !checkTransitionAnimation() && !startedTracking && currentActionBar != null) {
+            currentActionBar.onMenuButtonPressed();
+        }
+        return super.onKeyUp(keyCode, event);
+    }
+
+    public void onActionModeStarted(ActionMode mode) {
+        if (currentActionBar != null) {
+            currentActionBar.setVisibility(GONE);
+        }
+        inActionMode = true;
+    }
+
+    public void onActionModeFinished(ActionMode mode) {
+        if (currentActionBar != null) {
+            currentActionBar.setVisibility(VISIBLE);
+        }
+        inActionMode = false;
+    }
+
+    private void onCloseAnimationEnd(boolean post) {
+        if (transitionAnimationInProgress && onCloseAnimationEndRunnable != null) {
+            transitionAnimationInProgress = false;
+            transitionAnimationStartTime = 0;
+            if (post) {
+                new Handler().post(new Runnable() {
+                    public void run() {
+                        onCloseAnimationEndRunnable.run();
+                        onCloseAnimationEndRunnable = null;
+                    }
+                });
+            } else {
+                onCloseAnimationEndRunnable.run();
+                onCloseAnimationEndRunnable = null;
+            }
+        }
+    }
+
+    private void onOpenAnimationEnd(boolean post) {
+        if (transitionAnimationInProgress && onOpenAnimationEndRunnable != null) {
+            transitionAnimationInProgress = false;
+            transitionAnimationStartTime = 0;
+            if (post) {
+                new Handler().post(new Runnable() {
+                    public void run() {
+                        onOpenAnimationEndRunnable.run();
+                        onOpenAnimationEndRunnable = null;
+                    }
+                });
+            } else {
+                onOpenAnimationEndRunnable.run();
+                onOpenAnimationEndRunnable = null;
+            }
+        }
+    }
+
+    public void startActivityForResult(final Intent intent, final int requestCode) {
+        if (parentActivity == null) {
+            return;
+        }
+        if (transitionAnimationInProgress) {
+            if (currentAnimation != null) {
+                currentAnimation.cancel();
+                currentAnimation = null;
+            }
+            if (onCloseAnimationEndRunnable != null) {
+                onCloseAnimationEnd(false);
+            } else if (onOpenAnimationEndRunnable != null) {
+                onOpenAnimationEnd(false);
+            }
+            containerView.invalidate();
+            if (intent != null) {
+                parentActivity.startActivityForResult(intent, requestCode);
+            }
+        } else {
+            if (intent != null) {
+                parentActivity.startActivityForResult(intent, requestCode);
+            }
+        }
+    }
+
+    public void setUseAlphaAnimations(boolean value) {
+        useAlphaAnimations = value;
+    }
+
+    public void setBackgroundView(View view) {
+        backgroundView = view;
+    }
+
+    public void setDrawerLayoutContainer(DrawerLayoutContainer layout) {
+        drawerLayoutContainer = layout;
+    }
+
+    public DrawerLayoutContainer getDrawerLayoutContainer() {
+        return drawerLayoutContainer;
+    }
+
+    public void setRemoveActionBarExtraHeight(boolean value) {
+        removeActionBarExtraHeight = value;
+    }
+
+    public void setTitleOverlayText(String text) {
+        titleOverlayText = text;
+        for (BaseFragment fragment : fragmentsStack) {
+            if (fragment.actionBar != null) {
+                fragment.actionBar.setTitleOverlayText(titleOverlayText);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
similarity index 72%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index ae1288bdb..8af54572a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -6,9 +6,10 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.telegram.ui.ActionBar;
 
 import android.content.Context;
+import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -20,14 +21,12 @@
 
 public class ActionBarMenu extends LinearLayout {
 
-    private ActionBar parentActionBar;
-    private ActionBarLayer parentActionBarLayer;
+    protected ActionBar parentActionBar;
 
-    public ActionBarMenu(Context context, ActionBar actionBar, ActionBarLayer layer) {
+    public ActionBarMenu(Context context, ActionBar layer) {
         super(context);
         setOrientation(LinearLayout.HORIZONTAL);
-        parentActionBar = actionBar;
-        parentActionBarLayer = layer;
+        parentActionBar = layer;
     }
 
     public ActionBarMenu(Context context) {
@@ -49,7 +48,7 @@ public View addItemResource(int id, int resourceId) {
         addView(view);
         LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)view.getLayoutParams();
         layoutParams.height = FrameLayout.LayoutParams.FILL_PARENT;
-        view.setBackgroundResource(parentActionBarLayer.itemsBackgroundResourceId);
+        view.setBackgroundResource(parentActionBar.itemsBackgroundResourceId);
         view.setLayoutParams(layoutParams);
         view.setOnClickListener(new OnClickListener() {
             @Override
@@ -60,30 +59,46 @@ public void onClick(View view) {
         return view;
     }
 
+    public ActionBarMenuItem addItem(int id, Drawable drawable) {
+        return addItem(id, 0, parentActionBar.itemsBackgroundResourceId, drawable, AndroidUtilities.dp(48));
+    }
+
     public ActionBarMenuItem addItem(int id, int icon) {
-        return addItem(id, icon, parentActionBarLayer.itemsBackgroundResourceId);
+        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId);
     }
 
     public ActionBarMenuItem addItem(int id, int icon, int backgroundResource) {
-        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, parentActionBar, backgroundResource);
+        return addItem(id, icon, backgroundResource, null, AndroidUtilities.dp(48));
+    }
+
+    public ActionBarMenuItem addItemWithWidth(int id, int icon, int width) {
+        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId, null, width);
+    }
+
+    public ActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawable drawable, int width) {
+        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, backgroundResource);
         menuItem.setTag(id);
         menuItem.setScaleType(ImageView.ScaleType.CENTER);
-        menuItem.setImageResource(icon);
+        if (drawable != null) {
+            menuItem.setImageDrawable(drawable);
+        } else {
+            menuItem.setImageResource(icon);
+        }
         addView(menuItem);
         LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)menuItem.getLayoutParams();
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.width = AndroidUtilities.dp(56);
+        layoutParams.width = width;
         menuItem.setLayoutParams(layoutParams);
         menuItem.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
                 ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.hasSubMenu()) {
-                    if (parentActionBarLayer.actionBarMenuOnItemClick.canOpenMenu()) {
+                    if (parentActionBar.actionBarMenuOnItemClick.canOpenMenu()) {
                         item.toggleSubMenu();
                     }
                 } else if (item.isSearchField()) {
-                    parentActionBarLayer.onSearchFieldVisibilityChanged(item.toggleSearch());
+                    parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                 } else {
                     onItemClick((Integer)view.getTag());
                 }
@@ -102,8 +117,8 @@ public void hideAllPopupMenus() {
     }
 
     public void onItemClick(int id) {
-        if (parentActionBarLayer.actionBarMenuOnItemClick != null) {
-            parentActionBarLayer.actionBarMenuOnItemClick.onItemClick(id);
+        if (parentActionBar.actionBarMenuOnItemClick != null) {
+            parentActionBar.actionBarMenuOnItemClick.onItemClick(id);
         }
     }
 
@@ -132,7 +147,7 @@ public void closeSearchField() {
             if (view instanceof ActionBarMenuItem) {
                 ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.isSearchField()) {
-                    parentActionBarLayer.onSearchFieldVisibilityChanged(item.toggleSearch());
+                    parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
similarity index 77%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index c3a3937d8..f417a5664 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -6,14 +6,13 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.telegram.ui.ActionBar;
 
 import android.content.Context;
 import android.graphics.Rect;
 import android.os.Build;
 import android.text.Editable;
 import android.text.TextWatcher;
-import android.util.AttributeSet;
 import android.view.ActionMode;
 import android.view.ContextMenu;
 import android.view.Gravity;
@@ -47,36 +46,38 @@
     private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
     private ActionBarMenu parentMenu;
     private ActionBarPopupWindow popupWindow;
-    private ActionBar parentActionBar;
     private EditText searchField;
     private boolean isSearchField = false;
     private ActionBarMenuItemSearchListener listener;
-    private Rect rect = null;
-    private int[] location = null;
-    private View selectedMenuView = null;
-
-    public ActionBarMenuItem(Context context, ActionBarMenu menu, ActionBar actionBar, int background) {
+    private Rect rect;
+    private int[] location;
+    private View selectedMenuView;
+    private Runnable showMenuRunnable;
+    private boolean showFromBottom;
+    private int menuHeight = AndroidUtilities.dp(16);
+
+    public ActionBarMenuItem(Context context, ActionBarMenu menu, int background) {
         super(context);
         setBackgroundResource(background);
         parentMenu = menu;
-        parentActionBar = actionBar;
-    }
-
-    public ActionBarMenuItem(Context context) {
-        super(context);
-    }
-
-    public ActionBarMenuItem(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public ActionBarMenuItem(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
     }
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
-        if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+        if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+            if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
+                showMenuRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        if (getParent() != null) {
+                            getParent().requestDisallowInterceptTouchEvent(true);
+                        }
+                        toggleSubMenu();
+                    }
+                };
+                AndroidUtilities.runOnUIThread(showMenuRunnable, 200);
+            }
+        } else if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
             if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
                 if (event.getY() > getHeight()) {
                     if (getParent() != null) {
@@ -98,9 +99,18 @@ public boolean onTouchEvent(MotionEvent event) {
                     child.getHitRect(rect);
                     if ((Integer)child.getTag() < 100) {
                         if (!rect.contains((int)x, (int)y)) {
+                            child.setPressed(false);
                             child.setSelected(false);
+                            if (Build.VERSION.SDK_INT >= 21) {
+                                child.getBackground().setVisible(false, false);
+                            }
                         } else {
+                            child.setPressed(true);
                             child.setSelected(true);
+                            if (Build.VERSION.SDK_INT >= 21) {
+                                child.getBackground().setVisible(true, false);
+                                child.drawableHotspotChanged(x, y - child.getTop());
+                            }
                             selectedMenuView = child;
                         }
                     }
@@ -121,7 +131,11 @@ public boolean onTouchEvent(MotionEvent event) {
         return super.onTouchEvent(event);
     }
 
-    public void addSubItem(int id, String text, int icon) {
+    public void setShowFromBottom(boolean value) {
+        showFromBottom = value;
+    }
+
+    public TextView addSubItem(int id, String text, int icon) {
         if (popupLayout == null) {
             rect = new Rect();
             location = new int[2];
@@ -151,18 +165,8 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
                 }
             });
         }
-        if (popupLayout.getChildCount() != 0) {
-            View delimeter = new View(getContext());
-            delimeter.setBackgroundColor(0xffdcdcdc);
-            popupLayout.addView(delimeter);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)delimeter.getLayoutParams();
-            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.density >= 3 ? 2 : 1;
-            delimeter.setLayoutParams(layoutParams);
-            delimeter.setTag(100 + id);
-        }
         TextView textView = new TextView(getContext());
-        textView.setTextColor(0xff000000);
+        textView.setTextColor(0xff212121);
         textView.setBackgroundResource(R.drawable.list_selector);
         if (!LocaleController.isRTL) {
             textView.setGravity(Gravity.CENTER_VERTICAL);
@@ -187,7 +191,7 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
         if (LocaleController.isRTL) {
             layoutParams.gravity = Gravity.RIGHT;
         }
-        layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = AndroidUtilities.dp(48);
         textView.setLayoutParams(layoutParams);
         textView.setOnClickListener(new OnClickListener() {
@@ -199,6 +203,8 @@ public void onClick(View view) {
                 }
             }
         });
+        menuHeight += layoutParams.height;
+        return textView;
     }
 
     public boolean hasSubMenu() {
@@ -206,6 +212,13 @@ public boolean hasSubMenu() {
     }
 
     public void toggleSubMenu() {
+        if (popupLayout == null) {
+            return;
+        }
+        if (showMenuRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(showMenuRunnable);
+            showMenuRunnable = null;
+        }
         if (popupWindow != null && popupWindow.isShowing()) {
             popupWindow.dismiss();
             return;
@@ -213,6 +226,7 @@ public void toggleSubMenu() {
         if (popupWindow == null) {
             popupWindow = new ActionBarPopupWindow(popupLayout, FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);
             //popupWindow.setBackgroundDrawable(new BitmapDrawable());
+            popupWindow.setAnimationStyle(R.style.PopupAnimation);
             popupWindow.setOutsideTouchable(true);
             popupWindow.setClippingEnabled(true);
             popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
@@ -232,13 +246,32 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
         }
         popupWindow.setFocusable(true);
         if (popupLayout.getMeasuredWidth() == 0) {
-            popupWindow.showAsDropDown(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0);
-            popupWindow.update(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0, -1, -1);
+            if (showFromBottom) {
+                popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.dp(14), getBottomOffsetY());
+                popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.dp(14), getBottomOffsetY(), -1, -1);
+            } else {
+                popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), -getMeasuredHeight());
+                popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), -getMeasuredHeight(), -1, -1);
+            }
         } else {
-            popupWindow.showAsDropDown(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0);
+            if (showFromBottom) {
+                popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.dp(14), getBottomOffsetY());
+            } else {
+                popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), -getMeasuredHeight());
+            }
         }
     }
 
+    private int getBottomOffsetY() {
+        getLocationOnScreen(location);
+        int diff = location[1] - AndroidUtilities.statusBarHeight + getMeasuredHeight() - menuHeight;
+        int y = AndroidUtilities.dp(8) - menuHeight;
+        if (diff < 0) {
+            y -= diff;
+        }
+        return y;
+    }
+
     public boolean toggleSearch() {
         if (searchField == null) {
             return false;
@@ -281,7 +314,7 @@ public ActionBarMenuItem setIsSearchField(boolean value) {
             searchField.setTextColor(0xffffffff);
             searchField.setSingleLine(true);
             searchField.setBackgroundResource(R.drawable.search_light_states);
-            searchField.setPadding(AndroidUtilities.dp(6), 0, AndroidUtilities.dp(6), 0);
+            searchField.setPadding(0, 0, 0, 0);
             searchField.setInputType(EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
             if (android.os.Build.VERSION.SDK_INT < 11) {
                 searchField.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
@@ -360,7 +393,8 @@ public void afterTextChanged(Editable s) {
             layoutParams.width = 0;
             layoutParams.gravity = Gravity.CENTER_VERTICAL;
             layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.rightMargin = AndroidUtilities.dp(4);
+            layoutParams.rightMargin = AndroidUtilities.dp(22);
+            layoutParams.leftMargin = AndroidUtilities.dp(6);
             searchField.setLayoutParams(layoutParams);
             searchField.setVisibility(GONE);
         }
@@ -377,10 +411,14 @@ public void setActionBarMenuItemSearchListener(ActionBarMenuItemSearchListener l
     }
 
     @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
         if (popupWindow != null && popupWindow.isShowing()) {
-            popupWindow.update(this, parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), 0, -1, -1);
+            if (showFromBottom) {
+                popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.dp(14), getBottomOffsetY(), -1, -1);
+            } else {
+                popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), -getMeasuredHeight(), -1, -1);
+            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 698ab7c39..5e5a302bb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -8,7 +8,7 @@
 
 //Thanks to https://github.com/JakeWharton/ActionBarSherlock/
 
-package org.telegram.ui.Views.ActionBar;
+package org.telegram.ui.ActionBar;
 
 import android.content.Context;
 import android.util.AttributeSet;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
similarity index 83%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 51e4b430b..072ef79cc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.telegram.ui.ActionBar;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -23,12 +23,13 @@
 
 public class BaseFragment {
     private boolean isFinished = false;
+    private AlertDialog visibleDialog = null;
+
     protected View fragmentView;
     protected ActionBarLayout parentLayout;
-    protected ActionBarLayer actionBarLayer;
+    protected ActionBar actionBar;
     protected int classGuid = 0;
     protected Bundle arguments;
-    private AlertDialog visibleDialog = null;
     protected boolean swipeBackEnabled = true;
 
     public BaseFragment() {
@@ -48,7 +49,7 @@ public Bundle getArguments() {
         return arguments;
     }
 
-    public void setParentLayout(ActionBarLayout layout) {
+    protected void setParentLayout(ActionBarLayout layout) {
         if (parentLayout != layout) {
             parentLayout = layout;
             if (fragmentView != null) {
@@ -62,14 +63,21 @@ public void setParentLayout(ActionBarLayout layout) {
                 }
                 fragmentView = null;
             }
-            if (parentLayout != null) {
-                if (actionBarLayer != null) {
-                    actionBarLayer.onDestroy();
+            if (actionBar != null) {
+                ViewGroup parent = (ViewGroup) actionBar.getParent();
+                if (parent != null) {
+                    try {
+                        parent.removeView(actionBar);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
                 }
-                actionBarLayer = parentLayout.getInternalActionBar().createLayer();
-                actionBarLayer.parentFragment = this;
-                actionBarLayer.setBackgroundResource(R.color.header);
-                actionBarLayer.setItemsBackground(R.drawable.bar_selector);
+            }
+            if (parentLayout != null) {
+                actionBar = new ActionBar(parentLayout.getContext());
+                actionBar.parentFragment = this;
+                actionBar.setBackgroundResource(R.color.header);
+                actionBar.setItemsBackground(R.drawable.bar_selector);
             }
         }
     }
@@ -99,8 +107,8 @@ public boolean onFragmentCreate() {
     public void onFragmentDestroy() {
         ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
         isFinished = true;
-        if (actionBarLayer != null) {
-            actionBarLayer.setEnabled(false);
+        if (actionBar != null) {
+            actionBar.setEnabled(false);
         }
     }
 
@@ -109,9 +117,9 @@ public void onResume() {
     }
 
     public void onPause() {
-        if (actionBarLayer != null) {
-            actionBarLayer.onPause();
-            actionBarLayer.closeSearchField();
+        if (actionBar != null) {
+            actionBar.onPause();
+            actionBar.closeSearchField();
         }
         try {
             if (visibleDialog != null && visibleDialog.isShowing()) {
@@ -168,18 +176,6 @@ public void startActivityForResult(final Intent intent, final int requestCode) {
         }
     }
 
-    public void showActionBar() {
-        if (parentLayout != null) {
-            parentLayout.showActionBar();
-        }
-    }
-
-    public void hideActionBar() {
-        if (parentLayout != null) {
-            parentLayout.hideActionBar();
-        }
-    }
-
     public void onBeginSlide() {
         try {
             if (visibleDialog != null && visibleDialog.isShowing()) {
@@ -189,8 +185,8 @@ public void onBeginSlide() {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
-        if (actionBarLayer != null) {
-            actionBarLayer.onPause();
+        if (actionBar != null) {
+            actionBar.onPause();
         }
     }
 
@@ -202,6 +198,10 @@ public void onLowMemory() {
 
     }
 
+    public boolean needAddActionBar() {
+        return true;
+    }
+
     protected void showAlertDialog(AlertDialog.Builder builder) {
         if (parentLayout == null || parentLayout.checkTransitionAnimation() || parentLayout.animationInProgress || parentLayout.startedTracking) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
new file mode 100644
index 000000000..e14b10258
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -0,0 +1,474 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.ActionBar;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowInsets;
+import android.view.animation.DecelerateInterpolator;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+
+public class DrawerLayoutContainer extends FrameLayout {
+
+    private static final int MIN_DRAWER_MARGIN = 64;
+
+    private View drawerLayout;
+    private ActionBarLayout parentActionBarLayout;
+
+    private boolean maybeStartTracking = false;
+    private boolean startedTracking = false;
+    private int startedTrackingX;
+    private int startedTrackingY;
+    private int startedTrackingPointerId;
+    private VelocityTracker velocityTracker = null;
+    private boolean beginTrackingSent;
+    private AnimatorSetProxy currentAnimation = null;
+
+    private Paint scrimPaint = new Paint();
+
+    private Object lastInsets;
+    private boolean inLayout;
+    private int minDrawerMargin;
+    private float scrimOpacity;
+    private Drawable shadowLeft;
+    private boolean allowOpenDrawer;
+
+    private int drawerPosition = 0;
+    private boolean drawerOpened = false;
+
+    public DrawerLayoutContainer(Context context) {
+        super(context);
+
+        minDrawerMargin = (int) (MIN_DRAWER_MARGIN * AndroidUtilities.density + 0.5f);
+        setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
+        setFocusableInTouchMode(true);
+
+        if (Build.VERSION.SDK_INT >= 21) {
+            setFitsSystemWindows(true);
+            configureApplyInsets(this);
+        }
+
+        shadowLeft = getResources().getDrawable(R.drawable.menu_shadow);
+    }
+
+    private class InsetsListener implements View.OnApplyWindowInsetsListener {
+        @Override
+        public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
+            final DrawerLayoutContainer drawerLayout = (DrawerLayoutContainer) v;
+            drawerLayout.setChildInsets(insets, insets.getSystemWindowInsetTop() > 0);
+            return insets.consumeSystemWindowInsets();
+        }
+    }
+
+    private void configureApplyInsets(View drawerLayout) {
+        if (Build.VERSION.SDK_INT >= 21) {
+            drawerLayout.setOnApplyWindowInsetsListener(new InsetsListener());
+            drawerLayout.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+        }
+    }
+
+    private void dispatchChildInsets(View child, Object insets, int drawerGravity) {
+        WindowInsets wi = (WindowInsets) insets;
+        if (drawerGravity == Gravity.LEFT) {
+            wi = wi.replaceSystemWindowInsets(wi.getSystemWindowInsetLeft(), wi.getSystemWindowInsetTop(), 0, wi.getSystemWindowInsetBottom());
+        } else if (drawerGravity == Gravity.RIGHT) {
+            wi = wi.replaceSystemWindowInsets(0, wi.getSystemWindowInsetTop(), wi.getSystemWindowInsetRight(), wi.getSystemWindowInsetBottom());
+        }
+        child.dispatchApplyWindowInsets(wi);
+    }
+
+    private void applyMarginInsets(MarginLayoutParams lp, Object insets, int drawerGravity, boolean topOnly) {
+        WindowInsets wi = (WindowInsets) insets;
+        if (drawerGravity == Gravity.LEFT) {
+            wi = wi.replaceSystemWindowInsets(wi.getSystemWindowInsetLeft(), wi.getSystemWindowInsetTop(), 0, wi.getSystemWindowInsetBottom());
+        } else if (drawerGravity == Gravity.RIGHT) {
+            wi = wi.replaceSystemWindowInsets(0, wi.getSystemWindowInsetTop(), wi.getSystemWindowInsetRight(), wi.getSystemWindowInsetBottom());
+        }
+        lp.leftMargin = wi.getSystemWindowInsetLeft();
+        lp.topMargin = topOnly ? 0 : wi.getSystemWindowInsetTop();
+        lp.rightMargin = wi.getSystemWindowInsetRight();
+        lp.bottomMargin = wi.getSystemWindowInsetBottom();
+    }
+
+    private int getTopInset(Object insets) {
+        if (Build.VERSION.SDK_INT >= 21) {
+            return insets != null ? ((WindowInsets) insets).getSystemWindowInsetTop() : 0;
+        }
+        return 0;
+    }
+
+    private void setChildInsets(Object insets, boolean draw) {
+        lastInsets = insets;
+        setWillNotDraw(!draw && getBackground() == null);
+        requestLayout();
+    }
+
+    public void setDrawerLayout(View layout) {
+        drawerLayout = layout;
+        addView(drawerLayout);
+        if (Build.VERSION.SDK_INT >= 21) {
+            drawerLayout.setFitsSystemWindows(true);
+        }
+    }
+
+    public void moveDrawerByX(int dx) {
+        setDrawerPosition(drawerPosition + dx);
+    }
+
+    public void setDrawerPosition(int value) {
+        drawerPosition = value;
+        if (drawerPosition > drawerLayout.getMeasuredWidth()) {
+            drawerPosition = drawerLayout.getMeasuredWidth();
+        } else if (drawerPosition < 0) {
+            drawerPosition = 0;
+        }
+        requestLayout();
+
+        final int newVisibility = drawerPosition > 0 ? VISIBLE : INVISIBLE;
+        if (drawerLayout.getVisibility() != newVisibility) {
+            drawerLayout.setVisibility(newVisibility);
+        }
+        setScrimOpacity((float)drawerPosition / (float)drawerLayout.getMeasuredWidth());
+    }
+
+    public int getDrawerPosition() {
+        return drawerPosition;
+    }
+
+    public void cancelCurrentAnimation() {
+        if (currentAnimation != null) {
+            currentAnimation.cancel();
+            currentAnimation = null;
+        }
+    }
+
+    public void openDrawer(boolean fast) {
+        if (AndroidUtilities.isTablet() && parentActionBarLayout != null && parentActionBarLayout.parentActivity != null) {
+            AndroidUtilities.hideKeyboard(parentActionBarLayout.parentActivity.getCurrentFocus());
+        }
+        cancelCurrentAnimation();
+        AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+        animatorSet.playTogether(
+                ObjectAnimatorProxy.ofInt(this, "drawerPosition", drawerLayout.getMeasuredWidth())
+        );
+        animatorSet.setInterpolator(new DecelerateInterpolator());
+        if (fast) {
+            animatorSet.setDuration(Math.max((int) (200.0f / drawerLayout.getMeasuredWidth() * (drawerLayout.getMeasuredWidth() - drawerPosition)), 50));
+        } else {
+            animatorSet.setDuration(300);
+        }
+        animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+            @Override
+            public void onAnimationEnd(Object animator) {
+                onDrawerAnimationEnd(true);
+            }
+
+            @Override
+            public void onAnimationCancel(Object animator) {
+                onDrawerAnimationEnd(true);
+            }
+        });
+        animatorSet.start();
+        currentAnimation = animatorSet;
+    }
+
+    public void closeDrawer(boolean fast) {
+        cancelCurrentAnimation();
+        AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+        animatorSet.playTogether(
+                ObjectAnimatorProxy.ofInt(this, "drawerPosition", 0)
+        );
+        animatorSet.setInterpolator(new DecelerateInterpolator());
+        if (fast) {
+            animatorSet.setDuration(Math.max((int) (200.0f / drawerLayout.getMeasuredWidth() * drawerPosition), 50));
+        } else {
+            animatorSet.setDuration(300);
+        }
+        animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+            @Override
+            public void onAnimationEnd(Object animator) {
+                onDrawerAnimationEnd(false);
+            }
+
+            @Override
+            public void onAnimationCancel(Object animator) {
+                onDrawerAnimationEnd(false);
+            }
+        });
+        animatorSet.start();
+    }
+
+    private void onDrawerAnimationEnd(boolean opened) {
+        startedTracking = false;
+        currentAnimation = null;
+        drawerOpened = opened;
+        if (!opened) {
+            if (drawerLayout instanceof ListView) {
+                ((ListView)drawerLayout).setSelectionFromTop(0, 0);
+            }
+        }
+    }
+
+    private void setScrimOpacity(float value) {
+        scrimOpacity = value;
+        invalidate();
+    }
+
+    private float getScrimOpacity() {
+        return scrimOpacity;
+    }
+
+    public View getDrawerLayout() {
+        return drawerLayout;
+    }
+
+    public void setParentActionBarLayout(ActionBarLayout layout) {
+        parentActionBarLayout = layout;
+    }
+
+    public void setAllowOpenDrawer(boolean value) {
+        allowOpenDrawer = value;
+        if (!allowOpenDrawer && drawerPosition != 0) {
+            setDrawerPosition(0);
+            onDrawerAnimationEnd(false);
+        }
+    }
+
+    private void prepareForDrawerOpen(MotionEvent ev) {
+        maybeStartTracking = false;
+        startedTracking = true;
+        if (ev != null) {
+            startedTrackingX = (int) ev.getX();
+        }
+        beginTrackingSent = false;
+    }
+
+    public boolean isDrawerOpened() {
+        return drawerOpened;
+    }
+
+    public boolean onTouchEvent(MotionEvent ev) {
+        if (!parentActionBarLayout.checkTransitionAnimation()) {
+            if (drawerOpened && ev != null && ev.getX() > drawerPosition && !startedTracking) {
+                if (ev.getAction() == MotionEvent.ACTION_UP) {
+                    closeDrawer(false);
+                }
+                return true;
+            }
+            if (allowOpenDrawer && parentActionBarLayout.fragmentsStack.size() == 1) {
+                if (ev != null && (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getAction() == MotionEvent.ACTION_MOVE) && !startedTracking && !maybeStartTracking) {
+                    startedTrackingPointerId = ev.getPointerId(0);
+                    maybeStartTracking = true;
+                    startedTrackingX = (int) ev.getX();
+                    startedTrackingY = (int) ev.getY();
+                    cancelCurrentAnimation();
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                } else if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {
+                    if (velocityTracker == null) {
+                        velocityTracker = VelocityTracker.obtain();
+                    }
+                    int dx = (int) (ev.getX() - startedTrackingX);
+                    int dy = Math.abs((int) ev.getY() - startedTrackingY);
+                    velocityTracker.addMovement(ev);
+                    if (maybeStartTracking && !startedTracking && Math.abs(dx) / 3 > Math.abs(dy) && (dx < 0 || dx > 0 && dx > AndroidUtilities.dp(10))) {
+                        prepareForDrawerOpen(ev);
+                        startedTrackingX = (int) ev.getX();
+                    } else if (startedTracking) {
+                        if (!beginTrackingSent) {
+                            if (((Activity)getContext()).getCurrentFocus() != null) {
+                                AndroidUtilities.hideKeyboard(((Activity)getContext()).getCurrentFocus());
+                            }
+                            beginTrackingSent = true;
+                        }
+                        moveDrawerByX(dx);
+                        startedTrackingX = (int) ev.getX();
+                    }
+                } else if (ev == null || ev != null && ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {
+                    if (velocityTracker == null) {
+                        velocityTracker = VelocityTracker.obtain();
+                    }
+                    velocityTracker.computeCurrentVelocity(1000);
+                    if (!startedTracking) {
+                        float velX = velocityTracker.getXVelocity();
+                        float velY = velocityTracker.getYVelocity();
+                        if (Math.abs(velX) >= 1500 && Math.abs(velX) > Math.abs(velY)) {
+                            prepareForDrawerOpen(ev);
+                            if (!beginTrackingSent) {
+                                if (((Activity)getContext()).getCurrentFocus() != null) {
+                                    AndroidUtilities.hideKeyboard(((Activity)getContext()).getCurrentFocus());
+                                }
+                                beginTrackingSent = true;
+                            }
+                        }
+                    }
+                    if (startedTracking || drawerPosition != 0 && drawerPosition != drawerLayout.getMeasuredWidth()) {
+                        float velX = velocityTracker.getXVelocity();
+                        float velY = velocityTracker.getYVelocity();
+                        boolean backAnimation = drawerPosition < drawerLayout.getMeasuredWidth() / 2.0f && (velX < 1500 || Math.abs(velX) < Math.abs(velY)) || velX < 0 && Math.abs(velX) >= 1500;
+                        if (!backAnimation) {
+                            openDrawer(!drawerOpened && Math.abs(velX) >= 1500);
+                        } else {
+                            closeDrawer(drawerOpened && Math.abs(velX) >= 1500);
+                        }
+                        startedTracking = false;
+                    } else {
+                        maybeStartTracking = false;
+                        startedTracking = false;
+                    }
+                    if (velocityTracker != null) {
+                        velocityTracker.recycle();
+                        velocityTracker = null;
+                    }
+                }
+            }
+            return startedTracking;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        return parentActionBarLayout.checkTransitionAnimation() || onTouchEvent(ev);
+    }
+
+    @Override
+    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        onTouchEvent(null);
+        super.requestDisallowInterceptTouchEvent(disallowIntercept);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+        inLayout = true;
+        final int width = r - l;
+        final int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+
+            if (child.getVisibility() == GONE) {
+                continue;
+            }
+
+            final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+
+            if (drawerLayout != child) {
+                child.layout(lp.leftMargin, lp.topMargin, lp.leftMargin + child.getMeasuredWidth(), lp.topMargin + child.getMeasuredHeight());
+            } else {
+                child.layout(-child.getMeasuredWidth() + drawerPosition, lp.topMargin, drawerPosition, lp.topMargin + child.getMeasuredHeight());
+            }
+        }
+        inLayout = false;
+    }
+
+    @Override
+    public void requestLayout() {
+        if (!inLayout) {
+            super.requestLayout();
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+        setMeasuredDimension(widthSize, heightSize);
+
+        final boolean applyInsets = lastInsets != null && Build.VERSION.SDK_INT >= 21;
+
+        final int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+
+            if (child.getVisibility() == GONE) {
+                continue;
+            }
+
+            final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+
+            if (applyInsets) {
+                if (child.getFitsSystemWindows()) {
+                    dispatchChildInsets(child, lastInsets, lp.gravity);
+                } else {
+                    applyMarginInsets(lp, lastInsets, lp.gravity, Build.VERSION.SDK_INT >= 21);
+                }
+            }
+
+            if (drawerLayout != child) {
+                final int contentWidthSpec = MeasureSpec.makeMeasureSpec(widthSize - lp.leftMargin - lp.rightMargin, MeasureSpec.EXACTLY);
+                final int contentHeightSpec = MeasureSpec.makeMeasureSpec(heightSize - lp.topMargin - lp.bottomMargin, MeasureSpec.EXACTLY);
+                child.measure(contentWidthSpec, contentHeightSpec);
+            } else {
+                child.setPadding(0, 0, 0, 0);
+                final int drawerWidthSpec = getChildMeasureSpec(widthMeasureSpec, minDrawerMargin + lp.leftMargin + lp.rightMargin, lp.width);
+                final int drawerHeightSpec = getChildMeasureSpec(heightMeasureSpec, lp.topMargin + lp.bottomMargin, lp.height);
+                child.measure(drawerWidthSpec, drawerHeightSpec);
+            }
+        }
+    }
+
+    @Override
+    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+        final int height = getHeight();
+        final boolean drawingContent = child != drawerLayout;
+        int clipLeft = 0, clipRight = getWidth();
+
+        final int restoreCount = canvas.save();
+        if (drawingContent) {
+            final int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                final View v = getChildAt(i);
+                if (v == child || v.getVisibility() != VISIBLE || v != drawerLayout || v.getHeight() < height) {
+                    continue;
+                }
+
+                final int vright = v.getRight();
+                if (vright > clipLeft) {
+                    clipLeft = vright;
+                }
+            }
+            canvas.clipRect(clipLeft, 0, clipRight, getHeight());
+        }
+        final boolean result = super.drawChild(canvas, child, drawingTime);
+        canvas.restoreToCount(restoreCount);
+
+        if (scrimOpacity > 0 && drawingContent) {
+            scrimPaint.setColor((int) (((0x99000000 & 0xff000000) >>> 24) * scrimOpacity) << 24);
+            canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
+        } else if (shadowLeft != null) {
+            final float alpha = Math.max(0, Math.min((float) drawerPosition / AndroidUtilities.dp(20), 1.0f));
+            if (alpha != 0) {
+                shadowLeft.setBounds(drawerPosition, child.getTop(), drawerPosition + shadowLeft.getIntrinsicWidth(), child.getBottom());
+                shadowLeft.setAlpha((int) (0xff * alpha));
+                shadowLeft.draw(canvas);
+            }
+        }
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java
new file mode 100644
index 000000000..46f601702
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java
@@ -0,0 +1,116 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.ActionBar;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.view.animation.DecelerateInterpolator;
+
+import org.telegram.android.AndroidUtilities;
+
+public class MenuDrawable extends Drawable {
+
+    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private boolean reverseAngle = false;
+    private long lastFrameTime;
+    private boolean animationInProgress;
+    private float finalRotation;
+    private float currentRotation;
+    private int currentAnimationTime;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator();
+
+    public MenuDrawable() {
+        super();
+        paint.setColor(0xffffffff);
+        paint.setStrokeWidth(AndroidUtilities.dp(2));
+    }
+
+    public void setRotation(float rotation, boolean animated) {
+        lastFrameTime = 0;
+        if (currentRotation == 1) {
+            reverseAngle = true;
+        } else if (currentRotation == 0) {
+            reverseAngle = false;
+        }
+        lastFrameTime = 0;
+        if (animated) {
+            if (currentRotation < rotation) {
+                currentAnimationTime = (int) (currentRotation * 300);
+            } else {
+                currentAnimationTime = (int) ((1.0f - currentRotation) * 300);
+            }
+            lastFrameTime = System.currentTimeMillis();
+            finalRotation = rotation;
+        } else {
+            finalRotation = currentRotation = rotation;
+        }
+        invalidateSelf();
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        if (currentRotation != finalRotation) {
+            if (lastFrameTime != 0) {
+                long dt = System.currentTimeMillis() - lastFrameTime;
+
+                currentAnimationTime += dt;
+                if (currentAnimationTime >= 300) {
+                    currentRotation = finalRotation;
+                } else {
+                    if (currentRotation < finalRotation) {
+                        currentRotation = interpolator.getInterpolation(currentAnimationTime / 300.0f) * finalRotation;
+                    } else {
+                        currentRotation = 1.0f - interpolator.getInterpolation(currentAnimationTime / 300.0f);
+                    }
+                }
+            }
+            lastFrameTime = System.currentTimeMillis();
+            invalidateSelf();
+        }
+
+        canvas.save();
+        canvas.translate(getIntrinsicWidth() / 2, getIntrinsicHeight() / 2);
+        canvas.rotate(currentRotation * (reverseAngle ? -180 : 180));
+        canvas.drawLine(-AndroidUtilities.dp(9), 0, AndroidUtilities.dp(9) - AndroidUtilities.dp(1) * currentRotation, 0, paint);
+        float endYDiff = AndroidUtilities.dp(5) * (1 - Math.abs(currentRotation)) - AndroidUtilities.dp(0.5f) * Math.abs(currentRotation);
+        float endXDiff = AndroidUtilities.dp(9) - AndroidUtilities.dp(0.5f) *  Math.abs(currentRotation);
+        float startYDiff = AndroidUtilities.dp(5) + AndroidUtilities.dp(3.5f) * Math.abs(currentRotation);
+        float startXDiff = -AndroidUtilities.dp(9) + AndroidUtilities.dp(8.5f) * Math.abs(currentRotation);
+        canvas.drawLine(startXDiff, -startYDiff, endXDiff, -endYDiff, paint);
+        canvas.drawLine(startXDiff, startYDiff, endXDiff, endYDiff, paint);
+        canvas.restore();
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return AndroidUtilities.dp(24);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return AndroidUtilities.dp(24);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
index 53da9988a..17903b397 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
@@ -41,7 +41,7 @@ public void queryServerSearch(final String query) {
         reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (currentReqId == lastReqId) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
index 184e06a1e..131961344 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
@@ -15,12 +15,6 @@
 
 public class BaseFragmentAdapter extends BaseAdapter {
 
-    public void onFragmentCreate() {
-    }
-
-    public void onFragmentDestroy() {
-    }
-
     @Override
     public int getCount() {
         return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java
new file mode 100644
index 000000000..3b6023c7a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java
@@ -0,0 +1,152 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.util.SparseArray;
+import android.view.View;
+import android.view.ViewGroup;
+
+public abstract class BaseSectionsAdapter extends BaseFragmentAdapter {
+
+    private SparseArray<Integer> sectionPositionCache;
+    private SparseArray<Integer> sectionCache;
+    private SparseArray<Integer> sectionCountCache;
+    private int sectionCount;
+    private int count;
+
+    private void cleanupCache() {
+        sectionCache = new SparseArray<Integer>();
+        sectionPositionCache = new SparseArray<Integer>();
+        sectionCountCache = new SparseArray<Integer>();
+        count = -1;
+        sectionCount = -1;
+    }
+
+    public BaseSectionsAdapter() {
+        super();
+        cleanupCache();
+    }
+
+    @Override
+    public void notifyDataSetChanged() {
+        cleanupCache();
+        super.notifyDataSetChanged();
+    }
+
+    @Override
+    public void notifyDataSetInvalidated() {
+        cleanupCache();
+        super.notifyDataSetInvalidated();
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return false;
+    }
+
+    @Override
+    public boolean isEnabled(int position) {
+        return isRowEnabled(getSectionForPosition(position), getPositionInSectionForPosition(position));
+    }
+
+    @Override
+    public final long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public final int getCount() {
+        if (count >= 0) {
+            return count;
+        }
+        count = 0;
+        for (int i = 0; i < internalGetSectionCount(); i++) {
+            count += internalGetCountForSection(i);
+        }
+        return count;
+    }
+
+    @Override
+    public final Object getItem(int position) {
+        return getItem(getSectionForPosition(position), getPositionInSectionForPosition(position));
+    }
+
+    @Override
+    public final int getItemViewType(int position) {
+        return getItemViewType(getSectionForPosition(position), getPositionInSectionForPosition(position));
+    }
+
+    @Override
+    public final View getView(int position, View convertView, ViewGroup parent) {
+        return getItemView(getSectionForPosition(position), getPositionInSectionForPosition(position), convertView, parent);
+    }
+
+    private int internalGetCountForSection(int section) {
+        Integer cachedSectionCount = sectionCountCache.get(section);
+        if (cachedSectionCount != null) {
+            return cachedSectionCount;
+        }
+        int sectionCount = getCountForSection(section);
+        sectionCountCache.put(section, sectionCount);
+        return sectionCount;
+    }
+
+    private int internalGetSectionCount() {
+        if (sectionCount >= 0) {
+            return sectionCount;
+        }
+        sectionCount = getSectionCount();
+        return sectionCount;
+    }
+
+    public final int getSectionForPosition(int position) {
+        Integer cachedSection = sectionCache.get(position);
+        if (cachedSection != null) {
+            return cachedSection;
+        }
+        int sectionStart = 0;
+        for (int i = 0; i < internalGetSectionCount(); i++) {
+            int sectionCount = internalGetCountForSection(i);
+            int sectionEnd = sectionStart + sectionCount;
+            if (position >= sectionStart && position < sectionEnd) {
+                sectionCache.put(position, i);
+                return i;
+            }
+            sectionStart = sectionEnd;
+        }
+        return -1;
+    }
+
+    public int getPositionInSectionForPosition(int position) {
+        Integer cachedPosition = sectionPositionCache.get(position);
+        if (cachedPosition != null) {
+            return cachedPosition;
+        }
+        int sectionStart = 0;
+        for (int i = 0; i < internalGetSectionCount(); i++) {
+            int sectionCount = internalGetCountForSection(i);
+            int sectionEnd = sectionStart + sectionCount;
+            if (position >= sectionStart && position < sectionEnd) {
+                int positionInSection = position - sectionStart;
+                sectionPositionCache.put(position, positionInSection);
+                return positionInSection;
+            }
+            sectionStart = sectionEnd;
+        }
+        return -1;
+    }
+
+    public abstract int getSectionCount();
+    public abstract int getCountForSection(int section);
+    public abstract boolean isRowEnabled(int section, int row);
+    public abstract int getItemViewType(int section, int position);
+    public abstract Object getItem(int section, int position);
+    public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
+    public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java
deleted file mode 100644
index 1bc0b293f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivityAdapter.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.SectionedBaseAdapter;
-import org.telegram.ui.Views.SettingsSectionLayout;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class ContactsActivityAdapter extends SectionedBaseAdapter {
-    private Context mContext;
-    private boolean onlyUsers;
-    private boolean usersAsSections;
-    private HashMap<Integer, TLRPC.User> ignoreUsers;
-
-    public ContactsActivityAdapter(Context context, boolean arg1, boolean arg2, HashMap<Integer, TLRPC.User> arg3) {
-        mContext = context;
-        onlyUsers = arg1;
-        usersAsSections = arg2;
-        ignoreUsers = arg3;
-    }
-
-    @Override
-    public Object getItem(int section, int position) {
-        return null;
-    }
-
-    @Override
-    public long getItemId(int section, int position) {
-        return 0;
-    }
-
-    @Override
-    public int getSectionCount() {
-        int count = 0;
-        if (usersAsSections) {
-            count += ContactsController.getInstance().sortedUsersSectionsArray.size();
-        } else {
-            count++;
-        }
-        if (!onlyUsers) {
-            count += ContactsController.getInstance().sortedContactsSectionsArray.size();
-        }
-        return count;
-    }
-
-    @Override
-    public int getCountForSection(int section) {
-        if (usersAsSections) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                return arr.size();
-            }
-        } else {
-            if (section == 0) {
-                return ContactsController.getInstance().contacts.size() + 1;
-            }
-        }
-        ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
-        return arr.size();
-    }
-
-    @Override
-    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-
-        TLRPC.User user = null;
-        int count = 0;
-        if (usersAsSections) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                user = MessagesController.getInstance().getUser(arr.get(position).user_id);
-                count = arr.size();
-            }
-        } else {
-            if (section == 0) {
-                if (position == 0) {
-                    if (convertView == null) {
-                        LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                        convertView = li.inflate(R.layout.contacts_invite_row_layout, parent, false);
-                        TextView textView = (TextView)convertView.findViewById(R.id.messages_list_row_name);
-                        textView.setText(LocaleController.getString("InviteFriends", R.string.InviteFriends));
-                    }
-                    View divider = convertView.findViewById(R.id.settings_row_divider);
-                    if (ContactsController.getInstance().contacts.isEmpty()) {
-                        divider.setVisibility(View.INVISIBLE);
-                    } else {
-                        divider.setVisibility(View.VISIBLE);
-                    }
-                    return convertView;
-                }
-                user = MessagesController.getInstance().getUser(ContactsController.getInstance().contacts.get(position - 1).user_id);
-                count = ContactsController.getInstance().contacts.size();
-            }
-        }
-        if (user != null) {
-            if (convertView == null) {
-                convertView = new ChatOrUserCell(mContext);
-                ((ChatOrUserCell)convertView).usePadding = false;
-            }
-
-            ((ChatOrUserCell)convertView).setData(user, null, null, null, null);
-
-            if (ignoreUsers != null) {
-                if (ignoreUsers.containsKey(user.id)) {
-                    ((ChatOrUserCell)convertView).drawAlpha = 0.5f;
-                } else {
-                    ((ChatOrUserCell)convertView).drawAlpha = 1.0f;
-                }
-            }
-
-            ((ChatOrUserCell) convertView).useSeparator = position != count - 1;
-
-            return convertView;
-        }
-
-        TextView textView;
-        if (convertView == null) {
-            LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            convertView = li.inflate(R.layout.settings_row_button_layout, parent, false);
-            textView = (TextView)convertView.findViewById(R.id.settings_row_text);
-        } else {
-            textView = (TextView)convertView.findViewById(R.id.settings_row_text);
-        }
-
-        View divider = convertView.findViewById(R.id.settings_row_divider);
-        ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
-        ContactsController.Contact contact = arr.get(position);
-        if (divider != null) {
-            if (position == arr.size() - 1) {
-                divider.setVisibility(View.INVISIBLE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
-        }
-        if (contact.first_name != null && contact.last_name != null) {
-            textView.setText(contact.first_name + " " + contact.last_name);
-        } else if (contact.first_name != null && contact.last_name == null) {
-            textView.setText(contact.first_name);
-        } else {
-            textView.setText(contact.last_name);
-        }
-        return convertView;
-    }
-
-    @Override
-    public int getItemViewType(int section, int position) {
-        if (usersAsSections) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                return 0;
-            }
-        } else if (section == 0) {
-            if (position == 0) {
-                return 2;
-            }
-            return 0;
-        }
-        return 1;
-    }
-
-    @Override
-    public int getItemViewTypeCount() {
-        return 3;
-    }
-
-    @Override
-    public int getSectionHeaderViewType(int section) {
-        if (usersAsSections) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                return 1;
-            }
-        } else if (section == 0) {
-            return 0;
-        }
-        return 1;
-    }
-
-    @Override
-    public int getSectionHeaderViewTypeCount() {
-        return 2;
-    }
-
-    @Override
-    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-        if (usersAsSections) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                if (convertView == null) {
-                    convertView = new SettingsSectionLayout(mContext);
-                    convertView.setBackgroundColor(0xffffffff);
-                }
-                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                return convertView;
-            }
-        } else {
-            if (section == 0) {
-                if (convertView == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    convertView = li.inflate(R.layout.empty_layout, parent, false);
-                }
-                return convertView;
-            }
-        }
-
-        if (convertView == null) {
-            convertView = new SettingsSectionLayout(mContext);
-            convertView.setBackgroundColor(0xffffffff);
-        }
-        ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
-        return convertView;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
new file mode 100644
index 000000000..ed57814ce
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -0,0 +1,263 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.DividerCell;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LetterSectionCell;
+import org.telegram.ui.Cells.TextCell;
+import org.telegram.ui.Cells.UserCell;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class ContactsAdapter extends BaseSectionsAdapter {
+
+    private Context mContext;
+    private boolean onlyUsers;
+    private boolean needPhonebook;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private HashMap<Integer, ?> checkedMap;
+
+    public ContactsAdapter(Context context, boolean arg1, boolean arg2, HashMap<Integer, TLRPC.User> arg3) {
+        mContext = context;
+        onlyUsers = arg1;
+        needPhonebook = arg2;
+        ignoreUsers = arg3;
+    }
+
+    public void setCheckedMap(HashMap<Integer, ?> map) {
+        checkedMap = map;
+    }
+
+    @Override
+    public Object getItem(int section, int position) {
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                return MessagesController.getInstance().getUser(arr.get(position).user_id);
+            }
+            return null;
+        } else {
+            if (section == 0) {
+                return null;
+            } else {
+                if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                    ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                    if (position < arr.size()) {
+                        return MessagesController.getInstance().getUser(arr.get(position).user_id);
+                    }
+                    return null;
+                }
+            }
+        }
+        if (needPhonebook) {
+            return ContactsController.getInstance().phoneBookContacts.get(position);
+        }
+        return null;
+    }
+
+    @Override
+    public boolean isRowEnabled(int section, int row) {
+        if (onlyUsers) {
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            return row < arr.size();
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    if (row == 1) {
+                        return false;
+                    }
+                } else {
+                    if (row == 3) {
+                        return false;
+                    }
+                }
+                return true;
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                return row < arr.size();
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public int getSectionCount() {
+        int count = ContactsController.getInstance().sortedUsersSectionsArray.size();
+        if (!onlyUsers) {
+            count++;
+        }
+        if (needPhonebook) {
+            count++;
+        }
+        return count;
+    }
+
+    @Override
+    public int getCountForSection(int section) {
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                int count = arr.size();
+                if (section != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
+                    count++;
+                }
+                return count;
+            }
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    return 2;
+                } else {
+                    return 4;
+                }
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                int count = arr.size();
+                if (section - 1 != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
+                    count++;
+                }
+                return count;
+            }
+        }
+        if (needPhonebook) {
+            return ContactsController.getInstance().phoneBookContacts.size();
+        }
+        return 0;
+    }
+
+    @Override
+    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+        if (convertView == null) {
+            convertView = new LetterSectionCell(mContext);
+        }
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ((LetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            } else {
+                ((LetterSectionCell) convertView).setLetter("");
+            }
+        } else {
+            if (section == 0) {
+                ((LetterSectionCell) convertView).setLetter("");
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ((LetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+            } else {
+                ((LetterSectionCell) convertView).setLetter("");
+            }
+        }
+        return convertView;
+    }
+
+    @Override
+    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+        int type = getItemViewType(section, position);
+        if (type == 4) {
+            if (convertView == null) {
+                convertView = new DividerCell(mContext);
+                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 24 : 72), 0, AndroidUtilities.dp(LocaleController.isRTL ? 72 : 24), 0);
+            }
+        } else if (type == 3) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+                ((GreySectionCell) convertView).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
+            }
+        } else if (type == 2) {
+            if (convertView == null) {
+                convertView = new TextCell(mContext);
+            }
+            TextCell actionCell = (TextCell) convertView;
+            if (needPhonebook) {
+                actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
+            } else {
+                if (position == 0) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_newgroup);
+                } else if (position == 1) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
+                } else if (position == 2) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), R.drawable.menu_broadcast);
+                }
+            }
+        } else if (type == 1) {
+            if (convertView == null) {
+                convertView = new TextCell(mContext);
+            }
+            ContactsController.Contact contact = ContactsController.getInstance().phoneBookContacts.get(position);
+            if (contact.first_name != null && contact.last_name != null) {
+                ((TextCell) convertView).setText(contact.first_name + " " + contact.last_name);
+            } else if (contact.first_name != null && contact.last_name == null) {
+                ((TextCell) convertView).setText(contact.first_name);
+            } else {
+                ((TextCell) convertView).setText(contact.last_name);
+            }
+        } else if (type == 0) {
+            if (convertView == null) {
+                convertView = new UserCell(mContext, 58);
+                ((UserCell) convertView).setStatusColors(0xffa8a8a8, 0xff3b84c0);
+            }
+
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - (onlyUsers ? 0 : 1)));
+            TLRPC.User user = MessagesController.getInstance().getUser(arr.get(position).user_id);
+            ((UserCell)convertView).setData(user, null, null, 0);
+            if (checkedMap != null) {
+                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id));
+            }
+            if (ignoreUsers != null) {
+                if (ignoreUsers.containsKey(user.id)) {
+                    ViewProxy.setAlpha(convertView, 0.5f);
+                } else {
+                    ViewProxy.setAlpha(convertView, 1.0f);
+                }
+            }
+        }
+        return convertView;
+    }
+
+    @Override
+    public int getItemViewType(int section, int position) {
+        if (onlyUsers) {
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            return position < arr.size() ? 0 : 4;
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    if (position == 1) {
+                        return 3;
+                    }
+                } else {
+                    if (position == 3) {
+                        return 3;
+                    }
+                }
+                return 2;
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                return position < arr.size() ? 0 : 4;
+            }
+        }
+        return 1;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 5;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
similarity index 80%
rename from TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
index c0c16fc71..f2ae0178e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsActivitySearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
@@ -22,28 +22,39 @@
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.ProfileSearchCell;
+import org.telegram.ui.Cells.UserCell;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Timer;
 import java.util.TimerTask;
 
-public class ContactsActivitySearchAdapter extends BaseContactsSearchAdapter {
+public class ContactsSearchAdapter extends BaseContactsSearchAdapter {
     private Context mContext;
     private HashMap<Integer, TLRPC.User> ignoreUsers;
     private ArrayList<TLRPC.User> searchResult = new ArrayList<TLRPC.User>();
     private ArrayList<CharSequence> searchResultNames = new ArrayList<CharSequence>();
+    private HashMap<Integer, ?> checkedMap;
     private Timer searchTimer;
     private boolean allowUsernameSearch;
+    private boolean useUserCell;
 
-    public ContactsActivitySearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
+    public ContactsSearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
         mContext = context;
         ignoreUsers = arg1;
         allowUsernameSearch = usernameSearch;
     }
 
+    public void setCheckedMap(HashMap<Integer, ?> map) {
+        checkedMap = map;
+    }
+
+    public void setUseUserCell(boolean value) {
+        useUserCell = value;
+    }
+
     public void searchDialogs(final String query) {
         try {
             if (searchTimer != null) {
@@ -77,7 +88,7 @@ public void run() {
     }
 
     private void processSearch(final String query) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 if (allowUsernameSearch) {
@@ -130,7 +141,7 @@ public void run() {
     }
 
     private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 searchResult = users;
@@ -197,16 +208,18 @@ public boolean hasStableIds() {
     public View getView(int i, View view, ViewGroup viewGroup) {
         if (i == searchResult.size()) {
             if (view == null) {
-                view = new SettingsSectionLayout(mContext);
-                ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                view = new GreySectionCell(mContext);
+                ((GreySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
             }
         } else {
             if (view == null) {
-                view = new ChatOrUserCell(mContext);
-                ((ChatOrUserCell) view).usePadding = false;
+                if (useUserCell) {
+                    view = new UserCell(mContext, 1);
+                } else {
+                    view = new ProfileSearchCell(mContext);
+                }
             }
 
-            ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
             TLRPC.User user = getItem(i);
             if (user != null) {
                 CharSequence username = null;
@@ -221,20 +234,27 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     }
                 } else if (i > searchResult.size() && user.username != null) {
                     try {
-                        username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                        username = Html.fromHtml(String.format("<font color=\"#4d83b3\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
                     } catch (Exception e) {
                         username = user.username;
                         FileLog.e("tmessages", e);
                     }
                 }
 
-                ((ChatOrUserCell) view).setData(user, null, null, name, username);
-
-                if (ignoreUsers != null) {
-                    if (ignoreUsers.containsKey(user.id)) {
-                        ((ChatOrUserCell) view).drawAlpha = 0.5f;
-                    } else {
-                        ((ChatOrUserCell) view).drawAlpha = 1.0f;
+                if (useUserCell) {
+                    ((UserCell) view).setData(user, name, username, 0);
+                    if (checkedMap != null) {
+                        ((UserCell) view).setChecked(checkedMap.containsKey(user.id));
+                    }
+                } else {
+                    ((ProfileSearchCell) view).setData(user, null, null, name, username);
+                    ((ProfileSearchCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+                    if (ignoreUsers != null) {
+                        if (ignoreUsers.containsKey(user.id)) {
+                            ((ProfileSearchCell) view).drawAlpha = 0.5f;
+                        } else {
+                            ((ProfileSearchCell) view).drawAlpha = 1.0f;
+                        }
                     }
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
new file mode 100644
index 000000000..389d17b80
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
@@ -0,0 +1,165 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.FileLog;
+import org.telegram.ui.ApplicationLoader;
+import org.telegram.ui.Cells.DividerCell;
+import org.telegram.ui.Cells.LetterSectionCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+
+public class CountryAdapter extends BaseSectionsAdapter {
+
+    public static class Country {
+        public String name;
+        public String code;
+        public String shortname;
+    }
+
+    private Context mContext;
+    private HashMap<String, ArrayList<Country>> countries = new HashMap<String, ArrayList<Country>>();
+    private ArrayList<String> sortedCountries = new ArrayList<String>();
+
+    public CountryAdapter(Context context) {
+        mContext = context;
+
+        try {
+            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] args = line.split(";");
+                Country c = new Country();
+                c.name = args[2];
+                c.code = args[0];
+                c.shortname = args[1];
+                String n = c.name.substring(0, 1).toUpperCase();
+                ArrayList<Country> arr = countries.get(n);
+                if (arr == null) {
+                    arr = new ArrayList<Country>();
+                    countries.put(n, arr);
+                    sortedCountries.add(n);
+                }
+                arr.add(c);
+            }
+            reader.close();
+            stream.close();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        Collections.sort(sortedCountries, new Comparator<String>() {
+            @Override
+            public int compare(String lhs, String rhs) {
+                return lhs.compareTo(rhs);
+            }
+        });
+
+        for (ArrayList<Country> arr : countries.values()) {
+            Collections.sort(arr, new Comparator<Country>() {
+                @Override
+                public int compare(Country country, Country country2) {
+                    return country.name.compareTo(country2.name);
+                }
+            });
+        }
+    }
+
+    public HashMap<String, ArrayList<Country>> getCountries() {
+        return countries;
+    }
+
+    @Override
+    public Country getItem(int section, int position) {
+        if (section < 0 || section >= sortedCountries.size()) {
+            return null;
+        }
+        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
+        if (position < 0 || position >= arr.size()) {
+            return null;
+        }
+        return arr.get(position);
+    }
+
+    @Override
+    public boolean isRowEnabled(int section, int row) {
+        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
+        return row < arr.size();
+    }
+
+    @Override
+    public int getSectionCount() {
+        return sortedCountries.size();
+    }
+
+    @Override
+    public int getCountForSection(int section) {
+        int count = countries.get(sortedCountries.get(section)).size();
+        if (section != sortedCountries.size() - 1) {
+            count++;
+        }
+        return count;
+    }
+
+    @Override
+    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+        if (convertView == null) {
+            convertView = new LetterSectionCell(mContext);
+            ((LetterSectionCell) convertView).setCellHeight(AndroidUtilities.dp(48));
+        }
+        ((LetterSectionCell) convertView).setLetter(sortedCountries.get(section).toUpperCase());
+        return convertView;
+    }
+
+    @Override
+    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+        int type = getItemViewType(section, position);
+        if (type == 1) {
+            if (convertView == null) {
+                convertView = new DividerCell(mContext);
+                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 24 : 72), 0, AndroidUtilities.dp(LocaleController.isRTL ? 72 : 24), 0);
+            }
+        } else if (type == 0) {
+            if (convertView == null) {
+                convertView = new TextSettingsCell(mContext);
+                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16 : 54), 0, AndroidUtilities.dp(LocaleController.isRTL ? 54 : 16), 0);
+            }
+
+            ArrayList<Country> arr = countries.get(sortedCountries.get(section));
+            Country c = arr.get(position);
+            ((TextSettingsCell) convertView).setTextAndValue(c.name, "+" + c.code, false);
+        }
+        return convertView;
+    }
+
+    @Override
+    public int getItemViewType(int section, int position) {
+        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
+        return position < arr.size() ? 0 : 1;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 2;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
new file mode 100644
index 000000000..8414dd5bd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
@@ -0,0 +1,165 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.CountryAdapter.Country;
+import org.telegram.ui.Cells.TextSettingsCell;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class CountrySearchAdapter extends BaseFragmentAdapter {
+
+    private Context mContext;
+    private Timer searchTimer;
+    private ArrayList<CountryAdapter.Country> searchResult;
+    private HashMap<String, ArrayList<Country>> countries;
+
+    public CountrySearchAdapter(Context context, HashMap<String, ArrayList<Country>> countries) {
+        mContext = context;
+        this.countries = countries;
+    }
+
+    public void search(final String query) {
+        if (query == null) {
+            searchResult = null;
+        } else {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 100, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        Utilities.searchQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+
+                String q = query.trim().toLowerCase();
+                if (q.length() == 0) {
+                    updateSearchResults(new ArrayList<Country>());
+                    return;
+                }
+                long time = System.currentTimeMillis();
+                ArrayList<Country> resultArray = new ArrayList<Country>();
+
+                String n = query.substring(0, 1);
+                ArrayList<Country> arr = countries.get(n.toUpperCase());
+                if (arr != null) {
+                    for (Country c : arr) {
+                        if (c.name.toLowerCase().startsWith(query)) {
+                            resultArray.add(c);
+                        }
+                    }
+                }
+
+                updateSearchResults(resultArray);
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<Country> arrCounties) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = arrCounties;
+                notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled(int i) {
+        return true;
+    }
+
+    @Override
+    public int getCount() {
+        if (searchResult == null) {
+            return 0;
+        }
+        return searchResult.size();
+    }
+
+    @Override
+    public Country getItem(int i) {
+        if (i < 0 || i >= searchResult.size()) {
+            return null;
+        }
+        return searchResult.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        if (view == null) {
+            view = new TextSettingsCell(mContext);
+        }
+
+        Country c = searchResult.get(i);
+        ((TextSettingsCell) view).setTextAndValue(c.name, "+" + c.code, i != searchResult.size() - 1);
+
+        return view;
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 1;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return searchResult == null || searchResult.size() == 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
similarity index 90%
rename from TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivityAdapter.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 9533d38c1..b48dc5080 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivityAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -9,24 +9,23 @@
 package org.telegram.ui.Adapters;
 
 import android.content.Context;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.LoadingCell;
 
-public class MessagesActivityAdapter extends BaseFragmentAdapter {
+public class DialogsAdapter extends BaseFragmentAdapter {
 
     private Context mContext;
     private boolean serverOnly;
     private long openedDialogId;
 
-    public MessagesActivityAdapter(Context context, boolean onlyFromServer) {
+    public DialogsAdapter(Context context, boolean onlyFromServer) {
         mContext = context;
         serverOnly = onlyFromServer;
     }
@@ -92,8 +91,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         int type = getItemViewType(i);
         if (type == 1) {
             if (view == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.loading_more_layout, viewGroup, false);
+                view = new LoadingCell(mContext);
             }
         } else if (type == 0) {
             if (view == null) {
@@ -136,7 +134,7 @@ public int getViewTypeCount() {
     @Override
     public boolean isEmpty() {
         if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-            return false;
+            return true;
         }
         int count;
         if (serverOnly) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivitySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
similarity index 76%
rename from TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivitySearchAdapter.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 527b85a58..01ca05857 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MessagesActivitySearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -30,40 +30,54 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Cells.ChatOrUserCell;
 import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.ProfileSearchCell;
 
 import java.util.ArrayList;
 import java.util.Timer;
 import java.util.TimerTask;
 
-public class MessagesActivitySearchAdapter extends BaseContactsSearchAdapter {
+public class DialogsSearchAdapter extends BaseContactsSearchAdapter {
     private Context mContext;
     private Timer searchTimer;
     private ArrayList<TLObject> searchResult = new ArrayList<TLObject>();
     private ArrayList<CharSequence> searchResultNames = new ArrayList<CharSequence>();
     private ArrayList<MessageObject> searchResultMessages = new ArrayList<MessageObject>();
-    private String lastSearchTextDialogs;
-    private String lastSearchTextMessages;
-    private int currentSearchType;
+    private String lastSearchText;
     private long reqId = 0;
     private int lastReqId;
     private MessagesActivitySearchAdapterDelegate delegate;
+    private boolean needMessagesSearch;
+    private boolean messagesSearchEndReached;
+    private String lastMessagesSearchString;
 
     public static interface MessagesActivitySearchAdapterDelegate {
         public abstract void searchStateChanged(boolean searching);
     }
 
-    public MessagesActivitySearchAdapter(Context context) {
+    public DialogsSearchAdapter(Context context, boolean messagesSearch) {
         mContext = context;
+        needMessagesSearch = messagesSearch;
     }
 
     public void setDelegate(MessagesActivitySearchAdapterDelegate delegate) {
         this.delegate = delegate;
     }
 
+    public boolean isMessagesSearchEndReached() {
+        return messagesSearchEndReached;
+    }
+
+    public void loadMoreSearchMessages() {
+        searchMessagesInternal(lastMessagesSearchString);
+    }
+
     private void searchMessagesInternal(final String query) {
+        if (!needMessagesSearch) {
+            return;
+        }
         if (reqId != 0) {
             ConnectionsManager.getInstance().cancelRpc(reqId, true);
             reqId = 0;
@@ -71,16 +85,21 @@ private void searchMessagesInternal(final String query) {
         if (query == null || query.length() == 0) {
             searchResultMessages.clear();
             lastReqId = 0;
+            lastMessagesSearchString = null;
             notifyDataSetChanged();
             if (delegate != null) {
                 delegate.searchStateChanged(false);
             }
             return;
         }
-        TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
-        req.limit = 128;
+        final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+        req.limit = 20;
         req.peer = new TLRPC.TL_inputPeerEmpty();
         req.q = query;
+        if (lastMessagesSearchString != null && query.equals(lastMessagesSearchString) && !searchResultMessages.isEmpty()) {
+            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).messageOwner.id;
+        }
+        lastMessagesSearchString = query;
         req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
         final int currentReqId = ++lastReqId;
         if (delegate != null) {
@@ -89,7 +108,7 @@ private void searchMessagesInternal(final String query) {
         reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (currentReqId == lastReqId) {
@@ -98,10 +117,13 @@ public void run() {
                                 MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
                                 MessagesController.getInstance().putUsers(res.users, false);
                                 MessagesController.getInstance().putChats(res.chats, false);
-                                searchResultMessages.clear();
+                                if (req.max_id == 0) {
+                                    searchResultMessages.clear();
+                                }
                                 for (TLRPC.Message message : res.messages) {
                                     searchResultMessages.add(new MessageObject(message, null, 0));
                                 }
+                                messagesSearchEndReached = res.messages.size() != 20;
                                 notifyDataSetChanged();
                             }
                         }
@@ -115,7 +137,7 @@ public void run() {
         }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
     }
 
-    private void searchDialogsInternal(final String query, final boolean needEncrypted) {
+    private void searchDialogsInternal(final String query, final boolean serverOnly) {
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -164,7 +186,7 @@ public void run() {
                     }
                     cursor.dispose();
 
-                    if (needEncrypted) {
+                    if (!serverOnly) {
                         cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out FROM enc_chats as q INNER JOIN dialogs as d ON (q.uid << 32) = d.did INNER JOIN users as u ON q.user = u.uid");
                         while (cursor.next()) {
                             String name = cursor.stringValue(1);
@@ -221,7 +243,7 @@ public void run() {
                             ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
                             if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
                                 TLRPC.Chat chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                if (!needEncrypted && chat.id < 0) {
+                                if (serverOnly && chat.id < 0) {
                                     continue;
                                 }
                                 resultArrayNames.add(Utilities.generateSearchName(chat.title, null, q));
@@ -240,7 +262,7 @@ public void run() {
     }
 
     private void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 for (TLObject obj : result) {
@@ -266,46 +288,17 @@ public void run() {
     }
 
     public String getLastSearchText() {
-        if (currentSearchType == 2) {
-            return lastSearchTextMessages;
-        } else {
-            return lastSearchTextDialogs;
-        }
+        return lastSearchText;
     }
 
     public boolean isGlobalSearch(int i) {
-        if (currentSearchType != 2) {
-            int localCount = searchResult.size();
-            int globalCount = globalSearch.size();
-            if (i >= 0 && i < localCount) {
-                return false;
-            } else if (i > localCount && i <= globalCount + localCount) {
-                return true;
-            }
-        }
-        return false;
+        return i > searchResult.size() && i <= globalSearch.size() + searchResult.size();
     }
 
-    public void searchDialogs(final String query, final int type) {
-        String lastSearchText;
-        if (type == 2) {
-            lastSearchText = lastSearchTextMessages;
-        } else {
-            lastSearchText = lastSearchTextDialogs;
-        }
-        boolean typeChanged = currentSearchType != type;
-        currentSearchType = type;
-        if (query == null && lastSearchText == null || query != null && lastSearchText != null && query.equals(lastSearchText)) {
-            if (typeChanged) {
-                notifyDataSetChanged();
-            }
+    public void searchDialogs(final String query, final boolean serverOnly) {
+        if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
             return;
         }
-        if (type == 2) {
-            lastSearchTextMessages = query;
-        } else {
-            lastSearchTextDialogs = query;
-        }
         try {
             if (searchTimer != null) {
                 searchTimer.cancel();
@@ -314,13 +307,10 @@ public void searchDialogs(final String query, final int type) {
             FileLog.e("tmessages", e);
         }
         if (query == null || query.length() == 0) {
-            if (currentSearchType == 2) {
-                searchMessagesInternal(null);
-            } else {
-                searchResult.clear();
-                searchResultNames.clear();
-                queryServerSearch(null);
-            }
+            searchResult.clear();
+            searchResultNames.clear();
+            searchMessagesInternal(null);
+            queryServerSearch(null);
             notifyDataSetChanged();
         } else {
             searchTimer = new Timer();
@@ -333,22 +323,14 @@ public void run() {
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
-                    if (type != 2) {
-                        searchDialogsInternal(query, type == 0);
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                queryServerSearch(query);
-                            }
-                        });
-                    } else {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                searchMessagesInternal(query);
-                            }
-                        });
-                    }
+                    searchDialogsInternal(query, serverOnly);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            queryServerSearch(query);
+                            searchMessagesInternal(query);
+                        }
+                    });
                 }
             }, 200, 300);
         }
@@ -361,38 +343,34 @@ public boolean areAllItemsEnabled() {
 
     @Override
     public boolean isEnabled(int i) {
-        return currentSearchType == 2 || i != searchResult.size();
+        return i != searchResult.size() && i != searchResult.size() + (globalSearch.isEmpty() ? 0 : globalSearch.size() + 1);
     }
 
     @Override
     public int getCount() {
-        if (currentSearchType == 2) {
-            return searchResultMessages.size();
-        } else {
-            int count = searchResult.size();
-            int globalCount = globalSearch.size();
-            if (globalCount != 0) {
-                count += globalCount + 1;
-            }
-            return count;
+        int count = searchResult.size();
+        int globalCount = globalSearch.size();
+        int messagesCount = searchResultMessages.size();
+        if (globalCount != 0) {
+            count += globalCount + 1;
         }
+        if (messagesCount != 0) {
+            count += messagesCount + 1 + (messagesSearchEndReached ? 0 : 1);
+        }
+        return count;
     }
 
     @Override
     public Object getItem(int i) {
-        if (currentSearchType == 2) {
-            if (i < 0 || i >= searchResultMessages.size()) {
-                return null;
-            }
-            return searchResultMessages.get(i);
-        } else {
-            int localCount = searchResult.size();
-            int globalCount = globalSearch.size();
-            if (i >= 0 && i < localCount) {
-                return searchResult.get(i);
-            } else if (i > localCount && i <= globalCount + localCount) {
-                return globalSearch.get(i - localCount - 1);
-            }
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
+        if (i >= 0 && i < localCount) {
+            return searchResult.get(i);
+        } else if (i > localCount && i < globalCount + localCount) {
+            return globalSearch.get(i - localCount - 1);
+        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
+            return searchResultMessages.get(i - localCount - globalCount - 1);
         }
         return null;
     }
@@ -413,20 +391,26 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         if (type == 1) {
             if (view == null) {
-                view = new SettingsSectionLayout(mContext);
-                ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
-                view.setPadding(AndroidUtilities.dp(11), 0, AndroidUtilities.dp(11), 0);
+                view = new GreySectionCell(mContext);
+            }
+            if (!globalSearch.isEmpty() && i == searchResult.size()) {
+                ((GreySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+            } else {
+                ((GreySectionCell) view).setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
             }
         } else if (type == 0) {
             if (view == null) {
-                view = new ChatOrUserCell(mContext);
+                view = new ProfileSearchCell(mContext);
             }
 
             TLRPC.User user = null;
             TLRPC.Chat chat = null;
             TLRPC.EncryptedChat encryptedChat = null;
 
-            ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+
+            ((ProfileSearchCell) view).useSeparator = (i != getCount() - 1 && i != localCount - 1 && i != localCount + globalCount - 1);
             Object obj = getItem(i);
             if (obj instanceof TLRPC.User) {
                 user = MessagesController.getInstance().getUser(((TLRPC.User) obj).id);
@@ -452,21 +436,25 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
             } else if (i > searchResult.size() && user != null && user.username != null) {
                 try {
-                    username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                    username = Html.fromHtml(String.format("<font color=\"#4d83b3\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
                 } catch (Exception e) {
                     username = user.username;
                     FileLog.e("tmessages", e);
                 }
             }
 
-            ((ChatOrUserCell) view).setData(user, chat, encryptedChat, name, username);
+            ((ProfileSearchCell) view).setData(user, chat, encryptedChat, name, username);
         } else if (type == 2) {
             if (view == null) {
                 view = new DialogCell(mContext);
             }
             ((DialogCell) view).useSeparator = (i != getCount() - 1);
-            MessageObject messageObject = searchResultMessages.get(i);
+            MessageObject messageObject = (MessageObject)getItem(i);
             ((DialogCell) view).setDialog(messageObject.getDialogId(), messageObject, false, messageObject.messageOwner.date, 0);
+        } else if (type == 3) {
+            if (view == null) {
+                view = new LoadingCell(mContext);
+            }
         }
 
         return view;
@@ -474,26 +462,26 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
     @Override
     public int getItemViewType(int i) {
-        if (currentSearchType == 2) {
-            return 2;
-        } else {
-            if (i == searchResult.size()) {
-                return 1;
-            }
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
+        if (i >= 0 && i < localCount || i > localCount && i < globalCount + localCount) {
             return 0;
+        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
+            return 2;
+        } else if (messagesCount != 0 && i == globalCount + localCount + messagesCount) {
+            return 3;
         }
+        return 1;
     }
 
     @Override
     public int getViewTypeCount() {
-        return 3;
+        return 4;
     }
 
     @Override
     public boolean isEmpty() {
-        if (currentSearchType == 2) {
-            return searchResultMessages.isEmpty();
-        }
-        return searchResult.isEmpty() && globalSearch.isEmpty();
+        return searchResult.isEmpty() && globalSearch.isEmpty() && searchResultMessages.isEmpty();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
new file mode 100644
index 000000000..8304f7f7e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -0,0 +1,125 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Cells.DrawerActionCell;
+import org.telegram.ui.Cells.DividerCell;
+import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.DrawerProfileCell;
+
+public class DrawerLayoutAdapter extends BaseAdapter {
+
+    private Context mContext;
+
+    public DrawerLayoutAdapter(Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return false;
+    }
+
+    @Override
+    public boolean isEnabled(int i) {
+        return !(i == 0 || i == 1 || i == 5);
+    }
+
+    @Override
+    public int getCount() {
+        return UserConfig.isClientActivated() ? 10 : 0;
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return null;
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        int type = getItemViewType(i);
+        if (type == 0) {
+            if (view == null) {
+                view = new DrawerProfileCell(mContext);
+            }
+            ((DrawerProfileCell) view).setUser(MessagesController.getInstance().getUser(UserConfig.getClientUserId()));
+        } else if (type == 1) {
+            if (view == null) {
+                view = new EmptyCell(mContext, 8);
+            }
+        } else if (type == 2) {
+            if (view == null) {
+                view = new DividerCell(mContext);
+            }
+        } else if (type == 3) {
+            if (view == null) {
+                view = new DrawerActionCell(mContext);
+            }
+            DrawerActionCell actionCell = (DrawerActionCell) view;
+            if (i == 2) {
+                actionCell.setTextAndIcon(LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_newgroup);
+            } else if (i == 3) {
+                actionCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
+            } else if (i == 4) {
+                actionCell.setTextAndIcon(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), R.drawable.menu_broadcast);
+            } else if (i == 6) {
+                actionCell.setTextAndIcon(LocaleController.getString("Contacts", R.string.Contacts), R.drawable.menu_contacts);
+            } else if (i == 7) {
+                actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
+            } else if (i == 8) {
+                actionCell.setTextAndIcon(LocaleController.getString("Settings", R.string.Settings), R.drawable.menu_settings);
+            } else if (i == 9) {
+                actionCell.setTextAndIcon(LocaleController.getString("TelegramFaq", R.string.TelegramFaq), R.drawable.menu_help);
+            }
+        }
+
+        return view;
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (i == 0) {
+            return 0;
+        } else if (i == 1) {
+            return 1;
+        } else if (i == 5) {
+            return 2;
+        }
+        return 3;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 4;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return !UserConfig.isClientActivated();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
new file mode 100644
index 000000000..32e6ccfe1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
@@ -0,0 +1,191 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.animation.Interpolator;
+
+import java.util.ArrayList;
+
+public abstract class Animator10 implements Cloneable {
+
+    ArrayList<AnimatorListener> mListeners = null;
+    ArrayList<AnimatorPauseListener> mPauseListeners = null;
+    boolean mPaused = false;
+
+    public abstract long getStartDelay();
+
+    public abstract void setStartDelay(long startDelay);
+
+    public abstract Animator10 setDuration(long duration);
+
+    public abstract long getDuration();
+
+    public abstract void setInterpolator(Interpolator value);
+
+    public abstract boolean isRunning();
+
+    public void start() {
+
+    }
+
+    public void cancel() {
+
+    }
+
+    public void end() {
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void pause() {
+        if (isStarted() && !mPaused) {
+            mPaused = true;
+            if (mPauseListeners != null) {
+                ArrayList<AnimatorPauseListener> tmpListeners = (ArrayList<AnimatorPauseListener>) mPauseListeners.clone();
+                int numListeners = tmpListeners.size();
+                for (AnimatorPauseListener tmpListener : tmpListeners) {
+                    tmpListener.onAnimationPause(this);
+                }
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public void resume() {
+        if (mPaused) {
+            mPaused = false;
+            if (mPauseListeners != null) {
+                ArrayList<AnimatorPauseListener> tmpListeners = (ArrayList<AnimatorPauseListener>) mPauseListeners.clone();
+                int numListeners = tmpListeners.size();
+                for (AnimatorPauseListener tmpListener : tmpListeners) {
+                    tmpListener.onAnimationResume(this);
+                }
+            }
+        }
+    }
+
+    public boolean isPaused() {
+        return mPaused;
+    }
+
+    public boolean isStarted() {
+        return isRunning();
+    }
+
+    public Interpolator getInterpolator() {
+        return null;
+    }
+
+    public void addListener(AnimatorListener listener) {
+        if (mListeners == null) {
+            mListeners = new ArrayList<AnimatorListener>();
+        }
+        mListeners.add(listener);
+    }
+
+    public void removeListener(AnimatorListener listener) {
+        if (mListeners == null) {
+            return;
+        }
+        mListeners.remove(listener);
+        if (mListeners.size() == 0) {
+            mListeners = null;
+        }
+    }
+
+    public ArrayList<AnimatorListener> getListeners() {
+        return mListeners;
+    }
+
+    public void addPauseListener(AnimatorPauseListener listener) {
+        if (mPauseListeners == null) {
+            mPauseListeners = new ArrayList<AnimatorPauseListener>();
+        }
+        mPauseListeners.add(listener);
+    }
+
+    public void removePauseListener(AnimatorPauseListener listener) {
+        if (mPauseListeners == null) {
+            return;
+        }
+        mPauseListeners.remove(listener);
+        if (mPauseListeners.size() == 0) {
+            mPauseListeners = null;
+        }
+    }
+
+    public void removeAllListeners() {
+        if (mListeners != null) {
+            mListeners.clear();
+            mListeners = null;
+        }
+        if (mPauseListeners != null) {
+            mPauseListeners.clear();
+            mPauseListeners = null;
+        }
+    }
+
+    @Override
+    public Animator10 clone() {
+        try {
+            final Animator10 anim = (Animator10) super.clone();
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> oldListeners = mListeners;
+                anim.mListeners = new ArrayList<AnimatorListener>();
+                int numListeners = oldListeners.size();
+                for (AnimatorListener oldListener : oldListeners) {
+                    anim.mListeners.add(oldListener);
+                }
+            }
+            if (mPauseListeners != null) {
+                ArrayList<AnimatorPauseListener> oldListeners = mPauseListeners;
+                anim.mPauseListeners = new ArrayList<AnimatorPauseListener>();
+                int numListeners = oldListeners.size();
+                for (AnimatorPauseListener oldListener : oldListeners) {
+                    anim.mPauseListeners.add(oldListener);
+                }
+            }
+            return anim;
+        } catch (CloneNotSupportedException e) {
+            throw new AssertionError();
+        }
+    }
+
+    public void setupStartValues() {
+
+    }
+
+    public void setupEndValues() {
+
+    }
+
+    public void setTarget(Object target) {
+
+    }
+
+    public static interface AnimatorListener {
+        void onAnimationStart(Animator10 animation);
+        void onAnimationEnd(Animator10 animation);
+        void onAnimationCancel(Animator10 animation);
+        void onAnimationRepeat(Animator10 animation);
+    }
+
+    public static interface AnimatorPauseListener {
+        void onAnimationPause(Animator10 animation);
+        void onAnimationResume(Animator10 animation);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorListenerAdapter10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorListenerAdapter10.java
new file mode 100644
index 000000000..42349cd13
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorListenerAdapter10.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+public abstract class AnimatorListenerAdapter10 implements Animator10.AnimatorListener, Animator10.AnimatorPauseListener {
+
+    @Override
+    public void onAnimationCancel(Animator10 animation) {
+
+    }
+
+    @Override
+    public void onAnimationEnd(Animator10 animation) {
+
+    }
+
+    @Override
+    public void onAnimationRepeat(Animator10 animation) {
+
+    }
+
+    @Override
+    public void onAnimationStart(Animator10 animation) {
+
+    }
+
+    @Override
+    public void onAnimationPause(Animator10 animation) {
+
+    }
+
+    @Override
+    public void onAnimationResume(Animator10 animation) {
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java
new file mode 100644
index 000000000..0f91b93b1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java
@@ -0,0 +1,705 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.animation.Interpolator;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+
+public final class AnimatorSet10 extends Animator10 {
+
+    private ArrayList<Animator10> mPlayingSet = new ArrayList<Animator10>();
+    private HashMap<Animator10, Node> mNodeMap = new HashMap<Animator10, Node>();
+    private ArrayList<Node> mNodes = new ArrayList<Node>();
+    private ArrayList<Node> mSortedNodes = new ArrayList<Node>();
+    private boolean mNeedsSort = true;
+    private AnimatorSetListener mSetListener = null;
+    boolean mTerminated = false;
+    private boolean mStarted = false;
+    private long mStartDelay = 0;
+    private ValueAnimator mDelayAnim = null;
+    private long mDuration = -1;
+    private Interpolator mInterpolator = null;
+
+    public void playTogether(Animator10... items) {
+        if (items != null) {
+            mNeedsSort = true;
+            Builder builder = play(items[0]);
+            for (int i = 1; i < items.length; ++i) {
+                builder.with(items[i]);
+            }
+        }
+    }
+
+    public void playTogether(Collection<Animator10> items) {
+        if (items != null && items.size() > 0) {
+            mNeedsSort = true;
+            Builder builder = null;
+            for (Animator10 anim : items) {
+                if (builder == null) {
+                    builder = play(anim);
+                } else {
+                    builder.with(anim);
+                }
+            }
+        }
+    }
+
+    public void playSequentially(Animator10... items) {
+        if (items != null) {
+            mNeedsSort = true;
+            if (items.length == 1) {
+                play(items[0]);
+            } else {
+                for (int i = 0; i < items.length - 1; ++i) {
+                    play(items[i]).before(items[i+1]);
+                }
+            }
+        }
+    }
+
+    public void playSequentially(List<Animator10> items) {
+        if (items != null && items.size() > 0) {
+            mNeedsSort = true;
+            if (items.size() == 1) {
+                play(items.get(0));
+            } else {
+                for (int i = 0; i < items.size() - 1; ++i) {
+                    play(items.get(i)).before(items.get(i+1));
+                }
+            }
+        }
+    }
+
+    public ArrayList<Animator10> getChildAnimations() {
+        ArrayList<Animator10> childList = new ArrayList<Animator10>();
+        for (Node node : mNodes) {
+            childList.add(node.animation);
+        }
+        return childList;
+    }
+
+    @Override
+    public void setTarget(Object target) {
+        for (Node node : mNodes) {
+            Animator10 animation = node.animation;
+            if (animation instanceof AnimatorSet10) {
+                animation.setTarget(target);
+            } else if (animation instanceof ObjectAnimator10) {
+                animation.setTarget(target);
+            }
+        }
+    }
+
+    @Override
+    public void setInterpolator(Interpolator interpolator) {
+        mInterpolator = interpolator;
+    }
+
+    @Override
+    public Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
+    public Builder play(Animator10 anim) {
+        if (anim != null) {
+            mNeedsSort = true;
+            return new Builder(anim);
+        }
+        return null;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel() {
+        mTerminated = true;
+        if (isStarted()) {
+            ArrayList<AnimatorListener> tmpListeners = null;
+            if (mListeners != null) {
+                tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationCancel(this);
+                }
+            }
+            if (mDelayAnim != null && mDelayAnim.isRunning()) {
+                mDelayAnim.cancel();
+            } else  if (mSortedNodes.size() > 0) {
+                for (Node node : mSortedNodes) {
+                    node.animation.cancel();
+                }
+            }
+            if (tmpListeners != null) {
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationEnd(this);
+                }
+            }
+            mStarted = false;
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void end() {
+        mTerminated = true;
+        if (isStarted()) {
+            if (mSortedNodes.size() != mNodes.size()) {
+                // hasn't been started yet - sort the nodes now, then end them
+                sortNodes();
+                for (Node node : mSortedNodes) {
+                    if (mSetListener == null) {
+                        mSetListener = new AnimatorSetListener(this);
+                    }
+                    node.animation.addListener(mSetListener);
+                }
+            }
+            if (mDelayAnim != null) {
+                mDelayAnim.cancel();
+            }
+            if (mSortedNodes.size() > 0) {
+                for (Node node : mSortedNodes) {
+                    node.animation.end();
+                }
+            }
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationEnd(this);
+                }
+            }
+            mStarted = false;
+        }
+    }
+
+    @Override
+    public boolean isRunning() {
+        for (Node node : mNodes) {
+            if (node.animation.isRunning()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isStarted() {
+        return mStarted;
+    }
+
+    @Override
+    public long getStartDelay() {
+        return mStartDelay;
+    }
+
+    @Override
+    public void setStartDelay(long startDelay) {
+        mStartDelay = startDelay;
+    }
+
+    @Override
+    public long getDuration() {
+        return mDuration;
+    }
+
+    @Override
+    public AnimatorSet10 setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("duration must be a value of zero or greater");
+        }
+        mDuration = duration;
+        return this;
+    }
+
+    @Override
+    public void setupStartValues() {
+        for (Node node : mNodes) {
+            node.animation.setupStartValues();
+        }
+    }
+
+    @Override
+    public void setupEndValues() {
+        for (Node node : mNodes) {
+            node.animation.setupEndValues();
+        }
+    }
+
+    @Override
+    public void pause() {
+        boolean previouslyPaused = mPaused;
+        super.pause();
+        if (!previouslyPaused && mPaused) {
+            if (mDelayAnim != null) {
+                mDelayAnim.pause();
+            } else {
+                for (Node node : mNodes) {
+                    node.animation.pause();
+                }
+            }
+        }
+    }
+
+    @Override
+    public void resume() {
+        boolean previouslyPaused = mPaused;
+        super.resume();
+        if (previouslyPaused && !mPaused) {
+            if (mDelayAnim != null) {
+                mDelayAnim.resume();
+            } else {
+                for (Node node : mNodes) {
+                    node.animation.resume();
+                }
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void start() {
+        mTerminated = false;
+        mStarted = true;
+        mPaused = false;
+
+        if (mDuration >= 0) {
+            for (Node node : mNodes) {
+                node.animation.setDuration(mDuration);
+            }
+        }
+        if (mInterpolator != null) {
+            for (Node node : mNodes) {
+                node.animation.setInterpolator(mInterpolator);
+            }
+        }
+
+        sortNodes();
+
+        int numSortedNodes = mSortedNodes.size();
+        for (Node node : mSortedNodes) {
+            ArrayList<AnimatorListener> oldListeners = node.animation.getListeners();
+            if (oldListeners != null && oldListeners.size() > 0) {
+                final ArrayList<AnimatorListener> clonedListeners = new
+                        ArrayList<AnimatorListener>(oldListeners);
+
+                for (AnimatorListener listener : clonedListeners) {
+                    if (listener instanceof DependencyListener ||
+                            listener instanceof AnimatorSetListener) {
+                        node.animation.removeListener(listener);
+                    }
+                }
+            }
+        }
+
+        final ArrayList<Node> nodesToStart = new ArrayList<Node>();
+        for (Node node : mSortedNodes) {
+            if (mSetListener == null) {
+                mSetListener = new AnimatorSetListener(this);
+            }
+            if (node.dependencies == null || node.dependencies.size() == 0) {
+                nodesToStart.add(node);
+            } else {
+                int numDependencies = node.dependencies.size();
+                for (int j = 0; j < numDependencies; ++j) {
+                    Dependency dependency = node.dependencies.get(j);
+                    dependency.node.animation.addListener(
+                            new DependencyListener(this, node, dependency.rule));
+                }
+                node.tmpDependencies = (ArrayList<Dependency>) node.dependencies.clone();
+            }
+            node.animation.addListener(mSetListener);
+        }
+
+        if (mStartDelay <= 0) {
+            for (Node node : nodesToStart) {
+                node.animation.start();
+                mPlayingSet.add(node.animation);
+            }
+        } else {
+            mDelayAnim = ValueAnimator.ofFloat(0f, 1f);
+            mDelayAnim.setDuration(mStartDelay);
+            mDelayAnim.addListener(new AnimatorListenerAdapter10() {
+                boolean canceled = false;
+                public void onAnimationCancel(Animator10 anim) {
+                    canceled = true;
+                }
+                public void onAnimationEnd(Animator10 anim) {
+                    if (!canceled) {
+                        int numNodes = nodesToStart.size();
+                        for (Node node : nodesToStart) {
+                            node.animation.start();
+                            mPlayingSet.add(node.animation);
+                        }
+                    }
+                    mDelayAnim = null;
+                }
+            });
+            mDelayAnim.start();
+        }
+        if (mListeners != null) {
+            ArrayList<AnimatorListener> tmpListeners =
+                    (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (AnimatorListener tmpListener : tmpListeners) {
+                tmpListener.onAnimationStart(this);
+            }
+        }
+        if (mNodes.size() == 0 && mStartDelay == 0) {
+            mStarted = false;
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners =
+                        (ArrayList<AnimatorListener>) mListeners.clone();
+                int numListeners = tmpListeners.size();
+                for (AnimatorListener tmpListener : tmpListeners) {
+                    tmpListener.onAnimationEnd(this);
+                }
+            }
+        }
+    }
+
+    @Override
+    public AnimatorSet10 clone() {
+        final AnimatorSet10 anim = (AnimatorSet10) super.clone();
+
+        anim.mNeedsSort = true;
+        anim.mTerminated = false;
+        anim.mStarted = false;
+        anim.mPlayingSet = new ArrayList<Animator10>();
+        anim.mNodeMap = new HashMap<Animator10, Node>();
+        anim.mNodes = new ArrayList<Node>();
+        anim.mSortedNodes = new ArrayList<Node>();
+
+        HashMap<Node, Node> nodeCloneMap = new HashMap<Node, Node>();
+        for (Node node : mNodes) {
+            Node nodeClone = node.clone();
+            nodeCloneMap.put(node, nodeClone);
+            anim.mNodes.add(nodeClone);
+            anim.mNodeMap.put(nodeClone.animation, nodeClone);
+            nodeClone.dependencies = null;
+            nodeClone.tmpDependencies = null;
+            nodeClone.nodeDependents = null;
+            nodeClone.nodeDependencies = null;
+            ArrayList<AnimatorListener> cloneListeners = nodeClone.animation.getListeners();
+            if (cloneListeners != null) {
+                ArrayList<AnimatorListener> listenersToRemove = null;
+                for (AnimatorListener listener : cloneListeners) {
+                    if (listener instanceof AnimatorSetListener) {
+                        if (listenersToRemove == null) {
+                            listenersToRemove = new ArrayList<AnimatorListener>();
+                        }
+                        listenersToRemove.add(listener);
+                    }
+                }
+                if (listenersToRemove != null) {
+                    for (AnimatorListener listener : listenersToRemove) {
+                        cloneListeners.remove(listener);
+                    }
+                }
+            }
+        }
+        for (Node node : mNodes) {
+            Node nodeClone = nodeCloneMap.get(node);
+            if (node.dependencies != null) {
+                for (Dependency dependency : node.dependencies) {
+                    Node clonedDependencyNode = nodeCloneMap.get(dependency.node);
+                    Dependency cloneDependency = new Dependency(clonedDependencyNode, dependency.rule);
+                    nodeClone.addDependency(cloneDependency);
+                }
+            }
+        }
+        return anim;
+    }
+
+    private static class DependencyListener implements AnimatorListener {
+
+        private AnimatorSet10 mAnimatorSet;
+        private Node mNode;
+        private int mRule;
+
+        public DependencyListener(AnimatorSet10 animatorSet, Node node, int rule) {
+            this.mAnimatorSet = animatorSet;
+            this.mNode = node;
+            this.mRule = rule;
+        }
+
+        public void onAnimationCancel(Animator10 animation) {
+
+        }
+
+        public void onAnimationEnd(Animator10 animation) {
+            if (mRule == Dependency.AFTER) {
+                startIfReady(animation);
+            }
+        }
+
+        public void onAnimationRepeat(Animator10 animation) {
+
+        }
+
+        public void onAnimationStart(Animator10 animation) {
+            if (mRule == Dependency.WITH) {
+                startIfReady(animation);
+            }
+        }
+
+        private void startIfReady(Animator10 dependencyAnimation) {
+            if (mAnimatorSet.mTerminated) {
+                return;
+            }
+            Dependency dependencyToRemove = null;
+            int numDependencies = mNode.tmpDependencies.size();
+            for (int i = 0; i < numDependencies; ++i) {
+                Dependency dependency = mNode.tmpDependencies.get(i);
+                if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {
+                    dependencyToRemove = dependency;
+                    dependencyAnimation.removeListener(this);
+                    break;
+                }
+            }
+            mNode.tmpDependencies.remove(dependencyToRemove);
+            if (mNode.tmpDependencies.size() == 0) {
+                mNode.animation.start();
+                mAnimatorSet.mPlayingSet.add(mNode.animation);
+            }
+        }
+    }
+
+    private class AnimatorSetListener implements AnimatorListener {
+
+        private AnimatorSet10 mAnimatorSet;
+
+        AnimatorSetListener(AnimatorSet10 animatorSet) {
+            mAnimatorSet = animatorSet;
+        }
+
+        public void onAnimationCancel(Animator10 animation) {
+            if (!mTerminated) {
+                if (mPlayingSet.size() == 0) {
+                    if (mListeners != null) {
+                        int numListeners = mListeners.size();
+                        for (AnimatorListener mListener : mListeners) {
+                            mListener.onAnimationCancel(mAnimatorSet);
+                        }
+                    }
+                }
+            }
+        }
+
+        @SuppressWarnings("unchecked")
+        public void onAnimationEnd(Animator10 animation) {
+            animation.removeListener(this);
+            mPlayingSet.remove(animation);
+            Node animNode = mAnimatorSet.mNodeMap.get(animation);
+            animNode.done = true;
+            if (!mTerminated) {
+                ArrayList<Node> sortedNodes = mAnimatorSet.mSortedNodes;
+                boolean allDone = true;
+                int numSortedNodes = sortedNodes.size();
+                for (Node sortedNode : sortedNodes) {
+                    if (!sortedNode.done) {
+                        allDone = false;
+                        break;
+                    }
+                }
+                if (allDone) {
+                    if (mListeners != null) {
+                        ArrayList<AnimatorListener> tmpListeners =
+                                (ArrayList<AnimatorListener>) mListeners.clone();
+                        int numListeners = tmpListeners.size();
+                        for (AnimatorListener tmpListener : tmpListeners) {
+                            tmpListener.onAnimationEnd(mAnimatorSet);
+                        }
+                    }
+                    mAnimatorSet.mStarted = false;
+                    mAnimatorSet.mPaused = false;
+                }
+            }
+        }
+
+        public void onAnimationRepeat(Animator10 animation) {
+
+        }
+
+        public void onAnimationStart(Animator10 animation) {
+
+        }
+    }
+
+    private void sortNodes() {
+        if (mNeedsSort) {
+            mSortedNodes.clear();
+            ArrayList<Node> roots = new ArrayList<Node>();
+            int numNodes = mNodes.size();
+            for (Node node : mNodes) {
+                if (node.dependencies == null || node.dependencies.size() == 0) {
+                    roots.add(node);
+                }
+            }
+            ArrayList<Node> tmpRoots = new ArrayList<Node>();
+            while (roots.size() > 0) {
+                int numRoots = roots.size();
+                for (Node root : roots) {
+                    mSortedNodes.add(root);
+                    if (root.nodeDependents != null) {
+                        int numDependents = root.nodeDependents.size();
+                        for (int j = 0; j < numDependents; ++j) {
+                            Node node = root.nodeDependents.get(j);
+                            node.nodeDependencies.remove(root);
+                            if (node.nodeDependencies.size() == 0) {
+                                tmpRoots.add(node);
+                            }
+                        }
+                    }
+                }
+                roots.clear();
+                roots.addAll(tmpRoots);
+                tmpRoots.clear();
+            }
+            mNeedsSort = false;
+            if (mSortedNodes.size() != mNodes.size()) {
+                throw new IllegalStateException("Circular dependencies cannot exist in AnimatorSet");
+            }
+        } else {
+            int numNodes = mNodes.size();
+            for (Node node : mNodes) {
+                if (node.dependencies != null && node.dependencies.size() > 0) {
+                    int numDependencies = node.dependencies.size();
+                    for (int j = 0; j < numDependencies; ++j) {
+                        Dependency dependency = node.dependencies.get(j);
+                        if (node.nodeDependencies == null) {
+                            node.nodeDependencies = new ArrayList<Node>();
+                        }
+                        if (!node.nodeDependencies.contains(dependency.node)) {
+                            node.nodeDependencies.add(dependency.node);
+                        }
+                    }
+                }
+                node.done = false;
+            }
+        }
+    }
+
+    private static class Dependency {
+        static final int WITH = 0;
+        static final int AFTER = 1;
+        public Node node;
+        public int rule;
+
+        public Dependency(Node node, int rule) {
+            this.node = node;
+            this.rule = rule;
+        }
+    }
+
+    private static class Node implements Cloneable {
+        public Animator10 animation;
+        public ArrayList<Dependency> dependencies = null;
+        public ArrayList<Dependency> tmpDependencies = null;
+        public ArrayList<Node> nodeDependencies = null;
+        public ArrayList<Node> nodeDependents = null;
+        public boolean done = false;
+
+        public Node(Animator10 animation) {
+            this.animation = animation;
+        }
+
+        public void addDependency(Dependency dependency) {
+            if (dependencies == null) {
+                dependencies = new ArrayList<Dependency>();
+                nodeDependencies = new ArrayList<Node>();
+            }
+            dependencies.add(dependency);
+            if (!nodeDependencies.contains(dependency.node)) {
+                nodeDependencies.add(dependency.node);
+            }
+            Node dependencyNode = dependency.node;
+            if (dependencyNode.nodeDependents == null) {
+                dependencyNode.nodeDependents = new ArrayList<Node>();
+            }
+            dependencyNode.nodeDependents.add(this);
+        }
+
+        @Override
+        public Node clone() {
+            try {
+                Node node = (Node) super.clone();
+                node.animation = animation.clone();
+                return node;
+            } catch (CloneNotSupportedException e) {
+               throw new AssertionError();
+            }
+        }
+    }
+
+    public class Builder {
+
+        private Node mCurrentNode;
+
+        Builder(Animator10 anim) {
+            mCurrentNode = mNodeMap.get(anim);
+            if (mCurrentNode == null) {
+                mCurrentNode = new Node(anim);
+                mNodeMap.put(anim, mCurrentNode);
+                mNodes.add(mCurrentNode);
+            }
+        }
+
+        public Builder with(Animator10 anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(mCurrentNode, Dependency.WITH);
+            node.addDependency(dependency);
+            return this;
+        }
+
+        public Builder before(Animator10 anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(mCurrentNode, Dependency.AFTER);
+            node.addDependency(dependency);
+            return this;
+        }
+
+        public Builder after(Animator10 anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(node, Dependency.AFTER);
+            mCurrentNode.addDependency(dependency);
+            return this;
+        }
+
+        public Builder after(long delay) {
+            ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);
+            anim.setDuration(delay);
+            after(anim);
+            return this;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatEvaluator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatEvaluator.java
new file mode 100644
index 000000000..2591ebf74
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatEvaluator.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+public class FloatEvaluator implements TypeEvaluator<Number> {
+    public Float evaluate(float fraction, Number startValue, Number endValue) {
+        float startFloat = startValue.floatValue();
+        return startFloat + fraction * (endValue.floatValue() - startFloat);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java
new file mode 100644
index 000000000..52d0da5fe
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.animation.Interpolator;
+
+import org.telegram.ui.Animation.Keyframe.FloatKeyframe;
+
+import java.util.ArrayList;
+
+class FloatKeyframeSet extends KeyframeSet {
+    private float firstValue;
+    private float lastValue;
+    private float deltaValue;
+    private boolean firstTime = true;
+
+    public FloatKeyframeSet(FloatKeyframe... keyframes) {
+        super(keyframes);
+    }
+
+    @Override
+    public Object getValue(float fraction) {
+        return getFloatValue(fraction);
+    }
+
+    @Override
+    public FloatKeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        FloatKeyframe[] newKeyframes = new FloatKeyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = (FloatKeyframe) keyframes.get(i).clone();
+        }
+        return new FloatKeyframeSet(newKeyframes);
+    }
+
+    @SuppressWarnings("unchecked")
+    public float getFloatValue(float fraction) {
+        if (mNumKeyframes == 2) {
+            if (firstTime) {
+                firstTime = false;
+                firstValue = ((FloatKeyframe) mKeyframes.get(0)).getFloatValue();
+                lastValue = ((FloatKeyframe) mKeyframes.get(1)).getFloatValue();
+                deltaValue = lastValue - firstValue;
+            }
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            if (mEvaluator == null) {
+                return firstValue + fraction * deltaValue;
+            } else {
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).floatValue();
+            }
+        }
+        if (fraction <= 0f) {
+            final FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(0);
+            final FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(1);
+            float prevValue = prevKeyframe.getFloatValue();
+            float nextValue = nextKeyframe.getFloatValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+        } else if (fraction >= 1f) {
+            final FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 2);
+            final FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 1);
+            float prevValue = prevKeyframe.getFloatValue();
+            float nextValue = nextKeyframe.getFloatValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+        }
+        FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(0);
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                float intervalFraction = (fraction - prevKeyframe.getFraction()) /
+                    (nextKeyframe.getFraction() - prevKeyframe.getFraction());
+                float prevValue = prevKeyframe.getFloatValue();
+                float nextValue = nextKeyframe.getFloatValue();
+                return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).floatValue();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatProperty10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatProperty10.java
new file mode 100755
index 000000000..1a05b3bce
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatProperty10.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.ui.Animation;
+
+public abstract class FloatProperty10<T> extends Property<T, Float> {
+
+    public FloatProperty10(String name) {
+        super(Float.class, name);
+    }
+
+    public abstract void setValue(T object, float value);
+
+    @Override
+    final public void set(T object, Float value) {
+        setValue(object, value.floatValue());
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java
new file mode 100644
index 000000000..cd3a19ebe
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+public class IntEvaluator implements TypeEvaluator<Integer> {
+    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {
+        int startInt = startValue;
+        return (int)(startInt + fraction * (endValue - startInt));
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java
new file mode 100644
index 000000000..9d58863c8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.animation.Interpolator;
+
+import org.telegram.ui.Animation.Keyframe.IntKeyframe;
+
+import java.util.ArrayList;
+
+class IntKeyframeSet extends KeyframeSet {
+    private int firstValue;
+    private int lastValue;
+    private int deltaValue;
+    private boolean firstTime = true;
+
+    public IntKeyframeSet(IntKeyframe... keyframes) {
+        super(keyframes);
+    }
+
+    @Override
+    public Object getValue(float fraction) {
+        return getIntValue(fraction);
+    }
+
+    @Override
+    public IntKeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        IntKeyframe[] newKeyframes = new IntKeyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = (IntKeyframe) keyframes.get(i).clone();
+        }
+        return new IntKeyframeSet(newKeyframes);
+    }
+
+    @SuppressWarnings("unchecked")
+    public int getIntValue(float fraction) {
+        if (mNumKeyframes == 2) {
+            if (firstTime) {
+                firstTime = false;
+                firstValue = ((IntKeyframe) mKeyframes.get(0)).getIntValue();
+                lastValue = ((IntKeyframe) mKeyframes.get(1)).getIntValue();
+                deltaValue = lastValue - firstValue;
+            }
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            if (mEvaluator == null) {
+                return firstValue + (int)(fraction * deltaValue);
+            } else {
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).intValue();
+            }
+        }
+        if (fraction <= 0f) {
+            final IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(0);
+            final IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(1);
+            int prevValue = prevKeyframe.getIntValue();
+            int nextValue = nextKeyframe.getIntValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+        } else if (fraction >= 1f) {
+            final IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 2);
+            final IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 1);
+            int prevValue = prevKeyframe.getIntValue();
+            int nextValue = nextKeyframe.getIntValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+        }
+        IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(0);
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                float intervalFraction = (fraction - prevKeyframe.getFraction()) / (nextKeyframe.getFraction() - prevKeyframe.getFraction());
+                int prevValue = prevKeyframe.getIntValue();
+                int nextValue = nextKeyframe.getIntValue();
+                return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).intValue();
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntProperty.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntProperty.java
new file mode 100755
index 000000000..07e72511a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntProperty.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.ui.Animation;
+
+public abstract class IntProperty<T> extends Property<T, Integer> {
+
+    public IntProperty(String name) {
+        super(Integer.class, name);
+    }
+
+    public abstract void setValue(T object, int value);
+
+    @Override
+    final public void set(T object, Integer value) {
+        setValue(object, value.intValue());
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java
new file mode 100644
index 000000000..cb71460cd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java
@@ -0,0 +1,187 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.animation.Interpolator;
+
+public abstract class Keyframe implements Cloneable {
+
+    float mFraction;
+    Class mValueType;
+    private Interpolator mInterpolator = null;
+    boolean mHasValue = false;
+
+    public static Keyframe ofInt(float fraction, int value) {
+        return new IntKeyframe(fraction, value);
+    }
+
+    public static Keyframe ofInt(float fraction) {
+        return new IntKeyframe(fraction);
+    }
+
+    public static Keyframe ofFloat(float fraction, float value) {
+        return new FloatKeyframe(fraction, value);
+    }
+
+    public static Keyframe ofFloat(float fraction) {
+        return new FloatKeyframe(fraction);
+    }
+
+    public static Keyframe ofObject(float fraction, Object value) {
+        return new ObjectKeyframe(fraction, value);
+    }
+
+    public static Keyframe ofObject(float fraction) {
+        return new ObjectKeyframe(fraction, null);
+    }
+
+    public boolean hasValue() {
+        return mHasValue;
+    }
+
+    public abstract Object getValue();
+    public abstract void setValue(Object value);
+
+    public float getFraction() {
+        return mFraction;
+    }
+
+    public void setFraction(float fraction) {
+        mFraction = fraction;
+    }
+
+    public Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
+    public void setInterpolator(Interpolator interpolator) {
+        mInterpolator = interpolator;
+    }
+
+    public Class getType() {
+        return mValueType;
+    }
+
+    @Override
+    public abstract Keyframe clone();
+
+    static class ObjectKeyframe extends Keyframe {
+
+        Object mValue;
+
+        ObjectKeyframe(float fraction, Object value) {
+            mFraction = fraction;
+            mValue = value;
+            mHasValue = (value != null);
+            mValueType = mHasValue ? value.getClass() : Object.class;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            mValue = value;
+            mHasValue = (value != null);
+        }
+
+        @Override
+        public ObjectKeyframe clone() {
+            ObjectKeyframe kfClone = new ObjectKeyframe(getFraction(), mHasValue ? mValue : null);
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+
+    static class IntKeyframe extends Keyframe {
+
+        int mValue;
+
+        IntKeyframe(float fraction, int value) {
+            mFraction = fraction;
+            mValue = value;
+            mValueType = int.class;
+            mHasValue = true;
+        }
+
+        IntKeyframe(float fraction) {
+            mFraction = fraction;
+            mValueType = int.class;
+        }
+
+        public int getIntValue() {
+            return mValue;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            if (value != null && value.getClass() == Integer.class) {
+                mValue = (Integer) value;
+                mHasValue = true;
+            }
+        }
+
+        @Override
+        public IntKeyframe clone() {
+            IntKeyframe kfClone = mHasValue ? new IntKeyframe(getFraction(), mValue) : new IntKeyframe(getFraction());
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+
+    static class FloatKeyframe extends Keyframe {
+
+        float mValue;
+
+        FloatKeyframe(float fraction, float value) {
+            mFraction = fraction;
+            mValue = value;
+            mValueType = float.class;
+            mHasValue = true;
+        }
+
+        FloatKeyframe(float fraction) {
+            mFraction = fraction;
+            mValueType = float.class;
+        }
+
+        public float getFloatValue() {
+            return mValue;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            if (value != null && value.getClass() == Float.class) {
+                mValue = (Float) value;
+                mHasValue = true;
+            }
+        }
+
+        @Override
+        public FloatKeyframe clone() {
+            FloatKeyframe kfClone = mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction());
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java
new file mode 100644
index 000000000..98a34ff67
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java
@@ -0,0 +1,200 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import android.util.Log;
+import android.view.animation.Interpolator;
+
+import org.telegram.ui.Animation.Keyframe.IntKeyframe;
+import org.telegram.ui.Animation.Keyframe.FloatKeyframe;
+import org.telegram.ui.Animation.Keyframe.ObjectKeyframe;
+
+class KeyframeSet {
+
+    int mNumKeyframes;
+
+    Keyframe mFirstKeyframe;
+    Keyframe mLastKeyframe;
+    Interpolator mInterpolator;
+    ArrayList<Keyframe> mKeyframes;
+    TypeEvaluator mEvaluator;
+
+    public KeyframeSet(Keyframe... keyframes) {
+        mNumKeyframes = keyframes.length;
+        mKeyframes = new ArrayList<Keyframe>();
+        mKeyframes.addAll(Arrays.asList(keyframes));
+        mFirstKeyframe = mKeyframes.get(0);
+        mLastKeyframe = mKeyframes.get(mNumKeyframes - 1);
+        mInterpolator = mLastKeyframe.getInterpolator();
+    }
+
+    public static KeyframeSet ofInt(int... values) {
+        int numKeyframes = values.length;
+        IntKeyframe keyframes[] = new IntKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (IntKeyframe) Keyframe.ofInt(0f);
+            keyframes[1] = (IntKeyframe) Keyframe.ofInt(1f, values[0]);
+        } else {
+            keyframes[0] = (IntKeyframe) Keyframe.ofInt(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (IntKeyframe) Keyframe.ofInt((float) i / (numKeyframes - 1), values[i]);
+            }
+        }
+        return new IntKeyframeSet(keyframes);
+    }
+
+    public static KeyframeSet ofFloat(float... values) {
+        boolean badValue = false;
+        int numKeyframes = values.length;
+        FloatKeyframe keyframes[] = new FloatKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
+            keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
+            if (Float.isNaN(values[0])) {
+                badValue = true;
+            }
+        } else {
+            keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
+                if (Float.isNaN(values[i])) {
+                    badValue = true;
+                }
+            }
+        }
+        if (badValue) {
+            Log.w("Animator", "Bad value (NaN) in float animator");
+        }
+        return new FloatKeyframeSet(keyframes);
+    }
+
+    public static KeyframeSet ofKeyframe(Keyframe... keyframes) {
+        int numKeyframes = keyframes.length;
+        boolean hasFloat = false;
+        boolean hasInt = false;
+        boolean hasOther = false;
+        for (Keyframe keyframe : keyframes) {
+            if (keyframe instanceof FloatKeyframe) {
+                hasFloat = true;
+            } else if (keyframe instanceof IntKeyframe) {
+                hasInt = true;
+            } else {
+                hasOther = true;
+            }
+        }
+        if (hasFloat && !hasInt && !hasOther) {
+            FloatKeyframe floatKeyframes[] = new FloatKeyframe[numKeyframes];
+            for (int i = 0; i < numKeyframes; ++i) {
+                floatKeyframes[i] = (FloatKeyframe) keyframes[i];
+            }
+            return new FloatKeyframeSet(floatKeyframes);
+        } else if (hasInt && !hasFloat && !hasOther) {
+            IntKeyframe intKeyframes[] = new IntKeyframe[numKeyframes];
+            for (int i = 0; i < numKeyframes; ++i) {
+                intKeyframes[i] = (IntKeyframe) keyframes[i];
+            }
+            return new IntKeyframeSet(intKeyframes);
+        } else {
+            return new KeyframeSet(keyframes);
+        }
+    }
+
+    public static KeyframeSet ofObject(Object... values) {
+        int numKeyframes = values.length;
+        ObjectKeyframe keyframes[] = new ObjectKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (ObjectKeyframe) Keyframe.ofObject(0f);
+            keyframes[1] = (ObjectKeyframe) Keyframe.ofObject(1f, values[0]);
+        } else {
+            keyframes[0] = (ObjectKeyframe) Keyframe.ofObject(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (ObjectKeyframe) Keyframe.ofObject((float) i / (numKeyframes - 1), values[i]);
+            }
+        }
+        return new KeyframeSet(keyframes);
+    }
+
+    public void setEvaluator(TypeEvaluator evaluator) {
+        mEvaluator = evaluator;
+    }
+
+    @Override
+    public KeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        Keyframe[] newKeyframes = new Keyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = keyframes.get(i).clone();
+        }
+        return new KeyframeSet(newKeyframes);
+    }
+
+    @SuppressWarnings("unchecked")
+    public Object getValue(float fraction) {
+        if (mNumKeyframes == 2) {
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            return mEvaluator.evaluate(fraction, mFirstKeyframe.getValue(), mLastKeyframe.getValue());
+        }
+        if (fraction <= 0f) {
+            final Keyframe nextKeyframe = mKeyframes.get(1);
+            final Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            final float prevFraction = mFirstKeyframe.getFraction();
+            float intervalFraction = (fraction - prevFraction) / (nextKeyframe.getFraction() - prevFraction);
+            return mEvaluator.evaluate(intervalFraction, mFirstKeyframe.getValue(), nextKeyframe.getValue());
+        } else if (fraction >= 1f) {
+            final Keyframe prevKeyframe = mKeyframes.get(mNumKeyframes - 2);
+            final Interpolator interpolator = mLastKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            final float prevFraction = prevKeyframe.getFraction();
+            float intervalFraction = (fraction - prevFraction) / (mLastKeyframe.getFraction() - prevFraction);
+            return mEvaluator.evaluate(intervalFraction, prevKeyframe.getValue(), mLastKeyframe.getValue());
+        }
+        Keyframe prevKeyframe = mFirstKeyframe;
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            Keyframe nextKeyframe = mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                final float prevFraction = prevKeyframe.getFraction();
+                float intervalFraction = (fraction - prevFraction) / (nextKeyframe.getFraction() - prevFraction);
+                return mEvaluator.evaluate(intervalFraction, prevKeyframe.getValue(), nextKeyframe.getValue());
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        return mLastKeyframe.getValue();
+    }
+
+    @Override
+    public String toString() {
+        String returnVal = " ";
+        for (int i = 0; i < mNumKeyframes; ++i) {
+            returnVal += mKeyframes.get(i).getValue() + "  ";
+        }
+        return returnVal;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/NoSuchPropertyException.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/NoSuchPropertyException.java
new file mode 100755
index 000000000..a3c59a4f4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/NoSuchPropertyException.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.ui.Animation;
+
+public class NoSuchPropertyException extends RuntimeException {
+
+    public NoSuchPropertyException(String s) {
+        super(s);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java
new file mode 100644
index 000000000..9f7ea7369
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java
@@ -0,0 +1,488 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.view.View;
+
+import java.util.HashMap;
+
+public final class ObjectAnimator10 extends ValueAnimator {
+
+    private static final HashMap<String, Property> PROXY_PROPERTIES = new HashMap<String, Property>();
+
+    static {
+        Property<View, Float> ALPHA = new FloatProperty10<View>("alpha") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setAlpha(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getAlpha();
+            }
+        };
+
+        Property<View, Float> PIVOT_X = new FloatProperty10<View>("pivotX") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setPivotX(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getPivotX();
+            }
+        };
+
+        Property<View, Float> PIVOT_Y = new FloatProperty10<View>("pivotY") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setPivotY(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getPivotY();
+            }
+        };
+
+        Property<View, Float> TRANSLATION_X = new FloatProperty10<View>("translationX") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setTranslationX(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getTranslationX();
+            }
+        };
+
+        Property<View, Float> TRANSLATION_Y = new FloatProperty10<View>("translationY") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setTranslationY(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getTranslationY();
+            }
+        };
+
+        Property<View, Float> ROTATION = new FloatProperty10<View>("rotation") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setRotation(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getRotation();
+            }
+        };
+
+        Property<View, Float> ROTATION_X = new FloatProperty10<View>("rotationX") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setRotationX(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getRotationX();
+            }
+        };
+
+        Property<View, Float> ROTATION_Y = new FloatProperty10<View>("rotationY") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setRotationY(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getRotationY();
+            }
+        };
+
+        Property<View, Float> SCALE_X = new FloatProperty10<View>("scaleX") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setScaleX(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getScaleX();
+            }
+        };
+
+        Property<View, Float> SCALE_Y = new FloatProperty10<View>("scaleY") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setScaleY(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getScaleY();
+            }
+        };
+
+        Property<View, Integer> SCROLL_X = new IntProperty<View>("scrollX") {
+            @Override
+            public void setValue(View object, int value) {
+                View10.wrap(object).setScrollX(value);
+            }
+
+            @Override
+            public Integer get(View object) {
+                return View10.wrap(object).getScrollX();
+            }
+        };
+
+        Property<View, Integer> SCROLL_Y = new IntProperty<View>("scrollY") {
+            @Override
+            public void setValue(View object, int value) {
+                View10.wrap(object).setScrollY(value);
+            }
+
+            @Override
+            public Integer get(View object) {
+                return View10.wrap(object).getScrollY();
+            }
+        };
+
+        Property<View, Float> X = new FloatProperty10<View>("x") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setX(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getX();
+            }
+        };
+
+        Property<View, Float> Y = new FloatProperty10<View>("y") {
+            @Override
+            public void setValue(View object, float value) {
+                View10.wrap(object).setY(value);
+            }
+
+            @Override
+            public Float get(View object) {
+                return View10.wrap(object).getY();
+            }
+        };
+
+        PROXY_PROPERTIES.put("alpha", ALPHA);
+        PROXY_PROPERTIES.put("pivotX", PIVOT_X);
+        PROXY_PROPERTIES.put("pivotY", PIVOT_Y);
+        PROXY_PROPERTIES.put("translationX", TRANSLATION_X);
+        PROXY_PROPERTIES.put("translationY", TRANSLATION_Y);
+        PROXY_PROPERTIES.put("rotation", ROTATION);
+        PROXY_PROPERTIES.put("rotationX", ROTATION_X);
+        PROXY_PROPERTIES.put("rotationY", ROTATION_Y);
+        PROXY_PROPERTIES.put("scaleX", SCALE_X);
+        PROXY_PROPERTIES.put("scaleY", SCALE_Y);
+        PROXY_PROPERTIES.put("scrollX", SCROLL_X);
+        PROXY_PROPERTIES.put("scrollY", SCROLL_Y);
+        PROXY_PROPERTIES.put("x", X);
+        PROXY_PROPERTIES.put("y", Y);
+    }
+
+    private Object mTarget;
+    private String mPropertyName;
+    private Property mProperty;
+    private boolean mAutoCancel = false;
+
+    public void setPropertyName(String propertyName) {
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setPropertyName(propertyName);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(propertyName, valuesHolder);
+        }
+        mPropertyName = propertyName;
+        mInitialized = false;
+    }
+
+    public void setProperty(Property property) {
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setProperty(property);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(mPropertyName, valuesHolder);
+        }
+        if (mProperty != null) {
+            mPropertyName = property.getName();
+        }
+        mProperty = property;
+        mInitialized = false;
+    }
+
+    public String getPropertyName() {
+        String propertyName = null;
+        if (mPropertyName != null) {
+            propertyName = mPropertyName;
+        } else if (mProperty != null) {
+            propertyName = mProperty.getName();
+        } else if (mValues != null && mValues.length > 0) {
+            for (int i = 0; i < mValues.length; ++i) {
+                if (i == 0) {
+                    propertyName = "";
+                } else {
+                    propertyName += ",";
+                }
+                propertyName += mValues[i].getPropertyName();
+            }
+        }
+        return propertyName;
+    }
+
+    public ObjectAnimator10() {
+
+    }
+
+    private ObjectAnimator10(Object target, String propertyName) {
+        mTarget = target;
+        setPropertyName(propertyName);
+    }
+
+    private <T> ObjectAnimator10(T target, Property<T, ?> property) {
+        mTarget = target;
+        setProperty(property);
+    }
+
+    public static ObjectAnimator10 ofInt(Object target, String propertyName, int... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, propertyName);
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    public static <T> ObjectAnimator10 ofInt(T target, Property<T, Integer> property, int... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, property);
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    public static ObjectAnimator10 ofFloat(Object target, String propertyName, float... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, propertyName);
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    public static <T> ObjectAnimator10 ofFloat(T target, Property<T, Float> property, float... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, property);
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    public static ObjectAnimator10 ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, propertyName);
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    public static <T, V> ObjectAnimator10 ofObject(T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10(target, property);
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    public static ObjectAnimator10 ofPropertyValuesHolder(Object target, PropertyValuesHolder... values) {
+        ObjectAnimator10 anim = new ObjectAnimator10();
+        anim.mTarget = target;
+        anim.setValues(values);
+        return anim;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void setIntValues(int... values) {
+        if (mValues == null || mValues.length == 0) {
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofInt(mProperty, values));
+            } else {
+                setValues(PropertyValuesHolder.ofInt(mPropertyName, values));
+            }
+        } else {
+            super.setIntValues(values);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void setFloatValues(float... values) {
+        if (mValues == null || mValues.length == 0) {
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofFloat(mProperty, values));
+            } else {
+                setValues(PropertyValuesHolder.ofFloat(mPropertyName, values));
+            }
+        } else {
+            super.setFloatValues(values);
+        }
+    }
+
+    @Override
+    public void setObjectValues(Object... values) {
+        if (mValues == null || mValues.length == 0) {
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofObject(mProperty, null, values));
+            } else {
+                setValues(PropertyValuesHolder.ofObject(mPropertyName, null, values));
+            }
+        } else {
+            super.setObjectValues(values);
+        }
+    }
+
+    public void setAutoCancel(boolean cancel) {
+        mAutoCancel = cancel;
+    }
+
+    private boolean hasSameTargetAndProperties(Animator10 anim) {
+        if (anim instanceof ObjectAnimator10) {
+            PropertyValuesHolder[] theirValues = ((ObjectAnimator10) anim).getValues();
+            if (((ObjectAnimator10) anim).getTarget() == mTarget &&
+                    mValues.length == theirValues.length) {
+                for (int i = 0; i < mValues.length; ++i) {
+                    PropertyValuesHolder pvhMine = mValues[i];
+                    PropertyValuesHolder pvhTheirs = theirValues[i];
+                    if (pvhMine.getPropertyName() == null ||
+                            !pvhMine.getPropertyName().equals(pvhTheirs.getPropertyName())) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public void start() {
+        AnimationHandler handler = sAnimationHandler.get();
+        if (handler != null) {
+            int numAnims = handler.mAnimations.size();
+            for (int i = numAnims - 1; i >= 0; i--) {
+                if (handler.mAnimations.get(i) instanceof ObjectAnimator10) {
+                    ObjectAnimator10 anim = (ObjectAnimator10) handler.mAnimations.get(i);
+                    if (anim.mAutoCancel && hasSameTargetAndProperties(anim)) {
+                        anim.cancel();
+                    }
+                }
+            }
+            numAnims = handler.mPendingAnimations.size();
+            for (int i = numAnims - 1; i >= 0; i--) {
+                if (handler.mPendingAnimations.get(i) instanceof ObjectAnimator10) {
+                    ObjectAnimator10 anim = (ObjectAnimator10) handler.mPendingAnimations.get(i);
+                    if (anim.mAutoCancel && hasSameTargetAndProperties(anim)) {
+                        anim.cancel();
+                    }
+                }
+            }
+            numAnims = handler.mDelayedAnims.size();
+            for (int i = numAnims - 1; i >= 0; i--) {
+                if (handler.mDelayedAnims.get(i) instanceof ObjectAnimator10) {
+                    ObjectAnimator10 anim = (ObjectAnimator10) handler.mDelayedAnims.get(i);
+                    if (anim.mAutoCancel && hasSameTargetAndProperties(anim)) {
+                        anim.cancel();
+                    }
+                }
+            }
+        }
+        super.start();
+    }
+
+    @Override
+    void initAnimation() {
+        if (!mInitialized) {
+            if ((mProperty == null) && (mTarget instanceof View) && PROXY_PROPERTIES.containsKey(mPropertyName)) {
+                setProperty(PROXY_PROPERTIES.get(mPropertyName));
+            }
+            int numValues = mValues.length;
+            for (PropertyValuesHolder mValue : mValues) {
+                mValue.setupSetterAndGetter(mTarget);
+            }
+            super.initAnimation();
+        }
+    }
+
+    @Override
+    public ObjectAnimator10 setDuration(long duration) {
+        super.setDuration(duration);
+        return this;
+    }
+
+    public Object getTarget() {
+        return mTarget;
+    }
+
+    @Override
+    public void setTarget(Object target) {
+        if (mTarget != target) {
+            final Object oldTarget = mTarget;
+            mTarget = target;
+            if (oldTarget != null && target != null && oldTarget.getClass() == target.getClass()) {
+                return;
+            }
+            mInitialized = false;
+        }
+    }
+
+    @Override
+    public void setupStartValues() {
+        initAnimation();
+        int numValues = mValues.length;
+        for (PropertyValuesHolder mValue : mValues) {
+            mValue.setupStartValue(mTarget);
+        }
+    }
+
+    @Override
+    public void setupEndValues() {
+        initAnimation();
+        int numValues = mValues.length;
+        for (PropertyValuesHolder mValue : mValues) {
+            mValue.setupEndValue(mTarget);
+        }
+    }
+
+    @Override
+    void animateValue(float fraction) {
+        super.animateValue(fraction);
+        int numValues = mValues.length;
+        for (PropertyValuesHolder mValue : mValues) {
+            mValue.setAnimatedValue(mTarget);
+        }
+    }
+
+    @Override
+    public ObjectAnimator10 clone() {
+        return (ObjectAnimator10) super.clone();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java
new file mode 100755
index 000000000..96beb2109
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.ui.Animation;
+
+public abstract class Property<T, V> {
+
+    private final String mName;
+    private final Class<V> mType;
+
+    public static <T, V> Property<T, V> of(Class<T> hostType, Class<V> valueType, String name) {
+        return new ReflectiveProperty<T, V>(hostType, valueType, name);
+    }
+
+    public Property(Class<V> type, String name) {
+        mName = name;
+        mType = type;
+    }
+
+    public boolean isReadOnly() {
+        return false;
+    }
+
+    public void set(T object, V value) {
+        throw new UnsupportedOperationException("Property " + getName() +" is read-only");
+    }
+
+    public abstract V get(T object);
+
+    public String getName() {
+        return mName;
+    }
+
+    public Class<V> getType() {
+        return mType;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java
new file mode 100644
index 000000000..d01e4d9c7
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java
@@ -0,0 +1,556 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+public class PropertyValuesHolder implements Cloneable {
+
+    String mPropertyName;
+    protected Property mProperty;
+    Method mSetter = null;
+    private Method mGetter = null;
+    Class mValueType;
+    KeyframeSet mKeyframeSet = null;
+
+    private static final TypeEvaluator sIntEvaluator = new IntEvaluator();
+    private static final TypeEvaluator sFloatEvaluator = new FloatEvaluator();
+
+    private static Class[] FLOAT_VARIANTS = {float.class, Float.class, double.class, int.class, Double.class, Integer.class};
+    private static Class[] INTEGER_VARIANTS = {int.class, Integer.class, float.class, double.class, Float.class, Double.class};
+    private static Class[] DOUBLE_VARIANTS = {double.class, Double.class, float.class, int.class, Float.class, Integer.class};
+
+    private static final HashMap<Class, HashMap<String, Method>> sSetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
+    private static final HashMap<Class, HashMap<String, Method>> sGetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
+
+    final ReentrantReadWriteLock mPropertyMapLock = new ReentrantReadWriteLock();
+    final Object[] mTmpValueArray = new Object[1];
+
+    private TypeEvaluator mEvaluator;
+
+    private Object mAnimatedValue;
+
+    private PropertyValuesHolder(String propertyName) {
+        mPropertyName = propertyName;
+    }
+
+    private PropertyValuesHolder(Property property) {
+        mProperty = property;
+        if (property != null) {
+            mPropertyName = property.getName();
+        }
+    }
+
+    public static PropertyValuesHolder ofInt(String propertyName, int... values) {
+        return new IntPropertyValuesHolder(propertyName, values);
+    }
+
+    public static PropertyValuesHolder ofInt(Property<?, Integer> property, int... values) {
+        return new IntPropertyValuesHolder(property, values);
+    }
+
+    public static PropertyValuesHolder ofFloat(String propertyName, float... values) {
+        return new FloatPropertyValuesHolder(propertyName, values);
+    }
+
+    public static PropertyValuesHolder ofFloat(Property<?, Float> property, float... values) {
+        return new FloatPropertyValuesHolder(property, values);
+    }
+
+    public static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator,
+                                                Object... values) {
+        PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
+        pvh.setObjectValues(values);
+        pvh.setEvaluator(evaluator);
+        return pvh;
+    }
+
+    public static <V> PropertyValuesHolder ofObject(Property property,
+                                                    TypeEvaluator<V> evaluator, V... values) {
+        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
+        pvh.setObjectValues(values);
+        pvh.setEvaluator(evaluator);
+        return pvh;
+    }
+
+    public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values) {
+        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
+        if (keyframeSet instanceof IntKeyframeSet) {
+            return new IntPropertyValuesHolder(propertyName, (IntKeyframeSet) keyframeSet);
+        } else if (keyframeSet instanceof FloatKeyframeSet) {
+            return new FloatPropertyValuesHolder(propertyName, (FloatKeyframeSet) keyframeSet);
+        } else {
+            PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
+            pvh.mKeyframeSet = keyframeSet;
+            pvh.mValueType = values[0].getType();
+            return pvh;
+        }
+    }
+
+    public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values) {
+        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
+        if (keyframeSet instanceof IntKeyframeSet) {
+            return new IntPropertyValuesHolder(property, (IntKeyframeSet) keyframeSet);
+        } else if (keyframeSet instanceof FloatKeyframeSet) {
+            return new FloatPropertyValuesHolder(property, (FloatKeyframeSet) keyframeSet);
+        } else {
+            PropertyValuesHolder pvh = new PropertyValuesHolder(property);
+            pvh.mKeyframeSet = keyframeSet;
+            pvh.mValueType = values[0].getType();
+            return pvh;
+        }
+    }
+
+    public void setIntValues(int... values) {
+        mValueType = int.class;
+        mKeyframeSet = KeyframeSet.ofInt(values);
+    }
+
+    public void setFloatValues(float... values) {
+        mValueType = float.class;
+        mKeyframeSet = KeyframeSet.ofFloat(values);
+    }
+
+    public void setKeyframes(Keyframe... values) {
+        int numKeyframes = values.length;
+        Keyframe keyframes[] = new Keyframe[Math.max(numKeyframes, 2)];
+        mValueType = values[0].getType();
+        System.arraycopy(values, 0, keyframes, 0, numKeyframes);
+        mKeyframeSet = new KeyframeSet(keyframes);
+    }
+
+    public void setObjectValues(Object... values) {
+        mValueType = values[0].getClass();
+        mKeyframeSet = KeyframeSet.ofObject(values);
+    }
+
+    @SuppressWarnings("unchecked")
+    private Method getPropertyFunction(Class targetClass, String prefix, Class valueType) {
+        Method returnVal = null;
+        String methodName = getMethodName(prefix, mPropertyName);
+        Class args[] = null;
+        if (valueType == null) {
+            try {
+                returnVal = targetClass.getMethod(methodName);
+            } catch (NoSuchMethodException e) {
+                try {
+                    returnVal = targetClass.getDeclaredMethod(methodName);
+                    returnVal.setAccessible(true);
+                } catch (NoSuchMethodException e2) {
+                    e2.printStackTrace();
+                }
+            }
+        } else {
+            args = new Class[1];
+            Class typeVariants[];
+            if (mValueType.equals(Float.class)) {
+                typeVariants = FLOAT_VARIANTS;
+            } else if (mValueType.equals(Integer.class)) {
+                typeVariants = INTEGER_VARIANTS;
+            } else if (mValueType.equals(Double.class)) {
+                typeVariants = DOUBLE_VARIANTS;
+            } else {
+                typeVariants = new Class[1];
+                typeVariants[0] = mValueType;
+            }
+            for (Class typeVariant : typeVariants) {
+                args[0] = typeVariant;
+                try {
+                    returnVal = targetClass.getMethod(methodName, args);
+                    mValueType = typeVariant;
+                    return returnVal;
+                } catch (NoSuchMethodException e) {
+                    try {
+                        returnVal = targetClass.getDeclaredMethod(methodName, args);
+                        returnVal.setAccessible(true);
+                        mValueType = typeVariant;
+                        return returnVal;
+                    } catch (NoSuchMethodException e2) {
+                        // Swallow the error and keep trying other variants
+                    }
+                }
+            }
+        }
+
+        return returnVal;
+    }
+
+    private Method setupSetterOrGetter(Class targetClass, HashMap<Class, HashMap<String, Method>> propertyMapMap, String prefix, Class valueType) {
+        Method setterOrGetter = null;
+        try {
+            mPropertyMapLock.writeLock().lock();
+            HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);
+            if (propertyMap != null) {
+                setterOrGetter = propertyMap.get(mPropertyName);
+            }
+            if (setterOrGetter == null) {
+                setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);
+                if (propertyMap == null) {
+                    propertyMap = new HashMap<String, Method>();
+                    propertyMapMap.put(targetClass, propertyMap);
+                }
+                propertyMap.put(mPropertyName, setterOrGetter);
+            }
+        } finally {
+            mPropertyMapLock.writeLock().unlock();
+        }
+        return setterOrGetter;
+    }
+
+    void setupSetter(Class targetClass) {
+        mSetter = setupSetterOrGetter(targetClass, sSetterPropertyMap, "set", mValueType);
+    }
+
+    private void setupGetter(Class targetClass) {
+        mGetter = setupSetterOrGetter(targetClass, sGetterPropertyMap, "get", null);
+    }
+
+    @SuppressWarnings("unchecked")
+    void setupSetterAndGetter(Object target) {
+        if (mProperty != null) {
+            try {
+                Object testValue = mProperty.get(target);
+                for (Keyframe kf : mKeyframeSet.mKeyframes) {
+                    if (!kf.hasValue()) {
+                        kf.setValue(mProperty.get(target));
+                    }
+                }
+                return;
+            } catch (ClassCastException e) {
+                mProperty = null;
+            }
+        }
+        Class targetClass = target.getClass();
+        if (mSetter == null) {
+            setupSetter(targetClass);
+        }
+        for (Keyframe kf : mKeyframeSet.mKeyframes) {
+            if (!kf.hasValue()) {
+                if (mGetter == null) {
+                    setupGetter(targetClass);
+                    if (mGetter == null) {
+                        return;
+                    }
+                }
+                try {
+                    kf.setValue(mGetter.invoke(target));
+                } catch (InvocationTargetException e) {
+                    e.printStackTrace();
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void setupValue(Object target, Keyframe kf) {
+        if (mProperty != null) {
+            kf.setValue(mProperty.get(target));
+        }
+        try {
+            if (mGetter == null) {
+                Class targetClass = target.getClass();
+                setupGetter(targetClass);
+                if (mGetter == null) {
+                    return;
+                }
+            }
+            kf.setValue(mGetter.invoke(target));
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    void setupStartValue(Object target) {
+        setupValue(target, mKeyframeSet.mKeyframes.get(0));
+    }
+
+    void setupEndValue(Object target) {
+        setupValue(target, mKeyframeSet.mKeyframes.get(mKeyframeSet.mKeyframes.size() - 1));
+    }
+
+    @Override
+    public PropertyValuesHolder clone() {
+        try {
+            PropertyValuesHolder newPVH = (PropertyValuesHolder) super.clone();
+            newPVH.mPropertyName = mPropertyName;
+            newPVH.mProperty = mProperty;
+            newPVH.mKeyframeSet = mKeyframeSet.clone();
+            newPVH.mEvaluator = mEvaluator;
+            return newPVH;
+        } catch (CloneNotSupportedException e) {
+            return null;
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    void setAnimatedValue(Object target) {
+        if (mProperty != null) {
+            mProperty.set(target, getAnimatedValue());
+        }
+        if (mSetter != null) {
+            try {
+                mTmpValueArray[0] = getAnimatedValue();
+                mSetter.invoke(target, mTmpValueArray);
+            } catch (InvocationTargetException e) {
+                e.printStackTrace();
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    void init() {
+        if (mEvaluator == null) {
+            mEvaluator = (mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;
+        }
+        if (mEvaluator != null) {
+            mKeyframeSet.setEvaluator(mEvaluator);
+        }
+    }
+
+    public void setEvaluator(TypeEvaluator evaluator) {
+        mEvaluator = evaluator;
+        mKeyframeSet.setEvaluator(evaluator);
+    }
+
+    void calculateValue(float fraction) {
+        mAnimatedValue = mKeyframeSet.getValue(fraction);
+    }
+
+    public void setPropertyName(String propertyName) {
+        mPropertyName = propertyName;
+    }
+
+    public void setProperty(Property property) {
+        mProperty = property;
+    }
+
+    public String getPropertyName() {
+        return mPropertyName;
+    }
+
+    Object getAnimatedValue() {
+        return mAnimatedValue;
+    }
+
+    @Override
+    public String toString() {
+        return mPropertyName + ": " + mKeyframeSet.toString();
+    }
+
+    static String getMethodName(String prefix, String propertyName) {
+        if (propertyName == null || propertyName.length() == 0) {
+            return prefix;
+        }
+        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
+        String theRest = propertyName.substring(1);
+        return prefix + firstLetter + theRest;
+    }
+
+    static class IntPropertyValuesHolder extends PropertyValuesHolder {
+        private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap = new HashMap<Class, HashMap<String, Integer>>();
+        private IntProperty mIntProperty;
+
+        IntKeyframeSet mIntKeyframeSet;
+        int mIntAnimatedValue;
+
+        public IntPropertyValuesHolder(String propertyName, IntKeyframeSet keyframeSet) {
+            super(propertyName);
+            mValueType = int.class;
+            mKeyframeSet = keyframeSet;
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+        }
+
+        public IntPropertyValuesHolder(Property property, IntKeyframeSet keyframeSet) {
+            super(property);
+            mValueType = int.class;
+            mKeyframeSet = keyframeSet;
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+            if (property instanceof IntProperty) {
+                mIntProperty = (IntProperty) mProperty;
+            }
+        }
+
+        public IntPropertyValuesHolder(String propertyName, int... values) {
+            super(propertyName);
+            setIntValues(values);
+        }
+
+        public IntPropertyValuesHolder(Property property, int... values) {
+            super(property);
+            setIntValues(values);
+            if (property instanceof IntProperty) {
+                mIntProperty = (IntProperty) mProperty;
+            }
+        }
+
+        @Override
+        public void setIntValues(int... values) {
+            super.setIntValues(values);
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+        }
+
+        @Override
+        void calculateValue(float fraction) {
+            mIntAnimatedValue = mIntKeyframeSet.getIntValue(fraction);
+        }
+
+        @Override
+        Object getAnimatedValue() {
+            return mIntAnimatedValue;
+        }
+
+        @Override
+        public IntPropertyValuesHolder clone() {
+            IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
+            newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        void setAnimatedValue(Object target) {
+            if (mIntProperty != null) {
+                mIntProperty.setValue(target, mIntAnimatedValue);
+                return;
+            }
+            if (mProperty != null) {
+                mProperty.set(target, mIntAnimatedValue);
+                return;
+            }
+            if (mSetter != null) {
+                try {
+                    mTmpValueArray[0] = mIntAnimatedValue;
+                    mSetter.invoke(target, mTmpValueArray);
+                } catch (InvocationTargetException e) {
+                    e.printStackTrace();
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        @Override
+        void setupSetter(Class targetClass) {
+            if (mProperty != null) {
+                return;
+            }
+
+            super.setupSetter(targetClass);
+        }
+    }
+
+    static class FloatPropertyValuesHolder extends PropertyValuesHolder {
+
+        private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap = new HashMap<Class, HashMap<String, Integer>>();
+        private FloatProperty10 mFloatProperty;
+
+        FloatKeyframeSet mFloatKeyframeSet;
+        float mFloatAnimatedValue;
+
+        public FloatPropertyValuesHolder(String propertyName, FloatKeyframeSet keyframeSet) {
+            super(propertyName);
+            mValueType = float.class;
+            mKeyframeSet = keyframeSet;
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+        }
+
+        public FloatPropertyValuesHolder(Property property, FloatKeyframeSet keyframeSet) {
+            super(property);
+            mValueType = float.class;
+            mKeyframeSet = keyframeSet;
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+            if (property instanceof FloatProperty10) {
+                mFloatProperty = (FloatProperty10) mProperty;
+            }
+        }
+
+        public FloatPropertyValuesHolder(String propertyName, float... values) {
+            super(propertyName);
+            setFloatValues(values);
+        }
+
+        public FloatPropertyValuesHolder(Property property, float... values) {
+            super(property);
+            setFloatValues(values);
+            if (property instanceof FloatProperty10) {
+                mFloatProperty = (FloatProperty10) mProperty;
+            }
+        }
+
+        @Override
+        public void setFloatValues(float... values) {
+            super.setFloatValues(values);
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+        }
+
+        @Override
+        void calculateValue(float fraction) {
+            mFloatAnimatedValue = mFloatKeyframeSet.getFloatValue(fraction);
+        }
+
+        @Override
+        Object getAnimatedValue() {
+            return mFloatAnimatedValue;
+        }
+
+        @Override
+        public FloatPropertyValuesHolder clone() {
+            FloatPropertyValuesHolder newPVH = (FloatPropertyValuesHolder) super.clone();
+            newPVH.mFloatKeyframeSet = (FloatKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        void setAnimatedValue(Object target) {
+            if (mFloatProperty != null) {
+                mFloatProperty.setValue(target, mFloatAnimatedValue);
+                return;
+            }
+            if (mProperty != null) {
+                mProperty.set(target, mFloatAnimatedValue);
+                return;
+            }
+            if (mSetter != null) {
+                try {
+                    mTmpValueArray[0] = mFloatAnimatedValue;
+                    mSetter.invoke(target, mTmpValueArray);
+                } catch (InvocationTargetException e) {
+                    e.printStackTrace();
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        @Override
+        void setupSetter(Class targetClass) {
+            if (mProperty != null) {
+                return;
+            }
+            super.setupSetter(targetClass);
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java
new file mode 100755
index 000000000..ce487b4ff
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.ui.Animation;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * Internal class to automatically generate a Property for a given class/name pair, given the
+ * specification of {@link Property#of(java.lang.Class, java.lang.Class, java.lang.String)}
+ */
+class ReflectiveProperty<T, V> extends Property<T, V> {
+
+    private static final String PREFIX_GET = "get";
+    private static final String PREFIX_IS = "is";
+    private static final String PREFIX_SET = "set";
+    private Method mSetter;
+    private Method mGetter;
+    private Field mField;
+
+    /**
+     * For given property name 'name', look for getName/isName method or 'name' field.
+     * Also look for setName method (optional - could be readonly). Failing method getters and
+     * field results in throwing NoSuchPropertyException.
+     *
+     * @param propertyHolder The class on which the methods or field are found
+     * @param name The name of the property, where this name is capitalized and appended to
+     * "get" and "is to search for the appropriate methods. If the get/is methods are not found,
+     * the constructor will search for a field with that exact name.
+     */
+    public ReflectiveProperty(Class<T> propertyHolder, Class<V> valueType, String name) {
+         // TODO: cache reflection info for each new class/name pair
+        super(valueType, name);
+        char firstLetter = Character.toUpperCase(name.charAt(0));
+        String theRest = name.substring(1);
+        String capitalizedName = firstLetter + theRest;
+        String getterName = PREFIX_GET + capitalizedName;
+        try {
+            mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
+        } catch (NoSuchMethodException e) {
+            try {
+                /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                 * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                 */
+                mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                mGetter.setAccessible(true);
+            } catch (NoSuchMethodException e2) {
+                // getName() not available - try isName() instead
+                getterName = PREFIX_IS + capitalizedName;
+                try {
+                    mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
+                } catch (NoSuchMethodException e3) {
+                    try {
+                        /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                         * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                         */
+                        mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                        mGetter.setAccessible(true);
+                    } catch (NoSuchMethodException e4) {
+                        // Try public field instead
+                        try {
+                            mField = propertyHolder.getField(name);
+                            Class fieldType = mField.getType();
+                            if (!typesMatch(valueType, fieldType)) {
+                                throw new NoSuchPropertyException("Underlying type (" + fieldType + ") " +
+                                        "does not match Property type (" + valueType + ")");
+                            }
+                            return;
+                        } catch (NoSuchFieldException e5) {
+                            // no way to access property - throw appropriate exception
+                            throw new NoSuchPropertyException("No accessor method or field found for"
+                                    + " property with name " + name);
+                        }
+                    }
+                }
+            }
+        }
+        Class getterType = mGetter.getReturnType();
+        // Check to make sure our getter type matches our valueType
+        if (!typesMatch(valueType, getterType)) {
+            throw new NoSuchPropertyException("Underlying type (" + getterType + ") " +
+                    "does not match Property type (" + valueType + ")");
+        }
+        String setterName = PREFIX_SET + capitalizedName;
+        try {
+            // mSetter = propertyHolder.getMethod(setterName, getterType);
+            // The native implementation uses JNI to do reflection, which allows access to private methods.
+            mSetter = propertyHolder.getDeclaredMethod(setterName, getterType);
+            mSetter.setAccessible(true);
+        } catch (NoSuchMethodException ignored) {
+            // Okay to not have a setter - just a readonly property
+        }
+    }
+
+    /**
+     * Utility method to check whether the type of the underlying field/method on the target
+     * object matches the type of the Property. The extra checks for primitive types are because
+     * generics will force the Property type to be a class, whereas the type of the underlying
+     * method/field will probably be a primitive type instead. Accept float as matching Float,
+     * etc.
+     */
+    private boolean typesMatch(Class<V> valueType, Class getterType) {
+        if (getterType != valueType) {
+            if (getterType.isPrimitive()) {
+                return (getterType == float.class && valueType == Float.class) ||
+                        (getterType == int.class && valueType == Integer.class) ||
+                        (getterType == boolean.class && valueType == Boolean.class) ||
+                        (getterType == long.class && valueType == Long.class) ||
+                        (getterType == double.class && valueType == Double.class) ||
+                        (getterType == short.class && valueType == Short.class) ||
+                        (getterType == byte.class && valueType == Byte.class) ||
+                        (getterType == char.class && valueType == Character.class);
+            }
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public void set(T object, V value) {
+        if (mSetter != null) {
+            try {
+                mSetter.invoke(object, value);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e.getCause());
+            }
+        } else if (mField != null) {
+            try {
+                mField.set(object, value);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            }
+        } else {
+            throw new UnsupportedOperationException("Property " + getName() +" is read-only");
+        }
+    }
+
+    @Override
+    public V get(T object) {
+        if (mGetter != null) {
+            try {
+                return (V) mGetter.invoke(object, (Object[])null);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e.getCause());
+            }
+        } else if (mField != null) {
+            try {
+                return (V) mField.get(object);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            }
+        }
+        // Should not get here: there should always be a non-null getter or field
+        throw new AssertionError();
+    }
+
+    /**
+     * Returns false if there is no setter or public field underlying this Property.
+     */
+    @Override
+    public boolean isReadOnly() {
+        return (mSetter == null && mField == null);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java
new file mode 100644
index 000000000..33de5d619
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+public interface TypeEvaluator<T> {
+    public T evaluate(float fraction, T startValue, T endValue);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
new file mode 100644
index 000000000..b4baca6de
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
@@ -0,0 +1,675 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.os.Looper;
+import android.util.AndroidRuntimeException;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.AnimationUtils;
+import android.view.animation.Interpolator;
+import android.view.animation.LinearInterpolator;
+
+import org.telegram.android.AndroidUtilities;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class ValueAnimator extends Animator10 {
+
+    private static float sDurationScale = 1.0f;
+    static final int STOPPED    = 0;
+    static final int RUNNING    = 1;
+    static final int SEEKED     = 2;
+
+    long mStartTime;
+    long mSeekTime = -1;
+    private long mPauseTime;
+    private boolean mResumed = false;
+    protected static ThreadLocal<AnimationHandler> sAnimationHandler = new ThreadLocal<AnimationHandler>();
+    private static final Interpolator sDefaultInterpolator = new AccelerateDecelerateInterpolator();
+    private boolean mPlayingBackwards = false;
+    private int mCurrentIteration = 0;
+    private float mCurrentFraction = 0f;
+    private boolean mStartedDelay = false;
+    private long mDelayStartTime;
+    int mPlayingState = STOPPED;
+    private boolean mRunning = false;
+    private boolean mStarted = false;
+    private boolean mStartListenersCalled = false;
+    boolean mInitialized = false;
+
+    private long mDuration = (long)(300 * sDurationScale);
+    private long mUnscaledDuration = 300;
+    private long mStartDelay = 0;
+    private long mUnscaledStartDelay = 0;
+    private int mRepeatCount = 0;
+    private int mRepeatMode = RESTART;
+    private Interpolator mInterpolator = sDefaultInterpolator;
+    private ArrayList<AnimatorUpdateListener> mUpdateListeners = null;
+    PropertyValuesHolder[] mValues;
+    HashMap<String, PropertyValuesHolder> mValuesMap;
+
+    public static final int RESTART = 1;
+    public static final int REVERSE = 2;
+    public static final int INFINITE = -1;
+
+    public static void setDurationScale(float durationScale) {
+        sDurationScale = durationScale;
+    }
+
+    public static float getDurationScale() {
+        return sDurationScale;
+    }
+
+    public ValueAnimator() {
+
+    }
+
+    public static ValueAnimator ofInt(int... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    public static ValueAnimator ofFloat(float... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    public static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setValues(values);
+        return anim;
+    }
+
+    public static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    public void setIntValues(int... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(PropertyValuesHolder.ofInt("", values));
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setIntValues(values);
+        }
+        mInitialized = false;
+    }
+
+    public void setFloatValues(float... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(PropertyValuesHolder.ofFloat("", values));
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setFloatValues(values);
+        }
+        mInitialized = false;
+    }
+
+    public void setObjectValues(Object... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(PropertyValuesHolder.ofObject("", null, values));
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setObjectValues(values);
+        }
+        mInitialized = false;
+    }
+
+    public void setValues(PropertyValuesHolder... values) {
+        int numValues = values.length;
+        mValues = values;
+        mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);
+        for (PropertyValuesHolder valuesHolder : values) {
+            mValuesMap.put(valuesHolder.getPropertyName(), valuesHolder);
+        }
+        mInitialized = false;
+    }
+
+    public PropertyValuesHolder[] getValues() {
+        return mValues;
+    }
+
+    void initAnimation() {
+        if (!mInitialized) {
+            int numValues = mValues.length;
+            for (PropertyValuesHolder mValue : mValues) {
+                mValue.init();
+            }
+            mInitialized = true;
+        }
+    }
+
+    public ValueAnimator setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " + duration);
+        }
+        mUnscaledDuration = duration;
+        mDuration = (long)(duration * sDurationScale);
+        return this;
+    }
+
+    public long getDuration() {
+        return mUnscaledDuration;
+    }
+
+    public void setCurrentPlayTime(long playTime) {
+        initAnimation();
+        long currentTime = AnimationUtils.currentAnimationTimeMillis();
+        if (mPlayingState != RUNNING) {
+            mSeekTime = playTime;
+            mPlayingState = SEEKED;
+        }
+        mStartTime = currentTime - playTime;
+        doAnimationFrame(currentTime);
+    }
+
+    public long getCurrentPlayTime() {
+        if (!mInitialized || mPlayingState == STOPPED) {
+            return 0;
+        }
+        return AnimationUtils.currentAnimationTimeMillis() - mStartTime;
+    }
+
+    @SuppressWarnings("unchecked")
+    protected static class AnimationHandler implements Runnable {
+
+        protected final ArrayList<ValueAnimator> mAnimations = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mTmpAnimations = new ArrayList<ValueAnimator>();
+        protected final ArrayList<ValueAnimator> mPendingAnimations = new ArrayList<ValueAnimator>();
+        protected final ArrayList<ValueAnimator> mDelayedAnims = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mEndingAnims = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mReadyAnims = new ArrayList<ValueAnimator>();
+
+        private boolean mAnimationScheduled;
+
+        public void start() {
+            scheduleAnimation();
+        }
+
+        private void doAnimationFrame(long frameTime) {
+            while (mPendingAnimations.size() > 0) {
+                ArrayList<ValueAnimator> pendingCopy = (ArrayList<ValueAnimator>) mPendingAnimations.clone();
+                mPendingAnimations.clear();
+                int count = pendingCopy.size();
+                for (ValueAnimator anim : pendingCopy) {
+                    if (anim.mStartDelay == 0) {
+                        anim.startAnimation(this);
+                    } else {
+                        mDelayedAnims.add(anim);
+                    }
+                }
+            }
+
+            int numDelayedAnims = mDelayedAnims.size();
+            for (ValueAnimator anim : mDelayedAnims) {
+                if (anim.delayedAnimationFrame(frameTime)) {
+                    mReadyAnims.add(anim);
+                }
+            }
+            int numReadyAnims = mReadyAnims.size();
+            if (numReadyAnims > 0) {
+                for (ValueAnimator anim : mReadyAnims) {
+                    anim.startAnimation(this);
+                    anim.mRunning = true;
+                    mDelayedAnims.remove(anim);
+                }
+                mReadyAnims.clear();
+            }
+
+            int numAnims = mAnimations.size();
+            for (ValueAnimator mAnimation : mAnimations) {
+                mTmpAnimations.add(mAnimation);
+            }
+            for (int i = 0; i < numAnims; ++i) {
+                ValueAnimator anim = mTmpAnimations.get(i);
+                if (mAnimations.contains(anim) && anim.doAnimationFrame(frameTime)) {
+                    mEndingAnims.add(anim);
+                }
+            }
+            mTmpAnimations.clear();
+            if (mEndingAnims.size() > 0) {
+                for (ValueAnimator mEndingAnim : mEndingAnims) {
+                    mEndingAnim.endAnimation(this);
+                }
+                mEndingAnims.clear();
+            }
+
+            if (!mAnimations.isEmpty() || !mDelayedAnims.isEmpty()) {
+                scheduleAnimation();
+            }
+        }
+
+        @Override
+        public void run() {
+            mAnimationScheduled = false;
+            doAnimationFrame(System.nanoTime() / 1000000);
+        }
+
+        private void scheduleAnimation() {
+            if (!mAnimationScheduled) {
+                AndroidUtilities.runOnUIThread(this);
+                mAnimationScheduled = true;
+            }
+        }
+    }
+
+    public long getStartDelay() {
+        return mUnscaledStartDelay;
+    }
+
+    public void setStartDelay(long startDelay) {
+        this.mStartDelay = (long)(startDelay * sDurationScale);
+        mUnscaledStartDelay = startDelay;
+    }
+
+    public Object getAnimatedValue() {
+        if (mValues != null && mValues.length > 0) {
+            return mValues[0].getAnimatedValue();
+        }
+        return null;
+    }
+
+    public Object getAnimatedValue(String propertyName) {
+        PropertyValuesHolder valuesHolder = mValuesMap.get(propertyName);
+        if (valuesHolder != null) {
+            return valuesHolder.getAnimatedValue();
+        } else {
+            return null;
+        }
+    }
+
+    public void setRepeatCount(int value) {
+        mRepeatCount = value;
+    }
+
+    public int getRepeatCount() {
+        return mRepeatCount;
+    }
+
+    public void setRepeatMode(int value) {
+        mRepeatMode = value;
+    }
+
+    public int getRepeatMode() {
+        return mRepeatMode;
+    }
+
+    public void addUpdateListener(AnimatorUpdateListener listener) {
+        if (mUpdateListeners == null) {
+            mUpdateListeners = new ArrayList<AnimatorUpdateListener>();
+        }
+        mUpdateListeners.add(listener);
+    }
+
+    public void removeAllUpdateListeners() {
+        if (mUpdateListeners == null) {
+            return;
+        }
+        mUpdateListeners.clear();
+        mUpdateListeners = null;
+    }
+
+    public void removeUpdateListener(AnimatorUpdateListener listener) {
+        if (mUpdateListeners == null) {
+            return;
+        }
+        mUpdateListeners.remove(listener);
+        if (mUpdateListeners.size() == 0) {
+            mUpdateListeners = null;
+        }
+    }
+
+    @Override
+    public void setInterpolator(Interpolator value) {
+        if (value != null) {
+            mInterpolator = value;
+        } else {
+            mInterpolator = new LinearInterpolator();
+        }
+    }
+
+    @Override
+    public Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
+    public void setEvaluator(TypeEvaluator value) {
+        if (value != null && mValues != null && mValues.length > 0) {
+            mValues[0].setEvaluator(value);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void notifyStartListeners() {
+        if (mListeners != null && !mStartListenersCalled) {
+            ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (AnimatorListener tmpListener : tmpListeners) {
+                tmpListener.onAnimationStart(this);
+            }
+        }
+        mStartListenersCalled = true;
+    }
+
+    private void start(boolean playBackwards) {
+        if (Looper.myLooper() == null) {
+            throw new AndroidRuntimeException("Animators may only be run on Looper threads");
+        }
+        mPlayingBackwards = playBackwards;
+        mCurrentIteration = 0;
+        mPlayingState = STOPPED;
+        mStarted = true;
+        mStartedDelay = false;
+        mPaused = false;
+        AnimationHandler animationHandler = getOrCreateAnimationHandler();
+        animationHandler.mPendingAnimations.add(this);
+        if (mStartDelay == 0) {
+            setCurrentPlayTime(0);
+            mPlayingState = STOPPED;
+            mRunning = true;
+            notifyStartListeners();
+        }
+        animationHandler.start();
+    }
+
+    @Override
+    public void start() {
+        start(false);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel() {
+        AnimationHandler handler = getOrCreateAnimationHandler();
+        if (mPlayingState != STOPPED || handler.mPendingAnimations.contains(this) || handler.mDelayedAnims.contains(this)) {
+            if ((mStarted || mRunning) && mListeners != null) {
+                if (!mRunning) {
+                    notifyStartListeners();
+                }
+                ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationCancel(this);
+                }
+            }
+            endAnimation(handler);
+        }
+    }
+
+    @Override
+    public void end() {
+        AnimationHandler handler = getOrCreateAnimationHandler();
+        if (!handler.mAnimations.contains(this) && !handler.mPendingAnimations.contains(this)) {
+            mStartedDelay = false;
+            startAnimation(handler);
+            mStarted = true;
+        } else if (!mInitialized) {
+            initAnimation();
+        }
+        animateValue(mPlayingBackwards ? 0f : 1f);
+        endAnimation(handler);
+    }
+
+    @Override
+    public void resume() {
+        if (mPaused) {
+            mResumed = true;
+        }
+        super.resume();
+    }
+
+    @Override
+    public void pause() {
+        boolean previouslyPaused = mPaused;
+        super.pause();
+        if (!previouslyPaused && mPaused) {
+            mPauseTime = -1;
+            mResumed = false;
+        }
+    }
+
+    @Override
+    public boolean isRunning() {
+        return (mPlayingState == RUNNING || mRunning);
+    }
+
+    @Override
+    public boolean isStarted() {
+        return mStarted;
+    }
+
+    public void reverse() {
+        mPlayingBackwards = !mPlayingBackwards;
+        if (mPlayingState == RUNNING) {
+            long currentTime = AnimationUtils.currentAnimationTimeMillis();
+            long currentPlayTime = currentTime - mStartTime;
+            long timeLeft = mDuration - currentPlayTime;
+            mStartTime = currentTime - timeLeft;
+        } else if (mStarted) {
+            end();
+        } else {
+            start(true);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void endAnimation(AnimationHandler handler) {
+        handler.mAnimations.remove(this);
+        handler.mPendingAnimations.remove(this);
+        handler.mDelayedAnims.remove(this);
+        mPlayingState = STOPPED;
+        mPaused = false;
+        if ((mStarted || mRunning) && mListeners != null) {
+            if (!mRunning) {
+                notifyStartListeners();
+             }
+            ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (AnimatorListener tmpListener : tmpListeners) {
+                tmpListener.onAnimationEnd(this);
+            }
+        }
+        mRunning = false;
+        mStarted = false;
+        mStartListenersCalled = false;
+        mPlayingBackwards = false;
+    }
+
+    private void startAnimation(AnimationHandler handler) {
+        initAnimation();
+        handler.mAnimations.add(this);
+        if (mStartDelay > 0 && mListeners != null) {
+            notifyStartListeners();
+        }
+    }
+
+    private boolean delayedAnimationFrame(long currentTime) {
+        if (!mStartedDelay) {
+            mStartedDelay = true;
+            mDelayStartTime = currentTime;
+        } else {
+            if (mPaused) {
+                if (mPauseTime < 0) {
+                    mPauseTime = currentTime;
+                }
+                return false;
+            } else if (mResumed) {
+                mResumed = false;
+                if (mPauseTime > 0) {
+                    mDelayStartTime += (currentTime - mPauseTime);
+                }
+            }
+            long deltaTime = currentTime - mDelayStartTime;
+            if (deltaTime > mStartDelay) {
+                mStartTime = currentTime - (deltaTime - mStartDelay);
+                mPlayingState = RUNNING;
+                return true;
+            }
+        }
+        return false;
+    }
+
+    boolean animationFrame(long currentTime) {
+        boolean done = false;
+        switch (mPlayingState) {
+        case RUNNING:
+        case SEEKED:
+            float fraction = mDuration > 0 ? (float)(currentTime - mStartTime) / mDuration : 1f;
+            if (fraction >= 1f) {
+                if (mCurrentIteration < mRepeatCount || mRepeatCount == INFINITE) {
+                    if (mListeners != null) {
+                        int numListeners = mListeners.size();
+                        for (AnimatorListener mListener : mListeners) {
+                            mListener.onAnimationRepeat(this);
+                        }
+                    }
+                    if (mRepeatMode == REVERSE) {
+                        mPlayingBackwards = !mPlayingBackwards;
+                    }
+                    mCurrentIteration += (int)fraction;
+                    fraction = fraction % 1f;
+                    mStartTime += mDuration;
+                } else {
+                    done = true;
+                    fraction = Math.min(fraction, 1.0f);
+                }
+            }
+            if (mPlayingBackwards) {
+                fraction = 1f - fraction;
+            }
+            animateValue(fraction);
+            break;
+        }
+
+        return done;
+    }
+
+    final boolean doAnimationFrame(long frameTime) {
+        if (mPlayingState == STOPPED) {
+            mPlayingState = RUNNING;
+            if (mSeekTime < 0) {
+                mStartTime = frameTime;
+            } else {
+                mStartTime = frameTime - mSeekTime;
+                mSeekTime = -1;
+            }
+        }
+        if (mPaused) {
+            if (mPauseTime < 0) {
+                mPauseTime = frameTime;
+            }
+            return false;
+        } else if (mResumed) {
+            mResumed = false;
+            if (mPauseTime > 0) {
+                mStartTime += (frameTime - mPauseTime);
+            }
+        }
+        final long currentTime = Math.max(frameTime, mStartTime);
+        return animationFrame(currentTime);
+    }
+
+    public float getAnimatedFraction() {
+        return mCurrentFraction;
+    }
+
+    void animateValue(float fraction) {
+        fraction = mInterpolator.getInterpolation(fraction);
+        mCurrentFraction = fraction;
+        int numValues = mValues.length;
+        for (PropertyValuesHolder mValue : mValues) {
+            mValue.calculateValue(fraction);
+        }
+        if (mUpdateListeners != null) {
+            int numListeners = mUpdateListeners.size();
+            for (AnimatorUpdateListener mUpdateListener : mUpdateListeners) {
+                mUpdateListener.onAnimationUpdate(this);
+            }
+        }
+    }
+
+    @Override
+    public ValueAnimator clone() {
+        final ValueAnimator anim = (ValueAnimator) super.clone();
+        if (mUpdateListeners != null) {
+            ArrayList<AnimatorUpdateListener> oldListeners = mUpdateListeners;
+            anim.mUpdateListeners = new ArrayList<AnimatorUpdateListener>();
+            int numListeners = oldListeners.size();
+            for (AnimatorUpdateListener oldListener : oldListeners) {
+                anim.mUpdateListeners.add(oldListener);
+            }
+        }
+        anim.mSeekTime = -1;
+        anim.mPlayingBackwards = false;
+        anim.mCurrentIteration = 0;
+        anim.mInitialized = false;
+        anim.mPlayingState = STOPPED;
+        anim.mStartedDelay = false;
+        PropertyValuesHolder[] oldValues = mValues;
+        if (oldValues != null) {
+            int numValues = oldValues.length;
+            anim.mValues = new PropertyValuesHolder[numValues];
+            anim.mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);
+            for (int i = 0; i < numValues; ++i) {
+                PropertyValuesHolder newValuesHolder = oldValues[i].clone();
+                anim.mValues[i] = newValuesHolder;
+                anim.mValuesMap.put(newValuesHolder.getPropertyName(), newValuesHolder);
+            }
+        }
+        return anim;
+    }
+
+    public static interface AnimatorUpdateListener {
+        void onAnimationUpdate(ValueAnimator animation);
+    }
+
+    public static int getCurrentAnimationsCount() {
+        AnimationHandler handler = sAnimationHandler.get();
+        return handler != null ? handler.mAnimations.size() : 0;
+    }
+
+    public static void clearAllAnimations() {
+        AnimationHandler handler = sAnimationHandler.get();
+        if (handler != null) {
+            handler.mAnimations.clear();
+            handler.mPendingAnimations.clear();
+            handler.mDelayedAnims.clear();
+        }
+    }
+
+    private static AnimationHandler getOrCreateAnimationHandler() {
+        AnimationHandler handler = sAnimationHandler.get();
+        if (handler == null) {
+            handler = new AnimationHandler();
+            sAnimationHandler.set(handler);
+        }
+        return handler;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java
new file mode 100644
index 000000000..0863204d0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java
@@ -0,0 +1,349 @@
+/*
+ Copyright 2012 Jake Wharton
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+ */
+
+package org.telegram.ui.Animation;
+
+import android.graphics.Camera;
+import android.graphics.Matrix;
+import android.graphics.RectF;
+import android.os.Build;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+
+import java.lang.ref.WeakReference;
+import java.util.WeakHashMap;
+
+public class View10 extends Animation {
+
+    public static boolean NEED_PROXY = Build.VERSION.SDK_INT < 11;
+
+    private static final WeakHashMap<View, View10> PROXIES = new WeakHashMap<View, View10>();
+
+    public static View10 wrap(View view) {
+        View10 proxy = PROXIES.get(view);
+        Animation animation = view.getAnimation();
+        if (proxy == null || proxy != animation && animation != null) {
+            proxy = new View10(view);
+            PROXIES.put(view, proxy);
+        } else if (animation == null) {
+            view.setAnimation(proxy);
+        }
+        return proxy;
+    }
+
+    private final WeakReference<View> mView;
+    private final Camera mCamera = new Camera();
+    private boolean mHasPivot;
+
+    private float mAlpha = 1;
+    private float mPivotX;
+    private float mPivotY;
+    private float mRotationX;
+    private float mRotationY;
+    private float mRotationZ;
+    private float mScaleX = 1;
+    private float mScaleY = 1;
+    private float mTranslationX;
+    private float mTranslationY;
+
+    private final RectF mBefore = new RectF();
+    private final RectF mAfter = new RectF();
+    private final Matrix mTempMatrix = new Matrix();
+
+    private View10(View view) {
+        setDuration(0);
+        setFillAfter(true);
+        view.setAnimation(this);
+        mView = new WeakReference<View>(view);
+    }
+
+    public float getAlpha() {
+        return mAlpha;
+    }
+
+    public void setAlpha(float alpha) {
+        if (mAlpha != alpha) {
+            mAlpha = alpha;
+            View view = mView.get();
+            if (view != null) {
+                view.invalidate();
+            }
+        }
+    }
+
+    public float getPivotX() {
+        return mPivotX;
+    }
+
+    public void setPivotX(float pivotX) {
+        if (!mHasPivot || mPivotX != pivotX) {
+            prepareForUpdate();
+            mHasPivot = true;
+            mPivotX = pivotX;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getPivotY() {
+        return mPivotY;
+    }
+
+    public void setPivotY(float pivotY) {
+        if (!mHasPivot || mPivotY != pivotY) {
+            prepareForUpdate();
+            mHasPivot = true;
+            mPivotY = pivotY;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getRotation() {
+        return mRotationZ;
+    }
+
+    public void setRotation(float rotation) {
+        if (mRotationZ != rotation) {
+            prepareForUpdate();
+            mRotationZ = rotation;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getRotationX() {
+        return mRotationX;
+    }
+
+    public void setRotationX(float rotationX) {
+        if (mRotationX != rotationX) {
+            prepareForUpdate();
+            mRotationX = rotationX;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getRotationY() {
+        return mRotationY;
+    }
+
+    public void setRotationY(float rotationY) {
+        if (mRotationY != rotationY) {
+            prepareForUpdate();
+            mRotationY = rotationY;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getScaleX() {
+        return mScaleX;
+    }
+
+    public void setScaleX(float scaleX) {
+        if (mScaleX != scaleX) {
+            prepareForUpdate();
+            mScaleX = scaleX;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getScaleY() {
+        return mScaleY;
+    }
+
+    public void setScaleY(float scaleY) {
+        if (mScaleY != scaleY) {
+            prepareForUpdate();
+            mScaleY = scaleY;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public int getScrollX() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollX();
+    }
+
+    public void setScrollX(int value) {
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(value, view.getScrollY());
+        }
+    }
+
+    public int getScrollY() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollY();
+    }
+
+    public void setScrollY(int value) {
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(view.getScrollX(), value);
+        }
+    }
+
+    public float getTranslationX() {
+        return mTranslationX;
+    }
+
+    public void setTranslationX(float translationX) {
+        if (mTranslationX != translationX) {
+            prepareForUpdate();
+            mTranslationX = translationX;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getTranslationY() {
+        return mTranslationY;
+    }
+
+    public void setTranslationY(float translationY) {
+        if (mTranslationY != translationY) {
+            prepareForUpdate();
+            mTranslationY = translationY;
+            invalidateAfterUpdate();
+        }
+    }
+
+    public float getX() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getLeft() + mTranslationX;
+    }
+
+    public void setX(float x) {
+        View view = mView.get();
+        if (view != null) {
+            setTranslationX(x - view.getLeft());
+        }
+    }
+
+    public float getY() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getTop() + mTranslationY;
+    }
+
+    public void setY(float y) {
+        View view = mView.get();
+        if (view != null) {
+            setTranslationY(y - view.getTop());
+        }
+    }
+
+    private void prepareForUpdate() {
+        View view = mView.get();
+        if (view != null) {
+            computeRect(mBefore, view);
+        }
+    }
+
+    private void invalidateAfterUpdate() {
+        View view = mView.get();
+        if (view == null || view.getParent() == null) {
+            return;
+        }
+
+        final RectF after = mAfter;
+        computeRect(after, view);
+        after.union(mBefore);
+
+        ((View) view.getParent()).invalidate(
+                (int) Math.floor(after.left),
+                (int) Math.floor(after.top),
+                (int) Math.ceil(after.right),
+                (int) Math.ceil(after.bottom));
+    }
+
+    private void computeRect(final RectF r, View view) {
+        final float w = view.getWidth();
+        final float h = view.getHeight();
+
+        r.set(0, 0, w, h);
+
+        final Matrix m = mTempMatrix;
+        m.reset();
+        transformMatrix(m, view);
+        mTempMatrix.mapRect(r);
+
+        r.offset(view.getLeft(), view.getTop());
+
+        if (r.right < r.left) {
+            final float f = r.right;
+            r.right = r.left;
+            r.left = f;
+        }
+        if (r.bottom < r.top) {
+            final float f = r.top;
+            r.top = r.bottom;
+            r.bottom = f;
+        }
+    }
+
+    private void transformMatrix(Matrix m, View view) {
+        final float w = view.getWidth();
+        final float h = view.getHeight();
+        final boolean hasPivot = mHasPivot;
+        final float pX = hasPivot ? mPivotX : w / 2f;
+        final float pY = hasPivot ? mPivotY : h / 2f;
+
+        final float rX = mRotationX;
+        final float rY = mRotationY;
+        final float rZ = mRotationZ;
+        if ((rX != 0) || (rY != 0) || (rZ != 0)) {
+            final Camera camera = mCamera;
+            camera.save();
+            camera.rotateX(rX);
+            camera.rotateY(rY);
+            camera.rotateZ(-rZ);
+            camera.getMatrix(m);
+            camera.restore();
+            m.preTranslate(-pX, -pY);
+            m.postTranslate(pX, pY);
+        }
+
+        final float sX = mScaleX;
+        final float sY = mScaleY;
+        if ((sX != 1.0f) || (sY != 1.0f)) {
+            m.postScale(sX, sY);
+            final float sPX = -(pX / w) * ((sX * w) - w);
+            final float sPY = -(pY / h) * ((sY * h) - h);
+            m.postTranslate(sPX, sPY);
+        }
+
+        m.postTranslate(mTranslationX, mTranslationY);
+    }
+
+    @Override
+    protected void applyTransformation(float interpolatedTime, Transformation t) {
+        View view = mView.get();
+        if (view != null) {
+            t.setAlpha(mAlpha);
+            transformMatrix(t.getMatrix(), view);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorListenerAdapterProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorListenerAdapterProxy.java
new file mode 100644
index 000000000..2c416a110
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorListenerAdapterProxy.java
@@ -0,0 +1,112 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.AnimationCompat;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+
+import org.telegram.ui.Animation.Animator10;
+import org.telegram.ui.Animation.AnimatorListenerAdapter10;
+import org.telegram.ui.Animation.View10;
+
+public class AnimatorListenerAdapterProxy {
+    protected Object animatorListenerAdapter;
+
+    public AnimatorListenerAdapterProxy() {
+        if (View10.NEED_PROXY) {
+            animatorListenerAdapter = new AnimatorListenerAdapter10() {
+                @Override
+                public void onAnimationCancel(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationCancel(animation);
+                }
+
+                @Override
+                public void onAnimationEnd(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationEnd(animation);
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationRepeat(animation);
+                }
+
+                @Override
+                public void onAnimationStart(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationStart(animation);
+                }
+
+                @Override
+                public void onAnimationPause(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationPause(animation);
+                }
+
+                @Override
+                public void onAnimationResume(Animator10 animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationResume(animation);
+                }
+            };
+        } else {
+            animatorListenerAdapter = new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationCancel(animation);
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationEnd(animation);
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationRepeat(animation);
+                }
+
+                @Override
+                public void onAnimationStart(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationStart(animation);
+                }
+
+                @Override
+                public void onAnimationPause(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationPause(animation);
+                }
+
+                @Override
+                public void onAnimationResume(Animator animation) {
+                    AnimatorListenerAdapterProxy.this.onAnimationResume(animation);
+                }
+            };
+        }
+    }
+
+    public void onAnimationCancel(Object animation) {
+
+    }
+
+    public void onAnimationEnd(Object animation) {
+
+    }
+
+    public void onAnimationRepeat(Object animation) {
+
+    }
+
+    public void onAnimationStart(Object animation) {
+
+    }
+
+    public void onAnimationPause(Object animation) {
+
+    }
+
+    public void onAnimationResume(Object animation) {
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java
new file mode 100644
index 000000000..50ac0c1d1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java
@@ -0,0 +1,128 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.AnimationCompat;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.view.animation.Interpolator;
+
+import org.telegram.ui.Animation.Animator10;
+import org.telegram.ui.Animation.AnimatorListenerAdapter10;
+import org.telegram.ui.Animation.AnimatorSet10;
+import org.telegram.ui.Animation.View10;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+
+public class AnimatorSetProxy {
+
+    private Object animatorSet;
+
+    public static <T, U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {
+        return copyOfRange(original, 0, newLength, newType);
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <T, U> T[] copyOfRange(U[] original, int start, int end, Class<? extends T[]> newType) {
+        if (start > end) {
+            throw new IllegalArgumentException();
+        }
+        int originalLength = original.length;
+        if (start < 0 || start > originalLength) {
+            throw new ArrayIndexOutOfBoundsException();
+        }
+        int resultLength = end - start;
+        int copyLength = Math.min(resultLength, originalLength - start);
+        T[] result = (T[]) Array.newInstance(newType.getComponentType(), resultLength);
+        System.arraycopy(original, start, result, 0, copyLength);
+        return result;
+    }
+
+    public AnimatorSetProxy() {
+        if (View10.NEED_PROXY) {
+            animatorSet = new AnimatorSet10();
+        } else {
+            animatorSet = new AnimatorSet();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public void playTogether(Object... items) {
+        if (View10.NEED_PROXY) {
+            Animator10[] animators = copyOf(items, items.length, Animator10[].class);
+            ((AnimatorSet10) animatorSet).playTogether(animators);
+        } else {
+            Animator[] animators = copyOf(items, items.length, Animator[].class);
+            ((AnimatorSet) animatorSet).playTogether(animators);
+        }
+    }
+
+    public void playTogether(ArrayList<Object> items) {
+        if (View10.NEED_PROXY) {
+            ArrayList<Animator10> animators = new ArrayList<Animator10>();
+            for (Object obj : items) {
+                animators.add((Animator10)obj);
+            }
+            ((AnimatorSet10) animatorSet).playTogether(animators);
+        } else {
+            ArrayList<Animator> animators = new ArrayList<Animator>();
+            for (Object obj : items) {
+                animators.add((Animator)obj);
+            }
+            ((AnimatorSet) animatorSet).playTogether(animators);
+        }
+    }
+
+    public AnimatorSetProxy setDuration(long duration) {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).setDuration(duration);
+        } else {
+            ((AnimatorSet) animatorSet).setDuration(duration);
+        }
+        return this;
+    }
+
+    public void start() {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).start();
+        } else {
+            ((AnimatorSet) animatorSet).start();
+        }
+    }
+
+    public void cancel() {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).cancel();
+        } else {
+            ((AnimatorSet) animatorSet).cancel();
+        }
+    }
+
+    public void addListener(AnimatorListenerAdapterProxy listener) {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).addListener((AnimatorListenerAdapter10) listener.animatorListenerAdapter);
+        } else {
+            ((AnimatorSet) animatorSet).addListener((AnimatorListenerAdapter) listener.animatorListenerAdapter);
+        }
+    }
+
+    public void setInterpolator(Interpolator interpolator) {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).setInterpolator(interpolator);
+        } else {
+            ((AnimatorSet) animatorSet).setInterpolator(interpolator);
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        return animatorSet == o;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ObjectAnimatorProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ObjectAnimatorProxy.java
new file mode 100644
index 000000000..c9fd8cf18
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ObjectAnimatorProxy.java
@@ -0,0 +1,129 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.AnimationCompat;
+
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ObjectAnimator;
+import android.view.animation.Interpolator;
+
+import org.telegram.ui.Animation.AnimatorListenerAdapter10;
+import org.telegram.ui.Animation.ObjectAnimator10;
+import org.telegram.ui.Animation.View10;
+
+public class ObjectAnimatorProxy {
+
+    private Object objectAnimator;
+
+    public ObjectAnimatorProxy(Object animator) {
+        objectAnimator = animator;
+    }
+
+    public static Object ofFloat(Object target, String propertyName, float... values) {
+        if (View10.NEED_PROXY) {
+            return ObjectAnimator10.ofFloat(target, propertyName, values);
+        } else {
+            return ObjectAnimator.ofFloat(target, propertyName, values);
+        }
+    }
+
+    public static Object ofInt(Object target, String propertyName, int... values) {
+        if (View10.NEED_PROXY) {
+            return ObjectAnimator10.ofInt(target, propertyName, values);
+        } else {
+            return ObjectAnimator.ofInt(target, propertyName, values);
+        }
+    }
+
+    public static ObjectAnimatorProxy ofFloatProxy(Object target, String propertyName, float... values) {
+        if (View10.NEED_PROXY) {
+            return new ObjectAnimatorProxy(ObjectAnimator10.ofFloat(target, propertyName, values));
+        } else {
+            return new ObjectAnimatorProxy(ObjectAnimator.ofFloat(target, propertyName, values));
+        }
+    }
+
+    public static ObjectAnimatorProxy ofIntProxy(Object target, String propertyName, int... values) {
+        if (View10.NEED_PROXY) {
+            return new ObjectAnimatorProxy(ObjectAnimator10.ofInt(target, propertyName, values));
+        } else {
+            return new ObjectAnimatorProxy(ObjectAnimator.ofInt(target, propertyName, values));
+        }
+    }
+
+    public ObjectAnimatorProxy setDuration(long duration) {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).setDuration(duration);
+        } else {
+            ((ObjectAnimator) objectAnimator).setDuration(duration);
+        }
+        return this;
+    }
+
+    public void setInterpolator(Interpolator value) {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).setInterpolator(value);
+        } else {
+            ((ObjectAnimator) objectAnimator).setInterpolator(value);
+        }
+    }
+
+    public void start() {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).start();
+        } else {
+            ((ObjectAnimator) objectAnimator).start();
+        }
+    }
+
+    public void setAutoCancel(boolean cancel) {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).setAutoCancel(cancel);
+        } else {
+            ((ObjectAnimator) objectAnimator).setAutoCancel(cancel);
+        }
+    }
+
+    public boolean isRunning() {
+        if (View10.NEED_PROXY) {
+            return ((ObjectAnimator10) objectAnimator).isRunning();
+        } else {
+            return ((ObjectAnimator) objectAnimator).isRunning();
+        }
+    }
+
+    public void end() {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).end();
+        } else {
+            ((ObjectAnimator) objectAnimator).end();
+        }
+    }
+
+    public void cancel() {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).cancel();
+        } else {
+            ((ObjectAnimator) objectAnimator).cancel();
+        }
+    }
+
+    public ObjectAnimatorProxy addListener(AnimatorListenerAdapterProxy listener) {
+        if (View10.NEED_PROXY) {
+            ((ObjectAnimator10) objectAnimator).addListener((AnimatorListenerAdapter10) listener.animatorListenerAdapter);
+        } else {
+            ((ObjectAnimator) objectAnimator).addListener((AnimatorListenerAdapter) listener.animatorListenerAdapter);
+        }
+        return this;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        return objectAnimator == o;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java
new file mode 100644
index 000000000..478398bee
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java
@@ -0,0 +1,248 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.AnimationCompat;
+
+import android.view.View;
+
+import org.telegram.ui.Animation.View10;
+
+public class ViewProxy {
+
+    public static float getAlpha(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getAlpha();
+        } else {
+            return view.getAlpha();
+        }
+    }
+
+    public static void setAlpha(View view, float alpha) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setAlpha(alpha);
+        } else {
+            view.setAlpha(alpha);
+        }
+    }
+
+    public static float getPivotX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getPivotX();
+        } else {
+            return view.getPivotX();
+        }
+    }
+
+    public static void setPivotX(View view, float pivotX) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setPivotX(pivotX);
+        } else {
+            view.setPivotX(pivotX);
+        }
+    }
+
+    public static float getPivotY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getPivotY();
+        } else {
+            return view.getPivotY();
+        }
+    }
+
+    public static void setPivotY(View view, float pivotY) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setPivotY(pivotY);
+        } else {
+            view.setPivotY(pivotY);
+        }
+    }
+
+    public static float getRotation(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getRotation();
+        } else {
+            return view.getRotation();
+        }
+    }
+
+    public static void setRotation(View view, float rotation) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setRotation(rotation);
+        } else {
+            view.setRotation(rotation);
+        }
+    }
+
+    public static float getRotationX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getRotationX();
+        } else {
+            return view.getRotationX();
+        }
+    }
+
+    public void setRotationX(View view, float rotationX) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setRotationX(rotationX);
+        } else {
+            view.setRotationX(rotationX);
+        }
+    }
+
+    public static float getRotationY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getRotationY();
+        } else {
+            return view.getRotationY();
+        }
+    }
+
+    public void setRotationY(View view, float rotationY) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setRotationY(rotationY);
+        } else {
+            view.setRotationY(rotationY);
+        }
+    }
+
+    public static float getScaleX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getScaleX();
+        } else {
+            return view.getScaleX();
+        }
+    }
+
+    public static void setScaleX(View view, float scaleX) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setScaleX(scaleX);
+        } else {
+            view.setScaleX(scaleX);
+        }
+    }
+
+    public static float getScaleY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getScaleY();
+        } else {
+            return view.getScaleY();
+        }
+    }
+
+    public static void setScaleY(View view, float scaleY) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setScaleY(scaleY);
+        } else {
+            view.setScaleY(scaleY);
+        }
+    }
+
+    public static int getScrollX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getScrollX();
+        } else {
+            return view.getScrollX();
+        }
+    }
+
+    public static void setScrollX(View view, int value) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setScrollX(value);
+        } else {
+            view.setScrollX(value);
+        }
+    }
+
+    public static int getScrollY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getScrollY();
+        } else {
+            return view.getScrollY();
+        }
+    }
+
+    public static void setScrollY(View view, int value) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setScrollY(value);
+        } else {
+            view.setScrollY(value);
+        }
+    }
+
+    public static float getTranslationX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getTranslationX();
+        } else {
+            return view.getTranslationX();
+        }
+    }
+
+    public static void setTranslationX(View view, float translationX) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setTranslationX(translationX);
+        } else {
+            view.setTranslationX(translationX);
+        }
+    }
+
+    public static float getTranslationY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getTranslationY();
+        } else {
+            return view.getTranslationY();
+        }
+    }
+
+    public static void setTranslationY(View view, float translationY) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setTranslationY(translationY);
+        } else {
+            view.setTranslationY(translationY);
+        }
+    }
+
+    public static float getX(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getX();
+        } else {
+            return view.getX();
+        }
+    }
+
+    public static void setX(View view, float x) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setX(x);
+        } else {
+            view.setX(x);
+        }
+    }
+
+    public static float getY(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view).getY();
+        } else {
+            return view.getY();
+        }
+    }
+
+    public static void setY(View view, float y) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setY(y);
+        } else {
+            view.setY(y);
+        }
+    }
+
+    public static Object wrap(View view) {
+        if (View10.NEED_PROXY) {
+            return View10.wrap(view);
+        } else {
+            return view;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index 04612ddd7..54cc2472d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -272,7 +272,7 @@ public void run() {
                 UserConfig.registeredForPush = !isNew;
                 UserConfig.saveConfig(false);
                 if (UserConfig.getClientUserId() != 0) {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             MessagesController.getInstance().registerForPush(regid);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
similarity index 64%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index 49f3f8791..6da2759dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -11,13 +11,17 @@
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.os.Build;
 import android.os.Bundle;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
+import android.widget.FrameLayout;
 import android.widget.ListView;
+import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
@@ -27,16 +31,18 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.TextInfoCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+
+public class BlockedUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
 
-public class SettingsBlockedUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
     private ListView listView;
     private ListAdapter listViewAdapter;
-    private View progressView;
-    private TextView emptyView;
+    private FrameLayout progressView;
+    private TextView emptyTextView;
     private int selectedUserId;
 
     private final static int block_user = 1;
@@ -60,10 +66,10 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -72,46 +78,76 @@ public void onItemClick(int id) {
                         Bundle args = new Bundle();
                         args.putBoolean("onlyUsers", true);
                         args.putBoolean("destroyAfterSelect", true);
-                        args.putBoolean("usersAsSections", true);
                         args.putBoolean("returnAsResult", true);
                         ContactsActivity fragment = new ContactsActivity(args);
-                        fragment.setDelegate(SettingsBlockedUsersActivity.this);
+                        fragment.setDelegate(BlockedUsersActivity.this);
                         presentFragment(fragment);
                     }
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(block_user, R.drawable.plus);
 
-            fragmentView = inflater.inflate(R.layout.settings_blocked_users_layout, container, false);
-            listViewAdapter = new ListAdapter(getParentActivity());
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            progressView = fragmentView.findViewById(R.id.progressLayout);
-            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
-            emptyView.setOnTouchListener(new View.OnTouchListener() {
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setVisibility(View.INVISIBLE);
+            emptyTextView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
+            frameLayout.addView(emptyTextView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextView.setLayoutParams(layoutParams);
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            emptyView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
-            if (MessagesController.getInstance().loadingBlockedUsers) {
-                progressView.setVisibility(View.VISIBLE);
-                emptyView.setVisibility(View.GONE);
-                listView.setEmptyView(null);
-            } else {
-                progressView.setVisibility(View.GONE);
-                listView.setEmptyView(emptyView);
+
+            progressView = new FrameLayout(getParentActivity());
+            frameLayout.addView(progressView);
+            layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            progressView.setLayoutParams(layoutParams);
+
+            ProgressBar progressBar = new ProgressBar(getParentActivity());
+            progressView.addView(progressBar);
+            layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.CENTER;
+            progressView.setLayoutParams(layoutParams);
+
+            listView = new ListView(getParentActivity());
+            listView.setEmptyView(emptyTextView);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
             }
-            listView.setAdapter(listViewAdapter);
+            frameLayout.addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     if (i < MessagesController.getInstance().blockedUsers.size()) {
                         Bundle args = new Bundle();
                         args.putInt("user_id", MessagesController.getInstance().blockedUsers.get(i));
-                        presentFragment(new UserProfileActivity(args));
+                        presentFragment(new ProfileActivity(args));
                     }
                 }
             });
@@ -125,9 +161,7 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     selectedUserId = MessagesController.getInstance().blockedUsers.get(i);
 
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
                     CharSequence[] items = new CharSequence[] {LocaleController.getString("Unblock", R.string.Unblock)};
-
                     builder.setItems(items, new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
@@ -141,6 +175,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     return true;
                 }
             });
+
+            if (MessagesController.getInstance().loadingBlockedUsers) {
+                progressView.setVisibility(View.VISIBLE);
+                emptyTextView.setVisibility(View.GONE);
+                listView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.GONE);
+                listView.setEmptyView(emptyTextView);
+            }
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -162,7 +205,7 @@ public void didReceivedNotification(int id, Object... args) {
                 progressView.setVisibility(View.GONE);
             }
             if (listView != null && listView.getEmptyView() == null) {
-                listView.setEmptyView(emptyView);
+                listView.setEmptyView(emptyTextView);
             }
             if (listViewAdapter != null) {
                 listViewAdapter.notifyDataSetChanged();
@@ -177,8 +220,8 @@ private void updateVisibleRows(int mask) {
         int count = listView.getChildCount();
         for (int a = 0; a < count; a++) {
             View child = listView.getChildAt(a);
-            if (child instanceof ChatOrUserCell) {
-                ((ChatOrUserCell) child).update(mask);
+            if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
             }
         }
     }
@@ -244,18 +287,14 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    view = new ChatOrUserCell(mContext);
-                    ((ChatOrUserCell)view).usePadding = false;
-                    ((ChatOrUserCell)view).useSeparator = true;
+                    view = new UserCell(mContext, 1);
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
-                ((ChatOrUserCell)view).setData(user, null, null, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
+                ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_unblock_info_row_layout, viewGroup, false);
-                    TextView textView = (TextView)view.findViewById(R.id.info_text_view);
-                    textView.setText(LocaleController.getString("UnblockText", R.string.UnblockText));
+                    view = new TextInfoCell(mContext);
+                    ((TextInfoCell) view).setText(LocaleController.getString("UnblockText", R.string.UnblockText));
                 }
             }
             return view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 02849344c..2f12ebf40 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -31,6 +31,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.PhotoViewer;
+import org.telegram.ui.Views.AvatarDrawable;
 
 public class ChatActionCell extends BaseCell {
 
@@ -47,6 +48,7 @@
     private URLSpan pressedLink;
 
     private ImageReceiver imageReceiver;
+    private AvatarDrawable avatarDrawable;
     private StaticLayout textLayout;
     private int textWidth = 0;
     private int textHeight = 0;
@@ -72,6 +74,8 @@ public ChatActionCell(Context context) {
             textPaint.linkColor = 0xffffffff;
         }
         imageReceiver = new ImageReceiver(this);
+        imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
+        avatarDrawable = new AvatarDrawable();
         textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
     }
 
@@ -97,18 +101,19 @@ public void setMessageObject(MessageObject messageObject) {
                     }
                 }
             }
+            avatarDrawable.setInfo(id, null, null, false);
             if (currentMessageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(id)), false);
+                imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", avatarDrawable, false);
             } else {
                 PhotoObject photo = PhotoObject.getClosestImageWithSize(currentMessageObject.photoThumbs, AndroidUtilities.dp(64));
                 if (photo != null) {
                     if (photo.image != null) {
                         imageReceiver.setImageBitmap(photo.image);
                     } else {
-                        imageReceiver.setImage(photo.photoOwner.location, "50_50", getResources().getDrawable(AndroidUtilities.getGroupAvatarForId(id)), false);
+                        imageReceiver.setImage(photo.photoOwner.location, "50_50", avatarDrawable, false);
                     }
                 } else {
-                    imageReceiver.setImageBitmap(getResources().getDrawable(AndroidUtilities.getGroupAvatarForId(id)));
+                    imageReceiver.setImageBitmap(avatarDrawable);
                 }
             }
             imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index 4569a7094..9ab00e61f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -25,6 +25,7 @@
 import org.telegram.messenger.R;
 import org.telegram.android.MessageObject;
 import org.telegram.android.ImageReceiver;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.ProgressView;
 import org.telegram.ui.Views.SeekBar;
 
@@ -36,6 +37,7 @@
     private static TextPaint timePaint;
 
     private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
     private boolean needAvatarImage = false;
     private SeekBar seekBar;
     private ProgressView progressView;
@@ -63,9 +65,11 @@ public ChatAudioCell(Context context) {
         TAG = MediaController.getInstance().generateObserverTag();
 
         avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(25));
         seekBar = new SeekBar(context);
         seekBar.delegate = this;
         progressView = new ProgressView();
+        avatarDrawable = new AvatarDrawable();
 
         if (timePaint == null) {
             statesDrawable[0][0] = getResources().getDrawable(R.drawable.play1);
@@ -364,11 +368,15 @@ public void setMessageObject(MessageObject messageObject) {
                 if (audioUser != null) {
                     if (audioUser.photo != null) {
                         currentPhoto = audioUser.photo.photo_small;
+                    } else {
+                        currentPhoto = null;
                     }
-                    avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                    avatarDrawable.setInfo(audioUser);
                 } else {
-                    avatarImage.setImage(null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                    avatarDrawable.setInfo(uid, null, null, false);
+                    currentPhoto = null;
                 }
+                avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, false);
             }
 
             if (messageObject.isOut()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index b3ad22bf6..0440eb258 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -28,6 +28,7 @@
 import org.telegram.messenger.R;
 import org.telegram.android.MessageObject;
 import org.telegram.android.ImageReceiver;
+import org.telegram.ui.Views.AvatarDrawable;
 
 public class ChatBaseCell extends BaseCell {
 
@@ -77,6 +78,7 @@
     protected int layoutHeight;
 
     private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
     private boolean avatarPressed = false;
     private boolean forwardNamePressed = false;
 
@@ -154,6 +156,8 @@ public ChatBaseCell(Context context) {
             forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
         }
         avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
+        avatarDrawable = new AvatarDrawable();
     }
 
     @Override
@@ -236,10 +240,12 @@ public void setMessageObject(MessageObject messageObject) {
                 } else {
                     currentPhoto = null;
                 }
-                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(currentUser.id)), false);
+                avatarDrawable.setInfo(currentUser);
             } else {
-                avatarImage.setImage(null, "50_50", null, false);
+                currentPhoto = null;
+                avatarDrawable.setInfo(messageObject.messageOwner.from_id, null, null, false);
             }
+            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, false);
         }
 
         if (!media) {
@@ -389,13 +395,13 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
                 if (!currentMessageObject.isOut()) {
                     timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
                 } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dpf(38.5f);
+                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(38.5f);
                 }
             } else {
                 if (!currentMessageObject.isOut()) {
                     timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
                 } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dpf(42.0f);
+                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(42.0f);
                 }
             }
 
@@ -476,7 +482,7 @@ protected void onDraw(Canvas canvas) {
         if (drawName && nameLayout != null) {
             canvas.save();
             canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-            namePaint.setColor(AndroidUtilities.getColorForId(currentUser.id));
+            namePaint.setColor(AvatarDrawable.getColorForId(currentUser.id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
@@ -499,16 +505,16 @@ protected void onDraw(Canvas canvas) {
 
         if (drawTime) {
             if (media) {
-                setDrawableBounds(mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dpf(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dpf(16.5f));
+                setDrawableBounds(mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dp(16.5f));
                 mediaBackgroundDrawable.draw(canvas);
 
                 canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dpf(12.0f) - timeLayout.getHeight());
+                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
             } else {
                 canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dpf(6.5f) - timeLayout.getHeight());
+                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
             }
@@ -544,20 +550,20 @@ protected void onDraw(Canvas canvas) {
 
                 if (drawClock) {
                     if (!media) {
-                        setDrawableBounds(clockDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - clockDrawable.getIntrinsicHeight());
+                        setDrawableBounds(clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - clockDrawable.getIntrinsicHeight());
                         clockDrawable.draw(canvas);
                     } else {
-                        setDrawableBounds(clockMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - clockMediaDrawable.getIntrinsicHeight());
+                        setDrawableBounds(clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - clockMediaDrawable.getIntrinsicHeight());
                         clockMediaDrawable.draw(canvas);
                     }
                 }
                 if (isBroadcast) {
                     if (drawCheck1 || drawCheck2) {
                         if (!media) {
-                            setDrawableBounds(broadcastDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.0f) - broadcastDrawable.getIntrinsicHeight());
+                            setDrawableBounds(broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - broadcastDrawable.getIntrinsicHeight());
                             broadcastDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(broadcastMediaDrawable, layoutWidth - AndroidUtilities.dpf(24.0f) - broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - broadcastMediaDrawable.getIntrinsicHeight());
+                            setDrawableBounds(broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - broadcastMediaDrawable.getIntrinsicHeight());
                             broadcastMediaDrawable.draw(canvas);
                         }
                     }
@@ -565,36 +571,36 @@ protected void onDraw(Canvas canvas) {
                     if (drawCheck2) {
                         if (!media) {
                             if (drawCheck1) {
-                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - checkDrawable.getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - checkDrawable.getIntrinsicHeight());
                             }
                             checkDrawable.draw(canvas);
                         } else {
                             if (drawCheck1) {
-                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - checkMediaDrawable.getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - checkMediaDrawable.getIntrinsicHeight());
                             }
                             checkMediaDrawable.draw(canvas);
                         }
                     }
                     if (drawCheck1) {
                         if (!media) {
-                            setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - halfCheckDrawable.getIntrinsicHeight());
+                            setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - halfCheckDrawable.getIntrinsicHeight());
                             halfCheckDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
+                            setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
                             halfCheckMediaDrawable.draw(canvas);
                         }
                     }
                 }
                 if (drawError) {
                     if (!media) {
-                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(18) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(6.5f) - errorDrawable.getIntrinsicHeight());
+                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(18) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(6.5f) - errorDrawable.getIntrinsicHeight());
                         errorDrawable.draw(canvas);
                     } else {
-                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(12.5f) - errorDrawable.getIntrinsicHeight());
+                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - errorDrawable.getIntrinsicHeight());
                         errorDrawable.draw(canvas);
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 4803d4114..c7b316f19 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -28,6 +28,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Views.AvatarDrawable;
 
 public class ChatContactCell extends ChatBaseCell {
 
@@ -42,6 +43,7 @@
     private static Drawable addContactDrawableOut;
 
     private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
 
     private StaticLayout nameLayout;
     private StaticLayout phoneLayout;
@@ -64,12 +66,14 @@ public ChatContactCell(Context context) {
 
             phonePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             phonePaint.setTextSize(AndroidUtilities.dp(15));
-            phonePaint.setColor(0xff000000);
+            phonePaint.setColor(0xff212121);
 
             addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_blue);
             addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_green);
         }
         avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
+        avatarDrawable = new AvatarDrawable();
     }
 
     public void setContactDelegate(ChatContactCellDelegate delegate) {
@@ -183,11 +187,15 @@ public void setMessageObject(MessageObject messageObject) {
             if (contactUser != null) {
                 if (contactUser.photo != null) {
                     currentPhoto = contactUser.photo.photo_small;
+                } else {
+                    currentPhoto = null;
                 }
-                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                avatarDrawable.setInfo(contactUser);
             } else {
-                avatarImage.setImage(null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                currentPhoto = null;
+                avatarDrawable.setInfo(uid, null, null, false);
             }
+            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, false);
 
             String currentNameString = ContactsController.formatName(messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
             int nameWidth = Math.min((int) Math.ceil(namePaint.measureText(currentNameString)), maxWidth);
@@ -265,7 +273,7 @@ protected void onDraw(Canvas canvas) {
         if (nameLayout != null) {
             canvas.save();
             canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10));
-            namePaint.setColor(AndroidUtilities.getColorForId(currentMessageObject.messageOwner.media.user_id));
+            namePaint.setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 541dbc697..0df9e7e51 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -69,6 +69,7 @@
     private int photoWidth;
     private int photoHeight;
     private PhotoObject currentPhotoObject;
+    private PhotoObject currentPhotoObjectThumb;
     private String currentUrl;
     private String currentPhotoFilter;
     private ImageReceiver photoImage;
@@ -76,6 +77,8 @@
     private boolean photoNotSet = false;
     private boolean cancelLoading = false;
 
+    private boolean allowedToSetPhoto = true;
+
     private int TAG;
 
     private int buttonState = 0;
@@ -137,7 +140,7 @@ public ChatMediaCell(Context context) {
             infoPaint.setTextSize(AndroidUtilities.dp(12));
 
             namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            namePaint.setColor(0xff000000);
+            namePaint.setColor(0xff212121);
             namePaint.setTextSize(AndroidUtilities.dp(16));
 
             docBackPaint = new Paint();
@@ -176,6 +179,7 @@ protected void onDetachedFromWindow() {
         if (photoImage != null) {
             photoImage.clearImage();
             currentPhotoObject = null;
+            currentPhotoObjectThumb = null;
         }
         currentUrl = null;
         if (gifDrawable != null) {
@@ -415,6 +419,7 @@ public void setMessageObject(MessageObject messageObject) {
             buttonState = -1;
             gifDrawable = null;
             currentPhotoObject = null;
+            currentPhotoObjectThumb = null;
             currentUrl = null;
             photoNotSet = false;
 
@@ -551,6 +556,9 @@ public void setMessageObject(MessageObject messageObject) {
                 }
 
                 currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+                if (messageObject.type == 1) {
+                    currentPhotoObjectThumb = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, 80);
+                }
                 if (currentPhotoObject != null) {
                     boolean noSize = false;
                     if (currentMessageObject.type == 3 || currentMessageObject.type == 8) {
@@ -621,17 +629,22 @@ public void setMessageObject(MessageObject messageObject) {
                             }
                         }
                         if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
-                            if (messageObject.imagePreview != null) {
-                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(messageObject.imagePreview), noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                            if (allowedToSetPhoto || ImageLoader.getInstance().getImageFromMemory(currentPhotoObject.photoOwner.location, null, currentPhotoFilter, null) != null) {
+                                allowedToSetPhoto = true;
+                                if (messageObject.imagePreview != null) {
+                                    photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(messageObject.imagePreview), noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                                } else {
+                                    photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                                }
                             } else {
-                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                                photoImage.setImageBitmap(messageObject.imagePreview);
                             }
                         } else {
                             photoNotSet = true;
                             if (messageObject.imagePreview != null) {
                                 photoImage.setImageBitmap(messageObject.imagePreview);
-                            } else {
-                                photoImage.setImageBitmap((Bitmap)null);
+                            } else if (currentPhotoObjectThumb != null) {
+                                photoImage.setImage(currentPhotoObjectThumb.photoOwner.location, currentPhotoFilter, null, 0, true);
                             }
                         }
                     }
@@ -826,6 +839,20 @@ private void updateSecretTimeText() {
         }
     }
 
+    public void setAllowedToSetPhoto(boolean value) {
+        if (allowedToSetPhoto == value) {
+            return;
+        }
+        if (currentMessageObject != null && currentMessageObject.type == 1) {
+            allowedToSetPhoto = value;
+            if (value) {
+                MessageObject temp = currentMessageObject;
+                currentMessageObject = null;
+                setMessageObject(temp);
+            }
+        }
+    }
+
     @Override
     protected void onAfterBackgroundDraw(Canvas canvas) {
         boolean imageDrawn = false;
@@ -853,7 +880,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
                 menuDrawable = docMenuInDrawable;
             }
 
-            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50), AndroidUtilities.dp(10));
+            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10));
             menuDrawable.draw(canvas);
 
             if (!imageDrawn) {
@@ -945,14 +972,14 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
         } else if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto()  || currentMessageObject.type == 1 || (buttonState == 2 && currentMessageObject.type == 8) )) {
             infoPaint.setColor(0xffffffff);
             if (currentMessageObject.type == 1){
-                setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dpf(16.5f));
+                setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
             } else {
-                setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), Math.max(infoWidth , infoWidth2 + infoOffset) + AndroidUtilities.dp(8) + infoOffset, 2 * AndroidUtilities.dpf(16.5f));
+                setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), Math.max(infoWidth , infoWidth2 + infoOffset) + AndroidUtilities.dp(8) + infoOffset, 2 * AndroidUtilities.dp(16.5f));
             }
             mediaBackgroundDrawable.draw(canvas);
 
             if (currentMessageObject.type == 3) {
-                setDrawableBounds(videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), 2*(photoImage.getImageY() + AndroidUtilities.dpf(7.5f)));
+                setDrawableBounds(videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), 2*(photoImage.getImageY() + AndroidUtilities.dp(7.5f)));
                 videoIconDrawable.draw(canvas);
             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index a28e59ba2..639d34a47 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -160,14 +160,14 @@ public void setMessageObject(MessageObject messageObject) {
             super.setMessageObject(messageObject);
 
             backgroundWidth = messageObject.textWidth;
-            totalHeight = messageObject.textHeight + AndroidUtilities.dpf(19.5f) + namesOffset;
+            totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + namesOffset;
 
             int maxChildWidth = Math.max(backgroundWidth, nameWidth);
             maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
 
             int timeMore = timeWidth + AndroidUtilities.dp(6);
             if (messageObject.isOut()) {
-                timeMore += AndroidUtilities.dpf(20.5f);
+                timeMore += AndroidUtilities.dp(20.5f);
             }
 
             if (maxWidth - messageObject.lastLineWidth < timeMore) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
deleted file mode 100644
index 7008878d8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ /dev/null
@@ -1,456 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.android.ImageReceiver;
-
-public class ChatOrUserCell extends BaseCell {
-    private static TextPaint namePaint;
-    private static TextPaint nameEncryptedPaint;
-    private static TextPaint onlinePaint;
-    private static TextPaint offlinePaint;
-
-    private static Drawable lockDrawable;
-    private static Drawable broadcastDrawable;
-    private static Drawable groupDrawable;
-    private static Paint linePaint;
-
-    private CharSequence currentName;
-    private ImageReceiver avatarImage;
-    private CharSequence subLabel;
-
-    private ChatOrUserCellLayout cellLayout;
-    private TLRPC.User user = null;
-    private TLRPC.Chat chat = null;
-    private TLRPC.EncryptedChat encryptedChat = null;
-
-    private String lastName = null;
-    private int lastStatus = 0;
-    private TLRPC.FileLocation lastAvatar = null;
-
-    public boolean usePadding = true;
-    public boolean useSeparator = false;
-    public float drawAlpha = 1;
-
-    public ChatOrUserCell(Context context) {
-        super(context);
-        init();
-    }
-
-    private void init() {
-        if (namePaint == null) {
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(18));
-            namePaint.setColor(0xff222222);
-        }
-
-        if (nameEncryptedPaint == null) {
-            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(18));
-            nameEncryptedPaint.setColor(0xff00a60e);
-        }
-
-        if (onlinePaint == null) {
-            onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            onlinePaint.setTextSize(AndroidUtilities.dp(15));
-            onlinePaint.setColor(0xff316f9f);
-        }
-
-        if (offlinePaint == null) {
-            offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            offlinePaint.setTextSize(AndroidUtilities.dp(15));
-            offlinePaint.setColor(0xff999999);
-        }
-
-        if (lockDrawable == null) {
-            lockDrawable = getResources().getDrawable(R.drawable.ic_lock_green);
-        }
-
-        if (linePaint == null) {
-            linePaint = new Paint();
-            linePaint.setColor(0xffdcdcdc);
-        }
-
-        if (broadcastDrawable == null) {
-            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
-        }
-
-        if (groupDrawable == null) {
-            groupDrawable = getResources().getDrawable(R.drawable.grouplist);
-        }
-
-        if (avatarImage == null) {
-            avatarImage = new ImageReceiver(this);
-        }
-
-        if (cellLayout == null) {
-            cellLayout = new ChatOrUserCellLayout();
-        }
-    }
-
-    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
-        currentName = n;
-        user = u;
-        chat = c;
-        encryptedChat = ec;
-        subLabel = s;
-        update(0);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        if (avatarImage != null) {
-            avatarImage.clearImage();
-            lastAvatar = null;
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(64));
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (user == null && chat == null && encryptedChat == null) {
-            super.onLayout(changed, left, top, right, bottom);
-            return;
-        }
-        if (changed) {
-            buildLayout();
-        }
-    }
-
-    public void buildLayout() {
-        cellLayout.build(getMeasuredWidth(), getMeasuredHeight());
-    }
-
-    public void update(int mask) {
-        int placeHolderId = 0;
-        TLRPC.FileLocation photo = null;
-        if (user != null) {
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-            }
-            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
-        } else if (chat != null) {
-            if (chat.photo != null) {
-                photo = chat.photo.photo_small;
-            }
-            if (chat.id > 0) {
-                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
-            } else {
-                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
-            }
-        }
-
-        if (mask != 0) {
-            boolean continueUpdate = false;
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 && user != null || (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 && chat != null) {
-                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0 && user != null) {
-                int newStatus = 0;
-                if (user.status != null) {
-                    newStatus = user.status.expires;
-                }
-                if (newStatus != lastStatus) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && ((mask & MessagesController.UPDATE_MASK_NAME) != 0 && user != null) || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 && chat != null) {
-                String newName;
-                if (user != null) {
-                    newName = user.first_name + user.last_name;
-                } else {
-                    newName = chat.title;
-                }
-                if (!newName.equals(lastName)) {
-                    continueUpdate = true;
-                }
-            }
-
-            if (!continueUpdate) {
-                return;
-            }
-        }
-
-        if (user != null) {
-            if (user.status != null) {
-                lastStatus = user.status.expires;
-            } else {
-                lastStatus = 0;
-            }
-            lastName = user.first_name + user.last_name;
-        } else if (chat != null) {
-            lastName = chat.title;
-        }
-
-
-        lastAvatar = photo;
-        avatarImage.setImage(photo, "50_50", placeHolderId == 0 ? null : getResources().getDrawable(placeHolderId), false);
-
-        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
-            buildLayout();
-        } else {
-            requestLayout();
-        }
-        postInvalidate();
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (user == null && chat == null && encryptedChat == null) {
-            return;
-        }
-
-        if (cellLayout == null) {
-            requestLayout();
-            return;
-        }
-
-        if (useSeparator) {
-            int h = getMeasuredHeight();
-            if (!usePadding) {
-                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
-            } else {
-                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
-            }
-        }
-
-        if (drawAlpha != 1) {
-            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
-        }
-
-        if (cellLayout.drawNameLock) {
-            setDrawableBounds(lockDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
-            lockDrawable.draw(canvas);
-        } else if (cellLayout.drawNameGroup) {
-            setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
-            groupDrawable.draw(canvas);
-        } else if (cellLayout.drawNameBroadcast) {
-            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
-            broadcastDrawable.draw(canvas);
-        }
-
-        canvas.save();
-        canvas.translate(cellLayout.nameLeft, cellLayout.nameTop);
-        cellLayout.nameLayout.draw(canvas);
-        canvas.restore();
-
-        if (cellLayout.onlineLayout != null) {
-            canvas.save();
-            canvas.translate(cellLayout.onlineLeft, cellLayout.onlineTop);
-            cellLayout.onlineLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        avatarImage.draw(canvas);
-    }
-
-    private class ChatOrUserCellLayout {
-        private int nameLeft;
-        private int nameTop;
-        private int nameWidth;
-        private StaticLayout nameLayout;
-        private boolean drawNameLock;
-        private boolean drawNameBroadcast;
-        private boolean drawNameGroup;
-        private int nameLockLeft;
-        private int nameLockTop;
-
-        private int onlineLeft;
-        private int onlineTop = AndroidUtilities.dp(36);
-        private int onlineWidth;
-        private StaticLayout onlineLayout;
-
-        private int avatarTop = AndroidUtilities.dp(7);
-        private int avatarLeft;
-
-        public void build(int width, int height) {
-            CharSequence nameString = "";
-            TextPaint currentNamePaint;
-
-            drawNameBroadcast = false;
-            drawNameLock = false;
-            drawNameGroup = false;
-
-            if (encryptedChat != null) {
-                drawNameLock = true;
-                if (!LocaleController.isRTL) {
-                    nameLockLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
-                    nameLeft = AndroidUtilities.dp(65 + (usePadding ? 11 : 0)) + lockDrawable.getIntrinsicWidth();
-                } else {
-                    nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - lockDrawable.getIntrinsicWidth();
-                    nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
-                }
-                nameLockTop = AndroidUtilities.dp(15);
-            } else {
-                if (chat != null) {
-                    nameLockTop = AndroidUtilities.dp(26);
-                    if (chat.id < 0) {
-                        drawNameBroadcast = true;
-                    } else {
-                        drawNameGroup = true;
-                    }
-                    if (!LocaleController.isRTL) {
-                        nameLockLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
-                        nameLeft = AndroidUtilities.dp(65 + (usePadding ? 11 : 0)) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                    } else {
-                        nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
-                    }
-                } else {
-                    if (!LocaleController.isRTL) {
-                        nameLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
-                    } else {
-                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
-                    }
-                }
-            }
-
-            if (currentName != null) {
-                nameString = currentName;
-            } else {
-                String nameString2 = "";
-                if (chat != null) {
-                    nameString2 = chat.title;
-                } else if (user != null) {
-                    nameString2 = ContactsController.formatName(user.first_name, user.last_name);
-                }
-                nameString = nameString2.replace("\n", " ");
-            }
-            if (nameString.length() == 0) {
-                if (user != null && user.phone != null && user.phone.length() != 0) {
-                    nameString = PhoneFormat.getInstance().format("+" + user.phone);
-                } else {
-                    nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
-                }
-            }
-            if (encryptedChat != null) {
-                currentNamePaint = nameEncryptedPaint;
-            } else {
-                currentNamePaint = namePaint;
-            }
-
-            if (!LocaleController.isRTL) {
-                onlineWidth = nameWidth = width - nameLeft - AndroidUtilities.dp(3 + (usePadding ? 11 : 0));
-            } else {
-                onlineWidth = nameWidth = width - nameLeft - AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
-            }
-            if (drawNameLock) {
-                nameWidth -= AndroidUtilities.dp(6) + lockDrawable.getIntrinsicWidth();
-            } else if (drawNameBroadcast) {
-                nameWidth -= AndroidUtilities.dp(6) + broadcastDrawable.getIntrinsicWidth();
-            }
-
-            CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
-            if (chat == null) {
-                if (!LocaleController.isRTL) {
-                    onlineLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
-                } else {
-                    onlineLeft = usePadding ? AndroidUtilities.dp(11) : 0;
-                }
-
-                CharSequence onlineString = "";
-                TextPaint currentOnlinePaint = offlinePaint;
-
-                if (subLabel != null) {
-                    onlineString = subLabel;
-                } else {
-                    onlineString = LocaleController.formatUserStatus(user);
-                    if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
-                        currentOnlinePaint = onlinePaint;
-                        onlineString = LocaleController.getString("Online", R.string.Online);
-                    }
-                }
-
-                CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-                onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                nameTop = AndroidUtilities.dp(12);
-            } else {
-                onlineLayout = null;
-                nameTop = AndroidUtilities.dp(22);
-            }
-
-            if (!LocaleController.isRTL) {
-                avatarLeft = usePadding ? AndroidUtilities.dp(11) : 0;
-            } else {
-                avatarLeft = width - AndroidUtilities.dp(50 + (usePadding ? 11 : 0));
-            }
-            avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(50), AndroidUtilities.dp(50));
-
-
-            double widthpx = 0;
-            float left = 0;
-            if (LocaleController.isRTL) {
-                if (nameLayout.getLineCount() > 0) {
-                    left = nameLayout.getLineLeft(0);
-                    if (left == 0) {
-                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                        if (widthpx < nameWidth) {
-                            nameLeft += (nameWidth - widthpx);
-                        }
-                    }
-                }
-                if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
-                    left = onlineLayout.getLineLeft(0);
-                    if (left == 0) {
-                        widthpx = Math.ceil(onlineLayout.getLineWidth(0));
-                        if (widthpx < onlineWidth) {
-                            onlineLeft += (onlineWidth - widthpx);
-                        }
-                    }
-                }
-            } else {
-                if (nameLayout.getLineCount() > 0) {
-                    left = nameLayout.getLineRight(0);
-                    if (left == nameWidth) {
-                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                        if (widthpx < nameWidth) {
-                            nameLeft -= (nameWidth - widthpx);
-                        }
-                    }
-                }
-                if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
-                    left = onlineLayout.getLineRight(0);
-                    if (left == onlineWidth) {
-                        widthpx = Math.ceil(onlineLayout.getLineWidth(0));
-                        if (widthpx < onlineWidth) {
-                            onlineLeft -= (onlineWidth - widthpx);
-                        }
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index b1b688769..26bc739b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -30,8 +30,10 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.ImageReceiver;
+import org.telegram.ui.Views.AvatarDrawable;
 
 public class DialogCell extends BaseCell {
+
     private static TextPaint namePaint;
     private static TextPaint nameEncryptedPaint;
     private static TextPaint nameUnknownPaint;
@@ -55,11 +57,12 @@
     private boolean allowPrintStrings;
     private int lastMessageDate;
     private int unreadCount;
+    private boolean lastUnreadState;
     private MessageObject message;
 
     private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
 
-    private DialogCellLayout cellLayout;
     private TLRPC.User user = null;
     private TLRPC.Chat chat = null;
     private TLRPC.EncryptedChat encryptedChat = null;
@@ -67,101 +70,96 @@
 
     public boolean useSeparator = false;
 
+
+    private int nameLeft;
+    private StaticLayout nameLayout;
+    private boolean drawNameLock;
+    private boolean drawNameGroup;
+    private boolean drawNameBroadcast;
+    private int nameLockLeft;
+    private int nameLockTop;
+
+    private int timeLeft;
+    private int timeTop = AndroidUtilities.dp(17);
+    private StaticLayout timeLayout;
+
+    private boolean drawCheck1;
+    private boolean drawCheck2;
+    private boolean drawClock;
+    private int checkDrawLeft;
+    private int checkDrawTop = AndroidUtilities.dp(18);
+    private int halfCheckDrawLeft;
+
+    private int messageTop = AndroidUtilities.dp(40);
+    private int messageLeft;
+    private StaticLayout messageLayout;
+
+    private boolean drawError;
+    private int errorTop = AndroidUtilities.dp(39);
+    private int errorLeft;
+
+    private boolean drawCount;
+    private int countTop = AndroidUtilities.dp(39);
+    private int countLeft;
+    private int countWidth;
+    private StaticLayout countLayout;
+
+    private int avatarTop = AndroidUtilities.dp(10);
+
     private void init() {
         if (namePaint == null) {
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(19));
-            namePaint.setColor(0xff222222);
+            namePaint.setTextSize(AndroidUtilities.dp(17));
+            namePaint.setColor(0xff212121);
             namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        }
 
-        if (nameEncryptedPaint == null) {
             nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(19));
+            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(17));
             nameEncryptedPaint.setColor(0xff00a60e);
             nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        }
 
-        if (nameUnknownPaint == null) {
             nameUnknownPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameUnknownPaint.setTextSize(AndroidUtilities.dp(19));
-            nameUnknownPaint.setColor(0xff316f9f);
+            nameUnknownPaint.setTextSize(AndroidUtilities.dp(17));
+            nameUnknownPaint.setColor(0xff4d83b3);
             nameUnknownPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        }
 
-        if (messagePaint == null) {
             messagePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             messagePaint.setTextSize(AndroidUtilities.dp(16));
-            messagePaint.setColor(0xff808080);
-        }
+            messagePaint.setColor(0xff8f8f8f);
 
-        if (linePaint == null) {
             linePaint = new Paint();
             linePaint.setColor(0xffdcdcdc);
-        }
 
-        if (messagePrintingPaint == null) {
             messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             messagePrintingPaint.setTextSize(AndroidUtilities.dp(16));
-            messagePrintingPaint.setColor(0xff316f9f);
-        }
+            messagePrintingPaint.setColor(0xff4d83b3);
 
-        if (timePaint == null) {
             timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(14));
-            timePaint.setColor(0xff9e9e9e);
-        }
+            timePaint.setTextSize(AndroidUtilities.dp(13));
+            timePaint.setColor(0xff999999);
 
-        if (countPaint == null) {
             countPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             countPaint.setTextSize(AndroidUtilities.dp(13));
             countPaint.setColor(0xffffffff);
-        }
+            countPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
 
-        if (lockDrawable == null) {
-            lockDrawable = getResources().getDrawable(R.drawable.ic_lock_green);
-        }
-
-        if (checkDrawable == null) {
+            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
             checkDrawable = getResources().getDrawable(R.drawable.dialogs_check);
-        }
-
-        if (halfCheckDrawable == null) {
             halfCheckDrawable = getResources().getDrawable(R.drawable.dialogs_halfcheck);
-        }
-
-        if (clockDrawable == null) {
             clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
-        }
-
-        if (errorDrawable == null) {
             errorDrawable = getResources().getDrawable(R.drawable.dialogs_warning);
-        }
-
-        if (countDrawable == null) {
             countDrawable = getResources().getDrawable(R.drawable.dialogs_badge);
-        }
-
-        if (groupDrawable == null) {
-            groupDrawable = getResources().getDrawable(R.drawable.grouplist);
-        }
-
-        if (broadcastDrawable == null) {
-            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
-        }
-
-        if (avatarImage == null) {
-            avatarImage = new ImageReceiver(this);
-        }
-
-        if (cellLayout == null) {
-            cellLayout = new DialogCellLayout();
+            groupDrawable = getResources().getDrawable(R.drawable.list_group);
+            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
         }
     }
 
     public DialogCell(Context context) {
         super(context);
         init();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
+        avatarDrawable = new AvatarDrawable();
     }
 
     public void setDialog(long dialog_id, MessageObject messageObject, boolean usePrintStrings, int date, int unread) {
@@ -170,6 +168,7 @@ public void setDialog(long dialog_id, MessageObject messageObject, boolean usePr
         allowPrintStrings = usePrintStrings;
         lastMessageDate = date;
         unreadCount = unread;
+        lastUnreadState = messageObject != null && messageObject.isUnread();
         update(0);
     }
 
@@ -187,7 +186,7 @@ protected void onDetachedFromWindow() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(70));
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72));
     }
 
     @Override
@@ -202,7 +201,360 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
     }
 
     public void buildLayout() {
-        cellLayout.build(getMeasuredWidth(), getMeasuredHeight());
+        String nameString = "";
+        String timeString = "";
+        String countString = null;
+        CharSequence messageString = "";
+        CharSequence printingString = null;
+        if (allowPrintStrings) {
+            printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
+        }
+        TextPaint currentNamePaint = namePaint;
+        TextPaint currentMessagePaint = messagePaint;
+        boolean checkMessage = true;
+
+        drawNameGroup = false;
+        drawNameBroadcast = false;
+        drawNameLock = false;
+
+        if (encryptedChat != null) {
+            drawNameLock = true;
+            nameLockTop = AndroidUtilities.dp(16.5f);
+            if (!LocaleController.isRTL) {
+                nameLockLeft = AndroidUtilities.dp(72);
+                nameLeft = AndroidUtilities.dp(76) + lockDrawable.getIntrinsicWidth();
+            } else {
+                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(72) - lockDrawable.getIntrinsicWidth();
+                nameLeft = AndroidUtilities.dp(14);
+            }
+        } else {
+            if (chat != null) {
+                if (chat.id < 0) {
+                    drawNameBroadcast = true;
+                    nameLockTop = AndroidUtilities.dp(16.5f);
+                } else {
+                    drawNameGroup = true;
+                    nameLockTop = AndroidUtilities.dp(17.5f);
+                }
+
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.dp(72);
+                    nameLeft = AndroidUtilities.dp(76) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                } else {
+                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(72) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    nameLeft = AndroidUtilities.dp(14);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    nameLeft = AndroidUtilities.dp(72);
+                } else {
+                    nameLeft = AndroidUtilities.dp(14);
+                }
+            }
+        }
+
+        if (message == null) {
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (encryptedChat != null) {
+                    currentMessagePaint = messagePrintingPaint;
+                    if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+                        messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+                        if (user != null && user.first_name != null) {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
+                        } else {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
+                        }
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+                        messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
+                        if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
+                            if (user != null && user.first_name != null) {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
+                            } else {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
+                            }
+                        } else {
+                            messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
+                        }
+                    }
+                }
+            }
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            }
+            drawCheck1 = false;
+            drawCheck2 = false;
+            drawClock = false;
+            drawCount = false;
+            drawError = false;
+        } else {
+            TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
+
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            } else {
+                timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
+            }
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                    messageString = message.messageText;
+                    currentMessagePaint = messagePrintingPaint;
+                } else {
+                    if (chat != null && chat.id > 0) {
+                        String name = "";
+                        if (message.isFromMe()) {
+                            name = LocaleController.getString("FromYou", R.string.FromYou);
+                        } else {
+                            if (fromUser != null) {
+                                if (fromUser.first_name.length() > 0) {
+                                    name = fromUser.first_name;
+                                } else {
+                                    name = fromUser.last_name;
+                                }
+                            }
+                        }
+                        checkMessage = false;
+                        if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                            currentMessagePaint = messagePrintingPaint;
+                            messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#4d83b3>%s</font>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                        } else {
+                            if (message.messageOwner.message != null) {
+                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#808080>%s</font>", name, message.messageOwner.message.replace("\n", " ").replace("<", "&lt;").replace(">", "&gt;"))), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                            }
+                        }
+                    } else {
+                        messageString = message.messageText;
+                        if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                            currentMessagePaint = messagePrintingPaint;
+                        }
+                    }
+                }
+            }
+
+            if (unreadCount != 0) {
+                drawCount = true;
+                countString = String.format("%d", unreadCount);
+            } else {
+                drawCount = false;
+            }
+
+            if (message.isFromMe() && message.isOut()) {
+                if (message.isSending()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = true;
+                    drawError = false;
+                } else if (message.isSendError()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = false;
+                    drawError = true;
+                    drawCount = false;
+                } else if (message.isSent()) {
+                    if (!message.isUnread()) {
+                        drawCheck1 = true;
+                        drawCheck2 = true;
+                    } else {
+                        drawCheck1 = false;
+                        drawCheck2 = true;
+                    }
+                    drawClock = false;
+                    drawError = false;
+                }
+            } else {
+                drawCheck1 = false;
+                drawCheck2 = false;
+                drawClock = false;
+                drawError = false;
+            }
+        }
+
+        int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+        timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        if (!LocaleController.isRTL) {
+            timeLeft = getMeasuredWidth() - AndroidUtilities.dp(15) - timeWidth;
+        } else {
+            timeLeft = AndroidUtilities.dp(15);
+        }
+
+        if (chat != null) {
+            nameString = chat.title;
+        } else if (user != null) {
+            if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
+                    nameString = ContactsController.formatName(user.first_name, user.last_name);
+                } else {
+                    if (user.phone != null && user.phone.length() != 0) {
+                        nameString = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        currentNamePaint = nameUnknownPaint;
+                        nameString = ContactsController.formatName(user.first_name, user.last_name);
+                    }
+                }
+            } else {
+                nameString = ContactsController.formatName(user.first_name, user.last_name);
+            }
+            if (encryptedChat != null) {
+                currentNamePaint = nameEncryptedPaint;
+            }
+        }
+        if (nameString.length() == 0) {
+            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+        }
+
+        int nameWidth;
+
+        if (!LocaleController.isRTL) {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(14) - timeWidth;
+        } else {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(72) - timeWidth;
+            nameLeft += timeWidth;
+        }
+        if (drawNameLock) {
+            nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
+        } else if (drawNameGroup) {
+            nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
+        } else if (drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
+        }
+        if (drawClock) {
+            int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
+            nameWidth -= w;
+            if (!LocaleController.isRTL) {
+                checkDrawLeft = timeLeft - w;
+            } else {
+                checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                nameLeft += w;
+            }
+        } else if (drawCheck2) {
+            int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
+            nameWidth -= w;
+            if (drawCheck1) {
+                nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
+                if (!LocaleController.isRTL) {
+                    halfCheckDrawLeft = timeLeft - w;
+                    checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.dp(5.5f);
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                    halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.dp(5.5f);
+                    nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    checkDrawLeft = timeLeft - w;
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                    nameLeft += w;
+                }
+            }
+        }
+
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        try {
+            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        int messageWidth = getMeasuredWidth() - AndroidUtilities.dp(88);
+        int avatarLeft;
+        if (!LocaleController.isRTL) {
+            messageLeft = AndroidUtilities.dp(72);
+            avatarLeft = AndroidUtilities.dp(9);
+        } else {
+            messageLeft = AndroidUtilities.dp(16);
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(61);
+        }
+        avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(52), AndroidUtilities.dp(52));
+        if (drawError) {
+            int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                errorLeft = getMeasuredWidth() - errorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(11);
+            } else {
+                errorLeft = AndroidUtilities.dp(11);
+                messageLeft += w;
+            }
+        } else if (countString != null) {
+            countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
+            countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+            int w = countWidth + AndroidUtilities.dp(18);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                countLeft = getMeasuredWidth() - countWidth - AndroidUtilities.dp(19);
+            } else {
+                countLeft = AndroidUtilities.dp(19);
+                messageLeft += w;
+            }
+            drawCount = true;
+        } else {
+            drawCount = false;
+        }
+
+        if (checkMessage) {
+            if (messageString == null) {
+                messageString = "";
+            }
+            String mess = messageString.toString().replace("\n", " ");
+            if (mess.length() > 150) {
+                mess = mess.substring(0, 150);
+            }
+            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
+        }
+
+        CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+        double widthpx = 0;
+        float left = 0;
+        if (LocaleController.isRTL) {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft += (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft += (messageWidth - widthpx);
+                    }
+                }
+            }
+        } else {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineRight(0);
+                if (left == nameWidth) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft -= (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineRight(0);
+                if (left == messageWidth) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft -= (messageWidth - widthpx);
+                    }
+                }
+            }
+        }
     }
 
     public void update(int mask) {
@@ -214,28 +566,36 @@ public void update(int mask) {
                     continueUpdate = true;
                 }
             }
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
                 if (chat == null) {
                     continueUpdate = true;
                 }
             }
-            if ((mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 if (chat == null) {
                     continueUpdate = true;
                 }
             }
-            if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
                 if (user == null) {
                     continueUpdate = true;
                 }
             }
-            if ((mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
                 if (user == null) {
                     continueUpdate = true;
                 }
             }
-            if ((mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
-                continueUpdate = true;
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
+                if (message != null && lastUnreadState != message.isUnread()) {
+                    continueUpdate = true;
+                } else if (allowPrintStrings) {
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
+                    if (dialog != null && unreadCount != dialog.unread_count) {
+                        unreadCount = dialog.unread_count;
+                        continueUpdate = true;
+                    }
+                }
             }
 
             if (!continueUpdate) {
@@ -265,24 +625,19 @@ public void update(int mask) {
             }
         }
 
-        int placeHolderId = 0;
         TLRPC.FileLocation photo = null;
         if (user != null) {
             if (user.photo != null) {
                 photo = user.photo.photo_small;
             }
-            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
+            avatarDrawable.setInfo(user);
         } else if (chat != null) {
             if (chat.photo != null) {
                 photo = chat.photo.photo_small;
             }
-            if (chat.id > 0) {
-                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
-            } else {
-                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
-            }
+            avatarDrawable.setInfo(chat);
         }
-        avatarImage.setImage(photo, "50_50", placeHolderId == 0 ? null : getResources().getDrawable(placeHolderId), false);
+        avatarImage.setImage(photo, "50_50", avatarDrawable, false);
 
         if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
             buildLayout();
@@ -299,469 +654,69 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
-        if (cellLayout == null) {
-            requestLayout();
-            return;
-        }
-
-        if (cellLayout.drawNameLock) {
-            setDrawableBounds(lockDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+        if (drawNameLock) {
+            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
             lockDrawable.draw(canvas);
-        } else if (cellLayout.drawNameGroup) {
-            setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+        } else if (drawNameGroup) {
+            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
             groupDrawable.draw(canvas);
-        } else if (cellLayout.drawNameBroadcast) {
-            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+        } else if (drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
             broadcastDrawable.draw(canvas);
         }
 
-        if (cellLayout.nameLayout != null) {
+        if (nameLayout != null) {
             canvas.save();
-            canvas.translate(cellLayout.nameLeft, cellLayout.nameTop);
-            cellLayout.nameLayout.draw(canvas);
+            canvas.translate(nameLeft, AndroidUtilities.dp(13));
+            nameLayout.draw(canvas);
             canvas.restore();
         }
 
         canvas.save();
-        canvas.translate(cellLayout.timeLeft, cellLayout.timeTop);
-        cellLayout.timeLayout.draw(canvas);
+        canvas.translate(timeLeft, timeTop);
+        timeLayout.draw(canvas);
         canvas.restore();
 
         canvas.save();
-        canvas.translate(cellLayout.messageLeft, cellLayout.messageTop);
-        cellLayout.messageLayout.draw(canvas);
+        canvas.translate(messageLeft, messageTop);
+        messageLayout.draw(canvas);
         canvas.restore();
 
-        if (cellLayout.drawClock) {
-            setDrawableBounds(clockDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+        if (drawClock) {
+            setDrawableBounds(clockDrawable, checkDrawLeft, checkDrawTop);
             clockDrawable.draw(canvas);
-        } else if (cellLayout.drawCheck2) {
-            if (cellLayout.drawCheck1) {
-                setDrawableBounds(halfCheckDrawable, cellLayout.halfCheckDrawLeft, cellLayout.checkDrawTop);
+        } else if (drawCheck2) {
+            if (drawCheck1) {
+                setDrawableBounds(halfCheckDrawable, halfCheckDrawLeft, checkDrawTop);
                 halfCheckDrawable.draw(canvas);
-                setDrawableBounds(checkDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
                 checkDrawable.draw(canvas);
             } else {
-                setDrawableBounds(checkDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
                 checkDrawable.draw(canvas);
             }
         }
 
-        if (cellLayout.drawError) {
-            setDrawableBounds(errorDrawable, cellLayout.errorLeft, cellLayout.errorTop);
+        if (drawError) {
+            setDrawableBounds(errorDrawable, errorLeft, errorTop);
             errorDrawable.draw(canvas);
-        } else if (cellLayout.drawCount) {
-            setDrawableBounds(countDrawable, cellLayout.countLeft - AndroidUtilities.dp(5), cellLayout.countTop, cellLayout.countWidth + AndroidUtilities.dp(10), countDrawable.getIntrinsicHeight());
+        } else if (drawCount) {
+            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop, countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
             countDrawable.draw(canvas);
             canvas.save();
-            canvas.translate(cellLayout.countLeft, cellLayout.countTop + AndroidUtilities.dp(3));
-            cellLayout.countLayout.draw(canvas);
+            canvas.translate(countLeft, countTop + AndroidUtilities.dp(4));
+            countLayout.draw(canvas);
             canvas.restore();
         }
 
-        avatarImage.draw(canvas);
-
         if (useSeparator) {
-            int h = getMeasuredHeight();
-            if (AndroidUtilities.isTablet()) {
-                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
-            } else {
-                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
-            }
-        }
-    }
-
-    private class DialogCellLayout {
-        private int nameLeft;
-        private int nameTop = AndroidUtilities.dp(10);
-        private int nameWidth;
-        private StaticLayout nameLayout;
-        private boolean drawNameLock;
-        private boolean drawNameGroup;
-        private boolean drawNameBroadcast;
-        private int nameLockLeft;
-        private int nameLockTop;
-
-        private int timeLeft;
-        private int timeTop = AndroidUtilities.dp(13);
-        private int timeWidth;
-        private StaticLayout timeLayout;
-
-        private boolean drawCheck1;
-        private boolean drawCheck2;
-        private boolean drawClock;
-        private int checkDrawLeft;
-        private int checkDrawTop = AndroidUtilities.dp(15);
-        private int halfCheckDrawLeft;
-
-        private int messageTop = AndroidUtilities.dp(40);
-        private int messageLeft;
-        private int messageWidth;
-        private StaticLayout messageLayout;
-
-        private boolean drawError;
-        private int errorTop = AndroidUtilities.dp(37);
-        private int errorLeft;
-
-        private boolean drawCount;
-        private int countTop = AndroidUtilities.dp(37);
-        private int countLeft;
-        private int countWidth;
-        private StaticLayout countLayout;
-
-        private int avatarTop = AndroidUtilities.dp(8);
-        private int avatarLeft;
-
-        public void build(int width, int height) {
-            String nameString = "";
-            String timeString = "";
-            String countString = null;
-            CharSequence messageString = "";
-            CharSequence printingString = null;
-            if (allowPrintStrings) {
-                printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
-            }
-            TextPaint currentNamePaint = namePaint;
-            TextPaint currentMessagePaint = messagePaint;
-            boolean checkMessage = true;
-
-            drawNameGroup = false;
-            drawNameBroadcast = false;
-            drawNameLock = false;
-
-            if (encryptedChat != null) {
-                drawNameLock = true;
-                nameLockTop = AndroidUtilities.dp(13);
-                if (!LocaleController.isRTL) {
-                    nameLockLeft = AndroidUtilities.dp(77);
-                    nameLeft = AndroidUtilities.dp(81) + lockDrawable.getIntrinsicWidth();
-                } else {
-                    nameLockLeft = width - AndroidUtilities.dp(77) - lockDrawable.getIntrinsicWidth();
-                    nameLeft = AndroidUtilities.dp(14);
-                }
-            } else {
-                if (chat != null) {
-                    if (chat.id < 0) {
-                        drawNameBroadcast = true;
-                    } else {
-                        drawNameGroup = true;
-                    }
-                    nameLockTop = AndroidUtilities.dp(14);
-                    if (!LocaleController.isRTL) {
-                        nameLockLeft = AndroidUtilities.dp(77);
-                        nameLeft = AndroidUtilities.dp(81) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                    } else {
-                        nameLockLeft = width - AndroidUtilities.dp(77) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                        nameLeft = AndroidUtilities.dp(14);
-                    }
-                } else {
-                    if (!LocaleController.isRTL) {
-                        nameLeft = AndroidUtilities.dp(77);
-                    } else {
-                        nameLeft = AndroidUtilities.dp(14);
-                    }
-                }
-            }
-
-            if (message == null) {
-                if (printingString != null) {
-                    lastPrintString = messageString = printingString;
-                    currentMessagePaint = messagePrintingPaint;
-                } else {
-                    lastPrintString = null;
-                    if (encryptedChat != null) {
-                        currentMessagePaint = messagePrintingPaint;
-                        if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
-                            messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
-                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
-                            if (user != null && user.first_name != null) {
-                                messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
-                            } else {
-                                messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
-                            }
-                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
-                            messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
-                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
-                            if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
-                                if (user != null && user.first_name != null) {
-                                    messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
-                                } else {
-                                    messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
-                                }
-                            } else {
-                                messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
-                            }
-                        }
-                    }
-                }
-                if (lastMessageDate != 0) {
-                    timeString = LocaleController.stringForMessageListDate(lastMessageDate);
-                }
-                drawCheck1 = false;
-                drawCheck2 = false;
-                drawClock = false;
-                drawCount = false;
-                drawError = false;
-            } else {
-                TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
-
-                if (lastMessageDate != 0) {
-                    timeString = LocaleController.stringForMessageListDate(lastMessageDate);
-                } else {
-                    timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
-                }
-                if (printingString != null) {
-                    lastPrintString = messageString = printingString;
-                    currentMessagePaint = messagePrintingPaint;
-                } else {
-                    lastPrintString = null;
-                    if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                        messageString = message.messageText;
-                        currentMessagePaint = messagePrintingPaint;
-                    } else {
-                        if (chat != null && chat.id > 0) {
-                            String name = "";
-                            if (message.isFromMe()) {
-                                name = LocaleController.getString("FromYou", R.string.FromYou);
-                            } else {
-                                if (fromUser != null) {
-                                    if (fromUser.first_name.length() > 0) {
-                                        name = fromUser.first_name;
-                                    } else {
-                                        name = fromUser.last_name;
-                                    }
-                                }
-                            }
-                            checkMessage = false;
-                            if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
-                                currentMessagePaint = messagePrintingPaint;
-                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#316f9f>%s</font>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                            } else {
-                                if (message.messageOwner.message != null) {
-                                    messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#808080>%s</font>", name, message.messageOwner.message.replace("\n", " ").replace("<", "&lt;").replace(">", "&gt;"))), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                                }
-                            }
-                        } else {
-                            messageString = message.messageText;
-                            if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
-                                currentMessagePaint = messagePrintingPaint;
-                            }
-                        }
-                    }
-                }
-
-                if (unreadCount != 0) {
-                    drawCount = true;
-                    countString = String.format("%d", unreadCount);
-                } else {
-                    drawCount = false;
-                }
-
-                if (message.isFromMe() && message.isOut()) {
-                    if (message.isSending()) {
-                        drawCheck1 = false;
-                        drawCheck2 = false;
-                        drawClock = true;
-                        drawError = false;
-                    } else if (message.isSendError()) {
-                        drawCheck1 = false;
-                        drawCheck2 = false;
-                        drawClock = false;
-                        drawError = true;
-                        drawCount = false;
-                    } else if (message.isSent()) {
-                        if (!message.isUnread()) {
-                            drawCheck1 = true;
-                            drawCheck2 = true;
-                        } else {
-                            drawCheck1 = false;
-                            drawCheck2 = true;
-                        }
-                        drawClock = false;
-                        drawError = false;
-                    }
-                } else {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = false;
-                    drawError = false;
-                }
-            }
-
-            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (!LocaleController.isRTL) {
-                timeLeft = width - AndroidUtilities.dp(11) - timeWidth;
-            } else {
-                timeLeft = AndroidUtilities.dp(11);
-            }
-
-            if (chat != null) {
-                nameString = chat.title;
-            } else if (user != null) {
-                if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
-                    if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
-                        nameString = ContactsController.formatName(user.first_name, user.last_name);
-                    } else {
-                        if (user.phone != null && user.phone.length() != 0) {
-                            nameString = PhoneFormat.getInstance().format("+" + user.phone);
-                        } else {
-                            currentNamePaint = nameUnknownPaint;
-                            nameString = ContactsController.formatName(user.first_name, user.last_name);
-                        }
-                    }
-                } else {
-                    nameString = ContactsController.formatName(user.first_name, user.last_name);
-                }
-                if (encryptedChat != null) {
-                    currentNamePaint = nameEncryptedPaint;
-                }
-            }
-            if (nameString.length() == 0) {
-                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
-            }
-
-            if (!LocaleController.isRTL) {
-                nameWidth = width - nameLeft - AndroidUtilities.dp(14) - timeWidth;
-            } else {
-                nameWidth = width - nameLeft - AndroidUtilities.dp(77) - timeWidth;
-                nameLeft += timeWidth;
-            }
-            if (drawNameLock) {
-                nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
-            } else if (drawNameGroup) {
-                nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
-            } else if (drawNameBroadcast) {
-                nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
-            }
-            if (drawClock) {
-                int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(2);
-                nameWidth -= w;
-                if (!LocaleController.isRTL) {
-                    checkDrawLeft = timeLeft - w;
-                } else {
-                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
-                    nameLeft += w;
-                }
-            } else if (drawCheck2) {
-                int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(2);
-                nameWidth -= w;
-                if (drawCheck1) {
-                    nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(5);
-                    if (!LocaleController.isRTL) {
-                        halfCheckDrawLeft = timeLeft - w;
-                        checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.dp(5);
-                    } else {
-                        checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
-                        halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.dp(5);
-                        nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(5);
-                    }
-                } else {
-                    if (!LocaleController.isRTL) {
-                        checkDrawLeft = timeLeft - w;
-                    } else {
-                        checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
-                        nameLeft += w;
-                    }
-                }
-            }
-
-            CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            try {
-                nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            messageWidth = width - AndroidUtilities.dp(88);
-            if (!LocaleController.isRTL) {
-                messageLeft = AndroidUtilities.dp(77);
-                avatarLeft = AndroidUtilities.dp(11);
-            } else {
-                messageLeft = AndroidUtilities.dp(11);
-                avatarLeft = width - AndroidUtilities.dp(65);
-            }
-            avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(54), AndroidUtilities.dp(54));
-            if (drawError) {
-                int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8);
-                messageWidth -= w;
-                if (!LocaleController.isRTL) {
-                    errorLeft = width - errorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(11);
-                } else {
-                    errorLeft = AndroidUtilities.dp(11);
-                    messageLeft += w;
-                }
-            } else if (countString != null) {
-                countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
-                countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
-                int w = countWidth + AndroidUtilities.dp(18);
-                messageWidth -= w;
-                if (!LocaleController.isRTL) {
-                    countLeft = width - countWidth - AndroidUtilities.dp(16);
-                } else {
-                    countLeft = AndroidUtilities.dp(16);
-                    messageLeft += w;
-                }
-                drawCount = true;
-            } else {
-                drawCount = false;
-            }
-
-            if (checkMessage) {
-                if (messageString == null) {
-                    messageString = "";
-                }
-                String mess = messageString.toString().replace("\n", " ");
-                if (mess.length() > 150) {
-                    mess = mess.substring(0, 150);
-                }
-                messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-            }
-
-            CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
-            double widthpx = 0;
-            float left = 0;
             if (LocaleController.isRTL) {
-                if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                    left = nameLayout.getLineLeft(0);
-                    if (left == 0) {
-                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                        if (widthpx < nameWidth) {
-                            nameLeft += (nameWidth - widthpx);
-                        }
-                    }
-                }
-                if (messageLayout.getLineCount() > 0) {
-                    left = messageLayout.getLineLeft(0);
-                    if (left == 0) {
-                        widthpx = Math.ceil(messageLayout.getLineWidth(0));
-                        if (widthpx < messageWidth) {
-                            messageLeft += (messageWidth - widthpx);
-                        }
-                    }
-                }
+                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.dp(72), getMeasuredHeight() - 1, linePaint);
             } else {
-                if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                    left = nameLayout.getLineRight(0);
-                    if (left == nameWidth) {
-                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                        if (widthpx < nameWidth) {
-                            nameLeft -= (nameWidth - widthpx);
-                        }
-                    }
-                }
-                if (messageLayout.getLineCount() > 0) {
-                    left = messageLayout.getLineRight(0);
-                    if (left == messageWidth) {
-                        widthpx = Math.ceil(messageLayout.getLineWidth(0));
-                        if (widthpx < messageWidth) {
-                            messageLeft -= (messageWidth - widthpx);
-                        }
-                    }
-                }
+                canvas.drawLine(AndroidUtilities.dp(72), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
             }
         }
+
+        avatarImage.draw(canvas);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DividerCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DividerCell.java
new file mode 100644
index 000000000..cfc8fa114
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DividerCell.java
@@ -0,0 +1,39 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+
+import org.telegram.android.AndroidUtilities;
+
+public class DividerCell extends BaseCell {
+
+    private static Paint paint;
+
+    public DividerCell(Context context) {
+        super(context);
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(16) + 1);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        canvas.drawLine(getPaddingLeft(), AndroidUtilities.dp(8), getWidth() - getPaddingRight(), AndroidUtilities.dp(8), paint);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerActionCell.java
new file mode 100644
index 000000000..2a4d708fc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerActionCell.java
@@ -0,0 +1,54 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+
+public class DrawerActionCell extends FrameLayout {
+
+    private TextView textView;
+
+    public DrawerActionCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff444444);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
+        textView.setCompoundDrawablePadding(AndroidUtilities.dp(34));
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.LEFT;
+        layoutParams.leftMargin = AndroidUtilities.dp(14);
+        layoutParams.rightMargin = AndroidUtilities.dp(16);
+        textView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextAndIcon(String text, int resId) {
+        textView.setText(text);
+        textView.setCompoundDrawablesWithIntrinsicBounds(resId, 0, 0, 0);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
new file mode 100644
index 000000000..d9f5199fb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -0,0 +1,105 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.os.Build;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Views.AvatarDrawable;
+import org.telegram.ui.Views.BackupImageView;
+
+public class DrawerProfileCell extends FrameLayout {
+
+    private BackupImageView avatarImageView;
+    private TextView nameTextView;
+    private TextView phoneTextView;
+
+    public DrawerProfileCell(Context context) {
+        super(context);
+        setBackgroundColor(0xff4c84b5);
+
+        avatarImageView = new BackupImageView(context);
+        avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
+        addView(avatarImageView);
+        LayoutParams layoutParams = (LayoutParams) avatarImageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(64);
+        layoutParams.height = AndroidUtilities.dp(64);
+        layoutParams.gravity = Gravity.LEFT | Gravity.BOTTOM;
+        layoutParams.leftMargin = AndroidUtilities.dp(16);
+        layoutParams.bottomMargin = AndroidUtilities.dp(67);
+        avatarImageView.setLayoutParams(layoutParams);
+
+        nameTextView = new TextView(context);
+        nameTextView.setTextColor(0xffffffff);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        nameTextView.setLines(1);
+        nameTextView.setMaxLines(1);
+        nameTextView.setSingleLine(true);
+        nameTextView.setGravity(Gravity.LEFT);
+        addView(nameTextView);
+        layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.LEFT | Gravity.BOTTOM;
+        layoutParams.leftMargin = AndroidUtilities.dp(16);
+        layoutParams.bottomMargin = AndroidUtilities.dp(28);
+        layoutParams.rightMargin = AndroidUtilities.dp(16);
+        nameTextView.setLayoutParams(layoutParams);
+
+        phoneTextView = new TextView(context);
+        phoneTextView.setTextColor(0xffc2e5ff);
+        phoneTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        phoneTextView.setLines(1);
+        phoneTextView.setMaxLines(1);
+        phoneTextView.setSingleLine(true);
+        phoneTextView.setGravity(Gravity.LEFT);
+        addView(phoneTextView);
+        layoutParams = (FrameLayout.LayoutParams) phoneTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.LEFT | Gravity.BOTTOM;
+        layoutParams.leftMargin = AndroidUtilities.dp(16);
+        layoutParams.bottomMargin = AndroidUtilities.dp(9);
+        layoutParams.rightMargin = AndroidUtilities.dp(16);
+        phoneTextView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        if (Build.VERSION.SDK_INT >= 21) {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(148) + AndroidUtilities.statusBarHeight, MeasureSpec.EXACTLY));
+        } else {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(148), MeasureSpec.EXACTLY));
+        }
+    }
+
+    public void setUser(TLRPC.User user) {
+        if (user == null) {
+            return;
+        }
+        TLRPC.FileLocation photo = null;
+        if (user.photo != null) {
+            photo = user.photo.photo_small;
+        }
+        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        phoneTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
+        AvatarDrawable avatarDrawable = new AvatarDrawable(user);
+        avatarDrawable.setColor(0xff5c98cd);
+        avatarImageView.setImage(photo, "50_50", avatarDrawable);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/EmptyCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/EmptyCell.java
new file mode 100644
index 000000000..fd06f4e8e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/EmptyCell.java
@@ -0,0 +1,38 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.widget.FrameLayout;
+
+import org.telegram.android.AndroidUtilities;
+
+public class EmptyCell extends FrameLayout {
+
+    int cellHeight;
+
+    public EmptyCell(Context context) {
+        this(context, 8);
+    }
+
+    public EmptyCell(Context context, int height) {
+        super(context);
+        cellHeight = height;
+    }
+
+    public void setHeight(int height) {
+        cellHeight = height;
+        requestLayout();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(cellHeight), MeasureSpec.EXACTLY));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java
new file mode 100644
index 000000000..b13f3de75
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java
@@ -0,0 +1,70 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class GreySectionCell extends FrameLayout {
+    private TextView textView;
+
+    private void init() {
+        setBackgroundColor(0xfff2f2f2);
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff8a8a8a);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(16);
+        layoutParams.rightMargin = AndroidUtilities.dp(16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    public GreySectionCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public GreySectionCell(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public GreySectionCell(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public GreySectionCell(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
new file mode 100644
index 000000000..fcfd8b2e0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
@@ -0,0 +1,70 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class HeaderCell extends FrameLayout {
+
+    private TextView textView;
+
+    private void init() {
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff3e90cf);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.topMargin = AndroidUtilities.dp(15);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    public HeaderCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public HeaderCell(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public HeaderCell(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public HeaderCell(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(38), MeasureSpec.EXACTLY));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
new file mode 100644
index 000000000..40e5b3a1f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
@@ -0,0 +1,47 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+
+public class LetterSectionCell extends FrameLayout {
+
+    private TextView textView;
+
+    public LetterSectionCell(Context context) {
+        super(context);
+        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.dp(54), AndroidUtilities.dp(64)));
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 22);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff808080);
+        textView.setGravity(Gravity.CENTER);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    public void setLetter(String letter) {
+        textView.setText(letter.toUpperCase());
+    }
+
+    public void setCellHeight(int height) {
+        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.dp(54), height));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java
new file mode 100644
index 000000000..a98c5a0c2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java
@@ -0,0 +1,36 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ProgressBar;
+
+import org.telegram.android.AndroidUtilities;
+
+public class LoadingCell extends FrameLayout {
+
+    public LoadingCell(Context context) {
+        super(context);
+
+        ProgressBar progressBar = new ProgressBar(context);
+        addView(progressBar);
+        LayoutParams layoutParams = (FrameLayout.LayoutParams) progressBar.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.CENTER;
+        progressBar.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(54), MeasureSpec.EXACTLY));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
new file mode 100644
index 000000000..40ac40264
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -0,0 +1,422 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Views.AvatarDrawable;
+
+public class ProfileSearchCell extends BaseCell {
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint onlinePaint;
+    private static TextPaint offlinePaint;
+    private static Drawable lockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable groupDrawable;
+    private static Paint linePaint;
+
+    private CharSequence currentName;
+    private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
+    private CharSequence subLabel;
+
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+
+    private String lastName = null;
+    private int lastStatus = 0;
+    private TLRPC.FileLocation lastAvatar = null;
+
+    public boolean useSeparator = false;
+    public float drawAlpha = 1;
+
+    private int nameLeft;
+    private int nameTop;
+    private StaticLayout nameLayout;
+    private boolean drawNameLock;
+    private boolean drawNameBroadcast;
+    private boolean drawNameGroup;
+    private int nameLockLeft;
+    private int nameLockTop;
+
+    private int onlineLeft;
+    private StaticLayout onlineLayout;
+
+    public ProfileSearchCell(Context context) {
+        super(context);
+        init();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
+        avatarDrawable = new AvatarDrawable();
+    }
+
+    private void init() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.dp(17));
+            namePaint.setColor(0xff212121);
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(17));
+            nameEncryptedPaint.setColor(0xff00a60e);
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            onlinePaint.setTextSize(AndroidUtilities.dp(16));
+            onlinePaint.setColor(0xff316f9f);
+
+            offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            offlinePaint.setTextSize(AndroidUtilities.dp(16));
+            offlinePaint.setColor(0xff999999);
+
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+
+            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
+            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
+            groupDrawable = getResources().getDrawable(R.drawable.list_group);
+        }
+    }
+
+    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
+        currentName = n;
+        user = u;
+        chat = c;
+        encryptedChat = ec;
+        subLabel = s;
+        update(0);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+            lastAvatar = null;
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (user == null && chat == null && encryptedChat == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    public void buildLayout() {
+        CharSequence nameString = "";
+        TextPaint currentNamePaint;
+
+        drawNameBroadcast = false;
+        drawNameLock = false;
+        drawNameGroup = false;
+
+        if (encryptedChat != null) {
+            drawNameLock = true;
+            if (!LocaleController.isRTL) {
+                nameLockLeft = AndroidUtilities.dp(72);
+                nameLeft = AndroidUtilities.dp(76) + lockDrawable.getIntrinsicWidth();
+            } else {
+                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(74) - lockDrawable.getIntrinsicWidth();
+                nameLeft = AndroidUtilities.dp(11);
+            }
+            nameLockTop = AndroidUtilities.dp(16.5f);
+        } else {
+            if (chat != null) {
+
+                if (chat.id < 0) {
+                    drawNameBroadcast = true;
+                    nameLockTop = AndroidUtilities.dp(28.5f);
+                } else {
+                    drawNameGroup = true;
+                    nameLockTop = AndroidUtilities.dp(30);
+                }
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.dp(72);
+                    nameLeft = AndroidUtilities.dp(76) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                } else {
+                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(74) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    nameLeft = AndroidUtilities.dp(11);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    nameLeft = AndroidUtilities.dp(72);
+                } else {
+                    nameLeft = AndroidUtilities.dp(11);
+                }
+            }
+        }
+
+        if (currentName != null) {
+            nameString = currentName;
+        } else {
+            String nameString2 = "";
+            if (chat != null) {
+                nameString2 = chat.title;
+            } else if (user != null) {
+                nameString2 = ContactsController.formatName(user.first_name, user.last_name);
+            }
+            nameString = nameString2.replace("\n", " ");
+        }
+        if (nameString.length() == 0) {
+            if (user != null && user.phone != null && user.phone.length() != 0) {
+                nameString = PhoneFormat.getInstance().format("+" + user.phone);
+            } else {
+                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+            }
+        }
+        if (encryptedChat != null) {
+            currentNamePaint = nameEncryptedPaint;
+        } else {
+            currentNamePaint = namePaint;
+        }
+
+        int onlineWidth;
+        int nameWidth;
+        if (!LocaleController.isRTL) {
+            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(14);
+        } else {
+            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(72);
+        }
+        if (drawNameLock) {
+            nameWidth -= AndroidUtilities.dp(6) + lockDrawable.getIntrinsicWidth();
+        } else if (drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.dp(6) + broadcastDrawable.getIntrinsicWidth();
+        } else if (drawNameGroup) {
+            nameWidth -= AndroidUtilities.dp(6) + groupDrawable.getIntrinsicWidth();
+        }
+
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+        if (chat == null) {
+            if (!LocaleController.isRTL) {
+                onlineLeft = AndroidUtilities.dp(72);
+            } else {
+                onlineLeft = AndroidUtilities.dp(11);
+            }
+
+            CharSequence onlineString = "";
+            TextPaint currentOnlinePaint = offlinePaint;
+
+            if (subLabel != null) {
+                onlineString = subLabel;
+            } else {
+                onlineString = LocaleController.formatUserStatus(user);
+                if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
+                    currentOnlinePaint = onlinePaint;
+                    onlineString = LocaleController.getString("Online", R.string.Online);
+                }
+            }
+
+            CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, onlineWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, onlineWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            nameTop = AndroidUtilities.dp(13);
+        } else {
+            onlineLayout = null;
+            nameTop = AndroidUtilities.dp(25);
+        }
+
+        int avatarLeft;
+        if (!LocaleController.isRTL) {
+            avatarLeft = AndroidUtilities.dp(9);
+        } else {
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(61);
+        }
+
+        avatarImage.setImageCoords(avatarLeft, AndroidUtilities.dp(10), AndroidUtilities.dp(52), AndroidUtilities.dp(52));
+
+        double widthpx = 0;
+        float left = 0;
+        if (LocaleController.isRTL) {
+            if (nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft += (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                left = onlineLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                    if (widthpx < onlineWidth) {
+                        onlineLeft += (onlineWidth - widthpx);
+                    }
+                }
+            }
+        } else {
+            if (nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineRight(0);
+                if (left == nameWidth) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft -= (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                left = onlineLayout.getLineRight(0);
+                if (left == onlineWidth) {
+                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                    if (widthpx < onlineWidth) {
+                        onlineLeft -= (onlineWidth - widthpx);
+                    }
+                }
+            }
+        }
+    }
+
+    public void update(int mask) {
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            avatarDrawable.setInfo(user);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            avatarDrawable.setInfo(chat);
+        } else {
+            avatarDrawable.setInfo(0, null, null, false);
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 && user != null || (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 && chat != null) {
+                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0 && user != null) {
+                int newStatus = 0;
+                if (user.status != null) {
+                    newStatus = user.status.expires;
+                }
+                if (newStatus != lastStatus) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && ((mask & MessagesController.UPDATE_MASK_NAME) != 0 && user != null) || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 && chat != null) {
+                String newName;
+                if (user != null) {
+                    newName = user.first_name + user.last_name;
+                } else {
+                    newName = chat.title;
+                }
+                if (!newName.equals(lastName)) {
+                    continueUpdate = true;
+                }
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        if (user != null) {
+            if (user.status != null) {
+                lastStatus = user.status.expires;
+            } else {
+                lastStatus = 0;
+            }
+            lastName = user.first_name + user.last_name;
+        } else if (chat != null) {
+            lastName = chat.title;
+        }
+
+
+        lastAvatar = photo;
+        avatarImage.setImage(photo, "50_50", avatarDrawable, false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+        postInvalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (user == null && chat == null && encryptedChat == null) {
+            return;
+        }
+
+        if (useSeparator) {
+            if (LocaleController.isRTL) {
+                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.dp(72), getMeasuredHeight() - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(72), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
+            }
+        }
+
+        if (drawAlpha != 1) {
+            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+        }
+
+        if (drawNameLock) {
+            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (drawNameGroup) {
+            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        canvas.save();
+        canvas.translate(nameLeft, nameTop);
+        nameLayout.draw(canvas);
+        canvas.restore();
+
+        if (onlineLayout != null) {
+            canvas.save();
+            canvas.translate(onlineLeft, AndroidUtilities.dp(40));
+            onlineLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        avatarImage.draw(canvas);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
new file mode 100644
index 000000000..39a4dfca2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
@@ -0,0 +1,48 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+
+public class ShadowBottomSectionCell extends View {
+
+    private void init() {
+        setBackgroundResource(R.drawable.greydivider_bottom);
+    }
+
+    public ShadowBottomSectionCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public ShadowBottomSectionCell(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public ShadowBottomSectionCell(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public ShadowBottomSectionCell(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(6), MeasureSpec.EXACTLY));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
new file mode 100644
index 000000000..b8c7ce118
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
@@ -0,0 +1,48 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+
+public class ShadowSectionCell extends View {
+
+    private void init() {
+        setBackgroundResource(R.drawable.greydivider);
+    }
+
+    public ShadowSectionCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public ShadowSectionCell(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public ShadowSectionCell(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public ShadowSectionCell(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(12), MeasureSpec.EXACTLY));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
new file mode 100644
index 000000000..0c05b6e53
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
@@ -0,0 +1,128 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class TextCell extends FrameLayout {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private ImageView imageView;
+    private ImageView valueImageView;
+
+    public TextCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff2f8cc9);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
+        addView(valueTextView);
+        layoutParams = (LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 24 : 0);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 24);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT;
+        valueTextView.setLayoutParams(layoutParams);
+
+        imageView = new ImageView(context);
+        imageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+
+        valueImageView = new ImageView(context);
+        valueImageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(valueImageView);
+        layoutParams = (LayoutParams) valueImageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 24 : 0);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 24);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL;
+        valueImageView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextColor(int color) {
+        textView.setTextColor(color);
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+        imageView.setVisibility(GONE);
+        valueTextView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndIcon(String text, int resId) {
+        textView.setText(text);
+        imageView.setImageResource(resId);
+        imageView.setVisibility(VISIBLE);
+        valueTextView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndValue(String text, String value) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        valueTextView.setVisibility(VISIBLE);
+        imageView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndValueDrawable(String text, Drawable drawable) {
+        textView.setText(text);
+        valueImageView.setVisibility(VISIBLE);
+        valueImageView.setImageDrawable(drawable);
+        valueTextView.setVisibility(GONE);
+        imageView.setVisibility(GONE);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
new file mode 100644
index 000000000..5dc3b4ed3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
@@ -0,0 +1,97 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.os.Build;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.ui.Views.FrameLayoutFixed;
+import org.telegram.ui.Views.Switch;
+
+public class TextCheckCell extends FrameLayoutFixed {
+
+    private TextView textView;
+    private Switch checkBox;
+    private static Paint paint;
+    private boolean needDivider;
+
+    public TextCheckCell(Context context) {
+        super(context);
+
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        checkBox = new Switch(context);
+        checkBox.setDuplicateParentStateEnabled(false);
+        checkBox.setFocusable(false);
+        checkBox.setFocusableInTouchMode(false);
+        checkBox.setClickable(false);
+        addView(checkBox);
+        layoutParams = (LayoutParams) checkBox.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(14);
+        layoutParams.rightMargin = AndroidUtilities.dp(14);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL;
+        checkBox.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextAndCheck(String text, boolean checked, boolean divider) {
+        textView.setText(text);
+        if (Build.VERSION.SDK_INT < 11) {
+            checkBox.resetLayout();
+            checkBox.requestLayout();
+        }
+        checkBox.setChecked(checked);
+        needDivider = divider;
+        setWillNotDraw(!divider);
+    }
+
+    public void setChecked(boolean checked) {
+        checkBox.setChecked(checked);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (needDivider) {
+            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
new file mode 100644
index 000000000..59b6c9e61
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
@@ -0,0 +1,91 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.drawable.Drawable;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.R;
+
+public class TextColorCell extends FrameLayout {
+    private TextView textView;
+    private Drawable colorDrawable;
+    private static Paint paint;
+    private boolean needDivider;
+    private int currentColor;
+
+    public TextColorCell(Context context) {
+        super(context);
+
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        colorDrawable = getResources().getDrawable(R.drawable.switch_to_on2);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextAndColor(String text, int color, boolean divider) {
+        textView.setText(text);
+        needDivider = divider;
+        currentColor = color;
+        colorDrawable.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY));
+        setWillNotDraw(!needDivider && currentColor == 0);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (needDivider) {
+            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
+        }
+        if (currentColor != 0 && colorDrawable != null) {
+            int x;
+            int y = (getMeasuredHeight() - colorDrawable.getMinimumHeight()) / 2;
+            if (!LocaleController.isRTL) {
+                x = getMeasuredWidth() - colorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(14.5f);
+            } else {
+                x = AndroidUtilities.dp(14.5f);
+            }
+            colorDrawable.setBounds(x, y, x + colorDrawable.getIntrinsicWidth(), y + colorDrawable.getIntrinsicHeight());
+            colorDrawable.draw(canvas);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
new file mode 100644
index 000000000..86afa6085
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
@@ -0,0 +1,94 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class TextDetailCell extends FrameLayout {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private ImageView imageView;
+
+    public TextDetailCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(10);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff8a8a8a);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        addView(valueTextView);
+        layoutParams = (FrameLayout.LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(35);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        valueTextView.setLayoutParams(layoutParams);
+
+        imageView = new ImageView(context);
+        imageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), View.MeasureSpec.EXACTLY));
+    }
+
+    public void setTextAndValue(String text, String value) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        imageView.setVisibility(GONE);
+    }
+
+    public void setTextAndValueAndIcon(String text, String value, int resId) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        imageView.setVisibility(VISIBLE);
+        imageView.setImageResource(resId);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java
new file mode 100644
index 000000000..46bcf793d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java
@@ -0,0 +1,120 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.ui.Views.BackupImageView;
+
+public class TextDetailDocumentsCell extends FrameLayout {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private TextView typeTextView;
+    private BackupImageView imageView;
+
+    public TextDetailDocumentsCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(10);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff8a8a8a);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        addView(valueTextView);
+        layoutParams = (LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(35);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        valueTextView.setLayoutParams(layoutParams);
+
+        typeTextView = new TextView(context);
+        typeTextView.setBackgroundColor(0xff757575);
+        typeTextView.setEllipsize(TextUtils.TruncateAt.MARQUEE);
+        typeTextView.setGravity(Gravity.CENTER);
+        typeTextView.setSingleLine(true);
+        typeTextView.setTextColor(0xffd1d1d1);
+        typeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        typeTextView.setTypeface(Typeface.DEFAULT_BOLD);
+        addView(typeTextView);
+        layoutParams = (LayoutParams) typeTextView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(40);
+        layoutParams.height = AndroidUtilities.dp(40);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        typeTextView.setLayoutParams(layoutParams);
+
+        imageView = new BackupImageView(context);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(40);
+        layoutParams.height = AndroidUtilities.dp(40);
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextAndValueAndTypeAndThumb(String text, String value, String type, String thumb, int resId) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        if (type != null) {
+            typeTextView.setVisibility(VISIBLE);
+            typeTextView.setText(type);
+        } else {
+            typeTextView.setVisibility(GONE);
+        }
+        if (thumb != null || resId != 0) {
+            if (thumb != null) {
+                imageView.setImage(thumb, "40_40", null);
+            } else  {
+                imageView.setImageResource(resId);
+            }
+            imageView.setVisibility(VISIBLE);
+        } else {
+            imageView.setVisibility(GONE);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
new file mode 100644
index 000000000..033306956
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
@@ -0,0 +1,112 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.ui.Views.FrameLayoutFixed;
+
+public class TextDetailSettingsCell extends FrameLayoutFixed {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private static Paint paint;
+    private boolean needDivider;
+    private boolean multiline;
+
+    public TextDetailSettingsCell(Context context) {
+        super(context);
+
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(10);
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff8a8a8a);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setPadding(0, 0, 0, 0);
+        addView(valueTextView);
+        layoutParams = (LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(35);
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        valueTextView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        if (!multiline) {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+        } else {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+        }
+    }
+
+    public void setMultilineDetail(boolean value) {
+        multiline = value;
+        if (value) {
+            valueTextView.setLines(0);
+            valueTextView.setMaxLines(0);
+            valueTextView.setSingleLine(false);
+            valueTextView.setPadding(0, 0, 0, AndroidUtilities.dp(12));
+        } else {
+            valueTextView.setLines(1);
+            valueTextView.setMaxLines(1);
+            valueTextView.setSingleLine(true);
+            valueTextView.setPadding(0, 0, 0, 0);
+        }
+    }
+
+    public void setTextAndValue(String text, String value, boolean divider) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        needDivider = divider;
+        setWillNotDraw(!divider);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (needDivider) {
+            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java
new file mode 100644
index 000000000..5125a3c72
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java
@@ -0,0 +1,49 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+
+public class TextInfoCell extends FrameLayout {
+
+    private TextView textView;
+
+    public TextInfoCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xffa3a3a3);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        textView.setGravity(Gravity.CENTER);
+        textView.setPadding(0, AndroidUtilities.dp(19), 0, AndroidUtilities.dp(19));
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = Gravity.CENTER;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
new file mode 100644
index 000000000..3cdcc8724
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
@@ -0,0 +1,50 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class TextInfoPrivacyCell extends FrameLayout {
+
+    private TextView textView;
+
+    public TextInfoPrivacyCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xffa3a3a3);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        textView.setPadding(0, AndroidUtilities.dp(6), 0, AndroidUtilities.dp(16));
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
new file mode 100644
index 000000000..e6c0414c2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
@@ -0,0 +1,150 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+public class TextSettingsCell extends FrameLayout {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private ImageView valueImageView;
+    private static Paint paint;
+    private boolean needDivider;
+
+    public TextSettingsCell(Context context) {
+        super(context);
+
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff2f8cc9);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setEllipsize(TextUtils.TruncateAt.END);
+        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
+        addView(valueTextView);
+        layoutParams = (LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT;
+        valueTextView.setLayoutParams(layoutParams);
+
+        valueImageView = new ImageView(context);
+        valueImageView.setScaleType(ImageView.ScaleType.CENTER);
+        valueImageView.setVisibility(GONE);
+        addView(valueImageView);
+        layoutParams = (LayoutParams) valueImageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 17 : 0);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 17);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL;
+        valueImageView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(48) + (needDivider ? 1 : 0));
+
+        int availableWidth = getMeasuredWidth() - getPaddingLeft() - getPaddingRight() - AndroidUtilities.dp(34);
+        int width = availableWidth / 2;
+        if (valueImageView.getVisibility() == VISIBLE) {
+            valueImageView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
+        }
+        if (valueTextView.getVisibility() == VISIBLE) {
+            valueTextView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
+            width = availableWidth - valueTextView.getMeasuredWidth() - AndroidUtilities.dp(8);
+        } else {
+            width = availableWidth;
+        }
+        textView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextColor(int color) {
+        textView.setTextColor(color);
+    }
+
+    public void setText(String text, boolean divider) {
+        textView.setText(text);
+        valueTextView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+        needDivider = divider;
+        setWillNotDraw(!divider);
+    }
+
+    public void setTextAndValue(String text, String value, boolean divider) {
+        textView.setText(text);
+        valueImageView.setVisibility(GONE);
+        if (value != null) {
+            valueTextView.setText(value);
+            valueTextView.setVisibility(VISIBLE);
+        } else {
+            valueTextView.setVisibility(GONE);
+        }
+        needDivider = divider;
+        setWillNotDraw(!divider);
+    }
+
+    public void setTextAndIcon(String text, int resId, boolean divider) {
+        textView.setText(text);
+        valueTextView.setVisibility(GONE);
+        if (resId != 0) {
+            valueImageView.setVisibility(VISIBLE);
+            valueImageView.setImageResource(resId);
+        } else {
+            valueImageView.setVisibility(GONE);
+        }
+        needDivider = divider;
+        setWillNotDraw(!divider);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (needDivider) {
+            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
new file mode 100644
index 000000000..1492ccf90
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
@@ -0,0 +1,235 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Views.AvatarDrawable;
+import org.telegram.ui.Views.BackupImageView;
+import org.telegram.ui.Views.CheckBox;
+
+public class UserCell extends FrameLayout {
+
+    private BackupImageView avatarImageView;
+    private TextView nameTextView;
+    private TextView statusTextView;
+    private ImageView imageView;
+    private CheckBox checkBox;
+
+    private AvatarDrawable avatarDrawable;
+    private TLRPC.User currentUser = null;
+
+    private CharSequence currentName;
+    private CharSequence currrntStatus;
+    private int currentDrawable;
+
+    private String lastName = null;
+    private int lastStatus = 0;
+    private TLRPC.FileLocation lastAvatar = null;
+
+    private int statusColor = 0xffa8a8a8;
+    private int statusOnlineColor = 0xff3b84c0;
+
+    public UserCell(Context context, int padding) {
+        super(context);
+
+        avatarImageView = new BackupImageView(context);
+        avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(24));
+        addView(avatarImageView);
+        LayoutParams layoutParams = (LayoutParams) avatarImageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(48);
+        layoutParams.height = AndroidUtilities.dp(48);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(7 + padding);
+        layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(7 + padding) : 0;
+        layoutParams.topMargin = AndroidUtilities.dp(8);
+        avatarImageView.setLayoutParams(layoutParams);
+        avatarDrawable = new AvatarDrawable();
+
+        nameTextView = new TextView(context);
+        nameTextView.setTextColor(0xff212121);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+        nameTextView.setLines(1);
+        nameTextView.setMaxLines(1);
+        nameTextView.setSingleLine(true);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(nameTextView);
+        layoutParams = (LayoutParams) nameTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : (68 + padding));
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? (68 + padding) : 16);
+        layoutParams.topMargin = AndroidUtilities.dp(10.5f);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        nameTextView.setLayoutParams(layoutParams);
+
+        statusTextView = new TextView(context);
+        statusTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        statusTextView.setLines(1);
+        statusTextView.setMaxLines(1);
+        statusTextView.setSingleLine(true);
+        statusTextView.setEllipsize(TextUtils.TruncateAt.END);
+        statusTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(statusTextView);
+        layoutParams = (LayoutParams) statusTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : (68 + padding));
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? (68 + padding) : 16);
+        layoutParams.topMargin = AndroidUtilities.dp(33.5f);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        statusTextView.setLayoutParams(layoutParams);
+
+        imageView = new ImageView(context);
+        imageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+
+        checkBox = new CheckBox(context);
+        checkBox.setVisibility(GONE);
+        addView(checkBox);
+        layoutParams = (LayoutParams) checkBox.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(22);
+        layoutParams.height = AndroidUtilities.dp(22);
+        layoutParams.topMargin = AndroidUtilities.dp(38);
+        layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(37 + padding);
+        layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(37 + padding) : 0;
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        checkBox.setLayoutParams(layoutParams);
+    }
+
+    public void setData(TLRPC.User user, CharSequence name, CharSequence status, int resId) {
+        if (user == null) {
+            currrntStatus = null;
+            currentName = null;
+            currentUser = null;
+            nameTextView.setText("");
+            statusTextView.setText("");
+            avatarImageView.setImageDrawable(null);
+            return;
+        }
+        currrntStatus = status;
+        currentName = name;
+        currentUser = user;
+        currentDrawable = resId;
+        update(0);
+    }
+
+    public void setChecked(boolean checked) {
+        if (checkBox.getVisibility() != VISIBLE) {
+            checkBox.setVisibility(VISIBLE);
+        }
+        checkBox.setChecked(checked);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        lastAvatar = null;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
+    }
+
+    public void setStatusColors(int color, int onlineColor) {
+        statusColor = color;
+        statusOnlineColor = onlineColor;
+    }
+
+    public void update(int mask) {
+        if (currentUser == null) {
+            return;
+        }
+        TLRPC.FileLocation photo = null;
+        if (currentUser.photo != null) {
+            photo = currentUser.photo.photo_small;
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                int newStatus = 0;
+                if (currentUser.status != null) {
+                    newStatus = currentUser.status.expires;
+                }
+                if (newStatus != lastStatus) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                String newName = currentUser.first_name + currentUser.last_name;
+                if (newName == null || !newName.equals(lastName)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        avatarDrawable.setInfo(currentUser);
+        if (currentUser.status != null) {
+            lastStatus = currentUser.status.expires;
+        } else {
+            lastStatus = 0;
+        }
+        lastName = currentUser.first_name + currentUser.last_name;
+        lastAvatar = photo;
+
+        if (currentName != null) {
+            nameTextView.setText(currentName);
+        } else {
+            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+        }
+        if (currrntStatus != null) {
+            statusTextView.setText(currrntStatus);
+            statusTextView.setTextColor(statusColor);
+        } else {
+            if (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
+                statusTextView.setText(LocaleController.getString("Online", R.string.Online));
+                statusTextView.setTextColor(statusOnlineColor);
+            } else {
+                statusTextView.setText(LocaleController.formatUserStatus(currentUser));
+                statusTextView.setTextColor(statusColor);
+            }
+        }
+
+        imageView.setVisibility(currentDrawable == 0 ? GONE : VISIBLE);
+        imageView.setImageResource(currentDrawable);
+        avatarImageView.setImage(photo, "50_50", avatarDrawable);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
similarity index 67%
rename from TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index a77ea02e4..b5711b2a6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -16,10 +16,10 @@
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.TextView;
@@ -29,16 +29,20 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+
+public class ChangeChatNameActivity extends BaseFragment {
 
-public class ChatProfileChangeNameActivity extends BaseFragment {
     private EditText firstNameField;
     private View headerLabelView;
     private int chat_id;
     private View doneButton;
 
-    public ChatProfileChangeNameActivity(Bundle args) {
+    private final static int done_button = 1;
+
+    public ChangeChatNameActivity(Bundle args) {
         super(args);
     }
 
@@ -52,50 +56,50 @@ public boolean onFragmentCreate() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
 
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    if (firstNameField.getText().length() != 0) {
-                        saveName();
+                public void onItemClick(int id) {
+                    if (id == -1) {
                         finishFragment();
+                    } else if (id == done_button) {
+                        if (firstNameField.getText().length() != 0) {
+                            saveName();
+                            finishFragment();
+                        }
                     }
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             TLRPC.Chat currentChat = MessagesController.getInstance().getChat(chat_id);
 
             fragmentView = new LinearLayout(inflater.getContext());
             fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
             ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-
-            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
-            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
 
             firstNameField = new EditText(inflater.getContext());
             firstNameField.setText(currentChat.title);
-            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
-            firstNameField.setHintTextColor(0xffa3a3a3);
-            firstNameField.setTextColor(0xff000000);
-            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            firstNameField.setHintTextColor(0xff979797);
+            firstNameField.setTextColor(0xff212121);
             firstNameField.setMaxLines(3);
+            firstNameField.setPadding(0, 0, 0, 0);
             firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
             firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             AndroidUtilities.clearCursorDrawable(firstNameField);
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
@@ -107,22 +111,19 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            if (LocaleController.isRTL) {
-                firstNameField.setGravity(Gravity.RIGHT);
-            }
 
             ((LinearLayout) fragmentView).addView(firstNameField);
             LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
             layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             firstNameField.setLayoutParams(layoutParams);
 
             if (chat_id > 0) {
-                settingsSectionLayout.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
                 firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
             } else {
-                settingsSectionLayout.setText(LocaleController.getString("EnterListName", R.string.EnterListName).toUpperCase());
                 firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
             }
             firstNameField.setSelection(firstNameField.length());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
similarity index 74%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 2d616aff7..667de8842 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -15,10 +15,10 @@
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.TextView;
@@ -33,40 +33,41 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+
+public class ChangeNameActivity extends BaseFragment {
 
-public class SettingsChangeNameActivity extends BaseFragment {
     private EditText firstNameField;
     private EditText lastNameField;
     private View headerLabelView;
     private View doneButton;
 
+    private final static int done_button = 1;
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    if (firstNameField.getText().length() != 0) {
-                        saveName();
+                public void onItemClick(int id) {
+                    if (id == -1) {
                         finishFragment();
+                    } else if (id == done_button) {
+                        if (firstNameField.getText().length() != 0) {
+                            saveName();
+                            finishFragment();
+                        }
                     }
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
             if (user == null) {
@@ -75,25 +76,34 @@ public void onClick(View view) {
 
             fragmentView = new LinearLayout(inflater.getContext());
             fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
             ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-
-            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
-            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
-            settingsSectionLayout.setText(LocaleController.getString("YourFirstNameAndLastName", R.string.YourFirstNameAndLastName).toUpperCase());
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
 
             firstNameField = new EditText(inflater.getContext());
-            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
-            firstNameField.setHintTextColor(0xffa3a3a3);
-            firstNameField.setTextColor(0xff000000);
-            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            firstNameField.setHintTextColor(0xff979797);
+            firstNameField.setTextColor(0xff212121);
             firstNameField.setMaxLines(1);
             firstNameField.setLines(1);
             firstNameField.setSingleLine(true);
             firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
             firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
             firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            firstNameField.setLayoutParams(layoutParams);
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -105,26 +115,27 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            AndroidUtilities.clearCursorDrawable(firstNameField);
-            ((LinearLayout) fragmentView).addView(firstNameField);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(15);
-            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
-            firstNameField.setLayoutParams(layoutParams);
 
             lastNameField = new EditText(inflater.getContext());
-            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
-            lastNameField.setHintTextColor(0xffa3a3a3);
-            lastNameField.setTextColor(0xff000000);
-            lastNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            lastNameField.setHintTextColor(0xff979797);
+            lastNameField.setTextColor(0xff212121);
             lastNameField.setMaxLines(1);
             lastNameField.setLines(1);
             lastNameField.setSingleLine(true);
             lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
             lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
             lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+            AndroidUtilities.clearCursorDrawable(lastNameField);
+            ((LinearLayout) fragmentView).addView(lastNameField);
+            layoutParams = (LinearLayout.LayoutParams)lastNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(16);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            lastNameField.setLayoutParams(layoutParams);
             lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -135,13 +146,6 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            AndroidUtilities.clearCursorDrawable(lastNameField);
-            ((LinearLayout) fragmentView).addView(lastNameField);
-            layoutParams = (LinearLayout.LayoutParams)lastNameField.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(10);
-            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
-            lastNameField.setLayoutParams(layoutParams);
 
             if (user != null) {
                 firstNameField.setText(user.first_name);
@@ -187,6 +191,7 @@ private void saveName() {
             user.last_name = req.last_name;
         }
         UserConfig.saveConfig(true);
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
similarity index 87%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index 3f893ca79..29b6d31a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -21,10 +21,10 @@
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.TextView;
@@ -41,12 +41,13 @@
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.ArrayList;
 
-public class SettingsChangeUsernameActivity extends BaseFragment {
+public class ChangeUsernameActivity extends BaseFragment {
 
     private EditText firstNameField;
     private View doneButton;
@@ -56,28 +57,27 @@
     private Runnable checkRunnable = null;
     private boolean lastNameAvailable = false;
 
+    private final static int done_button = 1;
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("Username", R.string.Username));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    saveName();
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        saveName();
+                    }
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
             if (user == null) {
@@ -86,20 +86,21 @@ public void onClick(View view) {
 
             fragmentView = new LinearLayout(inflater.getContext());
             fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
             ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-
-            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
-            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
-            settingsSectionLayout.setText(LocaleController.getString("Username", R.string.Username).toUpperCase());
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
 
             firstNameField = new EditText(inflater.getContext());
-            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
-            firstNameField.setHintTextColor(0xffa3a3a3);
-            firstNameField.setTextColor(0xff000000);
-            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            firstNameField.setHintTextColor(0xff979797);
+            firstNameField.setTextColor(0xff212121);
             firstNameField.setMaxLines(1);
             firstNameField.setLines(1);
+            firstNameField.setPadding(0, 0, 0, 0);
             firstNameField.setSingleLine(true);
             firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
@@ -119,9 +120,11 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
             ((LinearLayout) fragmentView).addView(firstNameField);
             LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
             layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             firstNameField.setLayoutParams(layoutParams);
 
             if (user != null && user.username != null && user.username.length() > 0) {
@@ -131,7 +134,6 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
             checkTextView = new TextView(inflater.getContext());
             checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            checkTextView.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
             checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             ((LinearLayout) fragmentView).addView(checkTextView);
             layoutParams = (LinearLayout.LayoutParams)checkTextView.getLayoutParams();
@@ -139,12 +141,13 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
             checkTextView.setLayoutParams(layoutParams);
 
             TextView helpTextView = new TextView(inflater.getContext());
             helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
             helpTextView.setTextColor(0xff6d6d72);
-            helpTextView.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
             helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             helpTextView.setText(Html.fromHtml(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
             ((LinearLayout) fragmentView).addView(helpTextView);
@@ -153,6 +156,8 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
             helpTextView.setLayoutParams(layoutParams);
 
             firstNameField.addTextChangedListener(new TextWatcher() {
@@ -222,7 +227,7 @@ private boolean checkUserName(final String name, boolean alert) {
             return true;
         }
         if (checkRunnable != null) {
-            AndroidUtilities.CancelRunOnUIThread(checkRunnable);
+            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
             checkRunnable = null;
             lastCheckName = null;
             if (checkReqId != 0) {
@@ -294,7 +299,7 @@ public void run() {
                     checkReqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                         @Override
                         public void run(final TLObject response, final TLRPC.TL_error error) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     checkReqId = 0;
@@ -315,7 +320,7 @@ public void run() {
                     }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
                 }
             };
-            AndroidUtilities.RunOnUIThread(checkRunnable, 300);
+            AndroidUtilities.runOnUIThread(checkRunnable, 300);
         }
         return true;
     }
@@ -352,7 +357,7 @@ private void saveName() {
             public void run(TLObject response, final TLRPC.TL_error error) {
                 if (error == null) {
                     final TLRPC.User user = (TLRPC.User)response;
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             try {
@@ -369,7 +374,7 @@ public void run() {
                         }
                     });
                 } else {
-                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             try {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 116e92712..dab8a0092 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -8,9 +8,6 @@
 
 package org.telegram.ui;
 
-import android.animation.Animator;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
@@ -29,19 +26,20 @@
 import android.text.Html;
 import android.text.TextUtils;
 import android.util.SparseArray;
+import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
+import android.view.WindowManager;
 import android.webkit.MimeTypeMap;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -64,22 +62,28 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
 import org.telegram.ui.Cells.ChatActionCell;
 import org.telegram.ui.Cells.ChatAudioCell;
 import org.telegram.ui.Cells.ChatBaseCell;
 import org.telegram.ui.Cells.ChatContactCell;
 import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.Cells.ChatMessageCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.ChatActivityEnterView;
 import org.telegram.android.ImageReceiver;
+import org.telegram.ui.Views.FrameLayoutFixed;
 import org.telegram.ui.Views.LayoutListView;
 import org.telegram.ui.Views.SizeNotifierRelativeLayout;
-import org.telegram.ui.Views.TimerButton;
+import org.telegram.ui.Views.TimerDrawable;
 import org.telegram.ui.Views.TypingDotsDrawable;
 
 import java.io.File;
@@ -96,13 +100,17 @@
     private TLRPC.EncryptedChat currentEncryptedChat;
     private boolean userBlocked = false;
 
-    private View topPanel;
     private View progressView;
     private View bottomOverlay;
     private ChatAdapter chatAdapter;
     private ChatActivityEnterView chatActivityEnterView;
-    private View timeItem;
-    private View menuItem;
+    private ImageView timeItem;
+    private View timeItem2;
+    private TimerDrawable timerDrawable;
+    private ActionBarMenuItem menuItem;
+    private ActionBarMenuItem attachItem;
+    private ActionBarMenuItem headerItem;
+    private TextView addContactItem;
     private LayoutListView chatListView;
     private BackupImageView avatarImageView;
     private TextView bottomOverlayChatText;
@@ -110,25 +118,26 @@
     private TypingDotsDrawable typingDotsDrawable;
     private View emptyViewContainer;
     private ArrayList<View> actionModeViews = new ArrayList<View>();
-
+    private TextView nameTextView;
+    private TextView onlineTextView;
+    private FrameLayout avatarContainer;
     private TextView bottomOverlayText;
+    private TextView secretViewStatusTextView;
+    private TextView selectedMessagesCountTextView;
 
     private MessageObject selectedObject;
     private MessageObject forwaringMessage;
-    private TextView secretViewStatusTextView;
-    private TimerButton timerButton;
-    private TextView selectedMessagesCountTextView;
     private boolean paused = true;
     private boolean readWhenResume = false;
 
+    private boolean openAnimationEnded = false;
+
     private int readWithDate = 0;
     private int readWithMid = 0;
     private boolean scrollToTopOnResume = false;
     private boolean scrollToTopUnReadOnResume = false;
     private boolean isCustomTheme = false;
-    private ImageView topPlaneClose;
     private View pagedownButton;
-    private TextView topPanelText;
     private long dialog_id;
     private boolean isBroadcast = false;
     private HashMap<Integer, MessageObject> selectedMessagesIds = new HashMap<Integer, MessageObject>();
@@ -145,6 +154,7 @@
     private boolean cacheEndReaced = false;
     private boolean firstLoading = true;
     private int loadsCount = 0;
+
     private int startLoadFromMessageId = 0;
 
     private int minDate = 0;
@@ -152,10 +162,13 @@
     private int unread_to_load = 0;
     private int first_unread_id = 0;
     private int last_message_id = 0;
+    private int first_message_id = 0;
     private boolean forward_end_reached = true;
     private boolean loadingForward = false;
     private MessageObject unreadMessageObject = null;
     private MessageObject scrollToMessage = null;
+    private int highlightMessageId = Integer.MAX_VALUE;
+    private boolean scrollToMessageMiddleScreen = false;
 
     private String currentPicturePath;
 
@@ -163,6 +176,7 @@
     private int onlineCount = -1;
 
     private CharSequence lastPrintString;
+    private String lastStatus;
 
     private long chatEnterTime = 0;
     private long chatLeaveTime = 0;
@@ -184,14 +198,16 @@
     private final static int attach_video = 8;
     private final static int attach_document = 9;
     private final static int attach_location = 10;
-    private final static int chat_menu_avatar = 11;
-    
+    private final static int clear_history = 11;
+    private final static int delete_chat = 12;
+    private final static int share_contact = 13;
+
     private boolean QuoteForward;
-    
+
     AdapterView.OnItemLongClickListener onItemLongClickListener = new AdapterView.OnItemLongClickListener() {
         @Override
         public boolean onItemLongClick(AdapterView<?> adapter, View view, int position, long id) {
-            if (!actionBarLayer.isActionModeShowed()) {
+            if (!actionBar.isActionModeShowed()) {
                 createMenu(view, false);
             }
             return true;
@@ -201,7 +217,7 @@ public boolean onItemLongClick(AdapterView<?> adapter, View view, int position,
     AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
         @Override
         public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-            if (actionBarLayer.isActionModeShowed()) {
+            if (actionBar.isActionModeShowed()) {
                 processRowSelect(view);
                 return;
             }
@@ -351,6 +367,26 @@ public void run() {
             public void needSendTyping() {
                 MessagesController.getInstance().sendTyping(dialog_id, classGuid);
             }
+
+            @Override
+            public void onAttachButtonHidden() {
+                if (attachItem != null) {
+                    attachItem.setVisibility(View.VISIBLE);
+                }
+                if (headerItem != null) {
+                    headerItem.setVisibility(View.INVISIBLE);
+                }
+            }
+
+            @Override
+            public void onAttachButtonShow() {
+                if (attachItem != null) {
+                    attachItem.setVisibility(View.INVISIBLE);
+                }
+                if (headerItem != null) {
+                    headerItem.setVisibility(View.VISIBLE);
+                }
+            }
         });
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
@@ -380,9 +416,9 @@ public void needSendTyping() {
         loading = true;
 
         if (startLoadFromMessageId != 0) {
-            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, classGuid, 3);
+            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, classGuid, 3, 0, 0, false);
         } else {
-            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, true, 0, classGuid, 2);
+            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, true, 0, classGuid, 2, 0, 0, true);
         }
 
         if (currentUser != null) {
@@ -437,27 +473,31 @@ public void onFragmentDestroy() {
         if (currentEncryptedChat != null) {
             MediaController.getInstance().stopMediaObserver();
         }
-
+        if (currentUser != null) {
+            MessagesController.getInstance().cancelLoadFullUser(currentUser.id);
+        }
+        if (!AndroidUtilities.isTablet()) {
+            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
+        }
         AndroidUtilities.unlockOrientation(getParentActivity());
         MediaController.getInstance().stopAudio();
     }
 
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            if (AndroidUtilities.isTablet()) {
-                actionBarLayer.setExtraLeftMargin(4);
-            }
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            lastPrintString = null;
+            lastStatus = null;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onItemClick(int id) {
+                public void onItemClick(final int id) {
                     if (id == -1) {
                         finishFragment();
                     } else if (id == -2) {
                         selectedMessagesIds.clear();
                         selectedMessagesCanCopyIds.clear();
-                        actionBarLayer.hideActionMode();
+                        actionBar.hideActionMode();
                         updateVisibleRows();
                     } else if (id == attach_photo) {
                         try {
@@ -552,31 +592,6 @@ public void startDocumentSelectActivity() {
                             }
                         });
                         presentFragment(fragment);
-                    } else if (id == chat_menu_avatar) {
-                        if (currentUser != null) {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", currentUser.id);
-                            if (currentEncryptedChat != null) {
-                                args.putLong("dialog_id", dialog_id);
-                            }
-                            presentFragment(new UserProfileActivity(args));
-                        } else if (currentChat != null) {
-                            if (info != null && info instanceof TLRPC.TL_chatParticipantsForbidden) {
-                                return;
-                            }
-                            int count = currentChat.participants_count;
-                            if (info != null) {
-                                count = info.participants.size();
-                            }
-                            if (count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
-                                return;
-                            }
-                            Bundle args = new Bundle();
-                            args.putInt("chat_id", currentChat.id);
-                            ChatProfileActivity fragment = new ChatProfileActivity(args);
-                            fragment.setChatInfo(info);
-                            presentFragment(fragment);
-                        }
                     } else if (id == copy) {
                         String str = "";
                         ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesCanCopyIds.keySet());
@@ -608,22 +623,35 @@ public void startDocumentSelectActivity() {
                         }
                         selectedMessagesIds.clear();
                         selectedMessagesCanCopyIds.clear();
-                        actionBarLayer.hideActionMode();
+                        actionBar.hideActionMode();
                         updateVisibleRows();
                     } else if (id == delete) {
-                        ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
-                        ArrayList<Long> random_ids = null;
-                        if (currentEncryptedChat != null) {
-                            random_ids = new ArrayList<Long>();
-                            for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
-                                MessageObject msg = entry.getValue();
-                                if (msg.messageOwner.random_id != 0 && msg.type != 10) {
-                                    random_ids.add(msg.messageOwner.random_id);
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", selectedMessagesIds.size())));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+                                ArrayList<Long> random_ids = null;
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<Long>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
                                 }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
+                                actionBar.hideActionMode();
                             }
-                        }
-                        MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
-                        actionBarLayer.hideActionMode();
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
                     } else if (id == forward || id == quoteforward) {
                         if (id == quoteforward) {
                             QuoteForward = true;
@@ -638,56 +666,245 @@ public void startDocumentSelectActivity() {
                         MessagesActivity fragment = new MessagesActivity(args);
                         fragment.setDelegate(ChatActivity.this);
                         presentFragment(fragment);
+                    } else if (id == chat_enc_timer) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
+                    } else if (id == clear_history || id == delete_chat) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        final boolean isChat = (int)dialog_id < 0 && (int)(dialog_id >> 32) != 1;
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        if (id == clear_history) {
+                            builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
+                        } else {
+                            if (isChat) {
+                                builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                            } else {
+                                builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                            }
+                        }
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                MessagesController.getInstance().deleteDialog(dialog_id, 0, id == clear_history);
+                                if (id != clear_history) {
+                                    if (isChat) {
+                                        MessagesController.getInstance().deleteUserFromChat((int) -dialog_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                                    }
+                                    finishFragment();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (id == share_contact) {
+                        if (currentUser == null || getParentActivity() == null) {
+                            return;
+                        }
+                        if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                            Bundle args = new Bundle();
+                            args.putInt("user_id", currentUser.id);
+                            args.putBoolean("addContact", true);
+                            presentFragment(new ContactAddActivity(args));
+                        } else {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id);
+                                    chatListView.post(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                        }
+                                    });
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
                     }
                 }
             });
 
-            updateSubtitle();
+            avatarContainer = new FrameLayoutFixed(getParentActivity());
+            avatarContainer.setBackgroundResource(R.drawable.bar_selector);
+            avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+            actionBar.addView(avatarContainer);
+            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
+            layoutParams2.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.rightMargin = AndroidUtilities.dp(40);
+            layoutParams2.leftMargin = AndroidUtilities.dp(56);
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            avatarContainer.setLayoutParams(layoutParams2);
+            avatarContainer.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (currentUser != null) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", currentUser.id);
+                        if (currentEncryptedChat != null) {
+                            args.putLong("dialog_id", dialog_id);
+                        }
+                        presentFragment(new ProfileActivity(args));
+                    } else if (currentChat != null) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", currentChat.id);
+                        ProfileActivity fragment = new ProfileActivity(args);
+                        fragment.setChatInfo(info);
+                        presentFragment(fragment);
+                    }
+                }
+            });
+
+            if (currentChat != null) {
+                int count = currentChat.participants_count;
+                if (info != null) {
+                    count = info.participants.size();
+                }
+                if (count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden || info != null && info instanceof TLRPC.TL_chatParticipantsForbidden) {
+                    avatarContainer.setEnabled(false);
+                }
+            }
+
+            avatarImageView = new BackupImageView(getParentActivity());
+            avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(21));
+            avatarImageView.processDetach = false;
+            avatarContainer.addView(avatarImageView);
+            layoutParams2 = (FrameLayout.LayoutParams) avatarImageView.getLayoutParams();
+            layoutParams2.width = AndroidUtilities.dp(42);
+            layoutParams2.height = AndroidUtilities.dp(42);
+            layoutParams2.topMargin = AndroidUtilities.dp(3);
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            avatarImageView.setLayoutParams(layoutParams2);
 
             if (currentEncryptedChat != null) {
-                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
-            } else if (currentChat != null && currentChat.id < 0) {
-                actionBarLayer.setTitleIcon(R.drawable.broadcast2, AndroidUtilities.dp(4));
+                timeItem = new ImageView(getParentActivity());
+                timeItem.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(10), AndroidUtilities.dp(5), AndroidUtilities.dp(5));
+                timeItem.setScaleType(ImageView.ScaleType.CENTER);
+                avatarContainer.addView(timeItem);
+                timerDrawable = new TimerDrawable(getParentActivity());
+
+                layoutParams2 = (FrameLayout.LayoutParams) timeItem.getLayoutParams();
+                layoutParams2.width = AndroidUtilities.dp(34);
+                layoutParams2.height = AndroidUtilities.dp(34);
+                layoutParams2.topMargin = AndroidUtilities.dp(18);
+                layoutParams2.leftMargin = AndroidUtilities.dp(16);
+                layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+                timeItem.setLayoutParams(layoutParams2);
+                timeItem.setImageDrawable(timerDrawable);
+
+                timeItem.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
+                    }
+                });
             }
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            nameTextView = new TextView(getParentActivity());
+            nameTextView.setTextColor(0xffffffff);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            nameTextView.setLines(1);
+            nameTextView.setMaxLines(1);
+            nameTextView.setSingleLine(true);
+            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView.setGravity(Gravity.LEFT);
+            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            avatarContainer.addView(nameTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.leftMargin = AndroidUtilities.dp(54);
+            layoutParams2.bottomMargin = AndroidUtilities.dp(22);
+            layoutParams2.gravity = Gravity.BOTTOM;
+            nameTextView.setLayoutParams(layoutParams2);
+
+            onlineTextView = new TextView(getParentActivity());
+            onlineTextView.setTextColor(0xffd7e8f7);
+            onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            onlineTextView.setLines(1);
+            onlineTextView.setMaxLines(1);
+            onlineTextView.setSingleLine(true);
+            onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView.setGravity(Gravity.LEFT);
+            avatarContainer.addView(onlineTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.leftMargin = AndroidUtilities.dp(54);
+            layoutParams2.bottomMargin = AndroidUtilities.dp(4);
+            layoutParams2.gravity = Gravity.BOTTOM;
+            onlineTextView.setLayoutParams(layoutParams2);
+
+            updateTitle();
+            updateSubtitle();
 
             if (currentEncryptedChat != null) {
-                timeItem = menu.addItemResource(chat_enc_timer, R.layout.chat_header_enc_layout);
+                nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_header, 0, 0, 0);
+                nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
             }
 
-            ActionBarMenuItem item = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach);
-            item.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
-            item.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
-            item.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
-            item.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
-            item.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
-            menuItem = item;
+            ActionBarMenu menu = actionBar.createMenu();
+
+            headerItem = menu.addItem(0, R.drawable.ic_ab_other);
+            if (currentUser != null) {
+                addContactItem = headerItem.addSubItem(share_contact, "", 0);
+            }
+            if (currentEncryptedChat != null) {
+                timeItem2 = headerItem.addSubItem(chat_enc_timer, LocaleController.getString("MessageLifetime", R.string.MessageLifetime), 0);
+            }
+            headerItem.addSubItem(clear_history, LocaleController.getString("ClearHistory", R.string.ClearHistory), 0);
+            if (currentChat != null && !isBroadcast) {
+                headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
+            } else {
+                headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser), 0);
+            }
+
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) headerItem.getLayoutParams();
+            layoutParams.rightMargin = AndroidUtilities.dp(-48);
+            headerItem.setLayoutParams(layoutParams);
+
+            attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other);
+            attachItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
+            attachItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
+            attachItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
+            attachItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
+            attachItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
+            attachItem.setVisibility(View.INVISIBLE);
+
+            menuItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach);
+            menuItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
+            menuItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
+            menuItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
+            menuItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
+            menuItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
+            menuItem.setShowFromBottom(true);
+            menuItem.setBackgroundDrawable(null);
 
             actionModeViews.clear();
 
-            final ActionBarMenu actionMode = actionBarLayer.createActionMode();
-            actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode));
-
-            FrameLayout layout = new FrameLayout(actionMode.getContext());
-            layout.setBackgroundColor(0xffe5e5e5);
-            actionMode.addView(layout);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)layout.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(1);
-            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.topMargin = AndroidUtilities.dp(12);
-            layoutParams.bottomMargin = AndroidUtilities.dp(12);
-            layoutParams.gravity = Gravity.CENTER_VERTICAL;
-            layout.setLayoutParams(layoutParams);
-            actionModeViews.add(layout);
+            final ActionBarMenu actionMode = actionBar.createActionMode();
+            actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_back_grey, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
 
             selectedMessagesCountTextView = new TextView(actionMode.getContext());
             selectedMessagesCountTextView.setTextSize(18);
-            selectedMessagesCountTextView.setTextColor(0xff000000);
+            selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            selectedMessagesCountTextView.setTextColor(0xff737373);
             selectedMessagesCountTextView.setSingleLine(true);
             selectedMessagesCountTextView.setLines(1);
             selectedMessagesCountTextView.setEllipsize(TextUtils.TruncateAt.END);
-            selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(11), 0, 0, 0);
+            selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(11), 0, 0, AndroidUtilities.dp(2));
             selectedMessagesCountTextView.setGravity(Gravity.CENTER_VERTICAL);
             selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
@@ -703,20 +920,16 @@ public boolean onTouch(View v, MotionEvent event) {
             selectedMessagesCountTextView.setLayoutParams(layoutParams);
 
             if (currentEncryptedChat == null) {
-                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode));
-                actionModeViews.add(actionMode.addItem(quoteforward, R.drawable.ic_ab_fwd_quoteforward, R.drawable.bar_selector_mode));
-                actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode));
-                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode));
-                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode));
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(quoteforward, R.drawable.ic_ab_fwd_quoteforward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
             } else {
-                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode));
-                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode));
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
             }
             actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
-
-            View avatarLayout = menu.addItemResource(chat_menu_avatar, R.layout.chat_header_layout);
-            avatarImageView = (BackupImageView)avatarLayout.findViewById(R.id.chat_avatar_image);
-            avatarImageView.processDetach = false;
             checkActionBarMenu();
 
             fragmentView = inflater.inflate(R.layout.chat_layout, container, false);
@@ -724,7 +937,7 @@ public boolean onTouch(View v, MotionEvent event) {
             View contentView = fragmentView.findViewById(R.id.chat_layout);
             TextView emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
             emptyViewContainer = fragmentView.findViewById(R.id.empty_view);
-            emptyViewContainer.setVisibility(View.GONE);
+            emptyViewContainer.setVisibility(View.INVISIBLE);
             emptyViewContainer.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -734,9 +947,6 @@ public boolean onTouch(View v, MotionEvent event) {
             emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
             chatListView = (LayoutListView)fragmentView.findViewById(R.id.chat_list_view);
             chatListView.setAdapter(chatAdapter = new ChatAdapter(getParentActivity()));
-            topPanel = fragmentView.findViewById(R.id.top_panel);
-            topPlaneClose = (ImageView)fragmentView.findViewById(R.id.top_plane_close);
-            topPanelText = (TextView)fragmentView.findViewById(R.id.top_panel_text);
             bottomOverlay = fragmentView.findViewById(R.id.bottom_overlay);
             bottomOverlayText = (TextView)fragmentView.findViewById(R.id.bottom_overlay_text);
             bottomOverlayChat = fragmentView.findViewById(R.id.bottom_overlay_chat);
@@ -779,45 +989,13 @@ public boolean onTouch(View v, MotionEvent event) {
                             ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(R.drawable.background_hd);
                         }
                     }
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     contentView.setBackgroundColor(-2693905);
                     chatListView.setCacheColorHint(-2693905);
                     FileLog.e("tmessages", e);
                 }
             }
 
-            if (currentEncryptedChat != null) {
-                emptyView.setVisibility(View.GONE);
-                View secretChatPlaceholder = contentView.findViewById(R.id.secret_placeholder);
-                secretChatPlaceholder.setVisibility(View.VISIBLE);
-                if (isCustomTheme) {
-                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_black);
-                } else {
-                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_blue);
-                }
-                secretViewStatusTextView = (TextView) contentView.findViewById(R.id.invite_text);
-                secretChatPlaceholder.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
-
-                View v = contentView.findViewById(R.id.secret_placeholder);
-                v.setVisibility(View.VISIBLE);
-
-                if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
-                    if (currentUser.first_name.length() > 0) {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
-                    } else {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.last_name));
-                    }
-                } else {
-                    if (currentUser.first_name.length() > 0) {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.first_name));
-                    } else {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.last_name));
-                    }
-                }
-
-                updateSecretStatus();
-            }
-
             if (isCustomTheme) {
                 progressViewInner.setBackgroundResource(R.drawable.system_loader2);
                 emptyView.setBackgroundResource(R.drawable.system_black);
@@ -839,7 +1017,7 @@ public boolean onTouch(View v, MotionEvent event) {
             chatListView.setOnInterceptTouchEventListener(new LayoutListView.OnInterceptTouchEventListener() {
                 @Override
                 public boolean onInterceptTouchEvent(MotionEvent event) {
-                    if (actionBarLayer.isActionModeShowed()) {
+                    if (actionBar.isActionModeShowed()) {
                         return false;
                     }
                     if (event.getAction() == MotionEvent.ACTION_DOWN) {
@@ -887,7 +1065,7 @@ public void run() {
                                     SecretPhotoViewer.getInstance().openPhoto(messageObject);
                                 }
                             };
-                            AndroidUtilities.RunOnUIThread(openSecretPhotoRunnable, 100);
+                            AndroidUtilities.runOnUIThread(openSecretPhotoRunnable, 100);
                             return true;
                         }
                     }
@@ -900,14 +1078,14 @@ public void run() {
                 public boolean onTouch(View v, MotionEvent event) {
                     if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
                         if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     chatListView.setOnItemClickListener(onItemClickListener);
                                 }
                             }, 150);
                             if (openSecretPhotoRunnable != null) {
-                                AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
                                 openSecretPhotoRunnable = null;
                                 try {
                                     Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
@@ -916,7 +1094,7 @@ public void run() {
                                 }
                             } else {
                                 if (SecretPhotoViewer.getInstance().isVisible()) {
-                                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                         @Override
                                         public void run() {
                                             chatListView.setOnItemLongClickListener(onItemLongClickListener);
@@ -932,11 +1110,11 @@ public void run() {
                             } else if (openSecretPhotoRunnable != null) {
                                 if (event.getAction() == MotionEvent.ACTION_MOVE) {
                                     if (Math.hypot(startX - event.getX(), startY - event.getY()) > AndroidUtilities.dp(5)) {
-                                        AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                        AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
                                         openSecretPhotoRunnable = null;
                                     }
                                 } else {
-                                    AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                    AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
                                     openSecretPhotoRunnable = null;
                                 }
                             }
@@ -949,7 +1127,10 @@ public void run() {
             chatListView.setOnScrollListener(new AbsListView.OnScrollListener() {
                 @Override
                 public void onScrollStateChanged(AbsListView absListView, int i) {
-
+                    if (i == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL || i == AbsListView.OnScrollListener.SCROLL_STATE_FLING && highlightMessageId != Integer.MAX_VALUE) {
+                        highlightMessageId = Integer.MAX_VALUE;
+                        updateVisibleRows();
+                    }
                 }
 
                 @Override
@@ -958,16 +1139,16 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                         if (firstVisibleItem <= 10) {
                             if (!endReached && !loading) {
                                 if (messagesByDays.size() != 0) {
-                                    MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced, minDate, classGuid, 0);
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced && startLoadFromMessageId == 0, minDate, classGuid, 0, 0, 0, startLoadFromMessageId == 0);
                                 } else {
-                                    MessagesController.getInstance().loadMessages(dialog_id, 20, 0, !cacheEndReaced, minDate, classGuid, 0);
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, 0, !cacheEndReaced && startLoadFromMessageId == 0, minDate, classGuid, 0, 0, 0, startLoadFromMessageId == 0);
                                 }
                                 loading = true;
                             }
                         }
                         if (firstVisibleItem + visibleItemCount >= totalItemCount - 6) {
                             if (!forward_end_reached && !loadingForward) {
-                                MessagesController.getInstance().loadMessages(dialog_id, 20, minMessageId, true, maxDate, classGuid, 1);
+                                MessagesController.getInstance().loadMessages(dialog_id, 20, minMessageId, startLoadFromMessageId == 0, maxDate, classGuid, 1, 0, 0, startLoadFromMessageId == 0);
                                 loadingForward = true;
                             }
                         }
@@ -1002,7 +1183,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 progressView.setVisibility(View.VISIBLE);
                 chatListView.setEmptyView(null);
             } else {
-                progressView.setVisibility(View.GONE);
+                progressView.setVisibility(View.INVISIBLE);
                 chatListView.setEmptyView(emptyViewContainer);
             }
 
@@ -1047,6 +1228,39 @@ public void onClick(DialogInterface dialogInterface, int i) {
             updateBottomOverlay();
 
             chatActivityEnterView.setContainerView(getParentActivity(), fragmentView);
+            chatActivityEnterView.addToAttachLayout(menuItem);
+
+            if (currentEncryptedChat != null) {
+                emptyView.setVisibility(View.INVISIBLE);
+                View secretChatPlaceholder = contentView.findViewById(R.id.secret_placeholder);
+                secretChatPlaceholder.setVisibility(View.VISIBLE);
+                if (isCustomTheme) {
+                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_black);
+                } else {
+                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_blue);
+                }
+                secretViewStatusTextView = (TextView) contentView.findViewById(R.id.invite_text);
+                secretChatPlaceholder.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
+
+                View v = contentView.findViewById(R.id.secret_placeholder);
+                v.setVisibility(View.VISIBLE);
+
+                if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.last_name));
+                    }
+                } else {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.last_name));
+                    }
+                }
+
+                updateSecretStatus();
+            }
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -1066,7 +1280,7 @@ private boolean sendSecretMessageRead(MessageObject messageObject) {
     }
 
     private void scrollToLastMessage() {
-        if (forward_end_reached || first_unread_id == 0) {
+        if ((forward_end_reached || first_unread_id == 0) && startLoadFromMessageId == 0) {
             chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
         } else {
             messages.clear();
@@ -1085,8 +1299,9 @@ private void scrollToLastMessage() {
             minDate = 0;
             forward_end_reached = true;
             loading = true;
+            startLoadFromMessageId = 0;
             chatAdapter.notifyDataSetChanged();
-            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, 0);
+            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, 0, 0, 0, true);
         }
     }
 
@@ -1096,37 +1311,22 @@ private void showPagedownButton(boolean show, boolean animated) {
         }
         if (show) {
             if (pagedownButton.getVisibility() == View.GONE) {
-                if (Build.VERSION.SDK_INT > 13 && animated) {
+                if (animated) {
                     pagedownButton.setVisibility(View.VISIBLE);
-                    pagedownButton.setAlpha(0);
-                    pagedownButton.animate().alpha(1).setDuration(200).setListener(null).start();
+                    ViewProxy.setAlpha(pagedownButton, 0);
+                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 1.0f).setDuration(200).start();
                 } else {
                     pagedownButton.setVisibility(View.VISIBLE);
                 }
             }
         } else {
             if (pagedownButton.getVisibility() == View.VISIBLE) {
-                if (Build.VERSION.SDK_INT > 13 && animated) {
-                    pagedownButton.animate().alpha(0).setDuration(200).setListener(new Animator.AnimatorListener() {
+                if (animated) {
+                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 0.0f).setDuration(200).addListener(new AnimatorListenerAdapterProxy() {
                         @Override
-                        public void onAnimationStart(Animator animation) {
-
-                        }
-
-                        @Override
-                        public void onAnimationEnd(Animator animation) {
+                        public void onAnimationEnd(Object animation) {
                             pagedownButton.setVisibility(View.GONE);
                         }
-
-                        @Override
-                        public void onAnimationCancel(Animator animation) {
-
-                        }
-
-                        @Override
-                        public void onAnimationRepeat(Animator animation) {
-
-                        }
                     }).start();
                 } else {
                     pagedownButton.setVisibility(View.GONE);
@@ -1155,6 +1355,9 @@ private void updateSecretStatus() {
         } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
             bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
             bottomOverlay.setVisibility(View.VISIBLE);
+            chatActivityEnterView.setFieldText("");
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().remove("dialog_" + dialog_id).commit();
             hideKeyboard = true;
         } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
             bottomOverlay.setVisibility(View.GONE);
@@ -1174,59 +1377,34 @@ private void checkActionBarMenu() {
             if (menuItem != null) {
                 menuItem.setVisibility(View.GONE);
             }
-
             if (timeItem != null) {
                 timeItem.setVisibility(View.GONE);
             }
+            if (timeItem2 != null) {
+                timeItem2.setVisibility(View.GONE);
+            }
         } else {
             if (menuItem != null) {
                 menuItem.setVisibility(View.VISIBLE);
             }
-
             if (timeItem != null) {
                 timeItem.setVisibility(View.VISIBLE);
             }
+            if (timeItem2 != null) {
+                timeItem2.setVisibility(View.VISIBLE);
+            }
         }
 
-        if (timeItem != null) {
-            timerButton = (TimerButton)timeItem.findViewById(R.id.chat_timer);
-            timerButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
-                }
-            });
-            timerButton.setTime(currentEncryptedChat.ttl);
+        if (timerDrawable != null) {
+            timerDrawable.setTime(currentEncryptedChat.ttl);
         }
 
-        if (avatarImageView != null) {
-            TLRPC.FileLocation photo = null;
-            int placeHolderId = 0;
-            if (currentUser != null) {
-                if (currentUser.photo != null) {
-                    photo = currentUser.photo.photo_small;
-                }
-                placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
-            } else if (currentChat != null) {
-                if (currentChat.photo != null) {
-                    photo = currentChat.photo.photo_small;
-                }
-                if (isBroadcast) {
-                    placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
-                } else {
-                    placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
-                }
-            }
-            avatarImageView.setImage(photo, "50_50", placeHolderId);
-        }
+        checkAndUpdateAvatar();
     }
 
-    private void updateOnlineCount() {
+    private int updateOnlineCount() {
         if (info == null) {
-            return;
+            return 0;
         }
         onlineCount = 0;
         int currentTime = ConnectionsManager.getInstance().getCurrentTime();
@@ -1236,8 +1414,7 @@ private void updateOnlineCount() {
                 onlineCount++;
             }
         }
-
-        updateSubtitle();
+        return onlineCount;
     }
 
     private int getMessageType(MessageObject messageObject) {
@@ -1363,11 +1540,11 @@ private void addToSelectedMessages(MessageObject messageObject) {
                 selectedMessagesCanCopyIds.put(messageObject.messageOwner.id, messageObject);
             }
         }
-        if (actionBarLayer.isActionModeShowed()) {
+        if (actionBar.isActionModeShowed()) {
             if (selectedMessagesIds.isEmpty()) {
-                actionBarLayer.hideActionMode();
+                actionBar.hideActionMode();
             }
-            actionBarLayer.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+            actionBar.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
         }
     }
 
@@ -1390,50 +1567,57 @@ private void processRowSelect(View view) {
     }
 
     private void updateActionModeTitle() {
-        if (!actionBarLayer.isActionModeShowed()) {
+        if (!actionBar.isActionModeShowed()) {
             return;
         }
         if (!selectedMessagesIds.isEmpty()) {
-            selectedMessagesCountTextView.setText(LocaleController.formatString("Selected", R.string.Selected, selectedMessagesIds.size()));
+            selectedMessagesCountTextView.setText(String.format("%d", selectedMessagesIds.size()));
         }
     }
 
-    private void updateSubtitle() {
+    private void updateTitle() {
+        if (nameTextView == null) {
+            return;
+        }
         if (currentChat != null) {
-            actionBarLayer.setTitle(currentChat.title);
+            nameTextView.setText(currentChat.title);
         } else if (currentUser != null) {
             if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                    actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
+                    nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
-                    actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                    nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
                 }
             } else {
-                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             }
         }
+    }
 
+    private void updateSubtitle() {
+        if (onlineTextView == null) {
+            return;
+        }
         CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
         if (printString != null) {
             printString = TextUtils.replace(printString, new String[]{"..."}, new String[]{""});
         }
         if (printString == null || printString.length() == 0) {
-            lastPrintString = null;
             setTypingAnimation(false);
             if (currentChat != null) {
                 if (currentChat instanceof TLRPC.TL_chatForbidden) {
-                    actionBarLayer.setSubtitle(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
+                    onlineTextView.setText(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
                 } else if (currentChat.left) {
-                    actionBarLayer.setSubtitle(LocaleController.getString("YouLeft", R.string.YouLeft));
+                    onlineTextView.setText(LocaleController.getString("YouLeft", R.string.YouLeft));
                 } else {
                     int count = currentChat.participants_count;
                     if (info != null) {
                         count = info.participants.size();
                     }
                     if (onlineCount > 1 && count != 0) {
-                        actionBarLayer.setSubtitle(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
+                        onlineTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
                     } else {
-                        actionBarLayer.setSubtitle(LocaleController.formatPluralString("Members", count));
+                        onlineTextView.setText(LocaleController.formatPluralString("Members", count));
                     }
                 }
             } else if (currentUser != null) {
@@ -1441,28 +1625,41 @@ private void updateSubtitle() {
                 if (user != null) {
                     currentUser = user;
                 }
-                actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
+                String newStatus = LocaleController.formatUserStatus(currentUser);
+                if (lastStatus == null || lastPrintString != null || lastStatus != null && !lastStatus.equals(newStatus)) {
+                    lastStatus = newStatus;
+                    onlineTextView.setText(newStatus);
+                }
             }
+            lastPrintString = null;
         } else {
             lastPrintString = printString;
-            actionBarLayer.setSubtitle(printString);
+            onlineTextView.setText(printString);
             setTypingAnimation(true);
         }
     }
 
     private void setTypingAnimation(boolean start) {
-        if (actionBarLayer == null) {
+        if (actionBar == null) {
             return;
         }
         if (start) {
             try {
-                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
-                typingDotsDrawable.start();
+                if (onlineTextView != null) {
+                    onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
+                    onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+                }
+                if (typingDotsDrawable != null) {
+                    typingDotsDrawable.start();
+                }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
         } else {
-            actionBarLayer.setSubTitleIcon(0, null, 0);
+            if (onlineTextView != null) {
+                onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
+                onlineTextView.setCompoundDrawablePadding(0);
+            }
             if (typingDotsDrawable != null) {
                 typingDotsDrawable.stop();
             }
@@ -1471,7 +1668,7 @@ private void setTypingAnimation(boolean start) {
 
     private void checkAndUpdateAvatar() {
         TLRPC.FileLocation newPhoto = null;
-        int placeHolderId = 0;
+        AvatarDrawable avatarDrawable = null;
         if (currentUser != null) {
             TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
             if (user == null) {
@@ -1481,7 +1678,7 @@ private void checkAndUpdateAvatar() {
             if (currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             }
-            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
+            avatarDrawable = new AvatarDrawable(currentUser);
         } else if (currentChat != null) {
             TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
             if (chat == null) {
@@ -1491,14 +1688,10 @@ private void checkAndUpdateAvatar() {
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
-            if (isBroadcast) {
-                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
-            } else {
-                placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
-            }
+            avatarDrawable = new AvatarDrawable(currentChat);
         }
         if (avatarImageView != null) {
-            avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
+            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
         }
     }
 
@@ -1648,21 +1841,23 @@ public boolean processSendingText(String text) {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.messagesDidLoaded) {
+
             long did = (Long)args[0];
             if (did == dialog_id) {
                 loadsCount++;
                 int count = (Integer)args[1];
                 boolean isCache = (Boolean)args[3];
                 int fnid = (Integer)args[4];
-                int last_unread_date = (Integer)args[7];
-                int load_type = (Integer)args[8];
+                int last_unread_date = (Integer)args[8];
+                int load_type = (Integer)args[9];
                 boolean wasUnread = false;
                 if (fnid != 0) {
                     first_unread_id = fnid;
                     last_message_id = (Integer)args[5];
-                    unread_to_load = (Integer)args[6];
-                } else if (startLoadFromMessageId != 0) {
+                    unread_to_load = (Integer)args[7];
+                } else if (startLoadFromMessageId != 0 && load_type == 3) {
                     last_message_id = (Integer)args[5];
+                    first_message_id = (Integer)args[6];
                 }
                 ArrayList<MessageObject> messArr = (ArrayList<MessageObject>)args[2];
 
@@ -1692,6 +1887,10 @@ public void didReceivedNotification(int id, final Object... args) {
                     firstLoading = false;
                 }
 
+                if (load_type == 1) {
+                    Collections.reverse(messArr);
+                }
+
                 for (int a = 0; a < messArr.size(); a++) {
                     MessageObject obj = messArr.get(a);
                     if (messagesDict.containsKey(obj.messageOwner.id)) {
@@ -1762,9 +1961,16 @@ public void didReceivedNotification(int id, final Object... args) {
                         messages.add(messages.size() - (dateAdded ? 0 : 1), dateObj);
                         unreadMessageObject = dateObj;
                         scrollToMessage = unreadMessageObject;
+                        scrollToMessageMiddleScreen = false;
                         newRowsCount++;
                     } else if (load_type == 3 && obj.messageOwner.id == startLoadFromMessageId) {
+                        highlightMessageId = obj.messageOwner.id;
                         scrollToMessage = obj;
+                        if (isCache) {
+                            startLoadFromMessageId = 0;
+                        }
+                        scrollToMessageMiddleScreen = true;
+                    } else if (load_type == 1 && startLoadFromMessageId != 0 && first_message_id != 0 && obj.messageOwner.id >= first_message_id) {
                         startLoadFromMessageId = 0;
                     }
 
@@ -1775,6 +1981,7 @@ public void didReceivedNotification(int id, final Object... args) {
 
                 if (forward_end_reached) {
                     first_unread_id = 0;
+                    first_message_id = 0;
                     last_message_id = 0;
                 }
 
@@ -1783,6 +1990,8 @@ public void didReceivedNotification(int id, final Object... args) {
                         forward_end_reached = true;
                         first_unread_id = 0;
                         last_message_id = 0;
+                        first_message_id = 0;
+                        startLoadFromMessageId = 0;
                     }
 
                     chatAdapter.notifyDataSetChanged();
@@ -1805,10 +2014,11 @@ public void didReceivedNotification(int id, final Object... args) {
                         if (first || scrollToTopOnResume) {
                             chatAdapter.notifyDataSetChanged();
                             if (scrollToMessage != null) {
+                                final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2) : 0;
                                 if (messages.get(messages.size() - 1) == scrollToMessage) {
-                                    chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11));
+                                    chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11) + yOffset);
                                 } else {
-                                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11));
+                                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11) + yOffset);
                                 }
                                 ViewTreeObserver obs = chatListView.getViewTreeObserver();
                                 obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
@@ -1816,13 +2026,13 @@ public void didReceivedNotification(int id, final Object... args) {
                                     public boolean onPreDraw() {
                                         if (!messages.isEmpty()) {
                                             if (messages.get(messages.size() - 1) == scrollToMessage) {
-                                                chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11));
+                                                chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11) + yOffset);
                                             } else {
-                                                chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11));
+                                                chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11) + yOffset);
                                             }
                                         }
                                         chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
-                                        return false;
+                                        return true;
                                     }
                                 });
                                 chatListView.invalidate();
@@ -1864,16 +2074,24 @@ public void run() {
                 }
 
                 if (first && messages.size() > 0) {
-                    if (last_message_id != 0) {
-                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, last_message_id, 0, last_unread_date, wasUnread, false);
-                    } else {
-                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, wasUnread, false);
-                    }
+                    final boolean wasUnreadFinal = wasUnread;
+                    final int last_unread_date_final = last_unread_date;
+                    final int lastid = messages.get(0).messageOwner.id;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (last_message_id != 0) {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, lastid, last_message_id, 0, last_unread_date_final, wasUnreadFinal, false);
+                            } else {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, lastid, minMessageId, 0, maxDate, wasUnreadFinal, false);
+                            }
+                        }
+                    }, 700);
                     first = false;
                 }
 
                 if (progressView != null) {
-                    progressView.setVisibility(View.GONE);
+                    progressView.setVisibility(View.INVISIBLE);
                 }
             }
         } else if (id == NotificationCenter.emojiDidLoaded) {
@@ -1882,9 +2100,19 @@ public void run() {
             }
         } else if (id == NotificationCenter.updateInterfaces) {
             int updateMask = (Integer)args[0];
-            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0) {
-                updateSubtitle();
-                updateOnlineCount();
+            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+                updateTitle();
+            }
+            boolean updateSubtitle = false;
+            if ((updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                if (currentChat != null) {
+                    int lastCount = onlineCount;
+                    if (lastCount != updateOnlineCount()) {
+                        updateSubtitle = true;
+                    }
+                } else {
+                    updateSubtitle = true;
+                }
             }
             if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 checkAndUpdateAvatar();
@@ -1893,9 +2121,12 @@ public void run() {
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
                 CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
                 if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
-                    updateSubtitle();
+                    updateSubtitle = true;
                 }
             }
+            if (updateSubtitle) {
+                updateSubtitle();
+            }
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PHONE) != 0) {
                 updateContactStatus();
             }
@@ -1933,9 +2164,9 @@ public void run() {
 
                     for (MessageObject obj : arr) {
                         if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
-                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
                             TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
-                            timerButton.setTime(action.ttl_seconds);
+                            timerDrawable.setTime(action.ttl_seconds);
                         }
                         if (obj.isOut() && obj.isSending()) {
                             scrollToLastMessage();
@@ -1979,9 +2210,9 @@ public void run() {
                     int oldCount = messages.size();
                     for (MessageObject obj : arr) {
                         if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
-                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
                             TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
-                            timerButton.setTime(action.ttl_seconds);
+                            timerDrawable.setTime(action.ttl_seconds);
                         }
                         if (messagesDict.containsKey(obj.messageOwner.id)) {
                             continue;
@@ -2034,7 +2265,7 @@ public void run() {
                         }
                     }
                     if (progressView != null) {
-                        progressView.setVisibility(View.GONE);
+                        progressView.setVisibility(View.INVISIBLE);
                     }
                     if (chatAdapter != null) {
                         chatAdapter.notifyDataSetChanged();
@@ -2078,7 +2309,7 @@ public void run() {
                     }
                 }
                 if (updateChat) {
-                    updateSubtitle();
+                    updateTitle();
                     checkAndUpdateAvatar();
                 }
             }
@@ -2126,7 +2357,7 @@ public void run() {
             }
             if (messages.isEmpty()) {
                 if (!endReached && !loading) {
-                    progressView.setVisibility(View.GONE);
+                    progressView.setVisibility(View.INVISIBLE);
                     chatListView.setEmptyView(null);
                     if (currentEncryptedChat == null) {
                         maxMessageId = Integer.MAX_VALUE;
@@ -2137,7 +2368,7 @@ public void run() {
                     }
                     maxDate = Integer.MIN_VALUE;
                     minDate = 0;
-                    MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, 0);
+                    MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, 0, 0, 0, true);
                     loading = true;
                 }
             }
@@ -2180,6 +2411,7 @@ public void run() {
             if (currentChat != null && chatId == currentChat.id) {
                 info = (TLRPC.ChatParticipants)args[1];
                 updateOnlineCount();
+                updateSubtitle();
                 if (isBroadcast) {
                     SendMessagesHelper.getInstance().setCurrentChatInfo(info);
                 }
@@ -2247,7 +2479,7 @@ public void run() {
                 messages.clear();
                 messagesByDays.clear();
                 messagesDict.clear();
-                progressView.setVisibility(View.GONE);
+                progressView.setVisibility(View.INVISIBLE);
                 chatListView.setEmptyView(emptyViewContainer);
                 if (currentEncryptedChat == null) {
                     maxMessageId = Integer.MAX_VALUE;
@@ -2260,7 +2492,7 @@ public void run() {
                 minDate = 0;
                 selectedMessagesIds.clear();
                 selectedMessagesCanCopyIds.clear();
-                actionBarLayer.hideActionMode();
+                actionBar.hideActionMode();
                 chatAdapter.notifyDataSetChanged();
             }
         } else if (id == NotificationCenter.screenshotTook) {
@@ -2306,6 +2538,23 @@ public void run() {
         }
     }
 
+    @Override
+    public void onOpenAnimationEnd() {
+        openAnimationEnded = true;
+        int count = chatListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View view = chatListView.getChildAt(a);
+            if (view instanceof ChatMediaCell) {
+                ChatMediaCell cell = (ChatMediaCell)view;
+                cell.setAllowedToSetPhoto(true);
+            }
+        }
+
+        if (currentUser != null) {
+            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(currentUser.id), classGuid);
+        }
+    }
+
     private void updateBottomOverlay() {
         if (currentUser == null) {
             bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
@@ -2326,11 +2575,11 @@ private void updateBottomOverlay() {
     }
 
     private void updateContactStatus() {
-        if (topPanel == null) {
+        if (addContactItem == null) {
             return;
         }
         if (currentUser == null) {
-            topPanel.setVisibility(View.GONE);
+            addContactItem.setVisibility(View.GONE);
         } else {
             TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
             if (user != null) {
@@ -2341,73 +2590,13 @@ private void updateContactStatus() {
                     || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
                     || ContactsController.getInstance().isLoadingContacts()
                     || (currentUser.phone != null && currentUser.phone.length() != 0 && ContactsController.getInstance().contactsDict.get(currentUser.id) != null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts()))) {
-                topPanel.setVisibility(View.GONE);
+                addContactItem.setVisibility(View.GONE);
             } else {
-                topPanel.setVisibility(View.VISIBLE);
-                topPanelText.setShadowLayer(1, 0, AndroidUtilities.dp(1), 0xff8797a3);
-                if (isCustomTheme) {
-                    topPlaneClose.setImageResource(R.drawable.ic_msg_btn_cross_custom);
-                    topPanel.setBackgroundResource(R.drawable.top_pane_custom);
-                } else {
-                    topPlaneClose.setImageResource(R.drawable.ic_msg_btn_cross_custom);
-                    topPanel.setBackgroundResource(R.drawable.top_pane);
-                }
+                addContactItem.setVisibility(View.VISIBLE);
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                    if (MessagesController.getInstance().hidenAddToContacts.get(currentUser.id) != null) {
-                        topPanel.setVisibility(View.INVISIBLE);
-                    } else {
-                        topPanelText.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
-                        topPlaneClose.setVisibility(View.VISIBLE);
-                        topPlaneClose.setOnClickListener(new View.OnClickListener() {
-                            @Override
-                            public void onClick(View v) {
-                                MessagesController.getInstance().hidenAddToContacts.put(currentUser.id, currentUser);
-                                topPanel.setVisibility(View.GONE);
-                            }
-                        });
-                        topPanel.setOnClickListener(new View.OnClickListener() {
-                            @Override
-                            public void onClick(View v) {
-                                Bundle args = new Bundle();
-                                args.putInt("user_id", currentUser.id);
-                                presentFragment(new ContactAddActivity(args));
-                            }
-                        });
-                    }
+                    addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
                 } else {
-                    if (MessagesController.getInstance().hidenAddToContacts.get(currentUser.id) != null) {
-                        topPanel.setVisibility(View.INVISIBLE);
-                    } else {
-                        topPanelText.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
-                        topPlaneClose.setVisibility(View.GONE);
-                        topPanel.setOnClickListener(new View.OnClickListener() {
-                            @Override
-                            public void onClick(View v) {
-                                if (getParentActivity() == null) {
-                                    return;
-                                }
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
-                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        MessagesController.getInstance().hidenAddToContacts.put(currentUser.id, currentUser);
-                                        topPanel.setVisibility(View.GONE);
-                                        SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id);
-                                        chatListView.post(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                            }
-                                        });
-                                    }
-                                });
-                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                showAlertDialog(builder);
-                            }
-                        });
-                    }
+                    addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                 }
             }
         }
@@ -2417,15 +2606,22 @@ public void run() {
     public void onResume() {
         super.onResume();
 
-        checkActionBarMenu();
+        if (!AndroidUtilities.isTablet()) {
+            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+        }
+
         if (chatAdapter != null) {
             chatAdapter.notifyDataSetChanged();
         }
+
+        checkActionBarMenu();
+
         NotificationsController.getInstance().setOpennedDialogId(dialog_id);
         if (scrollToTopOnResume) {
             if (scrollToTopUnReadOnResume && scrollToMessage != null) {
                 if (chatListView != null) {
-                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), -chatListView.getPaddingTop() - AndroidUtilities.dp(7));
+                    final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2) : 0;
+                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), -chatListView.getPaddingTop() - AndroidUtilities.dp(7) + yOffset);
                 }
             } else {
                 if (chatListView != null) {
@@ -2454,9 +2650,7 @@ public void onResume() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
         if (lastMessageText != null) {
-            SharedPreferences.Editor editor = preferences.edit();
-            editor.remove("dialog_" + dialog_id);
-            editor.commit();
+            preferences.edit().remove("dialog_" + dialog_id).commit();
             chatActivityEnterView.setFieldText(lastMessageText);
         }
         if (bottomOverlayChat.getVisibility() != View.VISIBLE) {
@@ -2468,7 +2662,7 @@ public void onResume() {
         }
 
         if (startVideoEdit != null) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     openVideoEditor(startVideoEdit, false);
@@ -2491,7 +2685,6 @@ public void onBeginSlide() {
     @Override
     public void onPause() {
         super.onPause();
-        actionBarLayer.hideActionMode();
         chatActivityEnterView.hideEmojiPopup();
         paused = true;
         NotificationsController.getInstance().setOpennedDialogId(0);
@@ -2536,41 +2729,51 @@ private void updateInformationForScreenshotDetector() {
     }
 
     private void fixLayout(final boolean resume) {
-        final int lastPos = chatListView.getLastVisiblePosition();
-        ViewTreeObserver obs = chatListView.getViewTreeObserver();
-        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (chatListView != null) {
-                    chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
-                }
-                if (getParentActivity() == null) {
-                    return true;
-                }
-                int height = AndroidUtilities.dp(48);
-                if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                    height = AndroidUtilities.dp(40);
-                    selectedMessagesCountTextView.setTextSize(16);
-                } else {
-                    selectedMessagesCountTextView.setTextSize(18);
-                }
-                if (avatarImageView != null) {
-                    RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) avatarImageView.getLayoutParams();
-                    params.width = height;
-                    params.height = height;
-                    avatarImageView.setLayoutParams(params);
+        if (avatarContainer != null) {
+            avatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    if (avatarContainer != null) {
+                        avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
+                    }
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                        selectedMessagesCountTextView.setTextSize(18);
+                    } else {
+                        selectedMessagesCountTextView.setTextSize(20);
+                    }
+                    int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
+                    avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)avatarContainer.getLayoutParams();
+                    layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                    avatarContainer.setLayoutParams(layoutParams);
+                    return false;
                 }
-                if (!resume && lastPos >= messages.size() - 1) {
-                    chatListView.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                        }
-                    });
+            });
+        }
+        if (!resume && chatListView != null) {
+            final int lastPos = chatListView.getLastVisiblePosition();
+            chatListView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    if (chatListView == null) {
+                        return false;
+                    }
+                    chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    if (lastPos >= messages.size() - 1) {
+                        chatListView.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                            }
+                        });
+                    }
+                    return false;
                 }
-                return false;
-            }
-        });
+            });
+        }
     }
 
     @Override
@@ -2579,7 +2782,7 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     }
 
     public void createMenu(View v, boolean single) {
-        if (actionBarLayer.isActionModeShowed()) {
+        if (actionBar.isActionModeShowed()) {
             return;
         }
 
@@ -2598,6 +2801,7 @@ public void createMenu(View v, boolean single) {
         forwaringMessage = null;
         selectedMessagesCanCopyIds.clear();
         selectedMessagesIds.clear();
+        actionBar.hideActionMode();
 
         if (single || type < 2 || type == 6) {
             if (type >= 0) {
@@ -2740,22 +2944,25 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             return;
         }
-        actionBarLayer.showActionMode();
+        actionBar.showActionMode();
+
         if (Build.VERSION.SDK_INT >= 11) {
-            AnimatorSet animatorSet = new AnimatorSet();
-            ArrayList<Animator> animators = new ArrayList<Animator>();
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+            ArrayList<Object> animators = new ArrayList<Object>();
             for (int a = 0; a < actionModeViews.size(); a++) {
                 View view = actionModeViews.get(a);
-                if (a < 2) {
-                    animators.add(ObjectAnimator.ofFloat(view, "translationX", -AndroidUtilities.dp(56), 0));
+                AndroidUtilities.clearDrawableAnimation(view);
+                if (a < 1) {
+                    animators.add(ObjectAnimatorProxy.ofFloat(view, "translationX", -AndroidUtilities.dp(56), 0));
                 } else {
-                    animators.add(ObjectAnimator.ofFloat(view, "scaleY", 0.1f, 1.0f));
+                    animators.add(ObjectAnimatorProxy.ofFloat(view, "scaleY", 0.1f, 1.0f));
                 }
             }
             animatorSet.playTogether(animators);
             animatorSet.setDuration(250);
             animatorSet.start();
         }
+
         addToSelectedMessages(message);
         updateActionModeTitle();
         updateVisibleRows();
@@ -2922,6 +3129,7 @@ private void forwardSelectedMessages(long did, boolean fromMyName) {
             }
             selectedMessagesCanCopyIds.clear();
             selectedMessagesIds.clear();
+            actionBar.hideActionMode();
         }
     }
 
@@ -2941,10 +3149,12 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                     } else if (lower_part < 0) {
                         args.putInt("chat_id", -lower_part);
                     }
-                    presentFragment(new ChatActivity(args), true);
                     forwardSelectedMessages(did, param);
+                    ChatActivity chatActivity = new ChatActivity(args);
+                    presentFragment(chatActivity, true);
                     if (!AndroidUtilities.isTablet()) {
                         removeSelfFromStack();
+                        chatActivity.getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
                     }
                 } else {
                     activity.finishFragment();
@@ -2955,7 +3165,7 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                 chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
                 scrollToTopOnResume = true;
                 if (AndroidUtilities.isTablet()) {
-                    actionBarLayer.hideActionMode();
+                    actionBar.hideActionMode();
                 }
             }
         }
@@ -2963,10 +3173,10 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
 
     @Override
     public boolean onBackPressed() {
-        if (actionBarLayer.isActionModeShowed()) {
+        if (actionBar.isActionModeShowed()) {
             selectedMessagesIds.clear();
             selectedMessagesCanCopyIds.clear();
-            actionBarLayer.hideActionMode();
+            actionBar.hideActionMode();
             updateVisibleRows();
             return false;
         } else if (chatActivityEnterView.isEmojiPopupShowing()) {
@@ -3011,13 +3221,12 @@ private void updateVisibleRows() {
         int count = chatListView.getChildCount();
         for (int a = 0; a < count; a++) {
             View view = chatListView.getChildAt(a);
-            Object tag = view.getTag();
             if (view instanceof ChatBaseCell) {
                 ChatBaseCell cell = (ChatBaseCell)view;
 
                 boolean disableSelection = false;
                 boolean selected = false;
-                if (actionBarLayer.isActionModeShowed()) {
+                if (actionBar.isActionModeShowed()) {
                     if (selectedMessagesIds.containsKey(cell.getMessageObject().messageOwner.id)) {
                         view.setBackgroundColor(0x6633b5e5);
                         selected = true;
@@ -3032,6 +3241,10 @@ private void updateVisibleRows() {
                 cell.setMessageObject(cell.getMessageObject());
 
                 cell.setCheckPressed(!disableSelection, disableSelection && selected);
+
+                if (highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == highlightMessageId) {
+                    cell.setCheckPressed(false, true);
+                }
             }
         }
     }
@@ -3086,7 +3299,8 @@ private void alertUserOpenError(MessageObject message) {
                 object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
                 object.parentView = chatListView;
                 object.imageReceiver = imageReceiver;
-                object.thumb = object.imageReceiver.getBitmap();
+                object.thumb = imageReceiver.getBitmap();
+                object.radius = imageReceiver.getRoundRadius();
                 return object;
             }
         }
@@ -3209,14 +3423,14 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((ChatBaseCell)view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
                         @Override
                         public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
-                            if (actionBarLayer.isActionModeShowed()) {
+                            if (actionBar.isActionModeShowed()) {
                                 processRowSelect(cell);
                                 return;
                             }
                             if (user != null && user.id != UserConfig.getClientUserId()) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", user.id);
-                                presentFragment(new UserProfileActivity(args));
+                                presentFragment(new ProfileActivity(args));
                             }
                         }
 
@@ -3235,10 +3449,11 @@ public void didLongPressed(ChatBaseCell cell) {
 
                         @Override
                         public boolean canPerformActions() {
-                            return actionBarLayer != null && !actionBarLayer.isActionModeShowed();
+                            return actionBar != null && !actionBar.isActionModeShowed();
                         }
                     });
                     if (view instanceof ChatMediaCell) {
+                        ((ChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
                         ((ChatMediaCell) view).setMediaDelegate(new ChatMediaCell.ChatMediaCellDelegate() {
                             @Override
                             public void didClickedImage(ChatMediaCell cell) {
@@ -3294,6 +3509,12 @@ public void didClickedImage(ChatMediaCell cell) {
                                                 if (idx != -1) {
                                                     String ext = fileName.substring(idx + 1);
                                                     realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                                    if (realMimeType == null) {
+                                                        realMimeType = message.messageOwner.media.document.mime_type;
+                                                        if (realMimeType == null || realMimeType.length() == 0) {
+                                                            realMimeType = null;
+                                                        }
+                                                    }
                                                     if (realMimeType != null) {
                                                         intent.setDataAndType(Uri.fromFile(f), realMimeType);
                                                     } else {
@@ -3329,7 +3550,7 @@ public void didPressedOther(ChatMediaCell cell) {
                         ((ChatContactCell)view).setContactDelegate(new ChatContactCell.ChatContactCellDelegate() {
                             @Override
                             public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
-                                if (actionBarLayer.isActionModeShowed()) {
+                                if (actionBar.isActionModeShowed()) {
                                     processRowSelect(cell);
                                     return;
                                 }
@@ -3337,12 +3558,13 @@ public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", messageObject.messageOwner.media.user_id);
                                 args.putString("phone", messageObject.messageOwner.media.phone_number);
+                                args.putBoolean("addContact", true);
                                 presentFragment(new ContactAddActivity(args));
                             }
 
                             @Override
                             public void didClickPhone(ChatContactCell cell) {
-                                if (actionBarLayer.isActionModeShowed()) {
+                                if (actionBar.isActionModeShowed()) {
                                     processRowSelect(cell);
                                     return;
                                 }
@@ -3398,7 +3620,7 @@ public void needOpenUserProfile(int uid) {
                             if (uid != UserConfig.getClientUserId()) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", uid);
-                                presentFragment(new UserProfileActivity(args));
+                                presentFragment(new ProfileActivity(args));
                             }
                         }
                     });
@@ -3407,7 +3629,7 @@ public void needOpenUserProfile(int uid) {
 
             boolean selected = false;
             boolean disableSelection = false;
-            if (actionBarLayer.isActionModeShowed()) {
+            if (actionBar.isActionModeShowed()) {
                 if (selectedMessagesIds.containsKey(message.messageOwner.id)) {
                     view.setBackgroundColor(0x6633b5e5);
                     selected = true;
@@ -3427,6 +3649,9 @@ public void needOpenUserProfile(int uid) {
                 if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
                     ((ChatAudioCell)view).downloadAudioIfNeed();
                 }
+                if (highlightMessageId != Integer.MAX_VALUE && message.messageOwner.id == highlightMessageId) {
+                    baseCell.setCheckPressed(false, true);
+                }
             } else if (view instanceof ChatActionCell) {
                 ChatActionCell actionCell = (ChatActionCell)view;
                 actionCell.setMessageObject(message);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
deleted file mode 100644
index 1dc77830f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ /dev/null
@@ -1,777 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Typeface;
-import android.os.Bundle;
-import android.text.Html;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ImageButton;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.AvatarUpdater;
-import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SettingsSectionLayout;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.concurrent.Semaphore;
-
-public class ChatProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate, PhotoViewer.PhotoViewerProvider {
-    private ListView listView;
-    private ListAdapter listViewAdapter;
-    private int chat_id;
-    private String selectedPhone;
-    private TLRPC.ChatParticipants info;
-    private TLRPC.TL_chatParticipant selectedUser;
-    private AvatarUpdater avatarUpdater = new AvatarUpdater();
-    private int totalMediaCount = -1;
-    private int onlineCount = -1;
-    private ArrayList<Integer> sortedUsers = new ArrayList<Integer>();
-    private TLRPC.Chat currentChat;
-
-    private int avatarRow;
-    private int settingsSectionRow;
-    private int settingsNotificationsRow;
-    private int sharedMediaSectionRow;
-    private int sharedMediaRow;
-    private int membersSectionRow;
-    private int membersEndRow;
-    private int addMemberRow;
-    private int leaveGroupRow;
-    private int rowCount = 0;
-
-    private static final int done_button = 1;
-
-    public ChatProfileActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-
-        chat_id = getArguments().getInt("chat_id", 0);
-        currentChat = MessagesController.getInstance().getChat(chat_id);
-        if (currentChat == null) {
-            final Semaphore semaphore = new Semaphore(0);
-            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    currentChat = MessagesStorage.getInstance().getChat(chat_id);
-                    semaphore.release();
-                }
-            });
-            try {
-                semaphore.acquire();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            if (currentChat != null) {
-                MessagesController.getInstance().putChat(currentChat, true);
-            } else {
-                return false;
-            }
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-
-        updateOnlineCount();
-        if (chat_id > 0) {
-            MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
-        }
-        avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
-            @Override
-            public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
-                if (chat_id != 0) {
-                    MessagesController.getInstance().changeChatAvatar(chat_id, file);
-                }
-            }
-        };
-        avatarUpdater.parentFragment = this;
-
-        updateRowsIds();
-
-        return true;
-    }
-
-    private void updateRowsIds() {
-        rowCount = 0;
-        avatarRow = rowCount++;
-        if (chat_id > 0) {
-            settingsSectionRow = rowCount++;
-            settingsNotificationsRow = rowCount++;
-            sharedMediaSectionRow = rowCount++;
-            sharedMediaRow = rowCount++;
-        }
-        if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
-            membersSectionRow = rowCount++;
-            rowCount += info.participants.size();
-            membersEndRow = rowCount;
-            int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
-            if (info.participants.size() < maxCount) {
-                addMemberRow = rowCount++;
-            } else {
-                addMemberRow = -1;
-            }
-        } else {
-            membersEndRow = -1;
-            addMemberRow = -1;
-            membersSectionRow = -1;
-        }
-        if (chat_id > 0) {
-            leaveGroupRow = rowCount++;
-        }
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        avatarUpdater.clear();
-    }
-
-    public View createView(LayoutInflater inflater, ViewGroup container) {
-        if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            if (chat_id > 0) {
-                actionBarLayer.setTitle(LocaleController.getString("GroupInfo", R.string.GroupInfo));
-            } else {
-                actionBarLayer.setTitle(LocaleController.getString("BroadcastList", R.string.BroadcastList));
-            }
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
-                @Override
-                public void onItemClick(int id) {
-                    if (id == -1) {
-                        finishFragment();
-                    } else if (id == done_button) {
-                        openAddMenu();
-                    }
-                }
-            });
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            View item = menu.addItemResource(done_button, R.layout.group_profile_add_member_layout);
-            TextView textView = (TextView)item.findViewById(R.id.done_button);
-            if (textView != null) {
-                if (chat_id > 0) {
-                    textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
-                } else {
-                    textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
-                }
-            }
-
-            fragmentView = inflater.inflate(R.layout.chat_profile_layout, container, false);
-
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
-            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-                @Override
-                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i > membersSectionRow && i < membersEndRow) {
-                        if (getParentActivity() == null) {
-                            return false;
-                        }
-
-                        TLRPC.TL_chatParticipant user = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
-                        if (user.user_id == UserConfig.getClientUserId()) {
-                            return false;
-                        }
-                        if (info.admin_id != UserConfig.getClientUserId() && user.inviter_id != UserConfig.getClientUserId()) {
-                            return false;
-                        }
-                        selectedUser = user;
-
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        CharSequence[] items = new CharSequence[] {chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
-
-                        builder.setItems(items, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                if (i == 0) {
-                                    kickUser(selectedUser);
-                                }
-                            }
-                        });
-                        showAlertDialog(builder);
-
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == sharedMediaRow) {
-                        Bundle args = new Bundle();
-                        args.putLong("dialog_id", -chat_id);
-                        presentFragment(new MediaActivity(args));
-                    } else if (i == addMemberRow) {
-                        openAddMenu();
-                    } else if (i > membersSectionRow && i < membersEndRow) {
-                        int user_id = info.participants.get(sortedUsers.get(i - membersSectionRow - 1)).user_id;
-                        if (user_id == UserConfig.getClientUserId()) {
-                            return;
-                        }
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", user_id);
-                        presentFragment(new UserProfileActivity(args));
-                    } else if (i == settingsNotificationsRow) {
-                        Bundle args = new Bundle();
-                        args.putLong("dialog_id", -chat_id);
-                        presentFragment(new ProfileNotificationsActivity(args));
-                    }
-                }
-            });
-        } else {
-            ViewGroup parent = (ViewGroup)fragmentView.getParent();
-            if (parent != null) {
-                parent.removeView(fragmentView);
-            }
-        }
-        return fragmentView;
-    }
-
-    @Override
-    public void didSelectContact(TLRPC.User user, String param) {
-        MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        avatarUpdater.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle args) {
-        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
-            args.putString("path", avatarUpdater.currentPicturePath);
-        }
-    }
-
-    @Override
-    public void restoreSelfArgs(Bundle args) {
-        MessagesController.getInstance().loadChatInfo(chat_id, null);
-        if (avatarUpdater != null) {
-            avatarUpdater.currentPicturePath = args.getString("path");
-        }
-    }
-
-    @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        if (fileLocation == null) {
-            return null;
-        }
-        TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-        if (chat != null && chat.photo != null && chat.photo.photo_big != null) {
-            TLRPC.FileLocation photoBig = chat.photo.photo_big;
-            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
-                int count = listView.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = listView.getChildAt(a);
-                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    if (avatarImage != null) {
-                        int coords[] = new int[2];
-                        avatarImage.getLocationInWindow(coords);
-                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-                        object.viewX = coords[0];
-                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-                        object.parentView = listView;
-                        object.imageReceiver = avatarImage.imageReceiver;
-                        object.thumb = object.imageReceiver.getBitmap();
-                        object.size = -1;
-                        return object;
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
-
-    @Override
-    public void willHidePhotoViewer() { }
-
-    @Override
-    public boolean isPhotoChecked(int index) { return false; }
-
-    @Override
-    public void setPhotoChecked(int index) { }
-
-    @Override
-    public void cancelButtonPressed() { }
-
-    @Override
-    public void sendButtonPressed(int index) { }
-
-    @Override
-    public int getSelectedCount() { return 0; }
-
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateOnlineCount();
-            }
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateVisibleRows(mask);
-            }
-        } else if (id == NotificationCenter.chatInfoDidLoaded) {
-            int chatId = (Integer)args[0];
-            if (chatId == chat_id) {
-                info = (TLRPC.ChatParticipants)args[1];
-                updateOnlineCount();
-                updateRowsIds();
-                if (listViewAdapter != null) {
-                    listViewAdapter.notifyDataSetChanged();
-                }
-            }
-        } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long)args[0];
-            int lower_part = (int)uid;
-            if (lower_part < 0 && chat_id == -lower_part) {
-                totalMediaCount = (Integer)args[1];
-                if (listView != null) {
-                    listView.invalidateViews();
-                }
-            }
-        } else if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listViewAdapter != null) {
-            listViewAdapter.notifyDataSetChanged();
-        }
-    }
-
-    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
-        info = chatParticipants;
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView == null) {
-            return;
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
-            if (child instanceof ChatOrUserCell) {
-                ((ChatOrUserCell) child).update(mask);
-            }
-        }
-    }
-
-    private void updateOnlineCount() {
-        if (info == null) {
-            return;
-        }
-        onlineCount = 0;
-        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-        sortedUsers.clear();
-        int i = 0;
-        for (TLRPC.TL_chatParticipant participant : info.participants) {
-            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
-                onlineCount++;
-            }
-            sortedUsers.add(i);
-            i++;
-        }
-
-        Collections.sort(sortedUsers, new Comparator<Integer>() {
-            @Override
-            public int compare(Integer lhs, Integer rhs) {
-                TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.get(rhs).user_id);
-                TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.get(lhs).user_id);
-                Integer status1 = 0;
-                Integer status2 = 0;
-                if (user1 != null && user1.status != null) {
-                    if (user1.id == UserConfig.getClientUserId()) {
-                        status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                    } else {
-                        status1 = user1.status.expires;
-                    }
-                }
-                if (user2 != null && user2.status != null) {
-                    if (user2.id == UserConfig.getClientUserId()) {
-                        status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                    } else {
-                        status2 = user2.status.expires;
-                    }
-                }
-                return status1.compareTo(status2);
-            }
-        });
-
-        if (listView != null) {
-            listView.invalidateViews();
-        }
-    }
-
-    private void processPhotoMenu(int action) {
-        if (action == 0) {
-            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-            if (chat.photo != null && chat.photo.photo_big != null) {
-                PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                PhotoViewer.getInstance().openPhoto(chat.photo.photo_big, this);
-            }
-        } else if (action == 1) {
-            avatarUpdater.openCamera();
-        } else if (action == 2) {
-            avatarUpdater.openGallery();
-        } else if (action == 3) {
-            MessagesController.getInstance().changeChatAvatar(chat_id, null);
-        }
-    }
-
-    private void openAddMenu() {
-        Bundle args = new Bundle();
-        args.putBoolean("onlyUsers", true);
-        args.putBoolean("destroyAfterSelect", true);
-        args.putBoolean("usersAsSections", true);
-        args.putBoolean("returnAsResult", true);
-        //args.putBoolean("allowUsernameSearch", false);
-        if (chat_id > 0) {
-            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
-        }
-        ContactsActivity fragment = new ContactsActivity(args);
-        fragment.setDelegate(this);
-        if (info != null) {
-            HashMap<Integer, TLRPC.User> users = new HashMap<Integer, TLRPC.User>();
-            for (TLRPC.TL_chatParticipant p : info.participants) {
-                users.put(p.user_id, null);
-            }
-            fragment.setIgnoreUsers(users);
-        }
-        presentFragment(fragment);
-    }
-
-    private void kickUser(TLRPC.TL_chatParticipant user) {
-        if (user != null) {
-            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(user.user_id), info);
-        } else {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
-            MessagesController.getInstance().deleteDialog(-chat_id, 0, false);
-            finishFragment();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == settingsNotificationsRow || i == sharedMediaRow || i == addMemberRow || i > membersSectionRow && i < membersEndRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                BackupImageView avatarImage;
-                TextView onlineText;
-                TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.chat_profile_avatar_layout, viewGroup, false);
-                    onlineText = (TextView)view.findViewById(R.id.settings_online);
-
-                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            Bundle args = new Bundle();
-                            args.putInt("chat_id", chat_id);
-                            presentFragment(new ChatProfileChangeNameActivity(args));
-                        }
-                    });
-
-                    final ImageButton button2 = (ImageButton)view.findViewById(R.id.settings_change_avatar_button);
-                    if (chat_id > 0) {
-                        button2.setOnClickListener(new View.OnClickListener() {
-                            @Override
-                            public void onClick(View view) {
-                                if (getParentActivity() == null) {
-                                    return;
-                                }
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                CharSequence[] items;
-                                int type;
-                                TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-                                if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
-                                    items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                                    type = 0;
-                                } else {
-                                    items = new CharSequence[]{LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                                    type = 1;
-                                }
-
-                                final int arg0 = type;
-                                builder.setItems(items, new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        int action = 0;
-                                        if (arg0 == 1) {
-                                            if (i == 0) {
-                                                action = 0;
-                                            } else if (i == 1) {
-                                                action = 1;
-                                            } else if (i == 2) {
-                                                action = 2;
-                                            } else if (i == 3) {
-                                                action = 3;
-                                            }
-                                        } else if (arg0 == 0) {
-                                            if (i == 0) {
-                                                action = 1;
-                                            } else if (i == 1) {
-                                                action = 2;
-                                            }
-                                        }
-                                        processPhotoMenu(action);
-                                    }
-                                });
-                                showAlertDialog(builder);
-                            }
-                        });
-                    } else {
-                        button2.setVisibility(View.GONE);
-                    }
-                } else {
-                    onlineText = (TextView)view.findViewById(R.id.settings_online);
-                }
-                avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                avatarImage.processDetach = false;
-                TextView textView = (TextView)view.findViewById(R.id.settings_name);
-                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
-                textView.setTypeface(typeface);
-
-                textView.setText(chat.title);
-
-                int count = chat.participants_count;
-                if (info != null) {
-                    count = info.participants.size();
-                }
-
-                if (count != 0 && onlineCount > 1) {
-                    onlineText.setText(Html.fromHtml(String.format("%s, <font color='#357aa8'>%s</font>", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount))));
-                } else {
-                    onlineText.setText(LocaleController.formatPluralString("Members", count));
-                }
-
-                TLRPC.FileLocation photo = null;
-                TLRPC.FileLocation photoBig = null;
-                if (chat.photo != null) {
-                    photo = chat.photo.photo_small;
-                    photoBig = chat.photo.photo_big;
-                }
-                avatarImage.setImage(photo, "50_50", chat_id > 0 ? AndroidUtilities.getGroupAvatarForId(chat.id) : AndroidUtilities.getBroadcastAvatarForId(chat.id));
-                avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-                return view;
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new SettingsSectionLayout(mContext);
-                }
-                if (i == settingsSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
-                } else if (i == sharedMediaSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
-                } else if (i == membersSectionRow) {
-                    TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-                    int count = chat.participants_count;
-                    if (info != null) {
-                        count = info.participants.size();
-                    }
-                    ((SettingsSectionLayout) view).setText(LocaleController.formatPluralString("Members", count).toUpperCase());
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == sharedMediaRow) {
-                    textView.setText(LocaleController.getString("SharedMedia", R.string.SharedMedia));
-                    if (totalMediaCount == -1) {
-                        detailTextView.setText(LocaleController.getString("Loading", R.string.Loading));
-                    } else {
-                        detailTextView.setText(String.format("%d", totalMediaCount));
-                    }
-                    divider.setVisibility(View.INVISIBLE);
-                }
-            } else if (type == 3) {
-                TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
-                TLRPC.User user = MessagesController.getInstance().getUser(part.user_id);
-
-                if (view == null) {
-                    view = new ChatOrUserCell(mContext);
-                    ((ChatOrUserCell)view).usePadding = false;
-                    ((ChatOrUserCell)view).useSeparator = true;
-                }
-
-                ((ChatOrUserCell)view).setData(user, null, null, null, null);
-            } else if (type == 4) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.chat_profile_add_row, viewGroup, false);
-                    TextView textView = (TextView)view.findViewById(R.id.messages_list_row_name);
-                    if (chat_id > 0) {
-                        textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
-                    } else {
-                        textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
-                        View divider = view.findViewById(R.id.settings_row_divider);
-                        divider.setVisibility(View.INVISIBLE);
-                    }
-                }
-            } else if (type == 5) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_logout_button, viewGroup, false);
-                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                    textView.setText(LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
-                    textView.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            if (getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    kickUser(null);
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showAlertDialog(builder);
-                        }
-                    });
-                }
-            } else if (type == 6) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-                    divider.setVisibility(View.INVISIBLE);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == avatarRow) {
-                return 0;
-            } else if (i == settingsSectionRow || i == sharedMediaSectionRow || i == membersSectionRow) {
-                return 1;
-            } else if (i == sharedMediaRow) {
-                return 2;
-            } else if (i == addMemberRow) {
-                return 4;
-            } else if (i == leaveGroupRow) {
-                return 5;
-            } else if (i > membersSectionRow && i < membersEndRow) {
-                return 3;
-            } else if (i == settingsNotificationsRow) {
-                return 6;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 7;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index b136ba519..8afcbcb51 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -10,15 +10,21 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import android.graphics.Typeface;
 import android.os.Bundle;
+import android.text.InputType;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
-import android.widget.Button;
 import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
@@ -29,18 +35,26 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 public class ContactAddActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private int user_id;
-    private String phone = null;
+
     private View doneButton;
     private EditText firstNameField;
     private EditText lastNameField;
     private BackupImageView avatarImage;
-    private TextView onlineText;
-    private TextView phoneText;
+    private TextView nameTextView;
+    private TextView onlineTextView;
+
+    private int user_id;
+    private boolean addContact;
+    private String phone = null;
+
+    private final static int done_button = 1;
 
     public ContactAddActivity(Bundle args) {
         super(args);
@@ -51,6 +65,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         user_id = getArguments().getInt("user_id", 0);
         phone = getArguments().getString("phone");
+        addContact = getArguments().getBoolean("addContact", false);
         TLRPC.User user = MessagesController.getInstance().getUser(user_id);
         return user != null && super.onFragmentCreate();
     }
@@ -64,51 +79,174 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (addContact) {
+                actionBar.setTitle(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
+            } else {
+                actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
+            }
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    if (firstNameField.getText().length() != 0) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        user.first_name = firstNameField.getText().toString();
-                        user.last_name = lastNameField.getText().toString();
-                        ContactsController.getInstance().addContact(user);
+                public void onItemClick(int id) {
+                    if (id == -1) {
                         finishFragment();
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+                    } else if (id == done_button) {
+                        if (firstNameField.getText().length() != 0) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                            user.first_name = firstNameField.getText().toString();
+                            user.last_name = lastNameField.getText().toString();
+                            ContactsController.getInstance().addContact(user);
+                            finishFragment();
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+                        }
                     }
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
-            fragmentView = inflater.inflate(R.layout.contact_add_layout, container, false);
+            /*
 
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            if (user.phone == null) {
-                if (phone != null) {
-                    user.phone = PhoneFormat.stripExceptNumbers(phone);
+
+        <LinearLayout
+            android:gravity="center_vertical"
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:paddingTop="12dp"
+            android:paddingBottom="12dp">
+
+            <org.telegram.ui.Views.BackupImageView
+                android:id="@+id/settings_avatar_image"
+                android:layout_width="64dp"
+                android:layout_height="64dp"/>
+
+            <LinearLayout
+                android:layout_gravity="center_vertical"
+                android:orientation="vertical"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="13dp"
+                android:layout_marginBottom="1dp">
+
+                <TextView
+                    android:textSize="21dp"
+                    android:textColor="#333333"
+                    android:ellipsize="end"
+                    android:id="@+id/settings_name"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:lines="1"
+                    android:singleLine="true"/>
+
+                <TextView
+                    android:textSize="14dp"
+                    android:textColor="#999999"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="4dp"
+                    android:id="@+id/settings_online"/>
+
+            </LinearLayout>
+
+        </LinearLayout>
+*/
+
+            fragmentView = new ScrollView(getParentActivity());
+
+            LinearLayout linearLayout = new LinearLayout(getParentActivity());
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+            ((ScrollView) fragmentView).addView(linearLayout);
+            ScrollView.LayoutParams layoutParams2 = (ScrollView.LayoutParams) linearLayout.getLayoutParams();
+            layoutParams2.width = ScrollView.LayoutParams.MATCH_PARENT;
+            layoutParams2.height = ScrollView.LayoutParams.WRAP_CONTENT;
+            linearLayout.setLayoutParams(layoutParams2);
+            linearLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
                 }
-            }
+            });
 
-            onlineText = (TextView)fragmentView.findViewById(R.id.settings_online);
-            avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            linearLayout.addView(frameLayout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            frameLayout.setLayoutParams(layoutParams);
+
+            avatarImage = new BackupImageView(getParentActivity());
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(30));
             avatarImage.processDetach = false;
-            phoneText = (TextView)fragmentView.findViewById(R.id.settings_name);
-            Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
-            phoneText.setTypeface(typeface);
+            frameLayout.addView(avatarImage);
+            FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
+            layoutParams3.width = AndroidUtilities.dp(60);
+            layoutParams3.height = AndroidUtilities.dp(60);
+            avatarImage.setLayoutParams(layoutParams3);
+
+            nameTextView = new TextView(getParentActivity());
+            nameTextView.setTextColor(0xff212121);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+            nameTextView.setLines(1);
+            nameTextView.setMaxLines(1);
+            nameTextView.setSingleLine(true);
+            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            frameLayout.addView(nameTextView);
+            layoutParams3 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams3.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams3.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams3.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 80);
+            layoutParams3.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 80 : 0);
+            layoutParams3.topMargin = AndroidUtilities.dp(3);
+            layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
+            nameTextView.setLayoutParams(layoutParams3);
 
-            firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
+            onlineTextView = new TextView(getParentActivity());
+            onlineTextView.setTextColor(0xff999999);
+            onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            onlineTextView.setLines(1);
+            onlineTextView.setMaxLines(1);
+            onlineTextView.setSingleLine(true);
+            onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            frameLayout.addView(onlineTextView);
+            layoutParams3 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams3.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams3.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams3.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 80);
+            layoutParams3.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 80 : 0);
+            layoutParams3.topMargin = AndroidUtilities.dp(32);
+            layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
+            onlineTextView.setLayoutParams(layoutParams3);
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            firstNameField.setHintTextColor(0xff979797);
+            firstNameField.setTextColor(0xff212121);
+            firstNameField.setMaxLines(1);
+            firstNameField.setLines(1);
+            firstNameField.setSingleLine(true);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
             firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            linearLayout.addView(firstNameField);
+            layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(24);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            firstNameField.setLayoutParams(layoutParams);
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -120,8 +258,27 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            lastNameField = (EditText)fragmentView.findViewById(R.id.last_name_field);
+
+            lastNameField = new EditText(inflater.getContext());
+            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            lastNameField.setHintTextColor(0xff979797);
+            lastNameField.setTextColor(0xff212121);
+            lastNameField.setMaxLines(1);
+            lastNameField.setLines(1);
+            lastNameField.setSingleLine(true);
+            lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
             lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+            AndroidUtilities.clearCursorDrawable(lastNameField);
+            linearLayout.addView(lastNameField);
+            layoutParams = (LinearLayout.LayoutParams) lastNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(16);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            lastNameField.setLayoutParams(layoutParams);
             lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -133,7 +290,13 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                 }
             });
 
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
             if (user != null) {
+                if (user.phone == null) {
+                    if (phone != null) {
+                        user.phone = PhoneFormat.stripExceptNumbers(phone);
+                    }
+                }
                 firstNameField.setText(user.first_name);
                 firstNameField.setSelection(firstNameField.length());
                 lastNameField.setText(user.last_name);
@@ -141,7 +304,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
             updateAvatarLayout();
         } else {
-            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            ViewGroup parent = (ViewGroup) fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -150,26 +313,26 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
     }
 
     private void updateAvatarLayout() {
-        if (phoneText == null) {
+        if (nameTextView == null) {
             return;
         }
         TLRPC.User user = MessagesController.getInstance().getUser(user_id);
         if (user == null) {
             return;
         }
-        phoneText.setText(PhoneFormat.getInstance().format("+" + user.phone));
-        onlineText.setText(LocaleController.formatUserStatus(user));
+        nameTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
+        onlineTextView.setText(LocaleController.formatUserStatus(user));
 
         TLRPC.FileLocation photo = null;
         if (user.photo != null) {
             photo = user.photo.photo_small;
         }
-        avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+        avatarImage.setImage(photo, "50_50", new AvatarDrawable(user));
     }
 
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
+            int mask = (Integer) args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                 updateAvatarLayout();
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 6097a7315..deba9e8fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -8,11 +8,9 @@
 
 package org.telegram.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -27,54 +25,50 @@
 import android.widget.AdapterView;
 import android.widget.EditText;
 import android.widget.FrameLayout;
+import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
 import org.telegram.android.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Adapters.ContactsActivityAdapter;
-import org.telegram.ui.Adapters.ContactsActivitySearchAdapter;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.PinnedHeaderListView;
-import org.telegram.ui.Views.SectionedBaseAdapter;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Adapters.ContactsAdapter;
+import org.telegram.ui.Adapters.ContactsSearchAdapter;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SectionsListView;
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Locale;
 
 public class ContactsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private SectionedBaseAdapter listViewAdapter;
-    private PinnedHeaderListView listView;
-    private ContactsActivitySearchAdapter searchListViewAdapter;
+
+    private BaseSectionsAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private SectionsListView listView;
+    private ContactsSearchAdapter searchListViewAdapter;
+
     private boolean searchWas;
     private boolean searching;
     private boolean onlyUsers;
-    private boolean usersAsSections;
+    private boolean needPhonebook;
     private boolean destroyAfterSelect;
     private boolean returnAsResult;
     private boolean createSecretChat;
     private boolean creatingChat = false;
     private String selectAlertString = null;
-    private TextView emptyTextView;
     private HashMap<Integer, TLRPC.User> ignoreUsers;
-
-    private String inviteText;
-    private boolean updatingInviteText = false;
     private boolean allowUsernameSearch = true;
     private ContactsActivityDelegate delegate;
 
@@ -96,19 +90,15 @@ public boolean onFragmentCreate() {
         if (arguments != null) {
             onlyUsers = getArguments().getBoolean("onlyUsers", false);
             destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
-            usersAsSections = arguments.getBoolean("usersAsSections", false);
             returnAsResult = arguments.getBoolean("returnAsResult", false);
             createSecretChat = arguments.getBoolean("createSecretChat", false);
             selectAlertString = arguments.getString("selectAlertString");
             allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
+        } else {
+            needPhonebook = true;
         }
 
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        inviteText = preferences.getString("invitetext", null);
-        int time = preferences.getInt("invitetexttime", 0);
-        if (inviteText == null || time + 86400 < (int)(System.currentTimeMillis() / 1000)) {
-            updateInviteText();
-        }
+        ContactsController.getInstance().checkInviteText();
 
         return true;
     }
@@ -125,15 +115,22 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            searching = false;
+            searchWas = false;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
             if (destroyAfterSelect) {
-                actionBarLayer.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
+                if (returnAsResult) {
+                    actionBar.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
+                } else {
+                    actionBar.setTitle(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
+                }
             } else {
-                actionBarLayer.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
+                actionBar.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
             }
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -142,7 +139,7 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
                 @Override
                 public void onSearchExpand() {
@@ -157,13 +154,11 @@ public void onSearchCollapse() {
                     ViewGroup group = (ViewGroup) listView.getParent();
                     listView.setAdapter(listViewAdapter);
                     listViewAdapter.notifyDataSetChanged();
-                    listView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 30 : 16), listView.getPaddingTop(), AndroidUtilities.dp(LocaleController.isRTL ? 16 : 30), listView.getPaddingBottom());
                     if (android.os.Build.VERSION.SDK_INT >= 11) {
                         listView.setFastScrollAlwaysVisible(true);
                     }
                     listView.setFastScrollEnabled(true);
                     listView.setVerticalScrollBarEnabled(false);
-
                     emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
                 }
 
@@ -176,7 +171,6 @@ public void onTextChanged(EditText editText) {
                     if (text.length() != 0) {
                         searchWas = true;
                         if (listView != null) {
-                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
                             listView.setAdapter(searchListViewAdapter);
                             searchListViewAdapter.notifyDataSetChanged();
                             if(android.os.Build.VERSION.SDK_INT >= 11) {
@@ -193,31 +187,65 @@ public void onTextChanged(EditText editText) {
                 }
             });
 
-            searching = false;
-            searchWas = false;
-
-            fragmentView = inflater.inflate(R.layout.contacts_layout, container, false);
-
-            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
-            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-            searchListViewAdapter = new ContactsActivitySearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
-
-            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
-            listView.setEmptyView(emptyTextView);
-            listView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 30 : 16), listView.getPaddingTop(), AndroidUtilities.dp(LocaleController.isRTL ? 16 : 30), listView.getPaddingBottom());
-            if (Build.VERSION.SDK_INT >= 11) {
-                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-            }
-            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+            searchListViewAdapter = new ContactsSearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
+            listViewAdapter = new ContactsAdapter(getParentActivity(), onlyUsers, needPhonebook, ignoreUsers);
+
+            fragmentView = new FrameLayout(getParentActivity());
+
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            ((FrameLayout) fragmentView).addView(emptyTextLayout);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            listView.setVerticalScrollBarEnabled(false);
 
-            listViewAdapter = new ContactsActivityAdapter(getParentActivity(), onlyUsers, usersAsSections, ignoreUsers);
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView);
+            LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams1);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout);
+            layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            frameLayout.setLayoutParams(layoutParams1);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
             listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            ((FrameLayout) fragmentView).addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
@@ -253,86 +281,84 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         if (row < 0 || section < 0) {
                             return;
                         }
-                        TLRPC.User user = null;
-                        if (usersAsSections) {
-                            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                                if (row < arr.size()) {
-                                    TLRPC.TL_contact contact = arr.get(row);
-                                    user = MessagesController.getInstance().getUser(contact.user_id);
-                                } else {
-                                    return;
-                                }
-                            }
-                        } else {
-                            if (section == 0) {
+                        if (!onlyUsers && section == 0) {
+                            if (needPhonebook) {
                                 if (row == 0) {
                                     try {
                                         Intent intent = new Intent(Intent.ACTION_SEND);
                                         intent.setType("text/plain");
-                                        intent.putExtra(Intent.EXTRA_TEXT, inviteText != null ? inviteText : LocaleController.getString("InviteText", R.string.InviteText));
+                                        intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
                                         getParentActivity().startActivity(intent);
                                     } catch (Exception e) {
                                         FileLog.e("tmessages", e);
                                     }
-                                    return;
-                                } else {
-                                    if (row - 1 < ContactsController.getInstance().contacts.size()) {
-                                        user = MessagesController.getInstance().getUser(ContactsController.getInstance().contacts.get(row - 1).user_id);
-                                    } else {
-                                        return;
-                                    }
                                 }
-                            }
-                        }
-
-                        if (user != null) {
-                            if (user.id == UserConfig.getClientUserId()) {
-                                return;
-                            }
-                            if (returnAsResult) {
-                                if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
-                                    return;
-                                }
-                                didSelectResult(user, true, null);
                             } else {
-                                if (createSecretChat) {
-                                    creatingChat = true;
-                                    MessagesController.getInstance().startSecretChat(getParentActivity(), user);
-                                } else {
+                                if (row == 0) {
+                                    presentFragment(new GroupCreateActivity(), true);
+                                } else if (row == 1) {
                                     Bundle args = new Bundle();
-                                    args.putInt("user_id", user.id);
-                                    presentFragment(new ChatActivity(args), true);
+                                    args.putBoolean("onlyUsers", true);
+                                    args.putBoolean("destroyAfterSelect", true);
+                                    args.putBoolean("createSecretChat", true);
+                                    presentFragment(new ContactsActivity(args), true);
+                                } else if (row == 2) {
+                                    Bundle args = new Bundle();
+                                    args.putBoolean("broadcast", true);
+                                    presentFragment(new GroupCreateActivity(args), true);
                                 }
                             }
                         } else {
-                            ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
-                            ContactsController.Contact contact = arr.get(row);
-                            String usePhone = null;
-                            if (!contact.phones.isEmpty()) {
-                                usePhone = contact.phones.get(0);
-                            }
-                            if (usePhone == null || getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            final String arg1 = usePhone;
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    try {
-                                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
-                                        intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
-                                        getParentActivity().startActivity(intent);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
+                            Object item = listViewAdapter.getItem(section, row);
+
+                            if (item instanceof TLRPC.User) {
+                                TLRPC.User user = (TLRPC.User) item;
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    return;
+                                }
+                                if (returnAsResult) {
+                                    if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                        return;
                                     }
+                                    didSelectResult(user, true, null);
+                                } else {
+                                    if (createSecretChat) {
+                                        creatingChat = true;
+                                        MessagesController.getInstance().startSecretChat(getParentActivity(), user);
+                                    } else {
+                                        Bundle args = new Bundle();
+                                        args.putInt("user_id", user.id);
+                                        presentFragment(new ChatActivity(args), true);
+                                    }
+                                }
+                            } else if (item instanceof ContactsController.Contact) {
+                                ContactsController.Contact contact = (ContactsController.Contact) item;
+                                String usePhone = null;
+                                if (!contact.phones.isEmpty()) {
+                                    usePhone = contact.phones.get(0);
                                 }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showAlertDialog(builder);
+                                if (usePhone == null || getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                final String arg1 = usePhone;
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        try {
+                                            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
+                                            intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
+                                            getParentActivity().startActivity(intent);
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                showAlertDialog(builder);
+                            }
                         }
                     }
                 }
@@ -348,6 +374,9 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
 
                 @Override
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
                 }
             });
         } else {
@@ -432,45 +461,13 @@ public void didReceivedNotification(int id, Object... args) {
         }
     }
 
-    private void updateInviteText() {
-        if (!updatingInviteText) {
-            updatingInviteText = true;
-            TLRPC.TL_help_getInviteText req = new TLRPC.TL_help_getInviteText();
-            req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
-            if (req.lang_code == null || req.lang_code.length() == 0) {
-                req.lang_code = "en";
-            }
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        final TLRPC.TL_help_inviteText res = (TLRPC.TL_help_inviteText)response;
-                        if (res.message.length() != 0) {
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    updatingInviteText = false;
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = preferences.edit();
-                                    editor.putString("invitetext", res.message);
-                                    editor.putInt("invitetexttime", (int) (System.currentTimeMillis() / 1000));
-                                    editor.commit();
-                                }
-                            });
-                        }
-                    }
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-        }
-    }
-
     private void updateVisibleRows(int mask) {
         if (listView != null) {
             int count = listView.getChildCount();
             for (int a = 0; a < count; a++) {
                 View child = listView.getChildAt(a);
-                if (child instanceof ChatOrUserCell) {
-                    ((ChatOrUserCell) child).update(mask);
+                if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 7430f2dae..66b77fa57 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -8,40 +8,31 @@
 
 package org.telegram.ui;
 
-import android.content.Context;
+import android.os.Build;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.BaseAdapter;
 import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.PinnedHeaderListView;
-import org.telegram.ui.Views.SectionedBaseAdapter;
-import org.telegram.ui.Views.SettingsSectionLayout;
-
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Timer;
-import java.util.TimerTask;
+import org.telegram.ui.Adapters.CountryAdapter;
+import org.telegram.ui.Adapters.CountryAdapter.Country;
+import org.telegram.ui.Adapters.CountrySearchAdapter;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.SectionsListView;
 
 public class CountrySelectActivity extends BaseFragment {
 
@@ -49,68 +40,18 @@
         public abstract void didSelectCountry(String name);
     }
 
-    private SectionedBaseAdapter listViewAdapter;
-    private PinnedHeaderListView listView;
-    private boolean searchWas;
-    private boolean searching;
-    private BaseAdapter searchListViewAdapter;
+    private SectionsListView listView;
     private TextView emptyTextView;
-    private HashMap<String, ArrayList<Country>> countries = new HashMap<String, ArrayList<Country>>();
-    private ArrayList<String> sortedCountries = new ArrayList<String>();
-    private CountrySelectActivityDelegate delegate;
+    private CountryAdapter listViewAdapter;
+    private CountrySearchAdapter searchListViewAdapter;
 
-    private Timer searchTimer;
-    public ArrayList<Country> searchResult;
+    private boolean searchWas;
+    private boolean searching;
 
-    public static class Country {
-        public String name;
-        public String code;
-        public String shortname;
-    }
+    private CountrySelectActivityDelegate delegate;
 
     @Override
     public boolean onFragmentCreate() {
-        try {
-            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
-            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String[] args = line.split(";");
-                Country c = new Country();
-                c.name = args[2];
-                c.code = args[0];
-                c.shortname = args[1];
-                String n = c.name.substring(0, 1).toUpperCase();
-                ArrayList<Country> arr = countries.get(n);
-                if (arr == null) {
-                    arr = new ArrayList<Country>();
-                    countries.put(n, arr);
-                    sortedCountries.add(n);
-                }
-                arr.add(c);
-            }
-            reader.close();
-            stream.close();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        Collections.sort(sortedCountries, new Comparator<String>() {
-            @Override
-            public int compare(String lhs, String rhs) {
-                return lhs.compareTo(rhs);
-            }
-        });
-
-        for (ArrayList<Country> arr : countries.values()) {
-            Collections.sort(arr, new Comparator<Country>() {
-                @Override
-                public int compare(Country country, Country country2) {
-                    return country.name.compareTo(country2.name);
-                }
-            });
-        }
-
         return super.onFragmentCreate();
     }
 
@@ -120,13 +61,13 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(LayoutInflater inflater, ViewGroup container) {
+    public View createView(LayoutInflater inflater, final ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -135,7 +76,7 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
                 @Override
                 public void onSearchExpand() {
@@ -144,16 +85,11 @@ public void onSearchExpand() {
 
                 @Override
                 public void onSearchCollapse() {
-                    search(null);
+                    searchListViewAdapter.search(null);
                     searching = false;
                     searchWas = false;
                     ViewGroup group = (ViewGroup) listView.getParent();
                     listView.setAdapter(listViewAdapter);
-                    if (!LocaleController.isRTL) {
-                        listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(30), listView.getPaddingBottom());
-                    } else {
-                        listView.setPadding(AndroidUtilities.dp(30), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
-                    }
                     if (android.os.Build.VERSION.SDK_INT >= 11) {
                         listView.setFastScrollAlwaysVisible(true);
                     }
@@ -166,11 +102,10 @@ public void onSearchCollapse() {
                 @Override
                 public void onTextChanged(EditText editText) {
                     String text = editText.getText().toString();
-                    search(text);
+                    searchListViewAdapter.search(text);
                     if (text.length() != 0) {
                         searchWas = true;
                         if (listView != null) {
-                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
                             listView.setAdapter(searchListViewAdapter);
                             if(android.os.Build.VERSION.SDK_INT >= 11) {
                                 listView.setFastScrollAlwaysVisible(false);
@@ -179,7 +114,7 @@ public void onTextChanged(EditText editText) {
                             listView.setVerticalScrollBarEnabled(true);
                         }
                         if (emptyTextView != null) {
-                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+
                         }
                     }
                 }
@@ -188,51 +123,86 @@ public void onTextChanged(EditText editText) {
             searching = false;
             searchWas = false;
 
-            fragmentView = inflater.inflate(R.layout.country_select_layout, container, false);
-
-            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
-            searchListViewAdapter = new SearchAdapter(getParentActivity());
-
-            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
-            listView.setEmptyView(emptyTextView);
-            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+            listViewAdapter = new CountryAdapter(getParentActivity());
+            searchListViewAdapter = new CountrySearchAdapter(getParentActivity(), listViewAdapter.getCountries());
+
+            fragmentView = new FrameLayout(getParentActivity());
+
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            ((FrameLayout) fragmentView).addView(emptyTextLayout);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+            emptyTextLayout.addView(emptyTextView);
+            LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams1);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout);
+            layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            frameLayout.setLayoutParams(layoutParams1);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
             listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            ((FrameLayout) fragmentView).addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
 
-            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i < 0) {
-                        return;
-                    }
+                    Country country = null;
                     if (searching && searchWas) {
-                        if (i >= 0 && i < searchResult.size()) {
-                            Country c = searchResult.get(i);
-                            if (delegate != null) {
-                                delegate.didSelectCountry(c.name);
-                            }
-                            finishFragment();
-                        }
+                        country = searchListViewAdapter.getItem(i);
                     } else {
                         int section = listViewAdapter.getSectionForPosition(i);
                         int row = listViewAdapter.getPositionInSectionForPosition(i);
-                        if (section >= 0 && section < sortedCountries.size()) {
-                            String n = sortedCountries.get(section);
-                            ArrayList<Country> arr = countries.get(n);
-                            if (row >= 0 && row < arr.size()) {
-                                Country c = arr.get(row);
-                                if (delegate != null) {
-                                    delegate.didSelectCountry(c.name);
-                                }
-                                finishFragment();
-                            }
+                        if (row < 0 || section < 0) {
+                            return;
                         }
+                        country = listViewAdapter.getItem(section, row);
+                    }
+                    if (i < 0) {
+                        return;
+                    }
+                    if (country != null && delegate != null) {
+                        delegate.didSelectCountry(country.name);
                     }
+                    finishFragment();
                 }
             });
 
@@ -246,6 +216,9 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
 
                 @Override
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
                 }
             });
         } else {
@@ -265,234 +238,7 @@ public void onResume() {
         }
     }
 
-    public void search(final String query) {
-        if (query == null) {
-            searchResult = null;
-        } else {
-            try {
-                if (searchTimer != null) {
-                    searchTimer.cancel();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processSearch(query);
-                }
-            }, 100, 300);
-        }
-    }
-
-    private void processSearch(final String query) {
-        Utilities.searchQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-
-                String q = query.trim().toLowerCase();
-                if (q.length() == 0) {
-                    updateSearchResults(new ArrayList<Country>());
-                    return;
-                }
-                long time = System.currentTimeMillis();
-                ArrayList<Country> resultArray = new ArrayList<Country>();
-
-                String n = query.substring(0, 1);
-                ArrayList<Country> arr = countries.get(n.toUpperCase());
-                if (arr != null) {
-                    for (Country c : arr) {
-                        if (c.name.toLowerCase().startsWith(query)) {
-                            resultArray.add(c);
-                        }
-                    }
-                }
-
-                updateSearchResults(resultArray);
-            }
-        });
-    }
-
     public void setCountrySelectActivityDelegate(CountrySelectActivityDelegate delegate) {
         this.delegate = delegate;
     }
-
-    private void updateSearchResults(final ArrayList<Country> arrCounties) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                searchResult = arrCounties;
-                searchListViewAdapter.notifyDataSetChanged();
-            }
-        });
-    }
-
-    private class SearchAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public SearchAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return true;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return true;
-        }
-
-        @Override
-        public int getCount() {
-            if (searchResult == null) {
-                return 0;
-            }
-            return searchResult.size();
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.country_row_layout, viewGroup, false);
-            }
-            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-            TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-            View divider = view.findViewById(R.id.settings_row_divider);
-
-            Country c = searchResult.get(i);
-            textView.setText(c.name);
-            detailTextView.setText("+" + c.code);
-            if (i == searchResult.size() - 1) {
-                divider.setVisibility(View.GONE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
-
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return searchResult == null || searchResult.size() == 0;
-        }
-    }
-
-    private class ListAdapter extends SectionedBaseAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public Object getItem(int section, int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int section, int position) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionCount() {
-            return sortedCountries.size();
-        }
-
-        @Override
-        public int getCountForSection(int section) {
-            String n = sortedCountries.get(section);
-            ArrayList<Country> arr = countries.get(n);
-            return arr.size();
-        }
-
-        @Override
-        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                convertView = li.inflate(R.layout.country_row_layout, parent, false);
-            }
-            TextView textView = (TextView)convertView.findViewById(R.id.settings_row_text);
-            TextView detailTextView = (TextView)convertView.findViewById(R.id.settings_row_text_detail);
-            View divider = convertView.findViewById(R.id.settings_row_divider);
-
-            String n = sortedCountries.get(section);
-            ArrayList<Country> arr = countries.get(n);
-            Country c = arr.get(position);
-            textView.setText(c.name);
-            detailTextView.setText("+" + c.code);
-            if (position == arr.size() - 1) {
-                divider.setVisibility(View.GONE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
-
-            return convertView;
-        }
-
-        @Override
-        public int getItemViewType(int section, int position) {
-            return 0;
-        }
-
-        @Override
-        public int getItemViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public int getSectionHeaderViewType(int section) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionHeaderViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                convertView = new SettingsSectionLayout(mContext);
-                convertView.setBackgroundColor(0xfffafafa);
-            }
-            ((SettingsSectionLayout) convertView).setText(sortedCountries.get(section).toUpperCase());
-            return convertView;
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 293fc3a45..d56a7be61 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -24,16 +24,17 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Cells.TextDetailDocumentsCell;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -130,10 +131,10 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
         }
 
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("SelectFile", R.string.SelectFile));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("SelectFile", R.string.SelectFile));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -146,7 +147,7 @@ public void onItemClick(int id) {
                     }
                 }
             });
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             ActionBarMenuItem item = menu.addItem(1, R.drawable.ic_ab_other);
 
             fragmentView = inflater.inflate(R.layout.document_select_layout, container, false);
@@ -168,7 +169,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     File file = item.file;
                     if (file == null) {
                         HistoryEntry he = history.remove(history.size() - 1);
-                        actionBarLayer.setTitle(he.title);
+                        actionBar.setTitle(he.title);
                         if (he.dir != null) {
                             listFiles(he.dir);
                         } else {
@@ -180,12 +181,12 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         he.scrollItem = listView.getFirstVisiblePosition();
                         he.scrollOffset = listView.getChildAt(0).getTop();
                         he.dir = currentDir;
-                        he.title = actionBarLayer.getTitle().toString();
+                        he.title = actionBar.getTitle().toString();
                         if (!listFiles(file)) {
                             return;
                         }
                         history.add(he);
-                        actionBarLayer.setTitle(item.title);
+                        actionBar.setTitle(item.title);
                         listView.setSelection(0);
                     } else {
                         if (!file.canRead()) {
@@ -230,7 +231,7 @@ public void onResume() {
     public boolean onBackPressed() {
         if (history.size() > 0) {
             HistoryEntry he = history.remove(history.size() - 1);
-            actionBarLayer.setTitle(he.title);
+            actionBar.setTitle(he.title);
             if (he.dir != null) {
                 listFiles(he.dir);
             } else {
@@ -261,6 +262,7 @@ private boolean listFiles(File dir) {
                     } else {
                         emptyView.setText(LocaleController.getString("NotMounted", R.string.NotMounted));
                     }
+                    AndroidUtilities.clearDrawableAnimation(listView);
                     listAdapter.notifyDataSetChanged();
                     return true;
                 }
@@ -309,6 +311,7 @@ public int compare(File lhs, File rhs) {
             item.file = file;
             if (file.isDirectory()) {
                 item.icon = R.drawable.ic_directory;
+                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
             } else {
                 String fname = file.getName();
                 String[] sp = fname.split("\\.");
@@ -323,10 +326,11 @@ public int compare(File lhs, File rhs) {
         }
         ListItem item = new ListItem();
         item.title = "..";
-        item.subtitle = "";
+        item.subtitle = LocaleController.getString("Folder", R.string.Folder);
         item.icon = R.drawable.ic_directory;
         item.file = null;
         items.add(0, item);
+        AndroidUtilities.clearDrawableAnimation(listView);
         listAdapter.notifyDataSetChanged();
         return true;
     }
@@ -335,11 +339,7 @@ private void showErrorBox(String error) {
         if (getParentActivity() == null) {
             return;
         }
-        new AlertDialog.Builder(getParentActivity())
-                .setTitle(LocaleController.getString("AppName", R.string.AppName))
-                .setMessage(error)
-                .setPositiveButton(R.string.OK, null)
-                .show();
+        new AlertDialog.Builder(getParentActivity()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(R.string.OK, null).show();
     }
 
     private void listRoots() {
@@ -420,6 +420,7 @@ private void listRoots() {
             FileLog.e("tmessages", e);
         }
 
+        AndroidUtilities.clearDrawableAnimation(listView);
         listAdapter.notifyDataSetChanged();
     }
 
@@ -465,35 +466,18 @@ public int getItemViewType(int pos) {
 
         @Override
         public View getView(int position, View convertView, ViewGroup parent) {
-            View v = convertView;
-            ListItem item = items.get(position);
-            if (v == null) {
-                v = View.inflate(mContext, R.layout.document_item, null);
-                if (item.subtitle.length() == 0) {
-                    v.findViewById(R.id.docs_item_info).setVisibility(View.GONE);
-                }
+            if (convertView == null) {
+                convertView = new TextDetailDocumentsCell(mContext);
             }
-            TextView typeTextView = (TextView)v.findViewById(R.id.docs_item_type);
-            ((TextView)v.findViewById(R.id.docs_item_title)).setText(item.title);
-
-            ((TextView)v.findViewById(R.id.docs_item_info)).setText(item.subtitle);
-            BackupImageView imageView = (BackupImageView)v.findViewById(R.id.docs_item_thumb);
-            if (item.thumb != null) {
-                imageView.setImageBitmap(null);
-                typeTextView.setText(item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4)));
-                imageView.setImage(item.thumb, "55_42", 0);
-                imageView.setVisibility(View.VISIBLE);
-                typeTextView.setVisibility(View.VISIBLE);
-            } else if (item.icon != 0) {
-                imageView.setImageResource(item.icon);
-                imageView.setVisibility(View.VISIBLE);
-                typeTextView.setVisibility(View.GONE);
+            TextDetailDocumentsCell textDetailCell = (TextDetailDocumentsCell) convertView;
+            ListItem item = items.get(position);
+            if (item.icon != 0) {
+                ((TextDetailDocumentsCell) convertView).setTextAndValueAndTypeAndThumb(item.title, item.subtitle, null, null, item.icon);
             } else {
-                typeTextView.setText(item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4)));
-                imageView.setVisibility(View.GONE);
-                typeTextView.setVisibility(View.VISIBLE);
+                String type = item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4));
+                ((TextDetailDocumentsCell) convertView).setTextAndValueAndTypeAndThumb(item.title, item.subtitle, type, item.thumb, 0);
             }
-            return v;
+            return convertView;
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index a8eccbdb4..c03c0af83 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -9,7 +9,6 @@
 package org.telegram.ui;
 
 import android.app.Activity;
-import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
@@ -18,49 +17,54 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.text.Editable;
+import android.text.InputType;
 import android.text.Spannable;
 import android.text.SpannableString;
 import android.text.SpannableStringBuilder;
 import android.text.TextWatcher;
 import android.text.style.ImageSpan;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.EditText;
-import android.widget.ImageView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
 import org.telegram.android.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.PinnedHeaderListView;
-import org.telegram.ui.Views.SectionedBaseAdapter;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.Adapters.ContactsAdapter;
+import org.telegram.ui.Adapters.ContactsSearchAdapter;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Views.SectionsListView;
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Timer;
-import java.util.TimerTask;
 
 public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    public static class XImageSpan extends ImageSpan {
+    public static interface GroupCreateActivityDelegate {
+        public abstract void didSelectUsers(ArrayList<Integer> ids);
+    }
+
+    private class XImageSpan extends ImageSpan {
         public int uid;
 
         public XImageSpan(Drawable d, int verticalAlignment) {
@@ -74,7 +78,6 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
             }
 
             int sz = super.getSize(paint, text, start, end, fm);
-
             int offset = AndroidUtilities.dp(6);
             int w = (fm.bottom - fm.top) / 2;
             fm.top = -w - offset;
@@ -82,30 +85,29 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
             fm.ascent = -w - offset;
             fm.leading = 0;
             fm.descent = w - offset;
-
             return sz;
         }
     }
 
-    private SectionedBaseAdapter listViewAdapter;
-    private PinnedHeaderListView listView;
+    private ContactsAdapter listViewAdapter;
     private TextView emptyTextView;
     private EditText userSelectEditText;
-    private boolean ignoreChange = false;
-    private boolean isBroadcast = false;
-    private int maxCount = 200;
+    private SectionsListView listView;
+    private ContactsSearchAdapter searchListViewAdapter;
 
-    private HashMap<Integer, XImageSpan> selectedContacts =  new HashMap<Integer, XImageSpan>();
-    private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
+    private GroupCreateActivityDelegate delegate;
 
+    private int beforeChangeIndex;
+    private int maxCount = 200;
+    private boolean ignoreChange = false;
+    private boolean isBroadcast = false;
+    private boolean isAlwaysShare = false;
+    private boolean isNeverShare = false;
     private boolean searchWas;
     private boolean searching;
-    private Timer searchTimer;
-    public ArrayList<TLRPC.User> searchResult;
-    public ArrayList<CharSequence> searchResultNames;
-
     private CharSequence changeString;
-    private int beforeChangeIndex;
+    private HashMap<Integer, XImageSpan> selectedContacts = new HashMap<Integer, XImageSpan>();
+    private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
 
     private final static int done_button = 1;
 
@@ -116,6 +118,8 @@ public GroupCreateActivity() {
     public GroupCreateActivity(Bundle args) {
         super(args);
         isBroadcast = args.getBoolean("broadcast", false);
+        isAlwaysShare = args.getBoolean("isAlwaysShare", false);
+        isNeverShare = args.getBoolean("isNeverShare", false);
         maxCount = !isBroadcast ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
     }
 
@@ -138,24 +142,37 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            if (isBroadcast) {
-                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            searching = false;
+            searchWas = false;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (isAlwaysShare) {
+                actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
+            } else if (isNeverShare) {
+                actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
             } else {
-                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+                actionBar.setTitle(isBroadcast ? LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList) : LocaleController.getString("NewGroup", R.string.NewGroup));
+                actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
             }
-            actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
                     } else if (id == done_button) {
-                        if (!selectedContacts.isEmpty()) {
-                            ArrayList<Integer> result = new ArrayList<Integer>();
-                            result.addAll(selectedContacts.keySet());
+                        if (selectedContacts.isEmpty()) {
+                            return;
+                        }
+                        ArrayList<Integer> result = new ArrayList<Integer>();
+                        result.addAll(selectedContacts.keySet());
+                        if (isAlwaysShare || isNeverShare) {
+                            if (delegate != null) {
+                                delegate.didSelectUsers(result);
+                            }
+                            finishFragment();
+                        } else {
                             Bundle args = new Bundle();
                             args.putIntegerArrayList("result", result);
                             args.putBoolean("broadcast", isBroadcast);
@@ -164,27 +181,58 @@ public void onItemClick(int id) {
                     }
                 }
             });
-
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
-            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
-            doneTextView.setText(LocaleController.getString("Next", R.string.Next));
-
-            searching = false;
-            searchWas = false;
-
-            fragmentView = inflater.inflate(R.layout.group_create_layout, container, false);
-
-            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
-            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
-                @Override
-                public boolean onTouch(View v, MotionEvent event) {
-                    return true;
-                }
-            });
-            userSelectEditText = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
-            userSelectEditText.setHint(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            searchListViewAdapter = new ContactsSearchAdapter(getParentActivity(), null, false);
+            searchListViewAdapter.setCheckedMap(selectedContacts);
+            searchListViewAdapter.setUseUserCell(true);
+            listViewAdapter = new ContactsAdapter(getParentActivity(), true, false, null);
+            listViewAdapter.setCheckedMap(selectedContacts);
+
+            fragmentView = new LinearLayout(getParentActivity());
+            LinearLayout linearLayout = (LinearLayout) fragmentView;
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            linearLayout.addView(frameLayout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP;
+            frameLayout.setLayoutParams(layoutParams);
+
+            userSelectEditText = new EditText(getParentActivity());
+            userSelectEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            userSelectEditText.setHintTextColor(0xff979797);
+            userSelectEditText.setTextColor(0xff212121);
+            userSelectEditText.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+            userSelectEditText.setMinimumHeight(AndroidUtilities.dp(54));
+            userSelectEditText.setSingleLine(false);
+            userSelectEditText.setLines(2);
+            userSelectEditText.setMaxLines(2);
+            userSelectEditText.setVerticalScrollBarEnabled(true);
+            userSelectEditText.setHorizontalScrollBarEnabled(false);
+            userSelectEditText.setPadding(0, 0, 0, 0);
+            userSelectEditText.setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            userSelectEditText.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+            AndroidUtilities.clearCursorDrawable(userSelectEditText);
+            frameLayout.addView(userSelectEditText);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) userSelectEditText.getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.leftMargin = AndroidUtilities.dp(10);
+            layoutParams1.rightMargin = AndroidUtilities.dp(10);
+            layoutParams1.gravity = Gravity.TOP;
+            userSelectEditText.setLayoutParams(layoutParams1);
+
+            if (isAlwaysShare) {
+                userSelectEditText.setHint(LocaleController.getString("AlwaysShareWithPlaceholder", R.string.AlwaysShareWithPlaceholder));
+            } else if (isNeverShare) {
+                userSelectEditText.setHint(LocaleController.getString("NeverShareWithPlaceholder", R.string.NeverShareWithPlaceholder));
+            } else {
+                userSelectEditText.setHint(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
+            }
             if (Build.VERSION.SDK_INT >= 11) {
                 userSelectEditText.setTextIsSelectable(false);
             }
@@ -226,7 +274,9 @@ public void afterTextChanged(Editable editable) {
                                         selectedContacts.remove(sp.uid);
                                     }
                                 }
-                                actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                                if (!isAlwaysShare && !isNeverShare) {
+                                    actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                                }
                                 listView.invalidateViews();
                             } else {
                                 search = true;
@@ -237,52 +287,124 @@ public void afterTextChanged(Editable editable) {
                         if (search) {
                             String text = userSelectEditText.getText().toString().replace("<", "");
                             if (text.length() != 0) {
-                                searchDialogs(text);
                                 searching = true;
                                 searchWas = true;
-                                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-                                listViewAdapter.notifyDataSetChanged();
+                                if (listView != null) {
+                                    listView.setAdapter(searchListViewAdapter);
+                                    searchListViewAdapter.notifyDataSetChanged();
+                                    if(android.os.Build.VERSION.SDK_INT >= 11) {
+                                        listView.setFastScrollAlwaysVisible(false);
+                                    }
+                                    listView.setFastScrollEnabled(false);
+                                    listView.setVerticalScrollBarEnabled(true);
+                                }
+                                if (emptyTextView != null) {
+                                    emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                                }
+                                searchListViewAdapter.searchDialogs(text);
                             } else {
-                                searchResult = null;
-                                searchResultNames = null;
+                                searchListViewAdapter.searchDialogs(null);
                                 searching = false;
                                 searchWas = false;
-                                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                                ViewGroup group = (ViewGroup) listView.getParent();
+                                listView.setAdapter(listViewAdapter);
                                 listViewAdapter.notifyDataSetChanged();
+                                if (android.os.Build.VERSION.SDK_INT >= 11) {
+                                    listView.setFastScrollAlwaysVisible(true);
+                                }
+                                listView.setFastScrollEnabled(true);
+                                listView.setVerticalScrollBarEnabled(false);
+                                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
                             }
                         }
                     }
                 }
             });
 
-            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
-            listView.setEmptyView(emptyTextView);
-            listView.setVerticalScrollBarEnabled(false);
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            linearLayout.addView(emptyTextLayout);
+            layoutParams = (LinearLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
 
-            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView);
+            layoutParams = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams);
+
+            FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout2);
+            layoutParams = (LinearLayout.LayoutParams) frameLayout2.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.weight = 0.5f;
+            frameLayout2.setLayoutParams(layoutParams);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            linearLayout.addView(listView);
+            layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    TLRPC.User user;
-                    int section = listViewAdapter.getSectionForPosition(i);
-                    int row = listViewAdapter.getPositionInSectionForPosition(i);
+                    TLRPC.User user = null;
                     if (searching && searchWas) {
-                        user = searchResult.get(row);
+                        user = searchListViewAdapter.getItem(i);
                     } else {
-                        ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                        user = MessagesController.getInstance().getUser(arr.get(row).user_id);
-                        listView.invalidateViews();
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        user = (TLRPC.User) listViewAdapter.getItem(section, row);
                     }
+                    if (user == null) {
+                        return;
+                    }
+
                     if (selectedContacts.containsKey(user.id)) {
-                        XImageSpan span = selectedContacts.get(user.id);
-                        selectedContacts.remove(user.id);
-                        SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
-                        text.delete(text.getSpanStart(span), text.getSpanEnd(span));
-                        allSpans.remove(span);
-                        ignoreChange = true;
-                        userSelectEditText.setText(text);
-                        userSelectEditText.setSelection(text.length());
-                        ignoreChange = false;
+                        try {
+                            XImageSpan span = selectedContacts.get(user.id);
+                            selectedContacts.remove(user.id);
+                            SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
+                            text.delete(text.getSpanStart(span), text.getSpanEnd(span));
+                            allSpans.remove(span);
+                            ignoreChange = true;
+                            userSelectEditText.setText(text);
+                            userSelectEditText.setSelection(text.length());
+                            ignoreChange = false;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
                     } else {
                         if (selectedContacts.size() == maxCount) {
                             return;
@@ -292,12 +414,10 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         span.uid = user.id;
                         ignoreChange = false;
                     }
-                    actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                    if (!isAlwaysShare && !isNeverShare) {
+                        actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                    }
                     if (searching || searchWas) {
-                        searching = false;
-                        searchWas = false;
-                        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-
                         ignoreChange = true;
                         SpannableStringBuilder ssb = new SpannableStringBuilder("");
                         for (ImageSpan sp : allSpans) {
@@ -308,13 +428,23 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         userSelectEditText.setSelection(ssb.length());
                         ignoreChange = false;
 
+                        searchListViewAdapter.searchDialogs(null);
+                        searching = false;
+                        searchWas = false;
+                        ViewGroup group = (ViewGroup) listView.getParent();
+                        listView.setAdapter(listViewAdapter);
                         listViewAdapter.notifyDataSetChanged();
+                        if (android.os.Build.VERSION.SDK_INT >= 11) {
+                            listView.setFastScrollAlwaysVisible(true);
+                        }
+                        listView.setFastScrollEnabled(true);
+                        listView.setVerticalScrollBarEnabled(false);
+                        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
                     } else {
                         listView.invalidateViews();
                     }
                 }
             });
-
             listView.setOnScrollListener(new AbsListView.OnScrollListener() {
                 @Override
                 public void onScrollStateChanged(AbsListView absListView, int i) {
@@ -325,6 +455,9 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
 
                 @Override
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
                 }
             });
         } else {
@@ -336,7 +469,44 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
         return fragmentView;
     }
 
-    public XImageSpan createAndPutChipForUser(TLRPC.User user) {
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatDidCreated) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    removeSelfFromStack();
+                }
+            });
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView != null) {
+            int count = listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = listView.getChildAt(a);
+                if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
+                }
+            }
+        }
+    }
+
+    public void setDelegate(GroupCreateActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private XImageSpan createAndPutChipForUser(TLRPC.User user) {
         LayoutInflater lf = (LayoutInflater)ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
         View textView = lf.inflate(R.layout.group_create_bubble, null);
         TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
@@ -373,252 +543,4 @@ public XImageSpan createAndPutChipForUser(TLRPC.User user) {
         userSelectEditText.setSelection(ssb.length());
         return span;
     }
-
-    public void searchDialogs(final String query) {
-        if (query == null) {
-            searchResult = null;
-            searchResultNames = null;
-        } else {
-            try {
-                if (searchTimer != null) {
-                    searchTimer.cancel();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processSearch(query);
-                }
-            }, 100, 300);
-        }
-    }
-
-    private void processSearch(final String query) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
-                contactsCopy.addAll(ContactsController.getInstance().contacts);
-                Utilities.searchQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (query.length() == 0) {
-                            updateSearchResults(new ArrayList<TLRPC.User>(), new ArrayList<CharSequence>());
-                            return;
-                        }
-                        long time = System.currentTimeMillis();
-                        ArrayList<TLRPC.User> resultArray = new ArrayList<TLRPC.User>();
-                        ArrayList<CharSequence> resultArrayNames = new ArrayList<CharSequence>();
-                        String q = query.toLowerCase();
-
-                        for (TLRPC.TL_contact contact : contactsCopy) {
-                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
-                            if (user.first_name.toLowerCase().startsWith(q) || user.last_name.toLowerCase().startsWith(q)) {
-                                if (user.id == UserConfig.getClientUserId()) {
-                                    continue;
-                                }
-                                resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
-                                resultArray.add(user);
-                            }
-                        }
-
-                        updateSearchResults(resultArray, resultArrayNames);
-                    }
-                });
-            }
-        });
-    }
-
-    private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                searchResult = users;
-                searchResultNames = names;
-                listViewAdapter.notifyDataSetChanged();
-            }
-        });
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.contactsDidLoaded) {
-            if (listViewAdapter != null) {
-                listViewAdapter.notifyDataSetChanged();
-            }
-        } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                if (listView != null) {
-                    listView.invalidateViews();
-                }
-            }
-        } else if (id == NotificationCenter.chatDidCreated) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    removeSelfFromStack();
-                }
-            });
-        }
-    }
-
-    private class ListAdapter extends SectionedBaseAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public Object getItem(int section, int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int section, int position) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionCount() {
-            if (searching && searchWas) {
-                return searchResult == null || searchResult.isEmpty() ? 0 : 1;
-            }
-            return ContactsController.getInstance().sortedUsersSectionsArray.size();
-        }
-
-        @Override
-        public int getCountForSection(int section) {
-            if (searching && searchWas) {
-                return searchResult == null ? 0 : searchResult.size();
-            }
-            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-            return arr.size();
-        }
-
-        @Override
-        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-            TLRPC.User user;
-            int size;
-
-            if (searchWas && searching) {
-                user = MessagesController.getInstance().getUser(searchResult.get(position).id);
-                size = searchResult.size();
-            } else {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                user = MessagesController.getInstance().getUser(arr.get(position).user_id);
-                size = arr.size();
-            }
-
-            if (convertView == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                convertView = li.inflate(R.layout.group_create_row_layout, parent, false);
-            }
-            ContactListRowHolder holder = (ContactListRowHolder)convertView.getTag();
-            if (holder == null) {
-                holder = new ContactListRowHolder(convertView);
-                convertView.setTag(holder);
-            }
-
-            ImageView checkButton = (ImageView)convertView.findViewById(R.id.settings_row_check_button);
-            if (selectedContacts.containsKey(user.id)) {
-                checkButton.setImageResource(R.drawable.btn_check_on_holo_light);
-            } else {
-                checkButton.setImageResource(R.drawable.btn_check_off_holo_light);
-            }
-
-            View divider = convertView.findViewById(R.id.settings_row_divider);
-            if (position == size - 1) {
-                divider.setVisibility(View.INVISIBLE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
-
-            if (searchWas && searching) {
-                holder.nameTextView.setText(searchResultNames.get(position));
-            } else {
-                String name = ContactsController.formatName(user.first_name, user.last_name);
-                if (name.length() == 0) {
-                    if (user.phone != null && user.phone.length() != 0) {
-                        name = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        name = LocaleController.getString("HiddenName", R.string.HiddenName);
-                    }
-                }
-                holder.nameTextView.setText(name);
-            }
-
-            TLRPC.FileLocation photo = null;
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-            }
-            int placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
-            holder.avatarImage.setImage(photo, "50_50", placeHolderId);
-
-            holder.messageTextView.setText(LocaleController.formatUserStatus(user));
-            if (user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
-                holder.messageTextView.setTextColor(0xff357aa8);
-            } else {
-                holder.messageTextView.setTextColor(0xff808080);
-            }
-
-            return convertView;
-        }
-
-        @Override
-        public int getItemViewType(int section, int position) {
-            return 0;
-        }
-
-        @Override
-        public int getItemViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public int getSectionHeaderViewType(int section) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionHeaderViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                convertView = new SettingsSectionLayout(mContext);
-                convertView.setBackgroundColor(0xffffffff);
-            }
-            if (searching && searchWas) {
-                ((SettingsSectionLayout) convertView).setText(LocaleController.getString("AllContacts", R.string.AllContacts));
-            } else {
-                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-            }
-            return convertView;
-        }
-    }
-
-    public static class ContactListRowHolder {
-        public BackupImageView avatarImage;
-        public TextView messageTextView;
-        public TextView nameTextView;
-
-        public ContactListRowHolder(View view) {
-            messageTextView = (TextView)view.findViewById(R.id.messages_list_row_message);
-            nameTextView = (TextView)view.findViewById(R.id.messages_list_row_name);
-            avatarImage = (BackupImageView)view.findViewById(R.id.messages_list_row_avatar);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index 82d19e28e..b558745ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -14,12 +14,19 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.TextView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.ConnectionsManager;
@@ -30,26 +37,30 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.ui.Cells.ChatOrUserCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.PinnedHeaderListView;
-import org.telegram.ui.Views.SectionedBaseAdapter;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.FrameLayoutFixed;
 
 import java.util.ArrayList;
 import java.util.concurrent.Semaphore;
 
 public class GroupCreateFinalActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
-    private PinnedHeaderListView listView;
+
+    private ListAdapter listAdapter;
+    private ListView listView;
     private EditText nameTextView;
     private TLRPC.FileLocation avatar;
     private TLRPC.InputFile uploadedAvatar;
     private ArrayList<Integer> selectedContacts;
     private BackupImageView avatarImage;
+    private AvatarDrawable avatarDrawable;
     private boolean createAfterUpload;
     private boolean donePressed;
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
@@ -62,6 +73,7 @@
     public GroupCreateFinalActivity(Bundle args) {
         super(args);
         isBroadcast = args.getBoolean("broadcast", false);
+        avatarDrawable = new AvatarDrawable();
     }
 
     @SuppressWarnings("unchecked")
@@ -117,18 +129,26 @@ public void onFragmentDestroy() {
         avatarUpdater.clear();
     }
 
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
             if (isBroadcast) {
-                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+                actionBar.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
             } else {
-                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+                actionBar.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
             }
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -174,19 +194,38 @@ public void onClick(DialogInterface dialog, int which) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
-
-            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
-            doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
-
-            fragmentView = inflater.inflate(R.layout.group_create_final_layout, container, false);
-
-            final ImageButton button2 = (ImageButton)fragmentView.findViewById(R.id.settings_change_avatar_button);
-            if (isBroadcast) {
-                button2.setVisibility(View.GONE);
-            } else {
-                button2.setOnClickListener(new View.OnClickListener() {
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            fragmentView = new LinearLayout(getParentActivity());
+            LinearLayout linearLayout = (LinearLayout) fragmentView;
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+            FrameLayout frameLayout = new FrameLayoutFixed(getParentActivity());
+            linearLayout.addView(frameLayout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            frameLayout.setLayoutParams(layoutParams);
+
+            avatarImage = new BackupImageView(getParentActivity());
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
+            avatarDrawable.setInfo(5, null, null, isBroadcast);
+            avatarImage.setImageDrawable(avatarDrawable);
+            frameLayout.addView(avatarImage);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams1.width = AndroidUtilities.dp(64);
+            layoutParams1.height = AndroidUtilities.dp(64);
+            layoutParams1.topMargin = AndroidUtilities.dp(12);
+            layoutParams1.bottomMargin = AndroidUtilities.dp(12);
+            layoutParams1.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(16);
+            layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(16) : 0;
+            layoutParams1.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            avatarImage.setLayoutParams(layoutParams1);
+            if (!isBroadcast) {
+                avatarDrawable.setDrawPhoto(true);
+                avatarImage.setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View view) {
                         if (getParentActivity() == null) {
@@ -212,7 +251,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                 } else if (i == 2) {
                                     avatar = null;
                                     uploadedAvatar = null;
-                                    avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                                    avatarImage.setImage(avatar, "50_50", avatarDrawable);
                                 }
                             }
                         });
@@ -221,21 +260,63 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 });
             }
 
-            avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
-            avatarImage.setImageResource(R.drawable.group_blue);
-
-            nameTextView = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
-            if (isBroadcast) {
-                nameTextView.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
-            } else {
-                nameTextView.setHint(LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
-            }
+            nameTextView = new EditText(getParentActivity());
+            nameTextView.setHint(isBroadcast ? LocaleController.getString("EnterListName", R.string.EnterListName) : LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
             if (nameToSet != null) {
                 nameTextView.setText(nameToSet);
                 nameToSet = null;
             }
-            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(new ListAdapter(getParentActivity()));
+            nameTextView.setMaxLines(4);
+            nameTextView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            nameTextView.setHintTextColor(0xff979797);
+            nameTextView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            nameTextView.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
+            nameTextView.setPadding(0, 0, 0, AndroidUtilities.dp(8));
+            AndroidUtilities.clearCursorDrawable(nameTextView);
+            nameTextView.setTextColor(0xff212121);
+            frameLayout.addView(nameTextView);
+            layoutParams1 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height =  FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(96);
+            layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(96) : AndroidUtilities.dp(16);
+            layoutParams1.gravity = Gravity.CENTER_VERTICAL;
+            nameTextView.setLayoutParams(layoutParams1);
+            if (!isBroadcast) {
+                nameTextView.addTextChangedListener(new TextWatcher() {
+                    @Override
+                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+                    }
+
+                    @Override
+                    public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+                    }
+
+                    @Override
+                    public void afterTextChanged(Editable s) {
+                        avatarDrawable.setInfo(5, nameTextView.length() > 0 ? nameTextView.getText().toString() : null, null, isBroadcast);
+                        avatarImage.invalidate();
+                    }
+                });
+            }
+
+            GreySectionCell sectionCell = new GreySectionCell(getParentActivity());
+            sectionCell.setText(LocaleController.formatPluralString("Members", selectedContacts.size()));
+            linearLayout.addView(sectionCell);
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
+            linearLayout.addView(listView);
+            layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -247,12 +328,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
     @Override
     public void didUploadedPhoto(final TLRPC.InputFile file, final TLRPC.PhotoSize small, final TLRPC.PhotoSize big) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 uploadedAvatar = file;
                 avatar = small.location;
-                avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                avatarImage.setImage(avatar, "50_50", avatarDrawable);
                 if (createAfterUpload) {
                     FileLog.e("tmessages", "avatar did uploaded");
                     MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, false);
@@ -311,7 +392,7 @@ public void didReceivedNotification(int id, final Object... args) {
             }
             donePressed = false;
         } else if (id == NotificationCenter.chatDidCreated) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     if (progressDialog != null) {
@@ -336,24 +417,19 @@ private void updateVisibleRows(int mask) {
         int count = listView.getChildCount();
         for (int a = 0; a < count; a++) {
             View child = listView.getChildAt(a);
-            if (child instanceof ChatOrUserCell) {
-                ((ChatOrUserCell) child).update(mask);
+            if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
             }
         }
     }
 
-    private class ListAdapter extends SectionedBaseAdapter {
+    private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
         public ListAdapter(Context context) {
             mContext = context;
         }
 
-        @Override
-        public Object getItem(int section, int position) {
-            return null;
-        }
-
         @Override
         public boolean areAllItemsEnabled() {
             return false;
@@ -365,66 +441,29 @@ public boolean isEnabled(int position) {
         }
 
         @Override
-        public long getItemId(int section, int position) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionCount() {
-            return 1;
-        }
-
-        @Override
-        public int getCountForSection(int section) {
-            if (selectedContacts == null) {
-                return 0;
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                view = new UserCell(mContext, 1);
             }
-            return selectedContacts.size();
-        }
-
-        @Override
-        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-            TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(position));
 
-            if (convertView == null) {
-                convertView = new ChatOrUserCell(mContext);
-                ((ChatOrUserCell)convertView).usePadding = false;
-            }
-
-            ((ChatOrUserCell)convertView).setData(user, null, null, null, null);
-            ((ChatOrUserCell) convertView).useSeparator = position != selectedContacts.size() - 1;
-
-            return convertView;
+            TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(i));
+            ((UserCell) view).setData(user, null, null, 0);
+            return view;
         }
 
         @Override
-        public int getItemViewType(int section, int position) {
+        public int getItemViewType(int position) {
             return 0;
         }
 
         @Override
-        public int getItemViewTypeCount() {
+        public int getViewTypeCount() {
             return 1;
         }
 
         @Override
-        public int getSectionHeaderViewType(int section) {
-            return 0;
-        }
-
-        @Override
-        public int getSectionHeaderViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                convertView = new SettingsSectionLayout(mContext);
-                convertView.setBackgroundColor(0xffffffff);
-            }
-            ((SettingsSectionLayout) convertView).setText(LocaleController.formatPluralString("Members", selectedContacts.size()).toUpperCase());
-            return convertView;
+        public int getCount() {
+            return selectedContacts.size();
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index affe474ea..f33daa478 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -12,22 +12,23 @@
 import android.os.Bundle;
 import android.text.Html;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.IdenticonView;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.IdenticonDrawable;
 
 public class IdenticonActivity extends BaseFragment {
     private int chat_id;
@@ -45,12 +46,11 @@ public boolean onFragmentCreate() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
-            actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -60,14 +60,23 @@ public void onItemClick(int id) {
             });
 
             fragmentView = inflater.inflate(R.layout.identicon_layout, container, false);
-            IdenticonView identiconView = (IdenticonView) fragmentView.findViewById(R.id.identicon_view);
+            ImageView identiconView = (ImageView) fragmentView.findViewById(R.id.identicon_view);
             TextView textView = (TextView)fragmentView.findViewById(R.id.identicon_text);
             TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(chat_id);
             if (encryptedChat != null) {
-                identiconView.setBytes(encryptedChat.auth_key);
+                IdenticonDrawable drawable = new IdenticonDrawable();
+                identiconView.setImageDrawable(drawable);
+                drawable.setBytes(encryptedChat.auth_key);
                 TLRPC.User user = MessagesController.getInstance().getUser(encryptedChat.user_id);
                 textView.setText(Html.fromHtml(LocaleController.formatString("EncryptionKeyDescription", R.string.EncryptionKeyDescription, user.first_name, user.first_name)));
             }
+
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 0ab87bc8b..4dd22d64b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -11,6 +11,7 @@
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -18,6 +19,8 @@
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -27,10 +30,11 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.ArrayList;
 import java.util.Timer;
@@ -50,11 +54,14 @@
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("Language", R.string.Language));
+            searching = false;
+            searchWas = false;
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("Language", R.string.Language));
+
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -63,7 +70,7 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
                 @Override
                 public void onSearchExpand() {
@@ -88,34 +95,64 @@ public void onTextChanged(EditText editText) {
                     if (text.length() != 0) {
                         searchWas = true;
                         if (listView != null) {
-                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
                             listView.setAdapter(searchListViewAdapter);
-                            if(android.os.Build.VERSION.SDK_INT >= 11) {
-                                listView.setFastScrollAlwaysVisible(false);
-                            }
-                            listView.setFastScrollEnabled(false);
-                            listView.setVerticalScrollBarEnabled(true);
-                        }
-                        if (emptyTextView != null) {
-                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
                         }
                     }
                 }
             });
 
-            fragmentView = inflater.inflate(R.layout.language_select_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(listAdapter);
-            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
-            listView.setEmptyView(emptyTextView);
-            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+            searchListViewAdapter = new SearchAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            ((FrameLayout) fragmentView).addView(emptyTextLayout);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            searchListViewAdapter = new SearchAdapter(getParentActivity());
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+            emptyTextLayout.addView(emptyTextView);
+            LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams1);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout);
+            layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            frameLayout.setLayoutParams(layoutParams1);
+
+            listView = new ListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setAdapter(listAdapter);
+            ((FrameLayout) fragmentView).addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
 
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
@@ -192,9 +229,6 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                 }
             });
-
-            searching = false;
-            searchWas = false;
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -264,7 +298,7 @@ public void run() {
     }
 
     private void updateSearchResults(final ArrayList<LocaleController.LocaleInfo> arrCounties) {
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 searchResult = arrCounties;
@@ -316,19 +350,11 @@ public boolean hasStableIds() {
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
             if (view == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                view = new TextSettingsCell(mContext);
             }
-            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-            View divider = view.findViewById(R.id.settings_row_divider);
 
             LocaleController.LocaleInfo c = searchResult.get(i);
-            textView.setText(c.name);
-            if (i == searchResult.size() - 1) {
-                divider.setVisibility(View.GONE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
+            ((TextSettingsCell) view).setText(c.name, i != searchResult.size() - 1);
 
             return view;
         }
@@ -392,19 +418,11 @@ public boolean hasStableIds() {
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
             if (view == null) {
-                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                view = new TextSettingsCell(mContext);
             }
-            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-            View divider = view.findViewById(R.id.settings_row_divider);
 
             LocaleController.LocaleInfo localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
-            textView.setText(localeInfo.name);
-            if (i == LocaleController.getInstance().sortedLanguages.size() - 1) {
-                divider.setVisibility(View.GONE);
-            } else {
-                divider.setVisibility(View.VISIBLE);
-            }
+            ((TextSettingsCell) view).setText(localeInfo.name, i != LocaleController.getInstance().sortedLanguages.size() - 1);
 
             return view;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
new file mode 100644
index 000000000..7ba77bdb8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
@@ -0,0 +1,511 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.Spannable;
+import android.text.method.LinkMovementMethod;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+
+import java.util.ArrayList;
+
+public class LastSeenActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+    private View doneButton;
+
+    private int currentType = 0;
+    private ArrayList<Integer> currentPlus;
+    private ArrayList<Integer> currentMinus;
+
+    private int lastSeenSectionRow;
+    private int everybodyRow;
+    private int myContactsRow;
+    private int nobodyRow;
+    private int lastSeenDetailRow;
+    private int shareSectionRow;
+    private int alwaysShareRow;
+    private int neverShareRow;
+    private int shareDetailRow;
+    private int rowCount;
+
+    private final static int done_button = 1;
+
+    private static class LinkMovementMethodMy extends LinkMovementMethod {
+        @Override
+        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
+            try {
+                return super.onTouchEvent(widget, buffer, event);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            return false;
+        }
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        checkPrivacy();
+        updateRows();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.privacyRulesUpdated);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.privacyRulesUpdated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        if (currentType != 0) {
+                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                            boolean showed = preferences.getBoolean("privacyAlertShowed", false);
+                            if (!showed) {
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setMessage(LocaleController.getString("CustomHelp", R.string.CustomHelp));
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        applyCurrentPrivacySettings();
+                                        preferences.edit().putBoolean("privacyAlertShowed", true).commit();
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                showAlertDialog(builder);
+                                return;
+                            }
+                        }
+                        applyCurrentPrivacySettings();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            doneButton.setVisibility(View.GONE);
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+            frameLayout.setBackgroundColor(0xfff0f0f0);
+
+            ListView listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDrawSelectorOnTop(true);
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == nobodyRow || i == everybodyRow || i == myContactsRow) {
+                        int newType = currentType;
+                        if (i == nobodyRow) {
+                            newType = 1;
+                        } else if (i == everybodyRow) {
+                            newType = 0;
+                        } else if (i == myContactsRow) {
+                            newType = 2;
+                        }
+                        if (newType == currentType) {
+                            return;
+                        }
+                        doneButton.setVisibility(View.VISIBLE);
+                        currentType = newType;
+                        updateRows();
+                    } else if (i == neverShareRow || i == alwaysShareRow) {
+                        ArrayList<Integer> createFromArray = null;
+                        if (i == neverShareRow) {
+                            createFromArray = currentMinus;
+                        } else {
+                            createFromArray = currentPlus;
+                        }
+                        if (createFromArray.isEmpty()) {
+                            Bundle args = new Bundle();
+                            args.putBoolean(i == neverShareRow ? "isNeverShare" : "isAlwaysShare", true);
+                            GroupCreateActivity fragment = new GroupCreateActivity(args);
+                            fragment.setDelegate(new GroupCreateActivity.GroupCreateActivityDelegate() {
+                                @Override
+                                public void didSelectUsers(ArrayList<Integer> ids) {
+                                    if (i == neverShareRow) {
+                                        currentMinus = ids;
+                                    } else {
+                                        currentPlus = ids;
+                                    }
+                                    doneButton.setVisibility(View.VISIBLE);
+                                    listAdapter.notifyDataSetChanged();
+                                }
+                            });
+                            presentFragment(fragment);
+                        } else {
+                            LastSeenUsersActivity fragment = new LastSeenUsersActivity(createFromArray, i == alwaysShareRow);
+                            fragment.setDelegate(new LastSeenUsersActivity.LastSeenUsersActivityDelegate() {
+                                @Override
+                                public void didUpdatedUserList(ArrayList<Integer> ids, boolean added) {
+                                    if (i == neverShareRow) {
+                                        currentMinus = ids;
+                                        if (added) {
+                                            for (Integer id : currentMinus) {
+                                                currentPlus.remove(id);
+                                            }
+                                        }
+                                    } else {
+                                        currentPlus = ids;
+                                        if (added) {
+                                            for (Integer id : currentPlus) {
+                                                currentMinus.remove(id);
+                                            }
+                                        }
+                                    }
+                                    doneButton.setVisibility(View.VISIBLE);
+                                    listAdapter.notifyDataSetChanged();
+                                }
+                            });
+                            presentFragment(fragment);
+                        }
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.privacyRulesUpdated) {
+            checkPrivacy();
+        }
+    }
+
+    private void applyCurrentPrivacySettings() {
+        TLRPC.TL_account_setPrivacy req = new TLRPC.TL_account_setPrivacy();
+        req.key = new TLRPC.TL_inputPrivacyKeyStatusTimestamp();
+        if (currentType != 0 && currentPlus.size() > 0) {
+            TLRPC.TL_inputPrivacyValueAllowUsers rule = new TLRPC.TL_inputPrivacyValueAllowUsers();
+            for (Integer uid : currentPlus) {
+                TLRPC.User user = MessagesController.getInstance().getUser(uid);
+                if (user != null) {
+                    TLRPC.InputUser inputUser = MessagesController.getInputUser(user);
+                    if (inputUser != null) {
+                        rule.users.add(inputUser);
+                    }
+                }
+            }
+            req.rules.add(rule);
+        }
+        if (currentType != 1 && currentMinus.size() > 0) {
+            TLRPC.TL_inputPrivacyValueDisallowUsers rule = new TLRPC.TL_inputPrivacyValueDisallowUsers();
+            for (Integer uid : currentMinus) {
+                TLRPC.User user = MessagesController.getInstance().getUser(uid);
+                if (user != null) {
+                    TLRPC.InputUser inputUser = MessagesController.getInputUser(user);
+                    if (inputUser != null) {
+                        rule.users.add(inputUser);
+                    }
+                }
+            }
+            req.rules.add(rule);
+        }
+        if (currentType == 0) {
+            req.rules.add(new TLRPC.TL_inputPrivacyValueAllowAll());
+        } else if (currentType == 1) {
+            req.rules.add(new TLRPC.TL_inputPrivacyValueDisallowAll());
+        } else if (currentType == 2) {
+            req.rules.add(new TLRPC.TL_inputPrivacyValueAllowContacts());
+        }
+        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+        progressDialog.show();
+
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            progressDialog.dismiss();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        if (error == null) {
+                            finishFragment();
+                            TLRPC.TL_account_privacyRules rules = (TLRPC.TL_account_privacyRules) response;
+                            MessagesController.getInstance().putUsers(rules.users, false);
+                            ContactsController.getInstance().setPrivacyRules(rules.rules);
+                        } else {
+                            showErrorAlert();
+                        }
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+    }
+
+    private void showErrorAlert() {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setMessage(LocaleController.getString("PrivacyFloodControlError", R.string.PrivacyFloodControlError));
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showAlertDialog(builder);
+    }
+
+    private void checkPrivacy() {
+        currentPlus = new ArrayList<Integer>();
+        currentMinus = new ArrayList<Integer>();
+        ArrayList<TLRPC.PrivacyRule> privacyRules = ContactsController.getInstance().getPrivacyRules();
+        if (privacyRules.size() == 0) {
+            currentType = 1;
+            return;
+        }
+        int type = -1;
+        for (TLRPC.PrivacyRule rule : privacyRules) {
+            if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
+                currentPlus.addAll(rule.users);
+            } else if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
+                currentMinus.addAll(rule.users);
+            } else if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
+                type = 0;
+            } else if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
+                type = 1;
+            } else {
+                type = 2;
+            }
+        }
+        if (type == 0 || type == -1 && currentMinus.size() > 0) {
+            currentType = 0;
+        } else if (type == 2 || type == -1 && currentMinus.size() > 0 && currentPlus.size() > 0) {
+            currentType = 2;
+        } else if (type == 1 || type == -1 && currentPlus.size() > 0) {
+            currentType = 1;
+        }
+        if (doneButton != null) {
+            doneButton.setVisibility(View.GONE);
+        }
+        updateRows();
+    }
+
+    private void updateRows() {
+        rowCount = 0;
+        lastSeenSectionRow = rowCount++;
+        everybodyRow = rowCount++;
+        myContactsRow = rowCount++;
+        nobodyRow = rowCount++;
+        lastSeenDetailRow = rowCount++;
+        shareSectionRow = rowCount++;
+        if (currentType == 1 || currentType == 2) {
+            alwaysShareRow = rowCount++;
+        } else {
+            alwaysShareRow = -1;
+        }
+        if (currentType == 0 || currentType == 2) {
+            neverShareRow = rowCount++;
+        } else {
+            neverShareRow = -1;
+        }
+        shareDetailRow = rowCount++;
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == nobodyRow || i == everybodyRow || i == myContactsRow || i == neverShareRow || i == alwaysShareRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == everybodyRow) {
+                    textCell.setTextAndIcon(LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody), currentType == 0 ? R.drawable.check_blue : 0, true);
+                } else if (i == myContactsRow) {
+                    textCell.setTextAndIcon(LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts), currentType == 2 ? R.drawable.check_blue : 0, true);
+                } else if (i == nobodyRow) {
+                    textCell.setTextAndIcon(LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody), currentType == 1 ? R.drawable.check_blue : 0, false);
+                } else if (i == alwaysShareRow) {
+                    String value;
+                    if (currentPlus.size() != 0) {
+                        value = LocaleController.formatPluralString("Users", currentPlus.size());
+                    } else {
+                        value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("AlwaysShareWith", R.string.AlwaysShareWith), value, neverShareRow != -1);
+                } else if (i == neverShareRow) {
+                    String value;
+                    if (currentMinus.size() != 0) {
+                        value = LocaleController.formatPluralString("Users", currentMinus.size());
+                    } else {
+                        value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("NeverShareWith", R.string.NeverShareWith), value, false);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == lastSeenDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("CustomHelp", R.string.CustomHelp));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                } else if (i == shareDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("CustomShareSettingsHelp", R.string.CustomShareSettingsHelp));
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == lastSeenSectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("LastSeenTitle", R.string.LastSeenTitle));
+                } else if (i == shareSectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("AddExceptions", R.string.AddExceptions));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == alwaysShareRow || i == neverShareRow || i == everybodyRow || i == myContactsRow || i == nobodyRow) {
+                return 0;
+            } else if (i == shareDetailRow || i == lastSeenDetailRow) {
+                return 1;
+            } else if (i == lastSeenSectionRow || i == shareSectionRow) {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
new file mode 100644
index 000000000..4f8347b18
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
@@ -0,0 +1,313 @@
+/*
+ * This is the source code of Telegram for Android v. 2.0.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextInfoCell;
+import org.telegram.ui.Cells.UserCell;
+
+import java.util.ArrayList;
+
+public class LastSeenUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    public static interface LastSeenUsersActivityDelegate {
+        public abstract void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
+    }
+
+    private ListView listView;
+    private ListAdapter listViewAdapter;
+    private int selectedUserId;
+
+    private ArrayList<Integer> uidArray;
+    private boolean isAlwaysShare;
+
+    private LastSeenUsersActivityDelegate delegate;
+
+    private final static int block_user = 1;
+
+    public LastSeenUsersActivity(ArrayList<Integer> users, boolean always) {
+        super();
+        uidArray = users;
+        isAlwaysShare = always;
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (isAlwaysShare) {
+                actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
+            } else {
+                actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
+            }
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == block_user) {
+                        Bundle args = new Bundle();
+                        args.putBoolean(isAlwaysShare ? "isAlwaysShare" : "isNeverShare", true);
+                        GroupCreateActivity fragment = new GroupCreateActivity(args);
+                        fragment.setDelegate(new GroupCreateActivity.GroupCreateActivityDelegate() {
+                            @Override
+                            public void didSelectUsers(ArrayList<Integer> ids) {
+                                for (Integer id : ids) {
+                                    if (uidArray.contains(id)) {
+                                        continue;
+                                    }
+                                    uidArray.add(id);
+                                }
+                                listViewAdapter.notifyDataSetChanged();
+                                if (delegate != null) {
+                                    delegate.didUpdatedUserList(uidArray, true);
+                                }
+                            }
+                        });
+                        presentFragment(fragment);
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItem(block_user, R.drawable.plus);
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            TextView emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setVisibility(View.INVISIBLE);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            frameLayout.addView(emptyTextView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextView.setLayoutParams(layoutParams);
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            listView = new ListView(getParentActivity());
+            listView.setEmptyView(emptyTextView);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            frameLayout.addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i < uidArray.size()) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", uidArray.get(i));
+                        presentFragment(new ProfileActivity(args));
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i < 0 || i >= uidArray.size() || getParentActivity() == null) {
+                        return true;
+                    }
+                    selectedUserId = uidArray.get(i);
+
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    CharSequence[] items = new CharSequence[] {LocaleController.getString("Delete", R.string.Delete)};
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (i == 0) {
+                                uidArray.remove((Integer)selectedUserId);
+                                listViewAdapter.notifyDataSetChanged();
+                                if (delegate != null) {
+                                    delegate.didUpdatedUserList(uidArray, false);
+                                }
+                            }
+                        }
+                    });
+                    showAlertDialog(builder);
+                    return true;
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateVisibleRows(mask);
+            }
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
+            }
+        }
+    }
+
+    public void setDelegate(LastSeenUsersActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != uidArray.size();
+        }
+
+        @Override
+        public int getCount() {
+            if (uidArray.isEmpty()) {
+                return 0;
+            }
+            return uidArray.size() + 1;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new UserCell(mContext, 1);
+                }
+                TLRPC.User user = MessagesController.getInstance().getUser(uidArray.get(i));
+                ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoCell(mContext);
+                    ((TextInfoCell) view).setText(LocaleController.getString("RemoveFromListText", R.string.RemoveFromListText));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if(i == uidArray.size()) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return uidArray.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 9806c5d89..6364dd49c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -14,6 +14,7 @@
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.database.Cursor;
+import android.graphics.Point;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -26,15 +27,18 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.RelativeLayout;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.ContactsController;
 import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
@@ -44,8 +48,10 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBarLayout;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
+import org.telegram.ui.ActionBar.ActionBarLayout;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -54,26 +60,28 @@
 import java.util.Map;
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
-    private boolean finished = false;
-    private String videoPath = null;
-    private String sendingText = null;
-    private ArrayList<Uri> photoPathsArray = null;
-    private ArrayList<String> documentsPathsArray = null;
-    private ArrayList<String> documentsOriginalPathsArray = null;
-    private ArrayList<TLRPC.User> contactsToSend = null;
+    private boolean finished;
+    private String videoPath;
+    private String sendingText;
+    private ArrayList<Uri> photoPathsArray;
+    private ArrayList<String> documentsPathsArray;
+    private ArrayList<String> documentsOriginalPathsArray;
+    private ArrayList<TLRPC.User> contactsToSend;
     private int currentConnectionState;
     private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<BaseFragment>();
     private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<BaseFragment>();
     private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<BaseFragment>();
 
-    private ActionBarLayout actionBarLayout = null;
-    private ActionBarLayout layersActionBarLayout = null;
-    private ActionBarLayout rightActionBarLayout = null;
-    private FrameLayout shadowTablet = null;
-    private LinearLayout buttonLayoutTablet = null;
-    private FrameLayout shadowTabletSide = null;
-    private ImageView backgroundTablet = null;
-    private boolean tabletFullSize = false;
+    private ActionBarLayout actionBarLayout;
+    private ActionBarLayout layersActionBarLayout;
+    private ActionBarLayout rightActionBarLayout;
+    private FrameLayout shadowTablet;
+    private FrameLayout shadowTabletSide;
+    private ImageView backgroundTablet;
+    private DrawerLayoutContainer drawerLayoutContainer;
+    private DrawerLayoutAdapter drawerLayoutAdapter;
+
+    private boolean tabletFullSize;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -105,14 +113,66 @@ protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
 
+        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
+        if (resourceId > 0) {
+            AndroidUtilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
+        }
+
         actionBarLayout = new ActionBarLayout(this);
+
+        drawerLayoutContainer = new DrawerLayoutContainer(this);
+        setContentView(drawerLayoutContainer, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+
         if (AndroidUtilities.isTablet()) {
-            setContentView(R.layout.launch_layout_tablet);
-            shadowTablet = (FrameLayout)findViewById(R.id.shadow_tablet);
-            buttonLayoutTablet = (LinearLayout)findViewById(R.id.launch_button_layout);
-            shadowTabletSide = (FrameLayout)findViewById(R.id.shadow_tablet_side);
-            backgroundTablet = (ImageView)findViewById(R.id.launch_background);
+            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+
+            RelativeLayout launchLayout = new RelativeLayout(this);
+            drawerLayoutContainer.addView(launchLayout);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) launchLayout.getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            launchLayout.setLayoutParams(layoutParams1);
+
+            backgroundTablet = new ImageView(this);
+            backgroundTablet.setScaleType(ImageView.ScaleType.CENTER_CROP);
+            backgroundTablet.setImageResource(R.drawable.cats);
+            launchLayout.addView(backgroundTablet);
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) backgroundTablet.getLayoutParams();
+            relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            backgroundTablet.setLayoutParams(relativeLayoutParams);
+
+            launchLayout.addView(actionBarLayout);
+            relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            actionBarLayout.setLayoutParams(relativeLayoutParams);
 
+            rightActionBarLayout = new ActionBarLayout(this);
+            launchLayout.addView(rightActionBarLayout);
+            relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(320);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            rightActionBarLayout.setLayoutParams(relativeLayoutParams);
+            rightActionBarLayout.init(rightFragmentsStack);
+            rightActionBarLayout.setDelegate(this);
+
+            shadowTabletSide = new FrameLayout(this);
+            shadowTabletSide.setBackgroundColor(0x40295274);
+            launchLayout.addView(shadowTabletSide);
+            relativeLayoutParams = (RelativeLayout.LayoutParams) shadowTabletSide.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(1);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            shadowTabletSide.setLayoutParams(relativeLayoutParams);
+
+            shadowTablet = new FrameLayout(this);
+            shadowTablet.setVisibility(View.GONE);
+            shadowTablet.setBackgroundColor(0x7F000000);
+            launchLayout.addView(shadowTablet);
+            relativeLayoutParams = (RelativeLayout.LayoutParams) shadowTablet.getLayoutParams();
+            relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            shadowTablet.setLayoutParams(relativeLayoutParams);
             shadowTablet.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -148,111 +208,105 @@ public void onClick(View v) {
                 }
             });
 
-            RelativeLayout launchLayout = (RelativeLayout)findViewById(R.id.launch_layout);
-
             layersActionBarLayout = new ActionBarLayout(this);
+            layersActionBarLayout.setRemoveActionBarExtraHeight(true);
             layersActionBarLayout.setBackgroundView(shadowTablet);
             layersActionBarLayout.setUseAlphaAnimations(true);
             layersActionBarLayout.setBackgroundResource(R.drawable.boxshadow);
             launchLayout.addView(layersActionBarLayout);
-            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
+            relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
             relativeLayoutParams.width = AndroidUtilities.dp(498);
             relativeLayoutParams.height = AndroidUtilities.dp(528);
-            relativeLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
             layersActionBarLayout.setLayoutParams(relativeLayoutParams);
             layersActionBarLayout.init(layerFragmentsStack);
             layersActionBarLayout.setDelegate(this);
+            layersActionBarLayout.setDrawerLayoutContainer(drawerLayoutContainer);
             layersActionBarLayout.setVisibility(View.GONE);
+        } else {
+            drawerLayoutContainer.addView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        }
 
-            launchLayout.addView(actionBarLayout, 2);
-            relativeLayoutParams = (RelativeLayout.LayoutParams)actionBarLayout.getLayoutParams();
-            relativeLayoutParams.width = AndroidUtilities.dp(320);
-            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
-            actionBarLayout.setLayoutParams(relativeLayoutParams);
-
-            rightActionBarLayout = new ActionBarLayout(this);
-            launchLayout.addView(rightActionBarLayout, 3);
-            relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
-            relativeLayoutParams.width = AndroidUtilities.dp(320);
-            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
-            rightActionBarLayout.setLayoutParams(relativeLayoutParams);
-            rightActionBarLayout.init(rightFragmentsStack);
-            rightActionBarLayout.setDelegate(this);
-
-            TextView button = (TextView)findViewById(R.id.new_group_button);
-            button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+        ListView listView = new ListView(this);
+        listView.setAdapter(drawerLayoutAdapter = new DrawerLayoutAdapter(this));
+        drawerLayoutContainer.setDrawerLayout(listView);
+        listView.setBackgroundColor(0xffffffff);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)listView.getLayoutParams();
+        Point screenSize = AndroidUtilities.getRealScreenSize();
+        layoutParams.width = AndroidUtilities.isTablet() ? AndroidUtilities.dp(320) : Math.min(screenSize.x, screenSize.y) - AndroidUtilities.dp(56);
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        listView.setPadding(0, 0, 0, 0);
+        listView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setLayoutParams(layoutParams);
+        listView.setVerticalScrollBarEnabled(false);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                if (position == 2) {
                     presentFragment(new GroupCreateActivity());
-                }
-            });
-
-            button = (TextView)findViewById(R.id.new_secret_button);
-            button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 3) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlyUsers", true);
                     args.putBoolean("destroyAfterSelect", true);
-                    args.putBoolean("usersAsSections", true);
                     args.putBoolean("createSecretChat", true);
                     presentFragment(new ContactsActivity(args));
-                }
-            });
-
-            button = (TextView)findViewById(R.id.new_broadcast_button);
-            button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 4) {
                     Bundle args = new Bundle();
                     args.putBoolean("broadcast", true);
                     presentFragment(new GroupCreateActivity(args));
-                }
-            });
-
-            button = (TextView)findViewById(R.id.contacts_button);
-            button.setText(LocaleController.getString("Contacts", R.string.Contacts));
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 6) {
                     presentFragment(new ContactsActivity(null));
-                }
-            });
-
-            button = (TextView)findViewById(R.id.settings_button);
-            button.setText(LocaleController.getString("Settings", R.string.Settings));
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 7) {
+                    try {
+                        Intent intent = new Intent(Intent.ACTION_SEND);
+                        intent.setType("text/plain");
+                        intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
+                        startActivity(intent);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 8) {
                     presentFragment(new SettingsActivity());
+                    drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 9) {
+                    try {
+                        Intent pickIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl)));
+                        startActivity(pickIntent);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    drawerLayoutContainer.closeDrawer(false);
                 }
-            });
-        } else {
-            setContentView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        }
+            }
+        });
+
+        drawerLayoutContainer.setParentActionBarLayout(actionBarLayout);
+        actionBarLayout.setDrawerLayoutContainer(drawerLayoutContainer);
         actionBarLayout.init(mainFragmentsStack);
         actionBarLayout.setDelegate(this);
 
-        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
-        if (resourceId > 0) {
-            AndroidUtilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
-        }
-
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeOtherAppActivities, this);
         currentConnectionState = ConnectionsManager.getInstance().getConnectionState();
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mainUserInfoChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedConnectionState);
 
         if (actionBarLayout.fragmentsStack.isEmpty()) {
             if (!UserConfig.isClientActivated()) {
                 actionBarLayout.addFragmentToStack(new LoginActivity());
+                drawerLayoutContainer.setAllowOpenDrawer(false);
             } else {
                 actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                drawerLayoutContainer.setAllowOpenDrawer(true);
             }
 
             try {
@@ -280,13 +334,13 @@ public void onClick(View v) {
                             }
                         } else if (fragmentName.equals("chat_profile")) {
                             if (args != null) {
-                                ChatProfileActivity profile = new ChatProfileActivity(args);
+                                ProfileActivity profile = new ProfileActivity(args);
                                 if (actionBarLayout.addFragmentToStack(profile)) {
                                     profile.restoreSelfArgs(savedInstanceState);
                                 }
                             }
                         } else if (fragmentName.equals("wallpapers")) {
-                            SettingsWallpapersActivity settings = new SettingsWallpapersActivity();
+                            WallpapersActivity settings = new WallpapersActivity();
                             actionBarLayout.addFragmentToStack(settings);
                             settings.restoreSelfArgs(savedInstanceState);
                         }
@@ -295,6 +349,12 @@ public void onClick(View v) {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
+        } else {
+            if (AndroidUtilities.isTablet()) {
+                drawerLayoutContainer.setAllowOpenDrawer(actionBarLayout.fragmentsStack.size() <= 1 && layersActionBarLayout.fragmentsStack.isEmpty());
+            } else {
+                drawerLayoutContainer.setAllowOpenDrawer(actionBarLayout.fragmentsStack.size() <= 1);
+            }
         }
 
         handleIntent(getIntent(), false, savedInstanceState != null);
@@ -588,9 +648,15 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                 actionBarLayout.showLastFragment();
                 rightActionBarLayout.showLastFragment();
             }
+            drawerLayoutContainer.setAllowOpenDrawer(false);
         }
         if (open_settings != 0) {
             actionBarLayout.presentFragment(new SettingsActivity(), false, true, true);
+            drawerLayoutContainer.setAllowOpenDrawer(false);
+            if (AndroidUtilities.isTablet()) {
+                actionBarLayout.showLastFragment();
+                rightActionBarLayout.showLastFragment();
+            }
             pushOpened = true;
         }
         if (!pushOpened && !isNew) {
@@ -598,18 +664,22 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                 if (UserConfig.isClientActivated()) {
                     if (actionBarLayout.fragmentsStack.isEmpty()) {
                         actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                        drawerLayoutContainer.setAllowOpenDrawer(true);
                     }
                 } else {
                     if (layersActionBarLayout.fragmentsStack.isEmpty()) {
                         layersActionBarLayout.addFragmentToStack(new LoginActivity());
+                        drawerLayoutContainer.setAllowOpenDrawer(false);
                     }
                 }
             } else {
                 if (actionBarLayout.fragmentsStack.isEmpty()) {
                     if (!UserConfig.isClientActivated()) {
                         actionBarLayout.addFragmentToStack(new LoginActivity());
+                        drawerLayoutContainer.setAllowOpenDrawer(false);
                     } else {
                         actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                        drawerLayoutContainer.setAllowOpenDrawer(true);
                     }
                 }
             }
@@ -676,6 +746,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                 }
             } else {
                 actionBarLayout.presentFragment(fragment, true);
+
                 if (sendingText != null) {
                     fragment.processSendingText(sendingText);
                 }
@@ -707,6 +778,7 @@ private void onFinish() {
         }
         finished = true;
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mainUserInfoChanged);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
     }
@@ -721,6 +793,13 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
 
     public void needLayout() {
         if (AndroidUtilities.isTablet()) {
+
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
+            relativeLayoutParams.leftMargin = (AndroidUtilities.displaySize.x - relativeLayoutParams.width) / 2;
+            int y = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+            relativeLayoutParams.topMargin = y + (AndroidUtilities.displaySize.y - relativeLayoutParams.height - y) / 2;
+            layersActionBarLayout.setLayoutParams(relativeLayoutParams);
+
             if (!AndroidUtilities.isSmallTablet() || getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 tabletFullSize = false;
                 int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
@@ -728,7 +807,7 @@ public void needLayout() {
                     leftWidth = AndroidUtilities.dp(320);
                 }
 
-                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
                 relativeLayoutParams.width = leftWidth;
                 relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
                 actionBarLayout.setLayoutParams(relativeLayoutParams);
@@ -743,12 +822,6 @@ public void needLayout() {
                 relativeLayoutParams.leftMargin = leftWidth;
                 rightActionBarLayout.setLayoutParams(relativeLayoutParams);
 
-                relativeLayoutParams = (RelativeLayout.LayoutParams) buttonLayoutTablet.getLayoutParams();
-                relativeLayoutParams.width = AndroidUtilities.displaySize.x - leftWidth;
-                relativeLayoutParams.height = RelativeLayout.LayoutParams.WRAP_CONTENT;
-                relativeLayoutParams.leftMargin = leftWidth;
-                buttonLayoutTablet.setLayoutParams(relativeLayoutParams);
-
                 if (AndroidUtilities.isSmallTablet() && actionBarLayout.fragmentsStack.size() == 2) {
                     BaseFragment chatFragment = actionBarLayout.fragmentsStack.get(1);
                     chatFragment.onPause();
@@ -759,13 +832,12 @@ public void needLayout() {
                 }
 
                 rightActionBarLayout.setVisibility(rightActionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
-                buttonLayoutTablet.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() && rightActionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
                 backgroundTablet.setVisibility(rightActionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
                 shadowTabletSide.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
             } else {
                 tabletFullSize = true;
 
-                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
                 relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
                 relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
                 actionBarLayout.setLayoutParams(relativeLayoutParams);
@@ -773,7 +845,6 @@ public void needLayout() {
                 shadowTabletSide.setVisibility(View.GONE);
                 rightActionBarLayout.setVisibility(View.GONE);
                 backgroundTablet.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
-                buttonLayoutTablet.setVisibility(View.GONE);
 
                 if (rightActionBarLayout.fragmentsStack.size() == 1) {
                     BaseFragment chatFragment = rightActionBarLayout.fragmentsStack.get(0);
@@ -857,7 +928,7 @@ protected void onResume() {
         Utilities.checkForUpdates(this);
         ApplicationLoader.mainInterfacePaused = false;
         ConnectionsManager.getInstance().setAppPaused(false, false);
-        actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
+        updateCurrentConnectionState();
     }
 
     @Override
@@ -898,9 +969,23 @@ public void didReceivedNotification(int id, Object... args) {
             if (currentConnectionState != state) {
                 FileLog.e("tmessages", "switch to state " + state);
                 currentConnectionState = state;
-                actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
+                updateCurrentConnectionState();
             }
+        } else if (id == NotificationCenter.mainUserInfoChanged) {
+            drawerLayoutAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private void updateCurrentConnectionState() {
+        String text = null;
+        if (currentConnectionState == 1) {
+            text = LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork);
+        } else if (currentConnectionState == 2) {
+            text = LocaleController.getString("Connecting", R.string.Connecting);
+        } else if (currentConnectionState == 3) {
+            text = LocaleController.getString("Updating", R.string.Updating);
         }
+        actionBarLayout.setTitleOverlayText(text);
     }
 
     @Override
@@ -932,9 +1017,9 @@ protected void onSaveInstanceState(Bundle outState) {
                 } else if (lastFragment instanceof GroupCreateFinalActivity && args != null) {
                     outState.putBundle("args", args);
                     outState.putString("fragment", "group");
-                } else if (lastFragment instanceof SettingsWallpapersActivity) {
+                } else if (lastFragment instanceof WallpapersActivity) {
                     outState.putString("fragment", "wallpapers");
-                } else if (lastFragment instanceof ChatProfileActivity && args != null) {
+                } else if (lastFragment instanceof ProfileActivity && ((ProfileActivity) lastFragment).isChat() && args != null) {
                     outState.putBundle("args", args);
                     outState.putString("fragment", "chat_profile");
                 }
@@ -949,23 +1034,23 @@ protected void onSaveInstanceState(Bundle outState) {
     public void onBackPressed() {
         if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(true);
-        } else {
-            if (AndroidUtilities.isTablet()) {
-                if (layersActionBarLayout.getVisibility() == View.VISIBLE) {
-                    layersActionBarLayout.onBackPressed();
-                } else {
-                    boolean cancel = false;
-                    if (rightActionBarLayout.getVisibility() == View.VISIBLE && !rightActionBarLayout.fragmentsStack.isEmpty()) {
-                        BaseFragment lastFragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
-                        cancel = !lastFragment.onBackPressed();
-                    }
-                    if (!cancel) {
-                        actionBarLayout.onBackPressed();
-                    }
-                }
+        } else if (drawerLayoutContainer.isDrawerOpened()) {
+            drawerLayoutContainer.closeDrawer(false);
+        } else if (AndroidUtilities.isTablet()) {
+            if (layersActionBarLayout.getVisibility() == View.VISIBLE) {
+                layersActionBarLayout.onBackPressed();
             } else {
-                actionBarLayout.onBackPressed();
+                boolean cancel = false;
+                if (rightActionBarLayout.getVisibility() == View.VISIBLE && !rightActionBarLayout.fragmentsStack.isEmpty()) {
+                    BaseFragment lastFragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                    cancel = !lastFragment.onBackPressed();
+                }
+                if (!cancel) {
+                    actionBarLayout.onBackPressed();
+                }
             }
+        } else {
+            actionBarLayout.onBackPressed();
         }
     }
 
@@ -1008,24 +1093,6 @@ public boolean onPreIme() {
         return false;
     }
 
-    @Override
-    public void onOverlayShow(View view, BaseFragment fragment) {
-        if (view == null || fragment == null || actionBarLayout.fragmentsStack.isEmpty()) {
-            return;
-        }
-        View backStatusButton = view.findViewById(R.id.back_button);
-        TextView statusText = (TextView)view.findViewById(R.id.status_text);
-        backStatusButton.setVisibility(actionBarLayout.fragmentsStack.get(0) == fragment ? View.GONE : View.VISIBLE);
-        view.setEnabled(actionBarLayout.fragmentsStack.get(0) != fragment);
-        if (currentConnectionState == 1) {
-            statusText.setText(LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork));
-        } else if (currentConnectionState == 2) {
-            statusText.setText(LocaleController.getString("Connecting", R.string.Connecting));
-        } else if (currentConnectionState == 3) {
-            statusText.setText(LocaleController.getString("Updating", R.string.Updating));
-        }
-    }
-
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
         if (AndroidUtilities.isTablet()) {
@@ -1045,6 +1112,7 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
     @Override
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
@@ -1052,10 +1120,10 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
                     layersActionBarLayout.removeAllFragments();
                     layersActionBarLayout.setVisibility(View.GONE);
+                    drawerLayoutContainer.setAllowOpenDrawer(true);
                     if (!tabletFullSize) {
                         shadowTabletSide.setVisibility(View.VISIBLE);
                         if (rightActionBarLayout.fragmentsStack.isEmpty()) {
-                            buttonLayoutTablet.setVisibility(View.VISIBLE);
                             backgroundTablet.setVisibility(View.VISIBLE);
                         }
                     }
@@ -1065,7 +1133,6 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             if (fragment instanceof ChatActivity) {
                 if (!tabletFullSize && layout != rightActionBarLayout) {
                     rightActionBarLayout.setVisibility(View.VISIBLE);
-                    buttonLayoutTablet.setVisibility(View.GONE);
                     backgroundTablet.setVisibility(View.GONE);
                     rightActionBarLayout.removeAllFragments();
                     rightActionBarLayout.presentFragment(fragment, removeLast, true, false);
@@ -1095,15 +1162,13 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
                         }
                         layersActionBarLayout.closeLastFragment(!forceWithoutAnimation);
                     }
-                    if (actionBarLayout.fragmentsStack.size() > 1) {
-                        actionBarLayout.presentFragment(fragment, actionBarLayout.fragmentsStack.size() > 1, forceWithoutAnimation, false);
-                        return false;
-                    }
+                    actionBarLayout.presentFragment(fragment, actionBarLayout.fragmentsStack.size() > 1, forceWithoutAnimation, false);
+                    return false;
                 }
             } else if (layout != layersActionBarLayout) {
                 layersActionBarLayout.setVisibility(View.VISIBLE);
+                drawerLayoutContainer.setAllowOpenDrawer(false);
                 if (fragment instanceof LoginActivity) {
-                    buttonLayoutTablet.setVisibility(View.GONE);
                     backgroundTablet.setVisibility(View.VISIBLE);
                     shadowTabletSide.setVisibility(View.GONE);
                     shadowTablet.setBackgroundColor(0x00000000);
@@ -1115,6 +1180,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             }
             return true;
         } else {
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity));
             return true;
         }
     }
@@ -1122,6 +1188,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     @Override
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
@@ -1129,10 +1196,10 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
                     actionBarLayout.addFragmentToStack(fragment);
                     layersActionBarLayout.removeAllFragments();
                     layersActionBarLayout.setVisibility(View.GONE);
+                    drawerLayoutContainer.setAllowOpenDrawer(true);
                     if (!tabletFullSize) {
                         shadowTabletSide.setVisibility(View.VISIBLE);
                         if (rightActionBarLayout.fragmentsStack.isEmpty()) {
-                            buttonLayoutTablet.setVisibility(View.VISIBLE);
                             backgroundTablet.setVisibility(View.VISIBLE);
                         }
                     }
@@ -1141,7 +1208,6 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
             } else if (fragment instanceof ChatActivity) {
                 if (!tabletFullSize && layout != rightActionBarLayout) {
                     rightActionBarLayout.setVisibility(View.VISIBLE);
-                    buttonLayoutTablet.setVisibility(View.GONE);
                     backgroundTablet.setVisibility(View.GONE);
                     rightActionBarLayout.removeAllFragments();
                     rightActionBarLayout.addFragmentToStack(fragment);
@@ -1166,8 +1232,8 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
                 }
             } else if (layout != layersActionBarLayout) {
                 layersActionBarLayout.setVisibility(View.VISIBLE);
+                drawerLayoutContainer.setAllowOpenDrawer(false);
                 if (fragment instanceof LoginActivity) {
-                    buttonLayoutTablet.setVisibility(View.GONE);
                     backgroundTablet.setVisibility(View.VISIBLE);
                     shadowTabletSide.setVisibility(View.GONE);
                     shadowTablet.setBackgroundColor(0x00000000);
@@ -1179,6 +1245,7 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
             }
             return true;
         } else {
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity));
             return true;
         }
     }
@@ -1192,7 +1259,6 @@ public boolean needCloseLastFragment(ActionBarLayout layout) {
                 return false;
             } else if (layout == rightActionBarLayout) {
                 if (!tabletFullSize) {
-                    buttonLayoutTablet.setVisibility(View.VISIBLE);
                     backgroundTablet.setVisibility(View.VISIBLE);
                 }
             } else if (layout == layersActionBarLayout && actionBarLayout.fragmentsStack.isEmpty() && layersActionBarLayout.fragmentsStack.size() == 1) {
@@ -1218,18 +1284,8 @@ public void onRebuildAllFragments(ActionBarLayout layout) {
                 rightActionBarLayout.showLastFragment();
                 actionBarLayout.rebuildAllFragmentViews(true);
                 actionBarLayout.showLastFragment();
-
-                TextView button = (TextView)findViewById(R.id.new_group_button);
-                button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
-                button = (TextView)findViewById(R.id.new_secret_button);
-                button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
-                button = (TextView)findViewById(R.id.new_broadcast_button);
-                button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
-                button = (TextView)findViewById(R.id.contacts_button);
-                button.setText(LocaleController.getString("Contacts", R.string.Contacts));
-                button = (TextView)findViewById(R.id.settings_button);
-                button.setText(LocaleController.getString("Settings", R.string.Settings));
             }
         }
+        drawerLayoutAdapter.notifyDataSetChanged();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index e3e065e87..be7760ae3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -36,11 +36,12 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.List;
 
@@ -91,15 +92,15 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
             if (messageObject != null) {
-                actionBarLayer.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
+                actionBar.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
             } else {
-                actionBarLayer.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
+                actionBar.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
             }
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -128,7 +129,7 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(map_to_my_location, R.drawable.ic_ab_location);
 
             ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
@@ -145,13 +146,15 @@ public void onItemClick(int id) {
             avatarImageView = (BackupImageView)fragmentView.findViewById(R.id.location_avatar_view);
             if (avatarImageView != null) {
                 avatarImageView.processDetach = false;
+                avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
             }
             nameTextView = (TextView)fragmentView.findViewById(R.id.location_name_label);
             distanceTextView = (TextView)fragmentView.findViewById(R.id.location_distance_label);
             View bottomView = fragmentView.findViewById(R.id.location_bottom_view);
             TextView sendButton = (TextView) fragmentView.findViewById(R.id.location_send_button);
             if (sendButton != null) {
-                sendButton.setText(LocaleController.getString("SendLocation", R.string.SendLocation));
+                sendButton.setText(LocaleController.getString("SendLocation", R.string.SendLocation).toUpperCase());
+                sendButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             }
 
             mapView = (MapView)fragmentView.findViewById(R.id.map_view);
@@ -226,19 +229,7 @@ public void onClick(View view) {
                 }
 
                 if (messageObject != null) {
-                    int fromId = messageObject.messageOwner.from_id;
-                    if (messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
-                        fromId = messageObject.messageOwner.fwd_from_id;
-                    }
-                    TLRPC.User user = MessagesController.getInstance().getUser(fromId);
-                    if (user != null) {
-                        TLRPC.FileLocation photo = null;
-                        if (user.photo != null) {
-                            photo = user.photo.photo_small;
-                        }
-                        avatarImageView.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
-                        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-                    }
+                    updateUserData();
                     userLocation = new Location("network");
                     userLocation.setLatitude(messageObject.messageOwner.media.geo.lat);
                     userLocation.setLongitude(messageObject.messageOwner.media.geo._long);
@@ -285,7 +276,7 @@ private void updateUserData() {
                 if (user.photo != null) {
                     photo = user.photo.photo_small;
                 }
-                avatarImageView.setImage(photo, null, AndroidUtilities.getUserAvatarForId(user.id));
+                avatarImageView.setImage(photo, null, new AvatarDrawable(user));
                 nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 990fbc452..0ed361085 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -12,40 +12,78 @@
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.os.Build;
 import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.SpannableStringBuilder;
+import android.text.Spanned;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.text.style.MetricAffectingSpan;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AdapterView;
+import android.widget.EditText;
 import android.widget.FrameLayout;
+import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.BuildVars;
+import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SlideView;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.Timer;
+import java.util.TimerTask;
 
-public class LoginActivity extends BaseFragment implements SlideView.SlideViewDelegate {
+public class LoginActivity extends BaseFragment {
     private int currentViewNum = 0;
     private SlideView[] views = new SlideView[3];
     private ProgressDialog progressDialog;
 
     private final static int done_button = 1;
 
-    @Override
-    public boolean onFragmentCreate() {
-        return super.onFragmentCreate();
-    }
-
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
@@ -67,28 +105,67 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.ic_ab_logo);
-            actionBarLayer.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == done_button) {
-                        onNextAction();
+                        views[currentViewNum].onNextPressed();
                     }
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
-            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
-            doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            fragmentView = new ScrollView(getParentActivity());
+            ScrollView scrollView = (ScrollView) fragmentView;
+            scrollView.setFillViewport(true);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            scrollView.addView(frameLayout);
+            ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
+            layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            frameLayout.setLayoutParams(layoutParams);
+
+            views[0] = new PhoneView(getParentActivity());
+            views[0].setVisibility(View.VISIBLE);
+            frameLayout.addView(views[0]);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) views[0].getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.leftMargin = AndroidUtilities.dp(16);
+            layoutParams1.rightMargin = AndroidUtilities.dp(16);
+            layoutParams1.topMargin = AndroidUtilities.dp(30);
+            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
+            views[0].setLayoutParams(layoutParams1);
 
-            fragmentView = inflater.inflate(R.layout.login_layout, container, false);
+            views[1] = new LoginActivitySmsView(getParentActivity());
+            views[1].setVisibility(View.GONE);
+            frameLayout.addView(views[1]);
+            layoutParams1 = (FrameLayout.LayoutParams) views[1].getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.leftMargin = AndroidUtilities.dp(16);
+            layoutParams1.rightMargin = AndroidUtilities.dp(16);
+            layoutParams1.topMargin = AndroidUtilities.dp(30);
+            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
+            views[1].setLayoutParams(layoutParams1);
 
-            views[0] = (SlideView)fragmentView.findViewById(R.id.login_page1);
-            views[1] = (SlideView)fragmentView.findViewById(R.id.login_page2);
-            views[2] = (SlideView)fragmentView.findViewById(R.id.login_page3);
+            views[2] = new RegisterView(getParentActivity());
+            views[2].setVisibility(View.GONE);
+            frameLayout.addView(views[2]);
+            layoutParams1 = (FrameLayout.LayoutParams) views[2].getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.leftMargin = AndroidUtilities.dp(16);
+            layoutParams1.rightMargin = AndroidUtilities.dp(16);
+            layoutParams1.topMargin = AndroidUtilities.dp(30);
+            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
+            views[2].setLayoutParams(layoutParams1);
 
             try {
                 if (views[0] == null || views[1] == null || views[2] == null) {
@@ -103,7 +180,7 @@ public void onItemClick(int id) {
                 FileLog.e("tmessages", e);
             }
 
-            actionBarLayer.setTitle(views[0].getHeaderName());
+            actionBar.setTitle(views[0].getHeaderName());
 
             Bundle savedInstanceState = loadCurrentState();
             if (savedInstanceState != null) {
@@ -115,7 +192,6 @@ public void onItemClick(int id) {
                     if (savedInstanceState != null) {
                         v.restoreStateParams(savedInstanceState);
                     }
-                    v.delegate = this;
                     v.setVisibility(currentViewNum == a ? View.VISIBLE : View.GONE);
                 }
             }
@@ -128,23 +204,19 @@ public void onItemClick(int id) {
         return fragmentView;
     }
 
-    private void saveCurrentState() {
-        try {
-            Bundle bundle = new Bundle();
-            bundle.putInt("currentViewNum", currentViewNum);
-            for (int a = 0; a <= currentViewNum; a++) {
-                SlideView v = views[a];
-                if (v != null) {
-                    v.saveStateParams(bundle);
-                }
-            }
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-            editor.clear();
-            putBundleToEditor(bundle, editor, null);
-            editor.commit();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (!AndroidUtilities.isTablet()) {
+            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (!AndroidUtilities.isTablet()) {
+            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
         }
     }
 
@@ -220,6 +292,7 @@ public boolean onBackPressed() {
                     v.onDestroyActivity();
                 }
             }
+            clearCurrentState();
             return true;
         } else if (currentViewNum != 1 && currentViewNum != 2) {
             setPage(0, true, null, true);
@@ -227,7 +300,6 @@ public boolean onBackPressed() {
         return false;
     }
 
-    @Override
     public void needShowAlert(final String text) {
         if (text == null || getParentActivity() == null) {
             return;
@@ -239,7 +311,6 @@ public void needShowAlert(final String text) {
         showAlertDialog(builder);
     }
 
-    @Override
     public void needShowProgress() {
         if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
             return;
@@ -251,7 +322,6 @@ public void needShowProgress() {
         progressDialog.show();
     }
 
-    @Override
     public void needHideProgress() {
         if (progressDialog == null) {
             return;
@@ -271,7 +341,7 @@ public void setPage(int page, boolean animated, Bundle params, boolean back) {
             currentViewNum = page;
 
             newView.setParams(params);
-            actionBarLayer.setTitle(newView.getHeaderName());
+            actionBar.setTitle(newView.getHeaderName());
             newView.onShow();
             newView.setX(back ? -AndroidUtilities.displaySize.x : AndroidUtilities.displaySize.x);
             outView.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
@@ -316,24 +386,1259 @@ public void onAnimationRepeat(Animator animator) {
             currentViewNum = page;
             views[page].setParams(params);
             views[page].setVisibility(View.VISIBLE);
-            actionBarLayer.setTitle(views[page].getHeaderName());
+            actionBar.setTitle(views[page].getHeaderName());
             views[page].onShow();
         }
     }
 
-    @Override
-    public void onNextAction() {
-        views[currentViewNum].onNextPressed();
-    }
-
     @Override
     public void saveSelfArgs(Bundle outState) {
-        saveCurrentState();
+        try {
+            Bundle bundle = new Bundle();
+            bundle.putInt("currentViewNum", currentViewNum);
+            for (int a = 0; a <= currentViewNum; a++) {
+                SlideView v = views[a];
+                if (v != null) {
+                    v.saveStateParams(bundle);
+                }
+            }
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.clear();
+            putBundleToEditor(bundle, editor, null);
+            editor.commit();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
     }
 
-    @Override
     public void needFinishActivity() {
         clearCurrentState();
         presentFragment(new MessagesActivity(null), true);
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
+    }
+
+    public class SlideView extends LinearLayout {
+
+        public SlideView(Context context) {
+            super(context);
+        }
+
+        public String getHeaderName() {
+            return "";
+        }
+
+        public void setParams(Bundle params) {
+
+        }
+
+        public void onBackPressed() {
+
+        }
+
+        public void onShow() {
+
+        }
+
+        public void onDestroyActivity() {
+
+        }
+
+        public void onNextPressed() {
+
+        }
+
+        public void saveStateParams(Bundle bundle) {
+
+        }
+
+        public void restoreStateParams(Bundle bundle) {
+
+        }
+    }
+
+    public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
+
+        private EditText codeField;
+        private EditText phoneField;
+        private TextView countryButton;
+
+        private int countryState = 0;
+
+        private ArrayList<String> countriesArray = new ArrayList<String>();
+        private HashMap<String, String> countriesMap = new HashMap<String, String>();
+        private HashMap<String, String> codesMap = new HashMap<String, String>();
+
+        private boolean ignoreSelection = false;
+        private boolean ignoreOnTextChange = false;
+        private boolean ignoreOnPhoneChange = false;
+        private boolean nextPressed = false;
+
+        public PhoneView(Context context) {
+            super(context);
+
+            setOrientation(VERTICAL);
+
+            countryButton = new TextView(context);
+            countryButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            countryButton.setPadding(AndroidUtilities.dp(12), AndroidUtilities.dp(10), AndroidUtilities.dp(12), 0);
+            countryButton.setTextColor(0xff212121);
+            countryButton.setMaxLines(1);
+            countryButton.setSingleLine(true);
+            countryButton.setEllipsize(TextUtils.TruncateAt.END);
+            countryButton.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
+            countryButton.setBackgroundResource(R.drawable.spinner_states);
+            addView(countryButton);
+            LayoutParams layoutParams = (LayoutParams) countryButton.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(20);
+            layoutParams.rightMargin = AndroidUtilities.dp(20);
+            layoutParams.bottomMargin = AndroidUtilities.dp(14);
+            countryButton.setLayoutParams(layoutParams);
+            countryButton.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    CountrySelectActivity fragment = new CountrySelectActivity();
+                    fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
+                        @Override
+                        public void didSelectCountry(String name) {
+                            selectCountry(name);
+                            phoneField.requestFocus();
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            });
+
+            View view = new View(context);
+            view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
+            view.setBackgroundColor(0xffdbdbdb);
+            addView(view);
+            layoutParams = (LayoutParams) view.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = 1;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(-17.5f);
+            view.setLayoutParams(layoutParams);
+
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setOrientation(HORIZONTAL);
+            addView(linearLayout);
+            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.topMargin = AndroidUtilities.dp(20);
+            linearLayout.setLayoutParams(layoutParams);
+
+            TextView textView = new TextView(context);
+            textView.setText("+");
+            textView.setTextColor(0xff212121);
+            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            linearLayout.addView(textView);
+            layoutParams = (LayoutParams) textView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            textView.setLayoutParams(layoutParams);
+
+            codeField = new EditText(context);
+            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
+            codeField.setTextColor(0xff212121);
+            AndroidUtilities.clearCursorDrawable(codeField);
+            codeField.setPadding(AndroidUtilities.dp(10), 0, 0, 0);
+            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            codeField.setMaxLines(1);
+            codeField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
+            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            InputFilter[] inputFilters = new InputFilter[1];
+            inputFilters[0] = new InputFilter.LengthFilter(4);
+            codeField.setFilters(inputFilters);
+            linearLayout.addView(codeField);
+            layoutParams = (LayoutParams) codeField.getLayoutParams();
+            layoutParams.width = AndroidUtilities.dp(55);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.rightMargin = AndroidUtilities.dp(16);
+            layoutParams.leftMargin = AndroidUtilities.dp(-9);
+            codeField.setLayoutParams(layoutParams);
+            codeField.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (ignoreOnTextChange) {
+                        ignoreOnTextChange = false;
+                        return;
+                    }
+                    ignoreOnTextChange = true;
+                    String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
+                    codeField.setText(text);
+                    if (text.length() == 0) {
+                        countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                        countryState = 1;
+                    } else {
+                        String country = codesMap.get(text);
+                        if (country != null) {
+                            int index = countriesArray.indexOf(country);
+                            if (index != -1) {
+                                ignoreSelection = true;
+                                countryButton.setText(countriesArray.get(index));
+
+                                updatePhoneField();
+                                countryState = 0;
+                            } else {
+                                countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+                                countryState = 2;
+                            }
+                        } else {
+                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+                            countryState = 2;
+                        }
+                        codeField.setSelection(codeField.getText().length());
+                    }
+                }
+            });
+            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        phoneField.requestFocus();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            phoneField = new EditText(context);
+            phoneField.setInputType(InputType.TYPE_CLASS_PHONE);
+            phoneField.setTextColor(0xff212121);
+            phoneField.setHintTextColor(0xff979797);
+            phoneField.setPadding(0, 0, 0, 0);
+            AndroidUtilities.clearCursorDrawable(phoneField);
+            phoneField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            phoneField.setMaxLines(1);
+            phoneField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
+            phoneField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            linearLayout.addView(phoneField);
+            layoutParams = (LayoutParams) phoneField.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            phoneField.setLayoutParams(layoutParams);
+            phoneField.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+                    if (ignoreOnPhoneChange) {
+                        return;
+                    }
+                    if (count == 1 && after == 0 && s.length() > 1) {
+                        String phoneChars = "0123456789";
+                        String str = s.toString();
+                        String substr = str.substring(start, start + 1);
+                        if (!phoneChars.contains(substr)) {
+                            ignoreOnPhoneChange = true;
+                            StringBuilder builder = new StringBuilder(str);
+                            int toDelete = 0;
+                            for (int a = start; a >= 0; a--) {
+                                substr = str.substring(a, a + 1);
+                                if(phoneChars.contains(substr)) {
+                                    break;
+                                }
+                                toDelete++;
+                            }
+                            builder.delete(Math.max(0, start - toDelete), start + 1);
+                            str = builder.toString();
+                            if (PhoneFormat.strip(str).length() == 0) {
+                                phoneField.setText("");
+                            } else {
+                                phoneField.setText(str);
+                                updatePhoneField();
+                            }
+                            ignoreOnPhoneChange = false;
+                        }
+                    }
+                }
+
+                @Override
+                public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable s) {
+                    if (ignoreOnPhoneChange) {
+                        return;
+                    }
+                    updatePhoneField();
+                }
+            });
+            phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        onNextPressed();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            textView = new TextView(context);
+            textView.setText(LocaleController.getString("StartText", R.string.StartText));
+            textView.setTextColor(0xff757575);
+            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            textView.setGravity(Gravity.LEFT);
+            textView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            addView(textView);
+            layoutParams = (LayoutParams) textView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(28);
+            layoutParams.bottomMargin = AndroidUtilities.dp(10);
+            layoutParams.gravity = Gravity.LEFT;
+            textView.setLayoutParams(layoutParams);
+
+            HashMap<String, String> languageMap = new HashMap<String, String>();
+            try {
+                BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().getAssets().open("countries.txt")));
+                String line;
+                while ((line = reader.readLine()) != null) {
+                    String[] args = line.split(";");
+                    countriesArray.add(0, args[2]);
+                    countriesMap.put(args[2], args[0]);
+                    codesMap.put(args[0], args[2]);
+                    languageMap.put(args[1], args[2]);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            Collections.sort(countriesArray, new Comparator<String>() {
+                @Override
+                public int compare(String lhs, String rhs) {
+                    return lhs.compareTo(rhs);
+                }
+            });
+
+            String country = null;
+
+            try {
+                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                if (telephonyManager != null) {
+                    country = telephonyManager.getSimCountryIso().toUpperCase();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            if (country != null) {
+                String countryName = languageMap.get(country);
+                if (countryName != null) {
+                    int index = countriesArray.indexOf(countryName);
+                    if (index != -1) {
+                        codeField.setText(countriesMap.get(countryName));
+                        countryState = 0;
+                    }
+                }
+            }
+            if (codeField.length() == 0) {
+                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                countryState = 1;
+            }
+
+            if (codeField.length() != 0) {
+                AndroidUtilities.showKeyboard(phoneField);
+                phoneField.requestFocus();
+            } else {
+                AndroidUtilities.showKeyboard(codeField);
+                codeField.requestFocus();
+            }
+        }
+
+        public void selectCountry(String name) {
+            int index = countriesArray.indexOf(name);
+            if (index != -1) {
+                ignoreOnTextChange = true;
+                codeField.setText(countriesMap.get(name));
+                countryButton.setText(name);
+                countryState = 0;
+            }
+        }
+
+        private void updatePhoneField() {
+            ignoreOnPhoneChange = true;
+            String codeText = codeField.getText().toString();
+            String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
+            int idx = phone.indexOf(" ");
+            if (idx != -1) {
+                String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
+                if (!codeText.equals(resultCode)) {
+                    phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
+                    phoneField.setText(phone);
+                    int len = phoneField.length();
+                    phoneField.setSelection(phoneField.length());
+                } else {
+                    phoneField.setText(phone.substring(idx).trim());
+                    int len = phoneField.length();
+                    phoneField.setSelection(phoneField.length());
+                }
+            } else {
+                phoneField.setSelection(phoneField.length());
+            }
+            ignoreOnPhoneChange = false;
+        }
+
+        @Override
+        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+            if (ignoreSelection) {
+                ignoreSelection = false;
+                return;
+            }
+            ignoreOnTextChange = true;
+            String str = countriesArray.get(i);
+            codeField.setText(countriesMap.get(str));
+            updatePhoneField();
+        }
+
+        @Override
+        public void onNothingSelected(AdapterView<?> adapterView) {
+
+        }
+
+        @Override
+        public void onNextPressed() {
+            if (nextPressed) {
+                return;
+            }
+            if (countryState == 1) {
+                needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                return;
+            } else if (countryState == 2) {
+                needShowAlert(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+                return;
+            }
+            if (codeField.length() == 0) {
+                needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                return;
+            }
+            TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
+            String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
+            ConnectionsManager.getInstance().applyCountryPortNumber(phone);
+            req.api_hash = BuildVars.APP_HASH;
+            req.api_id = BuildVars.APP_ID;
+            req.sms_type = 0;
+            req.phone_number = phone;
+            req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
+            if (req.lang_code == null || req.lang_code.length() == 0) {
+                req.lang_code = "en";
+            }
+
+            final Bundle params = new Bundle();
+            params.putString("phone", "+" + codeField.getText() + phoneField.getText());
+            params.putString("phoneFormated", phone);
+            nextPressed = true;
+            needShowProgress();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            nextPressed = false;
+                            if (error == null) {
+                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
+                                params.putString("phoneHash", res.phone_code_hash);
+                                params.putInt("calltime", res.send_call_timeout * 1000);
+                                if (res.phone_registered) {
+                                    params.putString("registered", "true");
+                                }
+                                setPage(1, true, params, false);
+                            } else {
+                                if (error.text != null) {
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else {
+                                        needShowAlert(error.text);
+                                    }
+                                }
+                            }
+                            needHideProgress();
+                        }
+                    });
+                }
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc | RPCRequest.RPCRequestClassEnableUnauthorized);
+        }
+
+        @Override
+        public void onShow() {
+            super.onShow();
+            if (phoneField != null) {
+                phoneField.requestFocus();
+                phoneField.setSelection(phoneField.length());
+            }
+        }
+
+        @Override
+        public String getHeaderName() {
+            return LocaleController.getString("YourPhone", R.string.YourPhone);
+        }
+
+        @Override
+        public void saveStateParams(Bundle bundle) {
+            String code = codeField.getText().toString();
+            if (code != null && code.length() != 0) {
+                bundle.putString("phoneview_code", code);
+            }
+            String phone = phoneField.getText().toString();
+            if (phone != null && phone.length() != 0) {
+                bundle.putString("phoneview_phone", phone);
+            }
+        }
+
+        @Override
+        public void restoreStateParams(Bundle bundle) {
+            String code = bundle.getString("phoneview_code");
+            if (code != null) {
+                codeField.setText(code);
+            }
+            String phone = bundle.getString("phoneview_phone");
+            if (phone != null) {
+                phoneField.setText(phone);
+            }
+        }
+    }
+
+    public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
+
+        private String phoneHash;
+        private String requestPhone;
+        private String registered;
+        private EditText codeField;
+        private TextView confirmTextView;
+        private TextView timeText;
+        private TextView problemText;
+        private Bundle currentParams;
+
+        private Timer timeTimer;
+        private Timer codeTimer;
+        private final Object timerSync = new Object();
+        private volatile int time = 60000;
+        private volatile int codeTime = 15000;
+        private double lastCurrentTime;
+        private double lastCodeTime;
+        private boolean waitingForSms = false;
+        private boolean nextPressed = false;
+        private String lastError = "";
+
+        public class TypefaceSpan extends MetricAffectingSpan {
+
+            private Typeface mTypeface;
+
+            public TypefaceSpan(Typeface typeface) {
+                mTypeface = typeface;
+            }
+
+            @Override
+            public void updateMeasureState(TextPaint p) {
+                p.setTypeface(mTypeface);
+                p.setFlags(p.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
+            }
+
+            @Override
+            public void updateDrawState(TextPaint tp) {
+                tp.setTypeface(mTypeface);
+                tp.setFlags(tp.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
+            }
+        }
+
+        public LoginActivitySmsView(Context context) {
+            super(context);
+
+            setOrientation(VERTICAL);
+
+            confirmTextView = new TextView(context);
+            confirmTextView.setTextColor(0xff757575);
+            confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            confirmTextView.setGravity(Gravity.LEFT);
+            confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            addView(confirmTextView);
+            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            confirmTextView.setLayoutParams(layoutParams);
+
+            codeField = new EditText(context);
+            codeField.setTextColor(0xff212121);
+            codeField.setHint(LocaleController.getString("Code", R.string.Code));
+            AndroidUtilities.clearCursorDrawable(codeField);
+            codeField.setHintTextColor(0xff979797);
+            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
+            codeField.setMaxLines(1);
+            codeField.setPadding(0, 0, 0, 0);
+            addView(codeField);
+            layoutParams = (LayoutParams) codeField.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
+            layoutParams.topMargin = AndroidUtilities.dp(20);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            codeField.setLayoutParams(layoutParams);
+            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        onNextPressed();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            timeText = new TextView(context);
+            timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            timeText.setTextColor(0xff757575);
+            timeText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            timeText.setGravity(Gravity.LEFT);
+            addView(timeText);
+            layoutParams = (LayoutParams) timeText.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.LEFT;
+            layoutParams.topMargin = AndroidUtilities.dp(30);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            timeText.setLayoutParams(layoutParams);
+
+            problemText = new TextView(context);
+            problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
+            problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+            problemText.setGravity(Gravity.LEFT);
+            problemText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            problemText.setTextColor(0xff4d83b3);
+            problemText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            problemText.setPadding(0, AndroidUtilities.dp(2), 0, AndroidUtilities.dp(12));
+            addView(problemText);
+            layoutParams = (LayoutParams) problemText.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.LEFT;
+            layoutParams.topMargin = AndroidUtilities.dp(20);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            problemText.setLayoutParams(layoutParams);
+            problemText.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    try {
+                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                        String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
+
+                        Intent mailer = new Intent(Intent.ACTION_SEND);
+                        mailer.setType("message/rfc822");
+                        mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@telegram.org"});
+                        mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + requestPhone);
+                        mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
+                        getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
+                    } catch (Exception e) {
+                        needShowAlert(LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
+                    }
+                }
+            });
+
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
+            addView(linearLayout);
+            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = LayoutParams.MATCH_PARENT;
+            linearLayout.setLayoutParams(layoutParams);
+
+            TextView wrongNumber = new TextView(context);
+            wrongNumber.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
+            wrongNumber.setTextColor(0xff4d83b3);
+            wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
+            linearLayout.addView(wrongNumber);
+            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+            layoutParams.bottomMargin = AndroidUtilities.dp(10);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            wrongNumber.setLayoutParams(layoutParams);
+            wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
+            wrongNumber.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    onBackPressed();
+                    setPage(0, true, null, true);
+                }
+            });
+        }
+
+        @Override
+        public String getHeaderName() {
+            return LocaleController.getString("YourCode", R.string.YourCode);
+        }
+
+        @Override
+        public void setParams(Bundle params) {
+            if (params == null) {
+                return;
+            }
+            codeField.setText("");
+            AndroidUtilities.setWaitingForSms(true);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
+            currentParams = params;
+            waitingForSms = true;
+            String phone = params.getString("phone");
+            requestPhone = params.getString("phoneFormated");
+            phoneHash = params.getString("phoneHash");
+            registered = params.getString("registered");
+            time = params.getInt("calltime");
+
+            if (phone == null) {
+                return;
+            }
+
+            String number = PhoneFormat.getInstance().format(phone);
+            String str = String.format(Locale.US, LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
+            try {
+                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
+                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                int idx = str.indexOf(number);
+                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
+                confirmTextView.setText(stringBuilder);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                confirmTextView.setText(str);
+            }
+
+            AndroidUtilities.showKeyboard(codeField);
+            codeField.requestFocus();
+
+            destroyTimer();
+            destroyCodeTimer();
+            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
+            lastCurrentTime = System.currentTimeMillis();
+            problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+
+            createTimer();
+        }
+
+        private void createCodeTimer() {
+            if (codeTimer != null) {
+                return;
+            }
+            codeTime = 15000;
+            codeTimer = new Timer();
+            lastCodeTime = System.currentTimeMillis();
+            codeTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    double currentTime = System.currentTimeMillis();
+                    double diff = currentTime - lastCodeTime;
+                    codeTime -= diff;
+                    lastCodeTime = currentTime;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (codeTime <= 1000) {
+                                problemText.setVisibility(VISIBLE);
+                                destroyCodeTimer();
+                            }
+                        }
+                    });
+                }
+            }, 0, 1000);
+        }
+
+        private void destroyCodeTimer() {
+            try {
+                synchronized(timerSync) {
+                    if (codeTimer != null) {
+                        codeTimer.cancel();
+                        codeTimer = null;
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+
+        private void createTimer() {
+            if (timeTimer != null) {
+                return;
+            }
+            timeTimer = new Timer();
+            timeTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    double currentTime = System.currentTimeMillis();
+                    double diff = currentTime - lastCurrentTime;
+                    time -= diff;
+                    lastCurrentTime = currentTime;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (time >= 1000) {
+                                int minutes = time / 1000 / 60;
+                                int seconds = time / 1000 - minutes * 60;
+                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                            } else {
+                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                                destroyTimer();
+                                createCodeTimer();
+                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
+                                req.phone_number = requestPhone;
+                                req.phone_code_hash = phoneHash;
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(TLObject response, final TLRPC.TL_error error) {
+                                        if (error != null && error.text != null) {
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    lastError = error.text;
+                                                }
+                                            });
+                                        }
+                                    }
+                                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
+                            }
+                        }
+                    });
+                }
+            }, 0, 1000);
+        }
+
+        private void destroyTimer() {
+            try {
+                synchronized(timerSync) {
+                    if (timeTimer != null) {
+                        timeTimer.cancel();
+                        timeTimer = null;
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+
+        @Override
+        public void onNextPressed() {
+            if (nextPressed) {
+                return;
+            }
+            nextPressed = true;
+            waitingForSms = false;
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
+            req.phone_number = requestPhone;
+            req.phone_code = codeField.getText().toString();
+            req.phone_code_hash = phoneHash;
+            destroyTimer();
+            needShowProgress();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            needHideProgress();
+                            nextPressed = false;
+                            if (error == null) {
+                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
+                                destroyTimer();
+                                destroyCodeTimer();
+                                UserConfig.clearConfig();
+                                MessagesController.getInstance().cleanUp();
+                                UserConfig.setCurrentUser(res.user);
+                                UserConfig.saveConfig(true);
+                                MessagesStorage.getInstance().cleanUp(true);
+                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                users.add(res.user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                MessagesController.getInstance().putUser(res.user, false);
+                                ContactsController.getInstance().checkAppAccount();
+                                MessagesController.getInstance().getBlockedUsers(true);
+                                needFinishActivity();
+                                ConnectionsManager.getInstance().initPushConnection();
+                            } else {
+                                lastError = error.text;
+
+                                if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
+                                    Bundle params = new Bundle();
+                                    params.putString("phoneFormated", requestPhone);
+                                    params.putString("phoneHash", phoneHash);
+                                    params.putString("code", req.phone_code);
+                                    setPage(2, true, params, false);
+                                    destroyTimer();
+                                    destroyCodeTimer();
+                                } else {
+                                    createTimer();
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else {
+                                        needShowAlert(error.text);
+                                    }
+                                }
+                            }
+                        }
+                    });
+                }
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
+        }
+
+        @Override
+        public void onBackPressed() {
+            destroyTimer();
+            destroyCodeTimer();
+            currentParams = null;
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            waitingForSms = false;
+        }
+
+        @Override
+        public void onDestroyActivity() {
+            super.onDestroyActivity();
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            destroyTimer();
+            destroyCodeTimer();
+            waitingForSms = false;
+        }
+
+        @Override
+        public void onShow() {
+            super.onShow();
+            if (codeField != null) {
+                codeField.requestFocus();
+                codeField.setSelection(codeField.length());
+            }
+        }
+
+        @Override
+        public void didReceivedNotification(int id, final Object... args) {
+            if (id == NotificationCenter.didReceiveSmsCode) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (!waitingForSms) {
+                            return;
+                        }
+                        if (codeField != null) {
+                            codeField.setText("" + args[0]);
+                            onNextPressed();
+                        }
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void saveStateParams(Bundle bundle) {
+            String code = codeField.getText().toString();
+            if (code != null && code.length() != 0) {
+                bundle.putString("smsview_code", code);
+            }
+            if (currentParams != null) {
+                bundle.putBundle("smsview_params", currentParams);
+            }
+            if (time != 0) {
+                bundle.putInt("time", time);
+            }
+        }
+
+        @Override
+        public void restoreStateParams(Bundle bundle) {
+            currentParams = bundle.getBundle("smsview_params");
+            if (currentParams != null) {
+                setParams(currentParams);
+            }
+            String code = bundle.getString("smsview_code");
+            if (code != null) {
+                codeField.setText(code);
+            }
+            Integer t = bundle.getInt("time");
+            if (t != 0) {
+                time = t;
+            }
+        }
+    }
+
+    public class RegisterView extends SlideView {
+
+        private EditText firstNameField;
+        private EditText lastNameField;
+        private String requestPhone;
+        private String phoneHash;
+        private String phoneCode;
+        private Bundle currentParams;
+        private boolean nextPressed = false;
+
+        public RegisterView(Context context) {
+            super(context);
+
+            setOrientation(VERTICAL);
+
+            TextView textView = new TextView(context);
+            textView.setText(LocaleController.getString("RegisterText", R.string.RegisterText));
+            textView.setTextColor(0xff757575);
+            textView.setGravity(Gravity.LEFT);
+            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            addView(textView);
+            LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.topMargin = AndroidUtilities.dp(8);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.gravity = Gravity.LEFT;
+            textView.setLayoutParams(layoutParams);
+
+            firstNameField = new EditText(context);
+            firstNameField.setHintTextColor(0xff979797);
+            firstNameField.setTextColor(0xff212121);
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            firstNameField.setMaxLines(1);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_WORDS);
+            addView(firstNameField);
+            layoutParams = (LayoutParams) firstNameField.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(26);
+            firstNameField.setLayoutParams(layoutParams);
+            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        lastNameField.requestFocus();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            lastNameField = new EditText(context);
+            lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+            lastNameField.setHintTextColor(0xff979797);
+            lastNameField.setTextColor(0xff212121);
+            AndroidUtilities.clearCursorDrawable(lastNameField);
+            lastNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            lastNameField.setMaxLines(1);
+            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_WORDS);
+            addView(lastNameField);
+            layoutParams = (LayoutParams) lastNameField.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(10);
+            lastNameField.setLayoutParams(layoutParams);
+
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
+            addView(linearLayout);
+            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = LayoutParams.MATCH_PARENT;
+            linearLayout.setLayoutParams(layoutParams);
+
+            TextView wrongNumber = new TextView(context);
+            wrongNumber.setText(LocaleController.getString("CancelRegistration", R.string.CancelRegistration));
+            wrongNumber.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
+            wrongNumber.setTextColor(0xff4d83b3);
+            wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
+            linearLayout.addView(wrongNumber);
+            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+            layoutParams.bottomMargin = AndroidUtilities.dp(10);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            wrongNumber.setLayoutParams(layoutParams);
+            wrongNumber.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setMessage(LocaleController.getString("AreYouSureRegistration", R.string.AreYouSureRegistration));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            onBackPressed();
+                            setPage(0, true, null, true);
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showAlertDialog(builder);
+                }
+            });
+        }
+
+        @Override
+        public void onBackPressed() {
+            currentParams = null;
+        }
+
+        @Override
+        public String getHeaderName() {
+            return LocaleController.getString("YourName", R.string.YourName);
+        }
+
+        @Override
+        public void onShow() {
+            super.onShow();
+            if (firstNameField != null) {
+                firstNameField.requestFocus();
+                firstNameField.setSelection(firstNameField.length());
+            }
+        }
+
+        @Override
+        public void setParams(Bundle params) {
+            if (params == null) {
+                return;
+            }
+            firstNameField.setText("");
+            lastNameField.setText("");
+            requestPhone = params.getString("phoneFormated");
+            phoneHash = params.getString("phoneHash");
+            phoneCode = params.getString("code");
+            currentParams = params;
+        }
+
+        @Override
+        public void onNextPressed() {
+            if (nextPressed) {
+                return;
+            }
+            nextPressed = true;
+            TLRPC.TL_auth_signUp req = new TLRPC.TL_auth_signUp();
+            req.phone_code = phoneCode;
+            req.phone_code_hash = phoneHash;
+            req.phone_number = requestPhone;
+            req.first_name = firstNameField.getText().toString();
+            req.last_name = lastNameField.getText().toString();
+            needShowProgress();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            nextPressed = false;
+                            needHideProgress();
+                            if (error == null) {
+                                final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
+                                TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
+                                UserConfig.clearConfig();
+                                MessagesController.getInstance().cleanUp();
+                                UserConfig.setCurrentUser(user);
+                                UserConfig.saveConfig(true);
+                                MessagesStorage.getInstance().cleanUp(true);
+                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                users.add(user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
+                                MessagesController.getInstance().putUser(res.user, false);
+                                ContactsController.getInstance().checkAppAccount();
+                                MessagesController.getInstance().getBlockedUsers(true);
+                                needFinishActivity();
+                                ConnectionsManager.getInstance().initPushConnection();
+                            } else {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
+                                } else if (error.text.contains("LASTNAME_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
+                                } else {
+                                    needShowAlert(error.text);
+                                }
+                            }
+                        }
+                    });
+                }
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin);
+        }
+
+        @Override
+        public void saveStateParams(Bundle bundle) {
+            String first = firstNameField.getText().toString();
+            if (first != null && first.length() != 0) {
+                bundle.putString("registerview_first", first);
+            }
+            String last = lastNameField.getText().toString();
+            if (last != null && last.length() != 0) {
+                bundle.putString("registerview_last", last);
+            }
+            if (currentParams != null) {
+                bundle.putBundle("registerview_params", currentParams);
+            }
+        }
+
+        @Override
+        public void restoreStateParams(Bundle bundle) {
+            currentParams = bundle.getBundle("registerview_params");
+            if (currentParams != null) {
+                setParams(currentParams);
+            }
+            String first = bundle.getString("registerview_first");
+            if (first != null) {
+                firstNameField.setText(first);
+            }
+            String last = bundle.getString("registerview_last");
+            if (last != null) {
+                lastNameField.setText(last);
+            }
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
deleted file mode 100644
index 79d0926cf..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
+++ /dev/null
@@ -1,437 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.util.AttributeSet;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.BuildVars;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SlideView;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Locale;
-
-public class LoginActivityPhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
-    private EditText codeField;
-    private EditText phoneField;
-    private TextView countryButton;
-
-    private int countryState = 0;
-
-    private ArrayList<String> countriesArray = new ArrayList<String>();
-    private HashMap<String, String> countriesMap = new HashMap<String, String>();
-    private HashMap<String, String> codesMap = new HashMap<String, String>();
-    private HashMap<String, String> languageMap = new HashMap<String, String>();
-
-    private boolean ignoreSelection = false;
-    private boolean ignoreOnTextChange = false;
-    private boolean ignoreOnPhoneChange = false;
-    private boolean nextPressed = false;
-
-    public LoginActivityPhoneView(Context context) {
-        super(context);
-    }
-
-    public LoginActivityPhoneView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public LoginActivityPhoneView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    @Override
-    protected void onFinishInflate() {
-        super.onFinishInflate();
-
-        TextView textView = (TextView)findViewById(R.id.login_confirm_text);
-        textView.setText(LocaleController.getString("StartText", R.string.StartText));
-
-        countryButton = (TextView)findViewById(R.id.login_coutry_textview);
-        countryButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (delegate == null) {
-                    return;
-                }
-                BaseFragment activity = (BaseFragment)delegate;
-                CountrySelectActivity fragment = new CountrySelectActivity();
-                fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
-                    @Override
-                    public void didSelectCountry(String name) {
-                        selectCountry(name);
-                        phoneField.requestFocus();
-                    }
-                });
-                activity.presentFragment(fragment);
-            }
-        });
-
-        codeField = (EditText)findViewById(R.id.login_county_code_field);
-        codeField.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-            }
-
-            @Override
-            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-            }
-
-            @Override
-            public void afterTextChanged(Editable editable) {
-                if (ignoreOnTextChange) {
-                    ignoreOnTextChange = false;
-                    return;
-                }
-                ignoreOnTextChange = true;
-                String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
-                codeField.setText(text);
-                if (text.length() == 0) {
-                    countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                    countryState = 1;
-                } else {
-                    String country = codesMap.get(text);
-                    if (country != null) {
-                        int index = countriesArray.indexOf(country);
-                        if (index != -1) {
-                            ignoreSelection = true;
-                            countryButton.setText(countriesArray.get(index));
-
-                            updatePhoneField();
-                            countryState = 0;
-                        } else {
-                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                            countryState = 2;
-                        }
-                    } else {
-                        countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                        countryState = 2;
-                    }
-                    codeField.setSelection(codeField.getText().length());
-                }
-            }
-        });
-        codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    phoneField.requestFocus();
-                    return true;
-                }
-                return false;
-            }
-        });
-        phoneField = (EditText)findViewById(R.id.login_phone_field);
-        phoneField.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                if (ignoreOnPhoneChange) {
-                    return;
-                }
-                if (count == 1 && after == 0 && s.length() > 1) {
-                    String phoneChars = "0123456789";
-                    String str = s.toString();
-                    String substr = str.substring(start, start + 1);
-                    if (!phoneChars.contains(substr)) {
-                        ignoreOnPhoneChange = true;
-                        StringBuilder builder = new StringBuilder(str);
-                        int toDelete = 0;
-                        for (int a = start; a >= 0; a--) {
-                            substr = str.substring(a, a + 1);
-                            if(phoneChars.contains(substr)) {
-                                break;
-                            }
-                            toDelete++;
-                        }
-                        builder.delete(Math.max(0, start - toDelete), start + 1);
-                        str = builder.toString();
-                        if (PhoneFormat.strip(str).length() == 0) {
-                            phoneField.setText("");
-                        } else {
-                            phoneField.setText(str);
-                            updatePhoneField();
-                        }
-                        ignoreOnPhoneChange = false;
-                    }
-                }
-            }
-
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-            }
-
-            @Override
-            public void afterTextChanged(Editable s) {
-                if (ignoreOnPhoneChange) {
-                    return;
-                }
-                updatePhoneField();
-            }
-        });
-
-        if(!isInEditMode()) {
-            try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().getAssets().open("countries.txt")));
-                String line;
-                while ((line = reader.readLine()) != null) {
-                    String[] args = line.split(";");
-                    countriesArray.add(0, args[2]);
-                    countriesMap.put(args[2], args[0]);
-                    codesMap.put(args[0], args[2]);
-                    languageMap.put(args[1], args[2]);
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            Collections.sort(countriesArray, new Comparator<String>() {
-                @Override
-                public int compare(String lhs, String rhs) {
-                    return lhs.compareTo(rhs);
-                }
-            });
-
-            String country = null;
-
-            try {
-                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                if (telephonyManager != null) {
-                    country = telephonyManager.getSimCountryIso().toUpperCase();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            if (country != null) {
-                String countryName = languageMap.get(country);
-                if (countryName != null) {
-                    int index = countriesArray.indexOf(countryName);
-                    if (index != -1) {
-                        codeField.setText(countriesMap.get(countryName));
-                        countryState = 0;
-                    }
-                }
-            }
-            if (codeField.length() == 0) {
-                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                countryState = 1;
-            }
-        }
-
-        if (codeField.length() != 0) {
-            AndroidUtilities.showKeyboard(phoneField);
-            phoneField.requestFocus();
-        } else {
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-        }
-        phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    delegate.onNextAction();
-                    return true;
-                }
-                return false;
-            }
-        });
-    }
-
-    public void selectCountry(String name) {
-        int index = countriesArray.indexOf(name);
-        if (index != -1) {
-            ignoreOnTextChange = true;
-            codeField.setText(countriesMap.get(name));
-            countryButton.setText(name);
-            countryState = 0;
-        }
-    }
-
-    private void updatePhoneField() {
-        ignoreOnPhoneChange = true;
-        String codeText = codeField.getText().toString();
-        String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
-        int idx = phone.indexOf(" ");
-        if (idx != -1) {
-            String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
-            if (!codeText.equals(resultCode)) {
-                phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
-                phoneField.setText(phone);
-                int len = phoneField.length();
-                phoneField.setSelection(phoneField.length());
-            } else {
-                phoneField.setText(phone.substring(idx).trim());
-                int len = phoneField.length();
-                phoneField.setSelection(phoneField.length());
-            }
-        } else {
-            phoneField.setSelection(phoneField.length());
-        }
-        ignoreOnPhoneChange = false;
-    }
-
-    @Override
-    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-        if (ignoreSelection) {
-            ignoreSelection = false;
-            return;
-        }
-        ignoreOnTextChange = true;
-        String str = countriesArray.get(i);
-        codeField.setText(countriesMap.get(str));
-        updatePhoneField();
-    }
-
-    @Override
-    public void onNothingSelected(AdapterView<?> adapterView) {
-
-    }
-
-    @Override
-    public void onNextPressed() {
-        if (nextPressed) {
-            return;
-        }
-        if (countryState == 1) {
-            delegate.needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-            return;
-        } else if (countryState == 2) {
-            delegate.needShowAlert(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-            return;
-        }
-        if (codeField.length() == 0) {
-            delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-            return;
-        }
-        TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
-        String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
-        ConnectionsManager.getInstance().applyCountryPortNumber(phone);
-        req.api_hash = BuildVars.APP_HASH;
-        req.api_id = BuildVars.APP_ID;
-        req.sms_type = 0;
-        req.phone_number = phone;
-        req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
-        if (req.lang_code == null || req.lang_code.length() == 0) {
-            req.lang_code = "en";
-        }
-
-        final Bundle params = new Bundle();
-        params.putString("phone", "+" + codeField.getText() + phoneField.getText());
-        params.putString("phoneFormated", phone);
-        nextPressed = true;
-        if (delegate != null) {
-            delegate.needShowProgress();
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        nextPressed = false;
-                        if (error == null) {
-                            final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
-                            params.putString("phoneHash", res.phone_code_hash);
-                            params.putInt("calltime", res.send_call_timeout * 1000);
-                            if (res.phone_registered) {
-                                params.putString("registered", "true");
-                            }
-                            if (delegate != null) {
-                                delegate.setPage(1, true, params, false);
-                            }
-                        } else {
-                            if (delegate != null && error.text != null) {
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                } else {
-                                    delegate.needShowAlert(error.text);
-                                }
-                            }
-                        }
-                        if (delegate != null) {
-                            delegate.needHideProgress();
-                        }
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc | RPCRequest.RPCRequestClassEnableUnauthorized);
-    }
-
-    @Override
-    public void onShow() {
-        super.onShow();
-        if (phoneField != null) {
-            phoneField.requestFocus();
-            phoneField.setSelection(phoneField.length());
-        }
-    }
-
-    @Override
-    public String getHeaderName() {
-        return LocaleController.getString("YourPhone", R.string.YourPhone);
-    }
-
-    @Override
-    public void saveStateParams(Bundle bundle) {
-        String code = codeField.getText().toString();
-        if (code != null && code.length() != 0) {
-            bundle.putString("phoneview_code", code);
-        }
-        String phone = phoneField.getText().toString();
-        if (phone != null && phone.length() != 0) {
-            bundle.putString("phoneview_phone", phone);
-        }
-    }
-
-    @Override
-    public void restoreStateParams(Bundle bundle) {
-        String code = bundle.getString("phoneview_code");
-        if (code != null) {
-            codeField.setText(code);
-        }
-        String phone = bundle.getString("phoneview_phone");
-        if (phone != null) {
-            phoneField.setText(phone);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
deleted file mode 100644
index be477fe5f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Views.SlideView;
-
-import java.util.ArrayList;
-
-public class LoginActivityRegisterView extends SlideView {
-    private EditText firstNameField;
-    private EditText lastNameField;
-    private String requestPhone;
-    private String phoneHash;
-    private String phoneCode;
-    private Bundle currentParams;
-    private boolean nextPressed = false;
-
-    public LoginActivityRegisterView(Context context) {
-        super(context);
-    }
-
-    public LoginActivityRegisterView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public LoginActivityRegisterView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    @Override
-    protected void onFinishInflate() {
-        super.onFinishInflate();
-
-        firstNameField = (EditText)findViewById(R.id.login_first_name_field);
-        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
-        lastNameField = (EditText)findViewById(R.id.login_last_name_field);
-        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
-
-        TextView textView = (TextView)findViewById(R.id.login_register_info);
-        textView.setText(LocaleController.getString("RegisterText", R.string.RegisterText));
-
-        TextView wrongNumber = (TextView) findViewById(R.id.changed_mind);
-        wrongNumber.setText(LocaleController.getString("CancelRegistration", R.string.CancelRegistration));
-
-        wrongNumber.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onBackPressed();
-                delegate.setPage(0, true, null, true);
-            }
-        });
-
-        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    lastNameField.requestFocus();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-    }
-
-    @Override
-    public void onBackPressed() {
-        currentParams = null;
-    }
-
-    @Override
-    public String getHeaderName() {
-        return LocaleController.getString("YourName", R.string.YourName);
-    }
-
-    @Override
-    public void onShow() {
-        super.onShow();
-        if (firstNameField != null) {
-            firstNameField.requestFocus();
-            firstNameField.setSelection(firstNameField.length());
-        }
-    }
-
-    @Override
-    public void setParams(Bundle params) {
-        if (params == null) {
-            return;
-        }
-        firstNameField.setText("");
-        lastNameField.setText("");
-        requestPhone = params.getString("phoneFormated");
-        phoneHash = params.getString("phoneHash");
-        phoneCode = params.getString("code");
-        currentParams = params;
-    }
-
-    @Override
-    public void onNextPressed() {
-        if (nextPressed) {
-            return;
-        }
-        nextPressed = true;
-        TLRPC.TL_auth_signUp req = new TLRPC.TL_auth_signUp();
-        req.phone_code = phoneCode;
-        req.phone_code_hash = phoneHash;
-        req.phone_number = requestPhone;
-        req.first_name = firstNameField.getText().toString();
-        req.last_name = lastNameField.getText().toString();
-        if (delegate != null) {
-            delegate.needShowProgress();
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        nextPressed = false;
-                        if (delegate != null) {
-                            delegate.needHideProgress();
-                        }
-                        if (error == null) {
-                            final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                            TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
-                            UserConfig.clearConfig();
-                            MessagesController.getInstance().cleanUp();
-                            UserConfig.setCurrentUser(user);
-                            UserConfig.saveConfig(true);
-                            MessagesStorage.getInstance().cleanUp(true);
-                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                            users.add(user);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                            //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
-                            MessagesController.getInstance().putUser(res.user, false);
-                            ContactsController.getInstance().checkAppAccount();
-                            MessagesController.getInstance().getBlockedUsers(true);
-                            if (delegate != null) {
-                                delegate.needFinishActivity();
-                            }
-                            ConnectionsManager.getInstance().initPushConnection();
-                        } else {
-                            if (delegate != null) {
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
-                                } else if (error.text.contains("LASTNAME_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
-                                } else {
-                                    delegate.needShowAlert(error.text);
-                                }
-                            }
-                        }
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin);
-    }
-
-    @Override
-    public void saveStateParams(Bundle bundle) {
-        String first = firstNameField.getText().toString();
-        if (first != null && first.length() != 0) {
-            bundle.putString("registerview_first", first);
-        }
-        String last = lastNameField.getText().toString();
-        if (last != null && last.length() != 0) {
-            bundle.putString("registerview_last", last);
-        }
-        if (currentParams != null) {
-            bundle.putBundle("registerview_params", currentParams);
-        }
-    }
-
-    @Override
-    public void restoreStateParams(Bundle bundle) {
-        currentParams = bundle.getBundle("registerview_params");
-        if (currentParams != null) {
-            setParams(currentParams);
-        }
-        String first = bundle.getString("registerview_first");
-        if (first != null) {
-            firstNameField.setText(first);
-        }
-        String last = bundle.getString("registerview_last");
-        if (last != null) {
-            lastNameField.setText(last);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
deleted file mode 100644
index d9187fba1..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ /dev/null
@@ -1,426 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.Html;
-import android.util.AttributeSet;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Views.SlideView;
-
-import java.util.ArrayList;
-import java.util.Locale;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
-    private String phoneHash;
-    private String requestPhone;
-    private String registered;
-    private EditText codeField;
-    private TextView confirmTextView;
-    private TextView timeText;
-    private TextView problemText;
-    private Bundle currentParams;
-
-    private Timer timeTimer;
-    private Timer codeTimer;
-    private static final Object timerSync = new Object();
-    private volatile int time = 60000;
-    private volatile int codeTime = 15000;
-    private double lastCurrentTime;
-    private double lastCodeTime;
-    private boolean waitingForSms = false;
-    private boolean nextPressed = false;
-    private String lastError = "";
-
-    public LoginActivitySmsView(Context context) {
-        super(context);
-    }
-
-    public LoginActivitySmsView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public LoginActivitySmsView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    @Override
-    protected void onFinishInflate() {
-        super.onFinishInflate();
-
-        confirmTextView = (TextView)findViewById(R.id.login_sms_confirm_text);
-        codeField = (EditText)findViewById(R.id.login_sms_code_field);
-        codeField.setHint(LocaleController.getString("Code", R.string.Code));
-        timeText = (TextView)findViewById(R.id.login_time_text);
-        problemText = (TextView)findViewById(R.id.login_problem);
-        TextView wrongNumber = (TextView) findViewById(R.id.wrong_number);
-        wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
-        problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
-        problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
-
-        wrongNumber.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onBackPressed();
-                delegate.setPage(0, true, null, true);
-            }
-        });
-
-        problemText.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                try {
-                    PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                    String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
-
-                    Intent mailer = new Intent(Intent.ACTION_SEND);
-                    mailer.setType("message/rfc822");
-                    mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@telegram.org"});
-                    mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + requestPhone);
-                    mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
-                    getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
-                } catch (Exception e) {
-                    if (delegate != null) {
-                        delegate.needShowAlert(LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
-                    }
-                }
-            }
-        });
-
-        codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    if (delegate != null) {
-                        delegate.onNextAction();
-                    }
-                    return true;
-                }
-                return false;
-            }
-        });
-    }
-
-    @Override
-    public String getHeaderName() {
-        return LocaleController.getString("YourCode", R.string.YourCode);
-    }
-
-    @Override
-    public void setParams(Bundle params) {
-        if (params == null) {
-            return;
-        }
-        codeField.setText("");
-        AndroidUtilities.setWaitingForSms(true);
-        NotificationCenter.getInstance().addObserver(this, 998);
-        currentParams = params;
-        waitingForSms = true;
-        String phone = params.getString("phone");
-        requestPhone = params.getString("phoneFormated");
-        phoneHash = params.getString("phoneHash");
-        registered = params.getString("registered");
-        time = params.getInt("calltime");
-
-        if (phone == null) {
-            return;
-        }
-
-        String number = PhoneFormat.getInstance().format(phone);
-        confirmTextView.setText(Html.fromHtml(String.format(LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " <b>%s</b>", number)));
-
-        AndroidUtilities.showKeyboard(codeField);
-        codeField.requestFocus();
-
-        destroyTimer();
-        destroyCodeTimer();
-        timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-        lastCurrentTime = System.currentTimeMillis();
-        problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
-
-        createTimer();
-    }
-
-    private void createCodeTimer() {
-        if (codeTimer != null) {
-            return;
-        }
-        codeTime = 15000;
-        codeTimer = new Timer();
-        lastCodeTime = System.currentTimeMillis();
-        codeTimer.schedule(new TimerTask() {
-            @Override
-            public void run() {
-                double currentTime = System.currentTimeMillis();
-                double diff = currentTime - lastCodeTime;
-                codeTime -= diff;
-                lastCodeTime = currentTime;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (codeTime <= 1000) {
-                            problemText.setVisibility(VISIBLE);
-                            destroyCodeTimer();
-                        }
-                    }
-                });
-            }
-        }, 0, 1000);
-    }
-
-    private void destroyCodeTimer() {
-        try {
-            synchronized(timerSync) {
-                if (codeTimer != null) {
-                    codeTimer.cancel();
-                    codeTimer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void createTimer() {
-        if (timeTimer != null) {
-            return;
-        }
-        timeTimer = new Timer();
-        timeTimer.schedule(new TimerTask() {
-            @Override
-            public void run() {
-                double currentTime = System.currentTimeMillis();
-                double diff = currentTime - lastCurrentTime;
-                time -= diff;
-                lastCurrentTime = currentTime;
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (time >= 1000) {
-                            int minutes = time / 1000 / 60;
-                            int seconds = time / 1000 - minutes * 60;
-                            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
-                        } else {
-                            timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                            destroyTimer();
-                            createCodeTimer();
-                            TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                            req.phone_number = requestPhone;
-                            req.phone_code_hash = phoneHash;
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(TLObject response, final TLRPC.TL_error error) {
-                                    if (error != null && error.text != null) {
-                                        AndroidUtilities.RunOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                lastError = error.text;
-                                            }
-                                        });
-                                    }
-                                }
-                            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                        }
-                    }
-                });
-            }
-        }, 0, 1000);
-    }
-
-    private void destroyTimer() {
-        try {
-            synchronized(timerSync) {
-                if (timeTimer != null) {
-                    timeTimer.cancel();
-                    timeTimer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    @Override
-    public void onNextPressed() {
-        if (nextPressed) {
-            return;
-        }
-        nextPressed = true;
-        waitingForSms = false;
-        AndroidUtilities.setWaitingForSms(false);
-        NotificationCenter.getInstance().removeObserver(this, 998);
-        final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
-        req.phone_number = requestPhone;
-        req.phone_code = codeField.getText().toString();
-        req.phone_code_hash = phoneHash;
-        destroyTimer();
-        if (delegate != null) {
-            delegate.needShowProgress();
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (delegate == null) {
-                            return;
-                        }
-                        delegate.needHideProgress();
-                        nextPressed = false;
-                        if (error == null) {
-                            TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
-                            destroyTimer();
-                            destroyCodeTimer();
-                            UserConfig.clearConfig();
-                            MessagesController.getInstance().cleanUp();
-                            UserConfig.setCurrentUser(res.user);
-                            UserConfig.saveConfig(true);
-                            MessagesStorage.getInstance().cleanUp(true);
-                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                            users.add(res.user);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                            MessagesController.getInstance().putUser(res.user, false);
-                            ContactsController.getInstance().checkAppAccount();
-                            MessagesController.getInstance().getBlockedUsers(true);
-                            delegate.needFinishActivity();
-                            ConnectionsManager.getInstance().initPushConnection();
-                        } else {
-                            lastError = error.text;
-                            if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
-                                Bundle params = new Bundle();
-                                params.putString("phoneFormated", requestPhone);
-                                params.putString("phoneHash", phoneHash);
-                                params.putString("code", req.phone_code);
-                                delegate.setPage(2, true, params, false);
-                                destroyTimer();
-                                destroyCodeTimer();
-                            } else {
-                                createTimer();
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                } else {
-                                    delegate.needShowAlert(error.text);
-                                }
-                            }
-                        }
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-    }
-
-    @Override
-    public void onBackPressed() {
-        destroyTimer();
-        destroyCodeTimer();
-        currentParams = null;
-        AndroidUtilities.setWaitingForSms(false);
-        NotificationCenter.getInstance().removeObserver(this, 998);
-        waitingForSms = false;
-    }
-
-    @Override
-    public void onDestroyActivity() {
-        super.onDestroyActivity();
-        AndroidUtilities.setWaitingForSms(false);
-        NotificationCenter.getInstance().removeObserver(this, 998);
-        destroyTimer();
-        destroyCodeTimer();
-        waitingForSms = false;
-    }
-
-    @Override
-    public void onShow() {
-        super.onShow();
-        if (codeField != null) {
-            codeField.requestFocus();
-            codeField.setSelection(codeField.length());
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == 998) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (!waitingForSms) {
-                        return;
-                    }
-                    if (codeField != null) {
-                        codeField.setText("" + args[0]);
-                        onNextPressed();
-                    }
-                }
-            });
-        }
-    }
-
-    @Override
-    public void saveStateParams(Bundle bundle) {
-        String code = codeField.getText().toString();
-        if (code != null && code.length() != 0) {
-            bundle.putString("smsview_code", code);
-        }
-        if (currentParams != null) {
-            bundle.putBundle("smsview_params", currentParams);
-        }
-        if (time != 0) {
-            bundle.putInt("time", time);
-        }
-    }
-
-    @Override
-    public void restoreStateParams(Bundle bundle) {
-        currentParams = bundle.getBundle("smsview_params");
-        if (currentParams != null) {
-            setParams(currentParams);
-        }
-        String code = bundle.getString("smsview_code");
-        if (code != null) {
-            codeField.setText(code);
-        }
-        Integer t = bundle.getInt("time");
-        if (t != 0) {
-            time = t;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 0eb4b6c5b..844a63fe4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -33,14 +33,15 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 
 public class MediaActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
     private GridView listView;
     private ListAdapter listAdapter;
     private ArrayList<MessageObject> messages = new ArrayList<MessageObject>();
@@ -87,10 +88,10 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("SharedMedia", R.string.SharedMedia));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("SharedMedia", R.string.SharedMedia));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -421,7 +422,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         imageView.setImageBitmap(message.imagePreview);
                     } else {
                         TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 80);
-                        imageView.setImage(photoSize.location, null, R.drawable.photo_placeholder_in);
+                        imageView.setImage(photoSize.location, null, mContext.getResources().getDrawable(R.drawable.photo_placeholder_in));
                     }
                 } else {
                     imageView.setImageResource(R.drawable.photo_placeholder_in);
@@ -450,7 +451,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     if (message.imagePreview != null) {
                         imageView.setImageBitmap(message.imagePreview);
                     } else {
-                        imageView.setImage(message.messageOwner.media.video.thumb.location, null, R.drawable.photo_placeholder_in);
+                        imageView.setImage(message.messageOwner.media.video.thumb.location, null, mContext.getResources().getDrawable(R.drawable.photo_placeholder_in));
                     }
                     textView.setVisibility(View.VISIBLE);
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index b6592d9a5..732a99d82 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -10,16 +10,22 @@
 
 import android.app.AlertDialog;
 import android.content.DialogInterface;
+import android.content.res.Configuration;
 import android.os.Build;
 import android.os.Bundle;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.animation.AccelerateDecelerateInterpolator;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.CheckBox;
 import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -34,26 +40,33 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Adapters.MessagesActivityAdapter;
-import org.telegram.ui.Adapters.MessagesActivitySearchAdapter;
-import org.telegram.ui.Cells.ChatOrUserCell;
+import org.telegram.ui.Adapters.DialogsAdapter;
+import org.telegram.ui.Adapters.DialogsSearchAdapter;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.UserCell;
 import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SlidingTabView;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.MenuDrawable;
 
 import java.util.ArrayList;
 
 public class MessagesActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private ListView messagesListView;
-    private MessagesActivityAdapter messagesActivityAdapter;
-    private MessagesActivitySearchAdapter messagesActivitySearchAdapter;
-    private TextView searchEmptyView;
+    private DialogsAdapter dialogsAdapter;
+    private DialogsSearchAdapter dialogsSearchAdapter;
+    private View searchEmptyView;
     private View progressView;
     private View emptyView;
-    private SlidingTabView searchPanelView;
+    private ImageView floatingButton;
+    private int prevPosition;
+    private int prevTop;
+    private boolean scrollUpdated;
+    private boolean floatingHidden;
+    private final AccelerateDecelerateInterpolator floatingInterpolator = new AccelerateDecelerateInterpolator();
 
     private String selectAlertString;
     private String selectAlertStringGroup;
@@ -69,14 +82,6 @@
 
     private long openedDialogId = 0;
 
-    private final static int messages_list_menu_new_messages = 1;
-    private final static int messages_list_menu_new_chat = 2;
-    private final static int messages_list_menu_other = 6;
-    private final static int messages_list_menu_new_secret_chat = 3;
-    private final static int messages_list_menu_contacts = 4;
-    private final static int messages_list_menu_settings = 5;
-    private final static int messages_list_menu_new_broadcast = 6;
-
     public static interface MessagesActivityDelegate {
         public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
     }
@@ -124,16 +129,18 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenu menu = actionBar.createMenu();
             menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
                 @Override
                 public void onSearchExpand() {
                     searching = true;
                     if (messagesListView != null) {
                         messagesListView.setEmptyView(searchEmptyView);
-                        searchPanelView.setVisibility(View.VISIBLE);
                         emptyView.setVisibility(View.GONE);
                         progressView.setVisibility(View.GONE);
+                        if (!onlySelect) {
+                            floatingButton.setVisibility(View.GONE);
+                        }
                     }
                 }
 
@@ -142,15 +149,29 @@ public void onSearchCollapse() {
                     searching = false;
                     searchWas = false;
                     if (messagesListView != null) {
-                        messagesListView.setEmptyView(emptyView);
-                        searchPanelView.setVisibility(View.GONE);
-                        searchEmptyView.setVisibility(View.GONE);
-                        progressView.setVisibility(View.GONE);
-                        messagesListView.setAdapter(messagesActivityAdapter);
-                        messagesActivityAdapter.notifyDataSetChanged();
+                        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                            searchEmptyView.setVisibility(View.GONE);
+                            emptyView.setVisibility(View.GONE);
+                            progressView.setVisibility(View.VISIBLE);
+                            messagesListView.setEmptyView(progressView);
+                        } else {
+                            messagesListView.setEmptyView(emptyView);
+                            searchEmptyView.setVisibility(View.GONE);
+                            progressView.setVisibility(View.GONE);
+                        }
+                        if (!onlySelect) {
+                            floatingButton.setVisibility(View.VISIBLE);
+                            floatingHidden = true;
+                            ViewProxy.setTranslationY(floatingButton, AndroidUtilities.dp(100));
+                            hideFloatingButton(false);
+                        }
+                        if (messagesListView.getAdapter() != dialogsAdapter) {
+                            messagesListView.setAdapter(dialogsAdapter);
+                            dialogsAdapter.notifyDataSetChanged();
+                        }
                     }
-                    if (messagesActivitySearchAdapter != null) {
-                        messagesActivitySearchAdapter.searchDialogs(null, 0);
+                    if (dialogsSearchAdapter != null) {
+                        dialogsSearchAdapter.searchDialogs(null, false);
                     }
                 }
 
@@ -159,9 +180,9 @@ public void onTextChanged(EditText editText) {
                     String text = editText.getText().toString();
                     if (text.length() != 0) {
                         searchWas = true;
-                        if (messagesActivitySearchAdapter != null) {
-                            messagesListView.setAdapter(messagesActivitySearchAdapter);
-                            messagesActivitySearchAdapter.notifyDataSetChanged();
+                        if (dialogsSearchAdapter != null) {
+                            messagesListView.setAdapter(dialogsSearchAdapter);
+                            dialogsSearchAdapter.notifyDataSetChanged();
                         }
                         if (searchEmptyView != null && messagesListView.getEmptyView() == emptyView) {
                             messagesListView.setEmptyView(searchEmptyView);
@@ -169,61 +190,29 @@ public void onTextChanged(EditText editText) {
                             progressView.setVisibility(View.GONE);
                         }
                     }
-                    if (messagesActivitySearchAdapter != null) {
-                        if (searchPanelView.getSeletedTab() == 0) {
-                            messagesActivitySearchAdapter.searchDialogs(text, serverOnly ? 1 : 0);
-                        } else {
-                            messagesActivitySearchAdapter.searchDialogs(text, 2);
-                        }
+                    if (dialogsSearchAdapter != null) {
+                        dialogsSearchAdapter.searchDialogs(text, serverOnly);
                     }
                 }
             });
             if (onlySelect) {
-                actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-                actionBarLayer.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
+                actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+                actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
             } else {
-                actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.ic_ab_logo);
-                actionBarLayer.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                menu.addItem(messages_list_menu_new_messages, R.drawable.ic_ab_compose);
-                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-                item.addSubItem(messages_list_menu_new_chat, LocaleController.getString("NewGroup", R.string.NewGroup), 0);
-                item.addSubItem(messages_list_menu_new_secret_chat, LocaleController.getString("NewSecretChat", R.string.NewSecretChat), 0);
-                item.addSubItem(messages_list_menu_new_broadcast, LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), 0);
-                item.addSubItem(messages_list_menu_contacts, LocaleController.getString("Contacts", R.string.Contacts), 0);
-                item.addSubItem(messages_list_menu_settings, LocaleController.getString("Settings", R.string.Settings), 0);
+                actionBar.setBackButtonDrawable(new MenuDrawable());
+                actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
             }
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBar.setAllowOverlayTitle(true);
 
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
-                    if (id == messages_list_menu_settings) {
-                        presentFragment(new SettingsActivity());
-                    } else if (id == messages_list_menu_contacts) {
-                        presentFragment(new ContactsActivity(null));
-                    } else if (id == messages_list_menu_new_messages) {
-                        Bundle args = new Bundle();
-                        args.putBoolean("onlyUsers", true);
-                        args.putBoolean("destroyAfterSelect", true);
-                        args.putBoolean("usersAsSections", true);
-                        presentFragment(new ContactsActivity(args));
-                    } else if (id == messages_list_menu_new_secret_chat) {
-                        Bundle args = new Bundle();
-                        args.putBoolean("onlyUsers", true);
-                        args.putBoolean("destroyAfterSelect", true);
-                        args.putBoolean("usersAsSections", true);
-                        args.putBoolean("createSecretChat", true);
-                        presentFragment(new ContactsActivity(args));
-                    } else if (id == messages_list_menu_new_chat) {
-                        presentFragment(new GroupCreateActivity());
-                    } else if (id == -1) {
+                    if (id == -1) {
                         if (onlySelect) {
                             finishFragment();
+                        } else if (parentLayout != null) {
+                            parentLayout.getDrawerLayoutContainer().openDrawer(false);
                         }
-                    } else if (id == messages_list_menu_new_broadcast) {
-                        Bundle args = new Bundle();
-                        args.putBoolean("broadcast", true);
-                        presentFragment(new GroupCreateActivity(args));
                     }
                 }
             });
@@ -233,9 +222,12 @@ public void onItemClick(int id) {
 
             fragmentView = inflater.inflate(R.layout.messages_list, container, false);
 
-            messagesActivityAdapter = new MessagesActivityAdapter(getParentActivity(), serverOnly);
-            messagesActivitySearchAdapter = new MessagesActivitySearchAdapter(getParentActivity());
-            messagesActivitySearchAdapter.setDelegate(new MessagesActivitySearchAdapter.MessagesActivitySearchAdapterDelegate() {
+            dialogsAdapter = new DialogsAdapter(getParentActivity(), serverOnly);
+            if (AndroidUtilities.isTablet() && openedDialogId != 0) {
+                dialogsAdapter.setOpenedDialogId(openedDialogId);
+            }
+            dialogsSearchAdapter = new DialogsSearchAdapter(getParentActivity(), !onlySelect);
+            dialogsSearchAdapter.setDelegate(new DialogsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
                 @Override
                 public void searchStateChanged(boolean search) {
                     if (searching && searchWas && messagesListView != null) {
@@ -245,39 +237,22 @@ public void searchStateChanged(boolean search) {
                     }
                 }
             });
-            searchPanelView = (SlidingTabView)fragmentView.findViewById(R.id.searchPanelView);
-            searchPanelView.addTextTab(0, LocaleController.getString("SearchConversations", R.string.SearchConversations));
-            searchPanelView.addTextTab(1, LocaleController.getString("SearchMessages", R.string.SearchMessages));
-            searchPanelView.setDelegate(new SlidingTabView.SlidingTabViewDelegate() {
-                @Override
-                public void didSelectTab(int tab) {
-                    if (searching && searchWas) {
-                        if (tab == 0) {
-                            messagesActivitySearchAdapter.searchDialogs(messagesActivitySearchAdapter.getLastSearchText(), serverOnly ? 1 : 0);
-                        } else {
-                            messagesActivitySearchAdapter.searchDialogs(messagesActivitySearchAdapter.getLastSearchText(), 2);
-                        }
-                        messagesActivitySearchAdapter.notifyDataSetChanged();
-                    }
-                }
-            });
 
             messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
-            messagesListView.setAdapter(messagesActivityAdapter);
+            messagesListView.setAdapter(dialogsAdapter);
             if (Build.VERSION.SDK_INT >= 11) {
                 messagesListView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
             }
 
             progressView = fragmentView.findViewById(R.id.progressLayout);
-            messagesActivityAdapter.notifyDataSetChanged();
-            searchEmptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            dialogsAdapter.notifyDataSetChanged();
+            searchEmptyView = fragmentView.findViewById(R.id.search_empty_view);
             searchEmptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
             emptyView = fragmentView.findViewById(R.id.list_empty_view);
             emptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
@@ -285,23 +260,38 @@ public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
+
+
             TextView textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text1);
             textView.setText(LocaleController.getString("NoChats", R.string.NoChats));
             textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text2);
-            textView.setText(LocaleController.getString("NoChats", R.string.NoChatsHelp));
+            textView.setText(LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp));
+            textView = (TextView)fragmentView.findViewById(R.id.search_empty_text);
+            textView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+
+            floatingButton = (ImageView)fragmentView.findViewById(R.id.floating_button);
+            floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)floatingButton.getLayoutParams();
+            layoutParams.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(14) : 0;
+            layoutParams.rightMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(14);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM;
+            floatingButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("destroyAfterSelect", true);
+                    presentFragment(new ContactsActivity(args));
+                }
+            });
 
             if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
                 searchEmptyView.setVisibility(View.GONE);
                 emptyView.setVisibility(View.GONE);
+                progressView.setVisibility(View.VISIBLE);
                 messagesListView.setEmptyView(progressView);
             } else {
-                if (searching && searchWas) {
-                    messagesListView.setEmptyView(searchEmptyView);
-                    emptyView.setVisibility(View.GONE);
-                } else {
-                    messagesListView.setEmptyView(emptyView);
-                    searchEmptyView.setVisibility(View.GONE);
-                }
+                messagesListView.setEmptyView(emptyView);
+                searchEmptyView.setVisibility(View.GONE);
                 progressView.setVisibility(View.GONE);
             }
 
@@ -314,17 +304,17 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     long dialog_id = 0;
                     int message_id = 0;
                     BaseFragmentAdapter adapter = (BaseFragmentAdapter)messagesListView.getAdapter();
-                    if (adapter == messagesActivityAdapter) {
-                        TLRPC.TL_dialog dialog = messagesActivityAdapter.getItem(i);
+                    if (adapter == dialogsAdapter) {
+                        TLRPC.TL_dialog dialog = dialogsAdapter.getItem(i);
                         if (dialog == null) {
                             return;
                         }
                         dialog_id = dialog.id;
-                    } else if (adapter == messagesActivitySearchAdapter) {
-                        Object obj = messagesActivitySearchAdapter.getItem(i);
+                    } else if (adapter == dialogsSearchAdapter) {
+                        Object obj = dialogsSearchAdapter.getItem(i);
                         if (obj instanceof TLRPC.User) {
                             dialog_id = ((TLRPC.User) obj).id;
-                            if (messagesActivitySearchAdapter.isGlobalSearch(i)) {
+                            if (dialogsSearchAdapter.isGlobalSearch(i)) {
                                 ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
                                 users.add((TLRPC.User)obj);
                                 MessagesController.getInstance().putUsers(users, false);
@@ -375,10 +365,10 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             if (openedDialogId == dialog_id) {
                                 return;
                             }
-                            messagesActivityAdapter.setOpenedDialogId(openedDialogId = dialog_id);
+                            dialogsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
+                            updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
                         }
                         presentFragment(new ChatActivity(args));
-                        updateVisibleRows(0);
                     }
                 }
             });
@@ -409,56 +399,40 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     int lower_id = (int)selectedDialog;
                     int high_id = (int)(selectedDialog >> 32);
 
-                    if (lower_id < 0 && high_id != 1) {
-                        builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory), LocaleController.getString("DeleteChat", R.string.DeleteChat)}, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                if (which == 0) {
-                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
-                                } else if (which == 1) {
-                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    final boolean isChat = lower_id < 0 && high_id != 1;
+                    builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory),
+                            isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, final int which) {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            if (which == 0) {
+                                builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
+                            } else {
+                                if (isChat) {
                                     builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
-                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                            if (AndroidUtilities.isTablet()) {
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
-                                            }
-                                        }
-                                    });
-                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                    showAlertDialog(builder);
-                                }
-                            }
-                        });
-                    } else {
-                        builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory), LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                if (which == 0) {
-                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
                                 } else {
-                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                     builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
-                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                            if (AndroidUtilities.isTablet()) {
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
-                                            }
-                                        }
-                                    });
-                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                    showAlertDialog(builder);
                                 }
                             }
-                        });
-                    }
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, which == 0);
+                                    if (which != 0) {
+                                        if (isChat) {
+                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                                        }
+                                        if (AndroidUtilities.isTablet()) {
+                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                        }
+                                    }
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    });
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showAlertDialog(builder);
                     return true;
@@ -476,6 +450,9 @@ public void onScrollStateChanged(AbsListView absListView, int i) {
                 @Override
                 public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                     if (searching && searchWas) {
+                        if (visibleItemCount > 0 && absListView.getLastVisiblePosition() == totalItemCount - 1 && !dialogsSearchAdapter.isMessagesSearchEndReached()) {
+                            dialogsSearchAdapter.loadMoreSearchMessages();
+                        }
                         return;
                     }
                     if (visibleItemCount > 0) {
@@ -483,6 +460,29 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                             MessagesController.getInstance().loadDialogs(MessagesController.getInstance().dialogs.size(), MessagesController.getInstance().dialogsServerOnly.size(), 100, true);
                         }
                     }
+
+                    if (floatingButton.getVisibility() != View.GONE) {
+                        final View topChild = absListView.getChildAt(0);
+                        int firstViewTop = 0;
+                        if (topChild != null) {
+                            firstViewTop = topChild.getTop();
+                        }
+                        boolean goingDown;
+                        boolean changed = true;
+                        if (prevPosition == firstVisibleItem) {
+                            final int topDelta = prevTop - firstViewTop;
+                            goingDown = firstViewTop < prevTop;
+                            changed = Math.abs(topDelta) > 1;
+                        } else {
+                            goingDown = firstVisibleItem > prevPosition;
+                        }
+                        if (changed && scrollUpdated) {
+                            hideFloatingButton(goingDown);
+                        }
+                        prevPosition = firstVisibleItem;
+                        prevTop = firstViewTop;
+                        scrollUpdated = true;
+                    }
                 }
             });
         } else {
@@ -497,12 +497,32 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
     @Override
     public void onResume() {
         super.onResume();
-        showActionBar();
-        if (messagesActivityAdapter != null) {
-            messagesActivityAdapter.notifyDataSetChanged();
+        if (dialogsAdapter != null) {
+            dialogsAdapter.notifyDataSetChanged();
         }
-        if (messagesActivitySearchAdapter != null) {
-            messagesActivitySearchAdapter.notifyDataSetChanged();
+        if (dialogsSearchAdapter != null) {
+            dialogsSearchAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (!onlySelect && floatingButton != null) {
+            floatingButton.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+                    ViewProxy.setTranslationY(floatingButton, floatingHidden ? AndroidUtilities.dp(100) : 0);
+                    floatingButton.setClickable(!floatingHidden);
+                    if (floatingButton != null) {
+                        if (Build.VERSION.SDK_INT < 16) {
+                            floatingButton.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                        } else {
+                            floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                        }
+                    }
+                }
+            });
         }
     }
 
@@ -510,26 +530,40 @@ public void onResume() {
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.dialogsNeedReload) {
-            if (messagesActivityAdapter != null) {
-                messagesActivityAdapter.notifyDataSetChanged();
-            }
             if (messagesListView != null) {
                 if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
                     searchEmptyView.setVisibility(View.GONE);
                     emptyView.setVisibility(View.GONE);
                     messagesListView.setEmptyView(progressView);
                 } else {
-                    if (messagesListView.getEmptyView() == null) {
-                        if (searching && searchWas) {
-                            messagesListView.setEmptyView(searchEmptyView);
-                            emptyView.setVisibility(View.GONE);
-                        } else {
-                            messagesListView.setEmptyView(emptyView);
-                            searchEmptyView.setVisibility(View.GONE);
+                    if (searching && searchWas) {
+                        if (dialogsAdapter != null) {
+                            dialogsAdapter.notifyDataSetChanged();
+                        }
+                        if (dialogsSearchAdapter != null) {
+                            dialogsSearchAdapter.notifyDataSetChanged();
+                        }
+                        messagesListView.setEmptyView(searchEmptyView);
+                        emptyView.setVisibility(View.GONE);
+                    } else {
+                        if (dialogsAdapter != null) {
+                            dialogsAdapter.notifyDataSetChanged();
+                        }
+                        if (dialogsSearchAdapter != null) {
+                            dialogsSearchAdapter.notifyDataSetChanged();
                         }
+                        messagesListView.setEmptyView(emptyView);
+                        searchEmptyView.setVisibility(View.GONE);
                     }
                     progressView.setVisibility(View.GONE);
                 }
+            } else {
+                if (dialogsAdapter != null) {
+                    dialogsAdapter.notifyDataSetChanged();
+                }
+                if (dialogsSearchAdapter != null) {
+                    dialogsSearchAdapter.notifyDataSetChanged();
+                }
             }
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (messagesListView != null) {
@@ -554,12 +588,25 @@ public void didReceivedNotification(int id, Object... args) {
                 } else {
                     openedDialogId = dialog_id;
                 }
-                messagesActivityAdapter.setOpenedDialogId(openedDialogId);
-                updateVisibleRows(0);
+                if (dialogsAdapter != null) {
+                    dialogsAdapter.setOpenedDialogId(openedDialogId);
+                }
+                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
             }
         }
     }
 
+    private void hideFloatingButton(boolean hide) {
+        if (floatingHidden == hide) {
+            return;
+        }
+        floatingHidden = hide;
+        ObjectAnimatorProxy animator = ObjectAnimatorProxy.ofFloatProxy(floatingButton, "translationY", floatingHidden ? AndroidUtilities.dp(100) : 0).setDuration(300);
+        animator.setInterpolator(floatingInterpolator);
+        floatingButton.setClickable(!hide);
+        animator.start();
+    }
+
     private void updateVisibleRows(int mask) {
         if (messagesListView == null) {
             return;
@@ -569,16 +616,19 @@ private void updateVisibleRows(int mask) {
             View child = messagesListView.getChildAt(a);
             if (child instanceof DialogCell) {
                 DialogCell cell = (DialogCell) child;
-                if (!serverOnly && AndroidUtilities.isTablet()) {
-                    if (cell.getDialogId() == openedDialogId) {
-                        child.setBackgroundColor(0x0f000000);
-                    } else {
-                        child.setBackgroundColor(0);
+                if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
+                    if (!serverOnly && AndroidUtilities.isTablet()) {
+                        if (cell.getDialogId() == openedDialogId) {
+                            child.setBackgroundColor(0x0f000000);
+                        } else {
+                            child.setBackgroundColor(0);
+                        }
                     }
+                } else {
+                    cell.update(mask);
                 }
-                cell.update(mask);
-            } else if (child instanceof ChatOrUserCell) {
-                ((ChatOrUserCell) child).update(mask);
+            } else if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
similarity index 72%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 0e2f2c0ba..53f473bc5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -22,9 +22,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.ImageView;
+import android.widget.FrameLayout;
 import android.widget.ListView;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
@@ -39,16 +38,21 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.ColorPickerView;
-import org.telegram.ui.Views.SettingsSectionLayout;
 
-public class SettingsNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+public class NotificationsSettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private ListView listView;
     private boolean reseting = false;
 
     private int notificationsServiceRow;
+    private int messageSectionRow2;
     private int messageSectionRow;
     private int messageAlertRow;
     private int messagePreviewRow;
@@ -56,6 +60,7 @@
     private int messageSoundRow;
     private int messageLedRow;
     private int messagePopupNotificationRow;
+    private int groupSectionRow2;
     private int groupSectionRow;
     private int groupAlertRow;
     private int groupPreviewRow;
@@ -63,15 +68,19 @@
     private int groupSoundRow;
     private int groupLedRow;
     private int groupPopupNotificationRow;
+    private int inappSectionRow2;
     private int inappSectionRow;
     private int inappSoundRow;
     private int inappVibrateRow;
     private int inappPreviewRow;
+    private int eventsSectionRow2;
     private int eventsSectionRow;
     private int contactJoinedRow;
+    private int otherSectionRow2;
     private int otherSectionRow;
     private int badgeNumberRow;
     private int pebbleAlertRow;
+    private int resetSectionRow2;
     private int resetSectionRow;
     private int resetNotificationsRow;
     private int rowCount = 0;
@@ -79,29 +88,35 @@
     @Override
     public boolean onFragmentCreate() {
         notificationsServiceRow = rowCount++;
+        messageSectionRow2 = rowCount++;
         messageSectionRow = rowCount++;
         messageAlertRow = rowCount++;
         messagePreviewRow = rowCount++;
-        messageVibrateRow = rowCount++;
         messageLedRow = rowCount++;
+        messageVibrateRow = rowCount++;
         messagePopupNotificationRow = rowCount++;
         messageSoundRow = rowCount++;
+        groupSectionRow2 = rowCount++;
         groupSectionRow = rowCount++;
         groupAlertRow = rowCount++;
         groupPreviewRow = rowCount++;
-        groupVibrateRow = rowCount++;
         groupLedRow = rowCount++;
+        groupVibrateRow = rowCount++;
         groupPopupNotificationRow = rowCount++;
         groupSoundRow = rowCount++;
+        inappSectionRow2 = rowCount++;
         inappSectionRow = rowCount++;
         inappSoundRow = rowCount++;
         inappVibrateRow = rowCount++;
         inappPreviewRow = rowCount++;
+        eventsSectionRow2 = rowCount++;
         eventsSectionRow = rowCount++;
         contactJoinedRow = rowCount++;
+        otherSectionRow2 = rowCount++;
         otherSectionRow = rowCount++;
         badgeNumberRow = rowCount++;
         pebbleAlertRow = rowCount++;
+        resetSectionRow2 = rowCount++;
         resetSectionRow = rowCount++;
         resetNotificationsRow = rowCount++;
 
@@ -119,10 +134,10 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -131,17 +146,26 @@ public void onItemClick(int id) {
                 }
             });
 
-            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
-            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(listAdapter);
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(new ListAdapter(getParentActivity()));
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    boolean enabled = false;
                     if (i == messageAlertRow || i == groupAlertRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled;
                         if (i == messageAlertRow) {
                             enabled = preferences.getBoolean("EnableAll", true);
                             editor.putBoolean("EnableAll", !enabled);
@@ -150,12 +174,10 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                             editor.putBoolean("EnableGroup", !enabled);
                         }
                         editor.commit();
-                        listView.invalidateViews();
                         updateServerNotificationsSettings(i == groupAlertRow);
                     } else if (i == messagePreviewRow || i == groupPreviewRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled;
                         if (i == messagePreviewRow) {
                             enabled = preferences.getBoolean("EnablePreviewAll", true);
                             editor.putBoolean("EnablePreviewAll", !enabled);
@@ -164,7 +186,6 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                             editor.putBoolean("EnablePreviewGroup", !enabled);
                         }
                         editor.commit();
-                        listView.invalidateViews();
                         updateServerNotificationsSettings(i == groupPreviewRow);
                     } else if (i == messageSoundRow || i == groupSoundRow) {
                         try {
@@ -214,7 +235,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                             @Override
                             public void run(TLObject response, TLRPC.TL_error error) {
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
                                     @Override
                                     public void run() {
                                         MessagesController.getInstance().enableJoined = true;
@@ -237,55 +258,48 @@ public void run() {
                     } else if (i == inappSoundRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppSounds", true);
+                        enabled = preferences.getBoolean("EnableInAppSounds", true);
                         editor.putBoolean("EnableInAppSounds", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                     } else if (i == inappVibrateRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppVibrate", true);
+                        enabled = preferences.getBoolean("EnableInAppVibrate", true);
                         editor.putBoolean("EnableInAppVibrate", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                     } else if (i == inappPreviewRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppPreview", true);
+                        enabled = preferences.getBoolean("EnableInAppPreview", true);
                         editor.putBoolean("EnableInAppPreview", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                     } else if (i == contactJoinedRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableContactJoined", true);
+                        enabled = preferences.getBoolean("EnableContactJoined", true);
                         MessagesController.getInstance().enableJoined = !enabled;
                         editor.putBoolean("EnableContactJoined", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                     } else if (i == pebbleAlertRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnablePebbleNotifications", false);
+                        enabled = preferences.getBoolean("EnablePebbleNotifications", false);
                         editor.putBoolean("EnablePebbleNotifications", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                     } else if (i == badgeNumberRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("badgeNumber", true);
+                        enabled = preferences.getBoolean("badgeNumber", true);
                         editor.putBoolean("badgeNumber", !enabled);
                         editor.commit();
-                        listView.invalidateViews();
                         NotificationsController.getInstance().setBadgeEnabled(!enabled);
                     } else if (i == notificationsServiceRow) {
                         final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        boolean enabled = preferences.getBoolean("pushService", true);
+                        enabled = preferences.getBoolean("pushService", true);
                         if (!enabled) {
                             final SharedPreferences.Editor editor = preferences.edit();
                             editor.putBoolean("pushService", !enabled);
                             editor.commit();
-                            listView.invalidateViews();
                             ApplicationLoader.startPushService();
                         } else {
                             if (getParentActivity() == null) {
@@ -416,6 +430,9 @@ public void onClick(DialogInterface dialog, int which) {
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
                     }
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!enabled);
+                    }
                 }
             });
         } else {
@@ -514,7 +531,10 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow);
+            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow ||
+                    i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow ||
+                    i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
+                    i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2);
         }
 
         @Override
@@ -542,176 +562,128 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    view = new SettingsSectionLayout(mContext);
+                    view = new HeaderCell(mContext);
                 }
                 if (i == messageSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
+                    ((HeaderCell) view).setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
                 } else if (i == groupSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
+                    ((HeaderCell) view).setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
                 } else if (i == inappSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
+                    ((HeaderCell) view).setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
                 } else if (i == eventsSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Events", R.string.Events));
+                    ((HeaderCell) view).setText(LocaleController.getString("Events", R.string.Events));
                 } else if (i == otherSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
+                    ((HeaderCell) view).setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
                 } else if (i == resetSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Reset", R.string.Reset));
+                    ((HeaderCell) view).setText(LocaleController.getString("Reset", R.string.Reset));
                 }
             } if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
+                    view = new TextCheckCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
+                TextCheckCell checkCell = (TextCheckCell) view;
 
-                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                boolean enabled = false;
-                boolean enabledAll = preferences.getBoolean("EnableAll", true);
-                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
-
-                if (i == messageAlertRow || i == groupAlertRow) {
-                    if (i == messageAlertRow) {
-                        enabled = enabledAll;
-                    } else if (i == groupAlertRow) {
-                        enabled = enabledGroup;
-                    }
-                    textView.setText(LocaleController.getString("Alert", R.string.Alert));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == messagePreviewRow || i == groupPreviewRow) {
-                    if (i == messagePreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewAll", true);
-                    } else if (i == groupPreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewGroup", true);
-                    }
-                    textView.setText(LocaleController.getString("MessagePreview", R.string.MessagePreview));
-                    divider.setVisibility(View.VISIBLE);
+                if (i == messageAlertRow) {
+                    checkCell.setTextAndCheck(LocaleController.getString("Alert", R.string.Alert), preferences.getBoolean("EnableAll", true), true);
+                } else if (i == groupAlertRow) {
+                    checkCell.setTextAndCheck(LocaleController.getString("Alert", R.string.Alert), preferences.getBoolean("EnableGroup", true), true);
+                } else if (i == messagePreviewRow) {
+                    checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), preferences.getBoolean("EnablePreviewAll", true), true);
+                } else if (i == groupPreviewRow) {
+                    checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), preferences.getBoolean("EnablePreviewGroup", true), true);
                 } else if (i == inappSoundRow) {
-                    enabled = preferences.getBoolean("EnableInAppSounds", true);
-                    textView.setText(LocaleController.getString("InAppSounds", R.string.InAppSounds));
-                    divider.setVisibility(View.VISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("InAppSounds", R.string.InAppSounds), preferences.getBoolean("EnableInAppSounds", true), true);
                 } else if (i == inappVibrateRow) {
-                    enabled = preferences.getBoolean("EnableInAppVibrate", true);
-                    textView.setText(LocaleController.getString("InAppVibrate", R.string.InAppVibrate));
-                    divider.setVisibility(View.VISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("InAppVibrate", R.string.InAppVibrate), preferences.getBoolean("EnableInAppVibrate", true), true);
                 } else if (i == inappPreviewRow) {
-                    enabled = preferences.getBoolean("EnableInAppPreview", true);
-                    textView.setText(LocaleController.getString("InAppPreview", R.string.InAppPreview));
-                    divider.setVisibility(View.INVISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("InAppPreview", R.string.InAppPreview), preferences.getBoolean("EnableInAppPreview", true), false);
                 } else if (i == contactJoinedRow) {
-                    enabled = preferences.getBoolean("EnableContactJoined", true);
-                    textView.setText(LocaleController.getString("ContactJoined", R.string.ContactJoined));
-                    divider.setVisibility(View.INVISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
                 } else if (i == pebbleAlertRow) {
-                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
-                    textView.setText(LocaleController.getString("Pebble", R.string.Pebble));
-                    divider.setVisibility(View.INVISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("Pebble", R.string.Pebble), preferences.getBoolean("EnablePebbleNotifications", false), false);
                 } else if (i == notificationsServiceRow) {
-                    enabled = preferences.getBoolean("pushService", true);
-                    textView.setText(LocaleController.getString("NotificationsService", R.string.NotificationsService));
-                    divider.setVisibility(View.INVISIBLE);
+                    checkCell.setTextAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), preferences.getBoolean("pushService", true), false);
                 } else if (i == badgeNumberRow) {
-                    enabled = preferences.getBoolean("badgeNumber", true);
-                    textView.setText(LocaleController.getString("BadgeNumber", R.string.BadgeNumber));
-                    divider.setVisibility(View.VISIBLE);
-                }
-                if (enabled) {
-                    checkButton.setImageResource(R.drawable.btn_check_on);
-                } else {
-                    checkButton.setImageResource(R.drawable.btn_check_off);
+                    checkCell.setTextAndCheck(LocaleController.getString("BadgeNumber", R.string.BadgeNumber), preferences.getBoolean("badgeNumber", true), true);
                 }
             } else if (type == 2) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = new TextDetailSettingsCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
+
+                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
+
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                boolean enabledAll = preferences.getBoolean("EnableAll", true);
-                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
 
                 if (i == messageSoundRow || i == groupSoundRow) {
-                    String name = null;
+                    textCell.setMultilineDetail(false);
+                    String value = null;
                     if (i == messageSoundRow) {
-                        name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
+                        value = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
                     } else if (i == groupSoundRow) {
-                        name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
+                        value = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
                     }
-                    if (name.equals("NoSound")) {
-                        textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        textViewDetail.setText(name);
+                    if (value.equals("NoSound")) {
+                        value = LocaleController.getString("NoSound", R.string.NoSound);
                     }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
-                    divider.setVisibility(View.INVISIBLE);
+                    textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, false);
                 } else if (i == resetNotificationsRow) {
-                    textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
-                    textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
-                    divider.setVisibility(View.INVISIBLE);
+                    textCell.setMultilineDetail(true);
+                    textCell.setTextAndValue(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications), LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom), false);
                 } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
-                    textView.setText(LocaleController.getString("PopupNotification", R.string.PopupNotification));
+                    textCell.setMultilineDetail(false);
                     int option = 0;
                     if (i == messagePopupNotificationRow) {
                         option = preferences.getInt("popupAll", 0);
                     } else if (i == groupPopupNotificationRow) {
                         option = preferences.getInt("popupGroup", 0);
                     }
+                    String value;
                     if (option == 0) {
-                        textViewDetail.setText(LocaleController.getString("NoPopup", R.string.NoPopup));
+                        value = LocaleController.getString("NoPopup", R.string.NoPopup);
                     } else if (option == 1) {
-                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn));
+                        value = LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn);
                     } else if (option == 2) {
-                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff));
-                    } else if (option == 3) {
-                        textViewDetail.setText(LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup));
+                        value = LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff);
+                    } else {
+                        value = LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("PopupNotification", R.string.PopupNotification), value, true);
+                } else if (i == messageVibrateRow || i == groupVibrateRow) {
+                    textCell.setMultilineDetail(false);
+                    int value = 0;
+                    if (i == messageVibrateRow) {
+                        value = preferences.getInt("vibrate_messages", 0);
+                    } else if (i == groupVibrateRow) {
+                        value = preferences.getInt("vibrate_group", 0);
+                    }
+                    if (value == 0) {
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Default", R.string.Default), true);
+                    } else if (value == 1) {
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
+                    } else if (value == 2) {
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Disabled", R.string.Disabled), true);
+                    } else if (value == 3) {
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
                     }
-                    divider.setVisibility(View.VISIBLE);
                 }
             } else if (type == 3) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                    view = new TextColorCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View colorView = view.findViewById(R.id.settings_color);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+
+                TextColorCell textCell = (TextColorCell) view;
+
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                 if (i == messageLedRow) {
-                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), true);
                 } else if (i == groupLedRow) {
-                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), true);
                 }
-                divider.setVisibility(View.VISIBLE);
             } else if (type == 4) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
-                View divider = view.findViewById(R.id.settings_row_divider);
-                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                int value = 0;
-                textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                divider.setVisibility(View.VISIBLE);
-                if (i == messageVibrateRow) {
-                    value = preferences.getInt("vibrate_messages", 0);
-                } else if (i == groupVibrateRow) {
-                    value = preferences.getInt("vibrate_group", 0);
-                }
-                if (value == 0) {
-                    detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                } else if (value == 1) {
-                    detailTextView.setText(LocaleController.getString("Short", R.string.Short));
-                } else if (value == 2) {
-                    detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                } else if (value == 3) {
-                    detailTextView.setText(LocaleController.getString("Long", R.string.Long));
+                    view = new ShadowSectionCell(mContext);
                 }
             }
             return view;
@@ -719,17 +691,18 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
+            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow ||
+                    i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
                 return 0;
-            } else if (i == messageAlertRow || i == messagePreviewRow ||
-                    i == groupAlertRow || i == groupPreviewRow ||
-                    i == inappSoundRow || i == inappVibrateRow || i == inappPreviewRow ||
-                    i == contactJoinedRow ||
-                    i == pebbleAlertRow || i == notificationsServiceRow || i == badgeNumberRow) {
+            } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
+                    i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
+                    i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
+                    i == notificationsServiceRow || i == badgeNumberRow) {
                 return 1;
             } else if (i == messageLedRow || i == groupLedRow) {
                 return 3;
-            } else if (i == groupVibrateRow || i == messageVibrateRow) {
+            } else if (i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
+                    i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2) {
                 return 4;
             } else {
                 return 2;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index d65194d49..93b346eb8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -20,16 +20,16 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
 import android.widget.FrameLayout;
-import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.io.File;
 
@@ -282,6 +282,8 @@ protected void onDraw(Canvas canvas) {
     private boolean sameBitmap = false;
     private boolean doneButtonPressed = false;
 
+    private final static int done_button = 1;
+
     public PhotoCropActivity(Bundle args) {
         super(args);
     }
@@ -328,33 +330,30 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("AddContact", R.string.AddContact));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            View doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (delegate != null && !doneButtonPressed) {
-                        Bitmap bitmap = view.getBitmap();
-                        if (bitmap == imageToCrop) {
-                            sameBitmap = true;
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (delegate != null && !doneButtonPressed) {
+                            Bitmap bitmap = view.getBitmap();
+                            if (bitmap == imageToCrop) {
+                                sameBitmap = true;
+                            }
+                            delegate.didFinishCrop(bitmap);
+                            doneButtonPressed = true;
                         }
-                        delegate.didFinishCrop(bitmap);
-                        doneButtonPressed = true;
+                        finishFragment();
                     }
-                    finishFragment();
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             fragmentView = view = new PhotoCropView(getParentActivity());
             fragmentView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 8b93ea57c..3e2ea05b7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -32,9 +32,9 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessageObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.BackupImageView;
 
 import java.util.ArrayList;
@@ -84,18 +84,17 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setBackgroundColor(0xff333333);
-            actionBarLayer.setItemsBackground(R.drawable.bar_selector_picker);
-            actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.gallery);
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.photo_back);
-            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackgroundColor(0xff333333);
+            actionBar.setItemsBackground(R.drawable.bar_selector_picker);
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
                         if (selectedAlbum != null) {
                             selectedAlbum = null;
-                            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+                            actionBar.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
                             fixLayoutInternal();
                         } else {
                             if (Build.VERSION.SDK_INT < 11) {
@@ -114,8 +113,8 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            menu.addItem(1, R.drawable.ic_ab_other_white2);
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItem(1, R.drawable.ic_ab_other);
 
             fragmentView = inflater.inflate(R.layout.photo_picker_layout, container, false);
 
@@ -146,9 +145,12 @@ public void onClick(View view) {
             });
 
             cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
             doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
+            doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
+            doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
 
             listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
@@ -159,7 +161,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             return;
                         }
                         selectedAlbum = albumsSorted.get(i);
-                        actionBarLayer.setTitle(selectedAlbum.bucketName);
+                        actionBar.setTitle(selectedAlbum.bucketName);
                         fixLayoutInternal();
                     } else {
                         if (i < 0 || i >= selectedAlbum.photos.size()) {
@@ -232,7 +234,7 @@ public void didReceivedNotification(int id, Object... args) {
     public boolean onBackPressed() {
         if (selectedAlbum != null) {
             selectedAlbum = null;
-            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+            actionBar.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
             fixLayoutInternal();
             return false;
         }
@@ -515,7 +517,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 MediaController.AlbumEntry albumEntry = albumsSorted.get(i);
                 BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
                 if (albumEntry.coverPhoto != null && albumEntry.coverPhoto.path != null) {
-                    imageView.setImage("thumb://" + albumEntry.coverPhoto.imageId + ":" + albumEntry.coverPhoto.path, null, R.drawable.nophotos);
+                    imageView.setImage("thumb://" + albumEntry.coverPhoto.imageId + ":" + albumEntry.coverPhoto.path, null, mContext.getResources().getDrawable(R.drawable.nophotos));
                 } else {
                     imageView.setImageResource(R.drawable.nophotos);
                 }
@@ -557,7 +559,7 @@ public void onClick(View v) {
                 imageView.setTag(i);
                 view.setTag(i);
                 if (photoEntry.path != null) {
-                    imageView.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, R.drawable.nophotos);
+                    imageView.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, mContext.getResources().getDrawable(R.drawable.nophotos));
                 } else {
                     imageView.setImageResource(R.drawable.nophotos);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 343b90448..c581a3bd2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -8,12 +8,9 @@
 
 package org.telegram.ui;
 
-import android.animation.Animator;
-import android.animation.AnimatorListenerAdapter;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -63,10 +60,13 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBar;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Views.ClippingImageView;
 import org.telegram.android.ImageReceiver;
 
@@ -77,6 +77,7 @@
 import java.util.Locale;
 
 public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
+
     private int classGuid;
     private PhotoViewerProvider placeProvider;
     private boolean isVisible;
@@ -84,7 +85,6 @@
     private Activity parentActivity;
 
     private ActionBar actionBar;
-    private ActionBarLayer actionBarLayer;
     private boolean isActionBarVisible = true;
 
     private static Drawable[] progressDrawables = null;
@@ -146,7 +146,7 @@
     private long animationDuration;
     private long animationStartTime;
     private GestureDetector gestureDetector;
-    private DecelerateInterpolator interpolator = new DecelerateInterpolator();
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator(1.5f);
     private float pinchStartDistance = 0;
     private float pinchStartScale = 1;
     private float pinchCenterX;
@@ -247,14 +247,6 @@ private void updateAnimation() {
             }
         }
 
-        public float getRadOffset() {
-            return radOffset;
-        }
-
-        public void setRadOffset(float value) {
-            radOffset = value;
-        }
-
         public void setProgress(float value, boolean animated) {
             if (!animated) {
                 animatedProgressValue = value;
@@ -327,6 +319,7 @@ public void onDraw(Canvas canvas) {
         public int user_id;
         public int index;
         public int size;
+        public int radius;
     }
 
     public static interface PhotoViewerProvider {
@@ -484,7 +477,7 @@ public void didReceivedNotification(int id, Object... args) {
                     loadingMoreImages = true;
                     MessagesController.getInstance().loadMedia(currentDialogId, 0, 100, 0, true, classGuid);
                 } else if (!imagesArr.isEmpty()) {
-                    actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
+                    actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
                 }
             }
         } else if (id == NotificationCenter.mediaDidLoaded) {
@@ -603,18 +596,17 @@ public void setParentActivity(Activity activity) {
         windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
 
         actionBar = new ActionBar(activity);
-        containerView.addView(actionBar);
         actionBar.setBackgroundColor(0x7F000000);
-        layoutParams = (FrameLayout.LayoutParams)actionBar.getLayoutParams();
+        actionBar.setOccupyStatusBar(false);
+        actionBar.setItemsBackground(R.drawable.bar_selector_white);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        containerView.addView(actionBar);
+        layoutParams = (FrameLayout.LayoutParams) actionBar.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         actionBar.setLayoutParams(layoutParams);
-        actionBarLayer = actionBar.createLayer();
-        actionBarLayer.setItemsBackground(R.drawable.bar_selector_white);
-        actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.photo_back);
-        actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
-        actionBar.setCurrentActionBarLayer(actionBarLayer);
 
-        actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
@@ -629,6 +621,12 @@ public void onItemClick(int id) {
 
                     if (f != null && f.exists()) {
                         MediaController.saveFile(f.toString(), parentActivity, currentFileNames[0].endsWith("mp4") ? 1 : 0, null);
+                    } else {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(R.string.OK, null);
+                        builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
+                        builder.show().setCanceledOnTouchOutside(true);
                     }
                 } else if (id == gallery_menu_showall) {
                     if (opennedFromMedia) {
@@ -692,8 +690,8 @@ public boolean canOpenMenu() {
             }
         });
 
-        ActionBarMenu menu = actionBarLayer.createMenu();
-        menuItem = menu.addItem(0, R.drawable.ic_ab_other_white);
+        ActionBarMenu menu = actionBar.createMenu();
+        menuItem = menu.addItem(0, R.drawable.ic_ab_other);
         menuItem.addSubItem(gallery_menu_save, LocaleController.getString("SaveToGallery", R.string.SaveToGallery), 0);
         menuItem.addSubItem(gallery_menu_showall, LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia), 0);
 
@@ -746,6 +744,12 @@ public void onClick(View v) {
                         }
                         intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(f));
                         parentActivity.startActivity(intent);
+                    } else {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(R.string.OK, null);
+                        builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
+                        builder.show().setCanceledOnTouchOutside(true);
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -899,9 +903,12 @@ public void onClick(View view) {
         pickerView.setLayoutParams(layoutParams);
 
         cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+        cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
         doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
+        doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
+        doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
 
         gestureDetector = new GestureDetector(containerView.getContext(), this);
         gestureDetector.setOnDoubleTapListener(this);
@@ -953,40 +960,31 @@ private void toggleActionBar(boolean show, boolean animated) {
         }
         isActionBarVisible = show;
         actionBar.setEnabled(show);
-        actionBarLayer.setEnabled(show);
         bottomLayout.setEnabled(show);
-        if (android.os.Build.VERSION.SDK_INT >= 11) {
-            if (animated) {
-                AnimatorSet animatorSet = new AnimatorSet();
-                animatorSet.playTogether(
-                        ObjectAnimator.ofFloat(actionBar, "alpha", show ? 1.0f : 0.0f),
-                        ObjectAnimator.ofFloat(bottomLayout, "alpha", show ? 1.0f : 0.0f)
-                );
-                if (!show) {
-                    animatorSet.addListener(new AnimatorListenerAdapter() {
-                        @Override
-                        public void onAnimationEnd(Animator animation) {
-                            actionBar.setVisibility(View.GONE);
-                            if (canShowBottom) {
-                                bottomLayout.setVisibility(View.GONE);
-                            }
-                        }
-                    });
-                }
 
-                animatorSet.setDuration(250);
-                animatorSet.start();
-            } else {
-                actionBar.setAlpha(show ? 1.0f : 0.0f);
-                bottomLayout.setAlpha(show ? 1.0f : 0.0f);
-                if (!show) {
-                    actionBar.setVisibility(View.GONE);
-                    if (canShowBottom) {
-                        bottomLayout.setVisibility(View.GONE);
+        if (animated) {
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+            animatorSet.playTogether(
+                    ObjectAnimatorProxy.ofFloat(actionBar, "alpha", show ? 1.0f : 0.0f),
+                    ObjectAnimatorProxy.ofFloat(bottomLayout, "alpha", show ? 1.0f : 0.0f)
+            );
+            if (!show) {
+                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        actionBar.setVisibility(View.GONE);
+                        if (canShowBottom) {
+                            bottomLayout.setVisibility(View.GONE);
+                        }
                     }
-                }
+                });
             }
+
+            animatorSet.setDuration(200);
+            animatorSet.start();
         } else {
+            ViewProxy.setAlpha(actionBar, show ? 1.0f : 0.0f);
+            ViewProxy.setAlpha(bottomLayout, show ? 1.0f : 0.0f);
             if (!show) {
                 actionBar.setVisibility(View.GONE);
                 if (canShowBottom) {
@@ -1274,12 +1272,13 @@ public void setImageIndex(int index, boolean init) {
         if (!init) {
             currentThumb = null;
         }
-        placeProvider.willSwitchFromPhoto(currentMessageObject, currentFileLocation, currentIndex);
-        int prevIndex = currentIndex;
-        currentIndex = index;
         currentFileNames[0] = getFileName(index);
         currentFileNames[1] = getFileName(index + 1);
         currentFileNames[2] = getFileName(index - 1);
+        placeProvider.willSwitchFromPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        int prevIndex = currentIndex;
+        currentIndex = index;
+
         boolean sameImage = false;
 
         if (!imagesArr.isEmpty()) {
@@ -1303,7 +1302,7 @@ public void setImageIndex(int index, boolean init) {
                     MessagesController.getInstance().loadMedia(currentDialogId, 0, 100, lastMessage.messageOwner.id, !cacheEndReached, classGuid);
                     loadingMoreImages = true;
                 }
-                actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
+                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
             }
             if (currentMessageObject.messageOwner.ttl != 0) {
                 menuItem.hideSubItem(gallery_menu_save);
@@ -1325,12 +1324,12 @@ public void setImageIndex(int index, boolean init) {
             if (old != null && currentFileLocation != null && old.local_id == currentFileLocation.local_id && old.volume_id == currentFileLocation.volume_id) {
                 sameImage = true;
             }
-            actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocations.size()));
+            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocations.size()));
             menuItem.showSubItem(gallery_menu_save);
             shareButton.setVisibility(View.VISIBLE);
         } else if (!imagesArrLocals.isEmpty()) {
             currentPathObject = imagesArrLocals.get(index).path;
-            actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
+            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
 
             if (placeProvider.isPhotoChecked(currentIndex)) {
                 checkImageView.setBackgroundColor(0xff42d1f6);
@@ -1340,7 +1339,7 @@ public void setImageIndex(int index, boolean init) {
         }
 
 
-        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+        if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(true, true);
             } else {
@@ -1348,7 +1347,7 @@ public void setImageIndex(int index, boolean init) {
             }
         }
         currentPlaceObject = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
-        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+        if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
             } else {
@@ -1390,26 +1389,39 @@ public void setImageIndex(int index, boolean init) {
             setIndexToImage(centerImage, currentIndex);
             setIndexToImage(rightImage, currentIndex + 1);
             setIndexToImage(leftImage, currentIndex - 1);
+
+            for (int a = 0; a < 3; a++) {
+                checkProgress(a, false);
+            }
         } else {
+            checkProgress(0, false);
             if (prevIndex > currentIndex) {
                 ImageReceiver temp = rightImage;
                 rightImage = centerImage;
                 centerImage = leftImage;
                 leftImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[2];
+                radialProgressViews[2] = tempProgress;
                 setIndexToImage(leftImage, currentIndex - 1);
-                radialProgressViews[0].setRadOffset(radialProgressViews[2].getRadOffset());
+
+                checkProgress(1, false);
+                checkProgress(2, false);
             } else if (prevIndex < currentIndex) {
                 ImageReceiver temp = leftImage;
                 leftImage = centerImage;
                 centerImage = rightImage;
                 rightImage = temp;
-                radialProgressViews[0].setRadOffset(radialProgressViews[1].getRadOffset());
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[1];
+                radialProgressViews[1] = tempProgress;
                 setIndexToImage(rightImage, currentIndex + 1);
-            }
-        }
 
-        for (int a = 0; a < 3; a++) {
-            checkProgress(a, false);
+                checkProgress(1, false);
+                checkProgress(2, false);
+            }
         }
     }
 
@@ -1518,15 +1530,15 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
     }
 
     public boolean isShowingImage(MessageObject object) {
-        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.messageOwner.id == object.messageOwner.id;
+        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.messageOwner.id == object.messageOwner.id;
     }
 
     public boolean isShowingImage(TLRPC.FileLocation object) {
-        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentFileLocation != null && object.local_id == currentFileLocation.local_id && object.volume_id == currentFileLocation.volume_id && object.dc_id == currentFileLocation.dc_id;
+        return isVisible && !disableShowCheck && object != null && currentFileLocation != null && object.local_id == currentFileLocation.local_id && object.volume_id == currentFileLocation.volume_id && object.dc_id == currentFileLocation.dc_id;
     }
 
     public boolean isShowingImage(String object) {
-        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentPathObject != null && object.equals(currentPathObject);
+        return isVisible && !disableShowCheck && object != null && currentPathObject != null && object.equals(currentPathObject);
     }
 
     public void openPhoto(final MessageObject messageObject, final PhotoViewerProvider provider) {
@@ -1567,7 +1579,7 @@ public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocatio
             return;
         }
 
-        actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
@@ -1599,132 +1611,115 @@ public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocatio
         backgroundDrawable.setAlpha(255);
         toggleActionBar(true, false);
 
-        if(android.os.Build.VERSION.SDK_INT >= 11) {
-            AndroidUtilities.lockOrientation(parentActivity);
+        AndroidUtilities.lockOrientation(parentActivity);
 
-            final Rect drawRegion = object.imageReceiver.getDrawRegion();
+        final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+        animatingImageView.setVisibility(View.VISIBLE);
+        animatingImageView.setRadius(object.radius);
+        animatingImageView.setNeedRadius(object.radius != 0);
+        animatingImageView.setImageBitmap(object.thumb);
+
+        ViewProxy.setAlpha(animatingImageView, 1.0f);
+        ViewProxy.setPivotX(animatingImageView, 0.0f);
+        ViewProxy.setPivotY(animatingImageView, 0.0f);
+        ViewProxy.setScaleX(animatingImageView, 1.0f);
+        ViewProxy.setScaleY(animatingImageView, 1.0f);
+        ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
+        ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
+        final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+        layoutParams.width = drawRegion.right - drawRegion.left;
+        layoutParams.height = drawRegion.bottom - drawRegion.top;
+        animatingImageView.setLayoutParams(layoutParams);
+
+        containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                containerView.getViewTreeObserver().removeOnPreDrawListener(this);
+
+                float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+                float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+                float scale = scaleX > scaleY ? scaleY : scaleX;
+                float width = layoutParams.width * scale;
+                float height = layoutParams.height * scale;
+                float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+                float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
 
-            animatingImageView.setVisibility(View.VISIBLE);
-            animatingImageView.setImageBitmap(object.thumb);
-
-            animatingImageView.setAlpha(1.0f);
-            animatingImageView.setPivotX(0);
-            animatingImageView.setPivotY(0);
-            animatingImageView.setScaleX(1);
-            animatingImageView.setScaleY(1);
-            animatingImageView.setTranslationX(object.viewX + drawRegion.left);
-            animatingImageView.setTranslationY(object.viewY + drawRegion.top);
-            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
-            layoutParams.width = drawRegion.right - drawRegion.left;
-            layoutParams.height = drawRegion.bottom - drawRegion.top;
-            animatingImageView.setLayoutParams(layoutParams);
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                if (clipTop < 0) {
+                    clipTop = 0;
+                }
+                int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                if (clipBottom < 0) {
+                    clipBottom = 0;
+                }
+                clipTop = Math.max(clipTop, clipVertical);
+                clipBottom = Math.max(clipBottom, clipVertical);
 
-            containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    containerView.getViewTreeObserver().removeOnPreDrawListener(this);
+                AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+                animatorSet.playTogether(
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", xPos),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", yPos),
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", 0),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
+                );
 
-                    float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
-                    float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
-                    float scale = scaleX > scaleY ? scaleY : scaleX;
-                    float width = layoutParams.width * scale;
-                    float height = layoutParams.height * scale;
-                    float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
-                    float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
-                    int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
-                    int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
-
-                    int coords2[] = new int[2];
-                    object.parentView.getLocationInWindow(coords2);
-                    int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
-                    if (clipTop < 0) {
-                        clipTop = 0;
-                    }
-                    int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
-                    if (clipBottom < 0) {
-                        clipBottom = 0;
-                    }
-                    clipTop = Math.max(clipTop, clipVertical);
-                    clipBottom = Math.max(clipBottom, clipVertical);
-
-                    AnimatorSet animatorSet = new AnimatorSet();
-                    animatorSet.playTogether(
-                            ObjectAnimator.ofFloat(animatingImageView, "scaleX", scale),
-                            ObjectAnimator.ofFloat(animatingImageView, "scaleY", scale),
-                            ObjectAnimator.ofFloat(animatingImageView, "translationX", xPos),
-                            ObjectAnimator.ofFloat(animatingImageView, "translationY", yPos),
-                            ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0, 255),
-                            ObjectAnimator.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
-                            ObjectAnimator.ofInt(animatingImageView, "clipTop", clipTop, 0),
-                            ObjectAnimator.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
-                            ObjectAnimator.ofFloat(containerView, "alpha", 0.0f, 1.0f)
-                    );
-
-                    animationEndRunnable = new Runnable() {
-                        @Override
-                        public void run() {
-                            animationInProgress = 0;
-                            transitionAnimationStartTime = 0;
-                            containerView.invalidate();
-                            animatingImageView.setVisibility(View.GONE);
-                            AndroidUtilities.unlockOrientation(parentActivity);
-                            if (showAfterAnimation != null) {
-                                showAfterAnimation.imageReceiver.setVisible(true, true);
-                            }
-                            if (hideAfterAnimation != null) {
-                                hideAfterAnimation.imageReceiver.setVisible(false, true);
-                            }
+                animationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        animationInProgress = 0;
+                        transitionAnimationStartTime = 0;
+                        containerView.invalidate();
+                        animatingImageView.setVisibility(View.GONE);
+                        AndroidUtilities.unlockOrientation(parentActivity);
+                        if (showAfterAnimation != null) {
+                            showAfterAnimation.imageReceiver.setVisible(true, true);
                         }
-                    };
-
-                    animatorSet.setDuration(250);
-                    animatorSet.addListener(new AnimatorListenerAdapter() {
-                        @Override
-                        public void onAnimationEnd(Animator animation) {
-                            if (animationEndRunnable != null) {
-                                animationEndRunnable.run();
-                                animationEndRunnable = null;
-                            }
+                        if (hideAfterAnimation != null) {
+                            hideAfterAnimation.imageReceiver.setVisible(false, true);
                         }
+                    }
+                };
 
-                        @Override
-                        public void onAnimationCancel(Animator animation) {
-                            onAnimationEnd(animation);
-                        }
-                    });
-                    transitionAnimationStartTime = System.currentTimeMillis();
-                    animatorSet.start();
-
-                    animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
-                        @Override
-                        public void onDraw() {
-                            disableShowCheck = false;
-                            animatingImageView.setOnDrawListener(null);
-                            if (android.os.Build.VERSION.SDK_INT >= 11) {
-                                object.imageReceiver.setVisible(false, true);
-                            }
+                animatorSet.setDuration(200);
+                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (animationEndRunnable != null) {
+                            animationEndRunnable.run();
+                            animationEndRunnable = null;
                         }
-                    });
-                    return true;
-                }
-            });
-        } else {
-            animationInProgress = 0;
-            transitionAnimationStartTime = 0;
-            containerView.invalidate();
-            AnimationSet animationSet = new AnimationSet(true);
-            AlphaAnimation animation = new AlphaAnimation(0.0f, 1.0f);
-            animation.setDuration(150);
-            animation.setFillAfter(false);
-            animationSet.addAnimation(animation);
-            ScaleAnimation scaleAnimation = new ScaleAnimation(0.9f, 1.0f, 0.9f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
-            scaleAnimation.setDuration(150);
-            scaleAnimation.setFillAfter(false);
-            animationSet.addAnimation(scaleAnimation);
-            animationSet.setDuration(150);
-            containerView.startAnimation(animationSet);
-            disableShowCheck = false;
-        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        onAnimationEnd(animation);
+                    }
+                });
+                transitionAnimationStartTime = System.currentTimeMillis();
+                animatorSet.start();
+
+                animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
+                    @Override
+                    public void onDraw() {
+                        disableShowCheck = false;
+                        animatingImageView.setOnDrawListener(null);
+                        object.imageReceiver.setVisible(false, true);
+                    }
+                });
+                return true;
+            }
+        });
     }
 
     public void closePhoto(boolean animated) {
@@ -1751,23 +1746,26 @@ public void closePhoto(boolean animated) {
 
         final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
 
-        if(android.os.Build.VERSION.SDK_INT >= 11 && animated) {
+        if(animated) {
             AndroidUtilities.lockOrientation(parentActivity);
 
             animationInProgress = 1;
+            int visibility = animatingImageView.getVisibility();
             animatingImageView.setVisibility(View.VISIBLE);
             containerView.invalidate();
 
-            AnimatorSet animatorSet = new AnimatorSet();
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
 
             final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
             Rect drawRegion = null;
             if (object != null) {
+                animatingImageView.setNeedRadius(object.radius != 0);
                 drawRegion = object.imageReceiver.getDrawRegion();
                 layoutParams.width = drawRegion.right - drawRegion.left;
                 layoutParams.height = drawRegion.bottom - drawRegion.top;
                 animatingImageView.setImageBitmap(object.thumb);
             } else {
+                animatingImageView.setNeedRadius(false);
                 layoutParams.width = centerImage.getImageWidth();
                 layoutParams.height = centerImage.getImageHeight();
                 animatingImageView.setImageBitmap(centerImage.getBitmap());
@@ -1781,15 +1779,13 @@ public void closePhoto(boolean animated) {
             float height = layoutParams.height * scale * scale2;
             float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
             float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
-            animatingImageView.setTranslationX(xPos + translationX);
-            animatingImageView.setTranslationY(yPos + translationY);
-            animatingImageView.setScaleX(scale * scale2);
-            animatingImageView.setScaleY(scale * scale2);
+            ViewProxy.setTranslationX(animatingImageView, xPos + translationX);
+            ViewProxy.setTranslationY(animatingImageView, yPos + translationY);
+            ViewProxy.setScaleX(animatingImageView, scale * scale2);
+            ViewProxy.setScaleY(animatingImageView, scale * scale2);
 
             if (object != null) {
-                if (android.os.Build.VERSION.SDK_INT >= 11) {
-                    object.imageReceiver.setVisible(false, true);
-                }
+                object.imageReceiver.setVisible(false, true);
                 int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
                 int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
 
@@ -1808,22 +1804,23 @@ public void closePhoto(boolean animated) {
                 clipBottom = Math.max(clipBottom, clipVertical);
 
                 animatorSet.playTogether(
-                        ObjectAnimator.ofFloat(animatingImageView, "scaleX", 1),
-                        ObjectAnimator.ofFloat(animatingImageView, "scaleY", 1),
-                        ObjectAnimator.ofFloat(animatingImageView, "translationX", object.viewX + drawRegion.left),
-                        ObjectAnimator.ofFloat(animatingImageView, "translationY", object.viewY + drawRegion.top),
-                        ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0),
-                        ObjectAnimator.ofInt(animatingImageView, "clipHorizontal", clipHorizontal),
-                        ObjectAnimator.ofInt(animatingImageView, "clipTop", clipTop),
-                        ObjectAnimator.ofInt(animatingImageView, "clipBottom", clipBottom),
-                        ObjectAnimator.ofFloat(containerView, "alpha", 0.0f)
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", 1),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", 1),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", object.viewX + drawRegion.left),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", object.viewY + drawRegion.top),
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", object.radius),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f)
                 );
             } else {
                 animatorSet.playTogether(
-                        ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0),
-                        ObjectAnimator.ofFloat(animatingImageView, "alpha", 0.0f),
-                        ObjectAnimator.ofFloat(animatingImageView, "translationY", translationY >= 0 ? AndroidUtilities.displaySize.y : -AndroidUtilities.displaySize.y),
-                        ObjectAnimator.ofFloat(containerView, "alpha", 0.0f)
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "alpha", 0.0f),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", translationY >= 0 ? AndroidUtilities.displaySize.y : -AndroidUtilities.displaySize.y),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f)
                 );
             }
 
@@ -1836,10 +1833,10 @@ public void run() {
                 }
             };
 
-            animatorSet.setDuration(250);
-            animatorSet.addListener(new AnimatorListenerAdapter() {
+            animatorSet.setDuration(200);
+            animatorSet.addListener(new AnimatorListenerAdapterProxy() {
                 @Override
-                public void onAnimationEnd(Animator animation) {
+                public void onAnimationEnd(Object animation) {
                     if (animationEndRunnable != null) {
                         animationEndRunnable.run();
                         animationEndRunnable = null;
@@ -1847,7 +1844,7 @@ public void onAnimationEnd(Animator animation) {
                 }
 
                 @Override
-                public void onAnimationCancel(Animator animation) {
+                public void onAnimationCancel(Object animation) {
                     onAnimationEnd(animation);
                 }
             });
@@ -1929,7 +1926,7 @@ private void onPhotoClosed(PlaceProviderObject object) {
         centerImage.setImageBitmap((Bitmap)null);
         leftImage.setImageBitmap((Bitmap)null);
         rightImage.setImageBitmap((Bitmap)null);
-        if (android.os.Build.VERSION.SDK_INT >= 11 && object != null) {
+        if (object != null) {
             object.imageReceiver.setVisible(true, true);
         }
         containerView.post(new Runnable() {
@@ -2226,7 +2223,7 @@ private void onDraw(Canvas canvas) {
         float ai = -1;
         if (System.currentTimeMillis() - animationStartTime < animationDuration) {
             ai = interpolator.getInterpolation((float)(System.currentTimeMillis() - animationStartTime) / animationDuration);
-            if (ai >= 0.95f) {
+            if (ai >= 0.99f) {
                 ai = -1;
             }
         }
@@ -2487,7 +2484,7 @@ public boolean onDoubleTap(MotionEvent e) {
         if (!canZoom || scale == 1.0f && (translationY != 0 || translationX != 0)) {
             return false;
         }
-        if (animationStartTime != 0) {
+        if (animationStartTime != 0 || animationInProgress != 0) {
             return false;
         }
         if (scale == 1.0f) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 3e7a73393..f1acb8a59 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -15,6 +15,7 @@
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.os.PowerManager;
+import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -44,9 +45,9 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessageObject;
 import org.telegram.android.PhotoObject;
-import org.telegram.ui.Views.ActionBar.ActionBar;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ChatActivityEnterView;
 import org.telegram.ui.Views.FrameLayoutFixed;
@@ -58,9 +59,12 @@
 
 public class PopupNotificationActivity extends Activity implements NotificationCenter.NotificationCenterDelegate {
 
-    private ActionBarLayer actionBarLayer;
+    private ActionBar actionBar;
     private ChatActivityEnterView chatActivityEnterView;
     private BackupImageView avatarImageView;
+    private TextView nameTextView;
+    private TextView onlineTextView;
+    private FrameLayout avatarContainer;
     private TextView countText;
     private ViewGroup messageContainer;
     private ViewGroup centerView;
@@ -174,6 +178,16 @@ public void needSendTyping() {
                     MessagesController.getInstance().sendTyping(currentMessageObject.getDialogId(), classGuid);
                 }
             }
+
+            @Override
+            public void onAttachButtonHidden() {
+
+            }
+
+            @Override
+            public void onAttachButtonShow() {
+
+            }
         });
 
         setContentView(R.layout.popup_notification_layout);
@@ -181,27 +195,78 @@ public void needSendTyping() {
         messageContainer = new FrameLayoutTouch(this);
         popupContainer.addView(messageContainer, 0);
 
-        ActionBar actionBar = new ActionBar(this);
+        actionBar = new ActionBar(this);
+        actionBar.setOccupyStatusBar(false);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setBackgroundResource(R.color.header);
+        actionBar.setItemsBackground(R.drawable.bar_selector);
         popupContainer.addView(actionBar);
         ViewGroup.LayoutParams layoutParams = actionBar.getLayoutParams();
         layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;
         actionBar.setLayoutParams(layoutParams);
 
-        actionBarLayer = actionBar.createLayer();
-        actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-        actionBarLayer.setBackgroundResource(R.color.header);
-        actionBarLayer.setItemsBackground(R.drawable.bar_selector);
-        actionBar.setCurrentActionBarLayer(actionBarLayer);
-
-        ActionBarMenu menu = actionBarLayer.createMenu();
+        ActionBarMenu menu = actionBar.createMenu();
         View view = menu.addItemResource(2, R.layout.popup_count_layout);
         countText = (TextView) view.findViewById(R.id.count_text);
 
-        view = menu.addItemResource(1, R.layout.chat_header_layout);
-        avatarImageView = (BackupImageView)view.findViewById(R.id.chat_avatar_image);
+        avatarContainer = new FrameLayoutFixed(this);
+        avatarContainer.setBackgroundResource(R.drawable.bar_selector);
+        avatarContainer.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
+        actionBar.addView(avatarContainer);
+        FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
+        layoutParams2.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams2.rightMargin = AndroidUtilities.dp(48);
+        layoutParams2.leftMargin = AndroidUtilities.dp(60);
+        layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+        avatarContainer.setLayoutParams(layoutParams2);
+
+        avatarImageView = new BackupImageView(this);
+        avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(21));
         avatarImageView.processDetach = false;
-
-        actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+        avatarContainer.addView(avatarImageView);
+        layoutParams2 = (FrameLayout.LayoutParams) avatarImageView.getLayoutParams();
+        layoutParams2.width = AndroidUtilities.dp(42);
+        layoutParams2.height = AndroidUtilities.dp(42);
+        layoutParams2.topMargin = AndroidUtilities.dp(3);
+        avatarImageView.setLayoutParams(layoutParams2);
+
+        nameTextView = new TextView(this);
+        nameTextView.setTextColor(0xffffffff);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        nameTextView.setLines(1);
+        nameTextView.setMaxLines(1);
+        nameTextView.setSingleLine(true);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        nameTextView.setGravity(Gravity.LEFT);
+        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        avatarContainer.addView(nameTextView);
+        layoutParams2 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+        layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams2.leftMargin = AndroidUtilities.dp(54);
+        layoutParams2.bottomMargin = AndroidUtilities.dp(22);
+        layoutParams2.gravity = Gravity.BOTTOM;
+        nameTextView.setLayoutParams(layoutParams2);
+
+        onlineTextView = new TextView(this);
+        onlineTextView.setTextColor(0xffd7e8f7);
+        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        onlineTextView.setLines(1);
+        onlineTextView.setMaxLines(1);
+        onlineTextView.setSingleLine(true);
+        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+        onlineTextView.setGravity(Gravity.LEFT);
+        avatarContainer.addView(onlineTextView);
+        layoutParams2 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+        layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams2.leftMargin = AndroidUtilities.dp(54);
+        layoutParams2.bottomMargin = AndroidUtilities.dp(4);
+        layoutParams2.gravity = Gravity.BOTTOM;
+        onlineTextView.setLayoutParams(layoutParams2);
+
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
@@ -619,26 +684,37 @@ private void prepareLayouts(int move) {
     }
 
     private void fixLayout() {
-        messageContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
-                if (!checkTransitionAnimation() && !startedMoving) {
-                    ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)messageContainer.getLayoutParams();
-                    if (!AndroidUtilities.isTablet() && PopupNotificationActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                        layoutParams.topMargin = AndroidUtilities.dp(40);
-                    } else {
-                        layoutParams.topMargin = AndroidUtilities.dp(48);
+        if (avatarContainer != null) {
+            avatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    if (avatarContainer != null) {
+                        avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    layoutParams.bottomMargin = AndroidUtilities.dp(48);
-                    layoutParams.width = ViewGroup.MarginLayoutParams.MATCH_PARENT;
-                    layoutParams.height = ViewGroup.MarginLayoutParams.MATCH_PARENT;
-                    messageContainer.setLayoutParams(layoutParams);
-                    applyViewsLayoutParams(0);
+                    int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
+                    avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
+                    return false;
                 }
-                return false;
-            }
-        });
+            });
+        }
+        if (messageContainer != null) {
+            messageContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
+                    if (!checkTransitionAnimation() && !startedMoving) {
+                        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) messageContainer.getLayoutParams();
+                        layoutParams.topMargin = AndroidUtilities.getCurrentActionBarHeight();
+                        layoutParams.bottomMargin = AndroidUtilities.dp(48);
+                        layoutParams.width = ViewGroup.MarginLayoutParams.MATCH_PARENT;
+                        layoutParams.height = ViewGroup.MarginLayoutParams.MATCH_PARENT;
+                        messageContainer.setLayoutParams(layoutParams);
+                        applyViewsLayoutParams(0);
+                    }
+                    return false;
+                }
+            });
+        }
     }
 
     private void handleIntent(Intent intent) {
@@ -718,7 +794,7 @@ private void openCurrentMessage() {
     }
 
     private void updateInterfaceForCurrentMessage(int move) {
-        if (actionBarLayer == null) {
+        if (actionBar == null) {
             return;
         }
         currentChat = null;
@@ -739,15 +815,18 @@ private void updateInterfaceForCurrentMessage(int move) {
         }
 
         if (currentChat != null && currentUser != null) {
-            actionBarLayer.setTitle(currentChat.title);
-            actionBarLayer.setSubtitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            actionBarLayer.setTitleIcon(0, 0);
+            nameTextView.setText(currentChat.title);
+            onlineTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            nameTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
+            nameTextView.setCompoundDrawablePadding(0);
         } else if (currentUser != null) {
-            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             if ((int)dialog_id == 0) {
-                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+                nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_white, 0, 0, 0);
+                nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
             } else {
-                actionBarLayer.setTitleIcon(0, 0);
+                nameTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
+                nameTextView.setCompoundDrawablePadding(0);
             }
         }
 
@@ -758,7 +837,7 @@ private void updateInterfaceForCurrentMessage(int move) {
     }
 
     private void updateSubtitle() {
-        if (actionBarLayer == null) {
+        if (actionBar == null) {
             return;
         }
         if (currentChat != null || currentUser == null) {
@@ -766,12 +845,12 @@ private void updateSubtitle() {
         }
         if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
             if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
+                nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
             } else {
-                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             }
         } else {
-            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
         }
         CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
         if (printString == null || printString.length() == 0) {
@@ -781,17 +860,17 @@ private void updateSubtitle() {
             if (user != null) {
                 currentUser = user;
             }
-            actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
+            onlineTextView.setText(LocaleController.formatUserStatus(currentUser));
         } else {
             lastPrintString = printString;
-            actionBarLayer.setSubtitle(printString);
+            onlineTextView.setText(printString);
             setTypingAnimation(true);
         }
     }
 
     private void checkAndUpdateAvatar() {
         TLRPC.FileLocation newPhoto = null;
-        int placeHolderId = 0;
+        AvatarDrawable avatarDrawable = null;
         if (currentChat != null) {
             TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
             if (chat == null) {
@@ -801,7 +880,7 @@ private void checkAndUpdateAvatar() {
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
-            placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+            avatarDrawable = new AvatarDrawable(currentChat);
         } else if (currentUser != null) {
             TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
             if (user == null) {
@@ -811,26 +890,28 @@ private void checkAndUpdateAvatar() {
             if (currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             }
-            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
+            avatarDrawable = new AvatarDrawable(currentUser);
         }
         if (avatarImageView != null) {
-            avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
+            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
         }
     }
 
     private void setTypingAnimation(boolean start) {
-        if (actionBarLayer == null) {
+        if (actionBar == null) {
             return;
         }
         if (start) {
             try {
-                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
+                onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
+                onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
                 typingDotsDrawable.start();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
         } else {
-            actionBarLayer.setSubTitleIcon(0, null, 0);
+            onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
+            onlineTextView.setCompoundDrawablePadding(0);
             typingDotsDrawable.stop();
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
new file mode 100644
index 000000000..db3551741
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -0,0 +1,431 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+
+import java.util.ArrayList;
+
+public class PrivacySettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+
+    private int privacySectionRow;
+    private int blockedRow;
+    private int lastSeenRow;
+    private int lastSeenDetailRow;
+    private int securitySectionRow;
+    private int terminateSessionsRow;
+    private int terminateSessionsDetailRow;
+    private int deleteAccountSectionRow;
+    private int deleteAccountRow;
+    private int deleteAccountDetailRow;
+    private int rowCount;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        ContactsController.getInstance().loadPrivacySettings();
+
+        rowCount = 0;
+        privacySectionRow = rowCount++;
+        blockedRow = rowCount++;
+        lastSeenRow = rowCount++;
+        lastSeenDetailRow = rowCount++;
+        securitySectionRow = rowCount++;
+        terminateSessionsRow = rowCount++;
+        terminateSessionsDetailRow = rowCount++;
+        deleteAccountSectionRow = rowCount++;
+        deleteAccountRow = rowCount++;
+        deleteAccountDetailRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.privacyRulesUpdated);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.privacyRulesUpdated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("PrivacySettings", R.string.PrivacySettings));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+            frameLayout.setBackgroundColor(0xfff0f0f0);
+
+            ListView listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDrawSelectorOnTop(true);
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == blockedRow) {
+                        presentFragment(new BlockedUsersActivity());
+                    } else if (i == terminateSessionsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureSessions", R.string.AreYouSureSessions));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                TLRPC.TL_auth_resetAuthorizations req = new TLRPC.TL_auth_resetAuthorizations();
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                if (getParentActivity() == null) {
+                                                    return;
+                                                }
+                                                if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                } else {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                }
+                                            }
+                                        });
+                                        UserConfig.registeredForPush = false;
+                                        UserConfig.registeredForInternalPush = false;
+                                        UserConfig.saveConfig(false);
+                                        MessagesController.getInstance().registerForPush(UserConfig.pushString);
+                                        ConnectionsManager.getInstance().initPushConnection();
+                                    }
+                                });
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == deleteAccountRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.formatPluralString("Months", 1),
+                                LocaleController.formatPluralString("Months", 3),
+                                LocaleController.formatPluralString("Months", 6),
+                                LocaleController.formatPluralString("Years", 1)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                int value = 0;
+                                if (which == 0) {
+                                    value = 30;
+                                } else if (which == 1) {
+                                    value = 60;
+                                } else if (which == 2) {
+                                    value = 182;
+                                } else if (which == 3) {
+                                    value = 365;
+                                }
+                                final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+                                progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                                progressDialog.setCanceledOnTouchOutside(false);
+                                progressDialog.setCancelable(false);
+                                progressDialog.show();
+
+                                final TLRPC.TL_account_setAccountTTL req = new TLRPC.TL_account_setAccountTTL();
+                                req.ttl = new TLRPC.TL_accountDaysTTL();
+                                req.ttl.days = value;
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                try {
+                                                    progressDialog.dismiss();
+                                                } catch (Exception e) {
+                                                    FileLog.e("tmessages", e);
+                                                }
+                                                if (response instanceof TLRPC.TL_boolTrue) {
+                                                    ContactsController.getInstance().setDeleteAccountTTL(req.ttl.days);
+                                                    listAdapter.notifyDataSetChanged();
+                                                }
+                                            }
+                                        });
+                                    }
+                                });
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == lastSeenRow) {
+                        presentFragment(new LastSeenActivity());
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.privacyRulesUpdated) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    private String formatRulesString() {
+        ArrayList<TLRPC.PrivacyRule> privacyRules = ContactsController.getInstance().getPrivacyRules();
+        if (privacyRules.size() == 0) {
+            return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
+        }
+        int type = -1;
+        int plus = 0;
+        int minus = 0;
+        for (TLRPC.PrivacyRule rule : privacyRules) {
+            if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
+                plus += rule.users.size();
+            } else if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
+                minus += rule.users.size();
+            } else if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
+                type = 0;
+            } else if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
+                type = 1;
+            } else {
+                type = 2;
+            }
+        }
+        if (type == 0 || type == -1 && minus > 0) {
+            if (minus == 0) {
+                return LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody);
+            } else {
+                return LocaleController.formatString("LastSeenEverybodyMinus", R.string.LastSeenEverybodyMinus, minus);
+            }
+        } else if (type == 2 || type == -1 && minus > 0 && plus > 0) {
+            if (plus == 0 && minus == 0) {
+                return LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts);
+            } else {
+                if (plus != 0 && minus != 0) {
+                    return LocaleController.formatString("LastSeenContactsMinusPlus", R.string.LastSeenContactsMinusPlus, minus, plus);
+                } else if (minus != 0) {
+                    return LocaleController.formatString("LastSeenContactsMinus", R.string.LastSeenContactsMinus, minus);
+                } else if (plus != 0) {
+                    return LocaleController.formatString("LastSeenContactsPlus", R.string.LastSeenContactsPlus, plus);
+                }
+            }
+        } else if (type == 1 || type == -1 && plus > 0) {
+            if (plus == 0) {
+                return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
+            } else {
+                return LocaleController.formatString("LastSeenNobodyPlus", R.string.LastSeenNobodyPlus, plus);
+            }
+        }
+        return "unknown";
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == blockedRow || i == terminateSessionsRow || i == lastSeenRow && !ContactsController.getInstance().getLoadingLastSeenInfo() || i == deleteAccountRow && !ContactsController.getInstance().getLoadingDeleteInfo();
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == blockedRow) {
+                    textCell.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), true);
+                } else if (i == terminateSessionsRow) {
+                    textCell.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), false);
+                }  else if (i == lastSeenRow) {
+                    String value;
+                    if (ContactsController.getInstance().getLoadingLastSeenInfo()) {
+                        value = LocaleController.getString("Loading", R.string.Loading);
+                    } else {
+                        value = formatRulesString();
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), value, false);
+                }  else if (i == deleteAccountRow) {
+                    String value;
+                    if (ContactsController.getInstance().getLoadingDeleteInfo()) {
+                        value = LocaleController.getString("Loading", R.string.Loading);
+                    } else {
+                        int ttl = ContactsController.getInstance().getDeleteAccountTTL();
+                        if (ttl <= 182) {
+                            value = LocaleController.formatPluralString("Months", ttl / 30);
+                        } else if (ttl == 365) {
+                            value = LocaleController.formatPluralString("Years", ttl / 365);
+                        } else {
+                            value = LocaleController.formatPluralString("Days", ttl);
+                        }
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("DeleteAccountIfAwayFor", R.string.DeleteAccountIfAwayFor), value, false);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == deleteAccountDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("DeleteAccountHelp", R.string.DeleteAccountHelp));
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
+                } else if (i == lastSeenDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("LastSeenHelp", R.string.LastSeenHelp));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                } else if (i == terminateSessionsDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ClearOtherSessionsHelp", R.string.ClearOtherSessionsHelp));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == privacySectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
+                } else if (i == securitySectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SecurityTitle", R.string.SecurityTitle));
+                } else if (i == deleteAccountSectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == lastSeenRow || i == blockedRow || i == deleteAccountRow || i == terminateSessionsRow) {
+                return 0;
+            } else if (i == deleteAccountDetailRow || i == lastSeenDetailRow || i == terminateSessionsDetailRow) {
+                return 1;
+            } else if (i == securitySectionRow || i == deleteAccountSectionRow || i == privacySectionRow) {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
new file mode 100644
index 000000000..6e2cadb66
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -0,0 +1,1312 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.Html;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.android.MessageObject;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.DividerCell;
+import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCell;
+import org.telegram.ui.Cells.TextDetailCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Views.AvatarDrawable;
+import org.telegram.ui.Views.AvatarUpdater;
+import org.telegram.ui.Views.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.IdenticonDrawable;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.concurrent.Semaphore;
+
+public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+    private BackupImageView avatarImage;
+    private TextView nameTextView;
+    private TextView onlineTextView;
+    private ImageView writeButton;
+
+    private int user_id;
+    private int chat_id;
+    private long dialog_id;
+    private boolean creatingChat;
+    private boolean userBlocked;
+
+    private AvatarUpdater avatarUpdater;
+    private TLRPC.ChatParticipants info;
+    private TLRPC.TL_chatParticipant selectedUser;
+    private int onlineCount = -1;
+    private ArrayList<Integer> sortedUsers;
+
+    private TLRPC.EncryptedChat currentEncryptedChat;
+    private TLRPC.Chat currentChat;
+
+    private int totalMediaCount = -1;
+
+    private final static int add_contact = 1;
+    private final static int block_contact = 2;
+    private final static int share_contact = 3;
+    private final static int edit_contact = 4;
+    private final static int delete_contact = 5;
+    private final static int add_member = 6;
+    private final static int leave_group = 7;
+    private final static int edit_name = 8;
+
+    private int overscrollRow;
+    private int emptyRow;
+    private int emptyRowChat;
+    private int emptyRowChat2;
+    private int phoneRow;
+    private int usernameRow;
+    private int settingsTimerRow;
+    private int settingsKeyRow;
+    private int settingsNotificationsRow;
+    private int sharedMediaRow;
+    private int startSecretChatRow;
+    private int sectionRow;
+    private int membersSectionRow;
+    private int membersEndRow;
+    private int rowCount = 0;
+
+    public ProfileActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        user_id = arguments.getInt("user_id", 0);
+        chat_id = getArguments().getInt("chat_id", 0);
+        if (user_id != 0) {
+            dialog_id = arguments.getLong("dialog_id", 0);
+            if (dialog_id != 0) {
+                currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            }
+            if (MessagesController.getInstance().getUser(user_id) == null) {
+                return false;
+            }
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
+
+            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
+        } else if (chat_id != 0) {
+            currentChat = MessagesController.getInstance().getChat(chat_id);
+            if (currentChat == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentChat = MessagesStorage.getInstance().getChat(chat_id);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentChat != null) {
+                    MessagesController.getInstance().putChat(currentChat, true);
+                } else {
+                    return false;
+                }
+            }
+
+
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+
+            sortedUsers = new ArrayList<Integer>();
+            updateOnlineCount();
+            if (chat_id > 0) {
+                MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
+            }
+
+            avatarUpdater = new AvatarUpdater();
+            avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
+                @Override
+                public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
+                    if (chat_id != 0) {
+                        MessagesController.getInstance().changeChatAvatar(chat_id, file);
+                    }
+                }
+            };
+            avatarUpdater.parentFragment = this;
+        } else {
+            return false;
+        }
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        updateRowsIds();
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        if (user_id != 0) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+            MessagesController.getInstance().cancelLoadFullUser(user_id);
+        } else if (chat_id != 0) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+            avatarUpdater.clear();
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 ? 5 : chat_id));
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(user_id != 0 ? 5 : chat_id));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(final int id) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == block_contact) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        if (!userBlocked) {
+                            builder.setMessage(LocaleController.getString("AreYouSureBlockContact", R.string.AreYouSureBlockContact));
+                        } else {
+                            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
+                        }
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (!userBlocked) {
+                                    MessagesController.getInstance().blockUser(user_id);
+                                } else {
+                                    MessagesController.getInstance().unblockUser(user_id);
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (id == add_contact) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user.id);
+                        presentFragment(new ContactAddActivity(args));
+                    } else if (id == share_contact) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlySelect", true);
+                        args.putBoolean("serverOnly", true);
+                        MessagesActivity fragment = new MessagesActivity(args);
+                        fragment.setDelegate(ProfileActivity.this);
+                        presentFragment(fragment);
+                    } else if (id == edit_contact) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user_id);
+                        presentFragment(new ContactAddActivity(args));
+                    } else if (id == delete_contact) {
+                        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        if (user == null || getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureDeleteContact", R.string.AreYouSureDeleteContact));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                ArrayList<TLRPC.User> arrayList = new ArrayList<TLRPC.User>();
+                                arrayList.add(user);
+                                ContactsController.getInstance().deleteContact(arrayList);
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (id == add_member) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlyUsers", true);
+                        args.putBoolean("destroyAfterSelect", true);
+                        args.putBoolean("returnAsResult", true);
+                        //args.putBoolean("allowUsernameSearch", false);
+                        if (chat_id > 0) {
+                            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
+                        }
+                        ContactsActivity fragment = new ContactsActivity(args);
+                        fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
+                            @Override
+                            public void didSelectContact(TLRPC.User user, String param) {
+                                MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
+                            }
+                        });
+                        if (info != null) {
+                            HashMap<Integer, TLRPC.User> users = new HashMap<Integer, TLRPC.User>();
+                            for (TLRPC.TL_chatParticipant p : info.participants) {
+                                users.put(p.user_id, null);
+                            }
+                            fragment.setIgnoreUsers(users);
+                        }
+                        presentFragment(fragment);
+                    } else if (id == leave_group) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                kickUser(null);
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (id == edit_name) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", chat_id);
+                        presentFragment(new ChangeChatNameActivity(args));
+                    }
+                }
+            });
+
+            createActionBarMenu();
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            avatarImage = new BackupImageView(getParentActivity());
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(30));
+            avatarImage.processDetach = false;
+            actionBar.addView(avatarImage);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            layoutParams.width = AndroidUtilities.dp(60);
+            layoutParams.height = AndroidUtilities.dp(60);
+            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(17);
+            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(17) : 0;
+            layoutParams.bottomMargin = AndroidUtilities.dp(22);
+            avatarImage.setLayoutParams(layoutParams);
+            avatarImage.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (user_id != 0) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        if (user.photo != null && user.photo.photo_big != null) {
+                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                            PhotoViewer.getInstance().openPhoto(user.photo.photo_big, ProfileActivity.this);
+                        }
+                    } else if (chat_id != 0) {
+                        TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+                        if (chat.photo != null && chat.photo.photo_big != null) {
+                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                            PhotoViewer.getInstance().openPhoto(chat.photo.photo_big, ProfileActivity.this);
+                        }
+                    }
+                }
+            });
+
+            nameTextView = new TextView(getParentActivity());
+            nameTextView.setTextColor(0xffffffff);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+            nameTextView.setLines(1);
+            nameTextView.setMaxLines(1);
+            nameTextView.setSingleLine(true);
+            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            actionBar.addView(nameTextView);
+            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
+            layoutParams.bottomMargin = AndroidUtilities.dp(51);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            nameTextView.setLayoutParams(layoutParams);
+
+            onlineTextView = new TextView(getParentActivity());
+            onlineTextView.setTextColor(AvatarDrawable.getProfileTextColorForId(user_id != 0 ? 5 : chat_id));
+            onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            onlineTextView.setLines(1);
+            onlineTextView.setMaxLines(1);
+            onlineTextView.setSingleLine(true);
+            onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            actionBar.addView(onlineTextView);
+            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
+            layoutParams.bottomMargin = AndroidUtilities.dp(30);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            onlineTextView.setLayoutParams(layoutParams);
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(user_id != 0 ? 5 : chat_id));
+            frameLayout.addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    if (i == sharedMediaRow) {
+                        Bundle args = new Bundle();
+                        if (user_id != 0) {
+                            args.putLong("dialog_id", dialog_id != 0 ? dialog_id : user_id);
+                        } else {
+                            args.putLong("dialog_id", -chat_id);
+                        }
+                        presentFragment(new MediaActivity(args));
+                    } else if (i == settingsKeyRow) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", (int)(dialog_id >> 32));
+                        presentFragment(new IdenticonActivity(args));
+                    } else if (i == settingsTimerRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        if (user_id != 0) {
+                            args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
+                        } else if (chat_id != 0) {
+                            args.putLong("dialog_id", -chat_id);
+                        }
+                        presentFragment(new ProfileNotificationsActivity(args));
+                    } else if (i == startSecretChatRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureSecretChat", R.string.AreYouSureSecretChat));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                creatingChat = true;
+                                MessagesController.getInstance().startSecretChat(getParentActivity(), MessagesController.getInstance().getUser(user_id));
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == phoneRow) {
+                        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        if (user == null || user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
+                            return;
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setItems(new CharSequence[] {LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    try {
+                                        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
+                                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                        getParentActivity().startActivity(intent);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                } else if (i == 1) {
+                                    if(Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                        clipboard.setText(user.phone);
+                                    } else {
+                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", user.phone);
+                                        clipboard.setPrimaryClip(clip);
+                                    }
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i > emptyRowChat2 && i < membersEndRow) {
+                        int user_id = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1)).user_id;
+                        if (user_id == UserConfig.getClientUserId()) {
+                            return;
+                        }
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user_id);
+                        presentFragment(new ProfileActivity(args));
+                    }
+                }
+            });
+            if (chat_id != 0) {
+                listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                    @Override
+                    public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                        if (i > emptyRowChat2 && i < membersEndRow) {
+                            if (getParentActivity() == null) {
+                                return false;
+                            }
+
+                            TLRPC.TL_chatParticipant user = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
+                            if (user.user_id == UserConfig.getClientUserId()) {
+                                return false;
+                            }
+                            if (info.admin_id != UserConfig.getClientUserId() && user.inviter_id != UserConfig.getClientUserId()) {
+                                return false;
+                            }
+                            selectedUser = user;
+
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            CharSequence[] items = new CharSequence[]{chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
+
+                            builder.setItems(items, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    if (i == 0) {
+                                        kickUser(selectedUser);
+                                    }
+                                }
+                            });
+                            showAlertDialog(builder);
+
+                            return true;
+                        }
+                        return false;
+                    }
+                });
+            }
+            if (dialog_id != 0) {
+                MessagesController.getInstance().getMediaCount(dialog_id, classGuid, true);
+            } else {
+                MessagesController.getInstance().getMediaCount(user_id, classGuid, true);
+            }
+
+            frameLayout.addView(actionBar);
+
+            if (user_id != 0 || chat_id >= 0 && !currentChat.left) {
+                writeButton = new ImageView(getParentActivity());
+                if (user_id != 0) {
+                    writeButton.setImageResource(R.drawable.floating_user_states);
+                } else if (chat_id != 0) {
+                    writeButton.setImageResource(R.drawable.floating_group_states);
+                }
+                frameLayout.addView(writeButton);
+                layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
+                layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+                layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+                layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+                layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+                layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT);
+                writeButton.setLayoutParams(layoutParams);
+                writeButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        if (user_id != 0) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                            if (user == null || user instanceof TLRPC.TL_userEmpty) {
+                                return;
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            Bundle args = new Bundle();
+                            args.putInt("user_id", user_id);
+                            presentFragment(new ChatActivity(args), true);
+                        } else if (chat_id != 0) {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            CharSequence[] items;
+                            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+                            if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
+                                items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                            } else {
+                                items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                            }
+
+                            builder.setItems(items, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    int action = 0;
+                                    if (i == 0) {
+                                        avatarUpdater.openCamera();
+                                    } else if (i == 1) {
+                                        avatarUpdater.openGallery();
+                                    } else if (i == 2) {
+                                        MessagesController.getInstance().changeChatAvatar(chat_id, null);
+                                    }
+                                }
+                            });
+                            showAlertDialog(builder);
+                        }
+                    }
+                });
+            }
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView view, int scrollState) {
+
+                }
+
+                @Override
+                public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    checkListViewScroll();
+                }
+            });
+
+            updateProfileData();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (chat_id != 0) {
+            if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
+                args.putString("path", avatarUpdater.currentPicturePath);
+            }
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        if (chat_id != 0) {
+            MessagesController.getInstance().loadChatInfo(chat_id, null);
+            if (avatarUpdater != null) {
+                avatarUpdater.currentPicturePath = args.getString("path");
+            }
+        }
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (chat_id != 0) {
+            avatarUpdater.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+
+    private void checkListViewScroll() {
+        if (listView.getChildCount() == 0) {
+            return;
+        }
+        int height = 0;
+        View child = listView.getChildAt(0);
+        if (child != null) {
+            if (listView.getFirstVisiblePosition() == 0) {
+                height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
+            }
+            if (actionBar.getExtraHeight() != height) {
+                actionBar.setExtraHeight(height, true);
+                needLayout();
+            }
+        }
+    }
+
+    private void needLayout() {
+        FrameLayout.LayoutParams layoutParams;
+        if (listView != null) {
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
+            listView.setLayoutParams(layoutParams);
+        }
+
+        if (avatarImage != null) {
+            float diff = actionBar.getExtraHeight() / (float)AndroidUtilities.dp(88);
+            float diffm = 1.0f - diff;
+
+            int avatarSize = 42 + (int)(18 * diff);
+            int avatarX = 17 + (int)(47 * diffm);
+            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int nameX = 97 + (int)(21 * diffm);
+            int nameEndX = 16 + (int)(32 * diffm);
+            float nameFontSize = 20 - 2 * diffm;
+            int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
+            int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
+
+            if (writeButton != null) {
+                layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
+                layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
+                writeButton.setLayoutParams(layoutParams);
+                ViewProxy.setAlpha(writeButton, diff);
+                writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
+                if (writeButton.getVisibility() == View.GONE) {
+                    writeButton.clearAnimation();
+                }
+            }
+
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(avatarSize / 2));
+            layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams.width = AndroidUtilities.dp(avatarSize);
+            layoutParams.height = AndroidUtilities.dp(avatarSize);
+            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(avatarX);
+            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(avatarX) : 0;
+            layoutParams.bottomMargin = avatarY;
+            avatarImage.setLayoutParams(layoutParams);
+
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, nameFontSize);
+            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
+            layoutParams.bottomMargin = nameY;
+            nameTextView.setLayoutParams(layoutParams);
+
+            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
+            layoutParams.bottomMargin = statusY;
+            onlineTextView.setLayoutParams(layoutParams);
+        }
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    @Override
+    public boolean needAddActionBar() {
+        return false;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if (user_id != 0) {
+                if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                    updateProfileData();
+                }
+            } else if (chat_id != 0) {
+                if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                    updateOnlineCount();
+                    updateProfileData();
+                }
+                if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                    int count = listView.getChildCount();
+                    for (int a = 0; a < count; a++) {
+                        View child = listView.getChildAt(a);
+                        if (child instanceof UserCell) {
+                            ((UserCell) child).update(mask);
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            createActionBarMenu();
+        } else if (id == NotificationCenter.mediaCountDidLoaded) {
+            long uid = (Long)args[0];
+            if (user_id != 0) {
+                if (uid > 0 && user_id == uid && dialog_id == 0 || dialog_id != 0 && dialog_id == uid) {
+                    totalMediaCount = (Integer) args[1];
+                    if (listView != null) {
+                        listView.invalidateViews();
+                    }
+                }
+            } else if (chat_id != 0) {
+                int lower_part = (int)uid;
+                if (lower_part < 0 && chat_id == -lower_part) {
+                    totalMediaCount = (Integer)args[1];
+                    if (listView != null) {
+                        listView.invalidateViews();
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.encryptedChatCreated) {
+            if (creatingChat) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) args[0];
+                        Bundle args2 = new Bundle();
+                        args2.putInt("enc_id", encryptedChat.id);
+                        presentFragment(new ChatActivity(args2), true);
+                    }
+                });
+            }
+        } else if (id == NotificationCenter.encryptedChatUpdated) {
+            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
+            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
+                currentEncryptedChat = chat;
+                updateRowsIds();
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                    checkListViewScroll();
+                }
+            }
+        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
+            boolean oldValue = userBlocked;
+            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
+            if (oldValue != userBlocked) {
+                createActionBarMenu();
+            }
+        } else if (id == NotificationCenter.chatInfoDidLoaded) {
+            int chatId = (Integer)args[0];
+            if (chatId == chat_id) {
+                info = (TLRPC.ChatParticipants)args[1];
+                updateOnlineCount();
+                updateRowsIds();
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                    checkListViewScroll();
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (fileLocation == null) {
+            return null;
+        }
+
+        TLRPC.FileLocation photoBig = null;
+        if (user_id != 0) {
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user != null && user.photo != null && user.photo.photo_big != null) {
+                photoBig = user.photo.photo_big;
+            }
+        } else if (chat_id != 0) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+            if (chat != null && chat.photo != null && chat.photo.photo_big != null) {
+                photoBig = chat.photo.photo_big;
+            }
+        }
+
+
+        if (photoBig != null && photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+            int coords[] = new int[2];
+            avatarImage.getLocationInWindow(coords);
+            PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+            object.viewX = coords[0];
+            object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+            object.parentView = avatarImage;
+            object.imageReceiver = avatarImage.imageReceiver;
+            object.user_id = user_id;
+            object.thumb = object.imageReceiver.getBitmap();
+            object.size = -1;
+            object.radius = avatarImage.imageReceiver.getRoundRadius();
+            return object;
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() {
+        avatarImage.imageReceiver.setVisible(true, true);
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    private void updateOnlineCount() {
+        if (info == null) {
+            return;
+        }
+        onlineCount = 0;
+        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+        sortedUsers.clear();
+        int i = 0;
+        for (TLRPC.TL_chatParticipant participant : info.participants) {
+            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                onlineCount++;
+            }
+            sortedUsers.add(i);
+            i++;
+        }
+
+        Collections.sort(sortedUsers, new Comparator<Integer>() {
+            @Override
+            public int compare(Integer lhs, Integer rhs) {
+                TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.get(rhs).user_id);
+                TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.get(lhs).user_id);
+                Integer status1 = 0;
+                Integer status2 = 0;
+                if (user1 != null && user1.status != null) {
+                    if (user1.id == UserConfig.getClientUserId()) {
+                        status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                    } else {
+                        status1 = user1.status.expires;
+                    }
+                }
+                if (user2 != null && user2.status != null) {
+                    if (user2.id == UserConfig.getClientUserId()) {
+                        status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                    } else {
+                        status2 = user2.status.expires;
+                    }
+                }
+                return status1.compareTo(status2);
+            }
+        });
+
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
+        info = chatParticipants;
+    }
+
+    private void kickUser(TLRPC.TL_chatParticipant user) {
+        if (user != null) {
+            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(user.user_id), info);
+        } else {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
+            MessagesController.getInstance().deleteDialog(-chat_id, 0, false);
+            finishFragment();
+        }
+    }
+
+    public boolean isChat() {
+        return chat_id != 0;
+    }
+
+    private void updateRowsIds() {
+        rowCount = 0;
+        overscrollRow = rowCount++;
+        if (user_id != 0) {
+            emptyRow = rowCount++;
+            phoneRow = rowCount++;
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user != null && user.username != null && user.username.length() > 0) {
+                usernameRow = rowCount++;
+            } else {
+                usernameRow = -1;
+            }
+            sectionRow = rowCount++;
+            settingsNotificationsRow = rowCount++;
+            sharedMediaRow = rowCount++;
+            if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
+                settingsTimerRow = rowCount++;
+                settingsKeyRow = rowCount++;
+            } else {
+                settingsTimerRow = -1;
+                settingsKeyRow = -1;
+            }
+            if (currentEncryptedChat == null) {
+                startSecretChatRow = rowCount++;
+            } else {
+                startSecretChatRow = -1;
+            }
+        } else if (chat_id != 0) {
+            if (chat_id > 0) {
+                emptyRow = rowCount++;
+                settingsNotificationsRow = rowCount++;
+                sharedMediaRow = rowCount++;
+                emptyRowChat = rowCount++;
+                membersSectionRow = rowCount++;
+            }
+            if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
+                emptyRowChat2 = rowCount++;
+                rowCount += info.participants.size();
+                membersEndRow = rowCount;
+                int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
+            } else {
+                membersEndRow = -1;
+                membersSectionRow = -1;
+                emptyRowChat2 = -1;
+            }
+        }
+    }
+
+    private void updateProfileData() {
+        if (avatarImage == null) {
+            return;
+        }
+        if (user_id != 0) {
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            TLRPC.FileLocation photo = null;
+            TLRPC.FileLocation photoBig = null;
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+                photoBig = user.photo.photo_big;
+            }
+            AvatarDrawable avatarDrawable = new AvatarDrawable(user);
+            avatarImage.setImage(photo, "50_50", avatarDrawable);
+
+            nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            onlineTextView.setText(LocaleController.formatUserStatus(user));
+
+            avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+        } else if (chat_id != 0) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+            if (chat != null) {
+                currentChat = chat;
+            }
+            nameTextView.setText(chat.title);
+
+            int count = chat.participants_count;
+            if (info != null) {
+                count = info.participants.size();
+            }
+
+            if (count != 0 && onlineCount > 1) {
+                onlineTextView.setText(Html.fromHtml(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount))));
+            } else {
+                onlineTextView.setText(LocaleController.formatPluralString("Members", count));
+            }
+
+            TLRPC.FileLocation photo = null;
+            TLRPC.FileLocation photoBig = null;
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+                photoBig = chat.photo.photo_big;
+            }
+            avatarImage.setImage(photo, "50_50", new AvatarDrawable(chat, true));
+
+            avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+        }
+    }
+
+    private void createActionBarMenu() {
+        ActionBarMenu menu = actionBar.createMenu();
+        menu.clearItems();
+
+        if (user_id != 0) {
+            if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
+                TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                if (user == null) {
+                    return;
+                }
+                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+                if (user.phone != null && user.phone.length() != 0) {
+                    item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
+                    item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
+                    item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+                } else {
+                    item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+                }
+            } else {
+                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+                item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
+                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+                item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
+                item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
+            }
+        } else if (chat_id != 0) {
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
+            if (chat_id > 0) {
+                item.addSubItem(add_member, LocaleController.getString("AddMember", R.string.AddMember), 0);
+                item.addSubItem(leave_group, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
+            } else {
+                item.addSubItem(add_member, LocaleController.getString("AddRecipient", R.string.AddRecipient), 0);
+            }
+        }
+    }
+
+    @Override
+    protected void onDialogDismiss() {
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+        if (dialog_id != 0) {
+            Bundle args = new Bundle();
+            args.putBoolean("scrollToTopOnResume", true);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            int lower_part = (int)dialog_id;
+            if (lower_part != 0) {
+                if (lower_part > 0) {
+                    args.putInt("user_id", lower_part);
+                } else if (lower_part < 0) {
+                    args.putInt("chat_id", -lower_part);
+                }
+            } else {
+                args.putInt("enc_id", (int)(dialog_id >> 32));
+            }
+            presentFragment(new ChatActivity(args), true);
+            removeSelfFromStack();
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            if (user_id != 0) {
+                return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow || i == startSecretChatRow;
+            } else if (chat_id != 0) {
+                return i == settingsNotificationsRow || i == sharedMediaRow || i > emptyRowChat2 && i < membersEndRow;
+            }
+            return false;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new EmptyCell(mContext);
+                }
+                if (i == overscrollRow) {
+                    ((EmptyCell) view).setHeight(88);
+                } else if (i == emptyRowChat || i == emptyRowChat2) {
+                    ((EmptyCell) view).setHeight(8);
+                } else {
+                    ((EmptyCell) view).setHeight(36);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new DividerCell(mContext);
+                    view.setPadding(AndroidUtilities.dp(72), 0, 0, 0);
+                }
+            } else if (type == 2) {
+                final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                if (view == null) {
+                    view = new TextDetailCell(mContext);
+                }
+                TextDetailCell textDetailCell = (TextDetailCell) view;
+
+                if (i == phoneRow) {
+                    String text;
+                    if (user.phone != null && user.phone.length() != 0) {
+                        text = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        text = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
+                    }
+                    textDetailCell.setTextAndValueAndIcon(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), R.drawable.phone_grey);
+                } else if (i == usernameRow) {
+                    String text;
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        text = "@" + user.username;
+                    } else {
+                        text = "-";
+                    }
+                    textDetailCell.setTextAndValue(text, LocaleController.getString("Username", R.string.Username));
+                }
+            } else if (type == 3) {
+                if (view == null) {
+                    view = new TextCell(mContext);
+                }
+                TextCell textCell = (TextCell) view;
+                textCell.setTextColor(0xff212121);
+
+                if (i == sharedMediaRow) {
+                    String value;
+                    if (totalMediaCount == -1) {
+                        value = LocaleController.getString("Loading", R.string.Loading);
+                    } else {
+                        value = String.format("%d", totalMediaCount);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("SharedMedia", R.string.SharedMedia), value);
+                } else if (i == settingsTimerRow) {
+                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+                    String value;
+                    if (encryptedChat.ttl == 0) {
+                        value = LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
+                    } else {
+                        value = AndroidUtilities.formatTTLString(encryptedChat.ttl);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("MessageLifetime", R.string.MessageLifetime), value);
+                } else if (i == settingsNotificationsRow) {
+                    textCell.setTextAndIcon(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.profile_list);
+                } else if (i == startSecretChatRow) {
+                    textCell.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
+                    textCell.setTextColor(0xff37a919);
+                } else if (i == settingsKeyRow) {
+                    IdenticonDrawable identiconDrawable = new IdenticonDrawable();
+                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+                    identiconDrawable.setBytes(encryptedChat.auth_key);
+                    textCell.setTextAndValueDrawable(LocaleController.getString("EncryptionKey", R.string.EncryptionKey), identiconDrawable);
+                }
+            } else if (type == 4) {
+                if (view == null) {
+                    view = new UserCell(mContext, 61);
+                }
+
+                TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
+                ((UserCell)view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
+            } else if (type == 5) {
+                if (view == null) {
+                    view = new ShadowSectionCell(mContext);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == emptyRow || i == overscrollRow || i == emptyRowChat || i == emptyRowChat2) {
+                return 0;
+            } else if (i == sectionRow) {
+                return 1;
+            } else if (i == phoneRow || i == usernameRow) {
+                return 2;
+            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == startSecretChatRow || i == settingsKeyRow) {
+                return 3;
+            } else if (i > emptyRowChat2 && i < membersEndRow) {
+                return 4;
+            } else if (i == membersSectionRow) {
+                return 5;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 6;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index 2a6ff7931..c6ea5482c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -23,9 +23,10 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
+import android.widget.FrameLayout;
 import android.widget.ListView;
-import android.widget.TextView;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.messenger.ConnectionsManager;
@@ -37,8 +38,11 @@
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.ColorPickerView;
 
 public class ProfileNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
@@ -61,8 +65,8 @@ public ProfileNotificationsActivity(Bundle args) {
     public boolean onFragmentCreate() {
         settingsNotificationsRow = rowCount++;
         settingsVibrateRow = rowCount++;
-        settingsLedRow = rowCount++;
         settingsSoundRow = rowCount++;
+        settingsLedRow = rowCount++;
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
         return super.onFragmentCreate();
     }
@@ -76,12 +80,10 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-
-            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -90,9 +92,19 @@ public void onItemClick(int id) {
                 }
             });
 
-            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
-
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
             listView.setAdapter(new ListAdapter(getParentActivity()));
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
@@ -378,102 +390,77 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                    view = new TextDetailSettingsCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
 
-                View divider = view.findViewById(R.id.settings_row_divider);
+                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
+
+                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+
                 if (i == settingsVibrateRow) {
-                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     int value = preferences.getInt("vibrate_" + dialog_id, 0);
                     if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("SettingsDefault", R.string.SettingsDefault));
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("SettingsDefault", R.string.SettingsDefault), true);
                     } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Short", R.string.Short));
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
                     } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Disabled", R.string.Disabled), true);
                     } else if (value == 3) {
-                        detailTextView.setText(LocaleController.getString("Long", R.string.Long));
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
                     } else if (value == 4) {
-                        detailTextView.setText(LocaleController.getString("SystemDefault", R.string.SystemDefault));
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("SystemDefault", R.string.SystemDefault), true);
                     }
                 } else if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     int value = preferences.getInt("notify2_" + dialog_id, 0);
                     if (value == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("Default", R.string.Default), true);
                     } else if (value == 1) {
-                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("Enabled", R.string.Enabled), true);
                     } else if (value == 2) {
-                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("Disabled", R.string.Disabled), true);
                     }
-                }
-            } if (type == 1) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsSoundRow) {
-                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    String name = preferences.getString("sound_" + dialog_id, LocaleController.getString("Default", R.string.Default));
-                    if (name.equals("NoSound")) {
-                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        detailTextView.setText(name);
+                } else if (i == settingsSoundRow) {
+                    String value = preferences.getString("sound_" + dialog_id, LocaleController.getString("Default", R.string.Default));
+                    if (value.equals("NoSound")) {
+                        value = LocaleController.getString("NoSound", R.string.NoSound);
                     }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
-                    divider.setVisibility(View.INVISIBLE);
+                    textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, true);
                 }
-            } else if (type == 2) {
+            } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                    view = new TextColorCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View colorView = view.findViewById(R.id.settings_color);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+
+                TextColorCell textCell = (TextColorCell) view;
+
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
 
                 if (preferences.contains("color_" + dialog_id)) {
-                    colorView.setBackgroundColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("color_" + dialog_id, 0xff00ff00), false);
                 } else {
                     if ((int)dialog_id < 0) {
-                        colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                        textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), false);
                     } else {
-                        colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                        textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), false);
                     }
                 }
-                divider.setVisibility(View.VISIBLE);
             }
             return view;
         }
 
         @Override
         public int getItemViewType(int i) {
-            if (i == settingsNotificationsRow || i == settingsVibrateRow) {
+            if (i == settingsNotificationsRow || i == settingsVibrateRow || i == settingsSoundRow) {
                 return 0;
-            } else if (i == settingsSoundRow) {
-                return 1;
             } else if (i == settingsLedRow) {
-                return 2;
+                return 1;
             }
             return 0;
         }
 
         @Override
         public int getViewTypeCount() {
-            return 3;
+            return 2;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
index a0164a47a..bf4d87784 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
@@ -314,7 +314,7 @@ public void closePhoto() {
         currentMessageObject = null;
         isVisible = false;
         AndroidUtilities.unlockOrientation(parentActivity);
-        AndroidUtilities.RunOnUIThread(new Runnable() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 centerImage.setImageBitmap((Bitmap)null);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 27c3ae14e..3636c5e5d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -16,23 +16,27 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
-import android.graphics.Typeface;
+import android.content.res.Configuration;
 import android.net.Uri;
 import android.os.Bundle;
 import android.text.Html;
 import android.text.Spannable;
+import android.text.TextUtils;
 import android.text.method.LinkMovementMethod;
 import android.util.Base64;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AbsListView;
 import android.widget.AdapterView;
-import android.widget.ImageButton;
+import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
@@ -55,55 +59,76 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.MessageObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.TextInfoCell;
+import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Views.AvatarDrawable;
 import org.telegram.ui.Views.AvatarUpdater;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.NumberPicker;
-import org.telegram.ui.Views.SettingsSectionLayout;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Locale;
 
 public class SettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
     private ListView listView;
     private ListAdapter listAdapter;
+    private BackupImageView avatarImage;
+    private TextView nameTextView;
+    private TextView onlineTextView;
+    private ImageView writeButton;
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
 
-    private int profileRow;
+    private int overscrollRow;
+    private int emptyRow;
     private int numberSectionRow;
     private int numberRow;
     private int usernameRow;
     private int settingsSectionRow;
-    private int textSizeRow;
+    private int settingsSectionRow2;
     private int enableAnimationsRow;
     private int UltraRow;
     private int notificationRow;
-    private int blockedRow;
     private int backgroundRow;
-    private int supportSectionRow;
-    private int askQuestionRow;
-    private int logoutRow;
-    private int sendLogsRow;
-    private int clearLogsRow;
-    private int switchBackendButtonRow;
-    private int messagesSectionRow;
-    private int sendByEnterRow;
-    private int terminateSessionsRow;
+    private int languageRow;
+    private int privacyRow;
     private int mediaDownloadSection;
+    private int mediaDownloadSection2;
     private int mobileDownloadRow;
     private int wifiDownloadRow;
     private int roamingDownloadRow;
     private int saveToGalleryRow;
+    private int messagesSectionRow;
+    private int messagesSectionRow2;
+    private int textSizeRow;
+    private int sendByEnterRow;
+    private int supportSectionRow;
+    private int supportSectionRow2;
+    private int askQuestionRow;
     private int telegramFaqRow;
-    private int languageRow;
+    private int sendLogsRow;
+    private int clearLogsRow;
+    private int switchBackendButtonRow;
     private int versionRow;
     private int contactsSectionRow;
     private int contactsReimportRow;
     private int contactsSortRow;
     private int rowCount;
 
+    private final static int edit_name = 1;
+    private final static int logout = 2;
+
     private static class LinkMovementMethodMy extends LinkMovementMethod {
         @Override
         public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
@@ -163,10 +188,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
                             users.add(user);
                             MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
                                     UserConfig.saveConfig(true);
                                 }
                             });
@@ -177,41 +203,43 @@ public void run() {
         };
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
 
-
         rowCount = 0;
-        profileRow = rowCount++;
+        overscrollRow = rowCount++;
+        emptyRow = rowCount++;
         numberSectionRow = rowCount++;
         numberRow = rowCount++;
         usernameRow = rowCount++;
         settingsSectionRow = rowCount++;
-        enableAnimationsRow = rowCount++;
-        UltraRow = rowCount++;
-        languageRow = rowCount++;
+        settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
-        blockedRow = rowCount++;
+        privacyRow = rowCount++;
+        UltraRow = rowCount++;
         backgroundRow = rowCount++;
-        terminateSessionsRow = rowCount++;
+        languageRow = rowCount++;
+        enableAnimationsRow = rowCount++;
         mediaDownloadSection = rowCount++;
+        mediaDownloadSection2 = rowCount++;
         mobileDownloadRow = rowCount++;
         wifiDownloadRow = rowCount++;
         roamingDownloadRow = rowCount++;
         saveToGalleryRow = rowCount++;
         messagesSectionRow = rowCount++;
+        messagesSectionRow2 = rowCount++;
         textSizeRow = rowCount++;
         sendByEnterRow = rowCount++;
-        //contactsSectionRow = rowCount++;
-        //contactsSortRow = rowCount++;
-        //contactsReimportRow = rowCount++;
         supportSectionRow = rowCount++;
+        supportSectionRow2 = rowCount++;
+        askQuestionRow = rowCount++;
+        telegramFaqRow = rowCount++;
         if (BuildVars.DEBUG_VERSION) {
             sendLogsRow = rowCount++;
             clearLogsRow = rowCount++;
             switchBackendButtonRow = rowCount++;
         }
-        telegramFaqRow = rowCount++;
-        askQuestionRow = rowCount++;
-        logoutRow = rowCount++;
         versionRow = rowCount++;
+        //contactsSectionRow = rowCount++;
+        //contactsReimportRow = rowCount++;
+        //contactsSortRow = rowCount++;
 
         MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid);
 
@@ -226,24 +254,136 @@ public void onFragmentDestroy() {
         avatarUpdater.clear();
     }
 
+    @Override
+    public boolean needAddActionBar() {
+        return false;
+    }
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("Settings", R.string.Settings));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
+                    } else if (id == edit_name) {
+                        presentFragment(new ChangeNameActivity());
+                    } else if (id == logout) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.clear().commit();
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
+                                MessagesController.getInstance().unregistedPush();
+                                MessagesController.getInstance().logOut();
+                                UserConfig.clearConfig();
+                                MessagesStorage.getInstance().cleanUp(false);
+                                MessagesController.getInstance().cleanUp();
+                                ContactsController.getInstance().deleteAllAppAccounts();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
                     }
                 }
             });
+            ActionBarMenu menu = actionBar.createMenu();
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
+            item.addSubItem(logout, LocaleController.getString("LogOut", R.string.LogOut), 0);
 
-            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            avatarImage = new BackupImageView(getParentActivity());
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(30));
+            avatarImage.processDetach = false;
+            actionBar.addView(avatarImage);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            layoutParams.width = AndroidUtilities.dp(60);
+            layoutParams.height = AndroidUtilities.dp(60);
+            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(17);
+            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(17) : 0;
+            layoutParams.bottomMargin = AndroidUtilities.dp(22);
+            avatarImage.setLayoutParams(layoutParams);
+            avatarImage.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                    if (user.photo != null && user.photo.photo_big != null) {
+                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                        PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
+                    }
+                }
+            });
+
+            nameTextView = new TextView(getParentActivity());
+            nameTextView.setTextColor(0xffffffff);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+            nameTextView.setLines(1);
+            nameTextView.setMaxLines(1);
+            nameTextView.setSingleLine(true);
+            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            actionBar.addView(nameTextView);
+            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
+            layoutParams.bottomMargin = AndroidUtilities.dp(51);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            nameTextView.setLayoutParams(layoutParams);
+
+            onlineTextView = new TextView(getParentActivity());
+            onlineTextView.setTextColor(AvatarDrawable.getProfileTextColorForId(5));
+            onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            onlineTextView.setLines(1);
+            onlineTextView.setMaxLines(1);
+            onlineTextView.setSingleLine(true);
+            onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            actionBar.addView(onlineTextView);
+            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
+            layoutParams.bottomMargin = AndroidUtilities.dp(30);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
+            onlineTextView.setLayoutParams(layoutParams);
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
             listView.setAdapter(listAdapter);
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
@@ -279,17 +419,15 @@ public void onClick(DialogInterface dialog, int which) {
                         SharedPreferences.Editor editor = preferences.edit();
                         editor.putBoolean("view_animations", !animations);
                         editor.commit();
-                        if (listView != null) {
-                            listView.invalidateViews();
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(!animations);
                         }
                     } else if (i == UltraRow) {
                         presentFragment(new SettingsUltraFeaturesActivity());
                     } else if (i == notificationRow) {
-                        presentFragment(new SettingsNotificationsActivity());
-                    } else if (i == blockedRow) {
-                        presentFragment(new SettingsBlockedUsersActivity());
+                        presentFragment(new NotificationsSettingsActivity());
                     } else if (i == backgroundRow) {
-                        presentFragment(new SettingsWallpapersActivity());
+                        presentFragment(new WallpapersActivity());
                     } else if (i == askQuestionRow) {
                         if (getParentActivity() == null) {
                             return;
@@ -320,54 +458,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         SharedPreferences.Editor editor = preferences.edit();
                         editor.putBoolean("send_by_enter", !send);
                         editor.commit();
-                        if (listView != null) {
-                            listView.invalidateViews();
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(!send);
                         }
                     } else if (i == saveToGalleryRow) {
                         MediaController.getInstance().toggleSaveToGallery();
-                        if (listView != null) {
-                            listView.invalidateViews();
-                        }
-                    } else if (i == terminateSessionsRow) {
-                        if (getParentActivity() == null) {
-                            return;
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(MediaController.getInstance().canSaveToGallery());
                         }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("AreYouSureSessions", R.string.AreYouSureSessions));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                TLRPC.TL_auth_resetAuthorizations req = new TLRPC.TL_auth_resetAuthorizations();
-                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                    @Override
-                                    public void run(final TLObject response, final TLRPC.TL_error error) {
-                                        AndroidUtilities.RunOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                if (getParentActivity() == null) {
-                                                    return;
-                                                }
-                                                if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
-                                                    toast.show();
-                                                } else {
-                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
-                                                    toast.show();
-                                                }
-                                            }
-                                        });
-                                        UserConfig.registeredForPush = false;
-                                        UserConfig.registeredForInternalPush = false;
-                                        UserConfig.saveConfig(false);
-                                        MessagesController.getInstance().registerForPush(UserConfig.pushString);
-                                        ConnectionsManager.getInstance().initPushConnection();
-                                    }
-                                });
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
+                    } else if (i == privacyRow) {
+                        presentFragment(new PrivacySettingsActivity());
                     } else if (i == languageRow) {
                         presentFragment(new LanguageSelectActivity());
                     } else if (i == switchBackendButtonRow) {
@@ -436,7 +536,7 @@ public void onClick(DialogInterface dialog, int which) {
                             mask = MediaController.getInstance().roamingDownloadMask;
                         }
                         builder.setMultiChoiceItems(
-                                new CharSequence[]{LocaleController.getString("AttachPhoto", R.string.AttachPhoto), LocaleController.getString("AttachAudio", R.string.AttachAudio), LocaleController.getString("AttachAudio", R.string.AttachVideo), LocaleController.getString("AttachAudio", R.string.AttachDocument)},
+                                new CharSequence[]{LocaleController.getString("AttachPhoto", R.string.AttachPhoto), LocaleController.getString("AttachAudio", R.string.AttachAudio), LocaleController.getString("AttachVideo", R.string.AttachVideo), LocaleController.getString("AttachDocument", R.string.AttachDocument)},
                                 new boolean[]{(mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0},
                                 new DialogInterface.OnMultiChoiceClickListener() {
                                     @Override
@@ -488,10 +588,91 @@ public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                         builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                         showAlertDialog(builder);
                     } else if (i == usernameRow) {
-                        presentFragment(new SettingsChangeUsernameActivity());
+                        presentFragment(new ChangeUsernameActivity());
                     }
                 }
             });
+
+            frameLayout.addView(actionBar);
+
+            writeButton = new ImageView(getParentActivity());
+            writeButton.setImageResource(R.drawable.floating_group_states);
+            frameLayout.addView(writeButton);
+            layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+            layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT);
+            writeButton.setLayoutParams(layoutParams);
+            writeButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                    CharSequence[] items;
+
+                    TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                    if (user == null) {
+                        user = UserConfig.getCurrentUser();
+                    }
+                    if (user == null) {
+                        return;
+                    }
+                    boolean fullMenu = false;
+                    if (user.photo != null && user.photo.photo_big != null && !(user.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) {
+                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                        fullMenu = true;
+                    } else {
+                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                    }
+
+                    final boolean full = fullMenu;
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (i == 0) {
+                                avatarUpdater.openCamera();
+                            } else if (i == 1) {
+                                avatarUpdater.openGallery();
+                            } else if (i == 2) {
+                                MessagesController.getInstance().deleteUserPhoto(null);
+                            }
+                        }
+                    });
+                    showAlertDialog(builder);
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView view, int scrollState) {
+
+                }
+
+                @Override
+                public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (totalItemCount == 0) {
+                        return;
+                    }
+                    int height = 0;
+                    View child = view.getChildAt(0);
+                    if (child != null) {
+                        if (firstVisibleItem == 0) {
+                            height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
+                        }
+                        if (actionBar.getExtraHeight() != height) {
+                            actionBar.setExtraHeight(height, true);
+                            needLayout();
+                        }
+                    }
+                }
+            });
+
+            updateUserData();
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -515,24 +696,18 @@ protected void onDialogDismiss() {
         if (user != null && user.photo != null && user.photo.photo_big != null) {
             TLRPC.FileLocation photoBig = user.photo.photo_big;
             if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
-                int count = listView.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = listView.getChildAt(a);
-                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    if (avatarImage != null) {
-                        int coords[] = new int[2];
-                        avatarImage.getLocationInWindow(coords);
-                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-                        object.viewX = coords[0];
-                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-                        object.parentView = listView;
-                        object.imageReceiver = avatarImage.imageReceiver;
-                        object.user_id = UserConfig.getClientUserId();
-                        object.thumb = object.imageReceiver.getBitmap();
-                        object.size = -1;
-                        return object;
-                    }
-                }
+                int coords[] = new int[2];
+                avatarImage.getLocationInWindow(coords);
+                PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                object.viewX = coords[0];
+                object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                object.parentView = avatarImage;
+                object.imageReceiver = avatarImage.imageReceiver;
+                object.user_id = UserConfig.getClientUserId();
+                object.thumb = object.imageReceiver.getBitmap();
+                object.size = -1;
+                object.radius = avatarImage.imageReceiver.getRoundRadius();
+                return object;
             }
         }
         return null;
@@ -542,7 +717,9 @@ protected void onDialogDismiss() {
     public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
 
     @Override
-    public void willHidePhotoViewer() { }
+    public void willHidePhotoViewer() {
+        avatarImage.imageReceiver.setVisible(true, true);
+    }
 
     @Override
     public boolean isPhotoChecked(int index) { return false; }
@@ -597,7 +774,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
 
                         final TLRPC.TL_help_support res = (TLRPC.TL_help_support)response;
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 SharedPreferences.Editor editor = preferences.edit();
@@ -621,7 +798,7 @@ public void run() {
                             }
                         });
                     } else {
-                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
                                 try {
@@ -666,11 +843,113 @@ public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
             int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                if (listView != null) {
-                    listView.invalidateViews();
+                updateUserData();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void needLayout() {
+        FrameLayout.LayoutParams layoutParams;
+        if (listView != null) {
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
+            listView.setLayoutParams(layoutParams);
+        }
+
+        if (avatarImage != null) {
+            float diff = actionBar.getExtraHeight() / (float)AndroidUtilities.dp(88);
+            float diffm = 1.0f - diff;
+
+            int avatarSize = 42 + (int)(18 * diff);
+            int avatarX = 17 + (int)(47 * diffm);
+            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int nameX = 97 + (int)(21 * diffm);
+            int nameEndX = 16 + (int)(32 * diffm);
+            float nameFontSize = 20 - 2 * diffm;
+            int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
+            int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
+
+            layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
+            writeButton.setLayoutParams(layoutParams);
+            ViewProxy.setAlpha(writeButton, diff);
+            writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
+            if (writeButton.getVisibility() == View.GONE) {
+                writeButton.clearAnimation();
+            }
+
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.dp(avatarSize / 2));
+            layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams.width = AndroidUtilities.dp(avatarSize);
+            layoutParams.height = AndroidUtilities.dp(avatarSize);
+            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(avatarX);
+            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(avatarX) : 0;
+            layoutParams.bottomMargin = avatarY;
+            avatarImage.setLayoutParams(layoutParams);
+
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, nameFontSize);
+            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
+            layoutParams.bottomMargin = nameY;
+            nameTextView.setLayoutParams(layoutParams);
+
+            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
+            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
+            layoutParams.bottomMargin = statusY;
+            onlineTextView.setLayoutParams(layoutParams);
+        }
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
                 }
+                return false;
             }
+        });
+    }
+
+    private void updateUserData() {
+        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+        TLRPC.FileLocation photo = null;
+        TLRPC.FileLocation photoBig = null;
+        if (user.photo != null) {
+            photo = user.photo.photo_small;
+            photoBig = user.photo.photo_big;
         }
+        AvatarDrawable avatarDrawable = new AvatarDrawable(user, true);
+        avatarDrawable.setColor(0xff5c98cd);
+        avatarImage.setImage(photo, "50_50", avatarDrawable);
+        avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+
+        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        onlineTextView.setText(LocaleController.getString("Online", R.string.Online));
+
+        avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
     }
 
     private void sendLogs() {
@@ -697,14 +976,6 @@ private void sendLogs() {
         }
     }
 
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
@@ -719,9 +990,9 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == textSizeRow || i == enableAnimationsRow || i == blockedRow || i == notificationRow || i == backgroundRow ||
-                    i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == terminateSessionsRow || i == wifiDownloadRow ||
-                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow || i == UltraRow ||
+            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == UltraRow ||
+                    i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == privacyRow || i == wifiDownloadRow ||
+                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow;
         }
 
@@ -750,352 +1021,185 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_name_layout, viewGroup, false);
-
-                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            presentFragment(new SettingsChangeNameActivity());
-                        }
-                    });
-
-                    final ImageButton button2 = (ImageButton)view.findViewById(R.id.settings_change_avatar_button);
-                    button2.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            if (getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                            CharSequence[] items;
-
-                            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                            if (user == null) {
-                                user = UserConfig.getCurrentUser();
-                            }
-                            if (user == null) {
-                                return;
-                            }
-                            boolean fullMenu = false;
-                            if (user.photo != null && user.photo.photo_big != null && !(user.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) {
-                                items = new CharSequence[] {LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                                fullMenu = true;
-                            } else {
-                                items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                            }
-
-                            final boolean full = fullMenu;
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    if (i == 0 && full) {
-                                        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                                        if (user != null && user.photo != null && user.photo.photo_big != null) {
-                                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                            PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
-                                        }
-                                    } else if (i == 0 && !full || i == 1 && full) {
-                                        avatarUpdater.openCamera();
-                                    } else if (i == 1 && !full || i == 2 && full) {
-                                        avatarUpdater.openGallery();
-                                    } else if (i == 3) {
-                                        MessagesController.getInstance().deleteUserPhoto(null);
-                                    }
-                                }
-                            });
-                            showAlertDialog(builder);
-                        }
-                    });
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_online);
-                textView.setText(LocaleController.getString("Online", R.string.Online));
-
-                textView = (TextView)view.findViewById(R.id.settings_name);
-                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
-                textView.setTypeface(typeface);
-                TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                if (user == null) {
-                    user = UserConfig.getCurrentUser();
+                    view = new EmptyCell(mContext);
                 }
-                if (user != null) {
-                    textView.setText(ContactsController.formatName(user.first_name, user.last_name));
-                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    avatarImage.processDetach = false;
-                    TLRPC.FileLocation photo = null;
-                    TLRPC.FileLocation photoBig = null;
-                    if (user.photo != null) {
-                        photo = user.photo.photo_small;
-                        photoBig = user.photo.photo_big;
-                    }
-                    avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
-                    avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+                if (i == overscrollRow) {
+                    ((EmptyCell) view).setHeight(88);
+                } else {
+                    ((EmptyCell) view).setHeight(16);
                 }
-                return view;
             } else if (type == 1) {
                 if (view == null) {
-                    view = new SettingsSectionLayout(mContext);
-                }
-                if (i == numberSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
-                } else if (i == settingsSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
-                } else if (i == supportSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Support", R.string.Support));
-                } else if (i == messagesSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
-                } else if (i == mediaDownloadSection) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
-                } else if (i == contactsSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
+                    view = new ShadowSectionCell(mContext);
                 }
             } else if (type == 2) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                    view = new TextSettingsCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == notificationRow) {
-                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-                    divider.setVisibility(View.VISIBLE);
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == textSizeRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
+                    textCell.setTextAndValue(LocaleController.getString("TextSize", R.string.TextSize), String.format("%d", size), true);
+                } else if (i == languageRow) {
+                    textCell.setTextAndValue(LocaleController.getString("Language", R.string.Language), LocaleController.getCurrentLanguageName(), true);
+                } else if (i == contactsSortRow) {
+                    String value;
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    int sort = preferences.getInt("sortContactsBy", 0);
+                    if (sort == 0) {
+                        value = LocaleController.getString("Default", R.string.Default);
+                    } else if (sort == 1) {
+                        value = LocaleController.getString("FirstName", R.string.SortFirstName);
+                    } else {
+                        value = LocaleController.getString("LastName", R.string.SortLastName);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("SortBy", R.string.SortBy), value, true);
+                } else if (i == notificationRow) {
+                    textCell.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), true);
                 } else if (i == UltraRow) {
-                    textView.setText(LocaleController.getString("UltraFeatures", R.string.UltraFeatures));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == blockedRow) {
-                    textView.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
-                    divider.setVisibility(backgroundRow != 0 ? View.VISIBLE : View.INVISIBLE);
+                    textCell.setText(LocaleController.getString("UltraFeatures", R.string.UltraFeatures), true);
                 } else if (i == backgroundRow) {
-                    textView.setText(LocaleController.getString("ChatBackground", R.string.ChatBackground));
-                    divider.setVisibility(View.VISIBLE);
+                    textCell.setText(LocaleController.getString("ChatBackground", R.string.ChatBackground), true);
                 } else if (i == sendLogsRow) {
-                    textView.setText("Send Logs");
-                    divider.setVisibility(View.VISIBLE);
+                    textCell.setText("Send Logs", true);
                 } else if (i == clearLogsRow) {
-                    textView.setText("Clear Logs");
-                    divider.setVisibility(View.VISIBLE);
+                    textCell.setText("Clear Logs", true);
                 } else if (i == askQuestionRow) {
-                    textView.setText(LocaleController.getString("AskAQuestion", R.string.AskAQuestion));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == terminateSessionsRow) {
-                    textView.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions));
-                    divider.setVisibility(View.INVISIBLE);
+                    textCell.setText(LocaleController.getString("AskAQuestion", R.string.AskAQuestion), true);
+                } else if (i == privacyRow) {
+                    textCell.setText(LocaleController.getString("PrivacySettings", R.string.PrivacySettings), true);
                 } else if (i == switchBackendButtonRow) {
-                    textView.setText("Switch Backend");
-                    divider.setVisibility(View.VISIBLE);
+                    textCell.setText("Switch Backend", true);
                 } else if (i == telegramFaqRow) {
-                    textView.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq));
-                    divider.setVisibility(View.VISIBLE);
+                    textCell.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq), true);
                 } else if (i == contactsReimportRow) {
-                    textView.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts));
-                    divider.setVisibility(View.INVISIBLE);
+                    textCell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
                 }
             } else if (type == 3) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_check_layout, viewGroup, false);
+                    view = new TextCheckCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
+                TextCheckCell textCell = (TextCheckCell) view;
+
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                 if (i == enableAnimationsRow) {
-                    textView.setText(LocaleController.getString("EnableAnimations", R.string.EnableAnimations));
-                    divider.setVisibility(View.VISIBLE);
-                    boolean enabled = preferences.getBoolean("view_animations", true);
-                    if (enabled) {
-                        checkButton.setImageResource(R.drawable.btn_check_on);
-                    } else {
-                        checkButton.setImageResource(R.drawable.btn_check_off);
-                    }
+                    textCell.setTextAndCheck(LocaleController.getString("EnableAnimations", R.string.EnableAnimations), preferences.getBoolean("view_animations", true), false);
                 } else if (i == sendByEnterRow) {
-                    textView.setText(LocaleController.getString("SendByEnter", R.string.SendByEnter));
-                    divider.setVisibility(View.INVISIBLE);
-                    boolean enabled = preferences.getBoolean("send_by_enter", false);
-                    if (enabled) {
-                        checkButton.setImageResource(R.drawable.btn_check_on);
-                    } else {
-                        checkButton.setImageResource(R.drawable.btn_check_off);
-                    }
+                    textCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), false);
                 } else if (i == saveToGalleryRow) {
-                    textView.setText(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings));
-                    divider.setVisibility(View.INVISIBLE);
-                    if (MediaController.getInstance().canSaveToGallery()) {
-                        checkButton.setImageResource(R.drawable.btn_check_on);
-                    } else {
-                        checkButton.setImageResource(R.drawable.btn_check_off);
-                    }
+                    textCell.setTextAndCheck(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), MediaController.getInstance().canSaveToGallery(), false);
                 }
             } else if (type == 4) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_logout_button, viewGroup, false);
-                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                    textView.setText(LocaleController.getString("LogOut", R.string.LogOut));
-                    textView.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            if (getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = preferences.edit();
-                                    editor.clear().commit();
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
-                                    MessagesController.getInstance().unregistedPush();
-                                    MessagesController.getInstance().logOut();
-                                    UserConfig.clearConfig();
-                                    MessagesStorage.getInstance().cleanUp(false);
-                                    MessagesController.getInstance().cleanUp();
-                                    ContactsController.getInstance().deleteAllAppAccounts();
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showAlertDialog(builder);
-                        }
-                    });
-                }
-            } else if (type == 5) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                    view = new HeaderCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == numberRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    textView.setText(LocaleController.getString("Phone", R.string.Phone));
-                    if (user != null && user.phone != null && user.phone.length() != 0) {
-                        detailTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
-                    } else {
-                        detailTextView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
-                    }
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == textSizeRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
-                    detailTextView.setText(String.format("%d", size));
-                    textView.setText(LocaleController.getString("TextSize", R.string.TextSize));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == languageRow) {
-                    detailTextView.setText(LocaleController.getCurrentLanguageName());
-                    textView.setText(LocaleController.getString("Language", R.string.Language));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == contactsSortRow) {
-                    textView.setText(LocaleController.getString("SortBy", R.string.SortBy));
-                    divider.setVisibility(View.VISIBLE);
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int sort = preferences.getInt("sortContactsBy", 0);
-                    if (sort == 0) {
-                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                    } else if (sort == 1) {
-                        detailTextView.setText(LocaleController.getString("FirstName", R.string.SortFirstName));
-                    } else if (sort == 2) {
-                        detailTextView.setText(LocaleController.getString("LastName", R.string.SortLastName));
-                    }
-                } else if (i == usernameRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    textView.setText(LocaleController.getString("Username", R.string.Username));
-                    if (user != null && user.username != null && user.username.length() != 0) {
-                        detailTextView.setText("@" + user.username);
-                    } else {
-                        detailTextView.setText(LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty));
-                    }
-                    divider.setVisibility(View.INVISIBLE);
+                if (i == settingsSectionRow2) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                } else if (i == supportSectionRow2) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Support", R.string.Support));
+                } else if (i == messagesSectionRow2) {
+                    ((HeaderCell) view).setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
+                } else if (i == mediaDownloadSection2) {
+                    ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
+                } else if (i == numberSectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
                 }
-            } else if (type == 6) {
+            } else if (type == 5) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_version, viewGroup, false);
-                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                    view = new TextInfoCell(mContext);
                     try {
                         PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                        textView.setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
+                        ((TextInfoCell) view).setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
                 }
-            } else if (type == 7) {
+            } else if (type == 6) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                    view = new TextDetailSettingsCell(mContext);
                 }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
+                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
 
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                int mask = 0;
-                if (i == mobileDownloadRow) {
-                    textView.setText(LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData));
-                    divider.setVisibility(View.VISIBLE);
-                    mask = MediaController.getInstance().mobileDataDownloadMask;
-                } else if (i == wifiDownloadRow) {
-                    textView.setText(LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi));
-                    divider.setVisibility(View.VISIBLE);
-                    mask = MediaController.getInstance().wifiDownloadMask;
-                } else if (i == roamingDownloadRow) {
-                    textView.setText(LocaleController.getString("WhenRoaming", R.string.WhenRoaming));
-                    divider.setVisibility(View.VISIBLE);
-                    mask = MediaController.getInstance().roamingDownloadMask;
-                }
-                String text = "";
-                if ((mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
-                    text += LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
-                }
-                if ((mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0) {
-                    if (text.length() != 0) {
-                        text += ", ";
+                if (i == mobileDownloadRow || i == wifiDownloadRow || i == roamingDownloadRow) {
+                    int mask = 0;
+                    String value;
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    if (i == mobileDownloadRow) {
+                        value = LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData);
+                        mask = MediaController.getInstance().mobileDataDownloadMask;
+                    } else if (i == wifiDownloadRow) {
+                        value = LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi);
+                        mask = MediaController.getInstance().wifiDownloadMask;
+                    } else {
+                        value = LocaleController.getString("WhenRoaming", R.string.WhenRoaming);
+                        mask = MediaController.getInstance().roamingDownloadMask;
                     }
-                    text += LocaleController.getString("AttachAudio", R.string.AttachAudio);
-                }
-                if ((mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0) {
-                    if (text.length() != 0) {
-                        text += ", ";
+                    String text = "";
+                    if ((mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
+                        text += LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                     }
-                    text += LocaleController.getString("AttachVideo", R.string.AttachVideo);
-                }
-                if ((mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
-                    if (text.length() != 0) {
-                        text += ", ";
+                    if ((mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0) {
+                        if (text.length() != 0) {
+                            text += ", ";
+                        }
+                        text += LocaleController.getString("AttachAudio", R.string.AttachAudio);
                     }
-                    text += LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                }
-                if (text.length() == 0) {
-                    text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
+                    if ((mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0) {
+                        if (text.length() != 0) {
+                            text += ", ";
+                        }
+                        text += LocaleController.getString("AttachVideo", R.string.AttachVideo);
+                    }
+                    if ((mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
+                        if (text.length() != 0) {
+                            text += ", ";
+                        }
+                        text += LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                    }
+                    if (text.length() == 0) {
+                        text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
+                    }
+                    textCell.setTextAndValue(value, text, true);
+                } else if (i == numberRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    String value;
+                    if (user != null && user.phone != null && user.phone.length() != 0) {
+                        value = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
+                    }
+                    textCell.setTextAndValue(value, LocaleController.getString("Phone", R.string.Phone), true);
+                } else if (i == usernameRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    String value;
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        value = "@" + user.username;
+                    } else {
+                        value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
+                    }
+                    textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), false);
                 }
-                textViewDetail.setText(text);
             }
             return view;
         }
 
         @Override
         public int getItemViewType(int i) {
-            if (i == profileRow) {
+            if (i == emptyRow || i == overscrollRow) {
                 return 0;
-            } else if (i == numberSectionRow || i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
+            } if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
-            } else if (i == textSizeRow || i == languageRow || i == contactsSortRow || i == numberRow || i == usernameRow) {
-                return 5;
             } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
                 return 3;
-            } else if (i == notificationRow || i == UltraRow || i == blockedRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
+            } else if (i == notificationRow || i == UltraRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow) {
                 return 2;
-            } else if (i == logoutRow) {
-                return 4;
             } else if (i == versionRow) {
+                return 5;
+            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow || i == numberRow || i == usernameRow) {
                 return 6;
-            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow) {
-                return 7;
+            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
+                return 4;
             } else {
                 return 2;
             }
@@ -1103,7 +1207,7 @@ public int getItemViewType(int i) {
 
         @Override
         public int getViewTypeCount() {
-            return 8;
+            return 7;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
deleted file mode 100644
index 236ce54b8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ /dev/null
@@ -1,719 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Typeface;
-import android.net.Uri;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ImageButton;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.android.SendMessagesHelper;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.IdenticonView;
-import org.telegram.ui.Views.SettingsSectionLayout;
-
-import java.util.ArrayList;
-
-public class UserProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
-    private ListView listView;
-    private ListAdapter listAdapter;
-    private int user_id;
-    private int totalMediaCount = -1;
-    private boolean creatingChat = false;
-    private long dialog_id;
-    private TLRPC.EncryptedChat currentEncryptedChat;
-    private boolean userBlocked = false;
-
-    private final static int add_contact = 1;
-    private final static int block_contact = 2;
-    private final static int share_contact = 3;
-    private final static int edit_contact = 4;
-    private final static int delete_contact = 5;
-
-    private int avatarRow;
-    private int phoneSectionRow;
-    private int phoneRow;
-    private int usernameRow;
-    private int settingsSectionRow;
-    private int settingsTimerRow;
-    private int settingsKeyRow;
-    private int settingsNotificationsRow;
-    private int sharedMediaSectionRow;
-    private int sharedMediaRow;
-    private int rowCount = 0;
-
-    public UserProfileActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        user_id = arguments.getInt("user_id", 0);
-        dialog_id = arguments.getLong("dialog_id", 0);
-        if (dialog_id != 0) {
-            currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-        }
-        updateRowsIds();
-        if (MessagesController.getInstance().getUser(user_id) == null) {
-            return false;
-        }
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
-        userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
-
-        MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
-
-        MessagesController.getInstance().cancelLoadFullUser(user_id);
-    }
-
-    private void updateRowsIds() {
-        rowCount = 0;
-        avatarRow = rowCount++;
-        phoneSectionRow = rowCount++;
-        phoneRow = rowCount++;
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        if (user != null && user.username != null && user.username.length() > 0) {
-            usernameRow = rowCount++;
-        } else {
-            usernameRow = -1;
-        }
-        settingsSectionRow = rowCount++;
-        if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
-            settingsTimerRow = rowCount++;
-            settingsKeyRow = rowCount++;
-        } else {
-            settingsTimerRow = -1;
-            settingsKeyRow = -1;
-        }
-        settingsNotificationsRow = rowCount++;
-        sharedMediaSectionRow = rowCount++;
-        sharedMediaRow = rowCount++;
-    }
-
-    @Override
-    public View createView(LayoutInflater inflater, ViewGroup container) {
-        if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            if (dialog_id != 0) {
-                actionBarLayer.setTitle(LocaleController.getString("SecretTitle", R.string.SecretTitle));
-                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
-            } else {
-                actionBarLayer.setTitle(LocaleController.getString("ContactInfo", R.string.ContactInfo));
-            }
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
-                @Override
-                public void onItemClick(final int id) {
-                    if (id == -1) {
-                        finishFragment();
-                    } else if (id == block_contact) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        if (!userBlocked) {
-                            builder.setMessage(LocaleController.getString("AreYouSureBlockContact", R.string.AreYouSureBlockContact));
-                        } else {
-                            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
-                        }
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                if (!userBlocked) {
-                                    MessagesController.getInstance().blockUser(user_id);
-                                } else {
-                                    MessagesController.getInstance().unblockUser(user_id);
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    } else if (id == add_contact) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", user.id);
-                        presentFragment(new ContactAddActivity(args));
-                    } else if (id == share_contact) {
-                        Bundle args = new Bundle();
-                        args.putBoolean("onlySelect", true);
-                        args.putBoolean("serverOnly", true);
-                        MessagesActivity fragment = new MessagesActivity(args);
-                        fragment.setDelegate(UserProfileActivity.this);
-                        presentFragment(fragment);
-                    } else if (id == edit_contact) {
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", user_id);
-                        presentFragment(new ContactAddActivity(args));
-                    } else if (id == delete_contact) {
-                        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        if (user == null || getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("AreYouSureDeleteContact", R.string.AreYouSureDeleteContact));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                ArrayList<TLRPC.User> arrayList = new ArrayList<TLRPC.User>();
-                                arrayList.add(user);
-                                ContactsController.getInstance().deleteContact(arrayList);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    }
-                }
-            });
-
-            createActionBarMenu();
-
-            fragmentView = inflater.inflate(R.layout.user_profile_layout, container, false);
-            listAdapter = new ListAdapter(getParentActivity());
-
-            TextView textView = (TextView)fragmentView.findViewById(R.id.start_secret_button_text);
-            textView.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
-
-            View startSecretButton = fragmentView.findViewById(R.id.start_secret_button);
-            startSecretButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureSecretChat", R.string.AreYouSureSecretChat));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            creatingChat = true;
-                            MessagesController.getInstance().startSecretChat(getParentActivity(), MessagesController.getInstance().getUser(user_id));
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showAlertDialog(builder);
-                }
-            });
-            if (dialog_id == 0) {
-                startSecretButton.setVisibility(View.VISIBLE);
-            } else {
-                startSecretButton.setVisibility(View.GONE);
-            }
-
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(listAdapter);
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == sharedMediaRow) {
-                        Bundle args = new Bundle();
-                        if (dialog_id != 0) {
-                            args.putLong("dialog_id", dialog_id);
-                        } else {
-                            args.putLong("dialog_id", user_id);
-                        }
-                        presentFragment(new MediaActivity(args));
-                    } else if (i == settingsKeyRow) {
-                        Bundle args = new Bundle();
-                        args.putInt("chat_id", (int)(dialog_id >> 32));
-                        presentFragment(new IdenticonActivity(args));
-                    } else if (i == settingsTimerRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
-                    } else if (i == settingsNotificationsRow) {
-                        Bundle args = new Bundle();
-                        args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
-                        presentFragment(new ProfileNotificationsActivity(args));
-                    }
-                }
-            });
-            if (dialog_id != 0) {
-                MessagesController.getInstance().getMediaCount(dialog_id, classGuid, true);
-            } else {
-                MessagesController.getInstance().getMediaCount(user_id, classGuid, true);
-            }
-        } else {
-            ViewGroup parent = (ViewGroup)fragmentView.getParent();
-            if (parent != null) {
-                parent.removeView(fragmentView);
-            }
-        }
-        return fragmentView;
-    }
-
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateRowsIds();
-                if (listView != null) {
-                    listView.invalidateViews();
-                }
-            }
-        } else if (id == NotificationCenter.contactsDidLoaded) {
-            createActionBarMenu();
-        } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long)args[0];
-            if (uid > 0 && user_id == uid && dialog_id == 0 || dialog_id != 0 && dialog_id == uid) {
-                totalMediaCount = (Integer)args[1];
-                if (listView != null) {
-                    listView.invalidateViews();
-                }
-            }
-        } else if (id == NotificationCenter.encryptedChatCreated) {
-            if (creatingChat) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                        TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
-                        Bundle args2 = new Bundle();
-                        args2.putInt("enc_id", encryptedChat.id);
-                        presentFragment(new ChatActivity(args2), true);
-                    }
-                });
-            }
-        } else if (id == NotificationCenter.encryptedChatUpdated) {
-            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
-            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
-                currentEncryptedChat = chat;
-                updateRowsIds();
-                if (listAdapter != null) {
-                    listAdapter.notifyDataSetChanged();
-                }
-            }
-        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
-            boolean oldValue = userBlocked;
-            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
-            if (oldValue != userBlocked) {
-                createActionBarMenu();
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        if (fileLocation == null) {
-            return null;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        if (user != null && user.photo != null && user.photo.photo_big != null) {
-            TLRPC.FileLocation photoBig = user.photo.photo_big;
-            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
-                int count = listView.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = listView.getChildAt(a);
-                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    if (avatarImage != null) {
-                        int coords[] = new int[2];
-                        avatarImage.getLocationInWindow(coords);
-                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-                        object.viewX = coords[0];
-                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-                        object.parentView = listView;
-                        object.imageReceiver = avatarImage.imageReceiver;
-                        object.user_id = user_id;
-                        object.thumb = object.imageReceiver.getBitmap();
-                        object.size = -1;
-                        return object;
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
-
-    @Override
-    public void willHidePhotoViewer() { }
-
-    @Override
-    public boolean isPhotoChecked(int index) { return false; }
-
-    @Override
-    public void setPhotoChecked(int index) { }
-
-    @Override
-    public void cancelButtonPressed() { }
-
-    @Override
-    public void sendButtonPressed(int index) { }
-
-    @Override
-    public int getSelectedCount() { return 0; }
-
-    private void createActionBarMenu() {
-        ActionBarMenu menu = actionBarLayer.createMenu();
-        menu.clearItems();
-
-        if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            if (user == null) {
-                return;
-            }
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-            if (user.phone != null && user.phone.length() != 0) {
-                item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
-                item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
-                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-            } else {
-                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-            }
-        } else {
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-            item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
-            item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-            item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
-            item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
-        }
-    }
-
-    @Override
-    protected void onDialogDismiss() {
-        if (listView != null) {
-            listView.invalidateViews();
-        }
-    }
-
-    @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
-        if (dialog_id != 0) {
-            Bundle args = new Bundle();
-            args.putBoolean("scrollToTopOnResume", true);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            int lower_part = (int)dialog_id;
-            if (lower_part != 0) {
-                if (lower_part > 0) {
-                    args.putInt("user_id", lower_part);
-                } else if (lower_part < 0) {
-                    args.putInt("chat_id", -lower_part);
-                }
-            } else {
-                args.putInt("enc_id", (int)(dialog_id >> 32));
-            }
-            presentFragment(new ChatActivity(args), true);
-            removeSelfFromStack();
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                BackupImageView avatarImage;
-                TextView onlineText;
-                TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_avatar_layout, viewGroup, false);
-
-                    onlineText = (TextView)view.findViewById(R.id.settings_online);
-                    avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    avatarImage.processDetach = false;
-                    avatarImage.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                            if (user.photo != null && user.photo.photo_big != null) {
-                                PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                PhotoViewer.getInstance().openPhoto(user.photo.photo_big, UserProfileActivity.this);
-                            }
-                        }
-                    });
-                } else {
-                    avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
-                    onlineText = (TextView)view.findViewById(R.id.settings_online);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_name);
-                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
-                textView.setTypeface(typeface);
-
-                textView.setText(ContactsController.formatName(user.first_name, user.last_name));
-                onlineText.setText(LocaleController.formatUserStatus(user));
-
-                TLRPC.FileLocation photo = null;
-                TLRPC.FileLocation photoBig = null;
-                if (user.photo != null) {
-                    photo = user.photo.photo_small;
-                    photoBig = user.photo.photo_big;
-                }
-                avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
-                avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-                return view;
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new SettingsSectionLayout(mContext);
-                }
-                if (i == phoneSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
-                } else if (i == settingsSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
-                } else if (i == sharedMediaSectionRow) {
-                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
-                }
-            } else if (type == 2) {
-                final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_phone_layout, viewGroup, false);
-                    view.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            if (user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
-                                return;
-                            }
-
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                            builder.setItems(new CharSequence[] {LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    if (i == 0) {
-                                        int sdk = android.os.Build.VERSION.SDK_INT;
-                                        if(sdk < android.os.Build.VERSION_CODES.HONEYCOMB) {
-                                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                            clipboard.setText(user.phone);
-                                        } else {
-                                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", user.phone);
-                                            clipboard.setPrimaryClip(clip);
-                                        }
-                                    }
-                                }
-                            });
-                            showAlertDialog(builder);
-                        }
-                    });
-                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                            if (user == null || user instanceof TLRPC.TL_userEmpty) {
-                                return;
-                            }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", user_id);
-                            presentFragment(new ChatActivity(args), true);
-                        }
-                    });
-                    button = (ImageButton)view.findViewById(R.id.settings_call_phone);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            try {
-                                Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
-                                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                getParentActivity().startActivity(intent);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                }
-                ImageButton button = (ImageButton)view.findViewById(R.id.settings_call_phone);
-                button.setVisibility(user.phone == null || user.phone.length() == 0 ? View.GONE : View.VISIBLE);
-
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == phoneRow) {
-                    if (user.phone != null && user.phone.length() != 0) {
-                        textView.setText(PhoneFormat.getInstance().format("+" + user.phone));
-                    } else {
-                        textView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
-                    }
-                    divider.setVisibility(usernameRow != -1 ? View.VISIBLE : View.INVISIBLE);
-                    detailTextView.setText(LocaleController.getString("PhoneMobile", R.string.PhoneMobile));
-                }
-            } else if (type == 3) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == sharedMediaRow) {
-                    textView.setText(LocaleController.getString("SharedMedia", R.string.SharedMedia));
-                    if (totalMediaCount == -1) {
-                        detailTextView.setText(LocaleController.getString("Loading", R.string.Loading));
-                    } else {
-                        detailTextView.setText(String.format("%d", totalMediaCount));
-                    }
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == settingsTimerRow) {
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-                    textView.setText(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
-                    divider.setVisibility(View.VISIBLE);
-                    if (encryptedChat.ttl == 0) {
-                        detailTextView.setText(LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever));
-                    } else {
-                        detailTextView.setText(AndroidUtilities.formatTTLString(encryptedChat.ttl));
-                    }
-                } else if (i == usernameRow) {
-                    TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    textView.setText(LocaleController.getString("Username", R.string.Username));
-                    if (user != null && user.username != null && user.username.length() != 0) {
-                        detailTextView.setText("@" + user.username);
-                    } else {
-                        detailTextView.setText("-");
-                    }
-                    divider.setVisibility(View.INVISIBLE);
-                }
-            } else if (type == 4) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_identicon_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                divider.setVisibility(View.VISIBLE);
-                IdenticonView identiconView = (IdenticonView)view.findViewById(R.id.identicon_view);
-                TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-                identiconView.setBytes(encryptedChat.auth_key);
-                textView.setText(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
-            } else if (type == 5) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                if (i == settingsNotificationsRow) {
-                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-                    divider.setVisibility(View.INVISIBLE);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == avatarRow) {
-                return 0;
-            } else if (i == phoneSectionRow || i == settingsSectionRow || i == sharedMediaSectionRow) {
-                return 1;
-            } else if (i == phoneRow) {
-                return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow || i == usernameRow) {
-                return 3;
-            } else if (i == settingsKeyRow) {
-                return 4;
-            } else if (i == settingsNotificationsRow) {
-                return 5;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 6;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index b73a8b472..24d4837e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -46,9 +46,9 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.VideoSeekBarView;
 import org.telegram.ui.Views.VideoTimelineView;
 
@@ -116,7 +116,7 @@ public void run() {
                 if (!playerCheck) {
                     break;
                 }
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (videoPlayer != null && videoPlayer.isPlaying()) {
@@ -172,7 +172,7 @@ public boolean onFragmentCreate() {
         videoPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
             @Override
             public void onCompletion(MediaPlayer mp) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         onPlayComplete();
@@ -220,11 +220,11 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setBackgroundColor(0xff333333);
-            actionBarLayer.setItemsBackground(R.drawable.bar_selector_white);
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.photo_back);
-            actionBarLayer.setTitle(LocaleController.getString("EditVideo", R.string.EditVideo));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            actionBar.setBackgroundColor(0xff333333);
+            actionBar.setItemsBackground(R.drawable.bar_selector_white);
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setTitle(LocaleController.getString("EditVideo", R.string.EditVideo));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
                     if (id == -1) {
@@ -253,11 +253,8 @@ public void onItemClick(int id) {
                 }
             });
 
-            ActionBarMenu menu = actionBarLayer.createMenu();
-            View doneItem = menu.addItemResource(1, R.layout.group_create_done_layout);
-
-            TextView doneTextView = (TextView) doneItem.findViewById(R.id.done_button);
-            doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(1, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             fragmentView = inflater.inflate(R.layout.video_editor_layout, container, false);
             originalSizeTextView = (TextView) fragmentView.findViewById(R.id.original_size);
@@ -535,11 +532,7 @@ private void fixVideoSize() {
         if (AndroidUtilities.isTablet()) {
             viewHeight = AndroidUtilities.dp(472);
         } else {
-            if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(40);
-            } else {
-                viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(48);
-            }
+            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.getCurrentActionBarHeight();
         }
 
         int width = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
deleted file mode 100644
index d616b9dde..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
+++ /dev/null
@@ -1,185 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Views.ActionBar;
-
-import android.animation.Animator;
-import android.animation.ObjectAnimator;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.drawable.Drawable;
-import android.util.AttributeSet;
-import android.view.Gravity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-import java.util.ArrayList;
-
-public class ActionBar extends FrameLayout {
-
-    private static Drawable logoDrawable;
-    protected ActionBarLayer currentLayer = null;
-    private ActionBarLayer previousLayer = null;
-    private View shadowView = null;
-    private boolean isBackOverlayVisible;
-
-    public ActionBar(Context context) {
-        super(context);
-        createComponents();
-    }
-
-    public ActionBar(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        createComponents();
-    }
-
-    public ActionBar(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        createComponents();
-    }
-
-    public void createComponents() {
-        shadowView = new View(getContext());
-        addView(shadowView);
-        shadowView.setVisibility(INVISIBLE);
-        ViewGroup.LayoutParams layoutParams = shadowView.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(2);
-        layoutParams.height = LayoutParams.MATCH_PARENT;
-        shadowView.setLayoutParams(layoutParams);
-        shadowView.setBackgroundResource(R.drawable.shadow);
-    }
-
-    public ActionBarLayer createLayer() {
-        return new ActionBarLayer(getContext(), this);
-    }
-
-    public void detachActionBarLayer(ActionBarLayer layer) {
-        if (layer == null) {
-            return;
-        }
-        removeView(layer);
-        if (currentLayer == layer) {
-            currentLayer = null;
-        }
-    }
-
-    public void setCurrentActionBarLayer(ActionBarLayer layer) {
-        if (layer == null || layer.getParent() != null) {
-            return;
-        }
-        if (currentLayer != null) {
-            removeView(currentLayer);
-        }
-        currentLayer = layer;
-        addView(layer);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)layer.getLayoutParams();
-        layoutParams.width = LayoutParams.MATCH_PARENT;
-        layoutParams.height = LayoutParams.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        layer.setLayoutParams(layoutParams);
-        currentLayer.setBackOverlayVisible(isBackOverlayVisible);
-        if(android.os.Build.VERSION.SDK_INT >= 11) {
-            layer.setAlpha(1);
-        }
-    }
-
-    public void setBackOverlayVisible(boolean visible) {
-        isBackOverlayVisible = visible;
-        if (currentLayer != null) {
-            currentLayer.setBackOverlayVisible(visible);
-        }
-        if (previousLayer != null) {
-            previousLayer.setBackOverlayVisible(visible);
-        }
-    }
-
-    public void prepareForMoving(ActionBarLayer layer) {
-        if (currentLayer == null || layer == null) {
-            return;
-        }
-        previousLayer = layer;
-        ViewGroup parent = (ViewGroup) previousLayer.getParent();
-        if (parent != null) {
-            parent.removeView(previousLayer);
-        }
-        this.addView(previousLayer, 0);
-        ViewGroup.LayoutParams layoutParams = layer.getLayoutParams();
-        layoutParams.width = LayoutParams.MATCH_PARENT;
-        layoutParams.height = LayoutParams.MATCH_PARENT;
-        layer.setLayoutParams(layoutParams);
-        shadowView.setX(-AndroidUtilities.dp(2));
-        shadowView.setVisibility(VISIBLE);
-        previousLayer.setBackOverlayVisible(isBackOverlayVisible);
-    }
-
-    public void stopMoving(boolean backAnimation) {
-        if (currentLayer == null) {
-            return;
-        }
-        currentLayer.setX(0);
-        if (!backAnimation) {
-            removeView(currentLayer);
-            currentLayer = previousLayer;
-            currentLayer.setAlpha(1);
-            previousLayer = null;
-        } else {
-            removeView(previousLayer);
-            previousLayer = null;
-        }
-        shadowView.setVisibility(INVISIBLE);
-    }
-
-    public void moveActionBarByX(int dx) {
-        if (currentLayer == null) {
-            return;
-        }
-        currentLayer.setX(dx);
-        shadowView.setX(dx - AndroidUtilities.dp(2));
-        if (dx != 0) {
-            if (previousLayer != null) {
-                previousLayer.setAlpha(Math.min(1, (float) dx / (float) currentLayer.getMeasuredWidth()));
-            }
-        } else {
-            if (previousLayer != null) {
-                previousLayer.setAlpha(0);
-            }
-            currentLayer.setAlpha(1);
-        }
-    }
-
-    public void setupAnimations(ArrayList<Animator> animators, boolean back) {
-        if (back) {
-            animators.add(ObjectAnimator.ofFloat(currentLayer, "x", 0));
-            animators.add(ObjectAnimator.ofFloat(shadowView, "x", -AndroidUtilities.dp(2)));
-            animators.add(ObjectAnimator.ofFloat(previousLayer, "alpha", 0));
-        } else {
-            animators.add(ObjectAnimator.ofFloat(currentLayer, "x", getMeasuredWidth()));
-            animators.add(ObjectAnimator.ofFloat(shadowView, "x", getMeasuredWidth() - AndroidUtilities.dp(2)));
-            animators.add(ObjectAnimator.ofFloat(previousLayer, "alpha", 1.0f));
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
-        } else {
-            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
-        }
-    }
-
-    public void onMenuButtonPressed() {
-        if (currentLayer != null) {
-            currentLayer.onMenuButtonPressed();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
deleted file mode 100644
index e4ce88d0c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
+++ /dev/null
@@ -1,827 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Views.ActionBar;
-
-import android.animation.Animator;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Build;
-import android.os.Handler;
-import android.view.ActionMode;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.VelocityTracker;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
-import android.widget.FrameLayout;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-
-import java.util.ArrayList;
-
-public class ActionBarLayout extends FrameLayout {
-
-    private class FrameLayoutAnimationListener extends FrameLayout {
-        public FrameLayoutAnimationListener(Context context) {
-            super(context);
-        }
-
-        @Override
-        protected void onAnimationEnd() {
-            super.onAnimationEnd();
-            ActionBarLayout.this.onAnimationEndCheck();
-        }
-    }
-
-    public static interface ActionBarLayoutDelegate {
-        public abstract boolean onPreIme();
-        public abstract void onOverlayShow(View view, BaseFragment fragment);
-        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
-        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
-        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
-        public abstract void onRebuildAllFragments(ActionBarLayout layout);
-    }
-
-    protected ActionBar actionBar;
-    private FrameLayoutAnimationListener containerView;
-    private FrameLayoutAnimationListener containerViewBack;
-    private View shadowView;
-
-    private Animation openAnimation;
-    private Animation closeAnimation;
-    private Animation alphaOpenAnimation;
-    private Animation alphaOpenAnimation2;
-    private Animation alphaCloseAnimation;
-    private Animation alphaCloseAnimation2;
-
-    private boolean maybeStartTracking = false;
-    protected boolean startedTracking = false;
-    private int startedTrackingX;
-    private int startedTrackingY;
-    protected boolean animationInProgress = false;
-    private VelocityTracker velocityTracker = null;
-    private boolean beginTrackingSent = false;
-    private boolean transitionAnimationInProgress = false;
-    private long transitionAnimationStartTime;
-    private boolean inActionMode = false;
-    private int startedTrackingPointerId;
-    private Runnable onCloseAnimationEndRunnable = null;
-    private Runnable onOpenAnimationEndRunnable = null;
-    private boolean useAlphaAnimations = false;
-    private View backgroundView;
-
-    private ActionBarLayoutDelegate delegate = null;
-    protected Activity parentActivity = null;
-
-    public ArrayList<BaseFragment> fragmentsStack = null;
-
-    public ActionBarLayout(Context context) {
-        super(context);
-        parentActivity = (Activity)context;
-        try {
-            openAnimation = AnimationUtils.loadAnimation(context, R.anim.scale_in);
-            closeAnimation = AnimationUtils.loadAnimation(context, R.anim.scale_out);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void init(ArrayList<BaseFragment> stack) {
-        fragmentsStack = stack;
-        containerViewBack = new FrameLayoutAnimationListener(parentActivity);
-        addView(containerViewBack);
-
-        containerView = new FrameLayoutAnimationListener(parentActivity);
-        addView(containerView);
-
-        shadowView = new FrameLayout(parentActivity);
-        addView(shadowView);
-        shadowView.setBackgroundResource(R.drawable.shadow);
-        ViewGroup.LayoutParams layoutParams = shadowView.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(2);
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        shadowView.setLayoutParams(layoutParams);
-        shadowView.setVisibility(View.INVISIBLE);
-
-        actionBar = new ActionBar(parentActivity);
-        addView(actionBar);
-        layoutParams = actionBar.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        actionBar.setLayoutParams(layoutParams);
-
-        for (BaseFragment fragment : fragmentsStack) {
-            fragment.setParentLayout(this);
-        }
-
-        needLayout();
-    }
-
-    @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-        if (!fragmentsStack.isEmpty()) {
-            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-            lastFragment.onConfigurationChanged(newConfig);
-        }
-    }
-
-    public void onResume() {
-        fixLayout();
-        if (transitionAnimationInProgress) {
-            if (onCloseAnimationEndRunnable != null) {
-                closeAnimation.cancel();
-                onCloseAnimationEnd(false);
-            } else if (onOpenAnimationEndRunnable != null) {
-                openAnimation.cancel();
-                onOpenAnimationEnd(false);
-            }
-        }
-        if (!fragmentsStack.isEmpty()) {
-            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-            lastFragment.onResume();
-
-            actionBar.setCurrentActionBarLayer(lastFragment.actionBarLayer);
-        }
-    }
-
-    public void onPause() {
-        if (!fragmentsStack.isEmpty()) {
-            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-            lastFragment.onPause();
-        }
-    }
-
-    @Override
-    public boolean onInterceptTouchEvent(MotionEvent ev) {
-        return !(!animationInProgress && !checkTransitionAnimation()) || onTouchEvent(ev);
-    }
-
-    @Override
-    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
-        onTouchEvent(null);
-        super.requestDisallowInterceptTouchEvent(disallowIntercept);
-    }
-
-    @Override
-    public boolean dispatchKeyEventPreIme(KeyEvent event) {
-        if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
-            return delegate != null && delegate.onPreIme() || super.dispatchKeyEventPreIme(event);
-        }
-        return super.dispatchKeyEventPreIme(event);
-    }
-
-    @Override
-    protected void onAnimationEnd() {
-        super.onAnimationEnd();
-        onAnimationEndCheck();
-    }
-
-    public void setDelegate(ActionBarLayoutDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private void onSlideAnimationEnd(boolean backAnimation) {
-        containerView.setTranslationX(0);
-        containerViewBack.setTranslationX(0);
-        actionBar.stopMoving(backAnimation);
-        shadowView.setVisibility(View.INVISIBLE);
-        shadowView.setTranslationX(-AndroidUtilities.dp(2));
-        if (!backAnimation) {
-            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-            lastFragment.onPause();
-            lastFragment.onFragmentDestroy();
-            lastFragment.setParentLayout(null);
-            fragmentsStack.remove(fragmentsStack.size() - 1);
-
-            FrameLayoutAnimationListener temp = containerView;
-            containerView = containerViewBack;
-            containerViewBack = temp;
-            ViewGroup parent = (ViewGroup)containerView.getParent();
-            parent.removeView(containerView);
-            parent.addView(containerView, 1);
-            lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-            lastFragment.onResume();
-        } else {
-            BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
-            lastFragment.onPause();
-            if (lastFragment.fragmentView != null) {
-                ViewGroup parent = (ViewGroup) lastFragment.fragmentView.getParent();
-                if (parent != null) {
-                    parent.removeView(lastFragment.fragmentView);
-                }
-            }
-        }
-        containerViewBack.setVisibility(View.GONE);
-        AndroidUtilities.unlockOrientation(parentActivity);
-        startedTracking = false;
-        animationInProgress = false;
-    }
-
-    private void prepareForMoving(MotionEvent ev) {
-        maybeStartTracking = false;
-        startedTracking = true;
-        startedTrackingX = (int) ev.getX();
-        shadowView.setVisibility(View.VISIBLE);
-        shadowView.setTranslationX(-AndroidUtilities.dp(2));
-        containerViewBack.setVisibility(View.VISIBLE);
-        beginTrackingSent = false;
-
-        BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
-        actionBar.prepareForMoving(lastFragment.actionBarLayer);
-        View fragmentView = lastFragment.createView(parentActivity.getLayoutInflater(), null);
-        ViewGroup parentView = (ViewGroup)fragmentView.getParent();
-        if (parentView != null) {
-            parentView.removeView(fragmentView);
-        }
-        containerViewBack.addView(fragmentView);
-        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        fragmentView.setLayoutParams(layoutParams);
-        if (fragmentView.getBackground() == null) {
-            fragmentView.setBackgroundColor(0xffffffff);
-        }
-        lastFragment.onResume();
-
-        AndroidUtilities.lockOrientation(parentActivity);
-    }
-
-    public boolean onTouchEvent(MotionEvent ev) {
-        if(android.os.Build.VERSION.SDK_INT >= 11 && !checkTransitionAnimation() && !inActionMode && fragmentsStack.size() > 1 && !animationInProgress) {
-            if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {
-                BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-                if (!currentFragment.swipeBackEnabled) {
-                    return false;
-                }
-                startedTrackingPointerId = ev.getPointerId(0);
-                maybeStartTracking = true;
-                startedTrackingX = (int) ev.getX();
-                startedTrackingY = (int) ev.getY();
-                if (velocityTracker != null) {
-                    velocityTracker.clear();
-                }
-            } else if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {
-                if (velocityTracker == null) {
-                    velocityTracker = VelocityTracker.obtain();
-                }
-                int dx = Math.max(0, (int) (ev.getX() - startedTrackingX));
-                int dy = Math.abs((int)ev.getY() - startedTrackingY);
-                velocityTracker.addMovement(ev);
-                if (maybeStartTracking && !startedTracking && dx >= AndroidUtilities.dp(10) && Math.abs(dx) / 3 > dy) {
-                    prepareForMoving(ev);
-                } else if (startedTracking) {
-                    if (!beginTrackingSent) {
-                        if (parentActivity.getCurrentFocus() != null) {
-                            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
-                        }
-                        BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-                        currentFragment.onBeginSlide();
-                        beginTrackingSent = true;
-                    }
-                    actionBar.moveActionBarByX(dx);
-                    containerView.setTranslationX(dx);
-                    shadowView.setTranslationX(dx - AndroidUtilities.dp(2));
-                }
-            } else if (ev != null && ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {
-                if (velocityTracker == null) {
-                    velocityTracker = VelocityTracker.obtain();
-                }
-                velocityTracker.computeCurrentVelocity(1000);
-                if (!startedTracking) {
-                    float velX = velocityTracker.getXVelocity();
-                    float velY = velocityTracker.getYVelocity();
-                    if (velX >= 3500 && velX > velY) {
-                        prepareForMoving(ev);
-                    }
-                }
-                if (startedTracking) {
-                    float x = containerView.getX();
-                    ArrayList<Animator> animators = new ArrayList<Animator>();
-                    float velX = velocityTracker.getXVelocity();
-                    float velY = velocityTracker.getYVelocity();
-                    final boolean backAnimation = x < containerView.getMeasuredWidth() / 3.0f && (velX < 3500 || velX < velY);
-                    float distToMove = 0;
-                    if (!backAnimation) {
-                        distToMove = containerView.getMeasuredWidth() - x;
-                        animators.add(ObjectAnimator.ofFloat(containerView, "x", containerView.getMeasuredWidth()));
-                        animators.add(ObjectAnimator.ofFloat(shadowView, "x", containerView.getMeasuredWidth() - AndroidUtilities.dp(2)));
-                    } else {
-                        distToMove = x;
-                        animators.add(ObjectAnimator.ofFloat(containerView, "x", 0));
-                        animators.add(ObjectAnimator.ofFloat(shadowView, "x", -AndroidUtilities.dp(2)));
-                    }
-                    actionBar.setupAnimations(animators, backAnimation);
-
-                    AnimatorSet animatorSet = new AnimatorSet();
-                    animatorSet.playTogether(animators);
-                    animatorSet.setDuration(Math.max((int) (200.0f / containerView.getMeasuredWidth() * distToMove), 50));
-                    animatorSet.start();
-                    animationInProgress = true;
-                    animatorSet.addListener(new Animator.AnimatorListener() {
-                        @Override
-                        public void onAnimationStart(Animator animator) {
-
-                        }
-
-                        @Override
-                        public void onAnimationEnd(Animator animator) {
-                            onSlideAnimationEnd(backAnimation);
-                        }
-
-                        @Override
-                        public void onAnimationCancel(Animator animator) {
-                            onSlideAnimationEnd(backAnimation);
-                        }
-
-                        @Override
-                        public void onAnimationRepeat(Animator animator) {
-
-                        }
-                    });
-                } else {
-                    maybeStartTracking = false;
-                    startedTracking = false;
-                }
-                if (velocityTracker != null) {
-                    velocityTracker.recycle();
-                    velocityTracker = null;
-                }
-            } else if (ev == null) {
-                maybeStartTracking = false;
-                startedTracking = false;
-                if (velocityTracker != null) {
-                    velocityTracker.recycle();
-                    velocityTracker = null;
-                }
-            }
-            return startedTracking;
-        }
-        return false;
-    }
-
-    public ActionBar getActionBar() {
-        return actionBar;
-    }
-
-    public void onBackPressed() {
-        if (startedTracking || checkTransitionAnimation() || fragmentsStack.isEmpty()) {
-            return;
-        }
-        if (actionBar.currentLayer != null && actionBar.currentLayer.isSearchFieldVisible) {
-            actionBar.currentLayer.closeSearchField();
-            return;
-        }
-        BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-        if (lastFragment.onBackPressed()) {
-            if (!fragmentsStack.isEmpty()) {
-                closeLastFragment(true);
-            }
-        }
-    }
-
-    public void onLowMemory() {
-        for (BaseFragment fragment : fragmentsStack) {
-            fragment.onLowMemory();
-        }
-    }
-
-    private void onAnimationEndCheck() {
-        onCloseAnimationEnd(false);
-        onOpenAnimationEnd(false);
-    }
-
-    public boolean checkTransitionAnimation() {
-        if (transitionAnimationInProgress && transitionAnimationStartTime < System.currentTimeMillis() - 400) {
-            transitionAnimationInProgress = false;
-            onAnimationEndCheck();
-        }
-        return transitionAnimationInProgress;
-    }
-
-    private void fixLayout() {
-        getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-            @Override
-            public void onGlobalLayout() {
-                needLayout();
-
-                if (Build.VERSION.SDK_INT < 16) {
-                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                } else {
-                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                }
-            }
-        });
-    }
-
-    public void needLayout() {
-        WindowManager manager = (WindowManager)parentActivity.getSystemService(Context.WINDOW_SERVICE);
-        int rotation = manager.getDefaultDisplay().getRotation();
-
-        int height = 0;
-        if (actionBar.getVisibility() == View.VISIBLE) {
-            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                height = AndroidUtilities.dp(40);
-            } else {
-                height = AndroidUtilities.dp(48);
-            }
-        }
-
-        if (containerView != null) {
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
-            if (layoutParams.topMargin != height) {
-                layoutParams.setMargins(0, height, 0, 0);
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                containerView.setLayoutParams(layoutParams);
-            }
-        }
-        if (containerViewBack != null) {
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerViewBack.getLayoutParams();
-            if (layoutParams.topMargin != height) {
-                layoutParams.setMargins(0, height, 0, 0);
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                containerViewBack.setLayoutParams(layoutParams);
-            }
-        }
-    }
-
-    public ActionBar getInternalActionBar() {
-        return actionBar;
-    }
-
-    private void presentFragmentInternalRemoveOld(boolean removeLast, final BaseFragment fragment) {
-        if (fragment == null) {
-            return;
-        }
-        fragment.onPause();
-        if (removeLast) {
-            fragment.onFragmentDestroy();
-            fragment.setParentLayout(null);
-            fragmentsStack.remove(fragment);
-        } else {
-            if (fragment.fragmentView != null) {
-                ViewGroup parent = (ViewGroup) fragment.fragmentView.getParent();
-                if (parent != null) {
-                    parent.removeView(fragment.fragmentView);
-                }
-            }
-        }
-        containerViewBack.setVisibility(View.GONE);
-    }
-
-    public boolean presentFragment(BaseFragment fragment) {
-        return presentFragment(fragment, false, false, true);
-    }
-
-    public boolean presentFragment(BaseFragment fragment, boolean removeLast) {
-        return presentFragment(fragment, removeLast, false, true);
-    }
-
-    public boolean presentFragment(final BaseFragment fragment, final boolean removeLast, boolean forceWithoutAnimation, boolean check) {
-        if (checkTransitionAnimation() || delegate != null && check && !delegate.needPresentFragment(fragment, removeLast, forceWithoutAnimation, this) || !fragment.onFragmentCreate()) {
-            return false;
-        }
-        if (parentActivity.getCurrentFocus() != null) {
-            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.hideEmojiKeyboard);
-        }
-        boolean needAnimation = openAnimation != null && !forceWithoutAnimation && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
-        if (useAlphaAnimations && fragmentsStack.size() == 0 && alphaOpenAnimation == null) {
-            needAnimation = false;
-        }
-
-        final BaseFragment currentFragment = !fragmentsStack.isEmpty() ? fragmentsStack.get(fragmentsStack.size() - 1) : null;
-
-        fragment.setParentLayout(this);
-        View fragmentView = fragment.createView(parentActivity.getLayoutInflater(), null);
-        containerViewBack.addView(fragmentView);
-        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        fragmentView.setLayoutParams(layoutParams);
-        fragmentsStack.add(fragment);
-        fragment.onResume();
-        actionBar.setCurrentActionBarLayer(fragment.actionBarLayer);
-        if (fragmentView.getBackground() == null) {
-            fragmentView.setBackgroundColor(0xffffffff);
-        }
-
-        FrameLayoutAnimationListener temp = containerView;
-        containerView = containerViewBack;
-        containerViewBack = temp;
-        containerView.setVisibility(View.VISIBLE);
-        ViewGroup parent = (ViewGroup)containerView.getParent();
-        parent.removeView(containerView);
-        parent.addView(containerView, 1);
-
-        if (!needAnimation) {
-            presentFragmentInternalRemoveOld(removeLast, currentFragment);
-            if (backgroundView != null) {
-                backgroundView.setVisibility(VISIBLE);
-            }
-        }
-
-        if (needAnimation) {
-            if (useAlphaAnimations && fragmentsStack.size() == 1) {
-                presentFragmentInternalRemoveOld(removeLast, currentFragment);
-                startAnimation(alphaOpenAnimation);
-                if (backgroundView != null) {
-                    backgroundView.setVisibility(VISIBLE);
-                    backgroundView.startAnimation(alphaOpenAnimation2);
-                }
-            } else {
-                transitionAnimationStartTime = System.currentTimeMillis();
-                transitionAnimationInProgress = true;
-                onOpenAnimationEndRunnable = new Runnable() {
-                    @Override
-                    public void run() {
-                        presentFragmentInternalRemoveOld(removeLast, currentFragment);
-                        fragment.onOpenAnimationEnd();
-                    }
-                };
-                openAnimation.reset();
-                containerView.startAnimation(openAnimation);
-            }
-        } else {
-            fragment.onOpenAnimationEnd();
-        }
-        return true;
-    }
-
-    public boolean addFragmentToStack(BaseFragment fragment) {
-        return addFragmentToStack(fragment, -1);
-    }
-
-    public boolean addFragmentToStack(BaseFragment fragment, int position) {
-        if (delegate != null && !delegate.needAddFragmentToStack(fragment, this) || !fragment.onFragmentCreate()) {
-            return false;
-        }
-        fragment.setParentLayout(this);
-        if (position == -1) {
-            fragmentsStack.add(fragment);
-        } else {
-            fragmentsStack.add(position, fragment);
-        }
-        return true;
-    }
-
-    private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
-        fragment.onPause();
-        fragment.onFragmentDestroy();
-        fragment.setParentLayout(null);
-        fragmentsStack.remove(fragment);
-        containerViewBack.setVisibility(View.GONE);
-        ViewGroup parent = (ViewGroup)containerView.getParent();
-        parent.removeView(containerViewBack);
-        parent.addView(containerViewBack, 0);
-    }
-
-    public void closeLastFragment(boolean animated) {
-        if (delegate != null && !delegate.needCloseLastFragment(this) || checkTransitionAnimation()) {
-            return;
-        }
-        if (parentActivity.getCurrentFocus() != null) {
-            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
-        }
-        boolean needAnimation = animated && closeAnimation != null && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
-        if (useAlphaAnimations && fragmentsStack.size() == 1 && alphaCloseAnimation == null) {
-            needAnimation = false;
-        }
-        final BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-        BaseFragment previousFragment = null;
-        if (fragmentsStack.size() > 1) {
-            previousFragment = fragmentsStack.get(fragmentsStack.size() - 2);
-        }
-
-        if (previousFragment != null) {
-            FrameLayoutAnimationListener temp = containerView;
-            containerView = containerViewBack;
-            containerViewBack = temp;
-            containerView.setVisibility(View.VISIBLE);
-
-            previousFragment.setParentLayout(this);
-            View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
-            containerView.addView(fragmentView);
-            ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
-            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-            fragmentView.setLayoutParams(layoutParams);
-            previousFragment.onResume();
-            actionBar.setCurrentActionBarLayer(previousFragment.actionBarLayer);
-            if (fragmentView.getBackground() == null) {
-                fragmentView.setBackgroundColor(0xffffffff);
-            }
-
-            if (!needAnimation) {
-                closeLastFragmentInternalRemoveOld(currentFragment);
-            }
-
-            if (needAnimation) {
-                transitionAnimationStartTime = System.currentTimeMillis();
-                transitionAnimationInProgress = true;
-                closeAnimation.reset();
-                onCloseAnimationEndRunnable = new Runnable() {
-                    @Override
-                    public void run() {
-                        closeLastFragmentInternalRemoveOld(currentFragment);
-                    }
-                };
-                containerViewBack.startAnimation(closeAnimation);
-            }
-        } else {
-            if (needAnimation && useAlphaAnimations) {
-                transitionAnimationStartTime = System.currentTimeMillis();
-                transitionAnimationInProgress = true;
-                alphaCloseAnimation.reset();
-                alphaCloseAnimation2.reset();
-                startAnimation(alphaCloseAnimation);
-                if (backgroundView != null) {
-                    backgroundView.startAnimation(alphaCloseAnimation2);
-                }
-                onCloseAnimationEndRunnable = new Runnable() {
-                    @Override
-                    public void run() {
-                        removeFragmentFromStack(currentFragment);
-                        setVisibility(GONE);
-                        if (backgroundView != null) {
-                            backgroundView.setVisibility(GONE);
-                        }
-                    }
-                };
-            } else {
-                removeFragmentFromStack(currentFragment);
-                setVisibility(GONE);
-                if (backgroundView != null) {
-                    backgroundView.setVisibility(GONE);
-                }
-            }
-        }
-    }
-
-    public void showLastFragment() {
-        if (fragmentsStack.isEmpty()) {
-            return;
-        }
-        BaseFragment previousFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-        previousFragment.setParentLayout(this);
-        View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
-        containerView.addView(fragmentView);
-        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        fragmentView.setLayoutParams(layoutParams);
-        previousFragment.onResume();
-        actionBar.setCurrentActionBarLayer(previousFragment.actionBarLayer);
-        if (fragmentView.getBackground() == null) {
-            fragmentView.setBackgroundColor(0xffffffff);
-        }
-    }
-
-    public void removeFragmentFromStack(BaseFragment fragment) {
-        fragment.onPause();
-        fragment.onFragmentDestroy();
-        fragment.setParentLayout(null);
-        fragmentsStack.remove(fragment);
-    }
-
-    public void removeAllFragments() {
-        for (int a = 0; a < fragmentsStack.size(); a++) {
-            removeFragmentFromStack(fragmentsStack.get(a));
-            a--;
-        }
-    }
-
-    public void rebuildAllFragmentViews(boolean last) {
-        for (int a = 0; a < fragmentsStack.size() - (last ? 0 : 1); a++) {
-            fragmentsStack.get(a).setParentLayout(null);
-            fragmentsStack.get(a).setParentLayout(this);
-        }
-        if (delegate != null) {
-            delegate.onRebuildAllFragments(this);
-        }
-    }
-
-    public void showActionBar() {
-        actionBar.setVisibility(View.VISIBLE);
-        needLayout();
-    }
-
-    public void hideActionBar() {
-        actionBar.setVisibility(View.GONE);
-        needLayout();
-    }
-
-    public boolean onKeyUp(int keyCode, KeyEvent event) {
-        if (keyCode == KeyEvent.KEYCODE_MENU && !checkTransitionAnimation() && !startedTracking) {
-            actionBar.onMenuButtonPressed();
-        }
-        return super.onKeyUp(keyCode, event);
-    }
-
-    protected void onOverlayShow(View view, BaseFragment fragment) {
-        if (delegate != null) {
-            delegate.onOverlayShow(view, fragment);
-        }
-    }
-
-    public void onActionModeStarted(ActionMode mode) {
-        hideActionBar();
-        inActionMode = true;
-    }
-
-    public void onActionModeFinished(ActionMode mode) {
-        showActionBar();
-        inActionMode = false;
-    }
-
-    private void onCloseAnimationEnd(boolean post) {
-        if (transitionAnimationInProgress && onCloseAnimationEndRunnable != null) {
-            transitionAnimationInProgress = false;
-            transitionAnimationStartTime = 0;
-            if (post) {
-                new Handler().post(new Runnable() {
-                    public void run() {
-                        onCloseAnimationEndRunnable.run();
-                        onCloseAnimationEndRunnable = null;
-                    }
-                });
-            } else {
-                onCloseAnimationEndRunnable.run();
-                onCloseAnimationEndRunnable = null;
-            }
-        }
-    }
-
-    private void onOpenAnimationEnd(boolean post) {
-        if (transitionAnimationInProgress && onOpenAnimationEndRunnable != null) {
-            transitionAnimationInProgress = false;
-            transitionAnimationStartTime = 0;
-            if (post) {
-                new Handler().post(new Runnable() {
-                    public void run() {
-                        onOpenAnimationEndRunnable.run();
-                        onOpenAnimationEndRunnable = null;
-                    }
-                });
-            } else {
-                onOpenAnimationEndRunnable.run();
-                onOpenAnimationEndRunnable = null;
-            }
-        }
-    }
-
-    public void startActivityForResult(final Intent intent, final int requestCode) {
-        if (parentActivity == null) {
-            return;
-        }
-        if (transitionAnimationInProgress) {
-            if (onCloseAnimationEndRunnable != null) {
-                closeAnimation.cancel();
-                onCloseAnimationEnd(false);
-            } else if (onOpenAnimationEndRunnable != null) {
-                openAnimation.cancel();
-                onOpenAnimationEnd(false);
-            }
-            containerView.invalidate();
-            if (intent != null) {
-                parentActivity.startActivityForResult(intent, requestCode);
-            }
-        } else {
-            if (intent != null) {
-                parentActivity.startActivityForResult(intent, requestCode);
-            }
-        }
-    }
-
-    public void setUseAlphaAnimations(boolean value) {
-        useAlphaAnimations = value;
-        if (useAlphaAnimations) {
-            alphaOpenAnimation = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_in);
-            alphaOpenAnimation2 = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_in);
-            alphaCloseAnimation = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_out);
-            alphaCloseAnimation2 = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_out);
-        }
-    }
-
-    public void setBackgroundView(View view) {
-        backgroundView = view;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarDrawable.java
new file mode 100644
index 000000000..d053bd882
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarDrawable.java
@@ -0,0 +1,244 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ApplicationLoader;
+
+import java.util.Locale;
+
+public class AvatarDrawable extends Drawable {
+
+    private static Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private static TextPaint namePaint;
+    private static int[] arrColors = {0xffe56555, 0xfff28c48, 0xffeec764, 0xff76c84d, 0xff5fbed5, 0xff549cdd, 0xff8e85ee, 0xfff2749a};
+    private static int[] arrColorsProfiles = {0xffd86f65, 0xfff69d61, 0xfffabb3c, 0xff67b35d, 0xff56a2bb, 0xff5c98cd, 0xff8c79d2, 0xfff37fa6};
+    private static int[] arrColorsProfilesBack = {0xffca6056, 0xfff18944, 0xfff2b02c, 0xff56a14c, 0xff4492ac, 0xff4c84b6, 0xff7d6ac4, 0xffe66b94};
+    private static int[] arrColorsProfilesText = {0xfff9cbc5, 0xfffdddc8, 0xfffce5bb, 0xffc0edba, 0xffb8e2f0, 0xffb3d7f7, 0xffcdc4ed, 0xfffed1e0};
+    private static int[] arrColorsButtons = {R.drawable.bar_selector_red, R.drawable.bar_selector_orange, R.drawable.bar_selector_yellow,
+            R.drawable.bar_selector_green, R.drawable.bar_selector_cyan, R.drawable.bar_selector_blue, R.drawable.bar_selector_violet, R.drawable.bar_selector_pink};
+
+    private static Drawable broadcastDrawable;
+    private static Drawable photoDrawable;
+
+    private int color;
+    private StaticLayout textLayout;
+    private float textWidth;
+    private float textHeight;
+    private boolean isProfile;
+    private boolean drawBrodcast;
+    private boolean drawPhoto;
+
+    public AvatarDrawable() {
+        super();
+
+        if (namePaint == null) {
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xffffffff);
+            namePaint.setTextSize(AndroidUtilities.dp(20));
+
+            broadcastDrawable = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.broadcast_w);
+        }
+    }
+
+    public AvatarDrawable(TLRPC.User user) {
+        this(user, false);
+    }
+
+    public AvatarDrawable(TLRPC.Chat chat) {
+        this(chat, false);
+    }
+
+    public AvatarDrawable(TLRPC.User user, boolean profile) {
+        this();
+        isProfile = profile;
+        if (user != null) {
+            setInfo(user.id, user.first_name, user.last_name, false);
+        }
+    }
+
+    public AvatarDrawable(TLRPC.Chat chat, boolean profile) {
+        this();
+        isProfile = profile;
+        if (chat != null) {
+            setInfo(chat.id, chat.title, null, chat.id < 0);
+        }
+    }
+
+    public static int getColorIndex(int id) {
+        if (id >= 0 && id < 8) {
+            return id;
+        }
+        try {
+            String str;
+            if (id >= 0) {
+                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
+            } else {
+                str = String.format(Locale.US, "%d", id);
+            }
+            if (str.length() > 15) {
+                str = str.substring(0, 15);
+            }
+            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
+            byte[] digest = md.digest(str.getBytes());
+            int b = digest[Math.abs(id % 16)];
+            if (b < 0) {
+                b += 256;
+            }
+            return Math.abs(b) % arrColors.length;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return id % arrColors.length;
+    }
+
+    public static int getColorForId(int id) {
+        return arrColors[getColorIndex(id)];
+    }
+
+    public static int getButtonColorForId(int id) {
+        return arrColorsButtons[getColorIndex(id)];
+    }
+
+    public static int getProfileColorForId(int id) {
+        return arrColorsProfiles[getColorIndex(id)];
+    }
+
+    public static int getProfileTextColorForId(int id) {
+        return arrColorsProfilesText[getColorIndex(id)];
+    }
+
+    public static int getProfileBackColorForId(int id) {
+        return arrColorsProfilesBack[getColorIndex(id)];
+    }
+
+    public void setInfo(TLRPC.User user) {
+        if (user != null) {
+            setInfo(user.id, user.first_name, user.last_name, false);
+        }
+    }
+
+    public void setInfo(TLRPC.Chat chat) {
+        if (chat != null) {
+            setInfo(chat.id, chat.title, null, chat.id < 0);
+        }
+    }
+
+    public void setColor(int value) {
+        color = value;
+    }
+
+    public void setInfo(int id, String firstName, String lastName, boolean isBroadcast) {
+        if (isProfile) {
+            color = arrColorsProfiles[getColorIndex(id)];
+        } else {
+            color = arrColors[getColorIndex(id)];
+        }
+
+        drawBrodcast = isBroadcast;
+
+        String text = "";
+        if (firstName != null && firstName.length() > 0) {
+            text += firstName.substring(0, 1);
+        }
+        if (lastName != null && lastName.length() > 0) {
+            text += lastName.substring(0, 1);
+        }
+        if (text.length() > 0) {
+            text = text.toUpperCase();
+            try {
+                textLayout = new StaticLayout(text, namePaint, AndroidUtilities.dp(100), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                if (textLayout.getLineCount() > 0) {
+                    textWidth = textLayout.getLineWidth(0);
+                    textHeight = textLayout.getLineBottom(0);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            textLayout = null;
+        }
+    }
+
+    public void setDrawPhoto(boolean value) {
+        if (value && photoDrawable == null) {
+            photoDrawable = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.photo_w);
+        }
+        drawPhoto = value;
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        Rect bounds = getBounds();
+        if (bounds == null) {
+            return;
+        }
+        int size = bounds.width();
+        paint.setColor(color);
+        canvas.save();
+        canvas.translate(bounds.left, bounds.top);
+        canvas.drawCircle(size / 2, size / 2, size / 2, paint);
+
+        if (drawBrodcast && broadcastDrawable != null) {
+            int x = (size - broadcastDrawable.getIntrinsicWidth()) / 2;
+            int y = (size - broadcastDrawable.getIntrinsicHeight()) / 2;
+            broadcastDrawable.setBounds(x, y, x + broadcastDrawable.getIntrinsicWidth(), y + broadcastDrawable.getIntrinsicHeight());
+            broadcastDrawable.draw(canvas);
+        } else {
+            if (textLayout != null) {
+                canvas.translate((size - textWidth) / 2, (size - textHeight) / 2);
+                textLayout.draw(canvas);
+            } else if (drawPhoto && photoDrawable != null) {
+                int x = (size - photoDrawable.getIntrinsicWidth()) / 2;
+                int y = (size - photoDrawable.getIntrinsicHeight()) / 2;
+                photoDrawable.setBounds(x, y, x + photoDrawable.getIntrinsicWidth(), y + photoDrawable.getIntrinsicHeight());
+                photoDrawable.draw(canvas);
+            }
+        }
+        canvas.restore();
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
index 1fe286753..c462cd51c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PhotoCropActivity;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.io.File;
 
@@ -120,7 +120,7 @@ private void processBitmap(Bitmap bitmap) {
             return;
         }
         smallPhoto = ImageLoader.scaleAndSaveImage(bitmap, 100, 100, 80, false);
-        bigPhoto = ImageLoader.scaleAndSaveImage(bitmap, 800, 800, 80, false);
+        bigPhoto = ImageLoader.scaleAndSaveImage(bitmap, 800, 800, 80, false, 320, 320);
         if (bigPhoto != null && smallPhoto != null) {
             if (returnOnly) {
                 if (delegate != null) {
@@ -146,7 +146,7 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
             String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
@@ -165,7 +165,7 @@ public void run() {
         } else if (id == NotificationCenter.FileDidFailUpload) {
             String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
index b584dcdaf..f311f94b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
@@ -42,32 +42,32 @@ private void init() {
         imageReceiver = new ImageReceiver(this);
     }
 
-    public void setImage(TLRPC.FileLocation path, String filter, int placeholder) {
+    public void setImage(TLRPC.FileLocation path, String filter, Drawable placeholder) {
         setImage(path, null, filter, placeholder, null, 0);
     }
 
     public void setImage(TLRPC.FileLocation path, String filter, Bitmap placeholderBitmap) {
-        setImage(path, null, filter, 0, placeholderBitmap, 0);
+        setImage(path, null, filter, null, placeholderBitmap, 0);
     }
 
-    public void setImage(TLRPC.FileLocation path, String filter, int placeholder, int size) {
+    public void setImage(TLRPC.FileLocation path, String filter, Drawable placeholder, int size) {
         setImage(path, null, filter, placeholder, null, size);
     }
 
     public void setImage(TLRPC.FileLocation path, String filter, Bitmap placeholderBitmap, int size) {
-        setImage(path, null, filter, 0, placeholderBitmap, size);
+        setImage(path, null, filter, null, placeholderBitmap, size);
     }
 
-    public void setImage(String path, String filter, int placeholder) {
+    public void setImage(String path, String filter, Drawable placeholder) {
         setImage(null, path, filter, placeholder, null, 0);
     }
 
-    public void setImage(TLRPC.FileLocation path, String httpUrl, String filter, int placeholder, Bitmap placeholderBitmap, int size) {
+    public void setImage(TLRPC.FileLocation path, String httpUrl, String filter, Drawable placeholder, Bitmap placeholderBitmap, int size) {
         Drawable placeholderDrawable = null;
         if (placeholderBitmap != null) {
             placeholderDrawable = new BitmapDrawable(null, placeholderBitmap);
-        } else if (placeholder != 0) {
-            placeholderDrawable = getResources().getDrawable(placeholder);
+        } else if (placeholder != null) {
+            placeholderDrawable = placeholder;
         }
         imageReceiver.setImage(path, httpUrl, filter, placeholderDrawable, size, false);
     }
@@ -80,6 +80,10 @@ public void setImageResource(int resId) {
         imageReceiver.setImageBitmap(getResources().getDrawable(resId));
     }
 
+    public void setImageDrawable(Drawable drawable) {
+        imageReceiver.setImageBitmap(drawable);
+    }
+
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
index 88ef289b6..fd0e60191 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
@@ -8,27 +8,23 @@
 
 package org.telegram.ui.Views;
 
-import android.animation.Animator;
-import android.animation.AnimatorListenerAdapter;
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.Rect;
-import android.os.Build;
 import android.os.PowerManager;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.text.style.ImageSpan;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.inputmethod.EditorInfo;
-import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageButton;
@@ -47,6 +43,10 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
 import org.telegram.ui.ApplicationLoader;
 
 public class ChatActivityEnterView implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
@@ -54,6 +54,8 @@
     public static interface ChatActivityEnterViewDelegate {
         public abstract void onMessageSend();
         public abstract void needSendTyping();
+        public abstract void onAttachButtonHidden();
+        public abstract void onAttachButtonShow();
     }
 
     private EditText messsageEditText;
@@ -65,24 +67,28 @@
     private ImageButton audioSendButton;
     private View recordPanel;
     private View slideText;
-    private PowerManager.WakeLock mWakeLock = null;
+    private PowerManager.WakeLock mWakeLock;
     private SizeNotifierRelativeLayout sizeNotifierRelativeLayout;
-    private Object runningAnimation = null;
-    private int runningAnimationType = 0;
-
-    private int keyboardHeight = 0;
-    private int keyboardHeightLand = 0;
+    private FrameLayout attachButton;
+    private AnimatorSetProxy runningAnimation;
+    private AnimatorSetProxy runningAnimation2;
+    private ObjectAnimatorProxy runningAnimationAudio;
+    private int runningAnimationType;
+    private int audioInterfaceState;
+
+    private int keyboardHeight;
+    private int keyboardHeightLand;
     private boolean keyboardVisible;
-    private boolean sendByEnter = false;
-    private long lastTypingTimeSend = 0;
-    private String lastTimeString = null;
+    private boolean sendByEnter;
+    private long lastTypingTimeSend;
+    private String lastTimeString;
     private float startedDraggingX = -1;
     private float distCanMove = AndroidUtilities.dp(80);
-    private boolean recordingAudio = false;
+    private boolean recordingAudio;
 
     private Activity parentActivity;
     private long dialog_id;
-    private boolean ignoreTextChange = false;
+    private boolean ignoreTextChange;
     private ChatActivityEnterViewDelegate delegate;
 
     public ChatActivityEnterView() {
@@ -123,20 +129,28 @@ public void onDestroy() {
     public void setContainerView(Activity activity, View containerView) {
         parentActivity = activity;
 
-        sizeNotifierRelativeLayout = (SizeNotifierRelativeLayout)containerView.findViewById(R.id.chat_layout);
+        sizeNotifierRelativeLayout = (SizeNotifierRelativeLayout) containerView.findViewById(R.id.chat_layout);
         sizeNotifierRelativeLayout.delegate = this;
 
-        messsageEditText = (EditText)containerView.findViewById(R.id.chat_text_edit);
+        messsageEditText = (EditText) containerView.findViewById(R.id.chat_text_edit);
         messsageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
 
-        sendButton = (ImageButton)containerView.findViewById(R.id.chat_send_button);
+        attachButton = (FrameLayout) containerView.findViewById(R.id.chat_attach_button);
+        if (attachButton != null) {
+            ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(48));
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+            layoutParams.rightMargin = AndroidUtilities.dp(50);
+            messsageEditText.setLayoutParams(layoutParams);
+        }
+
+        sendButton = (ImageButton) containerView.findViewById(R.id.chat_send_button);
         sendButton.setVisibility(View.INVISIBLE);
-        emojiButton = (ImageView)containerView.findViewById(R.id.chat_smile_button);
-        audioSendButton = (ImageButton)containerView.findViewById(R.id.chat_audio_send_button);
+        emojiButton = (ImageView) containerView.findViewById(R.id.chat_smile_button);
+        audioSendButton = (ImageButton) containerView.findViewById(R.id.chat_audio_send_button);
         recordPanel = containerView.findViewById(R.id.record_panel);
-        recordTimeText = (TextView)containerView.findViewById(R.id.recording_time_text);
+        recordTimeText = (TextView) containerView.findViewById(R.id.recording_time_text);
         slideText = containerView.findViewById(R.id.slideText);
-        TextView textView = (TextView)containerView.findViewById(R.id.slideToCancelTextView);
+        TextView textView = (TextView) containerView.findViewById(R.id.slideToCancelTextView);
         textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
 
         emojiButton.setOnClickListener(new View.OnClickListener() {
@@ -218,38 +232,37 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                         recordingAudio = false;
                         updateAudioRecordIntefrace();
                     }
-                    if(android.os.Build.VERSION.SDK_INT > 13) {
-                        x = x + audioSendButton.getX();
-                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
-                        if (startedDraggingX != -1) {
-                            float dist = (x - startedDraggingX);
-                            params.leftMargin = AndroidUtilities.dp(30) + (int)dist;
-                            slideText.setLayoutParams(params);
-                            float alpha = 1.0f + dist / distCanMove;
-                            if (alpha > 1) {
-                                alpha = 1;
-                            } else if (alpha < 0) {
-                                alpha = 0;
-                            }
-                            slideText.setAlpha(alpha);
+
+                    x = x + ViewProxy.getX(audioSendButton);
+                    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
+                    if (startedDraggingX != -1) {
+                        float dist = (x - startedDraggingX);
+                        params.leftMargin = AndroidUtilities.dp(30) + (int) dist;
+                        slideText.setLayoutParams(params);
+                        float alpha = 1.0f + dist / distCanMove;
+                        if (alpha > 1) {
+                            alpha = 1;
+                        } else if (alpha < 0) {
+                            alpha = 0;
                         }
-                        if (x <= slideText.getX() + slideText.getWidth() + AndroidUtilities.dp(30)) {
-                            if (startedDraggingX == -1) {
-                                startedDraggingX = x;
-                                distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
-                                if (distCanMove <= 0) {
-                                    distCanMove = AndroidUtilities.dp(80);
-                                } else if (distCanMove > AndroidUtilities.dp(80)) {
-                                    distCanMove = AndroidUtilities.dp(80);
-                                }
+                        ViewProxy.setAlpha(slideText, alpha);
+                    }
+                    if (x <= ViewProxy.getX(slideText) + slideText.getWidth() + AndroidUtilities.dp(30)) {
+                        if (startedDraggingX == -1) {
+                            startedDraggingX = x;
+                            distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
+                            if (distCanMove <= 0) {
+                                distCanMove = AndroidUtilities.dp(80);
+                            } else if (distCanMove > AndroidUtilities.dp(80)) {
+                                distCanMove = AndroidUtilities.dp(80);
                             }
                         }
-                        if (params.leftMargin > AndroidUtilities.dp(30)) {
-                            params.leftMargin = AndroidUtilities.dp(30);
-                            slideText.setLayoutParams(params);
-                            slideText.setAlpha(1);
-                            startedDraggingX = -1;
-                        }
+                    }
+                    if (params.leftMargin > AndroidUtilities.dp(30)) {
+                        params.leftMargin = AndroidUtilities.dp(30);
+                        slideText.setLayoutParams(params);
+                        ViewProxy.setAlpha(slideText, 1);
+                        startedDraggingX = -1;
                     }
                 }
                 view.onTouchEvent(motionEvent);
@@ -280,8 +293,8 @@ public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                 if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
                     int currentTime = ConnectionsManager.getInstance().getCurrentTime();
                     TLRPC.User currentUser = null;
-                    if ((int)dialog_id > 0) {
-                        currentUser = MessagesController.getInstance().getUser((int)dialog_id);
+                    if ((int) dialog_id > 0) {
+                        currentUser = MessagesController.getInstance().getUser((int) dialog_id);
                     }
                     if (currentUser != null && currentUser.status != null && currentUser.status.expires < currentTime) {
                         return;
@@ -328,7 +341,7 @@ private void sendMessage() {
     public boolean processSendingText(String text) {
         text = getTrimmedString(text);
         if (text.length() != 0) {
-            int count = (int)Math.ceil(text.length() / 4096.0f);
+            int count = (int) Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
                 String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
                 SendMessagesHelper.getInstance().sendMessage(mess, dialog_id);
@@ -352,112 +365,180 @@ private String getTrimmedString(String src) {
         return src;
     }
 
-    private void checkSendButton(boolean animated) {
+    private void checkSendButton(final boolean animated) {
         String message = getTrimmedString(messsageEditText.getText().toString());
         if (message.length() > 0) {
             if (audioSendButton.getVisibility() == View.VISIBLE) {
-                if (Build.VERSION.SDK_INT >= 11 && animated) {
+                if (animated) {
                     if (runningAnimationType == 1) {
                         return;
                     }
                     if (runningAnimation != null) {
-                        ((AnimatorSet)runningAnimation).cancel();
+                        runningAnimation.cancel();
                         runningAnimation = null;
                     }
+                    if (runningAnimation2 != null) {
+                        runningAnimation2.cancel();
+                        runningAnimation2 = null;
+                    }
+
+                    if (attachButton != null) {
+                        runningAnimation2 = new AnimatorSetProxy();
+                        runningAnimation2.playTogether(
+                                ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 0.0f),
+                                ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 0.0f)
+                        );
+                        runningAnimation2.setDuration(100);
+                        runningAnimation2.addListener(new AnimatorListenerAdapterProxy() {
+                            @Override
+                            public void onAnimationEnd(Object animation) {
+                                if (runningAnimation2.equals(animation)) {
+                                    attachButton.setVisibility(View.GONE);
+                                    attachButton.clearAnimation();
+                                }
+                            }
+                        });
+                        runningAnimation2.start();
+
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                        layoutParams.rightMargin = AndroidUtilities.dp(0);
+                        messsageEditText.setLayoutParams(layoutParams);
+
+                        delegate.onAttachButtonHidden();
+                    }
 
                     sendButton.setVisibility(View.VISIBLE);
-                    AnimatorSet animatorSet = new AnimatorSet();
-                    runningAnimation = animatorSet;
+                    runningAnimation = new AnimatorSetProxy();
                     runningAnimationType = 1;
-                    animatorSet.playTogether(
-                            ObjectAnimator.ofFloat(audioSendButton, "scaleX", 0.1f),
-                            ObjectAnimator.ofFloat(audioSendButton, "scaleY", 0.1f),
-                            ObjectAnimator.ofFloat(audioSendButton, "alpha", 0.0f),
-                            ObjectAnimator.ofFloat(sendButton, "scaleX", 1.0f),
-                            ObjectAnimator.ofFloat(sendButton, "scaleY", 1.0f),
-                            ObjectAnimator.ofFloat(sendButton, "alpha", 1.0f)
+
+                    runningAnimation.playTogether(
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 0.1f),
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 0.1f),
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 0.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 1.0f)
                     );
 
-                    animatorSet.setDuration(200);
-                    animatorSet.addListener(new AnimatorListenerAdapter() {
+                    runningAnimation.setDuration(150);
+                    runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
                         @Override
-                        public void onAnimationEnd(Animator animation) {
-                            if (animation == runningAnimation) {
+                        public void onAnimationEnd(Object animation) {
+                            if (runningAnimation.equals(animation)) {
                                 sendButton.setVisibility(View.VISIBLE);
-                                audioSendButton.setVisibility(View.INVISIBLE);
+                                audioSendButton.setVisibility(View.GONE);
+                                audioSendButton.clearAnimation();
                                 runningAnimation = null;
                                 runningAnimationType = 0;
                             }
                         }
                     });
-                    animatorSet.start();
+                    runningAnimation.start();
                 } else {
-                    if (Build.VERSION.SDK_INT >= 11) {
-                        audioSendButton.setScaleX(0.1f);
-                        audioSendButton.setScaleY(0.1f);
-                        audioSendButton.setAlpha(0.0f);
-                        sendButton.setScaleX(1.0f);
-                        sendButton.setScaleY(1.0f);
-                        sendButton.setAlpha(1.0f);
-                    }
+                    ViewProxy.setScaleX(audioSendButton, 0.1f);
+                    ViewProxy.setScaleY(audioSendButton, 0.1f);
+                    ViewProxy.setAlpha(audioSendButton, 0.0f);
+                    ViewProxy.setScaleX(sendButton, 1.0f);
+                    ViewProxy.setScaleY(sendButton, 1.0f);
+                    ViewProxy.setAlpha(sendButton, 1.0f);
                     sendButton.setVisibility(View.VISIBLE);
-                    audioSendButton.setVisibility(View.INVISIBLE);
+                    audioSendButton.setVisibility(View.GONE);
+                    audioSendButton.clearAnimation();
+                    if (attachButton != null) {
+                        attachButton.setVisibility(View.GONE);
+                        attachButton.clearAnimation();
+
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                        layoutParams.rightMargin = AndroidUtilities.dp(0);
+                        messsageEditText.setLayoutParams(layoutParams);
+                    }
                 }
             }
         } else if (sendButton.getVisibility() == View.VISIBLE) {
-            if (Build.VERSION.SDK_INT >= 11 && animated) {
+            if (animated) {
                 if (runningAnimationType == 2) {
                     return;
                 }
 
                 if (runningAnimation != null) {
-                    ((AnimatorSet)runningAnimation).cancel();
+                    runningAnimation.cancel();
                     runningAnimation = null;
                 }
+                if (runningAnimation2 != null) {
+                    runningAnimation2.cancel();
+                    runningAnimation2 = null;
+                }
+
+                if (attachButton != null) {
+                    attachButton.setVisibility(View.VISIBLE);
+                    runningAnimation2 = new AnimatorSetProxy();
+                    runningAnimation2.playTogether(
+                            ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 1.0f)
+                    );
+                    runningAnimation2.setDuration(100);
+                    runningAnimation2.start();
+
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                    layoutParams.rightMargin = AndroidUtilities.dp(50);
+                    messsageEditText.setLayoutParams(layoutParams);
+
+                    delegate.onAttachButtonShow();
+                }
 
                 audioSendButton.setVisibility(View.VISIBLE);
-                AnimatorSet animatorSet = new AnimatorSet();
-                runningAnimation = animatorSet;
+                runningAnimation = new AnimatorSetProxy();
                 runningAnimationType = 2;
-                animatorSet.playTogether(
-                        ObjectAnimator.ofFloat(sendButton, "scaleX", 0.1f),
-                        ObjectAnimator.ofFloat(sendButton, "scaleY", 0.1f),
-                        ObjectAnimator.ofFloat(sendButton, "alpha", 0.0f),
-                        ObjectAnimator.ofFloat(audioSendButton, "scaleX", 1.0f),
-                        ObjectAnimator.ofFloat(audioSendButton, "scaleY", 1.0f),
-                        ObjectAnimator.ofFloat(audioSendButton, "alpha", 1.0f)
+
+                runningAnimation.playTogether(
+                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f),
+                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f),
+                        ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 1.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 1.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 1.0f)
                 );
 
-                animatorSet.setDuration(200);
-                animatorSet.addListener(new AnimatorListenerAdapter() {
+                runningAnimation.setDuration(150);
+                runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
                     @Override
-                    public void onAnimationEnd(Animator animation) {
-                        if (animation == runningAnimation) {
-                            sendButton.setVisibility(View.INVISIBLE);
+                    public void onAnimationEnd(Object animation) {
+                        if (runningAnimation.equals(animation)) {
+                            sendButton.setVisibility(View.GONE);
+                            sendButton.clearAnimation();
                             audioSendButton.setVisibility(View.VISIBLE);
                             runningAnimation = null;
                             runningAnimationType = 0;
                         }
                     }
                 });
-                animatorSet.start();
+                runningAnimation.start();
             } else {
-                if (Build.VERSION.SDK_INT >= 11) {
-                    sendButton.setScaleX(0.1f);
-                    sendButton.setScaleY(0.1f);
-                    sendButton.setAlpha(0.0f);
-                    audioSendButton.setScaleX(1.0f);
-                    audioSendButton.setScaleY(1.0f);
-                    audioSendButton.setAlpha(1.0f);
-                }
-                sendButton.setVisibility(View.INVISIBLE);
+                ViewProxy.setScaleX(sendButton, 0.1f);
+                ViewProxy.setScaleY(sendButton, 0.1f);
+                ViewProxy.setAlpha(sendButton, 0.0f);
+                ViewProxy.setScaleX(audioSendButton, 1.0f);
+                ViewProxy.setScaleY(audioSendButton, 1.0f);
+                ViewProxy.setAlpha(audioSendButton, 1.0f);
+                sendButton.setVisibility(View.GONE);
+                sendButton.clearAnimation();
                 audioSendButton.setVisibility(View.VISIBLE);
+                if (attachButton != null) {
+                    attachButton.setVisibility(View.VISIBLE);
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                    layoutParams.rightMargin = AndroidUtilities.dp(50);
+                    messsageEditText.setLayoutParams(layoutParams);
+                }
             }
         }
     }
 
     private void updateAudioRecordIntefrace() {
         if (recordingAudio) {
+            if (audioInterfaceState == 1) {
+                return;
+            }
+            audioInterfaceState = 1;
             try {
                 if (mWakeLock == null) {
                     PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
@@ -472,31 +553,26 @@ private void updateAudioRecordIntefrace() {
             recordPanel.setVisibility(View.VISIBLE);
             recordTimeText.setText("00:00");
             lastTimeString = null;
-            if(android.os.Build.VERSION.SDK_INT > 13) {
-                FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
-                params.leftMargin = AndroidUtilities.dp(30);
-                slideText.setLayoutParams(params);
-                slideText.setAlpha(1);
-                recordPanel.setX(AndroidUtilities.displaySize.x);
-                recordPanel.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
-                    @Override
-                    public void onAnimationStart(Animator animator) {
-                    }
 
-                    @Override
-                    public void onAnimationEnd(Animator animator) {
-                        recordPanel.setX(0);
+            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
+            params.leftMargin = AndroidUtilities.dp(30);
+            slideText.setLayoutParams(params);
+            ViewProxy.setAlpha(slideText, 1);
+            ViewProxy.setX(recordPanel, AndroidUtilities.displaySize.x);
+            if (runningAnimationAudio != null) {
+                runningAnimationAudio.cancel();
+            }
+            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", 0).setDuration(300);
+            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animator) {
+                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
+                        ViewProxy.setX(recordPanel, 0);
                     }
-
-                    @Override
-                    public void onAnimationCancel(Animator animator) {
-                    }
-
-                    @Override
-                    public void onAnimationRepeat(Animator animator) {
-                    }
-                }).setDuration(300).translationX(0).start();
-            }
+                }
+            });
+            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
+            runningAnimationAudio.start();
         } else {
             if (mWakeLock != null) {
                 try {
@@ -507,38 +583,33 @@ public void onAnimationRepeat(Animator animator) {
                 }
             }
             AndroidUtilities.unlockOrientation(parentActivity);
-            if(android.os.Build.VERSION.SDK_INT > 13) {
-                recordPanel.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
-                    @Override
-                    public void onAnimationStart(Animator animator) {
-
-                    }
+            if (audioInterfaceState == 0) {
+                return;
+            }
+            audioInterfaceState = 0;
 
-                    @Override
-                    public void onAnimationEnd(Animator animator) {
-                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
+            if (runningAnimationAudio != null) {
+                runningAnimationAudio.cancel();
+            }
+            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", AndroidUtilities.displaySize.x).setDuration(300);
+            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animator) {
+                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
+                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
                         params.leftMargin = AndroidUtilities.dp(30);
                         slideText.setLayoutParams(params);
-                        slideText.setAlpha(1);
+                        ViewProxy.setAlpha(slideText, 1);
                         recordPanel.setVisibility(View.GONE);
                     }
-
-                    @Override
-                    public void onAnimationCancel(Animator animator) {
-                    }
-
-                    @Override
-                    public void onAnimationRepeat(Animator animator) {
-                    }
-                }).setDuration(300).translationX(AndroidUtilities.displaySize.x).start();
-            } else {
-                recordPanel.setVisibility(View.GONE);
-            }
+                }
+            });
+            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
+            runningAnimationAudio.start();
         }
     }
 
     private void showEmojiPopup(boolean show) {
-        InputMethodManager localInputMethodManager = (InputMethodManager)ApplicationLoader.applicationContext.getSystemService(Context.INPUT_METHOD_SERVICE);
         if (show) {
             if (emojiPopup == null) {
                 createEmojiPopup();
@@ -562,7 +633,7 @@ private void showEmojiPopup(boolean show) {
                 emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
             }
 
-            emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), 83, 0, 0);
+            emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.LEFT, 0, 0);
             if (!keyboardVisible) {
                 if (sizeNotifierRelativeLayout != null) {
                     sizeNotifierRelativeLayout.setPadding(0, 0, 0, currentHeight);
@@ -633,6 +704,9 @@ public void setDialogId(long id) {
     }
 
     public void setFieldText(String text) {
+        if (messsageEditText == null) {
+            return;
+        }
         ignoreTextChange = true;
         messsageEditText.setText(text);
         messsageEditText.setSelection(messsageEditText.getText().length());
@@ -680,6 +754,22 @@ public boolean isEmojiPopupShowing() {
         return emojiPopup != null && emojiPopup.isShowing();
     }
 
+    public void addToAttachLayout(View view) {
+        if (attachButton == null) {
+            return;
+        }
+        if (view.getParent() != null) {
+            ViewGroup viewGroup = (ViewGroup) view.getParent();
+            viewGroup.removeView(view);
+        }
+        attachButton.addView(view);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
+        layoutParams.gravity = Gravity.CENTER;
+        layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        view.setLayoutParams(layoutParams);
+    }
+
     @Override
     public void onSizeChanged(int height) {
         Rect localRect = new Rect();
@@ -708,7 +798,7 @@ public void onSizeChanged(int height) {
             } else {
                 newHeight = keyboardHeight;
             }
-            final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams)emojiPopup.getContentView().getLayoutParams();
+            final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams) emojiPopup.getContentView().getLayoutParams();
             if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
                 WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
                 layoutParams.width = AndroidUtilities.displaySize.x;
@@ -744,7 +834,7 @@ public void didReceivedNotification(int id, Object... args) {
                 emojiView.invalidateViews();
             }
         } else if (id == NotificationCenter.recordProgressChanged) {
-            Long time = (Long)args[0] / 1000;
+            Long time = (Long) args[0] / 1000;
             String str = String.format("%02d:%02d", time / 60, time % 60);
             if (lastTimeString == null || !lastTimeString.equals(str)) {
                 if (recordTimeText != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/CheckBox.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/CheckBox.java
new file mode 100644
index 000000000..c407daac5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/CheckBox.java
@@ -0,0 +1,58 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.widget.CompoundButton;
+
+import org.telegram.messenger.R;
+
+public class CheckBox extends CompoundButton {
+
+    private Paint paint;
+    private Drawable checkDrawable;
+
+    public CheckBox(Context context) {
+        super(context);
+
+        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        paint.setColor(0xff5ec245);
+
+        checkDrawable = context.getResources().getDrawable(R.drawable.round_check2);
+    }
+
+    @Override
+    public void setChecked(boolean checked) {
+        super.setChecked(checked);
+
+        checked = isChecked();
+        invalidate();
+
+        /*if (attachedToWindow && wasLayout) {
+            animateThumbToCheckedState(checked);
+        } else {
+            cancelPositionAnimator();
+            setThumbPosition(checked ? 1 : 0);
+        }*/
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (isChecked()) {
+            canvas.drawCircle(getMeasuredWidth() / 2, getMeasuredHeight() / 2, getMeasuredWidth() / 2, paint);
+            int x = (getMeasuredWidth() - checkDrawable.getIntrinsicWidth()) / 2;
+            int y = (getMeasuredHeight() - checkDrawable.getIntrinsicHeight()) / 2;
+            checkDrawable.setBounds(x, y, x + checkDrawable.getIntrinsicWidth(), y + checkDrawable.getIntrinsicHeight());
+            checkDrawable.draw(canvas);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java
index 543272ba2..e3243f9e5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java
@@ -10,12 +10,17 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
 import android.view.View;
 
 import org.telegram.messenger.FileLog;
+import org.telegram.ui.AnimationCompat.ViewProxy;
 
 public class ClippingImageView extends View {
     private int clipBottom;
@@ -27,6 +32,14 @@
     private Bitmap bmp;
     private onDrawListener drawListener;
 
+    private boolean needRadius;
+    private int radius;
+    private BitmapShader bitmapShader;
+    private Paint roundPaint;
+    private RectF roundRect;
+    private RectF bitmapRect;
+    private Matrix shaderMatrix;
+
     public static interface onDrawListener {
         public abstract void onDraw();
     }
@@ -58,18 +71,34 @@ public int getClipTop() {
         return clipTop;
     }
 
+    public int getRadius() {
+        return radius;
+    }
+
     public void onDraw(Canvas canvas) {
+        if (getVisibility() == GONE || getVisibility() == INVISIBLE) {
+            return;
+        }
         if (bmp != null) {
-            if (drawListener != null && getScaleY() != 1) {
+            float scaleY = ViewProxy.getScaleY(this);
+            if (drawListener != null && scaleY != 1) {
                 drawListener.onDraw();
             }
             canvas.save();
-            canvas.clipRect(clipLeft / getScaleY(), clipTop / getScaleY(), getWidth() - clipRight / getScaleY(), getHeight() - clipBottom / getScaleY());
-            drawRect.set(0, 0, getWidth(), getHeight());
-            try {
-                canvas.drawBitmap(this.bmp, null, drawRect, this.paint);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
+            if (needRadius) {
+                roundRect.set(0, 0, getWidth(), getHeight());
+                shaderMatrix.reset();
+                shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                bitmapShader.setLocalMatrix(shaderMatrix);
+                canvas.drawRoundRect(roundRect, radius, radius, roundPaint);
+            } else {
+                canvas.clipRect(clipLeft / scaleY, clipTop / scaleY, getWidth() - clipRight / scaleY, getHeight() - clipBottom / scaleY);
+                drawRect.set(0, 0, getWidth(), getHeight());
+                try {
+                    canvas.drawBitmap(bmp, null, drawRect, paint);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
             }
             canvas.restore();
         }
@@ -109,10 +138,27 @@ public void setClipVertical(int value) {
 
     public void setImageBitmap(Bitmap bitmap) {
         bmp = bitmap;
+        if (bitmap != null && needRadius) {
+            roundRect = new RectF();
+            shaderMatrix = new Matrix();
+            bitmapRect = new RectF();
+            bitmapRect.set(0, 0, bitmap.getWidth(), bitmap.getHeight());
+            bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+            roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            roundPaint.setShader(bitmapShader);
+        }
         invalidate();
     }
 
     public void setOnDrawListener(onDrawListener listener) {
         drawListener = listener;
     }
+
+    public void setNeedRadius(boolean value) {
+        needRadius = value;
+    }
+
+    public void setRadius(int value) {
+        radius = value;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
index 3f84540a1..d0944e9bf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
@@ -10,7 +10,6 @@
 
 import android.content.Context;
 import android.database.DataSetObserver;
-import android.graphics.drawable.GradientDrawable;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.text.TextUtils;
@@ -114,18 +113,19 @@ private void init() {
 
             EmojiGridAdapter localEmojiGridAdapter = new EmojiGridAdapter(Emoji.data[i]);
             gridView.setAdapter(localEmojiGridAdapter);
+            AndroidUtilities.setListViewEdgeEffectColor(gridView, 0xff999999);
             adapters.add(localEmojiGridAdapter);
         }
 
-        setBackgroundDrawable(new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { 0xFFD0D0D0, 0xFFD0D0D0 }));
+        setBackgroundColor(0xffd0d0d0);
         pager = new ViewPager(getContext());
         pager.setAdapter(new EmojiPagesAdapter());
         PagerSlidingTabStrip tabs = new PagerSlidingTabStrip(getContext());
         tabs.setViewPager(pager);
         tabs.setShouldExpand(true);
         tabs.setIndicatorColor(0xff33b5e5);
-        tabs.setIndicatorHeight(AndroidUtilities.dpf(2.0f));
-        tabs.setUnderlineHeight(AndroidUtilities.dpf(2.0f));
+        tabs.setIndicatorHeight(AndroidUtilities.dp(2.0f));
+        tabs.setUnderlineHeight(AndroidUtilities.dp(2.0f));
         tabs.setUnderlineColor(0x66000000);
         tabs.setTabBackground(0);
         LinearLayout localLinearLayout = new LinearLayout(getContext());
@@ -152,7 +152,7 @@ public void onClick(View view) {
         localTextView.setGravity(17);
         recentsWrap.addView(localTextView);
         views.get(0).setEmptyView(localTextView);
-        addView(localLinearLayout, new LinearLayout.LayoutParams(-1, AndroidUtilities.dpf(48.0f)));
+        addView(localLinearLayout, new LinearLayout.LayoutParams(-1, AndroidUtilities.dp(48.0f)));
         addView(pager);
         loadRecents();
         if (Emoji.data[0] == null || Emoji.data[0].length == 0) {
@@ -258,33 +258,30 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
 
     private class EmojiPagesAdapter extends PagerAdapter implements PagerSlidingTabStrip.IconTabProvider {
 
-        private EmojiPagesAdapter() {
-        }
-
         public void destroyItem(ViewGroup paramViewGroup, int paramInt, Object paramObject) {
             View localObject;
             if (paramInt == 0) {
-                localObject = EmojiView.this.recentsWrap;
+                localObject = recentsWrap;
             } else {
-                localObject = EmojiView.this.views.get(paramInt);
+                localObject = views.get(paramInt);
             }
             paramViewGroup.removeView(localObject);
         }
 
         public int getCount() {
-            return EmojiView.this.views.size();
+            return views.size();
         }
 
         public int getPageIconResId(int paramInt) {
-            return EmojiView.this.icons[paramInt];
+            return icons[paramInt];
         }
 
         public Object instantiateItem(ViewGroup paramViewGroup, int paramInt) {
             View localObject;
             if (paramInt == 0) {
-                localObject = EmojiView.this.recentsWrap;
+                localObject = recentsWrap;
             } else {
-                localObject = EmojiView.this.views.get(paramInt);
+                localObject = views.get(paramInt);
             }
             paramViewGroup.addView(localObject);
             return localObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonDrawable.java
similarity index 63%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonDrawable.java
index 52e18d260..6ceba01c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonDrawable.java
@@ -1,22 +1,22 @@
 /*
- * This is the source code of Telegram for Android v. 1.3.2.
+ * This is the source code of Telegram for Android v. 1.7.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013.
+ * Copyright Nikolai Kudashov, 2013-2014.
  */
 
 package org.telegram.ui.Views;
 
-import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.ColorFilter;
 import android.graphics.Paint;
-import android.util.AttributeSet;
-import android.view.View;
+import android.graphics.drawable.Drawable;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.Utilities;
 
-public class IdenticonView extends View {
+public class IdenticonDrawable extends Drawable {
     private byte[] data;
     private Paint paint = new Paint();
     private int colors[] = {
@@ -26,18 +26,6 @@
             0xff2f99c9
     };
 
-    public IdenticonView(Context context) {
-        super(context);
-    }
-
-    public IdenticonView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public IdenticonView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
     int get_bits(int bitOffset, int numBits) {
         numBits = (int)Math.pow(2, numBits) - 1;
         int offset = bitOffset / 8;
@@ -56,20 +44,19 @@ public void setBytes(byte[] bytes) {
             System.arraycopy(data, 0, temp, 0, data.length);
             data = temp;
         }
-        invalidate();
+        invalidateSelf();
     }
 
     @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
+    public void draw(Canvas canvas) {
         if (data == null) {
             return;
         }
 
         int bitPointer = 0;
-        float rectSize = (float)Math.floor(Math.min(getWidth(), getHeight()) / 8.0f);
-        float xOffset = Math.max(0, (getWidth() - rectSize * 8) / 2);
-        float yOffset = Math.max(0, (getHeight() - rectSize * 8) / 2);
+        float rectSize = (float)Math.floor(Math.min(getBounds().width(), getBounds().height()) / 8.0f);
+        float xOffset = Math.max(0, (getBounds().width() - rectSize * 8) / 2);
+        float yOffset = Math.max(0, (getBounds().height() - rectSize * 8) / 2);
         for (int iy = 0; iy < 8; iy++) {
             for (int ix = 0; ix < 8; ix++) {
                 int byteValue = get_bits(bitPointer, 2);
@@ -80,4 +67,29 @@ protected void onDraw(Canvas canvas) {
             }
         }
     }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return AndroidUtilities.dp(32);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return AndroidUtilities.dp(32);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/PagerSlidingTabStrip.java
index 42b79cfbc..e3ab3e1c9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/PagerSlidingTabStrip.java
@@ -55,11 +55,9 @@
     private float currentPositionOffset = 0f;
 
     private Paint rectPaint;
-    private Paint dividerPaint;
 
     private int indicatorColor = 0xFF666666;
     private int underlineColor = 0x1A000000;
-    private int dividerColor = 0x1A000000;
 
     private boolean shouldExpand = false;
     private boolean textAllCaps = true;
@@ -69,7 +67,6 @@
     private int underlineHeight = 2;
     private int dividerPadding = 12;
     private int tabPadding = 24;
-    private int dividerWidth = 1;
 
     private int tabTextSize = 12;
     private int tabTextColor = 0xFF666666;
@@ -108,17 +105,12 @@ public PagerSlidingTabStrip(Context context, AttributeSet attrs, int defStyle) {
         underlineHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, underlineHeight, dm);
         dividerPadding = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dividerPadding, dm);
         tabPadding = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, tabPadding, dm);
-        dividerWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dividerWidth, dm);
         tabTextSize = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, tabTextSize, dm);
 
         rectPaint = new Paint();
         rectPaint.setAntiAlias(true);
         rectPaint.setStyle(Style.FILL);
 
-        dividerPaint = new Paint();
-        dividerPaint.setAntiAlias(true);
-        dividerPaint.setStrokeWidth(dividerWidth);
-
         defaultTabLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
 
         if (locale == null) {
@@ -322,14 +314,6 @@ protected void onDraw(Canvas canvas) {
 
         rectPaint.setColor(underlineColor);
         canvas.drawRect(0, height - underlineHeight, tabsContainer.getWidth(), height, rectPaint);
-
-        // draw divider
-
-        dividerPaint.setColor(dividerColor);
-        for (int i = 0; i < tabCount - 1; i++) {
-            View tab = tabsContainer.getChildAt(i);
-            canvas.drawLine(tab.getRight(), dividerPadding, tab.getRight(), height - dividerPadding, dividerPaint);
-        }
     }
 
     private class PageListener implements OnPageChangeListener {
@@ -419,20 +403,6 @@ public int getUnderlineColor() {
         return underlineColor;
     }
 
-    public void setDividerColor(int dividerColor) {
-        this.dividerColor = dividerColor;
-        invalidate();
-    }
-
-    public void setDividerColorResource(int resId) {
-        this.dividerColor = getResources().getColor(resId);
-        invalidate();
-    }
-
-    public int getDividerColor() {
-        return dividerColor;
-    }
-
     public void setUnderlineHeight(int underlineHeightPx) {
         this.underlineHeight = underlineHeightPx;
         invalidate();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java
deleted file mode 100755
index 6d31c0b40..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/PinnedHeaderListView.java
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Views;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.util.AttributeSet;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import android.widget.AbsListView.OnScrollListener;
-
-import org.telegram.messenger.FileLog;
-
-public class PinnedHeaderListView extends ListView implements OnScrollListener, View.OnTouchListener {
-
-    private OnScrollListener mOnScrollListener;
-
-    public static interface PinnedSectionedHeaderAdapter {
-        public boolean isSectionHeader(int position);
-
-        public int getSectionForPosition(int position);
-
-        public View getSectionHeaderView(int section, View convertView, ViewGroup parent);
-
-        public int getSectionHeaderViewType(int section);
-
-        public int getCount();
-
-    }
-
-    private PinnedSectionedHeaderAdapter mAdapter;
-    private OnTouchListener mForwardingTouchListener = null;
-    private float mLastUpEventY = -1;
-    private View mCurrentHeader;
-    private int mCurrentHeaderViewType = 0;
-    private float mHeaderOffset;
-    private boolean mShouldPin = true;
-    private int mCurrentSection = 0;
-    private int mWidthMode;
-    public int exHeaderRightPadding = 0;
-
-    public PinnedHeaderListView(Context context) {
-        super(context);
-        super.setOnScrollListener(this);
-        super.setOnTouchListener(this);
-    }
-
-    public PinnedHeaderListView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        super.setOnScrollListener(this);
-        super.setOnTouchListener(this);
-    }
-
-    public PinnedHeaderListView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        super.setOnScrollListener(this);
-        super.setOnTouchListener(this);
-    }
-
-    public void setPinHeaders(boolean shouldPin) {
-        mShouldPin = shouldPin;
-    }
-
-    @Override
-    public void setAdapter(ListAdapter adapter) {
-        if (mAdapter == adapter) {
-            return;
-        }
-        mCurrentHeader = null;
-        if (adapter instanceof PinnedSectionedHeaderAdapter) {
-            mAdapter = (PinnedSectionedHeaderAdapter) adapter;
-        } else {
-            mAdapter = null;
-        }
-        super.setAdapter(adapter);
-    }
-
-    @Override
-    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
-        }
-        if (mAdapter == null) {
-            return;
-        }
-
-        if (mAdapter.getCount() == 0 || !mShouldPin || (firstVisibleItem < getHeaderViewsCount())) {
-            mCurrentHeader = null;
-            mHeaderOffset = 0.0f;
-            for (int i = firstVisibleItem; i < firstVisibleItem + visibleItemCount; i++) {
-                View header = getChildAt(i);
-                if (header != null) {
-                    header.setVisibility(VISIBLE);
-                }
-            }
-            return;
-        }
-
-        firstVisibleItem -= getHeaderViewsCount();
-
-        int section = mAdapter.getSectionForPosition(firstVisibleItem);
-        int viewType = mAdapter.getSectionHeaderViewType(section);
-        mCurrentHeader = getSectionHeaderView(section, mCurrentHeaderViewType != viewType ? null : mCurrentHeader);
-        if (mCurrentHeader != null && mCurrentHeader.getPaddingLeft() != getPaddingLeft()) {
-            mCurrentHeader.setPadding(getPaddingLeft(), mCurrentHeader.getPaddingTop(), getPaddingRight() + (int)(getResources().getDisplayMetrics().density * exHeaderRightPadding), 0);
-        }
-        ensurePinnedHeaderLayout(mCurrentHeader, false);
-        mCurrentHeaderViewType = viewType;
-
-        mHeaderOffset = 0.0f;
-
-        for (int i = firstVisibleItem; i < firstVisibleItem + visibleItemCount; i++) {
-            if (mAdapter.isSectionHeader(i)) {
-                View header = getChildAt(i - firstVisibleItem);
-                float headerTop = header.getTop();
-                float pinnedHeaderHeight = mCurrentHeader.getMeasuredHeight();
-                header.setVisibility(VISIBLE);
-                if (pinnedHeaderHeight >= headerTop && headerTop > -1) {
-                    mHeaderOffset = headerTop - header.getHeight();
-                } else if (headerTop <= 0) {
-                    header.setVisibility(INVISIBLE);
-                }
-            }
-        }
-
-        invalidate();
-    }
-
-    @Override
-    public void onScrollStateChanged(AbsListView view, int scrollState) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScrollStateChanged(view, scrollState);
-        }
-    }
-
-    private View getSectionHeaderView(int section, View oldView) {
-        boolean shouldLayout = section != mCurrentSection || oldView == null;
-
-        View view = mAdapter.getSectionHeaderView(section, oldView, this);
-        if (shouldLayout) {
-            // a new section, thus a new header. We should lay it out again
-            ensurePinnedHeaderLayout(view, false);
-            mCurrentSection = section;
-        }
-        return view;
-    }
-
-    @Override
-    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
-        super.onSizeChanged(w, h, oldw, oldh);
-        if (mAdapter == null) {
-            return;
-        }
-        if (mCurrentHeader != null) {
-            ensurePinnedHeaderLayout(mCurrentHeader, true);
-        }
-    }
-
-    private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
-        if (header.isLayoutRequested() || forceLayout) {
-            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), mWidthMode);
-            
-            int heightSpec;
-            ViewGroup.LayoutParams layoutParams = header.getLayoutParams();
-            if (layoutParams != null && layoutParams.height > 0) {
-                heightSpec = MeasureSpec.makeMeasureSpec(layoutParams.height, MeasureSpec.EXACTLY);
-            } else {
-                heightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
-            }
-            try {
-                header.measure(widthSpec, heightSpec);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
-        }
-    }
-
-    @Override
-    protected void dispatchDraw(Canvas canvas) {
-        super.dispatchDraw(canvas);
-        if (mAdapter == null || !mShouldPin || mCurrentHeader == null) {
-            return;
-        }
-        int saveCount = canvas.save();
-        canvas.translate(0, mHeaderOffset);
-        canvas.clipRect(0, 0, getWidth(), mCurrentHeader.getMeasuredHeight()); // needed for < HONEYCOMB
-        mCurrentHeader.draw(canvas);
-        canvas.restoreToCount(saveCount);
-    }
-
-    @Override
-    public boolean performItemClick(View view, int position, long id) {
-        if (mAdapter != null && mLastUpEventY > 0 && mCurrentHeader != null && mLastUpEventY < mCurrentHeader.getBottom()) {
-            mCurrentHeader.performClick();
-            mLastUpEventY = -1;
-            return true;
-        }
-        return super.performItemClick(view, position, id);
-    }
-
-    @Override
-    public void setOnTouchListener(OnTouchListener l) {
-        mForwardingTouchListener = l;
-    }
-
-    @Override
-    public boolean onTouch(View v, MotionEvent event) {
-        if (mForwardingTouchListener != null) {
-            mForwardingTouchListener.onTouch(v, event);
-        }
-
-        if (mCurrentHeader != null && event.getY() < mCurrentHeader.getHeight()) {
-            if (event.getAction() == MotionEvent.ACTION_UP) {
-                mLastUpEventY = event.getY();
-            }
-        }
-        return false;
-    }
-
-    @Override
-    public void setOnScrollListener(OnScrollListener l) {
-        mOnScrollListener = l;
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-        mWidthMode = MeasureSpec.getMode(widthMeasureSpec);
-    }
-
-    public void setOnItemClickListener(PinnedHeaderListView.OnItemClickListener listener) {
-        super.setOnItemClickListener(listener);
-    }
-
-    public static abstract class OnItemClickListener implements AdapterView.OnItemClickListener {
-        @Override
-        public void onItemClick(AdapterView<?> adapterView, View view, int rawPosition, long id) {
-            SectionedBaseAdapter adapter;
-            if (adapterView.getAdapter() instanceof HeaderViewListAdapter) {
-                HeaderViewListAdapter wrapperAdapter = (HeaderViewListAdapter) adapterView.getAdapter();
-                adapter = (SectionedBaseAdapter) wrapperAdapter.getWrappedAdapter();
-            } else {
-                adapter = (SectionedBaseAdapter) adapterView.getAdapter();
-            }
-            int section = adapter.getSectionForPosition(rawPosition);
-            int position = adapter.getPositionInSectionForPosition(rawPosition);
-
-            if (position == -1) {
-                onSectionClick(adapterView, view, section, id);
-            } else {
-                onItemClick(adapterView, view, section, position, id);
-            }
-        }
-
-        public abstract void onItemClick(AdapterView<?> adapterView, View view, int section, int position, long id);
-
-        public abstract void onSectionClick(AdapterView<?> adapterView, View view, int section, long id);
-
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java
index 671c858f2..6dc14ac36 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java
@@ -20,7 +20,7 @@
     public float currentProgress = 0;
     public int width;
     public int height;
-    public float progressHeight = AndroidUtilities.dpf(2.0f);
+    public float progressHeight = AndroidUtilities.dp(2.0f);
 
     public ProgressView() {
         innerPaint = new Paint();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
deleted file mode 100755
index 1c9f97d68..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
+++ /dev/null
@@ -1,233 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Views;
-
-import android.database.DataSetObserver;
-import android.util.SparseArray;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-
-public abstract class SectionedBaseAdapter extends BaseFragmentAdapter implements PinnedHeaderListView.PinnedSectionedHeaderAdapter {
-
-    /**
-     * Holds the calculated values of @{link getPositionInSectionForPosition}
-     */
-    private SparseArray<Integer> mSectionPositionCache;
-    /**
-     * Holds the calculated values of @{link getSectionForPosition}
-     */
-    private SparseArray<Integer> mSectionCache;
-    /**
-     * Holds the calculated values of @{link getCountForSection}
-     */
-    private SparseArray<Integer> mSectionCountCache;
-
-    /**
-     * Caches the item count
-     */
-    private int mCount;
-    /**
-     * Caches the section count
-     */
-    private int mSectionCount;
-
-    public SectionedBaseAdapter() {
-        super();
-        mSectionCache = new SparseArray<Integer>();
-        mSectionPositionCache = new SparseArray<Integer>();
-        mSectionCountCache = new SparseArray<Integer>();
-        mCount = -1;
-        mSectionCount = -1;
-    }
-
-    @Override
-    public void notifyDataSetChanged() {
-        mSectionCache.clear();
-        mSectionPositionCache.clear();
-        mSectionCountCache.clear();
-        mCount = -1;
-        mSectionCount = -1;
-        super.notifyDataSetChanged();
-    }
-
-    @Override
-    public void notifyDataSetInvalidated() {
-        mSectionCache.clear();
-        mSectionPositionCache.clear();
-        mSectionCountCache.clear();
-        mCount = -1;
-        mSectionCount = -1;
-        super.notifyDataSetInvalidated();
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return false;
-    }
-
-    @Override
-    public boolean isEnabled(int position) {
-        return !isSectionHeader(position);
-    }
-
-    @Override
-    public final int getCount() {
-        if (mCount >= 0) {
-            return mCount;
-        }
-        int count = 0;
-        for (int i = 0; i < internalGetSectionCount(); i++) {
-            count += internalGetCountForSection(i);
-            count++;
-        }
-        mCount = count;
-        return count;
-    }
-
-    @Override
-    public final Object getItem(int position) {
-        return getItem(getSectionForPosition(position), getPositionInSectionForPosition(position));
-    }
-
-    @Override
-    public final long getItemId(int position) {
-        return getItemId(getSectionForPosition(position), getPositionInSectionForPosition(position));
-    }
-
-    @Override
-    public final View getView(int position, View convertView, ViewGroup parent) {
-        if (isSectionHeader(position)) {
-            return getSectionHeaderView(getSectionForPosition(position), convertView, parent);
-        }
-        return getItemView(getSectionForPosition(position), getPositionInSectionForPosition(position), convertView, parent);
-    }
-
-    @Override
-    public final int getItemViewType(int position) {
-        if (isSectionHeader(position)) {
-            return getItemViewTypeCount() + getSectionHeaderViewType(getSectionForPosition(position));
-        }
-        return getItemViewType(getSectionForPosition(position), getPositionInSectionForPosition(position));
-    }
-
-    @Override
-    public final int getViewTypeCount() {
-        return getItemViewTypeCount() + getSectionHeaderViewTypeCount();
-    }
-
-    public final int getSectionForPosition(int position) {
-        // first try to retrieve values from cache
-        Integer cachedSection = mSectionCache.get(position);
-        if (cachedSection != null) {
-            return cachedSection;
-        }
-        int sectionStart = 0;
-        for (int i = 0; i < internalGetSectionCount(); i++) {
-            int sectionCount = internalGetCountForSection(i);
-            int sectionEnd = sectionStart + sectionCount + 1;
-            if (position >= sectionStart && position < sectionEnd) {
-                mSectionCache.put(position, i);
-                return i;
-            }
-            sectionStart = sectionEnd;
-        }
-        return 0;
-    }
-
-    public int getPositionInSectionForPosition(int position) {
-        if (position == 0) {
-            position = 1;
-        }
-        // first try to retrieve values from cache
-        Integer cachedPosition = mSectionPositionCache.get(position);
-        if (cachedPosition != null) {
-            return cachedPosition;
-        }
-        int sectionStart = 0;
-        for (int i = 0; i < internalGetSectionCount(); i++) {
-            int sectionCount = internalGetCountForSection(i);
-            int sectionEnd = sectionStart + sectionCount + 1;
-            if (position >= sectionStart && position < sectionEnd) {
-                int positionInSection = position - sectionStart - 1;
-                mSectionPositionCache.put(position, positionInSection);
-                return positionInSection;
-            }
-            sectionStart = sectionEnd;
-        }
-        return 0;
-    }
-
-    public final boolean isSectionHeader(int position) {
-        int sectionStart = 0;
-        for (int i = 0; i < internalGetSectionCount(); i++) {
-            if (position == sectionStart) {
-                return true;
-            } else if (position < sectionStart) {
-                return false;
-            }
-            sectionStart += internalGetCountForSection(i) + 1;
-        }
-        return false;
-    }
-
-    public int getItemViewType(int section, int position) {
-        return 0;
-    }
-
-    public int getItemViewTypeCount() {
-        return 1;
-    }
-
-    public int getSectionHeaderViewType(int section) {
-        return 0;
-    }
-
-    public int getSectionHeaderViewTypeCount() {
-        return 1;
-    }
-
-    public abstract Object getItem(int section, int position);
-
-    public abstract long getItemId(int section, int position);
-
-    public abstract int getSectionCount();
-
-    public abstract int getCountForSection(int section);
-
-    public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
-
-    public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
-
-    private int internalGetCountForSection(int section) {
-        Integer cachedSectionCount = mSectionCountCache.get(section);
-        if (cachedSectionCount != null) {
-            return cachedSectionCount;
-        }
-        int sectionCount = getCountForSection(section);
-        mSectionCountCache.put(section, sectionCount);
-        return sectionCount;
-    }
-
-    private int internalGetSectionCount() {
-        if (mSectionCount >= 0) {
-            return mSectionCount;
-        }
-        mSectionCount = getSectionCount();
-        return mSectionCount;
-    }
-
-    @Override
-    public void unregisterDataSetObserver(DataSetObserver observer) {
-        if (observer != null) {
-            super.unregisterDataSetObserver(observer);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionsListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionsListView.java
new file mode 100644
index 000000000..ca3b4e248
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionsListView.java
@@ -0,0 +1,211 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.FileLog;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+
+import java.util.ArrayList;
+
+public class SectionsListView extends ListView implements AbsListView.OnScrollListener {
+
+    private ArrayList<View> headers = new ArrayList<View>();
+    private ArrayList<View> headersCache = new ArrayList<View>();
+    private OnScrollListener mOnScrollListener;
+    private BaseSectionsAdapter mAdapter;
+    private int currentFirst = -1;
+    private int currentVisible = -1;
+    private int startSection;
+    private int sectionsCount;
+
+    public SectionsListView(Context context) {
+        super(context);
+        super.setOnScrollListener(this);
+    }
+
+    public SectionsListView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        super.setOnScrollListener(this);
+    }
+
+    public SectionsListView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        super.setOnScrollListener(this);
+    }
+
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        if (mAdapter == adapter) {
+            return;
+        }
+        headers.clear();
+        headersCache.clear();
+        if (adapter instanceof BaseSectionsAdapter) {
+            mAdapter = (BaseSectionsAdapter) adapter;
+        } else {
+            mAdapter = null;
+        }
+        super.setAdapter(adapter);
+    }
+
+    @Override
+    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+        if (mOnScrollListener != null) {
+            mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
+        }
+        if (mAdapter == null) {
+            return;
+        }
+
+        headersCache.addAll(headers);
+        headers.clear();
+
+        if (mAdapter.getCount() == 0) {
+            return;
+        }
+
+        if (currentFirst != firstVisibleItem || currentVisible != visibleItemCount) {
+            currentFirst = firstVisibleItem;
+            currentVisible = visibleItemCount;
+
+            sectionsCount = 1;
+            startSection = mAdapter.getSectionForPosition(firstVisibleItem);
+            int itemNum = firstVisibleItem + mAdapter.getCountForSection(startSection) - mAdapter.getPositionInSectionForPosition(firstVisibleItem);
+            while (true) {
+                if (itemNum >= firstVisibleItem + visibleItemCount) {
+                    break;
+                }
+                itemNum += mAdapter.getCountForSection(startSection + sectionsCount);
+                sectionsCount++;
+            }
+        }
+
+        int itemNum = firstVisibleItem;
+        for (int a = startSection; a < startSection + sectionsCount; a++) {
+            View header = null;
+            if (!headersCache.isEmpty()) {
+                header = headersCache.get(0);
+                headersCache.remove(0);
+            }
+            header = getSectionHeaderView(a, header);
+            headers.add(header);
+            int count = mAdapter.getCountForSection(a);
+            if (a == startSection) {
+                int pos = mAdapter.getPositionInSectionForPosition(itemNum);
+                if (pos == count - 1) {
+                    header.setTag(-header.getHeight());
+                } else if (pos == count - 2) {
+                    View child = getChildAt(itemNum - firstVisibleItem);
+                    int headerTop = 0;
+                    if (child != null) {
+                        headerTop = child.getTop();
+                    } else {
+                        headerTop = -AndroidUtilities.dp(100);
+                    }
+                    if (headerTop < 0) {
+                        header.setTag(headerTop);
+                    } else {
+                        header.setTag(0);
+                    }
+                } else {
+                    header.setTag(0);
+                }
+                itemNum += count - mAdapter.getPositionInSectionForPosition(firstVisibleItem);
+            } else {
+                View child = getChildAt(itemNum - firstVisibleItem);
+                if (child != null) {
+                    header.setTag(child.getTop());
+                }
+                itemNum += count;
+            }
+        }
+
+        invalidate();
+    }
+
+    @Override
+    public void onScrollStateChanged(AbsListView view, int scrollState) {
+        if (mOnScrollListener != null) {
+            mOnScrollListener.onScrollStateChanged(view, scrollState);
+        }
+    }
+
+    private View getSectionHeaderView(int section, View oldView) {
+        boolean shouldLayout = oldView == null;
+        View view = mAdapter.getSectionHeaderView(section, oldView, this);
+        if (shouldLayout) {
+            ensurePinnedHeaderLayout(view, false);
+        }
+        return view;
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+        if (mAdapter == null || headers.isEmpty()) {
+            return;
+        }
+        for (View header : headers) {
+            ensurePinnedHeaderLayout(header, true);
+        }
+    }
+
+    private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
+        if (header.isLayoutRequested() || forceLayout) {
+            ViewGroup.LayoutParams layoutParams = header.getLayoutParams();
+            int heightSpec = MeasureSpec.makeMeasureSpec(layoutParams.height, MeasureSpec.EXACTLY);
+            int widthSpec = MeasureSpec.makeMeasureSpec(layoutParams.width, MeasureSpec.EXACTLY);
+            try {
+                header.measure(widthSpec, heightSpec);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
+        }
+    }
+
+    @Override
+    protected void dispatchDraw(Canvas canvas) {
+        super.dispatchDraw(canvas);
+        if (mAdapter == null || headers.isEmpty()) {
+            return;
+        }
+        for (View header : headers) {
+            int saveCount = canvas.save();
+            int top = (Integer)header.getTag();
+            canvas.translate(LocaleController.isRTL ? getWidth() - header.getWidth() : 0, top);
+            canvas.clipRect(0, 0, getWidth(), header.getMeasuredHeight());
+            if (top < 0) {
+                canvas.saveLayerAlpha(0, top, header.getWidth(), top + canvas.getHeight(), (int)(255 * (1.0f + (float)top / (float)header.getMeasuredHeight())), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+            }
+            header.draw(canvas);
+            canvas.restoreToCount(saveCount);
+        }
+    }
+
+    @Override
+    public void setOnScrollListener(OnScrollListener l) {
+        mOnScrollListener = l;
+    }
+
+    public void setOnItemClickListener(SectionsListView.OnItemClickListener listener) {
+        super.setOnItemClickListener(listener);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
deleted file mode 100644
index 547e5352f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Views;
-
-import android.content.Context;
-import android.graphics.Typeface;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-
-public class SettingsSectionLayout extends LinearLayout {
-
-    private TextView textView;
-
-    private void init() {
-        setOrientation(LinearLayout.VERTICAL);
-
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        textView.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
-        textView.setTextColor(0xff3b84c0);
-        addView(textView);
-        LayoutParams layoutParams = (LayoutParams)textView.getLayoutParams();
-        layoutParams.width = LayoutParams.WRAP_CONTENT;
-        layoutParams.height = LayoutParams.WRAP_CONTENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(8);
-        layoutParams.rightMargin = AndroidUtilities.dp(8);
-        layoutParams.topMargin = AndroidUtilities.dp(6);
-        layoutParams.bottomMargin = AndroidUtilities.dp(4);
-        if (LocaleController.isRTL) {
-            textView.setGravity(Gravity.RIGHT);
-            layoutParams.gravity = Gravity.RIGHT;
-        }
-        textView.setLayoutParams(layoutParams);
-
-        View view = new View(getContext());
-        view.setBackgroundColor(0xff6caae4);
-        addView(view);
-        layoutParams = (LayoutParams)view.getLayoutParams();
-        layoutParams.weight = LayoutParams.MATCH_PARENT;
-        layoutParams.height = AndroidUtilities.dp(1);
-        view.setLayoutParams(layoutParams);
-    }
-
-    public SettingsSectionLayout(Context context) {
-        super(context);
-        init();
-    }
-
-    public SettingsSectionLayout(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        init();
-    }
-
-    public SettingsSectionLayout(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        init();
-    }
-
-    public SettingsSectionLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
-        super(context, attrs, defStyleAttr, defStyleRes);
-        init();
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec), MeasureSpec.UNSPECIFIED));
-    }
-
-    public void setText(String text) {
-        textView.setText(text);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
index ffe96479a..b34b31170 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
@@ -12,6 +12,7 @@
 import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
+import android.view.View;
 import android.widget.RelativeLayout;
 
 import org.telegram.android.AndroidUtilities;
@@ -55,7 +56,8 @@ public void setBackgroundImage(Drawable bitmap) {
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
         super.onLayout(changed, l, t, r, b);
         if (delegate != null) {
-            int usableViewHeight = this.getRootView().getHeight() - AndroidUtilities.statusBarHeight;
+            View rootView = this.getRootView();
+            int usableViewHeight = rootView.getHeight() - AndroidUtilities.statusBarHeight - AndroidUtilities.getViewInset(rootView);
             this.getWindowVisibleDisplayFrame(rect);
             int keyboardHeight = usableViewHeight - (rect.bottom - rect.top);
             delegate.onSizeChanged(keyboardHeight);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
deleted file mode 100644
index 3462651ed..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Views;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.widget.LinearLayout;
-
-public class SlideView extends LinearLayout {
-    public static interface SlideViewDelegate {
-        public abstract void onNextAction();
-        public abstract void needShowAlert(String text);
-        public abstract void needShowProgress();
-        public abstract void needHideProgress();
-        public abstract void setPage(int page, boolean animated, Bundle params, boolean back);
-        public abstract void needFinishActivity();
-    }
-
-    public SlideView(Context context) {
-        super(context);
-    }
-
-    public SlideView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public SlideView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    public SlideViewDelegate delegate;
-
-    public String getHeaderName() {
-        return "";
-    }
-
-    public void onNextPressed() {
-
-    }
-
-    public void setParams(Bundle params) {
-
-    }
-
-    public void onBackPressed() {
-
-    }
-
-    public void onShow() {
-
-    }
-
-    public void onDestroyActivity() {
-        delegate = null;
-    }
-
-    public void saveStateParams(Bundle bundle) {
-
-    }
-
-    public void restoreStateParams(Bundle bundle) {
-
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlidingTabView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SlidingTabView.java
deleted file mode 100644
index c4fdbc44c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlidingTabView.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Views;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Typeface;
-import android.util.AttributeSet;
-import android.view.Gravity;
-import android.view.View;
-import android.view.animation.DecelerateInterpolator;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-public class SlidingTabView extends LinearLayout {
-
-    public static interface SlidingTabViewDelegate {
-        public abstract void didSelectTab(int tab);
-    }
-
-    private SlidingTabViewDelegate delegate;
-    private int selectedTab = 0;
-    private int tabCount = 0;
-    private float tabWidth = 0;
-    private float tabX = 0;
-    private float animateTabXTo = 0;
-    private Paint paint = new Paint();
-    private long startAnimationTime = 0;
-    private long totalAnimationDiff = 0;
-    private float startAnimationX = 0;
-    private DecelerateInterpolator interpolator;
-
-    private void init() {
-        setBackgroundResource(R.color.header);
-        setOrientation(HORIZONTAL);
-        setWeightSum(100);
-        interpolator = new DecelerateInterpolator();
-    }
-
-    public SlidingTabView(Context context) {
-        super(context);
-        init();
-    }
-
-    public SlidingTabView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        init();
-    }
-
-    public SlidingTabView(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        init();
-    }
-
-    public SlidingTabView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
-        super(context, attrs, defStyleAttr, defStyleRes);
-        init();
-    }
-
-    public void addTextTab(final int position, String title) {
-        TextView tab = new TextView(getContext());
-        tab.setText(title);
-        tab.setFocusable(true);
-        tab.setGravity(Gravity.CENTER);
-        tab.setSingleLine();
-        tab.setTextColor(0xffffffff);
-        tab.setTextSize(12);
-        tab.setTypeface(Typeface.DEFAULT_BOLD);
-        tab.setBackgroundResource(R.drawable.bar_selector);
-
-        tab.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                didSelectTab(position);
-            }
-        });
-        addView(tab);
-        LayoutParams layoutParams = (LayoutParams)tab.getLayoutParams();
-        layoutParams.height = LayoutParams.MATCH_PARENT;
-        layoutParams.width = 0;
-        layoutParams.weight = 50;
-        tab.setLayoutParams(layoutParams);
-
-        tabCount++;
-    }
-
-    public void setDelegate(SlidingTabViewDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public int getSeletedTab() {
-        return selectedTab;
-    }
-
-    private void didSelectTab(int tab) {
-        if (selectedTab == tab) {
-            return;
-        }
-        selectedTab = tab;
-        animateToTab(tab);
-        if (delegate != null) {
-            delegate.didSelectTab(tab);
-        }
-    }
-
-    private void animateToTab(int tab) {
-        animateTabXTo = tab * tabWidth;
-        startAnimationX = tabX;
-        totalAnimationDiff = 0;
-        startAnimationTime = System.currentTimeMillis();
-        invalidate();
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        super.onLayout(changed, l, t, r, b);
-        tabWidth = (r - l) / (float)tabCount;
-        animateTabXTo = tabX = tabWidth * selectedTab;
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        paint.setColor(0xaaffffff);
-        for (int a = 0; a < tabCount - 1; a++) {
-            canvas.drawRect(tabWidth + a * tabWidth - 1, AndroidUtilities.dp(12), tabWidth + a * tabWidth + 1, getHeight() - AndroidUtilities.dp(12), paint);
-        }
-
-        if (tabX != animateTabXTo) {
-            long dt = System.currentTimeMillis() - startAnimationTime;
-            startAnimationTime = System.currentTimeMillis();
-            totalAnimationDiff += dt;
-            if (totalAnimationDiff > 200) {
-                totalAnimationDiff = 200;
-                tabX = animateTabXTo;
-            } else {
-                tabX = startAnimationX + interpolator.getInterpolation(totalAnimationDiff / 200.0f) * (animateTabXTo - startAnimationX);
-                invalidate();
-            }
-        }
-
-        canvas.drawRect(tabX, getHeight() - AndroidUtilities.dp(4), (tabX + tabWidth), getHeight(), paint);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/Switch.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/Switch.java
new file mode 100644
index 000000000..b1bb9aa0a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/Switch.java
@@ -0,0 +1,692 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.Rect;
+import android.graphics.Region;
+import android.graphics.drawable.Drawable;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.ViewConfiguration;
+import android.widget.CompoundButton;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+
+public class Switch extends CompoundButton {
+
+    public static class Insets {
+        public static final Insets NONE = new Insets(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
+
+        public final int left;
+        public final int top;
+        public final int right;
+        public final int bottom;
+
+        private Insets(int left, int top, int right, int bottom) {
+            this.left = left;
+            this.top = top;
+            this.right = right;
+            this.bottom = bottom;
+        }
+    }
+
+    public static float constrain(float amount, float low, float high) {
+        return amount < low ? low : (amount > high ? high : amount);
+    }
+
+    private static final int THUMB_ANIMATION_DURATION = 250;
+
+    private static final int TOUCH_MODE_IDLE = 0;
+    private static final int TOUCH_MODE_DOWN = 1;
+    private static final int TOUCH_MODE_DRAGGING = 2;
+
+    private Drawable mThumbDrawable;
+    private Drawable mTrackDrawable;
+    private int mThumbTextPadding;
+    private int mSwitchMinWidth;
+    private int mSwitchPadding;
+    private boolean mSplitTrack;
+
+    private boolean attachedToWindow;
+    private boolean wasLayout;
+
+    private int mTouchMode;
+    private int mTouchSlop;
+    private float mTouchX;
+    private float mTouchY;
+    private VelocityTracker mVelocityTracker = VelocityTracker.obtain();
+    private int mMinFlingVelocity;
+
+    private float thumbPosition;
+    private int mSwitchWidth;
+    private int mSwitchHeight;
+    private int mThumbWidth;
+    private int mSwitchLeft;
+    private int mSwitchTop;
+    private int mSwitchRight;
+    private int mSwitchBottom;
+
+    private ObjectAnimatorProxy mPositionAnimator;
+
+    @SuppressWarnings("hiding")
+    private final Rect mTempRect = new Rect();
+
+    public Switch(Context context) {
+        super(context);
+
+        mThumbDrawable = context.getResources().getDrawable(R.drawable.switch_thumb);
+        if (mThumbDrawable != null) {
+            mThumbDrawable.setCallback(this);
+        }
+        mTrackDrawable = context.getResources().getDrawable(R.drawable.switch_track);
+        if (mTrackDrawable != null) {
+            mTrackDrawable.setCallback(this);
+        }
+
+        if (AndroidUtilities.density < 1) {
+            mSwitchMinWidth = AndroidUtilities.dp(30);
+        } else {
+            mSwitchMinWidth = 0;
+        }
+
+        mSwitchPadding = 0;
+        mSplitTrack = false;
+
+        final ViewConfiguration config = ViewConfiguration.get(context);
+        mTouchSlop = config.getScaledTouchSlop();
+        mMinFlingVelocity = config.getScaledMinimumFlingVelocity();
+
+        refreshDrawableState();
+        setChecked(isChecked());
+    }
+
+    public void setSwitchPadding(int pixels) {
+        mSwitchPadding = pixels;
+        requestLayout();
+    }
+
+    public int getSwitchPadding() {
+        return mSwitchPadding;
+    }
+
+    public void setSwitchMinWidth(int pixels) {
+        mSwitchMinWidth = pixels;
+        requestLayout();
+    }
+
+    public int getSwitchMinWidth() {
+        return mSwitchMinWidth;
+    }
+
+    public void setThumbTextPadding(int pixels) {
+        mThumbTextPadding = pixels;
+        requestLayout();
+    }
+
+    public int getThumbTextPadding() {
+        return mThumbTextPadding;
+    }
+
+    public void setTrackDrawable(Drawable track) {
+        if (mTrackDrawable != null) {
+            mTrackDrawable.setCallback(null);
+        }
+        mTrackDrawable = track;
+        if (track != null) {
+            track.setCallback(this);
+        }
+        requestLayout();
+    }
+
+    public void setTrackResource(int resId) {
+        setTrackDrawable(getContext().getDrawable(resId));
+    }
+
+    public Drawable getTrackDrawable() {
+        return mTrackDrawable;
+    }
+
+    public void setThumbDrawable(Drawable thumb) {
+        if (mThumbDrawable != null) {
+            mThumbDrawable.setCallback(null);
+        }
+        mThumbDrawable = thumb;
+        if (thumb != null) {
+            thumb.setCallback(this);
+        }
+        requestLayout();
+    }
+
+    public void setThumbResource(int resId) {
+        setThumbDrawable(getContext().getDrawable(resId));
+    }
+
+    public Drawable getThumbDrawable() {
+        return mThumbDrawable;
+    }
+
+    public void setSplitTrack(boolean splitTrack) {
+        mSplitTrack = splitTrack;
+        invalidate();
+    }
+
+    public boolean getSplitTrack() {
+        return mSplitTrack;
+    }
+
+    @Override
+    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        final Rect padding = mTempRect;
+        int thumbWidth;
+        int thumbHeight;
+        if (mThumbDrawable != null) {
+            mThumbDrawable.getPadding(padding);
+            thumbWidth = mThumbDrawable.getIntrinsicWidth() - padding.left - padding.right;
+            thumbHeight = mThumbDrawable.getIntrinsicHeight();
+        } else {
+            thumbWidth = 0;
+            thumbHeight = 0;
+        }
+
+
+        mThumbWidth = thumbWidth;
+
+        int trackHeight;
+        if (mTrackDrawable != null) {
+            mTrackDrawable.getPadding(padding);
+            trackHeight = mTrackDrawable.getIntrinsicHeight();
+        } else {
+            padding.setEmpty();
+            trackHeight = 0;
+        }
+
+        int paddingLeft = padding.left;
+        int paddingRight = padding.right;
+        if (mThumbDrawable != null) {
+            final Insets inset = Insets.NONE;
+            paddingLeft = Math.max(paddingLeft, inset.left);
+            paddingRight = Math.max(paddingRight, inset.right);
+        }
+
+        final int switchWidth = Math.max(mSwitchMinWidth, 2 * mThumbWidth + paddingLeft + paddingRight);
+        final int switchHeight = Math.max(trackHeight, thumbHeight);
+        mSwitchWidth = switchWidth;
+        mSwitchHeight = switchHeight;
+
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        final int measuredHeight = getMeasuredHeight();
+        if (measuredHeight < switchHeight) {
+            setMeasuredDimension(switchWidth, switchHeight);
+        }
+    }
+
+    private boolean hitThumb(float x, float y) {
+        final int thumbOffset = getThumbOffset();
+
+        mThumbDrawable.getPadding(mTempRect);
+        final int thumbTop = mSwitchTop - mTouchSlop;
+        final int thumbLeft = mSwitchLeft + thumbOffset - mTouchSlop;
+        final int thumbRight = thumbLeft + mThumbWidth + mTempRect.left + mTempRect.right + mTouchSlop;
+        final int thumbBottom = mSwitchBottom + mTouchSlop;
+        return x > thumbLeft && x < thumbRight && y > thumbTop && y < thumbBottom;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+        mVelocityTracker.addMovement(ev);
+        final int action = ev.getActionMasked();
+        switch (action) {
+            case MotionEvent.ACTION_DOWN: {
+                final float x = ev.getX();
+                final float y = ev.getY();
+                if (isEnabled() && hitThumb(x, y)) {
+                    mTouchMode = TOUCH_MODE_DOWN;
+                    mTouchX = x;
+                    mTouchY = y;
+                }
+                break;
+            }
+
+            case MotionEvent.ACTION_MOVE: {
+                switch (mTouchMode) {
+                    case TOUCH_MODE_IDLE:
+                        break;
+
+                    case TOUCH_MODE_DOWN: {
+                        final float x = ev.getX();
+                        final float y = ev.getY();
+                        if (Math.abs(x - mTouchX) > mTouchSlop || Math.abs(y - mTouchY) > mTouchSlop) {
+                            mTouchMode = TOUCH_MODE_DRAGGING;
+                            getParent().requestDisallowInterceptTouchEvent(true);
+                            mTouchX = x;
+                            mTouchY = y;
+                            return true;
+                        }
+                        break;
+                    }
+
+                    case TOUCH_MODE_DRAGGING: {
+                        final float x = ev.getX();
+                        final int thumbScrollRange = getThumbScrollRange();
+                        final float thumbScrollOffset = x - mTouchX;
+                        float dPos;
+                        if (thumbScrollRange != 0) {
+                            dPos = thumbScrollOffset / thumbScrollRange;
+                        } else {
+                            dPos = thumbScrollOffset > 0 ? 1 : -1;
+                        }
+                        if (LocaleController.isRTL) {
+                            dPos = -dPos;
+                        }
+                        final float newPos = constrain(thumbPosition + dPos, 0, 1);
+                        if (newPos != thumbPosition) {
+                            mTouchX = x;
+                            setThumbPosition(newPos);
+                        }
+                        return true;
+                    }
+                }
+                break;
+            }
+
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL: {
+                if (mTouchMode == TOUCH_MODE_DRAGGING) {
+                    stopDrag(ev);
+                    super.onTouchEvent(ev);
+                    return true;
+                }
+                mTouchMode = TOUCH_MODE_IDLE;
+                mVelocityTracker.clear();
+                break;
+            }
+        }
+
+        return super.onTouchEvent(ev);
+    }
+
+    private void cancelSuperTouch(MotionEvent ev) {
+        MotionEvent cancel = MotionEvent.obtain(ev);
+        cancel.setAction(MotionEvent.ACTION_CANCEL);
+        super.onTouchEvent(cancel);
+        cancel.recycle();
+    }
+
+    private void stopDrag(MotionEvent ev) {
+        mTouchMode = TOUCH_MODE_IDLE;
+
+        final boolean commitChange = ev.getAction() == MotionEvent.ACTION_UP && isEnabled();
+        final boolean newState;
+        if (commitChange) {
+            mVelocityTracker.computeCurrentVelocity(1000);
+            final float xvel = mVelocityTracker.getXVelocity();
+            if (Math.abs(xvel) > mMinFlingVelocity) {
+                newState = LocaleController.isRTL ? (xvel < 0) : (xvel > 0);
+            } else {
+                newState = getTargetCheckedState();
+            }
+        } else {
+            newState = isChecked();
+        }
+
+        setChecked(newState);
+        cancelSuperTouch(ev);
+    }
+
+    private void animateThumbToCheckedState(boolean newCheckedState) {
+        final float targetPosition = newCheckedState ? 1 : 0;
+        mPositionAnimator = ObjectAnimatorProxy.ofFloatProxy(this, "thumbPosition", targetPosition);
+        mPositionAnimator.setDuration(THUMB_ANIMATION_DURATION);
+        mPositionAnimator.start();
+    }
+
+    private void cancelPositionAnimator() {
+        if (mPositionAnimator != null) {
+            mPositionAnimator.cancel();
+        }
+    }
+
+    private boolean getTargetCheckedState() {
+        return thumbPosition > 0.5f;
+    }
+
+    private void setThumbPosition(float position) {
+        thumbPosition = position;
+        invalidate();
+    }
+
+    public float getThumbPosition() {
+        return thumbPosition;
+    }
+
+    @Override
+    public void toggle() {
+        setChecked(!isChecked());
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        attachedToWindow = true;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        attachedToWindow = false;
+        wasLayout = false;
+    }
+
+    public void resetLayout() {
+        wasLayout = false;
+    }
+
+    @Override
+    public void setChecked(boolean checked) {
+        super.setChecked(checked);
+
+        checked = isChecked();
+
+        if (attachedToWindow && wasLayout) {
+            animateThumbToCheckedState(checked);
+        } else {
+            cancelPositionAnimator();
+            setThumbPosition(checked ? 1 : 0);
+        }
+
+        if (mTrackDrawable != null) {
+            mTrackDrawable.setColorFilter(new PorterDuffColorFilter(checked ? 0xffa0d6fa : 0xffc7c7c7, PorterDuff.Mode.MULTIPLY));
+        }
+        if (mThumbDrawable != null) {
+            mThumbDrawable.setColorFilter(new PorterDuffColorFilter(checked ? 0xff45abef : 0xffededed, PorterDuff.Mode.MULTIPLY));
+        }
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        wasLayout = true;
+        int opticalInsetLeft = 0;
+        int opticalInsetRight = 0;
+        if (mThumbDrawable != null) {
+            final Rect trackPadding = mTempRect;
+            if (mTrackDrawable != null) {
+                mTrackDrawable.getPadding(trackPadding);
+            } else {
+                trackPadding.setEmpty();
+            }
+
+            final Insets insets = Insets.NONE;
+            opticalInsetLeft = Math.max(0, insets.left - trackPadding.left);
+            opticalInsetRight = Math.max(0, insets.right - trackPadding.right);
+        }
+
+        final int switchRight;
+        final int switchLeft;
+        if (LocaleController.isRTL) {
+            switchLeft = getPaddingLeft() + opticalInsetLeft;
+            switchRight = switchLeft + mSwitchWidth - opticalInsetLeft - opticalInsetRight;
+        } else {
+            switchRight = getWidth() - getPaddingRight() - opticalInsetRight;
+            switchLeft = switchRight - mSwitchWidth + opticalInsetLeft + opticalInsetRight;
+        }
+
+        final int switchTop;
+        final int switchBottom;
+        switch (getGravity() & Gravity.VERTICAL_GRAVITY_MASK) {
+            default:
+            case Gravity.TOP:
+                switchTop = getPaddingTop();
+                switchBottom = switchTop + mSwitchHeight;
+                break;
+
+            case Gravity.CENTER_VERTICAL:
+                switchTop = (getPaddingTop() + getHeight() - getPaddingBottom()) / 2 - mSwitchHeight / 2;
+                switchBottom = switchTop + mSwitchHeight;
+                break;
+
+            case Gravity.BOTTOM:
+                switchBottom = getHeight() - getPaddingBottom();
+                switchTop = switchBottom - mSwitchHeight;
+                break;
+        }
+
+        mSwitchLeft = switchLeft;
+        mSwitchTop = switchTop;
+        mSwitchBottom = switchBottom;
+        mSwitchRight = switchRight;
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        final Rect padding = mTempRect;
+        final int switchLeft = mSwitchLeft;
+        final int switchTop = mSwitchTop;
+        final int switchRight = mSwitchRight;
+        final int switchBottom = mSwitchBottom;
+
+        int thumbInitialLeft = switchLeft + getThumbOffset();
+
+        final Insets thumbInsets;
+        if (mThumbDrawable != null) {
+            thumbInsets = Insets.NONE;
+        } else {
+            thumbInsets = Insets.NONE;
+        }
+
+        if (mTrackDrawable != null) {
+            mTrackDrawable.getPadding(padding);
+
+            thumbInitialLeft += padding.left;
+
+            int trackLeft = switchLeft;
+            int trackTop = switchTop;
+            int trackRight = switchRight;
+            int trackBottom = switchBottom;
+            if (thumbInsets != Insets.NONE) {
+                if (thumbInsets.left > padding.left) {
+                    trackLeft += thumbInsets.left - padding.left;
+                }
+                if (thumbInsets.top > padding.top) {
+                    trackTop += thumbInsets.top - padding.top;
+                }
+                if (thumbInsets.right > padding.right) {
+                    trackRight -= thumbInsets.right - padding.right;
+                }
+                if (thumbInsets.bottom > padding.bottom) {
+                    trackBottom -= thumbInsets.bottom - padding.bottom;
+                }
+            }
+            mTrackDrawable.setBounds(trackLeft, trackTop, trackRight, trackBottom);
+        }
+
+        if (mThumbDrawable != null) {
+            mThumbDrawable.getPadding(padding);
+
+            final int thumbLeft = thumbInitialLeft - padding.left;
+            final int thumbRight = thumbInitialLeft + mThumbWidth + padding.right;
+            int offset = (AndroidUtilities.density == 1.5f ? AndroidUtilities.dp(1) : 0);
+            mThumbDrawable.setBounds(thumbLeft, switchTop + offset, thumbRight, switchBottom + offset);
+
+            final Drawable background = getBackground();
+            if (background != null) {
+                background.setHotspotBounds(thumbLeft, switchTop, thumbRight, switchBottom);
+            }
+        }
+
+        super.draw(c);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        final Rect padding = mTempRect;
+        final Drawable trackDrawable = mTrackDrawable;
+        if (trackDrawable != null) {
+            trackDrawable.getPadding(padding);
+        } else {
+            padding.setEmpty();
+        }
+
+        final int switchTop = mSwitchTop;
+        final int switchBottom = mSwitchBottom;
+        final int switchInnerTop = switchTop + padding.top;
+        final int switchInnerBottom = switchBottom - padding.bottom;
+
+        final Drawable thumbDrawable = mThumbDrawable;
+        if (trackDrawable != null) {
+            if (mSplitTrack && thumbDrawable != null) {
+                final Insets insets = Insets.NONE;
+                thumbDrawable.copyBounds(padding);
+                padding.left += insets.left;
+                padding.right -= insets.right;
+
+                final int saveCount = canvas.save();
+                canvas.clipRect(padding, Region.Op.DIFFERENCE);
+                trackDrawable.draw(canvas);
+                canvas.restoreToCount(saveCount);
+            } else {
+                trackDrawable.draw(canvas);
+            }
+        }
+
+        final int saveCount = canvas.save();
+
+        if (thumbDrawable != null) {
+            thumbDrawable.draw(canvas);
+        }
+
+        canvas.restoreToCount(saveCount);
+    }
+
+    @Override
+    public int getCompoundPaddingLeft() {
+        if (!LocaleController.isRTL) {
+            return super.getCompoundPaddingLeft();
+        }
+        return super.getCompoundPaddingLeft() + mSwitchWidth;
+    }
+
+    @Override
+    public int getCompoundPaddingRight() {
+        if (LocaleController.isRTL) {
+            return super.getCompoundPaddingRight();
+        }
+        return super.getCompoundPaddingRight() + mSwitchWidth;
+    }
+
+    private int getThumbOffset() {
+        final float position;
+        if (LocaleController.isRTL) {
+            position = 1 - thumbPosition;
+        } else {
+            position = thumbPosition;
+        }
+        return (int) (position * getThumbScrollRange() + 0.5f);
+    }
+
+    private int getThumbScrollRange() {
+        if (mTrackDrawable != null) {
+            final Rect padding = mTempRect;
+            mTrackDrawable.getPadding(padding);
+
+            final Insets insets;
+            if (mThumbDrawable != null) {
+                insets = Insets.NONE;
+            } else {
+                insets = Insets.NONE;
+            }
+
+            return mSwitchWidth - mThumbWidth - padding.left - padding.right - insets.left - insets.right;
+        } else {
+            return 0;
+        }
+    }
+
+    /*@Override
+    protected int[] onCreateDrawableState(int extraSpace) {
+        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
+        if (isChecked()) {
+            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
+        }
+        return drawableState;
+    }*/
+
+    @Override
+    protected void drawableStateChanged() {
+        super.drawableStateChanged();
+
+        final int[] myDrawableState = getDrawableState();
+
+        if (mThumbDrawable != null) {
+            mThumbDrawable.setState(myDrawableState);
+        }
+
+        if (mTrackDrawable != null) {
+            mTrackDrawable.setState(myDrawableState);
+        }
+
+        invalidate();
+    }
+
+    @Override
+    public void drawableHotspotChanged(float x, float y) {
+        super.drawableHotspotChanged(x, y);
+
+        if (mThumbDrawable != null) {
+            mThumbDrawable.setHotspot(x, y);
+        }
+
+        if (mTrackDrawable != null) {
+            mTrackDrawable.setHotspot(x, y);
+        }
+    }
+
+    @Override
+    protected boolean verifyDrawable(Drawable who) {
+        return super.verifyDrawable(who) || who == mThumbDrawable || who == mTrackDrawable;
+    }
+
+    @Override
+    public void jumpDrawablesToCurrentState() {
+        super.jumpDrawablesToCurrentState();
+
+        if (mThumbDrawable != null) {
+            mThumbDrawable.jumpToCurrentState();
+        }
+
+        if (mTrackDrawable != null) {
+            mTrackDrawable.jumpToCurrentState();
+        }
+
+        if (mPositionAnimator != null && mPositionAnimator.isRunning()) {
+            mPositionAnimator.end();
+            mPositionAnimator = null;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerDrawable.java
similarity index 71%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Views/TimerDrawable.java
index 9c6c43048..6252ac35d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerDrawable.java
@@ -10,20 +10,18 @@
 
 import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.ColorFilter;
 import android.graphics.Paint;
-import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
-import android.util.AttributeSet;
-import android.view.View;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 
-public class TimerButton extends View {
+public class TimerDrawable extends Drawable {
 
     private static Drawable emptyTimerDrawable;
     private static Drawable timerDrawable;
@@ -33,32 +31,15 @@
     private int timeHeight = 0;
     private int time = 0;
 
-    private void init() {
+    public TimerDrawable(Context context) {
         if (emptyTimerDrawable == null) {
-            emptyTimerDrawable = getResources().getDrawable(R.drawable.header_timer);
-            timerDrawable = getResources().getDrawable(R.drawable.header_timer2);
+            emptyTimerDrawable = context.getResources().getDrawable(R.drawable.header_timer);
+            timerDrawable = context.getResources().getDrawable(R.drawable.header_timer2);
             timePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(10));
-            timePaint.setColor(0xffd7e8f7);
-            timePaint.setTypeface(Typeface.DEFAULT_BOLD);
+            timePaint.setTextSize(AndroidUtilities.dp(11));
+            timePaint.setColor(0xffffffff);
+            timePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         }
-
-        setBackgroundResource(R.drawable.bar_selector);
-    }
-
-    public TimerButton(Context context) {
-        super(context);
-        init();
-    }
-
-    public TimerButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        init();
-    }
-
-    public TimerButton(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        init();
     }
 
     public void setTime(int value) {
@@ -103,13 +84,13 @@ public void setTime(int value) {
             FileLog.e("tmessages", e);
         }
 
-        invalidate();
+        invalidateSelf();
     }
 
     @Override
-    protected void onDraw(Canvas canvas) {
-        int width = getMeasuredWidth();
-        int height = getMeasuredHeight();
+    public void draw(Canvas canvas) {
+        int width = timerDrawable.getIntrinsicWidth();
+        int height = timerDrawable.getIntrinsicHeight();
         Drawable drawable = null;
         if (time == 0) {
             drawable = timerDrawable;
@@ -123,8 +104,37 @@ protected void onDraw(Canvas canvas) {
         drawable.draw(canvas);
 
         if (time != 0 && timeLayout != null) {
-            canvas.translate((int)(width / 2 - Math.ceil(timeWidth / 2)), (height - timeHeight) / 2 + AndroidUtilities.dpf2(1.5f));
+            int xOffxet = 0;
+            if (AndroidUtilities.density == 3) {
+                xOffxet = -1;
+            }
+            canvas.translate((int)(width / 2 - Math.ceil(timeWidth / 2)) + xOffxet, (height - timeHeight) / 2);
             timeLayout.draw(canvas);
         }
     }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return timerDrawable.getIntrinsicWidth();
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return timerDrawable.getIntrinsicHeight();
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
similarity index 84%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index 8731ed5d9..50b3b8fc8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -16,6 +16,8 @@
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.MediaStore;
@@ -24,10 +26,8 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.widget.AdapterView;
-import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
-import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
@@ -43,8 +43,10 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.BackupImageView;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Views.HorizontalListView;
 
 import java.io.File;
@@ -52,7 +54,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-public class SettingsWallpapersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+public class WallpapersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
     private HorizontalListView listView;
     private ListAdapter listAdapter;
     private ImageView backgroundImage;
@@ -67,6 +70,8 @@
     private TLRPC.PhotoSize loadingSize = null;
     private String currentPicturePath;
 
+    private final static int done_button = 1;
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -97,63 +102,60 @@ public void onFragmentDestroy() {
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
-            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
-            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
-            cancelButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    finishFragment();
-                }
-            });
-            doneButton = actionBarLayer.findViewById(R.id.done_button);
-            doneButton.setOnClickListener(new View.OnClickListener() {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("ChatBackground", R.string.ChatBackground));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
-                public void onClick(View view) {
-                    boolean done;
-                    TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
-                    if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
-                        int width = AndroidUtilities.displaySize.x;
-                        int height = AndroidUtilities.displaySize.y;
-                        if (width > height) {
-                            int temp = width;
-                            width = height;
-                            height = temp;
-                        }
-                        TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
-                        String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
-                        File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                        try {
-                            done = Utilities.copyFile(f, toFile);
-                        } catch (Exception e) {
-                            done = false;
-                            FileLog.e("tmessages", e);
-                        }
-                    } else {
-                        if (selectedBackground == -1) {
-                            File fromFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        boolean done;
+                        TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
+                        if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
+                            int width = AndroidUtilities.displaySize.x;
+                            int height = AndroidUtilities.displaySize.y;
+                            if (width > height) {
+                                int temp = width;
+                                width = height;
+                                height = temp;
+                            }
+                            TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
+                            String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
+                            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
                             File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                            done = fromFile.renameTo(toFile);
+                            try {
+                                done = Utilities.copyFile(f, toFile);
+                            } catch (Exception e) {
+                                done = false;
+                                FileLog.e("tmessages", e);
+                            }
                         } else {
-                            done = true;
+                            if (selectedBackground == -1) {
+                                File fromFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                                File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                                done = fromFile.renameTo(toFile);
+                            } else {
+                                done = true;
+                            }
                         }
-                    }
 
-                    if (done) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        editor.putInt("selectedBackground", selectedBackground);
-                        editor.putInt("selectedColor", selectedColor);
-                        editor.commit();
-                        ApplicationLoader.cachedWallpaper = null;
+                        if (done) {
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = preferences.edit();
+                            editor.putInt("selectedBackground", selectedBackground);
+                            editor.putInt("selectedColor", selectedColor);
+                            editor.commit();
+                            ApplicationLoader.cachedWallpaper = null;
+                        }
+                        finishFragment();
                     }
-                    finishFragment();
                 }
             });
 
-            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
-            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
-            textView.setText(LocaleController.getString("Set", R.string.Set).toUpperCase());
+            ActionBarMenu menu = actionBar.createMenu();
+            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
             fragmentView = inflater.inflate(R.layout.settings_wallpapers_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
@@ -221,7 +223,8 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
             if (requestCode == 10) {
                 Utilities.addMediaToGallery(currentPicturePath);
                 try {
-                    Bitmap bitmap = ImageLoader.loadBitmap(currentPicturePath, null, AndroidUtilities.dp(320), AndroidUtilities.dp(480));
+                    Point screenSize = AndroidUtilities.getRealScreenSize();
+                    Bitmap bitmap = ImageLoader.loadBitmap(currentPicturePath, null, screenSize.x, screenSize.y);
                     File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
                     FileOutputStream stream = new FileOutputStream(toFile);
                     bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
@@ -237,7 +240,8 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     return;
                 }
                 try {
-                    Bitmap bitmap = ImageLoader.loadBitmap(null, data.getData(), AndroidUtilities.dp(320), AndroidUtilities.dp(480));
+                    Point screenSize = AndroidUtilities.getRealScreenSize();
+                    Bitmap bitmap = ImageLoader.loadBitmap(null, data.getData(), screenSize.x, screenSize.y);
                     File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
                     FileOutputStream stream = new FileOutputStream(toFile);
                     bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
@@ -293,7 +297,11 @@ private void processSelectedBackground() {
                 loadingFileObject = null;
                 loadingFile = null;
                 loadingSize = null;
-                backgroundImage.setImageURI(Uri.fromFile(f));
+                try {
+                    backgroundImage.setImageURI(Uri.fromFile(f));
+                } catch (Throwable e) {
+                    FileLog.e("tmessages", e);
+                }
                 backgroundImage.setBackgroundColor(0);
                 selectedColor = 0;
                 doneButton.setEnabled(true);
@@ -366,7 +374,7 @@ public void didReceivedNotification(int id, final Object... args) {
                 progressBar.setProgress((int)(progress * 100));
             }
         } else if (id == NotificationCenter.wallpapersDidLoaded) {
-            AndroidUtilities.RunOnUIThread(new Runnable() {
+            AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
                     wallPapers = (ArrayList<TLRPC.WallPaper>)args[0];
@@ -400,7 +408,7 @@ public void run(final TLObject response, TLRPC.TL_error error) {
                 if (error != null) {
                     return;
                 }
-                AndroidUtilities.RunOnUIThread(new Runnable() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         wallPapers.clear();
@@ -534,7 +542,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
                 TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, AndroidUtilities.dp(100));
                 if (size != null && size.location != null) {
-                    image.setImage(size.location, "100_100", 0);
+                    image.setImage(size.location, "100_100", (Drawable)null);
                 }
                 if (wallPaper.id == selectedBackground) {
                     selection.setVisibility(View.VISIBLE);
diff --git a/TMessagesProj/src/main/res/anim/decelerate_cubic.xml b/TMessagesProj/src/main/res/anim/decelerate_cubic.xml
deleted file mode 100644
index 053d6d201..000000000
--- a/TMessagesProj/src/main/res/anim/decelerate_cubic.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<decelerateInterpolator xmlns:android="http://schemas.android.com/apk/res/android"
-	android:factor="1.5" />
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
index 8def03b7e..34fa70643 100644
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
+++ b/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
@@ -1,21 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <!--<translate android:fromXDelta="100%"-->
-        <!--android:toXDelta="0"-->
-        <!--android:interpolator="@android:anim/accelerate_decelerate_interpolator"-->
-        <!--android:duration="150"/>-->
-
     <alpha android:fromAlpha="0.0"
         android:toAlpha="1.0"
         android:duration="200"
         android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
-
-    <!--<scale android:fromXScale="2.9"-->
-        <!--android:fromYScale="1.0"-->
-        <!--android:toXScale="1.0"-->
-        <!--android:toYScale="1.0"-->
-        <!--android:pivotX="50%"-->
-        <!--android:pivotY="50%"-->
-        <!--android:interpolator="@android:anim/accelerate_decelerate_interpolator"-->
-        <!--android:duration="150"/>-->
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
index 85c91287b..915208c6c 100644
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
+++ b/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
@@ -1,21 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <!--<translate android:fromXDelta="0"-->
-        <!--android:toXDelta="-100%"-->
-        <!--android:interpolator="@android:anim/accelerate_decelerate_interpolator"-->
-        <!--android:duration="150"/>-->
-
     <alpha android:fromAlpha="1.0"
         android:toAlpha="0.0"
         android:duration="200"
         android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
-
-    <!--<scale android:fromXScale="1.0"-->
-        <!--android:fromYScale="1.0"-->
-        <!--android:toXScale="2.0"-->
-        <!--android:toYScale="1.0"-->
-        <!--android:pivotX="50%"-->
-        <!--android:pivotY="50%"-->
-        <!--android:interpolator="@android:anim/accelerate_decelerate_interpolator"-->
-        <!--android:duration="150"/>-->
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/popup_in.xml b/TMessagesProj/src/main/res/anim/popup_in.xml
new file mode 100644
index 000000000..42a4bb0bc
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/popup_in.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <alpha android:fromAlpha="0.0"
+        android:toAlpha="1.0"
+        android:duration="150"
+        android:interpolator="@android:anim/accelerate_interpolator"/>
+</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/popup_out.xml b/TMessagesProj/src/main/res/anim/popup_out.xml
new file mode 100644
index 000000000..0975248a7
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/popup_out.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <alpha android:fromAlpha="1.0"
+        android:toAlpha="0.0"
+        android:duration="150"
+        android:interpolator="@android:anim/accelerate_interpolator"/>
+</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/scale_in.xml b/TMessagesProj/src/main/res/anim/scale_in.xml
deleted file mode 100644
index a0aa6293b..000000000
--- a/TMessagesProj/src/main/res/anim/scale_in.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <!--<scale-->
-        <!--android:fromXScale="0.9"-->
-        <!--android:fromYScale="0.9"-->
-        <!--android:toXScale="1.0"-->
-        <!--android:toYScale="1.0"-->
-        <!--android:pivotX="50%"-->
-        <!--android:pivotY="50%"-->
-        <!--android:interpolator="@android:anim/decelerate_interpolator"-->
-        <!--android:duration="220"/>-->
-
-    <!--<alpha android:fromAlpha="0.0"-->
-           <!--android:toAlpha="1.0"-->
-           <!--android:interpolator="@android:anim/decelerate_interpolator"-->
-           <!--android:duration="@android:integer/config_mediumAnimTime" />-->
-
-
-    <alpha
-        android:fromAlpha="0.0"
-        android:toAlpha="1.0"
-        android:interpolator="@anim/decelerate_cubic"
-        android:duration="150"/>
-
-    <scale
-        android:fromXScale=".8" android:toXScale="1.0"
-        android:fromYScale=".8" android:toYScale="1.0"
-        android:pivotX="50%p" android:pivotY="50%p"
-        android:interpolator="@anim/decelerate_cubic"
-        android:duration="150"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/scale_out.xml b/TMessagesProj/src/main/res/anim/scale_out.xml
deleted file mode 100644
index 11135b976..000000000
--- a/TMessagesProj/src/main/res/anim/scale_out.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <!--<scale-->
-        <!--android:fromXScale="1.0"-->
-        <!--android:fromYScale="1.0"-->
-        <!--android:toXScale="0.9"-->
-        <!--android:toYScale="0.9"-->
-        <!--android:pivotX="50%"-->
-        <!--android:pivotY="50%"-->
-        <!--android:interpolator="@android:anim/decelerate_interpolator"-->
-        <!--android:duration="220"/>-->
-
-    <!--<alpha-->
-        <!--android:fromAlpha="1.0"-->
-        <!--android:toAlpha="0.0"-->
-        <!--android:interpolator="@android:anim/decelerate_interpolator"-->
-        <!--android:duration="220" />-->
-
-    <alpha
-        android:fromAlpha="1.0"
-        android:toAlpha="0.0"
-        android:interpolator="@anim/decelerate_cubic"
-        android:duration="150"/>
-
-    <scale
-        android:fromXScale="1.0"
-        android:toXScale=".8"
-        android:fromYScale="1.0"
-        android:toYScale=".8"
-        android:pivotX="50%p"
-        android:pivotY="50%p"
-        android:interpolator="@anim/decelerate_cubic"
-        android:duration="150"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/slide_down.xml b/TMessagesProj/src/main/res/anim/slide_down.xml
deleted file mode 100644
index a61827005..000000000
--- a/TMessagesProj/src/main/res/anim/slide_down.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <translate
-        android:fromYDelta="-100%"
-        android:toYDelta="0"
-        android:duration="200"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/slide_up.xml b/TMessagesProj/src/main/res/anim/slide_up.xml
deleted file mode 100644
index ce5a71522..000000000
--- a/TMessagesProj/src/main/res/anim/slide_up.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <translate
-        android:fromYDelta="0%"
-        android:toYDelta="-100%"
-        android:duration="200"/>
-</set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addmember.png b/TMessagesProj/src/main/res/drawable-hdpi/addmember.png
deleted file mode 100755
index 73dbd9db1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/addmember.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bigtimer.png b/TMessagesProj/src/main/res/drawable-hdpi/bigtimer.png
deleted file mode 100755
index 083bb13a6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/bigtimer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png
deleted file mode 100644
index bd523d0c1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png
deleted file mode 100755
index 69e9ee758..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png
deleted file mode 100755
index 8a41f2a39..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png
deleted file mode 100755
index 24c5329b1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png
deleted file mode 100755
index a942fc9ce..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png
deleted file mode 100755
index c0a8a3d51..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png
deleted file mode 100755
index b782c3ab5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png
deleted file mode 100755
index 905048e45..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_w.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_w.png
new file mode 100755
index 000000000..007323ebc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png
deleted file mode 100755
index c427ad488..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_check_off_holo_light.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_check_off_holo_light.png
deleted file mode 100644
index 748c39bea..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_check_off_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_check_on_holo_light.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_check_on_holo_light.png
deleted file mode 100644
index 00657d875..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_check_on_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_down.9.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_down.9.png
deleted file mode 100644
index cf2fb9fab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_down.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_down.9.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_down.9.png
old mode 100644
new mode 100755
index 5405c2fab..a56c265ca
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_down.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_down.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_up.9.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_up.9.png
old mode 100644
new mode 100755
index 087e9b15c..c0d5850a4
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_up.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/btn_send_location_up.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btn_up.9.png b/TMessagesProj/src/main/res/drawable-hdpi/btn_up.9.png
deleted file mode 100644
index 687f975ee..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/btn_up.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/call.png b/TMessagesProj/src/main/res/drawable-hdpi/call.png
deleted file mode 100755
index 8a87c04b4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/call.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/check_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/check_blue.png
new file mode 100755
index 000000000..80ade6ab1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/check_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png
index 76759b873..dbb256bc3 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_check.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_check.png
index 2e341f051..11380095e 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_check.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_check.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_halfcheck.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_halfcheck.png
index 08f752c25..f75f9ccb2 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_halfcheck.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_halfcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_warning.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_warning.png
old mode 100644
new mode 100755
index f08efbf19..c1474e23b
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_warning.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_warning.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png
index 3853c42d0..7d13ee813 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png and b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png
index 1b0aec5a9..c33a4c2fc 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png and b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_default_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_default_holo.png
deleted file mode 100644
index 3f343f5ec..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_default_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_pressed_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_pressed_holo.png
deleted file mode 100644
index 4b6f07966..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/fastscroll_thumb_pressed_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating.png b/TMessagesProj/src/main/res/drawable-hdpi/floating.png
new file mode 100755
index 000000000..419d0b821
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile.png b/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile.png
new file mode 100755
index 000000000..f954a8a01
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile_pressed.png
new file mode 100755
index 000000000..916e21b9e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating3_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile.png b/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile.png
new file mode 100755
index 000000000..69e720a69
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile_pressed.png
new file mode 100755
index 000000000..547041866
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating4_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png
new file mode 100755
index 000000000..418c3ac59
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gallery.png b/TMessagesProj/src/main/res/drawable-hdpi/gallery.png
deleted file mode 100755
index 6bd0cda83..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/greydivider.9.png b/TMessagesProj/src/main/res/drawable-hdpi/greydivider.9.png
new file mode 100644
index 000000000..9a69cf43d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/greydivider.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/greydivider_bottom.9.png b/TMessagesProj/src/main/res/drawable-hdpi/greydivider_bottom.9.png
new file mode 100644
index 000000000..64d23a36c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/greydivider_bottom.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_aqua.png b/TMessagesProj/src/main/res/drawable-hdpi/group_aqua.png
deleted file mode 100755
index da6975c4e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/group_blue.png
deleted file mode 100755
index e39d84e69..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_green.png b/TMessagesProj/src/main/res/drawable-hdpi/group_green.png
deleted file mode 100755
index a412d4b5b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_orange.png b/TMessagesProj/src/main/res/drawable-hdpi/group_orange.png
deleted file mode 100755
index 7c6982707..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_pink.png b/TMessagesProj/src/main/res/drawable-hdpi/group_pink.png
deleted file mode 100755
index 496a43c0e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_red.png b/TMessagesProj/src/main/res/drawable-hdpi/group_red.png
deleted file mode 100755
index beced2b58..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_violet.png b/TMessagesProj/src/main/res/drawable-hdpi/group_violet.png
deleted file mode 100755
index f63bc86ab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/group_yellow.png b/TMessagesProj/src/main/res/drawable-hdpi/group_yellow.png
deleted file mode 100755
index 63e1704f0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/group_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/grouplist.png b/TMessagesProj/src/main/res/drawable-hdpi/grouplist.png
deleted file mode 100755
index d57569f74..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/grouplist.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/header_shadow.png b/TMessagesProj/src/main/res/drawable-hdpi/header_shadow.png
new file mode 100755
index 000000000..9adb8afca
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/header_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/header_timer.png b/TMessagesProj/src/main/res/drawable-hdpi/header_timer.png
index d9ad068b2..0c17b9bba 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/header_timer.png and b/TMessagesProj/src/main/res/drawable-hdpi/header_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/header_timer2.png b/TMessagesProj/src/main/res/drawable-hdpi/header_timer2.png
index ed8261f29..019ad9c9a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/header_timer2.png and b/TMessagesProj/src/main/res/drawable-hdpi/header_timer2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach.png
old mode 100644
new mode 100755
index 20722afcc..0ab1bfbda
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach3.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach3.png
new file mode 100755
index 000000000..7529e81e6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_attach3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back.png
index 2e5545fdc..5fa494878 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_grey.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_grey.png
new file mode 100755
index 000000000..0ca6612a9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_white.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_white.png
deleted file mode 100644
index cd1dcf6d7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_back_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_compose.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_compose.png
deleted file mode 100755
index b991582c2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_compose.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_doc.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_doc.png
old mode 100644
new mode 100755
index 30ff62d19..25e2c036b
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_doc.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_doc.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done.png
deleted file mode 100644
index 7cbf465e6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done_gray.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done_gray.png
deleted file mode 100644
index 1cd56af3f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_done_gray.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_copy.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_copy.png
old mode 100644
new mode 100755
index bd84232ac..64ed7cd05
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_copy.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_copy.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_delete.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_delete.png
old mode 100644
new mode 100755
index 6fbbd1242..9af1eb095
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_delete.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_delete.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png
old mode 100644
new mode 100755
index 0b0048d5c..cfa12ce25
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_location.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_location.png
index fe539cf5c..9f11eace7 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_location.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png
deleted file mode 100755
index a9237d7b9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other.png
index f54ad9c5d..fdc4a5ad2 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white2.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white2.png
deleted file mode 100755
index 936d968c3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_search.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_search.png
old mode 100644
new mode 100755
index 8d3786411..a2fc5b2e7
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_search.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_search.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_share.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_share.png
deleted file mode 100644
index 961fa5458..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_share.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png
index e8d247830..1c60351cb 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png
index 474c949fd..52bf60516 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png
index 35aa4306c..b2b0caaa5 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png
index b1a87b161..193373521 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_auth_next.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_auth_next.png
deleted file mode 100644
index 1ce54e2fe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_auth_next.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_directory.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_directory.png
old mode 100644
new mode 100755
index 0d999eeab..e3dccd298
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_directory.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_directory.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_done.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_done.png
old mode 100644
new mode 100755
index a62a06db8..f42a0e2d2
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_done.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_done.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_edit.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_edit.png
deleted file mode 100644
index df231b32a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_edit.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_external_storage.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_external_storage.png
old mode 100644
new mode 100755
index 6b6f61138..5b7c4e195
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_external_storage.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_external_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png
old mode 100644
new mode 100755
index 135cc0fd1..a819fd9f1
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_blue.png
deleted file mode 100644
index 9d181e148..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_green.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_green.png
deleted file mode 100644
index a7adbff61..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_header.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_header.png
new file mode 100755
index 000000000..07be8fc72
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_lock_header.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross.png
deleted file mode 100644
index 9d7f7d9ff..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross_custom.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross_custom.png
deleted file mode 100644
index 865ffa1ab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_btn_cross_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_in_cross.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_in_cross.png
deleted file mode 100644
index cf625a21b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_in_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png
old mode 100644
new mode 100755
index 87b5b2fda..40977e866
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_cross.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_cross.png
deleted file mode 100644
index 5bf2732bb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_send_message.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_send_message.png
deleted file mode 100755
index 3ad169b62..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_profile_send_message.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_send_disabled.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_send_disabled.png
deleted file mode 100755
index 4473d1c6f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_send_disabled.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_storage.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_storage.png
old mode 100644
new mode 100755
index 696acc689..fb446d768
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_storage.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png
index 8eb54b3ca..a8d1b924c 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white.png b/TMessagesProj/src/main/res/drawable-hdpi/layer_shadow.png
similarity index 51%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white.png
rename to TMessagesProj/src/main/res/drawable-hdpi/layer_shadow.png
index 40c40ba5e..9bb9bf101 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white.png and b/TMessagesProj/src/main/res/drawable-hdpi/layer_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/list_broadcast.png b/TMessagesProj/src/main/res/drawable-hdpi/list_broadcast.png
new file mode 100755
index 000000000..54a56f821
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/list_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/list_group.png b/TMessagesProj/src/main/res/drawable-hdpi/list_group.png
new file mode 100755
index 000000000..bde0ddcb3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/list_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/list_secret.png b/TMessagesProj/src/main/res/drawable-hdpi/list_secret.png
new file mode 100755
index 000000000..54ed6bf28
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/list_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_broadcast.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_broadcast.png
new file mode 100755
index 000000000..439cbb7cd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_contacts.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_contacts.png
new file mode 100755
index 000000000..d2ce6e645
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_contacts.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_help.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_help.png
new file mode 100755
index 000000000..3acaa23ee
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_help.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_invite.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_invite.png
new file mode 100755
index 000000000..eee0ec8f1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_invite.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_newgroup.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_newgroup.png
new file mode 100755
index 000000000..09dec72f6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_newgroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_secret.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_secret.png
new file mode 100755
index 000000000..60c65a29c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_settings.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_settings.png
new file mode 100755
index 000000000..012774675
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_settings.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_shadow.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_shadow.png
new file mode 100755
index 000000000..e60f9bf98
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress.png b/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress.png
deleted file mode 100644
index f22cd844f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress_custom.png b/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress_custom.png
deleted file mode 100644
index d99e53cf3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/p2r_progress_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/phone_grey.png b/TMessagesProj/src/main/res/drawable-hdpi/phone_grey.png
new file mode 100755
index 000000000..e1d32825a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/phone_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_back.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_back.png
deleted file mode 100755
index c9eb0018d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_edit_spinner.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_edit_spinner.png
deleted file mode 100644
index 160a1d3ad..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_edit_spinner.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_normal.9.png
deleted file mode 100644
index fedd82758..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_normal.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_pressed.9.png
deleted file mode 100644
index 91099f3d5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photo_spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photo_w.png b/TMessagesProj/src/main/res/drawable-hdpi/photo_w.png
new file mode 100755
index 000000000..2aae32939
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photo_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photobadge.9.png b/TMessagesProj/src/main/res/drawable-hdpi/photobadge.9.png
index e6d9b2289..003ad33c0 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photobadge.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/photobadge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/popup_fixed.9.png
old mode 100644
new mode 100755
index 2777b18c6..07c30b766
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/popup_fixed.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/profile_list.png b/TMessagesProj/src/main/res/drawable-hdpi/profile_list.png
new file mode 100755
index 000000000..c201168e4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/profile_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/round_check2.png b/TMessagesProj/src/main/res/drawable-hdpi/round_check2.png
new file mode 100755
index 000000000..f00b4ffd2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/round_check2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_dark.9.png b/TMessagesProj/src/main/res/drawable-hdpi/search_dark.9.png
new file mode 100644
index 000000000..a178a67f0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/search_dark.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_dark_activated.9.png b/TMessagesProj/src/main/res/drawable-hdpi/search_dark_activated.9.png
new file mode 100644
index 000000000..d5d4c78b0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/search_dark_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/search_light.9.png
old mode 100755
new mode 100644
index 36e71d85d..677298004
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/search_light.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/search_light.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_light_activated.9.png b/TMessagesProj/src/main/res/drawable-hdpi/search_light_activated.9.png
new file mode 100644
index 000000000..7fb04f901
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/search_light_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/shadow.png b/TMessagesProj/src/main/res/drawable-hdpi/shadow.png
deleted file mode 100755
index 30e6eec6a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/shadow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/spinner.9.png b/TMessagesProj/src/main/res/drawable-hdpi/spinner.9.png
deleted file mode 100755
index e8207a07d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/spinner.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/spinner_pressed.9.png
deleted file mode 100755
index dccf010ae..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_off1.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_off1.png
deleted file mode 100755
index c7188b842..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/switch_off1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_off1_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_off1_pressed.png
deleted file mode 100644
index 3e96b22b2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/switch_off1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_on1.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_on1.png
deleted file mode 100755
index f5b18f145..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/switch_on1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_on1_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_on1_pressed.png
deleted file mode 100644
index c2f9c5b29..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/switch_on1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on1.9.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on1.9.png
new file mode 100644
index 000000000..8e7b62f04
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on1.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on2.9.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on2.9.png
new file mode 100644
index 000000000..adcb9e96c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/switch_to_on2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/switch_track.9.png b/TMessagesProj/src/main/res/drawable-hdpi/switch_track.9.png
new file mode 100644
index 000000000..0ebe65e79
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/switch_track.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png
deleted file mode 100644
index 254352f2e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/textfield_activated.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_activated.9.png
deleted file mode 100644
index 98ba91f8a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/textfield_activated.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/textfield_default.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_default.9.png
deleted file mode 100644
index 5841e05b6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/textfield_default.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled.9.png
deleted file mode 100644
index d7f78ab70..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled2.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled2.9.png
deleted file mode 100644
index 312a0f48c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/textfield_disabled2.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/textfield_focused.9.png b/TMessagesProj/src/main/res/drawable-hdpi/textfield_focused.9.png
deleted file mode 100644
index 5fb8f7ee0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/textfield_focused.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tooltip.png b/TMessagesProj/src/main/res/drawable-hdpi/tooltip.png
deleted file mode 100755
index 58ce90239..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/tooltip.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/top_pane.9.png b/TMessagesProj/src/main/res/drawable-hdpi/top_pane.9.png
deleted file mode 100644
index 5e4df2855..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/top_pane.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/top_pane_custom.9.png b/TMessagesProj/src/main/res/drawable-hdpi/top_pane_custom.9.png
deleted file mode 100644
index 202926d1b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/top_pane_custom.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_aqua.png b/TMessagesProj/src/main/res/drawable-hdpi/user_aqua.png
deleted file mode 100755
index e90ede353..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/user_blue.png
deleted file mode 100755
index c538f65dd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_green.png b/TMessagesProj/src/main/res/drawable-hdpi/user_green.png
deleted file mode 100755
index 6a82289ba..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_orange.png b/TMessagesProj/src/main/res/drawable-hdpi/user_orange.png
deleted file mode 100755
index 9ad5571c9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_pink.png b/TMessagesProj/src/main/res/drawable-hdpi/user_pink.png
deleted file mode 100755
index ff199e925..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_placeholder.png b/TMessagesProj/src/main/res/drawable-hdpi/user_placeholder.png
deleted file mode 100644
index a1c989dfc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_placeholder.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_red.png b/TMessagesProj/src/main/res/drawable-hdpi/user_red.png
deleted file mode 100755
index b87a708d9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_violet.png b/TMessagesProj/src/main/res/drawable-hdpi/user_violet.png
deleted file mode 100755
index eacd33232..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/user_yellow.png b/TMessagesProj/src/main/res/drawable-hdpi/user_yellow.png
deleted file mode 100755
index da5bb3cc8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/user_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/viewbtn.9.png b/TMessagesProj/src/main/res/drawable-hdpi/viewbtn.9.png
deleted file mode 100644
index a1e86f938..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/viewbtn.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/viewbtn_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/viewbtn_pressed.9.png
deleted file mode 100644
index 95e117301..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/viewbtn_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ab_progress.png b/TMessagesProj/src/main/res/drawable-ldpi/ab_progress.png
deleted file mode 100644
index 1a7aa06ad..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ab_progress.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png
deleted file mode 100755
index fd1dd7433..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png
deleted file mode 100755
index cfa9e2b03..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/addcontact_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/addmember.png b/TMessagesProj/src/main/res/drawable-ldpi/addmember.png
deleted file mode 100755
index 28df8141f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/addmember.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1.png b/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1.png
deleted file mode 100755
index 4800fcb57..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1_pressed.png
deleted file mode 100755
index 4800fcb57..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2.png b/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2.png
deleted file mode 100755
index eb5f9ae5c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2_pressed.png
deleted file mode 100755
index c4aa51e28..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audiocancel2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audioload1.png b/TMessagesProj/src/main/res/drawable-ldpi/audioload1.png
deleted file mode 100755
index 5eb0d5b89..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audioload1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audioload1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/audioload1_pressed.png
deleted file mode 100755
index c62e90c54..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audioload1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audioload2.png b/TMessagesProj/src/main/res/drawable-ldpi/audioload2.png
deleted file mode 100755
index ad3f00e0c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audioload2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/audioload2_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/audioload2_pressed.png
deleted file mode 100755
index a285a1588..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/audioload2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/bigtimer.png b/TMessagesProj/src/main/res/drawable-ldpi/bigtimer.png
deleted file mode 100755
index 69bc23298..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/bigtimer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png
deleted file mode 100644
index e0c55dc12..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png
deleted file mode 100644
index cd47e3ee8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png
deleted file mode 100644
index 6fc507a95..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png
deleted file mode 100644
index 532a1f098..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png
deleted file mode 100644
index 09916a977..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png
deleted file mode 100755
index 842ff62e8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png
deleted file mode 100755
index e0a722174..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png
deleted file mode 100755
index 099d3caac..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png
deleted file mode 100755
index 84d22c9a9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png
deleted file mode 100755
index a6ef2ff5f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png
deleted file mode 100755
index 44969ccea..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png
deleted file mode 100755
index 5b1e01588..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png
deleted file mode 100755
index e81e8c8fd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png
deleted file mode 100644
index 862afedd3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/burn.png b/TMessagesProj/src/main/res/drawable-ldpi/burn.png
deleted file mode 100755
index 9486b66ff..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/burn.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/call.png b/TMessagesProj/src/main/res/drawable-ldpi/call.png
deleted file mode 100755
index fd4919add..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/call.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/cancel_big.png b/TMessagesProj/src/main/res/drawable-ldpi/cancel_big.png
deleted file mode 100755
index 64db5953e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/cancel_big.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/circle.png b/TMessagesProj/src/main/res/drawable-ldpi/circle.png
deleted file mode 100755
index d1e03ff93..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/circle.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/circle1.png b/TMessagesProj/src/main/res/drawable-ldpi/circle1.png
deleted file mode 100755
index 62ace1342..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/circle1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/circle_big.png b/TMessagesProj/src/main/res/drawable-ldpi/circle_big.png
deleted file mode 100755
index 1ed07582b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/circle_big.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-ldpi/dialogs_badge.9.png
deleted file mode 100644
index 3081873eb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_badge.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_check.png b/TMessagesProj/src/main/res/drawable-ldpi/dialogs_check.png
deleted file mode 100755
index fc7513c24..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_check.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_halfcheck.png b/TMessagesProj/src/main/res/drawable-ldpi/dialogs_halfcheck.png
deleted file mode 100755
index a158d1bb6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_halfcheck.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_warning.png b/TMessagesProj/src/main/res/drawable-ldpi/dialogs_warning.png
deleted file mode 100644
index 88b06cf31..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/dialogs_warning.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png
deleted file mode 100755
index c1a124ab9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/doc_blue.png
deleted file mode 100644
index 91dffa55c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doc_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_green.png b/TMessagesProj/src/main/res/drawable-ldpi/doc_green.png
deleted file mode 100644
index 4cef2bc71..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doc_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doccancel_b.png b/TMessagesProj/src/main/res/drawable-ldpi/doccancel_b.png
deleted file mode 100644
index fbaba5983..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doccancel_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doccancel_g.png b/TMessagesProj/src/main/res/drawable-ldpi/doccancel_g.png
deleted file mode 100644
index c700483b1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doccancel_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/docload_b.png b/TMessagesProj/src/main/res/drawable-ldpi/docload_b.png
deleted file mode 100644
index 129a045fa..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/docload_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/docload_g.png b/TMessagesProj/src/main/res/drawable-ldpi/docload_g.png
deleted file mode 100644
index 1547d6694..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/docload_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/docpause_b.png b/TMessagesProj/src/main/res/drawable-ldpi/docpause_b.png
deleted file mode 100644
index d57a51a58..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/docpause_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/docpause_g.png b/TMessagesProj/src/main/res/drawable-ldpi/docpause_g.png
deleted file mode 100644
index 41dc34fab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/docpause_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/editheader.9.png b/TMessagesProj/src/main/res/drawable-ldpi/editheader.9.png
deleted file mode 100644
index 20fae4b68..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/editheader.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_default_holo.png b/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_default_holo.png
deleted file mode 100644
index b2aa1e95c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_default_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_pressed_holo.png b/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_pressed_holo.png
deleted file mode 100644
index 5702423b9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/fastscroll_thumb_pressed_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gallery.png b/TMessagesProj/src/main/res/drawable-ldpi/gallery.png
deleted file mode 100755
index 08b2617e0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_aqua.png b/TMessagesProj/src/main/res/drawable-ldpi/group_aqua.png
deleted file mode 100755
index 951346203..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/group_blue.png
deleted file mode 100755
index 2abaffe2b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_green.png b/TMessagesProj/src/main/res/drawable-ldpi/group_green.png
deleted file mode 100755
index 2b2a91c69..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_orange.png b/TMessagesProj/src/main/res/drawable-ldpi/group_orange.png
deleted file mode 100755
index 9914c8618..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_pink.png b/TMessagesProj/src/main/res/drawable-ldpi/group_pink.png
deleted file mode 100755
index 9de7568b9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_red.png b/TMessagesProj/src/main/res/drawable-ldpi/group_red.png
deleted file mode 100755
index 17854ce79..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_violet.png b/TMessagesProj/src/main/res/drawable-ldpi/group_violet.png
deleted file mode 100755
index be9b88c5f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/group_yellow.png b/TMessagesProj/src/main/res/drawable-ldpi/group_yellow.png
deleted file mode 100755
index abdfd7a0b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/group_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/grouplist.png b/TMessagesProj/src/main/res/drawable-ldpi/grouplist.png
deleted file mode 100755
index aff6d7ab5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/grouplist.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/header_timer.png b/TMessagesProj/src/main/res/drawable-ldpi/header_timer.png
deleted file mode 100755
index 4d386984c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/header_timer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/header_timer2.png b/TMessagesProj/src/main/res/drawable-ldpi/header_timer2.png
deleted file mode 100755
index 12b1fa8b7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/header_timer2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_attach.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_attach.png
deleted file mode 100644
index 2f4e94b05..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_attach.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_back.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_back.png
deleted file mode 100755
index b96a1289f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_compose.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_compose.png
deleted file mode 100755
index ce2310d06..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_compose.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_delete_white.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_delete_white.png
deleted file mode 100644
index 5cc4f8f35..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_delete_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_doc.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_doc.png
deleted file mode 100644
index 6f5029f42..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_doc.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done.png
deleted file mode 100644
index b24a081b2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done_gray.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done_gray.png
deleted file mode 100644
index 2145393a6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_done_gray.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_copy.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_copy.png
deleted file mode 100644
index cc282899b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_copy.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_delete.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_delete.png
deleted file mode 100644
index 25b06608c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_delete.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_forward.png
deleted file mode 100644
index 913ab080d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_fwd_forward.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_location.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_location.png
deleted file mode 100755
index 1c292ec4d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_logo.png
deleted file mode 100755
index 5170ace06..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_logo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_new.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_new.png
deleted file mode 100755
index a98065183..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_new.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other.png
deleted file mode 100755
index b01d9808e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other_white2.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other_white2.png
deleted file mode 100755
index 9ff5bd3e7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_other_white2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_search.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_search.png
deleted file mode 100644
index a4930c587..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_search.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share.png
deleted file mode 100644
index 67803f8ef..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share_white.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share_white.png
deleted file mode 100644
index 7cb39f52d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_ab_share_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_gallery.png
deleted file mode 100755
index f281584c3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_location.png
deleted file mode 100755
index e9f5dd3a4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_photo.png
deleted file mode 100755
index 938fdc801..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_video.png
deleted file mode 100755
index a8d090f40..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_attach_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_auth_next.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_auth_next.png
deleted file mode 100644
index 424b9eb2f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_auth_next.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_done.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_done.png
deleted file mode 100644
index f680be979..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_edit.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_edit.png
deleted file mode 100644
index e8bf3fb5a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_edit.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_gallery_background.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_gallery_background.png
deleted file mode 100644
index db9cd6245..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_gallery_background.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 5f95431f3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_blue.png
deleted file mode 100644
index ba660e007..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_green.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_green.png
deleted file mode 100644
index 55dc2ba88..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_white.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_white.png
deleted file mode 100644
index 2b86e3eee..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_lock_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross.png
deleted file mode 100644
index efe703cee..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross_custom.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross_custom.png
deleted file mode 100644
index 064e1e29f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_btn_cross_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_hide.png
deleted file mode 100644
index 38baf3602..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_hide.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_kb.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_kb.png
deleted file mode 100644
index 3927a1aaf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_kb.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_smiles.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_smiles.png
deleted file mode 100755
index e6b2f6325..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_msg_panel_smiles.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_cross.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_cross.png
deleted file mode 100644
index 36e31a5ab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_send_message.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_send_message.png
deleted file mode 100755
index 1749ddd6b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_profile_send_message.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_send.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_send.png
deleted file mode 100755
index 9e921724d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_send.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_send_disabled.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_send_disabled.png
deleted file mode 100755
index 8a2c19b5a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_send_disabled.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace.png
deleted file mode 100644
index 2d938e8c4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace_active.png
deleted file mode 100644
index 0f7baf0d8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_backspace_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell.png
deleted file mode 100644
index d25b1eb50..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell_active.png
deleted file mode 100644
index 0229c9b60..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_bell_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car.png
deleted file mode 100644
index 10cea0ed9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car_active.png
deleted file mode 100644
index 2d78ad258..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_car_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower.png
deleted file mode 100644
index 4ebbd8da9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower_active.png
deleted file mode 100644
index ff1ba79f6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_flower_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid.png
deleted file mode 100644
index 48c2f825c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid_active.png
deleted file mode 100644
index da712734e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_grid_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent.png
deleted file mode 100644
index 9766b4906..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent_active.png
deleted file mode 100644
index f72dc2da0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_recent_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile.png
deleted file mode 100644
index 0b46cd28e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile_active.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile_active.png
deleted file mode 100644
index e5b848287..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_smiles_smile_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/ic_video.png b/TMessagesProj/src/main/res/drawable-ldpi/ic_video.png
deleted file mode 100644
index 1b24900fb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/ic_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro1.png b/TMessagesProj/src/main/res/drawable-ldpi/intro1.png
deleted file mode 100755
index d065bb3c6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro2.png b/TMessagesProj/src/main/res/drawable-ldpi/intro2.png
deleted file mode 100755
index a318fb8bd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro3.png b/TMessagesProj/src/main/res/drawable-ldpi/intro3.png
deleted file mode 100755
index f9ac0af02..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro4.png b/TMessagesProj/src/main/res/drawable-ldpi/intro4.png
deleted file mode 100755
index 1c167bfdc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro4.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro5.png b/TMessagesProj/src/main/res/drawable-ldpi/intro5.png
deleted file mode 100755
index e59de2832..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro5.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro6.png b/TMessagesProj/src/main/res/drawable-ldpi/intro6.png
deleted file mode 100755
index 82db2e66e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro6.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro7.png b/TMessagesProj/src/main/res/drawable-ldpi/intro7.png
deleted file mode 100755
index ba759b115..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro7.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/load_big.png b/TMessagesProj/src/main/res/drawable-ldpi/load_big.png
deleted file mode 100755
index c3f2f7791..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/load_big.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/map_pin.png b/TMessagesProj/src/main/res/drawable-ldpi/map_pin.png
deleted file mode 100644
index 6132d6c4d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/map_pin.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/mic.png b/TMessagesProj/src/main/res/drawable-ldpi/mic.png
deleted file mode 100755
index ae464202a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/mic.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/mic_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/mic_pressed.png
deleted file mode 100755
index 761d1603e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/mic_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_check.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_check.png
deleted file mode 100755
index 203d059ec..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_check.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_check_w.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_check_w.png
deleted file mode 100755
index 945d09ab7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_check_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png
deleted file mode 100755
index 1e505955d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png
deleted file mode 100755
index 3cbc2ff8c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck.png
deleted file mode 100755
index 73f290a1a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck_w.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck_w.png
deleted file mode 100755
index 1ba678ed8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_halfcheck_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_in.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_in.9.png
deleted file mode 100644
index a27f9ecd0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_in.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo.9.png
deleted file mode 100644
index ff1d16bf4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo_selected.9.png
deleted file mode 100644
index 4f0bc4829..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_photo_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_selected.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_in_selected.9.png
deleted file mode 100644
index f7f620b76..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_in_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_out.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_out.9.png
deleted file mode 100644
index c96cc68b5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_out.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo.9.png
deleted file mode 100644
index 7291b7696..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo_selected.9.png
deleted file mode 100644
index b22d8be2c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_photo_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_selected.9.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_out_selected.9.png
deleted file mode 100644
index 4d0027c34..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_out_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_warning.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_warning.png
deleted file mode 100644
index b391d147e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/msg_warning.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/newmsg_divider.png b/TMessagesProj/src/main/res/drawable-ldpi/newmsg_divider.png
deleted file mode 100755
index 12298133f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/newmsg_divider.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/nophotos.9.png b/TMessagesProj/src/main/res/drawable-ldpi/nophotos.9.png
deleted file mode 100644
index 05a2c8199..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/nophotos.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/notification.png b/TMessagesProj/src/main/res/drawable-ldpi/notification.png
deleted file mode 100755
index 2fe4f6b4e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/notification.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/pagedown.png b/TMessagesProj/src/main/res/drawable-ldpi/pagedown.png
deleted file mode 100755
index 4689dffd1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/pagedown.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/pause1.png b/TMessagesProj/src/main/res/drawable-ldpi/pause1.png
deleted file mode 100755
index 2c7ff54b4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/pause1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/pause1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/pause1_pressed.png
deleted file mode 100755
index 4ef1f6a72..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/pause1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/pause2.png b/TMessagesProj/src/main/res/drawable-ldpi/pause2.png
deleted file mode 100755
index 812828743..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/pause2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/pause2_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/pause2_pressed.png
deleted file mode 100755
index b6fbdfd5b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/pause2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photo_back.png b/TMessagesProj/src/main/res/drawable-ldpi/photo_back.png
deleted file mode 100755
index 14f9ad5e8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photo_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photobadge.9.png b/TMessagesProj/src/main/res/drawable-ldpi/photobadge.9.png
deleted file mode 100644
index 0173130bd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photobadge.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photoborder.9.png b/TMessagesProj/src/main/res/drawable-ldpi/photoborder.9.png
deleted file mode 100644
index 2a33e9d66..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photoborder.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png b/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png
deleted file mode 100644
index bce279ae8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photocheck.png b/TMessagesProj/src/main/res/drawable-ldpi/photocheck.png
deleted file mode 100755
index 66c471720..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photocheck.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photogif.png b/TMessagesProj/src/main/res/drawable-ldpi/photogif.png
deleted file mode 100644
index 0915f0e48..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photogif.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photoload.png b/TMessagesProj/src/main/res/drawable-ldpi/photoload.png
deleted file mode 100644
index 5c50b3de9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photoload.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photopause.png b/TMessagesProj/src/main/res/drawable-ldpi/photopause.png
deleted file mode 100644
index 1f95c38a7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photopause.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/phototime.9.png b/TMessagesProj/src/main/res/drawable-ldpi/phototime.9.png
deleted file mode 100644
index 25bf2e271..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/phototime.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/play1.png b/TMessagesProj/src/main/res/drawable-ldpi/play1.png
deleted file mode 100755
index df10a3ee1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/play1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/play1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/play1_pressed.png
deleted file mode 100755
index 60aef6fbe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/play1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/play2.png b/TMessagesProj/src/main/res/drawable-ldpi/play2.png
deleted file mode 100755
index 6eca1a394..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/play2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/play2_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/play2_pressed.png
deleted file mode 100755
index b3bdee286..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/play2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/play_big.png b/TMessagesProj/src/main/res/drawable-ldpi/play_big.png
deleted file mode 100755
index 583153249..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/play_big.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/player1.png b/TMessagesProj/src/main/res/drawable-ldpi/player1.png
deleted file mode 100755
index e49d95d94..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/player1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/player1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/player1_pressed.png
deleted file mode 100755
index 32e7dde9e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/player1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/player2.png b/TMessagesProj/src/main/res/drawable-ldpi/player2.png
deleted file mode 100755
index 46551ea5e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/player2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/player2_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/player2_pressed.png
deleted file mode 100755
index c16103c39..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/player2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png b/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png
deleted file mode 100644
index d03cb384e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/plus.png b/TMessagesProj/src/main/res/drawable-ldpi/plus.png
deleted file mode 100755
index dfc3173da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/plus.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/rec.png b/TMessagesProj/src/main/res/drawable-ldpi/rec.png
deleted file mode 100755
index 2d08c58f6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/rec.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/regbtn2.9.png b/TMessagesProj/src/main/res/drawable-ldpi/regbtn2.9.png
deleted file mode 100644
index 6f9875141..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/regbtn2.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/regbtn2_pressed.9.png b/TMessagesProj/src/main/res/drawable-ldpi/regbtn2_pressed.9.png
deleted file mode 100644
index 2854a90e3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/regbtn2_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_large.png b/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_large.png
deleted file mode 100755
index c0558b25f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_large.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small.png b/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small.png
deleted file mode 100755
index fb868f484..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_active.png b/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_active.png
deleted file mode 100755
index 1b18412d6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_grey.png b/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_grey.png
deleted file mode 100755
index c31d5db9d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/selectphoto_small_grey.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/shadow.png b/TMessagesProj/src/main/res/drawable-ldpi/shadow.png
deleted file mode 100755
index 969705413..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/shadow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/slidearrow.png b/TMessagesProj/src/main/res/drawable-ldpi/slidearrow.png
deleted file mode 100755
index 12fae28d7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/slidearrow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/spinner.9.png b/TMessagesProj/src/main/res/drawable-ldpi/spinner.9.png
deleted file mode 100755
index 58326c446..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/spinner.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-ldpi/spinner_pressed.9.png
deleted file mode 100755
index ac4e98186..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/switch_off1.png b/TMessagesProj/src/main/res/drawable-ldpi/switch_off1.png
deleted file mode 100755
index a7e03809b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/switch_off1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/switch_off1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/switch_off1_pressed.png
deleted file mode 100755
index 8da1ae313..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/switch_off1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/switch_on1.png b/TMessagesProj/src/main/res/drawable-ldpi/switch_on1.png
deleted file mode 100755
index d0f8cde4a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/switch_on1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/switch_on1_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/switch_on1_pressed.png
deleted file mode 100755
index a58b8857f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/switch_on1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/system_black.9.png b/TMessagesProj/src/main/res/drawable-ldpi/system_black.9.png
deleted file mode 100644
index a4fa2672f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/system_black.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-ldpi/system_blue.9.png
deleted file mode 100644
index eb9a4c814..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/system_blue.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/system_loader1.png b/TMessagesProj/src/main/res/drawable-ldpi/system_loader1.png
deleted file mode 100755
index 6823c3748..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/system_loader1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/system_loader2.png b/TMessagesProj/src/main/res/drawable-ldpi/system_loader2.png
deleted file mode 100755
index 96a5f8874..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/system_loader2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-ldpi/telegram_avatar.png
deleted file mode 100644
index e56bb3a37..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/telegram_avatar.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/tooltip.png b/TMessagesProj/src/main/res/drawable-ldpi/tooltip.png
deleted file mode 100755
index 4385e07b4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/tooltip.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_aqua.png b/TMessagesProj/src/main/res/drawable-ldpi/user_aqua.png
deleted file mode 100755
index 1fc80871e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/user_blue.png
deleted file mode 100755
index 06f8c3e67..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_green.png b/TMessagesProj/src/main/res/drawable-ldpi/user_green.png
deleted file mode 100755
index 807bf357d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_orange.png b/TMessagesProj/src/main/res/drawable-ldpi/user_orange.png
deleted file mode 100755
index 065fa207f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_pink.png b/TMessagesProj/src/main/res/drawable-ldpi/user_pink.png
deleted file mode 100755
index 553d52b03..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_placeholder.png b/TMessagesProj/src/main/res/drawable-ldpi/user_placeholder.png
deleted file mode 100644
index a8d9b491c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_placeholder.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_red.png b/TMessagesProj/src/main/res/drawable-ldpi/user_red.png
deleted file mode 100755
index e75da1f87..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_violet.png b/TMessagesProj/src/main/res/drawable-ldpi/user_violet.png
deleted file mode 100755
index e85fbc933..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/user_yellow.png b/TMessagesProj/src/main/res/drawable-ldpi/user_yellow.png
deleted file mode 100755
index 5356ce583..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/user_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/video_play.png b/TMessagesProj/src/main/res/drawable-ldpi/video_play.png
deleted file mode 100644
index ef7a33726..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/video_play.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png b/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png
deleted file mode 100755
index 8a8a2744b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png
deleted file mode 100755
index 1a6e341f0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/viewbtn.9.png b/TMessagesProj/src/main/res/drawable-ldpi/viewbtn.9.png
deleted file mode 100644
index 222e7611a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/viewbtn.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/viewbtn_pressed.9.png b/TMessagesProj/src/main/res/drawable-ldpi/viewbtn_pressed.9.png
deleted file mode 100644
index 8e12f5157..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/viewbtn_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/addmember.png b/TMessagesProj/src/main/res/drawable-mdpi/addmember.png
deleted file mode 100755
index c23e2ff07..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/addmember.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bigtimer.png b/TMessagesProj/src/main/res/drawable-mdpi/bigtimer.png
deleted file mode 100755
index 6e92a895b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/bigtimer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png
deleted file mode 100644
index db6c94111..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png
deleted file mode 100755
index ee955dee9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png
deleted file mode 100755
index cfe7cea90..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png
deleted file mode 100755
index 322153280..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png
deleted file mode 100755
index 2f3b81594..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png
deleted file mode 100755
index cace0d662..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png
deleted file mode 100755
index d63200980..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png
deleted file mode 100755
index fb7135aa0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_w.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_w.png
new file mode 100755
index 000000000..53ba97a4a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png
deleted file mode 100755
index 9ed3aa714..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_check_off_holo_light.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_check_off_holo_light.png
deleted file mode 100644
index 34ebe3082..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_check_off_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_check_on_holo_light.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_check_on_holo_light.png
deleted file mode 100644
index f3257c8f4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_check_on_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_down.9.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_down.9.png
deleted file mode 100644
index 96c7adcd3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_down.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_down.9.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_down.9.png
old mode 100644
new mode 100755
index d72e7a325..64a9c8672
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_down.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_down.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_up.9.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_up.9.png
old mode 100644
new mode 100755
index affabe37e..eb2bc09db
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_up.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/btn_send_location_up.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btn_up.9.png b/TMessagesProj/src/main/res/drawable-mdpi/btn_up.9.png
deleted file mode 100644
index 2fb6b6678..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/btn_up.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/call.png b/TMessagesProj/src/main/res/drawable-mdpi/call.png
deleted file mode 100755
index d4ce6a788..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/call.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/check_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/check_blue.png
new file mode 100755
index 000000000..c37aa71b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/check_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png
index 81960234d..2c32c51ef 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_check.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_check.png
index a6b157a09..072cce7cd 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_check.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_check.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_halfcheck.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_halfcheck.png
index ea5a36bc1..0a0d29d9f 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_halfcheck.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_halfcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_warning.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_warning.png
old mode 100644
new mode 100755
index 997da977c..0c0f3fb5f
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_warning.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_warning.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png
index 37a56ecc4..a65aa9da9 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png and b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png
index 3f922d7dc..069ff82af 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png and b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_default_holo.png b/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_default_holo.png
deleted file mode 100644
index 7938250db..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_default_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_pressed_holo.png b/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_pressed_holo.png
deleted file mode 100644
index 19253e46f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/fastscroll_thumb_pressed_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating.png b/TMessagesProj/src/main/res/drawable-mdpi/floating.png
new file mode 100755
index 000000000..11b10cf31
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile.png b/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile.png
new file mode 100755
index 000000000..d2e829c95
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile_pressed.png
new file mode 100755
index 000000000..7689faa17
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating3_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile.png b/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile.png
new file mode 100755
index 000000000..a04f37396
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile_pressed.png
new file mode 100755
index 000000000..d1082b32d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating4_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png
new file mode 100755
index 000000000..bdcb34f27
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gallery.png b/TMessagesProj/src/main/res/drawable-mdpi/gallery.png
deleted file mode 100755
index 4eef8a0a9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/greydivider.9.png b/TMessagesProj/src/main/res/drawable-mdpi/greydivider.9.png
new file mode 100644
index 000000000..48a212597
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/greydivider.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/greydivider_bottom.9.png b/TMessagesProj/src/main/res/drawable-mdpi/greydivider_bottom.9.png
new file mode 100644
index 000000000..d8fc75bc8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/greydivider_bottom.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_aqua.png b/TMessagesProj/src/main/res/drawable-mdpi/group_aqua.png
deleted file mode 100755
index 79acb836e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/group_blue.png
deleted file mode 100755
index 8afd4c0d3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_green.png b/TMessagesProj/src/main/res/drawable-mdpi/group_green.png
deleted file mode 100755
index 9ebf13077..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_orange.png b/TMessagesProj/src/main/res/drawable-mdpi/group_orange.png
deleted file mode 100755
index d73b1a4fd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_pink.png b/TMessagesProj/src/main/res/drawable-mdpi/group_pink.png
deleted file mode 100755
index 7bad9b035..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_red.png b/TMessagesProj/src/main/res/drawable-mdpi/group_red.png
deleted file mode 100755
index 293b63320..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_violet.png b/TMessagesProj/src/main/res/drawable-mdpi/group_violet.png
deleted file mode 100755
index 7aa165fca..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/group_yellow.png b/TMessagesProj/src/main/res/drawable-mdpi/group_yellow.png
deleted file mode 100755
index badd57403..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/group_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/grouplist.png b/TMessagesProj/src/main/res/drawable-mdpi/grouplist.png
deleted file mode 100755
index d585fb875..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/grouplist.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/header_shadow.png b/TMessagesProj/src/main/res/drawable-mdpi/header_shadow.png
new file mode 100755
index 000000000..3f23c3eb5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/header_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/header_timer.png b/TMessagesProj/src/main/res/drawable-mdpi/header_timer.png
index c20e092c2..66aee6c2e 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/header_timer.png and b/TMessagesProj/src/main/res/drawable-mdpi/header_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/header_timer2.png b/TMessagesProj/src/main/res/drawable-mdpi/header_timer2.png
index d1db00048..5b63eb2ad 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/header_timer2.png and b/TMessagesProj/src/main/res/drawable-mdpi/header_timer2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach.png
old mode 100644
new mode 100755
index 4adde9602..85f390b87
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach3.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach3.png
new file mode 100755
index 000000000..b18e0362b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_attach3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back.png
index 6d64f59c6..9e662f6d4 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_grey.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_grey.png
new file mode 100755
index 000000000..44e1c11bb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_white.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_white.png
deleted file mode 100644
index 3d44a7863..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_back_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_compose.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_compose.png
deleted file mode 100755
index 0a485fc70..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_compose.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_doc.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_doc.png
old mode 100644
new mode 100755
index da7ea4e34..ce1100b80
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_doc.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_doc.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done.png
deleted file mode 100644
index f1966a340..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done_gray.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done_gray.png
deleted file mode 100644
index 0b4b8b85f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_done_gray.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_copy.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_copy.png
old mode 100644
new mode 100755
index 2288029b3..f8bfd187f
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_copy.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_copy.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_delete.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_delete.png
old mode 100644
new mode 100755
index 8f22d4382..e2370b3b4
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_delete.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_delete.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png
old mode 100644
new mode 100755
index 736c62fca..fe943423e
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_location.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_location.png
index 79f2c45b0..19fc6d1c3 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_location.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png
deleted file mode 100755
index 15024faba..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other.png
index 6159c5eba..1d8ad18a0 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white2.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white2.png
deleted file mode 100755
index 23433a4b8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_other_white2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_search.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_search.png
old mode 100644
new mode 100755
index 20fcaaca4..dff1e3a8a
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_search.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_search.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_share.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_share.png
deleted file mode 100644
index 8b1987267..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_share.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png
index 1de9660ad..a53056967 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png
index 4b4fab566..193306974 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png
index ca2130b57..9a70e6b58 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png
index f45739114..b6ebbb60a 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_auth_next.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_auth_next.png
deleted file mode 100644
index 33c7f7da0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_auth_next.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_directory.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_directory.png
old mode 100644
new mode 100755
index d3359460d..1028bfaf3
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_directory.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_directory.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_done.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_done.png
old mode 100644
new mode 100755
index 42653437f..e91f9048b
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_done.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_done.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_edit.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_edit.png
deleted file mode 100644
index 652c748c1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_edit.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_external_storage.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_external_storage.png
old mode 100644
new mode 100755
index d66145888..630eacbb4
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_external_storage.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_external_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png
old mode 100644
new mode 100755
index d47edd559..e245bb9c5
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_blue.png
deleted file mode 100644
index 6b9bfdeca..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_green.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_green.png
deleted file mode 100644
index f700548da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_header.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_header.png
new file mode 100755
index 000000000..a414a87ae
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_lock_header.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross.png
deleted file mode 100644
index 00c973bcc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross_custom.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross_custom.png
deleted file mode 100644
index d64106658..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_btn_cross_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_in_cross.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_in_cross.png
deleted file mode 100644
index ad7694f75..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_in_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png
old mode 100644
new mode 100755
index b08f9ad96..d926efa47
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_cross.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_cross.png
deleted file mode 100644
index 9f1346e17..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_send_message.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_send_message.png
deleted file mode 100755
index a319f3988..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_profile_send_message.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_send_disabled.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_send_disabled.png
deleted file mode 100755
index c183f5f92..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_send_disabled.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_storage.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_storage.png
old mode 100644
new mode 100755
index 7bc0ddab5..6189a7ee5
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_storage.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png
index 9a068122e..9acf06791 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white.png b/TMessagesProj/src/main/res/drawable-mdpi/layer_shadow.png
similarity index 50%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white.png
rename to TMessagesProj/src/main/res/drawable-mdpi/layer_shadow.png
index b3a92d75e..aeefef42d 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_other_white.png and b/TMessagesProj/src/main/res/drawable-mdpi/layer_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/list_broadcast.png b/TMessagesProj/src/main/res/drawable-mdpi/list_broadcast.png
new file mode 100755
index 000000000..f772b53ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/list_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/list_group.png b/TMessagesProj/src/main/res/drawable-mdpi/list_group.png
new file mode 100755
index 000000000..3d5818c4a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/list_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/list_secret.png b/TMessagesProj/src/main/res/drawable-mdpi/list_secret.png
new file mode 100755
index 000000000..4fc91b4d9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/list_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_broadcast.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_broadcast.png
new file mode 100755
index 000000000..ff619d43b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_contacts.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_contacts.png
new file mode 100755
index 000000000..d068de483
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_contacts.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_help.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_help.png
new file mode 100755
index 000000000..73fa5a6b5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_help.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_invite.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_invite.png
new file mode 100755
index 000000000..6f2d41a50
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_invite.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_newgroup.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_newgroup.png
new file mode 100755
index 000000000..7b5185f95
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_newgroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_secret.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_secret.png
new file mode 100755
index 000000000..c24175901
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_settings.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_settings.png
new file mode 100755
index 000000000..c3d57c210
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_settings.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_shadow.png
similarity index 53%
rename from TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png
rename to TMessagesProj/src/main/res/drawable-mdpi/menu_shadow.png
index 72185bed6..1ffe94269 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/menu_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress.png b/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress.png
deleted file mode 100644
index 3dbd2b058..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress_custom.png b/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress_custom.png
deleted file mode 100644
index b226340da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/p2r_progress_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/phone_grey.png b/TMessagesProj/src/main/res/drawable-mdpi/phone_grey.png
new file mode 100755
index 000000000..4d0d08081
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/phone_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_back.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_back.png
deleted file mode 100755
index 22a1fe263..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_edit_spinner.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_edit_spinner.png
deleted file mode 100644
index d85d84cdf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_edit_spinner.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_normal.9.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_normal.9.png
deleted file mode 100644
index 9d75da73a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_normal.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_pressed.9.png
deleted file mode 100644
index c50e26cc0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photo_spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photo_w.png b/TMessagesProj/src/main/res/drawable-mdpi/photo_w.png
new file mode 100755
index 000000000..0f44275cd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photo_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photobadge.9.png b/TMessagesProj/src/main/res/drawable-mdpi/photobadge.9.png
index 9a2e146fb..259973e94 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photobadge.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/photobadge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/popup_fixed.9.png
old mode 100644
new mode 100755
index 20bfba33e..8b72316de
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/popup_fixed.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-mdpi/profile_list.png
similarity index 53%
rename from TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png
rename to TMessagesProj/src/main/res/drawable-mdpi/profile_list.png
index c9ad08121..b27a67622 100755
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png and b/TMessagesProj/src/main/res/drawable-mdpi/profile_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/round_check2.png b/TMessagesProj/src/main/res/drawable-mdpi/round_check2.png
new file mode 100755
index 000000000..6ff1a82af
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/round_check2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_dark.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_dark.9.png
new file mode 100644
index 000000000..e7ae60406
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/search_dark.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_dark_activated.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_dark_activated.9.png
new file mode 100644
index 000000000..cf31f1c66
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/search_dark_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_light.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_light.9.png
old mode 100755
new mode 100644
index 3f312b465..ee38ad349
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/search_light.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/search_light.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_light_activated.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_light_activated.9.png
new file mode 100644
index 000000000..fe325ddec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/search_light_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png
deleted file mode 100755
index 27a384723..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/shadow.png b/TMessagesProj/src/main/res/drawable-mdpi/shadow.png
deleted file mode 100755
index cbdc938e2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/shadow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/spinner.9.png b/TMessagesProj/src/main/res/drawable-mdpi/spinner.9.png
deleted file mode 100755
index 2d3ce5e74..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/spinner.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/spinner_pressed.9.png
deleted file mode 100755
index 5cfa70795..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_off1.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_off1.png
deleted file mode 100755
index b160afb0c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/switch_off1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_off1_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_off1_pressed.png
deleted file mode 100755
index 59f8c82db..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/switch_off1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_on1.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_on1.png
deleted file mode 100755
index 27c093e81..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/switch_on1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_on1_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_on1_pressed.png
deleted file mode 100755
index db0e34717..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/switch_on1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on1.9.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on1.9.png
new file mode 100644
index 000000000..b82801528
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on1.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on2.9.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on2.9.png
new file mode 100644
index 000000000..9bdd2eafa
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/switch_to_on2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/switch_track.9.png b/TMessagesProj/src/main/res/drawable-mdpi/switch_track.9.png
new file mode 100644
index 000000000..f8677ab8f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/switch_track.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png
deleted file mode 100644
index 04bf4ff70..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/textfield_activated.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_activated.9.png
deleted file mode 100644
index 633bcbddc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/textfield_activated.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/textfield_default.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_default.9.png
deleted file mode 100644
index 0f1ba7d56..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/textfield_default.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled.9.png
deleted file mode 100644
index 3b9289448..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled2.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled2.9.png
deleted file mode 100644
index 09b561642..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/textfield_disabled2.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/textfield_focused.9.png b/TMessagesProj/src/main/res/drawable-mdpi/textfield_focused.9.png
deleted file mode 100644
index 45cd1046d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/textfield_focused.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tooltip.png b/TMessagesProj/src/main/res/drawable-mdpi/tooltip.png
deleted file mode 100755
index 01b2766d2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/tooltip.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/top_pane.9.png b/TMessagesProj/src/main/res/drawable-mdpi/top_pane.9.png
deleted file mode 100644
index 20fff14c0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/top_pane.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/top_pane_custom.9.png b/TMessagesProj/src/main/res/drawable-mdpi/top_pane_custom.9.png
deleted file mode 100644
index ce76ac803..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/top_pane_custom.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_aqua.png b/TMessagesProj/src/main/res/drawable-mdpi/user_aqua.png
deleted file mode 100755
index a075f6b4e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/user_blue.png
deleted file mode 100755
index 234d68c7f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_green.png b/TMessagesProj/src/main/res/drawable-mdpi/user_green.png
deleted file mode 100755
index 6faac3a35..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_orange.png b/TMessagesProj/src/main/res/drawable-mdpi/user_orange.png
deleted file mode 100755
index be2bce768..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_pink.png b/TMessagesProj/src/main/res/drawable-mdpi/user_pink.png
deleted file mode 100755
index ac2f29dfa..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_placeholder.png b/TMessagesProj/src/main/res/drawable-mdpi/user_placeholder.png
deleted file mode 100644
index 57af79112..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_placeholder.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_red.png b/TMessagesProj/src/main/res/drawable-mdpi/user_red.png
deleted file mode 100755
index 77e95e130..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_violet.png b/TMessagesProj/src/main/res/drawable-mdpi/user_violet.png
deleted file mode 100755
index a226a6d90..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/user_yellow.png b/TMessagesProj/src/main/res/drawable-mdpi/user_yellow.png
deleted file mode 100755
index ff98ac6ad..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/user_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/viewbtn.9.png b/TMessagesProj/src/main/res/drawable-mdpi/viewbtn.9.png
deleted file mode 100644
index 61f930ab1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/viewbtn.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/viewbtn_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/viewbtn_pressed.9.png
deleted file mode 100644
index d603c67b2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/viewbtn_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
new file mode 100644
index 000000000..34512df87
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff3f76a8">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
new file mode 100644
index 000000000..64d8697d3
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff39849d">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
new file mode 100644
index 000000000..49c5a35ea
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff48953d">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
new file mode 100644
index 000000000..2d5c96c84
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ffe67429">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
new file mode 100644
index 000000000..72f764054
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ffd44e7b">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
new file mode 100644
index 000000000..4badd6870
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ffbc4b41">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
new file mode 100644
index 000000000..ee31ab7fe
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ff735fbe">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
new file mode 100644
index 000000000..f0ee5a20f
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#ffef9f09">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/addmember.png b/TMessagesProj/src/main/res/drawable-xhdpi/addmember.png
deleted file mode 100755
index 16d2277a9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/addmember.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bigtimer.png b/TMessagesProj/src/main/res/drawable-xhdpi/bigtimer.png
deleted file mode 100755
index 646b0042e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/bigtimer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png
deleted file mode 100644
index f32433921..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png
deleted file mode 100755
index 70dfa6f69..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png
deleted file mode 100755
index 4a30d7b6e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png
deleted file mode 100755
index 8cabb2c33..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png
deleted file mode 100755
index da46755d0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png
deleted file mode 100755
index fbc921282..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png
deleted file mode 100755
index 1cc2c2d8d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png
deleted file mode 100755
index 9f2ed8bfb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_w.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_w.png
new file mode 100755
index 000000000..ea1da2f3e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png
deleted file mode 100755
index 2609fca15..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_off_holo_light.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_off_holo_light.png
deleted file mode 100644
index b843c827f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_off_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_on_holo_light.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_on_holo_light.png
deleted file mode 100644
index 3534493c8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_check_on_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_down.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_down.9.png
deleted file mode 100644
index b8a0db1c9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_down.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_down.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_down.9.png
old mode 100644
new mode 100755
index 396bfdbf4..ae9783b44
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_down.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_down.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_up.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_up.9.png
old mode 100644
new mode 100755
index e7b409a6f..c8f16fe69
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_up.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/btn_send_location_up.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btn_up.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/btn_up.9.png
deleted file mode 100644
index 6f17635de..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/btn_up.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/call.png b/TMessagesProj/src/main/res/drawable-xhdpi/call.png
deleted file mode 100755
index f303cdb15..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/call.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/check_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/check_blue.png
new file mode 100755
index 000000000..37b2d0472
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/check_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png
index 7ce742a7b..9632851cc 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_check.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_check.png
index 95eef6c51..83e79ba58 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_check.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_check.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_halfcheck.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_halfcheck.png
index aa4b23807..4756cbf5c 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_halfcheck.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_halfcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_warning.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_warning.png
old mode 100644
new mode 100755
index 7a7c460c9..83fd07ad7
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_warning.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_warning.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png
index 787e04f9b..d36cc8375 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png
index 8f768c660..37e756fae 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_default_holo.png b/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_default_holo.png
deleted file mode 100644
index 5cf5b47ef..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_default_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_pressed_holo.png b/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_pressed_holo.png
deleted file mode 100644
index 7ee2f5f9c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/fastscroll_thumb_pressed_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating.png
new file mode 100755
index 000000000..a7e9c09f6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile.png
new file mode 100755
index 000000000..1ee194c0e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile_pressed.png
new file mode 100755
index 000000000..3268ca335
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating3_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile.png
new file mode 100755
index 000000000..87a90ab78
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile_pressed.png
new file mode 100755
index 000000000..e4af9d2f4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating4_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png
new file mode 100755
index 000000000..81cccd447
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gallery.png b/TMessagesProj/src/main/res/drawable-xhdpi/gallery.png
deleted file mode 100755
index 3d14800a8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/greydivider.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/greydivider.9.png
new file mode 100644
index 000000000..f14b47337
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/greydivider.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/greydivider_bottom.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/greydivider_bottom.9.png
new file mode 100644
index 000000000..e1043341d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/greydivider_bottom.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_aqua.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_aqua.png
deleted file mode 100755
index 1d1a8222d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_blue.png
deleted file mode 100755
index 46bada8bd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_green.png
deleted file mode 100755
index 138bcd655..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_orange.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_orange.png
deleted file mode 100755
index 22af590ce..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_pink.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_pink.png
deleted file mode 100755
index 181874de9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_red.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_red.png
deleted file mode 100755
index 1465e5d0d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_violet.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_violet.png
deleted file mode 100755
index 0699ff6a0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/group_yellow.png b/TMessagesProj/src/main/res/drawable-xhdpi/group_yellow.png
deleted file mode 100755
index 9226fe235..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/group_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/grouplist.png b/TMessagesProj/src/main/res/drawable-xhdpi/grouplist.png
deleted file mode 100755
index fc062608b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/grouplist.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/header_shadow.png b/TMessagesProj/src/main/res/drawable-xhdpi/header_shadow.png
new file mode 100755
index 000000000..5492342b5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/header_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/header_timer.png b/TMessagesProj/src/main/res/drawable-xhdpi/header_timer.png
index 41d06be9f..7bdc8d569 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/header_timer.png and b/TMessagesProj/src/main/res/drawable-xhdpi/header_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/header_timer2.png b/TMessagesProj/src/main/res/drawable-xhdpi/header_timer2.png
index 02ce1d00b..37c985e65 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/header_timer2.png and b/TMessagesProj/src/main/res/drawable-xhdpi/header_timer2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach.png
old mode 100644
new mode 100755
index 0a88ae798..ef088004f
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach3.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach3.png
new file mode 100755
index 000000000..5b7b0f652
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_attach3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back.png
index 9b612b737..addbfc886 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_grey.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_grey.png
new file mode 100755
index 000000000..acb9af955
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_white.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_white.png
deleted file mode 100644
index 559f8f40b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_back_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_compose.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_compose.png
deleted file mode 100755
index 5fdb45dc8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_compose.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_doc.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_doc.png
old mode 100644
new mode 100755
index aaa8b4178..245a76f03
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_doc.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_doc.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done.png
deleted file mode 100644
index 889920959..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done_gray.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done_gray.png
deleted file mode 100644
index 1389811ea..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_done_gray.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_copy.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_copy.png
old mode 100644
new mode 100755
index 07c61196a..4bc6df880
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_copy.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_copy.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_delete.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_delete.png
old mode 100644
new mode 100755
index 72cfed16f..ac3d1e980
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_delete.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_delete.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png
old mode 100644
new mode 100755
index e0594ac84..0957f01c9
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_location.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_location.png
index f18f160a2..ebc61a535 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_location.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png
deleted file mode 100755
index ee88fc628..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other.png
index 02bc89b63..1b04eda04 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white.png
deleted file mode 100644
index 4031d6ef1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white2.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white2.png
deleted file mode 100755
index 8a5215911..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_other_white2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_search.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_search.png
old mode 100644
new mode 100755
index 0c4f8fbd4..043759acd
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_search.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_search.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_share.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_share.png
deleted file mode 100644
index 16f8b1e93..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_share.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png
index 05550c39b..4227122dc 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png
index 4ae9969ec..3e27c97e7 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png
index ee1e52b7b..25f0d3c81 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png
index 50751fc99..49f6685e0 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_auth_next.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_auth_next.png
deleted file mode 100644
index b53e3133f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_auth_next.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_directory.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_directory.png
old mode 100644
new mode 100755
index 4c99f9877..190df8236
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_directory.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_directory.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_done.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_done.png
old mode 100644
new mode 100755
index 3920f31a8..e5024472a
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_done.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_done.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_edit.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_edit.png
deleted file mode 100644
index f9fb11b76..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_edit.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_external_storage.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_external_storage.png
old mode 100644
new mode 100755
index 3280482f6..2c34f5dca
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_external_storage.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_external_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png
old mode 100644
new mode 100755
index 0d9188eb3..1c307e8e1
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_blue.png
deleted file mode 100644
index 5f7d5aec8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_green.png
deleted file mode 100755
index 8515448c4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_header.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_header.png
new file mode 100755
index 000000000..33d6d9b7f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_lock_header.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross.png
deleted file mode 100644
index 842d02ac9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross_custom.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross_custom.png
deleted file mode 100644
index 9ad389828..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_btn_cross_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_in_cross.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_in_cross.png
deleted file mode 100644
index c008a308d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_in_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png
old mode 100644
new mode 100755
index fb4bd4a12..b09776f75
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_cross.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_cross.png
deleted file mode 100644
index bd3de23be..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_send_message.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_send_message.png
deleted file mode 100755
index ea83586d6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_profile_send_message.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_send_disabled.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_send_disabled.png
deleted file mode 100755
index d63101df2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_send_disabled.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_storage.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_storage.png
old mode 100644
new mode 100755
index 6aba104d9..d9d8b481f
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_storage.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png
index 639e7d834..526e860d9 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/layer_shadow.png b/TMessagesProj/src/main/res/drawable-xhdpi/layer_shadow.png
new file mode 100644
index 000000000..8724204dd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/layer_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/list_broadcast.png b/TMessagesProj/src/main/res/drawable-xhdpi/list_broadcast.png
new file mode 100755
index 000000000..d4fae87b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/list_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/list_group.png b/TMessagesProj/src/main/res/drawable-xhdpi/list_group.png
new file mode 100755
index 000000000..98e1e2be8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/list_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/list_secret.png b/TMessagesProj/src/main/res/drawable-xhdpi/list_secret.png
new file mode 100755
index 000000000..f4ebc8b57
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/list_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_broadcast.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_broadcast.png
new file mode 100755
index 000000000..1a2a61a0c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_contacts.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_contacts.png
new file mode 100755
index 000000000..a7cc40dff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_contacts.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_help.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_help.png
new file mode 100755
index 000000000..256a4fc15
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_help.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_invite.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_invite.png
new file mode 100755
index 000000000..67ff57b19
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_invite.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_newgroup.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_newgroup.png
new file mode 100755
index 000000000..a55f0aa5f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_newgroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_secret.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_secret.png
new file mode 100755
index 000000000..ffb647b0b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_settings.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_settings.png
new file mode 100755
index 000000000..972c2ab6b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_settings.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_shadow.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_shadow.png
new file mode 100755
index 000000000..8d539199a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress.png b/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress.png
deleted file mode 100644
index 6209ff0bd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress_custom.png b/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress_custom.png
deleted file mode 100644
index d0f30cd6f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/p2r_progress_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/phone_grey.png b/TMessagesProj/src/main/res/drawable-xhdpi/phone_grey.png
new file mode 100755
index 000000000..981ed79f0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/phone_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_back.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_back.png
deleted file mode 100755
index 21dcdebe2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_edit_spinner.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_edit_spinner.png
deleted file mode 100644
index d72b80f01..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_edit_spinner.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_normal.9.png
deleted file mode 100644
index a24c47c5c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_normal.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_pressed.9.png
deleted file mode 100644
index 9a8b1254a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photo_spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photo_w.png b/TMessagesProj/src/main/res/drawable-xhdpi/photo_w.png
new file mode 100755
index 000000000..99dadead6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photo_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photobadge.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/photobadge.9.png
index 7d778da73..19e093fc7 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photobadge.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photobadge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/popup_fixed.9.png
old mode 100644
new mode 100755
index 1b6b749f8..c94b50ef8
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/popup_fixed.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/profile_list.png b/TMessagesProj/src/main/res/drawable-xhdpi/profile_list.png
new file mode 100755
index 000000000..1383d6bc6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/profile_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/round_check2.png b/TMessagesProj/src/main/res/drawable-xhdpi/round_check2.png
new file mode 100755
index 000000000..0ccccb73c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/round_check2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_dark.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_dark.9.png
new file mode 100644
index 000000000..fcb8ced74
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/search_dark.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_dark_activated.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_dark_activated.9.png
new file mode 100644
index 000000000..cd2456c16
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/search_dark_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_light.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_light.9.png
old mode 100755
new mode 100644
index 4e9ae43c2..71be4da7f
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/search_light.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/search_light.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_light_activated.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_light_activated.9.png
new file mode 100644
index 000000000..ce495c020
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/search_light_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png
deleted file mode 100755
index c32684084..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/shadow.png b/TMessagesProj/src/main/res/drawable-xhdpi/shadow.png
deleted file mode 100755
index c9898d4a1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/shadow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/spenner_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/spenner_pressed.9.png
deleted file mode 100755
index 76e61a305..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/spenner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/spinner.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/spinner.9.png
deleted file mode 100755
index 3815d2211..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/spinner.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/spinner_pressed.9.png
deleted file mode 100755
index 976c18940..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1.png
deleted file mode 100755
index 20fd78517..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1_pressed.png
deleted file mode 100755
index 55184f897..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/switch_off1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1.png
deleted file mode 100755
index 80a262bc6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1_pressed.png
deleted file mode 100755
index 434376d7d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/switch_on1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on1.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on1.9.png
new file mode 100644
index 000000000..8a648b8ba
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on1.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on2.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on2.9.png
new file mode 100644
index 000000000..435ce2150
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/switch_to_on2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/switch_track.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/switch_track.9.png
new file mode 100644
index 000000000..fd47f15e4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/switch_track.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png
deleted file mode 100644
index 6514bfda7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_activated.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_activated.9.png
deleted file mode 100644
index 2806417df..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_activated.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_default.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_default.9.png
deleted file mode 100644
index 642554677..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_default.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled.9.png
deleted file mode 100644
index ddd05596c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled2.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled2.9.png
deleted file mode 100644
index dfb218564..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_disabled2.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_focused.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/textfield_focused.9.png
deleted file mode 100644
index dda8d8298..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/textfield_focused.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tooltip.png b/TMessagesProj/src/main/res/drawable-xhdpi/tooltip.png
deleted file mode 100755
index 4e2da555c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/tooltip.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/top_pane.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/top_pane.9.png
deleted file mode 100644
index b3ea8d1ba..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/top_pane.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/top_pane_custom.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/top_pane_custom.9.png
deleted file mode 100644
index 962909f85..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/top_pane_custom.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_aqua.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_aqua.png
deleted file mode 100755
index 0aed5664c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_blue.png
deleted file mode 100755
index 4366ae998..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_green.png
deleted file mode 100755
index b7916df7d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_orange.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_orange.png
deleted file mode 100755
index 60db7014e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_pink.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_pink.png
deleted file mode 100755
index ddd46de71..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_placeholder.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_placeholder.png
deleted file mode 100644
index b6b7e7b8b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_placeholder.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_red.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_red.png
deleted file mode 100755
index ae888768e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_violet.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_violet.png
deleted file mode 100755
index 3865d9edf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/user_yellow.png b/TMessagesProj/src/main/res/drawable-xhdpi/user_yellow.png
deleted file mode 100755
index ffb540a14..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/user_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn.9.png
deleted file mode 100644
index 97d12567b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn_pressed.9.png
deleted file mode 100644
index d3a8cff93..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/viewbtn_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/addmember.png b/TMessagesProj/src/main/res/drawable-xxhdpi/addmember.png
deleted file mode 100755
index 80dc6e1c4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/addmember.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bigtimer.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bigtimer.png
deleted file mode 100755
index 04b0616e3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/bigtimer.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png
deleted file mode 100644
index 4d978707a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png
deleted file mode 100755
index 6d3d49d99..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png
deleted file mode 100755
index a0b79c115..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png
deleted file mode 100755
index 21cd9614f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png
deleted file mode 100755
index 1ed205ff8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png
deleted file mode 100755
index 0b65cfd00..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png
deleted file mode 100755
index 37404ef89..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png
deleted file mode 100755
index a6a22b4a0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_w.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_w.png
new file mode 100755
index 000000000..c60de471f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png
deleted file mode 100755
index df5340e4b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_off_holo_light.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_off_holo_light.png
deleted file mode 100644
index 8bf25ec86..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_off_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_on_holo_light.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_on_holo_light.png
deleted file mode 100644
index 50593ac4d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_check_on_holo_light.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_down.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_down.9.png
deleted file mode 100644
index 07482b4e0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_down.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_down.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_down.9.png
old mode 100644
new mode 100755
index 3d886e9b8..5ef0b1b44
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_down.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_down.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_up.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_up.9.png
old mode 100644
new mode 100755
index 6155a49f1..f05699e16
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_up.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_send_location_up.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_up.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btn_up.9.png
deleted file mode 100644
index 2469b2131..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/btn_up.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/call.png b/TMessagesProj/src/main/res/drawable-xxhdpi/call.png
deleted file mode 100755
index dea70f731..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/call.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/check_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/check_blue.png
new file mode 100755
index 000000000..d01961fac
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/check_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png
index 01ce6f083..5de08904f 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_check.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_check.png
index 2d3d5b69e..a3c0f9cec 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_check.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_check.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_halfcheck.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_halfcheck.png
index 029081a96..5f5a7b1e1 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_halfcheck.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_halfcheck.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_warning.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_warning.png
old mode 100644
new mode 100755
index 150fb82cc..8b1332493
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_warning.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_warning.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png
index d05ae14d9..3b169ff04 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png
index 7b61accc5..5445d4e10 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_default_holo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_default_holo.png
deleted file mode 100644
index bd252f960..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_default_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_pressed_holo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_pressed_holo.png
deleted file mode 100644
index 5ceb1863a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/fastscroll_thumb_pressed_holo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png
new file mode 100755
index 000000000..e8d384d6b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile.png
new file mode 100755
index 000000000..7c8114578
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile_pressed.png
new file mode 100755
index 000000000..76f2e6b38
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating3_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile.png
new file mode 100755
index 000000000..97378cc07
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile_pressed.png
new file mode 100755
index 000000000..db33c079c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating4_profile_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png
new file mode 100755
index 000000000..37e2a6f10
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gallery.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gallery.png
deleted file mode 100755
index 516f851e8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider.9.png
new file mode 100644
index 000000000..ef001a3d5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider_bottom.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider_bottom.9.png
new file mode 100644
index 000000000..1d72587a8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/greydivider_bottom.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_aqua.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_aqua.png
deleted file mode 100755
index 92f07b948..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_blue.png
deleted file mode 100755
index 0a4b8223a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_green.png
deleted file mode 100755
index ee04f6fa4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_orange.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_orange.png
deleted file mode 100755
index ec4d4c0c3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_pink.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_pink.png
deleted file mode 100755
index 1f95f681b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_red.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_red.png
deleted file mode 100755
index 002d387f6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_violet.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_violet.png
deleted file mode 100755
index 84fad91c1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/group_yellow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/group_yellow.png
deleted file mode 100755
index d9e5e5442..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/group_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/grouplist.png b/TMessagesProj/src/main/res/drawable-xxhdpi/grouplist.png
deleted file mode 100755
index b63fa34e3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/grouplist.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/header_shadow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/header_shadow.png
new file mode 100755
index 000000000..382af9c50
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/header_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer.png b/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer.png
index 859aa5c7b..9d27a863f 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer2.png
index 9376a7b93..aeaa2455b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer2.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/header_timer2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach.png
old mode 100644
new mode 100755
index e34e53669..6666ec183
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach3.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach3.png
new file mode 100755
index 000000000..39b7c7d15
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_attach3.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back.png
index 4dcf3e7d5..4057cc545 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_grey.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_grey.png
new file mode 100755
index 000000000..06104d817
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_white.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_white.png
deleted file mode 100644
index 45c92742a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_back_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_compose.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_compose.png
deleted file mode 100755
index ab4f82a4b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_compose.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_doc.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_doc.png
old mode 100644
new mode 100755
index 7a1992659..7a86b6f08
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_doc.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_doc.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done.png
deleted file mode 100644
index e2915f83d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done_gray.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done_gray.png
deleted file mode 100644
index d12eabc51..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_done_gray.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_copy.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_copy.png
old mode 100644
new mode 100755
index 3519351e0..31054c205
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_copy.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_copy.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_delete.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_delete.png
old mode 100644
new mode 100755
index a25ac46a4..74398b6cb
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_delete.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_delete.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png
old mode 100644
new mode 100755
index 4fca27f2f..f3c8fd6d8
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_location.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_location.png
index 076d7383f..814bc8bd7 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_location.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png
deleted file mode 100755
index 67a0225c7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other.png
index 90d0c2363..2955c02ec 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white.png
deleted file mode 100644
index b70508dab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white2.png
deleted file mode 100755
index d259309d6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_other_white2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_search.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_search.png
old mode 100644
new mode 100755
index 78103aaa8..0bbeab150
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_search.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_search.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_share.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_share.png
deleted file mode 100644
index 231da7f03..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_share.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png
index bc757caf0..4f8d40750 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png
index dc9b83a57..b6bd6ca9a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png
index 850239b6d..ccf61d696 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png
index 1fc4ae636..66843485e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_auth_next.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_auth_next.png
deleted file mode 100644
index ea19fa606..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_auth_next.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_directory.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_directory.png
old mode 100644
new mode 100755
index 91b4d6cb6..6fbc40459
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_directory.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_directory.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_done.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_done.png
old mode 100644
new mode 100755
index 9cbb9ad3a..f801e7ab3
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_done.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_done.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_edit.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_edit.png
deleted file mode 100644
index cd4bc7bcc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_edit.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_external_storage.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_external_storage.png
old mode 100644
new mode 100755
index 44304c6ce..c924710a4
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_external_storage.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_external_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png
old mode 100644
new mode 100755
index 3639a5f10..d48a051a8
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_blue.png
deleted file mode 100644
index d4b04dbfe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_green.png
deleted file mode 100644
index 3dd21a8ab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_header.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_header.png
new file mode 100755
index 000000000..6e5af9ac7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_lock_header.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross.png
deleted file mode 100644
index 17cd802fd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross_custom.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross_custom.png
deleted file mode 100644
index 239458586..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_btn_cross_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_in_cross.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_in_cross.png
deleted file mode 100644
index 303ea0f3f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_in_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png
old mode 100644
new mode 100755
index da8ce334a..2c9359e25
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_cross.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_cross.png
deleted file mode 100644
index be492a735..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_cross.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_send_message.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_send_message.png
deleted file mode 100755
index 76270c858..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_profile_send_message.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send_disabled.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send_disabled.png
deleted file mode 100755
index 633bad32f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send_disabled.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_storage.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_storage.png
old mode 100644
new mode 100755
index a19c0aa88..0c75f96fa
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_storage.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_storage.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png
index ca6c90bbd..b8633f749 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/layer_shadow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/layer_shadow.png
new file mode 100644
index 000000000..637e319f0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/layer_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/list_broadcast.png b/TMessagesProj/src/main/res/drawable-xxhdpi/list_broadcast.png
new file mode 100755
index 000000000..3118410eb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/list_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/list_group.png b/TMessagesProj/src/main/res/drawable-xxhdpi/list_group.png
new file mode 100755
index 000000000..8113ffea0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/list_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/list_secret.png b/TMessagesProj/src/main/res/drawable-xxhdpi/list_secret.png
new file mode 100755
index 000000000..fd1e9f59f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/list_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_broadcast.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_broadcast.png
new file mode 100755
index 000000000..cf8e5baa9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_contacts.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_contacts.png
new file mode 100755
index 000000000..483e8669b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_contacts.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_help.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_help.png
new file mode 100755
index 000000000..6d46163da
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_help.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_invite.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_invite.png
new file mode 100755
index 000000000..e7e1adbeb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_invite.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_newgroup.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_newgroup.png
new file mode 100755
index 000000000..d83702f7b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_newgroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_secret.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_secret.png
new file mode 100755
index 000000000..9c1b7903f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_secret.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_settings.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_settings.png
new file mode 100755
index 000000000..bcd8ec6b9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_settings.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_shadow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_shadow.png
new file mode 100755
index 000000000..bc4fc1ea9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress.png b/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress.png
deleted file mode 100644
index 919933bf1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress_custom.png b/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress_custom.png
deleted file mode 100644
index 8448e1339..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/p2r_progress_custom.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/phone_grey.png b/TMessagesProj/src/main/res/drawable-xxhdpi/phone_grey.png
new file mode 100755
index 000000000..a32cf0173
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/phone_grey.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_back.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_back.png
deleted file mode 100755
index 83b69df05..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_back.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_edit_spinner.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_edit_spinner.png
deleted file mode 100644
index 6e913581d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_edit_spinner.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_normal.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_normal.9.png
deleted file mode 100644
index 036e238d9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_normal.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_pressed.9.png
deleted file mode 100644
index 73bea5351..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photo_w.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_w.png
new file mode 100755
index 000000000..75073d1c6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photo_w.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photobadge.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photobadge.9.png
index 3e4f234a2..72fdedbdb 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photobadge.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photobadge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/popup_fixed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/popup_fixed.9.png
old mode 100644
new mode 100755
index 3bb68a6af..050190c71
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/popup_fixed.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/popup_fixed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/profile_list.png b/TMessagesProj/src/main/res/drawable-xxhdpi/profile_list.png
new file mode 100755
index 000000000..b07f5de4d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/profile_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/round_check2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/round_check2.png
new file mode 100755
index 000000000..88c5e2143
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/round_check2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark.9.png
new file mode 100644
index 000000000..6df53875d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark_activated.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark_activated.9.png
new file mode 100644
index 000000000..3a49d9baa
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/search_dark_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/search_light.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/search_light.9.png
new file mode 100644
index 000000000..f2f7727f8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/search_light.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/search_light_activated.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/search_light_activated.9.png
new file mode 100644
index 000000000..d7852f277
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/search_light_activated.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/shadow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/shadow.png
deleted file mode 100755
index 9c8b9f097..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/shadow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/spinner.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/spinner.9.png
deleted file mode 100755
index c0930b4b5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/spinner.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/spinner_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/spinner_pressed.9.png
deleted file mode 100755
index c7aa0a0cf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/spinner_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1.png
deleted file mode 100755
index 4af7844c0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1_pressed.png
deleted file mode 100755
index e015ee738..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_off1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1.png
deleted file mode 100755
index 5c3d2497e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1_pressed.png
deleted file mode 100755
index 1b9ecf28c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_on1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on1.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on1.9.png
new file mode 100644
index 000000000..b149e4758
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on1.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on2.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on2.9.png
new file mode 100644
index 000000000..00fb83ec9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_to_on2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/switch_track.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_track.9.png
new file mode 100644
index 000000000..3e3174d08
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/switch_track.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png
deleted file mode 100644
index 785dd42e9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tooltip.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tooltip.png
deleted file mode 100755
index e02e62b58..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/tooltip.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane.9.png
deleted file mode 100644
index 30b768df6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane_custom.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane_custom.9.png
deleted file mode 100644
index e72232bd6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/top_pane_custom.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_aqua.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_aqua.png
deleted file mode 100755
index 4de401c74..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_blue.png
deleted file mode 100755
index e5a3fa0be..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_green.png
deleted file mode 100755
index 9877c351f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_orange.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_orange.png
deleted file mode 100755
index 2b4e28c5c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_pink.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_pink.png
deleted file mode 100755
index b6dcdac04..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_placeholder.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_placeholder.png
deleted file mode 100644
index bf04c8e2f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_placeholder.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_red.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_red.png
deleted file mode 100755
index 3f92f5f8d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_violet.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_violet.png
deleted file mode 100755
index 021666e41..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/user_yellow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/user_yellow.png
deleted file mode 100755
index de2abbbbd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/user_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn.9.png
deleted file mode 100644
index 819b7d81a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn_pressed.9.png
deleted file mode 100644
index e04af7c9f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/viewbtn_pressed.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable/ab_icon_up_fixed.xml b/TMessagesProj/src/main/res/drawable/ab_icon_up_fixed.xml
deleted file mode 100644
index 8f48139c0..000000000
--- a/TMessagesProj/src/main/res/drawable/ab_icon_up_fixed.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:drawable="@drawable/ic_ab_back"
-          android:left="4dp"
-          android:right="5dp"/>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/ab_icon_up_gallery.xml b/TMessagesProj/src/main/res/drawable/ab_icon_up_gallery.xml
deleted file mode 100644
index 1aab7a127..000000000
--- a/TMessagesProj/src/main/res/drawable/ab_icon_up_gallery.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:drawable="@drawable/ic_ab_back_white"
-          android:left="4dp"
-          android:right="5dp"/>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/ab_icon_up_messages.xml b/TMessagesProj/src/main/res/drawable/ab_icon_up_messages.xml
deleted file mode 100644
index 7379f044f..000000000
--- a/TMessagesProj/src/main/res/drawable/ab_icon_up_messages.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:drawable="@drawable/ic_ab_back"
-          android:left="3dp"
-        android:right="5dp"/>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/launch_button_states.xml b/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
similarity index 59%
rename from TMessagesProj/src/main/res/drawable/launch_button_states.xml
rename to TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
index b9581e53c..83e879474 100644
--- a/TMessagesProj/src/main/res/drawable/launch_button_states.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
@@ -2,22 +2,18 @@
     xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
-            <solid android:color="#f2f5f7" />
+            <solid android:color="#ff3f76a8" />
         </shape>
     </item>
     <item android:state_focused="true">
         <shape android:shape="rectangle">
-            <solid android:color="#f2f5f7" />
+            <solid android:color="#ff3f76a8" />
         </shape>
     </item>
     <item android:state_selected="true">
         <shape android:shape="rectangle">
-            <solid android:color="#f2f5f7" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <solid android:color="#ffffffff" />
+            <solid android:color="#ff3f76a8" />
         </shape>
     </item>
+    <item android:drawable="@drawable/transparent" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/gray_button.xml b/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
similarity index 59%
rename from TMessagesProj/src/main/res/drawable/gray_button.xml
rename to TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
index 3ab27aed5..e9fb9cc20 100644
--- a/TMessagesProj/src/main/res/drawable/gray_button.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
@@ -2,22 +2,18 @@
     xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
+            <solid android:color="#ff39849d" />
         </shape>
     </item>
     <item android:state_focused="true">
         <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
+            <solid android:color="#ff39849d" />
         </shape>
     </item>
     <item android:state_selected="true">
         <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item>
-        <shape android:shape="rectangle">
-            <solid android:color="#f2f2f2" />
+            <solid android:color="#ff39849d" />
         </shape>
     </item>
+    <item android:drawable="@drawable/transparent" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
new file mode 100644
index 000000000..2e88b9f42
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff48953d" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff48953d" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff48953d" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
new file mode 100644
index 000000000..e1880b1e0
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffe67429" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffe67429" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffe67429" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
new file mode 100644
index 000000000..9d81d09dc
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffd44e7b" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffd44e7b" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffd44e7b" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
new file mode 100644
index 000000000..c00e47a4e
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffbc4b41" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffbc4b41" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffbc4b41" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
new file mode 100644
index 000000000..405397c10
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff735fbe" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff735fbe" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff735fbe" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
new file mode 100644
index 000000000..98da9c127
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffef9f09" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffef9f09" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffef9f09" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/btn_check_off.xml b/TMessagesProj/src/main/res/drawable/btn_check_off.xml
deleted file mode 100644
index 5e1ee0acb..000000000
--- a/TMessagesProj/src/main/res/drawable/btn_check_off.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector
-  xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/switch_off1_pressed" />
-    <item android:state_focused="true" android:drawable="@drawable/switch_off1_pressed" />
-    <item android:state_checked="true" android:drawable="@drawable/switch_off1_pressed" />
-    <item android:drawable="@drawable/switch_off1" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/btn_check_on.xml b/TMessagesProj/src/main/res/drawable/btn_check_on.xml
deleted file mode 100644
index beba706cd..000000000
--- a/TMessagesProj/src/main/res/drawable/btn_check_on.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector
-  xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/switch_on1_pressed" />
-    <item android:state_focused="true" android:drawable="@drawable/switch_on1_pressed" />
-    <item android:state_checked="true" android:drawable="@drawable/switch_on1_pressed" />
-    <item android:drawable="@drawable/switch_on1" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/chat_incoming_media_states.xml b/TMessagesProj/src/main/res/drawable/chat_incoming_media_states.xml
deleted file mode 100644
index 671c4fcbd..000000000
--- a/TMessagesProj/src/main/res/drawable/chat_incoming_media_states.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:drawable="@drawable/viewbtn_pressed" />
-    <item android:state_checked="true" android:drawable="@drawable/viewbtn_pressed" />
-    <item android:state_pressed="true" android:drawable="@drawable/viewbtn_pressed" />
-    <item android:drawable="@drawable/viewbtn" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/chat_incoming_text_states.xml b/TMessagesProj/src/main/res/drawable/chat_incoming_text_states.xml
deleted file mode 100644
index aff660235..000000000
--- a/TMessagesProj/src/main/res/drawable/chat_incoming_text_states.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:drawable="@drawable/msg_in_selected" />
-    <item android:state_checked="true" android:drawable="@drawable/msg_in_selected" />
-    <item android:state_pressed="true" android:drawable="@drawable/msg_in_selected" />
-    <item android:drawable="@drawable/msg_in" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/chat_outgoing_text_states.xml b/TMessagesProj/src/main/res/drawable/chat_outgoing_text_states.xml
deleted file mode 100644
index d06b071c9..000000000
--- a/TMessagesProj/src/main/res/drawable/chat_outgoing_text_states.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true" android:drawable="@drawable/msg_out_selected" />
-    <item android:state_checked="true" android:drawable="@drawable/msg_out_selected" />
-    <item android:state_pressed="true" android:drawable="@drawable/msg_out_selected" />
-    <item android:drawable="@drawable/msg_out"/>
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/edit_text.xml b/TMessagesProj/src/main/res/drawable/edit_text.xml
index 492bc906a..b9d7fc543 100644
--- a/TMessagesProj/src/main/res/drawable/edit_text.xml
+++ b/TMessagesProj/src/main/res/drawable/edit_text.xml
@@ -1,11 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_window_focused="false" android:state_enabled="true" android:drawable="@drawable/textfield_default" />
-    <item android:state_window_focused="false" android:state_enabled="false" android:drawable="@drawable/textfield_disabled2" />
-    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/textfield_activated" />
-    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/textfield_focused" />
-    <item android:state_enabled="true" android:drawable="@drawable/textfield_default" />
-    <item android:state_focused="true" android:drawable="@drawable/textfield_disabled" />
-    <item android:drawable="@drawable/textfield_disabled2" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_dark_activated" />
+    <item android:state_focused="true" android:drawable="@drawable/search_dark_activated" />
+    <item android:drawable="@drawable/search_dark" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/fast_thumb.xml b/TMessagesProj/src/main/res/drawable/fast_thumb.xml
deleted file mode 100644
index 79b0792b4..000000000
--- a/TMessagesProj/src/main/res/drawable/fast_thumb.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true" android:drawable="@drawable/fastscroll_thumb_pressed_holo"/>
-    <item android:drawable="@drawable/fastscroll_thumb_default_holo"/>
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/floating_group_states.xml b/TMessagesProj/src/main/res/drawable/floating_group_states.xml
new file mode 100644
index 000000000..785cc037b
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/floating_group_states.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ This is the source code of Telegram for Android v. 1.7.x.
+  ~ It is licensed under GNU GPL v. 2 or later.
+  ~ You should have received a copy of the license in this archive (see LICENSE).
+  ~
+  ~ Copyright Nikolai Kudashov, 2013-2014.
+  -->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/floating4_profile_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/floating4_profile_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/floating4_profile" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/floating_states.xml b/TMessagesProj/src/main/res/drawable/floating_states.xml
new file mode 100644
index 000000000..c2c53d129
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/floating_states.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ This is the source code of Telegram for Android v. 1.7.x.
+  ~ It is licensed under GNU GPL v. 2 or later.
+  ~ You should have received a copy of the license in this archive (see LICENSE).
+  ~
+  ~ Copyright Nikolai Kudashov, 2013-2014.
+  -->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/floating_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/floating_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/floating" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/floating_user_states.xml b/TMessagesProj/src/main/res/drawable/floating_user_states.xml
new file mode 100644
index 000000000..ee18cbee6
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/floating_user_states.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ This is the source code of Telegram for Android v. 1.7.x.
+  ~ It is licensed under GNU GPL v. 2 or later.
+  ~ You should have received a copy of the license in this archive (see LICENSE).
+  ~
+  ~ Copyright Nikolai Kudashov, 2013-2014.
+  -->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/floating3_profile_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/floating3_profile_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/floating3_profile" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/list_selector.xml b/TMessagesProj/src/main/res/drawable/list_selector.xml
index fff3038ca..f311824b8 100644
--- a/TMessagesProj/src/main/res/drawable/list_selector.xml
+++ b/TMessagesProj/src/main/res/drawable/list_selector.xml
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector
-  xmlns:android="http://schemas.android.com/apk/res/android">
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#0f000000" />
diff --git a/TMessagesProj/src/main/res/drawable/logout_button_states.xml b/TMessagesProj/src/main/res/drawable/logout_button_states.xml
deleted file mode 100644
index 56694e45c..000000000
--- a/TMessagesProj/src/main/res/drawable/logout_button_states.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/btn_down"
-          android:state_pressed="true" />
-    <item android:drawable="@drawable/btn_up" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/messages_list_divider.xml b/TMessagesProj/src/main/res/drawable/messages_list_divider.xml
deleted file mode 100644
index 87dd7c211..000000000
--- a/TMessagesProj/src/main/res/drawable/messages_list_divider.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<inset
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:insetLeft="11dp"
-    android:insetRight="11dp">
-
-    <shape android:shape="rectangle">
-        <solid android:color="@color/divider"/>
-    </shape>
-
-</inset>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml b/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml
deleted file mode 100644
index 42b348a2c..000000000
--- a/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<inset
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <shape android:shape="rectangle">
-        <solid android:color="@color/divider"/>
-    </shape>
-</inset>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/photo_progress.xml b/TMessagesProj/src/main/res/drawable/photo_progress.xml
deleted file mode 100644
index e0635bdd0..000000000
--- a/TMessagesProj/src/main/res/drawable/photo_progress.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:id="@android:id/background">
-        <shape>
-            <solid android:color="#802a2a2a" />
-        </shape>
-    </item>
-    <item android:id="@android:id/progress">
-        <clip android:clipOrientation="horizontal" android:gravity="top|left">
-            <shape>
-                <solid android:color="#8cd1fc" />
-            </shape>
-        </clip>
-    </item>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/photo_progress_chat.xml b/TMessagesProj/src/main/res/drawable/photo_progress_chat.xml
deleted file mode 100644
index 37f07f523..000000000
--- a/TMessagesProj/src/main/res/drawable/photo_progress_chat.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:id="@android:id/background">
-        <shape>
-            <solid android:color="#802a2a2a" />
-        </shape>
-    </item>
-    <item android:id="@android:id/progress">
-        <clip android:clipOrientation="horizontal" android:gravity="top|left">
-            <shape>
-                <solid android:color="#ffffff" />
-            </shape>
-        </clip>
-    </item>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/photo_spinner.xml b/TMessagesProj/src/main/res/drawable/photo_spinner.xml
deleted file mode 100644
index d09b405a6..000000000
--- a/TMessagesProj/src/main/res/drawable/photo_spinner.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector
-  xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/photo_spinner_pressed" />
-    <item android:state_focused="true" android:drawable="@drawable/photo_spinner_pressed" />
-    <item android:state_checked="true" android:drawable="@drawable/photo_spinner_pressed" />
-    <item android:drawable="@drawable/photo_spinner_normal" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/progress_chat.xml b/TMessagesProj/src/main/res/drawable/progress_chat.xml
deleted file mode 100644
index 0656b5e83..000000000
--- a/TMessagesProj/src/main/res/drawable/progress_chat.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:id="@android:id/background">
-        <shape>
-            <solid android:color="#802a2a2a" />
-        </shape>
-    </item>
-    <item android:id="@android:id/progress">
-        <clip android:clipOrientation="horizontal" android:gravity="top|left">
-            <shape>
-                <solid android:color="#39b0dd" />
-            </shape>
-        </clip>
-    </item>
-</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/search_dark_states.xml b/TMessagesProj/src/main/res/drawable/search_dark_states.xml
new file mode 100644
index 000000000..d1d4b4594
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/search_dark_states.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
+    <item android:drawable="@drawable/search_light"/>
+</selector>
diff --git a/TMessagesProj/src/main/res/drawable/search_light_states.xml b/TMessagesProj/src/main/res/drawable/search_light_states.xml
old mode 100755
new mode 100644
index 11282d4c0..d1d4b4594
--- a/TMessagesProj/src/main/res/drawable/search_light_states.xml
+++ b/TMessagesProj/src/main/res/drawable/search_light_states.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_focused="true"
-        android:drawable="@drawable/search_light_selected" />
-    <item android:drawable="@drawable/search_light" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
+    <item android:drawable="@drawable/search_light"/>
 </selector>
-
diff --git a/TMessagesProj/src/main/res/drawable/spinner_states.xml b/TMessagesProj/src/main/res/drawable/spinner_states.xml
index 649376f36..5cce57b08 100644
--- a/TMessagesProj/src/main/res/drawable/spinner_states.xml
+++ b/TMessagesProj/src/main/res/drawable/spinner_states.xml
@@ -1,7 +1,47 @@
 <selector
     xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/spenner_pressed" />
-    <item android:state_focused="true" android:drawable="@drawable/spenner_pressed" />
-    <item android:state_checked="true" android:drawable="@drawable/spenner_pressed" />
-    <item android:drawable="@drawable/spinner" />
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
+        </shape>
+    </item>
+    <item android:state_checked="true">
+        <shape android:shape="rectangle">
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#00000000" />
+        </shape>
+    </item>
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/switch_thumb.xml b/TMessagesProj/src/main/res/drawable/switch_thumb.xml
new file mode 100644
index 000000000..3d6207ceb
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/switch_thumb.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_checked="true" android:drawable="@drawable/switch_to_on2" />
+    <item android:drawable="@drawable/switch_to_on1" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/chat_profile_add_row.xml b/TMessagesProj/src/main/res/layout-ar/chat_profile_add_row.xml
deleted file mode 100644
index 64b2d333a..000000000
--- a/TMessagesProj/src/main/res/layout-ar/chat_profile_add_row.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp">
-
-    <ImageView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_avatar"
-        android:contentDescription=""
-        android:layout_marginRight="24dp"
-        android:src="@drawable/addmember"
-        android:scaleType="center"
-        android:layout_gravity="center_vertical|right"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginRight="61dp"
-        android:ellipsize="end"
-        android:gravity="right"
-        android:textColor="#000000"
-        android:maxLines="1"
-        android:layout_gravity="center_vertical|right"/>
-
-    <View android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml
deleted file mode 100644
index 5a1b3f9a9..000000000
--- a/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml
+++ /dev/null
@@ -1,78 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical|right"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_edit"/>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"/>
-
-    <LinearLayout
-        android:layout_gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="4dp"
-        android:layout_marginRight="13dp"
-        android:layout_marginBottom="1dp"
-        android:layout_weight="1">
-
-        <TextView
-            android:textSize="21dp"
-            android:textColor="#333333"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:maxLines="1"
-            android:lines="1"
-            android:ellipsize="end"
-            android:singleLine="true"
-            android:layout_gravity="right"
-            android:gravity="right"/>
-
-        <TextView
-            android:textSize="14dp"
-            android:textColor="#999999"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:maxLines="1"
-            android:lines="1"
-            android:ellipsize="end"
-            android:id="@+id/settings_online"
-            android:layout_gravity="right"
-            android:gravity="right"/>
-
-    </LinearLayout>
-
-    <FrameLayout
-        android:layout_width="64dp"
-        android:layout_height="64dp">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:id="@+id/settings_avatar_image"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-        <ImageButton
-            android:id="@+id/settings_change_avatar_button"
-            android:background="@drawable/photo_spinner"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml b/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml
deleted file mode 100644
index 1fc9c0185..000000000
--- a/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml
+++ /dev/null
@@ -1,103 +0,0 @@
-<ScrollView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:layout_gravity="top">
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:gravity="center_vertical|right"
-            android:orientation="horizontal"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="12dp"
-            android:paddingBottom="12dp">
-
-            <LinearLayout
-                android:layout_gravity="center_vertical|left"
-                android:orientation="vertical"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginRight="13dp"
-                android:layout_marginBottom="1dp">
-
-                <TextView
-                    android:textSize="21dp"
-                    android:textColor="#333333"
-                    android:ellipsize="end"
-                    android:id="@+id/settings_name"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:lines="1"
-                    android:singleLine="true"
-                    android:gravity="right"
-                    android:layout_gravity="right"/>
-
-                <TextView
-                    android:textSize="14dp"
-                    android:textColor="#999999"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_marginTop="4dp"
-                    android:id="@+id/settings_online"
-                    android:gravity="right"
-                    android:layout_gravity="right"/>
-
-            </LinearLayout>
-
-            <org.telegram.ui.Views.BackupImageView
-                android:id="@+id/settings_avatar_image"
-                android:layout_width="64dp"
-                android:layout_height="64dp"
-                android:layout_gravity="right"/>
-
-        </LinearLayout>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionNext"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:gravity="right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/last_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:gravity="right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"
-            android:layout_marginBottom="16dp"/>
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/contacts_invite_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/contacts_invite_row_layout.xml
deleted file mode 100644
index 8f701ee02..000000000
--- a/TMessagesProj/src/main/res/layout-ar/contacts_invite_row_layout.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp"
-    android:layout_gravity="top">
-
-    <ImageView
-        android:layout_width="50dp"
-        android:layout_height="50dp"
-        android:id="@+id/messages_list_row_avatar"
-        android:src="@drawable/ic_ab_share"
-        android:contentDescription=""
-        android:scaleType="center"
-        android:layout_marginTop="8dp"
-        android:layout_gravity="top|right"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginRight="61dp"
-        android:ellipsize="end"
-        android:maxLines="1"
-        android:gravity="right"
-        android:textColor="#006fc8"
-        android:layout_gravity="center_vertical|right"/>
-
-    <View android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"
-        android:visibility="gone"/>
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/country_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/country_row_layout.xml
deleted file mode 100644
index 5c2499c98..000000000
--- a/TMessagesProj/src/main/res/layout-ar/country_row_layout.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="12dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|left"
-        android:layout_gravity="left"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="12dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml b/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml
deleted file mode 100644
index 45a52826a..000000000
--- a/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="#fafafa">
-
-    <org.telegram.ui.Views.PinnedHeaderListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="30dp"
-        android:paddingRight="16dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:paddingBottom="16dp"
-        android:fastScrollEnabled="true"
-        android:fastScrollAlwaysVisible="true"
-        android:scrollbarStyle="outsideOverlay"
-        android:layout_gravity="top"
-        android:verticalScrollbarPosition="left"/>
-
-
-    <TextView android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textColor="#808080"
-        android:gravity="center"
-        android:textSize="24dp"
-        android:id="@+id/searchEmptyView"
-        android:visibility="invisible"
-        android:layout_gravity="top"/>
-
-</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout-ar/document_item.xml b/TMessagesProj/src/main/res/layout-ar/document_item.xml
deleted file mode 100644
index 96d3d776e..000000000
--- a/TMessagesProj/src/main/res/layout-ar/document_item.xml
+++ /dev/null
@@ -1,82 +0,0 @@
-<!--
-  ~ This is the source code of Telegram for Android v. 1.3.2.
-  ~ It is licensed under GNU GPL v. 2 or later.
-  ~ You should have received a copy of the license in this archive (see LICENSE).
-  ~
-  ~ Copyright Nikolai Kudashov, 2013.
-  -->
-
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/HLRelativeLayout1"
-    android:layout_width="match_parent"
-    android:layout_height="64dp"
-    android:paddingLeft="13dp"
-    android:paddingRight="13dp">
-
-    <TextView
-        android:id="@+id/docs_item_type"
-        android:layout_width="55dp"
-        android:layout_height="42dp"
-        android:layout_marginTop="11dp"
-        android:background="#1A808080"
-        android:ellipsize="marquee"
-        android:gravity="center"
-        android:padding="5dp"
-        android:singleLine="true"
-        android:textColor="#919191"
-        android:textSize="16dp"
-        android:textStyle="bold"
-        android:layout_gravity="top|right"/>
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="62dp"
-        android:layout_marginLeft="7dp"
-        android:layout_marginRight="66dp"
-        android:gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_gravity="top|right">
-
-        <TextView
-            android:id="@+id/docs_item_title"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:ellipsize="marquee"
-            android:singleLine="true"
-            android:text="TextView"
-            android:textColor="#000"
-            android:textSize="18dp"
-            android:gravity="right"
-            android:layout_gravity="top|right"/>
-
-        <TextView
-            android:id="@+id/docs_item_info"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="2dp"
-            android:ellipsize="marquee"
-            android:singleLine="true"
-            android:text="TextView"
-            android:textColor="#a6a6a6"
-            android:textSize="16dp"
-            android:gravity="right"
-            android:layout_gravity="top|right"/>
-
-    </LinearLayout>
-
-    <org.telegram.ui.Views.BackupImageView
-        android:id="@+id/docs_item_thumb"
-        android:layout_width="55dp"
-        android:layout_height="42dp"
-        android:layout_marginTop="11dp"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
deleted file mode 100644
index f821e53ec..000000000
--- a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:id="@+id/top_layout"
-        android:layout_gravity="top">
-
-        <FrameLayout
-            android:layout_width="64dp"
-            android:layout_height="64dp"
-            android:layout_marginTop="12dp"
-            android:layout_marginBottom="12dp"
-            android:layout_marginRight="16dp"
-            android:layout_gravity="top|right">
-
-            <org.telegram.ui.Views.BackupImageView
-                android:id="@+id/settings_avatar_image"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"/>
-
-            <ImageButton
-                android:id="@+id/settings_change_avatar_button"
-                android:background="@drawable/photo_spinner"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"/>
-
-        </FrameLayout>
-
-        <EditText
-            android:textSize="18dp"
-            android:textColorHint="#a6a6a6"
-            android:id="@+id/bubble_input_text"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="16dp"
-            android:layout_marginRight="96dp"
-            android:minHeight="52dp"
-            android:maxLines="4"
-            android:paddingTop="0dp"
-            android:layout_marginTop="0dp"
-            android:gravity="right|center_vertical"
-            android:imeOptions="flagNoExtractUi"
-            android:inputType="textCapSentences"
-            android:layout_gravity="center_vertical|right"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </FrameLayout>
-
-    <FrameLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-        <org.telegram.ui.Views.PinnedHeaderListView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:id="@+id/listView"
-            android:clipToPadding="false"
-            android:fadingEdge="none"
-            android:fadingEdgeLength="0dp"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp"
-            android:dividerHeight="0dp"
-            android:divider="@null"
-            android:paddingBottom="16dp"
-            android:scrollbars="none"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml
deleted file mode 100644
index 1de70d4f7..000000000
--- a/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:id="@+id/top_layout"
-        android:layout_gravity="top">
-
-        <EditText
-            android:textSize="16dp"
-            android:textColorHint="#a6a6a6"
-            android:id="@+id/bubble_input_text"
-            android:paddingLeft="60dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="5dp"
-            android:layout_marginRight="5dp"
-            android:minHeight="52dp"
-            android:gravity="right|center_vertical"
-            android:maxLines="2"
-            android:paddingTop="3dp"
-            android:layout_marginTop="0dp"
-            android:inputType="textFilter|textNoSuggestions|textMultiLine"
-            android:imeOptions="flagNoExtractUi"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </FrameLayout>
-
-
-    <FrameLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-        <org.telegram.ui.Views.PinnedHeaderListView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:id="@+id/listView"
-            android:clipToPadding="false"
-            android:fadingEdge="none"
-            android:fadingEdgeLength="0dp"
-            android:paddingLeft="30dp"
-            android:paddingRight="16dp"
-            android:dividerHeight="0dp"
-            android:divider="@null"
-            android:paddingBottom="16dp"
-            android:fastScrollEnabled="true"
-            android:fastScrollAlwaysVisible="true"
-            android:scrollbarStyle="outsideOverlay"
-            android:verticalScrollbarPosition="left"/>
-
-
-        <TextView
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:textColor="#808080"
-            android:gravity="center"
-            android:textSize="24dp"
-            android:id="@+id/searchEmptyView"
-            android:visibility="invisible"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
deleted file mode 100644
index 3505f73aa..000000000
--- a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp"
-    android:layout_gravity="top">
-
-    <org.telegram.ui.Views.BackupImageView
-        android:layout_width="50dp"
-        android:layout_height="50dp"
-        android:id="@+id/messages_list_row_avatar"
-        android:layout_marginTop="8dp"
-        android:layout_gravity="top|right"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginRight="61dp"
-        android:ellipsize="end"
-        android:layout_marginTop="10dp"
-        android:textColor="#000000"
-        android:maxLines="1"
-        android:layout_marginLeft="60dp"
-        android:layout_gravity="top|right"
-        android:gravity="right"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_message"
-        android:textSize="15dp"
-        android:maxLines="1"
-        android:ellipsize="end"
-        android:textColor="#808080"
-        android:layout_marginLeft="60dp"
-        android:layout_marginTop="34dp"
-        android:layout_marginRight="61dp"
-        android:layout_gravity="top|right"
-        android:gravity="right"/>
-
-    <ImageView
-        android:layout_gravity="center_vertical|left"
-        android:id="@+id/settings_row_check_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="14dp"
-        android:src="@drawable/btn_check_off_holo_light"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"
-        android:visibility="gone"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/launch_layout_tablet.xml b/TMessagesProj/src/main/res/layout-ar/launch_layout_tablet.xml
deleted file mode 100644
index a86e2e185..000000000
--- a/TMessagesProj/src/main/res/layout-ar/launch_layout_tablet.xml
+++ /dev/null
@@ -1,128 +0,0 @@
-<!--
-  ~ This is the source code of Telegram for Android v. 1.7.x.
-  ~ It is licensed under GNU GPL v. 2 or later.
-  ~ You should have received a copy of the license in this archive (see LICENSE).
-  ~
-  ~ Copyright Nikolai Kudashov, 2013-2014.
-  -->
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:id="@+id/launch_layout">
-
-    <ImageView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:src="@drawable/cats"
-        android:scaleType="centerCrop"
-        android:id="@+id/launch_background"/>
-
-    <LinearLayout
-        android:layout_width="320dp"
-        android:layout_height="wrap_content"
-        android:id="@+id/launch_button_layout"
-        android:layout_centerVertical="true"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:layout_width="308dp"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:background="@drawable/btnshadow"
-            android:layout_gravity="center">
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_group_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingRight="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_secret_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingRight="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_broadcast_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingRight="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-        </LinearLayout>
-
-        <LinearLayout
-            android:layout_width="308dp"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:background="@drawable/btnshadow"
-            android:layout_gravity="center"
-            android:layout_marginTop="18dp">
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/contacts_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingRight="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/settings_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingRight="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-        </LinearLayout>
-
-    </LinearLayout>
-
-    <FrameLayout
-        android:layout_height="match_parent"
-        android:layout_width="1dp"
-        android:background="#40295274"
-        android:id="@+id/shadow_tablet_side"/>
-
-    <FrameLayout
-        android:layout_height="match_parent"
-        android:layout_width="match_parent"
-        android:id="@+id/shadow_tablet"
-        android:background="#7F000000"
-        android:visibility="gone"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
index 68445322f..b82488ea2 100644
--- a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
@@ -31,7 +31,7 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:textSize="22dp"
-            android:textColor="#000000"
+            android:textColor="#212121"
             android:layout_marginRight="88dp"
             android:layout_marginTop="20dp"
             android:layout_marginLeft="12dp"
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml
deleted file mode 100644
index f6e3dc5bd..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_edit"
-        android:layout_marginTop="4dp"/>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"
-        android:layout_marginTop="4dp"/>
-
-    <LinearLayout
-        android:layout_gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="13dp"
-        android:layout_marginLeft="4dp"
-        android:layout_marginTop="1dp"
-        android:layout_weight="1.0"
-        android:gravity="right">
-
-        <TextView
-            android:textSize="19dp"
-            android:textColor="#000000"
-            android:ellipsize="end"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:lines="1"
-            android:singleLine="true"
-            android:gravity="right"/>
-
-        <TextView
-            android:textSize="17dp"
-            android:textColor="#ababab"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:id="@+id/settings_online"
-            android:gravity="right"/>
-
-    </LinearLayout>
-
-    <FrameLayout
-        android:layout_width="64dp"
-        android:layout_height="64dp">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:id="@+id/settings_avatar_image"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-        <ImageButton
-            android:id="@+id/settings_change_avatar_button"
-            android:background="@drawable/photo_spinner"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-    </FrameLayout>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_button_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_button_layout.xml
deleted file mode 100644
index 3f461669c..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_row_button_layout.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_check_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_check_layout.xml
deleted file mode 100644
index 6c4e623c2..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_row_check_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <ImageView
-        android:layout_gravity="center_vertical|left"
-        android:id="@+id/settings_row_check_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:src="@drawable/btn_check_on" />
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="104dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_check_notify_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_check_notify_layout.xml
deleted file mode 100644
index 2ce84a1cb..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_row_check_notify_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="64dp"
-    android:layout_gravity="top">
-
-    <ImageView
-        android:layout_gravity="center_vertical|left"
-        android:id="@+id/settings_row_check_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="14dp"
-        android:src="@drawable/btn_check_on"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="104dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml
deleted file mode 100644
index 389e955b8..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_row_color_layout.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<!--
-  ~ This is the source code of Telegram for Android v. 1.4.x.
-  ~ It is licensed under GNU GPL v. 2 or later.
-  ~ You should have received a copy of the license in this archive (see LICENSE).
-  ~
-  ~ Copyright Nikolai Kudashov, 2013-2014.
-  -->
-
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <FrameLayout
-        android:id="@+id/settings_color"
-        android:layout_width="20dp"
-        android:layout_height="20dp"
-        android:layout_marginLeft="14dp"
-        android:layout_marginRight="8dp"
-        android:layout_gravity="center_vertical"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_row_detail_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_row_detail_layout.xml
deleted file mode 100644
index 86079f12e..000000000
--- a/TMessagesProj/src/main/res/layout-ar/settings_row_detail_layout.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:orientation="vertical"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_marginTop="10dp"
-        android:layout_gravity="top|right"/>
-
-    <TextView
-        android:textSize="14dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_marginBottom="12dp"
-        android:layout_gravity="bottom|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml
deleted file mode 100644
index 34a2b99cf..000000000
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml
+++ /dev/null
@@ -1,48 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical|right"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <LinearLayout
-        android:layout_gravity="center_vertical|left"
-        android:orientation="vertical"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="13dp"
-        android:layout_marginBottom="1dp">
-
-        <TextView
-            android:textSize="21dp"
-            android:textColor="#333333"
-            android:ellipsize="end"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:lines="1"
-            android:singleLine="true"
-            android:gravity="right"
-            android:layout_gravity="right"/>
-
-        <TextView
-            android:textSize="14dp"
-            android:textColor="#999999"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:id="@+id/settings_online"
-            android:gravity="right"
-            android:layout_gravity="right"/>
-
-    </LinearLayout>
-
-    <org.telegram.ui.Views.BackupImageView
-        android:id="@+id/settings_avatar_image"
-        android:layout_width="64dp"
-        android:layout_height="64dp"
-        android:layout_gravity="right"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml
deleted file mode 100644
index c35c5daa2..000000000
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_gravity="top|right"/>
-
-    <org.telegram.ui.Views.IdenticonView
-        android:id="@+id/identicon_view"
-        android:layout_width="32dp"
-        android:layout_height="32dp"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:layout_gravity="left|center_vertical"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_leftright_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_leftright_row_layout.xml
deleted file mode 100644
index dad62a08c..000000000
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_leftright_row_layout.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top|right"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#316f9f"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_phone_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_phone_layout.xml
deleted file mode 100644
index 544b7294c..000000000
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_phone_layout.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="64dp"
-    android:background="@drawable/list_selector"
-    android:layout_gravity="top">
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_profile_send_message"
-        android:layout_gravity="left|center_vertical"
-        android:paddingTop="2dp"/>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"
-        android:layout_gravity="left|center_vertical"
-        android:layout_marginLeft="48dp"/>
-
-    <ImageButton
-        android:id="@+id/settings_call_phone"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:layout_marginLeft="48dp"
-        android:src="@drawable/call"
-        android:layout_gravity="left|center_vertical"
-        android:paddingTop="2dp"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_marginTop="9dp"
-        android:layout_gravity="top|right"/>
-
-    <TextView
-        android:textSize="13dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical|right"
-        android:layout_marginBottom="9dp"
-        android:textAllCaps="true"
-        android:layout_gravity="bottom|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml b/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml
deleted file mode 100644
index 66a9281eb..000000000
--- a/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:layout_alignParentRight="true">
-
-    <org.telegram.ui.Views.TimerButton
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_height="fill_parent"
-        android:layout_width="48dp"
-        android:id="@+id/chat_timer"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_header_layout.xml b/TMessagesProj/src/main/res/layout/chat_header_layout.xml
deleted file mode 100644
index 35e9b977d..000000000
--- a/TMessagesProj/src/main/res/layout/chat_header_layout.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:layout_alignParentRight="true">
-
-    <org.telegram.ui.Views.BackupImageView
-            android:layout_height="48dp"
-            android:layout_width="48dp"
-            android:id="@+id/chat_avatar_image"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_layout.xml b/TMessagesProj/src/main/res/layout/chat_layout.xml
index 11e46e8fc..3f1af3dd1 100644
--- a/TMessagesProj/src/main/res/layout/chat_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_layout.xml
@@ -19,7 +19,7 @@
             android:paddingBottom="2dp"
             android:paddingLeft="7dp"
             android:paddingRight="7dp"
-            android:textSize="14dp"
+            android:textSize="16dp"
             android:id="@+id/searchEmptyView"
             android:layout_gravity="center"/>
 
@@ -77,163 +77,154 @@
 
     </FrameLayout>
 
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="48dp"
-        android:id="@+id/top_panel">
-
-        <TextView
-            android:layout_height="wrap_content"
-            android:layout_width="wrap_content"
-            android:layout_gravity="center"
-            android:id="@+id/top_panel_text"
-            android:textAllCaps="true"
-            android:textSize="12dp"
-            android:textStyle="bold"
-            android:textColor="#ffffff"/>
-
-        <ImageView
-            android:layout_width="30dp"
-            android:layout_height="30dp"
-            android:scaleType="centerInside"
-            android:layout_marginRight="4dp"
-            android:layout_gravity="right|center"
-            android:id="@+id/top_plane_close"
-            android:clickable="true"/>
-
-    </FrameLayout>
-
-    <RelativeLayout
-        android:layout_width="match_parent"
+    <LinearLayout
         android:layout_height="wrap_content"
-        android:background="@drawable/compose_panel"
-        android:id="@+id/chat_compose_panel"
+        android:layout_width="match_parent"
+        android:layout_alignParentBottom="true"
         android:focusable="true"
         android:focusableInTouchMode="true"
-        android:gravity="bottom"
-        android:layout_alignParentBottom="true">
-
-        <ImageView
-            android:src="@drawable/ic_msg_panel_smiles"
-            android:layout_width="48dp"
-            android:layout_height="48dp"
-            android:layout_marginTop="2dp"
-            android:paddingTop="1dp"
-            android:scaleType="centerInside"
-            android:paddingLeft="4dp"
-            android:id="@+id/chat_smile_button"
-            android:layout_alignBottom="@+id/chat_text_edit"/>
-
-        <ImageButton
-            android:layout_width="48dp"
-            android:layout_height="48dp"
-            android:layout_marginTop="2dp"
-            android:scaleType="centerInside"
-            android:id="@+id/chat_send_button"
-            android:layout_alignParentRight="true"
-            android:layout_alignBottom="@+id/chat_text_edit"
-            android:enabled="false"
-            android:src="@drawable/ic_send"
-            android:background="@android:color/transparent"/>
-
-        <EditText
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:id="@+id/chat_text_edit"
-            android:layout_toRightOf="@id/chat_smile_button"
-            android:layout_toLeftOf="@id/chat_send_button"
-            android:layout_marginTop="2dp"
-            android:maxLines="4"
-            android:minHeight="48dp"
-            android:textSize="18dp"
-            android:textColorHint="#909090"
-            android:ems="10"
-            android:imeOptions="flagNoExtractUi"
-            android:inputType="textCapSentences|textMultiLine"
-            android:layout_alignParentTop="true"
-            android:paddingBottom="12dp"
-            android:maxLength="16384"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
+        android:id="@+id/chat_compose_panel"
+        android:background="@drawable/compose_panel"
+        android:orientation="horizontal">
 
         <org.telegram.ui.Views.FrameLayoutFixed
-            android:layout_height="48dp"
-            android:layout_width="fill_parent"
-            android:layout_marginTop="2dp"
-            android:layout_marginRight="48dp"
-            android:background="#ffffff"
-            android:id="@+id/record_panel"
-            android:visibility="gone">
-
-            <LinearLayout
+            android:layout_height="wrap_content"
+            android:layout_width="0dp"
+            android:layout_weight="1">
+
+            <ImageView
+                android:src="@drawable/ic_msg_panel_smiles"
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_marginTop="2dp"
+                android:paddingTop="1dp"
+                android:paddingLeft="4dp"
+                android:scaleType="centerInside"
+                android:layout_gravity="bottom"
+                android:id="@+id/chat_smile_button"/>
+
+            <EditText
+                android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginLeft="30dp"
-                android:orientation="horizontal"
-                android:id="@+id/slideText">
-
-                <ImageView
+                android:layout_gravity="bottom"
+                android:id="@+id/chat_text_edit"
+                android:maxLines="4"
+                android:textSize="18dp"
+                android:textColorHint="#b2b2b2"
+                android:imeOptions="flagNoExtractUi"
+                android:inputType="textCapSentences|textMultiLine"
+                android:maxLength="16384"
+                android:gravity="bottom"
+                android:layout_marginLeft="52dp"
+                android:layout_marginRight="2dp"
+                android:background="@null"
+                android:layout_marginBottom="12dp"
+                android:paddingTop="11dp"
+                android:textCursorDrawable="@null"
+                android:textColor="#000000"/>
+
+            <FrameLayout
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_marginTop="2dp"
+                android:id="@+id/chat_attach_button"
+                android:enabled="false"
+                android:layout_gravity="bottom|right"/>
+
+            <org.telegram.ui.Views.FrameLayoutFixed
+                android:layout_height="48dp"
+                android:layout_width="fill_parent"
+                android:layout_marginTop="2dp"
+                android:layout_gravity="bottom"
+                android:background="#ffffff"
+                android:id="@+id/record_panel"
+                android:visibility="gone">
+
+                <LinearLayout
                     android:layout_height="wrap_content"
                     android:layout_width="wrap_content"
-                    android:src="@drawable/slidearrow"
-                    android:layout_gravity="center_vertical"
-                    android:layout_marginTop="1dp"/>
-
-                <TextView
-                    android:layout_width="wrap_content"
+                    android:layout_gravity="center"
+                    android:layout_marginLeft="30dp"
+                    android:orientation="horizontal"
+                    android:id="@+id/slideText">
+
+                    <ImageView
+                        android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:src="@drawable/slidearrow"
+                        android:layout_gravity="center_vertical"
+                        android:layout_marginTop="1dp"/>
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:textColor="#999999"
+                        android:textSize="12dp"
+                        android:layout_marginLeft="6dp"
+                        android:id="@+id/slideToCancelTextView"
+                        android:layout_gravity="center_vertical"/>
+
+                </LinearLayout>
+
+                <LinearLayout
                     android:layout_height="wrap_content"
-                    android:textColor="#999999"
-                    android:textSize="12dp"
-                    android:layout_marginLeft="6dp"
-                    android:id="@+id/slideToCancelTextView"
-                    android:layout_gravity="center_vertical"/>
-
-            </LinearLayout>
-
-            <LinearLayout
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_gravity="center_vertical"
-                android:paddingLeft="13dp"
-                android:orientation="horizontal"
-                android:background="#ffffffff">
-
-                <ImageView
-                    android:layout_height="wrap_content"
-                    android:layout_width="wrap_content"
-                    android:src="@drawable/rec"
-                    android:layout_gravity="center_vertical"
-                    android:layout_marginTop="1dp"/>
-
-                <TextView
                     android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:id="@+id/recording_time_text"
-                    android:text="00:00"
-                    android:textColor="#4d4c4b"
-                    android:textSize="16dp"
                     android:layout_gravity="center_vertical"
-                    android:layout_marginLeft="6dp"/>
-
-            </LinearLayout>
+                    android:paddingLeft="13dp"
+                    android:orientation="horizontal"
+                    android:background="#ffffffff">
+
+                    <ImageView
+                        android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:src="@drawable/rec"
+                        android:layout_gravity="center_vertical"
+                        android:layout_marginTop="1dp"/>
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/recording_time_text"
+                        android:text="00:00"
+                        android:textColor="#4d4c4b"
+                        android:textSize="16dp"
+                        android:layout_gravity="center_vertical"
+                        android:layout_marginLeft="6dp"/>
+
+                </LinearLayout>
+
+            </org.telegram.ui.Views.FrameLayoutFixed>
 
         </org.telegram.ui.Views.FrameLayoutFixed>
 
-        <ImageButton
+        <FrameLayout
             android:layout_width="48dp"
             android:layout_height="48dp"
-            android:layout_marginTop="2dp"
-            android:scaleType="centerInside"
-            android:id="@+id/chat_audio_send_button"
-            android:layout_alignParentRight="true"
-            android:layout_alignBottom="@+id/chat_text_edit"
-            android:enabled="false"
-            android:src="@drawable/mic_button_states"
-            android:paddingRight="4dp"
-            android:background="@android:color/white"/>
-
-    </RelativeLayout>
+            android:layout_gravity="bottom"
+            android:layout_marginTop="2dp">
+
+            <ImageButton
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:scaleType="centerInside"
+                android:id="@+id/chat_audio_send_button"
+                android:enabled="false"
+                android:src="@drawable/mic_button_states"
+                android:paddingRight="4dp"
+                android:background="@android:color/white"/>
+
+            <ImageButton
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:scaleType="centerInside"
+                android:id="@+id/chat_send_button"
+                android:enabled="false"
+                android:src="@drawable/ic_send"
+                android:background="@android:color/transparent"/>
+
+        </FrameLayout>
+
+    </LinearLayout>
 
     <FrameLayout
         android:layout_height="48dp"
diff --git a/TMessagesProj/src/main/res/layout/chat_profile_add_row.xml b/TMessagesProj/src/main/res/layout/chat_profile_add_row.xml
deleted file mode 100644
index 7f061f508..000000000
--- a/TMessagesProj/src/main/res/layout/chat_profile_add_row.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp">
-
-    <ImageView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_avatar"
-        android:contentDescription=""
-        android:src="@drawable/addmember"
-        android:scaleType="center"
-        android:layout_gravity="center_vertical"
-        android:layout_marginLeft="24dp"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginLeft="61dp"
-        android:ellipsize="end"
-        android:textColor="#000000"
-        android:maxLines="1"
-        android:layout_gravity="center_vertical"/>
-
-    <View android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml
deleted file mode 100644
index 85f4a3d4d..000000000
--- a/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml
+++ /dev/null
@@ -1,74 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <FrameLayout
-        android:layout_width="64dp"
-        android:layout_height="64dp">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:id="@+id/settings_avatar_image"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-        <ImageButton
-            android:id="@+id/settings_change_avatar_button"
-            android:background="@drawable/photo_spinner"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-    </FrameLayout>
-
-    <LinearLayout
-        android:layout_gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="13dp"
-        android:layout_marginRight="4dp"
-        android:layout_marginBottom="1dp"
-        android:layout_weight="1">
-
-        <TextView
-            android:textSize="21dp"
-            android:textColor="#333333"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:maxLines="1"
-            android:lines="1"
-            android:ellipsize="end"
-            android:singleLine="true"/>
-
-        <TextView
-            android:textSize="14dp"
-            android:textColor="#999999"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:maxLines="1"
-            android:lines="1"
-            android:ellipsize="end"
-            android:id="@+id/settings_online"/>
-
-    </LinearLayout>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"/>
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_edit"/>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/chat_profile_layout.xml b/TMessagesProj/src/main/res/layout/chat_profile_layout.xml
deleted file mode 100644
index 57fd376dc..000000000
--- a/TMessagesProj/src/main/res/layout/chat_profile_layout.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:background="#fafafa">
-
-    <ListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentBottom="true"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="13dp"
-        android:paddingRight="13dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:scrollbars="none"
-        android:paddingBottom="16dp"/>
-
-</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/contact_add_layout.xml b/TMessagesProj/src/main/res/layout/contact_add_layout.xml
deleted file mode 100644
index c4c917e6d..000000000
--- a/TMessagesProj/src/main/res/layout/contact_add_layout.xml
+++ /dev/null
@@ -1,96 +0,0 @@
-<ScrollView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:layout_gravity="top">
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:orientation="vertical"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp">
-
-        <LinearLayout
-            android:gravity="center_vertical"
-            android:orientation="horizontal"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="12dp"
-            android:paddingBottom="12dp">
-
-            <org.telegram.ui.Views.BackupImageView
-                android:id="@+id/settings_avatar_image"
-                android:layout_width="64dp"
-                android:layout_height="64dp"/>
-
-            <LinearLayout
-                android:layout_gravity="center_vertical"
-                android:orientation="vertical"
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="13dp"
-                android:layout_marginBottom="1dp">
-
-                <TextView
-                    android:textSize="21dp"
-                    android:textColor="#333333"
-                    android:ellipsize="end"
-                    android:id="@+id/settings_name"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:lines="1"
-                    android:singleLine="true"/>
-
-                <TextView
-                    android:textSize="14dp"
-                    android:textColor="#999999"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_marginTop="4dp"
-                    android:id="@+id/settings_online"/>
-
-            </LinearLayout>
-
-        </LinearLayout>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/first_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionNext"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-        <EditText
-            android:textSize="19dp"
-            android:textColorHint="#a3a3a3"
-            android:layout_gravity="center_vertical"
-            android:id="@+id/last_name_field"
-            android:paddingBottom="15dp"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:lines="1"
-            android:singleLine="true"
-            android:inputType="textCapSentences|textAutoCorrect"
-            android:imeOptions="actionDone"
-            android:paddingLeft="15dp"
-            android:paddingRight="15dp"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"
-            android:layout_marginBottom="16dp"/>
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/contacts_invite_row_layout.xml b/TMessagesProj/src/main/res/layout/contacts_invite_row_layout.xml
deleted file mode 100644
index 6788172d0..000000000
--- a/TMessagesProj/src/main/res/layout/contacts_invite_row_layout.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp"
-    android:layout_gravity="top">
-
-    <ImageView
-        android:layout_width="50dp"
-        android:layout_height="50dp"
-        android:id="@+id/messages_list_row_avatar"
-        android:src="@drawable/ic_ab_share"
-        android:contentDescription=""
-        android:scaleType="center"
-        android:layout_marginTop="8dp"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginLeft="61dp"
-        android:ellipsize="end"
-        android:maxLines="1"
-        android:textColor="#006fc8"
-        android:layout_gravity="center_vertical"/>
-
-    <View android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"
-        android:visibility="gone"/>
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/contacts_layout.xml b/TMessagesProj/src/main/res/layout/contacts_layout.xml
deleted file mode 100644
index 8b281bc3e..000000000
--- a/TMessagesProj/src/main/res/layout/contacts_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent">
-
-    <org.telegram.ui.Views.PinnedHeaderListView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:id="@+id/listView"
-            android:clipToPadding="false"
-            android:fadingEdge="none"
-            android:fadingEdgeLength="0dp"
-            android:paddingLeft="16dp"
-            android:paddingRight="30dp"
-            android:dividerHeight="0dp"
-            android:divider="@null"
-            android:paddingBottom="16dp"
-            android:fastScrollEnabled="true"
-            android:fastScrollAlwaysVisible="true"
-            android:scrollbarStyle="outsideOverlay"
-            android:layout_gravity="top"/>
-
-
-    <TextView android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:textColor="#808080"
-            android:gravity="center"
-            android:textSize="24dp"
-            android:id="@+id/searchEmptyView"
-            android:visibility="invisible"
-            android:layout_gravity="top"/>
-
-</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/country_row_layout.xml b/TMessagesProj/src/main/res/layout/country_row_layout.xml
deleted file mode 100644
index 923d7f9bd..000000000
--- a/TMessagesProj/src/main/res/layout/country_row_layout.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="12dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="12dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/country_select_layout.xml b/TMessagesProj/src/main/res/layout/country_select_layout.xml
deleted file mode 100644
index 2ce0b92bd..000000000
--- a/TMessagesProj/src/main/res/layout/country_select_layout.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="#fafafa">
-
-    <org.telegram.ui.Views.PinnedHeaderListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="16dp"
-        android:paddingRight="30dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:paddingBottom="16dp"
-        android:fastScrollEnabled="true"
-        android:fastScrollAlwaysVisible="true"
-        android:scrollbarStyle="outsideOverlay"
-        android:layout_gravity="top"/>
-
-
-    <TextView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textColor="#808080"
-        android:gravity="center"
-        android:textSize="24dp"
-        android:id="@+id/searchEmptyView"
-        android:visibility="invisible"
-        android:layout_gravity="top"/>
-
-</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/document_item.xml b/TMessagesProj/src/main/res/layout/document_item.xml
deleted file mode 100644
index f2511bcef..000000000
--- a/TMessagesProj/src/main/res/layout/document_item.xml
+++ /dev/null
@@ -1,72 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/HLRelativeLayout1"
-    android:layout_width="match_parent"
-    android:layout_height="64dp"
-    android:paddingLeft="13dp"
-    android:paddingRight="13dp">
-
-    <TextView
-        android:id="@+id/docs_item_type"
-        android:layout_width="55dp"
-        android:layout_height="42dp"
-        android:layout_marginTop="11dp"
-        android:background="#1A808080"
-        android:ellipsize="marquee"
-        android:gravity="center"
-        android:padding="5dp"
-        android:singleLine="true"
-        android:textColor="#919191"
-        android:textSize="16dp"
-        android:textStyle="bold"
-        android:layout_gravity="top|left"/>
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="62dp"
-        android:layout_marginRight="7dp"
-        android:layout_marginLeft="66dp"
-        android:gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_gravity="top|left">
-
-        <TextView
-            android:id="@+id/docs_item_title"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:ellipsize="marquee"
-            android:singleLine="true"
-            android:text="TextView"
-            android:textColor="#000"
-            android:textSize="18dp"
-            android:layout_gravity="top|left"/>
-
-        <TextView
-            android:id="@+id/docs_item_info"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="2dp"
-            android:ellipsize="marquee"
-            android:singleLine="true"
-            android:text="TextView"
-            android:textColor="#a6a6a6"
-            android:textSize="16dp"
-            android:layout_gravity="top|left"/>
-
-    </LinearLayout>
-
-    <org.telegram.ui.Views.BackupImageView
-        android:id="@+id/docs_item_thumb"
-        android:layout_width="55dp"
-        android:layout_height="42dp"
-        android:layout_marginTop="11dp"
-        android:layout_gravity="top|left"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/document_select_layout.xml b/TMessagesProj/src/main/res/layout/document_select_layout.xml
index e1b4db3a4..9576e5914 100644
--- a/TMessagesProj/src/main/res/layout/document_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout/document_select_layout.xml
@@ -19,7 +19,7 @@
         android:layout_height="match_parent"
         android:textColor="#808080"
         android:gravity="center"
-        android:textSize="24dp"
+        android:textSize="20dp"
         android:id="@+id/searchEmptyView"
         android:visibility="gone"
         android:layout_gravity="top"/>
diff --git a/TMessagesProj/src/main/res/layout/empty_layout.xml b/TMessagesProj/src/main/res/layout/empty_layout.xml
deleted file mode 100644
index 26e058fd9..000000000
--- a/TMessagesProj/src/main/res/layout/empty_layout.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<FrameLayout
-        android:layout_width="1px"
-        android:layout_height="fill_parent"
-        xmlns:android="http://schemas.android.com/apk/res/android">
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/group_create_done_layout.xml b/TMessagesProj/src/main/res/layout/group_create_done_layout.xml
deleted file mode 100644
index 7de70f823..000000000
--- a/TMessagesProj/src/main/res/layout/group_create_done_layout.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="fill_parent"
-    android:layout_gravity="right|center_vertical"
-    android:minHeight="60dp">
-
-    <TextView
-        android:layout_height="fill_parent"
-        android:layout_width="wrap_content"
-        android:drawableLeft="@drawable/ic_done"
-        android:textColor="#ffffff"
-        android:textSize="14dp"
-        android:textStyle="bold"
-        android:gravity="center"
-        android:layout_gravity="center"
-        android:id="@+id/done_button"
-        android:drawablePadding="8dp"
-        android:paddingRight="16dp"
-        android:paddingLeft="16dp"
-        android:minHeight="60dp"
-        android:textAllCaps="true"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
deleted file mode 100644
index ba3f3ce36..000000000
--- a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
+++ /dev/null
@@ -1,76 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:id="@+id/top_layout"
-        android:layout_gravity="top">
-
-        <FrameLayout
-            android:layout_width="64dp"
-            android:layout_height="64dp"
-            android:layout_marginTop="12dp"
-            android:layout_marginBottom="12dp"
-            android:layout_marginLeft="16dp"
-            android:layout_gravity="top">
-
-            <org.telegram.ui.Views.BackupImageView
-                android:id="@+id/settings_avatar_image"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"/>
-
-            <ImageButton
-                android:id="@+id/settings_change_avatar_button"
-                android:background="@drawable/photo_spinner"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"/>
-
-        </FrameLayout>
-
-        <EditText
-            android:textSize="18dp"
-            android:textColorHint="#a6a6a6"
-            android:id="@+id/bubble_input_text"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="96dp"
-            android:layout_marginRight="16dp"
-            android:minHeight="52dp"
-            android:maxLines="4"
-            android:paddingTop="0dp"
-            android:layout_marginTop="0dp"
-            android:gravity="left|center_vertical"
-            android:imeOptions="flagNoExtractUi"
-            android:inputType="textCapSentences"
-            android:layout_gravity="center_vertical"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </FrameLayout>
-
-
-    <FrameLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-        <org.telegram.ui.Views.PinnedHeaderListView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:id="@+id/listView"
-            android:clipToPadding="false"
-            android:fadingEdge="none"
-            android:fadingEdgeLength="0dp"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp"
-            android:dividerHeight="0dp"
-            android:divider="@null"
-            android:paddingBottom="16dp"
-            android:scrollbars="none"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/group_create_layout.xml b/TMessagesProj/src/main/res/layout/group_create_layout.xml
deleted file mode 100644
index 763c3ea26..000000000
--- a/TMessagesProj/src/main/res/layout/group_create_layout.xml
+++ /dev/null
@@ -1,65 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
-
-    <FrameLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:id="@+id/top_layout"
-        android:layout_gravity="top">
-
-        <EditText
-            android:textSize="16dp"
-            android:textColorHint="#a6a6a6"
-            android:id="@+id/bubble_input_text"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="5dp"
-            android:layout_marginRight="5dp"
-            android:minHeight="52dp"
-            android:gravity="left|center_vertical"
-            android:maxLines="2"
-            android:paddingTop="3dp"
-            android:layout_marginTop="0dp"
-            android:inputType="textFilter|textNoSuggestions|textMultiLine"
-            android:imeOptions="flagNoExtractUi"
-            android:textCursorDrawable="@null"
-            android:textColor="#000000"/>
-
-    </FrameLayout>
-
-    <FrameLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-        <org.telegram.ui.Views.PinnedHeaderListView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:id="@+id/listView"
-            android:clipToPadding="false"
-            android:fadingEdge="none"
-            android:fadingEdgeLength="0dp"
-            android:paddingLeft="16dp"
-            android:paddingRight="30dp"
-            android:dividerHeight="0dp"
-            android:divider="@null"
-            android:paddingBottom="16dp"
-            android:fastScrollEnabled="true"
-            android:fastScrollAlwaysVisible="true"
-            android:scrollbarStyle="outsideOverlay"/>
-
-
-        <TextView
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:textColor="#808080"
-            android:gravity="center"
-            android:textSize="24dp"
-            android:id="@+id/searchEmptyView"
-            android:visibility="invisible"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
deleted file mode 100644
index d72de6d6b..000000000
--- a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
+++ /dev/null
@@ -1,58 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="66dp"
-    android:layout_gravity="top">
-
-    <org.telegram.ui.Views.BackupImageView
-        android:layout_width="50dp"
-        android:layout_height="50dp"
-        android:id="@+id/messages_list_row_avatar"
-        android:layout_marginTop="8dp"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_name"
-        android:textSize="18dp"
-        android:layout_marginLeft="61dp"
-        android:ellipsize="end"
-        android:layout_marginTop="10dp"
-        android:maxLines="1"
-        android:textColor="#000000"
-        android:layout_marginRight="60dp"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/messages_list_row_message"
-        android:textSize="15dp"
-        android:maxLines="1"
-        android:ellipsize="end"
-        android:textColor="#808080"
-        android:layout_marginLeft="61dp"
-        android:layout_marginTop="34dp"
-        android:layout_marginRight="60dp"
-        android:layout_gravity="top"/>
-
-    <ImageView
-        android:layout_gravity="center_vertical|right"
-        android:id="@+id/settings_row_check_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="14dp"
-        android:src="@drawable/btn_check_off_holo_light"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"
-        android:visibility="gone"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml b/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml
deleted file mode 100644
index 60c5e3e7d..000000000
--- a/TMessagesProj/src/main/res/layout/group_profile_add_member_layout.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<FrameLayout
-    android:layout_width="wrap_content"
-    android:layout_height="fill_parent"
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_gravity="right|center_vertical"
-    android:minHeight="60dp">
-
-    <TextView android:layout_height="fill_parent"
-        android:layout_width="wrap_content"
-        android:textColor="#ffffff"
-        android:textSize="14dp"
-        android:textStyle="bold"
-        android:gravity="center"
-        android:layout_gravity="center"
-        android:id="@+id/done_button"
-        android:paddingRight="16dp"
-        android:paddingLeft="16dp"
-        android:minHeight="60dp"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/identicon_layout.xml b/TMessagesProj/src/main/res/layout/identicon_layout.xml
index 1b4dac4d7..aed5e9270 100644
--- a/TMessagesProj/src/main/res/layout/identicon_layout.xml
+++ b/TMessagesProj/src/main/res/layout/identicon_layout.xml
@@ -15,9 +15,10 @@
         android:paddingTop="20dp"
         android:paddingBottom="20dp">
 
-        <org.telegram.ui.Views.IdenticonView
+        <ImageView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
+            android:scaleType="fitXY"
             android:id="@+id/identicon_view"/>
 
     </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/language_select_layout.xml b/TMessagesProj/src/main/res/layout/language_select_layout.xml
deleted file mode 100644
index d14c2951c..000000000
--- a/TMessagesProj/src/main/res/layout/language_select_layout.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <ListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentBottom="true"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="13dp"
-        android:paddingRight="13dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:scrollbars="none"/>
-
-    <TextView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textColor="#808080"
-        android:gravity="center"
-        android:textSize="24dp"
-        android:id="@+id/searchEmptyView"
-        android:visibility="invisible"
-        android:layout_gravity="top"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml b/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml
deleted file mode 100644
index 740ed46a2..000000000
--- a/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml
+++ /dev/null
@@ -1,120 +0,0 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:id="@+id/launch_layout">
-
-    <ImageView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:src="@drawable/cats"
-        android:scaleType="centerCrop"
-        android:id="@+id/launch_background"/>
-
-    <LinearLayout
-        android:layout_width="320dp"
-        android:layout_height="wrap_content"
-        android:id="@+id/launch_button_layout"
-        android:layout_centerVertical="true"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:layout_width="308dp"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:background="@drawable/btnshadow"
-            android:layout_gravity="center">
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_group_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingLeft="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_secret_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingLeft="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/new_broadcast_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingLeft="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-        </LinearLayout>
-
-        <LinearLayout
-            android:layout_width="308dp"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:background="@drawable/btnshadow"
-            android:layout_gravity="center"
-            android:layout_marginTop="18dp">
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/contacts_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingLeft="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-            <FrameLayout
-                android:layout_width="match_parent"
-                android:layout_height="1px"
-                android:background="#ffd6dee4"/>
-
-            <TextView
-                android:layout_width="match_parent"
-                android:layout_height="60dp"
-                android:id="@+id/settings_button"
-                android:textColor="#ff54759e"
-                android:gravity="center_vertical"
-                android:textSize="20dp"
-                android:paddingLeft="17dp"
-                android:background="@drawable/launch_button_states"/>
-
-        </LinearLayout>
-
-    </LinearLayout>
-
-    <FrameLayout
-        android:layout_height="match_parent"
-        android:layout_width="1dp"
-        android:background="#40295274"
-        android:id="@+id/shadow_tablet_side"/>
-
-    <FrameLayout
-        android:layout_height="match_parent"
-        android:layout_width="match_parent"
-        android:id="@+id/shadow_tablet"
-        android:background="#7F000000"
-        android:visibility="gone"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/loading_more_layout.xml b/TMessagesProj/src/main/res/layout/loading_more_layout.xml
deleted file mode 100644
index 057f5a64b..000000000
--- a/TMessagesProj/src/main/res/layout/loading_more_layout.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content">
-    <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_centerInParent="true"
-            android:padding="6dp"
-            android:id="@+id/progress">
-    </ProgressBar>
-</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/location_attach_layout.xml b/TMessagesProj/src/main/res/layout/location_attach_layout.xml
index 163f904c3..0775f3058 100644
--- a/TMessagesProj/src/main/res/layout/location_attach_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_attach_layout.xml
@@ -20,7 +20,7 @@
         android:layout_marginRight="15dp"
         android:layout_marginLeft="15dp"
         android:gravity="center"
-        android:textSize="18dp"
+        android:textSize="14dp"
         android:textColor="#316f9f"
         android:background="@drawable/location_send_button_states"
         android:id="@+id/location_send_button"/>
diff --git a/TMessagesProj/src/main/res/layout/location_view_layout.xml b/TMessagesProj/src/main/res/layout/location_view_layout.xml
index a5285024c..9c34b9fe8 100644
--- a/TMessagesProj/src/main/res/layout/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_view_layout.xml
@@ -31,7 +31,7 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:textSize="22dp"
-            android:textColor="#000000"
+            android:textColor="#212121"
             android:layout_marginLeft="88dp"
             android:layout_marginTop="20dp"
             android:layout_marginRight="12dp"
diff --git a/TMessagesProj/src/main/res/layout/login_layout.xml b/TMessagesProj/src/main/res/layout/login_layout.xml
deleted file mode 100644
index 70818ccca..000000000
--- a/TMessagesProj/src/main/res/layout/login_layout.xml
+++ /dev/null
@@ -1,296 +0,0 @@
-<ScrollView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:background="#fafafa"
-    android:fillViewport="true">
-
-    <org.telegram.ui.Views.FrameLayoutFixed
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_gravity="top|left">
-
-        <org.telegram.ui.LoginActivityPhoneView
-            android:orientation="vertical"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:visibility="visible"
-            android:layout_marginLeft="16dp"
-            android:layout_marginRight="16dp"
-            android:layout_marginTop="30dp"
-            android:layout_gravity="top|left"
-            android:id="@+id/login_page1">
-
-            <TextView
-                android:layout_width="fill_parent"
-                android:layout_height="50dp"
-                android:layout_marginLeft="20dp"
-                android:layout_marginRight="20dp"
-                android:id="@+id/login_coutry_textview"
-                android:textSize="20dp"
-                android:paddingTop="10dp"
-                android:gravity="left|center_horizontal"
-                android:textIsSelectable="false"
-                android:textColor="#000000"
-                android:paddingLeft="12dp"
-                android:paddingRight="12dp"
-                android:maxLines="1"
-                android:background="@drawable/spinner_states"/>
-
-            <View
-                android:layout_width="fill_parent"
-                android:layout_height="1px"
-                android:paddingLeft="12dp"
-                android:paddingRight="12dp"
-                android:background="#808080"
-                android:layout_marginTop="-6.5dp"
-                android:layout_marginLeft="24dp"
-                android:layout_marginRight="24dp"/>
-
-            <LinearLayout
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="20dp"
-                android:layout_gravity="top|left"
-                android:orientation="horizontal">
-
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="+"
-                    android:textColor="#a6a6a6"
-                    android:textSize="20dp"
-                    android:layout_marginLeft="8dp"
-                    android:layout_gravity="top|left"/>
-
-                <EditText
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:id="@+id/login_county_code_field"
-                    android:width="70dp"
-                    android:editable="true"
-                    android:inputType="phone"
-                    android:maxLength="4"
-                    android:maxLines="1"
-                    android:textSize="18dp"
-                    android:gravity="center"
-                    android:imeOptions="actionNext|flagNoExtractUi"
-                    android:textCursorDrawable="@null"
-                    android:textColor="#000000"
-                    android:layout_gravity="top|left"/>
-
-                <EditText
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content"
-                    android:id="@+id/login_phone_field"
-                    android:inputType="phone"
-                    android:maxLines="1"
-                    android:textSize="18dp"
-                    android:layout_marginRight="20dp"
-                    android:imeOptions="actionNext|flagNoExtractUi"
-                    android:textCursorDrawable="@null"
-                    android:textColor="#000000"
-                    android:textColorHint="#979797"
-                    android:gravity="center_vertical"
-                    android:layout_gravity="top|left"/>
-
-            </LinearLayout>
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_confirm_text"
-                android:layout_marginTop="28dp"
-                android:textColor="#808080"
-                android:layout_gravity="center_horizontal"
-                android:textSize="16dp"
-                android:gravity="center"
-                android:layout_marginBottom="10dp"
-                android:lineSpacingExtra="2dp"/>
-
-        </org.telegram.ui.LoginActivityPhoneView>
-
-        <org.telegram.ui.LoginActivitySmsView
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            android:layout_marginLeft="16dp"
-            android:layout_marginRight="16dp"
-            android:layout_marginTop="30dp"
-            android:visibility="gone"
-            android:id="@+id/login_page2"
-            android:layout_gravity="top|left"
-            android:orientation="vertical">
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_sms_confirm_text"
-                android:textColor="#808080"
-                android:textSize="16dp"
-                android:gravity="center_horizontal"
-                android:layout_gravity="center_horizontal"
-                android:lineSpacingExtra="2dp"/>
-
-            <EditText
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:inputType="numberDecimal"
-                android:width="220dp"
-                android:id="@+id/login_sms_code_field"
-                android:layout_marginTop="20dp"
-                android:gravity="center_horizontal"
-                android:maxLines="1"
-                android:editable="true"
-                android:textSize="18dp"
-                android:imeOptions="actionNext|flagNoExtractUi"
-                android:textCursorDrawable="@null"
-                android:layout_gravity="center_horizontal"
-                android:textColor="#000000"
-                android:textColorHint="#979797"/>
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_time_text"
-                android:layout_marginTop="20dp"
-                android:gravity="center_horizontal"
-                android:layout_gravity="center_horizontal"
-                android:textSize="16dp"
-                android:textColor="#808080"
-                android:lineSpacingExtra="2dp"/>
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_problem"
-                android:gravity="center_horizontal"
-                android:layout_gravity="center_horizontal"
-                android:textSize="16dp"
-                android:textColor="#316f9f"
-                android:lineSpacingExtra="2dp"
-                android:paddingTop="2dp"
-                android:paddingBottom="12dp"/>
-
-            <LinearLayout
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_below="@+id/spinner"
-                android:gravity="center_horizontal|bottom"
-                android:layout_gravity="top|left">
-
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:id="@+id/wrong_number"
-                    android:gravity="center"
-                    android:textSize="16dp"
-                    android:textColor="#316f9f"
-                    android:lineSpacingExtra="2dp"
-                    android:layout_gravity="bottom|center_horizontal"
-                    android:paddingTop="24dp"
-                    android:layout_marginBottom="10dp"/>
-
-            </LinearLayout>
-
-        </org.telegram.ui.LoginActivitySmsView>
-
-        <org.telegram.ui.LoginActivityRegisterView
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginTop="30dp"
-            android:paddingLeft="16dp"
-            android:paddingRight="16dp"
-            android:orientation="vertical"
-            android:id="@+id/login_page3"
-            android:visibility="gone"
-            android:layout_gravity="top|left">
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_register_info"
-                android:layout_marginTop="8dp"
-                android:textColor="#808080"
-                android:gravity="center_horizontal"
-                android:layout_gravity="center_horizontal"
-                android:textSize="16dp"/>
-
-            <EditText
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_first_name_field"
-                android:maxLines="1"
-                android:textSize="18dp"
-                android:imeOptions="actionNext|flagNoExtractUi"
-                android:layout_marginLeft="40dp"
-                android:layout_marginRight="40dp"
-                android:layout_marginTop="34dp"
-                android:lines="1"
-                android:capitalize="words"
-                android:textCursorDrawable="@null"
-                android:textColor="#000000"
-                android:textColorHint="#979797"/>
-
-            <EditText
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/login_last_name_field"
-                android:textSize="18dp"
-                android:imeOptions="actionNext|flagNoExtractUi"
-                android:layout_marginLeft="40dp"
-                android:layout_marginRight="40dp"
-                android:lines="1"
-                android:maxLines="1"
-                android:capitalize="words"
-                android:autoText="false"
-                android:textCursorDrawable="@null"
-                android:textColor="#000000"
-                android:textColorHint="#979797"
-                android:layout_marginTop="10dp"/>
-
-            <!--<FrameLayout-->
-                <!--android:layout_width="108dp"-->
-                <!--android:layout_height="108dp"-->
-                <!--android:layout_marginTop="20dp"-->
-                <!--android:layout_below="@+id/login_register_info"-->
-                <!--android:id="@+id/login_avatar_button">-->
-
-                <!--<org.telegram.ui.Views.BackupImageView-->
-                    <!--android:id="@+id/settings_avatar_image"-->
-                    <!--android:layout_width="fill_parent"-->
-                    <!--android:layout_height="fill_parent"-->
-                    <!--android:src="@drawable/user_placeholder"/>-->
-
-                <!--<ImageButton-->
-                    <!--android:id="@+id/settings_change_avatar_button"-->
-                    <!--android:background="@drawable/photo_spinner"-->
-                    <!--android:layout_width="fill_parent"-->
-                    <!--android:layout_height="fill_parent"/>-->
-            <!--</FrameLayout>-->
-
-            <LinearLayout
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:layout_below="@+id/spinner"
-                android:gravity="center_horizontal|bottom"
-                android:minHeight="140dp">
-
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="30dp"
-                    android:id="@+id/changed_mind"
-                    android:gravity="center"
-                    android:textSize="16dp"
-                    android:textColor="#316f9f"
-                    android:lineSpacingExtra="2dp"
-                    android:layout_gravity="bottom|center_horizontal"
-                    android:layout_marginTop="-40dp"
-                    android:layout_marginBottom="20dp"/>
-
-            </LinearLayout>
-
-        </org.telegram.ui.LoginActivityRegisterView>
-
-    </org.telegram.ui.Views.FrameLayoutFixed>
-
-</ScrollView>
diff --git a/TMessagesProj/src/main/res/layout/media_layout.xml b/TMessagesProj/src/main/res/layout/media_layout.xml
index 405fbcce8..04b9f3a89 100644
--- a/TMessagesProj/src/main/res/layout/media_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_layout.xml
@@ -3,7 +3,8 @@
     android:layout_height="match_parent"
     android:layout_gravity="top">
 
-    <GridView android:id="@+id/media_grid"
+    <GridView
+        android:id="@+id/media_grid"
         android:paddingLeft="2dp"
         android:paddingRight="2dp"
         android:paddingBottom="2dp"
@@ -19,11 +20,12 @@
         android:listSelector="@drawable/list_selector"
         android:layout_gravity="top"/>
 
-    <TextView android:layout_width="match_parent"
+    <TextView
+        android:layout_width="match_parent"
         android:layout_height="match_parent"
         android:textColor="#808080"
         android:gravity="center"
-        android:textSize="24dp"
+        android:textSize="20dp"
         android:id="@+id/searchEmptyView"
         android:visibility="gone"/>
 
@@ -33,12 +35,12 @@
         android:layout_height="fill_parent"
         android:gravity="center"
         android:orientation="vertical"
-        android:visibility="gone" >
+        android:visibility="gone">
 
         <ProgressBar
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content" >
-        </ProgressBar>
+            android:layout_height="wrap_content"/>
+
     </LinearLayout>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/media_loading_layout.xml b/TMessagesProj/src/main/res/layout/media_loading_layout.xml
index 85a059b04..435491b6d 100644
--- a/TMessagesProj/src/main/res/layout/media_loading_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_loading_layout.xml
@@ -1,11 +1,12 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="100dp"
     android:layout_height="100dp">
+
     <ProgressBar
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="center"
         android:paddingTop="6dp"
-        android:paddingBottom="6dp">
-    </ProgressBar>
+        android:paddingBottom="6dp"/>
+
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/messages_list.xml b/TMessagesProj/src/main/res/layout/messages_list.xml
index 60befc870..b051134b5 100644
--- a/TMessagesProj/src/main/res/layout/messages_list.xml
+++ b/TMessagesProj/src/main/res/layout/messages_list.xml
@@ -1,15 +1,9 @@
-<LinearLayout
+<FrameLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical">
 
-    <org.telegram.ui.Views.SlidingTabView
-        android:layout_width="match_parent"
-        android:layout_height="48dp"
-        android:visibility="gone"
-        android:id="@+id/searchPanelView"/>
-
     <ListView
         android:layout_width="match_parent"
         android:layout_height="match_parent"
@@ -20,18 +14,33 @@
         android:dividerHeight="0px"
         android:animationCache="false"/>
 
-    <TextView
+    <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:textColor="#808080"
+        android:id="@+id/search_empty_view"
+        android:orientation="vertical"
         android:gravity="center"
-        android:textSize="24dp"
-        android:id="@+id/searchEmptyView"
-        android:visibility="gone"/>
+        android:visibility="gone">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:textColor="#808080"
+            android:gravity="center"
+            android:textSize="20dp"
+            android:id="@+id/search_empty_text"
+            android:layout_weight="1"/>
+
+        <FrameLayout
+            android:layout_height="0dp"
+            android:layout_width="match_parent"
+            android:layout_weight="1"/>
+
+    </LinearLayout>
 
     <LinearLayout
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
+        android:layout_height="match_parent"
         android:id="@+id/list_empty_view"
         android:orientation="vertical"
         android:gravity="center"
@@ -39,15 +48,15 @@
 
         <TextView
             android:layout_width="wrap_content"
-            android:layout_height="match_parent"
+            android:layout_height="wrap_content"
             android:textColor="#959595"
             android:gravity="center"
-            android:textSize="24dp"
+            android:textSize="20dp"
             android:id="@+id/list_empty_view_text1"/>
 
         <TextView
             android:layout_width="wrap_content"
-            android:layout_height="match_parent"
+            android:layout_height="wrap_content"
             android:textColor="#959595"
             android:gravity="center"
             android:textSize="15dp"
@@ -67,9 +76,17 @@
 
         <ProgressBar
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content">
-        </ProgressBar>
+            android:layout_height="wrap_content"/>
 
     </LinearLayout>
 
-</LinearLayout>
+    <ImageView
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:src="@drawable/floating_states"
+        android:layout_gravity="bottom|right"
+        android:layout_marginRight="14dp"
+        android:layout_marginBottom="14dp"
+        android:id="@+id/floating_button"/>
+
+</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
index 07777cb07..7009f8bb0 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
@@ -14,21 +14,14 @@
         android:paddingLeft="3dp"
         android:layout_width="0.0dip"
         android:layout_height="fill_parent"
-        android:layout_weight="1.0"
-        android:textStyle="bold"/>
-
-    <View
-        android:layout_gravity="center_vertical"
-        android:background="#5c5c5c"
-        android:layout_width="1px"
-        android:layout_height="28dp" />
+        android:layout_weight="1.0"/>
 
     <FrameLayout
         android:id="@+id/done_button"
         android:background="@drawable/bar_selector_picker"
         android:paddingRight="3dp"
         android:clickable="true"
-        android:layout_width="0.0dip"
+        android:layout_width="0dp"
         android:layout_height="fill_parent"
         android:layout_weight="1.0">
 
@@ -45,11 +38,12 @@
                 android:background="@drawable/photobadge"
                 android:layout_gravity="center"
                 android:layout_width="wrap_content"
-                android:layout_height="19dp"
+                android:layout_height="23dp"
+                android:minWidth="23dp"
                 android:id="@+id/done_button_badge"
-                android:paddingLeft="6dp"
-                android:paddingRight="6dp"
-                android:textStyle="bold"
+                android:paddingLeft="8dp"
+                android:paddingRight="8dp"
+                android:paddingBottom="1dp"
                 android:layout_marginRight="10dp"/>
 
             <TextView
@@ -60,7 +54,7 @@
                 android:layout_height="wrap_content"
                 android:id="@+id/done_button_text"
                 android:drawablePadding="8dp"
-                android:textStyle="bold"/>
+                android:layout_gravity="center_vertical"/>
 
         </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
index 5dae18975..e47a34498 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
@@ -30,7 +30,7 @@
         android:layout_height="match_parent"
         android:textColor="#808080"
         android:gravity="center"
-        android:textSize="24dp"
+        android:textSize="20dp"
         android:id="@+id/searchEmptyView"
         android:visibility="gone"
         android:layout_marginBottom="48dp"/>
diff --git a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
index c00e824f6..664c5af34 100644
--- a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
@@ -19,136 +19,146 @@
             android:layout_marginRight="12dp"
             android:id="@+id/popup_container">
 
-            <RelativeLayout
-                android:layout_width="match_parent"
+            <LinearLayout
                 android:layout_height="wrap_content"
-                android:id="@+id/chat_compose_panel"
-                android:background="@drawable/compose_panel"
+                android:layout_width="match_parent"
+                android:layout_alignParentBottom="true"
                 android:focusable="true"
                 android:focusableInTouchMode="true"
-                android:gravity="bottom"
-                android:layout_alignParentBottom="true">
-
-                <ImageView
-                    android:src="@drawable/ic_msg_panel_smiles"
-                    android:layout_width="48dp"
-                    android:layout_height="48dp"
-                    android:layout_marginTop="2dp"
-                    android:paddingTop="1dp"
-                    android:scaleType="centerInside"
-                    android:paddingLeft="4dp"
-                    android:id="@+id/chat_smile_button"
-                    android:layout_alignBottom="@+id/chat_text_edit"/>
-
-                <ImageButton
-                    android:layout_width="48dp"
-                    android:layout_height="48dp"
-                    android:layout_marginTop="2dp"
-                    android:scaleType="centerInside"
-                    android:id="@+id/chat_send_button"
-                    android:layout_alignParentRight="true"
-                    android:layout_alignBottom="@+id/chat_text_edit"
-                    android:enabled="false"
-                    android:src="@drawable/ic_send"
-                    android:background="@android:color/transparent"/>
-
-                <EditText
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:id="@+id/chat_text_edit"
-                    android:layout_toRightOf="@id/chat_smile_button"
-                    android:layout_toLeftOf="@id/chat_send_button"
-                    android:layout_marginTop="2dp"
-                    android:maxLines="2"
-                    android:minHeight="48dp"
-                    android:textSize="18dp"
-                    android:textColorHint="#909090"
-                    android:ems="10"
-                    android:inputType="textCapSentences|textMultiLine"
-                    android:layout_alignParentTop="true"
-                    android:paddingBottom="12dp"
-                    android:maxLength="16384"
-                    android:textCursorDrawable="@null"
-                    android:textColor="#000000"/>
+                android:id="@+id/chat_compose_panel"
+                android:background="@drawable/compose_panel"
+                android:orientation="horizontal">
 
                 <org.telegram.ui.Views.FrameLayoutFixed
-                    android:layout_height="48dp"
-                    android:layout_width="fill_parent"
-                    android:layout_marginTop="2dp"
-                    android:layout_marginRight="48dp"
-                    android:background="#ffffff"
-                    android:id="@+id/record_panel"
-                    android:visibility="gone">
-
-                    <LinearLayout
+                    android:layout_height="wrap_content"
+                    android:layout_width="0dp"
+                    android:layout_weight="1">
+
+                    <ImageView
+                        android:src="@drawable/ic_msg_panel_smiles"
+                        android:layout_width="48dp"
+                        android:layout_height="48dp"
+                        android:layout_marginTop="2dp"
+                        android:paddingTop="1dp"
+                        android:paddingLeft="4dp"
+                        android:scaleType="centerInside"
+                        android:layout_gravity="bottom"
+                        android:id="@+id/chat_smile_button"/>
+
+                    <EditText
+                        android:layout_width="match_parent"
                         android:layout_height="wrap_content"
-                        android:layout_width="wrap_content"
-                        android:layout_gravity="center"
-                        android:layout_marginLeft="30dp"
-                        android:orientation="horizontal"
-                        android:id="@+id/slideText">
-
-                        <ImageView
+                        android:layout_gravity="bottom"
+                        android:id="@+id/chat_text_edit"
+                        android:maxLines="4"
+                        android:textSize="18dp"
+                        android:textColorHint="#b2b2b2"
+                        android:imeOptions="flagNoExtractUi"
+                        android:inputType="textCapSentences|textMultiLine"
+                        android:maxLength="16384"
+                        android:gravity="bottom"
+                        android:layout_marginLeft="52dp"
+                        android:layout_marginRight="2dp"
+                        android:background="@null"
+                        android:layout_marginBottom="12dp"
+                        android:paddingTop="11dp"
+                        android:textCursorDrawable="@null"
+                        android:textColor="#000000"/>
+
+                    <org.telegram.ui.Views.FrameLayoutFixed
+                        android:layout_height="48dp"
+                        android:layout_width="fill_parent"
+                        android:layout_marginTop="2dp"
+                        android:layout_gravity="bottom"
+                        android:background="#ffffff"
+                        android:id="@+id/record_panel"
+                        android:visibility="gone">
+
+                        <LinearLayout
                             android:layout_height="wrap_content"
                             android:layout_width="wrap_content"
-                            android:src="@drawable/slidearrow"
-                            android:layout_gravity="center_vertical"
-                            android:layout_marginTop="1dp"/>
-
-                        <TextView
-                            android:layout_width="wrap_content"
-                            android:layout_height="wrap_content"
-                            android:textColor="#999999"
-                            android:textSize="12dp"
-                            android:layout_marginLeft="6dp"
-                            android:id="@+id/slideToCancelTextView"
-                            android:layout_gravity="center_vertical"/>
-
-                    </LinearLayout>
-
-                    <LinearLayout
-                        android:layout_height="wrap_content"
-                        android:layout_width="wrap_content"
-                        android:layout_gravity="center_vertical"
-                        android:paddingLeft="13dp"
-                        android:orientation="horizontal"
-                        android:background="#ffffffff">
-
-                        <ImageView
+                            android:layout_gravity="center"
+                            android:layout_marginLeft="30dp"
+                            android:orientation="horizontal"
+                            android:id="@+id/slideText">
+
+                            <ImageView
+                                android:layout_height="wrap_content"
+                                android:layout_width="wrap_content"
+                                android:src="@drawable/slidearrow"
+                                android:layout_gravity="center_vertical"
+                                android:layout_marginTop="1dp"/>
+
+                            <TextView
+                                android:layout_width="wrap_content"
+                                android:layout_height="wrap_content"
+                                android:textColor="#999999"
+                                android:textSize="12dp"
+                                android:layout_marginLeft="6dp"
+                                android:id="@+id/slideToCancelTextView"
+                                android:layout_gravity="center_vertical"/>
+
+                        </LinearLayout>
+
+                        <LinearLayout
                             android:layout_height="wrap_content"
                             android:layout_width="wrap_content"
-                            android:src="@drawable/rec"
                             android:layout_gravity="center_vertical"
-                            android:layout_marginTop="1dp"/>
-
-                        <TextView
-                            android:layout_width="wrap_content"
-                            android:layout_height="wrap_content"
-                            android:id="@+id/recording_time_text"
-                            android:text="00:00"
-                            android:textColor="#4d4c4b"
-                            android:textSize="16dp"
-                            android:layout_gravity="center_vertical"
-                            android:layout_marginLeft="6dp"/>
-
-                    </LinearLayout>
+                            android:paddingLeft="13dp"
+                            android:orientation="horizontal"
+                            android:background="#ffffffff">
+
+                            <ImageView
+                                android:layout_height="wrap_content"
+                                android:layout_width="wrap_content"
+                                android:src="@drawable/rec"
+                                android:layout_gravity="center_vertical"
+                                android:layout_marginTop="1dp"/>
+
+                            <TextView
+                                android:layout_width="wrap_content"
+                                android:layout_height="wrap_content"
+                                android:id="@+id/recording_time_text"
+                                android:text="00:00"
+                                android:textColor="#4d4c4b"
+                                android:textSize="16dp"
+                                android:layout_gravity="center_vertical"
+                                android:layout_marginLeft="6dp"/>
+
+                        </LinearLayout>
+
+                    </org.telegram.ui.Views.FrameLayoutFixed>
 
                 </org.telegram.ui.Views.FrameLayoutFixed>
 
-                <ImageButton
+                <FrameLayout
                     android:layout_width="48dp"
                     android:layout_height="48dp"
-                    android:layout_marginTop="2dp"
-                    android:scaleType="centerInside"
-                    android:id="@+id/chat_audio_send_button"
-                    android:layout_alignParentRight="true"
-                    android:layout_alignBottom="@+id/chat_text_edit"
-                    android:enabled="false"
-                    android:src="@drawable/mic_button_states"
-                    android:paddingRight="4dp"
-                    android:background="@android:color/white"/>
-
-            </RelativeLayout>
+                    android:layout_gravity="bottom"
+                    android:layout_marginTop="2dp">
+
+                    <ImageButton
+                        android:layout_width="48dp"
+                        android:layout_height="48dp"
+                        android:scaleType="centerInside"
+                        android:id="@+id/chat_audio_send_button"
+                        android:enabled="false"
+                        android:src="@drawable/mic_button_states"
+                        android:paddingRight="4dp"
+                        android:background="@android:color/white"/>
+
+                    <ImageButton
+                        android:layout_width="48dp"
+                        android:layout_height="48dp"
+                        android:scaleType="centerInside"
+                        android:id="@+id/chat_send_button"
+                        android:enabled="false"
+                        android:src="@drawable/ic_send"
+                        android:background="@android:color/transparent"/>
+
+                </FrameLayout>
+
+            </LinearLayout>
 
         </RelativeLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/popup_text_layout.xml b/TMessagesProj/src/main/res/layout/popup_text_layout.xml
index 8f949a756..02358aace 100644
--- a/TMessagesProj/src/main/res/layout/popup_text_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_text_layout.xml
@@ -19,6 +19,7 @@
             android:layout_height="wrap_content"
             android:textSize="16dp"
             android:textColor="#ff000000"
+            android:textColorLink="#ff000000"
             android:id="@+id/message_text"
             android:gravity="center"
             android:layout_gravity="center"/>
diff --git a/TMessagesProj/src/main/res/layout/settings_blocked_users_layout.xml b/TMessagesProj/src/main/res/layout/settings_blocked_users_layout.xml
deleted file mode 100644
index dd610ae5f..000000000
--- a/TMessagesProj/src/main/res/layout/settings_blocked_users_layout.xml
+++ /dev/null
@@ -1,44 +0,0 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <ListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentBottom="true"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:scrollbars="none"
-        android:paddingBottom="16dp"/>
-
-    <TextView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textColor="#808080"
-        android:gravity="center"
-        android:textSize="24dp"
-        android:id="@+id/searchEmptyView"/>
-
-    <LinearLayout
-        android:id="@+id/progressLayout"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center"
-        android:orientation="vertical">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"/>
-
-    </LinearLayout>
-
-</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/settings_do_action_layout.xml b/TMessagesProj/src/main/res/layout/settings_do_action_layout.xml
deleted file mode 100644
index d4bf5108c..000000000
--- a/TMessagesProj/src/main/res/layout/settings_do_action_layout.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <Button
-        android:textSize="12dp"
-        android:textColor="#ffffff"
-        android:id="@+id/cancel_button"
-        android:background="@drawable/bar_selector"
-        android:paddingLeft="3dp"
-        android:layout_width="0.0dip"
-        android:layout_height="fill_parent"
-        android:textAllCaps="true"
-        android:layout_weight="1.0"
-        android:textStyle="bold"/>
-
-    <View
-        android:layout_gravity="center_vertical"
-        android:background="#c9c9c9"
-        android:layout_width="1px"
-        android:layout_height="28dp" />
-
-    <FrameLayout
-        android:id="@+id/done_button"
-        android:background="@drawable/bar_selector"
-        android:paddingRight="3dp"
-        android:clickable="true"
-        android:layout_width="0.0dip"
-        android:layout_height="fill_parent"
-        android:layout_weight="1.0">
-
-        <TextView
-            android:textSize="12dp"
-            android:textColor="#ffffff"
-            android:gravity="center"
-            android:layout_gravity="center"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:textAllCaps="true"
-            android:id="@+id/done_button_text"
-            android:drawableLeft="@drawable/ic_done"
-            android:drawablePadding="8dp"
-            android:textStyle="bold"/>
-
-    </FrameLayout>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_layout.xml b/TMessagesProj/src/main/res/layout/settings_layout.xml
deleted file mode 100644
index 6cfa958ec..000000000
--- a/TMessagesProj/src/main/res/layout/settings_layout.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <ListView
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:id="@+id/listView"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentBottom="true"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="13dp"
-        android:paddingRight="13dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:scrollbars="none"
-        android:paddingBottom="16dp"/>
-
-</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/settings_logout_button.xml b/TMessagesProj/src/main/res/layout/settings_logout_button.xml
deleted file mode 100644
index eab1e25f4..000000000
--- a/TMessagesProj/src/main/res/layout/settings_logout_button.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="56dp"
-    android:paddingTop="8dp">
-
-    <TextView
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="@drawable/logout_button_states"
-        android:gravity="center"
-        android:textSize="17dp"
-        android:textColor="#000000"
-        android:id="@+id/settings_row_text"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_name_layout.xml b/TMessagesProj/src/main/res/layout/settings_name_layout.xml
deleted file mode 100644
index 278f37dc0..000000000
--- a/TMessagesProj/src/main/res/layout/settings_name_layout.xml
+++ /dev/null
@@ -1,72 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <FrameLayout
-        android:layout_width="64dp"
-        android:layout_height="64dp">
-
-        <org.telegram.ui.Views.BackupImageView
-            android:id="@+id/settings_avatar_image"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-        <ImageButton
-            android:id="@+id/settings_change_avatar_button"
-            android:background="@drawable/photo_spinner"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"/>
-
-    </FrameLayout>
-
-    <LinearLayout
-        android:layout_gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="13dp"
-        android:layout_marginRight="4dp"
-        android:layout_marginBottom="1dp"
-        android:layout_weight="1.0">
-
-        <TextView
-            android:textSize="21dp"
-            android:textColor="#333333"
-            android:ellipsize="end"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:lines="1"
-            android:singleLine="true" />
-
-        <TextView
-            android:textSize="14dp"
-            android:textColor="#999999"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:id="@+id/settings_online"/>
-
-    </LinearLayout>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"
-        android:layout_marginTop="4dp"/>
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_edit"
-        android:layout_marginTop="4dp"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_button_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_button_layout.xml
deleted file mode 100644
index 20a9ee2ee..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_button_layout.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_check_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_check_layout.xml
deleted file mode 100644
index de29a61f2..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_check_layout.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="104dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <ImageView
-        android:layout_gravity="center_vertical|right"
-        android:id="@+id/settings_row_check_button"
-        android:duplicateParentState="false"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="8dp"
-        android:src="@drawable/btn_check_on"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_check_notify_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_check_notify_layout.xml
deleted file mode 100644
index c9ee80459..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_check_notify_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="64dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="104dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <ImageView
-        android:layout_gravity="center_vertical|right"
-        android:id="@+id/settings_row_check_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="14dp"
-        android:src="@drawable/btn_check_on" />
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml
deleted file mode 100644
index c0bf51125..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_color_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <FrameLayout
-        android:id="@+id/settings_color"
-        android:layout_width="20dp"
-        android:layout_height="20dp"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="14dp"
-        android:layout_gravity="center_vertical|right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_detail_layout.xml b/TMessagesProj/src/main/res/layout/settings_row_detail_layout.xml
deleted file mode 100644
index f7d3d9f31..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_detail_layout.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:orientation="vertical"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginRight="8dp"
-        android:paddingLeft="8dp"
-        android:gravity="center_vertical"
-        android:layout_marginTop="10dp"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:textSize="14dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_marginBottom="12dp"
-        android:layout_gravity="bottom"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_row_version.xml b/TMessagesProj/src/main/res/layout/settings_row_version.xml
deleted file mode 100644
index 8620120b6..000000000
--- a/TMessagesProj/src/main/res/layout/settings_row_version.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="56dp"
-    android:paddingTop="8dp">
-
-    <TextView
-        android:layout_marginTop="10dp"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:gravity="center"
-        android:textSize="14dp"
-        android:textColor="#a0a0a0"
-        android:id="@+id/settings_row_text"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_unblock_info_row_layout.xml b/TMessagesProj/src/main/res/layout/settings_unblock_info_row_layout.xml
deleted file mode 100644
index 63432596f..000000000
--- a/TMessagesProj/src/main/res/layout/settings_unblock_info_row_layout.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<FrameLayout
-    android:layout_width="fill_parent"
-    android:layout_height="48dp"
-    xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center"
-        android:textColor="#9a9a9a"
-        android:textSize="15dp"
-        android:id="@+id/info_text_view"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
index 120b2bd32..257543b17 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
@@ -10,7 +10,6 @@
         android:id="@+id/background_image"/>
 
     <ProgressBar
-        android:background="#99000000"
         android:layout_width="60dp"
         android:layout_height="60dp"
         android:layout_gravity="center"
diff --git a/TMessagesProj/src/main/res/layout/updating_state_layout.xml b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
deleted file mode 100644
index 9157620e5..000000000
--- a/TMessagesProj/src/main/res/layout/updating_state_layout.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<org.telegram.ui.Views.FrameLayoutFixed
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="400dp"
-    android:layout_height="fill_parent"
-    android:background="@drawable/bar_selector"
-    android:id="@+id/back_button_background"
-    android:layout_gravity="top">
-
-    <ImageView
-        android:layout_height="wrap_content"
-        android:layout_width="wrap_content"
-        android:src="@drawable/ic_ab_back"
-        android:layout_gravity="center_vertical|left"
-        android:layout_marginLeft="3dp"
-        android:id="@+id/back_button"/>
-
-    <TextView
-        android:layout_height="wrap_content"
-        android:layout_width="wrap_content"
-        android:layout_marginLeft="16dp"
-        android:textColor="#ffffff"
-        android:textSize="17dp"
-        android:layout_gravity="center_vertical|left"
-        android:gravity="top|left"
-        android:ellipsize="end"
-        android:singleLine="true"
-        android:paddingRight="2dp"
-        android:id="@+id/status_text"/>
-
-</org.telegram.ui.Views.FrameLayoutFixed>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml
deleted file mode 100644
index 5f8796188..000000000
--- a/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:gravity="center_vertical"
-    android:orientation="horizontal"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="13dp"
-    android:paddingBottom="12dp">
-
-    <org.telegram.ui.Views.BackupImageView
-        android:id="@+id/settings_avatar_image"
-        android:layout_width="64dp"
-        android:layout_height="64dp"/>
-
-    <LinearLayout
-        android:layout_gravity="center_vertical"
-        android:orientation="vertical"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="13dp"
-        android:layout_marginBottom="1dp">
-
-        <TextView
-            android:textSize="21dp"
-            android:textColor="#333333"
-            android:ellipsize="end"
-            android:id="@+id/settings_name"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:lines="1"
-            android:singleLine="true"/>
-
-        <TextView
-            android:textSize="14dp"
-            android:textColor="#999999"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:id="@+id/settings_online"/>
-
-    </LinearLayout>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml
deleted file mode 100644
index ae0129fed..000000000
--- a/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <org.telegram.ui.Views.IdenticonView
-        android:id="@+id/identicon_view"
-        android:layout_width="32dp"
-        android:layout_height="32dp"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:layout_gravity="right|center_vertical"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/user_profile_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_layout.xml
deleted file mode 100644
index f9583be97..000000000
--- a/TMessagesProj/src/main/res/layout/user_profile_layout.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:layout_gravity="top"
-    android:background="#fafafa"
-    android:orientation="vertical">
-
-    <ListView
-        android:layout_width="fill_parent"
-        android:layout_height="0dp"
-        android:id="@+id/listView"
-        android:clipToPadding="false"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp"
-        android:paddingLeft="13dp"
-        android:paddingRight="13dp"
-        android:dividerHeight="0dp"
-        android:divider="@null"
-        android:scrollbars="none"
-        android:paddingBottom="16dp"
-        android:layout_gravity="top"
-        android:layout_weight="1"/>
-
-    <FrameLayout
-        android:layout_height="48dp"
-        android:layout_width="fill_parent"
-        android:background="@drawable/gray_button"
-        android:id="@+id/start_secret_button">
-
-        <TextView
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:textSize="18dp"
-            android:textColor="#444444"
-            android:layout_gravity="center"
-            android:drawableLeft="@drawable/bigtimer"
-            android:gravity="center"
-            android:id="@+id/start_secret_button_text"/>
-
-    </FrameLayout>
-
-</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/user_profile_leftright_row_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_leftright_row_layout.xml
deleted file mode 100644
index 9ac16a579..000000000
--- a/TMessagesProj/src/main/res/layout/user_profile_leftright_row_layout.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="50dp"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#316f9f"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_gravity="right"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/user_profile_phone_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_phone_layout.xml
deleted file mode 100644
index 3b8b75597..000000000
--- a/TMessagesProj/src/main/res/layout/user_profile_phone_layout.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="64dp"
-    android:background="@drawable/list_selector"
-    android:layout_gravity="top">
-
-    <TextView
-        android:textSize="18dp"
-        android:textColor="#333333"
-        android:id="@+id/settings_row_text"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_marginTop="9dp"
-        android:layout_gravity="top"/>
-
-    <TextView
-        android:textSize="13dp"
-        android:textColor="#999999"
-        android:id="@+id/settings_row_text_detail"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="8dp"
-        android:layout_marginRight="8dp"
-        android:gravity="center_vertical"
-        android:layout_marginBottom="9dp"
-        android:textAllCaps="true"
-        android:layout_gravity="bottom"/>
-
-    <ImageButton
-        android:id="@+id/settings_call_phone"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:layout_marginRight="48dp"
-        android:src="@drawable/call"
-        android:layout_gravity="right|center_vertical"
-        android:paddingTop="2dp"/>
-
-    <View
-        android:background="#e8e8e8"
-        android:layout_width="1dp"
-        android:layout_height="48dp"
-        android:layout_gravity="right|center_vertical"
-        android:layout_marginRight="48dp"/>
-
-    <ImageButton
-        android:id="@+id/settings_edit_name"
-        android:background="@drawable/list_selector"
-        android:clickable="true"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:src="@drawable/ic_profile_send_message"
-        android:layout_gravity="right|center_vertical"
-        android:paddingTop="2dp"/>
-
-    <View
-        android:background="@color/divider"
-        android:layout_width="fill_parent"
-        android:layout_height="1px"
-        android:layout_gravity="bottom"
-        android:id="@+id/settings_row_divider"/>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/raw/sound_a.wav b/TMessagesProj/src/main/res/raw/sound_a.wav
deleted file mode 100644
index c6b95a1ef..000000000
Binary files a/TMessagesProj/src/main/res/raw/sound_a.wav and /dev/null differ
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index aad732761..544ddf365 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">ar</string>
     <!--signin view-->
     <string name="YourPhone">رقم هاتفك المحمول</string>
-    <string name="StartText">يرجى التحقق من صحة رمز بلدك وإدخال رقم هاتفك المحمول</string>
+    <string name="StartText">يرجى التحقق من صحة رمز بلدك وإدخال رقم هاتفك المحمول.</string>
     <string name="ChooseCountry">اختر دولة</string>
     <string name="WrongCountry">رمز البلد خاطئ</string>
     <!--code enter view-->
@@ -28,7 +28,7 @@
     <string name="LastName">اسم العائلة</string>
     <string name="CancelRegistration">إلغاء التسجيل</string>
     <!--chats view-->
-    <string name="Chats">المحادثات</string>
+    <string name="Chats">الدردشات</string>
     <string name="Search">بحث</string>
     <string name="NewMessages">الرسائل الجديدة</string>
     <string name="Settings">الإعدادات</string>
@@ -37,7 +37,7 @@
     <string name="Yesterday">أمس</string>
     <string name="NoResult">لا توجد نتائج</string>
     <string name="NoChats">...لا توجد محادثات بعد</string>
-    <string name="NoChatsHelp">إبدأ المراسلة بالضغط على\nأيقونة النقاط في أعلى يمين الشاشة\nأو اضغط على زر القائمة الرئيسية لخيارات أكثر.</string>
+    <string name="NoChatsHelp">إبدأ المراسلة بالضغط على\nأيقونة النقاط في أعلى يمين الشاشة\nأو اذهب لقسم جهات الاتصال.</string>
     <string name="WaitingForNetwork">في إنتظار الشبكة...</string>
     <string name="Connecting">جاري الاتصال...</string>
     <string name="Updating">جاري التحديث...</string>
@@ -47,16 +47,15 @@
     <string name="EncryptionProcessing">جاري إرسال المفاتيح المشفرة...</string>
     <string name="EncryptedChatStartedOutgoing">%s قام بالدخول للمحادثة السرية.</string>
     <string name="EncryptedChatStartedIncoming">لقد قمت بالدخول للمحادثة السرية.</string>
-    <string name="ClearHistory">مسح سجل التاريخ</string>
+    <string name="ClearHistory">مسح سجل المحادثات</string>
     <string name="DeleteChat">حذف وخروج</string>
-    <string name="HiddenName">الاسم مخفي</string>
+    <string name="DeleteChatUser">حذف المحادثة</string>
+    <string name="HiddenName">حساب محذوف</string>
     <string name="SelectChat">اختر محادثة</string>
-    <string name="PhotoTip">إضغط بإستمرار على المستخدم العرض</string>
+    <string name="PhotoTip">اضغط بإستمرار على المستخدم العرض</string>
     <string name="CompatibilityChat">%1$s يستخدم إصدار قديم من تيليجرام، لذلك، الصور السرية ستظهر في وضع الموافقة.\n\nعندما يقوم %2$s بتحديث تيليجرام، الصور التي بها عداد دقيقة أو أقل ستعمل بطريقة \"الاستمرار بالضغط للإستعراض\"، وسيتم إخبارك عندما يلتقط المستقبل صورة من شاشته.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">الرسائل</string>
     <!--broadcasts-->
-    <string name="BroadcastList">قائمة الرسالة الجماعية</string>
     <string name="NewBroadcastList">رسالة جماعية جديدة</string>
     <string name="EnterListName">أدخل اسم القائمة</string>
     <string name="YouCreatedBroadcastList">أنت قمت بإنشاء قائمة رسالة جماعية</string>
@@ -75,10 +74,10 @@
     <string name="ExternalStorage">الذاكرة الخارجية</string>
     <string name="SystemRoot">جذر النظام</string>
     <string name="SdCard">بطاقة الذاكرة</string>
+    <string name="Folder">مجلد</string>
     <!--chat view-->
     <string name="Invisible">مخفي</string>
     <string name="Typing">جاري الكتابة… </string>
-    <string name="Attach">أرفق</string>
     <string name="IsTyping">يكتب… </string>
     <string name="AreTyping">يكتبون… </string>
     <string name="GotAQuestion">هل يوجد لديك سؤال\nحول تيليجرام؟</string>
@@ -88,17 +87,12 @@
     <string name="ChatVideo">مقطع مرئي</string>
     <string name="ChatDocument">مستند</string>
     <string name="NoMessages">...لا توجد رسائل بعد</string>
-    <string name="ViewPhoto">عرض الصورة</string>
-    <string name="ViewLocation">عرض الموقع</string>
-    <string name="ViewVideo">مشاهدة المقطع المرئي</string>
     <string name="ForwardedMessage">الرسالة المعاد توجيهها</string>
     <string name="From">من</string>
     <string name="NoRecent">لا توجد رسائل أحدث</string>
     <string name="Message">الرسالة</string>
-    <string name="TypeMessage">أكتب رسالة</string>
-    <string name="DOWNLOAD">تحميل</string>
-    <string name="Selected">تم تحديد : %d</string>
-    <string name="ShareMyContactInfo">شارك جهة الاتصال الخاصة بي</string>
+    <string name="TypeMessage">الرسالة</string>
+    <string name="ShareMyContactInfo">قم بمشاركة جهة الاتصال الخاصة بي</string>
     <string name="AddToContacts">أضف لجهات الاتصال</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s قام بدعوتك لمحادثة سرية</string>
     <string name="EncryptedPlaceholderTitleOutgoing">لقد قمت بدعوة %s لمحادثة سرية.</string>
@@ -116,8 +110,6 @@
     <string name="ApplyLocalizationFile">تطبيق ملف التعريب</string>
     <string name="UnsupportedAttachment">المرفق غير مدعوم</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">تم طلب محادثة سرية</string>
-    <string name="EncryptedChatAccepted">تم بدء المحادثة السرية</string>
     <string name="MessageLifetimeChanged">%1$s قام بتعيين عداد التدمير الذاتي إلى to %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">لقد قمت بتعيين التدمير الذاتي إلى %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s قام بإيقاف عداد التدمير الذاتي</string>
@@ -154,28 +146,28 @@
     <string name="ReplyToUser">الرد على %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">رسالة جديدة</string>
     <string name="SelectContact">اختر جهة اتصال</string>
     <string name="NoContacts">لا توجد جهات اتصال بعد</string>
     <string name="InviteText">http://telegram.org/dl2 مرحبا! هيا نستخدم تيليجرام: </string>
     <string name="TodayAt">اليوم الساعة</string>
     <string name="YesterdayAt">أمس الساعة</string>
     <string name="Online">متصل</string>
-    <string name="Offline">غير متصل</string>
     <string name="LastSeen">آخر ظهور</string>
     <string name="LastSeenDate">آخر ظهور</string>
     <string name="InviteFriends">قم بدعوة صديق</string>
     <string name="GlobalSearch">بحث شامل</string>
+    <string name="Lately">آخر ظهور كان قريب</string>
+    <string name="WithinAWeek">آخر ظهور خلال أسبوع</string>
+    <string name="WithinAMonth">آخر ظهور خلال شهر</string>
+    <string name="ALongTimeAgo">آخر ظهور خلال فترة طويلة</string>
     <!--group create view-->
     <string name="SendMessageTo">إرسال الرسالة إلى...</string>
     <string name="EnterGroupNamePlaceholder">أدخل اسم للمجموعة</string>
     <string name="GroupName">اسم المجموعة</string>
-    <string name="AllContacts">جميع جهات الاتصال</string>
     <string name="MembersCount">%1$d/%2$d عضو</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">أدخل سم للمجموعة</string>
     <string name="SharedMedia">عدد الوسائط المشتركة</string>
-    <string name="GroupInfo">معلومات المجموعة</string>
-    <string name="SHAREDMEDIA">عرض الوسائط المشتركة</string>
     <string name="SETTINGS">الإعدادات</string>
     <string name="AddMember">إضافة مشترك</string>
     <string name="DeleteAndExit">مغادرة المجموعة وحذفها</string>
@@ -184,19 +176,17 @@
     <!--contact info view-->
     <string name="ShareContact">مشاركة</string>
     <string name="AddContact">إضافة</string>
+    <string name="AddContactTitle">قم بإضافة جهة اتصال</string>
     <string name="BlockContact">حظر</string>
     <string name="EditContact">تعديل</string>
     <string name="DeleteContact">حذف</string>
-    <string name="PhoneHome">الهاتف المنزلي</string>
+    <string name="PhoneHome">منزل</string>
     <string name="PhoneMobile">الهاتف المحمول</string>
-    <string name="PhoneWork">هاتف العمل</string>
-    <string name="PhoneOther">هاتف آخر</string>
-    <string name="PhoneMain">الهاتف الأساسي</string>
-    <string name="ContactInfo">معلومات جهة الاتصال</string>
-    <string name="PHONE">الهاتف</string>
+    <string name="PhoneWork">العمل</string>
+    <string name="PhoneOther">آخر</string>
+    <string name="PhoneMain">الرئيسية</string>
     <string name="StartEncryptedChat">إبدأ محادثة سرية</string>
     <string name="CreateEncryptedChatError">حدث خطأ.</string>
-    <string name="SecretTitle">محادثة سرية</string>
     <string name="EncryptionKey">مفتاح التشفير</string>
     <string name="MessageLifetime">عداد التدمير الذاتي</string>
     <string name="ShortMessageLifetimeForever">إيقاف</string>
@@ -224,14 +214,14 @@
     <string name="EnableAnimations">تفعيل التأثيرات المتحركة</string>
     <string name="EnableMarkdown">تفعيل رموز التنسيق</string>
     <string name="Unblock">إلغاء الحظر</string>
-    <string name="UnblockText">إضغط بإستمرار على المستخدم لإلغاء الحظر</string>
+    <string name="UnblockText">اضغط بإستمرار على المستخدم لإلغاء الحظر</string>
     <string name="NoBlocked">لا توجد جهات اتصال محظورة</string>
     <string name="MessageNotifications">إشعارات الرسائل</string>
     <string name="Alert">التنبيه</string>
     <string name="MessagePreview">معاينة الرسالة</string>
     <string name="GroupNotifications">إشعارات المجموعات</string>
     <string name="Sound">الصوت</string>
-    <string name="InAppNotifications">إشعارات داخل التطبيق</string>
+    <string name="InAppNotifications">الإشعارات داخل التطبيق</string>
     <string name="InAppSounds">أصوات داخل التطبيق</string>
     <string name="InAppVibrate">اهتزاز داخل التطبيق</string>
     <string name="Vibrate">اهتزاز</string>
@@ -241,9 +231,7 @@
     <string name="UndoAllCustom">إعادة تعيين كافة إعدادات الإشعارات لجميع جهات الاتصال والمجموعات</string>
     <string name="NotificationsAndSounds">الإشعارات والأصوات</string>
     <string name="BlockedUsers">جهات الاتصال المحظورة</string>
-    <string name="SaveIncomingPhotos">حفظ الصور الواردة</string>
     <string name="LogOut">تسجيل خروج</string>
-    <string name="YourFirstNameAndLastName">اسمك واسم عائلتك</string>
     <string name="NoSound">لا يوجد صوت</string>
     <string name="Default">افتراضي</string>
     <string name="Support">الدعم</string>
@@ -267,7 +255,6 @@
     <string name="NotificationsServiceDisableInfo">إذا كانت خدمات Google play كافية بالنسبة لك لتلقي الإشعارات ، يمكنك تعطيل \" خدمة الإشعارات \" . ومع ذلك نحن نوصي بترك هذه الخدمة مفعلة للحفاظ على تشغيل التطبيق في الخلفية ، ولتلقي إشعارات الدردشة .</string>
     <string name="SortBy">فرز حسب</string>
     <string name="ImportContacts">استيراد جهات الاتصال</string>
-    <string name="WiFiOnly">بواسطة WiFi فقط</string>
     <string name="SortFirstName">الاسم الأول</string>
     <string name="SortLastName">اسم العائلة</string>
     <string name="LedColor">لون إضاءة الـ LED</string>
@@ -281,17 +268,16 @@
     <string name="Long">طويل</string>
     <string name="SystemDefault">النظام الإفتراضي</string>
     <string name="SettingsDefault">الإعدادات الإفتراضية</string>
-    <string name="AutomaticMediaDownload">تنزيل الوسائط تلقائيا</string>
+    <string name="AutomaticMediaDownload">تنزيل تلقائي للوسائط</string>
     <string name="WhenUsingMobileData">عند استخدام البيانات الخلوية</string>
     <string name="WhenConnectedOnWiFi">عند الاتصال بالشبكة اللاسلكية</string>
     <string name="WhenRoaming">عند تواجدك خارج البلاد</string>
     <string name="NoMediaAutoDownload">لا يوجد وسائط</string>
     <string name="SaveToGallerySettings">حفظ في الجهاز</string>
+    <string name="EditName">تعديل الاسم</string>
     <!--media view-->
     <string name="NoMedia">لا توجد وسائط بعد</string>
-    <string name="CancelDownload">إلغاء التنزيل</string>
     <!--map view-->
-    <string name="MyLocation">موقعي</string>
     <string name="Map">الخريطة</string>
     <string name="Satellite">قمر صناعي</string>
     <string name="Hybrid">هجين</string>
@@ -306,6 +292,39 @@
     <string name="Gallery">الألبوم</string>
     <string name="AllPhotos">جميع الصور</string>
     <string name="NoPhotos">لا توجد صور حتى الآن</string>
+    <string name="PleaseDownload">فضلًا، قم بتنزيل الوسائط أولًا</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">الخصوصية والأمان</string>
+    <string name="PrivacyTitle">الخصوصية</string>
+    <string name="PrivacyLastSeen">آخر ظهور</string>
+    <string name="LastSeenEverybody">الجميع</string>
+    <string name="LastSeenContacts">جهات الاتصال الخاصة بي</string>
+    <string name="LastSeenNobody">لا أحد</string>
+    <string name="LastSeenEverybodyMinus">الجميع (-%1$d)</string>
+    <string name="LastSeenContactsPlus">جهات الاتصال الخاصة بي (+%1$d)</string>
+    <string name="LastSeenContactsMinus">جهات الاتصال الخاصة بي (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">جهات الاتصال الخاصة بي (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">لا أحد (+%1$d)</string>
+    <string name="SecurityTitle">الأمان</string>
+    <string name="DeleteAccountTitle">تدمير ذاتي للحساب</string>
+    <string name="DeleteAccountIfAwayFor">إذا كنت غائب لمدة</string>
+    <string name="DeleteAccountHelp">إذا لم تقم بتسجيل الدخول خلال هذه الفترة، سيتم حذف حسابك بالإضافة إلى مجموعاتك، رسائلك، وجهات الاتصال الخاصة بك في تيليجرام.</string>
+    <string name="DeleteAccountNowConfirmation">هل ترغب في حذف حسابك؟</string>
+    <string name="LastSeenHelp">قم بتغيير من يستطيع رؤية آخر ظهور خاص بك.</string>
+    <string name="LastSeenTitle">من يستطيع رؤية آخر ظهور خاص بك؟</string>
+    <string name="AddExceptions">إضافة استثناءات</string>
+    <string name="CustomHelp">هام: لن تستطيع رؤية آخر ظهور للأشخاص اللذين اخترت ألا يروا آخر ظهور لك. سيتم عرض آخر ظهور تقريبي كبديل (قريبًا، خلال أسبوع، خلال شهر).</string>
+    <string name="AlwaysShareWith">دائمًا شارك معه</string>
+    <string name="NeverShareWith">لا تشارك أبدًا مع</string>
+    <string name="CustomShareSettingsHelp">هذه الإعدادات ستستبدل الإعدادات المختارة أعلاه.</string>
+    <string name="AlwaysShareWithTitle">دائمُا شارك</string>
+    <string name="AlwaysShareWithPlaceholder">دائمًا شارك مع جهات الاتصال...</string>
+    <string name="NeverShareWithTitle">لا تشارك أبدًا</string>
+    <string name="NeverShareWithPlaceholder">لا تشارك أبدًا مع جهات الاتصال...</string>
+    <string name="EmpryUsersPlaceholder">إضافة جهات اتصال</string>
+    <string name="PrivacyFloodControlError">المعذرة، يوجد الكثير من الطلبات حاليًا. لا نستطيع تغيير إعدادات الخصوصية الآن، يرجى الإنتظار.</string>
+    <string name="ClearOtherSessionsHelp">قم بتسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز</string>
+    <string name="RemoveFromListText">إضغط بإستمرار على المستخدم لحذفه</string>
     <!--edit video view-->
     <string name="EditVideo">تحرير الفيديو</string>
     <string name="OriginalVideo">الفيديو الأصلي</string>
@@ -331,7 +350,6 @@
     <string name="FromCamera">من الكاميرا</string>
     <string name="FromGalley">من الجهاز</string>
     <string name="DeletePhoto">حذف الصورة</string>
-    <string name="OpenPhoto">فتح الصورة</string>
     <string name="Set">تعيين</string>
     <string name="OK">موافق</string>
     <!--messages-->
@@ -374,12 +392,10 @@
     <string name="NoHandleAppInstalled">لا يوجد لديك تطبيق يمكنه فتح \'%1$s\'، يرجى تنزيل تطبيق مناسب للإستمرار</string>
     <string name="InviteUser">هذا المستخدم ليس لديه تيليجرام بعد ، هل ترغب في دعوته الآن؟</string>
     <string name="AreYouSure">هل أنت متأكد؟</string>
-    <string name="AddContactQ">هل تريد إضافة جهة اتصال؟</string>
     <string name="AddToTheGroup">هل ترغب في إضافة %1$s للمجموعة؟\n\nعدد الرسائل الحديثة المراد إعادة تحويلها:</string>
     <string name="ForwardMessagesTo">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
-    <string name="DeleteChatQuestion">هل تريد حذف هذه الدردشة؟</string>
     <string name="SendMessagesTo">هل ترغب في إرسال رسالة إلى %1$s؟</string>
-    <string name="AreYouSureLogout">هل أنت متأكد من أنك تريد تسجيل الخروج؟</string>
+    <string name="AreYouSureLogout">نرجو الأخذ بالعلم أنه يمكنك استخدام تيليجرام على أجهزتك المتعددة بسهولة تامة وفي وقت واحد.\n\nوتذكر، تسجيل الخروج يحذف كافة محادثاتك السرية.</string>
     <string name="AreYouSureSessions">هل أنت متأكد من تسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز؟</string>
     <string name="AreYouSureDeleteAndExit">هل أنت متأكد من أنك تريد حذف المجموعة والخروج منها؟</string>
     <string name="AreYouSureDeleteThisChat">هل أنت متأكد من رغبتك في حذف المجموعة؟</string>
@@ -388,7 +404,9 @@
     <string name="AreYouSureUnblockContact">هل أنت متأكد من رغبتك في إزالة الحظر عن جهة الاتصال هذه؟</string>
     <string name="AreYouSureDeleteContact">هل أنت متأكد من رغبتك في حذف جهة الاتصال هذه؟</string>
     <string name="AreYouSureSecretChat">هل أنت متأكد من أنك تريد بدء محادثة سرية؟</string>
-    <string name="ForwardFromMyName">أعد الإرسال باستخدام اسمي</string>
+    <string name="AreYouSureRegistration">هل أنت متأكد من رغبتك في إلغاء التسجيل؟</string>
+    <string name="AreYouSureClearHistory">هل أنت متأكد من رغبتك في حذف سجل المحادثات؟</string>
+    <string name="AreYouSureDeleteMessages">هل أنت متأكد من رغبتك في حذف %1$s؟</string>
     <string name="SendMessagesToGroup">هل ترغب في إرسال رسالة إلى %1$s؟</string>
     <string name="ForwardMessagesToGroup">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
     <string name="FeatureUnavailable">.Sorry, this feature is currently not available in your country</string>
@@ -475,6 +493,24 @@
     <string name="Weeks_few">%1$d أسابيع</string>
     <string name="Weeks_many">%1$d أسبوع</string>
     <string name="Weeks_other">%1$d أسبوع</string>
+    <string name="Months_zero">%1$d شهر</string>
+    <string name="Months_one">%1$d شهر</string>
+    <string name="Months_two">%1$d شهران</string>
+    <string name="Months_few">%1$d أشهر</string>
+    <string name="Months_many">%1$d شهر</string>
+    <string name="Months_other">%1$d شهر</string>
+    <string name="Years_zero">%1$d سنة</string>
+    <string name="Years_one">%1$d سنة</string>
+    <string name="Years_two">%1$d سنتان</string>
+    <string name="Years_few">%1$d سنوات</string>
+    <string name="Years_many">%1$d سنة</string>
+    <string name="Years_other">%1$d سنة</string>
+    <string name="Users_zero">%1$d مستخدم</string>
+    <string name="Users_one">%1$d مستخدم</string>
+    <string name="Users_two">%1$d مستخدمان</string>
+    <string name="Users_few">%1$d مستخدمون</string>
+    <string name="Users_many">%1$d مستخدم</string>
+    <string name="Users_other">%1$d مستخدم</string>
     <!--date formatters-->
     <string name="formatterMonth">MMM dd</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 78cff95d3..0d91c0e73 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">de</string>
     <!--signin view-->
     <string name="YourPhone">Dein Telefon</string>
-    <string name="StartText">Bitte Landeskennzahl und\nTelefonnummer bestätigen.</string>
+    <string name="StartText">Bitte bestätige deine Landesvorwahl und deine Telefonnummer.</string>
     <string name="ChooseCountry">Wähle ein Land</string>
     <string name="WrongCountry">Falsche Landesvorwahl</string>
     <!--code enter view-->
@@ -28,9 +28,6 @@
     <string name="LastName">Nachname (optional)</string>
     <string name="CancelRegistration">Registrierung abbrechen</string>
     <!--chats view-->
-    <string name="Chats">Chats</string>
-    <string name="Search">Suche</string>
-    <string name="NewMessages">Neue Nachrichten</string>
     <string name="Settings">Einstellungen</string>
     <string name="Contacts">Kontakte</string>
     <string name="NewGroup">Neue Gruppe</string>
@@ -41,22 +38,21 @@
     <string name="WaitingForNetwork">Warte auf Netzwerk...</string>
     <string name="Connecting">Verbinde…</string>
     <string name="Updating">Aktualisiere…</string>
-    <string name="NewSecretChat">Neuer geheimer Chat</string>
+    <string name="NewSecretChat">Neuer Geheimer Chat</string>
     <string name="AwaitingEncryption">Warte, bis %s online geht…</string>
-    <string name="EncryptionRejected">Geheimen Chat abgelehnt</string>
+    <string name="EncryptionRejected">Geheimen Chat abgebrochen</string>
     <string name="EncryptionProcessing">Tausche Schlüssel aus…</string>
     <string name="EncryptedChatStartedOutgoing">%s ist deinem geheimen Chat beigetreten.</string>
     <string name="EncryptedChatStartedIncoming">Du bist dem geheimen Chat beigetreten.</string>
     <string name="ClearHistory">Verlauf löschen</string>
     <string name="DeleteChat">Löschen und beenden</string>
-    <string name="HiddenName">Versteckter Name</string>
+    <string name="DeleteChatUser">Lösche Chat</string>
+    <string name="HiddenName">Gelöschtes Konto</string>
     <string name="SelectChat">Chat auswählen</string>
     <string name="PhotoTip">Tippen und Halten</string>
     <string name="CompatibilityChat">%1$s benutzt eine ältere Version von Telegram, sodass Fotos in Geheimen Chats im Kompatibilitätsmodus angezeigt werden.\n\nSobald %2$s Telegram aktualisiert, werden Fotos mit Timern von 1 Minute und kürzer per \"Tippen und Halten\" angezeigt. Du wirst benachrichtigt, sobald dein Chatpartner ein Bildschirmfoto macht.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">NACHRICHTEN</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Broadcast Liste</string>
     <string name="NewBroadcastList">Neue Broadcast Liste</string>
     <string name="EnterListName">Listenname</string>
     <string name="YouCreatedBroadcastList">Du hast eine Broadcast Liste erstellt</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">Externer Speicher</string>
     <string name="SystemRoot">Systemverzeichnis</string>
     <string name="SdCard">SD-Karte</string>
+    <string name="Folder">Ordner</string>
     <!--chat view-->
     <string name="Invisible">unsichtbar</string>
     <string name="Typing">schreibt…</string>
-    <string name="Attach">Anhängen</string>
     <string name="IsTyping">schreibt...</string>
     <string name="AreTyping">tippen…</string>
     <string name="GotAQuestion">Hast du eine Frage\nzu Telegram?</string>
@@ -88,18 +84,13 @@
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Datei</string>
     <string name="NoMessages">Noch keine Nachrichten…</string>
-    <string name="ViewPhoto">Foto anzeigen</string>
-    <string name="ViewLocation">Standort anzeigen</string>
-    <string name="ViewVideo">Video abspielen</string>
     <string name="ForwardedMessage">Weitergeleitete Nachricht</string>
     <string name="From">Von</string>
     <string name="NoRecent">Keine aktuellen</string>
     <string name="Message">Nachricht</string>
-    <string name="TypeMessage">Nachricht verfassen</string>
-    <string name="DOWNLOAD">Download</string>
-    <string name="Selected">Ausgewählt: %d</string>
-    <string name="ShareMyContactInfo">MEINE TELEFONNUMMER TEILEN</string>
-    <string name="AddToContacts">ZU KONTAKTEN HINZUFÜGEN</string>
+    <string name="TypeMessage">Nachricht</string>
+    <string name="ShareMyContactInfo">Meine Telefonnummer teilen</string>
+    <string name="AddToContacts">Zu Kontakten hinzufügen</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s hat dich zu einem\nEnde-zu-Ende verschlüsselten\nGeheimen Chat eingeladen.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Du hast %s zu einem\nEnde-zu-Ende verschlüsselten\nGeheimen Chat eingeladen.</string>
     <string name="EncryptedDescriptionTitle">Geheime Chats in Kürze:</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
     <string name="UnsupportedAttachment">Nicht unterstützte Datei</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Geheimen Chat angefordert</string>
-    <string name="EncryptedChatAccepted">Geheimen Chat angenommen</string>
     <string name="MessageLifetimeChanged">%1$s hat den Selbstzerstörungs-Timer auf %2$s gesetzt</string>
     <string name="MessageLifetimeChangedOutgoing">Du hast den Selbstzerstörungs-Timer auf %1$s gesetzt</string>
     <string name="MessageLifetimeRemoved">%1$s hat den Selbstzerstörungs-Timer deaktivert</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">%1$s antworten</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Neue Nachricht</string>
     <string name="SelectContact">Kontakt auswählen</string>
     <string name="NoContacts">Noch keine Kontakte</string>
     <string name="InviteText">Hey, lass uns zu Telegram wechseln: http://telegram.org/dl2</string>
     <string name="TodayAt">heute um</string>
     <string name="YesterdayAt">gestern um</string>
     <string name="Online">online</string>
-    <string name="Offline">offline</string>
     <string name="LastSeen">zul. online</string>
     <string name="LastSeenDate">zul. online</string>
     <string name="InviteFriends">Freunde einladen</string>
     <string name="GlobalSearch">GLOBALE SUCHE</string>
+    <string name="Lately">zuletzt kürzlich gesehen</string>
+    <string name="WithinAWeek">diese Woche gesehen</string>
+    <string name="WithinAMonth">diesen Monat gesehen</string>
+    <string name="ALongTimeAgo">vor langer Zeit gesehen</string>
     <!--group create view-->
     <string name="SendMessageTo">Sende Nachricht an…</string>
     <string name="EnterGroupNamePlaceholder">Gruppenname</string>
     <string name="GroupName">Gruppenname</string>
-    <string name="AllContacts">ALLE KONTAKTE</string>
     <string name="MembersCount">%1$d/%2$d Mitglieder</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">GRUPPENNAMEN EINGEBEN</string>
     <string name="SharedMedia">Geteilte Medien</string>
-    <string name="GroupInfo">Gruppeninfo</string>
-    <string name="SHAREDMEDIA">GETEILTE MEDIEN</string>
-    <string name="SETTINGS">EINSTELLUNGEN</string>
+    <string name="SETTINGS">Einstellungen</string>
     <string name="AddMember">Mitglied hinzufügen</string>
     <string name="DeleteAndExit">Gruppe löschen und verlassen</string>
     <string name="Notifications">Mitteilungen</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Teilen</string>
     <string name="AddContact">Hinzufügen</string>
+    <string name="AddContactTitle">Kontakt hinzufügen</string>
     <string name="BlockContact">Blockieren</string>
     <string name="EditContact">Bearbeiten</string>
     <string name="DeleteContact">Löschen</string>
-    <string name="PhoneHome">FESTNETZ</string>
-    <string name="PhoneMobile">MOBIL</string>
-    <string name="PhoneWork">ARBEIT</string>
-    <string name="PhoneOther">SONSTIGES</string>
-    <string name="PhoneMain">HAUPTNUMMER</string>
-    <string name="ContactInfo">Kontaktdaten</string>
-    <string name="PHONE">TELEFON</string>
+    <string name="PhoneHome">Festnetz</string>
+    <string name="PhoneMobile">Mobil</string>
+    <string name="PhoneWork">Arbeit</string>
+    <string name="PhoneOther">Sonstiges</string>
+    <string name="PhoneMain">Hauptnummer</string>
     <string name="StartEncryptedChat">Geheimen Chat starten</string>
     <string name="CreateEncryptedChatError">Es ist ein Fehler aufgetreten.</string>
-    <string name="SecretTitle">Geheimer Chat</string>
     <string name="EncryptionKey">Geheimer Schlüssel</string>
     <string name="MessageLifetime">Selbstzerstörungs-Timer</string>
     <string name="ShortMessageLifetimeForever">Aus</string>
     <string name="EncryptionKeyDescription">Das ist eine Darstellung des Schlüssels für den Geheimen Chat mit <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Wenn dieses Bild auf <![CDATA[<b>]]>%2$s\s<![CDATA[</b>]]>s Telefon genau so aussieht, ist euer Chat zu 200%% sicher.<![CDATA[<br><br>]]>Erfahre mehr auf telegram.org</string>
     <string name="NumberUnknown">Unbekannt</string>
-    <string name="Info">INFO</string>
+    <string name="Info">Info</string>
     <string name="Phone">Telefon</string>
     <!--usernames-->
     <string name="Username">Benutzername</string>
@@ -212,7 +199,7 @@
     <string name="UsernameInvalidShort">Ein Benutzername benötigt mindestens 5 Zeichen.</string>
     <string name="UsernameInvalidLong">Ein Benutzername darf maximal 32 Zeichen haben.</string>
     <string name="UsernameInvalidStartNumber">Benutzernamen dürfen leider nicht mit einer Zahl anfangen.</string>
-    <string name="UsernameHelp">Wähle einen Benutzernamen, wenn du von anderen bei<![CDATA[<b>]]>Telegram<![CDATA[</b>]]>gefunden werden willst — ohne, dass sie deine Nummer kennen müssen.<![CDATA[<br><br>]]>Erlaubt sind <![CDATA[<b>]]>a-z<![CDATA[<b>]]>, <![CDATA[<b>]]>0-9<![CDATA[<b>]]> und Unterstriche. Die Mindestlänge beträgt <![CDATA[<b>]]>5<![CDATA[<b>]]> Zeichen.</string>
+    <string name="UsernameHelp">Wähle einen Benutzernamen, wenn du von anderen bei <![CDATA[<b>]]>Telegram<![CDATA[</b>]]> gefunden werden willst — ohne, dass sie deine Nummer kennen müssen.<![CDATA[<br><br>]]>Erlaubt sind <![CDATA[<b>]]>a-z<![CDATA[<b>]]>, <![CDATA[<b>]]>0-9<![CDATA[<b>]]> und Unterstriche. Die Mindestlänge beträgt <![CDATA[<b>]]>5<![CDATA[<b>]]> Zeichen.</string>
     <string name="UsernameChecking">Prüfe Benutzername...</string>
     <string name="UsernameAvailable">%1$s ist verfügbar.</string>
     <string name="UsernameEmpty">Keiner</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Freigeben</string>
     <string name="UnblockText">Gedrückt halten um freizugeben.</string>
     <string name="NoBlocked">Keine blockierten Benutzer</string>
-    <string name="MessageNotifications">NACHRICHTEN</string>
+    <string name="MessageNotifications">Nachrichten</string>
     <string name="Alert">Benachrichtigung</string>
     <string name="MessagePreview">Vorschau</string>
-    <string name="GroupNotifications">GRUPPEN</string>
+    <string name="GroupNotifications">Gruppen</string>
     <string name="Sound">Nachrichtenton auswählen</string>
-    <string name="InAppNotifications">IN-APP</string>
+    <string name="InAppNotifications">In-App </string>
     <string name="InAppSounds">In-App-Töne</string>
     <string name="InAppVibrate">In-App-Vibration</string>
     <string name="Vibrate">Vibrieren</string>
     <string name="InAppPreview">In-App-Vorschau</string>
-    <string name="Reset">ZURÜCKSETZEN</string>
+    <string name="Reset">Zurücksetzen</string>
     <string name="ResetAllNotifications">Mitteilungseinstellungen zurücksetzen</string>
     <string name="UndoAllCustom">Setzt alle benutzerdefinierten Einstellungen für Mitteilungen zurück</string>
     <string name="NotificationsAndSounds">Mitteilungen und Töne</string>
     <string name="BlockedUsers">Blockierte Benutzer</string>
-    <string name="SaveIncomingPhotos">Speichere eingehende Bilder</string>
     <string name="LogOut">Abmelden</string>
-    <string name="YourFirstNameAndLastName">DEIN VOR- UND NACHNAME</string>
     <string name="NoSound">Kein Ton</string>
     <string name="Default">Standard</string>
-    <string name="Support">SUPPORT</string>
+    <string name="Support">Support</string>
     <string name="ChatBackground">Chat-Hintergrundbild</string>
-    <string name="MessagesSettings">NACHRICHTEN</string>
+    <string name="MessagesSettings">Nachrichten</string>
     <string name="SendByEnter">Mit Enter senden</string>
     <string name="TerminateAllSessions">Alle anderen Sitzungen beenden</string>
-    <string name="Events">EREIGNISSE</string>
+    <string name="Events">Ereignisse</string>
     <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Sprache</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Sofern Google Play Dienste ausreichend für deine Mitteilungen sind, kannst du unseren Mitteilungsdienst abschalten. Wir empfehlen allerdings, unseren Dienst dauerhaft aktiviert zu lassen, um über neue Nachrichten in Echtzeit informiert zu werden.</string>
     <string name="SortBy">sortiert nach</string>
     <string name="ImportContacts">Kontakte importieren</string>
-    <string name="WiFiOnly">Nur über W-LAN</string>
     <string name="SortFirstName">Vorname</string>
     <string name="SortLastName">Nachname</string>
     <string name="LedColor">LED-Farbe</string>
@@ -281,17 +265,16 @@
     <string name="Long">Lang</string>
     <string name="SystemDefault">Systemvorgabe</string>
     <string name="SettingsDefault">Telegramvorgabe</string>
-    <string name="AutomaticMediaDownload">AUTOMATISCHER MEDIENDOWNLOAD</string>
+    <string name="AutomaticMediaDownload">Automatischer Mediendownload</string>
     <string name="WhenUsingMobileData">über Mobilfunk</string>
     <string name="WhenConnectedOnWiFi">über W-LAN</string>
     <string name="WhenRoaming">bei Roaming</string>
     <string name="NoMediaAutoDownload">kein automatischer Download</string>
     <string name="SaveToGallerySettings">In der Galerie speichern</string>
+    <string name="EditName">Name bearbeiten</string>
     <!--media view-->
     <string name="NoMedia">Noch keine geteilten Medien vorhanden</string>
-    <string name="CancelDownload">Download abbrechen</string>
     <!--map view-->
-    <string name="MyLocation">Mein Standort</string>
     <string name="Map">Karte</string>
     <string name="Satellite">Satellit</string>
     <string name="Hybrid">Hybrid</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galerie</string>
     <string name="AllPhotos">Alle Fotos</string>
     <string name="NoPhotos">Noch keine Fotos</string>
+    <string name="PleaseDownload">Medien bitte zuerst herunterladen</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privatsphäre und Sicherheit</string>
+    <string name="PrivacyTitle">Privatsphäre</string>
+    <string name="PrivacyLastSeen">Zuletzt gesehen</string>
+    <string name="LastSeenEverybody">Jeder</string>
+    <string name="LastSeenContacts">Meine Kontakte</string>
+    <string name="LastSeenNobody">Niemand</string>
+    <string name="LastSeenEverybodyMinus">Jeder (-%1$d)</string>
+    <string name="LastSeenContactsPlus">Meine Kontakte (+%1$d)</string>
+    <string name="LastSeenContactsMinus">Meine Kontakte (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">Meine Kontakte (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Niemand (+%1$d)</string>
+    <string name="SecurityTitle">Sicherheit</string>
+    <string name="DeleteAccountTitle">Automatische Kontolöschung</string>
+    <string name="DeleteAccountIfAwayFor">Wenn inaktiv für</string>
+    <string name="DeleteAccountHelp">Wenn du dich innerhalb dieser Zeit nicht anmeldest, wird dein Konto mit allen Nachrichten, Gruppen und Kontakten gelöscht.</string>
+    <string name="DeleteAccountNowConfirmation">Dein Konto löschen?</string>
+    <string name="LastSeenHelp">Bearbeite wer deinen Online Status sieht.</string>
+    <string name="LastSeenTitle">Wer kann deinen Online Status sehen?</string>
+    <string name="AddExceptions">Ausnahmen hinzufügen</string>
+    <string name="CustomHelp">Wichtig: Du kannst den \"zuletzt gesehen\" Status nur von Personen sehen, mit denen du auch deinen teilst. Ansonsten wird die ungefähre Zeit angezeigt (kürzlich, innerhalb einer Woche, innerhalb eines Monats).</string>
+    <string name="AlwaysShareWith">Immer teilen mit</string>
+    <string name="NeverShareWith">Niemals teilen mit</string>
+    <string name="CustomShareSettingsHelp">Hier kannst du Kontakte hinzufügen, für die eine Ausnahme gemacht werden soll.</string>
+    <string name="AlwaysShareWithTitle">Immer teilen</string>
+    <string name="AlwaysShareWithPlaceholder">Immer teilen mit...</string>
+    <string name="NeverShareWithTitle">Niemals teilen</string>
+    <string name="NeverShareWithPlaceholder">Niemals teilen mit...</string>
+    <string name="EmpryUsersPlaceholder">Hinzufügen</string>
+    <string name="PrivacyFloodControlError">Du hast zu oft probiert, deine Einstellungen zu ändern; bitte warte kurz.</string>
+    <string name="ClearOtherSessionsHelp">Alle Geräte außer diesem werden abgemeldet.</string>
+    <string name="RemoveFromListText">Auf Nutzer tippen und halten um zu löschen.</string>
     <!--edit video view-->
     <string name="EditVideo">Video bearbeiten</string>
     <string name="OriginalVideo">Originalvideo</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Von der Kamera</string>
     <string name="FromGalley">Aus der Galerie</string>
     <string name="DeletePhoto">Foto löschen</string>
-    <string name="OpenPhoto">Foto öffnen</string>
     <string name="Set">Wählen</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">Du hast keine Applikationen, die den Dateityp \'%1$s\' öffnen könnten. Bitte installiere eine entsprechende Anwendung um fortzufahren.</string>
     <string name="InviteUser">Dieser Benutzer hat noch kein Telegram. Möchtest du ihn einladen?</string>
     <string name="AreYouSure">Bist du sicher?</string>
-    <string name="AddContactQ">Kontakt hinzufügen?</string>
     <string name="AddToTheGroup">%1$s zur Gruppe hinzufügen?\n\nAnzahl der letzten Nachrichten für die Weiterleitung:</string>
     <string name="ForwardMessagesTo">Nachrichten an %1$s weiterleiten?</string>
-    <string name="DeleteChatQuestion">Diesen Chat löschen?</string>
     <string name="SendMessagesTo">Nachricht an %1$s senden?</string>
-    <string name="AreYouSureLogout">Möchtest du dich wirklich abmelden?</string>
+    <string name="AreYouSureLogout">Wirklich abmelden?\n\nDu kannst Telegram von all deinen Geräten gleichzeitig nutzen.\n\nWichtig: Abmelden löscht deine Geheimen Chats.</string>
     <string name="AreYouSureSessions">Sicher, dass du alle anderen Geräte abmelden möchtest?</string>
     <string name="AreYouSureDeleteAndExit">Diese Gruppe wirklich löschen und verlassen?</string>
     <string name="AreYouSureDeleteThisChat">Möchtest du wirklich diesen Chat löschen?</string>
@@ -388,10 +401,12 @@
     <string name="AreYouSureUnblockContact">Blockierung für diesen Kontakt wirklich aufheben?</string>
     <string name="AreYouSureDeleteContact">Diesen Kontakt wirklich löschen?</string>
     <string name="AreYouSureSecretChat">Geheimen Chat starten?</string>
-    <string name="ForwardFromMyName">mit meinem Namen weiterleiten</string>
+    <string name="AreYouSureRegistration">Bist du dir sicher, dass du die Registrierung abbrechen willst?</string>
+    <string name="AreYouSureClearHistory">Möchtest du wirklich den Verlauf löschen?</string>
+    <string name="AreYouSureDeleteMessages">Sicher, dass du %1$s löschen willst?</string>
     <string name="SendMessagesToGroup">Nachricht an %1$s senden?</string>
     <string name="ForwardMessagesToGroup">Weiterleiten an %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <string name="FeatureUnavailable">Verzeihung, diese Funktion ist derzeit in deinem Land nicht verfügbar.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Schnell</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d Wochen</string>
     <string name="Weeks_many">%1$d Wochen</string>
     <string name="Weeks_other">%1$d Wochen</string>
+    <string name="Months_zero">%1$d Monate</string>
+    <string name="Months_one">%1$d Monat</string>
+    <string name="Months_two">%1$d Monate</string>
+    <string name="Months_few">%1$d Monate</string>
+    <string name="Months_many">%1$d Monate</string>
+    <string name="Months_other">%1$d Monate</string>
+    <string name="Years_zero">%1$d Jahre</string>
+    <string name="Years_one">%1$d Jahr</string>
+    <string name="Years_two">%1$d Jahre</string>
+    <string name="Years_few">%1$d Jahre</string>
+    <string name="Years_many">%1$d Jahre</string>
+    <string name="Years_other">%1$d Jahre</string>
+    <string name="Users_zero">%1$d Nutzer</string>
+    <string name="Users_one">%1$d Nutzer</string>
+    <string name="Users_two">%1$d Nutzer</string>
+    <string name="Users_few">%1$d Nutzer</string>
+    <string name="Users_many">%1$d Nutzer</string>
+    <string name="Users_other">%1$d Nutzer</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 2712a531f..70cdb1231 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">es</string>
     <!--signin view-->
     <string name="YourPhone">Tu teléfono</string>
-    <string name="StartText">Por favor, confirma tu código de país\ny pon tu número de teléfono.</string>
+    <string name="StartText">Por favor, confirma tu código de país y pon tu número de teléfono.</string>
     <string name="ChooseCountry">Elige un país</string>
     <string name="WrongCountry">Código de país incorrecto</string>
     <!--code enter view-->
@@ -28,9 +28,6 @@
     <string name="LastName">Apellidos (opcional)</string>
     <string name="CancelRegistration">Cancelar registro</string>
     <!--chats view-->
-    <string name="Chats">Chats</string>
-    <string name="Search">Buscar</string>
-    <string name="NewMessages">Nuevos mensajes</string>
     <string name="Settings">Ajustes</string>
     <string name="Contacts">Contactos</string>
     <string name="NewGroup">Nuevo grupo</string>
@@ -49,14 +46,13 @@
     <string name="EncryptedChatStartedIncoming">Te uniste al chat secreto.</string>
     <string name="ClearHistory">Borrar historial</string>
     <string name="DeleteChat">Eliminar y salir</string>
-    <string name="HiddenName">Nombre oculto</string>
+    <string name="DeleteChatUser">Eliminar chat</string>
+    <string name="HiddenName">Cuenta eliminada</string>
     <string name="SelectChat">Elige el chat</string>
     <string name="PhotoTip">Mantén pulsado para ver</string>
     <string name="CompatibilityChat">%1$s usa una versión antigua de Telegram, así que las fotos secretas serán mostradas en un modo de compatibilidad.\n\nCuando %2$s actualice Telegram, las fotos con autodestrucción de 1 minuto o menos funcionarán con el modo \'Mantén pulsado para ver\', y te notificaremos siempre que la otra parte haga una captura de pantalla.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">MENSAJES</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Lista de difusión</string>
     <string name="NewBroadcastList">Nueva difusión</string>
     <string name="EnterListName">Nombre de la lista</string>
     <string name="YouCreatedBroadcastList">Creaste una lista de difusión</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">Almacenamiento Externo</string>
     <string name="SystemRoot">Raíz del Sistema</string>
     <string name="SdCard">Tarjeta SD</string>
+    <string name="Folder">Carpeta</string>
     <!--chat view-->
     <string name="Invisible">invisible</string>
     <string name="Typing">escribiendo...</string>
-    <string name="Attach">Adjuntar</string>
     <string name="IsTyping">está escribiendo...</string>
     <string name="AreTyping">están escribiendo...</string>
     <string name="GotAQuestion">¿Tienes preguntas\nsobre Telegram?</string>
@@ -88,25 +84,20 @@
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Archivo</string>
     <string name="NoMessages">Aún sin mensajes...</string>
-    <string name="ViewPhoto">Ver foto</string>
-    <string name="ViewLocation">Ver ubicación</string>
-    <string name="ViewVideo">Ver vídeo</string>
     <string name="ForwardedMessage">Mensaje reenviado</string>
     <string name="From">De</string>
     <string name="NoRecent">No hay recientes</string>
     <string name="Message">Mensaje</string>
-    <string name="TypeMessage">Escribe un mensaje</string>
-    <string name="DOWNLOAD">Descargar</string>
-    <string name="Selected">Seleccionado: %d</string>
-    <string name="ShareMyContactInfo">COMPARTIR MI NÚMERO</string>
-    <string name="AddToContacts">AÑADIR A CONTACTOS</string>
+    <string name="TypeMessage">Mensaje</string>
+    <string name="ShareMyContactInfo">Compartir mi número</string>
+    <string name="AddToContacts">Añadir a contactos</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s te invitó a un chat secreto.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Invitaste a %s a un chat secreto.</string>
     <string name="EncryptedDescriptionTitle">Los chats secretos:</string>
     <string name="EncryptedDescription1">Usan cifrado end-to-end</string>
     <string name="EncryptedDescription2">No dejan rastro en el servidor</string>
     <string name="EncryptedDescription3">Tienen autodestrucción de mensajes</string>
-    <string name="EncryptedDescription4">No permiten reenvíos de mensajes</string>
+    <string name="EncryptedDescription4">Impiden reenviar mensajes</string>
     <string name="YouWereKicked">Te expulsaron de este grupo</string>
     <string name="YouLeft">Dejaste este grupo</string>
     <string name="DeleteThisGroup">Eliminar este grupo</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">Aplicar traducción</string>
     <string name="UnsupportedAttachment">Adjunto no soportado</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Chat secreto solicitado</string>
-    <string name="EncryptedChatAccepted">Chat secreto iniciado</string>
     <string name="MessageLifetimeChanged">%1$s activó la autodestrucción en %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Activaste la autodestrucción en %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s desactivó la autodestrucción</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">Responder a %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Nuevo mensaje</string>
     <string name="SelectContact">Elegir contacto</string>
     <string name="NoContacts">Aún sin contactos</string>
     <string name="InviteText">Oye, cambiémonos a Telegram: http://telegram.org/dl2</string>
     <string name="TodayAt">hoy a las</string>
     <string name="YesterdayAt">ayer a las</string>
     <string name="Online">en línea</string>
-    <string name="Offline">fuera de línea</string>
     <string name="LastSeen">últ. vez</string>
     <string name="LastSeenDate">últ. vez el</string>
     <string name="InviteFriends">Invitar a amigos</string>
     <string name="GlobalSearch">BÚSQUEDA GLOBAL</string>
+    <string name="Lately">últ. vez recientemente</string>
+    <string name="WithinAWeek">últ. vez hace unos días</string>
+    <string name="WithinAMonth">últ. vez hace unas semanas</string>
+    <string name="ALongTimeAgo">últ. vez hace mucho tiempo</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensaje a...</string>
     <string name="EnterGroupNamePlaceholder">Nombre del grupo</string>
     <string name="GroupName">Nombre del grupo</string>
-    <string name="AllContacts">TODOS LOS CONTACTOS</string>
     <string name="MembersCount">%1$d/%2$d miembros</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">PON EL NOMBRE DEL GRUPO</string>
     <string name="SharedMedia">Fotos y vídeos</string>
-    <string name="GroupInfo">Información </string>
-    <string name="SHAREDMEDIA">FOTOS Y VÍDEOS</string>
-    <string name="SETTINGS">AJUSTES</string>
+    <string name="SETTINGS">Ajustes</string>
     <string name="AddMember">Añadir miembro</string>
     <string name="DeleteAndExit">Eliminar y dejar el grupo</string>
     <string name="Notifications">Notificaciones</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Compartir</string>
     <string name="AddContact">Añadir</string>
+    <string name="AddContactTitle">Añadir contacto</string>
     <string name="BlockContact">Bloquear</string>
     <string name="EditContact">Editar</string>
     <string name="DeleteContact">Eliminar</string>
-    <string name="PhoneHome">CASA</string>
-    <string name="PhoneMobile">MÓVIL</string>
-    <string name="PhoneWork">TRABAJO</string>
-    <string name="PhoneOther">OTRO</string>
-    <string name="PhoneMain">PRINCIPAL</string>
-    <string name="ContactInfo">Información</string>
-    <string name="PHONE">TELÉFONO</string>
+    <string name="PhoneHome">Casa</string>
+    <string name="PhoneMobile">Móvil</string>
+    <string name="PhoneWork">Trabajo</string>
+    <string name="PhoneOther">Otro</string>
+    <string name="PhoneMain">Principal</string>
     <string name="StartEncryptedChat">Iniciar chat secreto</string>
     <string name="CreateEncryptedChatError">Ocurrió un error.</string>
-    <string name="SecretTitle">Chat secreto</string>
     <string name="EncryptionKey">Clave de cifrado</string>
     <string name="MessageLifetime">Autodestrucción</string>
     <string name="ShortMessageLifetimeForever">Apagada</string>
     <string name="EncryptionKeyDescription">Esta imagen es una visualización de la clave de cifrado para el chat secreto con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Si esta imagen se ve igual en el teléfono de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, tu chat es seguro en un 200%%.<![CDATA[<br><br>]]>Aprende más en telegram.org</string>
     <string name="NumberUnknown">Desconocido</string>
-    <string name="Info">INFORMACIÓN</string>
+    <string name="Info">Información</string>
     <string name="Phone">Teléfono</string>
     <!--usernames-->
     <string name="Username">Apodo</string>
@@ -224,34 +211,32 @@
     <string name="EnableAnimations">Activar animaciones</string>
     <string name="EnableMarkdown">Enable Markdown</string>
     <string name="Unblock">Desbloquear</string>
-    <string name="UnblockText">Para desbloquear, mantén pulsado sobre un usuario.</string>
+    <string name="UnblockText">Mantén pulsado sobre un usuario para desbloquearlo.</string>
     <string name="NoBlocked">Sin usuarios bloqueados</string>
-    <string name="MessageNotifications">NOTIFICACIONES DE MENSAJES</string>
+    <string name="MessageNotifications">Notificación de mensajes</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Vista previa del mensaje</string>
-    <string name="GroupNotifications">NOTIFICACIONES DE GRUPO</string>
+    <string name="GroupNotifications">Notificaciones de grupo</string>
     <string name="Sound">Sonido</string>
-    <string name="InAppNotifications">NOTIFICACIONES EN LA APP</string>
+    <string name="InAppNotifications">Notificaciones en la app</string>
     <string name="InAppSounds">Sonidos en la app</string>
     <string name="InAppVibrate">Vibración en la app</string>
     <string name="Vibrate">Vibraciones</string>
     <string name="InAppPreview">Vista previa en la app</string>
-    <string name="Reset">RESTABLECER</string>
+    <string name="Reset">Restablecer</string>
     <string name="ResetAllNotifications">Restablecer las notificaciones</string>
     <string name="UndoAllCustom">Deshacer las notificaciones personalizadas para todos tus usuarios y grupos</string>
     <string name="NotificationsAndSounds">Notificaciones y sonidos</string>
     <string name="BlockedUsers">Usuarios bloqueados</string>
-    <string name="SaveIncomingPhotos">Guardar fotos entrantes</string>
     <string name="LogOut">Cerrar sesión</string>
-    <string name="YourFirstNameAndLastName">TU NOMBRE Y APELLIDOS</string>
     <string name="NoSound">Sin sonido</string>
     <string name="Default">Por defecto</string>
-    <string name="Support">SOPORTE</string>
+    <string name="Support">Soporte</string>
     <string name="ChatBackground">Fondo de chat</string>
-    <string name="MessagesSettings">MENSAJES</string>
+    <string name="MessagesSettings">Mensajes</string>
     <string name="SendByEnter">Enviar con \'Intro\'</string>
     <string name="TerminateAllSessions">Cerrar todas las otras sesiones</string>
-    <string name="Events">EVENTOS</string>
+    <string name="Events">Eventos</string>
     <string name="ContactJoined">Un contacto se unió a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Si tus notificaciones funcionan bien con los Servicios de Google Play, puedes desactivar el Servicio de notificaciones. Sin embargo, recomendamos que lo dejes activo para mantener la app en segundo plano y recibir notificaciones al instante.</string>
     <string name="SortBy">Ordenar por</string>
     <string name="ImportContacts">Importar contactos</string>
-    <string name="WiFiOnly">Sólo vía Wi-Fi</string>
     <string name="SortFirstName">Nombre</string>
     <string name="SortLastName">Apellidos</string>
     <string name="LedColor">Color del LED</string>
@@ -281,17 +265,16 @@
     <string name="Long">Largo</string>
     <string name="SystemDefault">Según el sistema</string>
     <string name="SettingsDefault">Según Telegram</string>
-    <string name="AutomaticMediaDownload">DESCARGA AUTOMÁTICA DE MULTIMEDIA</string>
+    <string name="AutomaticMediaDownload">Descarga automática de multimedia</string>
     <string name="WhenUsingMobileData">Con uso de datos móviles</string>
     <string name="WhenConnectedOnWiFi">Con conexión a Wi-Fi</string>
     <string name="WhenRoaming">Con itinerancia de datos</string>
     <string name="NoMediaAutoDownload">Ningún contenido multimedia</string>
     <string name="SaveToGallerySettings">Guardar en galería</string>
+    <string name="EditName">Editar nombre</string>
     <!--media view-->
     <string name="NoMedia">Aún no hay fotos ni vídeos</string>
-    <string name="CancelDownload">Cancelar descarga</string>
     <!--map view-->
-    <string name="MyLocation">Mi ubicación</string>
     <string name="Map">Mapa</string>
     <string name="Satellite">Satélite</string>
     <string name="Hybrid">Híbrido</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galería</string>
     <string name="AllPhotos">Todas las fotos</string>
     <string name="NoPhotos">Sin fotos aún</string>
+    <string name="PleaseDownload">Por favor, primero descarga la multimedia</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacidad y seguridad</string>
+    <string name="PrivacyTitle">Privacidad</string>
+    <string name="PrivacyLastSeen">Última conexión</string>
+    <string name="LastSeenEverybody">Todos</string>
+    <string name="LastSeenContacts">Mis contactos</string>
+    <string name="LastSeenNobody">Nadie</string>
+    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
+    <string name="LastSeenContactsPlus">Mis contactos (+%1$d)</string>
+    <string name="LastSeenContactsMinus">Mis contactos (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">Mis contactos (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Nadie (+%1$d)</string>
+    <string name="SecurityTitle">Seguridad</string>
+    <string name="DeleteAccountTitle">Autodestrucción de la cuenta</string>
+    <string name="DeleteAccountIfAwayFor">Si estoy fuera</string>
+    <string name="DeleteAccountHelp">Si no inicias sesión durante este tiempo, al menos una vez, tu cuenta se eliminará con todos tus grupos, mensajes y contactos.</string>
+    <string name="DeleteAccountNowConfirmation">¿Queres eliminar tu cuenta?</string>
+    <string name="LastSeenHelp">Elige quién puede ver tu última conexión.</string>
+    <string name="LastSeenTitle">¿Quién puede ver tu última conexión?</string>
+    <string name="AddExceptions">Añadir excepciones</string>
+    <string name="CustomHelp">Importante: No podrás ver la última conexión de las personas con las que no compartes la tuya. En su lugar, se mostrarán conexiones indeterminadas (recientemente, hace unos días, hace unas semanas).</string>
+    <string name="AlwaysShareWith">Compartir siempre con</string>
+    <string name="NeverShareWith">Nunca compartir con</string>
+    <string name="CustomShareSettingsHelp">Estos ajustes anularán los valores de arriba.</string>
+    <string name="AlwaysShareWithTitle">Siempre compartir</string>
+    <string name="AlwaysShareWithPlaceholder">Siempre compartir con...</string>
+    <string name="NeverShareWithTitle">Nunca compartir</string>
+    <string name="NeverShareWithPlaceholder">Nunca compartir con...</string>
+    <string name="EmpryUsersPlaceholder">Añadir usuarios</string>
+    <string name="PrivacyFloodControlError">Lo siento, hay demasiadas solicitudes. Es imposible cambiar los ajustes de privacidad ahora. Por favor, espera.</string>
+    <string name="ClearOtherSessionsHelp">Salir de todos los dispositivos, excepto este.</string>
+    <string name="RemoveFromListText">Mantén pulsado sobre un usuario para eliminarlo.</string>
     <!--edit video view-->
     <string name="EditVideo">Editar vídeo</string>
     <string name="OriginalVideo">Vídeo original</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Desde la cámara</string>
     <string name="FromGalley">Desde la galería</string>
     <string name="DeletePhoto">Eliminar foto</string>
-    <string name="OpenPhoto">Abrir foto</string>
     <string name="Set">Establecer</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -364,7 +379,7 @@
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Número de teléfono inválido</string>
     <string name="CodeExpired">Código expirado. Por favor, vuelve a iniciar sesión.</string>
-    <string name="FloodWait">Muchos intentos. Por favor, inténtalo más tarde.</string>
+    <string name="FloodWait">Muchos intentos. Por favor, prueba de nuevo más tarde.</string>
     <string name="InvalidCode">Código inválido</string>
     <string name="InvalidFirstName">Nombre inválido</string>
     <string name="InvalidLastName">Apellidos inválidos</string>
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">No tienes aplicaciones que puedan manejar el tipo de archivo \'%1$s\'. Por favor, instala una para continuar.</string>
     <string name="InviteUser">Este usuario no tiene Telegram aún. ¿Enviarle una invitación?</string>
     <string name="AreYouSure">¿Quieres hacerlo?</string>
-    <string name="AddContactQ">¿Añadir contacto?</string>
     <string name="AddToTheGroup">¿Añadir a %1$s al grupo?\n\nNúmero de los últimos mensajes para reenviar:</string>
     <string name="ForwardMessagesTo">¿Reenviar mensajes a %1$s?</string>
-    <string name="DeleteChatQuestion">¿Eliminar este chat?</string>
     <string name="SendMessagesTo">¿Enviar mensajes a %1$s?</string>
-    <string name="AreYouSureLogout">¿Quieres cerrar sesión?</string>
+    <string name="AreYouSureLogout">¿Quieres cerrar sesión?\n\nConsidera que puedes usar Telegram en todos tus dispositivos a la vez.\n\nRecuerda que, al cerrar sesión, eliminas todos tus chats secretos.</string>
     <string name="AreYouSureSessions">¿Quieres terminar todas las otras sesiones?</string>
     <string name="AreYouSureDeleteAndExit">¿Quieres eliminar y dejar el grupo?</string>
     <string name="AreYouSureDeleteThisChat">¿Quieres eliminar este chat?</string>
@@ -388,10 +401,12 @@
     <string name="AreYouSureUnblockContact">¿Quieres desbloquear este contacto?</string>
     <string name="AreYouSureDeleteContact">¿Quieres eliminar este contacto?</string>
     <string name="AreYouSureSecretChat">¿Quieres iniciar un chat secreto?</string>
-    <string name="ForwardFromMyName">reenviar desde mi nombre</string>
+    <string name="AreYouSureRegistration">¿Quieres cancelar el registro?</string>
+    <string name="AreYouSureClearHistory">¿Quieres eliminar el historial?</string>
+    <string name="AreYouSureDeleteMessages">¿Quieres eliminar %1$s?</string>
     <string name="SendMessagesToGroup">¿Enviar mensajes a %1$s?</string>
     <string name="ForwardMessagesToGroup">¿Reenviar mensajes a %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <string name="FeatureUnavailable">Lo siento, esta característica no está disponible en tu país actualmente.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápida</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d semanas</string>
     <string name="Weeks_many">%1$d semanas</string>
     <string name="Weeks_other">%1$d semanas</string>
+    <string name="Months_zero">%1$d meses</string>
+    <string name="Months_one">%1$d mes</string>
+    <string name="Months_two">%1$d meses</string>
+    <string name="Months_few">%1$d meses</string>
+    <string name="Months_many">%1$d meses</string>
+    <string name="Months_other">%1$d meses</string>
+    <string name="Years_zero">%1$d años</string>
+    <string name="Years_one">%1$d año</string>
+    <string name="Years_two">%1$d años</string>
+    <string name="Years_few">%1$d años</string>
+    <string name="Years_many">%1$d años</string>
+    <string name="Years_other">%1$d años</string>
+    <string name="Users_zero">%1$d usuarios</string>
+    <string name="Users_one">%1$d usuario</string>
+    <string name="Users_two">%1$d usuarios</string>
+    <string name="Users_few">%1$d usuarios</string>
+    <string name="Users_many">%1$d usuarios</string>
+    <string name="Users_other">%1$d usuarios</string>
     <!--date formatters-->
     <string name="formatterMonth">dd \'de\' MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 6bd4949ec..700355c6d 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">it</string>
     <!--signin view-->
     <string name="YourPhone">Il tuo telefono</string>
-    <string name="StartText">Conferma il prefisso della tua nazione\ne inserisci il tuo numero di telefono.</string>
+    <string name="StartText">Conferma il prefisso nazionale e inserisci il tuo numero di telefono.</string>
     <string name="ChooseCountry">Scegli una nazione</string>
     <string name="WrongCountry">Prefisso errato</string>
     <!--code enter view-->
@@ -28,16 +28,13 @@
     <string name="LastName">Cognome (facoltativo)</string>
     <string name="CancelRegistration">Annulla registrazione</string>
     <!--chats view-->
-    <string name="Chats">Chat</string>
-    <string name="Search">Cerca</string>
-    <string name="NewMessages">Nuovi messaggi</string>
     <string name="Settings">Impostazioni</string>
     <string name="Contacts">Contatti</string>
     <string name="NewGroup">Nuovo gruppo</string>
     <string name="Yesterday">ieri</string>
     <string name="NoResult">Nessun risultato</string>
     <string name="NoChats">Ancora nessuna chat…</string>
-    <string name="NoChatsHelp">Inizia a messaggiare premendo il tasto\ncomponi nell\'angolo in alto a destra\no premi il tasto menu per più opzioni.</string>
+    <string name="NoChatsHelp">Inizia a scrivere premendo il tasto\nnuovo messaggio nell\'angolo in alto a destra\no apri il menu per avere più opzioni.</string>
     <string name="WaitingForNetwork">In attesa della rete...</string>
     <string name="Connecting">Connessione in corso…</string>
     <string name="Updating">Aggiornamento in corso…</string>
@@ -49,14 +46,13 @@
     <string name="EncryptedChatStartedIncoming">Sei entrato nella chat segreta.</string>
     <string name="ClearHistory">Cancella cronologia</string>
     <string name="DeleteChat">Elimina ed esci</string>
-    <string name="HiddenName">Nome nascosto</string>
+    <string name="DeleteChatUser">Elimina chat</string>
+    <string name="HiddenName">Account eliminato</string>
     <string name="SelectChat">Seleziona chat</string>
     <string name="PhotoTip">Tieni premuto per vedere</string>
     <string name="CompatibilityChat">%1$s sta usando una versione vecchia di Telegram, quindi le foto segrete verranno visualizzate in modalità di compatibilità.\n\nUna volta che %2$s avrà aggiornato Telegram, le foto con il timer minore di 1 minuto funzioneranno in modalità \'Tieni premuto per vedere\' , e verrai notificato ogni volta che l\'altro esegue uno screenshot.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">MESSAGGI</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Lista broadcast</string>
     <string name="NewBroadcastList">Nuova lista broadcast</string>
     <string name="EnterListName">Immetti il nome della lista</string>
     <string name="YouCreatedBroadcastList">Hai creato una lista broadcast</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">Archiviazione esterna</string>
     <string name="SystemRoot">Root di sistema</string>
     <string name="SdCard">Scheda SD</string>
+    <string name="Folder">Cartella</string>
     <!--chat view-->
     <string name="Invisible">invisibile</string>
     <string name="Typing">sta scrivendo…</string>
-    <string name="Attach">Allega</string>
     <string name="IsTyping">sta scrivendo…</string>
     <string name="AreTyping">stanno scrivendo…</string>
     <string name="GotAQuestion">Hai una domanda\nsu Telegram?</string>
@@ -86,20 +82,15 @@
     <string name="ChatGallery">Galleria</string>
     <string name="ChatLocation">Posizione</string>
     <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">Documento</string>
+    <string name="ChatDocument">File</string>
     <string name="NoMessages">Non ci sono ancora messaggi…</string>
-    <string name="ViewPhoto">Visualizza foto</string>
-    <string name="ViewLocation">Visualizza posizione</string>
-    <string name="ViewVideo">Riproduci video</string>
     <string name="ForwardedMessage">Messaggio inoltrato</string>
     <string name="From">Da</string>
     <string name="NoRecent">Nessuno recente</string>
     <string name="Message">Messaggio</string>
-    <string name="TypeMessage">Scrivi il messaggio</string>
-    <string name="DOWNLOAD">Scarica</string>
-    <string name="Selected">Selezionati: %d</string>
-    <string name="ShareMyContactInfo">CONDIVIDI INFORMAZIONI CONTATTO</string>
-    <string name="AddToContacts">AGGIUNGI AI CONTATTI</string>
+    <string name="TypeMessage">Messaggi</string>
+    <string name="ShareMyContactInfo">Condividi il mio contatto</string>
+    <string name="AddToContacts">Aggiungi ai contatti</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s ti ha mandato un invito a una chat segreta.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Hai invitato %s a entrare in una chat segreta.</string>
     <string name="EncryptedDescriptionTitle">Chat segrete:</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">Applica file di localizzazione</string>
     <string name="UnsupportedAttachment">Allegato non supportato</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Chat segreta richiesta</string>
-    <string name="EncryptedChatAccepted">Chat segreta iniziata</string>
     <string name="MessageLifetimeChanged">%1$s ha impostato il timer di autodistruzione a %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Hai impostato il timer di autodistruzione a %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s ha disabilitato il timer di autodistruzione</string>
@@ -129,7 +118,7 @@
     <string name="NotificationMessageVideo">%1$s ti ha inviato un video</string>
     <string name="NotificationMessageContact">%1$s ha condiviso un contatto con te</string>
     <string name="NotificationMessageMap">%1$s ti ha inviato una posizione</string>
-    <string name="NotificationMessageDocument">%1$s ti ha inviato un documento</string>
+    <string name="NotificationMessageDocument">%1$s ti ha inviato un file</string>
     <string name="NotificationMessageAudio">%1$s ti ha inviato un audio</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
     <string name="NotificationMessageGroupNoText">%1$s ha inviato un messaggio al gruppo %2$s</string>
@@ -137,7 +126,7 @@
     <string name="NotificationMessageGroupVideo">%1$s ha inviato un video al gruppo %2$s</string>
     <string name="NotificationMessageGroupContact">%1$s ha condiviso un contatto con il gruppo %2$s</string>
     <string name="NotificationMessageGroupMap">%1$s ha inviato una posizione al gruppo %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s ha inviato un documento al gruppo %2$s</string>
+    <string name="NotificationMessageGroupDocument">%1$s ha inviato un file al gruppo %2$s</string>
     <string name="NotificationMessageGroupAudio">%1$s ha inviato un audio al gruppo %2$s</string>
     <string name="NotificationInvitedToGroup">%1$s ti ha invitato nel gruppo %2$s</string>
     <string name="NotificationEditedGroupName">%1$s ha modificato il nome del gruppo %2$s</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">Rispondi a %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Nuovo messaggio</string>
     <string name="SelectContact">Seleziona contatto</string>
     <string name="NoContacts">Ancora nessun contatto</string>
     <string name="InviteText">Ehi, è il momento di passare a Telegram: http://telegram.org/dl2</string>
     <string name="TodayAt">oggi alle</string>
     <string name="YesterdayAt">ieri alle</string>
     <string name="Online">in linea</string>
-    <string name="Offline">non in linea</string>
     <string name="LastSeen">ultimo accesso</string>
     <string name="LastSeenDate">ultimo accesso</string>
     <string name="InviteFriends">Invita amici</string>
     <string name="GlobalSearch">RICERCA GLOBALE</string>
+    <string name="Lately">ultimo accesso di recente</string>
+    <string name="WithinAWeek">ultimo accesso entro una settimana</string>
+    <string name="WithinAMonth">ultimo accesso entro un mese</string>
+    <string name="ALongTimeAgo">ultimo accesso molto tempo fa</string>
     <!--group create view-->
     <string name="SendMessageTo">Invia messaggio a...</string>
     <string name="EnterGroupNamePlaceholder">Immetti il nome del gruppo</string>
     <string name="GroupName">Nome gruppo</string>
-    <string name="AllContacts">TUTTI I CONTATTI</string>
     <string name="MembersCount">%1$d/%2$d membri</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">INSERISCI IL NOME DEL GRUPPO</string>
     <string name="SharedMedia">Media condivisi</string>
-    <string name="GroupInfo">Info gruppo</string>
-    <string name="SHAREDMEDIA">MEDIA CONDIVISI</string>
-    <string name="SETTINGS">IMPOSTAZIONI</string>
+    <string name="SETTINGS">Impostazioni</string>
     <string name="AddMember">Aggiungi membro</string>
     <string name="DeleteAndExit">Elimina e lascia il gruppo</string>
     <string name="Notifications">Notifiche</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Condividi</string>
     <string name="AddContact">Aggiungi</string>
+    <string name="AddContactTitle">Aggiungi contatto</string>
     <string name="BlockContact">Blocca</string>
     <string name="EditContact">Modifica</string>
     <string name="DeleteContact">Elimina</string>
-    <string name="PhoneHome">CASA</string>
-    <string name="PhoneMobile">CELLULARE</string>
-    <string name="PhoneWork">LAVORO</string>
-    <string name="PhoneOther">ALTRO</string>
-    <string name="PhoneMain">PRINCIPALE</string>
-    <string name="ContactInfo">Informazioni contatto</string>
-    <string name="PHONE">TELEFONO</string>
+    <string name="PhoneHome">Home</string>
+    <string name="PhoneMobile">Mobile</string>
+    <string name="PhoneWork">Lavoro</string>
+    <string name="PhoneOther">Altro</string>
+    <string name="PhoneMain">Principale</string>
     <string name="StartEncryptedChat">Inizia chat segreta</string>
     <string name="CreateEncryptedChatError">Si è verificato un errore.</string>
-    <string name="SecretTitle">Chat segreta</string>
     <string name="EncryptionKey">Chiave di cifratura</string>
     <string name="MessageLifetime">Timer di autodistruzione</string>
     <string name="ShortMessageLifetimeForever">Spento</string>
     <string name="EncryptionKeyDescription">Questa immagine è una visualizzazione della chiave di cifratura per questa chat segreta con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se questa immagine è uguale sul telefono di <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, la chat è sicura al 200%%.<![CDATA[<br><br>]]>Per saperne di più, visita Telegram.org</string>
     <string name="NumberUnknown">Sconosciuto</string>
-    <string name="Info">INFO</string>
+    <string name="Info">Info</string>
     <string name="Phone">Telefono</string>
     <!--usernames-->
     <string name="Username">Nome utente</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Sblocca</string>
     <string name="UnblockText">Tieni premuto sull’utente per sbloccarlo.</string>
     <string name="NoBlocked">Ancora nessun utente bloccato</string>
-    <string name="MessageNotifications">NOTIFICHE MESSAGGI</string>
+    <string name="MessageNotifications">Notifiche messaggio</string>
     <string name="Alert">Avviso</string>
     <string name="MessagePreview">Anteprima messaggio</string>
-    <string name="GroupNotifications">NOTIFICHE DI GRUPPO</string>
+    <string name="GroupNotifications">Notifiche di gruppo</string>
     <string name="Sound">Suoni</string>
-    <string name="InAppNotifications">NOTIFICHE IN-APP</string>
+    <string name="InAppNotifications">Notifiche in-app</string>
     <string name="InAppSounds">Suoni in-app</string>
     <string name="InAppVibrate">Vibrazione in-app</string>
     <string name="Vibrate">Vibrazione</string>
     <string name="InAppPreview">Anteprima in-app</string>
-    <string name="Reset">RIPRISTINA</string>
+    <string name="Reset">Ripristina</string>
     <string name="ResetAllNotifications">Ripristina tutte le notifiche</string>
     <string name="UndoAllCustom">Annulla tutte le impostazioni di notifica personalizzate per tutti i tuoi contatti e gruppi</string>
     <string name="NotificationsAndSounds">Notifiche e suoni</string>
     <string name="BlockedUsers">Utenti bloccati</string>
-    <string name="SaveIncomingPhotos">Salva foto ricevute</string>
     <string name="LogOut">Disconnetti</string>
-    <string name="YourFirstNameAndLastName">IL TUO NOME E COGNOME</string>
     <string name="NoSound">Nessun suono</string>
     <string name="Default">Predefinito</string>
-    <string name="Support">SUPPORTO</string>
+    <string name="Support">Supporto</string>
     <string name="ChatBackground">Sfondo chat</string>
-    <string name="MessagesSettings">MESSAGGI</string>
+    <string name="MessagesSettings">Messaggi</string>
     <string name="SendByEnter">Spedisci con Invio</string>
     <string name="TerminateAllSessions">Chiudi tutte le altre sessioni</string>
-    <string name="Events">EVENTI</string>
+    <string name="Events">Eventi</string>
     <string name="ContactJoined">Un contatto si è collegato a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Lingua</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Se i servizi di Google Play sono sufficienti per ricevere le notifiche, è possibile disabilitare il Servizio notifiche. Ti raccomandiamo comunque di lasciarlo abilitato per lasciare l\'app attiva in background e ricevere le notifiche istantanee.</string>
     <string name="SortBy">Ordina per</string>
     <string name="ImportContacts">Importa contatti</string>
-    <string name="WiFiOnly">Solo tramite WiFi</string>
     <string name="SortFirstName">Nome</string>
     <string name="SortLastName">Cognome</string>
     <string name="LedColor">Colore LED</string>
@@ -281,17 +265,16 @@
     <string name="Long">Lungo</string>
     <string name="SystemDefault">Predefinito di sistema</string>
     <string name="SettingsDefault">Impostazioni predefinite</string>
-    <string name="AutomaticMediaDownload">SCARICAMENTO AUTOMATICO MEDIA</string>
+    <string name="AutomaticMediaDownload">Scaricamento automatico media</string>
     <string name="WhenUsingMobileData">Quando si utilizza la rete dati</string>
     <string name="WhenConnectedOnWiFi">Quando si utilizza il Wi-Fi</string>
     <string name="WhenRoaming">In roaming</string>
     <string name="NoMediaAutoDownload">Nessun media</string>
     <string name="SaveToGallerySettings">Salva nella galleria</string>
+    <string name="EditName">Modifica nome</string>
     <!--media view-->
     <string name="NoMedia">Nessun media condiviso</string>
-    <string name="CancelDownload">Annulla scaricamento</string>
     <!--map view-->
-    <string name="MyLocation">La mia posizione</string>
     <string name="Map">Mappa</string>
     <string name="Satellite">Satellite</string>
     <string name="Hybrid">Ibrido</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galleria</string>
     <string name="AllPhotos">Tutte le foto</string>
     <string name="NoPhotos">Ancora nessuna foto</string>
+    <string name="PleaseDownload">Scarica prima il file</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacy e Sicurezza</string>
+    <string name="PrivacyTitle">Privacy</string>
+    <string name="PrivacyLastSeen">Ultimo Accesso</string>
+    <string name="LastSeenEverybody">Tutti</string>
+    <string name="LastSeenContacts">I miei Contatti</string>
+    <string name="LastSeenNobody">Nessuno</string>
+    <string name="LastSeenEverybodyMinus">Tutti (-%1$d)</string>
+    <string name="LastSeenContactsPlus">I miei Contatti (+%1$d)</string>
+    <string name="LastSeenContactsMinus">I miei Contatti (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">I miei Contatti (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Nessuno (+%1$d)</string>
+    <string name="SecurityTitle">Sicurezza</string>
+    <string name="DeleteAccountTitle">Elimina il mio account</string>
+    <string name="DeleteAccountIfAwayFor">Se lontano per</string>
+    <string name="DeleteAccountHelp">Se non ti connetti almeno una volta in questo periodo, il tuo account verrà eliminato insieme a tutti i gruppi, messaggi e contatti.</string>
+    <string name="DeleteAccountNowConfirmation">Eliminare il tuo account?</string>
+    <string name="LastSeenHelp">Cambia chi può vedere il tuo Ultimo Accesso.</string>
+    <string name="LastSeenTitle">Chi può vedere il tuo Ultimo Accesso?</string>
+    <string name="AddExceptions">Aggiungi eccezioni</string>
+    <string name="CustomHelp">Importante: non sarai in grado di vedere l\'Ultimo Accesso delle persone con le quali non condividi l\'Ultimo Accesso. Verrà mostrato un orario approssimativo (di recente, entro una settimana, entro un mese).</string>
+    <string name="AlwaysShareWith">Condividi con</string>
+    <string name="NeverShareWith">Non condividere con</string>
+    <string name="CustomShareSettingsHelp">Queste impostazioni annulleranno i valori precedenti.</string>
+    <string name="AlwaysShareWithTitle">Condividi</string>
+    <string name="AlwaysShareWithPlaceholder">Condividi con gli utenti...</string>
+    <string name="NeverShareWithTitle">Non condividere</string>
+    <string name="NeverShareWithPlaceholder">Non condividere con gli utenti...</string>
+    <string name="EmpryUsersPlaceholder">Aggiungi Utenti</string>
+    <string name="PrivacyFloodControlError">Ci spiace, troppe richieste. Impossibile cambiare le impostazioni di privacy ora, attendi.</string>
+    <string name="ClearOtherSessionsHelp">Disconnette tutti i dispositivi tranne questo.</string>
+    <string name="RemoveFromListText">Tieni premuto sull\'utente per eliminarlo.</string>
     <!--edit video view-->
     <string name="EditVideo">Modifica video</string>
     <string name="OriginalVideo">Video originale</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Dalla fotocamera</string>
     <string name="FromGalley">Dalla galleria</string>
     <string name="DeletePhoto">Elimina foto</string>
-    <string name="OpenPhoto">Apri foto</string>
     <string name="Set">Imposta</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -356,7 +371,7 @@
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Posizione</string>
     <string name="AttachContact">Contatto</string>
-    <string name="AttachDocument">Documento</string>
+    <string name="AttachDocument">File</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">Tu</string>
     <string name="ActionTakeScreenshootYou">Hai catturato la schermata!</string>
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">Non hai nessuna applicazione che può gestire il tipo di file \'%1$s\': installane una per proseguire</string>
     <string name="InviteUser">Questo utente non ha ancora Telegram, vuoi invitarlo?</string>
     <string name="AreYouSure">Sei sicuro?</string>
-    <string name="AddContactQ">Vuoi aggiungere il contatto?</string>
     <string name="AddToTheGroup">Aggiungere %1$s al gruppo?\n\nNumero di messaggi recenti da inoltrare:</string>
     <string name="ForwardMessagesTo">Vuoi inoltrare i messaggi a %1$s?</string>
-    <string name="DeleteChatQuestion">Vuoi eliminare questa chat?</string>
     <string name="SendMessagesTo">Inviare i messaggi a %1$s?</string>
-    <string name="AreYouSureLogout">Terminare la sessione?</string>
+    <string name="AreYouSureLogout">Sei sicuro di volerti disconnettere?\n\nRicorda che puoi usare Telegram su tutti i tuoi device contemporaneamente.\n\nRicorda, disconnettersi elimina tutte le Chat Segrete.</string>
     <string name="AreYouSureSessions">Chiudere tutte le altre sessioni?</string>
     <string name="AreYouSureDeleteAndExit">Eliminare il gruppo e uscire da esso?</string>
     <string name="AreYouSureDeleteThisChat">Eliminare questa chat?</string>
@@ -388,7 +401,9 @@
     <string name="AreYouSureUnblockContact">Sbloccare questo contatto?</string>
     <string name="AreYouSureDeleteContact">Eliminare questo contatto?</string>
     <string name="AreYouSureSecretChat">Iniziare una chat segreta?</string>
-    <string name="ForwardFromMyName">inoltra dal mio nome</string>
+    <string name="AreYouSureRegistration">Sei sicuro di volere eliminare questa registrazione?</string>
+    <string name="AreYouSureClearHistory">Sei sicuro di volere eliminare la cronologia?</string>
+    <string name="AreYouSureDeleteMessages">Sei sicuro di voler eliminare %1$s?</string>
     <string name="SendMessagesToGroup">Inviare messaggi a %1$s?</string>
     <string name="ForwardMessagesToGroup">Inoltra messaggi a %1$s?</string>
     <string name="FeatureUnavailable">Ci spiace, questa funzione non è disponibile nel tuo paese.</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d settimane</string>
     <string name="Weeks_many">%1$d settimane</string>
     <string name="Weeks_other">%1$d settimane</string>
+    <string name="Months_zero">%1$d mesi</string>
+    <string name="Months_one">%1$d mese</string>
+    <string name="Months_two">%1$d mesi</string>
+    <string name="Months_few">%1$d mesi</string>
+    <string name="Months_many">%1$d mesi</string>
+    <string name="Months_other">%1$d mesi</string>
+    <string name="Years_zero">%1$d anni</string>
+    <string name="Years_one">%1$d anno</string>
+    <string name="Years_two">%1$d anni</string>
+    <string name="Years_few">%1$d anni</string>
+    <string name="Years_many">%1$d ann</string>
+    <string name="Years_other">%1$d anni</string>
+    <string name="Users_zero">%1$d utenti</string>
+    <string name="Users_one">%1$d utente</string>
+    <string name="Users_two">%1$d utenti</string>
+    <string name="Users_few">%1$d utenti</string>
+    <string name="Users_many">%1$d utenti</string>
+    <string name="Users_other">%1$d utenti</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 5567bb519..c8cfc8b4c 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">ko</string>
     <!--signin view-->
     <string name="YourPhone">전화번호 입력</string>
-    <string name="StartText">국가번호와 전화번호를 입력하세요.<![CDATA[\n]]>대한민국 국가번호: 82</string>
+    <string name="StartText">국가번호와 전화번호를 입력하세요. (대한민국 국가번호: 82)</string>
     <string name="ChooseCountry">국가를 선택하세요</string>
     <string name="WrongCountry">올바른 국가번호를 입력하세요</string>
     <!--code enter view-->
@@ -28,9 +28,6 @@
     <string name="LastName">성(선택)</string>
     <string name="CancelRegistration">가입 취소</string>
     <!--chats view-->
-    <string name="Chats">채팅방</string>
-    <string name="Search">검색</string>
-    <string name="NewMessages">새 메시지</string>
     <string name="Settings">설정</string>
     <string name="Contacts">주소록</string>
     <string name="NewGroup">새 그룹</string>
@@ -38,7 +35,7 @@
     <string name="NoResult">결과 없음</string>
     <string name="NoChats">채팅방이 없습니다...</string>
     <string name="NoChatsHelp">대화를 시작하려면 우측 상단의\n초대하기 버튼을 누르거나\n메뉴 버튼을 눌러 보세요.</string>
-    <string name="WaitingForNetwork">대기 중...</string>
+    <string name="WaitingForNetwork">연결 대기 중...</string>
     <string name="Connecting">연결 중...</string>
     <string name="Updating">업데이트 중...</string>
     <string name="NewSecretChat">비밀대화 시작</string>
@@ -49,14 +46,13 @@
     <string name="EncryptedChatStartedIncoming">비밀대화에 참여했습니다.</string>
     <string name="ClearHistory">대화내용 지우기</string>
     <string name="DeleteChat">채팅방 나가기</string>
-    <string name="HiddenName">숨긴 이름</string>
+    <string name="DeleteChatUser">이 대화 삭제</string>
+    <string name="HiddenName">탈퇴한 계정</string>
     <string name="SelectChat">채팅방 선택</string>
     <string name="PhotoTip">꾹 눌러서 보기</string>
     <string name="CompatibilityChat">%1$s님의 텔레그램 버전이 낮아 비밀 사진을 호환성 모드로 표시합니다.\n\n%2$s님이 텔레그램을 업데이트하고 나면, 자동삭제 시간이 1분 이하인 사진은 \"탭하고 누르고 있어야 보임\" 상태가 되며, 상대방이 화면을 캡처할 때 마다 알림을 받습니다.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">메시지</string>
     <!--broadcasts-->
-    <string name="BroadcastList">단체 메시지 리스트</string>
     <string name="NewBroadcastList">새 단체 메시지 리스트</string>
     <string name="EnterListName">리스트 이름을 입력하세요</string>
     <string name="YouCreatedBroadcastList">단체 메시지 리스트를 만들었습니다</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">외부 저장소</string>
     <string name="SystemRoot">시스템 루트</string>
     <string name="SdCard">SD 카드</string>
+    <string name="Folder">폴더</string>
     <!--chat view-->
     <string name="Invisible">숨김</string>
     <string name="Typing">입력 중...</string>
-    <string name="Attach">첨부</string>
     <string name="IsTyping">님이 입력 중...</string>
     <string name="AreTyping">님이 입력 중...</string>
     <string name="GotAQuestion">텔레그램에 관해\n궁금한 사항이 있나요?</string>
@@ -88,16 +84,11 @@
     <string name="ChatVideo">동영상</string>
     <string name="ChatDocument">문서</string>
     <string name="NoMessages">메시지가 없습니다...</string>
-    <string name="ViewPhoto">사진 보기</string>
-    <string name="ViewLocation">위치 보기</string>
-    <string name="ViewVideo">동영상 재생</string>
     <string name="ForwardedMessage">전달된 메시지</string>
     <string name="From">보낸 사람</string>
     <string name="NoRecent">최근에 사용한 이모티콘</string>
     <string name="Message">메시지</string>
-    <string name="TypeMessage">메시지 입력</string>
-    <string name="DOWNLOAD">다운로드</string>
-    <string name="Selected">선택: %d</string>
+    <string name="TypeMessage">메시지</string>
     <string name="ShareMyContactInfo">내 연락처 공유</string>
     <string name="AddToContacts">주소록에 추가</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s님이 비밀대화에 초대했습니다.</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">언어 파일 적용</string>
     <string name="UnsupportedAttachment">지원하지 않는 형식입니다</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">비밀대화를 요청했습니다</string>
-    <string name="EncryptedChatAccepted">비밀대화를 시작했습니다</string>
     <string name="MessageLifetimeChanged">%1$s님이 자동삭제를 %2$s 후로 설정했습니다</string>
     <string name="MessageLifetimeChangedOutgoing">자동삭제를 %1$s 후로 설정했습니다</string>
     <string name="MessageLifetimeRemoved">%1$s님이 자동삭제를 해제했습니다</string>
@@ -154,28 +143,28 @@
     <string name="ReplyToUser">%1$s님에게 답장하기</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%2$s %1$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">새 메시지</string>
     <string name="SelectContact">대화상대 선택</string>
     <string name="NoContacts">대화상대가 없습니다</string>
     <string name="InviteText">텔레그램으로 초대합니다! http://telegram.org/dl2</string>
     <string name="TodayAt">오늘</string>
     <string name="YesterdayAt">어제</string>
     <string name="Online">온라인</string>
-    <string name="Offline">오프라인</string>
     <string name="LastSeen">마지막 접속: </string>
     <string name="LastSeenDate">마지막 접속: </string>
     <string name="InviteFriends">친구 초대</string>
     <string name="GlobalSearch">전체 검색</string>
+    <string name="Lately">최근에 접속</string>
+    <string name="WithinAWeek">일주일 이내 마지막으로 접속</string>
+    <string name="WithinAMonth">한 달 이내 마지막으로 접속</string>
+    <string name="ALongTimeAgo">마지막으로 접속한 지 오래됨</string>
     <!--group create view-->
     <string name="SendMessageTo">메시지 보내기...</string>
     <string name="EnterGroupNamePlaceholder">그룹 이름 입력</string>
     <string name="GroupName">그룹 이름</string>
-    <string name="AllContacts">모든 대화상대</string>
     <string name="MembersCount">대화상대 %1$d/%2$d</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">그룹 이름을 입력하세요</string>
     <string name="SharedMedia">공유한 미디어</string>
-    <string name="GroupInfo">그룹 정보</string>
-    <string name="SHAREDMEDIA">공유한 미디어</string>
     <string name="SETTINGS">설정</string>
     <string name="AddMember">대화상대 추가</string>
     <string name="DeleteAndExit">그룹에서 나가기</string>
@@ -184,6 +173,7 @@
     <!--contact info view-->
     <string name="ShareContact">공유</string>
     <string name="AddContact">추가</string>
+    <string name="AddContactTitle">대화상대 추가</string>
     <string name="BlockContact">차단</string>
     <string name="EditContact">편집</string>
     <string name="DeleteContact">삭제</string>
@@ -191,12 +181,9 @@
     <string name="PhoneMobile">휴대전화</string>
     <string name="PhoneWork">직장</string>
     <string name="PhoneOther">기타</string>
-    <string name="PhoneMain">기본</string>
-    <string name="ContactInfo">연락처 정보</string>
-    <string name="PHONE">전화번호</string>
+    <string name="PhoneMain">주</string>
     <string name="StartEncryptedChat">비밀대화 시작</string>
     <string name="CreateEncryptedChatError">오류가 발생했습니다.</string>
-    <string name="SecretTitle">비밀대화</string>
     <string name="EncryptionKey">암호화 키</string>
     <string name="MessageLifetime">자동삭제 타이머</string>
     <string name="ShortMessageLifetimeForever">해제</string>
@@ -231,7 +218,7 @@
     <string name="MessagePreview">메시지 미리보기</string>
     <string name="GroupNotifications">그룹 알림</string>
     <string name="Sound">알림음</string>
-    <string name="InAppNotifications">앱을 실행 중일 때 알림</string>
+    <string name="InAppNotifications">앱 내 알림</string>
     <string name="InAppSounds">실행 중일 때 알림음</string>
     <string name="InAppVibrate">실행 중일 때 진동</string>
     <string name="Vibrate">진동</string>
@@ -241,9 +228,7 @@
     <string name="UndoAllCustom">연락처와 그룹에 대한 모든 알림 설정을 처음 상태로 되돌립니다.</string>
     <string name="NotificationsAndSounds">알림 및 소리</string>
     <string name="BlockedUsers">차단 목록</string>
-    <string name="SaveIncomingPhotos">받은 사진 저장</string>
     <string name="LogOut">로그아웃</string>
-    <string name="YourFirstNameAndLastName">이름</string>
     <string name="NoSound">알림음 없음</string>
     <string name="Default">기본값</string>
     <string name="Support">지원</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">알림 서비스를 비활성화 하면 새로운 메시지의 알림이 다소 늦을 수 있습니다.<![CDATA[\n]]>텔레그램이 백그라운드에서 작동하며 알림을 바로 알릴 수 있도록 활성화 하는것을 권장합니다.</string>
     <string name="SortBy">정렬</string>
     <string name="ImportContacts">연락처 가져오기</string>
-    <string name="WiFiOnly">WiFi 전용</string>
     <string name="SortFirstName">이름</string>
     <string name="SortLastName">성</string>
     <string name="LedColor">LED 색상</string>
@@ -281,17 +265,16 @@
     <string name="Long">길게</string>
     <string name="SystemDefault">시스템 기본값</string>
     <string name="SettingsDefault">설정 기본값</string>
-    <string name="AutomaticMediaDownload">미디어 자동 다운로드</string>
+    <string name="AutomaticMediaDownload">사진/동영상 자동 다운로드</string>
     <string name="WhenUsingMobileData">모바일 데이터를 사용 중일 때</string>
     <string name="WhenConnectedOnWiFi">Wi-Fi에 연결 중일 때</string>
     <string name="WhenRoaming">로밍 중일 때</string>
     <string name="NoMediaAutoDownload">다운로드 안함</string>
     <string name="SaveToGallerySettings">앨범에 자동 저장</string>
+    <string name="EditName">이름 편집</string>
     <!--media view-->
     <string name="NoMedia">공유한 미디어가 없습니다</string>
-    <string name="CancelDownload">다운로드 취소</string>
     <!--map view-->
-    <string name="MyLocation">내 위치</string>
     <string name="Map">지도</string>
     <string name="Satellite">위성</string>
     <string name="Hybrid">혼합</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">앨범</string>
     <string name="AllPhotos">모든 사진</string>
     <string name="NoPhotos">사진이 없습니다.</string>
+    <string name="PleaseDownload">사진/동영상을 먼저 다운로드하세요</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">개인정보 및 보안</string>
+    <string name="PrivacyTitle">개인정보</string>
+    <string name="PrivacyLastSeen">마지막 접속</string>
+    <string name="LastSeenEverybody">전체 공개</string>
+    <string name="LastSeenContacts">내 주소록</string>
+    <string name="LastSeenNobody">비공개</string>
+    <string name="LastSeenEverybodyMinus">전체 공개 (-%1$d)</string>
+    <string name="LastSeenContactsPlus">내 주소록 (+%1$d)</string>
+    <string name="LastSeenContactsMinus">내 주소록 (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">내 주소록 (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">비공개 (+%1$d)</string>
+    <string name="SecurityTitle">보안</string>
+    <string name="DeleteAccountTitle">회원 탈퇴</string>
+    <string name="DeleteAccountIfAwayFor">자동 회원 탈퇴</string>
+    <string name="DeleteAccountHelp">이 기간 동안 최소 한 번 이상 로그인을 하지 않으면 자동으로 모든 메시지와 대화상대를 삭제하고 텔레그램을 탈퇴합니다.</string>
+    <string name="DeleteAccountNowConfirmation">텔레그램을 탈퇴할까요?</string>
+    <string name="LastSeenHelp">누가 마지막 접속 시간을 볼 수 있는지 변경</string>
+    <string name="LastSeenTitle">마지막 접속 시간을 누구에게 공개할까요?</string>
+    <string name="AddExceptions">예외 추가</string>
+    <string name="CustomHelp">주의: 회원님의 마지막 접속 시간을 공유받지 않는 사람의 마지막 접속 시간은 확인할 수 없습니다. 대신 일주일 이내, 한달 이내 등으로 간략하게 표시됩니다.</string>
+    <string name="AlwaysShareWith">항상 공유할 대화상대</string>
+    <string name="NeverShareWith">절대 공유하지 않을 대화 상대</string>
+    <string name="CustomShareSettingsHelp">이 설정은 위의 내용을 무시하고 작동합니다.</string>
+    <string name="AlwaysShareWithTitle">항상 공유</string>
+    <string name="AlwaysShareWithPlaceholder">항상 공유할 대화상대...</string>
+    <string name="NeverShareWithTitle">절대 공유하지 않음</string>
+    <string name="NeverShareWithPlaceholder">절대 공유하지 않을 대화상대...</string>
+    <string name="EmpryUsersPlaceholder">대화상대 추가</string>
+    <string name="PrivacyFloodControlError">죄송합니다. 너무 많이 변경하셨습니다. 개인정보 설정을 변경할 수 없으니 잠시 기다려 주세요.</string>
+    <string name="ClearOtherSessionsHelp">이 기기를 제외한 다른 기기에서 로그아웃합니다.</string>
+    <string name="RemoveFromListText">사용자를 탭하고 눌러서 삭제하세요.</string>
     <!--edit video view-->
     <string name="EditVideo">동영상 편집</string>
     <string name="OriginalVideo">동영상 원본</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">사진 촬영</string>
     <string name="FromGalley">앨범</string>
     <string name="DeletePhoto">사진 삭제</string>
-    <string name="OpenPhoto">사진 열기</string>
     <string name="Set">설정</string>
     <string name="OK">확인</string>
     <!--messages-->
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">\'%1$s\' 파일 형식을 처리할 앱이 없습니다. 계속하려면 앱을 설치해 주세요.</string>
     <string name="InviteUser">친구가 아직 텔레그램을 사용하지 않네요. 초대해 보세요!</string>
     <string name="AreYouSure">확실합니까?</string>
-    <string name="AddContactQ">주소록에 추가할까요?</string>
     <string name="AddToTheGroup">%1$s님을 그룹에 초대할까요?\n\n전달할 최근 메시지 개수:</string>
     <string name="ForwardMessagesTo">%1$s님에게 메시지를 전달할까요?</string>
-    <string name="DeleteChatQuestion">이 채팅방을 삭제할까요?</string>
     <string name="SendMessagesTo">%1$s님에게 메시지를 보낼까요?</string>
-    <string name="AreYouSureLogout">로그아웃을 하시겠습니까?</string>
+    <string name="AreYouSureLogout">정말로 로그아웃하시겠습니까?\n\n텔레그램은 여러 기기에서 동시에 사용이 가능합니다.\n\n로그아웃하시면 비밀대화가 삭제되는 점 유의해주세요.</string>
     <string name="AreYouSureSessions">현재 기기를 제외하고 다른 기기에 로그인된 세션을 모두 종료시킬까요?</string>
     <string name="AreYouSureDeleteAndExit">그룹에서 나갈까요?</string>
     <string name="AreYouSureDeleteThisChat">채팅방을 삭제할까요?</string>
@@ -388,7 +401,9 @@
     <string name="AreYouSureUnblockContact">차단을 해제할까요?</string>
     <string name="AreYouSureDeleteContact">대화상대를 삭제할까요?</string>
     <string name="AreYouSureSecretChat">비밀대화를 시작할까요?</string>
-    <string name="ForwardFromMyName">내 이름으로 전달</string>
+    <string name="AreYouSureRegistration">정말로 가입을 취소하시겠습니까?</string>
+    <string name="AreYouSureClearHistory">정말로 대화내용을 지우시겠습니까?</string>
+    <string name="AreYouSureDeleteMessages">%1$s: 정말로 삭제하시겠습니까?</string>
     <string name="SendMessagesToGroup">%1$s 그룹에 메시지를 보낼까요?</string>
     <string name="ForwardMessagesToGroup">%1$s 그룹에 메시지를 전달할까요?</string>
     <string name="FeatureUnavailable">이 기능은 회원님의 국가에서는 사용할 수 없습니다.</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d주</string>
     <string name="Weeks_many">%1$d주</string>
     <string name="Weeks_other">%1$d주</string>
+    <string name="Months_zero">%1$d개월</string>
+    <string name="Months_one">%1$d개월</string>
+    <string name="Months_two">%1$d개월</string>
+    <string name="Months_few">%1$d개월</string>
+    <string name="Months_many">%1$d개월</string>
+    <string name="Months_other">%1$d개월</string>
+    <string name="Years_zero">%1$d년</string>
+    <string name="Years_one">%1$d년</string>
+    <string name="Years_two">%1$d년</string>
+    <string name="Years_few">%1$d년</string>
+    <string name="Years_many">%1$d년</string>
+    <string name="Years_other">%1$d년</string>
+    <string name="Users_zero">%1$d명의 대화상대</string>
+    <string name="Users_one">%1$d명의 대화상대</string>
+    <string name="Users_two">%1$d명의 대화상대</string>
+    <string name="Users_few">%1$d명의 대화상대</string>
+    <string name="Users_many">%1$d명의 대화상대</string>
+    <string name="Users_other">%1$d명의 대화상대</string>
     <!--date formatters-->
     <string name="formatterMonth">M\'월\' d\'일\'</string>
     <string name="formatterYear">yyyy.MM.dd.</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 3feb26475..6b2f57af3 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -9,9 +9,9 @@
     <string name="LanguageCode">nl</string>
     <!--signin view-->
     <string name="YourPhone">Je telefoon</string>
-    <string name="StartText">Bevestig je landcode\nen voer je telefoonnummer in.</string>
+    <string name="StartText">Bevestig je landnummer en voer je telefoonnummer in.</string>
     <string name="ChooseCountry">Kies een land</string>
-    <string name="WrongCountry">Onjuist landcode</string>
+    <string name="WrongCountry">Onjuist landnummer</string>
     <!--code enter view-->
     <string name="YourCode">Je code</string>
     <string name="SentSmsCode">We hebben een sms met een activatiecode verzonden naar je telefoon</string>
@@ -28,16 +28,13 @@
     <string name="LastName">Achternaam (optioneel)</string>
     <string name="CancelRegistration">Registratie annuleren</string>
     <!--chats view-->
-    <string name="Chats">Gesprekken</string>
-    <string name="Search">Zoeken</string>
-    <string name="NewMessages">Nieuwe berichten</string>
     <string name="Settings">Instellingen</string>
     <string name="Contacts">Contacten</string>
     <string name="NewGroup">Nieuwe groep</string>
     <string name="Yesterday">gisteren</string>
     <string name="NoResult">Geen resultaten</string>
     <string name="NoChats">Nog geen gesprekken…</string>
-    <string name="NoChatsHelp">Begin een gesprek door op de\nopstellen-knop rechtsboven te drukken\nof druk op de menuknop voor meer opties.</string>
+    <string name="NoChatsHelp">Begin een gesprek door op de\nopstellen-knop rechtsboven te drukken\nof druk op de menu knop voor meer opties.</string>
     <string name="WaitingForNetwork">Wachten op netwerk…</string>
     <string name="Connecting">Verbinden…</string>
     <string name="Updating">Bijwerken…</string>
@@ -49,14 +46,13 @@
     <string name="EncryptedChatStartedIncoming">Toegevoegd aan de geheime chat.</string>
     <string name="ClearHistory">Geschiedenis wissen</string>
     <string name="DeleteChat">Verwijderen en verlaten</string>
-    <string name="HiddenName">Verborgen naam</string>
+    <string name="DeleteChatUser">Gesprek verwijderen</string>
+    <string name="HiddenName">Verwijderd account</string>
     <string name="SelectChat">Kies een gesprek</string>
     <string name="PhotoTip">Druk en houd ingedrukt</string>
     <string name="CompatibilityChat">%1$s gebruikt een oudere versie van Telegram, dus worden geheime foto\'s weergegeven in de compatibiliteitsmodus.\n\nZodra %2$s Telegram updatet werken foto\'s met timers voor 1 minuut of minder in de \'Druk en houd ingedrukt\'-modus en krijg je een bericht wanneer de andere partij een schermafbeelding maakt.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="SearchMessages">BERICHTEN</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Verzendlijst</string>
     <string name="NewBroadcastList">Nieuwe verzendlijst</string>
     <string name="EnterListName">Naam van lijst</string>
     <string name="YouCreatedBroadcastList">Je hebt een verzendlijst gemaakt</string>
@@ -73,12 +69,12 @@
     <string name="UsbActive">USB-overdracht actief</string>
     <string name="InternalStorage">Interne opslag</string>
     <string name="ExternalStorage">Externe opslag</string>
-    <string name="SystemRoot">Systeemmap</string>
+    <string name="SystemRoot">Systeem map</string>
     <string name="SdCard">SD-kaart</string>
+    <string name="Folder">Map</string>
     <!--chat view-->
     <string name="Invisible">onzichtbaar</string>
     <string name="Typing">aan het typen…</string>
-    <string name="Attach">Bijvoegen</string>
     <string name="IsTyping">is aan het typen…</string>
     <string name="AreTyping">zijn aan het typen…</string>
     <string name="GotAQuestion">Heb je een vraag\nover Telegram?</string>
@@ -88,18 +84,13 @@
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Document</string>
     <string name="NoMessages">Nog geen berichten hier…</string>
-    <string name="ViewPhoto">Foto bekijken</string>
-    <string name="ViewLocation">Locatie bekijken</string>
-    <string name="ViewVideo">Video afspelen</string>
     <string name="ForwardedMessage">Doorgestuurd bericht</string>
     <string name="From">Van</string>
     <string name="NoRecent">Niets recents</string>
     <string name="Message">Bericht</string>
-    <string name="TypeMessage">Typ een bericht...</string>
-    <string name="DOWNLOAD">Downloaden</string>
-    <string name="Selected">Geselecteerd: %d</string>
-    <string name="ShareMyContactInfo">MIJN CONTACTGEGEVENS DELEN</string>
-    <string name="AddToContacts">TOEVOEGEN AAN CONTACTEN</string>
+    <string name="TypeMessage">Bericht</string>
+    <string name="ShareMyContactInfo">Mijn contactgegevens delen</string>
+    <string name="AddToContacts">Toevoegen aan contacten</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s heeft je uitgenodigd voor een geheime chat.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Je hebt %s uitgenodigd voor een geheime chat.</string>
     <string name="EncryptedDescriptionTitle">Geheime chat functies:</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
     <string name="UnsupportedAttachment">Bestandstype niet ondersteund</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Geheime chat aangevraagd</string>
-    <string name="EncryptedChatAccepted">Geheime chat gestart</string>
     <string name="MessageLifetimeChanged">%1$s heeft de zelfvernietigingstimer ingesteld op %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Je hebt de zelfvernietigingstimer ingesteld op %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s heeft de zelfvernietigingstimer uitgeschakeld</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">Antwoord op %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Nieuw bericht</string>
     <string name="SelectContact">Kies een contact</string>
     <string name="NoContacts">Nog geen contacten</string>
     <string name="InviteText">Hey! Zullen we overstappen op Telegram? http://telegram.org/dl2</string>
     <string name="TodayAt">vandaag om</string>
     <string name="YesterdayAt">gisteren om</string>
     <string name="Online">online</string>
-    <string name="Offline">offline</string>
     <string name="LastSeen">gezien</string>
     <string name="LastSeenDate">gezien</string>
     <string name="InviteFriends">Vrienden uitnodigen</string>
     <string name="GlobalSearch">WERELDWIJD ZOEKEN</string>
+    <string name="Lately">recent gezien</string>
+    <string name="WithinAWeek">afgelopen week gezien</string>
+    <string name="WithinAMonth">afgelopen maand gezien</string>
+    <string name="ALongTimeAgo">lang geleden gezien</string>
     <!--group create view-->
     <string name="SendMessageTo">Bericht verzenden naar…</string>
     <string name="EnterGroupNamePlaceholder">Groepsnaam...</string>
     <string name="GroupName">Groepsnaam</string>
-    <string name="AllContacts">ALLE CONTACTEN</string>
     <string name="MembersCount">%1$d/%2$d deelnemers</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">GROEPSNAAM INSTELLEN</string>
     <string name="SharedMedia">Gedeelde media</string>
-    <string name="GroupInfo">Groepsinformatie</string>
-    <string name="SHAREDMEDIA">GEDEELDE MEDIA</string>
-    <string name="SETTINGS">INSTELLINGEN</string>
+    <string name="SETTINGS">Instellingen</string>
     <string name="AddMember">Deelnemer toevoegen</string>
     <string name="DeleteAndExit">Groep verwijderen en verlaten</string>
     <string name="Notifications">Meldingen</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Delen</string>
     <string name="AddContact">Toevoegen</string>
+    <string name="AddContactTitle">Contact toevoegen</string>
     <string name="BlockContact">Blokkeren</string>
     <string name="EditContact">Bewerken</string>
     <string name="DeleteContact">Verwijderen</string>
-    <string name="PhoneHome">THUIS</string>
-    <string name="PhoneMobile">MOBIEL</string>
-    <string name="PhoneWork">WERK</string>
-    <string name="PhoneOther">OVERIG</string>
-    <string name="PhoneMain">ALGEMEEN</string>
-    <string name="ContactInfo">Contactinformatie</string>
-    <string name="PHONE">TELEFOON</string>
+    <string name="PhoneHome">Thuis</string>
+    <string name="PhoneMobile">Mobiel</string>
+    <string name="PhoneWork">Werk</string>
+    <string name="PhoneOther">Overig</string>
+    <string name="PhoneMain">Hoofd</string>
     <string name="StartEncryptedChat">Geheime chat starten</string>
     <string name="CreateEncryptedChatError">Er is een fout opgetreden.</string>
-    <string name="SecretTitle">Geheime chat</string>
     <string name="EncryptionKey">Encryptiesleutel</string>
     <string name="MessageLifetime">Zelfvernietigingstimer</string>
     <string name="ShortMessageLifetimeForever">Uit</string>
     <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor deze geheime chat met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is jullie gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
     <string name="NumberUnknown">Onbekend</string>
-    <string name="Info">INFORMATIE</string>
+    <string name="Info">Info</string>
     <string name="Phone">Telefoon</string>
     <!--usernames-->
     <string name="Username">Gebruikersnaam</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Deblokkeren</string>
     <string name="UnblockText">Houd een gebruiker ingedrukt om hem/haar te deblokkeren.</string>
     <string name="NoBlocked">Geen geblokkeerde gebruikers</string>
-    <string name="MessageNotifications">BERICHTMELDINGEN</string>
+    <string name="MessageNotifications">Berichtmeldingen</string>
     <string name="Alert">Waarschuwing</string>
     <string name="MessagePreview">Voorvertoning</string>
-    <string name="GroupNotifications">GROEPSMELDINGEN</string>
+    <string name="GroupNotifications">Groepsmeldingen</string>
     <string name="Sound">Geluid</string>
-    <string name="InAppNotifications">IN-APP BERICHTGEVING</string>
+    <string name="InAppNotifications">In-app meldingen</string>
     <string name="InAppSounds">Geluiden</string>
     <string name="InAppVibrate">Trillen</string>
     <string name="Vibrate">Trillen</string>
     <string name="InAppPreview">Voorvertoningen</string>
-    <string name="Reset">RESETTEN</string>
+    <string name="Reset">Resetten</string>
     <string name="ResetAllNotifications">Alle meldingen resetten</string>
     <string name="UndoAllCustom">Aangepaste meldingsinstellingen wissen voor contacten en groepen.</string>
     <string name="NotificationsAndSounds">Meldingen en geluiden</string>
     <string name="BlockedUsers">Geblokkeerde gebruikers</string>
-    <string name="SaveIncomingPhotos">Inkomende foto\'s opslaan</string>
     <string name="LogOut">Uitloggen</string>
-    <string name="YourFirstNameAndLastName">JE VOOR- EN ACHTERNAAM</string>
     <string name="NoSound">Geen geluid</string>
     <string name="Default">Standaard</string>
-    <string name="Support">ONDERSTEUNING</string>
-    <string name="ChatBackground">Achtergrond</string>
-    <string name="MessagesSettings">BERICHTEN</string>
+    <string name="Support">Ondersteuning</string>
+    <string name="ChatBackground">Achtergrond kiezen</string>
+    <string name="MessagesSettings">Berichten</string>
     <string name="SendByEnter">Verzenden met Enter</string>
     <string name="TerminateAllSessions">Beëindig alle andere sessies</string>
-    <string name="Events">GEBEURTENISSEN</string>
+    <string name="Events">Gebeurtenissen</string>
     <string name="ContactJoined">Contact lid van Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Taal</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Als Google Play Services genoeg voor je is om meldingen te ontvangen kun je de Meldingenservice uitschakelen. We raden echter aan dit ingeschakeld te laten om de app in de achtergrond te laten draaien en directe meldingen te ontvangen.</string>
     <string name="SortBy">Sorteren op</string>
     <string name="ImportContacts">Importeer contacten</string>
-    <string name="WiFiOnly">Alleen via WiFi</string>
     <string name="SortFirstName">Voornaam</string>
     <string name="SortLastName">Achternaam</string>
     <string name="LedColor">LED kleur</string>
@@ -281,17 +265,16 @@
     <string name="Long">Lang</string>
     <string name="SystemDefault">Systeem standaard</string>
     <string name="SettingsDefault">Standaardinstelling</string>
-    <string name="AutomaticMediaDownload">AUTOMATISCH MEDIA OPHALEN</string>
+    <string name="AutomaticMediaDownload">Automatisch media downloaden</string>
     <string name="WhenUsingMobileData">Bij mobiele verbinding</string>
     <string name="WhenConnectedOnWiFi">Bij Wi-Fi-verbinding</string>
     <string name="WhenRoaming">Bij roaming</string>
     <string name="NoMediaAutoDownload">Geen media</string>
     <string name="SaveToGallerySettings">Opslaan in galerij</string>
+    <string name="EditName">Naam bewerken</string>
     <!--media view-->
     <string name="NoMedia">Nog geen media gedeeld</string>
-    <string name="CancelDownload">Downloaden annuleren</string>
     <!--map view-->
-    <string name="MyLocation">Mijn locatie</string>
     <string name="Map">Kaart</string>
     <string name="Satellite">Satelliet</string>
     <string name="Hybrid">Hybride</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galerij</string>
     <string name="AllPhotos">Alle foto\'s</string>
     <string name="NoPhotos">Nog geen foto\'s</string>
+    <string name="PleaseDownload">Download media eerst</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacy en veiligheid</string>
+    <string name="PrivacyTitle">Privacy</string>
+    <string name="PrivacyLastSeen">Laatst gezien</string>
+    <string name="LastSeenEverybody">Iedereen</string>
+    <string name="LastSeenContacts">Mijn contacten</string>
+    <string name="LastSeenNobody">Niemand</string>
+    <string name="LastSeenEverybodyMinus">Iedereen (-%1$d)</string>
+    <string name="LastSeenContactsPlus">Mijn contacten (+%1$d)</string>
+    <string name="LastSeenContactsMinus">Mijn contacten (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">Mijn contacten (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Niemand (+%1$d)</string>
+    <string name="SecurityTitle">Veiligheid</string>
+    <string name="DeleteAccountTitle">Account verwijderen</string>
+    <string name="DeleteAccountIfAwayFor">Indien afwezig voor</string>
+    <string name="DeleteAccountHelp">Als je binnen deze periode niet minimaal één keer ingelogd bent geweest zal je account worden verwijderd, inclusief alle data.</string>
+    <string name="DeleteAccountNowConfirmation">Je account verwijderen?</string>
+    <string name="LastSeenHelp">Wijzig wie je laatst gezien tijd kan zien.</string>
+    <string name="LastSeenTitle">Wie kan mijn laatst gezien tijd zien?</string>
+    <string name="AddExceptions">Uitzonderingen toevoegen</string>
+    <string name="CustomHelp">Let op: van mensen waarmee je je laatst gezien tijd niet deelt is deze voor jou ook niet zichtbaar. In plaats daarvan krijg je tijden bij benadering te zien (recent, afgelopen week, afgelopen maand).</string>
+    <string name="AlwaysShareWith">Altijd delen met</string>
+    <string name="NeverShareWith">Nooit delen met</string>
+    <string name="CustomShareSettingsHelp">Deze instelling overschrijft de bovenstaande.</string>
+    <string name="AlwaysShareWithTitle">Altijd delen</string>
+    <string name="AlwaysShareWithPlaceholder">Altijd delen met gebruikers</string>
+    <string name="NeverShareWithTitle">Nooit delen</string>
+    <string name="NeverShareWithPlaceholder">Nooit delen met gebruikers</string>
+    <string name="EmpryUsersPlaceholder">Toevoegen</string>
+    <string name="PrivacyFloodControlError">Sorry, te veel verzoeken. Momenteel is het niet mogelijk om de privacyinstellingen te wijzigen, even geduld alsjeblieft.</string>
+    <string name="ClearOtherSessionsHelp">Logt alle apparaten behalve deze uit.</string>
+    <string name="RemoveFromListText">Gebruiker vasthouden om te verwijderen.</string>
     <!--edit video view-->
     <string name="EditVideo">Video bewerken</string>
     <string name="OriginalVideo">Originele video</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Van camera</string>
     <string name="FromGalley">Uit galerij</string>
     <string name="DeletePhoto">Foto verwijderen</string>
-    <string name="OpenPhoto">Foto openen</string>
     <string name="Set">Instellen</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -360,7 +375,7 @@
     <string name="AttachAudio">Geluidsbestand</string>
     <string name="FromYou">Jij</string>
     <string name="ActionTakeScreenshootYou">Je hebt een schermafbeelding gemaakt!</string>
-    <string name="ActionTakeScreenshoot">un1 maakte een schermafbeeling!</string>
+    <string name="ActionTakeScreenshoot">un1 maakte een schermafbeelding!</string>
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Ongeldig telefoonnummer</string>
     <string name="CodeExpired">Code verlopen. Log opnieuw in.</string>
@@ -371,24 +386,24 @@
     <string name="Loading">Bezig met laden…</string>
     <string name="NoPlayerInstalled">Je hebt geen mediaspeler. Installeer een mediaspeler om door te gaan.</string>
     <string name="NoMailInstalled">Mail ons op sms@telegram.org en vertel ons over je probleem.</string>
-    <string name="NoHandleAppInstalled">Je hebt geen apps die bestandstype \'%1$s\' kunnen verwerken, gelieve een compitabele app te installeren</string>
+    <string name="NoHandleAppInstalled">Je hebt geen apps die bestandstype \'%1$s\' kunnen verwerken, gelieve een compatibele app te installeren</string>
     <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wil je een uitnodiging sturen?</string>
     <string name="AreYouSure">Weet je het zeker?</string>
-    <string name="AddContactQ">Contact toevoegen?</string>
     <string name="AddToTheGroup">%1$s toevoegen aan de groep?\n\nAantal recente berichten om door te sturen:</string>
     <string name="ForwardMessagesTo">Berichten doorsturen naar %1$s?</string>
-    <string name="DeleteChatQuestion">Dit gesprek verwijderen?</string>
     <string name="SendMessagesTo">Berichten naar %1$s verzenden?</string>
-    <string name="AreYouSureLogout">Weet je zeker dat je wilt uitloggen?</string>
+    <string name="AreYouSureLogout">Weet je zeker dat je wilt uitloggen?\n\nTelegram kun je naadloos op al je apparaten tegelijkertijd gebruiken.\n\nLet op! Als je uitlogt worden al je geheime chats verwijderd.</string>
     <string name="AreYouSureSessions">Alle apparaten behalve het huidige apparaat uitloggen?</string>
-    <string name="AreYouSureDeleteAndExit">Weet je zeker dat je alles wilt verwijderen en de groep wilt verlaten?</string>
+    <string name="AreYouSureDeleteAndExit">Echt alles verwijderen en de groep verlaten?</string>
     <string name="AreYouSureDeleteThisChat">Weet je zeker dat je dit gesprek wilt verwijderen?</string>
     <string name="AreYouSureShareMyContactInfo">Weet je zeker dat je je contactinformatie wilt delen?</string>
     <string name="AreYouSureBlockContact">Weet je zeker dat je deze persoon wilt blokkeren?</string>
     <string name="AreYouSureUnblockContact">Weet je zeker dat je deze persoon wilt deblokkeren?</string>
     <string name="AreYouSureDeleteContact">Weet je zeker dat je deze contactpersoon wilt verwijderen?</string>
     <string name="AreYouSureSecretChat">Weet je zeker dat je een geheime chat wilt starten?</string>
-    <string name="ForwardFromMyName">doorsturen via mijn eigen naam</string>
+    <string name="AreYouSureRegistration">Weet je zeker dat je de registratie wilt annuleren?</string>
+    <string name="AreYouSureClearHistory">Geschiedenis echt wissen? </string>
+    <string name="AreYouSureDeleteMessages">%1$s echt verwijderen?</string>
     <string name="SendMessagesToGroup">Berichten naar %1$s verzenden?</string>
     <string name="ForwardMessagesToGroup">Berichten naar %1$s doorsturen?</string>
     <string name="FeatureUnavailable">Sorry, deze functie is momenteel niet beschikbaar in jouw land.</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d weken</string>
     <string name="Weeks_many">%1$d weken</string>
     <string name="Weeks_other">%1$d weken</string>
+    <string name="Months_zero">%1$d maanden</string>
+    <string name="Months_one">%1$d maand</string>
+    <string name="Months_two">%1$d maanden</string>
+    <string name="Months_few">%1$d maanden</string>
+    <string name="Months_many">%1$d maanden</string>
+    <string name="Months_other">%1$d maanden</string>
+    <string name="Years_zero">%1$d jaren</string>
+    <string name="Years_one">%1$d jaar</string>
+    <string name="Years_two">%1$d jaren</string>
+    <string name="Years_few">%1$d jaren</string>
+    <string name="Years_many">%1$d jaren</string>
+    <string name="Years_other">%1$d jaren</string>
+    <string name="Users_zero">%1$d gebruikers</string>
+    <string name="Users_one">%1$d gebruiker</string>
+    <string name="Users_two">%1$d gebruikers</string>
+    <string name="Users_few">%1$d gebruikers</string>
+    <string name="Users_many">%1$d gebruikers</string>
+    <string name="Users_other">%1$d gebruikers</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd-MM-yy</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 72f6da8d3..9782bc2ab 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">pt_BR</string>
     <!--signin view-->
     <string name="YourPhone">Seu número</string>
-    <string name="StartText">Por favor confirme o código do seu país\ne digite o número do seu telefone.</string>
+    <string name="StartText">Confirme o código de seu país e preencha seu número de telefone.</string>
     <string name="ChooseCountry">Escolha um país</string>
     <string name="WrongCountry">Código do país incorreto</string>
     <!--code enter view-->
@@ -28,35 +28,31 @@
     <string name="LastName">Sobrenome (opcional)</string>
     <string name="CancelRegistration">Cancelar registro</string>
     <!--chats view-->
-    <string name="Chats">Conversas</string>
-    <string name="Search">Busca</string>
-    <string name="NewMessages">Novas mensagens</string>
     <string name="Settings">Configurações</string>
     <string name="Contacts">Contatos</string>
     <string name="NewGroup">Novo Grupo</string>
     <string name="Yesterday">ontem</string>
     <string name="NoResult">Nenhum resultado</string>
-    <string name="NoChats">Ainda não há conversas...</string>
+    <string name="NoChats">Ainda não há chats...</string>
     <string name="NoChatsHelp">Comece a conversar pressionando o\nbotão \'Nova Mensagem\' no canto superior direito\nou vá para a seção \'Contatos\'.</string>
     <string name="WaitingForNetwork">Aguardando rede...</string>
     <string name="Connecting">Conectando...</string>
     <string name="Updating">Atualizando...</string>
-    <string name="NewSecretChat">Nova Conversa Secreta</string>
+    <string name="NewSecretChat">Novo Chat Secreto</string>
     <string name="AwaitingEncryption">Esperando %s se conectar...</string>
-    <string name="EncryptionRejected">Conversa secreta cancelada</string>
+    <string name="EncryptionRejected">Chat secreto cancelado</string>
     <string name="EncryptionProcessing">Trocando chaves de criptografia...</string>
-    <string name="EncryptedChatStartedOutgoing">%s entrou na conversa secreta</string>
-    <string name="EncryptedChatStartedIncoming">Você entrou na conversa secreta</string>
+    <string name="EncryptedChatStartedOutgoing">%s entrou no chat secreto</string>
+    <string name="EncryptedChatStartedIncoming">Você entrou no chat secreto</string>
     <string name="ClearHistory">Limpar histórico</string>
     <string name="DeleteChat">Apagar e sair</string>
-    <string name="HiddenName">Nome oculto</string>
-    <string name="SelectChat">Selecione uma Conversa</string>
+    <string name="DeleteChatUser">Excluir conversa</string>
+    <string name="HiddenName">Excluir Conta</string>
+    <string name="SelectChat">Selecione um Chat</string>
     <string name="PhotoTip">Toque e segure para ver</string>
-    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualize o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualizar o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
+    <string name="SearchMessages">MENSAGENS</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Lista de Broadcast</string>
     <string name="NewBroadcastList">Nova Lista de Broadcast</string>
     <string name="EnterListName">Digite o nome da lista</string>
     <string name="YouCreatedBroadcastList">Você criou uma lista de broadcast</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">Armazenamento Externo</string>
     <string name="SystemRoot">Administrador do Sistema</string>
     <string name="SdCard">Cartão SD</string>
+    <string name="Folder">Pasta</string>
     <!--chat view-->
     <string name="Invisible">invisível</string>
     <string name="Typing">escrevendo...</string>
-    <string name="Attach">Anexar</string>
     <string name="IsTyping">está escrevendo...</string>
     <string name="AreTyping">estão escrevendo...</string>
     <string name="GotAQuestion">Tem alguma dúvida\nsobre o Telegram?</string>
@@ -88,21 +84,16 @@
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Documento</string>
     <string name="NoMessages">Ainda não há mensagens aqui...</string>
-    <string name="ViewPhoto">Ver Foto</string>
-    <string name="ViewLocation">Ver Localização</string>
-    <string name="ViewVideo">Tocar Vídeo</string>
     <string name="ForwardedMessage">Mensagem encaminhada</string>
     <string name="From">De</string>
     <string name="NoRecent">Nada recente</string>
     <string name="Message">Mensagem</string>
-    <string name="TypeMessage">Escrever mensagem</string>
-    <string name="DOWNLOAD">Baixar</string>
-    <string name="Selected">%d selecionado</string>
-    <string name="ShareMyContactInfo">COMPARTILHAR MINHAS INFORMAÇÕES DE CONTATO</string>
-    <string name="AddToContacts">ADICIONAR AOS CONTATOS</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para uma conversa secreta.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para uma conversa secreta.</string>
-    <string name="EncryptedDescriptionTitle">Diferenças dos Chats Secretos:</string>
+    <string name="TypeMessage">Mensagem</string>
+    <string name="ShareMyContactInfo">Compartilhar meu contato</string>
+    <string name="AddToContacts">Adicionar aos contatos</string>
+    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para um chat secreto</string>
+    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para um chat secreto.</string>
+    <string name="EncryptedDescriptionTitle">Chats Secretos:</string>
     <string name="EncryptedDescription1">Criptografia de ponta-a-ponta</string>
     <string name="EncryptedDescription2">Sem rastros nos servidores</string>
     <string name="EncryptedDescription3">Timer de autodestruição</string>
@@ -110,14 +101,12 @@
     <string name="YouWereKicked">Você foi removido deste grupo</string>
     <string name="YouLeft">Você saiu deste grupo</string>
     <string name="DeleteThisGroup">Apagar este grupo</string>
-    <string name="DeleteThisChat">Apagar esta conversa</string>
+    <string name="DeleteThisChat">Apagar este chat</string>
     <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
     <string name="SaveToDownloads">Salvar em downloads</string>
     <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
     <string name="UnsupportedAttachment">Anexo não suportado</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Conversa secreta solicitada</string>
-    <string name="EncryptedChatAccepted">Conversa secreta iniciada</string>
     <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">Responder para %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Nova Mensagem</string>
     <string name="SelectContact">Selecionar Contato</string>
     <string name="NoContacts">Ainda não há contatos</string>
     <string name="InviteText">Ei, vamos mudar para o Telegram: http://telegram.org/dl2</string>
     <string name="TodayAt">hoje às</string>
     <string name="YesterdayAt">ontem às</string>
     <string name="Online">online</string>
-    <string name="Offline">offline</string>
     <string name="LastSeen">visto</string>
     <string name="LastSeenDate">visto</string>
     <string name="InviteFriends">Convidar Amigos</string>
     <string name="GlobalSearch">BUSCA GLOBAL</string>
+    <string name="Lately">visto recentemente</string>
+    <string name="WithinAWeek">visto na última semana</string>
+    <string name="WithinAMonth">visto no último mês</string>
+    <string name="ALongTimeAgo">visto há muito tempo atrás</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensagem para...</string>
     <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
     <string name="GroupName">Nome do grupo</string>
-    <string name="AllContacts">TODOS OS CONTATOS</string>
     <string name="MembersCount">%1$d/%2$d membros</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">DIGITE O NOME DO GRUPO</string>
     <string name="SharedMedia">Mídia compartilhada</string>
-    <string name="GroupInfo">Informações do Grupo</string>
-    <string name="SHAREDMEDIA">MÍDIA COMPARTILHADA</string>
-    <string name="SETTINGS">CONFIGURAÇÕES</string>
+    <string name="SETTINGS">Configurações</string>
     <string name="AddMember">Adicionar membro</string>
     <string name="DeleteAndExit">Apagar e sair do grupo</string>
     <string name="Notifications">Notificações</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Compartilhar</string>
     <string name="AddContact">Adicionar</string>
+    <string name="AddContactTitle">Adicionar contato</string>
     <string name="BlockContact">Bloquear</string>
     <string name="EditContact">Editar</string>
     <string name="DeleteContact">Apagar</string>
-    <string name="PhoneHome">CASA</string>
-    <string name="PhoneMobile">CELULAR</string>
-    <string name="PhoneWork">TRABALHO</string>
-    <string name="PhoneOther">OUTRO</string>
-    <string name="PhoneMain">PRINCIPAL</string>
-    <string name="ContactInfo">Informações do Contato</string>
-    <string name="PHONE">TELEFONE</string>
-    <string name="StartEncryptedChat">Iniciar Conversa Secreta</string>
+    <string name="PhoneHome">Início</string>
+    <string name="PhoneMobile">Celular</string>
+    <string name="PhoneWork">Trabalho</string>
+    <string name="PhoneOther">Outro</string>
+    <string name="PhoneMain">Principal</string>
+    <string name="StartEncryptedChat">Iniciar Chat Secreto</string>
     <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="SecretTitle">Conversa Secreta</string>
     <string name="EncryptionKey">Chave criptográfica</string>
     <string name="MessageLifetime">Tempo de autodestruição</string>
     <string name="ShortMessageLifetimeForever">Desativado</string>
-    <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para esta conversa secreta com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
+    <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para este chat secreto com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
     <string name="NumberUnknown">Desconhecido</string>
-    <string name="Info">INFO</string>
+    <string name="Info">Info</string>
     <string name="Phone">Telefone</string>
     <!--usernames-->
     <string name="Username">Nome de Usuário</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Desbloquear</string>
     <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
     <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="MessageNotifications">NOTIFICAÇÕES DE MENSAGENS</string>
+    <string name="MessageNotifications">Notificações de mensagens</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Visualização de Mensagem</string>
-    <string name="GroupNotifications">NOTIFICAÇÕES DO GRUPO</string>
+    <string name="GroupNotifications">Notificações de grupo</string>
     <string name="Sound">Som</string>
-    <string name="InAppNotifications">NOTIFICAÇÕES NO APLICATIVO</string>
+    <string name="InAppNotifications">Notificações no aplicativo</string>
     <string name="InAppSounds">Sons no Aplicativo</string>
     <string name="InAppVibrate">Vibração no Aplicativo</string>
     <string name="Vibrate">Vibrar</string>
     <string name="InAppPreview">Visualização no Aplicativo</string>
-    <string name="Reset">LIMPAR</string>
+    <string name="Reset">Limpar</string>
     <string name="ResetAllNotifications">Limpar todas as notificações</string>
     <string name="UndoAllCustom">Desfazer todas as configurações de notificação para todos os seus contatos e grupos</string>
     <string name="NotificationsAndSounds">Notificações e Sons</string>
     <string name="BlockedUsers">Usuários bloqueados</string>
-    <string name="SaveIncomingPhotos">Salvar fotos recebidas</string>
     <string name="LogOut">Sair</string>
-    <string name="YourFirstNameAndLastName">SEU NOME E SOBRENOME</string>
     <string name="NoSound">Sem som</string>
     <string name="Default">Padrão</string>
-    <string name="Support">SUPORTE</string>
+    <string name="Support">Suporte</string>
     <string name="ChatBackground">Papel de parede</string>
-    <string name="MessagesSettings">MENSAGENS</string>
+    <string name="MessagesSettings">Mensagens</string>
     <string name="SendByEnter">Enviar usando \'Enter\'</string>
     <string name="TerminateAllSessions">Terminar todas as outras sessões</string>
-    <string name="Events">EVENTOS</string>
+    <string name="Events">Eventos</string>
     <string name="ContactJoined">Contato entrou para o Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play for suficiente para você, você pode desativar o \"Serviço de Notificações\". Porém, recomendamos deixá-lo ativo para manter o aplicativo executando em segundo plano e receber notificações instantaneamente.</string>
     <string name="SortBy">Ordenar Por</string>
     <string name="ImportContacts">Importar Contatos</string>
-    <string name="WiFiOnly">Apenas por WiFi</string>
     <string name="SortFirstName">Primeiro nome</string>
     <string name="SortLastName">Sobrenome</string>
     <string name="LedColor">Cor do LED</string>
@@ -281,17 +265,16 @@
     <string name="Long">Longa</string>
     <string name="SystemDefault">Padrão do sistema</string>
     <string name="SettingsDefault">Configurações padrão</string>
-    <string name="AutomaticMediaDownload">DOWNLOAD AUTOMÁTICO DE MÍDIA</string>
+    <string name="AutomaticMediaDownload">Download automático de mídia</string>
     <string name="WhenUsingMobileData">Ao usar dados móveis</string>
     <string name="WhenConnectedOnWiFi">Quando conectado em Wi-Fi</string>
     <string name="WhenRoaming">Quando em roaming</string>
     <string name="NoMediaAutoDownload">Sem mídia</string>
     <string name="SaveToGallerySettings">Salvar na galeria</string>
+    <string name="EditName">Editar nome</string>
     <!--media view-->
     <string name="NoMedia">Ainda não há mídia compartilhada</string>
-    <string name="CancelDownload">Cancelar Download</string>
     <!--map view-->
-    <string name="MyLocation">Minha localização</string>
     <string name="Map">Mapa</string>
     <string name="Satellite">Satélite</string>
     <string name="Hybrid">Híbrido</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galeria</string>
     <string name="AllPhotos">Todas as Fotos</string>
     <string name="NoPhotos">Ainda não há fotos</string>
+    <string name="PleaseDownload">Baixar o vídeo primeiro</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacidade e Segurança</string>
+    <string name="PrivacyTitle">Privacidade</string>
+    <string name="PrivacyLastSeen">Último Acesso</string>
+    <string name="LastSeenEverybody">Todos</string>
+    <string name="LastSeenContacts">Meus Contatos</string>
+    <string name="LastSeenNobody">Nenhum</string>
+    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
+    <string name="LastSeenContactsPlus">Meus Contatos (+%1$d)</string>
+    <string name="LastSeenContactsMinus">Meus Contatos (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">Meus Contatos (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Nenhum (+%1$d)</string>
+    <string name="SecurityTitle">Segurança</string>
+    <string name="DeleteAccountTitle">Auto-destruição da conta</string>
+    <string name="DeleteAccountIfAwayFor">Se você estiver inativo por</string>
+    <string name="DeleteAccountHelp">Se você não acessar sua conta ao menos uma vez neste período, sua conta será excluída com seus grupos, mensagens e contatos.</string>
+    <string name="DeleteAccountNowConfirmation">Excluir sua conta?</string>
+    <string name="LastSeenHelp">Alterar quem pode ver o seu Último Acesso.</string>
+    <string name="LastSeenTitle">Quem pode ver o seu Último Acesso?</string>
+    <string name="AddExceptions">Adicionar exceções</string>
+    <string name="CustomHelp">Importante: você não será capaz de ver quando foi o Último Acesso para as pessoas com quem você não compartilha quando foi seu Último Acesso. Você visualizará a última vez visto aproximada. (recentemente, dentro de uma semana, dentro de um mês).</string>
+    <string name="AlwaysShareWith">Sempre Mostrar Para</string>
+    <string name="NeverShareWith">Nunca Mostrar Para</string>
+    <string name="CustomShareSettingsHelp">Estas configurações irão substituir os valores anteriores.</string>
+    <string name="AlwaysShareWithTitle">Sempre Mostrar</string>
+    <string name="AlwaysShareWithPlaceholder">Sempre mostrar para usuários...</string>
+    <string name="NeverShareWithTitle">Nunca Mostrar</string>
+    <string name="NeverShareWithPlaceholder">Nunca mostrar para usuários...</string>
+    <string name="EmpryUsersPlaceholder">Adicionar Usuários</string>
+    <string name="PrivacyFloodControlError">Desculpe, muitas solicitações. Impossível alterar os ajustes de privacidade agora, por favor aguarde.</string>
+    <string name="ClearOtherSessionsHelp">Sair de todos os dispositivos, exceto este.</string>
+    <string name="RemoveFromListText">Toque e segure no usuário para deletar.</string>
     <!--edit video view-->
     <string name="EditVideo">Editar Vídeo</string>
     <string name="OriginalVideo">Vídeo Original</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Câmera</string>
     <string name="FromGalley">Galeria</string>
     <string name="DeletePhoto">Apagar foto</string>
-    <string name="OpenPhoto"> Abrir foto</string>
     <string name="Set">Aplicar</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddContactQ">Adicionar contato?</string>
     <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero de últimas mensagens para encaminhar:</string>
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
-    <string name="DeleteChatQuestion">Apagar esta conversa?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
-    <string name="AreYouSureLogout">Você tem certeza que deseja sair?</string>
+    <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
     <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
     <string name="AreYouSureDeleteAndExit">Você tem certeza que deseja deletar e sair do grupo?</string>
     <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja deletar esta conversa?</string>
@@ -387,11 +400,13 @@
     <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
     <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
     <string name="AreYouSureDeleteContact">Você tem certeza que deseja deletar este contato?</string>
-    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar uma conversa secreta?</string>
-    <string name="ForwardFromMyName">encaminhar pelo meu nome</string>
+    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar um chat secreto?</string>
+    <string name="AreYouSureRegistration">Você tem certeza que deseja cancelar o registro?</string>
+    <string name="AreYouSureClearHistory">Você tem certeza que deseja limpar o histórico?</string>
+    <string name="AreYouSureDeleteMessages">Você tem certeza que deseja deletar %1$s?</string>
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápido</string>
@@ -400,13 +415,13 @@
     <string name="Page5Title">Poderoso</string>
     <string name="Page6Title">Baseado na nuvem</string>
     <string name="Page7Title">Privado</string>
-    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do<![CDATA[<br/>]]>mundo. É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido que<![CDATA[<br/>]]>qualquer outro aplicativo.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantém suas mensagens seguras<![CDATA[<br/>]]>contra ataques de hackers.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
+    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do mundo. <![CDATA[<br/>]]>É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
+    <string name="Page2Message">O <![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido<![CDATA[<br/>]]>que qualquer outro aplicativo.</string>
+    <string name="Page3Message">O <![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
+    <string name="Page4Message">O <![CDATA[<b>Telegram</b>]]> mantém suas mensagens<![CDATA[<br/>]]>seguras de ataques de hackers.</string>
+    <string name="Page5Message">O <![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
+    <string name="Page6Message">O <![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
+    <string name="Page7Message">O <![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
     <string name="StartMessaging">Comece a conversar</string>
     <!--plural-->
     <string name="Online_zero">%1$d online</string>
@@ -475,12 +490,30 @@
     <string name="Weeks_few">%1$d semanas</string>
     <string name="Weeks_many">%1$d semanas</string>
     <string name="Weeks_other">%1$d semanas</string>
+    <string name="Months_zero">%1$d meses</string>
+    <string name="Months_one">%1$d mês</string>
+    <string name="Months_two">%1$d meses</string>
+    <string name="Months_few">%1$d meses</string>
+    <string name="Months_many">%1$d meses</string>
+    <string name="Months_other">%1$d meses</string>
+    <string name="Years_zero">%1$d anos</string>
+    <string name="Years_one">%1$d ano</string>
+    <string name="Years_two">%1$d anos</string>
+    <string name="Years_few">%1$d anos</string>
+    <string name="Years_many">%1$d anos</string>
+    <string name="Years_other">%1$d anos</string>
+    <string name="Users_zero">%1$d usuários</string>
+    <string name="Users_one">%1$d usuário</string>
+    <string name="Users_two">%1$d usuários</string>
+    <string name="Users_few">%1$d usuários</string>
+    <string name="Users_many">%1$d usuários</string>
+    <string name="Users_other">%1$d usuários</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
     <string name="formatterYearMax">dd.MM.yyyy</string>
     <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">MMMM d, yyyy</string>
+    <string name="chatFullDate">d MMMM, yyyy</string>
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index cd734bee7..2a659034a 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -9,7 +9,7 @@
     <string name="LanguageCode">pt_PT</string>
     <!--signin view-->
     <string name="YourPhone">Seu número</string>
-    <string name="StartText">Por favor confirme o código do seu país\ne digite o número do seu telefone.</string>
+    <string name="StartText">Confirme o código de seu país e preencha seu número de telefone.</string>
     <string name="ChooseCountry">Escolha um país</string>
     <string name="WrongCountry">Código do país incorreto</string>
     <!--code enter view-->
@@ -28,35 +28,31 @@
     <string name="LastName">Sobrenome (opcional)</string>
     <string name="CancelRegistration">Cancelar registro</string>
     <!--chats view-->
-    <string name="Chats">Conversas</string>
-    <string name="Search">Busca</string>
-    <string name="NewMessages">Novas mensagens</string>
     <string name="Settings">Configurações</string>
     <string name="Contacts">Contatos</string>
     <string name="NewGroup">Novo Grupo</string>
     <string name="Yesterday">ontem</string>
     <string name="NoResult">Nenhum resultado</string>
-    <string name="NoChats">Ainda não há conversas...</string>
+    <string name="NoChats">Ainda não há chats...</string>
     <string name="NoChatsHelp">Comece a conversar pressionando o\nbotão \'Nova Mensagem\' no canto superior direito\nou vá para a seção \'Contatos\'.</string>
     <string name="WaitingForNetwork">Aguardando rede...</string>
     <string name="Connecting">Conectando...</string>
     <string name="Updating">Atualizando...</string>
-    <string name="NewSecretChat">Nova Conversa Secreta</string>
+    <string name="NewSecretChat">Novo Chat Secreto</string>
     <string name="AwaitingEncryption">Esperando %s se conectar...</string>
-    <string name="EncryptionRejected">Conversa secreta cancelada</string>
+    <string name="EncryptionRejected">Chat secreto cancelado</string>
     <string name="EncryptionProcessing">Trocando chaves de criptografia...</string>
-    <string name="EncryptedChatStartedOutgoing">%s entrou na conversa secreta</string>
-    <string name="EncryptedChatStartedIncoming">Você entrou na conversa secreta</string>
+    <string name="EncryptedChatStartedOutgoing">%s entrou no chat secreto</string>
+    <string name="EncryptedChatStartedIncoming">Você entrou no chat secreto</string>
     <string name="ClearHistory">Limpar histórico</string>
     <string name="DeleteChat">Apagar e sair</string>
-    <string name="HiddenName">Nome oculto</string>
-    <string name="SelectChat">Selecione uma Conversa</string>
+    <string name="DeleteChatUser">Excluir conversa</string>
+    <string name="HiddenName">Excluir Conta</string>
+    <string name="SelectChat">Selecione um Chat</string>
     <string name="PhotoTip">Toque e segure para ver</string>
-    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualize o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
-    <string name="SearchConversations">Conversations</string>
-    <string name="SearchMessages">Messages</string>
+    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualizar o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
+    <string name="SearchMessages">MENSAGENS</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Lista de Broadcast</string>
     <string name="NewBroadcastList">Nova Lista de Broadcast</string>
     <string name="EnterListName">Digite o nome da lista</string>
     <string name="YouCreatedBroadcastList">Você criou uma lista de broadcast</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">Armazenamento Externo</string>
     <string name="SystemRoot">Administrador do Sistema</string>
     <string name="SdCard">Cartão SD</string>
+    <string name="Folder">Pasta</string>
     <!--chat view-->
     <string name="Invisible">invisível</string>
     <string name="Typing">escrevendo...</string>
-    <string name="Attach">Anexar</string>
     <string name="IsTyping">está escrevendo...</string>
     <string name="AreTyping">estão escrevendo...</string>
     <string name="GotAQuestion">Tem alguma dúvida\nsobre o Telegram?</string>
@@ -88,21 +84,16 @@
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Documento</string>
     <string name="NoMessages">Ainda não há mensagens aqui...</string>
-    <string name="ViewPhoto">Ver Foto</string>
-    <string name="ViewLocation">Ver Localização</string>
-    <string name="ViewVideo">Tocar Vídeo</string>
     <string name="ForwardedMessage">Mensagem encaminhada</string>
     <string name="From">De</string>
     <string name="NoRecent">Nada recente</string>
     <string name="Message">Mensagem</string>
-    <string name="TypeMessage">Escrever mensagem</string>
-    <string name="DOWNLOAD">Baixar</string>
-    <string name="Selected">%d selecionado</string>
-    <string name="ShareMyContactInfo">COMPARTILHAR MINHAS INFORMAÇÕES DE CONTATO</string>
-    <string name="AddToContacts">ADICIONAR AOS CONTATOS</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para uma conversa secreta.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para uma conversa secreta.</string>
-    <string name="EncryptedDescriptionTitle">Diferenças dos Chats Secretos:</string>
+    <string name="TypeMessage">Mensagem</string>
+    <string name="ShareMyContactInfo">Compartilhar meu contato</string>
+    <string name="AddToContacts">Adicionar aos contatos</string>
+    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para um chat secreto</string>
+    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para um chat secreto.</string>
+    <string name="EncryptedDescriptionTitle">Chats Secretos:</string>
     <string name="EncryptedDescription1">Criptografia de ponta-a-ponta</string>
     <string name="EncryptedDescription2">Sem rastros nos servidores</string>
     <string name="EncryptedDescription3">Timer de autodestruição</string>
@@ -110,14 +101,12 @@
     <string name="YouWereKicked">Você foi removido deste grupo</string>
     <string name="YouLeft">Você saiu deste grupo</string>
     <string name="DeleteThisGroup">Apagar este grupo</string>
-    <string name="DeleteThisChat">Apagar esta conversa</string>
+    <string name="DeleteThisChat">Apagar este chat</string>
     <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
     <string name="SaveToDownloads">Salvar em downloads</string>
     <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
     <string name="UnsupportedAttachment">Anexo não suportado</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Conversa secreta solicitada</string>
-    <string name="EncryptedChatAccepted">Conversa secreta iniciada</string>
     <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
@@ -154,29 +143,29 @@
     <string name="ReplyToUser">Responder para %1$s</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
     <!--contacts view-->
+    <string name="NewMessageTitle">Nova Mensagem</string>
     <string name="SelectContact">Selecionar Contato</string>
     <string name="NoContacts">Ainda não há contatos</string>
     <string name="InviteText">Ei, vamos mudar para o Telegram: http://telegram.org/dl2</string>
     <string name="TodayAt">hoje às</string>
     <string name="YesterdayAt">ontem às</string>
     <string name="Online">online</string>
-    <string name="Offline">offline</string>
     <string name="LastSeen">visto</string>
     <string name="LastSeenDate">visto</string>
     <string name="InviteFriends">Convidar Amigos</string>
     <string name="GlobalSearch">BUSCA GLOBAL</string>
+    <string name="Lately">visto recentemente</string>
+    <string name="WithinAWeek">visto na última semana</string>
+    <string name="WithinAMonth">visto no último mês</string>
+    <string name="ALongTimeAgo">visto há muito tempo atrás</string>
     <!--group create view-->
     <string name="SendMessageTo">Enviar mensagem para...</string>
     <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
     <string name="GroupName">Nome do grupo</string>
-    <string name="AllContacts">TODOS OS CONTATOS</string>
     <string name="MembersCount">%1$d/%2$d membros</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">DIGITE O NOME DO GRUPO</string>
     <string name="SharedMedia">Mídia compartilhada</string>
-    <string name="GroupInfo">Informações do Grupo</string>
-    <string name="SHAREDMEDIA">MÍDIA COMPARTILHADA</string>
-    <string name="SETTINGS">CONFIGURAÇÕES</string>
+    <string name="SETTINGS">Configurações</string>
     <string name="AddMember">Adicionar membro</string>
     <string name="DeleteAndExit">Apagar e sair do grupo</string>
     <string name="Notifications">Notificações</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Compartilhar</string>
     <string name="AddContact">Adicionar</string>
+    <string name="AddContactTitle">Adicionar contato</string>
     <string name="BlockContact">Bloquear</string>
     <string name="EditContact">Editar</string>
     <string name="DeleteContact">Apagar</string>
-    <string name="PhoneHome">CASA</string>
-    <string name="PhoneMobile">CELULAR</string>
-    <string name="PhoneWork">TRABALHO</string>
-    <string name="PhoneOther">OUTRO</string>
-    <string name="PhoneMain">PRINCIPAL</string>
-    <string name="ContactInfo">Informações do Contato</string>
-    <string name="PHONE">TELEFONE</string>
-    <string name="StartEncryptedChat">Iniciar Conversa Secreta</string>
+    <string name="PhoneHome">Início</string>
+    <string name="PhoneMobile">Celular</string>
+    <string name="PhoneWork">Trabalho</string>
+    <string name="PhoneOther">Outro</string>
+    <string name="PhoneMain">Principal</string>
+    <string name="StartEncryptedChat">Iniciar Chat Secreto</string>
     <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="SecretTitle">Conversa Secreta</string>
     <string name="EncryptionKey">Chave criptográfica</string>
     <string name="MessageLifetime">Tempo de autodestruição</string>
     <string name="ShortMessageLifetimeForever">Desativado</string>
-    <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para esta conversa secreta com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
+    <string name="EncryptionKeyDescription">Esta imagem é uma visualização da chave criptográfica para este chat secreto com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se esta imagem aparecer da mesma forma no telefone de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, sua conversa é 200%% segura.<![CDATA[<br><br>]]>Saiba mais em telegram.org</string>
     <string name="NumberUnknown">Desconhecido</string>
-    <string name="Info">INFO</string>
+    <string name="Info">Info</string>
     <string name="Phone">Telefone</string>
     <!--usernames-->
     <string name="Username">Nome de Usuário</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Desbloquear</string>
     <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
     <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="MessageNotifications">NOTIFICAÇÕES DE MENSAGENS</string>
+    <string name="MessageNotifications">Notificações de mensagens</string>
     <string name="Alert">Alerta</string>
     <string name="MessagePreview">Visualização de Mensagem</string>
-    <string name="GroupNotifications">NOTIFICAÇÕES DO GRUPO</string>
+    <string name="GroupNotifications">Notificações de grupo</string>
     <string name="Sound">Som</string>
-    <string name="InAppNotifications">NOTIFICAÇÕES NO APLICATIVO</string>
+    <string name="InAppNotifications">Notificações no aplicativo</string>
     <string name="InAppSounds">Sons no Aplicativo</string>
     <string name="InAppVibrate">Vibração no Aplicativo</string>
     <string name="Vibrate">Vibrar</string>
     <string name="InAppPreview">Visualização no Aplicativo</string>
-    <string name="Reset">LIMPAR</string>
+    <string name="Reset">Limpar</string>
     <string name="ResetAllNotifications">Limpar todas as notificações</string>
     <string name="UndoAllCustom">Desfazer todas as configurações de notificação para todos os seus contatos e grupos</string>
     <string name="NotificationsAndSounds">Notificações e Sons</string>
     <string name="BlockedUsers">Usuários bloqueados</string>
-    <string name="SaveIncomingPhotos">Salvar fotos recebidas</string>
     <string name="LogOut">Sair</string>
-    <string name="YourFirstNameAndLastName">SEU NOME E SOBRENOME</string>
     <string name="NoSound">Sem som</string>
     <string name="Default">Padrão</string>
-    <string name="Support">SUPORTE</string>
+    <string name="Support">Suporte</string>
     <string name="ChatBackground">Papel de parede</string>
-    <string name="MessagesSettings">MENSAGENS</string>
+    <string name="MessagesSettings">Mensagens</string>
     <string name="SendByEnter">Enviar usando \'Enter\'</string>
     <string name="TerminateAllSessions">Terminar todas as outras sessões</string>
-    <string name="Events">EVENTOS</string>
+    <string name="Events">Eventos</string>
     <string name="ContactJoined">Contato entrou para o Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play for suficiente para você, você pode desativar o \"Serviço de Notificações\". Porém, recomendamos deixá-lo ativo para manter o aplicativo executando em segundo plano e receber notificações instantaneamente.</string>
     <string name="SortBy">Ordenar Por</string>
     <string name="ImportContacts">Importar Contatos</string>
-    <string name="WiFiOnly">Apenas por WiFi</string>
     <string name="SortFirstName">Primeiro nome</string>
     <string name="SortLastName">Sobrenome</string>
     <string name="LedColor">Cor do LED</string>
@@ -281,17 +265,16 @@
     <string name="Long">Longa</string>
     <string name="SystemDefault">Padrão do sistema</string>
     <string name="SettingsDefault">Configurações padrão</string>
-    <string name="AutomaticMediaDownload">DOWNLOAD AUTOMÁTICO DE MÍDIA</string>
+    <string name="AutomaticMediaDownload">Download automático de mídia</string>
     <string name="WhenUsingMobileData">Ao usar dados móveis</string>
     <string name="WhenConnectedOnWiFi">Quando conectado em Wi-Fi</string>
     <string name="WhenRoaming">Quando em roaming</string>
     <string name="NoMediaAutoDownload">Sem mídia</string>
     <string name="SaveToGallerySettings">Salvar na galeria</string>
+    <string name="EditName">Editar nome</string>
     <!--media view-->
     <string name="NoMedia">Ainda não há mídia compartilhada</string>
-    <string name="CancelDownload">Cancelar Download</string>
     <!--map view-->
-    <string name="MyLocation">Minha localização</string>
     <string name="Map">Mapa</string>
     <string name="Satellite">Satélite</string>
     <string name="Hybrid">Híbrido</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Galeria</string>
     <string name="AllPhotos">Todas as Fotos</string>
     <string name="NoPhotos">Ainda não há fotos</string>
+    <string name="PleaseDownload">Baixar o vídeo primeiro</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacidade e Segurança</string>
+    <string name="PrivacyTitle">Privacidade</string>
+    <string name="PrivacyLastSeen">Último Acesso</string>
+    <string name="LastSeenEverybody">Todos</string>
+    <string name="LastSeenContacts">Meus Contatos</string>
+    <string name="LastSeenNobody">Nenhum</string>
+    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
+    <string name="LastSeenContactsPlus">Meus Contatos (+%1$d)</string>
+    <string name="LastSeenContactsMinus">Meus Contatos (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">Meus Contatos (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Nenhum (+%1$d)</string>
+    <string name="SecurityTitle">Segurança</string>
+    <string name="DeleteAccountTitle">Auto-destruição da conta</string>
+    <string name="DeleteAccountIfAwayFor">Se você estiver inativo por</string>
+    <string name="DeleteAccountHelp">Se você não acessar sua conta ao menos uma vez neste período, sua conta será excluída com seus grupos, mensagens e contatos.</string>
+    <string name="DeleteAccountNowConfirmation">Excluir sua conta?</string>
+    <string name="LastSeenHelp">Alterar quem pode ver o seu Último Acesso.</string>
+    <string name="LastSeenTitle">Quem pode ver o seu Último Acesso?</string>
+    <string name="AddExceptions">Adicionar exceções</string>
+    <string name="CustomHelp">Importante: você não será capaz de ver quando foi o Último Acesso para as pessoas com quem você não compartilha quando foi seu Último Acesso. Você visualizará a última vez visto aproximada. (recentemente, dentro de uma semana, dentro de um mês).</string>
+    <string name="AlwaysShareWith">Sempre Mostrar Para</string>
+    <string name="NeverShareWith">Nunca Mostrar Para</string>
+    <string name="CustomShareSettingsHelp">Estas configurações irão substituir os valores anteriores.</string>
+    <string name="AlwaysShareWithTitle">Sempre Mostrar</string>
+    <string name="AlwaysShareWithPlaceholder">Sempre mostrar para usuários...</string>
+    <string name="NeverShareWithTitle">Nunca Mostrar</string>
+    <string name="NeverShareWithPlaceholder">Nunca mostrar para usuários...</string>
+    <string name="EmpryUsersPlaceholder">Adicionar Usuários</string>
+    <string name="PrivacyFloodControlError">Desculpe, muitas solicitações. Impossível alterar os ajustes de privacidade agora, por favor aguarde.</string>
+    <string name="ClearOtherSessionsHelp">Sair de todos os dispositivos, exceto este.</string>
+    <string name="RemoveFromListText">Toque e segure no usuário para deletar.</string>
     <!--edit video view-->
     <string name="EditVideo">Editar Vídeo</string>
     <string name="OriginalVideo">Vídeo Original</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">Câmera</string>
     <string name="FromGalley">Galeria</string>
     <string name="DeletePhoto">Apagar foto</string>
-    <string name="OpenPhoto"> Abrir foto</string>
     <string name="Set">Aplicar</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddContactQ">Adicionar contato?</string>
     <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero de últimas mensagens para encaminhar:</string>
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
-    <string name="DeleteChatQuestion">Apagar esta conversa?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
-    <string name="AreYouSureLogout">Você tem certeza que deseja sair?</string>
+    <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
     <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
     <string name="AreYouSureDeleteAndExit">Você tem certeza que deseja deletar e sair do grupo?</string>
     <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja deletar esta conversa?</string>
@@ -387,11 +400,13 @@
     <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
     <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
     <string name="AreYouSureDeleteContact">Você tem certeza que deseja deletar este contato?</string>
-    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar uma conversa secreta?</string>
-    <string name="ForwardFromMyName">encaminhar pelo meu nome</string>
+    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar um chat secreto?</string>
+    <string name="AreYouSureRegistration">Você tem certeza que deseja cancelar o registro?</string>
+    <string name="AreYouSureClearHistory">Você tem certeza que deseja limpar o histórico?</string>
+    <string name="AreYouSureDeleteMessages">Você tem certeza que deseja deletar %1$s?</string>
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
     <!--Intro view-->
     <string name="Page1Title">Telegram</string>
     <string name="Page2Title">Rápido</string>
@@ -400,13 +415,13 @@
     <string name="Page5Title">Poderoso</string>
     <string name="Page6Title">Baseado na nuvem</string>
     <string name="Page7Title">Privado</string>
-    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do<![CDATA[<br/>]]>mundo. É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido que<![CDATA[<br/>]]>qualquer outro aplicativo.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantém suas mensagens seguras<![CDATA[<br/>]]>contra ataques de hackers.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
+    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do mundo. <![CDATA[<br/>]]>É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
+    <string name="Page2Message">O <![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido<![CDATA[<br/>]]>que qualquer outro aplicativo.</string>
+    <string name="Page3Message">O <![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
+    <string name="Page4Message">O <![CDATA[<b>Telegram</b>]]> mantém suas mensagens<![CDATA[<br/>]]>seguras de ataques de hackers.</string>
+    <string name="Page5Message">O <![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
+    <string name="Page6Message">O <![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
+    <string name="Page7Message">O <![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
     <string name="StartMessaging">Comece a conversar</string>
     <!--plural-->
     <string name="Online_zero">%1$d online</string>
@@ -475,12 +490,30 @@
     <string name="Weeks_few">%1$d semanas</string>
     <string name="Weeks_many">%1$d semanas</string>
     <string name="Weeks_other">%1$d semanas</string>
+    <string name="Months_zero">%1$d meses</string>
+    <string name="Months_one">%1$d mês</string>
+    <string name="Months_two">%1$d meses</string>
+    <string name="Months_few">%1$d meses</string>
+    <string name="Months_many">%1$d meses</string>
+    <string name="Months_other">%1$d meses</string>
+    <string name="Years_zero">%1$d anos</string>
+    <string name="Years_one">%1$d ano</string>
+    <string name="Years_two">%1$d anos</string>
+    <string name="Years_few">%1$d anos</string>
+    <string name="Years_many">%1$d anos</string>
+    <string name="Years_other">%1$d anos</string>
+    <string name="Users_zero">%1$d usuários</string>
+    <string name="Users_one">%1$d usuário</string>
+    <string name="Users_two">%1$d usuários</string>
+    <string name="Users_few">%1$d usuários</string>
+    <string name="Users_many">%1$d usuários</string>
+    <string name="Users_other">%1$d usuários</string>
     <!--date formatters-->
     <string name="formatterMonth">dd MMM</string>
     <string name="formatterYear">dd.MM.yy</string>
     <string name="formatterYearMax">dd.MM.yyyy</string>
     <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">MMMM d, yyyy</string>
+    <string name="chatFullDate">d MMMM, yyyy</string>
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index bf6a19182..87fc512cb 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -16,6 +16,8 @@
         <item name="android:colorBackground">@android:color/white</item>
         <item name="android:windowBackground">@android:color/white</item>
         <item name="android:windowContentOverlay">@null</item>
+        <item name="android:colorPrimaryDark">#435e7e</item>
+        <item name="android:colorPrimary">#54759e</item>
     </style>
 
     <style name="Theme.TMessages" parent="@android:style/Theme.Material.Light">
@@ -30,6 +32,10 @@
         <item name="android:listChoiceBackgroundIndicator">@drawable/list_selector</item>
         <item name="android:editTextStyle">@style/Theme.TMessages.EditText</item>
         <item name="android:actionBarItemBackground">@drawable/bar_selector_style</item>
+        <item name="android:colorPrimaryDark">#33000000</item>
+        <item name="android:colorPrimary">#54759e</item>
+        <item name="android:alertDialogTheme">@style/Theme.TMessages.Dialog.Alert</item>
+        <item name="android:colorControlActivated">#4d83b3</item>
     </style>
 
     <style name="Theme.TMessages.PopupNotification" parent="Theme.TMessages">
@@ -40,6 +46,10 @@
         <item name="android:windowNoTitle">true</item>
     </style>
 
+    <style name="Theme.TMessages.Dialog.Alert" parent="android:style/Theme.Material.Light.Dialog.Alert">
+        <item name="android:colorAccent">#4d83b3</item>
+    </style>
+
     <!--ACTION BAR-->
 
     <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Material.Light.ActionBar">
@@ -49,12 +59,18 @@
     </style>
 
     <!--ACTION BAR ITEMS-->
-
-    <style name="ActionBar.Transparent.TMessages.Item" parent="@android:TextAppearance.Widget.IconMenu.Item">
+    
+    <style name="ActionBar.Transparent.TMessages.Item" parent="android:TextAppearance.Widget.IconMenu.Item">
         <item name="android:textColor">#000000</item>
         <item name="android:textSize">18sp</item>
     </style>
 
+    <!--BORDERLESS BUTTON-->
+
+    <style name="Theme.TMessages.BorderLessButton" parent="android:Widget.Material.Light.ButtonBar.AlertDialog">
+        <item name="android:textColor">#54759e</item>
+    </style>
+
     <!--LIST VIEW-->
 
     <style name="Theme.TMessages.ListView" parent="@android:style/Widget.Material.Light.ListView">
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index 3636d32c2..9b1c746d2 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -1,9 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="background_tab_pressed">#6633B5E5</color>
-    <color name="chat_background_color">#ffd6e4ef</color>
-    <color name="gallery_background_color">#ff000000</color>
-    <color name="settings_background_color">#ffffffff</color>
     <color name="divider">#dcdcdc</color>
     <color name="header">#ff54759e</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/dimens.xml b/TMessagesProj/src/main/res/values/dimens.xml
deleted file mode 100644
index 47c822467..000000000
--- a/TMessagesProj/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-</resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 9a1f28a53..738f4bf9f 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<!--Translated by Telegram Team, corrected by Florian Keller-->
+
 
 <resources>
     <string name="AppName">Telegram</string>
@@ -9,7 +9,7 @@
     <string name="LanguageCode">en</string>
     <!--signin view-->
     <string name="YourPhone">Your phone</string>
-    <string name="StartText">Please confirm your country code\nand enter your phone number.</string>
+    <string name="StartText">Please confirm your country code and enter your phone number.</string>
     <string name="ChooseCountry">Choose a country</string>
     <string name="WrongCountry">Wrong country code</string>
     <!--code enter view-->
@@ -28,16 +28,13 @@
     <string name="LastName">Last name (optional)</string>
     <string name="CancelRegistration">Cancel registration</string>
     <!--chats view-->
-    <string name="Chats">Chats</string>
-    <string name="Search">Search</string>
-    <string name="NewMessages">New messages</string>
     <string name="Settings">Settings</string>
     <string name="Contacts">Contacts</string>
     <string name="NewGroup">New Group</string>
     <string name="Yesterday">yesterday</string>
     <string name="NoResult">No results</string>
     <string name="NoChats">No chats yet...</string>
-    <string name="NoChatsHelp">Start messaging by pressing the\ncompose button in the top right corner\nor tap the menu button for more options.</string>
+    <string name="NoChatsHelp">Start messaging by pressing the\nnew message button in the bottom right corner\nor tap the menu button for more options.</string>
     <string name="WaitingForNetwork">Waiting for network...</string>
     <string name="Connecting">Connecting...</string>
     <string name="Updating">Updating...</string>
@@ -47,20 +44,19 @@
     <string name="EncryptionProcessing">Exchanging encryption keys...</string>
     <string name="EncryptedChatStartedOutgoing">%s joined your secret chat.</string>
     <string name="EncryptedChatStartedIncoming">You joined the secret chat.</string>
-    <string name="ClearHistory">Clear History</string>
+    <string name="ClearHistory">Clear history</string>
     <string name="DeleteChat">Delete and exit</string>
-    <string name="HiddenName">Hidden Name</string>
+    <string name="DeleteChatUser">Delete chat</string>
+    <string name="HiddenName">Deleted Account</string>
     <string name="SelectChat">Select Chat</string>
     <string name="PhotoTip">Tap and hold to view</string>
     <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
-    <string name="SearchConversations">CONVERSATIONS</string>
     <string name="SearchMessages">MESSAGES</string>
     <!--broadcasts-->
-    <string name="BroadcastList">Broadcast List</string>
     <string name="NewBroadcastList">New Broadcast List</string>
     <string name="EnterListName">Enter list name</string>
     <string name="YouCreatedBroadcastList">You created a broadcast list</string>
-    <string name="AddRecipient">Add Recipient</string>
+    <string name="AddRecipient">Add recipient</string>
     <string name="KickFromBroadcast">Remove from broadcast list</string>
     <!--documents view-->
     <string name="SelectFile">Select File</string>
@@ -75,10 +71,10 @@
     <string name="ExternalStorage">External Storage</string>
     <string name="SystemRoot">System Root</string>
     <string name="SdCard">SD Card</string>
+    <string name="Folder">Folder</string>
     <!--chat view-->
     <string name="Invisible">invisible</string>
     <string name="Typing">typing...</string>
-    <string name="Attach">Attach</string>
     <string name="IsTyping">is typing...</string>
     <string name="AreTyping">are typing...</string>
     <string name="GotAQuestion">Got a question\nabout Telegram?</string>
@@ -88,18 +84,13 @@
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Document</string>
     <string name="NoMessages">No messages here yet...</string>
-    <string name="ViewPhoto">View Photo</string>
-    <string name="ViewLocation">View Location</string>
-    <string name="ViewVideo">Play Video</string>
     <string name="ForwardedMessage">Forwarded message</string>
     <string name="From">From</string>
     <string name="NoRecent">No recent</string>
     <string name="Message">Message</string>
-    <string name="TypeMessage">Type message</string>
-    <string name="DOWNLOAD">Download</string>
-    <string name="Selected">Selected: %d</string>
-    <string name="ShareMyContactInfo">SHARE MY CONTACT INFO</string>
-    <string name="AddToContacts">ADD TO CONTACTS</string>
+    <string name="TypeMessage">Message</string>
+    <string name="ShareMyContactInfo">Share my contact</string>
+    <string name="AddToContacts">Add to contacts</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s invited you to join a secret chat.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">You have invited %s to join a secret chat.</string>
     <string name="EncryptedDescriptionTitle">Secret chats:</string>
@@ -116,8 +107,6 @@
     <string name="ApplyLocalizationFile">Apply localization file</string>
     <string name="UnsupportedAttachment">Unsupported attachment</string>
     <!--notification-->
-    <string name="EncryptedChatRequested">Secret chat requested</string>
-    <string name="EncryptedChatAccepted">Secret chat started</string>
     <string name="MessageLifetimeChanged">%1$s set the self-destruct timer to %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">You set the self-destruct timer to %1$s</string>
     <string name="MessageLifetimeRemoved">%1$s disabled the self-destruct timer</string>
@@ -160,23 +149,23 @@
     <string name="TodayAt">today at</string>
     <string name="YesterdayAt">yesterday at</string>
     <string name="Online">online</string>
-    <string name="Offline">offline</string>
     <string name="LastSeen">last seen</string>
     <string name="LastSeenDate">last seen</string>
     <string name="InviteFriends">Invite Friends</string>
     <string name="GlobalSearch">GLOBAL SEARCH</string>
+    <string name="Lately">last seen recently</string>
+    <string name="WithinAWeek">last seen within a week</string>
+    <string name="WithinAMonth">last seen within a month</string>
+    <string name="ALongTimeAgo">last seen a long time ago</string>
+    <string name="NewMessageTitle">New Message</string>
     <!--group create view-->
     <string name="SendMessageTo">Send message to...</string>
     <string name="EnterGroupNamePlaceholder">Enter group name</string>
     <string name="GroupName">Group name</string>
-    <string name="AllContacts">ALL CONTACTS</string>
     <string name="MembersCount">%1$d/%2$d members</string>
     <!--group info view-->
-    <string name="EnterGroupNameTitle">ENTER GROUP NAME</string>
     <string name="SharedMedia">Shared Media</string>
-    <string name="GroupInfo">Group Info</string>
-    <string name="SHAREDMEDIA">SHARED MEDIA</string>
-    <string name="SETTINGS">SETTINGS</string>
+    <string name="SETTINGS">Settings</string>
     <string name="AddMember">Add member</string>
     <string name="DeleteAndExit">Delete and leave group</string>
     <string name="Notifications">Notifications</string>
@@ -184,25 +173,23 @@
     <!--contact info view-->
     <string name="ShareContact">Share</string>
     <string name="AddContact">Add</string>
+    <string name="AddContactTitle">Add contact</string>
     <string name="BlockContact">Block</string>
     <string name="EditContact">Edit</string>
     <string name="DeleteContact">Delete</string>
-    <string name="PhoneHome">HOME</string>
-    <string name="PhoneMobile">MOBILE</string>
-    <string name="PhoneWork">WORK</string>
-    <string name="PhoneOther">OTHER</string>
-    <string name="PhoneMain">MAIN</string>
-    <string name="ContactInfo">Contact Info</string>
-    <string name="PHONE">PHONE</string>
+    <string name="PhoneHome">Home</string>
+    <string name="PhoneMobile">Mobile</string>
+    <string name="PhoneWork">Work</string>
+    <string name="PhoneOther">Other</string>
+    <string name="PhoneMain">Main</string>
     <string name="StartEncryptedChat">Start Secret Chat</string>
     <string name="CreateEncryptedChatError">An error occurred.</string>
-    <string name="SecretTitle">Secret Chat</string>
     <string name="EncryptionKey">Encryption Key</string>
     <string name="MessageLifetime">Self-Destruct Timer</string>
     <string name="ShortMessageLifetimeForever">Off</string>
     <string name="EncryptionKeyDescription">This image is a visualization of the encryption key for this secret chat with <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>If this image looks the same on <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> phone, your chat is 200%% secure.<![CDATA[<br><br>]]>Learn more at telegram.org</string>
     <string name="NumberUnknown">Unknown</string>
-    <string name="Info">INFO</string>
+    <string name="Info">Info</string>
     <string name="Phone">Phone</string>
     <!--usernames-->
     <string name="Username">Username</string>
@@ -226,32 +213,30 @@
     <string name="Unblock">Unblock</string>
     <string name="UnblockText">Tap and hold on user to unblock.</string>
     <string name="NoBlocked">No blocked users yet</string>
-    <string name="MessageNotifications">MESSAGE NOTIFICATIONS</string>
+    <string name="MessageNotifications">Message notifications</string>
     <string name="Alert">Alert</string>
     <string name="MessagePreview">Message Preview</string>
-    <string name="GroupNotifications">GROUP NOTIFICATIONS</string>
+    <string name="GroupNotifications">Group notifications</string>
     <string name="Sound">Sound</string>
-    <string name="InAppNotifications">IN-APP NOTIFICATIONS</string>
+    <string name="InAppNotifications">In-app notifications</string>
     <string name="InAppSounds">In-App Sounds</string>
     <string name="InAppVibrate">In-App Vibrate</string>
     <string name="Vibrate">Vibrate</string>
     <string name="InAppPreview">In-App Preview</string>
-    <string name="Reset">RESET</string>
+    <string name="Reset">Reset</string>
     <string name="ResetAllNotifications">Reset All Notifications</string>
     <string name="UndoAllCustom">Undo all custom notification settings for all your contacts and groups</string>
     <string name="NotificationsAndSounds">Notifications and Sounds</string>
     <string name="BlockedUsers">Blocked Users</string>
-    <string name="SaveIncomingPhotos">Save Incoming Photos</string>
-    <string name="LogOut">Log Out</string>
-    <string name="YourFirstNameAndLastName">YOUR FIRST AND LAST NAME</string>
+    <string name="LogOut">Log out</string>
     <string name="NoSound">No sound</string>
     <string name="Default">Default</string>
-    <string name="Support">SUPPORT</string>
+    <string name="Support">Support</string>
     <string name="ChatBackground">Chat Background</string>
-    <string name="MessagesSettings">MESSAGES</string>
+    <string name="MessagesSettings">Messages</string>
     <string name="SendByEnter">Send by Enter</string>
     <string name="TerminateAllSessions">Terminate All Other Sessions</string>
-    <string name="Events">EVENTS</string>
+    <string name="Events">Events</string>
     <string name="ContactJoined">Contact joined Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Language</string>
@@ -267,7 +252,6 @@
     <string name="NotificationsServiceDisableInfo">If Google Play Services are enough for you to receive notifications, you can disable Notifications Service. However we recommend you to leave it enabled to keep app running in background and receive instant notifications.</string>
     <string name="SortBy">Sort By</string>
     <string name="ImportContacts">Import Contacts</string>
-    <string name="WiFiOnly">Via WiFi only</string>
     <string name="SortFirstName">First name</string>
     <string name="SortLastName">Last name</string>
     <string name="LedColor">LED Color</string>
@@ -281,17 +265,16 @@
     <string name="Long">Long</string>
     <string name="SystemDefault">System default</string>
     <string name="SettingsDefault">Settings default</string>
-    <string name="AutomaticMediaDownload">AUTOMATIC MEDIA DOWNLOAD</string>
+    <string name="AutomaticMediaDownload">Automatic media download</string>
     <string name="WhenUsingMobileData">When using mobile data</string>
     <string name="WhenConnectedOnWiFi">When connected on Wi-Fi</string>
     <string name="WhenRoaming">When roaming</string>
     <string name="NoMediaAutoDownload">No media</string>
     <string name="SaveToGallerySettings">Save to gallery</string>
+    <string name="EditName">Edit name</string>
     <!--media view-->
     <string name="NoMedia">No shared media yet</string>
-    <string name="CancelDownload">Cancel Download</string>
     <!--map view-->
-    <string name="MyLocation">My location</string>
     <string name="Map">Map</string>
     <string name="Satellite">Satellite</string>
     <string name="Hybrid">Hybrid</string>
@@ -306,6 +289,39 @@
     <string name="Gallery">Gallery</string>
     <string name="AllPhotos">All Photos</string>
     <string name="NoPhotos">No photos yet</string>
+    <string name="PleaseDownload">Please download media first</string>
+    <!--privacy settings-->
+    <string name="PrivacySettings">Privacy and Security</string>
+    <string name="PrivacyTitle">Privacy</string>
+    <string name="PrivacyLastSeen">Last Seen</string>
+    <string name="LastSeenEverybody">Everybody</string>
+    <string name="LastSeenContacts">My Contacts</string>
+    <string name="LastSeenNobody">Nobody</string>
+    <string name="LastSeenEverybodyMinus">Everybody (-%1$d)</string>
+    <string name="LastSeenContactsPlus">My Contacts (+%1$d)</string>
+    <string name="LastSeenContactsMinus">My Contacts (-%1$d)</string>
+    <string name="LastSeenContactsMinusPlus">My Contacts (-%1$d, +%2$d)</string>
+    <string name="LastSeenNobodyPlus">Nobody (+%1$d)</string>
+    <string name="SecurityTitle">Security</string>
+    <string name="DeleteAccountTitle">Account self-destructs</string>
+    <string name="DeleteAccountIfAwayFor">If you\'re away for</string>
+    <string name="DeleteAccountHelp">If you do not log in at least once within this period, your account will be deleted along with all groups, messages and contacts.</string>
+    <string name="DeleteAccountNowConfirmation">Delete your account?</string>
+    <string name="LastSeenHelp">Change who can see your Last Seen time.</string>
+    <string name="LastSeenTitle">Who can see your Last Seen time?</string>
+    <string name="AddExceptions">Add exceptions</string>
+    <string name="CustomHelp">Important: you won\'t be able to see Last Seen times for people with whom you don\'t share your Last Seen time. Approximate last seen will be shown instead (recently, within a week, within a month).</string>
+    <string name="AlwaysShareWith">Always Share With</string>
+    <string name="NeverShareWith">Never Share With</string>
+    <string name="CustomShareSettingsHelp">These settings will override the values above.</string>
+    <string name="AlwaysShareWithTitle">Always Share</string>
+    <string name="AlwaysShareWithPlaceholder">Always share with users...</string>
+    <string name="NeverShareWithTitle">Never Share</string>
+    <string name="NeverShareWithPlaceholder">Never share with users...</string>
+    <string name="EmpryUsersPlaceholder">Add Users</string>
+    <string name="PrivacyFloodControlError">Sorry, too many requests. Unable to change privacy settings now, please wait.</string>
+    <string name="ClearOtherSessionsHelp">Logs out all devices except for this one.</string>
+    <string name="RemoveFromListText">Tap and hold on user to delete.</string>
     <!--edit video view-->
     <string name="EditVideo">Edit Video</string>
     <string name="OriginalVideo">Original Video</string>
@@ -331,7 +347,6 @@
     <string name="FromCamera">From camera</string>
     <string name="FromGalley">From gallery</string>
     <string name="DeletePhoto">Delete photo</string>
-    <string name="OpenPhoto">Open photo</string>
     <string name="Set">Set</string>
     <string name="OK">OK</string>
     <!--messages-->
@@ -374,12 +389,10 @@
     <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
     <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
     <string name="AreYouSure">Are you sure?</string>
-    <string name="AddContactQ">Add contact?</string>
     <string name="AddToTheGroup">Add %1$s to the group?\n\nNumber of last messages to forward:</string>
     <string name="ForwardMessagesTo">Forward messages to %1$s?</string>
-    <string name="DeleteChatQuestion">Delete this chat?</string>
     <string name="SendMessagesTo">Send messages to %1$s?</string>
-    <string name="AreYouSureLogout">Are you sure you want to log out?</string>
+    <string name="AreYouSureLogout">Are you sure you want to log out?\n\nNote that you can seamlessly use Telegram on all your devices at once.\n\nRemember, logging out kills all your Secret Chats.</string>
     <string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
     <string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave the group?</string>
     <string name="AreYouSureDeleteThisChat">Are you sure you want to delete this chat?</string>
@@ -388,7 +401,9 @@
     <string name="AreYouSureUnblockContact">Are you sure you want to unblock this contact?</string>
     <string name="AreYouSureDeleteContact">Are you sure you want to delete this contact?</string>
     <string name="AreYouSureSecretChat">Are you sure you want to start a secret chat?</string>
-    <string name="ForwardFromMyName">forward from my name</string>
+    <string name="AreYouSureRegistration">Are you sure you want to cancel registration?</string>
+    <string name="AreYouSureClearHistory">Are you sure you want to clear history?</string>
+    <string name="AreYouSureDeleteMessages">Are you sure you want to delete %1$s?</string>
     <string name="SendMessagesToGroup">Send messages to %1$s?</string>
     <string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
     <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
@@ -475,6 +490,24 @@
     <string name="Weeks_few">%1$d weeks</string>
     <string name="Weeks_many">%1$d weeks</string>
     <string name="Weeks_other">%1$d weeks</string>
+    <string name="Months_zero">%1$d months</string>
+    <string name="Months_one">%1$d month</string>
+    <string name="Months_two">%1$d months</string>
+    <string name="Months_few">%1$d months</string>
+    <string name="Months_many">%1$d months</string>
+    <string name="Months_other">%1$d months</string>
+    <string name="Years_zero">%1$d years</string>
+    <string name="Years_one">%1$d year</string>
+    <string name="Years_two">%1$d years</string>
+    <string name="Years_few">%1$d years</string>
+    <string name="Years_many">%1$d years</string>
+    <string name="Years_other">%1$d years</string>
+    <string name="Users_zero">%1$d users</string>
+    <string name="Users_one">%1$d user</string>
+    <string name="Users_two">%1$d users</string>
+    <string name="Users_few">%1$d users</string>
+    <string name="Users_many">%1$d users</string>
+    <string name="Users_other">%1$d users</string>
     <!--date formatters-->
     <string name="formatterMonth">MMM dd</string>
     <string name="formatterYear">dd.MM.yy</string>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index d3f110e3b..bf12e881b 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -32,6 +32,13 @@
         <item name="android:windowNoTitle">true</item>
     </style>
 
+    <!-- POPUP -->
+
+    <style name="PopupAnimation" parent="android:Animation" mce_bogus="1">
+        <item name="android:windowEnterAnimation">@anim/popup_in</item>
+        <item name="android:windowExitAnimation">@anim/popup_out</item>
+    </style>
+
     <!--ACTION BAR-->
 
     <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
@@ -42,7 +49,7 @@
 
     <!--ACTION BAR ITEMS-->
 
-    <style name="ActionBar.Transparent.TMessages.Item" parent="@android:TextAppearance.Widget.IconMenu.Item">
+    <style name="ActionBar.Transparent.TMessages.Item" parent="android:TextAppearance.Widget.IconMenu.Item">
         <item name="android:textColor">#000000</item>
         <item name="android:textSize">18sp</item>
     </style>
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 02f81d823..f703ec03b 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Sat Nov 01 01:17:23 EDT 2014
+#Mon Nov 03 14:19:12 MSK 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
