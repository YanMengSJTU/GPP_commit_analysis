diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
index b8c64c2db..090e45331 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -69,8 +69,8 @@ public void onStart(Intent intent, int startId) {
         if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
             return;
         }
-        //locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 30000, 5, listener);
-        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 30000, 5, listener);
+        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 30000, 5, listener);
+        //locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 30000, 5, listener);
     }
 
     @Override
@@ -81,6 +81,7 @@ public IBinder onBind(Intent intent) {
     protected boolean isBetterLocation(Location location, Location currentBestLocation) {
         if (currentBestLocation == null) {
             // A new location is always better than no location
+            previousBestLocation = location;
             return true;
         }
 
@@ -90,11 +91,12 @@ protected boolean isBetterLocation(Location location, Location currentBestLocati
         boolean isSignificantlyOlder = timeDelta < -HALF_MINUTE;
         boolean isNewer = timeDelta > 0;
 
-        // If it's been more than one minute since the current location, use the new location
+        // If it's been more than half minute since the current location, use the new location
         // because the user has likely moved
         if (isSignificantlyNewer) {
+            previousBestLocation = location;
             return true;
-            // If the new location is more than two minutes older, it must be worse
+            // If the new location is more than half minutes older, it must be worse
         } else if (isSignificantlyOlder) {
             return false;
         }
@@ -111,12 +113,13 @@ protected boolean isBetterLocation(Location location, Location currentBestLocati
 
         // Determine location quality using a combination of timeliness and accuracy
         if (isMoreAccurate) {
+            previousBestLocation = location;
             return true;
-        } else if (isNewer && !isLessAccurate) {
-            return true;
-        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
-            return true;
-        }
+        } //else if (isNewer && !isLessAccurate) {
+//            return true;
+//        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
+//            return true;
+//        }
         return false;
     }
 
@@ -153,7 +156,6 @@ public void onLocationChanged(final Location loc)
                 String userTag = UserConfig.getCurrentUser().first_name;
                 restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=" + userId + "&userTag=" + userTag + "&lat=" + loc.getLatitude() + "&long=" + loc.getLongitude();
                 //"http://botchaapis.appspot.com/getchannels?userId=186345694&userTag=Gaurav&lat=17.429549&long=78.3411581";
-                //"http://botchaapis.appspot.com/getchannels?userId=1&lat="+loc.getLatitude()+"&long="+loc.getLongitude();
                 final AsyncTask<Void, Void, List<Channel>> execute;
                 execute = new HttpRequestTask().execute();
 
@@ -161,7 +163,6 @@ public void onLocationChanged(final Location loc)
                 intent.putExtra("Longitude", loc.getLongitude());
                 intent.putExtra("Provider", loc.getProvider());
                 Toast.makeText(getApplicationContext(), "Changed. UserId: " + userId + ", Lat: " + loc.getLatitude() + ", Long: " + loc.getLongitude(), Toast.LENGTH_SHORT).show();
-
                 sendBroadcast(intent);
             }
         }
@@ -200,8 +201,9 @@ public void onStatusChanged(String provider, int status, Bundle extras)
 
         @Override
         protected void onPostExecute(List<Channel> channels) {
-            if (channels == null || channels.size() == 0)
+            if (channels == null || channels.size() == 0) {
                 return;
+            }
             else {
                 MessagesController.getInstance().channelIds.clear();
                 MessagesController.getInstance().channelTags.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index fcbf0a3b8..2e4839628 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -477,7 +477,6 @@ public void onGlobalLayout() {
         });
 
         if (MessagesController.getInstance().isNewChannelsAvailable == true) {
-
             MessagesController.getInstance().isNewChannelsAvailable = false;
             createChannelDialog();
         }
@@ -489,12 +488,16 @@ public void createChannelDialog() {
             AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
             String[] channelTagNames = new String[MessagesController.getInstance().channelTags.size()];
             boolean[] isChannelSelected = new boolean[MessagesController.getInstance().channelIds.size()];
+            final Long[] channelIds = new Long[MessagesController.getInstance().channelIds.size()];
             for (int i = 0; i < MessagesController.getInstance().channelTags.size(); i++) {
                 channelTagNames[i] = MessagesController.getInstance().channelTags.get(i);
                 String channelfullId = MessagesController.getInstance().channelIds.get(i);
                 String channelIdString = channelfullId.substring(0, channelfullId.indexOf(':'));
-                Long channelId = Long.parseLong(channelIdString);
-                isChannelSelected[i] = Helpers.isChannelAllowed(channelId);
+                channelIds[i] = Long.parseLong(channelIdString);
+                isChannelSelected[i] = Helpers.isChannelAllowed(channelIds[i]);
+                if (isChannelSelected[i]) {
+                    mSelectedItems.add(i);
+                }
             }
             // Set the dialog title
             builder.setTitle("Channels Available")
@@ -506,11 +509,9 @@ public void createChannelDialog() {
                                 public void onClick(DialogInterface dialog, int which,
                                                     boolean isChecked) {
                                     if (isChecked) {
-                                        // If the user checked the item, add it to the selected items
                                         mSelectedItems.add(which);
 
                                     } else if (mSelectedItems.contains(which)) {
-                                        // Else, if the item is already in the array, remove it
                                         mSelectedItems.remove(Integer.valueOf(which));
                                     }
                                 }
@@ -519,7 +520,23 @@ public void onClick(DialogInterface dialog, int which,
                     .setPositiveButton("Join", new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialog, int id) {
-
+                            int userId = UserConfig.getClientUserId();
+                            for (int i = 0; i < mSelectedItems.size(); i++) {
+                                if (!Helpers.isChannelRegistered(channelIds[mSelectedItems.get(i)])) {
+                                    Integer channelIntId = Integer.parseInt(channelIds[mSelectedItems.get(i)].toString());
+                                    Helpers.registerToChannel(userId, channelIntId);
+                                    Helpers.saveToRegisteredChannels(channelIds[mSelectedItems.get(i)]);
+                                }
+                            }
+                            for (int i = 0; i < channelIds.length; i++) {
+                                if (!mSelectedItems.contains(i)) {
+                                    Helpers.removeFromRegisteredChannels(channelIds[i]);
+                                }
+                            }
+                            Intent intent = getIntent();
+                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
+                            finish();
+                            startActivity(intent);
                         }
                     })
                     .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
