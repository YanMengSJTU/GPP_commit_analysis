diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientActivity.java b/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientActivity.java
new file mode 100644
index 000000000..aa38318ed
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientActivity.java
@@ -0,0 +1,19 @@
+/*
+ * This is the source code of Telegram for Android v. 5.x.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2018.
+ */
+
+package org.telegram.messenger;
+
+import com.google.android.search.verification.client.SearchActionVerificationClientActivity;
+import com.google.android.search.verification.client.SearchActionVerificationClientService;
+
+public class GoogleVoiceClientActivity extends SearchActionVerificationClientActivity {
+
+    public Class<? extends SearchActionVerificationClientService> getServiceClass() {
+        return GoogleVoiceClientService.class;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientService.java
new file mode 100644
index 000000000..03fb72604
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GoogleVoiceClientService.java
@@ -0,0 +1,55 @@
+/*
+ * This is the source code of Telegram for Android v. 5.x.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2018.
+ */
+
+package org.telegram.messenger;
+
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.google.android.search.verification.client.SearchActionVerificationClientService;
+
+import org.telegram.tgnet.TLRPC;
+
+public class GoogleVoiceClientService extends SearchActionVerificationClientService {
+
+    @Override
+    public boolean performAction(final Intent intent, boolean isVerified, Bundle options) {
+        if (isVerified) {
+            AndroidUtilities.runOnUIThread(() -> {
+                try {
+                    int currentAccount = UserConfig.selectedAccount;
+                    ApplicationLoader.postInitApplication();
+                    if (AndroidUtilities.needShowPasscode(false) || SharedConfig.isWaitingForPasscodeEnter) {
+                        return;
+                    }
+                    String text = intent.getStringExtra("android.intent.extra.TEXT");
+                    String contactUri = intent.getStringExtra("com.google.android.voicesearch.extra.RECIPIENT_CONTACT_URI");
+                    if (text != null && text.length() > 0) {
+                        String id = intent.getStringExtra("com.google.android.voicesearch.extra.RECIPIENT_CONTACT_CHAT_ID");
+                        int uid = Integer.parseInt(id);
+                        TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(uid);
+                        if (user == null) {
+                            user = MessagesStorage.getInstance(currentAccount).getUserSync(uid);
+                            if (user != null) {
+                                MessagesController.getInstance(currentAccount).putUser(user, true);
+                            }
+                        }
+                        if (user != null) {
+                            ContactsController.getInstance(currentAccount).markAsContacted(contactUri);
+                            SendMessagesHelper.getInstance(currentAccount).sendMessage(text, user.id, null, null, true, null, null, null, true, 0);
+                        }
+                    }
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+            });
+            return true;
+        }
+        return false;
+    }
+}
