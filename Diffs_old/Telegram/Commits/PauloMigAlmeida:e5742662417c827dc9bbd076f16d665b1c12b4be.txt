diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 1860a397b..2009a4e29 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -46,6 +46,8 @@
 import android.provider.MediaStore;
 import android.view.View;
 
+import com.finger2view.messenger.support.util.BiometryController;
+
 import org.telegram.messenger.audioinfo.AudioInfo;
 import org.telegram.messenger.query.SharedMediaQuery;
 import org.telegram.messenger.video.InputSurface;
@@ -1600,83 +1602,128 @@ public boolean playAudio(MessageObject messageObject) {
             MusicPlayerService.setIgnoreAudioFocus();
         }
         clenupPlayer(true, false);
-        File file = null;
-        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
-            file = new File(messageObject.messageOwner.attachPath);
-            if (!file.exists()) {
-                file = null;
-            }
-        }
-        final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
-        if (cacheFile != null && cacheFile != file && !cacheFile.exists() && messageObject.isMusic()) {
-            FileLoader.getInstance().loadFile(messageObject.messageOwner.media.document, true, false);
-            downloadingCurrentMessage = true;
-            isPaused = false;
-            lastProgress = 0;
-            lastPlayPcm = 0;
-            audioInfo = null;
-            playingMessageObject = messageObject;
-            if (playingMessageObject.messageOwner.media.document != null) {
-                Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
-                ApplicationLoader.applicationContext.startService(intent);
+
+        if(BiometryController.getInstance().isUnlocked()){
+
+            File file = null;
+            if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
+                file = new File(messageObject.messageOwner.attachPath);
+                if (!file.exists()) {
+                    file = null;
+                }
+            }
+            final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
+            if (cacheFile != null && cacheFile != file && !cacheFile.exists() && messageObject.isMusic()) {
+                FileLoader.getInstance().loadFile(messageObject.messageOwner.media.document, true, false);
+                downloadingCurrentMessage = true;
+                isPaused = false;
+                lastProgress = 0;
+                lastPlayPcm = 0;
+                audioInfo = null;
+                playingMessageObject = messageObject;
+                if (playingMessageObject.messageOwner.media.document != null) {
+                    Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+                    ApplicationLoader.applicationContext.startService(intent);
+                } else {
+                    Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+                    ApplicationLoader.applicationContext.stopService(intent);
+                }
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
+                return true;
             } else {
-                Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
-                ApplicationLoader.applicationContext.stopService(intent);
+                downloadingCurrentMessage = false;
+            }
+            if (messageObject.isMusic()) {
+                checkIsNextMusicFileDownloaded();
             }
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
-            return true;
-        } else {
-            downloadingCurrentMessage = false;
-        }
-        if (messageObject.isMusic()) {
-            checkIsNextMusicFileDownloaded();
-        }
 
-        if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
-            playlist.clear();
-            shuffledPlaylist.clear();
-            synchronized (playerObjectSync) {
-                try {
-                    ignoreFirstProgress = 3;
-                    final Semaphore semaphore = new Semaphore(0);
-                    final Boolean[] result = new Boolean[1];
-                    fileDecodingQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            result[0] = openOpusFile(cacheFile.getAbsolutePath()) != 0;
-                            semaphore.release();
+            if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
+                playlist.clear();
+                shuffledPlaylist.clear();
+                synchronized (playerObjectSync) {
+                    try {
+                        ignoreFirstProgress = 3;
+                        final Semaphore semaphore = new Semaphore(0);
+                        final Boolean[] result = new Boolean[1];
+                        fileDecodingQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                result[0] = openOpusFile(cacheFile.getAbsolutePath()) != 0;
+                                semaphore.release();
+                            }
+                        });
+                        semaphore.acquire();
+
+                        if (!result[0]) {
+                            return false;
                         }
-                    });
-                    semaphore.acquire();
+                        currentTotalPcmDuration = getTotalPcmDuration();
 
-                    if (!result[0]) {
-                        return false;
-                    }
-                    currentTotalPcmDuration = getTotalPcmDuration();
+                        audioTrackPlayer = new AudioTrack(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC, 48000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, playerBufferSize, AudioTrack.MODE_STREAM);
+                        audioTrackPlayer.setStereoVolume(1.0f, 1.0f);
+                        audioTrackPlayer.setPlaybackPositionUpdateListener(new AudioTrack.OnPlaybackPositionUpdateListener() {
+                            @Override
+                            public void onMarkerReached(AudioTrack audioTrack) {
+                                clenupPlayer(true, true);
+                            }
 
-                    audioTrackPlayer = new AudioTrack(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC, 48000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, playerBufferSize, AudioTrack.MODE_STREAM);
-                    audioTrackPlayer.setStereoVolume(1.0f, 1.0f);
-                    audioTrackPlayer.setPlaybackPositionUpdateListener(new AudioTrack.OnPlaybackPositionUpdateListener() {
-                        @Override
-                        public void onMarkerReached(AudioTrack audioTrack) {
-                            clenupPlayer(true, true);
-                        }
+                            @Override
+                            public void onPeriodicNotification(AudioTrack audioTrack) {
 
+                            }
+                        });
+                        audioTrackPlayer.play();
+                        startProgressTimer();
+                        if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+                            startProximitySensor();
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        if (audioTrackPlayer != null) {
+                            audioTrackPlayer.release();
+                            audioTrackPlayer = null;
+                            isPaused = false;
+                            playingMessageObject = null;
+                            downloadingCurrentMessage = false;
+                        }
+                        return false;
+                    }
+                }
+            } else {
+                try {
+                    audioPlayer = new MediaPlayer();
+                    audioPlayer.setAudioStreamType(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC);
+                    audioPlayer.setDataSource(cacheFile.getAbsolutePath());
+                    audioPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                         @Override
-                        public void onPeriodicNotification(AudioTrack audioTrack) {
-
+                        public void onCompletion(MediaPlayer mediaPlayer) {
+                            if (!playlist.isEmpty() && playlist.size() > 1) {
+                                playNextMessage(true);
+                            } else {
+                                clenupPlayer(true, true);
+                            }
                         }
                     });
-                    audioTrackPlayer.play();
+                    audioPlayer.prepare();
+                    audioPlayer.start();
                     startProgressTimer();
                     if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+                        audioInfo = null;
+                        playlist.clear();
+                        shuffledPlaylist.clear();
                         startProximitySensor();
+                    } else {
+                        try {
+                            audioInfo = AudioInfo.getAudioInfo(cacheFile);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
-                    if (audioTrackPlayer != null) {
-                        audioTrackPlayer.release();
-                        audioTrackPlayer = null;
+                    if (audioPlayer != null) {
+                        audioPlayer.release();
+                        audioPlayer = null;
                         isPaused = false;
                         playingMessageObject = null;
                         downloadingCurrentMessage = false;
@@ -1684,11 +1731,52 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                     return false;
                 }
             }
-        } else {
+
+            isPaused = false;
+            lastProgress = 0;
+            lastPlayPcm = 0;
+            playingMessageObject = messageObject;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
+
+            if (audioPlayer != null) {
+                try {
+                    if (playingMessageObject.audioProgress != 0) {
+                        int seekTo = (int) (audioPlayer.getDuration() * playingMessageObject.audioProgress);
+                        audioPlayer.seekTo(seekTo);
+                    }
+                } catch (Exception e2) {
+                    playingMessageObject.audioProgress = 0;
+                    playingMessageObject.audioProgressSec = 0;
+                    FileLog.e("tmessages", e2);
+                }
+            } else if (audioTrackPlayer != null) {
+                if (playingMessageObject.audioProgress == 1) {
+                    playingMessageObject.audioProgress = 0;
+                }
+                fileDecodingQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
+                                lastPlayPcm = (long) (currentTotalPcmDuration * playingMessageObject.audioProgress);
+                                seekOpusFile(playingMessageObject.audioProgress);
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        synchronized (playerSync) {
+                            freePlayerBuffers.addAll(usedPlayerBuffers);
+                            usedPlayerBuffers.clear();
+                        }
+                        decodingFinished = false;
+                        checkPlayerQueue();
+                    }
+                });
+            }
+        }else{
             try {
-                audioPlayer = new MediaPlayer();
-                audioPlayer.setAudioStreamType(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC);
-                audioPlayer.setDataSource(cacheFile.getAbsolutePath());
+                audioPlayer = MediaPlayer.create(ApplicationLoader.applicationContext, R.raw.alarmsound);
+                audioPlayer.setAudioStreamType(/*useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : */AudioManager.STREAM_MUSIC);
                 audioPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                     @Override
                     public void onCompletion(MediaPlayer mediaPlayer) {
@@ -1699,23 +1787,16 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                         }
                     }
                 });
-                audioPlayer.prepare();
+//                audioPlayer.prepare();
                 audioPlayer.start();
                 startProgressTimer();
-                if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                    audioInfo = null;
-                    playlist.clear();
-                    shuffledPlaylist.clear();
-                    startProximitySensor();
-                } else {
-                    try {
-                        audioInfo = AudioInfo.getAudioInfo(cacheFile);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
+                audioInfo = null;
+                playlist.clear();
+                shuffledPlaylist.clear();
+                startProximitySensor();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
+                e.printStackTrace();
                 if (audioPlayer != null) {
                     audioPlayer.release();
                     audioPlayer = null;
@@ -1725,48 +1806,17 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                 }
                 return false;
             }
-        }
 
-        isPaused = false;
-        lastProgress = 0;
-        lastPlayPcm = 0;
-        playingMessageObject = messageObject;
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
+            isPaused = false;
+            lastProgress = 0;
+            lastPlayPcm = 0;
+            playingMessageObject = messageObject;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
 
-        if (audioPlayer != null) {
-            try {
-                if (playingMessageObject.audioProgress != 0) {
-                    int seekTo = (int) (audioPlayer.getDuration() * playingMessageObject.audioProgress);
-                    audioPlayer.seekTo(seekTo);
-                }
-            } catch (Exception e2) {
-                playingMessageObject.audioProgress = 0;
-                playingMessageObject.audioProgressSec = 0;
-                FileLog.e("tmessages", e2);
-            }
-        } else if (audioTrackPlayer != null) {
-            if (playingMessageObject.audioProgress == 1) {
-                playingMessageObject.audioProgress = 0;
+            if (audioPlayer != null) {
+                    playingMessageObject.audioProgress = 0;
+                    playingMessageObject.audioProgressSec = 0;
             }
-            fileDecodingQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
-                            lastPlayPcm = (long) (currentTotalPcmDuration * playingMessageObject.audioProgress);
-                            seekOpusFile(playingMessageObject.audioProgress);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    synchronized (playerSync) {
-                        freePlayerBuffers.addAll(usedPlayerBuffers);
-                        usedPlayerBuffers.clear();
-                    }
-                    decodingFinished = false;
-                    checkPlayerQueue();
-                }
-            });
         }
 
         if (playingMessageObject.messageOwner.media.document != null) {
diff --git a/TMessagesProj/src/main/res/raw/alarmsound.wav b/TMessagesProj/src/main/res/raw/alarmsound.wav
new file mode 100644
index 000000000..31da706e9
Binary files /dev/null and b/TMessagesProj/src/main/res/raw/alarmsound.wav differ
