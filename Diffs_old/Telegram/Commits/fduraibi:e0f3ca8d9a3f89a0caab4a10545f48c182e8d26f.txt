diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index bbfc4d219..683d05edc 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -80,7 +80,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 326
-        versionName "1.8.3"
+        versionCode 330
+        versionName "1.9.0"
     }
 }
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index 87fffeb51..7ed09eb22 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -3,12 +3,12 @@ LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 LOCAL_PRELINK_MODULE := false
 LOCAL_MODULE 	:= tmessages
-LOCAL_CFLAGS 	:= -w -std=gnu99 -O2 -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64 -DLOG_DISABLED
+LOCAL_CFLAGS 	:= -w -std=gnu99 -O2 -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
 LOCAL_CFLAGS 	+= -Drestrict='' -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA -DHAVE_LRINT -DHAVE_LRINTF -fno-math-errno
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT
 LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -O2 -funroll-loops
 #LOCAL_LDLIBS 	:= -llog
-LOCAL_LDLIBS 	:= -ljnigraphics
+LOCAL_LDLIBS 	:= -ljnigraphics -llog
 
 LOCAL_SRC_FILES     := \
 ./opus/src/opus.c \
@@ -227,6 +227,46 @@ LOCAL_SRC_FILES     += \
 ./libjpeg/jquant2.c \
 ./libjpeg/jutils.c
 
+LOCAL_SRC_FILES     += \
+./libyuv/source/compare_common.cc \
+./libyuv/source/compare_neon.cc \
+./libyuv/source/compare_posix.cc \
+./libyuv/source/compare_win.cc \
+./libyuv/source/compare.cc \
+./libyuv/source/convert_argb.cc \
+./libyuv/source/convert_from_argb.cc \
+./libyuv/source/convert_from.cc \
+./libyuv/source/convert_jpeg.cc \
+./libyuv/source/convert_to_argb.cc \
+./libyuv/source/convert_to_i420.cc \
+./libyuv/source/convert.cc \
+./libyuv/source/cpu_id.cc \
+./libyuv/source/format_conversion.cc \
+./libyuv/source/mjpeg_decoder.cc \
+./libyuv/source/mjpeg_validate.cc \
+./libyuv/source/planar_functions.cc \
+./libyuv/source/rotate_argb.cc \
+./libyuv/source/rotate_mips.cc \
+./libyuv/source/rotate_neon.cc \
+./libyuv/source/rotate_neon64.cc \
+./libyuv/source/rotate.cc \
+./libyuv/source/row_any.cc \
+./libyuv/source/row_common.cc \
+./libyuv/source/row_mips.cc \
+./libyuv/source/row_neon.cc \
+./libyuv/source/row_neon64.cc \
+./libyuv/source/row_posix.cc \
+./libyuv/source/row_win.cc \
+./libyuv/source/scale_argb.cc \
+./libyuv/source/scale_common.cc \
+./libyuv/source/scale_mips.cc \
+./libyuv/source/scale_neon.cc \
+./libyuv/source/scale_neon64.cc \
+./libyuv/source/scale_posix.cc \
+./libyuv/source/scale_win.cc \
+./libyuv/source/scale.cc \
+./libyuv/source/video_common.cc
+
 LOCAL_SRC_FILES     += \
 ./jni.c \
 ./sqlite_cursor.c \
@@ -237,6 +277,7 @@ LOCAL_SRC_FILES     += \
 ./gif.c \
 ./utils.c \
 ./image.c \
+./video.c \
 ./fake.c
 
 include $(BUILD_SHARED_LIBRARY)
\ No newline at end of file
diff --git a/TMessagesProj/jni/fake.c b/TMessagesProj/jni/fake.c
index bd08db5a1..0af425568 100644
--- a/TMessagesProj/jni/fake.c
+++ b/TMessagesProj/jni/fake.c
@@ -2,5 +2,5 @@
 
 void fakeFunction() {
     printf("some androids has buggy native loader, so i should check size of libs in java to know that native library is correct. So each changed native library should has diffrent size in different app versions. This function will increase lib size for few bytes :)");
-    printf("bla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla blablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablablabla");
+    printf("");
 }
diff --git a/TMessagesProj/jni/utils.h b/TMessagesProj/jni/utils.h
index 34805a1d7..f17ae9025 100644
--- a/TMessagesProj/jni/utils.h
+++ b/TMessagesProj/jni/utils.h
@@ -4,7 +4,7 @@
 #include <android/log.h>
 #include <jni.h>
 
-#define LOG_TAG "tmessages_native"
+#define LOG_TAG "tmessages"
 #ifndef LOG_DISABLED
 #define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
 #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
diff --git a/TMessagesProj/jni/video.c b/TMessagesProj/jni/video.c
new file mode 100644
index 000000000..90c3410e7
--- /dev/null
+++ b/TMessagesProj/jni/video.c
@@ -0,0 +1,109 @@
+#include <jni.h>
+#include <libyuv.h>
+#include <utils.h>
+
+enum COLOR_FORMATTYPE {
+    COLOR_FormatMonochrome              = 1,
+    COLOR_Format8bitRGB332              = 2,
+    COLOR_Format12bitRGB444             = 3,
+    COLOR_Format16bitARGB4444           = 4,
+    COLOR_Format16bitARGB1555           = 5,
+    COLOR_Format16bitRGB565             = 6,
+    COLOR_Format16bitBGR565             = 7,
+    COLOR_Format18bitRGB666             = 8,
+    COLOR_Format18bitARGB1665           = 9,
+    COLOR_Format19bitARGB1666           = 10,
+    COLOR_Format24bitRGB888             = 11,
+    COLOR_Format24bitBGR888             = 12,
+    COLOR_Format24bitARGB1887           = 13,
+    COLOR_Format25bitARGB1888           = 14,
+    COLOR_Format32bitBGRA8888           = 15,
+    COLOR_Format32bitARGB8888           = 16,
+    COLOR_FormatYUV411Planar            = 17,
+    COLOR_FormatYUV411PackedPlanar      = 18,
+    COLOR_FormatYUV420Planar            = 19,
+    COLOR_FormatYUV420PackedPlanar      = 20,
+    COLOR_FormatYUV420SemiPlanar        = 21,
+    COLOR_FormatYUV422Planar            = 22,
+    COLOR_FormatYUV422PackedPlanar      = 23,
+    COLOR_FormatYUV422SemiPlanar        = 24,
+    COLOR_FormatYCbYCr                  = 25,
+    COLOR_FormatYCrYCb                  = 26,
+    COLOR_FormatCbYCrY                  = 27,
+    COLOR_FormatCrYCbY                  = 28,
+    COLOR_FormatYUV444Interleaved       = 29,
+    COLOR_FormatRawBayer8bit            = 30,
+    COLOR_FormatRawBayer10bit           = 31,
+    COLOR_FormatRawBayer8bitcompressed  = 32,
+    COLOR_FormatL2                      = 33,
+    COLOR_FormatL4                      = 34,
+    COLOR_FormatL8                      = 35,
+    COLOR_FormatL16                     = 36,
+    COLOR_FormatL24                     = 37,
+    COLOR_FormatL32                     = 38,
+    COLOR_FormatYUV420PackedSemiPlanar  = 39,
+    COLOR_FormatYUV422PackedSemiPlanar  = 40,
+    COLOR_Format18BitBGR666             = 41,
+    COLOR_Format24BitARGB6666           = 42,
+    COLOR_Format24BitABGR6666           = 43,
+
+    COLOR_TI_FormatYUV420PackedSemiPlanar = 0x7f000100,
+    COLOR_FormatSurface                   = 0x7F000789,
+    COLOR_QCOM_FormatYUV420SemiPlanar     = 0x7fa30c00
+};
+
+int isSemiPlanarYUV(int colorFormat) {
+    switch (colorFormat) {
+        case COLOR_FormatYUV420Planar:
+        case COLOR_FormatYUV420PackedPlanar:
+            return 0;
+        case COLOR_FormatYUV420SemiPlanar:
+        case COLOR_FormatYUV420PackedSemiPlanar:
+        case COLOR_TI_FormatYUV420PackedSemiPlanar:
+            return 1;
+        default:
+            return 0;
+    }
+}
+
+JNIEXPORT int Java_org_telegram_messenger_Utilities_convertVideoFrame(JNIEnv *env, jclass class, jobject src, jobject dest, int destFormat, int width, int height, int padding, int swap) {
+    if (!src || !dest || !destFormat) {
+        return 0;
+    }
+    
+    jbyte *srcBuff = (*env)->GetDirectBufferAddress(env, src);
+    jbyte *destBuff = (*env)->GetDirectBufferAddress(env, dest);
+
+    int half_width = (width + 1) / 2;
+    int half_height = (height + 1) / 2;
+    
+    if (!isSemiPlanarYUV(destFormat)) {
+        if (!swap) {
+            ARGBToI420(srcBuff, width * 4,
+                       destBuff, width,
+                       destBuff + width * height + half_width * half_height + padding * 5 / 4, half_width,
+                       destBuff + width * height + padding, half_width,
+                       width, height);
+        } else {
+            ARGBToI420(srcBuff, width * 4,
+                       destBuff, width,
+                       destBuff + width * height + padding, half_width,
+                       destBuff + width * height + half_width * half_height + padding * 5 / 4, half_width,
+                       width, height);
+        }
+    } else {
+        if (!swap) {
+            ARGBToNV21(srcBuff, width * 4,
+                       destBuff, width,
+                       destBuff + width * height + padding, half_width * 2,
+                       width, height);
+        } else {
+            ARGBToNV12(srcBuff, width * 4,
+                       destBuff, width,
+                       destBuff + width * height + padding, half_width * 2,
+                       width, height);
+        }
+    }
+    
+    return 1;
+}
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.so
index 07aee65fe..57e76551e 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.so b/TMessagesProj/libs/armeabi/libtmessages.so
index 422cd9445..3397e351f 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.so and b/TMessagesProj/libs/armeabi/libtmessages.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.so b/TMessagesProj/libs/x86/libtmessages.so
index 05025a396..4ec139a3b 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.so and b/TMessagesProj/libs/x86/libtmessages.so differ
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 8792d4131..d8ee6d5e8 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -98,8 +98,7 @@
         </activity>
         <activity
             android:name="org.telegram.ui.IntroActivity"
-            android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
-            android:screenOrientation="portrait">
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
         </activity>
         <activity
             android:name="org.telegram.ui.PopupNotificationActivity"
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 17ff88b38..cc8a2439c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -23,10 +23,13 @@
 import android.view.inputmethod.InputMethodManager;
 
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ApplicationLoader;
 
 import java.io.File;
 import java.util.Hashtable;
+import java.util.Locale;
 
 public class AndroidUtilities {
     private static final Hashtable<String, Typeface> typefaceCache = new Hashtable<String, Typeface>();
@@ -38,6 +41,39 @@
     public static int statusBarHeight = 0;
     public static float density = 1;
     public static Point displaySize = new Point();
+    private static Boolean isTablet = null;
+    private static Boolean isSmallTablet = null;
+
+    public static int[] arrColors = {0xffee4928, 0xff41a903, 0xffe09602, 0xff0f94ed, 0xff8f3bf7, 0xfffc4380, 0xff00a1c4, 0xffeb7002};
+    public static int[] arrUsersAvatars = {
+            R.drawable.user_red,
+            R.drawable.user_green,
+            R.drawable.user_yellow,
+            R.drawable.user_blue,
+            R.drawable.user_violet,
+            R.drawable.user_pink,
+            R.drawable.user_aqua,
+            R.drawable.user_orange};
+
+    public static int[] arrGroupsAvatars = {
+            R.drawable.group_red,
+            R.drawable.group_green,
+            R.drawable.group_yellow,
+            R.drawable.group_blue,
+            R.drawable.group_violet,
+            R.drawable.group_pink,
+            R.drawable.group_aqua,
+            R.drawable.group_orange};
+
+    public static int[] arrBroadcastAvatars = {
+            R.drawable.broadcast_red,
+            R.drawable.broadcast_green,
+            R.drawable.broadcast_yellow,
+            R.drawable.broadcast_blue,
+            R.drawable.broadcast_violet,
+            R.drawable.broadcast_pink,
+            R.drawable.broadcast_aqua,
+            R.drawable.broadcast_orange};
 
     static {
         density = ApplicationLoader.applicationContext.getResources().getDisplayMetrics().density;
@@ -45,7 +81,7 @@
     }
 
     public static void lockOrientation(Activity activity) {
-        if (prevOrientation != -10) {
+        if (activity == null || prevOrientation != -10) {
             return;
         }
         try {
@@ -103,6 +139,9 @@ public static void lockOrientation(Activity activity) {
     }
 
     public static void unlockOrientation(Activity activity) {
+        if (activity == null) {
+            return;
+        }
         try {
             if (prevOrientation != -10) {
                 activity.setRequestedOrientation(prevOrientation);
@@ -229,4 +268,90 @@ public static long makeBroadcastId(int id) {
     public static void RunOnUIThread(Runnable runnable) {
         ApplicationLoader.applicationHandler.post(runnable);
     }
+
+    public static boolean isTablet() {
+        if (isTablet == null) {
+            isTablet = ApplicationLoader.applicationContext.getResources().getBoolean(R.bool.isTablet);
+        }
+        return isTablet;
+    }
+
+    public static boolean isSmallTablet() {
+        if (isSmallTablet == null) {
+            float minSide = Math.min(displaySize.x, displaySize.y) / density;
+            isSmallTablet = minSide <= 700;
+        }
+        return isSmallTablet;
+    }
+
+    public static int getMinTabletSide() {
+        if (!isSmallTablet()) {
+            int smallSide = Math.min(displaySize.x, displaySize.y);
+            int leftSide = smallSide * 35 / 100;
+            if (leftSide < dp(320)) {
+                leftSide = dp(320);
+            }
+            return smallSide - leftSide;
+        } else {
+            int smallSide = Math.min(displaySize.x, displaySize.y);
+            int maxSide = Math.max(displaySize.x, displaySize.y);
+            int leftSide = maxSide * 35 / 100;
+            if (leftSide < dp(320)) {
+                leftSide = dp(320);
+            }
+            return Math.min(smallSide, maxSide - leftSide);
+        }
+    }
+
+    public static int getColorIndex(int id) {
+        int[] arr;
+        if (id >= 0) {
+            arr = arrUsersAvatars;
+        } else {
+            arr = arrGroupsAvatars;
+        }
+        try {
+            String str;
+            if (id >= 0) {
+                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
+            } else {
+                str = String.format(Locale.US, "%d", id);
+            }
+            if (str.length() > 15) {
+                str = str.substring(0, 15);
+            }
+            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
+            byte[] digest = md.digest(str.getBytes());
+            int b = digest[Math.abs(id % 16)];
+            if (b < 0) {
+                b += 256;
+            }
+            return Math.abs(b) % arr.length;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return id % arr.length;
+    }
+
+    public static int getColorForId(int id) {
+        if (id / 1000 == 333) {
+            return 0xff0f94ed;
+        }
+        return arrColors[getColorIndex(id)];
+    }
+
+    public static int getUserAvatarForId(int id) {
+        if (id / 1000 == 333 || id / 1000 == 777) {
+            return R.drawable.telegram_avatar;
+        }
+        return arrUsersAvatars[getColorIndex(id)];
+    }
+
+    public static int getGroupAvatarForId(int id) {
+        return arrGroupsAvatars[getColorIndex(-Math.abs(id))];
+    }
+
+    public static int getBroadcastAvatarForId(int id) {
+        return arrBroadcastAvatars[getColorIndex(-Math.abs(id))];
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index b8680e45d..cd6cd1385 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -17,6 +17,7 @@
 import android.net.Uri;
 import android.provider.BaseColumns;
 import android.provider.ContactsContract;
+import android.provider.Settings;
 import android.util.SparseArray;
 
 import org.telegram.PhoneFormat.PhoneFormat;
@@ -48,6 +49,7 @@
     private boolean contactsBookLoaded = false;
     private String lastContactsVersions = "";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<Integer>();
+    public int nameDisplayOrder = 1;
 
     public static class Contact {
         public int id;
@@ -99,6 +101,14 @@ public static ContactsController getInstance() {
         return localInstance;
     }
 
+    public ContactsController() {
+        try {
+            nameDisplayOrder = Settings.System.getInt(ApplicationLoader.applicationContext.getContentResolver(), "android.contacts.DISPLAY_ORDER");
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
     public void cleanup() {
         contactsBook.clear();
         contactsBookSPhones.clear();
@@ -1465,7 +1475,7 @@ public void run() {
                     MessagesStorage.getInstance().putContacts(arrayList, false);
 
                     if (u.phone != null && u.phone.length() > 0) {
-                        String name = Utilities.formatName(u.first_name, u.last_name);
+                        String name = formatName(u.first_name, u.last_name);
                         MessagesStorage.getInstance().applyPhoneBookUpdates(u.phone, "");
                         Contact contact = contactsBookSPhones.get(u.phone);
                         if (contact != null) {
@@ -1529,7 +1539,7 @@ public void run() {
 
                 for (TLRPC.User user : users) {
                     if (user.phone != null && user.phone.length() > 0) {
-                        String name = Utilities.formatName(user.first_name, user.last_name);
+                        String name = ContactsController.formatName(user.first_name, user.last_name);
                         MessagesStorage.getInstance().applyPhoneBookUpdates(user.phone, "");
                         Contact contact = contactsBookSPhones.get(user.phone);
                         if (contact != null) {
@@ -1563,4 +1573,24 @@ public void run() {
             }
         }, true, RPCRequest.RPCRequestClassGeneric);
     }
+
+    public static String formatName(String firstName, String lastName) {
+        String result = null;
+        if (ContactsController.getInstance().nameDisplayOrder == 1) {
+            result = firstName;
+            if (result == null || result.length() == 0) {
+                result = lastName;
+            } else if (result.length() != 0 && lastName != null && lastName.length() != 0) {
+                result += " " + lastName;
+            }
+        } else {
+            result = lastName;
+            if (result == null || result.length() == 0) {
+                result = firstName;
+            } else if (result.length() != 0 && firstName != null && firstName.length() != 0) {
+                result += " " + firstName;
+            }
+        }
+        return result.trim();
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index 0c5c81ce6..74b1f3cfd 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -215,7 +215,11 @@ public EmojiBitmap(int[] colors, int width, int height) {
             emojiFullSize = 90;
         }
 		drawImgSize = AndroidUtilities.dp(20);
-		bigImgSize = AndroidUtilities.dp(30);
+        if (AndroidUtilities.isTablet()) {
+            bigImgSize = AndroidUtilities.dp(40);
+        } else {
+            bigImgSize = AndroidUtilities.dp(30);
+        }
 
 		for (int j = 1; j < data.length; j++) {
 			for (int i = 0; i < data[j].length; i++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 818343f03..49255f7e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -18,12 +18,14 @@
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Environment;
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
@@ -576,12 +578,50 @@ public void run() {
                     });
                 }
             }
+        });
 
-            @Override
-            public File getCacheDir() {
-                return AndroidUtilities.getCacheDir();
+        FileLoader.getInstance().setMediaDirs(createMediaPaths());
+    }
+
+    private HashMap<Integer, File> createMediaPaths() {
+        HashMap<Integer, File> mediaDirs = new HashMap<Integer, File>();
+        File cachePath = AndroidUtilities.getCacheDir();
+        try {
+            cachePath.mkdirs();
+            new File(cachePath, ".nomedia").createNewFile();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        mediaDirs.put(FileLoader.MEDIA_DIR_CACHE, cachePath);
+        try {
+            if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
+                File telegramPath = new File(Environment.getExternalStorageDirectory(), LocaleController.getString("AppName", R.string.AppName));
+                telegramPath.mkdirs();
+
+                File imagePath = new File(telegramPath, "Images");
+                imagePath.mkdir();
+                new File(imagePath, ".nomedia").createNewFile();
+                mediaDirs.put(FileLoader.MEDIA_DIR_IMAGE, imagePath);
+
+                File videoPath = new File(telegramPath, "Video");
+                videoPath.mkdir();
+                new File(videoPath, ".nomedia").createNewFile();
+                mediaDirs.put(FileLoader.MEDIA_DIR_VIDEO, videoPath);
+
+                File audioPath = new File(telegramPath, "Audio");
+                audioPath.mkdir();
+                new File(audioPath, ".nomedia").createNewFile();
+                mediaDirs.put(FileLoader.MEDIA_DIR_AUDIO, audioPath);
+
+                File documentPath = new File(telegramPath, "Documents");
+                documentPath.mkdir();
+                new File(documentPath, ".nomedia").createNewFile();
+                mediaDirs.put(FileLoader.MEDIA_DIR_DOCUMENT, documentPath);
             }
-        });
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return mediaDirs;
     }
 
     private void performReplace(String oldKey, String newKey) {
@@ -746,7 +786,12 @@ public void loadImage(final TLRPC.FileLocation fileLocation, final String httpUr
 
         if (!added) {
             boolean onlyCache = false;
-            File cacheFile = new File(AndroidUtilities.getCacheDir(), url);
+            File cacheFile = null;
+            if (size == 0 || httpUrl != null || fileLocation != null && (fileLocation.key != null || fileLocation.volume_id == Integer.MIN_VALUE && fileLocation.local_id < 0)) {
+                cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), url);
+            } else {
+                cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_IMAGE), url);
+            }
             if (httpUrl != null) {
                 if (!httpUrl.startsWith("http")) {
                     onlyCache = true;
@@ -779,11 +824,12 @@ public void loadImage(final TLRPC.FileLocation fileLocation, final String httpUr
                 img.addImageView(imageView);
                 imageLoadingByUrl.put(url, img);
                 if (httpUrl == null) {
-                    FileLoader.getInstance().loadFile(fileLocation, size);
+                    FileLoader.getInstance().loadFile(fileLocation, size, size == 0 || fileLocation.key != null);
                 } else {
                     String file = Utilities.MD5(httpUrl);
-                    img.tempFilePath = new File(AndroidUtilities.getCacheDir(), file + "_temp.jpg");
-                    img.finalFilePath = new File(AndroidUtilities.getCacheDir(), file + ".jpg");
+                    File cacheDir = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE);
+                    img.tempFilePath = new File(cacheDir, file + "_temp.jpg");
+                    img.finalFilePath = cacheFile;
                     img.httpTask = new HttpTask(img);
                     httpTasks.add(img.httpTask);
                     runHttpTasks(false);
@@ -1002,7 +1048,7 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
         try {
             if (!cache) {
                 String fileName = location.volume_id + "_" + location.local_id + ".jpg";
-                final File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+                final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
                 FileOutputStream stream = new FileOutputStream(cacheFile);
                 scaledBitmap.compress(Bitmap.CompressFormat.JPEG, quality, stream);
                 size.size = (int)stream.getChannel().size();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 829b29ee8..b97a7add8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -591,7 +591,7 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
             if (downloadObject.object instanceof TLRPC.Audio) {
                 FileLoader.getInstance().loadFile((TLRPC.Audio)downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.PhotoSize) {
-                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object);
+                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.Video) {
                 FileLoader.getInstance().loadFile((TLRPC.Video)downloadObject.object);
             } else if (downloadObject.object instanceof TLRPC.Document) {
@@ -1152,7 +1152,7 @@ public boolean playAudio(MessageObject messageObject) {
             return true;
         }
         clenupPlayer(true);
-        final File cacheFile = new File(AndroidUtilities.getCacheDir(), messageObject.getFileName());
+        final File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
 
         if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
             synchronized (playerObjectSync) {
@@ -1376,7 +1376,7 @@ public void run() {
                 UserConfig.lastLocalId--;
                 UserConfig.saveConfig(false);
 
-                recordingAudioFile = new File(AndroidUtilities.getCacheDir(), FileLoader.getAttachFileName(recordingAudio));
+                recordingAudioFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), FileLoader.getAttachFileName(recordingAudio));
 
                 try {
                     if (startRecord(recordingAudioFile.getAbsolutePath()) == 0) {
@@ -1515,7 +1515,7 @@ public static void saveFile(String path, String fullPath, Context context, final
             }
         }
         if (file == null) {
-            file = new File(AndroidUtilities.getCacheDir(), path);
+            file = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), path);
         }
 
         final File sourceFile = file;
@@ -1647,7 +1647,7 @@ public GifDrawable getGifDrawable(ChatMediaCell cell, boolean create) {
                 }
             }
             if (cacheFile == null) {
-                cacheFile = new File(AndroidUtilities.getCacheDir(), messageObject.getFileName());
+                cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
             }
             try {
                 currentGifDrawable = new GifDrawable(cacheFile);
@@ -1726,7 +1726,7 @@ public static String copyDocumentToCache(Uri uri, String ext) {
             UserConfig.lastLocalId--;
             parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
             input = new FileInputStream(parcelFD.getFileDescriptor());
-            File f = new File(AndroidUtilities.getCacheDir(), String.format(Locale.US, "%d.%s", id, ext));
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), String.format(Locale.US, "%d.%s", id, ext));
             output = new FileOutputStream(f);
             input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
             UserConfig.saveConfig(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index c05c65b87..edebe35fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -23,8 +23,6 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
 
 import java.util.AbstractMap;
 import java.util.ArrayList;
@@ -94,7 +92,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
                     } else {
                         if (fromUser != null) {
-                            messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                            messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                         } else {
                             messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", "");
                         }
@@ -105,7 +103,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
                         } else {
                             if (fromUser != null) {
-                                messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                                messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                             } else {
                                 messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", "");
                             }
@@ -120,11 +118,11 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         }
                         if (who != null && fromUser != null) {
                             if (isFromMe()) {
-                                messageText = LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser).replace("un2", Utilities.formatName(who.first_name, who.last_name));
+                                messageText = LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser).replace("un2", ContactsController.formatName(who.first_name, who.last_name));
                             } else if (message.action.user_id == UserConfig.getClientUserId()) {
-                                messageText = LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                                messageText = LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                             } else {
-                                messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", Utilities.formatName(who.first_name, who.last_name)).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                                messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", ContactsController.formatName(who.first_name, who.last_name)).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                             }
                         } else {
                             messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", "").replace("un1", "");
@@ -140,11 +138,11 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     }
                     if (whoUser != null && fromUser != null) {
                         if (isFromMe()) {
-                            messageText = LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser).replace("un2", Utilities.formatName(whoUser.first_name, whoUser.last_name));
+                            messageText = LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser).replace("un2", ContactsController.formatName(whoUser.first_name, whoUser.last_name));
                         } else if (message.action.user_id == UserConfig.getClientUserId()) {
-                            messageText = LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                            messageText = LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                         } else {
-                            messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", Utilities.formatName(whoUser.first_name, whoUser.last_name)).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                            messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", ContactsController.formatName(whoUser.first_name, whoUser.last_name)).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                         }
                     } else {
                         messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", "").replace("un1", "");
@@ -154,7 +152,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
                     } else {
                         if (fromUser != null) {
-                            messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                            messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                         } else {
                             messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", "");
                         }
@@ -164,7 +162,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", message.action.title);
                     } else {
                         if (fromUser != null) {
-                            messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name)).replace("un2", message.action.title);
+                            messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name)).replace("un2", message.action.title);
                         } else {
                             messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", "").replace("un2", message.action.title);
                         }
@@ -174,7 +172,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
                     } else {
                         if (fromUser != null) {
-                            messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                            messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                         } else {
                             messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", "");
                         }
@@ -235,13 +233,13 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
                 } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
                     if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                     } else {
                         messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, "");
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                     if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(fromUser.first_name, fromUser.last_name));
+                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
                     } else {
                         messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
                     }
@@ -438,7 +436,7 @@ public String getFileName() {
         } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
             ArrayList<TLRPC.PhotoSize> sizes = messageOwner.media.photo.sizes;
             if (sizes.size() > 0) {
-                TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(sizes, 800, 800);
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(sizes, 800, 800);
                 if (sizeFull != null) {
                     return FileLoader.getAttachFileName(sizeFull);
                 }
@@ -463,10 +461,18 @@ private void generateLayout() {
         }
 
         int maxWidth;
-        if (messageOwner.to_id.chat_id != 0) {
-            maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+        if (AndroidUtilities.isTablet()) {
+            if (messageOwner.to_id.chat_id != 0) {
+                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+            } else {
+                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+            }
         } else {
-            maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+            if (messageOwner.to_id.chat_id != 0) {
+                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+            } else {
+                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+            }
         }
 
         StaticLayout textLayout = null;
@@ -505,12 +511,17 @@ private void generateLayout() {
                     CharSequence str = messageText.subSequence(startCharacter, endCharacter);
                     block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     block.textYOffset = textLayout.getLineTop(linesOffset);
-                    if (a != blocksCount - 1) {
+                    if (a != 0) {
+                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
+                    }
+                    prevOffset = block.textYOffset;
+                    /*if (a != blocksCount - 1) {
+                        int height = block.textLayout.getHeight();
                         blockHeight = Math.min(blockHeight, block.textLayout.getHeight());
                         prevOffset = block.textYOffset;
                     } else {
                         blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
-                    }
+                    }*/
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                     continue;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 9d584f6f9..807d89099 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -143,7 +143,7 @@ public MessagesController() {
         preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         maxGroupCount = preferences.getInt("maxGroupCount", 200);
         maxBroadcastCount = preferences.getInt("maxBroadcastCount", 100);
-        fontSize = preferences.getInt("fons_size", 16);
+        fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
     }
 
     public void updateConfig(final TLRPC.TL_config config) {
@@ -228,8 +228,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             }
                             TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
                             ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
-                            TLRPC.PhotoSize smallSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 100, 100);
-                            TLRPC.PhotoSize bigSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 1000, 1000);
+                            TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100, 100);
+                            TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000, 1000);
                             user.photo = new TLRPC.TL_userProfilePhoto();
                             user.photo.photo_id = photo.photo.id;
                             if (smallSize != null) {
@@ -908,7 +908,7 @@ public void run() {
 
     public void uploadAndApplyUserAvatar(TLRPC.PhotoSize bigPhoto) {
         if (bigPhoto != null) {
-            uploadingAvatar = AndroidUtilities.getCacheDir() + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
+            uploadingAvatar = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
             FileLoader.getInstance().uploadFile(uploadingAvatar, false, true);
         }
     }
@@ -1175,7 +1175,7 @@ public void updatePrintingStrings() {
                         if (label.length() != 0) {
                             label += ", ";
                         }
-                        label += Utilities.formatName(user.first_name, user.last_name);
+                        label += ContactsController.formatName(user.first_name, user.last_name);
                         count++;
                     }
                     if (count == 2) {
@@ -1654,11 +1654,6 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
             size.type = "s";
             sizes.add(size);
         }
-        size = ImageLoader.scaleAndSaveImage(bitmap, 320, 320, 80, false);
-        if (size != null) {
-            size.type = "m";
-            sizes.add(size);
-        }
         size = ImageLoader.scaleAndSaveImage(bitmap, 800, 800, 80, false);
         if (size != null) {
             size.type = "x";
@@ -3462,9 +3457,23 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
                 changed = true;
             }
         } else {
+            boolean change = false;
             if (dialog.top_message > 0 && lastMessage.messageOwner.id > 0 && lastMessage.messageOwner.id > dialog.top_message ||
-                    dialog.top_message < 0 && lastMessage.messageOwner.id < 0 && lastMessage.messageOwner.id < dialog.top_message ||
-                    dialog.last_message_date < lastMessage.messageOwner.date) {
+                    dialog.top_message < 0 && lastMessage.messageOwner.id < 0 && lastMessage.messageOwner.id < dialog.top_message) {
+                change = true;
+            } else {
+                MessageObject currentDialogMessage = dialogMessage.get(dialog.top_message);
+                if (currentDialogMessage != null) {
+                    if (currentDialogMessage.messageOwner.send_state == MessageObject.MESSAGE_SEND_STATE_SENDING && lastMessage.messageOwner.send_state == MessageObject.MESSAGE_SEND_STATE_SENDING) {
+                        change = true;
+                    } else if (dialog.last_message_date < lastMessage.messageOwner.date || dialog.last_message_date == lastMessage.messageOwner.date && lastMessage.messageOwner.send_state == MessageObject.MESSAGE_SEND_STATE_SENDING) {
+                        change = true;
+                    }
+                } else {
+                    change = true;
+                }
+            }
+            if (change) {
                 dialogMessage.remove(dialog.top_message);
                 dialog.top_message = lastMessage.messageOwner.id;
                 if (!isBroadcast) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 47b0e3dfc..17e2008e7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -21,6 +21,7 @@
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
@@ -1253,7 +1254,7 @@ public void run() {
                                         if (user.status != null) {
                                             user.status.expires = cursor.intValue(7);
                                         }
-                                        resultArrayNames.add(Html.fromHtml("<font color=\"#00a60e\">" + Utilities.formatName(user.first_name, user.last_name) + "</font>"));
+                                        resultArrayNames.add(Html.fromHtml("<font color=\"#00a60e\">" + ContactsController.formatName(user.first_name, user.last_name) + "</font>"));
                                         resultArray.add(chat);
                                         encUsers.add(user);
                                     }
@@ -2587,7 +2588,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                             }
                         } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                             if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
-                                TLRPC.PhotoSize photoSize = PhotoObject.getClosestPhotoSizeWithSize(message.media.photo.sizes, 800, 800);
+                                TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.media.photo.sizes, 800, 800);
                                 if (photoSize != null) {
                                     id = message.media.photo.id;
                                     type = MediaController.AUTODOWNLOAD_MASK_PHOTO;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
index 04e039b2d..4e66ae6f2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
@@ -24,9 +24,9 @@
 public class NativeLoader {
 
     private static final long sizes[] = new long[] {
-            811664,     //armeabi
-            864932,    //armeabi-v7a
-            1262644,    //x86
+            946908,     //armeabi
+            1028848,    //armeabi-v7a
+            1603780,    //x86
             0,          //mips
     };
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index f45b7bb93..26a3083b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -38,6 +38,7 @@
     public static final int notificationsSettingsUpdated = 26;
     public static final int pushMessagesUpdated = 27;
     public static final int blockedUsersDidLoaded = 28;
+    public static final int openedChatChanged = 29;
 
     public static final int wallpapersDidLoaded = 171;
     public static final int closeOtherAppActivities = 702;
@@ -67,7 +68,7 @@
     final private HashMap<Integer, Object> removeAfterBroadcast = new HashMap<Integer, Object>();
     final private HashMap<Integer, Object> addAfterBroadcast = new HashMap<Integer, Object>();
 
-    private boolean broadcasting = false;
+    private int broadcasting = 0;
 
     private static volatile NotificationCenter Instance = null;
     public static NotificationCenter getInstance() {
@@ -89,32 +90,34 @@ public static NotificationCenter getInstance() {
 
     public void postNotificationName(int id, Object... args) {
         synchronized (observers) {
-            broadcasting = true;
+            broadcasting++;
             ArrayList<Object> objects = observers.get(id);
             if (objects != null) {
                 for (Object obj : objects) {
                     ((NotificationCenterDelegate)obj).didReceivedNotification(id, args);
                 }
             }
-            broadcasting = false;
-            if (!removeAfterBroadcast.isEmpty()) {
-                for (HashMap.Entry<Integer, Object> entry : removeAfterBroadcast.entrySet()) {
-                    removeObserver(entry.getValue(), entry.getKey());
+            broadcasting--;
+            if (broadcasting == 0) {
+                if (!removeAfterBroadcast.isEmpty()) {
+                    for (HashMap.Entry<Integer, Object> entry : removeAfterBroadcast.entrySet()) {
+                        removeObserver(entry.getValue(), entry.getKey());
+                    }
+                    removeAfterBroadcast.clear();
                 }
-                removeAfterBroadcast.clear();
-            }
-            if (!addAfterBroadcast.isEmpty()) {
-                for (HashMap.Entry<Integer, Object> entry : addAfterBroadcast.entrySet()) {
-                    addObserver(entry.getValue(), entry.getKey());
+                if (!addAfterBroadcast.isEmpty()) {
+                    for (HashMap.Entry<Integer, Object> entry : addAfterBroadcast.entrySet()) {
+                        addObserver(entry.getValue(), entry.getKey());
+                    }
+                    addAfterBroadcast.clear();
                 }
-                addAfterBroadcast.clear();
             }
         }
     }
 
     public void addObserver(Object observer, int id) {
         synchronized (observers) {
-            if (broadcasting) {
+            if (broadcasting != 0) {
                 addAfterBroadcast.put(id, observer);
                 return;
             }
@@ -131,7 +134,7 @@ public void addObserver(Object observer, int id) {
 
     public void removeObserver(Object observer, int id) {
         synchronized (observers) {
-            if (broadcasting) {
+            if (broadcasting != 0) {
                 removeAfterBroadcast.put(id, observer);
                 return;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index b5777a760..10e7c3b61 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -30,7 +30,6 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
 import org.telegram.ui.ApplicationLoader;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PopupNotificationActivity;
@@ -51,6 +50,7 @@
     public ArrayList<MessageObject> popupMessages = new ArrayList<MessageObject>();
     private long openned_dialog_id = 0;
     private int total_unread_count = 0;
+    private int personal_count = 0;
     private boolean notifyCheck = false;
 
     private static volatile NotificationsController Instance = null;
@@ -74,6 +74,7 @@ public NotificationsController() {
     public void cleanup() {
         openned_dialog_id = 0;
         total_unread_count = 0;
+        personal_count = 0;
         pushMessages.clear();
         pushMessagesDict.clear();
         pushDialogs.clear();
@@ -89,7 +90,7 @@ public void setOpennedDialogId(long dialog_id) {
         openned_dialog_id = dialog_id;
     }
 
-    private String getStringForMessage(MessageObject messageObject) {
+    private String getStringForMessage(MessageObject messageObject, boolean shortMessage) {
         long dialog_id = messageObject.messageOwner.dialog_id;
         int chat_id = messageObject.messageOwner.to_id.chat_id;
         int user_id = messageObject.messageOwner.to_id.user_id;
@@ -126,36 +127,40 @@ private String getStringForMessage(MessageObject messageObject) {
                 if (preferences.getBoolean("EnablePreviewAll", true)) {
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined) {
-                            msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                            msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                            String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long)messageObject.messageOwner.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long)messageObject.messageOwner.date) * 1000));
+                            String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
                             msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
                         }
                     } else {
                         if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
-                            if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
+                            if (!shortMessage) {
+                                if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
+                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
+                                } else {
+                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
+                                }
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
+                                msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                            msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, Utilities.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, ContactsController.formatName(user.first_name, user.last_name));
                         }
                     }
                 } else {
-                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
+                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
                 }
             } else if (chat_id != 0) {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
@@ -163,56 +168,56 @@ private String getStringForMessage(MessageObject messageObject) {
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
                             if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                             } else {
                                 TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
                                 if (u2 == null) {
                                     return null;
                                 }
-                                msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
+                                msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
                             }
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                            msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
+                            msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                            msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                             if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.action.user_id == user.id) {
-                                msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                             } else {
                                 TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
                                 if (u2 == null) {
                                     return null;
                                 }
-                                msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
+                                msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
                             }
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
                             msg = messageObject.messageText.toString();
                         }
                     } else {
                         if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
-                            if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, Utilities.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
+                            if (!shortMessage && messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
+                                msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, ContactsController.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                            msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                         }
                     }
                 } else {
-                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
                 }
             }
         } else {
@@ -222,9 +227,17 @@ private String getStringForMessage(MessageObject messageObject) {
     }
 
     private void scheduleNotificationRepeat() {
-        PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class), 0);
-        AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
-        alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 60 * 60 * 1000, pintent);
+        try {
+            AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
+            PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class), 0);
+            if (personal_count > 0) {
+                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 60 * 60 * 1000, pintent);
+            } else {
+                alarm.cancel(pintent);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
     }
 
     protected void repeatNotificationMaybe() {
@@ -358,7 +371,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 if (chat != null) {
                     name = chat.title;
                 } else {
-                    name = Utilities.formatName(user.first_name, user.last_name);
+                    name = ContactsController.formatName(user.first_name, user.last_name);
                 }
             }
 
@@ -377,8 +390,10 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                     .setContentIntent(contentIntent);
 
             String lastMessage = null;
+            String lastMessageFull = null;
             if (pushMessages.size() == 1) {
-                String message = lastMessage = getStringForMessage(pushMessages.get(0));
+                String message = lastMessageFull = getStringForMessage(pushMessages.get(0), false);
+                lastMessage = getStringForMessage(pushMessages.get(0), true);
                 if (message == null) {
                     return;
                 }
@@ -397,12 +412,13 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 inboxStyle.setBigContentTitle(name);
                 int count = Math.min(10, pushMessages.size());
                 for (int i = 0; i < count; i++) {
-                    String message = getStringForMessage(pushMessages.get(i));
+                    String message = getStringForMessage(pushMessages.get(i), false);
                     if (message == null) {
                         continue;
                     }
                     if (i == 0) {
-                        lastMessage = message;
+                        lastMessageFull = message;
+                        lastMessage = getStringForMessage(pushMessages.get(i), true);
                     }
                     if (pushDialogs.size() == 1) {
                         if (replace) {
@@ -462,7 +478,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
 
             notificationManager.notify(1, mBuilder.build());
             if (preferences.getBoolean("EnablePebbleNotifications", false)) {
-                sendAlertToPebble(lastMessage);
+                sendAlertToPebble(lastMessageFull);
             }
             scheduleNotificationRepeat();
         } catch (Exception e) {
@@ -508,6 +524,9 @@ public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id,
             for (Integer id : readMessages) {
                 MessageObject messageObject = pushMessagesDict.get(id);
                 if (messageObject != null) {
+                    if (isPersonalMessage(messageObject)) {
+                        personal_count--;
+                    }
                     pushMessages.remove(messageObject);
                     popupMessages.remove(messageObject);
                     pushMessagesDict.remove(id);
@@ -535,6 +554,9 @@ public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id,
                         }
                     }
                     if (remove) {
+                        if (isPersonalMessage(messageObject)) {
+                            personal_count--;
+                        }
                         pushMessages.remove(a);
                         popupMessages.remove(messageObject);
                         pushMessagesDict.remove(messageObject.messageOwner.id);
@@ -567,6 +589,9 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
             if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
                 continue;
             }
+            if (isPersonalMessage(messageObject)) {
+                personal_count++;
+            }
             added = true;
 
             Boolean value = settingsCache.get(dialog_id);
@@ -629,6 +654,9 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
                 for (int a = 0; a < pushMessages.size(); a++) {
                     MessageObject messageObject = pushMessages.get(a);
                     if (messageObject.getDialogId() == dialog_id) {
+                        if (isPersonalMessage(messageObject)) {
+                            personal_count--;
+                        }
                         pushMessages.remove(a);
                         a--;
                         pushMessagesDict.remove(messageObject.messageOwner.id);
@@ -658,6 +686,7 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
         pushMessages.clear();
         pushMessagesDict.clear();
         total_unread_count = 0;
+        personal_count = 0;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         HashMap<Long, Boolean> settingsCache = new HashMap<Long, Boolean>();
 
@@ -682,6 +711,9 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
                     continue;
                 }
                 MessageObject messageObject = new MessageObject(message, null, 0);
+                if (isPersonalMessage(messageObject)) {
+                    personal_count++;
+                }
                 long dialog_id = messageObject.getDialogId();
                 Boolean value = settingsCache.get(dialog_id);
                 if (value == null) {
@@ -746,4 +778,9 @@ public static String getLauncherClassName(Context context) {
         }
         return null;
     }
+
+    private boolean isPersonalMessage(MessageObject messageObject) {
+        return messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id == 0
+                && (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java b/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
index eb079ef03..e59ce6b72 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
@@ -67,26 +67,4 @@ public static PhotoObject getClosestImageWithSize(ArrayList<PhotoObject> arr, in
         }
         return closestObject;
     }
-
-    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int width, int height) {
-        if (sizes == null) {
-            return null;
-        }
-        int closestWidth = 9999;
-        int closestHeight = 9999;
-        TLRPC.PhotoSize closestObject = null;
-        for (TLRPC.PhotoSize obj : sizes) {
-            if (obj == null) {
-                continue;
-            }
-            int diffW = Math.abs(obj.w - width);
-            int diffH = Math.abs(obj.h - height);
-            if (closestObject == null || closestObject instanceof TLRPC.TL_photoCachedSize || closestWidth > diffW || closestHeight > diffH) {
-                closestObject = obj;
-                closestWidth = diffW;
-                closestHeight = diffH;
-            }
-        }
-        return closestObject;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index 762143016..a41b9e6e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -28,6 +28,7 @@
 
     private TLRPC.ChatParticipants currentChatInfo = null;
     private HashMap<String, ArrayList<DelayedMessage>> delayedMessages = new HashMap<String, ArrayList<DelayedMessage>>();
+    private HashMap<Integer, MessageObject> unsentMessages = new HashMap<Integer, MessageObject>();
 
     private class DelayedMessage {
         public TLObject sendRequest;
@@ -153,6 +154,7 @@ public void run() {
                                 arr.remove(a);
                                 a--;
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.messageOwner.id);
+                                processSentMessage(obj.obj.messageOwner.id);
                             }
                         }
                         if (arr.isEmpty()) {
@@ -191,14 +193,25 @@ public void cancelSendingMessage(MessageObject object) {
         MessagesController.getInstance().deleteMessages(messages, null, null);
     }
 
-    public boolean retrySendMessage(MessageObject messageObject) {
+    public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
         if (messageObject.messageOwner.id >= 0) {
             return false;
         }
+        if (unsent) {
+            unsentMessages.put(messageObject.messageOwner.id, messageObject);
+        }
         sendMessage(messageObject);
         return true;
     }
 
+    private void processSentMessage(int id) {
+        int prevSize = unsentMessages.size();
+        unsentMessages.remove(id);
+        if (prevSize != 0 && unsentMessages.size() == 0) {
+            checkUnsentMessages();
+        }
+    }
+
     public void processForwardFromMyName(MessageObject messageObject, long did) {
         if (messageObject == null) {
             return;
@@ -271,7 +284,6 @@ public void sendMessage(TLRPC.TL_audio audio, long peer) {
     }
 
     private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry) {
-
         TLRPC.Message newMsg = null;
         int type = -1;
         if (retry) {
@@ -340,7 +352,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 type = 2;
                 newMsg.message = "-1";
                 TLRPC.FileLocation location1 = photo.sizes.get(photo.sizes.size() - 1).location;
-                newMsg.attachPath = AndroidUtilities.getCacheDir() + "/" + location1.volume_id + "_" + location1.local_id + ".jpg";
+                newMsg.attachPath = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + location1.volume_id + "_" + location1.local_id + ".jpg";
             } else if (video != null) {
                 newMsg = new TLRPC.TL_message();
                 newMsg.media = new TLRPC.TL_messageMediaVideo();
@@ -394,12 +406,12 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
             newMsg.from_id = UserConfig.getClientUserId();
             newMsg.out = true;
-            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
             UserConfig.saveConfig(false);
         }
         if (newMsg.random_id == 0) {
             newMsg.random_id = getNextRandomId();
         }
+        newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
         newMsg.unread = true;
         newMsg.dialog_id = peer;
         int lower_id = (int) peer;
@@ -410,6 +422,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
         if (lower_id != 0) {
             if (high_id == 1) {
                 if (currentChatInfo == null) {
+                    processSentMessage(newMsg.id);
                     return;
                 }
                 sendToPeers = new ArrayList<TLRPC.InputUser>();
@@ -434,6 +447,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
 
                     TLRPC.User sendToUser = MessagesController.getInstance().getUser(lower_id);
                     if (sendToUser == null) {
+                        processSentMessage(newMsg.id);
                         return;
                     }
                     if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
@@ -767,12 +781,13 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
             newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
+            processSentMessage(newMsgObj.messageOwner.id);
         }
     }
 
     private void performSendDelayedMessage(final DelayedMessage message) {
         if (message.type == 0) {
-            String location = AndroidUtilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+            String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
             putToDelayedMessages(location, message);
             if (message.sendRequest != null) {
                 FileLoader.getInstance().uploadFile(location, false, true);
@@ -788,13 +803,13 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                     media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
                 }
                 if (media.thumb == null) {
-                    String location = AndroidUtilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+                    String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                     putToDelayedMessages(location, message);
                     FileLoader.getInstance().uploadFile(location, false, true);
                 } else {
                     String location = message.videoLocation.path;
                     if (location == null) {
-                        location = AndroidUtilities.getCacheDir() + "/" + message.videoLocation.id + ".mp4";
+                        location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
                     }
                     putToDelayedMessages(location, message);
                     if (message.videoLocation.estimatedSize) {
@@ -806,7 +821,7 @@ private void performSendDelayedMessage(final DelayedMessage message) {
             } else {
                 String location = message.videoLocation.path;
                 if (location == null) {
-                    location = AndroidUtilities.getCacheDir() + "/" + message.videoLocation.id + ".mp4";
+                    location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
                 }
                 putToDelayedMessages(location, message);
                 if (message.videoLocation.estimatedSize) {
@@ -823,7 +838,7 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                 media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
             }
             if (message.sendRequest != null && media.thumb == null && message.location != null) {
-                String location = AndroidUtilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+                String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                 putToDelayedMessages(location, message);
                 FileLoader.getInstance().uploadFile(location, false, true);
             } else {
@@ -855,8 +870,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
                     final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
 
-                    if (response instanceof TLRPC.TL_messages_sentMessage) {
-                        TLRPC.TL_messages_sentMessage res = (TLRPC.TL_messages_sentMessage) response;
+                    if (response instanceof TLRPC.messages_SentMessage) {
+                        TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
                         newMsgObj.messageOwner.id = res.id;
                         newMsgObj.messageOwner.date = res.date;
                         MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date);
@@ -903,6 +918,7 @@ public void run() {
                                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
                                     }
                                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.messageOwner.id), newMsgObj);
+                                    processSentMessage(oldId);
                                 }
                             });
                         }
@@ -914,6 +930,7 @@ public void run() {
                         public void run() {
                             newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
+                            processSentMessage(newMsgObj.messageOwner.id);
                         }
                     });
                 }
@@ -1009,6 +1026,7 @@ public void run() {
                                     public void run() {
                                         newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
                                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, newMsgObj.messageOwner.id, newMsgObj.messageOwner.id, newMsgObj);
+                                        processSentMessage(newMsgObj.messageOwner.id);
                                     }
                                 });
                             }
@@ -1020,6 +1038,7 @@ public void run() {
                             public void run() {
                                 newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
+                                processSentMessage(newMsgObj.messageOwner.id);
                             }
                         });
                     }
@@ -1044,8 +1063,13 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                             if (fileName.equals(fileName2)) {
                                 break;
                             }
-                            File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName + ".jpg");
-                            File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2 + ".jpg");
+                            File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                            File cacheFile2 = null;
+                            if (sentMessage.media.photo.sizes.size() == 1 || size.w > 80 || size.h > 80) {
+                                cacheFile2 = FileLoader.getPathToAttach(size);
+                            } else {
+                                cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                            }
                             cacheFile.renameTo(cacheFile2);
                             ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
                             size2.location = size.location;
@@ -1066,9 +1090,9 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                     String fileName = size2.location.volume_id + "_" + size2.location.local_id;
                     String fileName2 = size.location.volume_id + "_" + size.location.local_id;
                     if (!fileName.equals(fileName2)) {
-                        File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName + ".jpg");
-                        File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2 + ".jpg");
-                        boolean result = cacheFile.renameTo(cacheFile2);
+                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                        File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                        cacheFile.renameTo(cacheFile2);
                         ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
                         size2.location = size.location;
                     }
@@ -1087,16 +1111,16 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                     String fileName = size2.location.volume_id + "_" + size2.location.local_id;
                     String fileName2 = size.location.volume_id + "_" + size.location.local_id;
                     if (!fileName.equals(fileName2)) {
-                        File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName + ".jpg");
-                        File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2 + ".jpg");
-                        boolean result = cacheFile.renameTo(cacheFile2);
+                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                        File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                        cacheFile.renameTo(cacheFile2);
                         ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
                         size2.location = size.location;
                     }
                 }
-                if (newMsg.attachPath != null && newMsg.attachPath.startsWith(AndroidUtilities.getCacheDir().getAbsolutePath())) {
+                if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
                     File cacheFile = new File(newMsg.attachPath);
-                    File cacheFile2 = new File(AndroidUtilities.getCacheDir(), FileLoader.getAttachFileName(sentMessage.media.document));
+                    File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document);
                     boolean result = cacheFile.renameTo(cacheFile2);
                     if (result) {
                         newMsg.attachPath = null;
@@ -1115,11 +1139,11 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
 
-                String fileName = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".m4a";
-                String fileName2 = sentMessage.media.audio.dc_id + "_" + sentMessage.media.audio.id + ".m4a";
+                String fileName = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
+                String fileName2 = sentMessage.media.audio.dc_id + "_" + sentMessage.media.audio.id + ".ogg";
                 if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
-                    File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2);
+                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                    File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.audio);
                     cacheFile.renameTo(cacheFile2);
                 }
                 newMsg.media.audio.dc_id = sentMessage.media.audio.dc_id;
@@ -1138,8 +1162,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 size.location.secret = file.access_hash;
                 size.location.local_id = file.key_fingerprint;
                 String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName + ".jpg");
-                File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2 + ".jpg");
+                File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                File cacheFile2 = FileLoader.getPathToAttach(size);
                 boolean result = cacheFile.renameTo(cacheFile2);
                 ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
@@ -1186,9 +1210,9 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 newMsg.media.document.thumb = document.thumb;
                 newMsg.media.document.dc_id = file.dc_id;
 
-                if (document.path != null && document.path.startsWith(AndroidUtilities.getCacheDir().getAbsolutePath())) {
+                if (document.path != null && document.path.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
                     File cacheFile = new File(document.path);
-                    File cacheFile2 = new File(AndroidUtilities.getCacheDir(), FileLoader.getAttachFileName(newMsg.media.document));
+                    File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.document);
                     cacheFile.renameTo(cacheFile2);
                 }
 
@@ -1212,11 +1236,11 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 newMsg.media.audio.path = audio.path;
                 newMsg.media.audio.mime_type = audio.mime_type;
 
-                String fileName = audio.dc_id + "_" + audio.id + ".m4a";
-                String fileName2 = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".m4a";
+                String fileName = audio.dc_id + "_" + audio.id + ".ogg";
+                String fileName2 = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
                 if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
-                    File cacheFile2 = new File(AndroidUtilities.getCacheDir(), fileName2);
+                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                    File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.audio);
                     cacheFile.renameTo(cacheFile2);
                 }
 
@@ -1370,7 +1394,7 @@ public void run() {
                 MessagesController.getInstance().putEncryptedChats(encryptedChats, true);
                 for (TLRPC.Message message : messages) {
                     MessageObject messageObject = new MessageObject(message, null, 0);
-                    retrySendMessage(messageObject);
+                    retrySendMessage(messageObject, true);
                 }
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
index fb8d70102..a04e8d4c4 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
@@ -87,7 +87,7 @@ private void flushCurrentMdat() throws Exception {
         fos.flush();
     }
 
-    public void writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo) throws Exception {
+    public boolean writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo) throws Exception {
         if (writeNewMdat) {
             mdat.setContentSize(0);
             mdat.getBox(fc);
@@ -111,16 +111,18 @@ public void writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.Buffe
         currentMp4Movie.addSample(trackIndex, dataOffset, bufferInfo);
         byteBuf.position(bufferInfo.offset);
         byteBuf.limit(bufferInfo.offset + bufferInfo.size);
+
         fc.write(byteBuf);
         dataOffset += bufferInfo.size;
 
         if (flush) {
             fos.flush();
         }
+        return flush;
     }
 
-    public int addTrack(MediaFormat mediaFormat, boolean isVideo) throws Exception {
-        return currentMp4Movie.addTrack(mediaFormat, isVideo);
+    public int addTrack(MediaFormat mediaFormat, boolean isAudio) throws Exception {
+        return currentMp4Movie.addTrack(mediaFormat, isAudio);
     }
 
     public void finishMovie(boolean error) throws Exception {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java b/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
index 4492bc312..5fea2eb3d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
@@ -74,8 +74,8 @@ public void addSample(int trackIndex, long offset, MediaCodec.BufferInfo bufferI
         track.addSample(offset, bufferInfo);
     }
 
-    public int addTrack(MediaFormat mediaFormat, boolean isVideo) throws Exception {
-        tracks.add(new Track(tracks.size(), mediaFormat, isVideo));
+    public int addTrack(MediaFormat mediaFormat, boolean isAudio) throws Exception {
+        tracks.add(new Track(tracks.size(), mediaFormat, isAudio));
         return tracks.size() - 1;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java b/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
index 6511d9608..d01b7225a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
@@ -18,32 +18,44 @@
 
 import android.annotation.TargetApi;
 import android.graphics.SurfaceTexture;
-import android.opengl.EGL14;
+import android.opengl.GLES20;
 import android.view.Surface;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
 import javax.microedition.khronos.egl.EGL10;
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.egl.EGLContext;
 import javax.microedition.khronos.egl.EGLDisplay;
 import javax.microedition.khronos.egl.EGLSurface;
 
-@TargetApi(17)
+@TargetApi(16)
 public class OutputSurface implements SurfaceTexture.OnFrameAvailableListener {
 
     private static final int EGL_OPENGL_ES2_BIT = 4;
+    private static final int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
     private EGL10 mEGL;
-    private EGLDisplay mEGLDisplay;
-    private EGLContext mEGLContext;
-    private EGLSurface mEGLSurface;
+    private EGLDisplay mEGLDisplay = null;
+    private EGLContext mEGLContext = null;
+    private EGLSurface mEGLSurface = null;
     private SurfaceTexture mSurfaceTexture;
     private Surface mSurface;
     private final Object mFrameSyncObject = new Object();
     private boolean mFrameAvailable;
     private TextureRenderer mTextureRender;
+    private int mWidth;
+    private int mHeight;
+    private ByteBuffer mPixelBuf;
 
     public OutputSurface(int width, int height) {
         if (width <= 0 || height <= 0) {
             throw new IllegalArgumentException();
         }
+        mWidth = width;
+        mHeight = height;
+        mPixelBuf = ByteBuffer.allocateDirect(mWidth * mHeight * 4);
+        mPixelBuf.order(ByteOrder.LITTLE_ENDIAN);
         eglSetup(width, height);
         makeCurrent();
         setup();
@@ -64,28 +76,35 @@ private void setup() {
     private void eglSetup(int width, int height) {
         mEGL = (EGL10) EGLContext.getEGL();
         mEGLDisplay = mEGL.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
+
+        if (mEGLDisplay == EGL10.EGL_NO_DISPLAY) {
+            throw new RuntimeException("unable to get EGL10 display");
+        }
+
         if (!mEGL.eglInitialize(mEGLDisplay, null)) {
+            mEGLDisplay = null;
             throw new RuntimeException("unable to initialize EGL10");
         }
+
         int[] attribList = {
                 EGL10.EGL_RED_SIZE, 8,
                 EGL10.EGL_GREEN_SIZE, 8,
                 EGL10.EGL_BLUE_SIZE, 8,
+                EGL10.EGL_ALPHA_SIZE, 8,
                 EGL10.EGL_SURFACE_TYPE, EGL10.EGL_PBUFFER_BIT,
                 EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
                 EGL10.EGL_NONE
         };
         EGLConfig[] configs = new EGLConfig[1];
         int[] numConfigs = new int[1];
-        if (!mEGL.eglChooseConfig(mEGLDisplay, attribList, configs, 1, numConfigs)) {
+        if (!mEGL.eglChooseConfig(mEGLDisplay, attribList, configs, configs.length, numConfigs)) {
             throw new RuntimeException("unable to find RGB888+pbuffer EGL config");
         }
         int[] attrib_list = {
-                EGL14.EGL_CONTEXT_CLIENT_VERSION, 2,
+                EGL_CONTEXT_CLIENT_VERSION, 2,
                 EGL10.EGL_NONE
         };
-        mEGLContext = mEGL.eglCreateContext(mEGLDisplay, configs[0], EGL10.EGL_NO_CONTEXT,
-                attrib_list);
+        mEGLContext = mEGL.eglCreateContext(mEGLDisplay, configs[0], EGL10.EGL_NO_CONTEXT, attrib_list);
         checkEglError("eglCreateContext");
         if (mEGLContext == null) {
             throw new RuntimeException("null context");
@@ -139,7 +158,7 @@ public void changeFragmentShader(String fragmentShader) {
     }
 
     public void awaitNewImage() {
-        final int TIMEOUT_MS = 500;
+        final int TIMEOUT_MS = 2500;
         synchronized (mFrameSyncObject) {
             while (!mFrameAvailable) {
                 try {
@@ -157,8 +176,8 @@ public void awaitNewImage() {
         mSurfaceTexture.updateTexImage();
     }
 
-    public void drawImage() {
-        mTextureRender.drawFrame(mSurfaceTexture);
+    public void drawImage(boolean invert) {
+        mTextureRender.drawFrame(mSurfaceTexture, invert);
     }
 
     @Override
@@ -172,6 +191,12 @@ public void onFrameAvailable(SurfaceTexture st) {
         }
     }
 
+    public ByteBuffer getFrame() {
+        mPixelBuf.rewind();
+        GLES20.glReadPixels(0, 0, mWidth, mHeight, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPixelBuf);
+        return mPixelBuf;
+    }
+
     private void checkEglError(String msg) {
         if (mEGL.eglGetError() != EGL10.EGL_SUCCESS) {
             throw new RuntimeException("EGL error encountered (see log)");
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java b/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
index 7b09eeb36..550ced58c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
@@ -26,38 +26,41 @@
 import android.opengl.GLES20;
 import android.opengl.Matrix;
 
-@TargetApi(17)
+@TargetApi(16)
 public class TextureRenderer {
+
     private static final int FLOAT_SIZE_BYTES = 4;
     private static final int TRIANGLE_VERTICES_DATA_STRIDE_BYTES = 5 * FLOAT_SIZE_BYTES;
     private static final int TRIANGLE_VERTICES_DATA_POS_OFFSET = 0;
     private static final int TRIANGLE_VERTICES_DATA_UV_OFFSET = 3;
     private static final float[] mTriangleVerticesData = {
-            // X, Y, Z, U, V
             -1.0f, -1.0f, 0, 0.f, 0.f,
             1.0f, -1.0f, 0, 1.f, 0.f,
             -1.0f, 1.0f, 0, 0.f, 1.f,
             1.0f, 1.0f, 0, 1.f, 1.f,
     };
     private FloatBuffer mTriangleVertices;
+
     private static final String VERTEX_SHADER =
             "uniform mat4 uMVPMatrix;\n" +
-                    "uniform mat4 uSTMatrix;\n" +
-                    "attribute vec4 aPosition;\n" +
-                    "attribute vec4 aTextureCoord;\n" +
-                    "varying vec2 vTextureCoord;\n" +
-                    "void main() {\n" +
-                    "  gl_Position = uMVPMatrix * aPosition;\n" +
-                    "  vTextureCoord = (uSTMatrix * aTextureCoord).xy;\n" +
-                    "}\n";
+            "uniform mat4 uSTMatrix;\n" +
+            "attribute vec4 aPosition;\n" +
+            "attribute vec4 aTextureCoord;\n" +
+            "varying vec2 vTextureCoord;\n" +
+            "void main() {\n" +
+            "  gl_Position = uMVPMatrix * aPosition;\n" +
+            "  vTextureCoord = (uSTMatrix * aTextureCoord).xy;\n" +
+            "}\n";
+
     private static final String FRAGMENT_SHADER =
             "#extension GL_OES_EGL_image_external : require\n" +
-                    "precision mediump float;\n" +      // highp here doesn't seem to matter
-                    "varying vec2 vTextureCoord;\n" +
-                    "uniform samplerExternalOES sTexture;\n" +
-                    "void main() {\n" +
-                    "  gl_FragColor = texture2D(sTexture, vTextureCoord);\n" +
-                    "}\n";
+            "precision mediump float;\n" +
+            "varying vec2 vTextureCoord;\n" +
+            "uniform samplerExternalOES sTexture;\n" +
+            "void main() {\n" +
+            "  gl_FragColor = texture2D(sTexture, vTextureCoord);\n" +
+            "}\n";
+
     private float[] mMVPMatrix = new float[16];
     private float[] mSTMatrix = new float[16];
     private int mProgram;
@@ -77,11 +80,15 @@ public int getTextureId() {
         return mTextureID;
     }
 
-    public void drawFrame(SurfaceTexture st) {
+    public void drawFrame(SurfaceTexture st, boolean invert) {
         checkGlError("onDrawFrame start");
         st.getTransformMatrix(mSTMatrix);
-        GLES20.glClearColor(0.0f, 1.0f, 0.0f, 1.0f);
-        GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
+
+        if (invert) {
+            mSTMatrix[5] = -mSTMatrix[5];
+            mSTMatrix[13] = 1.0f - mSTMatrix[13];
+        }
+
         GLES20.glUseProgram(mProgram);
         checkGlError("glUseProgram");
         GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
@@ -96,9 +103,8 @@ public void drawFrame(SurfaceTexture st) {
         checkGlError("glVertexAttribPointer maTextureHandle");
         GLES20.glEnableVertexAttribArray(maTextureHandle);
         checkGlError("glEnableVertexAttribArray maTextureHandle");
-        Matrix.setIdentityM(mMVPMatrix, 0);
-        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);
         GLES20.glUniformMatrix4fv(muSTMatrixHandle, 1, false, mSTMatrix, 0);
+        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);
         GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
         checkGlError("glDrawArrays");
         GLES20.glFinish();
@@ -139,6 +145,8 @@ public void surfaceCreated() {
         GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
         GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
         checkGlError("glTexParameter");
+
+        Matrix.setIdentityM(mMVPMatrix, 0);
     }
 
     public void changeFragmentShader(String fragmentShader) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java b/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
index b2eabafdf..3131a00ce 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
@@ -67,9 +67,9 @@
         samplingFrequencyIndexMap.put(8000, 0xb);
     }
 
-    public Track(int id, MediaFormat format, boolean isVideo) throws Exception {
+    public Track(int id, MediaFormat format, boolean isAudio) throws Exception {
         trackId = id;
-        if (isVideo) {
+        if (!isAudio) {
             sampleDurations.add((long)3015);
             duration = 3015;
             width = format.getInteger(MediaFormat.KEY_WIDTH);
@@ -79,46 +79,62 @@ public Track(int id, MediaFormat format, boolean isVideo) throws Exception {
             handler = "vide";
             headerBox = new VideoMediaHeaderBox();
             sampleDescriptionBox = new SampleDescriptionBox();
-            VisualSampleEntry visualSampleEntry = new VisualSampleEntry("avc1");
-            visualSampleEntry.setDataReferenceIndex(1);
-            visualSampleEntry.setDepth(24);
-            visualSampleEntry.setFrameCount(1);
-            visualSampleEntry.setHorizresolution(72);
-            visualSampleEntry.setVertresolution(72);
-            visualSampleEntry.setWidth(width);
-            visualSampleEntry.setHeight(height);
-
-            AvcConfigurationBox avcConfigurationBox = new AvcConfigurationBox();
-
-            ArrayList<byte[]> spsArray = new ArrayList<byte[]>();
-            ByteBuffer spsBuff = format.getByteBuffer("csd-0");
-            spsBuff.position(4);
-            byte[] spsBytes = new byte[spsBuff.remaining()];
-            spsBuff.get(spsBytes);
-            spsArray.add(spsBytes);
-
-            ArrayList<byte[]> ppsArray = new ArrayList<byte[]>();
-            ByteBuffer ppsBuff = format.getByteBuffer("csd-1");
-            ppsBuff.position(4);
-            byte[] ppsBytes = new byte[ppsBuff.remaining()];
-            ppsBuff.get(ppsBytes);
-            ppsArray.add(ppsBytes);
-            //ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(spsBytes);
-            //SeqParameterSet seqParameterSet = SeqParameterSet.read(byteArrayInputStream);
-
-            avcConfigurationBox.setSequenceParameterSets(spsArray);
-            avcConfigurationBox.setPictureParameterSets(ppsArray);
-            avcConfigurationBox.setAvcLevelIndication(13);
-            avcConfigurationBox.setAvcProfileIndication(100);
-            avcConfigurationBox.setBitDepthLumaMinus8(-1);
-            avcConfigurationBox.setBitDepthChromaMinus8(-1);
-            avcConfigurationBox.setChromaFormat(-1);
-            avcConfigurationBox.setConfigurationVersion(1);
-            avcConfigurationBox.setLengthSizeMinusOne(3);
-            avcConfigurationBox.setProfileCompatibility(0);
-
-            visualSampleEntry.addBox(avcConfigurationBox);
-            sampleDescriptionBox.addBox(visualSampleEntry);
+            String mime = format.getString(MediaFormat.KEY_MIME);
+            if (mime.equals("video/avc")) {
+                VisualSampleEntry visualSampleEntry = new VisualSampleEntry("avc1");
+                visualSampleEntry.setDataReferenceIndex(1);
+                visualSampleEntry.setDepth(24);
+                visualSampleEntry.setFrameCount(1);
+                visualSampleEntry.setHorizresolution(72);
+                visualSampleEntry.setVertresolution(72);
+                visualSampleEntry.setWidth(width);
+                visualSampleEntry.setHeight(height);
+
+                AvcConfigurationBox avcConfigurationBox = new AvcConfigurationBox();
+
+                if (format.getByteBuffer("csd-0") != null) {
+                    ArrayList<byte[]> spsArray = new ArrayList<byte[]>();
+                    ByteBuffer spsBuff = format.getByteBuffer("csd-0");
+                    spsBuff.position(4);
+                    byte[] spsBytes = new byte[spsBuff.remaining()];
+                    spsBuff.get(spsBytes);
+                    spsArray.add(spsBytes);
+
+                    ArrayList<byte[]> ppsArray = new ArrayList<byte[]>();
+                    ByteBuffer ppsBuff = format.getByteBuffer("csd-1");
+                    ppsBuff.position(4);
+                    byte[] ppsBytes = new byte[ppsBuff.remaining()];
+                    ppsBuff.get(ppsBytes);
+                    ppsArray.add(ppsBytes);
+                    avcConfigurationBox.setSequenceParameterSets(spsArray);
+                    avcConfigurationBox.setPictureParameterSets(ppsArray);
+                }
+                //ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(spsBytes);
+                //SeqParameterSet seqParameterSet = SeqParameterSet.read(byteArrayInputStream);
+
+                avcConfigurationBox.setAvcLevelIndication(13);
+                avcConfigurationBox.setAvcProfileIndication(100);
+                avcConfigurationBox.setBitDepthLumaMinus8(-1);
+                avcConfigurationBox.setBitDepthChromaMinus8(-1);
+                avcConfigurationBox.setChromaFormat(-1);
+                avcConfigurationBox.setConfigurationVersion(1);
+                avcConfigurationBox.setLengthSizeMinusOne(3);
+                avcConfigurationBox.setProfileCompatibility(0);
+
+                visualSampleEntry.addBox(avcConfigurationBox);
+                sampleDescriptionBox.addBox(visualSampleEntry);
+            } else if (mime.equals("video/mp4v")) {
+                VisualSampleEntry visualSampleEntry = new VisualSampleEntry("mp4v");
+                visualSampleEntry.setDataReferenceIndex(1);
+                visualSampleEntry.setDepth(24);
+                visualSampleEntry.setFrameCount(1);
+                visualSampleEntry.setHorizresolution(72);
+                visualSampleEntry.setVertresolution(72);
+                visualSampleEntry.setWidth(width);
+                visualSampleEntry.setHeight(height);
+
+                sampleDescriptionBox.addBox(visualSampleEntry);
+            }
         } else {
             sampleDurations.add((long)1024);
             duration = 1024;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index cb2b2165a..583466a0a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -50,6 +50,8 @@
     private String ext;
     private RandomAccessFile fileOutputStream;
     private RandomAccessFile fiv;
+    private File storePath = null;
+    private File tempPath = null;
 
     public static interface FileLoadOperationDelegate {
         public abstract void didFinishLoadingFile(FileLoadOperation operation, File finalFile, File tempFile);
@@ -113,7 +115,7 @@ public FileLoadOperation(TLRPC.Audio audioLocation) {
             location.access_hash = audioLocation.access_hash;
         }
         totalBytesCount = audioLocation.size;
-        ext = ".m4a";
+        ext = ".ogg";
     }
 
     public FileLoadOperation(TLRPC.Document documentLocation) {
@@ -144,6 +146,11 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
         }
     }
 
+    public void setPaths(File store, File temp) {
+        storePath = store;
+        tempPath = temp;
+    }
+
     public void start() {
         if (state != stateIdle) {
             return;
@@ -186,7 +193,7 @@ public void run() {
             }
         }
 
-        cacheFileFinal = new File(FileLoader.getInstance().getCacheDir(), fileNameFinal);
+        cacheFileFinal = new File(storePath, fileNameFinal);
         boolean exist = cacheFileFinal.exists();
         if (exist && totalBytesCount != 0 && totalBytesCount != cacheFileFinal.length()) {
             exist = false;
@@ -194,13 +201,13 @@ public void run() {
         }
 
         if (!cacheFileFinal.exists()) {
-            cacheFileTemp = new File(FileLoader.getInstance().getCacheDir(), fileNameTemp);
+            cacheFileTemp = new File(tempPath, fileNameTemp);
             if (cacheFileTemp.exists()) {
                 downloadedBytes = (int)cacheFileTemp.length();
                 nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
             }
             if (fileNameIv != null) {
-                cacheIvTemp = new File(FileLoader.getInstance().getCacheDir(), fileNameIv);
+                cacheIvTemp = new File(tempPath, fileNameIv);
                 try {
                     fiv = new RandomAccessFile(cacheIvTemp, "rws");
                     long len = cacheIvTemp.length();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 1f18873e4..cb9880140 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -9,6 +9,8 @@
 package org.telegram.messenger;
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Semaphore;
@@ -22,10 +24,15 @@
         public abstract void fileDidLoaded(String location, File finalFile, File tempFile);
         public abstract void fileDidFailedLoad(String location, boolean canceled);
         public abstract void fileLoadProgressChanged(String location, float progress);
-        public abstract File getCacheDir();
     }
 
-    protected File destinationDir = null;
+    public static final int MEDIA_DIR_IMAGE = 0;
+    public static final int MEDIA_DIR_AUDIO = 1;
+    public static final int MEDIA_DIR_VIDEO = 2;
+    public static final int MEDIA_DIR_DOCUMENT = 3;
+    public static final int MEDIA_DIR_CACHE = 4;
+
+    private HashMap<Integer, File> mediaDirs = null;
     private volatile DispatchQueue fileLoaderQueue = new DispatchQueue("fileUploadQueue");
 
     private LinkedList<FileUploadOperation> uploadOperationQueue = new LinkedList<FileUploadOperation>();
@@ -37,6 +44,7 @@
     private ConcurrentHashMap<String, FileUploadOperation> uploadOperationPathsEnc = new ConcurrentHashMap<String, FileUploadOperation>();
     private ConcurrentHashMap<String, FileLoadOperation> loadOperationPaths = new ConcurrentHashMap<String, FileLoadOperation>();
     private ConcurrentHashMap<String, Float> fileProgresses = new ConcurrentHashMap<String, Float>();
+    private HashMap<String, Long> uploadSizes = new HashMap<String, Long>();
 
     private FileLoaderDelegate delegate = null;
 
@@ -60,6 +68,18 @@ public static FileLoader getInstance() {
         return localInstance;
     }
 
+    public void setMediaDirs(HashMap<Integer, File> dirs) {
+        mediaDirs = dirs;
+    }
+
+    public File getDirectory(int type) {
+        File dir = mediaDirs.get(type);
+        if (dir == null && type != MEDIA_DIR_CACHE) {
+            return mediaDirs.get(MEDIA_DIR_CACHE);
+        }
+        return dir;
+    }
+
     public void cancelUploadFile(final String location, final boolean enc) {
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
@@ -70,6 +90,7 @@ public void run() {
                 } else {
                     operation = uploadOperationPathsEnc.get(location);
                 }
+                uploadSizes.remove(location);
                 if (operation != null) {
                     uploadOperationQueue.remove(operation);
                     uploadSmallOperationQueue.remove(operation);
@@ -95,6 +116,8 @@ public void run() {
                 }
                 if (operation != null) {
                     operation.checkNewDataAvailable(finalSize);
+                } else if (finalSize != 0) {
+                    uploadSizes.put(location, finalSize);
                 }
             }
         });
@@ -117,7 +140,15 @@ public void run() {
                         return;
                     }
                 }
-                FileUploadOperation operation = new FileUploadOperation(location, encrypted, estimatedSize);
+                int esimated = estimatedSize;
+                if (esimated != 0) {
+                    Long finalSize = uploadSizes.get(location);
+                    if (finalSize != null) {
+                        esimated = 0;
+                        uploadSizes.remove(location);
+                    }
+                }
+                FileUploadOperation operation = new FileUploadOperation(location, encrypted, esimated);
                 if (encrypted) {
                     uploadOperationPathsEnc.put(location, operation);
                 } else {
@@ -312,26 +343,26 @@ public void run() {
     }
 
     public void loadFile(TLRPC.Video video) {
-        loadFile(video, null, null, null, 0, false);
+        loadFile(video, null, null, null, 0, false, video != null && video.key != null);
     }
 
-    public void loadFile(TLRPC.PhotoSize photo) {
-        loadFile(null, null, null, photo.location, photo.size, false);
+    public void loadFile(TLRPC.PhotoSize photo, boolean cacheOnly) {
+        loadFile(null, null, null, photo.location, photo.size, false, cacheOnly || (photo != null && photo.size == 0 || photo.location.key != null));
     }
 
     public void loadFile(TLRPC.Document document) {
-        loadFile(null, document, null, null, 0, false);
+        loadFile(null, document, null, null, 0, false, document != null && document.key != null);
     }
 
     public void loadFile(TLRPC.Audio audio, boolean force) {
-        loadFile(null, null, audio, null, 0, false);
+        loadFile(null, null, audio, null, 0, false, audio != null && audio.key != null);
     }
 
-    public void loadFile(TLRPC.FileLocation location, int size) {
-        loadFile(null, null, null, location, size, true);
+    public void loadFile(TLRPC.FileLocation location, int size, boolean cacheOnly) {
+        loadFile(null, null, null, location, size, true, cacheOnly || size == 0 || (location != null && location.key != null));
     }
 
-    private void loadFile(final TLRPC.Video video, final TLRPC.Document document, final TLRPC.Audio audio, final TLRPC.FileLocation location, final int locationSize, final boolean force) {
+    private void loadFile(final TLRPC.Video video, final TLRPC.Document document, final TLRPC.Audio audio, final TLRPC.FileLocation location, final int locationSize, final boolean force, final boolean cacheOnly) {
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -372,15 +403,31 @@ public void run() {
                     return;
                 }
 
+                File tempDir = getDirectory(MEDIA_DIR_CACHE);
+                File storeDir = tempDir;
+
                 if (video != null) {
                     operation = new FileLoadOperation(video);
+                    if (!cacheOnly) {
+                        storeDir = getDirectory(MEDIA_DIR_VIDEO);
+                    }
                 } else if (location != null) {
                     operation = new FileLoadOperation(location, locationSize);
+                    if (!cacheOnly) {
+                        storeDir = getDirectory(MEDIA_DIR_IMAGE);
+                    }
                 } else if (document != null) {
                     operation = new FileLoadOperation(document);
+                    if (!cacheOnly) {
+                        storeDir = getDirectory(MEDIA_DIR_DOCUMENT);
+                    }
                 } else if (audio != null) {
                     operation = new FileLoadOperation(audio);
+                    if (!cacheOnly) {
+                        storeDir = getDirectory(MEDIA_DIR_AUDIO);
+                    }
                 }
+                operation.setPaths(storeDir, tempDir);
 
                 final String arg1 = fileName;
                 loadOperationPaths.put(fileName, operation);
@@ -519,8 +566,92 @@ public void setDelegate(FileLoaderDelegate delegate) {
         this.delegate = delegate;
     }
 
-    protected File getCacheDir() {
-        return delegate == null ? null : delegate.getCacheDir();
+    public static File getPathToMessage(TLRPC.Message message) {
+        if (message == null) {
+            return new File("");
+        }
+        if (message.media instanceof TLRPC.TL_messageMediaVideo) {
+            return getPathToAttach(message.media.video);
+        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+            return getPathToAttach(message.media.document);
+        } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
+            return getPathToAttach(message.media.audio);
+        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+            ArrayList<TLRPC.PhotoSize> sizes = message.media.photo.sizes;
+            if (sizes.size() > 0) {
+                TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, 800, 800);
+                if (sizeFull != null) {
+                    return getPathToAttach(sizeFull);
+                }
+            }
+        }
+        return new File("");
+    }
+
+    public static File getPathToAttach(TLObject attach) {
+        File dir = null;
+        if (attach instanceof TLRPC.Video) {
+            TLRPC.Video video = (TLRPC.Video)attach;
+            if (video.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_VIDEO);
+            }
+        } else if (attach instanceof TLRPC.Document) {
+            TLRPC.Document document = (TLRPC.Document)attach;
+            if (document.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_DOCUMENT);
+            }
+        } else if (attach instanceof TLRPC.PhotoSize) {
+            TLRPC.PhotoSize photoSize = (TLRPC.PhotoSize)attach;
+            if (photoSize.location == null || photoSize.location.key != null || photoSize.location.volume_id == Integer.MIN_VALUE && photoSize.location.local_id < 0) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
+            }
+        } else if (attach instanceof TLRPC.Audio) {
+            TLRPC.Audio audio = (TLRPC.Audio)attach;
+            if (audio.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_AUDIO);
+            }
+        } else if (attach instanceof TLRPC.FileLocation) {
+            TLRPC.FileLocation fileLocation = (TLRPC.FileLocation)attach;
+            if (fileLocation.key != null || fileLocation.volume_id == Integer.MIN_VALUE && fileLocation.local_id < 0) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
+            }
+        }
+        if (dir == null) {
+            return new File("");
+        }
+        return new File(dir, getAttachFileName(attach));
+    }
+
+    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int width, int height) {
+        if (sizes == null) {
+            return null;
+        }
+        int closestWidth = 9999;
+        int closestHeight = 9999;
+        TLRPC.PhotoSize closestObject = null;
+        for (TLRPC.PhotoSize obj : sizes) {
+            if (obj == null) {
+                continue;
+            }
+            int diffW = Math.abs(obj.w - width);
+            int diffH = Math.abs(obj.h - height);
+            if (closestObject == null || closestObject instanceof TLRPC.TL_photoCachedSize || closestWidth > diffW || closestHeight > diffH) {
+                closestObject = obj;
+                closestWidth = diffW;
+                closestHeight = diffH;
+            }
+        }
+        return closestObject;
     }
 
     public static String getAttachFileName(TLObject attach) {
@@ -549,7 +680,7 @@ public static String getAttachFileName(TLObject attach) {
             return photo.location.volume_id + "_" + photo.location.local_id + ".jpg";
         } else if (attach instanceof TLRPC.Audio) {
             TLRPC.Audio audio = (TLRPC.Audio)attach;
-            return audio.dc_id + "_" + audio.id + ".m4a";
+            return audio.dc_id + "_" + audio.id + ".ogg";
         } else if (attach instanceof TLRPC.FileLocation) {
             TLRPC.FileLocation location = (TLRPC.FileLocation)attach;
             return location.volume_id + "_" + location.local_id + ".jpg";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 88cb53573..41247b7f4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -14,7 +14,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.res.Configuration;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
@@ -51,7 +50,6 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.zip.GZIPInputStream;
@@ -74,23 +72,6 @@
     public static volatile DispatchQueue searchQueue = new DispatchQueue("searchQueue");
     public static volatile DispatchQueue photoBookQueue = new DispatchQueue("photoBookQueue");
 
-    public static int[] arrColors = {0xffee4928, 0xff41a903, 0xffe09602, 0xff0f94ed, 0xff8f3bf7, 0xfffc4380, 0xff00a1c4, 0xffeb7002};
-    public static int[] arrUsersAvatars = {
-            R.drawable.user_red,
-            R.drawable.user_green,
-            R.drawable.user_yellow,
-            R.drawable.user_blue,
-            R.drawable.user_violet,
-            R.drawable.user_pink,
-            R.drawable.user_aqua,
-            R.drawable.user_orange};
-
-    public static int[] arrGroupsAvatars = {
-            R.drawable.group_green,
-            R.drawable.group_red,
-            R.drawable.group_blue,
-            R.drawable.group_yellow};
-
     final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
 
     public static ProgressDialog progressDialog;
@@ -132,6 +113,7 @@
     public native static long doPQNative(long _what);
     public native static void loadBitmap(String path, int[] bitmap, int scale, int format, int width, int height);
     public native static void blurBitmap(Object bitmap);
+    public native static int convertVideoFrame(ByteBuffer src, ByteBuffer dest, int destFormat, int width, int height, int padding, int swap);
     private native static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, int offset, int length);
 
     public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, boolean changeIv, int offset, int length) {
@@ -509,54 +491,6 @@ public static boolean copyFile(File sourceFile, File destFile) throws IOExceptio
         return true;
     }
 
-    public static int getColorIndex(int id) {
-        int[] arr;
-        if (id >= 0) {
-            arr = arrUsersAvatars;
-        } else {
-            arr = arrGroupsAvatars;
-        }
-        try {
-            String str;
-            if (id >= 0) {
-                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
-            } else {
-                str = String.format(Locale.US, "%d", id);
-            }
-            if (str.length() > 15) {
-                str = str.substring(0, 15);
-            }
-            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
-            byte[] digest = md.digest(str.getBytes());
-            int b = digest[Math.abs(id % 16)];
-            if (b < 0) {
-                b += 256;
-            }
-            return Math.abs(b) % arr.length;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return id % arr.length;
-    }
-
-    public static int getColorForId(int id) {
-        if (id / 1000 == 333) {
-            return 0xff0f94ed;
-        }
-        return arrColors[getColorIndex(id)];
-    }
-
-    public static int getUserAvatarForId(int id) {
-        if (id / 1000 == 333 || id / 1000 == 777) {
-            return R.drawable.telegram_avatar;
-        }
-        return arrUsersAvatars[getColorIndex(id)];
-    }
-
-    public static int getGroupAvatarForId(int id) {
-        return arrGroupsAvatars[getColorIndex(-Math.abs(id))];
-    }
-
     public static String MD5(String md5) {
         if (md5 == null) {
             return null;
@@ -757,16 +691,6 @@ public static File generateVideoPath() {
         return null;
     }
 
-    public static String formatName(String firstName, String lastName) {
-        String result = firstName;
-        if (result == null || result.length() == 0) {
-            result = lastName;
-        } else if (result.length() != 0 && lastName != null && lastName.length() != 0) {
-            result += " " + lastName;
-        }
-        return result.trim();
-    }
-
     public static String formatFileSize(long size) {
         if (size < 1024) {
             return String.format("%d B", size);
@@ -816,8 +740,4 @@ public static void checkForUpdates(Activity context) {
             UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
         }
     }
-
-    public static boolean isTablet(Context context) {
-        return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index bedb1568f..fba3f0ccb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -23,7 +23,6 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
 import org.telegram.android.ImageReceiver;
 import org.telegram.ui.Views.ProgressView;
@@ -218,7 +217,7 @@ public void downloadAudioIfNeed() {
 
     public void updateButtonState() {
         String fileName = currentMessageObject.getFileName();
-        File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
         if (cacheFile.exists()) {
             MediaController.getInstance().removeLoadingFileObserver(this);
             boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
@@ -355,9 +354,9 @@ public void setMessageObject(MessageObject messageObject) {
                 if (audioUser.photo != null) {
                     currentPhoto = audioUser.photo.photo_small;
                 }
-                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(Utilities.getUserAvatarForId(uid)));
+                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)));
             } else {
-                avatarImage.setImage((TLRPC.FileLocation)null, "50_50", getResources().getDrawable(Utilities.getUserAvatarForId(uid)));
+                avatarImage.setImage((TLRPC.FileLocation)null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)));
             }
 
             if (messageObject.isOut()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index f7e73fc5b..700a43bc6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -23,11 +23,11 @@
 import android.view.ViewConfiguration;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
 import org.telegram.android.ImageReceiver;
 
@@ -233,7 +233,7 @@ protected boolean isUserDataChanged() {
 
         String newNameString = null;
         if (drawName && isChat && newUser != null && !currentMessageObject.isOut()) {
-            newNameString = Utilities.formatName(newUser.first_name, newUser.last_name);
+            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
         }
 
         if (currentNameString == null && newNameString != null || currentNameString != null && newNameString == null || currentNameString != null && newNameString != null && !currentNameString.equals(newNameString)) {
@@ -243,7 +243,7 @@ protected boolean isUserDataChanged() {
         newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.fwd_from_id);
         newNameString = null;
         if (newUser != null && drawForwardedName && currentMessageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
-            newNameString = Utilities.formatName(newUser.first_name, newUser.last_name);
+            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
         }
         return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
     }
@@ -265,7 +265,7 @@ public void setMessageObject(MessageObject messageObject) {
                 } else {
                     currentPhoto = null;
                 }
-                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(Utilities.getUserAvatarForId(currentUser.id)));
+                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(currentUser.id)));
             } else {
                 avatarImage.setImage((TLRPC.FileLocation)null, "50_50", null);
             }
@@ -287,7 +287,7 @@ public void setMessageObject(MessageObject messageObject) {
         namesOffset = 0;
 
         if (drawName && isChat && currentUser != null && !currentMessageObject.isOut()) {
-            currentNameString = Utilities.formatName(currentUser.first_name, currentUser.last_name);
+            currentNameString = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
             nameWidth = getMaxNameWidth();
 
             CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
@@ -308,7 +308,7 @@ public void setMessageObject(MessageObject messageObject) {
         if (drawForwardedName && messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
             currentForwardUser = MessagesController.getInstance().getUser(messageObject.messageOwner.fwd_from_id);
             if (currentForwardUser != null) {
-                currentForwardNameString = Utilities.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
+                currentForwardNameString = ContactsController.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
 
                 forwardedNameWidth = getMaxNameWidth();
 
@@ -520,7 +520,7 @@ protected void onDraw(Canvas canvas) {
         if (drawName && nameLayout != null) {
             canvas.save();
             canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-            namePaint.setColor(Utilities.getColorForId(currentUser.id));
+            namePaint.setColor(AndroidUtilities.getColorForId(currentUser.id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 4fb3017c6..f8085efa6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -11,6 +11,7 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.graphics.RectF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
@@ -19,6 +20,7 @@
 import android.text.TextUtils;
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
+import android.view.animation.DecelerateInterpolator;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
@@ -34,7 +36,6 @@
 import org.telegram.ui.PhotoViewer;
 import org.telegram.ui.Views.GifDrawable;
 import org.telegram.android.ImageReceiver;
-import org.telegram.ui.Views.RoundProgressView;
 
 import java.io.File;
 import java.util.Locale;
@@ -43,6 +44,7 @@
 
     public static interface ChatMediaCellDelegate {
         public abstract void didPressedImage(ChatMediaCell cell);
+        public abstract void didPressedOther(ChatMediaCell cell);
     }
 
     private static Drawable placeholderInDrawable;
@@ -50,12 +52,16 @@
     private static Drawable placeholderDocInDrawable;
     private static Drawable placeholderDocOutDrawable;
     private static Drawable videoIconDrawable;
+    private static Drawable docMenuInDrawable;
+    private static Drawable docMenuOutDrawable;
     private static Drawable[] buttonStatesDrawables = new Drawable[4];
     private static Drawable[][] buttonStatesDrawablesDoc = new Drawable[2][2];
     private static TextPaint infoPaint;
     private static MessageObject lastDownloadedGifMessage = null;
     private static TextPaint namePaint;
     private static Paint docBackPaint;
+    private static Paint progressPaint;
+    private static DecelerateInterpolator decelerateInterpolator;
 
     private GifDrawable gifDrawable = null;
 
@@ -65,7 +71,6 @@
     private String currentUrl;
     private String currentPhotoFilter;
     private ImageReceiver photoImage;
-    private RoundProgressView progressView;
     private boolean progressVisible = false;
     private boolean photoNotSet = false;
     private boolean cancelLoading = false;
@@ -75,6 +80,7 @@
     private int buttonState = 0;
     private int buttonPressed = 0;
     private boolean imagePressed = false;
+    private boolean otherPressed = false;
     private int buttonX;
     private int buttonY;
 
@@ -91,6 +97,15 @@
 
     public ChatMediaCellDelegate mediaDelegate = null;
 
+    private float currentProgress = 0;
+    private RectF progressRect = new RectF();
+    private long lastUpdateTime = 0;
+    private boolean animationStarted = false;
+    private float radOffset = 0;
+    private float animatedProgressValue = 0;
+    private long currentProgressTime = 0;
+    private float animationProgressStart = 0;
+
     public ChatMediaCell(Context context) {
         super(context);
 
@@ -108,6 +123,8 @@ public ChatMediaCell(Context context) {
             buttonStatesDrawablesDoc[0][1] = getResources().getDrawable(R.drawable.docload_g);
             buttonStatesDrawablesDoc[1][1] = getResources().getDrawable(R.drawable.doccancel_g);
             videoIconDrawable = getResources().getDrawable(R.drawable.ic_video);
+            docMenuInDrawable = getResources().getDrawable(R.drawable.doc_actions_b);
+            docMenuOutDrawable = getResources().getDrawable(R.drawable.doc_actions_g);
 
             infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             infoPaint.setTextSize(AndroidUtilities.dp(12));
@@ -117,12 +134,17 @@ public ChatMediaCell(Context context) {
             namePaint.setTextSize(AndroidUtilities.dp(16));
 
             docBackPaint = new Paint();
+
+            progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            progressPaint.setStyle(Paint.Style.STROKE);
+            progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+
+            decelerateInterpolator = new DecelerateInterpolator();
         }
 
         TAG = MediaController.getInstance().generateObserverTag();
 
         photoImage = new ImageReceiver(this);
-        progressView = new RoundProgressView();
     }
 
     public void clearGifImage() {
@@ -161,9 +183,21 @@ public boolean onTouchEvent(MotionEvent event) {
                     buttonPressed = 1;
                     invalidate();
                     result = true;
-                } else if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                    imagePressed = true;
-                    result = true;
+                } else {
+                    if (currentMessageObject.type == 9) {
+                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            imagePressed = true;
+                            result = true;
+                        } else if (x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            otherPressed = true;
+                            result = true;
+                        }
+                    } else {
+                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            imagePressed = true;
+                            result = true;
+                        }
+                    }
                 }
                 if (result) {
                     startCheckLongPress();
@@ -198,9 +232,32 @@ public boolean onTouchEvent(MotionEvent event) {
                     imagePressed = false;
                     invalidate();
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!photoImage.isInsideImage(x, y)) {
-                        imagePressed = false;
-                        invalidate();
+                    if (currentMessageObject.type == 9) {
+                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                            imagePressed = false;
+                            invalidate();
+                        }
+                    } else {
+                        if (!photoImage.isInsideImage(x, y)) {
+                            imagePressed = false;
+                            invalidate();
+                        }
+                    }
+                }
+            } else if (otherPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    otherPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (mediaDelegate != null) {
+                        mediaDelegate.didPressedOther(this);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    otherPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (currentMessageObject.type == 9) {
+                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                            otherPressed = false;
+                        }
                     }
                 }
             }
@@ -264,6 +321,7 @@ private void didPressedButton() {
                 FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video);
             }
             progressVisible = true;
+            startAnimation();
             buttonState = 1;
             invalidate();
         } else if (buttonState == 1) {
@@ -284,6 +342,7 @@ private void didPressedButton() {
                     FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
                 }
                 progressVisible = false;
+                stopAnimation();
                 buttonState = 0;
                 invalidate();
             }
@@ -317,9 +376,8 @@ private boolean isPhotoDataChanged(MessageObject object) {
             }
         } else if (currentPhotoObject == null) {
             return true;
-        } else if (currentPhotoObject != null && photoNotSet) {
-            String fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
-            File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+        } else if (currentMessageObject != null && photoNotSet) {
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
             if (cacheFile.exists()) {
                 return true;
             }
@@ -346,7 +404,12 @@ public void setMessageObject(MessageObject messageObject) {
                 if (name == null || name.length() == 0) {
                     name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
                 }
-                int maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
+                int maxWidth;
+                if (AndroidUtilities.isTablet()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
+                } else {
+                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
+                }
                 if (currentNameString == null || !currentNameString.equals(name)) {
                     currentNameString = name;
                     nameWidth = Math.min(maxWidth, (int) Math.ceil(namePaint.measureText(currentNameString)));
@@ -431,14 +494,14 @@ public void setMessageObject(MessageObject messageObject) {
             if (messageObject.type == 9) {
                 photoWidth = AndroidUtilities.dp(86);
                 photoHeight = AndroidUtilities.dp(86);
-                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(40);
+                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(68);
                 currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, 800, 800);
                 if (currentPhotoObject != null) {
                     if (currentPhotoObject.image != null) {
                         photoImage.setImageBitmap(currentPhotoObject.image);
                     } else {
                         currentPhotoFilter = String.format(Locale.US, "%d_%d_b", photoWidth, photoHeight);
-                        photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, currentPhotoObject.photoOwner.size);
+                        photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, 0);
                     }
                 } else {
                     photoImage.setImageBitmap((BitmapDrawable)null);
@@ -453,7 +516,11 @@ public void setMessageObject(MessageObject messageObject) {
                 currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
                 photoImage.setImage(currentUrl, null, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
             } else {
-                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                if (AndroidUtilities.isTablet()) {
+                    photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+                } else {
+                    photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                }
                 photoHeight = photoWidth + AndroidUtilities.dp(100);
 
                 if (photoWidth > 800) {
@@ -465,6 +532,10 @@ public void setMessageObject(MessageObject messageObject) {
 
                 currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, 800, 800);
                 if (currentPhotoObject != null) {
+                    boolean noSize = false;
+                    if (currentMessageObject.type == 3 || currentMessageObject.type == 8) {
+                        noSize = true;
+                    }
                     float scale = (float) currentPhotoObject.photoOwner.w / (float) photoWidth;
 
                     int w = (int) (currentPhotoObject.photoOwner.w / scale);
@@ -510,7 +581,7 @@ public void setMessageObject(MessageObject messageObject) {
                         boolean photoExist = true;
                         String fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
                         if (messageObject.type == 1) {
-                            File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+                            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
                             if (!cacheFile.exists()) {
                                 photoExist = false;
                             } else {
@@ -519,9 +590,9 @@ public void setMessageObject(MessageObject messageObject) {
                         }
                         if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
                             if (messageObject.imagePreview != null) {
-                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(messageObject.imagePreview), currentPhotoObject.photoOwner.size);
+                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(messageObject.imagePreview), noSize ? 0 : currentPhotoObject.photoOwner.size);
                             } else {
-                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable, currentPhotoObject.photoOwner.size);
+                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable, noSize ? 0 : currentPhotoObject.photoOwner.size);
                             }
                         } else {
                             photoNotSet = true;
@@ -554,7 +625,7 @@ public void updateButtonState() {
                 return;
             }
             fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
-            cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+            cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
         } else if (currentMessageObject.type == 8 || currentMessageObject.type == 3 || currentMessageObject.type == 9) {
             if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
                 File f = new File(currentMessageObject.messageOwner.attachPath);
@@ -565,7 +636,7 @@ public void updateButtonState() {
             }
             if (fileName == null) {
                 fileName = currentMessageObject.getFileName();
-                cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
             }
         }
         if (fileName == null) {
@@ -575,13 +646,10 @@ public void updateButtonState() {
             if (currentMessageObject.messageOwner.attachPath != null) {
                 MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
                 progressVisible = true;
+                startAnimation();
                 buttonState = 1;
                 Float progress = FileLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-                if (progress != null) {
-                    progressView.setProgress(progress);
-                } else {
-                    progressView.setProgress(0);
-                }
+                setProgress(progress != null ? progress : 0, false);
                 invalidate();
             }
         } else {
@@ -597,25 +665,25 @@ public void updateButtonState() {
                     if (cancelLoading || currentMessageObject.type != 1 || !MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
                         buttonState = 0;
                         progressVisible = false;
+                        stopAnimation();
                     } else {
                         buttonState = 1;
                         progressVisible = true;
+                        startAnimation();
                     }
-                    progressView.setProgress(0);
+                    setProgress(0, false);
                 } else {
                     buttonState = 1;
                     progressVisible = true;
+                    startAnimation();
                     Float progress = FileLoader.getInstance().getFileProgress(fileName);
-                    if (progress != null) {
-                        progressView.setProgress(progress);
-                    } else {
-                        progressView.setProgress(0);
-                    }
+                    setProgress(progress != null ? progress : 0, false);
                 }
                 invalidate();
             } else {
                 MediaController.getInstance().removeLoadingFileObserver(this);
                 progressVisible = false;
+                stopAnimation();
                 if (currentMessageObject.type == 8 && (gifDrawable == null || gifDrawable != null && !gifDrawable.isRunning())) {
                     buttonState = 2;
                 } else if (currentMessageObject.type == 3) {
@@ -628,6 +696,54 @@ public void updateButtonState() {
         }
     }
 
+    private void updateAnimation() {
+        long newTime = System.currentTimeMillis();
+        long dt = newTime - lastUpdateTime;
+        lastUpdateTime = newTime;
+
+        radOffset += 360 * dt / 3000.0f;
+        float progressDiff = currentProgress - animationProgressStart;
+        if (progressDiff > 0) {
+            currentProgressTime += dt;
+            if (currentProgressTime >= 300) {
+                animatedProgressValue = currentProgress;
+                animationProgressStart = currentProgress;
+                currentProgressTime = 0;
+            } else {
+                animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
+            }
+        }
+
+        invalidateProgress();
+    }
+
+    private void startAnimation() {
+        lastUpdateTime = System.currentTimeMillis();
+        animationStarted = true;
+        invalidateProgress();
+    }
+
+    private void setProgress(float value, boolean animated) {
+        if (!animated) {
+            animatedProgressValue = value;
+            animationProgressStart = value;
+        } else {
+            animationProgressStart = animatedProgressValue;
+        }
+        currentProgress = value;
+        currentProgressTime = 0;
+    }
+
+    private void invalidateProgress() {
+        int offset = AndroidUtilities.dp(1);
+        invalidate((int)progressRect.left - offset, (int)progressRect.top - offset, (int)progressRect.right + offset * 2, (int)progressRect.bottom + offset * 2);
+    }
+
+    private void stopAnimation() {
+        radOffset = 0;
+        animationStarted = false;
+    }
+
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
@@ -655,7 +771,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int size = AndroidUtilities.dp(44);
         buttonX = (int)(x + (photoWidth - size) / 2.0f);
         buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
-        progressView.rect.set(buttonX + AndroidUtilities.dp(1), buttonY + AndroidUtilities.dp(1), buttonX + AndroidUtilities.dp(43), buttonY + AndroidUtilities.dp(43));
+        progressRect.set(buttonX + AndroidUtilities.dp(1), buttonY + AndroidUtilities.dp(1), buttonX + AndroidUtilities.dp(43), buttonY + AndroidUtilities.dp(43));
     }
 
     @Override
@@ -672,15 +788,22 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             drawTime = photoImage.getVisible();
         }
 
+
         if (currentMessageObject.type == 9) {
+            Drawable menuDrawable = null;
             if (currentMessageObject.isOut()) {
                 infoPaint.setColor(0xff75b166);
                 docBackPaint.setColor(0xffd0f3b3);
+                menuDrawable = docMenuOutDrawable;
             } else {
                 infoPaint.setColor(0xffa1adbb);
                 docBackPaint.setColor(0xffebf0f5);
+                menuDrawable = docMenuInDrawable;
             }
 
+            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50), AndroidUtilities.dp(10));
+            menuDrawable.draw(canvas);
+
             if (!imageDrawn) {
                 canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), docBackPaint);
 
@@ -690,15 +813,16 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
                     drawable.draw(canvas);
                 }
                 if (currentMessageObject.isOut()) {
-                    progressView.setColor(0xff81bd72);
+                    progressPaint.setColor(0xff81bd72);
+
                 } else {
-                    progressView.setColor(0xffadbdcc);
+                    progressPaint.setColor(0xffadbdcc);
                 }
             } else {
-                progressView.setColor(0xffffffff);
+                progressPaint.setColor(0xffffffff);
             }
         } else {
-            progressView.setColor(0xffffffff);
+            progressPaint.setColor(0xffffffff);
         }
 
         if (buttonState >= 0 && buttonState < 4) {
@@ -713,7 +837,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
         }
 
         if (progressVisible) {
-            progressView.draw(canvas);
+            canvas.drawArc(progressRect, -90 + radOffset, Math.max(4, 360 * animatedProgressValue), false, progressPaint);
         }
 
         if (nameLayout != null) {
@@ -758,6 +882,10 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             }
             canvas.restore();
         }
+
+        if (animationStarted) {
+            updateAnimation();
+        }
     }
 
     @Override
@@ -779,17 +907,17 @@ public void onSuccessDownload(String fileName) {
     @Override
     public void onProgressDownload(String fileName, float progress) {
         progressVisible = true;
-        progressView.setProgress(progress);
+        setProgress(progress, true);
         if (buttonState != 1) {
             updateButtonState();
         }
-        invalidate();
+        invalidateProgress();
     }
 
     @Override
     public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-        progressView.setProgress(progress);
-        invalidate();
+        setProgress(progress, true);
+        invalidateProgress();
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 8d03bfb04..7a9e7bbc8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -131,12 +131,23 @@ public void setMessageObject(MessageObject messageObject) {
             }
             pressedLink = null;
             int maxWidth;
-            if (isChat && !messageObject.isOut()) {
-                maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(122);
-                drawName = true;
+
+            if (AndroidUtilities.isTablet()) {
+                if (isChat && !messageObject.isOut()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                    drawName = true;
+                } else {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+                    drawName = false;
+                }
             } else {
-                maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(80);
-                drawName = false;
+                if (isChat && !messageObject.isOut()) {
+                    maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(122);
+                    drawName = true;
+                } else {
+                    maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(80);
+                    drawName = false;
+                }
             }
 
             backgroundWidth = maxWidth;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
index 202138373..5b496167c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
@@ -19,13 +19,13 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.ImageReceiver;
 
 public class ChatOrUserCell extends BaseCell {
@@ -157,12 +157,16 @@ public void update(int mask) {
             if (user.photo != null) {
                 photo = user.photo.photo_small;
             }
-            placeHolderId = Utilities.getUserAvatarForId(user.id);
+            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
         } else if (chat != null) {
             if (chat.photo != null) {
                 photo = chat.photo.photo_small;
             }
-            placeHolderId = Utilities.getGroupAvatarForId(chat.id);
+            if (chat.id > 0) {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
+            }
         }
 
         if (mask != 0) {
@@ -339,7 +343,7 @@ public void build(int width, int height) {
                 if (chat != null) {
                     nameString2 = chat.title;
                 } else if (user != null) {
-                    nameString2 = Utilities.formatName(user.first_name, user.last_name);
+                    nameString2 = ContactsController.formatName(user.first_name, user.last_name);
                 }
                 nameString = nameString2.replace("\n", " ");
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 640177455..d4ae34ae2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -27,7 +27,6 @@
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
 import org.telegram.android.ImageReceiver;
 
@@ -155,6 +154,10 @@ public void setDialog(TLRPC.TL_dialog dialog) {
         update(0);
     }
 
+    public TLRPC.TL_dialog getDialog() {
+        return currentDialog;
+    }
+
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
@@ -249,12 +252,16 @@ public void update(int mask) {
             if (user.photo != null) {
                 photo = user.photo.photo_small;
             }
-            placeHolderId = Utilities.getUserAvatarForId(user.id);
+            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
         } else if (chat != null) {
             if (chat.photo != null) {
                 photo = chat.photo.photo_small;
             }
-            placeHolderId = Utilities.getGroupAvatarForId(chat.id);
+            if (chat.id > 0) {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
+            }
         }
         avatarImage.setImage(photo, "50_50", placeHolderId == 0 ? null : getResources().getDrawable(placeHolderId));
 
@@ -564,17 +571,17 @@ public void build(int width, int height) {
             } else if (user != null) {
                 if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
                     if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
-                        nameString = Utilities.formatName(user.first_name, user.last_name);
+                        nameString = ContactsController.formatName(user.first_name, user.last_name);
                     } else {
                         if (user.phone != null && user.phone.length() != 0) {
                             nameString = PhoneFormat.getInstance().format("+" + user.phone);
                         } else {
                             currentNamePaint = nameUnknownPaint;
-                            nameString = Utilities.formatName(user.first_name, user.last_name);
+                            nameString = ContactsController.formatName(user.first_name, user.last_name);
                         }
                     }
                 } else {
-                    nameString = Utilities.formatName(user.first_name, user.last_name);
+                    nameString = ContactsController.formatName(user.first_name, user.last_name);
                 }
                 if (encryptedChat != null) {
                     currentNamePaint = nameEncryptedPaint;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 34305127a..bb03b8cb7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -20,11 +20,11 @@
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.Rect;
-import android.graphics.drawable.AnimationDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.MediaPlayer;
 import android.media.ThumbnailUtils;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.provider.MediaStore;
 import android.text.Html;
@@ -83,6 +83,7 @@
 import org.telegram.ui.Views.MessageActionLayout;
 import org.telegram.ui.Views.SizeNotifierRelativeLayout;
 import org.telegram.ui.Views.TimerButton;
+import org.telegram.ui.Views.TypingDotsDrawable;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -112,6 +113,7 @@
     private BackupImageView avatarImageView;
     private TextView bottomOverlayChatText;
     private View bottomOverlayChat;
+    private TypingDotsDrawable typingDotsDrawable;
 
     private TextView bottomOverlayText;
 
@@ -146,6 +148,7 @@
     private boolean loading = false;
     private boolean cacheEndReaced = false;
     private boolean firstLoading = true;
+    private int loadsCount = 0;
 
     private int minDate = 0;
     private boolean first = true;
@@ -351,6 +354,13 @@ public void needSendTyping() {
             userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
         }
 
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id);
+        }
+
+        typingDotsDrawable = new TypingDotsDrawable();
+        typingDotsDrawable.setIsChat(currentChat != null);
+
         return true;
     }
 
@@ -379,6 +389,9 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.screenshotTook);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, (long)0);
+        }
         if (currentEncryptedChat != null) {
             MediaController.getInstance().stopMediaObserver();
         }
@@ -390,6 +403,9 @@ public void onFragmentDestroy() {
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
             actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            if (AndroidUtilities.isTablet()) {
+                actionBarLayer.setExtraLeftMargin(4);
+            }
             actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
             actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
                 @Override
@@ -562,7 +578,7 @@ public void onItemClick(int id) {
             menuItem = item;
 
             ActionBarMenu actionMode = actionBarLayer.createActionMode();
-            actionMode.addItem(-2, R.drawable.ic_ab_done_gray);
+            actionMode.addItem(-2, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode);
 
             FrameLayout layout = new FrameLayout(actionMode.getContext());
             layout.setBackgroundColor(0xffe5e5e5);
@@ -581,7 +597,7 @@ public void onItemClick(int id) {
             selectedMessagesCountTextView.setSingleLine(true);
             selectedMessagesCountTextView.setLines(1);
             selectedMessagesCountTextView.setEllipsize(TextUtils.TruncateAt.END);
-            selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(6), 0, 0, 0);
+            selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(11), 0, 0, 0);
             selectedMessagesCountTextView.setGravity(Gravity.CENTER_VERTICAL);
             selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
@@ -597,13 +613,13 @@ public boolean onTouch(View v, MotionEvent event) {
             selectedMessagesCountTextView.setLayoutParams(layoutParams);
 
             if (currentEncryptedChat == null) {
-                actionMode.addItem(quoteforward, R.drawable.ic_ab_fwd_quoteforward);
-                actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward);
-                actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy);
-                actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete);
+                actionMode.addItem(quoteforward, R.drawable.ic_ab_fwd_quoteforward, R.drawable.bar_selector_mode);
+                actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode);
+                actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode);
+                actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode);
             } else {
-                actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy);
-                actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete);
+                actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode);
+                actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode);
             }
             actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
 
@@ -1032,12 +1048,16 @@ public void onClick(DialogInterface dialog, int which) {
                 if (currentUser.photo != null) {
                     photo = currentUser.photo.photo_small;
                 }
-                placeHolderId = Utilities.getUserAvatarForId(currentUser.id);
+                placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
             } else if (currentChat != null) {
                 if (currentChat.photo != null) {
                     photo = currentChat.photo.photo_small;
                 }
-                placeHolderId = Utilities.getGroupAvatarForId(currentChat.id);
+                if (isBraodcast) {
+                    placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
+                } else {
+                    placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+                }
             }
             avatarImageView.setImage(photo, "50_50", placeHolderId);
         }
@@ -1093,7 +1113,7 @@ private int getMessageType(MessageObject messageObject) {
                                 }
                             }
                             if (!canSave) {
-                                File f = new File(AndroidUtilities.getCacheDir(), messageObject.getFileName());
+                                File f = FileLoader.getPathToMessage(messageObject.messageOwner);
                                 if (f.exists()) {
                                     canSave = true;
                                 }
@@ -1141,7 +1161,7 @@ private int getMessageType(MessageObject messageObject) {
                             }
                         }
                         if (!canSave) {
-                            File f = new File(AndroidUtilities.getCacheDir(), messageObject.getFileName());
+                            File f = FileLoader.getPathToMessage(messageObject.messageOwner);
                             if (f.exists()) {
                                 canSave = true;
                             }
@@ -1224,10 +1244,10 @@ private void updateSubtitle() {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
                     actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
-                    actionBarLayer.setTitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+                    actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
                 }
             } else {
-                actionBarLayer.setTitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             }
         }
 
@@ -1277,7 +1297,7 @@ private void checkAndUpdateAvatar() {
             if (currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             }
-            placeHolderId = Utilities.getUserAvatarForId(currentUser.id);
+            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
         } else if (currentChat != null) {
             TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
             if (chat == null) {
@@ -1287,7 +1307,11 @@ private void checkAndUpdateAvatar() {
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
-            placeHolderId = Utilities.getGroupAvatarForId(currentChat.id);
+            if (isBraodcast) {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+            }
         }
         if (avatarImageView != null) {
             avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
@@ -1340,15 +1364,15 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     }
                     currentPicturePath = null;
                 }
-                /*if(android.os.Build.VERSION.SDK_INT >= 18) {
+                if(android.os.Build.VERSION.SDK_INT >= 16) {
                     Bundle args = new Bundle();
                     args.putString("videoPath", videoPath);
                     VideoEditorActivity fragment = new VideoEditorActivity(args);
                     fragment.setDelegate(this);
                     presentFragment(fragment);
-                } else {*/
+                } else {
                     processSendingVideo(videoPath, null, 0, 0, 0, 0);
-                //}
+                }
             } else if (requestCode == 21) {
                 if (data == null || data.getData() == null) {
                     showAttachmentError();
@@ -1712,6 +1736,7 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.messagesDidLoaded) {
             long did = (Long)args[0];
             if (did == dialog_id) {
+                loadsCount++;
                 int count = (Integer)args[1];
                 boolean isCache = (Boolean)args[3];
                 int fnid = (Integer)args[4];
@@ -1730,6 +1755,10 @@ public void didReceivedNotification(int id, final Object... args) {
                 int newRowsCount = 0;
                 unread_end_reached = last_unread_id == 0;
 
+                if (loadsCount == 1 && messArr.size() > 20) {
+                    loadsCount++;
+                }
+
                 if (firstLoading) {
                     if (!unread_end_reached) {
                         messages.clear();
@@ -2497,19 +2526,14 @@ private void setTypingAnimation(boolean start) {
         }
         if (start) {
             try {
-                if (currentChat != null) {
-                    actionBarLayer.setSubTitleIcon(R.drawable.typing_dots_chat, AndroidUtilities.dp(4));
-                } else {
-                    actionBarLayer.setSubTitleIcon(R.drawable.typing_dots, AndroidUtilities.dp(4));
-                }
-                AnimationDrawable mAnim = (AnimationDrawable)actionBarLayer.getSubTitleIcon();
-                mAnim.setAlpha(200);
-                mAnim.start();
+                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
+                typingDotsDrawable.start();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
         } else {
-            actionBarLayer.setSubTitleIcon(0, 0);
+            actionBarLayer.setSubTitleIcon(0, null, 0);
+            typingDotsDrawable.stop();
         }
     }
 
@@ -2576,7 +2600,7 @@ public boolean onPreDraw() {
                     return true;
                 }
                 int height = AndroidUtilities.dp(48);
-                if (!Utilities.isTablet(getParentActivity()) && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                     height = AndroidUtilities.dp(40);
                     selectedMessagesCountTextView.setTextSize(16);
                 } else {
@@ -2799,7 +2823,7 @@ private void processSelectedOption(int option) {
             return;
         }
         if (option == 0) {
-            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject)) {
+            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
                 chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
             }
         } else if (option == 1) {
@@ -2853,7 +2877,7 @@ private void processSelectedOption(int option) {
                 }
             }
             if (locFile == null) {
-                File f = new File(AndroidUtilities.getCacheDir(), selectedObject.getFileName());
+                File f = FileLoader.getPathToMessage(selectedObject.messageOwner);
                 if (f.exists()) {
                     locFile = f;
                 }
@@ -3262,6 +3286,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         } else {
                             progressBar.setBackgroundResource(R.drawable.system_loader1);
                         }
+                        progressBar.setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
                     }
                     return view;
                 }
@@ -3357,7 +3382,7 @@ public void didPressedImage(ChatMediaCell cell) {
                                         f = new File(message.messageOwner.attachPath);
                                     }
                                     if (f == null || f != null && !f.exists()) {
-                                        f = new File(AndroidUtilities.getCacheDir(), message.getFileName());
+                                        f = FileLoader.getPathToMessage(message.messageOwner);
                                     }
                                     Intent intent = new Intent(Intent.ACTION_VIEW);
                                     intent.setDataAndType(Uri.fromFile(f), "video/mp4");
@@ -3379,7 +3404,7 @@ public void didPressedImage(ChatMediaCell cell) {
                                     f = new File(message.messageOwner.attachPath);
                                 }
                                 if (f == null || f != null && !f.exists()) {
-                                    f = new File(AndroidUtilities.getCacheDir(), fileName);
+                                    f = FileLoader.getPathToMessage(message.messageOwner);
                                 }
                                 if (f != null && f.exists()) {
                                     String realMimeType = null;
@@ -3416,6 +3441,11 @@ public void didPressedImage(ChatMediaCell cell) {
                                 }
                             }
                         }
+
+                        @Override
+                        public void didPressedOther(ChatMediaCell cell) {
+                            createMenu(cell, true);
+                        }
                     };
                 }
 
@@ -3506,33 +3536,38 @@ public void update() {
                 if (fromUser.photo != null) {
                     photo = fromUser.photo.photo_small;
                 }
-                int placeHolderId = Utilities.getUserAvatarForId(fromUser.id);
+                int placeHolderId = AndroidUtilities.getUserAvatarForId(fromUser.id);
                 avatarImageView.setImage(photo, "50_50", placeHolderId);
             }
 
             if (type != 12 && type != 13 && nameTextView != null && fromUser != null && type != 8 && type != 9) {
-                nameTextView.setText(Utilities.formatName(fromUser.first_name, fromUser.last_name));
-                nameTextView.setTextColor(Utilities.getColorForId(message.messageOwner.from_id));
+                nameTextView.setText(ContactsController.formatName(fromUser.first_name, fromUser.last_name));
+                nameTextView.setTextColor(AndroidUtilities.getColorForId(message.messageOwner.from_id));
             }
 
             if (type == 11 || type == 10) {
-                int width = AndroidUtilities.displaySize.x - AndroidUtilities.dp(30);
+                int width = 0;
+                if (AndroidUtilities.isTablet()) {
+                    width = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(30);
+                } else {
+                    width = AndroidUtilities.displaySize.x - AndroidUtilities.dp(30);
+                }
                 messageTextView.setText(message.messageText);
                 messageTextView.setMaxWidth(width);
 
                 if (type == 11) {
                     if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                        photoImage.setImage(message.messageOwner.action.newUserPhoto.photo_small, "50_50", Utilities.getUserAvatarForId(currentUser.id));
+                        photoImage.setImage(message.messageOwner.action.newUserPhoto.photo_small, "50_50", AndroidUtilities.getUserAvatarForId(currentUser.id));
                     } else {
                         PhotoObject photo = PhotoObject.getClosestImageWithSize(message.photoThumbs, AndroidUtilities.dp(64), AndroidUtilities.dp(64));
                         if (photo != null) {
                             if (photo.image != null) {
                                 photoImage.setImageBitmap(photo.image);
                             } else {
-                                photoImage.setImage(photo.photoOwner.location, "50_50", Utilities.getGroupAvatarForId(currentChat.id));
+                                photoImage.setImage(photo.photoOwner.location, "50_50", AndroidUtilities.getGroupAvatarForId(currentChat.id));
                             }
                         } else {
-                            photoImage.setImageResource(Utilities.getGroupAvatarForId(currentChat.id));
+                            photoImage.setImageResource(AndroidUtilities.getGroupAvatarForId(currentChat.id));
                         }
                     }
                     photoImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(message), false);
@@ -3540,8 +3575,8 @@ public void update() {
             } else if (type == 12 || type == 13) {
                 TLRPC.User contactUser = MessagesController.getInstance().getUser(message.messageOwner.media.user_id);
                 if (contactUser != null) {
-                    nameTextView.setText(Utilities.formatName(message.messageOwner.media.first_name, message.messageOwner.media.last_name));
-                    nameTextView.setTextColor(Utilities.getColorForId(contactUser.id));
+                    nameTextView.setText(ContactsController.formatName(message.messageOwner.media.first_name, message.messageOwner.media.last_name));
+                    nameTextView.setTextColor(AndroidUtilities.getColorForId(contactUser.id));
                     String phone = message.messageOwner.media.phone_number;
                     if (phone != null && phone.length() != 0) {
                         if (!phone.startsWith("+")) {
@@ -3555,7 +3590,7 @@ public void update() {
                     if (contactUser.photo != null) {
                         photo = contactUser.photo.photo_small;
                     }
-                    int placeHolderId = Utilities.getUserAvatarForId(contactUser.id);
+                    int placeHolderId = AndroidUtilities.getUserAvatarForId(contactUser.id);
                     contactAvatar.setImage(photo, "50_50", placeHolderId);
                     if (contactUser.id != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(contactUser.id) == null) {
                         addContactView.setVisibility(View.VISIBLE);
@@ -3563,8 +3598,8 @@ public void update() {
                         addContactView.setVisibility(View.GONE);
                     }
                 } else {
-                    nameTextView.setText(Utilities.formatName(message.messageOwner.media.first_name, message.messageOwner.media.last_name));
-                    nameTextView.setTextColor(Utilities.getColorForId(message.messageOwner.media.user_id));
+                    nameTextView.setText(ContactsController.formatName(message.messageOwner.media.first_name, message.messageOwner.media.last_name));
+                    nameTextView.setTextColor(AndroidUtilities.getColorForId(message.messageOwner.media.user_id));
                     String phone = message.messageOwner.media.phone_number;
                     if (phone != null && phone.length() != 0) {
                         if (message.messageOwner.media.user_id != 0 && !phone.startsWith("+")) {
@@ -3574,7 +3609,7 @@ public void update() {
                     } else {
                         phoneTextView.setText("Unknown");
                     }
-                    contactAvatar.setImageResource(Utilities.getUserAvatarForId(message.messageOwner.media.user_id));
+                    contactAvatar.setImageResource(AndroidUtilities.getUserAvatarForId(message.messageOwner.media.user_id));
                     addContactView.setVisibility(View.GONE);
                 }
             } else if (type == 6) {
@@ -3698,8 +3733,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                                             FileLog.e("tmessages", e);
                                                         }
                                                     } else if (i == 0) {
-                                                        int sdk = android.os.Build.VERSION.SDK_INT;
-                                                        if (sdk < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                                        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
                                                             android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                                             clipboard.setText(message.messageOwner.media.phone_number);
                                                         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index f9a93d1c8..2b4834da5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -641,7 +641,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     photo = chat.photo.photo_small;
                     photoBig = chat.photo.photo_big;
                 }
-                avatarImage.setImage(photo, "50_50", Utilities.getGroupAvatarForId(chat.id));
+                avatarImage.setImage(photo, "50_50", chat_id > 0 ? AndroidUtilities.getGroupAvatarForId(chat.id) : AndroidUtilities.getBroadcastAvatarForId(chat.id));
                 avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
                 return view;
             } else if (type == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index c3b275ec8..b136ba519 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -29,7 +29,6 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 
@@ -165,7 +164,7 @@ private void updateAvatarLayout() {
         if (user.photo != null) {
             photo = user.photo.photo_small;
         }
-        avatarImage.setImage(photo, "50_50", Utilities.getUserAvatarForId(user.id));
+        avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
     }
 
     public void didReceivedNotification(int id, Object... args) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 7a54a4109..e2d872e39 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -349,7 +349,7 @@ private void didSelectResult(final TLRPC.User user, boolean useAlert, String par
             }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
+            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
             final EditText editText = new EditText(getParentActivity());
             if (android.os.Build.VERSION.SDK_INT < 11) {
                 editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index f699c8365..9aefe5125 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -332,7 +332,7 @@ public XImageSpan createAndPutChipForUser(TLRPC.User user) {
         LayoutInflater lf = (LayoutInflater)ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
         View textView = lf.inflate(R.layout.group_create_bubble, null);
         TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
-        String name = Utilities.formatName(user.first_name, user.last_name);
+        String name = ContactsController.formatName(user.first_name, user.last_name);
         if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
             name = PhoneFormat.getInstance().format("+" + user.phone);
         }
@@ -539,7 +539,7 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             if (searchWas && searching) {
                 holder.nameTextView.setText(searchResultNames.get(position));
             } else {
-                String name = Utilities.formatName(user.first_name, user.last_name);
+                String name = ContactsController.formatName(user.first_name, user.last_name);
                 if (name.length() == 0) {
                     if (user.phone != null && user.phone.length() != 0) {
                         name = PhoneFormat.getInstance().format("+" + user.phone);
@@ -554,7 +554,7 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             if (user.photo != null) {
                 photo = user.photo.photo_small;
             }
-            int placeHolderId = Utilities.getUserAvatarForId(user.id);
+            int placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
             holder.avatarImage.setImage(photo, "50_50", placeHolderId);
 
             holder.messageTextView.setText(LocaleController.formatUserStatus(user));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index d8141fda8..ebcf31338 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -10,6 +10,7 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.content.pm.ActivityInfo;
 import android.database.DataSetObserver;
 import android.os.Bundle;
 import android.os.Parcelable;
@@ -24,6 +25,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
@@ -46,7 +48,12 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         requestWindowFeature(Window.FEATURE_NO_TITLE);
 
-        setContentView(R.layout.intro_layout);
+        if (AndroidUtilities.isTablet()) {
+            setContentView(R.layout.intro_layout_tablet);
+        } else {
+            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+            setContentView(R.layout.intro_layout);
+        }
 
         if (LocaleController.isRTL) {
             icons = new int[] {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 26bbde3aa..bee83e3f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -125,7 +125,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     }
                     if (localeInfo != null) {
                         LocaleController.getInstance().applyLanguage(localeInfo, true);
-                        getParentActivity().rebuildAllFragmentViews();
+                        parentLayout.rebuildAllFragmentViews(false);
                     }
                     finishFragment();
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 021a148ef..a67f2c0e0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -8,15 +8,27 @@
 
 package org.telegram.ui;
 
+import android.app.Activity;
 import android.content.ContentResolver;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.res.Configuration;
 import android.database.Cursor;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.provider.ContactsContract;
+import android.view.ActionMode;
+import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -31,7 +43,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBarActivity;
+import org.telegram.ui.Views.ActionBar.ActionBarLayout;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 
 import java.io.BufferedReader;
@@ -40,7 +52,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
-public class LaunchActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
     private boolean finished = false;
     private String videoPath = null;
     private String sendingText = null;
@@ -49,6 +61,18 @@
     private ArrayList<String> documentsOriginalPathsArray = null;
     private ArrayList<TLRPC.User> contactsToSend = null;
     private int currentConnectionState;
+    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<BaseFragment>();
+
+    private ActionBarLayout actionBarLayout = null;
+    private ActionBarLayout layersActionBarLayout = null;
+    private ActionBarLayout rightActionBarLayout = null;
+    private FrameLayout shadowTablet = null;
+    private LinearLayout buttonLayoutTablet = null;
+    private FrameLayout shadowTabletSide = null;
+    private ImageView backgroundTablet = null;
+    private boolean tabletFullSize = false;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -57,7 +81,7 @@ protected void onCreate(Bundle savedInstanceState) {
         if (!UserConfig.isClientActivated()) {
             Intent intent = getIntent();
             if (intent != null && intent.getAction() != null && (Intent.ACTION_SEND.equals(intent.getAction()) || intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE))) {
-                super.onCreateFinish(savedInstanceState);
+                super.onCreate(savedInstanceState);
                 finish();
                 return;
             }
@@ -67,15 +91,122 @@ protected void onCreate(Bundle savedInstanceState) {
                 if (state.isEmpty()) {
                     Intent intent2 = new Intent(this, IntroActivity.class);
                     startActivity(intent2);
-                    super.onCreateFinish(savedInstanceState);
+                    super.onCreate(savedInstanceState);
                     finish();
                     return;
                 }
             }
         }
 
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setTheme(R.style.Theme_TMessages);
+        getWindow().setBackgroundDrawableResource(R.drawable.transparent);
+
         super.onCreate(savedInstanceState);
 
+        actionBarLayout = new ActionBarLayout(this);
+        if (AndroidUtilities.isTablet()) {
+            setContentView(R.layout.launch_layout_tablet);
+            shadowTablet = (FrameLayout)findViewById(R.id.shadow_tablet);
+            buttonLayoutTablet = (LinearLayout)findViewById(R.id.launch_button_layout);
+            shadowTabletSide = (FrameLayout)findViewById(R.id.shadow_tablet_side);
+            backgroundTablet = (ImageView)findViewById(R.id.launch_background);
+
+            shadowTablet.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            RelativeLayout launchLayout = (RelativeLayout)findViewById(R.id.launch_layout);
+
+            layersActionBarLayout = new ActionBarLayout(this);
+            layersActionBarLayout.setBackgroundView(shadowTablet);
+            layersActionBarLayout.setUseAlphaAnimations(true);
+            layersActionBarLayout.setBackgroundResource(R.drawable.boxshadow);
+            launchLayout.addView(layersActionBarLayout);
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(498);
+            relativeLayoutParams.height = AndroidUtilities.dp(528);
+            relativeLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+            layersActionBarLayout.setLayoutParams(relativeLayoutParams);
+            layersActionBarLayout.init(layerFragmentsStack);
+            layersActionBarLayout.setDelegate(this);
+            layersActionBarLayout.setVisibility(View.GONE);
+
+            launchLayout.addView(actionBarLayout, 2);
+            relativeLayoutParams = (RelativeLayout.LayoutParams)actionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(320);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+            rightActionBarLayout = new ActionBarLayout(this);
+            launchLayout.addView(rightActionBarLayout, 3);
+            relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(320);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            rightActionBarLayout.setLayoutParams(relativeLayoutParams);
+            rightActionBarLayout.init(rightFragmentsStack);
+            rightActionBarLayout.setDelegate(this);
+
+            TextView button = (TextView)findViewById(R.id.new_group_button);
+            button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new GroupCreateActivity());
+                }
+            });
+
+            button = (TextView)findViewById(R.id.new_secret_button);
+            button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlyUsers", true);
+                    args.putBoolean("destroyAfterSelect", true);
+                    args.putBoolean("usersAsSections", true);
+                    args.putBoolean("createSecretChat", true);
+                    presentFragment(new ContactsActivity(args));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.new_broadcast_button);
+            button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("broadcast", true);
+                    presentFragment(new GroupCreateActivity(args));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.contacts_button);
+            button.setText(LocaleController.getString("Contacts", R.string.Contacts));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new ContactsActivity(null));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.settings_button);
+            button.setText(LocaleController.getString("Settings", R.string.Settings));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new SettingsActivity());
+                }
+            });
+        } else {
+            setContentView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        }
+        actionBarLayout.init(mainFragmentsStack);
+        actionBarLayout.setDelegate(this);
+
         int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
         if (resourceId > 0) {
             AndroidUtilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
@@ -88,11 +219,11 @@ protected void onCreate(Bundle savedInstanceState) {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedConnectionState);
 
-        if (fragmentsStack.isEmpty()) {
+        if (actionBarLayout.fragmentsStack.isEmpty()) {
             if (!UserConfig.isClientActivated()) {
-                addFragmentToStack(new LoginActivity());
+                actionBarLayout.addFragmentToStack(new LoginActivity());
             } else {
-                addFragmentToStack(new MessagesActivity(null));
+                actionBarLayout.addFragmentToStack(new MessagesActivity(null));
             }
 
             try {
@@ -103,31 +234,31 @@ protected void onCreate(Bundle savedInstanceState) {
                         if (fragmentName.equals("chat")) {
                             if (args != null) {
                                 ChatActivity chat = new ChatActivity(args);
-                                if (addFragmentToStack(chat)) {
+                                if (actionBarLayout.addFragmentToStack(chat)) {
                                     chat.restoreSelfArgs(savedInstanceState);
                                 }
                             }
                         } else if (fragmentName.equals("settings")) {
                             SettingsActivity settings = new SettingsActivity();
-                            addFragmentToStack(settings);
+                            actionBarLayout.addFragmentToStack(settings);
                             settings.restoreSelfArgs(savedInstanceState);
                         } else if (fragmentName.equals("group")) {
                             if (args != null) {
                                 GroupCreateFinalActivity group = new GroupCreateFinalActivity(args);
-                                if (addFragmentToStack(group)) {
+                                if (actionBarLayout.addFragmentToStack(group)) {
                                     group.restoreSelfArgs(savedInstanceState);
                                 }
                             }
                         } else if (fragmentName.equals("chat_profile")) {
                             if (args != null) {
                                 ChatProfileActivity profile = new ChatProfileActivity(args);
-                                if (addFragmentToStack(profile)) {
+                                if (actionBarLayout.addFragmentToStack(profile)) {
                                     profile.restoreSelfArgs(savedInstanceState);
                                 }
                             }
                         } else if (fragmentName.equals("wallpapers")) {
                             SettingsWallpapersActivity settings = new SettingsWallpapersActivity();
-                            addFragmentToStack(settings);
+                            actionBarLayout.addFragmentToStack(settings);
                             settings.restoreSelfArgs(savedInstanceState);
                         }
                     }
@@ -138,6 +269,7 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         handleIntent(getIntent(), false, savedInstanceState != null);
+        needLayout();
     }
 
     private void handleIntent(Intent intent, boolean isNew, boolean restore) {
@@ -382,7 +514,7 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                 Bundle args = new Bundle();
                 args.putInt("user_id", push_user_id);
                 ChatActivity fragment = new ChatActivity(args);
-                if (presentFragment(fragment, false, true)) {
+                if (actionBarLayout.presentFragment(fragment, false, true)) {
                     pushOpened = true;
                 }
             }
@@ -390,19 +522,19 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
             Bundle args = new Bundle();
             args.putInt("chat_id", push_chat_id);
             ChatActivity fragment = new ChatActivity(args);
-            if (presentFragment(fragment, false, true)) {
+            if (actionBarLayout.presentFragment(fragment, false, true)) {
                 pushOpened = true;
             }
         } else if (push_enc_id != 0) {
             Bundle args = new Bundle();
             args.putInt("enc_id", push_enc_id);
             ChatActivity fragment = new ChatActivity(args);
-            if (presentFragment(fragment, false, true)) {
+            if (actionBarLayout.presentFragment(fragment, false, true)) {
                 pushOpened = true;
             }
         } else if (showDialogsList) {
-            for (int a = 1; a < fragmentsStack.size(); a++) {
-                removeFragmentFromStack(fragmentsStack.get(a));
+            for (int a = 1; a < actionBarLayout.fragmentsStack.size(); a++) {
+                actionBarLayout.removeFragmentFromStack(actionBarLayout.fragmentsStack.get(a));
                 a--;
             }
             pushOpened = false;
@@ -415,25 +547,29 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
             args.putString("selectAlertString", LocaleController.getString("SendMessagesTo", R.string.SendMessagesTo));
             MessagesActivity fragment = new MessagesActivity(args);
             fragment.setDelegate(this);
-            presentFragment(fragment, false, true);
+            actionBarLayout.presentFragment(fragment, false, true);
             pushOpened = true;
             if (PhotoViewer.getInstance().isVisible()) {
                 PhotoViewer.getInstance().closePhoto(true);
             }
         }
         if (open_settings != 0) {
-            presentFragment(new SettingsActivity(), false, true);
+            actionBarLayout.presentFragment(new SettingsActivity(), false, true);
             pushOpened = true;
         }
         if (!pushOpened && !isNew) {
-            if (fragmentsStack.isEmpty()) {
+            if (actionBarLayout.fragmentsStack.isEmpty()) {
                 if (!UserConfig.isClientActivated()) {
-                    addFragmentToStack(new LoginActivity());
+                    actionBarLayout.addFragmentToStack(new LoginActivity());
                 } else {
-                    addFragmentToStack(new MessagesActivity(null));
+                    actionBarLayout.addFragmentToStack(new MessagesActivity(null));
                 }
             }
-            showLastFragment();
+            actionBarLayout.showLastFragment();
+            if (AndroidUtilities.isTablet()) {
+                layersActionBarLayout.showLastFragment();
+                rightActionBarLayout.showLastFragment();
+            }
         }
 
         intent.setAction(null);
@@ -468,7 +604,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                 args.putInt("enc_id", high_id);
             }
             ChatActivity fragment = new ChatActivity(args);
-            presentFragment(fragment, true);
+            actionBarLayout.presentFragment(fragment, true);
             if (videoPath != null) {
                 fragment.processSendingVideo(videoPath, null, 0, 0, 0, 0);
             }
@@ -496,18 +632,132 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
         }
     }
 
+    private void onFinish() {
+        if (finished) {
+            return;
+        }
+        finished = true;
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
+    }
+
+    public void presentFragment(BaseFragment fragment) {
+        actionBarLayout.presentFragment(fragment);
+    }
+
+    public boolean presentFragment(final BaseFragment fragment, final boolean removeLast, boolean forceWithoutAnimation) {
+        return actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation);
+    }
+
+    public void needLayout() {
+        if (AndroidUtilities.isTablet()) {
+            if (!AndroidUtilities.isSmallTablet() || getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                tabletFullSize = false;
+                int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
+                if (leftWidth < AndroidUtilities.dp(320)) {
+                    leftWidth = AndroidUtilities.dp(320);
+                }
+
+                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) shadowTabletSide.getLayoutParams();
+                relativeLayoutParams.leftMargin = leftWidth;
+                shadowTabletSide.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) rightActionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = AndroidUtilities.displaySize.x - leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                relativeLayoutParams.leftMargin = leftWidth;
+                rightActionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) buttonLayoutTablet.getLayoutParams();
+                relativeLayoutParams.width = AndroidUtilities.displaySize.x - leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.WRAP_CONTENT;
+                relativeLayoutParams.leftMargin = leftWidth;
+                buttonLayoutTablet.setLayoutParams(relativeLayoutParams);
+
+                if (AndroidUtilities.isSmallTablet() && mainFragmentsStack.size() == 2) {
+                    BaseFragment chatFragment = mainFragmentsStack.get(1);
+                    mainFragmentsStack.remove(1);
+                    actionBarLayout.showLastFragment();
+                    rightFragmentsStack.add(chatFragment);
+                    rightActionBarLayout.showLastFragment();
+                }
+
+                rightActionBarLayout.setVisibility(rightFragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
+                buttonLayoutTablet.setVisibility(!mainFragmentsStack.isEmpty() && rightFragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+                backgroundTablet.setVisibility(rightFragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+                shadowTabletSide.setVisibility(!mainFragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+            } else {
+                tabletFullSize = true;
+
+                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                shadowTabletSide.setVisibility(View.GONE);
+                rightActionBarLayout.setVisibility(View.GONE);
+                backgroundTablet.setVisibility(View.GONE);
+                buttonLayoutTablet.setVisibility(View.GONE);
+
+                if (rightFragmentsStack.size() == 1) {
+                    BaseFragment chatFragment = rightFragmentsStack.get(0);
+                    rightFragmentsStack.remove(0);
+                    actionBarLayout.presentFragment(chatFragment, false, true);
+                }
+            }
+        }
+    }
+
+    public void fixLayout() {
+        if (AndroidUtilities.isTablet()) {
+            final ViewTreeObserver obs = actionBarLayout.getViewTreeObserver();
+            obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+                    needLayout();
+                    if (Build.VERSION.SDK_INT < 16) {
+                        obs.removeGlobalOnLayoutListener(this);
+                    } else {
+                        obs.removeOnGlobalLayoutListener(this);
+                    }
+                }
+            });
+        }
+    }
+
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        if (fragmentsStack.size() != 0) {
-            BaseFragment fragment = fragmentsStack.get(fragmentsStack.size() - 1);
+        if (actionBarLayout.fragmentsStack.size() != 0) {
+            BaseFragment fragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
             fragment.onActivityResultFragment(requestCode, resultCode, data);
         }
+        if (AndroidUtilities.isTablet()) {
+            if (rightActionBarLayout.fragmentsStack.size() != 0) {
+                BaseFragment fragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                fragment.onActivityResultFragment(requestCode, resultCode, data);
+            }
+            if (layersActionBarLayout.fragmentsStack.size() != 0) {
+                BaseFragment fragment = layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1);
+                fragment.onActivityResultFragment(requestCode, resultCode, data);
+            }
+        }
     }
 
     @Override
     protected void onPause() {
         super.onPause();
+        actionBarLayout.onPause();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onPause();
+            layersActionBarLayout.onPause();
+        }
         ApplicationLoader.mainInterfacePaused = true;
         ConnectionsManager.getInstance().setAppPaused(true, false);
     }
@@ -522,38 +772,43 @@ protected void onDestroy() {
     @Override
     protected void onResume() {
         super.onResume();
+        actionBarLayout.onResume();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onResume();
+            layersActionBarLayout.onResume();
+        }
         Utilities.checkForCrashes(this);
         Utilities.checkForUpdates(this);
         ApplicationLoader.mainInterfacePaused = false;
         ConnectionsManager.getInstance().setAppPaused(false, false);
-        actionBar.setBackOverlayVisible(currentConnectionState != 0);
-    }
-
-    @Override
-    protected void onFinish() {
-        if (finished) {
-            return;
-        }
-        finished = true;
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
+        actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
     }
 
     @Override
     public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
         AndroidUtilities.checkDisplaySize();
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
     }
 
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.appDidLogout) {
-            for (BaseFragment fragment : fragmentsStack) {
+            for (BaseFragment fragment : actionBarLayout.fragmentsStack) {
                 fragment.onFragmentDestroy();
             }
-            fragmentsStack.clear();
+            actionBarLayout.fragmentsStack.clear();
+            if (AndroidUtilities.isTablet()) {
+                for (BaseFragment fragment : layersActionBarLayout.fragmentsStack) {
+                    fragment.onFragmentDestroy();
+                }
+                layersActionBarLayout.fragmentsStack.clear();
+                for (BaseFragment fragment : rightActionBarLayout.fragmentsStack) {
+                    fragment.onFragmentDestroy();
+                }
+                rightActionBarLayout.fragmentsStack.clear();
+            }
             Intent intent2 = new Intent(this, IntroActivity.class);
             startActivity(intent2);
             onFinish();
@@ -567,35 +822,17 @@ public void didReceivedNotification(int id, Object... args) {
             if (currentConnectionState != state) {
                 FileLog.e("tmessages", "switch to state " + state);
                 currentConnectionState = state;
-                actionBar.setBackOverlayVisible(currentConnectionState != 0);
+                actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
             }
         }
     }
 
-    @Override
-    public void onOverlayShow(View view, BaseFragment fragment) {
-        if (view == null || fragment == null || fragmentsStack.isEmpty()) {
-            return;
-        }
-        View backStatusButton = view.findViewById(R.id.back_button);
-        TextView statusText = (TextView)view.findViewById(R.id.status_text);
-        backStatusButton.setVisibility(fragmentsStack.get(0) == fragment ? View.GONE : View.VISIBLE);
-        view.setEnabled(fragmentsStack.get(0) != fragment);
-        if (currentConnectionState == 1) {
-            statusText.setText(LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork));
-        } else if (currentConnectionState == 2) {
-            statusText.setText(LocaleController.getString("Connecting", R.string.Connecting));
-        } else if (currentConnectionState == 3) {
-            statusText.setText(LocaleController.getString("Updating", R.string.Updating));
-        }
-    }
-
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         try {
             super.onSaveInstanceState(outState);
-            if (!fragmentsStack.isEmpty()) {
-                BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
+            if (!actionBarLayout.fragmentsStack.isEmpty()) {
+                BaseFragment lastFragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
                 Bundle args = lastFragment.getArguments();
                 if (lastFragment instanceof ChatActivity && args != null) {
                     outState.putBundle("args", args);
@@ -623,7 +860,52 @@ public void onBackPressed() {
         if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(true);
         } else {
-            super.onBackPressed();
+            if (AndroidUtilities.isTablet()) {
+                if (layersActionBarLayout.getVisibility() == View.VISIBLE) {
+                    layersActionBarLayout.onBackPressed();
+                } else {
+                    boolean cancel = false;
+                    if (rightActionBarLayout.getVisibility() == View.VISIBLE && !rightActionBarLayout.fragmentsStack.isEmpty()) {
+                        BaseFragment lastFragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                        cancel = !lastFragment.onBackPressed();
+                    }
+                    if (!cancel) {
+                        actionBarLayout.onBackPressed();
+                    }
+                }
+            } else {
+                actionBarLayout.onBackPressed();
+            }
+        }
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+        actionBarLayout.onLowMemory();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onLowMemory();
+            layersActionBarLayout.onLowMemory();
+        }
+    }
+
+    @Override
+    public void onActionModeStarted(ActionMode mode) {
+        super.onActionModeStarted(mode);
+        actionBarLayout.onActionModeStarted(mode);
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onActionModeStarted(mode);
+            layersActionBarLayout.onActionModeStarted(mode);
+        }
+    }
+
+    @Override
+    public void onActionModeFinished(ActionMode mode) {
+        super.onActionModeFinished(mode);
+        actionBarLayout.onActionModeFinished(mode);
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onActionModeFinished(mode);
+            layersActionBarLayout.onActionModeFinished(mode);
         }
     }
 
@@ -633,11 +915,176 @@ public boolean onPreIme() {
             PhotoViewer.getInstance().closePhoto(true);
             return true;
         }
-        return super.onPreIme();
+        return false;
     }
 
     @Override
-    public void onLowMemory() {
-        super.onLowMemory();
+    public void onOverlayShow(View view, BaseFragment fragment) {
+        if (view == null || fragment == null || actionBarLayout.fragmentsStack.isEmpty()) {
+            return;
+        }
+        View backStatusButton = view.findViewById(R.id.back_button);
+        TextView statusText = (TextView)view.findViewById(R.id.status_text);
+        backStatusButton.setVisibility(actionBarLayout.fragmentsStack.get(0) == fragment ? View.GONE : View.VISIBLE);
+        view.setEnabled(actionBarLayout.fragmentsStack.get(0) != fragment);
+        if (currentConnectionState == 1) {
+            statusText.setText(LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork));
+        } else if (currentConnectionState == 2) {
+            statusText.setText(LocaleController.getString("Connecting", R.string.Connecting));
+        } else if (currentConnectionState == 3) {
+            statusText.setText(LocaleController.getString("Updating", R.string.Updating));
+        }
+    }
+
+    @Override
+    public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (fragment instanceof MessagesActivity) {
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
+                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                    actionBarLayout.removeAllFragments();
+                    actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation);
+                    layersActionBarLayout.removeAllFragments();
+                    layersActionBarLayout.setVisibility(View.GONE);
+                    if (!tabletFullSize) {
+                        shadowTabletSide.setVisibility(View.VISIBLE);
+                        if (rightFragmentsStack.isEmpty()) {
+                            buttonLayoutTablet.setVisibility(View.VISIBLE);
+                            backgroundTablet.setVisibility(View.VISIBLE);
+                        }
+                    }
+                    return false;
+                }
+            } else if (fragment instanceof ChatActivity) {
+                if (!tabletFullSize && layout != rightActionBarLayout) {
+                    rightActionBarLayout.setVisibility(View.VISIBLE);
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.GONE);
+                    rightActionBarLayout.removeAllFragments();
+                    rightActionBarLayout.presentFragment(fragment, removeLast, true);
+                    if (removeLast) {
+                        layout.closeLastFragment(true);
+                    }
+                    return false;
+                } else if (tabletFullSize && layout != actionBarLayout) {
+                    actionBarLayout.presentFragment(fragment, false, forceWithoutAnimation);
+                    if (removeLast) {
+                        layout.closeLastFragment(true);
+                    }
+                    return false;
+                }
+            } else if (layout != layersActionBarLayout) {
+                layersActionBarLayout.setVisibility(View.VISIBLE);
+                if (fragment instanceof LoginActivity) {
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                    shadowTabletSide.setVisibility(View.GONE);
+                    shadowTablet.setBackgroundColor(0x00000000);
+                } else {
+                    shadowTablet.setBackgroundColor(0x7F000000);
+                }
+                layersActionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation);
+                return false;
+            }
+            return true;
+        } else {
+            return true;
+        }
+    }
+
+    @Override
+    public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (fragment instanceof MessagesActivity) {
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
+                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                    actionBarLayout.removeAllFragments();
+                    actionBarLayout.addFragmentToStack(fragment);
+                    layersActionBarLayout.removeAllFragments();
+                    layersActionBarLayout.setVisibility(View.GONE);
+                    if (!tabletFullSize) {
+                        shadowTabletSide.setVisibility(View.VISIBLE);
+                        if (rightFragmentsStack.isEmpty()) {
+                            buttonLayoutTablet.setVisibility(View.VISIBLE);
+                            backgroundTablet.setVisibility(View.VISIBLE);
+                        }
+                    }
+                    return false;
+                }
+            } else if (fragment instanceof ChatActivity) {
+                if (!tabletFullSize && layout != rightActionBarLayout) {
+                    rightActionBarLayout.setVisibility(View.VISIBLE);
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.GONE);
+                    rightActionBarLayout.removeAllFragments();
+                    rightActionBarLayout.addFragmentToStack(fragment);
+                    return false;
+                } else if (tabletFullSize && layout != actionBarLayout) {
+                    actionBarLayout.addFragmentToStack(fragment);
+                    return false;
+                }
+            } else if (layout != layersActionBarLayout) {
+                layersActionBarLayout.setVisibility(View.VISIBLE);
+                if (fragment instanceof LoginActivity) {
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                    shadowTabletSide.setVisibility(View.GONE);
+                    shadowTablet.setBackgroundColor(0x00000000);
+                } else {
+                    shadowTablet.setBackgroundColor(0x7F000000);
+                }
+                layersActionBarLayout.addFragmentToStack(fragment);
+                return false;
+            }
+            return true;
+        } else {
+            return true;
+        }
+    }
+
+    @Override
+    public boolean needCloseLastFragment(ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (layout == actionBarLayout && layout.fragmentsStack.size() <= 1) {
+                onFinish();
+                finish();
+                return false;
+            } else if (layout == rightActionBarLayout) {
+                if (!tabletFullSize) {
+                    buttonLayoutTablet.setVisibility(View.VISIBLE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                }
+            }
+        } else {
+            if (layout.fragmentsStack.size() <= 1) {
+                onFinish();
+                finish();
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public void onRebuildAllFragments(ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (layout == layersActionBarLayout) {
+                rightActionBarLayout.rebuildAllFragmentViews(true);
+                rightActionBarLayout.showLastFragment();
+                actionBarLayout.rebuildAllFragmentViews(true);
+                actionBarLayout.showLastFragment();
+
+                TextView button = (TextView)findViewById(R.id.new_group_button);
+                button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
+                button = (TextView)findViewById(R.id.new_secret_button);
+                button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
+                button = (TextView)findViewById(R.id.new_broadcast_button);
+                button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+                button = (TextView)findViewById(R.id.contacts_button);
+                button.setText(LocaleController.getString("Contacts", R.string.Contacts));
+                button = (TextView)findViewById(R.id.settings_button);
+                button.setText(LocaleController.getString("Settings", R.string.Settings));
+            }
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 44f33396b..e3e065e87 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -27,6 +27,8 @@
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
 
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.TLRPC;
@@ -34,7 +36,6 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -235,8 +236,8 @@ public void onClick(View view) {
                         if (user.photo != null) {
                             photo = user.photo.photo_small;
                         }
-                        avatarImageView.setImage(photo, "50_50", Utilities.getUserAvatarForId(user.id));
-                        nameTextView.setText(Utilities.formatName(user.first_name, user.last_name));
+                        avatarImageView.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+                        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
                     }
                     userLocation = new Location("network");
                     userLocation.setLatitude(messageObject.messageOwner.media.geo.lat);
@@ -284,8 +285,8 @@ private void updateUserData() {
                 if (user.photo != null) {
                     photo = user.photo.photo_small;
                 }
-                avatarImageView.setImage(photo, null, Utilities.getUserAvatarForId(user.id));
-                nameTextView.setText(Utilities.formatName(user.first_name, user.last_name));
+                avatarImageView.setImage(photo, null, AndroidUtilities.getUserAvatarForId(user.id));
+                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 100936d0f..613b7e7d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -25,12 +25,12 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.android.PhotoObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.BackupImageView;
@@ -326,14 +326,20 @@ public boolean onPreDraw() {
                     WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
                     int rotation = manager.getDefaultDisplay().getRotation();
 
-                    if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
-                        listView.setNumColumns(6);
-                        itemWidth = getParentActivity().getResources().getDisplayMetrics().widthPixels / 6 - AndroidUtilities.dp(2) * 5;
-                        listView.setColumnWidth(itemWidth);
-                    } else {
+                    if (AndroidUtilities.isTablet()) {
                         listView.setNumColumns(4);
-                        itemWidth = getParentActivity().getResources().getDisplayMetrics().widthPixels / 4 - AndroidUtilities.dp(2) * 3;
+                        itemWidth = AndroidUtilities.dp(490) / 4 - AndroidUtilities.dp(2) * 3;
                         listView.setColumnWidth(itemWidth);
+                    } else {
+                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                            listView.setNumColumns(6);
+                            itemWidth = AndroidUtilities.displaySize.x / 6 - AndroidUtilities.dp(2) * 5;
+                            listView.setColumnWidth(itemWidth);
+                        } else {
+                            listView.setNumColumns(4);
+                            itemWidth = AndroidUtilities.displaySize.x / 4 - AndroidUtilities.dp(2) * 3;
+                            listView.setColumnWidth(itemWidth);
+                        }
                     }
                     listView.setPadding(listView.getPaddingLeft(), AndroidUtilities.dp(4), listView.getPaddingRight(), listView.getPaddingBottom());
                     listAdapter.notifyDataSetChanged();
@@ -407,7 +413,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     if (message.imagePreview != null) {
                         imageView.setImageBitmap(message.imagePreview);
                     } else {
-                        TLRPC.PhotoSize photoSize = PhotoObject.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 80, 80);
+                        TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 80, 80);
                         imageView.setImage(photoSize.location, null, R.drawable.photo_placeholder_in);
                     }
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 85cb4a3dd..16de820dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -68,6 +68,8 @@
 
     private MessagesActivityDelegate delegate;
 
+    private long openedDialogId = 0;
+
     private final static int messages_list_menu_new_messages = 1;
     private final static int messages_list_menu_new_chat = 2;
     private final static int messages_list_menu_other = 6;
@@ -94,6 +96,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
         if (getArguments() != null) {
             onlySelect = arguments.getBoolean("onlySelect", false);
             serverOnly = arguments.getBoolean("serverOnly", false);
@@ -116,6 +119,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
         delegate = null;
     }
 
@@ -224,6 +228,10 @@ public void onItemClick(int id) {
 
             messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
             messagesListView.setAdapter(messagesListViewAdapter);
+            if (delegate == null && AndroidUtilities.isTablet()) {
+                messagesListView.setDivider(inflater.getContext().getResources().getDrawable(R.drawable.messages_list_divider2));
+                messagesListView.setDividerHeight(1);
+            }
 
             progressView = fragmentView.findViewById(R.id.progressLayout);
             messagesListViewAdapter.notifyDataSetChanged();
@@ -305,7 +313,14 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         } else {
                             args.putInt("enc_id", high_id);
                         }
+                        if (AndroidUtilities.isTablet()) {
+                            if (openedDialogId == dialog_id) {
+                                return;
+                            }
+                            openedDialogId = dialog_id;
+                        }
                         presentFragment(new ChatActivity(args));
+                        updateVisibleRows(0);
                     }
                 }
             });
@@ -469,6 +484,11 @@ public void didReceivedNotification(int id, Object... args) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.contactsDidLoaded) {
             updateVisibleRows(0);
+        } else if (id == NotificationCenter.openedChatChanged) {
+            if (!serverOnly && AndroidUtilities.isTablet()) {
+                openedDialogId = (Long)args[0];
+                updateVisibleRows(0);
+            }
         }
     }
 
@@ -480,7 +500,15 @@ private void updateVisibleRows(int mask) {
         for (int a = 0; a < count; a++) {
             View child = messagesListView.getChildAt(a);
             if (child instanceof DialogCell) {
-                ((DialogCell) child).update(mask);
+                DialogCell cell = (DialogCell) child;
+                if (!serverOnly && AndroidUtilities.isTablet() && cell.getDialog() != null) {
+                    if (cell.getDialog().id == openedDialogId) {
+                        child.setBackgroundColor(0x0f000000);
+                    } else {
+                        child.setBackgroundColor(0);
+                    }
+                }
+                cell.update(mask);
             } else if (child instanceof ChatOrUserCell) {
                 ((ChatOrUserCell) child).update(mask);
             }
@@ -491,6 +519,10 @@ public void setDelegate(MessagesActivityDelegate delegate) {
         this.delegate = delegate;
     }
 
+    public MessagesActivityDelegate getDelegate() {
+        return delegate;
+    }
+
     private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
         if (useAlert && selectAlertString != null) {
             if (getParentActivity() == null) {
@@ -513,7 +545,7 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
                         if (user == null) {
                             return;
                         }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
                     } else if (lower_part < 0) {
                         TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
                         if (chat == null) {
@@ -528,7 +560,7 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
                 if (user == null) {
                     return;
                 }
-                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
+                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
             }
             CheckBox checkBox = null;
             /*if (delegate instanceof ChatActivity) {
@@ -713,7 +745,15 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             if (serverOnly) {
                 ((DialogCell)view).setDialog(MessagesController.getInstance().dialogsServerOnly.get(i));
             } else {
-                ((DialogCell)view).setDialog(MessagesController.getInstance().dialogs.get(i));
+                TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs.get(i);
+                if (AndroidUtilities.isTablet()) {
+                    if (dialog.id == openedDialogId) {
+                        view.setBackgroundColor(0x0f000000);
+                    } else {
+                        view.setBackgroundColor(0);
+                    }
+                }
+                ((DialogCell)view).setDialog(dialog);
             }
 
             return view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index 2a6e8afc8..91c0b1beb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -12,17 +12,14 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.Point;
 import android.graphics.drawable.BitmapDrawable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.util.AttributeSet;
-import android.view.Display;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.WindowManager;
 import android.widget.Button;
 import android.widget.FrameLayout;
 import android.widget.TextView;
@@ -302,14 +299,12 @@ public boolean onFragmentCreate() {
                 return false;
             }
         }
-        Point displaySize = new Point();
-        Display display = ((WindowManager)ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        if(android.os.Build.VERSION.SDK_INT < 13) {
-            displaySize.set(display.getWidth(), display.getHeight());
+        int size = 0;
+        if (AndroidUtilities.isTablet()) {
+            size = AndroidUtilities.dp(520);
         } else {
-            display.getSize(displaySize);
+            size = Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
         }
-        int size = Math.max(displaySize.x, displaySize.y);
         imageToCrop = ImageLoader.loadBitmap(photoPath, photoUri, size, size);
         if (imageToCrop == null) {
             return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 11a719e69..81b253b91 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -394,10 +394,14 @@ private void fixLayoutInternal() {
 
         int columnsCount = 2;
         if (selectedAlbum != null) {
-            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
-                columnsCount = 5;
-            } else {
+            if (AndroidUtilities.isTablet()) {
                 columnsCount = 3;
+            } else {
+                if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                    columnsCount = 5;
+                } else {
+                    columnsCount = 3;
+                }
             }
         } else {
             if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
@@ -405,7 +409,11 @@ private void fixLayoutInternal() {
             }
         }
         listView.setNumColumns(columnsCount);
-        itemWidth = (getParentActivity().getResources().getDisplayMetrics().widthPixels - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
+        if (AndroidUtilities.isTablet()) {
+            itemWidth = (AndroidUtilities.dp(490) - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
+        } else {
+            itemWidth = (AndroidUtilities.displaySize.x - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
+        }
         listView.setColumnWidth(itemWidth);
 
         listAdapter.notifyDataSetChanged();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 210ca91c5..15c7a5811 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -47,6 +47,7 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
@@ -60,9 +61,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
-import org.telegram.android.PhotoObject;
 import org.telegram.ui.Views.ActionBar.ActionBar;
-import org.telegram.ui.Views.ActionBar.ActionBarActivity;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.ActionBarMenu;
 import org.telegram.ui.Views.ActionBar.ActionBarMenuItem;
@@ -336,7 +335,7 @@ public void didReceivedNotification(int id, Object... args) {
                     if (photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
                         continue;
                     }
-                    TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(photo.sizes, 640, 640);
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640, 640);
                     if (sizeFull != null) {
                         if (currentFileLocation != null) {
                             for (TLRPC.PhotoSize size : photo.sizes) {
@@ -521,7 +520,7 @@ public void onItemClick(int id) {
                         closePhoto(false);
                         Bundle args2 = new Bundle();
                         args2.putLong("dialog_id", currentDialogId);
-                        ((ActionBarActivity)parentActivity).presentFragment(new MediaActivity(args2), false, true);
+                        ((LaunchActivity)parentActivity).presentFragment(new MediaActivity(args2), false, true);
                     }
                 } else if (id == gallery_menu_send) {
                     /*Intent intent = new Intent(this, MessagesActivity.class);
@@ -561,8 +560,13 @@ public void onItemClick(int id) {
 
             @Override
             public boolean canOpenMenu() {
-                if (currentFileName != null) {
-                    File f = new File(AndroidUtilities.getCacheDir(), currentFileName);
+                if (currentMessageObject != null) {
+                    File f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    if (f.exists()) {
+                        return true;
+                    }
+                } else if (currentFileLocation != null) {
+                    File f = FileLoader.getPathToAttach(currentFileLocation);
                     if (f.exists()) {
                         return true;
                     }
@@ -601,14 +605,15 @@ public void onClick(View v) {
                     return;
                 }
                 try {
-                    String fileName = getFileName(currentIndex, null);
-                    if (fileName == null) {
+                    int size[] = new int[1];
+                    TLRPC.FileLocation fileLocation = getFileLocation(currentIndex, size);
+                    if (fileLocation == null) {
                         return;
                     }
-                    File f = new File(AndroidUtilities.getCacheDir(), fileName);
+                    File f = FileLoader.getPathToAttach(fileLocation);
                     if (f.exists()) {
                         Intent intent = new Intent(Intent.ACTION_SEND);
-                        if (fileName.endsWith("mp4")) {
+                        if (f.toString().endsWith("mp4")) {
                             intent.setType("video/mp4");
                         } else {
                             intent.setType("image/jpeg");
@@ -940,7 +945,7 @@ private String getFileName(int index, TLRPC.InputFileLocation fileLocation) {
                 if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                     return message.messageOwner.action.newUserPhoto.photo_big;
                 } else {
-                    TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, 800, 800);
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, 800, 800);
                     if (sizeFull != null) {
                         size[0] = sizeFull.size;
                         if (size[0] == 0) {
@@ -952,7 +957,7 @@ private String getFileName(int index, TLRPC.InputFileLocation fileLocation) {
                     }
                 }
             } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && message.messageOwner.media.photo != null) {
-                TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 800, 800);
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 800, 800);
                 if (sizeFull != null) {
                     size[0] = sizeFull.size;
                     if (size[0] == 0) {
@@ -1003,7 +1008,7 @@ private String getFileName(int index, TLRPC.InputFileLocation fileLocation) {
                     location.secret = sizeFull.secret;
                     return location;
                 } else {
-                    TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, 800, 800);
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, 800, 800);
                     if (sizeFull != null) {
                         TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
                         location.local_id = sizeFull.location.local_id;
@@ -1014,7 +1019,7 @@ private String getFileName(int index, TLRPC.InputFileLocation fileLocation) {
                     }
                 }
             } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                TLRPC.PhotoSize sizeFull = PhotoObject.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 800, 800);
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 800, 800);
                 if (sizeFull != null) {
                     TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
                     location.local_id = sizeFull.location.local_id;
@@ -1067,7 +1072,7 @@ private void updateActionOverlays() {
                         load = true;
                     }
                 } else {
-                    File cacheFile = new File(AndroidUtilities.getCacheDir(), currentFileName);
+                    File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
                     if (cacheFile.exists()) {
                         currentOverlay.actionButton.setText(LocaleController.getString("ViewVideo", R.string.ViewVideo));
                     } else {
@@ -1219,7 +1224,7 @@ public void setImageIndex(int index, boolean init) {
             currentMessageObject = imagesArr.get(currentIndex);
             TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
             if (user != null) {
-                nameTextView.setText(Utilities.formatName(user.first_name, user.last_name));
+                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
             } else {
                 nameTextView.setText("");
             }
@@ -1326,7 +1331,12 @@ public void setImageIndex(int index, boolean init) {
         }
 
         if (currentFileName != null) {
-            File f = new File(AndroidUtilities.getCacheDir(), currentFileName);
+            File f = null;
+            if (currentMessageObject != null) {
+                f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            } else if (currentFileLocation != null) {
+                f = FileLoader.getPathToAttach(currentFileLocation);
+            }
             if (f.exists()) {
                 progressBar.setVisibility(View.GONE);
             } else {
@@ -2285,7 +2295,7 @@ private void onActionClick(View view) {
                 loadFile = true;
             }
         } else {
-            File cacheFile = new File(AndroidUtilities.getCacheDir(), currentFileName);
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
             if (cacheFile.exists()) {
                 Intent intent = new Intent(Intent.ACTION_VIEW);
                 intent.setDataAndType(Uri.fromFile(cacheFile), "video/mp4");
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 2d4bef557..00432144d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -13,7 +13,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
-import android.graphics.drawable.AnimationDrawable;
 import android.os.Bundle;
 import android.os.PowerManager;
 import android.util.AttributeSet;
@@ -43,7 +42,6 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
 import org.telegram.android.PhotoObject;
 import org.telegram.ui.Views.ActionBar.ActionBar;
@@ -53,6 +51,7 @@
 import org.telegram.ui.Views.ChatActivityEnterView;
 import org.telegram.ui.Views.FrameLayoutFixed;
 import org.telegram.ui.Views.PopupAudioView;
+import org.telegram.ui.Views.TypingDotsDrawable;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -71,6 +70,7 @@
     private ArrayList<ViewGroup> imageViews = new ArrayList<ViewGroup>();
     private ArrayList<ViewGroup> audioViews = new ArrayList<ViewGroup>();
     private VelocityTracker velocityTracker = null;
+    private TypingDotsDrawable typingDotsDrawable;
 
     private int classGuid;
     private TLRPC.User currentUser;
@@ -151,6 +151,8 @@ protected void onCreate(Bundle savedInstanceState) {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
 
+        typingDotsDrawable = new TypingDotsDrawable();
+
         chatActivityEnterView = new ChatActivityEnterView();
         chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
             @Override
@@ -447,9 +449,8 @@ public void onClick(View v) {
             boolean photoSet = false;
             if (currentPhotoObject != null) {
                 boolean photoExist = true;
-                String fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
                 if (messageObject.type == 1) {
-                    File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+                    File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
                     if (!cacheFile.exists()) {
                         photoExist = false;
                     }
@@ -624,7 +625,7 @@ public boolean onPreDraw() {
                 messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                 if (!checkTransitionAnimation() && !startedMoving) {
                     ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)messageContainer.getLayoutParams();
-                    if (!Utilities.isTablet(PopupNotificationActivity.this) && PopupNotificationActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                    if (!AndroidUtilities.isTablet() && PopupNotificationActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                         layoutParams.topMargin = AndroidUtilities.dp(40);
                     } else {
                         layoutParams.topMargin = AndroidUtilities.dp(48);
@@ -739,10 +740,10 @@ private void updateInterfaceForCurrentMessage(int move) {
 
         if (currentChat != null && currentUser != null) {
             actionBarLayer.setTitle(currentChat.title);
-            actionBarLayer.setSubtitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+            actionBarLayer.setSubtitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             actionBarLayer.setTitleIcon(0, 0);
         } else if (currentUser != null) {
-            actionBarLayer.setTitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             if ((int)dialog_id == 0) {
                 actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
             } else {
@@ -767,10 +768,10 @@ private void updateSubtitle() {
             if (currentUser.phone != null && currentUser.phone.length() != 0) {
                 actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
             } else {
-                actionBarLayer.setTitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             }
         } else {
-            actionBarLayer.setTitle(Utilities.formatName(currentUser.first_name, currentUser.last_name));
+            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
         }
         CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
         if (printString == null || printString.length() == 0) {
@@ -800,7 +801,7 @@ private void checkAndUpdateAvatar() {
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
-            placeHolderId = Utilities.getGroupAvatarForId(currentChat.id);
+            placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
         } else if (currentUser != null) {
             TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
             if (user == null) {
@@ -810,7 +811,7 @@ private void checkAndUpdateAvatar() {
             if (currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             }
-            placeHolderId = Utilities.getUserAvatarForId(currentUser.id);
+            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
         }
         if (avatarImageView != null) {
             avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
@@ -823,15 +824,14 @@ private void setTypingAnimation(boolean start) {
         }
         if (start) {
             try {
-                actionBarLayer.setSubTitleIcon(R.drawable.typing_dots, AndroidUtilities.dp(4));
-                AnimationDrawable mAnim = (AnimationDrawable)actionBarLayer.getSubTitleIcon();
-                mAnim.setAlpha(200);
-                mAnim.start();
+                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
+                typingDotsDrawable.start();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
         } else {
-            actionBarLayer.setSubTitleIcon(0, 0);
+            actionBarLayer.setSubTitleIcon(0, null, 0);
+            typingDotsDrawable.stop();
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 218ae7299..54a70125c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -40,6 +40,7 @@
 import org.telegram.android.MediaController;
 import org.telegram.messenger.BuildVars;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.SerializedData;
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
@@ -52,9 +53,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
-import org.telegram.android.PhotoObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.AvatarUpdater;
@@ -144,8 +143,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             }
                             TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo)response;
                             ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
-                            TLRPC.PhotoSize smallSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 100, 100);
-                            TLRPC.PhotoSize bigSize = PhotoObject.getClosestPhotoSizeWithSize(sizes, 1000, 1000);
+                            TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100, 100);
+                            TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000, 1000);
                             user.photo = new TLRPC.TL_userProfilePhoto();
                             user.photo.photo_id = photo.photo.id;
                             if (smallSize != null) {
@@ -828,7 +827,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     user = UserConfig.getCurrentUser();
                 }
                 if (user != null) {
-                    textView.setText(Utilities.formatName(user.first_name, user.last_name));
+                    textView.setText(ContactsController.formatName(user.first_name, user.last_name));
                     BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
                     avatarImage.processDetach = false;
                     TLRPC.FileLocation photo = null;
@@ -837,7 +836,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         photo = user.photo.photo_small;
                         photoBig = user.photo.photo_big;
                     }
-                    avatarImage.setImage(photo, "50_50", Utilities.getUserAvatarForId(user.id));
+                    avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
                     avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
                 }
                 return view;
@@ -999,7 +998,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 View divider = view.findViewById(R.id.settings_row_divider);
                 if (i == textSizeRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int size = preferences.getInt("fons_size", 16);
+                    int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
                     detailTextView.setText(String.format("%d", size));
                     textView.setText(LocaleController.getString("TextSize", R.string.TextSize));
                     divider.setVisibility(View.VISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
index 7347e7b4b..56a426b92 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
@@ -42,7 +42,6 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
-import org.telegram.android.PhotoObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -120,9 +119,9 @@ public void onClick(View view) {
                             width = height;
                             height = temp;
                         }
-                        TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
+                        TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
                         String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
-                        File f = new File(AndroidUtilities.getCacheDir(), fileName);
+                        File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
                         File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
                         try {
                             done = Utilities.copyFile(f, toFile);
@@ -274,9 +273,9 @@ private void processSelectedBackground() {
                 width = height;
                 height = temp;
             }
-            TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
+            TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, width, height);
             String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
-            File f = new File(AndroidUtilities.getCacheDir(), fileName);
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
             if (!f.exists()) {
                 progressBar.setProgress(0);
                 loadingFile = fileName;
@@ -285,7 +284,7 @@ private void processSelectedBackground() {
                 progressBar.setVisibility(View.VISIBLE);
                 loadingSize = size;
                 selectedColor = 0;
-                FileLoader.getInstance().loadFile(size);
+                FileLoader.getInstance().loadFile(size, true);
                 backgroundImage.setBackgroundColor(0);
             } else {
                 if (loadingFile != null) {
@@ -533,7 +532,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 BackupImageView image = (BackupImageView)view.findViewById(R.id.image);
                 View selection = view.findViewById(R.id.selection);
                 TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
-                TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, AndroidUtilities.dp(100), AndroidUtilities.dp(100));
+                TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, AndroidUtilities.dp(100), AndroidUtilities.dp(100));
                 if (size != null && size.location != null) {
                     image.setImage(size.location, "100_100", 0);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index a89cf848a..718fb101f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -34,7 +34,6 @@
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 import org.telegram.android.MessageObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
@@ -542,7 +541,7 @@ public void onClick(View view) {
                 Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
                 textView.setTypeface(typeface);
 
-                textView.setText(Utilities.formatName(user.first_name, user.last_name));
+                textView.setText(ContactsController.formatName(user.first_name, user.last_name));
                 onlineText.setText(LocaleController.formatUserStatus(user));
 
                 TLRPC.FileLocation photo = null;
@@ -551,7 +550,7 @@ public void onClick(View view) {
                     photo = user.photo.photo_small;
                     photoBig = user.photo.photo_big;
                 }
-                avatarImage.setImage(photo, "50_50", Utilities.getUserAvatarForId(user.id));
+                avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
                 avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
                 return view;
             } else if (type == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index b72986a39..9d74a6839 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -10,16 +10,19 @@
 
 import android.annotation.TargetApi;
 import android.content.res.Configuration;
+import android.graphics.SurfaceTexture;
 import android.media.MediaCodec;
 import android.media.MediaCodecInfo;
+import android.media.MediaCodecList;
 import android.media.MediaExtractor;
 import android.media.MediaFormat;
-import android.media.MediaMetadataRetriever;
 import android.media.MediaPlayer;
+import android.os.Build;
 import android.os.Bundle;
+import android.view.Gravity;
 import android.view.LayoutInflater;
-import android.view.SurfaceHolder;
-import android.view.SurfaceView;
+import android.view.Surface;
+import android.view.TextureView;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
@@ -28,14 +31,20 @@
 import android.widget.TextView;
 
 import com.coremedia.iso.IsoFile;
+import com.coremedia.iso.boxes.Box;
 import com.coremedia.iso.boxes.Container;
+import com.coremedia.iso.boxes.MediaBox;
+import com.coremedia.iso.boxes.MediaHeaderBox;
+import com.coremedia.iso.boxes.SampleSizeBox;
 import com.coremedia.iso.boxes.TrackBox;
+import com.coremedia.iso.boxes.TrackHeaderBox;
 import com.coremedia.iso.boxes.h264.AvcConfigurationBox;
 import com.googlecode.mp4parser.authoring.Movie;
 import com.googlecode.mp4parser.authoring.Track;
 import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
 import com.googlecode.mp4parser.authoring.container.mp4.MovieCreator;
 import com.googlecode.mp4parser.authoring.tracks.CroppedTrack;
+import com.googlecode.mp4parser.util.Matrix;
 import com.googlecode.mp4parser.util.Path;
 
 import org.telegram.android.AndroidUtilities;
@@ -44,6 +53,7 @@
 import org.telegram.android.video.MP4Builder;
 import org.telegram.android.video.Mp4Movie;
 import org.telegram.android.video.OutputSurface;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
@@ -58,22 +68,24 @@
 import java.io.FileOutputStream;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 
-@TargetApi(18)
-public class VideoEditorActivity extends BaseFragment implements SurfaceHolder.Callback {
+@TargetApi(16)
+public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener {
 
     private final static int OMX_TI_COLOR_FormatYUV420PackedSemiPlanar = 0x7F000100;
     private final static int OMX_QCOM_COLOR_FormatYVU420SemiPlanar = 0x7FA30C00;
     private final static int OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03;
     private final static int OMX_SEC_COLOR_FormatNV12Tiled = 0x7FC00002;
     private final static int OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m = 0x7FA30C04;
+    private final static String MIME_TYPE = "video/avc";
+
+    private final static int PROCESSOR_TYPE_OTHER = 0;
+    private final static int PROCESSOR_TYPE_QCOM = 1;
 
     private MediaPlayer videoPlayer = null;
-    private SurfaceHolder surfaceHolder = null;
     private VideoTimelineView videoTimelineView = null;
     private View videoContainerView = null;
     private TextView originalSizeTextView = null;
@@ -81,38 +93,52 @@
     private View textContainerView = null;
     private ImageView playButton = null;
     private VideoSeekBarView videoSeekBarView = null;
+    private TextureView textureView = null;
+    private View controlView = null;
 
-    private boolean initied = false;
     private String videoPath = null;
-    private int videoWidth;
-    private int videoHeight;
-    private int editedVideoWidth;
-    private int editedVideoHeight;
-    private int editedVideoDuration;
     private float lastProgress = 0;
     private boolean needSeek = false;
     private VideoEditorActivityDelegate delegate;
-    private long esimatedFileSize = 0;
+
+    private boolean firstWrite = true;
+    //MediaMetadataRetriever TODO
+
+    private int rotationValue = 0;
+    private int originalWidth = 0;
+    private int originalHeight = 0;
+    private int resultWidth = 0;
+    private int resultHeight = 0;
+    private int bitrate = 0;
+    private float videoDuration = 0;
+    private long startTime = 0;
+    private long endTime = 0;
+    private int audioFramesSize = 0;
+    private int videoFramesSize = 0;
+    private int estimatedSize = 0;
+    private long esimatedDuration = 0;
 
     public interface VideoEditorActivityDelegate {
-        public abstract void didStartVideoConverting(String videoPath, String originalPath, long esimatedSize, int duration, int width, int height);
+        public abstract void didStartVideoConverting(String videoPath, String originalPath, long estimatedSize, int duration, int width, int height);
         public abstract void didAppenedVideoData(String videoPath, long finalSize);
     }
 
     private Runnable progressRunnable = new Runnable() {
         @Override
         public void run() {
-            while (videoPlayer.isPlaying()) {
+            while (videoPlayer != null && videoPlayer.isPlaying()) {
                 AndroidUtilities.RunOnUIThread(new Runnable() {
                     @Override
                     public void run() {
                         if (videoPlayer.isPlaying()) {
-                            float startTime = videoTimelineView.getLeftProgress() * videoPlayer.getDuration();
-                            float endTime = videoTimelineView.getRightProgress() * videoPlayer.getDuration();
+                            float startTime = videoTimelineView.getLeftProgress() * videoDuration;
+                            float endTime = videoTimelineView.getRightProgress() * videoDuration;
                             if (startTime == endTime) {
                                 startTime = endTime - 0.01f;
                             }
                             float progress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
+                            float lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
+                            progress = videoTimelineView.getLeftProgress() + lrdiff * progress;
                             if (progress > lastProgress) {
                                 videoSeekBarView.setProgress(progress);
                                 lastProgress = progress;
@@ -144,7 +170,7 @@ public VideoEditorActivity(Bundle args) {
 
     @Override
     public boolean onFragmentCreate() {
-        if (videoPath == null) {
+        if (videoPath == null || !processOpenVideo()) {
             return false;
         }
         videoPlayer = new MediaPlayer();
@@ -183,6 +209,15 @@ public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
                     } else if (id == 1) {
+                        if (videoPlayer != null) {
+                            try {
+                                videoPlayer.stop();
+                                videoPlayer.release();
+                                videoPlayer = null;
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
                         try {
                             //startConvert();
                             VideoEditWrapper.runTest(VideoEditorActivity.this);
@@ -204,41 +239,52 @@ public void onItemClick(int id) {
             editedSizeTextView = (TextView) fragmentView.findViewById(R.id.edited_size);
             videoContainerView = fragmentView.findViewById(R.id.video_container);
             textContainerView = fragmentView.findViewById(R.id.info_container);
+            controlView = fragmentView.findViewById(R.id.control_layout);
+            TextView titleTextView = (TextView) fragmentView.findViewById(R.id.original_title);
+            titleTextView.setText(LocaleController.getString("OriginalVideo", R.string.OriginalVideo));
+            titleTextView = (TextView) fragmentView.findViewById(R.id.edited_title);
+            titleTextView.setText(LocaleController.getString("EditedVideo", R.string.EditedVideo));
 
             videoTimelineView = (VideoTimelineView) fragmentView.findViewById(R.id.video_timeline_view);
             videoTimelineView.setVideoPath(videoPath);
             videoTimelineView.setDelegate(new VideoTimelineView.VideoTimelineViewDelegate() {
                 @Override
                 public void onLeftProgressChanged(float progress) {
+                    if (videoPlayer == null) {
+                        return;
+                    }
                     try {
                         if (videoPlayer.isPlaying()) {
                             videoPlayer.pause();
                             playButton.setImageResource(R.drawable.video_play);
                         }
                         videoPlayer.setOnSeekCompleteListener(null);
-                        videoPlayer.seekTo((int) (videoPlayer.getDuration() * progress));
+                        videoPlayer.seekTo((int) (videoDuration * progress));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
                     needSeek = true;
-                    videoSeekBarView.setProgress(0);
+                    videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
                     updateVideoEditedInfo();
                 }
 
                 @Override
                 public void onRifhtProgressChanged(float progress) {
+                    if (videoPlayer == null) {
+                        return;
+                    }
                     try {
                         if (videoPlayer.isPlaying()) {
                             videoPlayer.pause();
                             playButton.setImageResource(R.drawable.video_play);
                         }
                         videoPlayer.setOnSeekCompleteListener(null);
-                        videoPlayer.seekTo((int) (videoPlayer.getDuration() * progress));
+                        videoPlayer.seekTo((int) (videoDuration * progress));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
                     needSeek = true;
-                    videoSeekBarView.setProgress(0);
+                    videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
                     updateVideoEditedInfo();
                 }
             });
@@ -247,10 +293,13 @@ public void onRifhtProgressChanged(float progress) {
             videoSeekBarView.delegate = new VideoSeekBarView.SeekBarDelegate() {
                 @Override
                 public void onSeekBarDrag(float progress) {
+                    if (videoPlayer == null) {
+                        return;
+                    }
                     if (videoPlayer.isPlaying()) {
                         try {
                             float prog = videoTimelineView.getLeftProgress() + (videoTimelineView.getRightProgress() - videoTimelineView.getLeft()) * progress;
-                            videoPlayer.seekTo((int) (videoPlayer.getDuration() * prog));
+                            videoPlayer.seekTo((int) (videoDuration * prog));
                             lastProgress = progress;
                         } catch (Exception e) {
                             FileLog.e("tmessages", e);
@@ -266,18 +315,12 @@ public void onSeekBarDrag(float progress) {
             playButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    if (surfaceHolder.isCreating()) {
-                        return;
-                    }
                     play();
                 }
             });
 
-            SurfaceView surfaceView = (SurfaceView) fragmentView.findViewById(R.id.video_view);
-            surfaceHolder = surfaceView.getHolder();
-            surfaceHolder.addCallback(this);
-            surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
-            surfaceHolder.setFixedSize(270, 480);
+            textureView = (TextureView) fragmentView.findViewById(R.id.video_view);
+            textureView.setSurfaceTextureListener(this);
 
             updateVideoOriginalInfo();
             updateVideoEditedInfo();
@@ -303,102 +346,130 @@ public void onConfigurationChanged(Configuration newConfig) {
     }
 
     @Override
-    public void surfaceCreated(SurfaceHolder holder) {
-        videoPlayer.setDisplay(holder);
+    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
+        if (videoPlayer == null) {
+            return;
+        }
         try {
+            Surface s = new Surface(surface);
+            videoPlayer.setSurface(s);
             videoPlayer.setDataSource(videoPath);
             videoPlayer.prepare();
-            videoWidth = videoPlayer.getVideoWidth();
-            videoHeight = videoPlayer.getVideoHeight();
-            fixVideoSize();
-            videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
-            initied = true;
+            videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
-        updateVideoOriginalInfo();
-        updateVideoEditedInfo();
     }
 
     @Override
-    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
 
     }
 
     @Override
-    public void surfaceDestroyed(SurfaceHolder holder) {
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+        if (videoPlayer == null) {
+            return true;
+        }
         videoPlayer.setDisplay(null);
+        return true;
+    }
+
+    @Override
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+
     }
 
     private void onPlayComplete() {
         playButton.setImageResource(R.drawable.video_play);
-        videoSeekBarView.setProgress(0);
+        videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
         try {
-            videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoPlayer.getDuration()));
+            if (videoPlayer != null) {
+                videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
+            }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
     }
 
     private void updateVideoOriginalInfo() {
-        if (!initied || originalSizeTextView == null) {
+        if (originalSizeTextView == null) {
             return;
         }
         File file = new File(videoPath);
-        String videoDimension = String.format("%dx%d", videoPlayer.getVideoWidth(), videoPlayer.getVideoHeight());
-        int minutes = videoPlayer.getDuration() / 1000 / 60;
-        int seconds = (int) Math.ceil(videoPlayer.getDuration() / 1000) - minutes * 60;
+        int width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
+        int height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
+        String videoDimension = String.format("%dx%d", width, height);
+        int minutes = (int)(videoDuration / 1000 / 60);
+        int seconds = (int) Math.ceil(videoDuration / 1000) - minutes * 60;
         String videoTimeSize = String.format("%d:%02d, %s", minutes, seconds, Utilities.formatFileSize(file.length()));
-        originalSizeTextView.setText(String.format("%s: %s, %s", LocaleController.getString("OriginalVideo", R.string.OriginalVideo), videoDimension, videoTimeSize));
+        originalSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
     }
 
     private void updateVideoEditedInfo() {
-        if (!initied || editedSizeTextView == null) {
+        if (editedSizeTextView == null) {
             return;
         }
-        File file = new File(videoPath);
-        long size = file.length();
-        editedVideoWidth = videoPlayer.getVideoWidth();
-        editedVideoHeight = videoPlayer.getVideoHeight();
-        if (editedVideoWidth > 640 || editedVideoHeight > 640) {
-            float scale = editedVideoWidth > editedVideoHeight ? 640.0f / editedVideoWidth : 640.0f / editedVideoHeight;
-            editedVideoWidth *= scale;
-            editedVideoHeight *= scale;
-            size *= (scale * scale) * 1.02f;
-        }
-        String videoDimension = String.format("%dx%d", editedVideoWidth, editedVideoHeight);
-        editedVideoDuration = videoPlayer.getDuration();
-        int minutes = editedVideoDuration / 1000 / 60;
-        int seconds = (int) Math.ceil(editedVideoDuration / 1000) - minutes * 60;
-        String videoTimeSize = String.format("%d:%02d, ~%s", minutes, seconds, Utilities.formatFileSize(size));
-        esimatedFileSize = size;
-        editedSizeTextView.setText(String.format("%s: %s, %s", LocaleController.getString("EditedVideo", R.string.EditedVideo), videoDimension, videoTimeSize));
+        int width = rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
+        int height = rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
+        String videoDimension = String.format("%dx%d", width, height);
+
+        esimatedDuration = (long)Math.max(1000, (videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
+        estimatedSize = calculateEstimatedSize((float)esimatedDuration / videoDuration);
+        if (videoTimelineView.getLeftProgress() == 0) {
+            startTime = -1;
+        } else {
+            startTime = (long) (videoTimelineView.getLeftProgress() * videoDuration) * 1000;
+        }
+        if (videoTimelineView.getRightProgress() == 1) {
+            endTime = -1;
+        } else {
+            endTime = (long) (videoTimelineView.getRightProgress() * videoDuration) * 1000;
+        }
+
+        int minutes = (int)(esimatedDuration / 1000 / 60);
+        int seconds = (int) Math.ceil(esimatedDuration / 1000) - minutes * 60;
+        String videoTimeSize = String.format("%d:%02d, ~%s", minutes, seconds, Utilities.formatFileSize(estimatedSize));
+        editedSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
     }
 
     private void fixVideoSize() {
-        if (videoWidth == 0 || videoHeight == 0 || fragmentView == null || getParentActivity() == null) {
+        if (fragmentView == null || getParentActivity() == null) {
             return;
         }
         int viewHeight = 0;
-        if (!Utilities.isTablet(getParentActivity()) && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(40);
+        if (AndroidUtilities.isTablet()) {
+            viewHeight = AndroidUtilities.dp(472);
         } else {
-            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(48);
+            if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(40);
+            } else {
+                viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.dp(48);
+            }
         }
 
         int width = 0;
         int height = 0;
-        if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            width = AndroidUtilities.displaySize.x - AndroidUtilities.displaySize.x / 2 - AndroidUtilities.dp(24);
-            height = viewHeight - AndroidUtilities.dp(32);
+        if (AndroidUtilities.isTablet()) {
+            width = AndroidUtilities.dp(490);
+            height = viewHeight - AndroidUtilities.dp(276);
         } else {
-            width = AndroidUtilities.displaySize.x;
-            height = viewHeight - AndroidUtilities.dp(176);
+            if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                width = AndroidUtilities.displaySize.x / 3 - AndroidUtilities.dp(24);
+                height = viewHeight - AndroidUtilities.dp(32);
+            } else {
+                width = AndroidUtilities.displaySize.x;
+                height = viewHeight - AndroidUtilities.dp(276);
+            }
         }
 
-        float wr = (float) width / (float) videoWidth;
-        float hr = (float) height / (float) videoHeight;
-        float ar = (float) videoWidth / (float) videoHeight;
+        int aWidth = width;
+        int aHeight = height;
+        int vwidth = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
+        int vheight = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
+        float wr = (float) width / (float) vwidth;
+        float hr = (float) height / (float) vheight;
+        float ar = (float) vwidth / (float) vheight;
 
         if (wr > hr) {
             width = (int) (height * ar);
@@ -406,7 +477,12 @@ private void fixVideoSize() {
             height = (int) (width / ar);
         }
 
-        surfaceHolder.setFixedSize(width, height);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textureView.getLayoutParams();
+        layoutParams.width = width;
+        layoutParams.height = height;
+        layoutParams.leftMargin = 0;
+        layoutParams.topMargin = 0;
+        textureView.setLayoutParams(layoutParams);
     }
 
     private void fixLayout() {
@@ -417,35 +493,49 @@ private void fixLayout() {
             @Override
             public boolean onPreDraw() {
                 originalSizeTextView.getViewTreeObserver().removeOnPreDrawListener(this);
-                if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) videoContainerView.getLayoutParams();
                     layoutParams.topMargin = AndroidUtilities.dp(16);
                     layoutParams.bottomMargin = AndroidUtilities.dp(16);
-                    layoutParams.width = AndroidUtilities.displaySize.x / 2 - AndroidUtilities.dp(24);
+                    layoutParams.width = AndroidUtilities.displaySize.x / 3 - AndroidUtilities.dp(24);
                     layoutParams.leftMargin = AndroidUtilities.dp(16);
                     videoContainerView.setLayoutParams(layoutParams);
 
+                    layoutParams = (FrameLayout.LayoutParams) controlView.getLayoutParams();
+                    layoutParams.topMargin = AndroidUtilities.dp(16);
+                    layoutParams.bottomMargin = 0;
+                    layoutParams.width = AndroidUtilities.displaySize.x / 3 * 2 - AndroidUtilities.dp(32);
+                    layoutParams.leftMargin = AndroidUtilities.displaySize.x / 3 + AndroidUtilities.dp(16);
+                    layoutParams.gravity = Gravity.TOP;
+                    controlView.setLayoutParams(layoutParams);
+
                     layoutParams = (FrameLayout.LayoutParams) textContainerView.getLayoutParams();
-                    layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-                    layoutParams.width = AndroidUtilities.displaySize.x / 2 - AndroidUtilities.dp(24);
-                    layoutParams.leftMargin = AndroidUtilities.displaySize.x / 2 + AndroidUtilities.dp(8);
+                    layoutParams.width = AndroidUtilities.displaySize.x / 3 * 2 - AndroidUtilities.dp(32);
+                    layoutParams.leftMargin = AndroidUtilities.displaySize.x / 3 + AndroidUtilities.dp(16);
                     layoutParams.rightMargin = AndroidUtilities.dp(16);
-                    layoutParams.topMargin = AndroidUtilities.dp(16);
+                    layoutParams.bottomMargin = AndroidUtilities.dp(16);
                     textContainerView.setLayoutParams(layoutParams);
                 } else {
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) videoContainerView.getLayoutParams();
                     layoutParams.topMargin = AndroidUtilities.dp(16);
-                    layoutParams.bottomMargin = AndroidUtilities.dp(160);
+                    layoutParams.bottomMargin = AndroidUtilities.dp(260);
                     layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
                     layoutParams.leftMargin = 0;
                     videoContainerView.setLayoutParams(layoutParams);
 
+                    layoutParams = (FrameLayout.LayoutParams) controlView.getLayoutParams();
+                    layoutParams.topMargin = 0;
+                    layoutParams.leftMargin = 0;
+                    layoutParams.bottomMargin = AndroidUtilities.dp(150);
+                    layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+                    layoutParams.gravity = Gravity.BOTTOM;
+                    controlView.setLayoutParams(layoutParams);
+
                     layoutParams = (FrameLayout.LayoutParams) textContainerView.getLayoutParams();
-                    layoutParams.height = AndroidUtilities.dp(143);
                     layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-                    layoutParams.leftMargin = 0;
-                    layoutParams.rightMargin = 0;
-                    layoutParams.topMargin = 0;
+                    layoutParams.leftMargin = AndroidUtilities.dp(16);
+                    layoutParams.rightMargin = AndroidUtilities.dp(16);
+                    layoutParams.bottomMargin = AndroidUtilities.dp(16);
                     textContainerView.setLayoutParams(layoutParams);
                 }
                 fixVideoSize();
@@ -456,6 +546,9 @@ public boolean onPreDraw() {
     }
 
     private void play() {
+        if (videoPlayer == null) {
+            return;
+        }
         if (videoPlayer.isPlaying()) {
             videoPlayer.pause();
             playButton.setImageResource(R.drawable.video_play);
@@ -465,18 +558,20 @@ private void play() {
                 lastProgress = 0;
                 if (needSeek) {
                     float prog = videoTimelineView.getLeftProgress() + (videoTimelineView.getRightProgress() - videoTimelineView.getLeft()) * videoSeekBarView.getProgress();
-                    videoPlayer.seekTo((int) (videoPlayer.getDuration() * prog));
+                    videoPlayer.seekTo((int) (videoDuration * prog));
                     needSeek = false;
                 }
                 videoPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                     @Override
                     public void onSeekComplete(MediaPlayer mp) {
-                        float startTime = videoTimelineView.getLeftProgress() * videoPlayer.getDuration();
-                        float endTime = videoTimelineView.getRightProgress() * videoPlayer.getDuration();
+                        float startTime = videoTimelineView.getLeftProgress() * videoDuration;
+                        float endTime = videoTimelineView.getRightProgress() * videoDuration;
                         if (startTime == endTime) {
                             startTime = endTime - 0.01f;
                         }
                         lastProgress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
+                        float lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
+                        lastProgress = videoTimelineView.getLeftProgress() + lrdiff * lastProgress;
                         videoSeekBarView.setProgress(lastProgress);
                     }
                 });
@@ -538,12 +633,16 @@ public void run() {
         }
     }
 
-    private void didWriteData(final String videoPath, final boolean first, final long finalSize) {
+    private void didWriteData(final String videoPath, final long finalSize) {
         AndroidUtilities.RunOnUIThread(new Runnable() {
             @Override
             public void run() {
-                if (first) {
-                    delegate.didStartVideoConverting(videoPath, VideoEditorActivity.this.videoPath, esimatedFileSize, editedVideoDuration, editedVideoWidth, editedVideoHeight);
+                if (firstWrite) {
+                    int width = rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
+                    int height = rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
+                    delegate.didStartVideoConverting(videoPath, VideoEditorActivity.this.videoPath, estimatedSize, (int)esimatedDuration, width, height);
+                    firstWrite = false;
+                    finishFragment();
                 } else {
                     delegate.didAppenedVideoData(videoPath, finalSize);
                 }
@@ -551,327 +650,532 @@ public void run() {
         });
     }
 
-    private boolean startConvert2() {
-        MediaCodec decoder = null;
-        MediaCodec encoder = null;
-        MediaExtractor extractor = null;
-        InputSurface inputSurface = null;
-        OutputSurface outputSurface = null;
-        MP4Builder mediaMuxer = null;
-        File cacheFile = null;
-        long time = System.currentTimeMillis();
-        boolean finished = true;
-        boolean firstWrite = true;
-
-        class AudioBufferTemp {
-            ByteBuffer buffer;
-            int flags;
-            int size;
-            long presentationTimeUs;
+    private static MediaCodecInfo selectCodec(String mimeType) {
+        int numCodecs = MediaCodecList.getCodecCount();
+        for (int i = 0; i < numCodecs; i++) {
+            MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);
+            if (!codecInfo.isEncoder()) {
+                continue;
+            }
+            String[] types = codecInfo.getSupportedTypes();
+            for (String type : types) {
+                if (type.equalsIgnoreCase(mimeType)) {
+                    return codecInfo;
+                }
+            }
         }
+        return null;
+    }
 
-        try {
-            File inputFile = new File(videoPath);
-            if (!inputFile.canRead()) {
+    private static boolean isRecognizedFormat(int colorFormat) {
+        switch (colorFormat) {
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:
+                return true;
+            default:
                 return false;
+        }
+    }
+
+    private static int selectColorFormat(MediaCodecInfo codecInfo, String mimeType) {
+        MediaCodecInfo.CodecCapabilities capabilities = codecInfo.getCapabilitiesForType(mimeType);
+        for (int i = 0; i < capabilities.colorFormats.length; i++) {
+            int colorFormat = capabilities.colorFormats[i];
+            if (isRecognizedFormat(colorFormat)) {
+                return colorFormat;
             }
+        }
+        return 0;
+    }
 
-            boolean outputDone = false;
+    private long readAndWriteTrack(MediaExtractor extractor, MP4Builder mediaMuxer, MediaCodec.BufferInfo info, long start, long end, File file, boolean isAudio) throws Exception {
+        int trackIndex = selectTrack(extractor, isAudio);
+        if (trackIndex >= 0) {
+            extractor.selectTrack(trackIndex);
+            MediaFormat trackFormat = extractor.getTrackFormat(trackIndex);
+            int muxerTrackIndex = mediaMuxer.addTrack(trackFormat, isAudio);
+            int maxBufferSize = trackFormat.getInteger(MediaFormat.KEY_MAX_INPUT_SIZE);
             boolean inputDone = false;
-            boolean decoderDone = false;
-            boolean muxerStarted = false;
-            int videoTrackIndex = -5;
-            int audioTrackIndex = -5;
-            int audioIndex = -5;
-            int videoIndex = -5;
-            int audioBufferSize = 0;
-            ByteBuffer audioBuffer = null;
-            ArrayList<AudioBufferTemp> audioBuffers = new ArrayList<AudioBufferTemp>();
-
-            MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
-            mediaMetadataRetriever.setDataSource(inputFile.toString());
-            String rotation = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
-            int rotationValue = 0;
-            if (rotation != null) {
-                try {
-                    rotationValue = Integer.parseInt(rotation);
-                } catch (Exception e) {
-                    //don't promt
-                }
+            if (start > 0) {
+                extractor.seekTo(start, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
+            } else {
+                extractor.seekTo(0, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
             }
+            ByteBuffer buffer = ByteBuffer.allocateDirect(maxBufferSize);
+            long startTime = -1;
 
-            extractor = new MediaExtractor();
-            extractor.setDataSource(inputFile.toString());
+            while (!inputDone) {
+                boolean eof = false;
+                int index = extractor.getSampleTrackIndex();
+                if (index == trackIndex) {
+                    info.size = extractor.readSampleData(buffer, 0);
 
-            String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
-            UserConfig.lastLocalId--;
-            cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
-            UserConfig.saveConfig(false);
+                    if (info.size < 0) {
+                        info.size = 0;
+                        eof = true;
+                    } else {
+                        info.presentationTimeUs = extractor.getSampleTime();
+                        if (start > 0 && startTime == -1) {
+                            startTime = info.presentationTimeUs;
+                        }
+                        if (end < 0 || info.presentationTimeUs < end) {
+                            info.offset = 0;
+                            info.flags = extractor.getSampleFlags();
+                            if (!isAudio) {
+                                buffer.limit(info.offset + info.size);
+                                buffer.position(info.offset);
+                                buffer.putInt(info.size - 4);
+                            }
+                            if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info)) {
+                                didWriteData(file.toString(), 0);
+                            }
+                            extractor.advance();
+                        } else {
+                            eof = true;
+                        }
+                    }
+                } else if (index == -1) {
+                    eof = true;
+                }
+                if (eof) {
+                    inputDone = true;
+                }
+            }
 
-            Mp4Movie movie = new Mp4Movie();
-            movie.setCacheFile(cacheFile);
-            movie.setRotation(rotationValue);
-            movie.setSize(640, 360);
-            mediaMuxer = new MP4Builder().createMovie(movie);
+            extractor.unselectTrack(trackIndex);
+            return startTime;
+        }
+        return -1;
+    }
 
-            videoIndex = selectTrack(extractor, false);
-            if (videoIndex < 0) {
+    private boolean processOpenVideo() {
+        try {
+            IsoFile isoFile = new IsoFile(videoPath);
+            List<Box> boxes = Path.getPaths(isoFile, "/moov/trak/");
+            TrackHeaderBox trackHeaderBox = null;
+            for (Box box : boxes) {
+                TrackBox trackBox = (TrackBox)box;
+                int sampleSizes = 0;
+                int trackBitrate = 0;
+                try {
+                    MediaBox mediaBox = trackBox.getMediaBox();
+                    MediaHeaderBox mediaHeaderBox = mediaBox.getMediaHeaderBox();
+                    SampleSizeBox sampleSizeBox = mediaBox.getMediaInformationBox().getSampleTableBox().getSampleSizeBox();
+                    for (long size : sampleSizeBox.getSampleSizes()) {
+                        sampleSizes += size;
+                    }
+                    videoDuration = mediaHeaderBox.getDuration() / mediaHeaderBox.getTimescale();
+                    trackBitrate = (int)(sampleSizes * 8 / videoDuration);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                TrackHeaderBox headerBox = trackBox.getTrackHeaderBox();
+                if (headerBox.getWidth() != 0 && headerBox.getHeight() != 0) {
+                    trackHeaderBox = headerBox;
+                    bitrate = trackBitrate / 100000 * 100000;
+                    if (bitrate > 900000) {
+                        bitrate = 900000;
+                    }
+                    videoFramesSize += sampleSizes;
+                } else {
+                    audioFramesSize += sampleSizes;
+                }
+            }
+            if (trackHeaderBox == null) {
                 return false;
             }
-            extractor.selectTrack(videoIndex);
-            MediaFormat inputFormat = extractor.getTrackFormat(videoIndex);
-            String mime = inputFormat.getString(MediaFormat.KEY_MIME);
-
-            audioIndex = selectTrack(extractor, true);
-            if (audioIndex >= 0) {
-                extractor.selectTrack(audioIndex);
-                MediaFormat audioFormat = extractor.getTrackFormat(audioIndex);
-                audioTrackIndex = mediaMuxer.addTrack(audioFormat, false);
-                audioBufferSize = audioFormat.getInteger(MediaFormat.KEY_MAX_INPUT_SIZE);
+
+            Matrix matrix = trackHeaderBox.getMatrix();
+            if (matrix.equals(Matrix.ROTATE_90)) {
+                rotationValue = 90;
+            } else if (matrix.equals(Matrix.ROTATE_180)) {
+                rotationValue = 180;
+            } else if (matrix.equals(Matrix.ROTATE_270)) {
+                rotationValue = 270;
+            }
+            resultWidth = originalWidth = (int)trackHeaderBox.getWidth();
+            resultHeight = originalHeight = (int)trackHeaderBox.getHeight();
+
+            if (resultWidth > 640 || resultHeight > 640) {
+                float scale = resultWidth > resultHeight ? 640.0f / resultWidth : 640.0f / resultHeight;
+                resultWidth *= scale;
+                resultHeight *= scale;
+                if (bitrate != 0) {
+                    bitrate *= scale;
+                    videoFramesSize = (int)(bitrate / 8 * videoDuration);
+                }
             }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return false;
+        }
+
+        videoDuration *= 1000;
+
+        updateVideoOriginalInfo();
+        updateVideoEditedInfo();
+
+        return true;
+    }
+
+    private int calculateEstimatedSize(float timeDelta) {
+        int size = (int)((audioFramesSize + videoFramesSize) * timeDelta);
+        size += size / (32 * 1024) * 16;
+        return size;
+    }
+
+    private boolean startConvert2() {
+        File inputFile = new File(videoPath);
+        if (!inputFile.canRead()) {
+            return false;
+        }
+
+        firstWrite = true;
+        File cacheFile = null;
+        boolean error = false;
+        long videoStartTime = startTime;
+
+        long time = System.currentTimeMillis();
 
-            MediaFormat outputFormat = MediaFormat.createVideoFormat(mime, 640, 360);
-            outputFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
-            outputFormat.setInteger(MediaFormat.KEY_BIT_RATE, 1000000);
-            outputFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 25);
-            outputFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 1);
-
-            encoder = MediaCodec.createEncoderByType(mime);
-            encoder.configure(outputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
-            inputSurface = new InputSurface(encoder.createInputSurface());
-            inputSurface.makeCurrent();
-            encoder.start();
-
-            decoder = MediaCodec.createDecoderByType(mime);
-            outputSurface = new OutputSurface();
-            decoder.configure(inputFormat, outputSurface.getSurface(), null, 0);
-            decoder.start();
-
-            final int TIMEOUT_USEC = 10000;
-            ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers();
-            ByteBuffer[] encoderOutputBuffers = encoder.getOutputBuffers();
-            MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
-
-            while (!outputDone) {
-                if (!inputDone) {
-                    boolean eof = false;
-                    int index = extractor.getSampleTrackIndex();
-                    if (index == videoIndex) {
-                        int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
-                        if (inputBufIndex >= 0) {
-                            ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex];
-                            int chunkSize = extractor.readSampleData(inputBuf, 0);
-                            if (chunkSize < 0) {
-                                decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                                inputDone = true;
-                            } else {
-                                decoder.queueInputBuffer(inputBufIndex, 0, chunkSize, extractor.getSampleTime(), 0);
-                                extractor.advance();
+        if (resultWidth != 0 && resultHeight != 0) {
+            MP4Builder mediaMuxer = null;
+            MediaExtractor extractor = null;
+
+            MediaCodec decoder = null;
+            MediaCodec encoder = null;
+            InputSurface inputSurface = null;
+            OutputSurface outputSurface = null;
+
+            try {
+                String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
+                UserConfig.lastLocalId--;
+                cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                UserConfig.saveConfig(false);
+
+                MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
+                Mp4Movie movie = new Mp4Movie();
+                movie.setCacheFile(cacheFile);
+                movie.setRotation(rotationValue);
+                movie.setSize(resultWidth, resultHeight);
+                mediaMuxer = new MP4Builder().createMovie(movie);
+                extractor = new MediaExtractor();
+                extractor.setDataSource(inputFile.toString());
+
+                if (resultWidth != originalWidth || resultHeight != originalHeight) {
+                    int videoIndex = -5;
+                    videoIndex = selectTrack(extractor, false);
+                    if (videoIndex >= 0) {
+                        boolean outputDone = false;
+                        boolean inputDone = false;
+                        boolean decoderDone = false;
+                        int swapUV = 0;
+                        int videoTrackIndex = -5;
+                        long videoTime = -1;
+
+                        int colorFormat = 0;
+                        int processorType = PROCESSOR_TYPE_OTHER;
+                        if (Build.VERSION.SDK_INT < 18) {
+                            MediaCodecInfo codecInfo = selectCodec(MIME_TYPE);
+                            colorFormat = selectColorFormat(codecInfo, MIME_TYPE);
+                            if (codecInfo.getName().contains("OMX.qcom.")) {
+                                processorType = PROCESSOR_TYPE_QCOM;
+                                if (Build.VERSION.SDK_INT == 16) { //nokia, lge
+                                    swapUV = 1;
+                                }
                             }
+                            FileLog.e("tmessages", "codec = " + codecInfo.getName());
+                        } else {
+                            colorFormat = MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;
                         }
-                    } else if (index == audioIndex) {
-                        if (audioBuffer == null) {
-                            audioBuffer = ByteBuffer.allocate(audioBufferSize);
+                        FileLog.e("tmessages", "colorFormat = " + colorFormat);
+
+                        int resultHeightAligned = resultHeight;
+                        int padding = 0;
+                        int bufferSize = resultWidth * resultHeight * 3 / 2;
+                        if (processorType == PROCESSOR_TYPE_OTHER) {
+                            if (resultHeight % 16 != 0) {
+                                resultHeightAligned += (16 - (resultHeight % 16));
+                                padding = resultWidth * (resultHeightAligned - resultHeight);
+                                bufferSize += padding * 5 / 4;
+                            }
+                        } else if (processorType == PROCESSOR_TYPE_QCOM) {
+                            if (!Build.MANUFACTURER.toLowerCase().equals("lge")) {
+                                int uvoffset = (resultWidth * resultHeight + 2047) & ~2047;
+                                padding = uvoffset - (resultWidth * resultHeight);
+                                bufferSize += padding;
+                            }
                         }
-                        info.size = extractor.readSampleData(audioBuffer, 0);
-                        if (info.size < 0) {
-                            info.size = 0;
-                            eof = true;
+
+                        extractor.selectTrack(videoIndex);
+                        if (startTime > 0) {
+                            extractor.seekTo(startTime, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
                         } else {
-                            if (muxerStarted) {
-                                info.offset = 0;
-                                info.presentationTimeUs = extractor.getSampleTime();
-                                info.flags = extractor.getSampleFlags();
-                                mediaMuxer.writeSampleData(audioTrackIndex, audioBuffer, info);
-                            } else {
-                                AudioBufferTemp audioBufferTemp = new AudioBufferTemp();
-                                audioBufferTemp.buffer = audioBuffer;
-                                audioBufferTemp.presentationTimeUs = extractor.getSampleTime();
-                                audioBufferTemp.flags = extractor.getSampleFlags();
-                                audioBufferTemp.size = info.size;
-                                audioBuffers.add(audioBufferTemp);
-                                audioBuffer = null;
-                            }
-                            extractor.advance();
+                            extractor.seekTo(0, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
                         }
-                    } else if (index == -1) {
-                        eof = true;
-                    }
-                    if (eof) {
-                        int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
-                        if (inputBufIndex >= 0) {
-                            decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                            inputDone = true;
+                        MediaFormat inputFormat = extractor.getTrackFormat(videoIndex);
+
+                        MediaFormat outputFormat = MediaFormat.createVideoFormat(MIME_TYPE, resultWidth, resultHeight);
+                        outputFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, colorFormat);
+                        outputFormat.setInteger(MediaFormat.KEY_BIT_RATE, bitrate != 0 ? bitrate : 921600);
+                        outputFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 25);
+                        outputFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 10);
+                        if (Build.VERSION.SDK_INT < 18) {
+                            outputFormat.setInteger("stride", resultWidth);
+                            outputFormat.setInteger("slice-height", resultHeightAligned);
                         }
-                    }
-                }
 
-                boolean decoderOutputAvailable = !decoderDone;
-                boolean encoderOutputAvailable = true;
-                while (decoderOutputAvailable || encoderOutputAvailable) {
-                    int encoderStatus = encoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
-                    if (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
-                        encoderOutputAvailable = false;
-                    } else if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
-                        encoderOutputBuffers = encoder.getOutputBuffers();
-                    } else if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
-                        MediaFormat newFormat = encoder.getOutputFormat();
-                        if (muxerStarted) {
-                            throw new RuntimeException("format changed twice");
+                        encoder = MediaCodec.createEncoderByType(MIME_TYPE);
+                        encoder.configure(outputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
+                        if (Build.VERSION.SDK_INT >= 18) {
+                            inputSurface = new InputSurface(encoder.createInputSurface());
+                            inputSurface.makeCurrent();
                         }
-                        videoTrackIndex = mediaMuxer.addTrack(newFormat, true);
-
-                        muxerStarted = true;
-                        if (!audioBuffers.isEmpty()) {
-                            for (AudioBufferTemp audioBufferTemp : audioBuffers) {
-                                info.size = audioBufferTemp.size;
-                                info.offset = 0;
-                                info.presentationTimeUs = audioBufferTemp.presentationTimeUs;
-                                info.flags = audioBufferTemp.flags;
-                                mediaMuxer.writeSampleData(audioTrackIndex, audioBufferTemp.buffer, info);
-                            }
-                            audioBuffers.clear();
+                        encoder.start();
+
+                        decoder = MediaCodec.createDecoderByType(inputFormat.getString(MediaFormat.KEY_MIME));
+                        if (Build.VERSION.SDK_INT >= 18) {
+                            outputSurface = new OutputSurface();
+                        } else {
+                            outputSurface = new OutputSurface(resultWidth, resultHeight);
                         }
-                    } else if (encoderStatus < 0) {
-                        FileLog.e("tmessages", "unexpected result from encoder.dequeueOutputBuffer: " + encoderStatus);
-                        return false;
-                    } else {
-                        ByteBuffer encodedData = encoderOutputBuffers[encoderStatus];
-                        if (encodedData == null) {
-                            FileLog.e("tmessages", "encoderOutputBuffer " + encoderStatus + " was null");
-                            return false;
+                        decoder.configure(inputFormat, outputSurface.getSurface(), null, 0);
+                        decoder.start();
+
+                        final int TIMEOUT_USEC = 2500;
+                        ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers();
+                        ByteBuffer[] encoderOutputBuffers = encoder.getOutputBuffers();
+                        ByteBuffer[] encoderInputBuffers = null;
+                        if (Build.VERSION.SDK_INT < 18) {
+                            encoderInputBuffers = encoder.getInputBuffers();
                         }
-                        if (info.size != 0) {
-                            if (!muxerStarted) {
-                                throw new RuntimeException("muxer hasn't started");
-                            }
-                            if ((info.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) == 0) {
-                                encodedData.limit(info.size);
-                                encodedData.position(info.offset);
-                                encodedData.putInt(Integer.reverseBytes(info.size - 4));
-                                mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info);
-                                didWriteData(cacheFile.toString(), firstWrite, 0);
-                                if (firstWrite) {
-                                    firstWrite = false;
+
+                        while (!outputDone) {
+                            if (!inputDone) {
+                                boolean eof = false;
+                                int index = extractor.getSampleTrackIndex();
+                                if (index == videoIndex) {
+                                    int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
+                                    if (inputBufIndex >= 0) {
+                                        ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex];
+                                        int chunkSize = extractor.readSampleData(inputBuf, 0);
+                                        if (chunkSize < 0) {
+                                            decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
+                                            inputDone = true;
+                                        } else {
+                                            decoder.queueInputBuffer(inputBufIndex, 0, chunkSize, extractor.getSampleTime(), 0);
+                                            extractor.advance();
+                                        }
+                                    }
+                                } else if (index == -1) {
+                                    eof = true;
+                                }
+                                if (eof) {
+                                    int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
+                                    if (inputBufIndex >= 0) {
+                                        decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
+                                        inputDone = true;
+                                    }
                                 }
                             }
-                        }
-                        outputDone = (info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
-                        encoder.releaseOutputBuffer(encoderStatus, false);
-                    }
-                    if (encoderStatus != MediaCodec.INFO_TRY_AGAIN_LATER) {
-                        continue;
-                    }
 
-                    if (!decoderDone) {
-                        int decoderStatus = decoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
-                        if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
-                            decoderOutputAvailable = false;
-                        } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
-
-                        } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
-                            MediaFormat newFormat = decoder.getOutputFormat();
-                        } else if (decoderStatus < 0) {
-                            FileLog.e("tmessages", "unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);
-                            return false;
-                        } else {
-                            boolean doRender = (info.size != 0);
-                            decoder.releaseOutputBuffer(decoderStatus, doRender);
-                            if (doRender) {
-                                outputSurface.awaitNewImage();
-                                outputSurface.drawImage();
-                                inputSurface.setPresentationTime(info.presentationTimeUs * 1000);
-                                inputSurface.swapBuffers();
-                            }
-                            if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
-                                FileLog.e("tmessages", "signaling input EOS");
-                                //if (WORK_AROUND_BUGS) {
-                                    // Bail early, possibly dropping a frame.
-                                //    return;
-                                //} else {
-                                    encoder.signalEndOfInputStream();
-                                //}
+                            boolean decoderOutputAvailable = !decoderDone;
+                            boolean encoderOutputAvailable = true;
+                            while (decoderOutputAvailable || encoderOutputAvailable) {
+                                int encoderStatus = encoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
+                                if (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
+                                    encoderOutputAvailable = false;
+                                } else if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
+                                    encoderOutputBuffers = encoder.getOutputBuffers();
+                                } else if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
+                                    MediaFormat newFormat = encoder.getOutputFormat();
+                                    if (videoTrackIndex == -5) {
+                                        videoTrackIndex = mediaMuxer.addTrack(newFormat, false);
+                                    }
+                                } else if (encoderStatus < 0) {
+                                    throw new RuntimeException("unexpected result from encoder.dequeueOutputBuffer: " + encoderStatus);
+                                } else {
+                                    ByteBuffer encodedData = encoderOutputBuffers[encoderStatus];
+                                    if (encodedData == null) {
+                                        throw new RuntimeException("encoderOutputBuffer " + encoderStatus + " was null");
+                                    }
+                                    if (info.size > 1) {
+                                        if ((info.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) == 0) {
+                                            encodedData.limit(info.offset + info.size);
+                                            encodedData.position(info.offset);
+                                            encodedData.putInt(Integer.reverseBytes(info.size - 4));
+                                            if (mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info)) {
+                                                didWriteData(cacheFile.toString(), 0);
+                                            }
+                                        } else if (videoTrackIndex == -5) {
+                                            byte[] csd = new byte[info.size];
+                                            encodedData.limit(info.offset + info.size);
+                                            encodedData.position(info.offset);
+                                            encodedData.get(csd);
+                                            ByteBuffer sps = null;
+                                            ByteBuffer pps = null;
+                                            for (int a = info.size - 1; a >= 0; a--) {
+                                                if (a > 3) {
+                                                    if (csd[a] == 1 && csd[a - 1] == 0 && csd[a - 2] == 0 && csd[a - 3] == 0) {
+                                                        sps = ByteBuffer.allocate(a - 3);
+                                                        pps = ByteBuffer.allocate(info.size - (a - 3));
+                                                        sps.put(csd, 0, a - 3).position(0);
+                                                        pps.put(csd, a - 3, info.size - (a - 3)).position(0);
+                                                        break;
+                                                    }
+                                                } else {
+                                                    break;
+                                                }
+                                            }
+
+                                            MediaFormat newFormat = MediaFormat.createVideoFormat(MIME_TYPE, resultWidth, resultHeight);
+                                            if (sps != null && pps != null) {
+                                                newFormat.setByteBuffer("csd-0", sps);
+                                                newFormat.setByteBuffer("csd-1", pps);
+                                            }
+                                            videoTrackIndex = mediaMuxer.addTrack(newFormat, false);
+                                        }
+                                    }
+                                    outputDone = (info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
+                                    encoder.releaseOutputBuffer(encoderStatus, false);
+                                }
+                                if (encoderStatus != MediaCodec.INFO_TRY_AGAIN_LATER) {
+                                    continue;
+                                }
+
+                                if (!decoderDone) {
+                                    int decoderStatus = decoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
+                                    if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
+                                        decoderOutputAvailable = false;
+                                    } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
+
+                                    } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
+                                        MediaFormat newFormat = decoder.getOutputFormat();
+                                    } else if (decoderStatus < 0) {
+                                        throw new RuntimeException("unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);
+                                    } else {
+                                        boolean doRender = false;
+                                        if (Build.VERSION.SDK_INT >= 18) {
+                                            doRender = info.size != 0;
+                                        } else {
+                                            doRender = info.size != 0 || info.presentationTimeUs != 0;
+                                        }
+                                        if (endTime > 0 && info.presentationTimeUs >= endTime) {
+                                            inputDone = true;
+                                            decoderDone = true;
+                                            doRender = false;
+                                            info.flags |= MediaCodec.BUFFER_FLAG_END_OF_STREAM;
+                                        }
+                                        if (startTime > 0 && videoTime == -1) {
+                                            if (info.presentationTimeUs < startTime) {
+                                                doRender = false;
+                                                FileLog.e("tmessages", "drop frame startTime = " + startTime + " present time = " + info.presentationTimeUs);
+                                            } else {
+                                                videoTime = info.presentationTimeUs;
+                                            }
+                                        }
+                                        decoder.releaseOutputBuffer(decoderStatus, doRender);
+                                        if (doRender) {
+                                            boolean errorWait = false;
+                                            try {
+                                                outputSurface.awaitNewImage();
+                                            } catch (Exception e) {
+                                                errorWait = true;
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            if (!errorWait) {
+                                                if (Build.VERSION.SDK_INT >= 18) {
+                                                    outputSurface.drawImage(false);
+                                                    inputSurface.setPresentationTime(info.presentationTimeUs * 1000);
+                                                    inputSurface.swapBuffers();
+                                                } else {
+                                                    int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
+                                                    if (inputBufIndex >= 0) {
+                                                        outputSurface.drawImage(true);
+                                                        ByteBuffer rgbBuf = outputSurface.getFrame();
+                                                        ByteBuffer yuvBuf = encoderInputBuffers[inputBufIndex];
+                                                        yuvBuf.clear();
+                                                        Utilities.convertVideoFrame(rgbBuf, yuvBuf, colorFormat, resultWidth, resultHeight, padding, swapUV);
+                                                        encoder.queueInputBuffer(inputBufIndex, 0, bufferSize, info.presentationTimeUs, 0);
+                                                    } else {
+                                                        FileLog.e("tmessages", "input buffer not available");
+                                                    }
+                                                }
+                                            }
+                                        }
+                                        if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
+                                            decoderOutputAvailable = false;
+                                            FileLog.e("tmessages", "decoder stream end");
+                                            if (Build.VERSION.SDK_INT >= 18) {
+                                                encoder.signalEndOfInputStream();
+                                            } else {
+                                                int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
+                                                if (inputBufIndex >= 0) {
+                                                    encoder.queueInputBuffer(inputBufIndex, 0, 1, info.presentationTimeUs, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
                             }
                         }
+                        extractor.unselectTrack(videoIndex);
+                        if (videoTime != -1) {
+                            videoStartTime = videoTime;
+                        }
+                    }
+                } else {
+                    long videoTime = readAndWriteTrack(extractor, mediaMuxer, info, startTime, endTime, cacheFile, false);
+                    if (videoTime != -1) {
+                        videoStartTime = videoTime;
                     }
                 }
-
-                /*if (!outputDone) { without surface
-                    int decoderStatus = decoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
-                    if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
-                        FileLog.e("tmessages", "no output from decoder available");
-                    } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
-                        FileLog.e("tmessages", "decoder output buffers changed");
-                        decoderOutputBuffers = decoder.getOutputBuffers();
-                    } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
-                        decoderOutputFormat = decoder.getOutputFormat();
-                        FileLog.e("tmessages", "decoder output format changed: " + decoderOutputFormat);
-                    } else if (decoderStatus < 0) {
-                        FileLog.e("tmessages", "unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);
-                        return false;
-                    } else {
-                        ByteBuffer outputFrame = decoderOutputBuffers[decoderStatus];
-                        outputFrame.position(info.offset);
-                        outputFrame.limit(info.offset + info.size);
-                        if (info.size == 0) {
-                            FileLog.e("tmessages", "got empty frame");
-                        } else {
-                            FileLog.e("tmessages", "decoded, checking frame format = " + decoderOutputFormat + " size = " + outputFrame.limit());
-                        }
-                        if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
-                            FileLog.e("tmessages", "output EOS");
-                            outputDone = true;
-                        }
-                        decoder.releaseOutputBuffer(decoderStatus, false);
+                readAndWriteTrack(extractor, mediaMuxer, info, videoStartTime, endTime, cacheFile, true);
+            } catch (Exception e) {
+                error = true;
+                FileLog.e("tmessages", e);
+            } finally {
+                if (extractor != null) {
+                    extractor.release();
+                    extractor = null;
+                }
+                if (outputSurface != null) {
+                    outputSurface.release();
+                    outputSurface = null;
+                }
+                if (inputSurface != null) {
+                    inputSurface.release();
+                    inputSurface = null;
+                }
+                if (decoder != null) {
+                    decoder.stop();
+                    decoder.release();
+                    decoder = null;
+                }
+                if (encoder != null) {
+                    encoder.stop();
+                    encoder.release();
+                    encoder = null;
+                }
+                if (mediaMuxer != null) {
+                    try {
+                        mediaMuxer.finishMovie(false);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
-                }*/
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            finished = false;
-        } finally {
-            if (outputSurface != null) {
-                outputSurface.release();
-                outputSurface = null;
-            }
-            if (inputSurface != null) {
-                inputSurface.release();
-                inputSurface = null;
-            }
-            if (decoder != null) {
-                decoder.stop();
-                decoder.release();
-                decoder = null;
-            }
-            if (encoder != null) {
-                encoder.stop();
-                encoder.release();
-                encoder = null;
-            }
-            if (extractor != null) {
-                extractor.release();
-                extractor = null;
-            }
-            if (mediaMuxer != null) {
-                try {
-                    mediaMuxer.finishMovie(false);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
+                    mediaMuxer = null;
                 }
-                mediaMuxer = null;
+                FileLog.e("tmessages", "time = " + (System.currentTimeMillis() - time));
             }
-            FileLog.e("tmessages", "time = " + (System.currentTimeMillis() - time));
+        } else {
+            return false;
         }
-        if (finished) {
-            didWriteData(cacheFile.toString(), firstWrite, cacheFile.length());
+        if (!error && cacheFile != null) {
+            didWriteData(cacheFile.toString(), cacheFile.length());
         }
-        AndroidUtilities.RunOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                finishFragment();
-            }
-        });
-        return finished;
+        return true;
     }
 
     private void startConvert() throws Exception {
@@ -922,7 +1226,7 @@ private void startConvert() throws Exception {
 
         String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
         UserConfig.lastLocalId--;
-        File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
         UserConfig.saveConfig(false);
 
         FileOutputStream fos = new FileOutputStream(cacheFile);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
index faf729a6a..d616b9dde 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
@@ -21,7 +21,6 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 
 import java.util.ArrayList;
 
@@ -171,7 +170,7 @@ public void setupAnimations(ArrayList<Animator> animators, boolean back) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
         } else {
             super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
index 701624e00..cdeebd1a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
@@ -23,7 +23,6 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 
 public class ActionBarLayer extends FrameLayout {
 
@@ -55,6 +54,7 @@ public boolean canOpenMenu() {
     private boolean isBackOverlayVisible;
     protected BaseFragment parentFragment;
     public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
+    private int leftMargin = 0;
 
     public ActionBarLayer(Context context, ActionBar actionBar) {
         super(context);
@@ -94,13 +94,17 @@ public ActionBarLayer(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
     }
 
+    public void setExtraLeftMargin(int margin) {
+        leftMargin = margin;
+    }
+
     private void positionBackImage(int height) {
         if (backButtonImageView != null) {
             LayoutParams layoutParams = (LayoutParams)backButtonImageView.getLayoutParams();
             layoutParams.width = LayoutParams.WRAP_CONTENT;
             layoutParams.height = LayoutParams.WRAP_CONTENT;
             layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.setMargins(AndroidUtilities.dp(3), (height - backButtonImageView.getDrawable().getIntrinsicHeight()) / 2, 0, 0);
+            layoutParams.setMargins(AndroidUtilities.dp(3 + leftMargin), (height - backButtonImageView.getDrawable().getIntrinsicHeight()) / 2, 0, 0);
             backButtonImageView.setLayoutParams(layoutParams);
         }
     }
@@ -108,7 +112,7 @@ private void positionBackImage(int height) {
     private void positionLogoImage(int height) {
         if (logoImageView != null) {
             LayoutParams layoutParams = (LayoutParams) logoImageView.getLayoutParams();
-            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 layoutParams.width = (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
                 layoutParams.height = (int)(logoImageView.getDrawable().getIntrinsicHeight() / 1.3f);
                 layoutParams.setMargins(AndroidUtilities.dp(12), (height - layoutParams.height) / 2, 0, 0);
@@ -124,7 +128,7 @@ private void positionLogoImage(int height) {
 
     private void positionTitle(int width, int height) {
         int offset = AndroidUtilities.dp(2);
-        if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+        if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
             offset = AndroidUtilities.dp(1);
         }
         int maxTextWidth = 0;
@@ -132,7 +136,7 @@ private void positionTitle(int width, int height) {
         LayoutParams layoutParams = null;
 
         if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
-            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 titleTextView.setTextSize(16);
             } else {
                 titleTextView.setTextSize(18);
@@ -147,7 +151,7 @@ private void positionTitle(int width, int height) {
             maxTextWidth = titleTextView.getMeasuredWidth();
         }
         if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 subTitleTextView.setTextSize(12);
             } else {
                 subTitleTextView.setTextSize(14);
@@ -164,12 +168,12 @@ private void positionTitle(int width, int height) {
 
         int x = 0;
         if (logoImageView == null || logoImageView.getVisibility() == GONE) {
-            x = AndroidUtilities.dp(16);
+            x = AndroidUtilities.dp(16 + leftMargin);
         } else {
-            if (!Utilities.isTablet(getContext()) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                x = AndroidUtilities.dp(22) + (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                x = AndroidUtilities.dp(22 + leftMargin) + (int)(logoImageView.getDrawable().getIntrinsicWidth() / 1.3f);
             } else {
-                x = AndroidUtilities.dp(22) + logoImageView.getDrawable().getIntrinsicWidth();
+                x = AndroidUtilities.dp(22 + leftMargin) + logoImageView.getDrawable().getIntrinsicWidth();
             }
         }
 
@@ -258,8 +262,8 @@ public void setSubtitle(CharSequence value) {
         }
     }
 
-    public void setSubTitleIcon(int resourceId, int padding) {
-        if (resourceId != 0 && subTitleTextView == null) {
+    public void setSubTitleIcon(int resourceId, Drawable drawable, int padding) {
+        if ((resourceId != 0 || drawable != null) && subTitleTextView == null) {
             subTitleTextView = new TextView(getContext());
             backButtonFrameLayout.addView(subTitleTextView);
             subTitleTextView.setGravity(Gravity.LEFT);
@@ -271,7 +275,11 @@ public void setSubTitleIcon(int resourceId, int padding) {
             positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
         if (subTitleTextView != null) {
-            subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
+            if (drawable != null) {
+                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
+            } else {
+                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
+            }
             subTitleTextView.setCompoundDrawablePadding(padding);
         }
     }
@@ -479,7 +487,7 @@ public void setBackOverlayVisible(boolean visible) {
         }
         isBackOverlayVisible = visible;
         if (visible) {
-            ((ActionBarActivity)getContext()).onOverlayShow(actionOverlay, parentFragment);
+            parentFragment.parentLayout.onOverlayShow(actionOverlay, parentFragment);
         }
         positionBackOverlay(getMeasuredWidth(), getMeasuredHeight());
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
similarity index 66%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
index 2cde70995..54e6dfcdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
@@ -16,7 +16,6 @@
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Build;
-import android.os.Bundle;
 import android.os.Handler;
 import android.view.ActionMode;
 import android.view.Gravity;
@@ -26,7 +25,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
-import android.view.Window;
 import android.view.WindowManager;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
@@ -35,11 +33,10 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 
 import java.util.ArrayList;
 
-public class ActionBarActivity extends Activity {
+public class ActionBarLayout extends FrameLayout {
 
     private class FrameLayoutAnimationListener extends FrameLayout {
         public FrameLayoutAnimationListener(Context context) {
@@ -49,18 +46,30 @@ public FrameLayoutAnimationListener(Context context) {
         @Override
         protected void onAnimationEnd() {
             super.onAnimationEnd();
-            ActionBarActivity.this.onAnimationEnd();
+            ActionBarLayout.this.onAnimationEndCheck();
         }
     }
 
+    public static interface ActionBarLayoutDelegate {
+        public abstract boolean onPreIme();
+        public abstract void onOverlayShow(View view, BaseFragment fragment);
+        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
+        public abstract void onRebuildAllFragments(ActionBarLayout layout);
+    }
+
     protected ActionBar actionBar;
     private FrameLayoutAnimationListener containerView;
     private FrameLayoutAnimationListener containerViewBack;
-    protected FrameLayout contentView;
     private View shadowView;
 
     private Animation openAnimation;
     private Animation closeAnimation;
+    private Animation alphaOpenAnimation;
+    private Animation alphaOpenAnimation2;
+    private Animation alphaCloseAnimation;
+    private Animation alphaCloseAnimation2;
 
     private boolean maybeStartTracking = false;
     protected boolean startedTracking = false;
@@ -75,69 +84,35 @@ protected void onAnimationEnd() {
     private int startedTrackingPointerId;
     private Runnable onCloseAnimationEndRunnable = null;
     private Runnable onOpenAnimationEndRunnable = null;
+    private boolean useAlphaAnimations = false;
+    private View backgroundView;
 
-    private class FrameLayoutTouch extends FrameLayout {
-        public FrameLayoutTouch(Context context) {
-            super(context);
-        }
+    private ActionBarLayoutDelegate delegate = null;
+    protected Activity parentActivity = null;
 
-        @Override
-        public boolean onInterceptTouchEvent(MotionEvent ev) {
-            return !(!animationInProgress && !checkTransitionAnimation()) || ((ActionBarActivity) getContext()).onTouchEvent(ev);
-        }
-
-        @Override
-        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
-            ((ActionBarActivity)getContext()).onTouchEvent(null);
-            super.requestDisallowInterceptTouchEvent(disallowIntercept);
-        }
-
-        @Override
-        public boolean dispatchKeyEventPreIme(KeyEvent event) {
-            if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
-                return ((ActionBarActivity)getContext()).onPreIme() || super.dispatchKeyEventPreIme(event);
-            }
-            return super.dispatchKeyEventPreIme(event);
-        }
-
-        @Override
-        public boolean onKeyPreIme(int keyCode, KeyEvent event) {
-            return super.onKeyPreIme(keyCode, event);
-        }
-    }
-
-    public static ArrayList<BaseFragment> fragmentsStack = new ArrayList<BaseFragment>();
-
-    protected void onCreateFinish(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
+    public ArrayList<BaseFragment> fragmentsStack = null;
 
+    public ActionBarLayout(Context context) {
+        super(context);
+        parentActivity = (Activity)context;
         try {
-            openAnimation = AnimationUtils.loadAnimation(this, R.anim.scale_in);
-            closeAnimation = AnimationUtils.loadAnimation(this, R.anim.scale_out);
+            openAnimation = AnimationUtils.loadAnimation(context, R.anim.scale_in);
+            closeAnimation = AnimationUtils.loadAnimation(context, R.anim.scale_out);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+    }
 
-        setTheme(R.style.Theme_TMessages);
-        getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-
-        contentView = new FrameLayoutTouch(this);
-        setContentView(contentView, new ViewGroup.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
-
-        containerViewBack = new FrameLayoutAnimationListener(this);
-        contentView.addView(containerViewBack);
+    public void init(ArrayList<BaseFragment> stack) {
+        fragmentsStack = stack;
+        containerViewBack = new FrameLayoutAnimationListener(parentActivity);
+        addView(containerViewBack);
 
-        containerView = new FrameLayoutAnimationListener(this);
-        contentView.addView(containerView);
+        containerView = new FrameLayoutAnimationListener(parentActivity);
+        addView(containerView);
 
-        shadowView = new FrameLayout(this);
-        contentView.addView(shadowView);
+        shadowView = new FrameLayout(parentActivity);
+        addView(shadowView);
         shadowView.setBackgroundResource(R.drawable.shadow);
         ViewGroup.LayoutParams layoutParams = shadowView.getLayoutParams();
         layoutParams.width = AndroidUtilities.dp(2);
@@ -145,14 +120,14 @@ protected void onCreate(Bundle savedInstanceState) {
         shadowView.setLayoutParams(layoutParams);
         shadowView.setVisibility(View.INVISIBLE);
 
-        actionBar = new ActionBar(this);
-        contentView.addView(actionBar);
+        actionBar = new ActionBar(parentActivity);
+        addView(actionBar);
         layoutParams = actionBar.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         actionBar.setLayoutParams(layoutParams);
 
         for (BaseFragment fragment : fragmentsStack) {
-            fragment.setParentActivity(this);
+            fragment.setParentLayout(this);
         }
 
         needLayout();
@@ -168,9 +143,7 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
         }
     }
 
-    @Override
-    protected void onResume() {
-        super.onResume();
+    public void onResume() {
         fixLayout();
         if (transitionAnimationInProgress) {
             if (onCloseAnimationEndRunnable != null) {
@@ -189,15 +162,42 @@ protected void onResume() {
         }
     }
 
-    @Override
-    protected void onPause() {
-        super.onPause();
+    public void onPause() {
         if (!fragmentsStack.isEmpty()) {
             BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
             lastFragment.onPause();
         }
     }
 
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        return !(!animationInProgress && !checkTransitionAnimation()) || onTouchEvent(ev);
+    }
+
+    @Override
+    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        onTouchEvent(null);
+        super.requestDisallowInterceptTouchEvent(disallowIntercept);
+    }
+
+    @Override
+    public boolean dispatchKeyEventPreIme(KeyEvent event) {
+        if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
+            return delegate != null && delegate.onPreIme() || super.dispatchKeyEventPreIme(event);
+        }
+        return super.dispatchKeyEventPreIme(event);
+    }
+
+    @Override
+    protected void onAnimationEnd() {
+        super.onAnimationEnd();
+        onAnimationEndCheck();
+    }
+
+    public void setDelegate(ActionBarLayoutDelegate delegate) {
+        this.delegate = delegate;
+    }
+
     private void onSlideAnimationEnd(boolean backAnimation) {
         containerView.setX(0);
         containerViewBack.setX(0);
@@ -208,7 +208,7 @@ private void onSlideAnimationEnd(boolean backAnimation) {
             BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
             lastFragment.onPause();
             lastFragment.onFragmentDestroy();
-            lastFragment.setParentActivity(null);
+            lastFragment.setParentLayout(null);
             fragmentsStack.remove(fragmentsStack.size() - 1);
 
             FrameLayoutAnimationListener temp = containerView;
@@ -230,7 +230,7 @@ private void onSlideAnimationEnd(boolean backAnimation) {
             }
         }
         containerViewBack.setVisibility(View.GONE);
-        AndroidUtilities.unlockOrientation(this);
+        AndroidUtilities.unlockOrientation(parentActivity);
         startedTracking = false;
         animationInProgress = false;
     }
@@ -246,7 +246,7 @@ private void prepareForMoving(MotionEvent ev) {
 
         BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
         actionBar.prepareForMoving(lastFragment.actionBarLayer);
-        View fragmentView = lastFragment.createView(getLayoutInflater(), null);
+        View fragmentView = lastFragment.createView(parentActivity.getLayoutInflater(), null);
         ViewGroup parentView = (ViewGroup)fragmentView.getParent();
         if (parentView != null) {
             parentView.removeView(fragmentView);
@@ -261,7 +261,7 @@ private void prepareForMoving(MotionEvent ev) {
         }
         lastFragment.onResume();
 
-        AndroidUtilities.lockOrientation(this);
+        AndroidUtilities.lockOrientation(parentActivity);
     }
 
     public boolean onTouchEvent(MotionEvent ev) {
@@ -289,8 +289,8 @@ public boolean onTouchEvent(MotionEvent ev) {
                     prepareForMoving(ev);
                 } else if (startedTracking) {
                     if (!beginTrackingSent) {
-                        if (getCurrentFocus() != null) {
-                            AndroidUtilities.hideKeyboard(getCurrentFocus());
+                        if (parentActivity.getCurrentFocus() != null) {
+                            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
                         }
                         BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
                         currentFragment.onBeginSlide();
@@ -377,7 +377,10 @@ public void onAnimationRepeat(Animator animator) {
         return false;
     }
 
-    @Override
+    public ActionBar getActionBar() {
+        return actionBar;
+    }
+
     public void onBackPressed() {
         if (startedTracking || checkTransitionAnimation() || fragmentsStack.isEmpty()) {
             return;
@@ -388,58 +391,54 @@ public void onBackPressed() {
         }
         BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
         if (lastFragment.onBackPressed()) {
-            if (fragmentsStack.size() == 1) {
-                fragmentsStack.get(0).onFragmentDestroy();
-                fragmentsStack.clear();
-                onFinish();
-                finish();
-            } else if (!fragmentsStack.isEmpty()) {
+            if (!fragmentsStack.isEmpty()) {
                 closeLastFragment(true);
             }
         }
     }
 
-    @Override
     public void onLowMemory() {
-        super.onLowMemory();
         for (BaseFragment fragment : fragmentsStack) {
             fragment.onLowMemory();
         }
     }
 
+    private void onAnimationEndCheck() {
+        onCloseAnimationEnd(false);
+        onOpenAnimationEnd(false);
+    }
+
     public boolean checkTransitionAnimation() {
         if (transitionAnimationInProgress && transitionAnimationStartTime < System.currentTimeMillis() - 400) {
             transitionAnimationInProgress = false;
-            onAnimationEnd();
+            onAnimationEndCheck();
         }
         return transitionAnimationInProgress;
     }
 
     private void fixLayout() {
-        if (contentView != null) {
-            ViewTreeObserver obs = contentView.getViewTreeObserver();
-            obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-                @Override
-                public void onGlobalLayout() {
-                    needLayout();
-
-                    if (Build.VERSION.SDK_INT < 16) {
-                        contentView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                    } else {
-                        contentView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                    }
+        ViewTreeObserver obs = getViewTreeObserver();
+        obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+            @Override
+            public void onGlobalLayout() {
+                needLayout();
+
+                if (Build.VERSION.SDK_INT < 16) {
+                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                } else {
+                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
                 }
-            });
-        }
+            }
+        });
     }
 
     public void needLayout() {
-        WindowManager manager = (WindowManager) getSystemService(WINDOW_SERVICE);
+        WindowManager manager = (WindowManager)parentActivity.getSystemService(Context.WINDOW_SERVICE);
         int rotation = manager.getDefaultDisplay().getRotation();
 
         int height = 0;
         if (actionBar.getVisibility() == View.VISIBLE) {
-            if (!Utilities.isTablet(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                 height = AndroidUtilities.dp(40);
             } else {
                 height = AndroidUtilities.dp(48);
@@ -475,7 +474,7 @@ private void presentFragmentInternalRemoveOld(boolean removeLast, final BaseFrag
         fragment.onPause();
         if (removeLast) {
             fragment.onFragmentDestroy();
-            fragment.setParentActivity(null);
+            fragment.setParentLayout(null);
             fragmentsStack.remove(fragment);
         } else {
             if (fragment.fragmentView != null) {
@@ -497,18 +496,21 @@ public boolean presentFragment(BaseFragment fragment, boolean removeLast) {
     }
 
     public boolean presentFragment(final BaseFragment fragment, final boolean removeLast, boolean forceWithoutAnimation) {
-        if (checkTransitionAnimation() || !fragment.onFragmentCreate()) {
+        if (checkTransitionAnimation() || delegate != null && !delegate.needPresentFragment(fragment, removeLast, forceWithoutAnimation, this) || !fragment.onFragmentCreate()) {
             return false;
         }
-        if (getCurrentFocus() != null) {
-            AndroidUtilities.hideKeyboard(getCurrentFocus());
+        if (parentActivity.getCurrentFocus() != null) {
+            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
+        }
+        boolean needAnimation = openAnimation != null && !forceWithoutAnimation && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
+        if (useAlphaAnimations && fragmentsStack.size() == 0 && alphaOpenAnimation == null) {
+            needAnimation = false;
         }
-        boolean needAnimation = openAnimation != null && !forceWithoutAnimation && getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
 
         final BaseFragment currentFragment = !fragmentsStack.isEmpty() ? fragmentsStack.get(fragmentsStack.size() - 1) : null;
 
-        fragment.setParentActivity(this);
-        View fragmentView = fragment.createView(getLayoutInflater(), null);
+        fragment.setParentLayout(this);
+        View fragmentView = fragment.createView(parentActivity.getLayoutInflater(), null);
         containerViewBack.addView(fragmentView);
         ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
@@ -534,17 +536,26 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
         }
 
         if (needAnimation) {
-            transitionAnimationStartTime = System.currentTimeMillis();
-            transitionAnimationInProgress = true;
-            onOpenAnimationEndRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    presentFragmentInternalRemoveOld(removeLast, currentFragment);
-                    fragment.onOpenAnimationEnd();
+            if (useAlphaAnimations && fragmentsStack.size() == 1) {
+                presentFragmentInternalRemoveOld(removeLast, currentFragment);
+                startAnimation(alphaOpenAnimation);
+                if (backgroundView != null) {
+                    backgroundView.setVisibility(VISIBLE);
+                    backgroundView.startAnimation(alphaOpenAnimation2);
                 }
-            };
-            openAnimation.reset();
-            containerView.startAnimation(openAnimation);
+            } else {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+                onOpenAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        presentFragmentInternalRemoveOld(removeLast, currentFragment);
+                        fragment.onOpenAnimationEnd();
+                    }
+                };
+                openAnimation.reset();
+                containerView.startAnimation(openAnimation);
+            }
         } else {
             fragment.onOpenAnimationEnd();
         }
@@ -552,10 +563,10 @@ public void run() {
     }
 
     public boolean addFragmentToStack(BaseFragment fragment) {
-        if (!fragment.onFragmentCreate()) {
+        if (delegate != null && !delegate.needAddFragmentToStack(fragment, this) || !fragment.onFragmentCreate()) {
             return false;
         }
-        fragment.setParentActivity(this);
+        fragment.setParentLayout(this);
         fragmentsStack.add(fragment);
         return true;
     }
@@ -563,7 +574,7 @@ public boolean addFragmentToStack(BaseFragment fragment) {
     private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
         fragment.onPause();
         fragment.onFragmentDestroy();
-        fragment.setParentActivity(null);
+        fragment.setParentLayout(null);
         fragmentsStack.remove(fragment);
         containerViewBack.setVisibility(View.GONE);
         ViewGroup parent = (ViewGroup)containerView.getParent();
@@ -572,49 +583,84 @@ private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
     }
 
     public void closeLastFragment(boolean animated) {
-        if (fragmentsStack.size() <= 1 || checkTransitionAnimation()) {
+        if (delegate != null && !delegate.needCloseLastFragment(this) || checkTransitionAnimation()) {
             return;
         }
-        if (getCurrentFocus() != null) {
-            AndroidUtilities.hideKeyboard(getCurrentFocus());
+        if (parentActivity.getCurrentFocus() != null) {
+            AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
+        }
+        boolean needAnimation = animated && closeAnimation != null && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
+        if (useAlphaAnimations && fragmentsStack.size() == 1 && alphaCloseAnimation == null) {
+            needAnimation = false;
         }
-        boolean needAnimation = animated && closeAnimation != null && getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
         final BaseFragment currentFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-        BaseFragment previousFragment = fragmentsStack.get(fragmentsStack.size() - 2);
-
-        FrameLayoutAnimationListener temp = containerView;
-        containerView = containerViewBack;
-        containerViewBack = temp;
-        containerView.setVisibility(View.VISIBLE);
-
-        previousFragment.setParentActivity(this);
-        View fragmentView = previousFragment.createView(getLayoutInflater(), null);
-        containerView.addView(fragmentView);
-        ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        fragmentView.setLayoutParams(layoutParams);
-        previousFragment.onResume();
-        actionBar.setCurrentActionBarLayer(previousFragment.actionBarLayer);
-        if (fragmentView.getBackground() == null) {
-            fragmentView.setBackgroundColor(0xffffffff);
+        BaseFragment previousFragment = null;
+        if (fragmentsStack.size() > 1) {
+            previousFragment = fragmentsStack.get(fragmentsStack.size() - 2);
         }
 
-        if (!needAnimation) {
-            closeLastFragmentInternalRemoveOld(currentFragment);
-        }
+        if (previousFragment != null) {
+            FrameLayoutAnimationListener temp = containerView;
+            containerView = containerViewBack;
+            containerViewBack = temp;
+            containerView.setVisibility(View.VISIBLE);
+
+            previousFragment.setParentLayout(this);
+            View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
+            containerView.addView(fragmentView);
+            ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            fragmentView.setLayoutParams(layoutParams);
+            previousFragment.onResume();
+            actionBar.setCurrentActionBarLayer(previousFragment.actionBarLayer);
+            if (fragmentView.getBackground() == null) {
+                fragmentView.setBackgroundColor(0xffffffff);
+            }
 
-        if (needAnimation) {
-            transitionAnimationStartTime = System.currentTimeMillis();
-            transitionAnimationInProgress = true;
-            closeAnimation.reset();
-            onCloseAnimationEndRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    closeLastFragmentInternalRemoveOld(currentFragment);
+            if (!needAnimation) {
+                closeLastFragmentInternalRemoveOld(currentFragment);
+            }
+
+            if (needAnimation) {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+                closeAnimation.reset();
+                onCloseAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        closeLastFragmentInternalRemoveOld(currentFragment);
+                    }
+                };
+                containerViewBack.startAnimation(closeAnimation);
+            }
+        } else {
+            if (needAnimation && useAlphaAnimations) {
+                transitionAnimationStartTime = System.currentTimeMillis();
+                transitionAnimationInProgress = true;
+                alphaCloseAnimation.reset();
+                alphaCloseAnimation2.reset();
+                startAnimation(alphaCloseAnimation);
+                if (backgroundView != null) {
+                    backgroundView.startAnimation(alphaCloseAnimation2);
+                }
+                onCloseAnimationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        removeFragmentFromStack(currentFragment);
+                        setVisibility(GONE);
+                        if (backgroundView != null) {
+                            backgroundView.setVisibility(GONE);
+                        }
+                    }
+                };
+            } else {
+                removeFragmentFromStack(currentFragment);
+                setVisibility(GONE);
+                if (backgroundView != null) {
+                    backgroundView.setVisibility(GONE);
                 }
-            };
-            containerViewBack.startAnimation(closeAnimation);
+            }
         }
     }
 
@@ -623,8 +669,8 @@ public void showLastFragment() {
             return;
         }
         BaseFragment previousFragment = fragmentsStack.get(fragmentsStack.size() - 1);
-        previousFragment.setParentActivity(this);
-        View fragmentView = previousFragment.createView(getLayoutInflater(), null);
+        previousFragment.setParentLayout(this);
+        View fragmentView = previousFragment.createView(parentActivity.getLayoutInflater(), null);
         containerView.addView(fragmentView);
         ViewGroup.LayoutParams layoutParams = fragmentView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
@@ -640,19 +686,25 @@ public void showLastFragment() {
     public void removeFragmentFromStack(BaseFragment fragment) {
         fragment.onPause();
         fragment.onFragmentDestroy();
-        fragment.setParentActivity(null);
+        fragment.setParentLayout(null);
         fragmentsStack.remove(fragment);
     }
 
-    public void rebuildAllFragmentViews() {
-        for (int a = 0; a < fragmentsStack.size() - 1; a++) {
-            fragmentsStack.get(a).setParentActivity(null);
-            fragmentsStack.get(a).setParentActivity(this);
+    public void removeAllFragments() {
+        for (int a = 0; a < fragmentsStack.size(); a++) {
+            removeFragmentFromStack(fragmentsStack.get(a));
+            a--;
         }
     }
 
-    protected void onFinish() {
-
+    public void rebuildAllFragmentViews(boolean last) {
+        for (int a = 0; a < fragmentsStack.size() - (last ? 0 : 1); a++) {
+            fragmentsStack.get(a).setParentLayout(null);
+            fragmentsStack.get(a).setParentLayout(this);
+        }
+        if (delegate != null) {
+            delegate.onRebuildAllFragments(this);
+        }
     }
 
     public void showActionBar() {
@@ -672,28 +724,22 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
         return super.onKeyUp(keyCode, event);
     }
 
-    public void onOverlayShow(View view, BaseFragment fragment) {
-
+    protected void onOverlayShow(View view, BaseFragment fragment) {
+        if (delegate != null) {
+            delegate.onOverlayShow(view, fragment);
+        }
     }
 
-    @Override
     public void onActionModeStarted(ActionMode mode) {
-        super.onActionModeStarted(mode);
         hideActionBar();
         inActionMode = true;
     }
 
-    @Override
     public void onActionModeFinished(ActionMode mode) {
-        super.onActionModeFinished(mode);
         showActionBar();
         inActionMode = false;
     }
 
-    public boolean onPreIme() {
-        return false;
-    }
-
     private void onCloseAnimationEnd(boolean post) {
         if (transitionAnimationInProgress && onCloseAnimationEndRunnable != null) {
             transitionAnimationInProgress = false;
@@ -730,12 +776,6 @@ public void run() {
         }
     }
 
-    private void onAnimationEnd() {
-        onCloseAnimationEnd(false);
-        onOpenAnimationEnd(false);
-    }
-
-    @Override
     public void startActivityForResult(final Intent intent, final int requestCode) {
         if (transitionAnimationInProgress) {
             if (onCloseAnimationEndRunnable != null) {
@@ -747,12 +787,26 @@ public void startActivityForResult(final Intent intent, final int requestCode) {
             }
             containerView.invalidate();
             if (intent != null) {
-                super.startActivityForResult(intent, requestCode);
+                parentActivity.startActivityForResult(intent, requestCode);
             }
         } else {
             if (intent != null) {
-                super.startActivityForResult(intent, requestCode);
+                parentActivity.startActivityForResult(intent, requestCode);
             }
         }
     }
+
+    public void setUseAlphaAnimations(boolean value) {
+        useAlphaAnimations = value;
+        if (useAlphaAnimations) {
+            alphaOpenAnimation = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_in);
+            alphaOpenAnimation2 = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_in);
+            alphaCloseAnimation = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_out);
+            alphaCloseAnimation2 = AnimationUtils.loadAnimation(getContext(), R.anim.icon_anim_fade_out);
+        }
+    }
+
+    public void setBackgroundView(View view) {
+        backgroundView = view;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
index b22b439e4..ae1288bdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
@@ -61,7 +61,11 @@ public void onClick(View view) {
     }
 
     public ActionBarMenuItem addItem(int id, int icon) {
-        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, parentActionBar, parentActionBarLayer.itemsBackgroundResourceId);
+        return addItem(id, icon, parentActionBarLayer.itemsBackgroundResourceId);
+    }
+
+    public ActionBarMenuItem addItem(int id, int icon, int backgroundResource) {
+        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, parentActionBar, backgroundResource);
         menuItem.setTag(id);
         menuItem.setScaleType(ImageView.ScaleType.CENTER);
         menuItem.setImageResource(icon);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
index e3c1117df..579b11161 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
@@ -14,8 +14,12 @@
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.AttributeSet;
+import android.view.ActionMode;
+import android.view.ContextMenu;
 import android.view.Gravity;
 import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.WindowManager;
@@ -28,7 +32,6 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
 
 import java.lang.reflect.Field;
 
@@ -257,6 +260,30 @@ public ActionBarMenuItem setIsSearchField(boolean value) {
             searchField.setBackgroundResource(R.drawable.search_light_states);
             searchField.setPadding(AndroidUtilities.dp(6), 0, AndroidUtilities.dp(6), 0);
             searchField.setInputType(EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+            if (android.os.Build.VERSION.SDK_INT < 11) {
+                searchField.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
+                    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
+                        menu.clear();
+                    }
+                });
+            } else {
+                searchField.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
+                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                        return false;
+                    }
+
+                    public void onDestroyActionMode(ActionMode mode) {
+                    }
+
+                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                        return false;
+                    }
+
+                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                        return false;
+                    }
+                });
+            }
             searchField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
index c3e0e2069..05e609b4d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Views.ActionBar;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -23,7 +24,7 @@
 public class BaseFragment {
     private boolean isFinished = false;
     protected View fragmentView;
-    private ActionBarActivity parentActivity;
+    protected ActionBarLayout parentLayout;
     protected ActionBarLayer actionBarLayer;
     protected int classGuid = 0;
     protected Bundle arguments;
@@ -47,9 +48,9 @@ public Bundle getArguments() {
         return arguments;
     }
 
-    public void setParentActivity(ActionBarActivity activity) {
-        if (parentActivity != activity) {
-            parentActivity = activity;
+    public void setParentLayout(ActionBarLayout layout) {
+        if (parentLayout != layout) {
+            parentLayout = layout;
             if (fragmentView != null) {
                 ViewGroup parent = (ViewGroup) fragmentView.getParent();
                 if (parent != null) {
@@ -57,11 +58,11 @@ public void setParentActivity(ActionBarActivity activity) {
                 }
                 fragmentView = null;
             }
-            if (parentActivity != null) {
+            if (parentLayout != null) {
                 if (actionBarLayer != null) {
                     actionBarLayer.onDestroy();
                 }
-                actionBarLayer = parentActivity.getInternalActionBar().createLayer();
+                actionBarLayer = parentLayout.getInternalActionBar().createLayer();
                 actionBarLayer.parentFragment = this;
                 actionBarLayer.setBackgroundResource(R.color.header);
                 actionBarLayer.setItemsBackground(R.drawable.bar_selector);
@@ -74,17 +75,17 @@ public void finishFragment() {
     }
 
     public void finishFragment(boolean animated) {
-        if (isFinished || parentActivity == null) {
+        if (isFinished || parentLayout == null) {
             return;
         }
-        parentActivity.closeLastFragment(animated);
+        parentLayout.closeLastFragment(animated);
     }
 
     public void removeSelfFromStack() {
-        if (isFinished || parentActivity == null) {
+        if (isFinished || parentLayout == null) {
             return;
         }
-        parentActivity.removeFragmentFromStack(this);
+        parentLayout.removeFragmentFromStack(this);
     }
 
     public boolean onFragmentCreate() {
@@ -139,39 +140,39 @@ public void restoreSelfArgs(Bundle args) {
     }
 
     public void presentFragment(BaseFragment fragment) {
-        if (parentActivity == null) {
+        if (parentLayout == null) {
             return;
         }
-        parentActivity.presentFragment(fragment);
+        parentLayout.presentFragment(fragment);
     }
 
     public void presentFragment(BaseFragment fragment, boolean removeLast) {
-        if (parentActivity == null) {
+        if (parentLayout == null) {
             return;
         }
-        parentActivity.presentFragment(fragment, removeLast);
+        parentLayout.presentFragment(fragment, removeLast);
     }
 
     public void presentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation) {
-        if (parentActivity == null) {
+        if (parentLayout == null) {
             return;
         }
-        parentActivity.presentFragment(fragment, removeLast, forceWithoutAnimation);
+        parentLayout.presentFragment(fragment, removeLast, forceWithoutAnimation);
     }
 
-    public ActionBarActivity getParentActivity() {
-        return parentActivity;
+    public Activity getParentActivity() {
+        return parentLayout.parentActivity;
     }
 
     public void showActionBar() {
-        if (parentActivity != null) {
-            parentActivity.showActionBar();
+        if (parentLayout != null) {
+            parentLayout.showActionBar();
         }
     }
 
     public void hideActionBar() {
-        if (parentActivity != null) {
-            parentActivity.hideActionBar();
+        if (parentLayout != null) {
+            parentLayout.hideActionBar();
         }
     }
 
@@ -198,7 +199,7 @@ public void onLowMemory() {
     }
 
     protected void showAlertDialog(AlertDialog.Builder builder) {
-        if (parentActivity == null || parentActivity.checkTransitionAnimation() || parentActivity.animationInProgress || parentActivity.startedTracking) {
+        if (parentLayout == null || parentLayout.checkTransitionAnimation() || parentLayout.animationInProgress || parentLayout.startedTracking) {
             return;
         }
         try {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
index 2dc73ff3e..276275e4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
@@ -128,7 +128,7 @@ private void processBitmap(Bitmap bitmap) {
                 }
             } else {
                 UserConfig.saveConfig(false);
-                uploadingAvatar = AndroidUtilities.getCacheDir() + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
+                uploadingAvatar = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
                 NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
                 NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
                 FileLoader.getInstance().uploadFile(uploadingAvatar, false, true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
index 5fc589829..df0ca6c26 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
@@ -460,7 +460,7 @@ private void showEmojiPopup(boolean show) {
             }
             emojiPopup.setHeight(View.MeasureSpec.makeMeasureSpec(currentHeight, View.MeasureSpec.EXACTLY));
             if (sizeNotifierRelativeLayout != null) {
-                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(sizeNotifierRelativeLayout.getWidth(), View.MeasureSpec.EXACTLY));
+                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
             }
 
             emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), 83, 0, 0);
@@ -594,7 +594,7 @@ public void onSizeChanged(int height) {
         if (emojiPopup != null && emojiPopup.isShowing()) {
             WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
             final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams)emojiPopup.getContentView().getLayoutParams();
-            layoutParams.width = sizeNotifierRelativeLayout.getWidth();
+            layoutParams.width = AndroidUtilities.displaySize.x;
             if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
                 layoutParams.height = keyboardHeightLand;
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
index 40a062f15..73ceca0b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
@@ -104,7 +104,11 @@ private void init() {
         setOrientation(LinearLayout.VERTICAL);
         for (int i = 0; i < Emoji.data.length; i++) {
             GridView gridView = new GridView(getContext());
-            gridView.setColumnWidth(AndroidUtilities.dpf(45.0f));
+            if (AndroidUtilities.isTablet()) {
+                gridView.setColumnWidth(AndroidUtilities.dp(60));
+            } else {
+                gridView.setColumnWidth(AndroidUtilities.dp(45));
+            }
             gridView.setNumColumns(-1);
             views.add(gridView);
 
@@ -122,7 +126,7 @@ private void init() {
         tabs.setIndicatorColor(0xff33b5e5);
         tabs.setIndicatorHeight(AndroidUtilities.dpf(2.0f));
         tabs.setUnderlineHeight(AndroidUtilities.dpf(2.0f));
-        tabs.setUnderlineColor(1711276032);
+        tabs.setUnderlineColor(0x66000000);
         tabs.setTabBackground(0);
         LinearLayout localLinearLayout = new LinearLayout(getContext());
         localLinearLayout.setOrientation(LinearLayout.HORIZONTAL);
@@ -138,7 +142,7 @@ public void onClick(View view) {
                 }
             }
         });
-        localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(AndroidUtilities.dpf(61.0f), LayoutParams.MATCH_PARENT));
+        localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(AndroidUtilities.dp(61), LayoutParams.MATCH_PARENT));
         recentsWrap = new FrameLayout(getContext());
         recentsWrap.addView(views.get(0));
         TextView localTextView = new TextView(getContext());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/PopupAudioView.java
index d1a9cb2ff..2af5b6c6b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/PopupAudioView.java
@@ -287,7 +287,7 @@ public void downloadAudioIfNeed() {
 
     public void updateButtonState() {
         String fileName = currentMessageObject.getFileName();
-        File cacheFile = new File(AndroidUtilities.getCacheDir(), fileName);
+        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
         if (cacheFile.exists()) {
             MediaController.getInstance().removeLoadingFileObserver(this);
             boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java
deleted file mode 100644
index 551b49441..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Views;
-
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.RectF;
-
-import org.telegram.android.AndroidUtilities;
-
-public class RoundProgressView {
-    private Paint paint;
-
-    public float currentProgress = 0;
-    public RectF rect = new RectF();
-
-    public RoundProgressView() {
-        paint = new Paint();
-        paint.setColor(0xffffffff);
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(AndroidUtilities.dp(2));
-        paint.setAntiAlias(true);
-    }
-
-    public void setColor(int color) {
-        paint.setColor(color);
-    }
-
-    public void setProgress(float progress) {
-        currentProgress = progress;
-        if (currentProgress < 0) {
-            currentProgress = 0;
-        } else if (currentProgress > 1) {
-            currentProgress = 1;
-        }
-    }
-
-    public void draw(Canvas canvas) {
-        canvas.drawArc(rect, -90, 360 * currentProgress, false, paint);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
index f8eb84abd..ffe96479a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
@@ -65,13 +65,13 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
     @Override
     protected void onDraw(Canvas canvas) {
         if (backgroundDrawable != null) {
-            float scaleX = (float)AndroidUtilities.displaySize.x / (float)backgroundDrawable.getIntrinsicWidth();
-            float scaleY = (float)AndroidUtilities.displaySize.y / (float)backgroundDrawable.getIntrinsicHeight();
+            float scaleX = (float)getMeasuredWidth() / (float)backgroundDrawable.getIntrinsicWidth();
+            float scaleY = (float)getMeasuredHeight() / (float)backgroundDrawable.getIntrinsicHeight();
             float scale = scaleX < scaleY ? scaleY : scaleX;
             int width = (int)Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
             int height = (int)Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
-            int x = (AndroidUtilities.displaySize.x - width) / 2;
-            int y = (AndroidUtilities.displaySize.y - height) / 2;
+            int x = (getMeasuredWidth() - width) / 2;
+            int y = (getMeasuredHeight() - height) / 2;
             backgroundDrawable.setBounds(x, y, x + width, y + height);
             backgroundDrawable.draw(canvas);
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java
new file mode 100644
index 000000000..b0069496e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java
@@ -0,0 +1,125 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.view.animation.DecelerateInterpolator;
+
+import org.telegram.android.AndroidUtilities;
+
+public class TypingDotsDrawable extends Drawable {
+    private boolean isChat = false;
+    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private float[] scales = new float[3];
+    private float[] startTimes = new float[] {0, 150, 300};
+    private float[] elapsedTimes = new float[] {0, 0, 0};
+    private long lastUpdateTime = 0;
+    private boolean started = false;
+    private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
+
+    public TypingDotsDrawable() {
+        super();
+        paint.setColor(0xffd7e8f7);
+    }
+
+    public void setIsChat(boolean value) {
+        isChat = value;
+    }
+
+    private void update() {
+        long newTime = System.currentTimeMillis();
+        long dt = newTime - lastUpdateTime;
+        lastUpdateTime = newTime;
+
+        for (int a = 0; a < 3; a++) {
+            elapsedTimes[a] += dt;
+            float timeSinceStart = elapsedTimes[a] - startTimes[a];
+            if (timeSinceStart > 0) {
+                if (timeSinceStart <= 320) {
+                    float diff = decelerateInterpolator.getInterpolation(timeSinceStart / 320.0f);
+                    scales[a] = 1.33f + diff;
+                } else if (timeSinceStart <= 640) {
+                    float diff = decelerateInterpolator.getInterpolation((timeSinceStart - 320.0f) / 320.0f);
+                    scales[a] = 1.33f + (1 - diff);
+                } else if (timeSinceStart >= 800) {
+                    elapsedTimes[a] = 0;
+                    startTimes[a] = 0;
+                    scales[a] = 1.33f;
+                } else {
+                    scales[a] = 1.33f;
+                }
+            } else {
+                scales[a] = 1.33f;
+            }
+        }
+
+        invalidateSelf();
+    }
+
+    public void start() {
+        lastUpdateTime = System.currentTimeMillis();
+        started = true;
+        invalidateSelf();
+    }
+
+    public void stop() {
+        for (int a = 0; a < 3; a++) {
+            elapsedTimes[a] = 0;
+            scales[a] = 1.33f;
+        }
+        startTimes[0] = 0;
+        startTimes[1] = 150;
+        startTimes[2] = 300;
+        started = false;
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        int y = 0;
+        if (isChat) {
+            y = AndroidUtilities.dp(6);
+        } else {
+            y = AndroidUtilities.dp(7);
+        }
+        canvas.drawCircle(AndroidUtilities.dp(3), y, scales[0] * AndroidUtilities.density, paint);
+        canvas.drawCircle(AndroidUtilities.dp(9), y, scales[1] * AndroidUtilities.density, paint);
+        canvas.drawCircle(AndroidUtilities.dp(15), y, scales[2] * AndroidUtilities.density, paint);
+        if (started) {
+            update();
+        }
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return AndroidUtilities.dp(18);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return AndroidUtilities.dp(10);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java
index 4bdab183d..f414b650c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java
@@ -22,7 +22,6 @@
 public class VideoSeekBarView extends View {
 
     private static Drawable thumbDrawable1;
-    private static Drawable thumbDrawablePressed1;
     private static Paint innerPaint1 = new Paint();
     private static int thumbWidth;
     private static int thumbHeight;
@@ -37,8 +36,7 @@
 
     private void init(Context context) {
         if (thumbDrawable1 == null) {
-            thumbDrawable1 = context.getResources().getDrawable(R.drawable.playback);
-            thumbDrawablePressed1 = context.getResources().getDrawable(R.drawable.playback_active);
+            thumbDrawable1 = context.getResources().getDrawable(R.drawable.videolapse);
             innerPaint1.setColor(0x99999999);
             thumbWidth = thumbDrawable1.getIntrinsicWidth();
             thumbHeight = thumbDrawable1.getIntrinsicHeight();
@@ -118,16 +116,10 @@ public float getProgress() {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        Drawable thumb = null;
-        if (!pressed) {
-            thumb = thumbDrawable1;
-        } else {
-            thumb = thumbDrawablePressed1;
-        }
         int y = (getMeasuredHeight() - thumbHeight) / 2;
         int thumbX = (int)((getMeasuredWidth() - thumbWidth) * progress);
         canvas.drawRect(thumbWidth / 2, getMeasuredHeight() / 2 - AndroidUtilities.dp(1), getMeasuredWidth() - thumbWidth / 2, getMeasuredHeight() / 2 + AndroidUtilities.dp(1), innerPaint1);
-        thumb.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
-        thumb.draw(canvas);
+        thumbDrawable1.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
+        thumbDrawable1.draw(canvas);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java
index f8fe8e21f..926c08db4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java
@@ -14,6 +14,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
 import android.util.AttributeSet;
@@ -22,6 +23,7 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
 
 import java.util.ArrayList;
 
@@ -44,32 +46,34 @@
     private int frameWidth = 0;
     private int frameHeight = 0;
     private int framesToLoad = 0;
+    private Drawable pickDrawable = null;
 
     public abstract interface VideoTimelineViewDelegate {
         public void onLeftProgressChanged(float progress);
         public void onRifhtProgressChanged(float progress);
     }
 
-    private void init() {
+    private void init(Context context) {
         paint = new Paint();
         paint.setColor(0xff66d1ee);
         paint2 = new Paint();
-        paint2.setColor(0x2266d1ee);
+        paint2.setColor(0x7f000000);
+        pickDrawable = getResources().getDrawable(R.drawable.videotrimmer);
     }
 
     public VideoTimelineView(Context context) {
         super(context);
-        init();
+        init(context);
     }
 
     public VideoTimelineView(Context context, AttributeSet attrs) {
         super(context, attrs);
-        init();
+        init(context);
     }
 
     public VideoTimelineView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
-        init();
+        init(context);
     }
 
     public float getLeftProgress() {
@@ -88,9 +92,9 @@ public boolean onTouchEvent(MotionEvent event) {
         float x = event.getX();
         float y = event.getY();
 
-        int width = getMeasuredWidth() - AndroidUtilities.dp(12);
-        int startX = (int)(width * progressLeft) + AndroidUtilities.dp(3);
-        int endX = (int)(width * progressRight) + AndroidUtilities.dp(9);
+        int width = getMeasuredWidth() - AndroidUtilities.dp(32);
+        int startX = (int)(width * progressLeft) + AndroidUtilities.dp(16);
+        int endX = (int)(width * progressRight) + AndroidUtilities.dp(16);
 
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             int additionWidth = AndroidUtilities.dp(12);
@@ -118,12 +122,12 @@ public boolean onTouchEvent(MotionEvent event) {
         } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
             if (pressedLeft) {
                 startX = (int)(x - pressDx);
-                if (startX < AndroidUtilities.dp(3)) {
-                    startX = AndroidUtilities.dp(3);
-                } else if (startX > endX - AndroidUtilities.dp(6)) {
-                    startX = endX - AndroidUtilities.dp(6);
+                if (startX < AndroidUtilities.dp(16)) {
+                    startX = AndroidUtilities.dp(16);
+                } else if (startX > endX) {
+                    startX = endX;
                 }
-                progressLeft = (float)(startX - AndroidUtilities.dp(3)) / (float)width;
+                progressLeft = (float)(startX - AndroidUtilities.dp(16)) / (float)width;
                 if (delegate != null) {
                     delegate.onLeftProgressChanged(progressLeft);
                 }
@@ -131,12 +135,12 @@ public boolean onTouchEvent(MotionEvent event) {
                 return true;
             } else if (pressedRight) {
                 endX = (int)(x - pressDx);
-                if (endX < startX + AndroidUtilities.dp(6)) {
-                    endX = startX + AndroidUtilities.dp(6);
-                } else if (endX > width + AndroidUtilities.dp(9)) {
-                    endX = width + AndroidUtilities.dp(9);
+                if (endX < startX) {
+                    endX = startX;
+                } else if (endX > width + AndroidUtilities.dp(16)) {
+                    endX = width + AndroidUtilities.dp(16);
                 }
-                progressRight = (float)(endX - AndroidUtilities.dp(9)) / (float)width;
+                progressRight = (float)(endX - AndroidUtilities.dp(16)) / (float)width;
                 if (delegate != null) {
                     delegate.onRifhtProgressChanged(progressRight);
                 }
@@ -163,9 +167,9 @@ private void reloadFrames(int frameNum) {
             return;
         }
         if (frameNum == 0) {
-            frameHeight = getMeasuredHeight() - AndroidUtilities.dp(4);
-            framesToLoad = getMeasuredWidth() / frameHeight;
-            frameWidth = (int)Math.ceil((float)getMeasuredWidth() / (float)framesToLoad);
+            frameHeight = AndroidUtilities.dp(40);
+            framesToLoad = (getMeasuredWidth() - AndroidUtilities.dp(16)) / frameHeight;
+            frameWidth = (int)Math.ceil((float)(getMeasuredWidth() - AndroidUtilities.dp(16)) / (float)framesToLoad);
             frameTimeOffset = videoLength / framesToLoad;
         }
         currentTask = new AsyncTask<Integer, Integer, Bitmap>() {
@@ -262,24 +266,39 @@ public void clearFrames() {
 
     @Override
     protected void onDraw(Canvas canvas) {
+        int width = getMeasuredWidth() - AndroidUtilities.dp(36);
+        int startX = (int)(width * progressLeft) + AndroidUtilities.dp(16);
+        int endX = (int)(width * progressRight) + AndroidUtilities.dp(16);
+
+        canvas.save();
+        canvas.clipRect(AndroidUtilities.dp(16), 0, width + AndroidUtilities.dp(20), AndroidUtilities.dp(44));
         if (frames.isEmpty() && currentTask == null) {
             reloadFrames(0);
         } else {
             int offset = 0;
             for (Bitmap bitmap : frames) {
                 if (bitmap != null) {
-                    canvas.drawBitmap(bitmap, offset * frameWidth, AndroidUtilities.dp(2), null);
+                    canvas.drawBitmap(bitmap, AndroidUtilities.dp(16) + offset * frameWidth, AndroidUtilities.dp(2), null);
                 }
                 offset++;
             }
         }
-        int width = getMeasuredWidth() - AndroidUtilities.dp(12);
-        int startX = (int)(width * progressLeft);
-        int endX = (int)(width * progressRight);
-        canvas.drawRect(startX, 0, startX + AndroidUtilities.dp(6), getMeasuredHeight(), paint);
-        canvas.drawRect(endX + AndroidUtilities.dp(6), 0, endX + AndroidUtilities.dp(12), getMeasuredHeight(), paint);
-        canvas.drawRect(startX + AndroidUtilities.dp(6), AndroidUtilities.dp(4), endX + AndroidUtilities.dp(6), getMeasuredHeight() - AndroidUtilities.dp(4), paint2);
-        canvas.drawRect(startX + AndroidUtilities.dp(6), AndroidUtilities.dp(2), endX + AndroidUtilities.dp(6), AndroidUtilities.dp(4), paint);
-        canvas.drawRect(startX + AndroidUtilities.dp(6), getMeasuredHeight() - AndroidUtilities.dp(4), endX + AndroidUtilities.dp(6), getMeasuredHeight() - AndroidUtilities.dp(2), paint);
+
+        canvas.drawRect(AndroidUtilities.dp(16), AndroidUtilities.dp(2), startX, AndroidUtilities.dp(42), paint2);
+        canvas.drawRect(endX + AndroidUtilities.dp(4), AndroidUtilities.dp(2), AndroidUtilities.dp(16) + width + AndroidUtilities.dp(4), AndroidUtilities.dp(42), paint2);
+
+        canvas.drawRect(startX, 0, startX + AndroidUtilities.dp(2), AndroidUtilities.dp(44), paint);
+        canvas.drawRect(endX + AndroidUtilities.dp(2), 0, endX + AndroidUtilities.dp(4), AndroidUtilities.dp(44), paint);
+        canvas.drawRect(startX + AndroidUtilities.dp(2), 0, endX + AndroidUtilities.dp(4), AndroidUtilities.dp(2), paint);
+        canvas.drawRect(startX + AndroidUtilities.dp(2), AndroidUtilities.dp(42), endX + AndroidUtilities.dp(4), AndroidUtilities.dp(44), paint);
+        canvas.restore();
+
+        int drawableWidth = pickDrawable.getIntrinsicWidth();
+        int drawableHeight = pickDrawable.getIntrinsicHeight();
+        pickDrawable.setBounds(startX - drawableWidth / 2, getMeasuredHeight() - drawableHeight, startX + drawableWidth / 2, getMeasuredHeight());
+        pickDrawable.draw(canvas);
+
+        pickDrawable.setBounds(endX - drawableWidth / 2 + AndroidUtilities.dp(4), getMeasuredHeight() - drawableHeight, endX + drawableWidth / 2 + AndroidUtilities.dp(4), getMeasuredHeight());
+        pickDrawable.draw(canvas);
     }
 }
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-hdpi/boxshadow.9.png
new file mode 100644
index 000000000..a4559eb2c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/boxshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png
new file mode 100755
index 000000000..69e9ee758
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_aqua.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png
new file mode 100755
index 000000000..8a41f2a39
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png
new file mode 100755
index 000000000..24c5329b1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png
new file mode 100755
index 000000000..a942fc9ce
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_orange.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png
new file mode 100755
index 000000000..c0a8a3d51
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_pink.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png
new file mode 100755
index 000000000..b782c3ab5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_red.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png
new file mode 100755
index 000000000..905048e45
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_violet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png
new file mode 100755
index 000000000..c427ad488
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast_yellow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-hdpi/btnshadow.9.png
new file mode 100644
index 000000000..a75bd31af
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/btnshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cats.jpg b/TMessagesProj/src/main/res/drawable-hdpi/cats.jpg
new file mode 100644
index 000000000..5cee44af5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/cats.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png
new file mode 100755
index 000000000..3853c42d0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png
new file mode 100755
index 000000000..1b0aec5a9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_aqua.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_aqua.png
deleted file mode 100755
index a3086e427..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_blue.png
deleted file mode 100755
index ff2b89af2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_green.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_green.png
deleted file mode 100755
index 715f27bae..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_orange.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_orange.png
deleted file mode 100755
index f313c8ac6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_pink.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_pink.png
deleted file mode 100755
index ad5408605..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_red.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_red.png
deleted file mode 100755
index ce4977569..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_violet.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_violet.png
deleted file mode 100755
index 7c8dac79d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/gift_yellow.png b/TMessagesProj/src/main/res/drawable-hdpi/gift_yellow.png
deleted file mode 100755
index d59d949f3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/gift_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png
index b788d850e..8eb54b3ca 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_clock.png
old mode 100644
new mode 100755
index 3daca6ae8..94b24e32b
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_clock.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_clock.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_clock_photo.png
old mode 100644
new mode 100755
index 1175b4ee6..a7f059cb4
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_clock_photo.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_clock_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playback.png b/TMessagesProj/src/main/res/drawable-hdpi/playback.png
deleted file mode 100644
index 1ca26fcac..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/playback.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playback_active.png b/TMessagesProj/src/main/res/drawable-hdpi/playback_active.png
deleted file mode 100644
index 11760303e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/playback_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png
index 9bde7fbdc..72185bed6 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/search_light_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame0.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame0.png
deleted file mode 100755
index 1b8817dcb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame1.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame1.png
deleted file mode 100755
index b30359a20..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame2.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame2.png
deleted file mode 100755
index a64fbf2bc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame3.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame3.png
deleted file mode 100755
index 0be0c8d66..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_chat_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame0.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame0.png
deleted file mode 100755
index 921ad23fb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame1.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame1.png
deleted file mode 100755
index 9e9d63eb0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame2.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame2.png
deleted file mode 100755
index 2ff89fddd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame3.png b/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame3.png
deleted file mode 100755
index 30a602143..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/typing_dot_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/videolapse.png b/TMessagesProj/src/main/res/drawable-hdpi/videolapse.png
new file mode 100755
index 000000000..9165609b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/videolapse.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-hdpi/videotrimmer.png
new file mode 100755
index 000000000..c28033118
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/videotrimmer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png
new file mode 100644
index 000000000..e0c55dc12
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/boxshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png
new file mode 100755
index 000000000..842ff62e8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_aqua.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png
new file mode 100755
index 000000000..e0a722174
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png
new file mode 100755
index 000000000..099d3caac
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png
new file mode 100755
index 000000000..84d22c9a9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_orange.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png
new file mode 100755
index 000000000..a6ef2ff5f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_pink.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png
new file mode 100755
index 000000000..44969ccea
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_red.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png
new file mode 100755
index 000000000..5b1e01588
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_violet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png
new file mode 100755
index 000000000..e81e8c8fd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast_yellow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png
new file mode 100644
index 000000000..862afedd3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/btnshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png
new file mode 100755
index 000000000..c9ad08121
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png
new file mode 100755
index 000000000..c1a124ab9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_aqua.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_aqua.png
deleted file mode 100755
index 18fe949ea..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_blue.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_blue.png
deleted file mode 100755
index 4b6d2af16..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_green.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_green.png
deleted file mode 100755
index 71beea6af..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_orange.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_orange.png
deleted file mode 100755
index 9b0e4c659..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_pink.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_pink.png
deleted file mode 100755
index be6817f44..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_red.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_red.png
deleted file mode 100755
index 8e7d56270..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_violet.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_violet.png
deleted file mode 100755
index 167f2815f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/gift_yellow.png b/TMessagesProj/src/main/res/drawable-ldpi/gift_yellow.png
deleted file mode 100755
index 159c56585..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/gift_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/intro1.png b/TMessagesProj/src/main/res/drawable-ldpi/intro1.png
index d4b0675eb..d065bb3c6 100755
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/intro1.png and b/TMessagesProj/src/main/res/drawable-ldpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png
new file mode 100755
index 000000000..1e505955d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png
new file mode 100755
index 000000000..3cbc2ff8c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/msg_clock_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/playback.png b/TMessagesProj/src/main/res/drawable-ldpi/playback.png
deleted file mode 100644
index d82736e01..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/playback.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/playback_active.png b/TMessagesProj/src/main/res/drawable-ldpi/playback_active.png
deleted file mode 100644
index 66d42bc17..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/playback_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png b/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png
new file mode 100755
index 000000000..8a8a2744b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/videolapse.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png
new file mode 100755
index 000000000..1a6e341f0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/videotrimmer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-mdpi/boxshadow.9.png
new file mode 100644
index 000000000..e0ed0f591
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/boxshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png
new file mode 100755
index 000000000..ee955dee9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_aqua.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png
new file mode 100755
index 000000000..cfe7cea90
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png
new file mode 100755
index 000000000..322153280
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png
new file mode 100755
index 000000000..2f3b81594
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_orange.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png
new file mode 100755
index 000000000..cace0d662
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_pink.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png
new file mode 100755
index 000000000..d63200980
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_red.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png
new file mode 100755
index 000000000..fb7135aa0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_violet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png
new file mode 100755
index 000000000..9ed3aa714
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast_yellow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-mdpi/btnshadow.9.png
new file mode 100644
index 000000000..9bda10680
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/btnshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cats.jpg b/TMessagesProj/src/main/res/drawable-mdpi/cats.jpg
new file mode 100644
index 000000000..714170084
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/cats.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png
new file mode 100755
index 000000000..37a56ecc4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png
new file mode 100755
index 000000000..3f922d7dc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_aqua.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_aqua.png
deleted file mode 100755
index fcaad6b56..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_blue.png
deleted file mode 100755
index 120263daf..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_green.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_green.png
deleted file mode 100755
index e3023d090..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_orange.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_orange.png
deleted file mode 100755
index 380c9cb48..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_pink.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_pink.png
deleted file mode 100755
index f1c22d744..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_red.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_red.png
deleted file mode 100755
index 55a622325..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_violet.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_violet.png
deleted file mode 100755
index 2a2ee8d8c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/gift_yellow.png b/TMessagesProj/src/main/res/drawable-mdpi/gift_yellow.png
deleted file mode 100755
index 19bfa3870..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/gift_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png
index 37c9583ef..9a068122e 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_clock.png
old mode 100644
new mode 100755
index 20e13e0cc..4bb0fe3df
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_clock.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_clock.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_clock_photo.png
old mode 100644
new mode 100755
index 0ab017a29..0c3c94421
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_clock_photo.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_clock_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playback.png b/TMessagesProj/src/main/res/drawable-mdpi/playback.png
deleted file mode 100644
index 729c999e9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/playback.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playback_active.png b/TMessagesProj/src/main/res/drawable-mdpi/playback_active.png
deleted file mode 100644
index 65c7c4750..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/playback_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png
index 1767c169e..27a384723 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/search_light_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame0.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame0.png
deleted file mode 100755
index 4c12121a2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame1.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame1.png
deleted file mode 100755
index faf6900df..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame2.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame2.png
deleted file mode 100755
index 4f8c5c5da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame3.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame3.png
deleted file mode 100755
index 0969a95a1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_chat_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame0.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame0.png
deleted file mode 100755
index 98235ffb5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame1.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame1.png
deleted file mode 100755
index 0f4acc0b4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame2.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame2.png
deleted file mode 100755
index 8086e2a3f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame3.png b/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame3.png
deleted file mode 100755
index 6806fbcf2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/typing_dot_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/videolapse.png b/TMessagesProj/src/main/res/drawable-mdpi/videolapse.png
new file mode 100755
index 000000000..08336314a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/videolapse.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-mdpi/videotrimmer.png
new file mode 100755
index 000000000..f68380eb2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/videotrimmer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/boxshadow.9.png
new file mode 100644
index 000000000..ac112f7c5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/boxshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png
new file mode 100755
index 000000000..70dfa6f69
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_aqua.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png
new file mode 100755
index 000000000..4a30d7b6e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png
new file mode 100755
index 000000000..8cabb2c33
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png
new file mode 100755
index 000000000..da46755d0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_orange.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png
new file mode 100755
index 000000000..fbc921282
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_pink.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png
new file mode 100755
index 000000000..1cc2c2d8d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_red.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png
new file mode 100755
index 000000000..9f2ed8bfb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_violet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png
new file mode 100755
index 000000000..2609fca15
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast_yellow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/btnshadow.9.png
new file mode 100644
index 000000000..e3d0d98f3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/btnshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cats.jpg b/TMessagesProj/src/main/res/drawable-xhdpi/cats.jpg
new file mode 100644
index 000000000..396bbcf4e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/cats.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png
new file mode 100755
index 000000000..787e04f9b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png
new file mode 100755
index 000000000..8f768c660
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_aqua.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_aqua.png
deleted file mode 100755
index dc837db7a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_blue.png
deleted file mode 100755
index 4885cba79..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_green.png
deleted file mode 100755
index 436a52720..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_orange.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_orange.png
deleted file mode 100755
index 7ab9b1146..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_pink.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_pink.png
deleted file mode 100755
index fe89dcd6a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_red.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_red.png
deleted file mode 100755
index b4d3ad36e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_violet.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_violet.png
deleted file mode 100755
index e18de6ae5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/gift_yellow.png b/TMessagesProj/src/main/res/drawable-xhdpi/gift_yellow.png
deleted file mode 100755
index 9eb372807..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/gift_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png
index 24b4c74fc..639e7d834 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock.png
old mode 100644
new mode 100755
index 7f17c869f..2719ac9e4
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock_photo.png
old mode 100644
new mode 100755
index bf11349f1..50d10cbeb
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock_photo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_clock_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playback.png b/TMessagesProj/src/main/res/drawable-xhdpi/playback.png
deleted file mode 100644
index 8393b7406..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/playback.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playback_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/playback_active.png
deleted file mode 100644
index 48c99fb9d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/playback_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png
index 1743da6b4..c32684084 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/search_light_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame0.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame0.png
deleted file mode 100755
index d4c5524e7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame1.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame1.png
deleted file mode 100755
index 8ec3841da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame2.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame2.png
deleted file mode 100755
index cc0151bac..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame3.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame3.png
deleted file mode 100755
index 0d8b81613..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_chat_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame0.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame0.png
deleted file mode 100755
index 8aa8e1798..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame1.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame1.png
deleted file mode 100755
index 8d2d0360a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame2.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame2.png
deleted file mode 100755
index 5a456eb5b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame3.png b/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame3.png
deleted file mode 100755
index 7fdce1db7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/typing_dot_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/videolapse.png b/TMessagesProj/src/main/res/drawable-xhdpi/videolapse.png
new file mode 100755
index 000000000..6347d2bae
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/videolapse.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-xhdpi/videotrimmer.png
new file mode 100755
index 000000000..5c8753f2e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/videotrimmer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/boxshadow.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/boxshadow.9.png
new file mode 100644
index 000000000..25232d9c3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/boxshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png
new file mode 100755
index 000000000..6d3d49d99
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_aqua.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png
new file mode 100755
index 000000000..a0b79c115
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png
new file mode 100755
index 000000000..21cd9614f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png
new file mode 100755
index 000000000..1ed205ff8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_orange.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png
new file mode 100755
index 000000000..0b65cfd00
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_pink.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png
new file mode 100755
index 000000000..37404ef89
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_red.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png
new file mode 100755
index 000000000..a6a22b4a0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_violet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png
new file mode 100755
index 000000000..df5340e4b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast_yellow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/btnshadow.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/btnshadow.9.png
new file mode 100644
index 000000000..f74d3632c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/btnshadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cats.jpg b/TMessagesProj/src/main/res/drawable-xxhdpi/cats.jpg
new file mode 100644
index 000000000..834e6ddf6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/cats.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png
new file mode 100755
index 000000000..d05ae14d9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png
new file mode 100755
index 000000000..7b61accc5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_actions_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_aqua.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_aqua.png
deleted file mode 100755
index cb5db7ce8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_aqua.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_blue.png
deleted file mode 100755
index 63645824b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_green.png
deleted file mode 100755
index e8b72c4c5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_orange.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_orange.png
deleted file mode 100755
index 5e508a296..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_orange.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_pink.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_pink.png
deleted file mode 100755
index d6eadc83a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_pink.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_red.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_red.png
deleted file mode 100755
index 77c96c8dc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_red.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_violet.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_violet.png
deleted file mode 100755
index 94f5eb1a3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_violet.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_yellow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/gift_yellow.png
deleted file mode 100755
index a20610574..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/gift_yellow.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png
index 6383edf74..ca6c90bbd 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock.png
old mode 100644
new mode 100755
index 7f74435ff..6c28c8e03
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock_photo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock_photo.png
old mode 100644
new mode 100755
index 7986d8e76..4bf6b168b
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock_photo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_clock_photo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playback.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playback.png
deleted file mode 100644
index 517920f78..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/playback.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playback_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playback_active.png
deleted file mode 100644
index 4ed866438..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/playback_active.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame0.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame0.png
deleted file mode 100755
index c2a610a13..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame1.png
deleted file mode 100755
index efe53d373..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame2.png
deleted file mode 100755
index 2c4fb310e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame3.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame3.png
deleted file mode 100755
index a4bb53683..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_chat_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame0.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame0.png
deleted file mode 100755
index 48a42a553..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame0.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame1.png
deleted file mode 100755
index bc8179a3e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame2.png
deleted file mode 100755
index 226a7ae84..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame3.png b/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame3.png
deleted file mode 100755
index db9b4597e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/typing_dot_frame3.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/videolapse.png b/TMessagesProj/src/main/res/drawable-xxhdpi/videolapse.png
new file mode 100755
index 000000000..059016c44
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/videolapse.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/videotrimmer.png b/TMessagesProj/src/main/res/drawable-xxhdpi/videotrimmer.png
new file mode 100755
index 000000000..f880b9d38
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/videotrimmer.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..3d97d66d1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector.xml b/TMessagesProj/src/main/res/drawable/bar_selector.xml
index 236178c0e..961d245f2 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector.xml
@@ -2,17 +2,17 @@
     xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
-            <solid android:color="#40a0bcdd" />
+            <solid android:color="#ff45658d" />
         </shape>
     </item>
     <item android:state_focused="true">
         <shape android:shape="rectangle">
-            <solid android:color="#40a0bcdd" />
+            <solid android:color="#ff45658d" />
         </shape>
     </item>
     <item android:state_selected="true">
         <shape android:shape="rectangle">
-            <solid android:color="#40a0bcdd" />
+            <solid android:color="#ff45658d" />
         </shape>
     </item>
     <item android:drawable="@drawable/transparent" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
new file mode 100644
index 000000000..f3319e321
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
@@ -0,0 +1,25 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <inset android:insetBottom="2dp">
+            <shape android:shape="rectangle">
+                <solid android:color="#fff0f0f0" />
+            </shape>
+        </inset>
+    </item>
+    <item android:state_focused="true">
+        <inset android:insetBottom="2dp">
+            <shape android:shape="rectangle">
+                <solid android:color="#fff0f0f0" />
+            </shape>
+        </inset>
+    </item>
+    <item android:state_selected="true">
+        <inset android:insetBottom="2dp">
+            <shape android:shape="rectangle">
+                <solid android:color="#fff0f0f0" />
+            </shape>
+        </inset>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/launch_button_states.xml b/TMessagesProj/src/main/res/drawable/launch_button_states.xml
new file mode 100644
index 000000000..b9581e53c
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/launch_button_states.xml
@@ -0,0 +1,23 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#f2f5f7" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#f2f5f7" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#f2f5f7" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#ffffffff" />
+        </shape>
+    </item>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/loading_header_animation.xml b/TMessagesProj/src/main/res/drawable/loading_header_animation.xml
deleted file mode 100644
index 801fe84a0..000000000
--- a/TMessagesProj/src/main/res/drawable/loading_header_animation.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<rotate xmlns:android="http://schemas.android.com/apk/res/android"
-    android:drawable="@drawable/ab_progress"
-    android:fromDegrees="0"
-    android:pivotX="50%"
-    android:pivotY="50%"
-    android:toDegrees="360" />
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml b/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml
new file mode 100644
index 000000000..42b348a2c
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/messages_list_divider2.xml
@@ -0,0 +1,6 @@
+<inset
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <shape android:shape="rectangle">
+        <solid android:color="@color/divider"/>
+    </shape>
+</inset>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/typing_dots.xml b/TMessagesProj/src/main/res/drawable/typing_dots.xml
deleted file mode 100644
index fb3154cb3..000000000
--- a/TMessagesProj/src/main/res/drawable/typing_dots.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<animation-list xmlns:android="http://schemas.android.com/apk/res/android" android:oneshot="false">
-    <item android:drawable="@drawable/typing_dot_frame0" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_frame1" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_frame2" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_frame3" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_frame0" android:duration="120" />
-</animation-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/typing_dots_chat.xml b/TMessagesProj/src/main/res/drawable/typing_dots_chat.xml
deleted file mode 100644
index 702e218b7..000000000
--- a/TMessagesProj/src/main/res/drawable/typing_dots_chat.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<animation-list xmlns:android="http://schemas.android.com/apk/res/android" android:oneshot="false">
-    <item android:drawable="@drawable/typing_dot_chat_frame0" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_chat_frame1" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_chat_frame2" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_chat_frame3" android:duration="120" />
-    <item android:drawable="@drawable/typing_dot_chat_frame0" android:duration="120" />
-</animation-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml b/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml
new file mode 100644
index 000000000..d5aa085c6
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml
@@ -0,0 +1,23 @@
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:src="@drawable/cats"
+        android:scaleType="centerCrop"/>
+
+    <FrameLayout
+        android:layout_width="498dp"
+        android:layout_height="528dp"
+        android:layout_gravity="center"
+        android:background="@drawable/btnshadow">
+
+        <include layout="@layout/intro_layout"/>
+
+    </FrameLayout>
+
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml b/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml
new file mode 100644
index 000000000..47c514403
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/launch_layout_tablet.xml
@@ -0,0 +1,130 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/launch_layout">
+
+    <ImageView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:src="@drawable/cats"
+        android:scaleType="centerCrop"
+        android:id="@+id/launch_background"/>
+
+    <LinearLayout
+        android:layout_width="320dp"
+        android:layout_height="wrap_content"
+        android:id="@+id/launch_button_layout"
+        android:layout_centerVertical="true"
+        android:orientation="vertical">
+
+        <LinearLayout
+            android:layout_width="308dp"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:background="@drawable/btnshadow"
+            android:layout_gravity="center">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="60dp"
+                android:id="@+id/new_group_button"
+                android:textColor="#ff54759e"
+                android:gravity="center_vertical"
+                android:textSize="20dp"
+                android:paddingLeft="17dp"
+                android:paddingStart="17dp"
+                android:paddingEnd="17dp"
+                android:background="@drawable/launch_button_states"/>
+
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="#ffd6dee4"/>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="60dp"
+                android:id="@+id/new_secret_button"
+                android:textColor="#ff54759e"
+                android:gravity="center_vertical"
+                android:textSize="20dp"
+                android:paddingLeft="17dp"
+                android:paddingStart="17dp"
+                android:paddingEnd="17dp"
+                android:background="@drawable/launch_button_states"/>
+
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="#ffd6dee4"/>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="60dp"
+                android:id="@+id/new_broadcast_button"
+                android:textColor="#ff54759e"
+                android:gravity="center_vertical"
+                android:textSize="20dp"
+                android:paddingLeft="17dp"
+                android:paddingStart="17dp"
+                android:paddingEnd="17dp"
+                android:background="@drawable/launch_button_states"/>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="308dp"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:background="@drawable/btnshadow"
+            android:layout_gravity="center"
+            android:layout_marginTop="18dp">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="60dp"
+                android:id="@+id/contacts_button"
+                android:textColor="#ff54759e"
+                android:gravity="center_vertical"
+                android:textSize="20dp"
+                android:paddingLeft="17dp"
+                android:paddingStart="17dp"
+                android:paddingEnd="17dp"
+                android:background="@drawable/launch_button_states"/>
+
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="#ffd6dee4"/>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="60dp"
+                android:id="@+id/settings_button"
+                android:textColor="#ff54759e"
+                android:gravity="center_vertical"
+                android:textSize="20dp"
+                android:paddingLeft="17dp"
+                android:paddingStart="17dp"
+                android:paddingEnd="17dp"
+                android:background="@drawable/launch_button_states"/>
+
+        </LinearLayout>
+
+    </LinearLayout>
+
+    <FrameLayout
+        android:layout_height="match_parent"
+        android:layout_width="1dp"
+        android:background="#40295274"
+        android:id="@+id/shadow_tablet_side"/>
+
+    <FrameLayout
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:id="@+id/shadow_tablet"
+        android:background="#7F000000"
+        android:visibility="gone"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/updating_state_layout.xml b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
index b00a8df1c..9157620e5 100644
--- a/TMessagesProj/src/main/res/layout/updating_state_layout.xml
+++ b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
@@ -6,17 +6,6 @@
     android:id="@+id/back_button_background"
     android:layout_gravity="top">
 
-    <ProgressBar
-        android:layout_height="32dp"
-        android:layout_width="32dp"
-        android:indeterminate="true"
-        android:indeterminateDrawable="@drawable/loading_header_animation"
-        android:indeterminateBehavior="repeat"
-        android:indeterminateDuration="1200"
-        android:indeterminateOnly="true"
-        android:layout_gravity="center_vertical|left"
-        android:layout_marginLeft="12dp"/>
-
     <ImageView
         android:layout_height="wrap_content"
         android:layout_width="wrap_content"
@@ -28,7 +17,7 @@
     <TextView
         android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginLeft="52dp"
+        android:layout_marginLeft="16dp"
         android:textColor="#ffffff"
         android:textSize="17dp"
         android:layout_gravity="center_vertical|left"
diff --git a/TMessagesProj/src/main/res/layout/video_editor_layout.xml b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
index 9e314d526..bd07b7f69 100644
--- a/TMessagesProj/src/main/res/layout/video_editor_layout.xml
+++ b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
@@ -12,7 +12,7 @@
         android:id="@+id/video_container"
         android:layout_gravity="top">
 
-        <SurfaceView
+        <TextureView
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
             android:layout_gravity="center"
@@ -26,44 +26,75 @@
             android:layout_gravity="center"
             android:id="@+id/play_button"/>
 
+    </FrameLayout>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/control_layout">
+
         <org.telegram.ui.Views.VideoSeekBarView
             android:layout_height="36dp"
             android:layout_width="match_parent"
             android:id="@+id/video_seekbar"
             android:background="#77000000"
-            android:layout_gravity="bottom"/>
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"/>
+
+        <org.telegram.ui.Views.VideoTimelineView
+            android:layout_width="match_parent"
+            android:layout_height="74dp"
+            android:layout_marginTop="36dp"
+            android:id="@+id/video_timeline_view"/>
 
     </FrameLayout>
 
-    <FrameLayout
+    <LinearLayout
         android:layout_width="match_parent"
-        android:layout_height="143dp"
+        android:layout_height="wrap_content"
         android:layout_gravity="bottom"
-        android:id="@+id/info_container">
+        android:background="#ff2d2d2d"
+        android:layout_marginLeft="16dp"
+        android:layout_marginRight="16dp"
+        android:layout_marginBottom="16dp"
+        android:id="@+id/info_container"
+        android:orientation="vertical">
     
-        <org.telegram.ui.Views.VideoTimelineView
-            android:layout_width="match_parent"
-            android:layout_height="45dp"
-            android:id="@+id/video_timeline_view"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#f0f0f0"
+            android:textSize="15dp"
+            android:layout_marginTop="8dp"
+            android:layout_marginLeft="13dp"
+            android:id="@+id/original_title"/>
 
         <TextView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textColor="#999999"
-            android:textSize="16dp"
-            android:layout_gravity="bottom|center_horizontal"
-            android:layout_marginBottom="66dp"
+            android:textColor="#bebebe"
+            android:textSize="15dp"
+            android:layout_marginLeft="13dp"
             android:id="@+id/original_size"/>
 
         <TextView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textColor="#999999"
-            android:textSize="16dp"
-            android:layout_gravity="bottom|center_horizontal"
-            android:layout_marginBottom="38dp"
+            android:textColor="#f0f0f0"
+            android:textSize="15dp"
+            android:layout_marginTop="10dp"
+            android:layout_marginLeft="13dp"
+            android:id="@+id/edited_title"/>
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#bebebe"
+            android:textSize="15dp"
+            android:layout_marginLeft="13dp"
+            android:layout_marginBottom="8dp"
             android:id="@+id/edited_size"/>
 
-    </FrameLayout>
+    </LinearLayout>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 890609e7d..c15304dde 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -260,7 +260,7 @@
     <string name="ContactJoined">اشترك صديق في تيليجرام</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">اللغة</string>
-    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]>يرجى الإطلاع على <![CDATA[<a href="http://telegram.org/faq/ar">الأسئلة الشائعة عن تيليجرام</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
+    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]>يرجى الإطلاع على <![CDATA[<a href=\"http://telegram.org/faq/ar\">الأسئلة الشائعة عن تيليجرام</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
     <string name="AskButton">اسأل أحد المتطوعين</string>
     <string name="TelegramFaq">الأسئلة الشائعة عن تيليجرام</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/ar</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 282d7c5e9..0c32ef1b9 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -43,7 +43,7 @@
     <string name="NoResult">Keine Ergebnisse</string>
     <string name="NoChats">Noch keine Chats…</string>
     <string name="NoChatsHelp">Beginne Telegram zu nutzen, indem du\neine neue Nachricht erstellst (rechte obere Ecke)\noder deine Kontakte aufrufst.</string>
-    <string name="WaitingForNetwork">Warte auf Verbindung…</string>
+    <string name="WaitingForNetwork">Warte auf Netzwerk...</string>
     <string name="Connecting">Verbinde…</string>
     <string name="Updating">Aktualisiere…</string>
     <string name="NewSecretChat">Neuer geheimer Chat</string>
@@ -60,7 +60,7 @@
     <!--broadcasts-->
     <string name="BroadcastList">Broadcast Liste</string>
     <string name="NewBroadcastList">Neue Broadcast Liste</string>
-    <string name="EnterListName">Name der Liste eingeben</string>
+    <string name="EnterListName">Listenname</string>
     <string name="YouCreatedBroadcastList">Du hast eine Broadcast Liste erstellt</string>
     <string name="AddRecipient">Empfänger hinzufügen</string>
     <string name="KickFromBroadcast">Aus Broadcast Liste entfernen</string>
@@ -85,12 +85,12 @@
     <string name="Attach">Anhängen</string>
     <string name="IsTyping">schreibt...</string>
     <string name="AreTyping">tippen…</string>
-    <string name="GotAQuestion">Du hast eine Frage\nzu Telegram?</string>
+    <string name="GotAQuestion">Hast du eine Frage\nzu Telegram?</string>
     <string name="ChatTakePhoto">Foto aufnehmen</string>
     <string name="ChatGallery">Galerie</string>
     <string name="ChatLocation">Standort</string>
     <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">Dokument</string>
+    <string name="ChatDocument">Datei</string>
     <string name="NoMessages">Noch keine Nachrichten…</string>
     <string name="ViewPhoto">Foto anzeigen</string>
     <string name="ViewLocation">Standort anzeigen</string>
@@ -106,18 +106,18 @@
     <string name="AddToContacts">ZU KONTAKTEN HINZUFÜGEN</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s hat dich zu einem geheimen Chat eingeladen.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Du hast %s zu einem geheimen Chat eingeladen.</string>
-    <string name="EncryptedDescriptionTitle">Geheime Chats:</string>
-    <string name="EncryptedDescription1">Verwenden End-to-End-Verschlüsselung</string>
-    <string name="EncryptedDescription2">Hinterlassen keine Spuren auf unseren Servern</string>
-    <string name="EncryptedDescription3">Haben einen Selbstzerstörungs-Timer</string>
-    <string name="EncryptedDescription4">Erlauben keine Weiterleitung von Nachrichten</string>
+    <string name="EncryptedDescriptionTitle">Geheime Chats in Kürze:</string>
+    <string name="EncryptedDescription1">Ende-zu-Ende Verschlüsselung</string>
+    <string name="EncryptedDescription2">Keine Serverspeicherung</string>
+    <string name="EncryptedDescription3">Selbstzerstörungs-Timer</string>
+    <string name="EncryptedDescription4">Verbieten Weiterleitung</string>
     <string name="YouWereKicked">Du wurdest aus der Gruppe entfernt</string>
     <string name="YouLeft">Du hast die Gruppe verlassen</string>
     <string name="DeleteThisGroup">Diese Gruppe löschen</string>
     <string name="DeleteThisChat">Diesen Chat löschen</string>
     <string name="SlideToCancel">WISCHEN UM ABZUBRECHEN</string>
-    <string name="SaveToDownloads">Im Ordner Downloads speichern</string>
-    <string name="ApplyLocalizationFile">Standort-Datei benutzen</string>
+    <string name="SaveToDownloads">In Downloads speichern</string>
+    <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
     <string name="UnsupportedAttachment">Nicht unterstützte Datei</string>
 
     <!--notification-->
@@ -140,7 +140,7 @@
     <string name="NotificationMessageVideo">%1$s hat dir ein Video gesendet</string>
     <string name="NotificationMessageContact">%1$s hat dir einen Kontakt gesendet</string>
     <string name="NotificationMessageMap">%1$s hat dir einen Standort gesendet</string>
-    <string name="NotificationMessageDocument">%1$s hat dir ein Dokument gesendet</string>
+    <string name="NotificationMessageDocument">%1$s hat dir eine Datei gesendet</string>
     <string name="NotificationMessageAudio">%1$s hat dir eine Audio-Datei gesendet</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
     <string name="NotificationMessageGroupNoText">%1$s hat eine Nachricht an die Gruppe %2$s gesendet</string>
@@ -148,7 +148,7 @@
     <string name="NotificationMessageGroupVideo">%1$s hat ein Video an die Gruppe %2$s gesendet</string>
     <string name="NotificationMessageGroupContact">%1$s hat einen Kontakt an die Gruppe %2$s gesendet</string>
     <string name="NotificationMessageGroupMap">%1$s hat einen Standort an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupDocument">%1$s hat ein Dokument an die Gruppe %2$s gesendet</string>
+    <string name="NotificationMessageGroupDocument">%1$s hat eine Datei an die Gruppe %2$s gesendet</string>
     <string name="NotificationMessageGroupAudio">%1$s hat eine Audio-Datei an die Gruppe %2$s gesendet</string>
     <string name="NotificationInvitedToGroup">%1$s hat dich in die Gruppe %2$s eingeladen</string>
     <string name="NotificationEditedGroupName">%1$s hat den Namen der Gruppe %2$s geändert</string>
@@ -177,7 +177,7 @@
 
     <!--group create view-->
     <string name="SendMessageTo">Sende Nachricht an…</string>
-    <string name="EnterGroupNamePlaceholder">Gruppennamen eingeben</string>
+    <string name="EnterGroupNamePlaceholder">Gruppenname</string>
     <string name="GroupName">Gruppenname</string>
     <string name="AllContacts">ALLE KONTAKTE</string>
     <string name="MembersCount">%1$d/%2$d Mitglieder</string>
@@ -190,7 +190,7 @@
     <string name="SETTINGS">EINSTELLUNGEN</string>
     <string name="AddMember">Mitglied hinzufügen</string>
     <string name="DeleteAndExit">Gruppe löschen und verlassen</string>
-    <string name="Notifications">Benachrichtigungen</string>
+    <string name="Notifications">Mitteilungen</string>
     <string name="KickFromGroup">Aus der Gruppe entfernen</string>
 
     <!--contact info view-->
@@ -222,7 +222,7 @@
     <string name="EncryptionKeyDescription">Dieses Bild ist eine Visualisierung des geheimen Schlüssels für den geheimen Chat mit <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Wenn dieses Bild auf <![CDATA[<b>]]>%2$s\s<![CDATA[</b>]]> Telefon genau so aussieht, ist euer Chat zu 200%% sicher.<![CDATA[<br><br>]]>Erfahre mehr über die Sicherheit auf telegram.org</string>
 
     <!--settings view-->
-    <string name="ResetNotificationsText">Alle Einstellungen für Benachrichtigungen zurücksetzen</string>
+    <string name="ResetNotificationsText">Alle Einstellungen für Mitteilungen zurücksetzen</string>
     <string name="TextSize">Textgröße für Nachrichten</string>
     <string name="AskAQuestion">Eine Frage stellen</string>
     <string name="EnableAnimations">Animationen aktivieren</string>
@@ -242,9 +242,9 @@
     <string name="Vibrate">Vibrieren</string>
     <string name="InAppPreview">In-App-Vorschau</string>
     <string name="Reset">ZURÜCKSETZEN</string>
-    <string name="ResetAllNotifications">Alle Benachrichtigungs-Einstellungen zurücksetzen</string>
-    <string name="UndoAllCustom">Setzt alle benutzerdefinierten Einstellungen für Benachrichtigungen zurück</string>
-    <string name="NotificationsAndSounds">Benachrichtigungen</string>
+    <string name="ResetAllNotifications">Mitteilungseinstellungen zurücksetzen</string>
+    <string name="UndoAllCustom">Setzt alle benutzerdefinierten Einstellungen für Mitteilungen zurück</string>
+    <string name="NotificationsAndSounds">Mitteilungen und Töne</string>
     <string name="BlockedUsers">Blockierte Benutzer</string>
     <string name="SaveIncomingPhotos">Speichere eingehende Bilder</string>
     <string name="LogOut">Abmelden</string>
@@ -254,34 +254,34 @@
     <string name="Support">SUPPORT</string>
     <string name="ChatBackground">Chat-Hintergrundbild</string>
     <string name="MessagesSettings">NACHRICHTEN</string>
-    <string name="SendByEnter">Mit ENTER senden</string>
+    <string name="SendByEnter">Mit Enter senden</string>
     <string name="TerminateAllSessions">Alle anderen Sitzungen beenden</string>
     <string name="Events">EREIGNISSE</string>
     <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Sprache</string>
-    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von Freiwilligen geleistet wird. Wir versuchen so schnell wie möglich zu antworten. Dies kann jedoch manchmal etwas länger dauern.<![CDATA[<br><br>]]>Bitte schau in den <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href="http://telegram.org/faq#troubleshooting">Problemlösung</a>]]>.</string>
+    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von einem ehrenamtlichen Team betreut wird. Wir versuchen so schnell wie möglich zu antworten, dies kann jedoch manchmal ein bisschen dauern.<![CDATA[<br><br>]]>Bitte schau auch in den <![CDATA[<a href=\"http://telegram.org/faq/de\">Fragen und Antworten </a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href=\"https://telegram.org/faq/de#problembehandlung\">Problembehandlung</a>]]>.</string>
     <string name="AskButton">Frage einen Freiwilligen</string>
-    <string name="TelegramFaq">Telegram-FAQ</string>
+    <string name="TelegramFaq">Fragen und Antworten zu Telegram</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Lokalisierung löschen?</string>
     <string name="IncorrectLocalization">Falsche Sprachdatei</string>
     <string name="Enabled">Aktiviert</string>
     <string name="Disabled">Deaktiviert</string>
-    <string name="NotificationsService">Dienst für Benachrichtigungen</string>
-    <string name="NotificationsServiceDisableInfo">Sofern Google Play Dienste ausreichend für deine Benachrichtigungen sind, kannst du unseren Benachrichtigungsdienst abschalten. Wir empfehlen allerdings, unseren Dienst dauerhaft aktiviert zu lassen um über neue Nachrichten in Echtzeit informiert zu werden.</string>
+    <string name="NotificationsService">Mitteilungsdienst</string>
+    <string name="NotificationsServiceDisableInfo">Sofern Google Play Dienste ausreichend für deine Mitteilungen sind, kannst du unseren Mitteilungsdienst abschalten. Wir empfehlen allerdings, unseren Dienst dauerhaft aktiviert zu lassen um über neue Nachrichten in Echtzeit informiert zu werden.</string>
     <string name="SortBy">sortiert nach</string>
     <string name="ImportContacts">Kontakte importieren</string>
     <string name="WiFiOnly">Nur über W-LAN</string>
     <string name="SortFirstName">Vorname</string>
     <string name="SortLastName">Nachname</string>
     <string name="LedColor">LED-Farbe</string>
-    <string name="PopupNotification">Popup Benachrichtigungen</string>
+    <string name="PopupNotification">Popup Mitteilungen</string>
     <string name="NoPopup">Kein Popup</string>
     <string name="OnlyWhenScreenOn">Nur wenn Bildschirm „an“</string>
     <string name="OnlyWhenScreenOff">Nur wenn Bildschirm „aus“</string>
     <string name="AlwaysShowPopup">Popups immer anzeigen</string>
-    <string name="BadgeNumber">BADGE (Anzahl)</string>
+    <string name="BadgeNumber">Kennzeichensymbol</string>
     <string name="Short">Kurz</string>
     <string name="Long">Lang</string>
     <string name="SystemDefault">Systemstandard</string>
@@ -364,7 +364,7 @@
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Standort</string>
     <string name="AttachContact">Kontakt</string>
-    <string name="AttachDocument">Dokument</string>
+    <string name="AttachDocument">Datei</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">Du</string>
     <string name="ActionTakeScreenshootYou">Du hast ein Bildschirmfoto gemacht!</string>
@@ -409,7 +409,7 @@
     <string name="Page7Title">Vertraulich</string>
     <string name="Page1Message">Willkommen im Zeitalter der sicheren und schnellen Kommunikation.</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> stellt Nachrichten schneller zu als andere Anwendungen</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist für immer kostenlos. Keine Werbung. Keine wiederkehrenden Kosten.</string>
+    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist für immer kostenlos. Keine Werbung. Keine Abo-Gebühr.</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schützt deine Nachrichten vor Hacker-Angriffen</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> unterstützt unbegrenzt große Chats und Mediendateien</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lässt sich von verschiedenen Geräten gleichzeitig nutzen</string>
@@ -423,12 +423,12 @@
     <string name="Members_few">%1$d Mitglieder</string>
     <string name="Members_many">%1$d Mitglieder</string>
     <string name="Members_other">%1$d Mitglieder</string>
-    <string name="AndMoreTyping_zero">und %1$d weitere Personen schreiben</string>
-    <string name="AndMoreTyping_one">und %1$d weitere Personen schreiben</string>
-    <string name="AndMoreTyping_two">und %1$d weitere Personen schreiben</string>
-    <string name="AndMoreTyping_few">und %1$d weitere Personen schreiben</string>
-    <string name="AndMoreTyping_many">und %1$d weitere Personen schreiben</string>
-    <string name="AndMoreTyping_other">und %1$d weitere Personen schreiben</string>
+    <string name="AndMoreTyping_zero">und %1$d weitere schreiben</string>
+    <string name="AndMoreTyping_one">und %1$d weitere schreiben</string>
+    <string name="AndMoreTyping_two">und %1$d weitere schreiben</string>
+    <string name="AndMoreTyping_few">und %1$d weitere schreiben</string>
+    <string name="AndMoreTyping_many">und %1$d weitere schreiben</string>
+    <string name="AndMoreTyping_other">und %1$d weitere schreiben</string>
     <string name="NewMessages_zero">keine neuen Nachrichten</string>
     <string name="NewMessages_one">%1$d neue Nachricht</string>
     <string name="NewMessages_two">%1$d neue Nachrichten</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index f63c9a996..247db3cf9 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -29,7 +29,7 @@
     <string name="RegisterText">Ingresa tu nombre y apellidos</string>
     <!--<string name="RegisterText">Set up your name and picture</string>-->
     <string name="FirstName">Nombre (requerido)</string>
-    <string name="LastName">Apellido(s) (opcional)</string>
+    <string name="LastName">Apellido (opcional)</string>
     <string name="CancelRegistration">Cancelar registro</string>
 
     <!--chats view-->
@@ -107,11 +107,11 @@
     <string name="EncryptedPlaceholderTitleIncoming">%s te ha invitado a un chat secreto.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Has invitado a %s a un chat secreto.</string>
     <string name="EncryptedDescriptionTitle">Los chats secretos:</string>
-    <string name="EncryptedDescription1">Usan cifrado de móvil-a-móvil</string>
-    <string name="EncryptedDescription2">No dejan rastro en nuestros servidores</string>
+    <string name="EncryptedDescription1">Usan cifrado end-to-end</string>
+    <string name="EncryptedDescription2">No dejan rastro en el servidor</string>
     <string name="EncryptedDescription3">Tienen autodestrucción de mensajes</string>
     <string name="EncryptedDescription4">No permiten reenvíos de mensajes</string>
-    <string name="YouWereKicked">Has sido expulsado de este grupo</string>
+    <string name="YouWereKicked">Te han expulsado de este grupo</string>
     <string name="YouLeft">Has abandonado este grupo</string>
     <string name="DeleteThisGroup">Eliminar este grupo</string>
     <string name="DeleteThisChat">Eliminar esta conversación</string>
@@ -170,7 +170,7 @@
     <string name="YesterdayAt">ayer a las</string>
     <string name="OtherAt">a las</string>
     <string name="Online">en línea</string>
-    <string name="Offline">desconectado</string>
+    <string name="Offline">fuera de línea</string>
     <string name="LastSeen">últ. vez</string>
     <string name="LastSeenDate">últ. vez el</string>
     <string name="InviteFriends">Invitar a amigos</string>
@@ -185,7 +185,7 @@
     <!--group info view-->
     <string name="EnterGroupNameTitle">INGRESA EL NOMBRE DEL GRUPO</string>
     <string name="SharedMedia">Fotos y vídeos</string>
-    <string name="GroupInfo">Información del grupo</string>
+    <string name="GroupInfo">Información </string>
     <string name="SHAREDMEDIA">FOTOS Y VÍDEOS</string>
     <string name="SETTINGS">AJUSTES</string>
     <string name="AddMember">Añadir miembro</string>
@@ -228,7 +228,7 @@
     <string name="EnableAnimations">Activar animaciones</string>
     <string name="EnableMarkdown">Enable Markdown</string>
     <string name="Unblock">Desbloquear</string>
-    <string name="UnblockText">Mantén pulsado un usuario para desbloquearlo</string>
+    <string name="UnblockText">Mantén pulsado un usuario para desbloquearlo.</string>
     <string name="NoBlocked">No hay usuarios bloqueados</string>
     <string name="YourPhoneNumber">TU NÚMERO DE TELÉFONO</string>
     <string name="MessageNotifications">NOTIFICACIONES DE MENSAJES</string>
@@ -243,7 +243,7 @@
     <string name="InAppPreview">Vista previa en la app</string>
     <string name="Reset">RESTABLECER</string>
     <string name="ResetAllNotifications">Restablecer todas las notificaciones</string>
-    <string name="UndoAllCustom">Deshacer todas las notificaciones personalizadas para todos tus usuarios y grupos</string>
+    <string name="UndoAllCustom">Deshacer las notificaciones personalizadas para todos tus usuarios y grupos</string>
     <string name="NotificationsAndSounds">Notificaciones y sonidos</string>
     <string name="BlockedUsers">Usuarios bloqueados</string>
     <string name="SaveIncomingPhotos">Guardar fotos entrantes</string>
@@ -272,7 +272,7 @@
     <string name="NotificationsServiceDisableInfo">Si los Servicios de Google Play son suficientes para que recibas las notificaciones, puedes desactivar el Servicio de notificaciones. Sin embargo, te recomendamos que lo dejes activo para mantener funcionando la aplicación en segundo plano y recibir las notificaciones al instante.</string>
     <string name="SortBy">Ordenar por</string>
     <string name="ImportContacts">Importar contactos</string>
-    <string name="WiFiOnly">Solo vía Wifi</string>
+    <string name="WiFiOnly">Sólo vía Wi-Fi</string>
     <string name="SortFirstName">Nombre</string>
     <string name="SortLastName">Apellido</string>
     <string name="LedColor">Color del LED</string>
@@ -376,27 +376,27 @@
     <string name="FloodWait">Demasiados intentos. Por favor, prueba de nuevo más tarde.</string>
     <string name="InvalidCode">Código inválido</string>
     <string name="InvalidFirstName">Nombre inválido</string>
-    <string name="InvalidLastName">Apellido/s inválido/s</string>
+    <string name="InvalidLastName">Apellido inválido</string>
     <string name="Loading">Cargando...</string>
     <string name="NoPlayerInstalled">No tienes reproductor de vídeo. Por favor, instala uno para continuar.</string>
     <string name="NoMailInstalled">Por favor, envíanos un correo electrónico a sms@telegram.org y cuéntanos tu problema.</string>
     <string name="NoHandleAppInstalled">No tienes aplicaciones que puedan manejar el tipo de archivo \'%1$s\'. Por favor, instala una para continuar.</string>
     <string name="InviteUser">Este usuario no tiene Telegram aún. ¿Enviarle una invitación?</string>
-    <string name="AreYouSure">¿Estás seguro?</string>
+    <string name="AreYouSure">¿Quieres hacerlo?</string>
     <string name="AddContactQ">¿Añadir contacto?</string>
     <string name="AddToTheGroup">¿Añadir a %1$s al grupo?\n\nNúmero de los últimos mensajes para reenviar:</string>
     <string name="ForwardMessagesTo">¿Reenviar mensajes a %1$s?</string>
     <string name="DeleteChatQuestion">¿Eliminar este chat?</string>
     <string name="SendMessagesTo">¿Enviar mensajes a %1$s?</string>
-    <string name="AreYouSureLogout">¿Estás seguro/a que quieres cerrar sesión?</string>
-    <string name="AreYouSureSessions">¿Estás seguro/a que quieres terminar todas las otras sesiones?</string>
-    <string name="AreYouSureDeleteAndExit">¿Estás seguro/a que quieres eliminar y dejar el grupo?</string>
-    <string name="AreYouSureDeleteThisChat">¿Estás seguro/a que quieres eliminar este chat?</string>
-    <string name="AreYouSureShareMyContactInfo">¿Estás seguro/a que quieres compartir tu información de contacto?</string>
-    <string name="AreYouSureBlockContact">¿Estás seguro/a que quieres bloquear este contacto?</string>
-    <string name="AreYouSureUnblockContact">¿Estás seguro/a que quieres desbloquear este contacto?</string>
-    <string name="AreYouSureDeleteContact">¿Estás seguro/a que quieres eliminar este contacto?</string>
-    <string name="AreYouSureSecretChat">¿Estás seguro/a que quieres iniciar un chat secreto?</string>
+    <string name="AreYouSureLogout">¿Quieres cerrar sesión?</string>
+    <string name="AreYouSureSessions">¿Quieres terminar todas las otras sesiones?</string>
+    <string name="AreYouSureDeleteAndExit">¿Quieres eliminar y dejar el grupo?</string>
+    <string name="AreYouSureDeleteThisChat">¿Quieres eliminar este chat?</string>
+    <string name="AreYouSureShareMyContactInfo">¿Quieres compartir tu información de contacto?</string>
+    <string name="AreYouSureBlockContact">¿Quieres bloquear este contacto?</string>
+    <string name="AreYouSureUnblockContact">¿Quieres desbloquear este contacto?</string>
+    <string name="AreYouSureDeleteContact">¿Quieres eliminar este contacto?</string>
+    <string name="AreYouSureSecretChat">¿Quieres iniciar un chat secreto?</string>
     <string name="ForwardFromMyName">reenviar desde mi nombre</string>
 
     <!--Intro view-->
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 80d54b495..a104766bf 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -260,7 +260,7 @@
     <string name="ContactJoined">Un contatto si è collegato a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Lingua</string>
-    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe richiedere del tempo.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href="https://telegram.org/faq/it#domande-generali">Domande frequenti</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href="https://telegram.org/faq/it#risoluzione-dei-problemi">l\'individuazione del problema</a>]]>.</string>
+    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe richiedere del tempo.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">Domande frequenti</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]>.</string>
     <string name="AskButton">Chiedi a un volontario</string>
     <string name="TelegramFaq">Domande frequenti</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/it</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 411bc02f3..b6d1e68e0 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -46,12 +46,12 @@
     <string name="WaitingForNetwork">Wachten op netwerk…</string>
     <string name="Connecting">Verbinden…</string>
     <string name="Updating">Bijwerken…</string>
-    <string name="NewSecretChat">Nieuw privégesprek</string>
+    <string name="NewSecretChat">Nieuwe geheime chat</string>
     <string name="AwaitingEncryption">Wachten tot %s online komt…</string>
-    <string name="EncryptionRejected">Privégesprek geannuleerd</string>
+    <string name="EncryptionRejected">Geheime chat geannuleerd</string>
     <string name="EncryptionProcessing">Encryptiesleutels uitwisselen…</string>
-    <string name="EncryptedChatStartedOutgoing">%s neemt nu deel aan het privégesprek.</string>
-    <string name="EncryptedChatStartedIncoming">Je neemt nu deel aan het privégesprek.</string>
+    <string name="EncryptedChatStartedOutgoing">Geheime chat gestart met %s</string>
+    <string name="EncryptedChatStartedIncoming">Toegevoegd aan de geheime chat.</string>
     <string name="ClearHistory">Geschiedenis wissen</string>
     <string name="DeleteChat">Verwijderen en verlaten</string>
     <string name="HiddenName">Verborgen naam</string>
@@ -104,13 +104,13 @@
     <string name="Selected">Geselecteerd: %d</string>
     <string name="ShareMyContactInfo">MIJN CONTACTGEGEVENS DELEN</string>
     <string name="AddToContacts">TOEVOEGEN AAN CONTACTEN</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s heeft je uitgenodigd voor een privégesprek.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Je hebt %s uitgenodigd voor een privégesprek.</string>
-    <string name="EncryptedDescriptionTitle">Privégesprekken:</string>
-    <string name="EncryptedDescription1">gebruiken end-to-endversleuteling</string>
-    <string name="EncryptedDescription2">laten geen sporen achter op onze server</string>
-    <string name="EncryptedDescription3">verlopen automatisch</string>
-    <string name="EncryptedDescription4">staan doorsturen niet toe</string>
+    <string name="EncryptedPlaceholderTitleIncoming">%s heeft je uitgenodigd voor een geheime chat.</string>
+    <string name="EncryptedPlaceholderTitleOutgoing">Je hebt %s uitgenodigd voor een geheime chat.</string>
+    <string name="EncryptedDescriptionTitle">Geheime chat functies:</string>
+    <string name="EncryptedDescription1">End-to-end encryptie</string>
+    <string name="EncryptedDescription2">Ontraceerbaar via onze servers</string>
+    <string name="EncryptedDescription3">Zelfvernietigingstimers</string>
+    <string name="EncryptedDescription4">Doorstuurbescherming</string>
     <string name="YouWereKicked">Je bent verwijderd uit deze groep</string>
     <string name="YouLeft">Je hebt deze groep verlaten</string>
     <string name="DeleteThisGroup">Deze groep verwijderen</string>
@@ -121,12 +121,12 @@
     <string name="UnsupportedAttachment">Bestandstype niet ondersteund</string>
 
     <!--notification-->
-    <string name="EncryptedChatRequested">Privégesprek aangevraagd</string>
-    <string name="EncryptedChatAccepted">Privégesprek gestart</string>
-    <string name="MessageLifetimeChanged">%1$s heeft de verlooptijd ingesteld op %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">Je hebt de verlooptijd ingesteld op %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s heeft de verlooptijd uitgeschakeld</string>
-    <string name="MessageLifetimeYouRemoved">Je hebt de verlooptijd uitgeschakeld</string>
+    <string name="EncryptedChatRequested">Geheime chat aangevraagd</string>
+    <string name="EncryptedChatAccepted">Geheime chat gestart</string>
+    <string name="MessageLifetimeChanged">%1$s heeft de zelfvernietigingstimer ingesteld op %2$s</string>
+    <string name="MessageLifetimeChangedOutgoing">Je hebt de zelfvernietigingstimer ingesteld op %1$s</string>
+    <string name="MessageLifetimeRemoved">%1$s heeft de zelfvernietigingstimer uitgeschakeld</string>
+    <string name="MessageLifetimeYouRemoved">Je hebt de zelfvernietigingstimer uitgeschakeld</string>
     <string name="MessageLifetime2s">2 seconden</string>
     <string name="MessageLifetime5s">5 seconden</string>
     <string name="MessageLifetime1m">1 minuut</string>
@@ -206,12 +206,12 @@
     <string name="PhoneMain">ALGEMEEN</string>
     <string name="ContactInfo">Contactinformatie</string>
     <string name="PHONE">TELEFOON</string>
-    <string name="StartEncryptedChat">Privégesprek starten</string>
+    <string name="StartEncryptedChat">Geheime chat starten</string>
     <string name="CreateEncryptedChatError">Er is een fout opgetreden.</string>
-    <string name="CreateEncryptedChatOutdatedError">Kan geen privégesprek starten met %1$s.\n\n%2$s gebruikt een oudere versie van Telegram en moet eerst een update installeren.</string>
-    <string name="SecretTitle">Privégesprek</string>
+    <string name="CreateEncryptedChatOutdatedError">Kan geen geheime chat starten met %1$s.\n\n%2$s gebruikt een oudere versie van Telegram en moet eerst een update installeren.</string>
+    <string name="SecretTitle">Geheime chat</string>
     <string name="EncryptionKey">Encryptiesleutel</string>
-    <string name="MessageLifetime">Verlooptijd</string>
+    <string name="MessageLifetime">Zelfvernietigingstimer</string>
     <string name="ShortMessageLifetimeForever">Uit</string>
     <string name="ShortMessageLifetime2s">2s</string>
     <string name="ShortMessageLifetime5s">5s</string>
@@ -219,7 +219,7 @@
     <string name="ShortMessageLifetime1h">1u</string>
     <string name="ShortMessageLifetime1d">1d</string>
     <string name="ShortMessageLifetime1w">1w</string>
-    <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor dit privégesprek met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is jullie gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
+    <string name="EncryptionKeyDescription">Dit is een weergave van de encryptiesleutel voor deze geheime chat met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als deze afbeelding er bij <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> hetzelfde uitziet, is jullie gesprek 200%% beveiligd.<![CDATA[<br><br>]]>Lees meer op telegram.org.</string>
 
     <!--settings view-->
     <string name="ResetNotificationsText">Alle meldingsinstellingen herstellen</string>
@@ -252,12 +252,12 @@
     <string name="NoSound">Geen geluid</string>
     <string name="Default">Standaard</string>
     <string name="Support">ONDERSTEUNING</string>
-    <string name="ChatBackground">Achtergrond gesprekken</string>
+    <string name="ChatBackground">Achtergrond</string>
     <string name="MessagesSettings">BERICHTEN</string>
     <string name="SendByEnter">Verzenden met Enter</string>
     <string name="TerminateAllSessions">Beëindig alle andere sessies</string>
     <string name="Events">GEBEURTENISSEN</string>
-    <string name="ContactJoined">Contact lid geworden van Telegram</string>
+    <string name="ContactJoined">Contact lid van Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Taal</string>
     <string name="AskAQuestionInfo">Houd er rekening mee dat de ondersteuning van Telegram door vrijwilligers wordt gedaan. We doen ons best om zo snel mogelijk te antwoorden, maar het kan even even duren.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href=\"http://telegram.org/faq#general\">veelgestelde vragen</a>]]>: hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">het oplossen van problemen</a>]]>.</string>
@@ -276,20 +276,20 @@
     <string name="SortFirstName">Voornaam</string>
     <string name="SortLastName">Achternaam</string>
     <string name="LedColor">LED kleur</string>
-    <string name="PopupNotification">Popup meldingen</string>
-    <string name="NoPopup">Geen popup</string>
-    <string name="OnlyWhenScreenOn">Alleen wanneer scherm \"aan\" staat</string>
-    <string name="OnlyWhenScreenOff">Alleen wanneer scherm \"uit\" staat</string>
-    <string name="AlwaysShowPopup">Altijd popup tonen</string>
+    <string name="PopupNotification">Pop-up meldingen</string>
+    <string name="NoPopup">Geen pop-up</string>
+    <string name="OnlyWhenScreenOn">Alleen bij scherm aan</string>
+    <string name="OnlyWhenScreenOff">Alleen bij scherm uit</string>
+    <string name="AlwaysShowPopup">Altijd pop-up tonen</string>
     <string name="BadgeNumber">Badgenummer</string>
     <string name="Short">Kort</string>
     <string name="Long">Lang</string>
     <string name="SystemDefault">Systeem standaard</string>
     <string name="SettingsDefault">Standaardinstelling</string>
     <string name="AutomaticMediaDownload">AUTOMATISCH MEDIA OPHALEN</string>
-    <string name="WhenUsingMobileData">Bij mobiel datagebruik</string>
-    <string name="WhenConnectedOnWiFi">Bij Wi-Fi verbinding</string>
-    <string name="WhenRoaming">Bij roamen</string>
+    <string name="WhenUsingMobileData">Bij mobiele verbinding</string>
+    <string name="WhenConnectedOnWiFi">Bij Wi-Fi-verbinding</string>
+    <string name="WhenRoaming">Bij roaming</string>
     <string name="NoMediaAutoDownload">Geen media</string>
 
     <!--media view-->
@@ -396,7 +396,7 @@
     <string name="AreYouSureBlockContact">Weet je zeker dat je deze persoon wilt blokkeren?</string>
     <string name="AreYouSureUnblockContact">Weet je zeker dat je deze persoon wilt deblokkeren?</string>
     <string name="AreYouSureDeleteContact">Weet je zeker dat je deze contactpersoon wilt verwijderen?</string>
-    <string name="AreYouSureSecretChat">Weet je zeker dat je een privégesprek wilt starten?</string>
+    <string name="AreYouSureSecretChat">Weet je zeker dat je een geheime chat wilt starten?</string>
     <string name="ForwardFromMyName">doorsturen via mijn eigen naam</string>
 
     <!--Intro view-->
@@ -407,14 +407,14 @@
     <string name="Page5Title">Krachtig</string>
     <string name="Page6Title">In de cloud</string>
     <string name="Page7Title">Privé</string>
-    <string name="Page1Message">Welkom in het tijdperk van snel en veilig chatten</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> bezorgt berichten sneller dan elke andere app</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is altijd gratis. Geen advertenties. Geen abonnementskosten</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligt je berichten tegen hackers</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> heeft geen beperkingen op de grootte van je media en gesprekken</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten vanaf meerdere apparaten</string>
+    <string name="Page1Message">\'s Werelds <![CDATA[<b>snelste</b>]]> berichtendienst.<![CDATA[<br/>]]>Het is <![CDATA[<b>veilig</b>]]> en  <![CDATA[<b>gratis</b>]]>.</string>
+    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> bezorgt berichten<![CDATA[<br/>]]>sneller dan elke andere applicatie.</string>
+    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is altijd gratis. <![CDATA[<br/>]]>Geen advertenties.<![CDATA[<br/>]]>Geen abonnementskosten.</string>
+    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligt je berichten<![CDATA[<br/>]]>tegen aanvallen van hackers.</string>
+    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> beperkt je niet<![CDATA[<br/>]]>in de grootte van je media of gesprekken.</string>
+    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten<![CDATA[<br/>]]>vanaf meerdere apparaten.</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld<![CDATA[<br/>]]>en kunnen zichzelf vernietigen</string>
-    <string name="StartMessaging">Begin nu met chatten</string>
+    <string name="StartMessaging">Begin met chatten</string>
 
     <!--plurals-->
     <string name="Members_zero">geen deelnemers</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 9d38eb6ae..e57c0f3ba 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -17,7 +17,7 @@
 
     <!--code enter view-->
     <string name="YourCode">Seu código</string>
-    <string name="SentSmsCode">Enviamos um SMS com um código de ativação para o seu telefone</string>
+    <string name="SentSmsCode">Enviamos uma SMS com um código de ativação para o seu telefone</string>
     <string name="CallText">Vamos te ligar em</string>
     <string name="Calling">Estamos te ligando...</string>
     <string name="Code">Código</string>
@@ -58,12 +58,12 @@
     <string name="SelectChat">Selecione uma Conversa</string>
 
     <!--broadcasts-->
-    <string name="BroadcastList">Lista de Transmissão</string>
-    <string name="NewBroadcastList">Nova Lista de Transmissão</string>
+    <string name="BroadcastList">Lista de Broadcast</string>
+    <string name="NewBroadcastList">Nova Lista de Broadcast</string>
     <string name="EnterListName">Digite o nome da lista</string>
-    <string name="YouCreatedBroadcastList">Você criou uma lista de transmissão</string>
-    <string name="AddRecipient">Adicionar Recipiente</string>
-    <string name="KickFromBroadcast">Remover da lista de trasmissão</string>
+    <string name="YouCreatedBroadcastList">Você criou uma lista de broadcast</string>
+    <string name="AddRecipient">Adicionar destinatário</string>
+    <string name="KickFromBroadcast">Remover da lista de broadcast</string>
 
     <!--documents view-->
     <string name="SelectFile">Selecione um Arquivo</string>
@@ -91,7 +91,7 @@
     <string name="ChatLocation">Localização</string>
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Documento</string>
-    <string name="NoMessages">Ainda não há mensagem aqui...</string>
+    <string name="NoMessages">Ainda não há mensagens aqui...</string>
     <string name="ViewPhoto">Ver Foto</string>
     <string name="ViewLocation">Ver Localização</string>
     <string name="ViewVideo">Tocar Vídeo</string>
@@ -106,11 +106,11 @@
     <string name="AddToContacts">ADICIONAR AOS CONTATOS</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para uma conversa secreta.</string>
     <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para uma conversa secreta.</string>
-    <string name="EncryptedDescriptionTitle">Conversas secretas:</string>
-    <string name="EncryptedDescription1">Utilizam criptografia ponta a ponta</string>
-    <string name="EncryptedDescription2">Não deixam rasto em nossos servidores</string>
-    <string name="EncryptedDescription3">Têm temporizador para a autodestruição das mensagens</string>
-    <string name="EncryptedDescription4">Não permitem o reencaminhamento</string>
+    <string name="EncryptedDescriptionTitle">Diferenças dos Chats Secretos:</string>
+    <string name="EncryptedDescription1">Criptografia de ponta-a-ponta</string>
+    <string name="EncryptedDescription2">Sem rastros nos servidores</string>
+    <string name="EncryptedDescription3">Timer de autodestruição</string>
+    <string name="EncryptedDescription4">Encaminhamento desativado</string>
     <string name="YouWereKicked">Você foi removido deste grupo</string>
     <string name="YouLeft">Você saiu deste grupo</string>
     <string name="DeleteThisGroup">Apagar este grupo</string>
@@ -139,7 +139,7 @@
     <string name="NotificationMessagePhoto">%1$s te enviou uma foto</string>
     <string name="NotificationMessageVideo">%1$s te enviou um vídeo</string>
     <string name="NotificationMessageContact">%1$s compartilhou um contato com você</string>
-    <string name="NotificationMessageMap">%1$s mandou uma localização</string>
+    <string name="NotificationMessageMap">%1$s enviou uma localização</string>
     <string name="NotificationMessageDocument">%1$s te enviou um documento</string>
     <string name="NotificationMessageAudio">%1$s te enviou um áudio</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
@@ -147,7 +147,7 @@
     <string name="NotificationMessageGroupPhoto">%1$s enviou uma foto para o grupo %2$s</string>
     <string name="NotificationMessageGroupVideo">%1$s enviou um vídeo para o grupo %2$s</string>
     <string name="NotificationMessageGroupContact">%1$s compartilhou um contato para o grupo %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s mandou uma localização para o grupo %2$s</string>
+    <string name="NotificationMessageGroupMap">%1$s enviou uma localização para o grupo %2$s</string>
     <string name="NotificationMessageGroupDocument">%1$s enviou um documento para o grupo %2$s</string>
     <string name="NotificationMessageGroupAudio">%1$s enviou um áudio para o grupo %2$s</string>
     <string name="NotificationInvitedToGroup">%1$s convidou você para o grupo %2$s</string>
@@ -158,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s removeu você do grupo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s saiu do grupo %2$s</string>
     <string name="NotificationContactJoined">%1$s entrou para o Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um login na sua conta de um novo dispositivo %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\n\nSe não foi você, você pode ir para Configurações - Terminar todas as sessões.\n\nAtenciosamente,\nTime do Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos um login na sua conta de um novo dispositivo %2$s\n\nDispositivo: %3$s\nLocalização: %4$s\nSe não foi você, você pode ir em Configurações - Terminar todas as sessões.\n\nAtenciosamente,\nTime do Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
     <string name="Reply">Responder</string>
 
@@ -172,7 +172,7 @@
     <string name="Online">online</string>
     <string name="Offline">offline</string>
     <string name="LastSeen">visto pela última vez</string>
-    <string name="LastSeenDate">visto pela última vez em</string>
+    <string name="LastSeenDate">visto pela última vez</string>
     <string name="InviteFriends">Convidar Amigos</string>
 
     <!--group create view-->
@@ -246,7 +246,7 @@
     <string name="UndoAllCustom">Desfazer todas as configurações de notificação para todos os seus contatos e grupos</string>
     <string name="NotificationsAndSounds">Notificações e Sons</string>
     <string name="BlockedUsers">Usuários bloqueados</string>
-    <string name="SaveIncomingPhotos">Salvar fotos que chegam</string>
+    <string name="SaveIncomingPhotos">Salvar fotos recebidas</string>
     <string name="LogOut">Sair</string>
     <string name="YourFirstNameAndLastName">SEU NOME E SOBRENOME</string>
     <string name="NoSound">Sem som</string>
@@ -260,7 +260,7 @@
     <string name="ContactJoined">Contato entrou para o Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor compreenda que o Telegram é feito por voluntários. Tentamos responder o mais rápido possível, mas pode demorar um pouco. <![CDATA[<br><br>]]>Por favor acesse o <![CDATA[<a href="http://telegram.org/faq#general">FAQ do Telegram</a>]]>: temos respostas para algumas questões, assim como dicas importantes à <![CDATA[<a href="http://telegram.org/faq#troubleshooting">resolução de problemas</a>]]>.</string>
+    <string name="AskAQuestionInfo">Por favor compreenda que o Suporte do Telegram é feito por voluntários. Tentamos responder o mais rápido possível, mas pode demorar um pouco. <![CDATA[<br><br>]]>Por favor acesse o <![CDATA[<a href=\"http://telegram.org/faq#general\">FAQ do Telegram</a>]]>: temos respostas para algumas questões, assim como dicas importantes à <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">resolução de problemas</a>]]>.</string>
     <string name="AskButton">Pergunte a um voluntário</string>
     <string name="TelegramFaq">FAQ do Telegram</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
@@ -269,18 +269,18 @@
     <string name="Enabled">Ativado</string>
     <string name="Disabled">Desativado</string>
     <string name="NotificationsService">Serviço de Notificações</string>
-    <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play é o suficiente para você, você pode desativar as Notificações de Serviço. No entanto, recomendamos que você deixá-lo habilitado para manter o aplicativo em execução em segundo plano e receber notificações instantâneas.</string>
+    <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play for suficiente para você, você pode desativar o \"Serviço de Notificações\". Porém, recomendamos deixá-lo ativo para manter o aplicativo executando em segundo plano e receber notificações instantaneamente.</string>
     <string name="SortBy">Ordenar Por</string>
     <string name="ImportContacts">Importar Contatos</string>
     <string name="WiFiOnly">Apenas por WiFi</string>
     <string name="SortFirstName">Primeiro nome</string>
     <string name="SortLastName">Sobrenome</string>
     <string name="LedColor">Cor do LED</string>
-    <string name="PopupNotification">Notificações Popup</string>
-    <string name="NoPopup">Sem popup</string>
+    <string name="PopupNotification">Notificações Pop-up</string>
+    <string name="NoPopup">Sem pop-up</string>
     <string name="OnlyWhenScreenOn">Somente com a tela ligada</string>
     <string name="OnlyWhenScreenOff">Somente com a tela desligada</string>
-    <string name="AlwaysShowPopup">Sempre mostrar popup</string>
+    <string name="AlwaysShowPopup">Sempre mostrar pop-up</string>
     <string name="BadgeNumber">Contador de medalhas</string>
     <string name="Short">Curta</string>
     <string name="Long">Longa</string>
@@ -289,7 +289,7 @@
     <string name="AutomaticMediaDownload">DOWNLOAD AUTOMÁTICO DE MÍDIA</string>
     <string name="WhenUsingMobileData">Ao usar dados móveis</string>
     <string name="WhenConnectedOnWiFi">Quando conectado em Wi-Fi</string>
-    <string name="WhenRoaming">Em roaming</string>
+    <string name="WhenRoaming">Quando em roaming</string>
     <string name="NoMediaAutoDownload">Sem mídia</string>
 
     <!--media view-->
@@ -380,11 +380,11 @@
     <string name="Loading">Carregando...</string>
     <string name="NoPlayerInstalled">Você não possui um reprodutor de vídeo, instale um para continuar</string>
     <string name="NoMailInstalled">Por favor, envie um email para sms@telegram.org e conte-nos sobre seu problema.</string>
-    <string name="NoHandleAppInstalled">Você não possui uma aplicação que suporte o tipo de arquivo \'%1$s\', por favor instale uma e continue</string>
+    <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
     <string name="AddContactQ">Adicionar contato?</string>
-    <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero das últimas mensagens para encaminhar:</string>
+    <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero de últimas mensagens para encaminhar:</string>
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
     <string name="DeleteChatQuestion">Apagar esta conversa?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
@@ -392,7 +392,7 @@
     <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
     <string name="AreYouSureDeleteAndExit">Você tem certeza que deseja deletar e sair do grupo?</string>
     <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja deletar esta conversa?</string>
-    <string name="AreYouSureShareMyContactInfo">Você tem certesa que deseja compartilhar suas informações de contato?</string>
+    <string name="AreYouSureShareMyContactInfo">Você tem certeza que deseja compartilhar suas informações de contato?</string>
     <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
     <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
     <string name="AreYouSureDeleteContact">Você tem certeza que deseja deletar este contato?</string>
@@ -407,13 +407,13 @@
     <string name="Page5Title">Poderoso</string>
     <string name="Page6Title">Baseado na nuvem</string>
     <string name="Page7Title">Privado</string>
-    <string name="Page1Message">Bem-vindo à era das mensagens rápidas e seguras</string>
+    <string name="Page1Message">Bem-vindo à era das mensagens<![CDATA[<br/>]]> rápidas e seguras</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> envia mensagens mais rapidamente do que qualquer outro aplicativo</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> será gratuito para sempre. Sem propaganda. Sem taxa de assinatura</string>
+    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> será gratuito para sempre. Sem propagandas. Sem mensalidades</string>
     <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantém suas mensagens seguras contra ataques de hackers</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> não tem limites para o tamanho de suas mídias e conversas</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> permite que você acesse suas mensagens a partir de vários dispositivos</string>
-    <string name="Page7Message">As mensagens do <![CDATA[<b>Telegram</b>]]> são fortemente criptografadas<![CDATA[<br/>]]>e podem se autodestruir</string>
+    <string name="Page7Message">As mensagens do <![CDATA[<b>Telegram</b>]]> são fortemente criptografadase podem se autodestruir</string>
     <string name="StartMessaging">Comece a conversar</string>
 
     <!--plurals-->
@@ -435,7 +435,7 @@
     <string name="NewMessages_few">%1$d novas mensagens</string>
     <string name="NewMessages_many">%1$d novas mensagens</string>
     <string name="NewMessages_other">%1$d novas mensagens</string>
-    <string name="messages_zero">sem mensagem</string>
+    <string name="messages_zero">sem mensagens</string>
     <string name="messages_one">%1$d mensagem</string>
     <string name="messages_two">%1$d mensagens</string>
     <string name="messages_few">%1$d mensagens</string>
diff --git a/TMessagesProj/src/main/res/values-sw600dp/values.xml b/TMessagesProj/src/main/res/values-sw600dp/values.xml
new file mode 100644
index 000000000..d3a0e92c9
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-sw600dp/values.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <bool name="isTablet">true</bool>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-sw720dp/values.xml b/TMessagesProj/src/main/res/values-sw720dp/values.xml
new file mode 100644
index 000000000..d3a0e92c9
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-sw720dp/values.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <bool name="isTablet">true</bool>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/values.xml b/TMessagesProj/src/main/res/values/values.xml
new file mode 100644
index 000000000..f855de6a2
--- /dev/null
+++ b/TMessagesProj/src/main/res/values/values.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <bool name="isTablet">false</bool>
+</resources>
\ No newline at end of file
