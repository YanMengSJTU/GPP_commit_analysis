diff --git a/TMessagesProj/jni/tgnet/Connection.cpp b/TMessagesProj/jni/tgnet/Connection.cpp
index 5c22e08e8..6b1b5a4fa 100644
--- a/TMessagesProj/jni/tgnet/Connection.cpp
+++ b/TMessagesProj/jni/tgnet/Connection.cpp
@@ -117,6 +117,9 @@ void Connection::onReceivedData(NativeByteBuffer *buffer) {
         buffer->rewind();
 
         uint32_t currentPacketLength = buffer->readUint32(nullptr)-12;
+        //TODO must delete
+        //if(currentPacketLength>4000)
+            //return;
         uint32_t sequenceFromServer = buffer->readUint32(nullptr);
 
 
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 8fed8b016..60970fa3f 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -712,9 +712,9 @@ void ConnectionsManager::onConnectionDataReceived(Connection *connection, Native
             return;
         }
 
-//        if (connection->isMessageIdProcessed(messageId)) {
-//            return;
-//        }
+        if (connection->isMessageIdProcessed(messageId)) {
+            return;
+        }
 
         uint32_t messageLength = data->readUint32(&error);
         if (error) {
@@ -752,7 +752,9 @@ void ConnectionsManager::onConnectionDataReceived(Connection *connection, Native
     } else {
         if (length < 24 + 32 || (length - 24) % 16 != 0 || !datacenter->decryptServerResponse(keyId, data->bytes() + mark + 8, data->bytes() + mark + 24, length - 24)) {
             DEBUG_E("connection(%p) unable to decrypt server response", connection);
+            //TODO undo comment
             connection->reconnect();
+            //connection->closeSocket(0);
             return;
         }
         data->position(mark + 24);
@@ -770,7 +772,7 @@ void ConnectionsManager::onConnectionDataReceived(Connection *connection, Native
         int64_t messageId = data->readInt64(&error);
         int32_t messageSeqNo = data->readInt32(&error);
         uint32_t messageLength = data->readUint32(&error);
-
+        //TODO undo comment
         if (connection->isMessageIdProcessed(messageId)) {
             doNotProcess = true;
         }
diff --git a/TMessagesProj/jni/tgnet/Datacenter.cpp b/TMessagesProj/jni/tgnet/Datacenter.cpp
index ac3a9da9c..647551dc3 100644
--- a/TMessagesProj/jni/tgnet/Datacenter.cpp
+++ b/TMessagesProj/jni/tgnet/Datacenter.cpp
@@ -1436,8 +1436,8 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
             beginHandshake(false);
             return;
         }
-
-        sendAckRequest(messageId);
+        //TODO undo comment!
+        //sendAckRequest(messageId);
 
         uint32_t authKeyAuxHashLength = authNewNonce->length + SHA_DIGEST_LENGTH + 1;
         NativeByteBuffer *authKeyAuxHashBuffer = BuffersStorage::getInstance().getFreeBuffer(authKeyAuxHashLength + SHA_DIGEST_LENGTH);
@@ -1448,7 +1448,7 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
             authKeyAuxHashBuffer->writeByte(1);
             SHA1(authKeyAuxHashBuffer->bytes(), authKeyAuxHashLength - 12, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength);
             //TODO remove false condition
-            if (false && memcmp(result->new_nonce_hash1->bytes, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength + SHA_DIGEST_LENGTH - 16, 16)) {
+            if (memcmp(result->new_nonce_hash1->bytes, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength + SHA_DIGEST_LENGTH - 16, 16)) {
                 DEBUG_E("dc%u handshake: invalid DH answer nonce hash 1", datacenterId);
                 authKeyAuxHashBuffer->reuse();
                 beginHandshake(false);
