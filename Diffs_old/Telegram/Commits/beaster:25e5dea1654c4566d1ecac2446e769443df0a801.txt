diff --git a/.gitignore b/.gitignore
index 1f4151cd4..9fa706ca9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,5 @@ local.properties
 gradle.properties
 
 TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+
+TMessagesProj/libs/com.yotadevices.yotaphone2.sdk.v2.jar
\ No newline at end of file
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 5fbedf976..8a1cdd2f0 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -18,6 +18,8 @@ dependencies {
     compile 'net.hockeyapp.android:HockeySDK:3.5.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
     compile 'com.android.support:recyclerview-v7:+'
+    compile fileTree(dir: 'libs', include: ['*.jar'], excludes: ['com.yotadevices.yotaphone2.sdk.v2.jar'])
+    provided files('libs/com.yotadevices.yotaphone2.sdk.v2.jar')
 }
 
 android {
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 5ca90c91e..0eba33363 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -39,6 +39,7 @@
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
+    <uses-permission android:name="com.yotadevices.framework.permission.ACCESS_BACKSCREEN" />
 
     <application
         android:name=".ApplicationLoader"
@@ -122,6 +123,7 @@
             android:theme="@style/Theme.TMessages.PopupNotification"
             android:windowSoftInputMode="adjustResize|stateHidden">
         </activity>
+        <activity android:name="org.telegram.bsui.SettingsActivity"></activity>
 
         <receiver android:name="org.telegram.android.SmsListener">
             <intent-filter>
@@ -152,6 +154,32 @@
         <service android:name="org.telegram.android.NotificationDelay" android:exported="false"/>
         <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
 
+        <service android:name="org.telegram.bsui.BSChatActivity" android:exported="false"/>
+        <service android:name="org.telegram.bsui.BSMessagesActivity" android:exported="false"/>
+        <service android:name="org.telegram.bsui.OtherFlipBSActivity" android:exported="false" />
+        <service android:name="org.telegram.bsui.BSContactsActivity" android:exported="false"/>
+        <service android:name="org.telegram.bsui.BSSecretChatContactsActivity" android:exported="false"/>
+        <service android:name="org.telegram.bsui.BSGroupCreateActivity" android:exported="false"/>
+        <service android:name="org.telegram.bsui.BSGroupCreateFinalActivity" android:exported="false"/>
+
+        <!-- Telegram Widget -->
+        <receiver
+            android:name="org.telegram.bsui.widget.BSTelegramWidgetMedium"
+            android:label="@string/AppName" >
+            <intent-filter>
+                <action android:name="com.yotadevices.yotaphone.action.APPWIDGET_VISIBILITY_CHANGED" />
+                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
+                <action android:name="android.appwidget.action.APPWIDGET_DELETE" />
+                <action android:name="android.provider.Telephony.SMS_RECEIVED" />
+            </intent-filter>
+            <meta-data
+                android:name="android.appwidget.provider"
+                android:resource="@xml/dpi_test_widget_info" />
+            <meta-data
+                android:name="com.yotadevices.yotaphone.bs_provider"
+                android:resource="@xml/bs_widget_info" />
+        </receiver>
+
         <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
             <intent-filter>
                 <action android:name="org.telegram.start" />
@@ -162,6 +190,7 @@
         <receiver android:name="org.telegram.android.WearReplyReceiver" android:enabled="true"/>
 
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
+        <uses-library android:name="com.yotadevices.yotaphone2.sdk.v2" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H" android:value="598dp" />
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 4455445f2..5454a797d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -57,7 +57,9 @@
 
     public static int statusBarHeight = 0;
     public static float density = 1;
+    public static float bsDensity = 1.6f;
     public static Point displaySize = new Point();
+    public static Point bsDisplaySize = new Point();
     public static Integer photoSize = null;
     private static Boolean isTablet = null;
 
@@ -218,6 +220,10 @@ public static int dp(float value) {
         return (int)Math.ceil(density * value);
     }
 
+    public static int bsDp(float value) {
+        return (int)Math.ceil(bsDensity * value);
+    }
+
     public static float dpf2(float value) {
         return density * value;
     }
@@ -233,6 +239,7 @@ public static void checkDisplaySize() {
                     } else {
                         display.getSize(displaySize);
                     }
+                    bsDisplaySize.set(500, 800);
                     FileLog.e("tmessages", "display size = " + displaySize.x + " " + displaySize.y);
                 }
             }
@@ -450,6 +457,15 @@ public static int getCurrentActionBarHeight() {
             return dp(56);
         }
     }
+    public static int getBSCurrentActionBarHeight() {
+        if (isTablet()) {
+            return bsDp(64);
+        } else if (ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            return bsDp(48);
+        } else {
+            return bsDp(56);
+        }
+    }
 
     public static Point getRealScreenSize() {
         Point size = new Point();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 1c6c0dd48..0b25bb4c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -36,6 +36,7 @@
     public static final int MESSAGE_SEND_STATE_SENDING = 1;
     public static final int MESSAGE_SEND_STATE_SENT = 0;
     public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
+    public  AbstractMap<Integer, TLRPC.User> originalUser ;
 
     public TLRPC.Message messageOwner;
     public CharSequence messageText;
@@ -60,19 +61,17 @@
         public int charactersOffset = 0;
     }
 
+    protected TextPaint getTextPaint() {
+        return textPaint;
+    }
+
     private static final int LINES_PER_BLOCK = 10;
 
     public ArrayList<TextLayoutBlock> textLayoutBlocks;
 
     public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, boolean generateLayout) {
-        if (textPaint == null) {
-            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            textPaint.setColor(0xff000000);
-            textPaint.linkColor = 0xff316f9f;
-        }
-
-        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
-
+        originalUser = users;
+        initTextPaint();
         messageOwner = message;
 
         if (message instanceof TLRPC.TL_messageService) {
@@ -288,7 +287,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         } else {
             messageText = message.message;
         }
-        messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+        messageText = Emoji.replaceEmoji(messageText, getTextPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
 
         if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded) {
             if (message.media == null || message.media instanceof TLRPC.TL_messageMediaEmpty) {
@@ -358,6 +357,16 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         generateThumbs(false);
     }
 
+    protected void initTextPaint() {
+        if (textPaint == null) {
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(0xff000000);
+            textPaint.linkColor = 0xff316f9f;
+        }
+
+        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
+    }
+
     public void generateThumbs(boolean update) {
         if (messageOwner instanceof TLRPC.TL_messageService) {
             if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
@@ -521,11 +530,12 @@ private void generateLayout() {
 
         textLayoutBlocks = new ArrayList<>();
 
-        if (messageText instanceof Spannable && containsUrls(messageText)) {
-            if (messageText.length() < 100) {
-                Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
+        if (messageText instanceof Spannable && containsUrls(messageOwner.message)) {
+            if (messageOwner.message.length() < 100) {
+                clickify(messageText, Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
+
             } else {
-                Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS);
+                clickify(messageText, Linkify.WEB_URLS);
             }
         }
 
@@ -547,7 +557,7 @@ private void generateLayout() {
         StaticLayout textLayout = null;
 
         try {
-            textLayout = new StaticLayout(messageText, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            textLayout = new StaticLayout(messageText, getTextPaint(), maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
             return;
@@ -578,7 +588,7 @@ private void generateLayout() {
                 block.charactersOffset = startCharacter;
                 try {
                     CharSequence str = messageText.subSequence(startCharacter, endCharacter);
-                    block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    block.textLayout = new StaticLayout(str, getTextPaint(), maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     block.textYOffset = textLayout.getLineTop(linesOffset);
                     if (a != 0) {
                         blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
@@ -683,6 +693,22 @@ private void generateLayout() {
         }
     }
 
+    protected void clickify(CharSequence messageText, int i) {
+        Linkify.addLinks((Spannable) messageText, i);
+    }
+
+    protected int dp(float value) {
+        return AndroidUtilities.dp(value);
+    }
+
+    protected int getDisplayY() {
+        return AndroidUtilities.displaySize.y;
+    }
+
+    protected int getDisplayX() {
+        return AndroidUtilities.displaySize.x;
+    }
+
     public boolean isOut() {
         return (messageOwner.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 6e045c321..b9c489aae 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -83,6 +83,7 @@
     public static final int audioDidSent = totalEvents++;
     public static final int audioDidStarted = totalEvents++;
     public static final int audioRouteChanged = totalEvents++;
+    public static final int appDidLogin = totalEvents++;
 
     final private HashMap<Integer, ArrayList<Object>> observers = new HashMap<>();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
index 6a1140245..dcbf449f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
@@ -1779,4 +1779,149 @@ public void onClick(DialogInterface dialog, int which) {
         });
         progressDialog.show();
     }
+
+    public void startSecretChatBS(final Context context, final TLRPC.User user) {
+        if (user == null) {
+            return;
+        }
+        //todo:add progess bur
+        startingSecretChat = true;
+        TLRPC.TL_messages_getDhConfig req = new TLRPC.TL_messages_getDhConfig();
+        req.random_length = 256;
+        req.version = MessagesStorage.lastSecretVersion;
+        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    TLRPC.messages_DhConfig res = (TLRPC.messages_DhConfig) response;
+                    if (response instanceof TLRPC.TL_messages_dhConfig) {
+                        if (!Utilities.isGoodPrime(res.p, res.g)) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    try {
+                                        if (!((Activity) context).isFinishing()) {
+
+                                        }
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            });
+                            return;
+                        }
+                        MessagesStorage.secretPBytes = res.p;
+                        MessagesStorage.secretG = res.g;
+                        MessagesStorage.lastSecretVersion = res.version;
+                        MessagesStorage.getInstance().saveSecretParams(MessagesStorage.lastSecretVersion, MessagesStorage.secretG, MessagesStorage.secretPBytes);
+                    }
+                    final byte[] salt = new byte[256];
+                    for (int a = 0; a < 256; a++) {
+                        salt[a] = (byte) ((byte) (Utilities.random.nextDouble() * 256) ^ res.random[a]);
+                    }
+
+                    BigInteger i_g_a = BigInteger.valueOf(MessagesStorage.secretG);
+                    i_g_a = i_g_a.modPow(new BigInteger(1, salt), new BigInteger(1, MessagesStorage.secretPBytes));
+                    byte[] g_a = i_g_a.toByteArray();
+                    if (g_a.length > 256) {
+                        byte[] correctedAuth = new byte[256];
+                        System.arraycopy(g_a, 1, correctedAuth, 0, 256);
+                        g_a = correctedAuth;
+                    }
+
+                    TLRPC.TL_messages_requestEncryption req2 = new TLRPC.TL_messages_requestEncryption();
+                    req2.g_a = g_a;
+                    req2.user_id = MessagesController.getInputUser(user);
+                    req2.random_id = Utilities.random.nextInt();
+                    ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
+                        @Override
+                        public void run(final TLObject response, TLRPC.TL_error error) {
+                            if (error == null) {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        startingSecretChat = false;
+
+                                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) response;
+                                        chat.user_id = chat.participant_id;
+                                        chat.seq_in = 0;
+                                        chat.seq_out = 1;
+                                        chat.a_or_b = salt;
+                                        MessagesController.getInstance().putEncryptedChat(chat, false);
+                                        TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
+                                        dialog.id = ((long) chat.id) << 32;
+                                        dialog.unread_count = 0;
+                                        dialog.top_message = 0;
+                                        dialog.last_message_date = ConnectionsManager.getInstance().getCurrentTime();
+                                        MessagesController.getInstance().dialogs_dict.put(dialog.id, dialog);
+                                        MessagesController.getInstance().dialogs.add(dialog);
+                                        Collections.sort(MessagesController.getInstance().dialogs, new Comparator<TLRPC.TL_dialog>() {
+                                            @Override
+                                            public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
+                                                if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
+                                                    return 0;
+                                                } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
+                                                    return 1;
+                                                } else {
+                                                    return -1;
+                                                }
+                                            }
+                                        });
+                                        MessagesStorage.getInstance().putEncryptedChat(chat, user, dialog);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatCreated, chat);
+                                        Utilities.stageQueue.postRunnable(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                if (!delayedEncryptedChatUpdates.isEmpty()) {
+                                                    MessagesController.getInstance().processUpdateArray(delayedEncryptedChatUpdates, null, null);
+                                                    delayedEncryptedChatUpdates.clear();
+                                                }
+                                            }
+                                        });
+                                    }
+                                });
+                            } else {
+                                delayedEncryptedChatUpdates.clear();
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        if (!((Activity) context).isFinishing()) {
+                                            startingSecretChat = false;
+                                            try {
+
+                                            } catch (Exception e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            AlertDialog.Builder builder = new AlertDialog.Builder(context);
+                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                            builder.setMessage(LocaleController.getString("CreateEncryptedChatError", R.string.CreateEncryptedChatError));
+                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                            builder.show().setCanceledOnTouchOutside(true);
+                                        }
+                                    }
+                                });
+                            }
+                        }
+                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                } else {
+                    delayedEncryptedChatUpdates.clear();
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            startingSecretChat = false;
+                            if (!((Activity) context).isFinishing()) {
+                                try {
+
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        }
+                    });
+                }
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBar.java b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBar.java
new file mode 100644
index 000000000..0e025432d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBar.java
@@ -0,0 +1,527 @@
+package org.telegram.bsui.ActionBar;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.yotadevices.sdk.Drawer;
+import com.yotadevices.sdk.utils.EinkUtils;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.MenuDrawable;
+
+/**
+ * Created by E1ektr0 on 10.01.2015.
+ */
+public class BSActionBar extends FrameLayout {
+
+    public void setActionBarMenuOnItemClick(ActionBarMenuOnItemClick listener) {
+        actionBarMenuOnItemClick = listener;
+    }
+
+    public static class ActionBarMenuOnItemClick {
+        public void onItemClick(int id) {
+
+        }
+
+        public boolean canOpenMenu() {
+            return true;
+        }
+    }
+
+    private FrameLayout titleFrameLayout;
+    private ImageView backButtonImageView;
+
+    public TextView getTitleTextView() {
+        return titleTextView;
+    }
+
+    private TextView titleTextView;
+    private TextView subTitleTextView;
+    private View actionModeTop;
+    private BSActionBarMenu menu;
+    private BSActionBarMenu actionMode;
+    private boolean occupyStatusBar = Build.VERSION.SDK_INT >= 21;
+
+    private boolean allowOverlayTitle = false;
+    private CharSequence lastTitle;
+    private boolean showingOverlayTitle;
+
+    protected boolean isSearchFieldVisible;
+    protected int itemsBackgroundResourceId;
+    private boolean isBackOverlayVisible;
+    public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
+    private int extraHeight;
+
+    public BSActionBar(Context context, AttributeSet attrs)
+    {
+        super(context, attrs);
+        Ini(context);
+    }
+
+    public BSActionBar(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs,defStyle);
+       Ini(context);
+    }
+
+    public BSActionBar(Context context) {
+        super(context);
+        Ini(context);
+    }
+
+    private void Ini(Context context) {
+        titleFrameLayout = new FrameLayout(context);
+        addView(titleFrameLayout);
+        LayoutParams layoutParams = (LayoutParams)titleFrameLayout.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.FILL_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        titleFrameLayout.setLayoutParams(layoutParams);
+        titleFrameLayout.setPadding(0, 0, AndroidUtilities.bsDp(4), 0);
+        titleFrameLayout.setEnabled(false);
+    }
+
+    private void positionBackImage(int height) {
+        if (backButtonImageView != null) {
+            LayoutParams layoutParams = (LayoutParams)backButtonImageView.getLayoutParams();
+            layoutParams.width = AndroidUtilities.bsDp(54);
+            layoutParams.height = height;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            backButtonImageView.setLayoutParams(layoutParams);
+        }
+    }
+
+    private void positionTitle(int width, int height) {
+        int offset = AndroidUtilities.bsDp(2);
+
+        int maxTextWidth = 0;
+
+        LayoutParams layoutParams = null;
+
+        if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
+            titleTextView.setTextSize(AndroidUtilities.bsDp(10));
+            layoutParams = (LayoutParams) titleTextView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            titleTextView.setLayoutParams(layoutParams);
+            titleTextView.measure(width, height);
+            maxTextWidth = titleTextView.getMeasuredWidth();
+        }
+        if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
+            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                subTitleTextView.setTextSize(14);
+            } else {
+                subTitleTextView.setTextSize(16);
+            }
+
+            layoutParams = (LayoutParams) subTitleTextView.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            subTitleTextView.setLayoutParams(layoutParams);
+            subTitleTextView.measure(width, height);
+            maxTextWidth = Math.max(maxTextWidth, subTitleTextView.getMeasuredWidth());
+        }
+
+        int x = 0;
+        if (backButtonImageView != null) {
+            if (AndroidUtilities.isTablet()) {
+                x = AndroidUtilities.bsDp(80);
+            } else {
+                x = AndroidUtilities.bsDp(72);
+            }
+        } else {
+            if (AndroidUtilities.isTablet()) {
+                x = AndroidUtilities.bsDp(26);
+            } else {
+                x = AndroidUtilities.bsDp(18);
+            }
+        }
+
+        if (menu != null) {
+            maxTextWidth = Math.min(maxTextWidth, width - menu.getMeasuredWidth() - AndroidUtilities.bsDp(16));
+        }
+
+        if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
+            layoutParams = (LayoutParams) titleTextView.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = titleTextView.getMeasuredHeight();
+            int y;
+            if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
+                y = (height / 2 - titleTextView.getMeasuredHeight()) / 2 + offset;
+            } else {
+                y = (height - titleTextView.getMeasuredHeight()) / 2 - AndroidUtilities.bsDp(1);
+            }
+            layoutParams.setMargins(x, y, 0, 0);
+            titleTextView.setLayoutParams(layoutParams);
+        }
+        if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
+            layoutParams = (LayoutParams) subTitleTextView.getLayoutParams();
+            layoutParams.width = LayoutParams.MATCH_PARENT;
+            layoutParams.height = subTitleTextView.getMeasuredHeight();
+            layoutParams.setMargins(x, height / 2 + (height / 2 - subTitleTextView.getMeasuredHeight()) / 2 - offset, 0, 0);
+            subTitleTextView.setLayoutParams(layoutParams);
+        }
+
+        MarginLayoutParams layoutParams1 = (MarginLayoutParams) titleFrameLayout.getLayoutParams();
+        layoutParams1.width = x + maxTextWidth + (isSearchFieldVisible ? 0 : AndroidUtilities.bsDp(6));
+        layoutParams1.topMargin = occupyStatusBar ? getStatusBarHeight() : 0;
+        titleFrameLayout.setLayoutParams(layoutParams1);
+    }
+
+    private int getStatusBarHeight() {
+        return 88;//AndroidUtilities.statusBarHeight;
+    }
+
+    public void positionMenu(int width, int height) {
+        if (menu == null) {
+            return;
+        }
+        LayoutParams layoutParams = (LayoutParams)menu.getLayoutParams();
+        layoutParams.width = isSearchFieldVisible ? LayoutParams.MATCH_PARENT : LayoutParams.WRAP_CONTENT;
+        layoutParams.height = height;
+        layoutParams.leftMargin = isSearchFieldVisible ? AndroidUtilities.bsDp(54) : 0;
+        layoutParams.topMargin = occupyStatusBar ? getStatusBarHeight() : 0;
+        menu.setLayoutParams(layoutParams);
+        menu.measure(width, height);
+    }
+
+    private void createBackButtonImage() {
+        if (backButtonImageView != null) {
+            return;
+        }
+        backButtonImageView = new ImageView(getContext());
+        titleFrameLayout.addView(backButtonImageView);
+        backButtonImageView.setScaleType(ImageView.ScaleType.CENTER);
+        backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        backButtonImageView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (isSearchFieldVisible) {
+                    closeSearchField();
+                    return;
+                }
+                if (actionBarMenuOnItemClick != null) {
+                    actionBarMenuOnItemClick.onItemClick(-1);
+                }
+            }
+        });
+    }
+
+    public void setBackButtonDrawable(Drawable drawable) {
+        if (backButtonImageView == null) {
+            createBackButtonImage();
+        }
+        backButtonImageView.setImageDrawable(drawable);
+    }
+
+    public void setBackButtonImage(int resource) {
+        if (backButtonImageView == null) {
+            createBackButtonImage();
+        }
+        backButtonImageView.setImageResource(resource);
+    }
+
+    private void createSubtitleTextView() {
+        if (subTitleTextView != null) {
+            return;
+        }
+        subTitleTextView = new TextView(getContext());
+        titleFrameLayout.addView(subTitleTextView);
+        subTitleTextView.setGravity(Gravity.LEFT);
+        subTitleTextView.setTextColor(0xffd7e8f7);
+        subTitleTextView.setSingleLine(true);
+        subTitleTextView.setLines(1);
+        subTitleTextView.setMaxLines(1);
+        subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
+    }
+
+    public void setSubtitle(CharSequence value) {
+        if (value != null && subTitleTextView == null) {
+            createSubtitleTextView();
+        }
+        if (subTitleTextView != null) {
+            subTitleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            subTitleTextView.setText(value);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+    }
+
+    public void setSubTitleIcon(int resourceId, Drawable drawable, int padding) {
+        if ((resourceId != 0 || drawable != null) && subTitleTextView == null) {
+            createSubtitleTextView();
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+        if (subTitleTextView != null) {
+            if (drawable != null) {
+                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
+            } else {
+                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
+            }
+            subTitleTextView.setCompoundDrawablePadding(padding);
+        }
+    }
+
+    private void createTitleTextView() {
+        if (titleTextView != null) {
+            return;
+        }
+        titleTextView = new TextView(getContext());
+        titleTextView.setGravity(Gravity.LEFT);
+        titleTextView.setSingleLine(true);
+        titleTextView.setLines(1);
+        titleTextView.setMaxLines(1);
+        titleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        titleFrameLayout.addView(titleTextView);
+        titleTextView.setTextColor(0xffffffff);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+    }
+
+    public void setTitleToCenter(CharSequence value){
+        if(value != null && titleTextView == null){
+            createTitleTextView();
+        }
+        if(titleTextView != null){
+            lastTitle = value;
+            titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            titleTextView.setText(value);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+            LayoutParams layoutParams = (LayoutParams) titleTextView.getLayoutParams();
+            layoutParams.gravity = Gravity.TOP | Gravity.CENTER;
+            titleTextView.setLayoutParams(layoutParams);
+        }
+    }
+
+    public void setTitle(CharSequence value) {
+        if (value != null && titleTextView == null) {
+            createTitleTextView();
+        }
+        if (titleTextView != null) {
+            lastTitle = value;
+            titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            titleTextView.setText(value);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+    }
+
+    public void setTitleIcon(int resourceId, int padding) {
+        if (resourceId != 0 && titleTextView == null) {
+            createTitleTextView();
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+        titleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
+        titleTextView.setCompoundDrawablePadding(padding);
+    }
+
+    public Drawable getSubTitleIcon() {
+        return subTitleTextView.getCompoundDrawables()[0];
+    }
+
+    public CharSequence getTitle() {
+        if (titleTextView == null) {
+            return null;
+        }
+        return titleTextView.getText();
+    }
+
+    public BSActionBarMenu createMenu() {
+        if (menu != null) {
+            return menu;
+        }
+        menu = new BSActionBarMenu(getContext(), this);
+        addView(menu);
+        LayoutParams layoutParams = (LayoutParams)menu.getLayoutParams();
+        layoutParams.height = LayoutParams.FILL_PARENT;
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.RIGHT;
+        menu.setLayoutParams(layoutParams);
+        return menu;
+    }
+
+    public void setCustomView(int resourceId) {
+        LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View view = li.inflate(resourceId, null);
+        addView(view);
+        LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
+        layoutParams.width = LayoutParams.FILL_PARENT;
+        layoutParams.height = LayoutParams.FILL_PARENT;
+        layoutParams.topMargin = occupyStatusBar ? getStatusBarHeight() : 0;
+        view.setLayoutParams(layoutParams);
+    }
+
+    public BSActionBarMenu createActionMode() {
+        if (actionMode != null) {
+            return actionMode;
+        }
+        actionMode = new BSActionBarMenu(getContext(), this);
+        actionMode.setBackgroundResource(R.drawable.editheader);
+        addView(actionMode);
+        actionMode.setPadding(0, occupyStatusBar ? getStatusBarHeight() : 0, 0, 0);
+        LayoutParams layoutParams = (LayoutParams)actionMode.getLayoutParams();
+        layoutParams.height = LayoutParams.FILL_PARENT;
+        layoutParams.width = LayoutParams.FILL_PARENT;
+        layoutParams.gravity = Gravity.RIGHT;
+        actionMode.setLayoutParams(layoutParams);
+        actionMode.setVisibility(GONE);
+
+        if (occupyStatusBar) {
+            actionModeTop = new View(getContext());
+            actionModeTop.setBackgroundColor(0x99000000);
+            addView(actionModeTop);
+            layoutParams = (LayoutParams)actionModeTop.getLayoutParams();
+            layoutParams.height = getStatusBarHeight();
+            layoutParams.width = LayoutParams.FILL_PARENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            actionModeTop.setLayoutParams(layoutParams);
+            actionModeTop.setVisibility(GONE);
+        }
+
+        return actionMode;
+    }
+
+    public void showActionMode() {
+        if (actionMode == null) {
+            return;
+        }
+        actionMode.setVisibility(VISIBLE);
+        if (actionModeTop != null) {
+            actionModeTop.setVisibility(VISIBLE);
+        }
+        if (titleFrameLayout != null) {
+            titleFrameLayout.setVisibility(INVISIBLE);
+        }
+        if (menu != null) {
+            menu.setVisibility(INVISIBLE);
+        }
+    }
+
+    public void hideActionMode() {
+        if (actionMode == null) {
+            return;
+        }
+        actionMode.setVisibility(GONE);
+        if (actionModeTop != null) {
+            actionModeTop.setVisibility(GONE);
+        }
+        if (titleFrameLayout != null) {
+            titleFrameLayout.setVisibility(VISIBLE);
+        }
+        if (menu != null) {
+            menu.setVisibility(VISIBLE);
+        }
+    }
+
+    public boolean isActionModeShowed() {
+        return actionMode != null && actionMode.getVisibility() == VISIBLE;
+    }
+
+    protected void onSearchFieldVisibilityChanged(boolean visible) {
+        isSearchFieldVisible = visible;
+        if (titleTextView != null) {
+            titleTextView.setVisibility(visible ? GONE : VISIBLE);
+        }
+        if (subTitleTextView != null) {
+            subTitleTextView.setVisibility(visible ? GONE : VISIBLE);
+        }
+        Drawable drawable = backButtonImageView.getDrawable();
+        if (drawable != null && drawable instanceof MenuDrawable) {
+            ((MenuDrawable)drawable).setRotation(visible ? 1 : 0, true);
+        }
+    }
+
+    public void closeSearchField() {
+        if (!isSearchFieldVisible || menu == null) {
+            return;
+        }
+        menu.closeSearchField();
+        EinkUtils.performSingleUpdate(this, Drawer.Waveform.WAVEFORM_GC_PARTIAL);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int actionBarHeight = AndroidUtilities.getBSCurrentActionBarHeight();
+        positionBackImage(actionBarHeight);
+        positionMenu(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
+        positionTitle(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
+        actionBarHeight += occupyStatusBar ? getStatusBarHeight() : 0;
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(actionBarHeight + extraHeight, MeasureSpec.EXACTLY));
+    }
+
+    public void onMenuButtonPressed() {
+        if (menu != null) {
+            menu.onMenuButtonPressed();
+        }
+    }
+
+    protected void onPause() {
+        if (menu != null) {
+            menu.hideAllPopupMenus();
+        }
+    }
+
+    public void setAllowOverlayTitle(boolean value) {
+        allowOverlayTitle = value;
+    }
+
+    public void setTitleOverlayText(String text) {
+        if (!allowOverlayTitle) {
+            return;
+        }
+        showingOverlayTitle = text != null;
+        CharSequence textToSet = text != null ? text : lastTitle;
+        if (textToSet != null && titleTextView == null) {
+            createTitleTextView();
+        }
+        if (titleTextView != null) {
+            titleTextView.setVisibility(textToSet != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            titleTextView.setText(textToSet);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+        EinkUtils.performSingleUpdate(this, Drawer.Waveform.WAVEFORM_GC_PARTIAL);
+    }
+
+    public void setExtraHeight(int value, boolean layout) {
+        extraHeight = value;
+        if (layout) {
+            requestLayout();
+        }
+    }
+
+    public int getExtraHeight() {
+        return extraHeight;
+    }
+
+    public void setOccupyStatusBar(boolean value) {
+        occupyStatusBar = value;
+    }
+
+    public boolean getOccupyStatusBar() {
+        return occupyStatusBar;
+    }
+
+    public void setItemsBackground(int resourceId) {
+        itemsBackgroundResourceId = resourceId;
+        if (backButtonImageView != null) {
+            backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        super.onTouchEvent(event);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenu.java
new file mode 100644
index 000000000..ee41b42f6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenu.java
@@ -0,0 +1,160 @@
+package org.telegram.bsui.ActionBar;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+
+/**
+ * Created by E1ektr0 on 10.01.2015.
+ */
+public class BSActionBarMenu extends LinearLayout {
+
+    protected BSActionBar parentActionBar;
+
+    public BSActionBarMenu(Context context, BSActionBar layer) {
+        super(context);
+        setOrientation(LinearLayout.HORIZONTAL);
+        parentActionBar = layer;
+    }
+
+    public BSActionBarMenu(Context context) {
+        super(context);
+    }
+
+    public BSActionBarMenu(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public BSActionBarMenu(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    public View addItemResource(int id, int resourceId) {
+        LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View view = li.inflate(resourceId, null);
+        view.setTag(id);
+        addView(view);
+        LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
+        layoutParams.height = FrameLayout.LayoutParams.FILL_PARENT;
+        view.setBackgroundResource(parentActionBar.itemsBackgroundResourceId);
+        view.setLayoutParams(layoutParams);
+        view.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onItemClick((Integer)view.getTag());
+            }
+        });
+        return view;
+    }
+
+    public BSActionBarMenuItem addItem(int id, Drawable drawable) {
+        return addItem(id, 0, parentActionBar.itemsBackgroundResourceId, drawable, AndroidUtilities.bsDp(48));
+    }
+
+    public BSActionBarMenuItem addItem(int id, int icon) {
+        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId);
+    }
+
+    public BSActionBarMenuItem addItem(int id, int icon, int backgroundResource) {
+        return addItem(id, icon, backgroundResource, null, AndroidUtilities.bsDp(48));
+    }
+
+    public BSActionBarMenuItem addItemWithWidth(int id, int icon, int width) {
+        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId, null, width);
+    }
+
+    public BSActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawable drawable, int width) {
+        BSActionBarMenuItem menuItem = new BSActionBarMenuItem(getContext(), this, backgroundResource);
+        menuItem.setTag(id);
+        menuItem.setScaleType(ImageView.ScaleType.CENTER);
+        if (drawable != null) {
+            menuItem.setImageDrawable(drawable);
+        } else {
+            menuItem.setImageResource(icon);
+        }
+        addView(menuItem);
+        LayoutParams layoutParams = (LayoutParams)menuItem.getLayoutParams();
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.width = width;
+        menuItem.setLayoutParams(layoutParams);
+        menuItem.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                BSActionBarMenuItem item = (BSActionBarMenuItem)view;
+                if (item.hasSubMenu()) {
+                    if (parentActionBar.actionBarMenuOnItemClick.canOpenMenu()) {
+                        item.toggleSubMenu();
+                    }
+                } else if (item.isSearchField()) {
+                    parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
+                } else {
+                    onItemClick((Integer)view.getTag());
+                }
+            }
+        });
+        return menuItem;
+    }
+
+    public void hideAllPopupMenus() {
+        for (int a = 0; a < getChildCount(); a++) {
+            View view = getChildAt(a);
+            if (view instanceof ActionBarMenuItem) {
+                ((ActionBarMenuItem)view).closeSubMenu();
+            }
+        }
+    }
+
+    public void onItemClick(int id) {
+        if (parentActionBar.actionBarMenuOnItemClick != null) {
+            parentActionBar.actionBarMenuOnItemClick.onItemClick(id);
+        }
+    }
+
+    public void clearItems() {
+        for (int a = 0; a < getChildCount(); a++) {
+            View view = getChildAt(a);
+            removeView(view);
+        }
+    }
+
+    public void onMenuButtonPressed() {
+        for (int a = 0; a < getChildCount(); a++) {
+            View view = getChildAt(a);
+            if (view instanceof ActionBarMenuItem) {
+                ActionBarMenuItem item = (ActionBarMenuItem)view;
+                if (item.hasSubMenu() && item.getVisibility() == VISIBLE) {
+                    item.toggleSubMenu();
+                    break;
+                }
+            }
+        }
+    }
+
+    public void closeSearchField() {
+        for (int a = 0; a < getChildCount(); a++) {
+            View view = getChildAt(a);
+            if (view instanceof BSActionBarMenuItem) {
+                BSActionBarMenuItem item = (BSActionBarMenuItem)view;
+                if (item.isSearchField()) {
+                    parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
+                }
+            }
+        }
+    }
+
+    public BSActionBarMenuItem getItem(int id) {
+        View v = findViewWithTag(id);
+        if (v instanceof BSActionBarMenuItem) {
+            return (BSActionBarMenuItem)v;
+        }
+        return null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenuItem.java
new file mode 100644
index 000000000..ef68cac82
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/ActionBar/BSActionBarMenuItem.java
@@ -0,0 +1,451 @@
+package org.telegram.bsui.ActionBar;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.Build;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.ActionMode;
+import android.view.ContextMenu;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
+
+import java.lang.reflect.Field;
+
+/**
+ * Created by E1ektr0 on 10.01.2015.
+ */
+public class BSActionBarMenuItem extends ImageView {
+
+    public static interface ActionBarMenuItemSearchListener {
+        public abstract void onSearchExpand();
+        public abstract void onSearchCollapse();
+        public abstract void onTextChanged(EditText editText);
+    }
+
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
+    private BSActionBarMenu parentMenu;
+    private ActionBarPopupWindow popupWindow;
+    private EditText searchField;
+    private boolean isSearchField = false;
+    private ActionBarMenuItemSearchListener listener;
+    private Rect rect;
+    private int[] location;
+    private View selectedMenuView;
+    private Runnable showMenuRunnable;
+    private boolean showFromBottom;
+    private int menuHeight = AndroidUtilities.bsDp(16);
+    private boolean needOffset = Build.VERSION.SDK_INT >= 21;
+
+    public BSActionBarMenuItem(Context context, BSActionBarMenu menu, int background) {
+        super(context);
+        setBackgroundResource(background);
+        parentMenu = menu;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+            if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
+                showMenuRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        if (getParent() != null) {
+                            getParent().requestDisallowInterceptTouchEvent(true);
+                        }
+                        toggleSubMenu();
+                    }
+                };
+                AndroidUtilities.runOnUIThread(showMenuRunnable, 200);
+            }
+        } else if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+            if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
+                if (event.getY() > getHeight()) {
+                    if (getParent() != null) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    toggleSubMenu();
+                    return true;
+                }
+            } else if (popupWindow != null && popupWindow.isShowing()) {
+                getLocationOnScreen(location);
+                float x = event.getX() + location[0];
+                float y = event.getY() + location[1];
+                popupLayout.getLocationOnScreen(location);
+                x -= location[0];
+                y -= location[1];
+                selectedMenuView = null;
+                for (int a = 0; a < popupLayout.getChildCount(); a++) {
+                    View child = popupLayout.getChildAt(a);
+                    child.getHitRect(rect);
+                    if ((Integer)child.getTag() < 100) {
+                        if (!rect.contains((int)x, (int)y)) {
+                            child.setPressed(false);
+                            child.setSelected(false);
+                            if (Build.VERSION.SDK_INT >= 21) {
+                                child.getBackground().setVisible(false, false);
+                            }
+                        } else {
+                            child.setPressed(true);
+                            child.setSelected(true);
+                            if (Build.VERSION.SDK_INT >= 21) {
+                                child.getBackground().setVisible(true, false);
+                                child.drawableHotspotChanged(x, y - child.getTop());
+                            }
+                            selectedMenuView = child;
+                        }
+                    }
+                }
+            }
+        } else if (popupWindow != null && popupWindow.isShowing() && event.getActionMasked() == MotionEvent.ACTION_UP) {
+            if (selectedMenuView != null) {
+                selectedMenuView.setSelected(false);
+                parentMenu.onItemClick((Integer) selectedMenuView.getTag());
+            }
+            popupWindow.dismiss();
+        } else {
+            if (selectedMenuView != null) {
+                selectedMenuView.setSelected(false);
+                selectedMenuView = null;
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void setShowFromBottom(boolean value) {
+        showFromBottom = value;
+    }
+
+    public void setNeedOffset(boolean value) {
+        needOffset = Build.VERSION.SDK_INT >= 21 && value;
+    }
+
+    public TextView addSubItem(int id, String text, int icon) {
+        if (popupLayout == null) {
+            rect = new Rect();
+            location = new int[2];
+            popupLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
+            popupLayout.setOrientation(LinearLayout.VERTICAL);
+            popupLayout.setBackgroundResource(R.drawable.popup_fixed);
+            popupLayout.setOnTouchListener(new OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+                        if (popupWindow != null && popupWindow.isShowing()) {
+                            v.getHitRect(rect);
+                            if (!rect.contains((int)event.getX(), (int)event.getY())) {
+                                popupWindow.dismiss();
+                            }
+                        }
+                    }
+                    return false;
+                }
+            });
+            popupLayout.setDispatchKeyEventListener(new ActionBarPopupWindow.OnDispatchKeyEventListener() {
+                @Override
+                public void onDispatchKeyEvent(KeyEvent keyEvent) {
+                    if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && popupWindow != null && popupWindow.isShowing()) {
+                        popupWindow.dismiss();
+                    }
+                }
+            });
+        }
+        TextView textView = new TextView(getContext());
+        textView.setTextColor(0xff212121);
+        textView.setBackgroundResource(R.drawable.list_selector);
+        if (!LocaleController.isRTL) {
+            textView.setGravity(Gravity.CENTER_VERTICAL);
+        } else {
+            textView.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);
+        }
+        textView.setPadding(AndroidUtilities.bsDp(16), 0, AndroidUtilities.bsDp(16), 0);
+        textView.setTextSize(18);
+        textView.setMinWidth(AndroidUtilities.bsDp(196));
+        textView.setTag(id);
+        textView.setText(text);
+        if (icon != 0) {
+            textView.setCompoundDrawablePadding(AndroidUtilities.bsDp(12));
+            if (!LocaleController.isRTL) {
+                textView.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(icon), null, null, null);
+            } else {
+                textView.setCompoundDrawablesWithIntrinsicBounds(null, null, getResources().getDrawable(icon), null);
+            }
+        }
+        popupLayout.addView(textView);
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)textView.getLayoutParams();
+        if (LocaleController.isRTL) {
+            layoutParams.gravity = Gravity.RIGHT;
+        }
+        layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.bsDp(48);
+        textView.setLayoutParams(layoutParams);
+        textView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                parentMenu.onItemClick((Integer) view.getTag());
+                if (popupWindow != null && popupWindow.isShowing()) {
+                    popupWindow.dismiss();
+                }
+            }
+        });
+        menuHeight += layoutParams.height;
+        return textView;
+    }
+
+    public boolean hasSubMenu() {
+        return popupLayout != null;
+    }
+
+    public void toggleSubMenu() {
+        if (popupLayout == null) {
+            return;
+        }
+        if (showMenuRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(showMenuRunnable);
+            showMenuRunnable = null;
+        }
+        if (popupWindow != null && popupWindow.isShowing()) {
+            popupWindow.dismiss();
+            return;
+        }
+        if (popupWindow == null) {
+            popupWindow = new ActionBarPopupWindow(popupLayout, FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);
+            //popupWindow.setBackgroundDrawable(new BitmapDrawable());
+            popupWindow.setAnimationStyle(R.style.PopupAnimation);
+            popupWindow.setOutsideTouchable(true);
+            popupWindow.setClippingEnabled(true);
+            popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
+            popupWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED);
+            popupLayout.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.bsDp(1000), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.bsDp(1000), MeasureSpec.AT_MOST));
+            popupWindow.getContentView().setFocusableInTouchMode(true);
+            popupWindow.getContentView().setOnKeyListener(new OnKeyListener() {
+                @Override
+                public boolean onKey(View v, int keyCode, KeyEvent event) {
+                    if (keyCode ==  KeyEvent.KEYCODE_MENU && event.getRepeatCount() == 0 && event.getAction() == KeyEvent.ACTION_UP && popupWindow != null && popupWindow.isShowing()) {
+                        popupWindow.dismiss();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+        }
+        popupWindow.setFocusable(true);
+        if (popupLayout.getMeasuredWidth() == 0) {
+            if (showFromBottom) {
+                popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.bsDp(14), getOffsetY());
+                popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.bsDp(14), getOffsetY(), -1, -1);
+            } else {
+                popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY());
+                popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY(), -1, -1);
+            }
+        } else {
+            if (showFromBottom) {
+                popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.bsDp(14), getOffsetY());
+            } else {
+                popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY());
+            }
+        }
+    }
+
+    private int getOffsetY() {
+        if (showFromBottom) {
+            getLocationOnScreen(location);
+            int diff = location[1] - AndroidUtilities.statusBarHeight + getMeasuredHeight() - menuHeight;
+            int y = AndroidUtilities.bsDp(8) - menuHeight;
+            if (diff < 0) {
+                y -= diff;
+            }
+            return y - (needOffset ? AndroidUtilities.statusBarHeight : 0);
+        } else {
+            return -getMeasuredHeight() - (needOffset ? AndroidUtilities.statusBarHeight : 0);
+        }
+    }
+
+    public boolean toggleSearch() {
+        if (searchField == null) {
+            return false;
+        }
+        if (searchField.getVisibility() == VISIBLE) {
+            searchField.setVisibility(GONE);
+            setVisibility(VISIBLE);
+            AndroidUtilities.hideKeyboard(searchField);
+            if (listener != null) {
+                listener.onSearchCollapse();
+            }
+            return false;
+        } else {
+            searchField.setVisibility(VISIBLE);
+            setVisibility(GONE);
+            searchField.setText("");
+            searchField.requestFocus();
+            AndroidUtilities.showKeyboard(searchField);
+            if (listener != null) {
+                listener.onSearchExpand();
+            }
+            return true;
+        }
+    }
+
+    public void closeSubMenu() {
+        if (popupWindow != null && popupWindow.isShowing()) {
+            popupWindow.dismiss();
+        }
+    }
+
+    public EditText getSearchField() {
+        return searchField;
+    }
+
+    public BSActionBarMenuItem setIsSearchField(boolean value) {
+        if (value && searchField == null) {
+            searchField = new EditText(getContext());
+            searchField.setTextSize(18);
+            searchField.setTextColor(0xffffffff);
+            searchField.setSingleLine(true);
+            searchField.setBackgroundResource(R.drawable.search_light_states);
+            searchField.setPadding(0, 0, 0, 0);
+            searchField.setInputType(EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+            if (Build.VERSION.SDK_INT < 11) {
+                searchField.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
+                    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
+                        menu.clear();
+                    }
+                });
+            } else {
+                searchField.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
+                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                        return false;
+                    }
+
+                    public void onDestroyActionMode(ActionMode mode) {
+                    }
+
+                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                        return false;
+                    }
+
+                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                        return false;
+                    }
+                });
+            }
+            searchField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+                    if (actionId == EditorInfo.IME_ACTION_SEARCH || event != null && event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_SEARCH) {
+                        AndroidUtilities.hideKeyboard(searchField);
+                    }
+                    return false;
+                }
+            });
+            searchField.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence s, int start, int before, int count) {
+                    if (listener != null) {
+                        listener.onTextChanged(searchField);
+                    }
+                }
+
+                @Override
+                public void afterTextChanged(Editable s) {
+
+                }
+            });
+
+            /*
+            ImageView img = (ImageView) searchView.findViewById(R.id.search_close_btn);
+        if (img != null) {
+            img.setImageResource(R.drawable.ic_msg_btn_cross_custom);
+        }
+             */
+            try {
+                Field mCursorDrawableRes = TextView.class.getDeclaredField("mCursorDrawableRes");
+                mCursorDrawableRes.setAccessible(true);
+                mCursorDrawableRes.set(searchField, R.drawable.search_carret);
+            } catch (Exception e) {
+                //nothing to do
+            }
+            if (Build.VERSION.SDK_INT >= 11) {
+                searchField.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN | EditorInfo.IME_ACTION_SEARCH);
+                searchField.setTextIsSelectable(false);
+            } else {
+                searchField.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
+            }
+            parentMenu.addView(searchField, 0);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)searchField.getLayoutParams();
+            layoutParams.weight = 1;
+            layoutParams.width = 0;
+            layoutParams.gravity = Gravity.CENTER_VERTICAL;
+            layoutParams.height = AndroidUtilities.bsDp(36);
+            layoutParams.rightMargin = AndroidUtilities.bsDp(22);
+            layoutParams.leftMargin = AndroidUtilities.bsDp(6);
+            searchField.setLayoutParams(layoutParams);
+            searchField.setVisibility(GONE);
+        }
+        isSearchField = value;
+        return this;
+    }
+
+    public boolean isSearchField() {
+        return isSearchField;
+    }
+
+    public void setActionBarMenuItemSearchListener(ActionBarMenuItemSearchListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        if (popupWindow != null && popupWindow.isShowing()) {
+            if (showFromBottom) {
+                popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth() + AndroidUtilities.bsDp(14), getOffsetY(), -1, -1);
+            } else {
+                popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY(), -1, -1);
+            }
+        }
+    }
+
+    public void hideSubItem(int id) {
+        View view = popupLayout.findViewWithTag(id);
+        if (view != null) {
+            view.setVisibility(GONE);
+        }
+        view = popupLayout.findViewWithTag(100 + id);
+        if (view != null) {
+            view.setVisibility(GONE);
+        }
+    }
+
+    public void showSubItem(int id) {
+        View view = popupLayout.findViewWithTag(id);
+        if (view != null) {
+            view.setVisibility(VISIBLE);
+        }
+        view = popupLayout.findViewWithTag(100 + id);
+        if (view != null) {
+            view.setVisibility(VISIBLE);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsAdapter.java
new file mode 100644
index 000000000..b615fefa5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsAdapter.java
@@ -0,0 +1,267 @@
+package org.telegram.bsui.Adapters;
+
+import android.content.Context;
+import android.os.Build;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.Cells.BSDividerCell;
+import org.telegram.bsui.Cells.BSGreySectionCell;
+import org.telegram.bsui.Cells.BSLetterSectionCell;
+import org.telegram.bsui.Cells.BSTextCell;
+import org.telegram.bsui.Cells.BSUserCell;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSContactsAdapter extends BaseSectionsAdapter {
+
+    private Context mContext;
+    private boolean onlyUsers;
+    private boolean needPhonebook;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private HashMap<Integer, ?> checkedMap;
+    private boolean scrolling;
+
+    public BSContactsAdapter(Context context, boolean arg1, boolean arg2, HashMap<Integer, TLRPC.User> arg3) {
+        mContext = context;
+        onlyUsers = arg1;
+        needPhonebook = arg2;
+        ignoreUsers = arg3;
+    }
+
+    public void setCheckedMap(HashMap<Integer, ?> map) {
+        checkedMap = map;
+    }
+
+    public void setIsScrolling(boolean value) {
+        scrolling = value;
+    }
+
+    @Override
+    public Object getItem(int section, int position) {
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                if (position < arr.size()) {
+                    return MessagesController.getInstance().getUser(arr.get(position).user_id);
+                }
+            }
+            return null;
+        } else {
+            if (section == 0) {
+                return null;
+            } else {
+                if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                    ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                    if (position < arr.size()) {
+                        return MessagesController.getInstance().getUser(arr.get(position).user_id);
+                    }
+                    return null;
+                }
+            }
+        }
+        if (needPhonebook) {
+            return ContactsController.getInstance().phoneBookContacts.get(position);
+        }
+        return null;
+    }
+
+    @Override
+    public boolean isRowEnabled(int section, int row) {
+        if (onlyUsers) {
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            return row < arr.size();
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    if (row == 1) {
+                        return false;
+                    }
+                } else {
+                    if (row == 3) {
+                        return false;
+                    }
+                }
+                return true;
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                return row < arr.size();
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public int getSectionCount() {
+        int count = ContactsController.getInstance().sortedUsersSectionsArray.size();
+        if (!onlyUsers) {
+            count++;
+        }
+        if (needPhonebook) {
+            count++;
+        }
+        return count;
+    }
+
+    @Override
+    public int getCountForSection(int section) {
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                int count = arr.size();
+                if (section != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
+                    count++;
+                }
+                return count;
+            }
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    return 2;
+                } else {
+                    return 4;
+                }
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                int count = arr.size();
+                if (section - 1 != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
+                    count++;
+                }
+                return count;
+            }
+        }
+        if (needPhonebook) {
+            return ContactsController.getInstance().phoneBookContacts.size();
+        }
+        return 0;
+    }
+
+    @Override
+    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+        if (convertView == null) {
+            convertView = new BSLetterSectionCell(mContext);
+        }
+        if (onlyUsers) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ((BSLetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            } else {
+                ((BSLetterSectionCell) convertView).setLetter("");
+            }
+        } else {
+            if (section == 0) {
+                ((BSLetterSectionCell) convertView).setLetter("");
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ((BSLetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+            } else {
+                ((BSLetterSectionCell) convertView).setLetter("");
+            }
+        }
+        return convertView;
+    }
+
+    @Override
+    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+        int type = getItemViewType(section, position);
+        if (type == 4) {
+            if (convertView == null) {
+                convertView = new BSDividerCell(mContext);
+                convertView.setPadding(AndroidUtilities.bsDp(LocaleController.isRTL ? 28 : 72), 0, AndroidUtilities.bsDp(LocaleController.isRTL ? 72 : 28), 0);
+            }
+        } else if (type == 3) {
+            if (convertView == null) {
+                convertView = new BSGreySectionCell(mContext);
+                ((BSGreySectionCell) convertView).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
+            }
+        } else if (type == 2) {
+            if (convertView == null) {
+                convertView = new BSTextCell(mContext);
+            }
+            BSTextCell actionCell = (BSTextCell) convertView;
+            if (needPhonebook) {
+                actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
+            } else {
+                if (position == 0) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_newgroup);
+                } else if (position == 1) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
+                } else if (position == 2) {
+                    actionCell.setTextAndIcon(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), R.drawable.menu_broadcast);
+                }
+            }
+        } else if (type == 1) {
+            if (convertView == null) {
+                convertView = new BSTextCell(mContext);
+            }
+            ContactsController.Contact contact = ContactsController.getInstance().phoneBookContacts.get(position);
+            if (contact.first_name != null && contact.last_name != null) {
+                ((BSTextCell) convertView).setText(contact.first_name + " " + contact.last_name);
+            } else if (contact.first_name != null && contact.last_name == null) {
+                ((BSTextCell) convertView).setText(contact.first_name);
+            } else {
+                ((BSTextCell) convertView).setText(contact.last_name);
+            }
+        } else if (type == 0) {
+            if (convertView == null) {
+                convertView = new BSUserCell(mContext, 58);
+                ((BSUserCell) convertView).setStatusColors(0xffa8a8a8, 0xff3b84c0);
+            }
+
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - (onlyUsers ? 0 : 1)));
+            TLRPC.User user = MessagesController.getInstance().getUser(arr.get(position).user_id);
+            ((BSUserCell)convertView).setData(user, null, null, 0);
+            if (checkedMap != null) {
+                ((BSUserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling  && Build.VERSION.SDK_INT > 10);
+            }
+            if (ignoreUsers != null) {
+                if (ignoreUsers.containsKey(user.id)) {
+                    ViewProxy.setAlpha(convertView, 0.5f);
+                } else {
+                    ViewProxy.setAlpha(convertView, 1.0f);
+                }
+            }
+        }
+        return convertView;
+    }
+
+    @Override
+    public int getItemViewType(int section, int position) {
+        if (onlyUsers) {
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            return position < arr.size() ? 0 : 4;
+        } else {
+            if (section == 0) {
+                if (needPhonebook) {
+                    if (position == 1) {
+                        return 3;
+                    }
+                } else {
+                    if (position == 3) {
+                        return 3;
+                    }
+                }
+                return 2;
+            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
+                return position < arr.size() ? 0 : 4;
+            }
+        }
+        return 1;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 5;
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsSearchAdapter.java
new file mode 100644
index 000000000..0bd38bb11
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSContactsSearchAdapter.java
@@ -0,0 +1,282 @@
+package org.telegram.bsui.Adapters;
+
+import android.content.Context;
+import android.text.Html;
+import android.view.View;
+import android.view.ViewGroup;
+
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.Cells.BSGreySectionCell;
+import org.telegram.bsui.Cells.BSProfileSearchCell;
+import org.telegram.bsui.Cells.BSUserCell;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseContactsSearchAdapter;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSContactsSearchAdapter extends BaseContactsSearchAdapter {
+    private Context mContext;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private ArrayList<TLRPC.User> searchResult = new ArrayList<TLRPC.User>();
+    private ArrayList<CharSequence> searchResultNames = new ArrayList<CharSequence>();
+    private HashMap<Integer, ?> checkedMap;
+    private Timer searchTimer;
+    private boolean allowUsernameSearch;
+    private boolean useBSUserCell;
+
+    public BSContactsSearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
+        mContext = context;
+        ignoreUsers = arg1;
+        allowUsernameSearch = usernameSearch;
+    }
+
+    public void setCheckedMap(HashMap<Integer, ?> map) {
+        checkedMap = map;
+    }
+
+    public void setUseUserCell(boolean value) {
+        useBSUserCell = value;
+    }
+
+    public void searchDialogs(final String query) {
+        try {
+            if (searchTimer != null) {
+                searchTimer.cancel();
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        if (query == null) {
+            searchResult.clear();
+            searchResultNames.clear();
+            if (allowUsernameSearch) {
+                queryServerSearch(null);
+            }
+            notifyDataSetChanged();
+        } else {
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 200, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                if (allowUsernameSearch) {
+                    queryServerSearch(query);
+                }
+                final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
+                contactsCopy.addAll(ContactsController.getInstance().contacts);
+                Utilities.searchQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        String q = query.trim().toLowerCase();
+                        if (q.length() == 0) {
+                            updateSearchResults(new ArrayList<TLRPC.User>(), new ArrayList<CharSequence>());
+                            return;
+                        }
+                        long time = System.currentTimeMillis();
+                        ArrayList<TLRPC.User> resultArray = new ArrayList<TLRPC.User>();
+                        ArrayList<CharSequence> resultArrayNames = new ArrayList<CharSequence>();
+
+                        for (TLRPC.TL_contact contact : contactsCopy) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                            if (user.id == UserConfig.getClientUserId()) {
+                                continue;
+                            }
+
+                            String name = ContactsController.formatName(user.first_name, user.last_name).toLowerCase();
+
+                            int found = 0;
+                            if (name.startsWith(q) || name.contains(" " + q)) {
+                                found = 1;
+                            } else if (user.username != null && user.username.startsWith(q)) {
+                                found = 2;
+                            }
+
+                            if (found != 0) {
+                                if (found == 1) {
+                                    resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                } else {
+                                    resultArrayNames.add(Utilities.generateSearchName("@" + user.username, null, "@" + q));
+                                }
+                                resultArray.add(user);
+                            }
+                        }
+
+                        updateSearchResults(resultArray, resultArrayNames);
+                    }
+                });
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = users;
+                searchResultNames = names;
+                notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return false;
+    }
+
+    @Override
+    public boolean isEnabled(int i) {
+        return i != searchResult.size();
+    }
+
+    @Override
+    public int getCount() {
+        int count = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (globalCount != 0) {
+            count += globalCount + 1;
+        }
+        return count;
+    }
+
+    public boolean isGlobalSearch(int i) {
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return false;
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public TLRPC.User getItem(int i) {
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return searchResult.get(i);
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return globalSearch.get(i - localCount - 1);
+        }
+        return null;
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        if (i == searchResult.size()) {
+            if (view == null) {
+                view = new BSGreySectionCell(mContext);
+                ((BSGreySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+            }
+        } else {
+            if (view == null) {
+                if (useBSUserCell) {
+                    view = new BSUserCell(mContext, 1);
+                    if (checkedMap != null) {
+                        ((BSUserCell) view).setChecked(false, false);
+                    }
+                } else {
+                    view = new BSProfileSearchCell(mContext);
+                }
+            }
+
+            TLRPC.User user = getItem(i);
+            if (user != null) {
+                CharSequence username = null;
+                CharSequence name = null;
+                if (i < searchResult.size()) {
+                    name = searchResultNames.get(i);
+                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                        if (name.toString().startsWith("@" + user.username)) {
+                            username = name;
+                            name = null;
+                        }
+                    }
+                } else if (i > searchResult.size() && user.username != null) {
+                    try {
+                        username = Html.fromHtml(String.format("<font color=\"#4d83b3\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                    } catch (Exception e) {
+                        username = user.username;
+                        FileLog.e("tmessages", e);
+                    }
+                }
+
+                if (useBSUserCell) {
+                    ((BSUserCell) view).setData(user, name, username, 0);
+                    if (checkedMap != null) {
+                        ((BSUserCell) view).setChecked(checkedMap.containsKey(user.id), false);
+                    }
+                } else {
+                    ((BSProfileSearchCell) view).setData(user, null, null, name, username);
+                    ((BSProfileSearchCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+                    if (ignoreUsers != null) {
+                        if (ignoreUsers.containsKey(user.id)) {
+                            ((BSProfileSearchCell) view).drawAlpha = 0.5f;
+                        } else {
+                            ((BSProfileSearchCell) view).drawAlpha = 1.0f;
+                        }
+                    }
+                }
+            }
+        }
+        return view;
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (i == searchResult.size()) {
+            return 1;
+        }
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 2;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return searchResult.isEmpty() && globalSearch.isEmpty();
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsAdapter.java
new file mode 100644
index 000000000..baf5e68ad
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsAdapter.java
@@ -0,0 +1,136 @@
+package org.telegram.bsui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.Cells.BSDialogCell;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.LoadingCell;
+
+/**
+ * Created by Ji on 29.12.2014.
+ */
+public class BSDialogsAdapter extends BaseAdapter {
+
+    private boolean serverOnly;
+    private Context mContext;
+    private long openedDialogId;
+
+    public BSDialogsAdapter(Context context, boolean onlyFromServer){
+        mContext = context;
+        serverOnly = onlyFromServer;
+    }
+
+    public void setOpenedDialogId(long id) {
+        openedDialogId = id;
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return true;
+    }
+
+    @Override
+    public int getCount() {
+        int count;
+        if (serverOnly) {
+            count = MessagesController.getInstance().dialogsServerOnly.size();
+        } else {
+            count = MessagesController.getInstance().dialogs.size();
+        }
+        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+            return 0;
+        }
+        if (!MessagesController.getInstance().dialogsEndReached) {
+            count++;
+        }
+        return count;
+    }
+
+    @Override
+    public TLRPC.TL_dialog getItem(int i) {
+        if (serverOnly) {
+            if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                return null;
+            }
+            return MessagesController.getInstance().dialogsServerOnly.get(i);
+        } else {
+            if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
+                return null;
+            }
+            return MessagesController.getInstance().dialogs.get(i);
+        }
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        int type = getItemViewType(i);
+        if (type == 1) {
+            if (view == null) {
+                view = new LoadingCell(mContext);
+            }
+        } else if (type == 0) {
+            if (view == null) {
+                view = new BSDialogCell(mContext);
+            }
+            ((BSDialogCell) view).useSeparator = (i != getCount() - 1);
+            TLRPC.TL_dialog dialog = null;
+            if (serverOnly) {
+                dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
+            } else {
+                dialog = MessagesController.getInstance().dialogs.get(i);
+            }
+            MessageObject message = MessagesController.getInstance().dialogMessage.get(dialog.top_message);
+            ((BSDialogCell) view).setDialog(dialog.id, message, true, dialog.last_message_date, dialog.unread_count);
+        }
+
+        return view;
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
+            return 1;
+        }
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 2;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+            return true;
+        }
+        int count;
+        if (serverOnly) {
+            count = MessagesController.getInstance().dialogsServerOnly.size();
+        } else {
+            count = MessagesController.getInstance().dialogs.size();
+        }
+        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+            return true;
+        }
+        if (!MessagesController.getInstance().dialogsEndReached) {
+            count++;
+        }
+        return count == 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsSearchAdapter.java
new file mode 100644
index 000000000..f6ad64f36
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Adapters/BSDialogsSearchAdapter.java
@@ -0,0 +1,111 @@
+package org.telegram.bsui.Adapters;
+
+import android.content.Context;
+import android.text.Html;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.Cells.BSDialogCell;
+import org.telegram.bsui.Cells.BSGreySectionCell;
+import org.telegram.bsui.Cells.BSLoadingCell;
+import org.telegram.bsui.Cells.BSProfileSearchCell;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Adapters.DialogsSearchAdapter;
+
+/**
+ * Created by Ji on 19.01.2015.
+ */
+public class BSDialogsSearchAdapter extends DialogsSearchAdapter {
+    public BSDialogsSearchAdapter(Context context, boolean messagesSearch) {
+        super(context, messagesSearch);
+    }
+
+    private BSMessagesActivitySearchAdapterDelegate delegate;
+    public static interface BSMessagesActivitySearchAdapterDelegate {
+        public abstract void searchStateChanged(boolean search);
+    }
+
+    public void setDelegate(BSMessagesActivitySearchAdapterDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        int type = getItemViewType(i);
+
+        if (type == 1) {
+            if (view == null) {
+                view = new BSGreySectionCell(mContext);
+            }
+            if (!globalSearch.isEmpty() && i == searchResult.size()) {
+                ((BSGreySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+            } else {
+                ((BSGreySectionCell) view).setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
+            }
+        } else if (type == 0) {
+            if (view == null) {
+                view = new BSProfileSearchCell(mContext);
+            }
+
+            TLRPC.User user = null;
+            TLRPC.Chat chat = null;
+            TLRPC.EncryptedChat encryptedChat = null;
+
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+
+            ((BSProfileSearchCell) view).useSeparator = (i != getCount() - 1 && i != localCount - 1 && i != localCount + globalCount - 1);
+            Object obj = getItem(i);
+            if (obj instanceof TLRPC.User) {
+                user = MessagesController.getInstance().getUser(((TLRPC.User) obj).id);
+                if (user == null) {
+                    user = (TLRPC.User) obj;
+                }
+            } else if (obj instanceof TLRPC.Chat) {
+                chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
+            } else if (obj instanceof TLRPC.EncryptedChat) {
+                encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+
+            CharSequence username = null;
+            CharSequence name = null;
+            if (i < searchResult.size()) {
+                name = searchResultNames.get(i);
+                if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                    if (name.toString().startsWith("@" + user.username)) {
+                        username = name;
+                        name = null;
+                    }
+                }
+            } else if (i > searchResult.size() && user != null && user.username != null) {
+                try {
+                    username = Html.fromHtml(String.format("<font color=\"#4d83b3\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                } catch (Exception e) {
+                    username = user.username;
+                    FileLog.e("tmessages", e);
+                }
+            }
+
+            ((BSProfileSearchCell) view).setData(user, chat, encryptedChat, name, username);
+        } else if (type == 2) {
+            if (view == null) {
+                view = new BSDialogCell(mContext);
+            }
+            ((BSDialogCell) view).useSeparator = (i != getCount() - 1);
+            MessageObject messageObject = (MessageObject)getItem(i);
+            ((BSDialogCell) view).setDialog(messageObject.getDialogId(), messageObject, false, messageObject.messageOwner.date, 0);
+        } else if (type == 3) {
+            if (view == null) {
+                view = new BSLoadingCell(mContext);
+            }
+        }
+
+        return view;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSAvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSAvatarDrawable.java
new file mode 100644
index 000000000..f6e3a77ba
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSAvatarDrawable.java
@@ -0,0 +1,248 @@
+package org.telegram.bsui;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+
+import java.util.Locale;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSAvatarDrawable extends Drawable {
+
+    private static Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private static TextPaint namePaint;
+    private static int[] arrColors = {0xffe56555, 0xfff28c48, 0xffeec764, 0xff76c84d, 0xff5fbed5, 0xff549cdd, 0xff8e85ee, 0xfff2749a};
+    private static int[] arrColorsProfiles = {0xffd86f65, 0xfff69d61, 0xfffabb3c, 0xff67b35d, 0xff56a2bb, 0xff5c98cd, 0xff8c79d2, 0xfff37fa6};
+    private static int[] arrColorsProfilesBack = {0xffca6056, 0xfff18944, 0xfff2b02c, 0xff56a14c, 0xff4492ac, 0xff4c84b6, 0xff7d6ac4, 0xffe66b94};
+    private static int[] arrColorsProfilesText = {0xfff9cbc5, 0xfffdddc8, 0xfffce5bb, 0xffc0edba, 0xffb8e2f0, 0xffb3d7f7, 0xffcdc4ed, 0xfffed1e0};
+    private static int[] arrColorsNames = {0xffca5650, 0xffd87b29, 0xffc7a21c, 0xff50b232, 0xff42b1a8, 0xff4e92cc, 0xff4e92cc, 0xffdb5b9d};
+    private static int[] arrColorsButtons = {R.drawable.bar_selector_red, R.drawable.bar_selector_orange, R.drawable.bar_selector_yellow,
+            R.drawable.bar_selector_green, R.drawable.bar_selector_cyan, R.drawable.bar_selector_blue, R.drawable.bar_selector_violet, R.drawable.bar_selector_pink};
+
+
+
+    private static Drawable broadcastDrawable;
+    private static Drawable photoDrawable;
+
+    private int color;
+    private StaticLayout textLayout;
+    private float textWidth;
+    private float textHeight;
+    private float textLeft;
+    private boolean isProfile;
+    private boolean drawBrodcast;
+    private boolean drawPhoto;
+
+    public BSAvatarDrawable() {
+        super();
+
+        if (namePaint == null) {
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xffffffff);
+            namePaint.setTextSize(AndroidUtilities.bsDp(20));
+
+            broadcastDrawable = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.broadcast_w);
+        }
+    }
+
+    public BSAvatarDrawable(TLRPC.User user) {
+        this(user, false);
+    }
+
+    public BSAvatarDrawable(TLRPC.Chat chat) {
+        this(chat, false);
+    }
+
+    public BSAvatarDrawable(TLRPC.User user, boolean profile) {
+        this();
+        isProfile = profile;
+        if (user != null) {
+            setInfo(user.id, user.first_name, user.last_name, false);
+        }
+    }
+
+    public BSAvatarDrawable(TLRPC.Chat chat, boolean profile) {
+        this();
+        isProfile = profile;
+        if (chat != null) {
+            setInfo(chat.id, chat.title, null, chat.id < 0);
+        }
+    }
+
+    public static int getColorIndex(int id) {
+        if (id >= 0 && id < 8) {
+            return id;
+        }
+        try {
+            String str;
+            if (id >= 0) {
+                str = String.format(Locale.US, "%d%d", id, UserConfig.getClientUserId());
+            } else {
+                str = String.format(Locale.US, "%d", id);
+            }
+            if (str.length() > 15) {
+                str = str.substring(0, 15);
+            }
+            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
+            byte[] digest = md.digest(str.getBytes());
+            int b = digest[Math.abs(id % 16)];
+            if (b < 0) {
+                b += 256;
+            }
+            return Math.abs(b) % arrColors.length;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return id % arrColors.length;
+    }
+
+    public static int getColorForId(int id) {
+        return arrColors[getColorIndex(id)];
+    }
+
+    public static int getButtonColorForId(int id) {
+        return arrColorsButtons[getColorIndex(id)];
+    }
+
+    public static int getProfileColorForId(int id) {
+        return arrColorsProfiles[getColorIndex(id)];
+    }
+
+    public static int getProfileTextColorForId(int id) {
+        return arrColorsProfilesText[getColorIndex(id)];
+    }
+
+    public static int getProfileBackColorForId(int id) {
+        return arrColorsProfilesBack[getColorIndex(id)];
+    }
+
+    public static int getNameColorForId(int id) {
+        return arrColorsNames[getColorIndex(id)];
+    }
+
+    public void setInfo(TLRPC.User user) {
+        if (user != null) {
+            setInfo(user.id, user.first_name, user.last_name, false);
+        }
+    }
+
+    public void setInfo(TLRPC.Chat chat) {
+        if (chat != null) {
+            setInfo(chat.id, chat.title, null, chat.id < 0);
+        }
+    }
+
+    public void setColor(int value) {
+        color = value;
+    }
+
+    public void setInfo(int id, String firstName, String lastName, boolean isBroadcast) {
+        if (isProfile) {
+            color = arrColorsProfiles[getColorIndex(id)];
+        } else {
+            color = arrColors[getColorIndex(id)];
+        }
+
+        drawBrodcast = isBroadcast;
+
+        String text = "";
+        if (firstName != null && firstName.length() > 0) {
+            text += firstName.substring(0, 1);
+        }
+        if (lastName != null && lastName.length() > 0) {
+            text += lastName.substring(0, 1);
+        }
+        if (text.length() > 0) {
+            text = text.toUpperCase();
+            try {
+                textLayout = new StaticLayout(text, namePaint, AndroidUtilities.bsDp(100), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                if (textLayout.getLineCount() > 0) {
+                    textLeft = textLayout.getLineLeft(0);
+                    textWidth = textLayout.getLineWidth(0);
+                    textHeight = textLayout.getLineBottom(0);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            textLayout = null;
+        }
+    }
+
+    public void setDrawPhoto(boolean value) {
+        if (value && photoDrawable == null) {
+            photoDrawable = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.photo_w);
+        }
+        drawPhoto = value;
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        Rect bounds = getBounds();
+        if (bounds == null) {
+            return;
+        }
+        int size = bounds.width();
+        paint.setColor(color);
+        canvas.save();
+        canvas.translate(bounds.left, bounds.top);
+        canvas.drawCircle(size / 2, size / 2, size / 2, paint);
+
+        if (drawBrodcast && broadcastDrawable != null) {
+            int x = (size - broadcastDrawable.getIntrinsicWidth()) / 2;
+            int y = (size - broadcastDrawable.getIntrinsicHeight()) / 2;
+            broadcastDrawable.setBounds(x, y, x + broadcastDrawable.getIntrinsicWidth(), y + broadcastDrawable.getIntrinsicHeight());
+            broadcastDrawable.draw(canvas);
+        } else {
+            if (textLayout != null) {
+                canvas.translate((size - textWidth) / 2 - textLeft, (size - textHeight) / 2);
+                textLayout.draw(canvas);
+            } else if (drawPhoto && photoDrawable != null) {
+                int x = (size - photoDrawable.getIntrinsicWidth()) / 2;
+                int y = (size - photoDrawable.getIntrinsicHeight()) / 2;
+                photoDrawable.setBounds(x, y, x + photoDrawable.getIntrinsicWidth(), y + photoDrawable.getIntrinsicHeight());
+                photoDrawable.draw(canvas);
+            }
+        }
+        canvas.restore();
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSChatActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSChatActivity.java
new file mode 100644
index 000000000..c2f50f8cc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSChatActivity.java
@@ -0,0 +1,3151 @@
+package org.telegram.bsui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.Html;
+import android.text.TextUtils;
+import android.util.Log;
+import android.util.SparseArray;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.yotadevices.sdk.Constants;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.NotificationsController;
+import org.telegram.android.SecretChatHelper;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenu;
+import org.telegram.bsui.ActionBar.BSActionBarMenuItem;
+import org.telegram.bsui.Cells.BSChatActionCell;
+import org.telegram.bsui.Cells.BSChatActivityEnterView;
+import org.telegram.bsui.Cells.BSChatAudioCell;
+import org.telegram.bsui.Cells.BSChatContactCell;
+import org.telegram.bsui.Cells.BSChatMediaCell;
+import org.telegram.bsui.Cells.BSChatMessageCell;
+import org.telegram.bsui.Components.BSAlertDialog;
+import org.telegram.bsui.Components.BSPhotoViewer;
+import org.telegram.bsui.Components.BSTimerDrawable;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.bsui.widget.SpeechRecognizerManager;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.ChatActionCell;
+import org.telegram.ui.Cells.ChatAudioCell;
+import org.telegram.ui.Cells.ChatBaseCell;
+import org.telegram.ui.Cells.ChatContactCell;
+import org.telegram.ui.Cells.ChatMediaCell;
+import org.telegram.ui.Cells.ChatMessageCell;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.FrameLayoutFixed;
+import org.telegram.ui.Components.LayoutListView;
+import org.telegram.ui.Components.TypingDotsDrawable;
+import org.telegram.ui.ContactAddActivity;
+import org.telegram.ui.SecretPhotoViewer;
+import org.telegram.ui.VideoEditorActivity;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.concurrent.Semaphore;
+
+/**
+ * Created by Ji on 29.12.2014.
+ */
+public class BSChatActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate, BSMessagesActivity.BSMessagesActivityDelegate,
+        BSPhotoViewer.PhotoViewerProvider {
+    private TLRPC.Chat currentChat;
+    private TLRPC.User currentUser;
+    private TLRPC.EncryptedChat currentEncryptedChat;
+    private boolean userBlocked = false;
+
+    protected View fragmentView;
+    private int classGuid = ConnectionsManager.getInstance().generateClassGuid();
+    private View progressView;
+    private View bottomOverlay;
+    private ChatAdapter chatAdapter;
+    private BSChatActivityEnterView chatActivityEnterView;
+    private ImageView timeItem;
+    private View timeItem2;
+    private BSTimerDrawable timerDrawable;
+    private View mainView;
+
+    private LayoutListView chatListView;
+    private TextView bottomOverlayChatText;
+    private View bottomOverlayChat;
+    private TypingDotsDrawable typingDotsDrawable;
+    private View emptyViewContainer;
+    private ArrayList<View> actionModeViews = new ArrayList<>();
+    private TextView nameTextView;
+    private TextView onlineTextView;
+    private TextView bottomOverlayText;
+    private TextView secretViewStatusTextView;
+    private TextView selectedMessagesCountTextView;
+    private MessageObject selectedObject;
+    private MessageObject forwaringMessage;
+
+
+    private boolean paused = true;
+    private boolean readWhenResume = false;
+
+    private boolean openAnimationEnded = false;
+
+    private int readWithDate = 0;
+    private int readWithMid = 0;
+    private boolean scrollToTopOnResume = false;
+    private boolean scrollToTopUnReadOnResume = false;
+    private boolean isCustomTheme = false;
+    private View pagedownButton;
+    private long dialog_id;
+    private boolean isBroadcast = false;
+    private HashMap<Integer, MessageObject> selectedMessagesIds = new HashMap<Integer, MessageObject>();
+    private HashMap<Integer, MessageObject> selectedMessagesCanCopyIds = new HashMap<Integer, MessageObject>();
+
+    private HashMap<Integer, BSMessageObject> messagesDict = new HashMap<>();
+    private HashMap<String, ArrayList<BSMessageObject>> messagesByDays = new HashMap<>();
+    private ArrayList<BSMessageObject> messages = new ArrayList<>();
+    private int maxMessageId = Integer.MAX_VALUE;
+    private int minMessageId = Integer.MIN_VALUE;
+    private int maxDate = Integer.MIN_VALUE;
+    private boolean endReached = false;
+    private boolean loading = false;
+    private boolean cacheEndReaced = false;
+    private boolean firstLoading = true;
+    private int loadsCount = 0;
+
+    private int startLoadFromMessageId = 0;
+
+    private int minDate = 0;
+    private boolean first = true;
+    private int unread_to_load = 0;
+    private int first_unread_id = 0;
+    private int last_message_id = 0;
+    private int first_message_id = 0;
+    private boolean forward_end_reached = true;
+    private boolean loadingForward = false;
+    private BSMessageObject unreadMessageObject = null;
+    private BSMessageObject scrollToMessage = null;
+
+    private int highlightMessageId = Integer.MAX_VALUE;
+    private boolean scrollToMessageMiddleScreen = false;
+
+    private TLRPC.ChatParticipants info = null;
+    private int onlineCount = -1;
+
+    private CharSequence lastPrintString;
+    private String lastStatus;
+
+    private long chatEnterTime = 0;
+    private long chatLeaveTime = 0;
+
+    private String startVideoEdit = null;
+
+    private Runnable openSecretPhotoRunnable = null;
+    private float startX = 0;
+    private float startY = 0;
+
+    private FrameLayoutFixed avatarContainer;
+    private BackupImageView avatarImageView;
+    private BSActionBarMenuItem headerItem;
+    private BSActionBarMenuItem menuItem;
+    private TextView muteItem;
+
+    private final static int copy = 1;
+    private final static int forward = 2;
+    private final static int delete = 3;
+    private final static int chat_enc_timer = 4;
+    private final static int chat_menu_attach = 5;
+    private final static int attach_photo = 6;
+    private final static int attach_gallery = 7;
+    private final static int attach_video = 8;
+    private final static int attach_document = 9;
+    private final static int attach_location = 10;
+    private final static int clear_history = 11;
+    private final static int delete_chat = 12;
+    private final static int share_contact = 13;
+    private final static int mute = 14;
+
+    public BSChatActivity(){
+        super();
+    }
+
+    AdapterView.OnItemLongClickListener onItemLongClickListener = new AdapterView.OnItemLongClickListener() {
+        @Override
+        public boolean onItemLongClick(AdapterView<?> adapter, View view, int position, long id) {
+            if (!actionBar.isActionModeShowed()) {
+                createMenu(view, false);
+            }
+            return true;
+        }
+    };
+
+    AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+            if (actionBar.isActionModeShowed()) {
+                processRowSelect(view);
+                return;
+            }
+            createMenu(view, true);
+        }
+    };
+
+    private void processRowSelect(View view) {
+        MessageObject message = null;
+        if (view instanceof ChatBaseCell) {
+            message = ((ChatBaseCell)view).getMessageObject();
+        } else if (view instanceof ChatActionCell) {
+            message = ((ChatActionCell)view).getMessageObject();
+        }
+
+        int type = getMessageType(message);
+
+        if (type < 2 || type == 6) {
+            return;
+        }
+        addToSelectedMessages(message);
+        updateActionModeTitle();
+        updateVisibleRows();
+    }
+
+    public void createMenu(View v, boolean single) {
+        if (actionBar.isActionModeShowed()) {
+            return;
+        }
+
+        MessageObject message = null;
+        if (v instanceof ChatBaseCell) {
+            message = ((ChatBaseCell)v).getMessageObject();
+        } else if (v instanceof ChatActionCell) {
+            message = ((ChatActionCell)v).getMessageObject();
+        }
+        if (message == null) {
+            return;
+        }
+        final int type = getMessageType(message);
+
+        selectedObject = null;
+        forwaringMessage = null;
+        selectedMessagesCanCopyIds.clear();
+        selectedMessagesIds.clear();
+        actionBar.hideActionMode();
+        final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(BSChatActivity.this);
+        if (single || type < 2 || type == 6) {
+            if (type >= 0) {
+                selectedObject = message;
+                if (getParentActivity() == null) {
+                    return;
+                }
+                CharSequence[] items = null;
+
+                if (type == 0) {
+                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Delete", R.string.Delete)};
+                } else if (type == 1) {
+                    items = new CharSequence[] {LocaleController.getString("Delete", R.string.Delete)};
+                } else if (type == 6) {
+                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                } else {
+                    if (currentEncryptedChat == null) {
+                        if (type == 2) {
+                            items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 3) {
+                            items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 4) {
+                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
+                                    selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 5) {
+                            items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        }
+                    } else {
+                        if (type == 2) {
+                            items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 3) {
+                            items = new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 4) {
+                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
+                                    selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 5) {
+                            items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("Delete", R.string.Delete)};
+                        }
+                    }
+                }
+                builder.setTitle(LocaleController.getString("Message", R.string.Message));
+                builder.setItems(items, new AdapterView.OnItemClickListener() {
+                    @Override
+                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                        int i = position;
+                        if (selectedObject == null) {
+                            return;
+                        }
+                        if (type == 0) {
+                            if (i == 0) {
+                                processSelectedOption(0);
+                            } else if (i == 1) {
+                                processSelectedOption(1);
+                            }
+                        } else if (type == 1) {
+                            processSelectedOption(1);
+                        } else if (type == 2) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(2);
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                processSelectedOption(1);
+                            }
+                        } else if (type == 3) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(2);
+                                } else if (i == 1) {
+                                    processSelectedOption(3);
+                                } else if (i == 2) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                if (i == 0) {
+                                    processSelectedOption(3);
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            }
+                        } else if (type == 4) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(4);
+                                } else if (i == 1) {
+                                    processSelectedOption(2);
+                                } else if (i == 2) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                if (i == 0) {
+                                    processSelectedOption(4);
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            }
+                        } else if (type == 5) {
+                            if (i == 0) {
+                                processSelectedOption(5);
+                            } else {
+                                if (currentEncryptedChat == null) {
+                                    if (i == 1) {
+                                        processSelectedOption(4);
+                                    } else if (i == 2) {
+                                        processSelectedOption(2);
+                                    } else if (i == 3) {
+                                        processSelectedOption(1);
+                                    }
+                                } else {
+                                    if (i == 1) {
+                                        processSelectedOption(1);
+                                    }
+                                }
+                            }
+                        } else if (type == 6) {
+                            if (i == 0) {
+                                processSelectedOption(0);
+                            } else if (i == 1) {
+                                processSelectedOption(3);
+                            } else if (i == 2) {
+                                processSelectedOption(1);
+                            }
+                        }
+                        builder.close();
+                    }
+                });
+                builder.show();
+            }
+            return;
+        }
+        actionBar.showActionMode();
+
+        if (Build.VERSION.SDK_INT >= 11) {
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+            ArrayList<Object> animators = new ArrayList<Object>();
+            for (int a = 0; a < actionModeViews.size(); a++) {
+                View view = actionModeViews.get(a);
+                AndroidUtilities.clearDrawableAnimation(view);
+                if (a < 1) {
+                    animators.add(ObjectAnimatorProxy.ofFloat(view, "translationX", -AndroidUtilities.dp(56), 0));
+                } else {
+                    animators.add(ObjectAnimatorProxy.ofFloat(view, "scaleY", 0.1f, 1.0f));
+                }
+            }
+            animatorSet.playTogether(animators);
+            animatorSet.setDuration(250);
+            animatorSet.start();
+        }
+
+        addToSelectedMessages(message);
+        updateActionModeTitle();
+        updateVisibleRows();
+    }
+
+    private void addToSelectedMessages(MessageObject messageObject) {
+        if (selectedMessagesIds.containsKey(messageObject.messageOwner.id)) {
+            selectedMessagesIds.remove(messageObject.messageOwner.id);
+            if (messageObject.type == 0) {
+                selectedMessagesCanCopyIds.remove(messageObject.messageOwner.id);
+            }
+        } else {
+            selectedMessagesIds.put(messageObject.messageOwner.id, messageObject);
+            if (messageObject.type == 0) {
+                selectedMessagesCanCopyIds.put(messageObject.messageOwner.id, messageObject);
+            }
+        }
+        if (actionBar.isActionModeShowed()) {
+            if (selectedMessagesIds.isEmpty()) {
+                actionBar.hideActionMode();
+            }
+            actionBar.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    private void updateActionModeTitle() {
+        if (!actionBar.isActionModeShowed()) {
+            return;
+        }
+        if (!selectedMessagesIds.isEmpty()) {
+            selectedMessagesCountTextView.setText(String.format("%d", selectedMessagesIds.size()));
+        }
+    }
+
+    private void processSelectedOption(int option) {
+        if (selectedObject == null) {
+            return;
+        }
+        if (option == 0) {
+            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
+                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+            }
+        } else if (option == 1) {
+            final MessageObject messageForDelete = selectedObject;
+            final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(BSChatActivity.this);
+            builder.setTitle(LocaleController.getString("Message", R.string.Message));
+            builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, 1));
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    ArrayList<Integer> ids = new ArrayList<Integer>();
+                    ids.add(messageForDelete.messageOwner.id);
+                    removeUnreadPlane(true);
+                    ArrayList<Long> random_ids = null;
+                    if (currentEncryptedChat != null && messageForDelete.messageOwner.random_id != 0 && messageForDelete.type != 10) {
+                        random_ids = new ArrayList<Long>();
+                        random_ids.add(messageForDelete.messageOwner.random_id);
+                    }
+                    MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
+                    builder.close();
+                }
+            });
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+            builder.show();
+        } else if (option == 2) {
+            forwaringMessage = selectedObject;
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", true);
+            args.putBoolean("serverOnly", true);
+            args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
+            args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
+            BSMessagesActivity.setDelegate(BSChatActivity.this);
+            presentFragment(BSMessagesActivity.class, args, true);
+        } else if (option == 3) {
+            if(Build.VERSION.SDK_INT < 11) {
+                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                clipboard.setText(selectedObject.messageText);
+            } else {
+                android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                android.content.ClipData clip = android.content.ClipData.newPlainText("label", selectedObject.messageText);
+                clipboard.setPrimaryClip(clip);
+            }
+        } else if (option == 4) {
+            String fileName = selectedObject.getFileName();
+            String path = selectedObject.messageOwner.attachPath;
+            if (path != null && path.length() > 0) {
+                File temp = new File(path);
+                if (!temp.exists()) {
+                    path = null;
+                }
+            }
+            if (path == null || path.length() == 0) {
+                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+            }
+            if (selectedObject.type == 3) {
+                MediaController.saveFile(path, getParentActivity(), 1, null);
+            } else if (selectedObject.type == 1) {
+                MediaController.saveFile(path, getParentActivity(), 0, null);
+            } else if (selectedObject.type == 8 || selectedObject.type == 9) {
+                Intent intent = new Intent(Intent.ACTION_SEND);
+                intent.setType(selectedObject.messageOwner.media.document.mime_type);
+                intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(path)));
+                getParentActivity().startActivity(Intent.createChooser(intent, ""));
+            }
+        }
+        selectedObject = null;
+    }
+
+    @Override
+    protected void onBSCreate() {
+        super.onBSCreate();
+        setFeature(Constants.Feature.FEATURE_OVERRIDE_BACK_PRESS);
+        Bundle arguments = getIntent().getExtras();
+
+        final int chatId = arguments.getInt("chat_id", 0);
+        final int userId = arguments.getInt("user_id", 0);
+        final int encId = arguments.getInt("enc_id", 0);
+        startLoadFromMessageId = arguments.getInt("message_id", 0);
+        scrollToTopOnResume = arguments.getBoolean("scrollToTopOnResume", false);
+        if (chatId != 0) {
+            currentChat = MessagesController.getInstance().getChat(chatId);
+            if (currentChat == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentChat = MessagesStorage.getInstance().getChat(chatId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentChat != null) {
+                    MessagesController.getInstance().putChat(currentChat, true);
+                } else {
+                    return;
+                }
+            }
+            if (chatId > 0) {
+                dialog_id = -chatId;
+            } else {
+                isBroadcast = true;
+                dialog_id = AndroidUtilities.makeBroadcastId(chatId);
+            }
+            Semaphore semaphore = null;
+            if (isBroadcast) {
+                semaphore = new Semaphore(0);
+            }
+            MessagesController.getInstance().loadChatInfo(currentChat.id, semaphore);
+            if (isBroadcast) {
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        } else if (userId != 0) {
+            currentUser = MessagesController.getInstance().getUser(userId);
+            if (currentUser == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentUser = MessagesStorage.getInstance().getUser(userId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentUser != null) {
+                    MessagesController.getInstance().putUser(currentUser, true);
+                } else {
+                    return;
+                }
+            }
+            dialog_id = userId;
+        } else if (encId != 0) {
+            currentEncryptedChat = MessagesController.getInstance().getEncryptedChat(encId);
+            if (currentEncryptedChat == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentEncryptedChat = MessagesStorage.getInstance().getEncryptedChat(encId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentEncryptedChat != null) {
+                    MessagesController.getInstance().putEncryptedChat(currentEncryptedChat, true);
+                } else {
+                    return;
+                }
+            }
+            currentUser = MessagesController.getInstance().getUser(currentEncryptedChat.user_id);
+            if (currentUser == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentUser = MessagesStorage.getInstance().getUser(currentEncryptedChat.user_id);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentUser != null) {
+                    MessagesController.getInstance().putUser(currentUser, true);
+                } else {
+                    return;
+                }
+            }
+            dialog_id = ((long) encId) << 32;
+            maxMessageId = Integer.MIN_VALUE;
+            minMessageId = Integer.MAX_VALUE;
+            MediaController.getInstance().startMediaObserver();
+        } else {
+            return;
+        }
+
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesRead);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesReadedEncrypted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.screenshotTook);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
+
+        super.onBSCreate();
+
+        loading = true;
+
+        if (startLoadFromMessageId != 0) {
+            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, 0, 3, 0, 0, false);
+        } else {
+            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, true, 0, 0, 2, 0, 0, true);
+        }
+
+        if (currentUser != null) {
+            userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
+        }
+
+        typingDotsDrawable = new TypingDotsDrawable();
+        typingDotsDrawable.setIsChat(currentChat != null);
+
+        if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
+            SecretChatHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat, null);
+        }
+
+        IniActionBar();
+        mainView = createView(getBSDrawer().getBSLayoutInflater());
+
+        setBSContentView(createActionBar(mainView));
+    }
+
+    @Override
+    public void finishFragment() {
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.onDestroy();
+        }
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesRead);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesReadedEncrypted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.screenshotTook);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileNewChunkAvailable);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
+        }
+        if (currentEncryptedChat != null) {
+            MediaController.getInstance().stopMediaObserver();
+        }
+        if (currentUser != null) {
+            MessagesController.getInstance().cancelLoadFullUser(currentUser.id);
+        }
+
+        MediaController.getInstance().stopAudio();
+        super.finishFragment();
+    }
+
+    @Override
+    public void onBSDestroy() {
+        super.onBSDestroy();
+        finishFragment();
+    }
+
+    public View createView(LayoutInflater inflater) {
+        if (fragmentView == null) {
+            lastPrintString = null;
+            lastStatus = null;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(final int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == -2) {
+                        selectedMessagesIds.clear();
+                        selectedMessagesCanCopyIds.clear();
+                        actionBar.hideActionMode();
+                        updateVisibleRows();
+                    } else if (id == attach_photo) {
+                        //todo:not implemented
+                    } else if (id == attach_gallery) {
+                        //todo:not implemented
+                    } else if (id == attach_video) {
+                        //todo:not implemented
+                    } else if (id == attach_location) {
+                        //todo:not implemented
+                    } else if (id == attach_document) {
+                        //todo:not implemented
+                    } else if (id == copy) {
+                        String str = "";
+                        ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesCanCopyIds.keySet());
+                        if (currentEncryptedChat == null) {
+                            Collections.sort(ids);
+                        } else {
+                            Collections.sort(ids, Collections.reverseOrder());
+                        }
+                        for (Integer messageId : ids) {
+                            MessageObject messageObject = selectedMessagesCanCopyIds.get(messageId);
+                            if (str.length() != 0) {
+                                str += "\n";
+                            }
+                            if (messageObject.messageOwner.message != null) {
+                                str += messageObject.messageOwner.message;
+                            } else {
+                                str += messageObject.messageText;
+                            }
+                        }
+                        if (str.length() != 0) {
+                            if (Build.VERSION.SDK_INT < 11) {
+                                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                clipboard.setText(str);
+                            } else {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", str);
+                                clipboard.setPrimaryClip(clip);
+                            }
+                        }
+                        selectedMessagesIds.clear();
+                        selectedMessagesCanCopyIds.clear();
+                        actionBar.hideActionMode();
+                        updateVisibleRows();
+                    }else if (id == forward) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlySelect", true);
+                        args.putBoolean("serverOnly", true);
+                        args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
+                        args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
+                        BSMessagesActivity.setDelegate(BSChatActivity.this);
+                        presentFragment(BSMessagesActivity.class, args, true);
+                    } else if (id == delete) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(BSChatActivity.this);
+                        builder.setTitle(LocaleController.formatString("AppName", R.string.AppName));
+                        builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", selectedMessagesIds.size())));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+                                ArrayList<Long> random_ids = null;
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<Long>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
+                                }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
+                                actionBar.hideActionMode();
+                                builder.close();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel),null);
+                        builder.show();
+                    } else if (id == share_contact) {
+                        //todo:not implemented
+                    } else if(id == delete_chat || id == clear_history){
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        final boolean isChat = (int)dialog_id < 0 && (int)(dialog_id >> 32) != 1;
+                        final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(BSChatActivity.this);
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        if (id == clear_history) {
+                            builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
+                        } else {
+                            if (isChat) {
+                                builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                            } else {
+                                builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                            }
+                        }
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                MessagesController.getInstance().deleteDialog(dialog_id, 0, id == clear_history);
+                                if (id != clear_history) {
+                                    if (isChat) {
+                                        MessagesController.getInstance().deleteUserFromChat((int) -dialog_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                                    }
+                                    finishFragment();
+                                }
+                                builder.close();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        builder.show();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.chat_layout_bs, null, false);
+            chatActivityEnterView = new BSChatActivityEnterView(fragmentView);
+            chatActivityEnterView.setDialogId(dialog_id);
+            chatActivityEnterView.setDelegate(new BSChatActivityEnterView.ChatActivityEnterViewDelegate() {
+                @Override
+                public void onMessageSend() {
+                    chatListView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                        }
+                    });
+                }
+
+                @Override
+                public void needSendTyping() {
+                    MessagesController.getInstance().sendTyping(dialog_id, 0);
+                }
+
+                @Override
+                public void onAttachButtonHidden() {
+                }
+
+                @Override
+                public void onAttachButtonShow() {
+                }
+            });
+            if (currentEncryptedChat != null) {
+                timeItem = new ImageView(getParentActivity());
+                timeItem.setPadding(AndroidUtilities.bsDp(10), AndroidUtilities.bsDp(10), AndroidUtilities.bsDp(5), AndroidUtilities.bsDp(5));
+                timeItem.setScaleType(ImageView.ScaleType.CENTER);
+
+                timerDrawable = new BSTimerDrawable(getParentActivity());
+
+                timeItem.setImageDrawable(timerDrawable);
+            }
+            avatarContainer = new FrameLayoutFixed(getParentActivity());
+            avatarContainer.setBackgroundResource(R.drawable.bar_selector);
+            avatarContainer.setPadding(AndroidUtilities.bsDp(8), 0, AndroidUtilities.bsDp(8), 0);
+            actionBar.addView(avatarContainer);
+            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.rightMargin = AndroidUtilities.bsDp(40);
+            layoutParams2.leftMargin = AndroidUtilities.bsDp(56);
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            avatarContainer.setLayoutParams(layoutParams2);
+            avatarContainer.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Intent intent = new Intent(getContext(), OtherFlipBSActivity.class);
+                    OtherFlipBSActivity.setProfileFlag();
+                    if (currentUser != null) {
+                        OtherFlipBSActivity.Params.put("user_id", currentUser.id);
+                        if (currentEncryptedChat != null) {
+                            OtherFlipBSActivity.Params.put("dialog_id", dialog_id);
+                        }
+                        intent.setAction(OtherFlipBSActivity.VIEW_PROFILE);
+                        startBSActivity(intent);
+                    } else if (currentChat != null) {
+                        OtherFlipBSActivity.Params.put("chat_id", currentChat.id);
+                        OtherFlipBSActivity.Params.put("info", info);
+                        intent.setAction(OtherFlipBSActivity.VIEW_PROFILE);
+                        startBSActivity(intent);
+                    }
+                }
+            });
+            actionBar.setBackgroundColor(Color.parseColor("#000000"));
+
+            if (currentChat != null) {
+                int count = currentChat.participants_count;
+                if (info != null) {
+                    count = info.participants.size();
+                }
+                if (count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden || info != null && info instanceof TLRPC.TL_chatParticipantsForbidden) {
+                    avatarContainer.setEnabled(false);
+                }
+            }
+
+            avatarImageView = new BackupImageView(getParentActivity());
+            avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.bsDp(21));
+            avatarImageView.processDetach = false;
+            avatarContainer.addView(avatarImageView);
+            layoutParams2 = (FrameLayout.LayoutParams) avatarImageView.getLayoutParams();
+            layoutParams2.width = AndroidUtilities.bsDp(42);
+            layoutParams2.height = AndroidUtilities.bsDp(42);
+            layoutParams2.topMargin = AndroidUtilities.bsDp(3);
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            avatarImageView.setLayoutParams(layoutParams2);
+
+            if (currentEncryptedChat != null) {
+                timeItem = new ImageView(getParentActivity());
+                timeItem.setPadding(AndroidUtilities.bsDp(10), AndroidUtilities.bsDp(10), AndroidUtilities.bsDp(5), AndroidUtilities.bsDp(5));
+                timeItem.setScaleType(ImageView.ScaleType.CENTER);
+                avatarContainer.addView(timeItem);
+                timerDrawable = new BSTimerDrawable(getParentActivity());
+
+                layoutParams2 = (FrameLayout.LayoutParams) timeItem.getLayoutParams();
+                layoutParams2.width = AndroidUtilities.bsDp(34);
+                layoutParams2.height = AndroidUtilities.bsDp(34);
+                layoutParams2.topMargin = AndroidUtilities.bsDp(18);
+                layoutParams2.leftMargin = AndroidUtilities.bsDp(16);
+                layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+                timeItem.setLayoutParams(layoutParams2);
+                timeItem.setImageDrawable(timerDrawable);
+            }
+
+
+            nameTextView = new TextView(getParentActivity());
+            nameTextView.setTextColor(0xffffffff);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 11);//18
+            nameTextView.setLines(1);
+            nameTextView.setMaxLines(1);
+            nameTextView.setSingleLine(true);
+            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView.setGravity(Gravity.LEFT);
+            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            avatarContainer.addView(nameTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.leftMargin = AndroidUtilities.bsDp(54);
+            layoutParams2.bottomMargin = AndroidUtilities.bsDp(22);
+            layoutParams2.gravity = Gravity.BOTTOM;
+            nameTextView.setLayoutParams(layoutParams2);
+
+            onlineTextView = new TextView(getParentActivity());
+            onlineTextView.setTextColor(0xffd7e8f7);
+            onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 7);//14
+            onlineTextView.setLines(1);
+            onlineTextView.setMaxLines(1);
+            onlineTextView.setSingleLine(true);
+            onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView.setGravity(Gravity.LEFT);
+            avatarContainer.addView(onlineTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.leftMargin = AndroidUtilities.bsDp(54);
+            layoutParams2.bottomMargin = AndroidUtilities.bsDp(4);
+            layoutParams2.gravity = Gravity.BOTTOM;
+            onlineTextView.setLayoutParams(layoutParams2);
+//            muteItem = headerItem.addSubItem(mute, null, 0);
+
+            updateTitle();
+            updateSubtitle();
+//            updateTitleIcons();
+
+            if (currentEncryptedChat != null) {
+                nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_header, 0, 0, 0);
+                nameTextView.setCompoundDrawablePadding(AndroidUtilities.bsDp(4));
+            }
+
+            BSActionBarMenu menu = actionBar.createMenu();
+            headerItem = menu.addItem(0, R.drawable.ic_ab_other);
+            headerItem.addSubItem(clear_history, LocaleController.getString("ClearHistory", R.string.ClearHistory), 0);
+            if (currentChat != null && !isBroadcast) {
+                headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
+            } else {
+                headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser), 0);
+            }
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) headerItem.getLayoutParams();
+//            layoutParams.rightMargin = AndroidUtilities.bsDp(-48);
+//            headerItem.setLayoutParams(layoutParams);
+            menuItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach);
+            menuItem.setShowFromBottom(true);
+            menuItem.setBackgroundDrawable(null);
+            menuItem.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    Intent intent = new Intent(getContext(), OtherFlipBSActivity.class);
+                    OtherFlipBSActivity.setAttachFlag();
+                    if (currentUser != null) {
+                        OtherFlipBSActivity.Params.put("user_id", currentUser.id);
+                        if (currentEncryptedChat != null) {
+                            OtherFlipBSActivity.Params.put("dialog_id", dialog_id);
+                        }
+                        intent.setAction(OtherFlipBSActivity.ATTACH);
+                        startBSActivity(intent);
+                    } else if (currentChat != null) {
+                        OtherFlipBSActivity.Params.put("chat_id", currentChat.id);
+                        OtherFlipBSActivity.Params.put("info", info);
+                        intent.setAction(OtherFlipBSActivity.ATTACH);
+                        startBSActivity(intent);
+                    }
+                    return true;
+                }
+            });
+            actionModeViews.clear();
+
+            final BSActionBarMenu actionMode = actionBar.createActionMode();
+            actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_back_grey, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+            selectedMessagesCountTextView = new TextView(actionMode.getContext());
+            selectedMessagesCountTextView.setTextSize(16);
+            selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            selectedMessagesCountTextView.setTextColor(Color.BLACK);
+            selectedMessagesCountTextView.setSingleLine(true);
+            selectedMessagesCountTextView.setLines(1);
+            selectedMessagesCountTextView.setEllipsize(TextUtils.TruncateAt.END);
+            selectedMessagesCountTextView.setPadding(AndroidUtilities.bsDp(11), 0, 0, AndroidUtilities.bsDp(2));
+            selectedMessagesCountTextView.setGravity(Gravity.CENTER_VERTICAL);
+            selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            actionMode.addView(selectedMessagesCountTextView);
+            layoutParams = (LinearLayout.LayoutParams)selectedMessagesCountTextView.getLayoutParams();
+            layoutParams.weight = 1;
+            layoutParams.width = 0;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            selectedMessagesCountTextView.setLayoutParams(layoutParams);
+
+            if (currentEncryptedChat == null) {
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+                actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+            } else {
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.bsDp(54)));
+            }
+            View contentView = fragmentView.findViewById(R.id.chat_layout_bs);
+            TextView emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
+            emptyViewContainer = fragmentView.findViewById(R.id.empty_view);
+            emptyViewContainer.setVisibility(View.INVISIBLE);
+            emptyViewContainer.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
+            emptyView.setTextColor(Color.parseColor("#000000"));
+            emptyViewContainer.setBackgroundColor(Color.parseColor("#FFFFFF"));
+            chatListView = (LayoutListView)fragmentView.findViewById(R.id.chat_list_view);
+            chatListView.setAdapter(chatAdapter = new ChatAdapter(getBSDrawer().getBSContext()));
+            bottomOverlay = fragmentView.findViewById(R.id.bottom_overlay);
+            bottomOverlayText = (TextView)fragmentView.findViewById(R.id.bottom_overlay_text);
+            bottomOverlayChat = fragmentView.findViewById(R.id.bottom_overlay_chat);
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+            pagedownButton = fragmentView.findViewById(R.id.pagedown_button);
+            pagedownButton.setVisibility(View.GONE);
+
+            View progressViewInner = progressView.findViewById(R.id.progressLayoutInner);
+
+            updateContactStatus();
+
+            contentView.setBackgroundColor(Color.parseColor("#FFFFFF"));
+            chatListView.setBackgroundColor(Color.parseColor("#FFFFFF"));
+
+            emptyView.setPadding(AndroidUtilities.bsDp(7), AndroidUtilities.bsDp(1), AndroidUtilities.bsDp(7), AndroidUtilities.bsDp(1));
+
+            if (currentUser != null && (currentUser.id / 1000 == 333 || currentUser.id % 1000 == 0)) {
+                emptyView.setText(LocaleController.getString("GotAQuestion", R.string.GotAQuestion));
+            }
+
+            chatListView.setOnItemClickListener(onItemClickListener);
+            chatListView.setOnItemLongClickListener(onItemLongClickListener);
+
+            final Rect scrollRect = new Rect();
+
+            chatListView.setOnInterceptTouchEventListener(new LayoutListView.OnInterceptTouchEventListener() {
+                @Override
+                public boolean onInterceptTouchEvent(MotionEvent event) {
+                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                        int x = (int) event.getX();
+                        int y = (int) event.getY();
+                        int count = chatListView.getChildCount();
+                        Rect rect = new Rect();
+                        for (int a = 0; a < count; a++) {
+                            View view = chatListView.getChildAt(a);
+                            int top = view.getTop();
+                            int bottom = view.getBottom();
+                            view.getLocalVisibleRect(rect);
+                            if (top > y || bottom < y) {
+                                continue;
+                            }
+                            if (!(view instanceof ChatMediaCell)) {
+                                break;
+                            }
+                            final ChatMediaCell cell = (ChatMediaCell) view;
+                            final MessageObject messageObject = cell.getMessageObject();
+                            if (messageObject == null || !messageObject.isSecretPhoto() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
+                                break;
+                            }
+                            File file = FileLoader.getPathToMessage(messageObject.messageOwner);
+                            if (!file.exists()) {
+                                break;
+                            }
+                            startX = x;
+                            startY = y;
+                            chatListView.setOnItemClickListener(null);
+                            openSecretPhotoRunnable = new Runnable() {
+                                @Override
+                                public void run() {
+                                    if (openSecretPhotoRunnable == null) {
+                                        return;
+                                    }
+                                    chatListView.requestDisallowInterceptTouchEvent(true);
+                                    chatListView.setOnItemLongClickListener(null);
+                                    chatListView.setLongClickable(false);
+                                    openSecretPhotoRunnable = null;
+                                    if (sendSecretMessageRead(messageObject)) {
+                                        cell.invalidate();
+                                    }
+
+                                    //todo:research
+                                    //SecretPhotoViewer.getInstance().setParentActivity(getParentActivity());
+                                    //SecretPhotoViewer.getInstance().openPhoto(messageObject);
+                                }
+                            };
+                            AndroidUtilities.runOnUIThread(openSecretPhotoRunnable, 100);
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+            });
+
+            chatListView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
+                        if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    chatListView.setOnItemClickListener(onItemClickListener);
+                                }
+                            }, 150);
+                            if (openSecretPhotoRunnable != null) {
+                                AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
+                                openSecretPhotoRunnable = null;
+                                try {
+                                    Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            } else {
+                                if (SecretPhotoViewer.getInstance().isVisible()) {
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setOnItemLongClickListener(onItemLongClickListener);
+                                            chatListView.setLongClickable(true);
+                                        }
+                                    });
+                                    SecretPhotoViewer.getInstance().closePhoto();
+                                }
+                            }
+                        } else if (event.getAction() != MotionEvent.ACTION_DOWN) {
+                            if (SecretPhotoViewer.getInstance().isVisible()) {
+                                return true;
+                            } else if (openSecretPhotoRunnable != null) {
+                                if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                                    if (Math.hypot(startX - event.getX(), startY - event.getY()) > AndroidUtilities.bsDp(5)) {
+                                        AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
+                                        openSecretPhotoRunnable = null;
+                                    }
+                                } else {
+                                    AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
+                                    openSecretPhotoRunnable = null;
+                                }
+                            }
+                        }
+                    }
+                    return false;
+                }
+            });
+
+            chatListView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL || i == AbsListView.OnScrollListener.SCROLL_STATE_FLING && highlightMessageId != Integer.MAX_VALUE) {
+                        highlightMessageId = Integer.MAX_VALUE;
+                        updateVisibleRows();
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (visibleItemCount > 0) {
+                        if (firstVisibleItem <= 10) {
+                            if (!endReached && !loading) {
+                                if (messagesByDays.size() != 0) {
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced && startLoadFromMessageId == 0, minDate, classGuid, 0, 0, 0, startLoadFromMessageId == 0);
+                                } else {
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, 0, !cacheEndReaced && startLoadFromMessageId == 0, minDate, classGuid, 0, 0, 0, startLoadFromMessageId == 0);
+                                }
+                                loading = true;
+                            }
+                        }
+                        if (firstVisibleItem + visibleItemCount >= totalItemCount - 6) {
+                            if (!forward_end_reached && !loadingForward) {
+                                MessagesController.getInstance().loadMessages(dialog_id, 20, minMessageId, startLoadFromMessageId == 0, maxDate, classGuid, 1, 0, 0, startLoadFromMessageId == 0);
+                                loadingForward = true;
+                            }
+                        }
+                        if (firstVisibleItem + visibleItemCount == totalItemCount && forward_end_reached) {
+                            showPagedownButton(false, true);
+                        }
+                    }
+                    for (int a = 0; a < visibleItemCount; a++) {
+                        View view = absListView.getChildAt(a);
+                        if (view instanceof ChatMessageCell) {
+                            ChatMessageCell messageCell = (ChatMessageCell)view;
+                            messageCell.getLocalVisibleRect(scrollRect);
+                            messageCell.setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
+                        }
+                    }
+                }
+            });
+
+            bottomOverlayChatText = (TextView)fragmentView.findViewById(R.id.bottom_overlay_chat_text);
+            TextView textView = (TextView)fragmentView.findViewById(R.id.secret_title);
+            textView.setText(LocaleController.getString("EncryptedDescriptionTitle", R.string.EncryptedDescriptionTitle));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description1);
+            textView.setText(LocaleController.getString("EncryptedDescription1", R.string.EncryptedDescription1));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description2);
+            textView.setText(LocaleController.getString("EncryptedDescription2", R.string.EncryptedDescription2));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description3);
+            textView.setText(LocaleController.getString("EncryptedDescription3", R.string.EncryptedDescription3));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description4);
+            textView.setText(LocaleController.getString("EncryptedDescription4", R.string.EncryptedDescription4));
+
+            if (loading && messages.isEmpty()) {
+                progressView.setVisibility(View.VISIBLE);
+                chatListView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.INVISIBLE);
+                chatListView.setEmptyView(emptyViewContainer);
+            }
+
+            pagedownButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    scrollToLastMessage();
+                }
+            });
+
+
+            updateBottomOverlay();
+
+            chatActivityEnterView.setContainerView(this, fragmentView);
+            chatActivityEnterView.addToAttachLayout(menuItem);
+            menuItem.setVisibility(View.VISIBLE);
+
+            if (currentEncryptedChat != null) {
+                emptyView.setVisibility(View.INVISIBLE);
+                View secretChatPlaceholder = contentView.findViewById(R.id.secret_placeholder);
+                secretChatPlaceholder.setVisibility(View.VISIBLE);
+                secretViewStatusTextView = (TextView) contentView.findViewById(R.id.invite_text);
+                secretViewStatusTextView.setTextColor(Color.parseColor("#000000"));
+                secretChatPlaceholder.setPadding(AndroidUtilities.bsDp(16), AndroidUtilities.bsDp(12), AndroidUtilities.bsDp(16), AndroidUtilities.bsDp(12));
+
+                View v = contentView.findViewById(R.id.secret_placeholder);
+                v.setVisibility(View.VISIBLE);
+
+                if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.last_name));
+                    }
+                } else {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.last_name));
+                    }
+                }
+
+                updateSecretStatus();
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+
+    private boolean sendSecretMessageRead(MessageObject messageObject) {
+        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
+            return false;
+        }
+        MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance().getCurrentTime();
+        return true;
+    }
+
+    private void scrollToLastMessage() {
+        if (forward_end_reached && first_unread_id == 0 && startLoadFromMessageId == 0) {
+            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+        } else {
+            messages.clear();
+            messagesByDays.clear();
+            messagesDict.clear();
+            progressView.setVisibility(View.VISIBLE);
+            chatListView.setEmptyView(null);
+            if (currentEncryptedChat == null) {
+                maxMessageId = Integer.MAX_VALUE;
+                minMessageId = Integer.MIN_VALUE;
+            } else {
+                maxMessageId = Integer.MIN_VALUE;
+                minMessageId = Integer.MAX_VALUE;
+            }
+            maxDate = Integer.MIN_VALUE;
+            minDate = 0;
+            forward_end_reached = true;
+            loading = true;
+            startLoadFromMessageId = 0;
+            chatAdapter.notifyDataSetChanged();
+            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, 0, 0, 0, true);
+        }
+    }
+
+    private void showPagedownButton(boolean show, boolean animated) {
+        if (pagedownButton == null) {
+            return;
+        }
+        if (show) {
+            if (pagedownButton.getVisibility() == View.GONE) {
+                if (animated) {
+                    pagedownButton.setVisibility(View.VISIBLE);
+                    ViewProxy.setAlpha(pagedownButton, 0);
+                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 1.0f).setDuration(200).start();
+                } else {
+                    pagedownButton.setVisibility(View.VISIBLE);
+                }
+            }
+        } else {
+            if (pagedownButton.getVisibility() == View.VISIBLE) {
+                if (animated) {
+                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 0.0f).setDuration(200).addListener(new AnimatorListenerAdapterProxy() {
+                        @Override
+                        public void onAnimationEnd(Object animation) {
+                            pagedownButton.setVisibility(View.GONE);
+                        }
+                    }).start();
+                } else {
+                    pagedownButton.setVisibility(View.GONE);
+                }
+            }
+        }
+    }
+
+    private void updateSecretStatus() {
+        if (bottomOverlay == null) {
+            return;
+        }
+        if (currentEncryptedChat == null || secretViewStatusTextView == null) {
+            bottomOverlay.setVisibility(View.GONE);
+            return;
+        }
+        boolean hideKeyboard = false;
+        if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+            bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+            bottomOverlayText.setText(Html.fromHtml(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "<b>" + currentUser.first_name + "</b>")));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+            bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            chatActivityEnterView.setFieldText("");
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().remove("dialog_" + dialog_id).commit();
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
+            bottomOverlay.setVisibility(View.GONE);
+        }
+        if (hideKeyboard) {
+            chatActivityEnterView.hideEmojiPopup();
+            AndroidUtilities.hideKeyboard(fragmentView);
+        }
+        checkActionBarMenu();
+    }
+
+    private void checkActionBarMenu() {
+        if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) ||
+                currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty)) {
+            if (menuItem != null) {
+                menuItem.setVisibility(View.GONE);
+            }
+            if (timeItem != null) {
+                timeItem.setVisibility(View.GONE);
+            }
+            if (timeItem2 != null) {
+                timeItem2.setVisibility(View.GONE);
+            }
+        } else {
+            if (menuItem != null) {
+                menuItem.setVisibility(View.VISIBLE);
+            }
+           if (timeItem != null) {
+                timeItem.setVisibility(View.VISIBLE);
+            }
+            if (timeItem2 != null) {
+                timeItem2.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (timerDrawable != null) {
+            timerDrawable.setTime(currentEncryptedChat.ttl);
+        }
+
+        checkAndUpdateAvatar();
+    }
+
+    private int updateOnlineCount() {
+        if (info == null) {
+            return 0;
+        }
+        onlineCount = 0;
+        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+        for (TLRPC.TL_chatParticipant participant : info.participants) {
+            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                onlineCount++;
+            }
+        }
+        return onlineCount;
+    }
+
+    private int getMessageType(MessageObject messageObject) {
+        if (messageObject == null) {
+            return -1;
+        }
+        if (currentEncryptedChat == null) {
+            boolean isBroadcastError = isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isSendError();
+            if (!isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
+                if (messageObject.isSendError()) {
+                    if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                        return 0;
+                    } else {
+                        return 6;
+                    }
+                } else {
+                    return -1;
+                }
+            } else {
+                if (messageObject.type == 6) {
+                    return -1;
+                } else if (messageObject.type == 10 || messageObject.type == 11) {
+                    if (messageObject.messageOwner.id == 0) {
+                        return -1;
+                    }
+                    return 1;
+                } else {
+                    if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                        if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo ||
+                                messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto ||
+                                messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                            boolean canSave = false;
+                            if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                                File f = new File(messageObject.messageOwner.attachPath);
+                                if (f.exists()) {
+                                    canSave = true;
+                                }
+                            }
+                            if (!canSave) {
+                                File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                                if (f.exists()) {
+                                    canSave = true;
+                                }
+                            }
+                            if (canSave) {
+                                if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                    String mime = messageObject.messageOwner.media.document.mime_type;
+                                    if (mime != null && mime.endsWith("/xml")) {
+                                        return 5;
+                                    }
+                                }
+                                return 4;
+                            }
+                        }
+                        return 2;
+                    } else {
+                        return 3;
+                    }
+                }
+            }
+        } else {
+            if (messageObject.type == 6) {
+                return -1;
+            } else if (messageObject.isSendError()) {
+                if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                    return 0;
+                } else {
+                    return 6;
+                }
+            } else if (messageObject.type == 10 || messageObject.type == 11) {
+                if (messageObject.isSending()) {
+                    return -1;
+                } else {
+                    return 1;
+                }
+            } else {
+                if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                    if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo ||
+                            messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto ||
+                            messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                        boolean canSave = false;
+                        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                            File f = new File(messageObject.messageOwner.attachPath);
+                            if (f.exists()) {
+                                canSave = true;
+                            }
+                        }
+                        if (!canSave) {
+                            File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                            if (f.exists()) {
+                                canSave = true;
+                            }
+                        }
+                        if (canSave) {
+                            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                String mime = messageObject.messageOwner.media.document.mime_type;
+                                if (mime != null && mime.endsWith("text/xml")) {
+                                    return 5;
+                                }
+                            }
+                            if (messageObject.messageOwner.ttl <= 0) {
+                                return 4;
+                            }
+                        }
+                    }
+                    return 2;
+                } else {
+                    return 3;
+                }
+            }
+        }
+    }
+
+    private void updateTitle() {
+        if (nameTextView == null) {
+            return;
+        }
+        if (currentChat != null) {
+            nameTextView.setText(currentChat.title);
+        } else if (currentUser != null) {
+            if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+                if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                    nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
+                } else {
+                    nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                }
+            } else {
+                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            }
+        }
+    }
+
+    private void updateSubtitle() {
+        if (onlineTextView == null) {
+            return;
+        }
+        CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
+        if (printString != null) {
+            printString = TextUtils.replace(printString, new String[]{"..."}, new String[]{""});
+        }
+        if (printString == null || printString.length() == 0) {
+            setTypingAnimation(false);
+            if (currentChat != null) {
+                if (currentChat instanceof TLRPC.TL_chatForbidden) {
+                    onlineTextView.setText(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
+                } else if (currentChat.left) {
+                    onlineTextView.setText(LocaleController.getString("YouLeft", R.string.YouLeft));
+                } else {
+                    int count = currentChat.participants_count;
+                    if (info != null) {
+                        count = info.participants.size();
+                    }
+                    if (onlineCount > 1 && count != 0) {
+                        onlineTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
+                    } else {
+                        onlineTextView.setText(LocaleController.formatPluralString("Members", count));
+                    }
+                }
+            } else if (currentUser != null) {
+                TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+                if (user != null) {
+                    currentUser = user;
+                }
+                String newStatus = LocaleController.formatUserStatus(currentUser);
+                if (lastStatus == null || lastPrintString != null || lastStatus != null && !lastStatus.equals(newStatus)) {
+                    lastStatus = newStatus;
+                    onlineTextView.setText(newStatus);
+                }
+            }
+            lastPrintString = null;
+        } else {
+            lastPrintString = printString;
+            onlineTextView.setText(printString);
+            setTypingAnimation(true);
+        }
+    }
+
+    private void setTypingAnimation(boolean start) {
+        if (actionBar == null) {
+            return;
+        }
+        if (start) {
+            try {
+                if (onlineTextView != null) {
+                    onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
+                    onlineTextView.setCompoundDrawablePadding(AndroidUtilities.bsDp(4));
+                }
+                if (typingDotsDrawable != null) {
+                    typingDotsDrawable.start();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            if (onlineTextView != null) {
+                onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
+                onlineTextView.setCompoundDrawablePadding(0);
+            }
+            if (typingDotsDrawable != null) {
+                typingDotsDrawable.stop();
+            }
+        }
+    }
+
+
+    private void checkAndUpdateAvatar() {
+        TLRPC.FileLocation newPhoto = null;
+        BSAvatarDrawable avatarDrawable = null;
+        if (currentUser != null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user == null) {
+                return;
+            }
+            currentUser = user;
+            if (currentUser.photo != null) {
+                newPhoto = currentUser.photo.photo_small;
+            }
+            avatarDrawable = new BSAvatarDrawable(currentUser);
+        } else if (currentChat != null) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
+            if (chat == null) {
+                return;
+            }
+            currentChat = chat;
+            if (currentChat.photo != null) {
+                newPhoto = currentChat.photo.photo_small;
+            }
+            avatarDrawable = new BSAvatarDrawable(currentChat);
+        }
+        if (avatarImageView != null) {
+            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
+        }
+    }
+
+
+    public boolean openVideoEditor(String videoPath, boolean removeLast) {
+        Bundle args = new Bundle();
+        args.putString("videoPath", videoPath);
+        VideoEditorActivity fragment = new VideoEditorActivity(args);
+        fragment.setDelegate(new VideoEditorActivity.VideoEditorActivityDelegate() {
+            @Override
+            public void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration) {
+                TLRPC.VideoEditedInfo videoEditedInfo = new TLRPC.VideoEditedInfo();
+                videoEditedInfo.startTime = startTime;
+                videoEditedInfo.endTime = endTime;
+                videoEditedInfo.rotationValue = rotationValue;
+                videoEditedInfo.originalWidth = originalWidth;
+                videoEditedInfo.originalHeight = originalHeight;
+                videoEditedInfo.bitrate = bitrate;
+                videoEditedInfo.resultWidth = resultWidth;
+                videoEditedInfo.resultHeight = resultHeight;
+                videoEditedInfo.originalPath = videoPath;
+                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id);
+            }
+        });
+        return true;
+    }
+
+
+    private void removeUnreadPlane(boolean reload) {
+        if (unreadMessageObject != null) {
+            messages.remove(unreadMessageObject);
+            forward_end_reached = true;
+            first_unread_id = 0;
+            last_message_id = 0;
+            unread_to_load = 0;
+            unreadMessageObject = null;
+            if (reload) {
+                chatAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.messagesDidLoaded) {
+
+            long did = (Long) args[0];
+            if (did == dialog_id) {
+                loadsCount++;
+                int count = (Integer) args[1];
+                boolean isCache = (Boolean) args[3];
+                int fnid = (Integer) args[4];
+                int last_unread_date = (Integer) args[8];
+                int load_type = (Integer) args[9];
+                boolean wasUnread = false;
+                if (fnid != 0) {
+                    first_unread_id = fnid;
+                    last_message_id = (Integer) args[5];
+                    unread_to_load = (Integer) args[7];
+                } else if (startLoadFromMessageId != 0 && load_type == 3) {
+                    last_message_id = (Integer) args[5];
+                    first_message_id = (Integer) args[6];
+                }
+                ArrayList<BSMessageObject> messArr = new ArrayList<>();
+                for (MessageObject messageObject : (ArrayList<MessageObject>) args[2]) {
+                    messArr.add(new BSMessageObject(messageObject.messageOwner, messageObject.originalUser));
+                }
+                int newRowsCount = 0;
+
+                forward_end_reached = startLoadFromMessageId == 0 && last_message_id == 0;
+
+                if (loadsCount == 1 && messArr.size() > 20) {
+                    loadsCount++;
+                }
+
+                if (firstLoading) {
+                    if (!forward_end_reached) {
+                        messages.clear();
+                        messagesByDays.clear();
+                        messagesDict.clear();
+                        if (currentEncryptedChat == null) {
+                            maxMessageId = Integer.MAX_VALUE;
+                            minMessageId = Integer.MIN_VALUE;
+                        } else {
+                            maxMessageId = Integer.MIN_VALUE;
+                            minMessageId = Integer.MAX_VALUE;
+                        }
+                        maxDate = Integer.MIN_VALUE;
+                        minDate = 0;
+                    }
+                    firstLoading = false;
+                }
+
+                if (load_type == 1) {
+                    Collections.reverse(messArr);
+                }
+
+                for (int a = 0; a < messArr.size(); a++) {
+                    BSMessageObject obj = messArr.get(a);
+                    if (messagesDict.containsKey(obj.messageOwner.id)) {
+                        continue;
+                    }
+
+                    if (obj.messageOwner.id > 0) {
+                        maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
+                        minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                    } else if (currentEncryptedChat != null) {
+                        maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
+                        minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                    }
+                    if (obj.messageOwner.date != 0) {
+                        maxDate = Math.max(maxDate, obj.messageOwner.date);
+                        if (minDate == 0 || obj.messageOwner.date < minDate) {
+                            minDate = obj.messageOwner.date;
+                        }
+                    }
+
+                    if (obj.type < 0) {
+                        continue;
+                    }
+
+                    if (!obj.isOut() && obj.isUnread()) {
+                        wasUnread = true;
+                    }
+                    messagesDict.put(obj.messageOwner.id, obj);
+                    ArrayList<BSMessageObject> dayArray = messagesByDays.get(obj.dateKey);
+
+                    if (dayArray == null) {
+                        dayArray = new ArrayList<>();
+                        messagesByDays.put(obj.dateKey, dayArray);
+
+                        TLRPC.Message dateMsg = new TLRPC.Message();
+                        dateMsg.message = LocaleController.formatDateChat(obj.messageOwner.date);
+                        dateMsg.id = 0;
+                        BSMessageObject dateObj = new BSMessageObject(dateMsg, null);
+                        dateObj.type = 10;
+                        dateObj.contentType = 4;
+                        if (load_type == 1) {
+                            messages.add(0, dateObj);
+                        } else {
+                            messages.add(dateObj);
+                        }
+                        newRowsCount++;
+                    }
+
+                    newRowsCount++;
+                    dayArray.add(obj);
+                    if (load_type == 1) {
+                        messages.add(0, obj);
+                    } else {
+                        messages.add(messages.size() - 1, obj);
+                    }
+
+                    if (load_type == 2 && obj.messageOwner.id == first_unread_id) {
+                        TLRPC.Message dateMsg = new TLRPC.Message();
+                        dateMsg.message = "";
+                        dateMsg.id = 0;
+                        BSMessageObject dateObj = new BSMessageObject(dateMsg, null);
+                        dateObj.contentType = dateObj.type = 6;
+                        boolean dateAdded = true;
+                        if (a != messArr.size() - 1) {
+                            BSMessageObject next = messArr.get(a + 1);
+                            dateAdded = !next.dateKey.equals(obj.dateKey);
+                        }
+                        messages.add(messages.size() - (dateAdded ? 0 : 1), dateObj);
+                        unreadMessageObject = dateObj;
+                        scrollToMessage = unreadMessageObject;
+                        scrollToMessageMiddleScreen = false;
+                        newRowsCount++;
+                    } else if (load_type == 3 && obj.messageOwner.id == startLoadFromMessageId) {
+                        highlightMessageId = obj.messageOwner.id;
+                        scrollToMessage = obj;
+                        if (isCache) {
+                            startLoadFromMessageId = 0;
+                        }
+                        scrollToMessageMiddleScreen = true;
+                    } else if (load_type == 1 && startLoadFromMessageId != 0 && first_message_id != 0 && obj.messageOwner.id >= first_message_id) {
+                        startLoadFromMessageId = 0;
+                    }
+
+                    if (obj.messageOwner.id == last_message_id) {
+                        forward_end_reached = true;
+                    }
+                }
+
+                if (forward_end_reached) {
+                    first_unread_id = 0;
+                    first_message_id = 0;
+                    last_message_id = 0;
+                }
+
+                if (load_type == 1) {
+                    if (messArr.size() != count) {
+                        forward_end_reached = true;
+                        first_unread_id = 0;
+                        last_message_id = 0;
+                        first_message_id = 0;
+                        startLoadFromMessageId = 0;
+                    }
+
+                    chatAdapter.notifyDataSetChanged();
+                    loadingForward = false;
+                } else {
+                    if (messArr.size() != count) {
+                        if (isCache) {
+                            cacheEndReaced = true;
+                            if (currentEncryptedChat != null || isBroadcast) {
+                                endReached = true;
+                            }
+                        } else {
+                            cacheEndReaced = true;
+                            endReached = true;
+                        }
+                    }
+                    loading = false;
+
+                    if (chatListView != null) {
+                        if (first || scrollToTopOnResume) {
+                            chatAdapter.notifyDataSetChanged();
+                            if (scrollToMessage != null) {
+                                final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.bsDp(48)) / 2) : 0;
+                                if (messages.get(messages.size() - 1) == scrollToMessage) {
+                                    chatListView.setSelectionFromTop(0, AndroidUtilities.bsDp(-11) + yOffset);
+                                } else {
+                                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.bsDp(-11) + yOffset);
+                                }
+                                ViewTreeObserver obs = chatListView.getViewTreeObserver();
+                                obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                                    @Override
+                                    public boolean onPreDraw() {
+                                        if (!messages.isEmpty()) {
+                                            if (messages.get(messages.size() - 1) == scrollToMessage) {
+                                                chatListView.setSelectionFromTop(0, AndroidUtilities.bsDp(-11) + yOffset);
+                                            } else {
+                                                chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.bsDp(-11) + yOffset);
+                                            }
+                                        }
+                                        chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
+                                        return true;
+                                    }
+                                });
+                                chatListView.invalidate();
+                                showPagedownButton(true, true);
+                            } else {
+                                chatListView.post(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                    }
+                                });
+                            }
+                        } else {
+                            int firstVisPos = chatListView.getLastVisiblePosition();
+                            View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
+                            int top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
+                            chatAdapter.notifyDataSetChanged();
+                            chatListView.setSelectionFromTop(firstVisPos + newRowsCount - (endReached ? 1 : 0), top);
+                        }
+
+                        if (paused) {
+                            scrollToTopOnResume = true;
+                            if (scrollToMessage != null) {
+                                scrollToTopUnReadOnResume = true;
+                            }
+                        }
+
+                        if (first) {
+                            if (chatListView.getEmptyView() == null) {
+                                chatListView.setEmptyView(emptyViewContainer);
+                            }
+                        }
+                    } else {
+                        scrollToTopOnResume = true;
+                        if (scrollToMessage != null) {
+                            scrollToTopUnReadOnResume = true;
+                        }
+                    }
+                }
+
+                if (first && messages.size() > 0) {
+                    final boolean wasUnreadFinal = wasUnread;
+                    final int last_unread_date_final = last_unread_date;
+                    final int lastid = messages.get(0).messageOwner.id;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (last_message_id != 0) {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, lastid, last_message_id, 0, last_unread_date_final, wasUnreadFinal, false);
+                            } else {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, lastid, minMessageId, 0, maxDate, wasUnreadFinal, false);
+                            }
+                        }
+                    }, 700);
+                    first = false;
+                }
+
+                if (progressView != null) {
+                    progressView.setVisibility(View.INVISIBLE);
+                }
+            }
+        } else if (id == NotificationCenter.emojiDidLoaded) {
+            if (chatListView != null) {
+                chatListView.invalidateViews();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int updateMask = (Integer) args[0];
+            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+                updateTitle();
+            }
+            boolean updateSubtitle = false;
+            if ((updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                if (currentChat != null) {
+                    int lastCount = onlineCount;
+                    if (lastCount != updateOnlineCount()) {
+                        updateSubtitle = true;
+                    }
+                } else {
+                    updateSubtitle = true;
+                }
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                checkAndUpdateAvatar();
+                updateVisibleRows();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
+                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                    updateSubtitle = true;
+                }
+            }
+            if (updateSubtitle) {
+                updateSubtitle();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_USER_PHONE) != 0) {
+                updateContactStatus();
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long did = (Long) args[0];
+            if (did == dialog_id) {
+                boolean updateChat = false;
+                boolean hasFromMe = false;
+
+                ArrayList<BSMessageObject> arr = new ArrayList<>();
+                for (MessageObject messageObject : (ArrayList<MessageObject>) args[1]) {
+                    arr.add(new BSMessageObject(messageObject.messageOwner, messageObject.originalUser));
+                }
+
+                if (currentEncryptedChat != null && arr.size() == 1) {
+                    BSMessageObject obj = arr.get(0);
+
+                    if (currentEncryptedChat != null && obj.isOut() && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                            obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && getParentActivity() != null) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
+                        if (AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 17 && currentEncryptedChat.ttl > 0 && currentEncryptedChat.ttl <= 60) {
+                            //todo:notify
+                        }
+                    }
+                }
+
+                if (!forward_end_reached) {
+                    int currentMaxDate = Integer.MIN_VALUE;
+                    int currentMinMsgId = Integer.MIN_VALUE;
+                    if (currentEncryptedChat != null) {
+                        currentMinMsgId = Integer.MAX_VALUE;
+                        currentMinMsgId = Integer.MAX_VALUE;
+                    }
+                    boolean currentMarkAsRead = false;
+
+                    for (BSMessageObject obj : arr) {
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
+                            timerDrawable.setTime(action.ttl_seconds);
+                        }
+                        if (obj.isOut() && obj.isSending()) {
+                            scrollToLastMessage();
+                            return;
+                        }
+                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                            continue;
+                        }
+                        currentMaxDate = Math.max(currentMaxDate, obj.messageOwner.date);
+                        if (obj.messageOwner.id > 0) {
+                            currentMinMsgId = Math.max(obj.messageOwner.id, currentMinMsgId);
+                            last_message_id = Math.max(last_message_id, obj.messageOwner.id);
+                        } else if (currentEncryptedChat != null) {
+                            currentMinMsgId = Math.min(obj.messageOwner.id, currentMinMsgId);
+                            last_message_id = Math.min(last_message_id, obj.messageOwner.id);
+                        }
+
+                        if (!obj.isOut() && obj.isUnread()) {
+                            unread_to_load++;
+                            currentMarkAsRead = true;
+                        }
+                        if (obj.type == 10 || obj.type == 11) {
+                            updateChat = true;
+                        }
+                    }
+
+                    if (currentMarkAsRead) {
+                        if (paused) {
+                            readWhenResume = true;
+                            readWithDate = currentMaxDate;
+                            readWithMid = currentMinMsgId;
+                        } else {
+                            if (messages.size() > 0) {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, currentMinMsgId, 0, currentMaxDate, true, false);
+                            }
+                        }
+                    }
+                    updateVisibleRows();
+                } else {
+                    boolean markAsRead = false;
+                    int oldCount = messages.size();
+                    for (BSMessageObject obj : arr) {
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
+                            timerDrawable.setTime(action.ttl_seconds);
+                        }
+                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                            continue;
+                        }
+                        if (minDate == 0 || obj.messageOwner.date < minDate) {
+                            minDate = obj.messageOwner.date;
+                        }
+
+                        if (obj.isOut()) {
+                            removeUnreadPlane(false);
+                            hasFromMe = true;
+                        }
+
+                        if (!obj.isOut() && unreadMessageObject != null) {
+                            unread_to_load++;
+                        }
+
+                        if (obj.messageOwner.id > 0) {
+                            maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
+                            minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                        } else if (currentEncryptedChat != null) {
+                            maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
+                            minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                        }
+                        maxDate = Math.max(maxDate, obj.messageOwner.date);
+                        messagesDict.put(obj.messageOwner.id, obj);
+                        ArrayList<BSMessageObject> dayArray = messagesByDays.get(obj.dateKey);
+                        if (dayArray == null) {
+                            dayArray = new ArrayList<>();
+                            messagesByDays.put(obj.dateKey, dayArray);
+
+                            TLRPC.Message dateMsg = new TLRPC.Message();
+                            dateMsg.message = LocaleController.formatDateChat(obj.messageOwner.date);
+                            dateMsg.id = 0;
+                            BSMessageObject dateObj = new BSMessageObject(dateMsg, null);
+                            dateObj.type = 10;
+                            dateObj.contentType = 4;
+                            messages.add(0, dateObj);
+                        }
+                        if (!obj.isOut() && obj.isUnread()) {
+                            if (!paused) {
+                                obj.setIsRead();
+                            }
+                            markAsRead = true;
+                        }
+                        dayArray.add(0, obj);
+                        messages.add(0, obj);
+                        if (obj.type == 10 || obj.type == 11) {
+                            updateChat = true;
+                        }
+                    }
+                    if (progressView != null) {
+                        progressView.setVisibility(View.INVISIBLE);
+                    }
+                    if (chatAdapter != null) {
+                        chatAdapter.notifyDataSetChanged();
+                    } else {
+                        scrollToTopOnResume = true;
+                    }
+
+                    if (chatListView != null && chatAdapter != null) {
+                        int lastVisible = chatListView.getLastVisiblePosition();
+                        if (endReached) {
+                            lastVisible++;
+                        }
+                        if (lastVisible == oldCount || hasFromMe) {
+                            if (!firstLoading) {
+                                if (paused) {
+                                    scrollToTopOnResume = true;
+                                } else {
+                                    chatListView.post(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                        }
+                                    });
+                                }
+                            }
+                        } else {
+                            showPagedownButton(true, true);
+                        }
+                    } else {
+                        scrollToTopOnResume = true;
+                    }
+
+                    if (markAsRead) {
+                        if (paused) {
+                            readWhenResume = true;
+                            readWithDate = maxDate;
+                            readWithMid = minMessageId;
+                        } else {
+                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, true, false);
+                        }
+                    }
+                }
+                if (updateChat) {
+                    updateTitle();
+                    checkAndUpdateAvatar();
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            if (args != null && args.length > 0) {
+                long did = (Long) args[0];
+                if (did == dialog_id) {
+                    //  finishFragment();
+                }
+            } else {
+                //removeSelfFromStack();
+            }
+        } else if (id == NotificationCenter.messagesRead) {
+            ArrayList<Integer> markAsReadMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsReadMessages) {
+                BSMessageObject obj = messagesDict.get(ids);
+                if (obj != null) {
+                    obj.setIsRead();
+                    updated = true;
+                }
+            }
+            if (updated) {
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                BSMessageObject obj = messagesDict.get(ids);
+                if (obj != null) {
+                    int index = messages.indexOf(obj);
+                    if (index != -1) {
+                        messages.remove(index);
+                        messagesDict.remove(ids);
+                        ArrayList<BSMessageObject> dayArr = messagesByDays.get(obj.dateKey);
+                        dayArr.remove(obj);
+                        if (dayArr.isEmpty()) {
+                            messagesByDays.remove(obj.dateKey);
+                            messages.remove(index);
+                        }
+                        updated = true;
+                    }
+                }
+            }
+            if (messages.isEmpty()) {
+                if (!endReached && !loading) {
+                    progressView.setVisibility(View.INVISIBLE);
+                    chatListView.setEmptyView(null);
+                    if (currentEncryptedChat == null) {
+                        maxMessageId = Integer.MAX_VALUE;
+                        minMessageId = Integer.MIN_VALUE;
+                    } else {
+                        maxMessageId = Integer.MIN_VALUE;
+                        minMessageId = Integer.MAX_VALUE;
+                    }
+                    maxDate = Integer.MIN_VALUE;
+                    minDate = 0;
+                    MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, 0, 0, 0, true);
+                    loading = true;
+                }
+            }
+            if (updated && chatAdapter != null) {
+                removeUnreadPlane(false);
+                chatAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer) args[0];
+            BSMessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                Integer newMsgId = (Integer) args[1];
+                TLRPC.Message newMsgObj = (TLRPC.Message) args[2];
+                if (newMsgObj != null) {
+                    obj.messageOwner.media = newMsgObj.media;
+                    obj.generateThumbs(true);
+                }
+                messagesDict.remove(msgId);
+                messagesDict.put(newMsgId, obj);
+                obj.messageOwner.id = newMsgId;
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messageReceivedByAck) {
+            Integer msgId = (Integer) args[0];
+            BSMessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messageSendError) {
+            Integer msgId = (Integer) args[0];
+            BSMessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.chatInfoDidLoaded) {
+            int chatId = (Integer) args[0];
+            if (currentChat != null && chatId == currentChat.id) {
+                info = (TLRPC.ChatParticipants) args[1];
+                updateOnlineCount();
+                updateSubtitle();
+                if (isBroadcast) {
+                    SendMessagesHelper.getInstance().setCurrentChatInfo(info);
+                }
+            }
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            updateContactStatus();
+            updateSubtitle();
+        } else if (id == NotificationCenter.encryptedChatUpdated) {
+            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) args[0];
+            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
+                currentEncryptedChat = chat;
+                updateContactStatus();
+                updateSecretStatus();
+            }
+        } else if (id == NotificationCenter.messagesReadedEncrypted) {
+            int encId = (Integer) args[0];
+            if (currentEncryptedChat != null && currentEncryptedChat.id == encId) {
+                int date = (Integer) args[1];
+                boolean started = false;
+                for (MessageObject obj : messages) {
+                    if (!obj.isOut()) {
+                        continue;
+                    } else if (obj.isOut() && !obj.isUnread()) {
+                        break;
+                    }
+                    if (obj.messageOwner.date - 1 <= date) {
+                        obj.setIsRead();
+                    }
+                }
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.audioDidReset) {
+            Integer mid = (Integer) args[0];
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    if (view instanceof ChatAudioCell) {
+                        ChatAudioCell cell = (ChatAudioCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateButtonState();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.audioProgressDidChanged) {
+            Integer mid = (Integer) args[0];
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    if (view instanceof ChatAudioCell) {
+                        ChatAudioCell cell = (ChatAudioCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateProgress();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
+            long did = (Long) args[0];
+            if (dialog_id == did) {
+                messages.clear();
+                messagesByDays.clear();
+                messagesDict.clear();
+                progressView.setVisibility(View.INVISIBLE);
+                chatListView.setEmptyView(emptyViewContainer);
+                if (currentEncryptedChat == null) {
+                    maxMessageId = Integer.MAX_VALUE;
+                    minMessageId = Integer.MIN_VALUE;
+                } else {
+                    maxMessageId = Integer.MIN_VALUE;
+                    minMessageId = Integer.MAX_VALUE;
+                }
+                maxDate = Integer.MIN_VALUE;
+                minDate = 0;
+                chatAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.screenshotTook) {
+            updateInformationForScreenshotDetector();
+        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
+            if (currentUser != null) {
+                boolean oldValue = userBlocked;
+                userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
+                if (oldValue != userBlocked) {
+                    updateBottomOverlay();
+                }
+            }
+        } else if (id == NotificationCenter.FileNewChunkAvailable) {
+            MessageObject messageObject = (MessageObject) args[0];
+            long finalSize = (Long) args[2];
+            if (finalSize != 0 && dialog_id == messageObject.getDialogId()) {
+                BSMessageObject currentObject = messagesDict.get(messageObject.messageOwner.id);
+                if (currentObject != null) {
+                    currentObject.messageOwner.media.video.size = (int) finalSize;
+                    updateVisibleRows();
+                }
+            }
+        } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
+            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>) args[0];
+            boolean changed = false;
+            for (int i = 0; i < mids.size(); i++) {
+                int key = mids.keyAt(i);
+                ArrayList<Integer> arr = mids.get(key);
+                for (Integer mid : arr) {
+                    BSMessageObject messageObject = messagesDict.get(mid);
+                    if (messageObject != null) {
+                        messageObject.messageOwner.destroyTime = key;
+                        changed = true;
+                    }
+                }
+            }
+            if (changed) {
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.audioDidStarted) {
+            MessageObject messageObject = (MessageObject) args[0];
+            sendSecretMessageRead(messageObject);
+        } else if (id == NotificationCenter.appDidLogout) {
+            finishFragment();
+        }
+    }
+
+/*    private void updateTitleIcons() {
+        int leftIcon = currentEncryptedChat != null ? R.drawable.ic_lock_header : 0;
+        int rightIcon = MessagesController.getInstance().isDialogMuted(dialog_id) ? R.drawable.mute_fixed : 0;
+        nameTextView.setCompoundDrawablesWithIntrinsicBounds(leftIcon, 0, rightIcon, 0);
+
+        if (rightIcon != 0) {
+            muteItem.setText(LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications));
+        } else {
+            muteItem.setText(LocaleController.getString("MuteNotifications", R.string.MuteNotifications));
+        }
+    }*/
+
+    private void updateBottomOverlay() {
+        if (currentUser == null) {
+            bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
+        } else {
+            if (userBlocked) {
+                bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
+            } else {
+                bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
+            }
+        }
+        if (currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty || userBlocked)) {
+            bottomOverlayChat.setVisibility(View.VISIBLE);
+            chatActivityEnterView.setFieldFocused(false);
+        } else {
+            bottomOverlayChat.setVisibility(View.GONE);
+        }
+    }
+
+    private void updateContactStatus() {
+
+
+    }
+
+    @Override
+    public void onBSResume() {
+        super.onBSResume();
+
+        if (!AndroidUtilities.isTablet()) {
+            //getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+        }
+
+        if (chatAdapter != null) {
+            chatAdapter.notifyDataSetChanged();
+        }
+
+        checkActionBarMenu();
+
+        NotificationsController.getInstance().setOpennedDialogId(dialog_id);
+        if (scrollToTopOnResume) {
+            if (scrollToTopUnReadOnResume && scrollToMessage != null) {
+                if (chatListView != null) {
+                    final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.bsDp(48)) / 2) : 0;
+                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), -chatListView.getPaddingTop() - AndroidUtilities.bsDp(7) + yOffset);
+                }
+            } else {
+                if (chatListView != null) {
+                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                }
+            }
+            scrollToTopUnReadOnResume = false;
+            scrollToTopOnResume = false;
+            scrollToMessage = null;
+        }
+        paused = false;
+        if (readWhenResume && !messages.isEmpty()) {
+            for (BSMessageObject messageObject : messages) {
+                if (!messageObject.isUnread() && !messageObject.isFromMe()) {
+                    break;
+                }
+                if (!messageObject.isOut()) {
+                    messageObject.setIsRead();
+                }
+            }
+            readWhenResume = false;
+            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true, false);
+        }
+
+        fixLayout(true);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
+        if (lastMessageText != null) {
+            preferences.edit().remove("dialog_" + dialog_id).commit();
+            chatActivityEnterView.setFieldText(lastMessageText);
+        }
+        if (bottomOverlayChat != null && bottomOverlayChat.getVisibility() != View.VISIBLE) {
+            chatActivityEnterView.setFieldFocused(true);
+        }
+        if (currentEncryptedChat != null) {
+            chatEnterTime = System.currentTimeMillis();
+            chatLeaveTime = 0;
+        }
+
+        if (startVideoEdit != null) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    openVideoEditor(startVideoEdit, false);
+                    startVideoEdit = null;
+                }
+            });
+        }
+        if(chatListView != null) {
+            chatListView.setOnItemClickListener(onItemClickListener);
+            chatListView.setOnItemLongClickListener(onItemLongClickListener);
+            chatListView.setLongClickable(true);
+        }
+
+        Bundle arguments = getIntent().getExtras();
+        String responseMessage;
+        if (arguments.containsKey(SpeechRecognizerManager.EXTRA_SPEECH_RECOGNIZER_RESULT))
+        {
+            responseMessage = arguments.getString(SpeechRecognizerManager.EXTRA_SPEECH_RECOGNIZER_RESULT);
+            this.chatActivityEnterView.setFieldText(responseMessage);
+            arguments.remove(SpeechRecognizerManager.EXTRA_SPEECH_RECOGNIZER_RESULT);
+        }
+    }
+
+
+    @Override
+    public void onBSPause() {
+        super.onBSPause();
+        chatActivityEnterView.hideEmojiPopup();
+        paused = true;
+        NotificationsController.getInstance().setOpennedDialogId(0);
+
+        String text = chatActivityEnterView.getFieldText();
+        if (text != null) {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putString("dialog_" + dialog_id, text);
+            editor.commit();
+        }
+
+        chatActivityEnterView.setFieldFocused(false);
+        MessagesController.getInstance().cancelTyping(dialog_id);
+
+        if (currentEncryptedChat != null) {
+            chatLeaveTime = System.currentTimeMillis();
+            updateInformationForScreenshotDetector();
+        }
+    }
+
+    private void updateInformationForScreenshotDetector() {
+        if (currentEncryptedChat == null) {
+            return;
+        }
+        ArrayList<Long> visibleMessages = new ArrayList<Long>();
+        if (chatListView != null) {
+            int count = chatListView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View view = chatListView.getChildAt(a);
+                MessageObject object = null;
+                if (view instanceof ChatBaseCell) {
+                    ChatBaseCell cell = (ChatBaseCell) view;
+                    object = cell.getMessageObject();
+                }
+                if (object != null && object.messageOwner.id < 0 && object.messageOwner.random_id != 0) {
+                    visibleMessages.add(object.messageOwner.random_id);
+                }
+            }
+        }
+        MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
+    }
+
+    private void fixLayout(final boolean resume) {
+
+        if (!resume && chatListView != null) {
+            final int lastPos = chatListView.getLastVisiblePosition();
+            chatListView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    if (chatListView == null) {
+                        return false;
+                    }
+                    chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    if (lastPos >= messages.size() - 1) {
+                        chatListView.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                            }
+                        });
+                    }
+                    return false;
+                }
+            });
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        fixLayout(false);
+    }
+
+    @Override
+    protected boolean onBackPressed() {
+        /*View v = BSPhotoViewer.getInstance().getWindowView();
+        if(BSPhotoViewer.getInstance().isVisible()){
+            getBSDrawer().removeViewFromBS(v);
+            getBSDrawer().findViewById(R.id.chat_list_view).setEnabled(true);
+            return true;
+        } else if (chatActivityEnterView.isEmojiPopupShowing()) {
+            chatActivityEnterView.hideEmojiPopup();
+            return true;
+        } else {
+            presentFragment(BSMessagesActivity.class, true);
+            return false;
+        }*/
+        return super.onBackPressed();
+    }
+
+    private void updateVisibleRows() {
+        if (chatListView == null) {
+            return;
+        }
+        int count = chatListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View view = chatListView.getChildAt(a);
+            if (view instanceof ChatBaseCell) {
+                ChatBaseCell cell = (ChatBaseCell)view;
+
+                boolean disableSelection = false;
+                boolean selected = false;
+                if (actionBar.isActionModeShowed()) {
+                    if (selectedMessagesIds.containsKey(cell.getMessageObject().messageOwner.id)) {
+                        view.setBackgroundColor(Color.LTGRAY);
+                        selected = true;
+                    } else {
+                        view.setBackgroundColor(0);
+                    }
+                    disableSelection = true;
+                } else {
+                    view.setBackgroundColor(0);
+                }
+
+                cell.setMessageObject(cell.getMessageObject());
+
+                cell.setCheckPressed(!disableSelection, disableSelection && selected);
+
+                if (highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == highlightMessageId) {
+                    cell.setCheckPressed(false, true);
+                }
+            }
+        }
+    }
+
+    @Override
+    public BSPhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null) {
+            return null;
+        }
+        int count = chatListView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            BSMessageObject messageToOpen = null;
+            ImageReceiver imageReceiver = null;
+            View view = chatListView.getChildAt(a);
+            if (view instanceof BSChatMediaCell) {
+                BSChatMediaCell cell = (BSChatMediaCell)view;
+                BSMessageObject message = (BSMessageObject) cell.getMessageObject();
+                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                    messageToOpen = message;
+                    imageReceiver = cell.getPhotoImage();
+                }
+            } else if (view instanceof ChatActionCell) {
+                ChatActionCell cell = (ChatActionCell)view;
+                BSMessageObject message = (BSMessageObject) cell.getMessageObject();
+                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                    messageToOpen = message;
+                    imageReceiver = cell.getPhotoImage();
+                }
+            }
+
+            if (messageToOpen != null) {
+                int coords[] = new int[2];
+                view.getLocationInWindow(coords);
+                BSPhotoViewer.PlaceProviderObject object = new BSPhotoViewer.PlaceProviderObject();
+                object.viewX = coords[0];
+                object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                object.parentView = chatListView;
+                object.imageReceiver = imageReceiver;
+                object.thumb = imageReceiver.getBitmap();
+                object.radius = imageReceiver.getRoundRadius();
+                return object;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() {
+        getBSDrawer().removeViewFromBS(BSPhotoViewer.getInstance().getWindowView());
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    private void forwardSelectedMessages(long did, boolean fromMyName) {
+        if (forwaringMessage != null) {
+            if (!fromMyName) {
+                if (forwaringMessage.messageOwner.id > 0) {
+                    SendMessagesHelper.getInstance().sendMessage(forwaringMessage, did);
+                }
+            } else {
+                SendMessagesHelper.getInstance().processForwardFromMyName(forwaringMessage, did);
+            }
+            forwaringMessage = null;
+        } else {
+            ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+            Collections.sort(ids);
+            for (Integer id : ids) {
+                if (!fromMyName) {
+                    if (id > 0) {
+                        SendMessagesHelper.getInstance().sendMessage(selectedMessagesIds.get(id), did);
+                    }
+                } else {
+                    SendMessagesHelper.getInstance().processForwardFromMyName(selectedMessagesIds.get(id), did);
+                }
+            }
+            selectedMessagesCanCopyIds.clear();
+            selectedMessagesIds.clear();
+            actionBar.hideActionMode();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(BSMessagesActivity activity, long did, boolean param) {
+        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
+            if (isBroadcast) {
+                param = true;
+            }
+            if (did != dialog_id) {
+                int lower_part = (int)did;
+                if (lower_part != 0) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("scrollToTopOnResume", scrollToTopOnResume);
+                    if (lower_part > 0) {
+                        args.putInt("user_id", lower_part);
+                    } else if (lower_part < 0) {
+                        args.putInt("chat_id", -lower_part);
+                    }
+                    forwardSelectedMessages(did, param);
+                } else {
+                    activity.finish();
+                }
+            } else {
+                activity.finishFragment();
+                forwardSelectedMessages(did, param);
+                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                scrollToTopOnResume = true;
+                if (AndroidUtilities.isTablet()) {
+                    actionBar.hideActionMode();
+                }
+            }
+        }
+    }
+
+    private class ChatAdapter extends BaseFragmentAdapter {
+
+        private Context mContext;
+
+        public ChatAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            int count = messages.size();
+            if (count != 0) {
+                if (!endReached) {
+                    count++;
+                }
+                if (!forward_end_reached) {
+                    count++;
+                }
+            }
+            return count;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            Log.d("debug","bschatadapter");
+            int offset = 1;
+            if ((!endReached || !forward_end_reached) && messages.size() != 0) {
+                if (!endReached) {
+                    offset = 0;
+                }
+                if (i == 0 && !endReached || !forward_end_reached && i == (messages.size() + 1 - offset)) {
+                    View progressBar;
+                    if (view == null) {
+                        LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.chat_loading_layout, viewGroup, false);
+                        progressBar = view.findViewById(R.id.progressLayout);
+                        if (isCustomTheme) {
+                            progressBar.setBackgroundResource(R.drawable.system_loader2);
+                        } else {
+                            progressBar.setBackgroundResource(R.drawable.system_loader1);
+                        }
+                    } else {
+                        progressBar = view.findViewById(R.id.progressLayout);
+                    }
+                    progressBar.setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
+
+                    return view;
+                }
+            }
+            final BSMessageObject message = messages.get(messages.size() - i - offset);
+            final int type = message.contentType;
+            if (view == null) {
+                if (type == 0) {
+                    view = new BSChatMessageCell(mContext);
+                } if (type == 1) {
+                    view = new BSChatMediaCell(mContext);
+                } else if (type == 2) {
+                    view = new BSChatAudioCell(mContext);
+                } else if (type == 3) {
+                    view = new BSChatContactCell(mContext);
+                } else if (type == 6) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.chat_unread_layout, viewGroup, false);
+                } else if (type == 4) {
+                    view = new BSChatActionCell(mContext);
+                }
+
+                if (view instanceof ChatBaseCell) {
+                    ((ChatBaseCell)view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
+                        @Override
+                        public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
+                            if (user != null && user.id != UserConfig.getClientUserId()) {
+                                    OtherFlipBSActivity.setUserProfileFlag();
+                                    OtherFlipBSActivity.Params.put("UId", user.id);
+                                    startBSActivity(new Intent(getParentActivity(), OtherFlipBSActivity.class));
+                            }
+                        }
+
+                        @Override
+                        public void didPressedCancelSendButton(ChatBaseCell cell) {
+                            MessageObject message = cell.getMessageObject();
+                            if (message.messageOwner.send_state != 0) {
+                                SendMessagesHelper.getInstance().cancelSendingMessage(message);
+                            }
+                        }
+
+                        @Override
+                        public void didLongPressed(ChatBaseCell cell) {
+                           // createMenu(cell, false);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return true;
+                        }
+                    });
+                    if (view instanceof BSChatMediaCell) {
+                        ((BSChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
+                        ((BSChatMediaCell) view).setMediaDelegate(new BSChatMediaCell.ChatMediaCellDelegate() {
+                            @Override
+                            public void didClickedImage(ChatMediaCell cell) {
+                                MessageObject message = cell.getMessageObject();
+                                if (message.isSendError()) {
+                                    //createMenu(cell, false);
+                                    return;
+                                } else if (message.isSending()) {
+                                    return;
+                                }
+                                if (message.type == 1) {
+                                    BSPhotoViewer.getInstance().setParentActivity(BSChatActivity.this);
+                                    BSPhotoViewer.getInstance().openPhoto((BSMessageObject) message, BSChatActivity.this);
+                                    getBSDrawer().addViewToBS(BSPhotoViewer.getInstance().getWindowView());
+                                } else if (message.type == 3) {
+                                    sendSecretMessageRead(message);
+                                    try {
+                                        OtherFlipBSActivity.setViewVideoFlag();
+                                        File f = null;
+                                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                                            f = new File(message.messageOwner.attachPath);
+                                        }
+                                        if (f == null || f != null && !f.exists()) {
+                                            f = FileLoader.getPathToMessage(message.messageOwner);
+                                        }
+                                        OtherFlipBSActivity.Params.put("file", f);
+                                        OtherFlipBSActivity.Params.put("message", message);
+                                        Intent i = new Intent(getParentActivity(), OtherFlipBSActivity.class);
+                                        startBSActivity(i);
+                                    } catch (Exception ignored) {
+
+                                    }
+                                } else if (message.type == 4) {
+                                    OtherFlipBSActivity.setGeoFlag();
+                                    OtherFlipBSActivity.Params.put("message", message);
+                                    startBSActivity(new Intent(getParentActivity(), OtherFlipBSActivity.class));
+                                } else if (message.type == 9) {
+                                    OtherFlipBSActivity.setFileFlag();
+                                    OtherFlipBSActivity.Params.put("message", message);
+                                    startBSActivity(new Intent(getParentActivity(), OtherFlipBSActivity.class));
+                                }
+                            }
+                            @Override
+                            public void didPressedOther(ChatMediaCell cell) {
+                                //createMenu(cell, true);
+                            }
+                        });
+                    } else if (view instanceof ChatContactCell) {
+                        ((ChatContactCell)view).setContactDelegate(new ChatContactCell.ChatContactCellDelegate() {
+                            @Override
+                            public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
+                                //TODO
+                            }
+
+
+
+                            @Override
+                            public void didClickPhone(ChatContactCell cell) {
+                                                               final MessageObject messageObject = cell.getMessageObject();
+                                if (getParentActivity() == null || messageObject.messageOwner.media.phone_number == null || messageObject.messageOwner.media.phone_number.length() == 0) {
+                                    return;
+                                }
+
+                            }
+                        });
+                    }
+                } else if (view instanceof BSChatActionCell) {
+                    ((BSChatActionCell)view).setDelegate(new BSChatActionCell.ChatActionCellDelegate() {
+                        @Override
+                        public void didClickedImage(ChatActionCell cell) {
+                            BSMessageObject message = (BSMessageObject) cell.getMessageObject();
+                            BSPhotoViewer.getInstance().setParentActivity(getContext());
+                            BSPhotoViewer.getInstance().openPhoto(message, BSChatActivity.this);
+                            chatListView.clearFocus();
+                        }
+
+                        @Override
+                        public void didLongPressed(ChatActionCell cell)
+                        {
+                           // createMenu(cell, false);
+                        }
+
+                        @Override
+                        public void needOpenUserProfile(int uid) {
+                            //
+                        }
+                    });
+                }
+            }
+
+            boolean selected = false;
+            boolean disableSelection = false;
+            view.setBackgroundColor(0);
+
+            if (view instanceof ChatBaseCell) {
+                ChatBaseCell baseCell = (ChatBaseCell)view;
+                baseCell.isChat = currentChat != null;
+                baseCell.setMessageObject(message);
+                baseCell.setCheckPressed(!disableSelection, disableSelection && selected);
+                if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
+                    ((ChatAudioCell)view).downloadAudioIfNeed();
+                }
+                if (highlightMessageId != Integer.MAX_VALUE && message.messageOwner.id == highlightMessageId) {
+                    baseCell.setCheckPressed(false, true);
+                }
+            } else if (view instanceof ChatActionCell) {
+                ChatActionCell actionCell = (ChatActionCell)view;
+                actionCell.setMessageObject(message);
+                actionCell.setUseBlackBackground(isCustomTheme);
+            }
+            if (type == 6) {
+                TextView messageTextView = (TextView)view.findViewById(R.id.chat_message_text);
+                messageTextView.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            int offset = 1;
+            if (!endReached && messages.size() != 0) {
+                offset = 0;
+                if (i == 0) {
+                    return 5;
+                }
+            }
+            if (!forward_end_reached && i == (messages.size() + 1 - offset)) {
+                return 5;
+            }
+            BSMessageObject message = messages.get(messages.size() - i - offset);
+            return message.contentType;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 7;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            int count = messages.size();
+            if (count != 0) {
+                if (!endReached) {
+                    count++;
+                }
+                if (!forward_end_reached) {
+                    count++;
+                }
+            }
+            return count == 0;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSContactsActivity.java
new file mode 100644
index 000000000..2315df6c7
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSContactsActivity.java
@@ -0,0 +1,492 @@
+package org.telegram.bsui;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.InputType;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.yotadevices.sdk.Constants;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.SecretChatHelper;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenu;
+import org.telegram.bsui.ActionBar.BSActionBarMenuItem;
+import org.telegram.bsui.Adapters.BSContactsAdapter;
+import org.telegram.bsui.Adapters.BSContactsSearchAdapter;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.SectionsListView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by Ji on 29.12.2014.
+ */
+public class BSContactsActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate {
+
+    private BaseSectionsAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private SectionsListView listView;
+    private BSContactsSearchAdapter searchListViewAdapter;
+
+    private boolean searchWas;
+    private boolean searching;
+    private boolean onlyUsers;
+    private boolean needPhonebook;
+    private boolean destroyAfterSelect;
+    private boolean returnAsResult;
+    private boolean createSecretChat;
+    private boolean creatingChat = false;
+    private String selectAlertString = null;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private boolean allowUsernameSearch = true;
+    private ContactsActivityDelegate delegate;
+    public  Bundle arguments;
+    protected View fragmentView;
+    public Bundle getArguments() {
+        return arguments;
+    }
+
+    public static interface ContactsActivityDelegate {
+        public abstract void didSelectContact(TLRPC.User user, String param);
+    }
+
+    @Override
+    protected void onBSCreate() {
+        setFeature(Constants.Feature.FEATURE_OVERRIDE_BACK_PRESS);
+        super.onBSCreate();
+        this.arguments = getIntent().getExtras();
+        Initialize();
+    }
+
+    @Override
+    protected boolean onBackPressed() {
+        return super.onBackPressed();
+    }
+
+    @Override
+    protected void onBSResume() {
+        super.onBSResume();
+    }
+
+    @Override
+    protected void onBSPause() {
+        super.onBSPause();
+        if (actionBar != null) {
+            actionBar.closeSearchField();
+        }
+    }
+
+    private void Initialize() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        if (arguments != null) {
+            onlyUsers = getArguments().getBoolean("onlyUsers", false);
+            destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
+            returnAsResult = arguments.getBoolean("returnAsResult", false);
+            createSecretChat = arguments.getBoolean("createSecretChat", false);
+            selectAlertString = arguments.getString("selectAlertString");
+            allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
+        } else {
+            needPhonebook = true;
+        }
+        ContactsController.getInstance().checkInviteText();
+        IniActionBar();
+        View view = createView();
+        setBSContentView(createActionBar(view));
+    }
+
+    @Override
+    public void finishFragment() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        delegate = null;
+        super.finishFragment();
+    }
+
+    public View createView() {
+        if (fragmentView == null) {
+            searching = false;
+            searchWas = false;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+//            actionBar.setAllowOverlayTitle(true);
+            if (destroyAfterSelect) {
+                if (returnAsResult) {
+                    actionBar.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
+                } else {
+                    actionBar.setTitle(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
+                }
+            } else {
+                actionBar.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
+            }
+
+            actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            BSActionBarMenu menu = actionBar.createMenu();
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new BSActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                @Override
+                public void onSearchExpand() {
+                    searching = true;
+                }
+
+                @Override
+                public void onSearchCollapse() {
+                    searchListViewAdapter.searchDialogs(null);
+                    searching = false;
+                    searchWas = false;
+                    ViewGroup group = (ViewGroup) listView.getParent();
+                    listView.setAdapter(listViewAdapter);
+                    listViewAdapter.notifyDataSetChanged();
+                    if (Build.VERSION.SDK_INT >= 11) {
+                        listView.setFastScrollAlwaysVisible(true);
+                    }
+                    listView.setFastScrollEnabled(true);
+                    listView.setVerticalScrollBarEnabled(false);
+                    emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                }
+
+                @Override
+                public void onTextChanged(EditText editText) {
+                    if (searchListViewAdapter == null) {
+                        return;
+                    }
+                    String text = editText.getText().toString();
+                    if (text.length() != 0) {
+                        searchWas = true;
+                        if (listView != null) {
+                            listView.setAdapter(searchListViewAdapter);
+                            searchListViewAdapter.notifyDataSetChanged();
+                            if(Build.VERSION.SDK_INT >= 11) {
+                                listView.setFastScrollAlwaysVisible(false);
+                            }
+                            listView.setFastScrollEnabled(false);
+                            listView.setVerticalScrollBarEnabled(true);
+                        }
+                        if (emptyTextView != null) {
+                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                        }
+                    }
+                    searchListViewAdapter.searchDialogs(text);
+                }
+            });
+
+            searchListViewAdapter = new BSContactsSearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
+            listViewAdapter = new BSContactsAdapter(getParentActivity(), onlyUsers, needPhonebook, ignoreUsers);
+
+            fragmentView = new FrameLayout(getParentActivity());
+            fragmentView.setBackgroundColor(Color.parseColor("#FFFFFF"));
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            ((FrameLayout) fragmentView).addView(emptyTextLayout);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(Color.parseColor("#000000"));
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView);
+            LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.gravity = Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL;
+            layoutParams1.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams1);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout);
+            layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            frameLayout.setLayoutParams(layoutParams1);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? 0 : 0);
+            }
+            ((FrameLayout) fragmentView).addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (searching && searchWas) {
+                        TLRPC.User user = searchListViewAdapter.getItem(i);
+                        if (user == null || user.id == UserConfig.getClientUserId()) {
+                            return;
+                        }
+                        if (searchListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
+                        if (returnAsResult) {
+                            if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                return;
+                            }
+                            didSelectResult(user, true, null);
+                        } else {
+                            if (createSecretChat) {
+                                creatingChat = true;
+                                SecretChatHelper.getInstance().startSecretChat(getParentActivity(), user);
+                            } else {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", user.id);
+                                presentFragment(BSChatActivity.class, args, true);
+                            }
+                        }
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        if (!onlyUsers && section == 0) {
+                            if (needPhonebook) {
+                                if (row == 0) {
+                                    try {
+                                        Intent intent = new Intent(Intent.ACTION_SEND);
+                                        intent.setType("text/plain");
+                                        intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
+                                        startBSActivity(intent);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            } else {
+                                if (row == 0) {
+                                    presentFragment(BSGroupCreateActivity.class, true);
+                                } else if (row == 1) {
+                                    Bundle args = new Bundle();
+                                    args.putBoolean("onlyUsers", true);
+                                    args.putBoolean("destroyAfterSelect", true);
+                                    args.putBoolean("createSecretChat", true);
+                                    presentFragment(BSSecretChatContactsActivity.class, args, true);
+                                } else if (row == 2) {
+                                    Bundle args = new Bundle();
+                                    args.putBoolean("broadcast", true);
+                                    presentFragment(BSGroupCreateActivity.class,args, true);
+                                }
+                            }
+                        } else {
+                            Object item = listViewAdapter.getItem(section, row);
+
+                            if (item instanceof TLRPC.User) {
+                                TLRPC.User user = (TLRPC.User) item;
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    return;
+                                }
+                                if (returnAsResult) {
+                                    if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                        return;
+                                    }
+                                    didSelectResult(user, true, null);
+                                } else {
+                                    if (createSecretChat) {
+                                        creatingChat = true;
+                                        SecretChatHelper.getInstance().startSecretChat(getParentActivity(), user);
+                                    } else {
+                                        Bundle args = new Bundle();
+                                        args.putInt("user_id", user.id);
+                                        presentFragment(BSChatActivity.class,args, true);
+                                    }
+                                }
+                            } else if (item instanceof ContactsController.Contact) {
+                                ContactsController.Contact contact = (ContactsController.Contact) item;
+                                String usePhone = null;
+                                if (!contact.phones.isEmpty()) {
+                                    usePhone = contact.phones.get(0);
+                                }
+                                if (usePhone == null || getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                final String arg1 = usePhone;
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        try {
+                                            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
+                                            intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
+                                            startBSActivity(intent);
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            }
+                        }
+                    }
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(fragmentView);
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+
+
+    private void didSelectResult(final TLRPC.User user, boolean useAlert, String param) {
+        if (useAlert && selectAlertString != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
+/*            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+            final EditText editText = new EditText(getParentActivity());
+            if (Build.VERSION.SDK_INT < 11) {
+                editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
+            }
+            editText.setTextSize(18);
+            editText.setText("50");
+            editText.setGravity(Gravity.CENTER);
+            editText.setInputType(InputType.TYPE_CLASS_NUMBER);
+            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            builder.setView(editText);
+            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    didSelectResult(user, false, editText.getText().toString());
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            showAlertDialog(builder);*/
+/*            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
+            if (layoutParams != null) {
+                if (layoutParams instanceof FrameLayout.LayoutParams) {
+                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                }
+                layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.bsDp(10);
+                editText.setLayoutParams(layoutParams);
+            }
+            editText.setSelection(editText.getText().length());*/
+        } else {
+            if (delegate != null) {
+                delegate.didSelectContact(user, param);
+                delegate = null;
+            }
+            finishFragment();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.encryptedChatCreated) {
+            if (createSecretChat && creatingChat) {
+                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
+                Bundle args2 = new Bundle();
+                args2.putInt("enc_id", encryptedChat.id);
+                presentFragment(BSChatActivity.class,args2, true);
+            }
+        } else if (id == NotificationCenter.appDidLogout){
+            finishFragment();
+        }
+    }
+    private void updateVisibleRows(int mask) {
+        if (listView != null) {
+            int count = listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = listView.getChildAt(a);
+                if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
+                }
+            }
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateActivity.java
new file mode 100644
index 000000000..c4d148d0f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateActivity.java
@@ -0,0 +1,566 @@
+package org.telegram.bsui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.SpannableStringBuilder;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenu;
+import org.telegram.bsui.Adapters.BSContactsAdapter;
+import org.telegram.bsui.Adapters.BSContactsSearchAdapter;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.SectionsListView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSGroupCreateActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate {
+
+    public static interface GroupCreateActivityDelegate {
+        public abstract void didSelectUsers(ArrayList<Integer> ids);
+    }
+
+    private class XImageSpan extends ImageSpan {
+        public int uid;
+
+        public XImageSpan(Drawable d, int verticalAlignment) {
+            super(d, verticalAlignment);
+        }
+
+        @Override
+        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
+            if (fm == null) {
+                fm = new Paint.FontMetricsInt();
+            }
+
+            int sz = super.getSize(paint, text, start, end, fm);
+            int offset = AndroidUtilities.bsDp(6);
+            int w = (fm.bottom - fm.top) / 2;
+            fm.top = -w - offset;
+            fm.bottom = w - offset;
+            fm.ascent = -w - offset;
+            fm.leading = 0;
+            fm.descent = w - offset;
+            return sz;
+        }
+    }
+
+    private BSContactsAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private EditText userSelectEditText;
+    private SectionsListView listView;
+    private BSContactsSearchAdapter searchListViewAdapter;
+    protected View fragmentView;
+    private GroupCreateActivityDelegate delegate;
+
+    private int beforeChangeIndex;
+    private int maxCount = 200;
+    private boolean ignoreChange = false;
+    private boolean isBroadcast = false;
+    private boolean isAlwaysShare = false;
+    private boolean isNeverShare = false;
+    private boolean searchWas;
+    private boolean searching;
+    private CharSequence changeString;
+    private HashMap<Integer, XImageSpan> selectedContacts = new HashMap<Integer, XImageSpan>();
+    private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
+
+    private final static int done_button = 1;
+
+
+    protected Bundle arguments;
+
+    @Override
+    public void onBSCreate() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        super.onBSCreate();
+
+        Intent intent = getIntent();
+        if(intent !=null)
+            this.arguments = intent.getExtras();
+        if(arguments!=null) {
+            isBroadcast = arguments.getBoolean("broadcast", false);
+            isAlwaysShare = arguments.getBoolean("isAlwaysShare", false);
+            isNeverShare = arguments.getBoolean("isNeverShare", false);
+            maxCount = !isBroadcast ? MessagesController.getInstance().maxGroupCount - 1 : MessagesController.getInstance().maxBroadcastCount;
+        }
+
+        IniActionBar();
+        View view = createView();
+        setBSContentView(createActionBar(view));
+    }
+
+    @Override
+    protected void onBSResume() {
+        super.onBSResume();
+    }
+
+    @Override
+    public void onBSDestroy() {
+        super.onBSDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+    }
+
+    public View createView() {
+        if (fragmentView == null) {
+            searching = false;
+            searchWas = false;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (isAlwaysShare) {
+                setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
+            } else if (isNeverShare) {
+                setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
+            } else {
+                setTitle(isBroadcast ? LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList) : LocaleController.getString("NewGroup", R.string.NewGroup));
+                setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+            }
+
+            actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (selectedContacts.isEmpty()) {
+                            return;
+                        }
+                        ArrayList<Integer> result = new ArrayList<Integer>();
+                        result.addAll(selectedContacts.keySet());
+                        if (isAlwaysShare || isNeverShare) {
+                            if (delegate != null) {
+                                delegate.didSelectUsers(result);
+                            }
+                            finishFragment();
+                        } else {
+                            Bundle args = new Bundle();
+                            args.putIntegerArrayList("result", result);
+                            args.putBoolean("broadcast", isBroadcast);
+                            presentFragment(BSGroupCreateFinalActivity.class, args, true);
+                        }
+                    }
+                }
+            });
+            BSActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.bsDp(56));
+
+            searchListViewAdapter = new BSContactsSearchAdapter(getParentActivity(), null, false);
+            searchListViewAdapter.setCheckedMap(selectedContacts);
+            searchListViewAdapter.setUseUserCell(true);
+            listViewAdapter = new BSContactsAdapter(getParentActivity(), true, false, null);
+            listViewAdapter.setCheckedMap(selectedContacts);
+
+            fragmentView = new LinearLayout(getParentActivity());
+            fragmentView.setBackgroundColor(Color.parseColor("#FFFFFF"));
+            LinearLayout linearLayout = (LinearLayout) fragmentView;
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            linearLayout.addView(frameLayout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP;
+            frameLayout.setLayoutParams(layoutParams);
+
+            userSelectEditText = new EditText(getParentActivity());
+            userSelectEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+            userSelectEditText.setHintTextColor(Color.parseColor("#000000"));
+            userSelectEditText.setTextColor(Color.parseColor("#000000"));
+            userSelectEditText.setPadding(20, 0, 0, 0);
+            userSelectEditText.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+            userSelectEditText.setMinimumHeight(AndroidUtilities.bsDp(54));
+            userSelectEditText.setSingleLine(false);
+            userSelectEditText.setLines(2);
+            userSelectEditText.setMaxLines(2);
+            userSelectEditText.setVerticalScrollBarEnabled(true);
+            userSelectEditText.setHorizontalScrollBarEnabled(false);
+            userSelectEditText.setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            userSelectEditText.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+            AndroidUtilities.clearCursorDrawable(userSelectEditText);
+            frameLayout.addView(userSelectEditText);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) userSelectEditText.getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = 100;
+            layoutParams1.leftMargin = AndroidUtilities.bsDp(10);
+            layoutParams1.rightMargin = AndroidUtilities.bsDp(10);
+            layoutParams1.gravity = Gravity.TOP;
+            userSelectEditText.setLayoutParams(layoutParams1);
+
+            if (isAlwaysShare) {
+                userSelectEditText.setHint(LocaleController.getString("AlwaysShareWithPlaceholder", R.string.AlwaysShareWithPlaceholder));
+            } else if (isNeverShare) {
+                userSelectEditText.setHint(LocaleController.getString("NeverShareWithPlaceholder", R.string.NeverShareWithPlaceholder));
+            } else {
+                userSelectEditText.setHint(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
+            }
+            if (Build.VERSION.SDK_INT >= 11) {
+                userSelectEditText.setTextIsSelectable(false);
+            }
+            userSelectEditText.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int start, int count, int after) {
+                    if (!ignoreChange) {
+                        beforeChangeIndex = userSelectEditText.getSelectionStart();
+                        changeString = new SpannableString(charSequence);
+                    }
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (!ignoreChange) {
+                        boolean search = false;
+                        int afterChangeIndex = userSelectEditText.getSelectionEnd();
+                        if (editable.toString().length() < changeString.toString().length()) {
+                            String deletedString = "";
+                            try {
+                                deletedString = changeString.toString().substring(afterChangeIndex, beforeChangeIndex);
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            if (deletedString.length() > 0) {
+                                if (searching && searchWas) {
+                                    search = true;
+                                }
+                                Spannable span = userSelectEditText.getText();
+                                for (int a = 0; a < allSpans.size(); a++) {
+                                    XImageSpan sp = allSpans.get(a);
+                                    if (span.getSpanStart(sp) == -1) {
+                                        allSpans.remove(sp);
+                                        selectedContacts.remove(sp.uid);
+                                    }
+                                }
+                                if (!isAlwaysShare && !isNeverShare) {
+                                    setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                                }
+                                listView.invalidateViews();
+                            } else {
+                                search = true;
+                            }
+                        } else {
+                            search = true;
+                        }
+                        if (search) {
+                            String text = userSelectEditText.getText().toString().replace("<", "");
+                            if (text.length() != 0) {
+                                searching = true;
+                                searchWas = true;
+                                if (listView != null) {
+                                    listView.setAdapter(searchListViewAdapter);
+                                    searchListViewAdapter.notifyDataSetChanged();
+                                    if(Build.VERSION.SDK_INT >= 11) {
+                                        listView.setFastScrollAlwaysVisible(false);
+                                    }
+                                    listView.setFastScrollEnabled(false);
+                                    listView.setVerticalScrollBarEnabled(true);
+                                }
+                                if (emptyTextView != null) {
+                                    emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                                }
+                                searchListViewAdapter.searchDialogs(text);
+                            } else {
+                                searchListViewAdapter.searchDialogs(null);
+                                searching = false;
+                                searchWas = false;
+                                ViewGroup group = (ViewGroup) listView.getParent();
+                                listView.setAdapter(listViewAdapter);
+                                listViewAdapter.notifyDataSetChanged();
+                                if (Build.VERSION.SDK_INT >= 11) {
+                                    listView.setFastScrollAlwaysVisible(true);
+                                }
+                                listView.setFastScrollEnabled(true);
+                                listView.setVerticalScrollBarEnabled(false);
+                                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                            }
+                        }
+                    }
+                }
+            });
+
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            linearLayout.addView(emptyTextLayout);
+            layoutParams = (LinearLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(13);//20
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView);
+            layoutParams = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams);
+
+            FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout2);
+            layoutParams = (LinearLayout.LayoutParams) frameLayout2.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.weight = 0.5f;
+            frameLayout2.setLayoutParams(layoutParams);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            linearLayout.addView(listView);
+            layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    TLRPC.User user = null;
+                    if (searching && searchWas) {
+                        user = searchListViewAdapter.getItem(i);
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        user = (TLRPC.User) listViewAdapter.getItem(section, row);
+                    }
+                    if (user == null) {
+                        return;
+                    }
+
+                    boolean check = true;
+                    if (selectedContacts.containsKey(user.id)) {
+                        check = false;
+                        try {
+                            XImageSpan span = selectedContacts.get(user.id);
+                            selectedContacts.remove(user.id);
+                            SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
+                            text.delete(text.getSpanStart(span), text.getSpanEnd(span));
+                            allSpans.remove(span);
+                            ignoreChange = true;
+                            userSelectEditText.setText(text);
+                            userSelectEditText.setSelection(text.length());
+                            ignoreChange = false;
+                            listView.invalidateViews();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else {
+                        if (selectedContacts.size() == maxCount) {
+                            return;
+                        }
+                        ignoreChange = true;
+                        XImageSpan span = createAndPutChipForUser(user);
+                        span.uid = user.id;
+                        ignoreChange = false;
+                        listView.invalidateViews();
+                    }
+                    if (!isAlwaysShare && !isNeverShare) {
+                        setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                    }
+                    if (searching || searchWas) {
+                        ignoreChange = true;
+                        SpannableStringBuilder ssb = new SpannableStringBuilder("");
+                        for (ImageSpan sp : allSpans) {
+                            ssb.append("<<");
+                            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        }
+                        userSelectEditText.setText(ssb);
+                        userSelectEditText.setSelection(ssb.length());
+                        ignoreChange = false;
+
+                        searchListViewAdapter.searchDialogs(null);
+                        searching = false;
+                        searchWas = false;
+                        ViewGroup group = (ViewGroup) listView.getParent();
+                        listView.setAdapter(listViewAdapter);
+                        listViewAdapter.notifyDataSetChanged();
+                        if (Build.VERSION.SDK_INT >= 11) {
+                            listView.setFastScrollAlwaysVisible(true);
+                        }
+                        listView.setFastScrollEnabled(true);
+                        listView.setVerticalScrollBarEnabled(false);
+                        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                    } else {
+                        if (view instanceof UserCell) {
+                            ((UserCell) view).setChecked(check, true);
+                        }
+                    }
+                }
+            });
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL) {
+                        AndroidUtilities.hideKeyboard(userSelectEditText);
+                    }
+                    if (listViewAdapter != null) {
+                        listViewAdapter.setIsScrolling(i != SCROLL_STATE_IDLE);
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatDidCreated) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    removeSelfFromStack();
+                }
+            });
+        } else if (id == NotificationCenter.appDidLogout) {
+            finishFragment();
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView != null) {
+            int count = listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = listView.getChildAt(a);
+                if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
+                }
+            }
+        }
+    }
+
+    public void setDelegate(GroupCreateActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private XImageSpan createAndPutChipForUser(TLRPC.User user) {
+        LayoutInflater lf = getBSDrawer().getBSLayoutInflater();
+        View textView = lf.inflate(R.layout.group_create_bubble, null);
+        TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
+        String name = ContactsController.formatName(user.first_name, user.last_name);
+        if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
+            name = PhoneFormat.getInstance().format("+" + user.phone);
+        }
+        text.setText(name + ", ");
+
+        int spec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
+        textView.measure(spec, spec);
+        textView.layout(0, 0, textView.getMeasuredWidth(), textView.getMeasuredHeight());
+        Bitmap b = Bitmap.createBitmap(textView.getWidth(), textView.getHeight(), Bitmap.Config.ARGB_8888);
+        Canvas canvas = new Canvas(b);
+        canvas.translate(-textView.getScrollX(), -textView.getScrollY());
+        textView.draw(canvas);
+        textView.setDrawingCacheEnabled(true);
+        Bitmap cacheBmp = textView.getDrawingCache();
+        Bitmap viewBmp = cacheBmp.copy(Bitmap.Config.ARGB_8888, true);
+        textView.destroyDrawingCache();
+
+        final BitmapDrawable bmpDrawable = new BitmapDrawable(b);
+        bmpDrawable.setBounds(0, 0, b.getWidth(), b.getHeight());
+
+        SpannableStringBuilder ssb = new SpannableStringBuilder("");
+        XImageSpan span = new XImageSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
+        allSpans.add(span);
+        selectedContacts.put(user.id, span);
+        for (ImageSpan sp : allSpans) {
+            ssb.append("<<");
+            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+        }
+        userSelectEditText.setText(ssb);
+        userSelectEditText.setSelection(ssb.length());
+        return span;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateFinalActivity.java
new file mode 100644
index 000000000..c8c4ea688
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSGroupCreateFinalActivity.java
@@ -0,0 +1,408 @@
+package org.telegram.bsui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenu;
+import org.telegram.bsui.Cells.BSUserCell;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Components.AvatarUpdater;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.FrameLayoutFixed;
+
+import java.util.ArrayList;
+import java.util.concurrent.Semaphore;
+
+/**
+ * Created by E1ektr0 on 10.01.2015.
+ */
+public class BSGroupCreateFinalActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
+
+    private ListAdapter listAdapter;
+    private ListView listView;
+    private EditText nameTextView;
+    private TLRPC.FileLocation avatar;
+    private TLRPC.InputFile uploadedAvatar;
+    private ArrayList<Integer> selectedContacts;
+    private BackupImageView avatarImage;
+    private BSAvatarDrawable BSAvatarDrawable;
+    private boolean createAfterUpload;
+    private boolean donePressed;
+    //private AvatarUpdater avatarUpdater = new AvatarUpdater();
+    private String nameToSet = null;
+    private boolean isBroadcast = false;
+
+    private final static int done_button = 1;
+    private LinearLayout fragmentView;
+
+    public BSGroupCreateFinalActivity() {
+
+
+    }
+    public BSGroupCreateFinalActivity(Bundle args) {
+        isBroadcast = args.getBoolean("broadcast", false);
+    }
+
+    @Override
+    protected void onBSCreate() {
+
+        super.onBSCreate();
+        BSAvatarDrawable = new BSAvatarDrawable();
+        Bundle extras = getIntent().getExtras();
+        if(extras!=null)
+            isBroadcast = extras.getBoolean("broadcast", false);
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidFailCreate);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        Intent intent = getIntent();
+        selectedContacts = intent.getExtras().getIntegerArrayList("result");
+        final ArrayList<Integer> usersToLoad = new ArrayList<>();
+        for (Integer uid : selectedContacts) {
+            if (MessagesController.getInstance().getUser(uid) == null) {
+                usersToLoad.add(uid);
+            }
+        }
+        if (!usersToLoad.isEmpty()) {
+            final Semaphore semaphore = new Semaphore(0);
+            final ArrayList<TLRPC.User> users = new ArrayList<>();
+            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    users.addAll(MessagesStorage.getInstance().getUsers(usersToLoad));
+                    semaphore.release();
+                }
+            });
+            try {
+                semaphore.acquire();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (usersToLoad.size() != users.size()) {
+                return ;
+            }
+            if (!users.isEmpty()) {
+                for (TLRPC.User user : users) {
+                    MessagesController.getInstance().putUser(user, true);
+                }
+            } else {
+                return ;
+            }
+        }
+
+        IniActionBar();
+        View view = createView();
+        setBSContentView(createActionBar(view));
+    }
+
+    @Override
+    public void finishFragment() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidFailCreate);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        super.finishFragment();
+    }
+
+    @Override
+    public void onBSResume() {
+        super.onBSResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    public View createView() {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (isBroadcast) {
+                actionBar.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            } else {
+                actionBar.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            }
+
+            actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (donePressed) {
+                            return;
+                        }
+                        if (nameTextView.getText().length() == 0) {
+                            return;
+                        }
+                        donePressed = true;
+
+                        if (isBroadcast) {
+                            MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
+                        } else {
+                            if (/*avatarUpdater.uploadingAvatar != null*/ false) {
+                                createAfterUpload = true;
+                            } else {
+                                final long reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
+                            }
+                        }
+                    }
+                }
+            });
+
+            BSActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.bsDp(56));
+
+            fragmentView = new LinearLayout(getParentActivity());
+            LinearLayout linearLayout = (LinearLayout) fragmentView;
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+            FrameLayout frameLayout = new FrameLayoutFixed(getParentActivity());
+            linearLayout.addView(frameLayout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            frameLayout.setLayoutParams(layoutParams);
+
+            avatarImage = new BackupImageView(getParentActivity());
+            avatarImage.imageReceiver.setRoundRadius(AndroidUtilities.bsDp(32));
+            BSAvatarDrawable.setInfo(5, null, null, isBroadcast);
+            avatarImage.setImageDrawable(BSAvatarDrawable);
+            frameLayout.addView(avatarImage);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
+            layoutParams1.width = AndroidUtilities.bsDp(64);
+            layoutParams1.height = AndroidUtilities.bsDp(64);
+            layoutParams1.topMargin = AndroidUtilities.bsDp(12);
+            layoutParams1.bottomMargin = AndroidUtilities.bsDp(12);
+            layoutParams1.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.bsDp(16);
+            layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.bsDp(16) : 0;
+            layoutParams1.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            avatarImage.setLayoutParams(layoutParams1);
+            if (!isBroadcast) {
+                BSAvatarDrawable.setDrawPhoto(true);
+                avatarImage.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                        CharSequence[] items;
+
+                        if (avatar != null) {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                        } else {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                        }
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    //avatarUpdater.openCamera();
+                                } else if (i == 1) {
+                                    //avatarUpdater.openGallery();
+                                } else if (i == 2) {
+                                    avatar = null;
+                                    uploadedAvatar = null;
+                                    avatarImage.setImage(avatar, "50_50", BSAvatarDrawable);
+                                }
+                            }
+                        });
+                    }
+                });
+            }
+
+            nameTextView = new EditText(getParentActivity());
+            nameTextView.setHint(isBroadcast ? LocaleController.getString("EnterListName", R.string.EnterListName) : LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
+            if (nameToSet != null) {
+                nameTextView.setText(nameToSet);
+                nameToSet = null;
+            }
+            nameTextView.setMaxLines(4);
+            nameTextView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 9);
+            nameTextView.setHintTextColor(0xff979797);
+            nameTextView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            nameTextView.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
+            nameTextView.setPadding(0, 0, 0, AndroidUtilities.bsDp(8));
+            AndroidUtilities.clearCursorDrawable(nameTextView);
+            nameTextView.setTextColor(0xff212121);
+            frameLayout.addView(nameTextView);
+            layoutParams1 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height =  FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.leftMargin = LocaleController.isRTL ? AndroidUtilities.bsDp(16) : AndroidUtilities.bsDp(96);
+            layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.bsDp(96) : AndroidUtilities.bsDp(16);
+            layoutParams1.gravity = Gravity.CENTER_VERTICAL;
+            nameTextView.setLayoutParams(layoutParams1);
+            if (!isBroadcast) {
+                nameTextView.addTextChangedListener(new TextWatcher() {
+                    @Override
+                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+                    }
+
+                    @Override
+                    public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+                    }
+
+                    @Override
+                    public void afterTextChanged(Editable s) {
+                        BSAvatarDrawable.setInfo(5, nameTextView.length() > 0 ? nameTextView.getText().toString() : null, null, isBroadcast);
+                        avatarImage.invalidate();
+                    }
+                });
+            }
+
+            GreySectionCell sectionCell = new GreySectionCell(getParentActivity());
+            sectionCell.setText(LocaleController.formatPluralString("Members", selectedContacts.size()));
+            linearLayout.addView(sectionCell);
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
+            linearLayout.addView(listView);
+            layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didUploadedPhoto(final TLRPC.InputFile file, final TLRPC.PhotoSize small, final TLRPC.PhotoSize big) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                uploadedAvatar = file;
+                avatar = small.location;
+                avatarImage.setImage(avatar, "50_50", BSAvatarDrawable);
+                if (createAfterUpload) {
+                    FileLog.e("tmessages", "avatar did uploaded");
+                    MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, false);
+                }
+            }
+        });
+    }
+
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatDidFailCreate) {
+            donePressed = false;
+        } else if (id == NotificationCenter.chatDidCreated) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    Bundle args2 = new Bundle();
+                    args2.putInt("chat_id", (Integer)args[0]);
+
+                    presentFragment(BSChatActivity.class,args2, true);
+                }
+            });
+        } else if (id == NotificationCenter.appDidLogout){
+            finishFragment();
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof BSUserCell) {
+                ((BSUserCell) child).update(mask);
+            }
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int position) {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                view = new BSUserCell(mContext, 1);
+            }
+
+            TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(i));
+            ((BSUserCell) view).setData(user, null, null, 0);
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public int getCount() {
+            return selectedContacts.size();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSMessageObject.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSMessageObject.java
new file mode 100644
index 000000000..36e5634ac
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSMessageObject.java
@@ -0,0 +1,124 @@
+package org.telegram.bsui;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.text.Spannable;
+import android.text.Spanned;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.TLRPC;
+
+import java.util.AbstractMap;
+import java.util.ArrayList;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSMessageObject extends MessageObject {
+
+    private Context context;
+    private static TextPaint textPaint;
+
+    public BSMessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users) {
+        super(message, users, true);
+    }
+
+    @Override
+    protected void initTextPaint() {
+        if (textPaint == null) {
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(0xff000000);
+            textPaint.linkColor = 0xff316f9f;
+        }
+        textPaint.setTextSize(dp(MessagesController.getInstance().fontSize));
+    }
+
+    @Override
+    protected TextPaint getTextPaint() {
+        return textPaint;
+    }
+
+    @Override
+    protected int getDisplayY() {
+        return getDisplaySize().y;
+    }
+
+    @Override
+    protected int getDisplayX() {
+        return getDisplaySize().x;
+    }
+
+    private Point getDisplaySize() {
+        return AndroidUtilities.bsDisplaySize;
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+
+
+    private ArrayList<String> pullLinks(String text) {
+        ArrayList links = new ArrayList();
+
+        String regex = "\\(?\\b(http://|www[.])[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]";
+        Pattern p = Pattern.compile(regex);
+        Matcher m = p.matcher(text);
+        while(m.find()) {
+            String urlStr = m.group();
+            if (urlStr.startsWith("(") && urlStr.endsWith(")")) {
+                urlStr = urlStr.substring(1, urlStr.length() - 1);
+            }
+            links.add(urlStr);
+        }
+        return links;
+    }
+    @Override
+    protected void clickify(CharSequence messageText, int i) {
+
+        String string = messageText.toString();
+        ArrayList<String> list = pullLinks(string);
+        if(list.isEmpty())
+            return;
+        for(String link : list)
+        {
+            spanned((Spannable) messageText, string, link);
+        }
+
+
+    }
+
+    private void spanned(Spannable messageText, String string, String link) {
+        final String clickableText = link;
+        int start = string.indexOf(clickableText);
+        int end = start + clickableText.length();
+        if (start == -1)
+            return;
+        ClickSpan span = new ClickSpan(new ClickSpan.OnClickListener() {
+            @Override
+            public void onClick() {
+                Intent i = new Intent();
+                i.setComponent(new ComponentName("com.yotadevices.yotaphone.yd_browser", "com.yotadevices.yotaphone.yd_browser.BSBrowser"));
+                i.putExtra("URL_TO_OPEN", clickableText);
+                context.startService(i);
+            }
+        });
+        ((Spannable)messageText).setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+    }
+
+    public void setContext(Context context) {
+        this.context = context;
+    }
+
+    public Context getContext() {
+        return context;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSMessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSMessagesActivity.java
new file mode 100644
index 000000000..03eab854f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSMessagesActivity.java
@@ -0,0 +1,573 @@
+package org.telegram.bsui;
+
+
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.widget.AdapterView;
+import android.widget.BaseAdapter;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.RelativeLayout;
+
+import com.yotadevices.sdk.Constants;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenu;
+import org.telegram.bsui.ActionBar.BSActionBarMenuItem;
+import org.telegram.bsui.Adapters.BSDialogsAdapter;
+import org.telegram.bsui.Adapters.BSDialogsSearchAdapter;
+import org.telegram.bsui.Components.BSAlertDialog;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.ActionBar.MenuDrawable;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.UserCell;
+
+import java.util.ArrayList;
+
+/**
+ * Created by E1ektr0 on 27.12.2014.
+ */
+public class BSMessagesActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListView messagesListView;
+    private BSDialogsAdapter dialogsAdapter;
+    private View emptyView;
+    private boolean onlySelect;
+    private String selectAlertString;
+    private String selectAlertStringGroup;
+    private Bundle arguments;
+    private ImageView floatingButton;
+    private BSDialogsSearchAdapter dialogsSearchAdapter;
+    private boolean floatingHidden;
+    private View searchEmptyView;
+    private long selectedDialog;
+
+    private boolean searching = false;
+    private boolean searchWas = false;
+    private boolean serverOnly = false;
+    private static boolean dialogsLoaded = false;
+
+    private static BSMessagesActivityDelegate delegate;
+
+    private long openedDialogId = 0;
+
+    public static interface BSMessagesActivityDelegate {
+        public abstract void didSelectDialog(BSMessagesActivity fragment, long dialog_id, boolean param);
+    }
+    private final AccelerateDecelerateInterpolator floatingInterpolator = new AccelerateDecelerateInterpolator();
+
+    public static void setDelegate(BSMessagesActivityDelegate d) {
+        delegate = d;
+    }
+
+    public static BSMessagesActivityDelegate getDelegate() {
+        return delegate;
+    }
+
+    @Override
+    public void finishFragment() {
+        removeObservers();
+        super.finishFragment();
+        if(backPressed)
+        {
+            System.exit(0);
+        }
+    }
+
+    Boolean backPressed = false;
+    @Override
+    protected boolean onBackPressed() {
+        if(!onlySelect) {
+            backPressed = true;
+        }
+        return super.onBackPressed();
+    }
+
+    @Override
+    protected void onBSCreate() {
+        super.onBSCreate();
+        setFeature(Constants.Feature.FEATURE_OVERRIDE_BACK_PRESS);
+        this.arguments = getIntent().getExtras();
+        if(arguments!=null) {
+            onlySelect = arguments.getBoolean("onlySelect", false);
+            serverOnly = arguments.getBoolean("serverOnly", false);
+            selectAlertString = arguments.getString("selectAlertString");
+            selectAlertStringGroup = arguments.getString("selectAlertStringGroup");
+        }
+        addObservers();
+        if (!dialogsLoaded) {
+            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
+            dialogsLoaded = true;
+        }
+        LayoutInflater bsLayoutInflater = getBSDrawer().getBSLayoutInflater();
+        View view =bsLayoutInflater.inflate(R.layout.bs_messages_list, null);
+        IniActionBar();
+        setBSContentView(createActionBar(view));
+        floatingButton = (ImageView)findViewById(R.id.btn_new_sms);
+        floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
+        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams)floatingButton.getLayoutParams();
+        layoutParams.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(14) : 0;
+        layoutParams.rightMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(14);
+        layoutParams.addRule((LocaleController.isRTL ? RelativeLayout.ALIGN_PARENT_LEFT : RelativeLayout.ALIGN_PARENT_RIGHT) | RelativeLayout.ALIGN_BOTTOM);
+        floatingButton.setLayoutParams(layoutParams);
+        BSActionBarMenu menu = actionBar.createMenu();
+        menu.addItem(0, R.drawable.ic_ab_search)
+                .setIsSearchField(true)
+                .setActionBarMenuItemSearchListener(new BSActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                    @Override
+                    public void onSearchExpand() {
+                        searching = true;
+                        if (messagesListView != null) {
+                            messagesListView.setEmptyView(searchEmptyView);
+                            emptyView.setVisibility(View.GONE);
+                            if (!onlySelect) {
+                                floatingButton.setVisibility(View.GONE);
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void onSearchCollapse() {
+                        searching = false;
+                        searchWas = false;
+                        if (messagesListView != null) {
+                            if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                                searchEmptyView.setVisibility(View.GONE);
+                                emptyView.setVisibility(View.GONE);
+                            } else {
+                                messagesListView.setEmptyView(emptyView);
+                                searchEmptyView.setVisibility(View.GONE);
+                            }
+                            if (!onlySelect) {
+                                floatingButton.setVisibility(View.VISIBLE);
+                                floatingHidden = true;
+                                ViewProxy.setTranslationY(floatingButton, AndroidUtilities.bsDp(100));
+                                hideFloatingButton(false);
+                            }
+                            if (messagesListView.getAdapter() != dialogsAdapter) {
+                                messagesListView.setAdapter(dialogsAdapter);
+                                dialogsAdapter.notifyDataSetChanged();
+                            }
+                        }
+                        if (dialogsSearchAdapter != null) {
+                            dialogsSearchAdapter.searchDialogs(null, false);
+                        }
+                    }
+
+                    @Override
+                    public void onTextChanged(EditText editText) {
+                        String text = editText.getText().toString();
+                        if (text.length() != 0) {
+                            searchWas = true;
+                            if (dialogsSearchAdapter != null) {
+                                messagesListView.setAdapter(dialogsSearchAdapter);
+                                dialogsSearchAdapter.notifyDataSetChanged();
+                            }
+                            if (searchEmptyView != null && messagesListView.getEmptyView() == emptyView) {
+                                messagesListView.setEmptyView(searchEmptyView);
+                                emptyView.setVisibility(View.GONE);
+                            }
+                        }
+                        if (dialogsSearchAdapter != null) {
+                            dialogsSearchAdapter.searchDialogs(text, serverOnly);
+                        }
+                    }
+                });
+        if (onlySelect){
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
+        } else {
+            actionBar.setBackButtonDrawable(new MenuDrawable());
+            actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        }
+//        actionBar.setAllowOverlayTitle(true);
+        actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    if (onlySelect) {
+                        finishFragment();
+                    } else{
+                        Intent i = new Intent(getContext(), OtherFlipBSActivity.class);
+                        OtherFlipBSActivity.setSettingsFlag();
+                        getContext().startService(i);
+                    }
+                }
+            }
+        });
+
+        searching = false;
+        searchWas = false;
+
+        dialogsSearchAdapter = new BSDialogsSearchAdapter(getParentActivity(), !onlySelect);
+        dialogsSearchAdapter.setDelegate(new BSDialogsSearchAdapter.BSMessagesActivitySearchAdapterDelegate(){
+            @Override
+            public void searchStateChanged(boolean search) {
+                if (searching && searchWas && messagesListView != null) {
+                    searchEmptyView.setVisibility(search ? View.GONE : View.VISIBLE);
+                }
+            }
+        });
+        messagesListView = (ListView) findViewById(R.id.sms_listview);
+        dialogsAdapter = new BSDialogsAdapter(getBSDrawer().getBSContext(), serverOnly);
+        emptyView = findViewById(R.id.nomessages_layout);
+        messagesListView.setAdapter(dialogsAdapter);
+        messagesListView.setEmptyView(emptyView);
+        searchEmptyView = findViewById(R.id.bs_search_empty_view);
+        searchEmptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        messagesListView.setScrollingCacheEnabled(false);
+
+        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+            searchEmptyView.setVisibility(View.GONE);
+            emptyView.setVisibility(View.GONE);
+        } else {
+            messagesListView.setEmptyView(emptyView);
+            searchEmptyView.setVisibility(View.GONE);
+        }
+
+        messagesListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (messagesListView == null || messagesListView.getAdapter() == null) {
+                    return;
+                }
+                long dialog_id = 0;
+                int message_id = 0;
+                BaseAdapter adapter = (BaseAdapter)messagesListView.getAdapter();
+
+                if (adapter == dialogsAdapter) {
+                    TLRPC.TL_dialog dialog = dialogsAdapter.getItem(i);
+                    if (dialog == null) {
+                        return;
+                    }
+                    dialog_id = dialog.id;
+                } else if (adapter == dialogsSearchAdapter) {
+                    Object obj = dialogsSearchAdapter.getItem(i);
+                    if (obj instanceof TLRPC.User) {
+                        dialog_id = ((TLRPC.User) obj).id;
+                        if (dialogsSearchAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add((TLRPC.User)obj);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
+                    } else if (obj instanceof TLRPC.Chat) {
+                        if (((TLRPC.Chat) obj).id > 0) {
+                            dialog_id = -((TLRPC.Chat) obj).id;
+                        } else {
+                            dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
+                        }
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
+                    } else if (obj instanceof MessageObject) {
+                        MessageObject messageObject = (MessageObject)obj;
+                        dialog_id = messageObject.getDialogId();
+                        message_id = messageObject.messageOwner.id;
+                    }
+                }
+                if (dialog_id == 0) {
+                    return;
+                }
+
+                if (onlySelect) {
+                    didSelectResult(dialog_id, true, false);
+                } else {
+                    Bundle args = new Bundle();
+                    int lower_part = (int) dialog_id;
+                    int high_id = (int) (dialog_id >> 32);
+                    if (lower_part != 0) {
+                        if (high_id == 1) {
+                            args.putInt("chat_id", lower_part);
+                        } else {
+                            if (lower_part > 0) {
+                                args.putInt("user_id", lower_part);
+                            } else if (lower_part < 0) {
+                                args.putInt("chat_id", -lower_part);
+                            }
+                        }
+                    } else {
+                        args.putInt("enc_id", high_id);
+                    }
+                    if (message_id != 0) {
+                        args.putInt("message_id", message_id);
+                    }
+                    presentFragment(BSChatActivity.class, args, false);
+                }
+            }});
+
+        ImageView newSmsButton = (ImageView)findViewById(R.id.btn_new_sms);
+        newSmsButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Bundle args = new Bundle();
+                args.putBoolean("destroyAfterSelect", true);
+                presentFragment(BSContactsActivity.class, args, false);
+            }
+        });
+    }
+
+
+    @Override
+    protected void onBSDestroy() {
+        super.onBSDestroy();
+    }
+
+    @Override
+    protected void onBSPause() {
+        super.onBSPause();
+    }
+
+    private void hideFloatingButton(boolean hide) {
+        if (floatingHidden == hide) {
+            return;
+        }
+        floatingHidden = hide;
+        ObjectAnimatorProxy animator = ObjectAnimatorProxy.ofFloatProxy(floatingButton, "translationY", floatingHidden ? AndroidUtilities.dp(100) : 0).setDuration(300);
+        animator.setInterpolator(floatingInterpolator);
+        floatingButton.setClickable(!hide);
+        animator.start();
+    }
+
+    private void addObservers() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
+    }
+
+    @Override
+    protected void onBSResume() {
+        super.onBSResume();
+        if (dialogsAdapter != null) {
+            dialogsAdapter.notifyDataSetChanged();
+        }
+        if (dialogsSearchAdapter != null) {
+            dialogsSearchAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private void removeObservers(){
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
+        delegate = null;
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (!onlySelect && floatingButton != null) {
+            floatingButton.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+                    ViewProxy.setTranslationY(floatingButton, floatingHidden ? AndroidUtilities.bsDp(100) : 0);
+                    floatingButton.setClickable(!floatingHidden);
+                    if (floatingButton != null) {
+                        if (Build.VERSION.SDK_INT < 16) {
+                            floatingButton.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                        } else {
+                            floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                        }
+                    }
+                }
+            });
+        }
+    }
+
+
+    private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
+        if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
+            final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(BSMessagesActivity.this);
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            int lower_part = (int)dialog_id;
+            int high_id = (int)(dialog_id >> 32);
+            if (lower_part != 0) {
+                if (high_id == 1) {
+                    TLRPC.Chat chat = MessagesController.getInstance().getChat(lower_part);
+                    if (chat == null) {
+                        return;
+                    }
+                    builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
+                } else {
+                    if (lower_part > 0) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
+                        if (user == null) {
+                            return;
+                        }
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+                    } else if (lower_part < 0) {
+                        TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
+                        if (chat == null) {
+                            return;
+                        }
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
+                    }
+                }
+            } else {
+                TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(high_id);
+                TLRPC.User user = MessagesController.getInstance().getUser(chat.user_id);
+                if (user == null) {
+                    return;
+                }
+                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+            }
+            final CheckBox checkBox = null;
+            /*if (delegate instanceof BSChatActivity) {
+                checkBox = new CheckBox(getParentActivity());
+                checkBox.setText(LocaleController.getString("ForwardFromMyName", R.string.ForwardFromMyName));
+                checkBox.setChecked(false);
+                bsAlertDialog.setView(checkBox);
+            }*/
+            final CheckBox checkBoxFinal = checkBox;
+            builder.setPositiveButton(LocaleController.getString("Ok", R.string.OK), new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    didSelectResult(dialog_id, false, checkBoxFinal != null && checkBox.isChecked());
+                    builder.close();
+                }
+            });
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+            builder.show();
+            if (checkBox != null) {
+                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)checkBox.getLayoutParams();
+                if (layoutParams != null) {
+                    layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
+                    checkBox.setLayoutParams(layoutParams);
+                }
+            }
+        } else {
+            if (delegate != null) {
+                delegate.didSelectDialog(BSMessagesActivity.this, dialog_id, param);
+                Bundle args = new Bundle();
+                int lower_part = (int) dialog_id;
+                int high_id = (int) (dialog_id >> 32);
+                if (lower_part != 0) {
+                    if (high_id == 1) {
+                        args.putInt("chat_id", lower_part);
+                    } else {
+                        if (lower_part > 0) {
+                            args.putInt("user_id", lower_part);
+                        } else if (lower_part < 0) {
+                            args.putInt("chat_id", -lower_part);
+                        }
+                    }
+                } else {
+                    args.putInt("enc_id", high_id);
+                }
+                presentFragment(BSChatActivity.class, args, true);
+                delegate = null;
+            } else {
+                finishFragment();
+            }
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.dialogsNeedReload) {
+            if (dialogsAdapter != null) {
+                dialogsAdapter.notifyDataSetChanged();
+            }
+            if (messagesListView != null) {
+                try {
+                    if (messagesListView.getAdapter() != null && messagesListView.getAdapter() instanceof BaseAdapter) {
+                        ((BaseAdapter) messagesListView.getAdapter()).notifyDataSetChanged();
+                    }
+                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                        emptyView.setVisibility(View.GONE);
+                    } else {
+                        messagesListView.setEmptyView(emptyView);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("bsmessages", e);
+                }
+            } else if (id == NotificationCenter.emojiDidLoaded) {
+                if (messagesListView != null) {
+                    updateVisibleRows(0);
+                }
+            } else if (id == NotificationCenter.updateInterfaces) {
+                updateVisibleRows((Integer) args[0]);
+            } else if (id == NotificationCenter.appDidLogout) {
+                dialogsLoaded = false;
+                finishFragment();
+            } else if (id == NotificationCenter.encryptedChatUpdated) {
+                updateVisibleRows(0);
+            } else if (id == NotificationCenter.contactsDidLoaded) {
+                updateVisibleRows(0);
+            } else if (id == NotificationCenter.openedChatChanged) {
+                if (!serverOnly && AndroidUtilities.isTablet()) {
+                    boolean close = (Boolean) args[1];
+                    long dialog_id = (Long) args[0];
+                    if (close) {
+                        if (dialog_id == openedDialogId) {
+                            openedDialogId = 0;
+                        }
+                    } else {
+                        openedDialogId = dialog_id;
+                    }
+                    if (dialogsAdapter != null) {
+                        dialogsAdapter.setOpenedDialogId(openedDialogId);
+                    }
+                    updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
+                }
+            }
+        } else if (id == NotificationCenter.appDidLogout) {
+            finishFragment();
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (messagesListView == null) {
+            return;
+        }
+        int count = messagesListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = messagesListView.getChildAt(a);
+            if (child instanceof DialogCell) {
+                DialogCell cell = (DialogCell) child;
+                if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
+                    cell.update(mask);
+                }
+            } else if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/BSSecretChatContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/BSSecretChatContactsActivity.java
new file mode 100644
index 000000000..c8285385e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/BSSecretChatContactsActivity.java
@@ -0,0 +1,419 @@
+package org.telegram.bsui;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.InputType;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.SecretChatHelper;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.Adapters.BSContactsAdapter;
+import org.telegram.bsui.Adapters.BSContactsSearchAdapter;
+import org.telegram.bsui.widget.BSBaseActivity;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.SectionsListView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by Ji on 29.12.2014.
+ */
+public class BSSecretChatContactsActivity extends BSBaseActivity implements NotificationCenter.NotificationCenterDelegate {
+
+    private BaseSectionsAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private SectionsListView listView;
+    private BSContactsSearchAdapter searchListViewAdapter;
+
+    private boolean searchWas;
+    private boolean searching;
+    private boolean onlyUsers;
+    private boolean needPhonebook;
+    private boolean destroyAfterSelect;
+    private boolean returnAsResult;
+    private boolean createSecretChat;
+    private boolean creatingChat = false;
+    private String selectAlertString = null;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private boolean allowUsernameSearch = true;
+    private ContactsActivityDelegate delegate;
+    public  Bundle arguments;
+    protected View fragmentView;
+    public Bundle getArguments() {
+        return arguments;
+    }
+
+    public static interface ContactsActivityDelegate {
+        public abstract void didSelectContact(TLRPC.User user, String param);
+    }
+
+    @Override
+    protected void onBSCreate() {
+        super.onBSCreate();
+        this.arguments = getIntent().getExtras();
+        Initialize();
+    }
+
+    private void Initialize() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        if (arguments != null) {
+            onlyUsers = getArguments().getBoolean("onlyUsers", false);
+            destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
+            returnAsResult = arguments.getBoolean("returnAsResult", false);
+            createSecretChat = arguments.getBoolean("createSecretChat", false);
+            selectAlertString = arguments.getString("selectAlertString");
+            allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
+        } else {
+            needPhonebook = true;
+        }
+        ContactsController.getInstance().checkInviteText();
+        IniActionBar();
+        View view = createView();
+        setBSContentView(createActionBar(view));
+    }
+
+    @Override
+    protected void onBSDestroy() {
+        super.onBSDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        delegate = null;
+    }
+
+    public View createView() {
+        if (fragmentView == null) {
+            searching = false;
+            searchWas = false;
+
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            if (destroyAfterSelect) {
+                if (returnAsResult) {
+                    actionBar.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
+                } else {
+                    actionBar.setTitle(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
+                }
+            } else {
+                actionBar.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
+            }
+            actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            searchListViewAdapter = new BSContactsSearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
+            listViewAdapter = new BSContactsAdapter(getParentActivity(), onlyUsers, needPhonebook, ignoreUsers);
+
+            fragmentView = new FrameLayout(getParentActivity());
+            fragmentView.setBackgroundColor(Color.parseColor("#FFFFFF"));
+            LinearLayout emptyTextLayout = new LinearLayout(getParentActivity());
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            ((FrameLayout) fragmentView).addView(emptyTextLayout);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            emptyTextLayout.setLayoutParams(layoutParams);
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            emptyTextView = new TextView(getParentActivity());
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView);
+            LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            emptyTextView.setLayoutParams(layoutParams1);
+
+            FrameLayout frameLayout = new FrameLayout(getParentActivity());
+            emptyTextLayout.addView(frameLayout);
+            layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
+            layoutParams1.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.weight = 0.5f;
+            frameLayout.setLayoutParams(layoutParams1);
+
+            listView = new SectionsListView(getParentActivity());
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            if (Build.VERSION.SDK_INT >= 11) {
+                listView.setFastScrollAlwaysVisible(true);
+                listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            }
+            ((FrameLayout) fragmentView).addView(listView);
+            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            listView.setLayoutParams(layoutParams);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (searching && searchWas) {
+                        TLRPC.User user = searchListViewAdapter.getItem(i);
+                        if (user == null || user.id == UserConfig.getClientUserId()) {
+                            return;
+                        }
+                        if (searchListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
+                        if (returnAsResult) {
+                            if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                return;
+                            }
+                            didSelectResult(user, true, null);
+                        } else {
+                            if (createSecretChat) {
+                                creatingChat = true;
+                                SecretChatHelper.getInstance().startSecretChatBS(getParentActivity(), user);
+                            } else {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", user.id);
+                                presentFragment(BSChatActivity.class, args, true);
+                            }
+                        }
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        if (!onlyUsers && section == 0) {
+                            if (needPhonebook) {
+                                if (row == 0) {
+                                    try {
+                                        Intent intent = new Intent(Intent.ACTION_SEND);
+                                        intent.setType("text/plain");
+                                        intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
+                                        startBSActivity(intent);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            } else {
+                                if (row == 0) {
+                                    presentFragment(BSGroupCreateActivity.class, true);
+                                } else if (row == 1) {
+                                    Bundle args = new Bundle();
+                                    args.putBoolean("onlyUsers", true);
+                                    args.putBoolean("destroyAfterSelect", true);
+                                    args.putBoolean("createSecretChat", true);
+                                    presentFragment(BSSecretChatContactsActivity.class, args, true);
+                                } else if (row == 2) {
+                                    Bundle args = new Bundle();
+                                    args.putBoolean("broadcast", true);
+                                    presentFragment(BSGroupCreateActivity.class,args, true);
+                                }
+                            }
+                        } else {
+                            Object item = listViewAdapter.getItem(section, row);
+
+                            if (item instanceof TLRPC.User) {
+                                TLRPC.User user = (TLRPC.User) item;
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    return;
+                                }
+                                if (returnAsResult) {
+                                    if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                        return;
+                                    }
+                                    didSelectResult(user, true, null);
+                                } else {
+                                    if (createSecretChat) {
+                                        creatingChat = true;
+                                        SecretChatHelper.getInstance().startSecretChatBS(getParentActivity(), user);
+                                    } else {
+                                        Bundle args = new Bundle();
+                                        args.putInt("user_id", user.id);
+                                        presentFragment(BSChatActivity.class,args, true);
+                                    }
+                                }
+                            } else if (item instanceof ContactsController.Contact) {
+                                ContactsController.Contact contact = (ContactsController.Contact) item;
+                                String usePhone = null;
+                                if (!contact.phones.isEmpty()) {
+                                    usePhone = contact.phones.get(0);
+                                }
+                                if (usePhone == null || getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                final String arg1 = usePhone;
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        try {
+                                            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
+                                            intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
+                                            startBSActivity(intent);
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            }
+                        }
+                    }
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(fragmentView);
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void didSelectResult(final TLRPC.User user, boolean useAlert, String param) {
+        if (useAlert && selectAlertString != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+            final EditText editText = new EditText(getParentActivity());
+            if (Build.VERSION.SDK_INT < 11) {
+                editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
+            }
+            editText.setTextSize(18);
+            editText.setText("50");
+            editText.setGravity(Gravity.CENTER);
+            editText.setInputType(InputType.TYPE_CLASS_NUMBER);
+            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            builder.setView(editText);
+            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    didSelectResult(user, false, editText.getText().toString());
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
+            if (layoutParams != null) {
+                if (layoutParams instanceof FrameLayout.LayoutParams) {
+                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                }
+                layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.bsDp(10);
+                editText.setLayoutParams(layoutParams);
+            }
+            editText.setSelection(editText.getText().length());
+        } else {
+            if (delegate != null) {
+                delegate.didSelectContact(user, param);
+                delegate = null;
+            }
+            finishFragment();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.encryptedChatCreated) {
+            if (createSecretChat && creatingChat) {
+                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
+                Bundle args2 = new Bundle();
+                args2.putInt("enc_id", encryptedChat.id);
+                presentFragment(BSChatActivity.class,args2, true);
+            }
+        } else if (id == NotificationCenter.appDidLogout) {
+            finishFragment();
+        }
+    }
+    private void updateVisibleRows(int mask) {
+        if (listView != null) {
+            int count = listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = listView.getChildAt(a);
+                if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
+                }
+            }
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActionCell.java
new file mode 100644
index 000000000..a1f7e910d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActionCell.java
@@ -0,0 +1,77 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.ui.Cells.ChatActionCell;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatActionCell extends ChatActionCell {
+
+    private static Drawable backgroundBlack;
+    private static Drawable backgroundBlue;
+    private static TextPaint textPaint;
+
+    public BSChatActionCell(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void initBackground() {
+        if (backgroundBlack == null) {
+            backgroundBlack = getResources().getDrawable(R.drawable.system_blue_bs);
+            backgroundBlue = getResources().getDrawable(R.drawable.system_blue_bs);
+
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(0xffffffff);
+            textPaint.linkColor = 0xffffffff;
+            textPaint.setTextSize(dp(MessagesController.getInstance().fontSize));
+        }
+    }
+
+    @Override
+    public Drawable getBackgroundBlack() {
+        return backgroundBlack;
+    }
+
+    @Override
+    public Drawable getBackgroundBlue() {
+        return backgroundBlue;
+    }
+
+    @Override
+    public TextPaint getTextPaint() {
+        return textPaint;
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+    @Override
+    protected int getDisplayY() {
+        return getDisplaySize().y;
+    }
+
+    @Override
+    protected int getDisplayX() {
+        return getDisplaySize().x;
+    }
+
+    private Point getDisplaySize() {
+        return AndroidUtilities.bsDisplaySize;
+    }
+
+    @Override
+    protected float getDensity() {
+        return AndroidUtilities.bsDensity;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActivityEnterView.java
new file mode 100644
index 000000000..98a897ba0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatActivityEnterView.java
@@ -0,0 +1,897 @@
+package org.telegram.bsui.Cells;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.os.Build;
+import android.os.PowerManager;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.yotadevices.sdk.BSActivity;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.Emoji;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.bsui.Components.BSEmojiView;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Components.SizeNotifierRelativeLayout;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatActivityEnterView implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
+
+    private View containerView;
+    private View emoji_container;
+
+    public static interface ChatActivityEnterViewDelegate {
+        public abstract void onMessageSend();
+
+        public abstract void needSendTyping();
+
+        public abstract void onAttachButtonHidden();
+
+        public abstract void onAttachButtonShow();
+    }
+
+    private EditText messsageEditText;
+    private ImageButton sendButton;
+    private ImageView emojiButton;
+    private BSEmojiView emojiView;
+    private TextView recordTimeText;
+    private ImageButton audioSendButton;
+    private View recordPanel;
+    private View slideText;
+    private PowerManager.WakeLock mWakeLock;
+    private SizeNotifierRelativeLayout sizeNotifierRelativeLayout;
+    private FrameLayout attachButton;
+    private AnimatorSetProxy runningAnimation;
+    private AnimatorSetProxy runningAnimation2;
+    private ObjectAnimatorProxy runningAnimationAudio;
+    private int runningAnimationType;
+    private int audioInterfaceState;
+
+    private WindowManager.LayoutParams windowLayoutParams;
+    private boolean showingEmoji;
+
+    private int keyboardHeight;
+    private int keyboardHeightLand;
+    private boolean keyboardVisible;
+    private boolean sendByEnter;
+    private long lastTypingTimeSend;
+    private String lastTimeString;
+    private float startedDraggingX = -1;
+    private float distCanMove = AndroidUtilities.bsDp(80);
+    private boolean recordingAudio;
+
+    private BSActivity parentActivity;
+    private long dialog_id;
+    private boolean ignoreTextChange;
+    private ChatActivityEnterViewDelegate delegate;
+    View parentView;
+    public BSChatActivityEnterView(View parentView) {
+        this.parentView= parentView;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStarted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStartError);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStopped);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidSent);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.hideEmojiKeyboard);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        sendByEnter = preferences.getBoolean("send_by_enter", false);
+    }
+
+    public void onDestroy() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStarted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStartError);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStopped);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidSent);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.hideEmojiKeyboard);
+        if (mWakeLock != null) {
+            try {
+                mWakeLock.release();
+                mWakeLock = null;
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        if (sizeNotifierRelativeLayout != null) {
+            sizeNotifierRelativeLayout.delegate = null;
+        }
+        removeEmojiWindow();
+    }
+
+    public void setContainerView(BSActivity activity, View containerView) {
+        parentActivity = activity;
+        this.containerView = containerView;
+        sizeNotifierRelativeLayout = (SizeNotifierRelativeLayout) containerView.findViewById(R.id.chat_layout_bs);
+        sizeNotifierRelativeLayout.setBackgroundColor(Color.parseColor("#000000"));
+        sizeNotifierRelativeLayout.delegate = this;
+        emoji_container =  containerView.findViewById(R.id.emoji_container);
+
+        messsageEditText = (EditText) containerView.findViewById(R.id.chat_text_edit);
+        messsageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
+        messsageEditText.setHintTextColor(Color.parseColor("#000000"));
+
+        attachButton = (FrameLayout) containerView.findViewById(R.id.chat_attach_button);
+        if (attachButton != null) {
+            ViewProxy.setPivotX(attachButton, AndroidUtilities.bsDp(48));
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+            layoutParams.rightMargin = AndroidUtilities.bsDp(50);//TODO...
+            messsageEditText.setLayoutParams(layoutParams);
+            attachButton.setVisibility(View.VISIBLE);
+        }
+
+        sendButton = (ImageButton) containerView.findViewById(R.id.chat_send_button);
+        sendButton.setVisibility(View.INVISIBLE);
+        ViewProxy.setScaleX(sendButton, 0.1f);
+        ViewProxy.setScaleY(sendButton, 0.1f);
+        ViewProxy.setAlpha(sendButton, 0.0f);
+        sendButton.clearAnimation();
+        emojiButton = (ImageView) containerView.findViewById(R.id.chat_smile_button);
+        audioSendButton = (ImageButton) containerView.findViewById(R.id.chat_audio_send_button);
+        recordPanel = containerView.findViewById(R.id.record_panel);
+        recordTimeText = (TextView) containerView.findViewById(R.id.recording_time_text);
+        slideText = containerView.findViewById(R.id.slideText);
+        TextView textView = (TextView) containerView.findViewById(R.id.slideToCancelTextView);
+        textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
+
+        emojiButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                showEmojiPopup(!showingEmoji);
+            }
+        });
+
+        messsageEditText.setOnKeyListener(new View.OnKeyListener() {
+            @Override
+            public boolean onKey(View view, int i, KeyEvent keyEvent) {
+                if (i == 4 && !keyboardVisible && showingEmoji) {
+                    if (keyEvent.getAction() == 1) {
+                        showEmojiPopup(false);
+                    }
+                    return true;
+                } else if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
+                    sendMessage();
+                    return true;
+                }
+                return false;
+            }
+        });
+
+        messsageEditText.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (showingEmoji) {
+                    showEmojiPopup(false);
+                }
+            }
+        });
+
+        messsageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_SEND) {
+                    sendMessage();
+                    return true;
+                } else if (sendByEnter) {
+                    if (keyEvent != null && i == EditorInfo.IME_NULL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
+                        sendMessage();
+                        return true;
+                    }
+                }
+                return false;
+            }
+        });
+
+        sendButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                sendMessage();
+            }
+        });
+
+        audioSendButton.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                    startedDraggingX = -1;
+                    MediaController.getInstance().startRecording(dialog_id);
+                    updateAudioRecordIntefrace();
+                    audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
+                    startedDraggingX = -1;
+                    MediaController.getInstance().stopRecording(true);
+                    recordingAudio = false;
+                    updateAudioRecordIntefrace();
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE && recordingAudio) {
+                    float x = motionEvent.getX();
+                    if (x < -distCanMove) {
+                        MediaController.getInstance().stopRecording(false);
+                        recordingAudio = false;
+                        updateAudioRecordIntefrace();
+                    }
+
+                    x = x + ViewProxy.getX(audioSendButton);
+                    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
+                    if (startedDraggingX != -1) {
+                        float dist = (x - startedDraggingX);
+                        params.leftMargin = AndroidUtilities.bsDp(30) + (int) dist;
+                        slideText.setLayoutParams(params);
+                        float alpha = 1.0f + dist / distCanMove;
+                        if (alpha > 1) {
+                            alpha = 1;
+                        } else if (alpha < 0) {
+                            alpha = 0;
+                        }
+                        ViewProxy.setAlpha(slideText, alpha);
+                    }
+                    if (x <= ViewProxy.getX(slideText) + slideText.getWidth() + AndroidUtilities.bsDp(30)) {
+                        if (startedDraggingX == -1) {
+                            startedDraggingX = x;
+                            distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.bsDp(48)) / 2.0f;
+                            if (distCanMove <= 0) {
+                                distCanMove = AndroidUtilities.bsDp(80);
+                            } else if (distCanMove > AndroidUtilities.bsDp(80)) {
+                                distCanMove = AndroidUtilities.bsDp(80);
+                            }
+                        }
+                    }
+                    if (params.leftMargin > AndroidUtilities.bsDp(30)) {
+                        params.leftMargin = AndroidUtilities.bsDp(30);
+                        slideText.setLayoutParams(params);
+                        ViewProxy.setAlpha(slideText, 1);
+                        startedDraggingX = -1;
+                    }
+                }
+                view.onTouchEvent(motionEvent);
+                return true;
+            }
+        });
+
+        messsageEditText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                String message = getTrimmedString(charSequence.toString());
+                checkSendButton(true);
+
+                if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
+                    int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+                    TLRPC.User currentUser = null;
+                    if ((int) dialog_id > 0) {
+                        currentUser = MessagesController.getInstance().getUser((int) dialog_id);
+                    }
+                    if (currentUser != null && (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires < currentTime)) {
+                        return;
+                    }
+                    lastTypingTimeSend = System.currentTimeMillis();
+                    if (delegate != null) {
+                        delegate.needSendTyping();
+                    }
+                }
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+                if (sendByEnter && editable.length() > 0 && editable.charAt(editable.length() - 1) == '\n') {
+                    sendMessage();
+                }
+                int i = 0;
+                ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
+                int j = arrayOfImageSpan.length;
+                while (true) {
+                    if (i >= j) {
+                        Emoji.replaceEmoji(editable, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.bsDp(20));
+                        return;
+                    }
+                    editable.removeSpan(arrayOfImageSpan[i]);
+                    i++;
+                }
+            }
+        });
+
+        checkSendButton(false);
+    }
+
+    private void sendMessage() {
+        if (processSendingText(messsageEditText.getText().toString())) {
+            messsageEditText.setText("");
+            lastTypingTimeSend = 0;
+            if (delegate != null) {
+                delegate.onMessageSend();
+            }
+        }
+    }
+
+    public boolean processSendingText(String text) {
+        text = getTrimmedString(text);
+        if (text.length() != 0) {
+            int count = (int) Math.ceil(text.length() / 4096.0f);
+            for (int a = 0; a < count; a++) {
+                String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
+                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id);
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private String getTrimmedString(String src) {
+        String result = src.trim();
+        if (result.length() == 0) {
+            return result;
+        }
+        while (src.startsWith("\n")) {
+            src = src.substring(1);
+        }
+        while (src.endsWith("\n")) {
+            src = src.substring(0, src.length() - 1);
+        }
+        return src;
+    }
+
+    private void checkSendButton(final boolean animated) {
+        String message = getTrimmedString(messsageEditText.getText().toString());
+        if (message.length() > 0) {
+            if (audioSendButton.getVisibility() == View.VISIBLE) {
+                if (animated) {
+                    if (runningAnimationType == 1) {
+                        return;
+                    }
+                    if (runningAnimation != null) {
+                        runningAnimation.cancel();
+                        runningAnimation = null;
+                    }
+                    if (runningAnimation2 != null) {
+                        runningAnimation2.cancel();
+                        runningAnimation2 = null;
+                    }
+
+                    if (attachButton != null) {
+                        runningAnimation2 = new AnimatorSetProxy();
+                        runningAnimation2.playTogether(
+                                ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 0.0f),
+                                ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 0.0f)
+                        );
+                        runningAnimation2.setDuration(100);
+                        runningAnimation2.addListener(new AnimatorListenerAdapterProxy() {
+                            @Override
+                            public void onAnimationEnd(Object animation) {
+                                if (runningAnimation2.equals(animation)) {
+                                    attachButton.setVisibility(View.GONE);
+                                    attachButton.clearAnimation();
+                                }
+                            }
+                        });
+                        runningAnimation2.start();
+
+                        if (messsageEditText != null) {
+                            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                            layoutParams.rightMargin = AndroidUtilities.bsDp(0);
+                            messsageEditText.setLayoutParams(layoutParams);
+                        }
+
+                        delegate.onAttachButtonHidden();
+                    }
+
+                    sendButton.setVisibility(View.VISIBLE);
+                    runningAnimation = new AnimatorSetProxy();
+                    runningAnimationType = 1;
+
+                    runningAnimation.playTogether(
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 0.1f),
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 0.1f),
+                            ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 0.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 1.0f)
+                    );
+
+                    runningAnimation.setDuration(150);
+                    runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                        @Override
+                        public void onAnimationEnd(Object animation) {
+                            if (runningAnimation.equals(animation)) {
+                                sendButton.setVisibility(View.VISIBLE);
+                                audioSendButton.setVisibility(View.GONE);
+                                audioSendButton.clearAnimation();
+                                runningAnimation = null;
+                                runningAnimationType = 0;
+                            }
+                        }
+                    });
+                    runningAnimation.start();
+                } else {
+                    ViewProxy.setScaleX(audioSendButton, 0.1f);
+                    ViewProxy.setScaleY(audioSendButton, 0.1f);
+                    ViewProxy.setAlpha(audioSendButton, 0.0f);
+                    ViewProxy.setScaleX(sendButton, 1.0f);
+                    ViewProxy.setScaleY(sendButton, 1.0f);
+                    ViewProxy.setAlpha(sendButton, 1.0f);
+                    sendButton.setVisibility(View.VISIBLE);
+                    audioSendButton.setVisibility(View.GONE);
+                    audioSendButton.clearAnimation();
+                    if (attachButton != null) {
+                        attachButton.setVisibility(View.GONE);
+                        attachButton.clearAnimation();
+
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                        layoutParams.rightMargin = AndroidUtilities.bsDp(0);
+                        messsageEditText.setLayoutParams(layoutParams);
+                    }
+                }
+            }
+        } else if (sendButton.getVisibility() == View.VISIBLE) {
+            if (animated) {
+                if (runningAnimationType == 2) {
+                    return;
+                }
+
+                if (runningAnimation != null) {
+                    runningAnimation.cancel();
+                    runningAnimation = null;
+                }
+                if (runningAnimation2 != null) {
+                    runningAnimation2.cancel();
+                    runningAnimation2 = null;
+                }
+
+                if (attachButton != null) {
+                    attachButton.setVisibility(View.VISIBLE);
+                    runningAnimation2 = new AnimatorSetProxy();
+                    runningAnimation2.playTogether(
+                            ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 1.0f)
+                    );
+                    runningAnimation2.setDuration(100);
+                    runningAnimation2.start();
+
+                    if (messsageEditText != null) {
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                        layoutParams.rightMargin = AndroidUtilities.bsDp(50);//TODO...
+                        messsageEditText.setLayoutParams(layoutParams);
+                    }
+
+                    delegate.onAttachButtonShow();
+                }
+
+                audioSendButton.setVisibility(View.VISIBLE);
+                runningAnimation = new AnimatorSetProxy();
+                runningAnimationType = 2;
+
+                runningAnimation.playTogether(
+                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f),
+                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f),
+                        ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 1.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 1.0f),
+                        ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 1.0f)
+                );
+
+                runningAnimation.setDuration(150);
+                runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (runningAnimation.equals(animation)) {
+                            sendButton.setVisibility(View.GONE);
+                            sendButton.clearAnimation();
+                            audioSendButton.setVisibility(View.VISIBLE);
+                            runningAnimation = null;
+                            runningAnimationType = 0;
+                        }
+                    }
+                });
+                runningAnimation.start();
+            } else {
+                ViewProxy.setScaleX(sendButton, 0.1f);
+                ViewProxy.setScaleY(sendButton, 0.1f);
+                ViewProxy.setAlpha(sendButton, 0.0f);
+                ViewProxy.setScaleX(audioSendButton, 1.0f);
+                ViewProxy.setScaleY(audioSendButton, 1.0f);
+                ViewProxy.setAlpha(audioSendButton, 1.0f);
+                sendButton.setVisibility(View.GONE);
+                sendButton.clearAnimation();
+                audioSendButton.setVisibility(View.VISIBLE);
+                if (attachButton != null) {
+                    attachButton.setVisibility(View.VISIBLE);
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
+                    layoutParams.rightMargin = AndroidUtilities.bsDp(50);//TODO...
+                    messsageEditText.setLayoutParams(layoutParams);
+                }
+            }
+        }
+    }
+
+    private void updateAudioRecordIntefrace() {
+        if (recordingAudio) {
+            if (audioInterfaceState == 1) {
+                return;
+            }
+            audioInterfaceState = 1;
+            try {
+                if (mWakeLock == null) {
+                    PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+                    mWakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, "audio record lock");
+                    mWakeLock.acquire();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            //AndroidUtilities.lockOrientation(parentActivity);
+
+            recordPanel.setVisibility(View.VISIBLE);
+            recordTimeText.setText("00:00");
+            lastTimeString = null;
+
+            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
+            params.leftMargin = AndroidUtilities.bsDp(30);
+            slideText.setLayoutParams(params);
+            ViewProxy.setAlpha(slideText, 1);
+            ViewProxy.setX(recordPanel, AndroidUtilities.bsDisplaySize.x);
+            if (runningAnimationAudio != null) {
+                runningAnimationAudio.cancel();
+            }
+            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", 0).setDuration(300);
+            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animator) {
+                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
+                        ViewProxy.setX(recordPanel, 0);
+                    }
+                }
+            });
+            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
+            runningAnimationAudio.start();
+        } else {
+            if (mWakeLock != null) {
+                try {
+                    mWakeLock.release();
+                    mWakeLock = null;
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            //AndroidUtilities.unlockOrientation(parentActivity);
+            if (audioInterfaceState == 0) {
+                return;
+            }
+            audioInterfaceState = 0;
+
+            if (runningAnimationAudio != null) {
+                runningAnimationAudio.cancel();
+            }
+            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", AndroidUtilities.bsDisplaySize.x).setDuration(300);
+            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animator) {
+                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
+                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
+                        params.leftMargin = AndroidUtilities.bsDp(30);
+                        slideText.setLayoutParams(params);
+                        ViewProxy.setAlpha(slideText, 1);
+                        recordPanel.setVisibility(View.GONE);
+                    }
+                }
+            });
+            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
+            runningAnimationAudio.start();
+        }
+    }
+
+    private void showEmojiPopup(boolean show) {
+        showingEmoji = show;
+        if (show) {
+            if (emojiView == null) {
+                if (parentActivity == null) {
+                    return;
+                }
+                emojiView = new BSEmojiView(parentActivity);
+                emojiView.setListener(new BSEmojiView.Listener() {
+                    public void onBackspace() {
+                        messsageEditText.dispatchKeyEvent(new KeyEvent(0, 67));
+                    }
+
+                    public void onEmojiSelected(String symbol) {
+                        int i = messsageEditText.getSelectionEnd();
+                        if (i < 0) {
+                            i = 0;
+                        }
+                        try {
+                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.bsDp(20));
+                            messsageEditText.setText(messsageEditText.getText().insert(i, localCharSequence));
+                            int j = i + localCharSequence.length();
+                            messsageEditText.setSelection(j, j);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                });
+
+                windowLayoutParams = new WindowManager.LayoutParams();
+                windowLayoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+                if (Build.VERSION.SDK_INT >= 21) {
+                    windowLayoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
+                } else {
+                    //windowLayoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
+                    //windowLayoutParams.token = parentActivity.getWindow().getDecorView().getWindowToken();??
+                }
+                windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+            }
+            int currentHeight;
+            if (keyboardHeight <= 0) {
+                keyboardHeight =  AndroidUtilities.bsDp(200);
+            }
+            if (keyboardHeightLand <= 0) {
+                keyboardHeightLand = AndroidUtilities.bsDp(200);
+            }
+            currentHeight = keyboardHeight;
+            windowLayoutParams.height = currentHeight;
+            windowLayoutParams.width = AndroidUtilities.bsDisplaySize.x + AndroidUtilities.bsDp(30);
+
+          //  windowLayoutParams.width = AndroidUtilities.bsDisplaySize.x;
+
+            try {
+                View v = containerView.findViewById(R.id.emoji_container);
+                ((ViewGroup) v).addView(emojiView, windowLayoutParams);
+                //wm.addView(emojiView, windowLayoutParams);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                return;
+            }
+
+            if (!keyboardVisible) {
+                if (sizeNotifierRelativeLayout != null) {
+                    SetHeight(currentHeight);
+                    emojiButton.setImageResource(R.drawable.ic_msg_panel_hide);
+                }
+                return;
+            }
+            emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
+            return;
+        }
+        if (emojiButton != null) {
+            emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
+        }
+        removeEmojiWindow();
+        if (sizeNotifierRelativeLayout != null) {
+            sizeNotifierRelativeLayout.post(new Runnable() {
+                public void run() {
+                    if (sizeNotifierRelativeLayout != null) {
+                        SetHeight(0);
+                    }
+                }
+            });
+        }
+    }
+
+    private void SetHeight(int currentHeight) {
+        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams)emoji_container.getLayoutParams();
+        layoutParams.height = currentHeight;
+        emoji_container.setLayoutParams(layoutParams);
+
+    }
+
+    private void removeEmojiWindow() {
+        if (emojiView == null) {
+            return;
+        }
+        try {
+            if (emojiView.getParent() != null) {
+                ((ViewGroup)emojiView.getParent()).removeView(emojiView);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public void hideEmojiPopup() {
+        if (showingEmoji) {
+            showEmojiPopup(false);
+        }
+    }
+
+    public void setDelegate(ChatActivityEnterViewDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public void setDialogId(long id) {
+        dialog_id = id;
+    }
+
+    public void setFieldText(String text) {
+        if (messsageEditText == null) {
+            return;
+        }
+        ignoreTextChange = true;
+        messsageEditText.setText(text);
+        messsageEditText.setSelection(messsageEditText.getText().length());
+        ignoreTextChange = false;
+    }
+
+    public void setFieldFocused(boolean focus) {
+        if (messsageEditText == null) {
+            return;
+        }
+        if (focus) {
+            if (!messsageEditText.isFocused()) {
+                messsageEditText.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (messsageEditText != null) {
+                            try {
+                                messsageEditText.requestFocus();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    }
+                }, 600);
+            }
+        } else {
+            if (messsageEditText.isFocused() && !keyboardVisible) {
+                messsageEditText.clearFocus();
+            }
+        }
+    }
+
+    public boolean hasText() {
+        return messsageEditText != null && messsageEditText.length() > 0;
+    }
+
+    public String getFieldText() {
+        if (messsageEditText != null && messsageEditText.length() > 0) {
+            return messsageEditText.getText().toString();
+        }
+        return null;
+    }
+
+    public boolean isEmojiPopupShowing() {
+        return showingEmoji;
+    }
+
+    public void addToAttachLayout(View view) {
+        if (attachButton == null) {
+            return;
+        }
+        if (view.getParent() != null) {
+            ViewGroup viewGroup = (ViewGroup) view.getParent();
+            viewGroup.removeView(view);
+        }
+        attachButton.addView(view);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
+        layoutParams.gravity = Gravity.CENTER;
+        layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        view.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    public void onSizeChanged(int height) {
+
+        WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        if (wm == null || wm.getDefaultDisplay() == null) {
+            return;
+        }
+        int rotation = wm.getDefaultDisplay().getRotation();
+
+        if (height > AndroidUtilities.bsDp(50) && keyboardVisible) {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                keyboardHeightLand = height;
+                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height_land3", keyboardHeightLand).commit();
+            } else {
+                keyboardHeight = height;
+                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height", keyboardHeight).commit();
+            }
+        }
+
+        if (showingEmoji) {
+            int newHeight = 0;
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                newHeight = keyboardHeightLand;
+            } else {
+                newHeight = keyboardHeight;
+            }
+            if (windowLayoutParams.width != AndroidUtilities.bsDisplaySize.x || windowLayoutParams.height != newHeight) {
+                windowLayoutParams.width = AndroidUtilities.bsDisplaySize.x;
+                windowLayoutParams.height = newHeight;
+                //wm.updateViewLayout(emojiView, windowLayoutParams);
+                if (!keyboardVisible) {
+                    sizeNotifierRelativeLayout.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (sizeNotifierRelativeLayout != null) {
+                                SetHeight(windowLayoutParams.height);
+                            }
+                        }
+                    });
+                }
+            }
+        }
+
+        boolean oldValue = keyboardVisible;
+        keyboardVisible = height > 0;
+        if (keyboardVisible && sizeNotifierRelativeLayout.getPaddingBottom() > 0) {
+            showEmojiPopup(false);
+        } else if (!keyboardVisible && keyboardVisible != oldValue && showingEmoji) {
+            showEmojiPopup(false);
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.emojiDidLoaded) {
+            if (emojiView != null) {
+                emojiView.invalidateViews();
+            }
+        } else if (id == NotificationCenter.recordProgressChanged) {
+            Long time = (Long) args[0] / 1000;
+            String str = String.format("%02d:%02d", time / 60, time % 60);
+            if (lastTimeString == null || !lastTimeString.equals(str)) {
+                if (recordTimeText != null) {
+                    recordTimeText.setText(str);
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            if (messsageEditText != null && messsageEditText.isFocused()) {
+                AndroidUtilities.hideKeyboard(messsageEditText);
+            }
+        } else if (id == NotificationCenter.recordStartError || id == NotificationCenter.recordStopped) {
+            if (recordingAudio) {
+                recordingAudio = false;
+                updateAudioRecordIntefrace();
+            }
+        } else if (id == NotificationCenter.recordStarted) {
+            if (!recordingAudio) {
+                recordingAudio = true;
+                updateAudioRecordIntefrace();
+            }
+        } else if (id == NotificationCenter.audioDidSent) {
+            if (delegate != null) {
+                delegate.onMessageSend();
+            }
+        } else if (id == NotificationCenter.hideEmojiKeyboard) {
+            hideEmojiPopup();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatAudioCell.java
new file mode 100644
index 000000000..b121d1684
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatAudioCell.java
@@ -0,0 +1,151 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.ui.Cells.ChatAudioCell;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatAudioCell extends ChatAudioCell {
+
+    private static Drawable backgroundDrawableIn;
+    private static Drawable backgroundDrawableOut;
+    private static Drawable backgroundDrawableInSelected;
+    private static Drawable backgroundDrawableOutSelected;
+    private static TextPaint timePaint;
+    private static TextPaint timePaintIn;
+    private static TextPaint timePaintOut;
+
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable checkMediaDrawable;
+    private static Drawable halfCheckMediaDrawable;
+    private static Drawable clockMediaDrawable;
+    private static Drawable broadcastMediaDrawable;
+    private static Drawable errorDrawable;
+    protected static Drawable mediaBackgroundDrawable;
+
+    public BSChatAudioCell(Context context) {
+        super(context);
+        if(timePaint == null) {
+            backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in_bs);
+            backgroundDrawableOut = getResources().getDrawable(R.drawable.msg_out_bs);
+            backgroundDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_selected_bs);
+            backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected_bs);
+
+            checkDrawable = getResources().getDrawable(R.drawable.msg_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.msg_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            checkMediaDrawable = getResources().getDrawable(R.drawable.msg_check_w);
+            halfCheckMediaDrawable = getResources().getDrawable(R.drawable.msg_halfcheck_w);
+            clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
+            errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
+            mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
+
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+
+            timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintIn.setColor(0xffa1aab3);
+
+            timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintOut.setColor(0xff70b15c);
+        }
+        timePaint.setTextSize(dp(12));
+        timePaintIn.setTextSize(dp(12));
+        timePaintOut.setTextSize(dp(12));
+    }
+
+    @Override
+    public TextPaint getTimePaintIn() {
+        return timePaintIn;
+    }
+
+    @Override
+    public TextPaint getTimePaintOut() {
+        return timePaintOut;
+    }
+
+    @Override
+    public Drawable getCheckDrawable() {
+        return checkDrawable;
+    }
+
+    @Override
+    public Drawable getHalfCheckDrawable() {
+        return halfCheckDrawable;
+    }
+
+    @Override
+    public Drawable getClockDrawable() {
+        return clockDrawable;
+    }
+
+    @Override
+    public Drawable getBroadcastDrawable() {
+        return broadcastDrawable;
+    }
+
+    @Override
+    public Drawable getErrorDrawable() {
+        return errorDrawable;
+    }
+
+    @Override
+    public Drawable getBroadcastMediaDrawable() {
+        return broadcastMediaDrawable;
+    }
+
+    @Override
+    public Drawable getClockMediaDrawable() {
+        return clockMediaDrawable;
+    }
+
+    @Override
+    public Drawable getCheckMediaDrawable() {
+        return checkMediaDrawable;
+    }
+
+    @Override
+    public Drawable getHalfCheckMediaDrawable() {
+        return halfCheckMediaDrawable;
+    }
+
+    @Override
+    public TextPaint getTimePaint() {
+        return timePaint;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableIn() {
+        return backgroundDrawableIn;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableInSelected() {
+        return backgroundDrawableInSelected;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableOutSelected() {
+        return backgroundDrawableOutSelected;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableOut() {
+        return backgroundDrawableOut;
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatContactCell.java
new file mode 100644
index 000000000..9612283d9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatContactCell.java
@@ -0,0 +1,112 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.ui.Cells.ChatContactCell;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatContactCell extends ChatContactCell {
+
+    private static TextPaint namePaint;
+    private static TextPaint phonePaint;
+    private static Drawable addContactDrawableIn;
+    private static Drawable addContactDrawableOut;
+    private static Drawable backgroundDrawableIn;
+    private static Drawable backgroundDrawableOut;
+    private static Drawable backgroundDrawableInSelected;
+    private static Drawable backgroundDrawableOutSelected;
+
+    @Override
+    protected TextPaint getNamePaint() {
+        return namePaint;
+    }
+
+    @Override
+    protected TextPaint getPhonePaint() {
+        return phonePaint;
+    }
+
+    @Override
+    protected Drawable getAddContactDrawableIn() {
+        return addContactDrawableIn;
+    }
+
+    @Override
+    protected Drawable getAddContactDrawableOut() {
+        return addContactDrawableOut;
+    }
+
+    public BSChatContactCell(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void initNamePaint() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(dp(15));
+
+            phonePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            phonePaint.setTextSize(dp(15));
+            phonePaint.setColor(0xff000000);
+
+            backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in_bs);
+            backgroundDrawableOut = getResources().getDrawable(R.drawable.msg_out_bs);
+            backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected_bs);
+            backgroundDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_selected_bs);
+
+            addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_black);
+            addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_black);
+        }
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+    @Override
+    protected int getDisplayY() {
+        return getDisplaySize().y;
+    }
+
+    @Override
+    protected int getDisplayX() {
+        return getDisplaySize().x;
+    }
+
+    private Point getDisplaySize() {
+        return AndroidUtilities.bsDisplaySize;
+    }
+
+    @Override
+    protected float getDensity() {
+        return AndroidUtilities.bsDensity;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableIn() {
+        return backgroundDrawableIn;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableOut() {
+        return backgroundDrawableOut;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableOutSelected() {
+        return backgroundDrawableOutSelected;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableInSelected() {
+        return backgroundDrawableInSelected;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMediaCell.java
new file mode 100644
index 000000000..52d99a2d4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMediaCell.java
@@ -0,0 +1,276 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.ui.Cells.ChatMediaCell;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatMediaCell extends ChatMediaCell {
+
+    private static Drawable backgroundDrawableOutSelected;
+    private static Drawable backgroundDrawableIn;
+    private static Drawable backgroundDrawableInSelected;
+    private static Drawable backgroundDrawableOut;
+    private static TextPaint namePaint;
+    private static Paint docBackPaint;
+
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable checkMediaDrawable;
+    private static Drawable halfCheckMediaDrawable;
+    private static Drawable clockMediaDrawable;
+    private static Drawable broadcastMediaDrawable;
+    private static Drawable errorDrawable;
+    protected static Drawable mediaBackgroundDrawable;
+
+    private static TextPaint timePaintIn;
+    private static TextPaint timePaintOut;
+    private static Drawable placeholderDocInDrawable;
+    private static Drawable placeholderDocOutDrawable;
+    private static Drawable videoIconDrawable;
+    private static Drawable docMenuInDrawable;
+    private static Drawable docMenuOutDrawable;
+    private static Drawable[] buttonStatesDrawables = new Drawable[8];
+    private static Drawable[][] buttonStatesDrawablesDoc = new Drawable[3][2];
+    private static TextPaint infoPaint;
+    private static Paint deleteProgressPaint;
+
+
+    public BSChatMediaCell(Context context) {
+        super(context);
+        initMedia();
+    }
+
+    @Override
+    protected void initMedia() {
+        if(placeholderDocInDrawable == null) {
+            placeholderDocInDrawable = getResources().getDrawable(R.drawable.doc_blue);
+            placeholderDocOutDrawable = getResources().getDrawable(R.drawable.doc_green);
+            buttonStatesDrawables[0] = getResources().getDrawable(R.drawable.photoload);
+            buttonStatesDrawables[1] = getResources().getDrawable(R.drawable.photocancel);
+            buttonStatesDrawables[2] = getResources().getDrawable(R.drawable.photogif);
+            buttonStatesDrawables[3] = getResources().getDrawable(R.drawable.playvideo);
+            buttonStatesDrawables[4] = getResources().getDrawable(R.drawable.photopause);
+            buttonStatesDrawables[5] = getResources().getDrawable(R.drawable.burn);
+            buttonStatesDrawables[6] = getResources().getDrawable(R.drawable.circle);
+            buttonStatesDrawables[7] = getResources().getDrawable(R.drawable.photocheck);
+            buttonStatesDrawablesDoc[0][0] = getResources().getDrawable(R.drawable.docload_b);
+            buttonStatesDrawablesDoc[1][0] = getResources().getDrawable(R.drawable.doccancel_b);
+            buttonStatesDrawablesDoc[2][0] = getResources().getDrawable(R.drawable.docpause_b);
+            buttonStatesDrawablesDoc[0][1] = getResources().getDrawable(R.drawable.docload_g);
+            buttonStatesDrawablesDoc[1][1] = getResources().getDrawable(R.drawable.doccancel_g);
+            buttonStatesDrawablesDoc[2][1] = getResources().getDrawable(R.drawable.docpause_g);
+            videoIconDrawable = getResources().getDrawable(R.drawable.ic_video);
+
+            backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in_bs);
+            backgroundDrawableOut = getResources().getDrawable(R.drawable.msg_out_bs);
+            backgroundDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_selected_bs);
+            backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected_bs);
+            docMenuInDrawable = getResources().getDrawable(android.R.color.white);
+            docMenuOutDrawable = getResources().getDrawable(android.R.color.white);
+
+            checkDrawable = getResources().getDrawable(R.drawable.msg_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.msg_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            checkMediaDrawable = getResources().getDrawable(R.drawable.msg_check_w);
+            halfCheckMediaDrawable = getResources().getDrawable(R.drawable.msg_halfcheck_w);
+            clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
+            errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
+            mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
+
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+
+
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xff212121);
+
+
+            docBackPaint = new Paint();
+
+            timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+
+            timePaintIn.setColor(0xffa1aab3);
+
+            timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+
+            timePaintOut.setColor(0xff70b15c);
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(0xffe4e2e0);
+        }
+        infoPaint.setTextSize(dp(12));
+
+        namePaint.setTextSize(dp(16));
+
+        timePaintIn.setTextSize(dp(12));
+
+        timePaintOut.setTextSize(dp(12));
+    }
+
+    @Override
+    public Paint getDeleteProgressPaint() {
+        return deleteProgressPaint;
+    }
+
+    @Override
+    protected Drawable getPlaceholderDocInDrawable() {
+        return placeholderDocInDrawable;
+    }
+
+    @Override
+    protected Drawable getPlaceholderDocOutDrawable() {
+        return placeholderDocOutDrawable;
+    }
+
+    @Override
+    protected Drawable getVideoIconDrawable() {
+        return videoIconDrawable;
+    }
+
+    @Override
+    protected Drawable[] getButtonStatesDrawables() {
+        return buttonStatesDrawables;
+    }
+
+    @Override
+    protected Drawable[][] getButtonStatesDrawablesDoc() {
+        return buttonStatesDrawablesDoc;
+    }
+
+    @Override
+    protected TextPaint getTimePaintIn() {
+        return timePaintIn;
+    }
+
+    @Override
+    protected TextPaint getTimePaintOut() {
+        return timePaintOut;
+    }
+
+    @Override
+    protected Drawable getCheckDrawable() {
+        return checkDrawable;
+    }
+
+    @Override
+    protected Drawable getHalfCheckDrawable() {
+        return halfCheckDrawable;
+    }
+
+    @Override
+    protected Drawable getClockDrawable() {
+        return clockDrawable;
+    }
+
+    @Override
+    protected Drawable getBroadcastDrawable() {
+        return broadcastDrawable;
+    }
+
+    @Override
+    protected Drawable getErrorDrawable() {
+        return errorDrawable;
+    }
+
+    @Override
+    protected Drawable getBroadcastMediaDrawable() {
+        return broadcastMediaDrawable;
+    }
+
+    @Override
+    protected Drawable getClockMediaDrawable() {
+        return clockMediaDrawable;
+    }
+
+    @Override
+    protected Drawable getCheckMediaDrawable() {
+        return checkMediaDrawable;
+    }
+
+    @Override
+    protected Drawable getHalfCheckMediaDrawable() {
+        return halfCheckMediaDrawable;
+    }
+
+    @Override
+    protected Drawable getDocMenuOutDrawable() {
+        return docMenuOutDrawable;
+    }
+
+    @Override
+    protected Drawable getDocMenuInDrawable() {
+        return docMenuInDrawable;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableIn() {
+        return backgroundDrawableIn;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableInSelected() {
+        return backgroundDrawableInSelected;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableOutSelected() {
+        return backgroundDrawableOutSelected;
+    }
+
+    @Override
+    protected Drawable getBackgroundDrawableOut() {
+        return backgroundDrawableOut;
+    }
+
+    @Override
+    protected TextPaint getInfoPaint() {
+        return infoPaint;
+    }
+
+    @Override
+    protected TextPaint getNamePaint() {
+        return namePaint;
+    }
+
+    @Override
+    protected Paint getDocBackPaint() {
+        return docBackPaint;
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+    @Override
+    protected int getDisplayY() {
+        return getDisplaySize().y;
+    }
+
+    @Override
+    protected int getDisplayX() {
+        return getDisplaySize().x;
+    }
+
+    private Point getDisplaySize() {
+        return AndroidUtilities.bsDisplaySize;
+    }
+
+    @Override
+    protected float getDensity() {
+        return AndroidUtilities.bsDensity;
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMessageCell.java
new file mode 100644
index 000000000..f28095c95
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSChatMessageCell.java
@@ -0,0 +1,210 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.graphics.drawable.Drawable;
+import android.text.Spannable;
+import android.text.TextPaint;
+import android.text.style.ClickableSpan;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.MessageObject;
+import org.telegram.bsui.BSMessageObject;
+import org.telegram.bsui.ClickSpan;
+import org.telegram.messenger.R;
+import org.telegram.ui.Cells.ChatMessageCell;
+
+/**
+ * Created by E1ektr0 on 04.01.2015.
+ */
+public class BSChatMessageCell extends ChatMessageCell {
+
+    private final Context context;
+
+    private static Drawable backgroundDrawableIn;
+    private static Drawable backgroundDrawableOut;
+    private static Drawable backgroundDrawableInSelected;
+    private static TextPaint timePaintIn;
+    private static TextPaint timePaintOut;
+    private static TextPaint timeMediaPaint;
+    private static TextPaint namePaint;
+    private static TextPaint forwardNamePaint;
+    private static Drawable backgroundDrawableOutSelected;
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable checkMediaDrawable;
+    private static Drawable halfCheckMediaDrawable;
+    private static Drawable clockMediaDrawable;
+    private static Drawable broadcastMediaDrawable;
+    private static Drawable errorDrawable;
+    protected static Drawable mediaBackgroundDrawable;
+
+    public BSChatMessageCell(Context context) {
+        super(context);
+        this.context = context;
+    }
+
+    @Override
+    protected void initResources() {
+        if(backgroundDrawableIn == null) {
+            backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in_bs);
+            backgroundDrawableOut = getResources().getDrawable(R.drawable.msg_out_bs);
+            backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected_bs);
+            backgroundDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_selected_bs);
+
+            checkDrawable = getResources().getDrawable(R.drawable.msg_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.msg_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            checkMediaDrawable = getResources().getDrawable(R.drawable.msg_check_w);
+            halfCheckMediaDrawable = getResources().getDrawable(R.drawable.msg_halfcheck_w);
+            clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
+            errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
+            mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
+
+            timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintIn.setTextSize(dp(12));
+            timePaintIn.setColor(0xff000000);
+
+            timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintOut.setTextSize(dp(12));
+            timePaintOut.setColor(0xff000000);
+
+            timeMediaPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timeMediaPaint.setTextSize(dp(12));
+            timeMediaPaint.setColor(0xffffffff);
+
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(dp(15));
+
+            forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            forwardNamePaint.setTextSize(dp(14));
+        }
+    }
+
+    @Override
+    public Drawable getCheckDrawable() {
+        return checkDrawable;
+    }
+
+    @Override
+    public Drawable getHalfCheckDrawable() {
+        return halfCheckDrawable;
+    }
+
+    @Override
+    public Drawable getClockDrawable() {
+        return clockDrawable;
+    }
+
+    @Override
+    public Drawable getBroadcastDrawable() {
+        return broadcastDrawable;
+    }
+
+    @Override
+    public Drawable getErrorDrawable() {
+        return errorDrawable;
+    }
+
+    @Override
+    public Drawable getBroadcastMediaDrawable() {
+        return broadcastMediaDrawable;
+    }
+
+    @Override
+    public Drawable getClockMediaDrawable() {
+        return clockMediaDrawable;
+    }
+
+    @Override
+    public Drawable getCheckMediaDrawable() {
+        return checkMediaDrawable;
+    }
+
+    @Override
+    public Drawable getHalfCheckMediaDrawable() {
+        return halfCheckMediaDrawable;
+    }
+
+    @Override
+    public TextPaint getTimePaintIn() {
+        return timePaintIn;
+    }
+
+    @Override
+    public TextPaint getTimePaintOut() {
+        return timePaintOut;
+    }
+
+    @Override
+    public TextPaint getTimeMediaPaint() {
+        return timeMediaPaint;
+    }
+
+    @Override
+    public TextPaint getNamePaint() {
+        return namePaint;
+    }
+
+    @Override
+    public TextPaint getForwardNamePaint() {
+        return forwardNamePaint;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableIn() {
+        return backgroundDrawableIn;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableInSelected() {
+        return backgroundDrawableInSelected;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableOutSelected() {
+        return backgroundDrawableOutSelected;
+    }
+
+    @Override
+    public Drawable getBackgroundDrawableOut() {
+        return backgroundDrawableOut;
+    }
+
+    @Override
+    protected int getDisplayY() {
+        return getDisplaySize().y;
+    }
+
+    @Override
+    protected ClickableSpan[] getSpans(int off, Spannable buffer) {
+        return buffer.getSpans(off, off, ClickSpan.class);
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        super.setMessageObject(messageObject);
+        if(messageObject instanceof BSMessageObject)
+        {
+            ((BSMessageObject)messageObject).setContext(context);
+        }
+    }
+
+    @Override
+    protected int getDisplayX() {
+        return getDisplaySize().x;
+    }
+
+    private Point getDisplaySize() {
+        return AndroidUtilities.bsDisplaySize;
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDialogCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDialogCell.java
new file mode 100644
index 000000000..ce06312e0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDialogCell.java
@@ -0,0 +1,734 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Html;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.Emoji;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.BSAvatarDrawable;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Cells.BaseCell;
+
+/**
+ * Created by Ji on 29.12.2014.
+ */
+public class BSDialogCell extends BaseCell {
+
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint nameUnknownPaint;
+    private static TextPaint messagePaint;
+    private static TextPaint messagePrintingPaint;
+    private static TextPaint timePaint;
+    private static TextPaint countPaint;
+
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable errorDrawable;
+    private static Drawable lockDrawable;
+    private static Drawable countDrawable;
+    private static Drawable groupDrawable;
+    private static Drawable broadcastDrawable;
+
+    private static Paint linePaint;
+
+    private long currentDialogId;
+    private boolean allowPrintStrings;
+    private int lastMessageDate;
+    private int unreadCount;
+    private boolean lastUnreadState;
+    private MessageObject message;
+
+    private ImageReceiver avatarImage;
+    private BSAvatarDrawable avatarDrawable;
+
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+    private CharSequence lastPrintString = null;
+
+    public boolean useSeparator = false;
+
+
+    private int nameLeft;
+    private StaticLayout nameLayout;
+    private boolean drawNameLock;
+    private boolean drawNameGroup;
+    private boolean drawNameBroadcast;
+    private int nameLockLeft;
+    private int nameLockTop;
+
+    private int timeLeft;
+    private int timeTop = AndroidUtilities.bsDp(17);
+    private StaticLayout timeLayout;
+
+    private boolean drawCheck1;
+    private boolean drawCheck2;
+    private boolean drawClock;
+    private int checkDrawLeft;
+    private int checkDrawTop = AndroidUtilities.bsDp(18);
+    private int halfCheckDrawLeft;
+
+    private int messageTop = AndroidUtilities.bsDp(40);
+    private int messageLeft;
+    private StaticLayout messageLayout;
+
+    private boolean drawError;
+    private int errorTop = AndroidUtilities.bsDp(39);
+    private int errorLeft;
+
+    private boolean drawCount;
+    private int countTop = AndroidUtilities.bsDp(39);
+    private int countLeft;
+    private int countWidth;
+    private StaticLayout countLayout;
+
+    private int avatarTop = AndroidUtilities.bsDp(10);
+
+    private void init() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.bsDp(17));
+
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.bsDp(17));
+
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameUnknownPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameUnknownPaint.setTextSize(AndroidUtilities.bsDp(17));
+
+            nameUnknownPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            messagePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePaint.setTextSize(AndroidUtilities.bsDp(16));
+
+
+            linePaint = new Paint();
+
+
+            messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePrintingPaint.setTextSize(AndroidUtilities.bsDp(16));
+
+
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.bsDp(13));
+
+
+            countPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            countPaint.setTextSize(AndroidUtilities.bsDp(13));
+
+            countPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
+            checkDrawable = getResources().getDrawable(R.drawable.dialogs_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.dialogs_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            errorDrawable = getResources().getDrawable(R.drawable.dialogs_warning);
+            countDrawable = getResources().getDrawable(R.drawable.dialogs_badge);
+            groupDrawable = getResources().getDrawable(R.drawable.list_group);
+            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
+        }
+    }
+
+    public BSDialogCell(Context context) {
+        super(context);
+        init();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.bsDp(26));
+        avatarDrawable = new BSAvatarDrawable();
+    }
+
+    public void setDialog(long dialog_id, MessageObject messageObject, boolean usePrintStrings, int date, int unread) {
+        currentDialogId = dialog_id;
+        message = messageObject;
+        allowPrintStrings = usePrintStrings;
+        lastMessageDate = date;
+        unreadCount = unread;
+        lastUnreadState = messageObject != null && messageObject.isUnread();
+        update(0);
+    }
+
+    public long getDialogId() {
+        return currentDialogId;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.bsDp(72));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (currentDialogId == 0) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    public void buildLayout() {
+        String nameString = "";
+        String timeString = "";
+        String countString = null;
+        CharSequence messageString = "";
+        CharSequence printingString = null;
+        if (allowPrintStrings) {
+            printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
+        }
+        TextPaint currentNamePaint = namePaint;
+        TextPaint currentMessagePaint = messagePaint;
+        boolean checkMessage = true;
+
+        drawNameGroup = false;
+        drawNameBroadcast = false;
+        drawNameLock = false;
+
+        if (encryptedChat != null) {
+            drawNameLock = true;
+            nameLockTop = AndroidUtilities.bsDp(16.5f);
+            if (!LocaleController.isRTL) {
+                nameLockLeft = AndroidUtilities.bsDp(72);
+                nameLeft = AndroidUtilities.bsDp(76) + lockDrawable.getIntrinsicWidth();
+            } else {
+                nameLockLeft = getMeasuredWidth() - AndroidUtilities.bsDp(72) - lockDrawable.getIntrinsicWidth();
+                nameLeft = AndroidUtilities.bsDp(14);
+            }
+        } else {
+            if (chat != null) {
+                if (chat.id < 0) {
+                    drawNameBroadcast = true;
+                    nameLockTop = AndroidUtilities.bsDp(16.5f);
+                } else {
+                    drawNameGroup = true;
+                    nameLockTop = AndroidUtilities.bsDp(17.5f);
+                }
+
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.bsDp(72);
+                    nameLeft = AndroidUtilities.bsDp(76) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                } else {
+                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.bsDp(72) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    nameLeft = AndroidUtilities.bsDp(14);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    nameLeft = AndroidUtilities.bsDp(72);
+                } else {
+                    nameLeft = AndroidUtilities.bsDp(14);
+                }
+            }
+        }
+
+        if (message == null) {
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (encryptedChat != null) {
+                    currentMessagePaint = messagePrintingPaint;
+                    if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+                        messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+                        if (user != null && user.first_name != null) {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
+                        } else {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
+                        }
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+                        messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
+                        if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
+                            if (user != null && user.first_name != null) {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
+                            } else {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
+                            }
+                        } else {
+                            messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
+                        }
+                    }
+                }
+            }
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            }
+            drawCheck1 = false;
+            drawCheck2 = false;
+            drawClock = false;
+            drawCount = false;
+            drawError = false;
+        } else {
+            TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
+
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            } else {
+                timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
+            }
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                    messageString = message.messageText;
+                    currentMessagePaint = messagePrintingPaint;
+                } else {
+                    if (chat != null && chat.id > 0) {
+                        String name = "";
+                        if (message.isFromMe()) {
+                            name = LocaleController.getString("FromYou", R.string.FromYou);
+                        } else {
+                            if (fromUser != null) {
+                                if (fromUser.first_name.length() > 0) {
+                                    name = fromUser.first_name;
+                                } else {
+                                    name = fromUser.last_name;
+                                }
+                            }
+                        }
+                        checkMessage = false;
+                        if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                            currentMessagePaint = messagePrintingPaint;
+                            messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#4d83b3>%s</font>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.bsDp(20));
+                        } else {
+                            if (message.messageOwner.message != null) {
+                                String mess = message.messageOwner.message;
+                                if (mess.length() > 150) {
+                                    mess = mess.substring(0, 150);
+                                }
+                                mess = mess.replace("\n", " ");
+                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#808080>%s</font>", name, mess.replace("<", "&lt;").replace(">", "&gt;"))), messagePaint.getFontMetricsInt(), AndroidUtilities.bsDp(20));
+                            }
+                        }
+                    } else {
+                        messageString = message.messageText;
+                        if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                            currentMessagePaint = messagePrintingPaint;
+                        }
+                    }
+                }
+            }
+
+            if (unreadCount != 0) {
+                drawCount = true;
+                countString = String.format("%d", unreadCount);
+            } else {
+                drawCount = false;
+            }
+
+            if (message.isFromMe() && message.isOut()) {
+                if (message.isSending()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = true;
+                    drawError = false;
+                } else if (message.isSendError()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = false;
+                    drawError = true;
+                    drawCount = false;
+                } else if (message.isSent()) {
+                    if (!message.isUnread()) {
+                        drawCheck1 = true;
+                        drawCheck2 = true;
+                    } else {
+                        drawCheck1 = false;
+                        drawCheck2 = true;
+                    }
+                    drawClock = false;
+                    drawError = false;
+                }
+            } else {
+                drawCheck1 = false;
+                drawCheck2 = false;
+                drawClock = false;
+                drawError = false;
+            }
+        }
+
+        int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+        timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        if (!LocaleController.isRTL) {
+            timeLeft = getMeasuredWidth() - AndroidUtilities.bsDp(15) - timeWidth;
+        } else {
+            timeLeft = AndroidUtilities.bsDp(15);
+        }
+
+        if (chat != null) {
+            nameString = chat.title;
+        } else if (user != null) {
+            if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
+                    nameString = ContactsController.formatName(user.first_name, user.last_name);
+                } else {
+                    if (user.phone != null && user.phone.length() != 0) {
+                        nameString = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        currentNamePaint = nameUnknownPaint;
+                        nameString = ContactsController.formatName(user.first_name, user.last_name);
+                    }
+                }
+            } else {
+                nameString = ContactsController.formatName(user.first_name, user.last_name);
+            }
+            if (encryptedChat != null) {
+                currentNamePaint = nameEncryptedPaint;
+            }
+        }
+        if (nameString.length() == 0) {
+            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+        }
+
+        int nameWidth;
+
+        if (!LocaleController.isRTL) {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.bsDp(14) - timeWidth;
+        } else {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.bsDp(72) - timeWidth;
+            nameLeft += timeWidth;
+        }
+        if (drawNameLock) {
+            nameWidth -= AndroidUtilities.bsDp(4) + lockDrawable.getIntrinsicWidth();
+        } else if (drawNameGroup) {
+            nameWidth -= AndroidUtilities.bsDp(4) + groupDrawable.getIntrinsicWidth();
+        } else if (drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.bsDp(4) + broadcastDrawable.getIntrinsicWidth();
+        }
+        if (drawClock) {
+            int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.bsDp(5);
+            nameWidth -= w;
+            if (!LocaleController.isRTL) {
+                checkDrawLeft = timeLeft - w;
+            } else {
+                checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.bsDp(5);
+                nameLeft += w;
+            }
+        } else if (drawCheck2) {
+            int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.bsDp(5);
+            nameWidth -= w;
+            if (drawCheck1) {
+                nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.bsDp(8);
+                if (!LocaleController.isRTL) {
+                    halfCheckDrawLeft = timeLeft - w;
+                    checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.bsDp(5.5f);
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.bsDp(5);
+                    halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.bsDp(5.5f);
+                    nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.bsDp(8);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    checkDrawLeft = timeLeft - w;
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.bsDp(5);
+                    nameLeft += w;
+                }
+            }
+        }
+
+        nameWidth = Math.max(AndroidUtilities.bsDp(12), nameWidth);
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.bsDp(12), TextUtils.TruncateAt.END);
+        try {
+            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        int messageWidth = getMeasuredWidth() - AndroidUtilities.bsDp(88);
+        int avatarLeft;
+        if (!LocaleController.isRTL) {
+            messageLeft = AndroidUtilities.bsDp(72);
+            avatarLeft = AndroidUtilities.bsDp(9);
+        } else {
+            messageLeft = AndroidUtilities.bsDp(16);
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.bsDp(61);
+        }
+        avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.bsDp(52), AndroidUtilities.bsDp(52));
+        if (drawError) {
+            int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.bsDp(8);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                errorLeft = getMeasuredWidth() - errorDrawable.getIntrinsicWidth() - AndroidUtilities.bsDp(11);
+            } else {
+                errorLeft = AndroidUtilities.bsDp(11);
+                messageLeft += w;
+            }
+        } else if (countString != null) {
+            countWidth = Math.max(AndroidUtilities.bsDp(12), (int)Math.ceil(countPaint.measureText(countString)));
+            countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+            int w = countWidth + AndroidUtilities.bsDp(18);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                countLeft = getMeasuredWidth() - countWidth - AndroidUtilities.bsDp(19);
+            } else {
+                countLeft = AndroidUtilities.bsDp(19);
+                messageLeft += w;
+            }
+            drawCount = true;
+        } else {
+            drawCount = false;
+        }
+
+        if (checkMessage) {
+            if (messageString == null) {
+                messageString = "";
+            }
+            String mess = messageString.toString();
+            if (mess.length() > 150) {
+                mess = mess.substring(0, 150);
+            }
+            mess = mess.replace("\n", " ");
+            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.bsDp(17));
+        }
+        messageWidth = Math.max(AndroidUtilities.bsDp(12), messageWidth);
+        CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.bsDp(12), TextUtils.TruncateAt.END);
+        try {
+            messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        double widthpx = 0;
+        float left = 0;
+        if (LocaleController.isRTL) {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft += (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (messageLayout != null && messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft += (messageWidth - widthpx);
+                    }
+                }
+            }
+        } else {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineRight(0);
+                if (left == nameWidth) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft -= (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (messageLayout != null && messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineRight(0);
+                if (left == messageWidth) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft -= (messageWidth - widthpx);
+                    }
+                }
+            }
+        }
+    }
+
+    public void update(int mask) {
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if (allowPrintStrings && (mask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentDialogId);
+                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
+                if (message != null && lastUnreadState != message.isUnread()) {
+                    continueUpdate = true;
+                } else if (allowPrintStrings) {
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
+                    if (dialog != null && unreadCount != dialog.unread_count) {
+                        unreadCount = dialog.unread_count;
+                        continueUpdate = true;
+                    }
+                }
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+        user = null;
+        chat = null;
+        encryptedChat = null;
+
+        int lower_id = (int)currentDialogId;
+        int high_id = (int)(currentDialogId >> 32);
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
+                }
+            }
+        } else {
+            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+        }
+
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            avatarDrawable.setInfo(user);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            avatarDrawable.setInfo(chat);
+        }
+        avatarImage.setImage(photo, "50_50", avatarDrawable, false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+
+        invalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (currentDialogId == 0) {
+            return;
+        }
+
+        if (drawNameLock) {
+            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (drawNameGroup) {
+            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        if (nameLayout != null) {
+            canvas.save();
+            canvas.translate(nameLeft, AndroidUtilities.bsDp(13));
+            nameLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        canvas.save();
+        canvas.translate(timeLeft, timeTop);
+        timeLayout.draw(canvas);
+        canvas.restore();
+
+        if (messageLayout != null) {
+            canvas.save();
+            canvas.translate(messageLeft, messageTop);
+            messageLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (drawClock) {
+            setDrawableBounds(clockDrawable, checkDrawLeft, checkDrawTop);
+            clockDrawable.draw(canvas);
+        } else if (drawCheck2) {
+            if (drawCheck1) {
+                setDrawableBounds(halfCheckDrawable, halfCheckDrawLeft, checkDrawTop);
+                halfCheckDrawable.draw(canvas);
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
+                checkDrawable.draw(canvas);
+            } else {
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
+                checkDrawable.draw(canvas);
+            }
+        }
+
+        if (drawError) {
+            setDrawableBounds(errorDrawable, errorLeft, errorTop);
+            errorDrawable.draw(canvas);
+        } else if (drawCount) {
+            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.bsDp(5.5f), countTop, countWidth + AndroidUtilities.bsDp(11), countDrawable.getIntrinsicHeight());
+            countDrawable.draw(canvas);
+            canvas.save();
+            canvas.translate(countLeft, countTop + AndroidUtilities.bsDp(4));
+            countLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (useSeparator) {
+            if (LocaleController.isRTL) {
+                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.bsDp(72), getMeasuredHeight() - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.bsDp(72), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
+            }
+        }
+
+        avatarImage.draw(canvas);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDividerCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDividerCell.java
new file mode 100644
index 000000000..727f017ca
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSDividerCell.java
@@ -0,0 +1,35 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.ui.Cells.BaseCell;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSDividerCell extends BaseCell {
+
+    private static Paint paint;
+
+    public BSDividerCell(Context context) {
+        super(context);
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.bsDp(16) + 1);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        canvas.drawLine(getPaddingLeft(), AndroidUtilities.bsDp(8), getWidth() - getPaddingRight(), AndroidUtilities.bsDp(8), paint);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSGreySectionCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSGreySectionCell.java
new file mode 100644
index 000000000..f106b768f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSGreySectionCell.java
@@ -0,0 +1,65 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSGreySectionCell extends FrameLayout {
+    private TextView textView;
+
+    private void init() {
+        setBackgroundColor(0xfff2f2f2);
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 8);//14
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff8a8a8a);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams)textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(16);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    public BSGreySectionCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public BSGreySectionCell(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public BSGreySectionCell(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    public BSGreySectionCell(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.bsDp(36), MeasureSpec.EXACTLY));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLetterSectionCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLetterSectionCell.java
new file mode 100644
index 000000000..ffb7cd47b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLetterSectionCell.java
@@ -0,0 +1,42 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSLetterSectionCell extends FrameLayout {
+
+    private TextView textView;
+
+    public BSLetterSectionCell(Context context) {
+        super(context);
+        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.bsDp(54), AndroidUtilities.bsDp(64)));
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);//22
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff808080);
+        textView.setGravity(Gravity.CENTER);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams)textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        textView.setLayoutParams(layoutParams);
+    }
+
+    public void setLetter(String letter) {
+        textView.setText(letter.toUpperCase());
+    }
+
+    public void setCellHeight(int height) {
+        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.bsDp(54), height));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLoadingCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLoadingCell.java
new file mode 100644
index 000000000..24069240e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSLoadingCell.java
@@ -0,0 +1,21 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.ui.Cells.LoadingCell;
+
+
+/**
+ * Created by Ji on 19.01.2015.
+ */
+public class BSLoadingCell extends LoadingCell {
+    public BSLoadingCell(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected int dp(float value) {
+        return AndroidUtilities.bsDp(value);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSProfileSearchCell.java
new file mode 100644
index 000000000..6f2b4c8e2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSProfileSearchCell.java
@@ -0,0 +1,419 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.BSAvatarDrawable;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Cells.BaseCell;
+
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSProfileSearchCell  extends BaseCell {
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint onlinePaint;
+    private static TextPaint offlinePaint;
+    private static Drawable lockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable groupDrawable;
+    private static Paint linePaint;
+
+    private CharSequence currentName;
+    private ImageReceiver avatarImage;
+    private BSAvatarDrawable avatarDrawable;
+    private CharSequence subLabel;
+
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+
+    private String lastName = null;
+    private int lastStatus = 0;
+    private TLRPC.FileLocation lastAvatar = null;
+
+    public boolean useSeparator = false;
+    public float drawAlpha = 1;
+
+    private int nameLeft;
+    private int nameTop;
+    private StaticLayout nameLayout;
+    private boolean drawNameLock;
+    private boolean drawNameBroadcast;
+    private boolean drawNameGroup;
+    private int nameLockLeft;
+    private int nameLockTop;
+
+    private int onlineLeft;
+    private StaticLayout onlineLayout;
+
+    public BSProfileSearchCell(Context context) {
+        super(context);
+        init();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.bsDp(26));
+        avatarDrawable = new BSAvatarDrawable();
+    }
+
+    private void init() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.bsDp(17));
+            namePaint.setColor(0xff212121);
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.bsDp(17));
+            nameEncryptedPaint.setColor(0xff00a60e);
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            onlinePaint.setTextSize(AndroidUtilities.bsDp(16));
+            onlinePaint.setColor(0xff316f9f);
+
+            offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            offlinePaint.setTextSize(AndroidUtilities.bsDp(16));
+            offlinePaint.setColor(0xff999999);
+
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+
+            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
+            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
+            groupDrawable = getResources().getDrawable(R.drawable.list_group);
+        }
+    }
+
+    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
+        currentName = n;
+        user = u;
+        chat = c;
+        encryptedChat = ec;
+        subLabel = s;
+        update(0);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+            lastAvatar = null;
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.bsDp(72));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (user == null && chat == null && encryptedChat == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    public void buildLayout() {
+        CharSequence nameString = "";
+        TextPaint currentNamePaint;
+
+        drawNameBroadcast = false;
+        drawNameLock = false;
+        drawNameGroup = false;
+
+        if (encryptedChat != null) {
+            drawNameLock = true;
+            if (!LocaleController.isRTL) {
+                nameLockLeft = AndroidUtilities.bsDp(72);
+                nameLeft = AndroidUtilities.bsDp(76) + lockDrawable.getIntrinsicWidth();
+            } else {
+                nameLockLeft = getMeasuredWidth() - AndroidUtilities.bsDp(74) - lockDrawable.getIntrinsicWidth();
+                nameLeft = AndroidUtilities.bsDp(11);
+            }
+            nameLockTop = AndroidUtilities.bsDp(16.5f);
+        } else {
+            if (chat != null) {
+
+                if (chat.id < 0) {
+                    drawNameBroadcast = true;
+                    nameLockTop = AndroidUtilities.bsDp(28.5f);
+                } else {
+                    drawNameGroup = true;
+                    nameLockTop = AndroidUtilities.bsDp(30);
+                }
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.bsDp(72);
+                    nameLeft = AndroidUtilities.bsDp(76) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                } else {
+                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.bsDp(74) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    nameLeft = AndroidUtilities.bsDp(11);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    nameLeft = AndroidUtilities.bsDp(72);
+                } else {
+                    nameLeft = AndroidUtilities.bsDp(11);
+                }
+            }
+        }
+
+        if (currentName != null) {
+            nameString = currentName;
+        } else {
+            String nameString2 = "";
+            if (chat != null) {
+                nameString2 = chat.title;
+            } else if (user != null) {
+                nameString2 = ContactsController.formatName(user.first_name, user.last_name);
+            }
+            nameString = nameString2.replace("\n", " ");
+        }
+        if (nameString.length() == 0) {
+            if (user != null && user.phone != null && user.phone.length() != 0) {
+                nameString = PhoneFormat.getInstance().format("+" + user.phone);
+            } else {
+                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+            }
+        }
+        if (encryptedChat != null) {
+            currentNamePaint = nameEncryptedPaint;
+        } else {
+            currentNamePaint = namePaint;
+        }
+
+        int onlineWidth;
+        int nameWidth;
+        if (!LocaleController.isRTL) {
+            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.bsDp(14);
+        } else {
+            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.bsDp(72);
+        }
+        if (drawNameLock) {
+            nameWidth -= AndroidUtilities.bsDp(6) + lockDrawable.getIntrinsicWidth();
+        } else if (drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.bsDp(6) + broadcastDrawable.getIntrinsicWidth();
+        } else if (drawNameGroup) {
+            nameWidth -= AndroidUtilities.bsDp(6) + groupDrawable.getIntrinsicWidth();
+        }
+
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.bsDp(12), TextUtils.TruncateAt.END);
+        nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+        if (chat == null) {
+            if (!LocaleController.isRTL) {
+                onlineLeft = AndroidUtilities.bsDp(72);
+            } else {
+                onlineLeft = AndroidUtilities.bsDp(11);
+            }
+
+            CharSequence onlineString = "";
+            TextPaint currentOnlinePaint = offlinePaint;
+
+            if (subLabel != null) {
+                onlineString = subLabel;
+            } else {
+                onlineString = LocaleController.formatUserStatus(user);
+                if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
+                    currentOnlinePaint = onlinePaint;
+                    onlineString = LocaleController.getString("Online", R.string.Online);
+                }
+            }
+
+            CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, onlineWidth - AndroidUtilities.bsDp(12), TextUtils.TruncateAt.END);
+            onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, onlineWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            nameTop = AndroidUtilities.bsDp(13);
+        } else {
+            onlineLayout = null;
+            nameTop = AndroidUtilities.bsDp(25);
+        }
+
+        int avatarLeft;
+        if (!LocaleController.isRTL) {
+            avatarLeft = AndroidUtilities.bsDp(9);
+        } else {
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.bsDp(61);
+        }
+
+        avatarImage.setImageCoords(avatarLeft, AndroidUtilities.bsDp(10), AndroidUtilities.bsDp(52), AndroidUtilities.bsDp(52));
+
+        double widthpx = 0;
+        float left = 0;
+        if (LocaleController.isRTL) {
+            if (nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft += (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                left = onlineLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                    if (widthpx < onlineWidth) {
+                        onlineLeft += (onlineWidth - widthpx);
+                    }
+                }
+            }
+        } else {
+            if (nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineRight(0);
+                if (left == nameWidth) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft -= (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                left = onlineLayout.getLineRight(0);
+                if (left == onlineWidth) {
+                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                    if (widthpx < onlineWidth) {
+                        onlineLeft -= (onlineWidth - widthpx);
+                    }
+                }
+            }
+        }
+    }
+
+    public void update(int mask) {
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            avatarDrawable.setInfo(user);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            avatarDrawable.setInfo(chat);
+        } else {
+            avatarDrawable.setInfo(0, null, null, false);
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 && user != null || (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 && chat != null) {
+                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0 && user != null) {
+                int newStatus = 0;
+                if (user.status != null) {
+                    newStatus = user.status.expires;
+                }
+                if (newStatus != lastStatus) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && ((mask & MessagesController.UPDATE_MASK_NAME) != 0 && user != null) || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 && chat != null) {
+                String newName;
+                if (user != null) {
+                    newName = user.first_name + user.last_name;
+                } else {
+                    newName = chat.title;
+                }
+                if (!newName.equals(lastName)) {
+                    continueUpdate = true;
+                }
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        if (user != null) {
+            if (user.status != null) {
+                lastStatus = user.status.expires;
+            } else {
+                lastStatus = 0;
+            }
+            lastName = user.first_name + user.last_name;
+        } else if (chat != null) {
+            lastName = chat.title;
+        }
+
+
+        lastAvatar = photo;
+        avatarImage.setImage(photo, "50_50", avatarDrawable, false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+        postInvalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (user == null && chat == null && encryptedChat == null) {
+            return;
+        }
+
+        if (useSeparator) {
+            if (LocaleController.isRTL) {
+                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.bsDp(72), getMeasuredHeight() - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.bsDp(72), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
+            }
+        }
+
+        if (drawAlpha != 1) {
+            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+        }
+
+        if (drawNameLock) {
+            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (drawNameGroup) {
+            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        canvas.save();
+        canvas.translate(nameLeft, nameTop);
+        nameLayout.draw(canvas);
+        canvas.restore();
+
+        if (onlineLayout != null) {
+            canvas.save();
+            canvas.translate(onlineLeft, AndroidUtilities.bsDp(40));
+            onlineLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        avatarImage.draw(canvas);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSTextCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSTextCell.java
new file mode 100644
index 000000000..5ae650e34
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSTextCell.java
@@ -0,0 +1,123 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSTextCell extends FrameLayout {
+
+    private TextView textView;
+    private TextView valueTextView;
+    private ImageView imageView;
+    private ImageView valueImageView;
+
+    public BSTextCell(Context context) {
+        super(context);
+
+        textView = new TextView(context);
+        textView.setTextColor(0xff212121);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 9);//16
+        textView.setLines(1);
+        textView.setMaxLines(1);
+        textView.setSingleLine(true);
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 16 : 71);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 71 : 16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff2f8cc9);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 9);//16
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
+        addView(valueTextView);
+        layoutParams = (LayoutParams) valueTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 24 : 0);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 0 : 24);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT;
+        valueTextView.setLayoutParams(layoutParams);
+
+        imageView = new ImageView(context);
+        imageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+
+        valueImageView = new ImageView(context);
+        valueImageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(valueImageView);
+        layoutParams = (LayoutParams) valueImageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 24 : 0);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 0 : 24);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL;
+        valueImageView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.bsDp(48), MeasureSpec.EXACTLY));
+    }
+
+    public void setTextColor(int color) {
+        textView.setTextColor(color);
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+        imageView.setVisibility(GONE);
+        valueTextView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndIcon(String text, int resId) {
+        textView.setText(text);
+        imageView.setImageResource(resId);
+        imageView.setVisibility(VISIBLE);
+        valueTextView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndValue(String text, String value) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        valueTextView.setVisibility(VISIBLE);
+        imageView.setVisibility(GONE);
+        valueImageView.setVisibility(GONE);
+    }
+
+    public void setTextAndValueDrawable(String text, Drawable drawable) {
+        textView.setText(text);
+        valueImageView.setVisibility(VISIBLE);
+        valueImageView.setImageDrawable(drawable);
+        valueTextView.setVisibility(GONE);
+        imageView.setVisibility(GONE);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSUserCell.java b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSUserCell.java
new file mode 100644
index 000000000..249f7ed10
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Cells/BSUserCell.java
@@ -0,0 +1,230 @@
+package org.telegram.bsui.Cells;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.bsui.BSAvatarDrawable;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.CheckBox;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSUserCell extends FrameLayout {
+
+    private BackupImageView avatarImageView;
+    private TextView nameTextView;
+    private TextView statusTextView;
+    private ImageView imageView;
+    private CheckBox checkBox;
+
+    private BSAvatarDrawable avatarDrawable;
+    private TLRPC.User currentUser = null;
+
+    private CharSequence currentName;
+    private CharSequence currrntStatus;
+    private int currentDrawable;
+
+    private String lastName = null;
+    private int lastStatus = 0;
+    private TLRPC.FileLocation lastAvatar = null;
+
+    private int statusColor = 0xffa8a8a8;
+    private int statusOnlineColor = 0xff3b84c0;
+
+    public BSUserCell(Context context, int padding) {
+        super(context);
+
+        avatarImageView = new BackupImageView(context);
+        avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.bsDp(24));
+        addView(avatarImageView);
+        LayoutParams layoutParams = (LayoutParams) avatarImageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.bsDp(48);
+        layoutParams.height = AndroidUtilities.bsDp(48);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.bsDp(7 + padding);
+        layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.bsDp(7 + padding) : 0;
+        layoutParams.topMargin = AndroidUtilities.bsDp(8);
+        avatarImageView.setLayoutParams(layoutParams);
+        avatarDrawable = new BSAvatarDrawable();
+
+        nameTextView = new TextView(context);
+        nameTextView.setTextColor(0xff212121);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 10);//17;
+        nameTextView.setLines(1);
+        nameTextView.setMaxLines(1);
+        nameTextView.setSingleLine(true);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(nameTextView);
+        layoutParams = (LayoutParams) nameTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 16 : (68 + padding));
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? (68 + padding) : 16);
+        layoutParams.topMargin = AndroidUtilities.bsDp(10.5f);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        nameTextView.setLayoutParams(layoutParams);
+
+        statusTextView = new TextView(context);
+        statusTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 8);//14
+        statusTextView.setLines(1);
+        statusTextView.setMaxLines(1);
+        statusTextView.setSingleLine(true);
+        statusTextView.setEllipsize(TextUtils.TruncateAt.END);
+        statusTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(statusTextView);
+        layoutParams = (LayoutParams) statusTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 16 : (68 + padding));
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? (68 + padding) : 16);
+        layoutParams.topMargin = AndroidUtilities.bsDp(33.5f);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        statusTextView.setLayoutParams(layoutParams);
+
+        imageView = new ImageView(context);
+        imageView.setScaleType(ImageView.ScaleType.CENTER);
+        addView(imageView);
+        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(LocaleController.isRTL ? 16 : 0);
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL;
+        imageView.setLayoutParams(layoutParams);
+
+        checkBox = new CheckBox(context, R.drawable.round_check2);
+        checkBox.setVisibility(GONE);
+        addView(checkBox);
+        layoutParams = (LayoutParams) checkBox.getLayoutParams();
+        layoutParams.width = AndroidUtilities.bsDp(22);
+        layoutParams.height = AndroidUtilities.bsDp(22);
+        layoutParams.topMargin = AndroidUtilities.bsDp(38);
+        layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.bsDp(37 + padding);
+        layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.bsDp(37 + padding) : 0;
+        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        checkBox.setLayoutParams(layoutParams);
+    }
+
+    public void setData(TLRPC.User user, CharSequence name, CharSequence status, int resId) {
+        if (user == null) {
+            currrntStatus = null;
+            currentName = null;
+            currentUser = null;
+            nameTextView.setText("");
+            statusTextView.setText("");
+            avatarImageView.setImageDrawable(null);
+            return;
+        }
+        currrntStatus = status;
+        currentName = name;
+        currentUser = user;
+        currentDrawable = resId;
+        update(0);
+    }
+
+    public void setChecked(boolean checked, boolean animated) {
+        if (checkBox.getVisibility() != VISIBLE) {
+            checkBox.setVisibility(VISIBLE);
+        }
+        checkBox.setChecked(checked, animated);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        lastAvatar = null;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.bsDp(64), MeasureSpec.EXACTLY));
+    }
+
+    public void setStatusColors(int color, int onlineColor) {
+        statusColor = color;
+        statusOnlineColor = onlineColor;
+    }
+
+    public void update(int mask) {
+        if (currentUser == null) {
+            return;
+        }
+        TLRPC.FileLocation photo = null;
+        if (currentUser.photo != null) {
+            photo = currentUser.photo.photo_small;
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                int newStatus = 0;
+                if (currentUser.status != null) {
+                    newStatus = currentUser.status.expires;
+                }
+                if (newStatus != lastStatus) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                String newName = currentUser.first_name + currentUser.last_name;
+                if (newName == null || !newName.equals(lastName)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        avatarDrawable.setInfo(currentUser);
+        if (currentUser.status != null) {
+            lastStatus = currentUser.status.expires;
+        } else {
+            lastStatus = 0;
+        }
+        lastName = currentUser.first_name + currentUser.last_name;
+        lastAvatar = photo;
+
+        if (currentName != null) {
+            nameTextView.setText(currentName);
+        } else {
+            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+        }
+        if (currrntStatus != null) {
+            statusTextView.setText(currrntStatus);
+            statusTextView.setTextColor(statusColor);
+        } else {
+            if (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
+                statusTextView.setText(LocaleController.getString("Online", R.string.Online));
+                statusTextView.setTextColor(statusOnlineColor);
+            } else {
+                statusTextView.setText(LocaleController.formatUserStatus(currentUser));
+                statusTextView.setTextColor(statusColor);
+            }
+        }
+
+        imageView.setVisibility(currentDrawable == 0 ? GONE : VISIBLE);
+        imageView.setImageResource(currentDrawable);
+        avatarImageView.setImage(photo, "50_50", avatarDrawable);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/ClickSpan.java b/TMessagesProj/src/main/java/org/telegram/bsui/ClickSpan.java
new file mode 100644
index 000000000..f70005268
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/ClickSpan.java
@@ -0,0 +1,25 @@
+package org.telegram.bsui;
+
+import android.text.style.ClickableSpan;
+import android.view.View;
+
+/**
+ * Created by Ji on 30.01.2015.
+ */
+public class ClickSpan extends ClickableSpan {
+
+    private OnClickListener mListener;
+
+    public ClickSpan(OnClickListener listener) {
+        mListener = listener;
+    }
+
+    @Override
+    public void onClick(View widget) {
+        if (mListener != null) mListener.onClick();
+    }
+
+    public interface OnClickListener {
+        void onClick();
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSAlertDialog.java b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSAlertDialog.java
new file mode 100644
index 000000000..ca0f8351a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSAlertDialog.java
@@ -0,0 +1,178 @@
+package org.telegram.bsui.Components;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TableLayout;
+import android.widget.TextView;
+
+import com.yotadevices.sdk.BSActivity;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
+
+/**
+ * Created by Ji on 20.01.2015.
+ */
+public class BSAlertDialog extends FrameLayout {
+
+    public BSAlertDialog(final Context context) {
+        super(context);
+        this.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        this.setBackgroundColor(android.R.color.transparent);
+    }
+
+    public static class Builder {
+
+        private BSAlertDialog mDialog;
+        private LinearLayout mMessageBox;
+        private TableLayout mContent;
+        private Context mContext;
+        private Button mCurrentPositive;
+        private Button mCurrentNegative;
+        private LinearLayout mYesNo;
+        private TextView mTitle;
+
+        public Builder(Context context){
+            mContext = context;
+            mDialog = new BSAlertDialog(context);
+            mContent = new TableLayout(context);
+            mMessageBox = new LinearLayout(context);
+            mMessageBox.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+            mYesNo = new LinearLayout(context);
+            mYesNo.setOrientation(LinearLayout.HORIZONTAL);
+            mYesNo.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+            LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            params.setMargins(AndroidUtilities.bsDp(20), 0, AndroidUtilities.bsDp(20), 0);
+            params.gravity = Gravity.CENTER;
+            mContent.setLayoutParams(params);
+            mContent.setBackground(mContext.getResources().getDrawable(R.drawable.bs_dialog_border));
+            mContent.addView(mYesNo);
+            mDialog.addView(mContent);
+        }
+
+        public Builder setView(View view){
+            mContent.addView(view);
+            return this;
+        }
+
+        public Builder setMessage(String message){
+            TextView tw = new TextView(mContext);
+            tw.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+            tw.setText(message);
+            tw.setTextSize(AndroidUtilities.bsDp(6));
+            tw.setTextColor(Color.parseColor("#000000"));
+            tw.setGravity(Gravity.CENTER);
+            tw.setBackground(mContext.getResources().getDrawable(R.drawable.bs_dialog_border));
+            if(mTitle != null) {
+                mContent.addView(tw, 1);
+            } else {
+                mContent.addView(tw, 0);
+            }
+            return this;
+        }
+
+        public Builder setTitle(String title){
+            mTitle = new TextView(mContext);
+            mTitle.setLayoutParams(new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+            mTitle.setGravity(Gravity.CENTER);
+            mTitle.setText(title);
+            mTitle.setPadding(10, 5, 10, 5);
+            mTitle.setTextSize(AndroidUtilities.bsDp(10));
+            mTitle.setBackground(mContext.getResources().getDrawable(R.drawable.bs_dialog_border));
+            mTitle.setTextColor(Color.parseColor("#000000"));
+            mContent.addView(mTitle, 0);
+            return this;
+        }
+
+        public Builder setItems(CharSequence[] items, AdapterView.OnItemClickListener listener){
+            ListView listView = new ListView(mContext);
+            listView.setBackgroundColor(0xffffff);
+            listView.setPadding(5, 5, 5, 5);
+            listView.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+            ArrayAdapter<CharSequence> adapter = new ArrayAdapter<CharSequence>(mContext, android.R.layout.simple_list_item_1, items);
+            listView.setAdapter(adapter);
+            listView.setOnItemClickListener(listener);
+            mContent.addView(listView);
+            return this;
+        }
+
+        public Builder setPositiveButton(String ok, OnClickListener listener) {
+            if(mCurrentPositive != null) mYesNo.removeView(mCurrentPositive);
+            mCurrentPositive = new Button(mContext);
+            mCurrentPositive.setText(ok);
+            mCurrentPositive.setTextColor(Color.parseColor("#000000"));
+            mCurrentPositive.setPadding(5, 0, 5, 0);
+            mCurrentPositive.setTextSize(10);
+            mCurrentPositive.setBackground(mContext.getResources().getDrawable(R.drawable.bs_dialog_border));
+            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.RIGHT;
+            lp.weight = 1;
+            mCurrentPositive.setLayoutParams(lp);
+            mYesNo.addView(mCurrentPositive);
+            if(listener == null){
+                mCurrentPositive.setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        close();
+                    }
+                });
+                return this;
+            } else {
+                mCurrentPositive.setOnClickListener(listener);
+            }
+            return this;
+        }
+
+        public Builder setNegativeButton(String cancel, OnClickListener listener) {
+            if(mCurrentNegative != null) mYesNo.removeView(mCurrentNegative);
+            mCurrentNegative = new Button(mContext);
+            mCurrentNegative.setText(cancel);
+            mCurrentNegative.setTextColor(Color.parseColor("#000000"));
+            mCurrentNegative.setPadding(5, 0, 5, 0);
+            mCurrentNegative.setBackground(mContext.getResources().getDrawable(R.drawable.bs_dialog_border));
+            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.RIGHT;
+            lp.weight = 1;
+            mCurrentNegative.setLayoutParams(lp);
+            mCurrentNegative.setTextSize(10);
+            mYesNo.addView(mCurrentNegative);
+            if(listener == null){
+                mCurrentNegative.setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        close();
+                    }
+                });
+                return this;
+            } else {
+                mCurrentNegative.setOnClickListener(listener);
+            }
+            return this;
+        }
+
+        public void close() {
+            ((BSActivity)mContext).getBSDrawer().removeViewFromBS(mDialog);
+        }
+
+        public BSAlertDialog show(){
+            mDialog.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    close();
+                }
+            });
+            ((BSActivity)mContext).getBSDrawer().addViewToBS(mDialog);
+            return mDialog;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSEmojiView.java b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSEmojiView.java
new file mode 100644
index 000000000..1f9a2bc6c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSEmojiView.java
@@ -0,0 +1,303 @@
+package org.telegram.bsui.Components;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.FrameLayout;
+import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.Emoji;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.Components.PagerSlidingTabStrip;
+
+import java.util.ArrayList;
+
+/**
+ * Created by E1ektr0 on 10.01.2015.
+ */
+public class BSEmojiView extends LinearLayout {
+    private ArrayList<EmojiGridAdapter> adapters = new ArrayList<>();
+    private int[] icons = {
+            R.drawable.ic_emoji_recent,
+            R.drawable.ic_emoji_smile,
+            R.drawable.ic_emoji_flower,
+            R.drawable.ic_emoji_bell,
+            R.drawable.ic_emoji_car,
+            R.drawable.ic_emoji_symbol };
+    private Listener listener;
+    private ViewPager pager;
+    private FrameLayout recentsWrap;
+    private ArrayList<GridView> views = new ArrayList<GridView>();
+
+    public BSEmojiView(Context paramContext) {
+        super(paramContext);
+        init();
+    }
+
+    public BSEmojiView(Context paramContext, AttributeSet paramAttributeSet) {
+        super(paramContext, paramAttributeSet);
+        init();
+    }
+
+    public BSEmojiView(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
+        super(paramContext, paramAttributeSet, paramInt);
+        init();
+    }
+
+    private void addToRecent(long paramLong) {
+        if (this.pager.getCurrentItem() == 0) {
+            return;
+        }
+        ArrayList<Long> localArrayList = new ArrayList<Long>();
+        long[] currentRecent = Emoji.data[0];
+        boolean was = false;
+        for (long aCurrentRecent : currentRecent) {
+            if (paramLong == aCurrentRecent) {
+                localArrayList.add(0, paramLong);
+                was = true;
+            } else {
+                localArrayList.add(aCurrentRecent);
+            }
+        }
+        if (!was) {
+            localArrayList.add(0, paramLong);
+        }
+        Emoji.data[0] = new long[Math.min(localArrayList.size(), 50)];
+        for (int q = 0; q < Emoji.data[0].length; q++) {
+            Emoji.data[0][q] = localArrayList.get(q);
+        }
+        adapters.get(0).data = Emoji.data[0];
+        adapters.get(0).notifyDataSetChanged();
+        saveRecents();
+    }
+
+    private String convert(long paramLong) {
+        String str = "";
+        for (int i = 0; ; i++) {
+            if (i >= 4) {
+                return str;
+            }
+            int j = (int)(0xFFFF & paramLong >> 16 * (3 - i));
+            if (j != 0) {
+                str = str + (char)j;
+            }
+        }
+    }
+
+    private void init() {
+        setOrientation(LinearLayout.VERTICAL);
+        for (int i = 0; i < Emoji.data.length; i++) {
+            GridView gridView = new GridView(getContext());
+            if (AndroidUtilities.isTablet()) {
+                gridView.setColumnWidth(AndroidUtilities.bsDp(60));
+            } else {
+                gridView.setColumnWidth(AndroidUtilities.bsDp(45));
+            }
+            gridView.setNumColumns(-1);
+            views.add(gridView);
+
+            EmojiGridAdapter localEmojiGridAdapter = new EmojiGridAdapter(Emoji.data[i]);
+            gridView.setAdapter(localEmojiGridAdapter);
+            AndroidUtilities.setListViewEdgeEffectColor(gridView, 0xff999999);
+            adapters.add(localEmojiGridAdapter);
+        }
+
+        setBackgroundColor(0xff222222);
+        pager = new ViewPager(getContext());
+        pager.setAdapter(new EmojiPagesAdapter());
+        PagerSlidingTabStrip tabs = new PagerSlidingTabStrip(getContext());
+        tabs.setViewPager(pager);
+        tabs.setShouldExpand(true);
+        tabs.setIndicatorColor(0xff33b5e5);
+        tabs.setIndicatorHeight(AndroidUtilities.bsDp(2.0f));
+        tabs.setUnderlineHeight(AndroidUtilities.bsDp(2.0f));
+        tabs.setUnderlineColor(0x66000000);
+        tabs.setTabBackground(0);
+        LinearLayout localLinearLayout = new LinearLayout(getContext());
+        localLinearLayout.setOrientation(LinearLayout.HORIZONTAL);
+        localLinearLayout.addView(tabs, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f));
+        ImageView localImageView = new ImageView(getContext());
+        localImageView.setImageResource(R.drawable.ic_emoji_backspace);
+        localImageView.setScaleType(ImageView.ScaleType.CENTER);
+        localImageView.setBackgroundResource(R.drawable.bg_emoji_bs);
+        localImageView.setOnClickListener(new OnClickListener() {
+            public void onClick(View view) {
+                if (BSEmojiView.this.listener != null) {
+                    BSEmojiView.this.listener.onBackspace();
+                }
+            }
+        });
+        localLinearLayout.addView(localImageView, new LayoutParams(AndroidUtilities.bsDp(61), LayoutParams.MATCH_PARENT));
+        recentsWrap = new FrameLayout(getContext());
+        recentsWrap.addView(views.get(0));
+        TextView localTextView = new TextView(getContext());
+        localTextView.setText(LocaleController.getString("NoRecent", R.string.NoRecent));
+        localTextView.setTextSize(18.0f);
+        localTextView.setTextColor(-7829368);
+        localTextView.setGravity(17);
+        recentsWrap.addView(localTextView);
+        views.get(0).setEmptyView(localTextView);
+        addView(localLinearLayout, new LayoutParams(-1, AndroidUtilities.bsDp(48.0f)));
+        addView(pager);
+        loadRecents();
+        if (Emoji.data[0] == null || Emoji.data[0].length == 0) {
+            pager.setCurrentItem(1);
+        }
+    }
+
+    private void saveRecents() {
+        ArrayList<Long> localArrayList = new ArrayList<Long>();
+        long[] arrayOfLong = Emoji.data[0];
+        int i = arrayOfLong.length;
+        for (int j = 0; ; j++) {
+            if (j >= i) {
+                getContext().getSharedPreferences("emoji", 0).edit().putString("recents", TextUtils.join(",", localArrayList)).commit();
+                return;
+            }
+            localArrayList.add(arrayOfLong[j]);
+        }
+    }
+
+    public void loadRecents() {
+        String str = getContext().getSharedPreferences("emoji", 0).getString("recents", "");
+        String[] arrayOfString = null;
+        if ((str != null) && (str.length() > 0)) {
+            arrayOfString = str.split(",");
+            Emoji.data[0] = new long[arrayOfString.length];
+        }
+        if (arrayOfString != null) {
+            for (int i = 0; i < arrayOfString.length; i++) {
+                Emoji.data[0][i] = Long.parseLong(arrayOfString[i]);
+            }
+            adapters.get(0).data = Emoji.data[0];
+            adapters.get(0).notifyDataSetChanged();
+        }
+    }
+
+    public void onMeasure(int paramInt1, int paramInt2) {
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(paramInt1), MeasureSpec.EXACTLY),
+                MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(paramInt2), MeasureSpec.EXACTLY));
+    }
+
+    public void setListener(Listener paramListener) {
+        this.listener = paramListener;
+    }
+
+    public void invalidateViews() {
+        for (GridView gridView : views) {
+            if (gridView != null) {
+                gridView.invalidateViews();
+            }
+        }
+    }
+
+    private class EmojiGridAdapter extends BaseAdapter {
+        long[] data;
+
+        public EmojiGridAdapter(long[] arg2) {
+            this.data = arg2;
+        }
+
+        public int getCount() {
+            return data.length;
+        }
+
+        public Object getItem(int i) {
+            return null;
+        }
+
+        public long getItemId(int i) {
+            return data[i];
+        }
+
+        public View getView(int i, View view, ViewGroup paramViewGroup) {
+            ImageView imageView = (ImageView)view;
+            if (imageView == null) {
+                imageView = new ImageView(BSEmojiView.this.getContext()) {
+                    public void onMeasure(int paramAnonymousInt1, int paramAnonymousInt2) {
+                        setMeasuredDimension(MeasureSpec.getSize(paramAnonymousInt1), MeasureSpec.getSize(paramAnonymousInt1));
+                    }
+                };
+                imageView.setOnClickListener(new OnClickListener() {
+                    public void onClick(View view) {
+                        if (BSEmojiView.this.listener != null) {
+                            BSEmojiView.this.listener.onEmojiSelected(BSEmojiView.this.convert((Long)view.getTag()));
+                        }
+                        BSEmojiView.this.addToRecent((Long)view.getTag());
+                    }
+                });
+                imageView.setBackgroundResource(R.drawable.list_selector);
+                imageView.setScaleType(ImageView.ScaleType.CENTER);
+            }
+            imageView.setImageDrawable(Emoji.getEmojiBigDrawable(data[i]));
+            imageView.setTag(data[i]);
+            return imageView;
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
+    }
+
+    private class EmojiPagesAdapter extends PagerAdapter implements PagerSlidingTabStrip.IconTabProvider {
+
+        public void destroyItem(ViewGroup paramViewGroup, int paramInt, Object paramObject) {
+            View localObject;
+            if (paramInt == 0) {
+                localObject = recentsWrap;
+            } else {
+                localObject = views.get(paramInt);
+            }
+            paramViewGroup.removeView(localObject);
+        }
+
+        public int getCount() {
+            return views.size();
+        }
+
+        public int getPageIconResId(int paramInt) {
+            return icons[paramInt];
+        }
+
+        public Object instantiateItem(ViewGroup paramViewGroup, int paramInt) {
+            View localObject;
+            if (paramInt == 0) {
+                localObject = recentsWrap;
+            } else {
+                localObject = views.get(paramInt);
+            }
+            paramViewGroup.addView(localObject);
+            return localObject;
+        }
+
+        public boolean isViewFromObject(View paramView, Object paramObject) {
+            return paramView == paramObject;
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
+    }
+
+    public static abstract interface Listener {
+        public abstract void onBackspace();
+        public abstract void onEmojiSelected(String paramString);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSPhotoViewer.java
new file mode 100644
index 000000000..272fdea38
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSPhotoViewer.java
@@ -0,0 +1,2588 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.bsui.Components;
+
+import android.annotation.SuppressLint;
+import android.app.ActionBar;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.GestureDetector;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.animation.AnimationSet;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.ScaleAnimation;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.Scroller;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.ImageLoader;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.query.SharedMediaQuery;
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.bsui.ActionBar.BSActionBarMenuItem;
+import org.telegram.bsui.BSMessageObject;
+import org.telegram.bsui.OtherFlipBSActivity;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
+import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Components.ClippingImageView;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Locale;
+
+import static android.widget.FrameLayout.LayoutParams;
+
+public class BSPhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
+
+    private static final String LOG_TAG = "BSPhotoViewer";
+    private int classGuid;
+    private PhotoViewerProvider placeProvider;
+    private boolean isVisible;
+
+    private BSActionBar actionBar;
+    private boolean isActionBarVisible = true;
+
+    private static Drawable[] progressDrawables = null;
+
+    private RelativeLayout.LayoutParams windowLayoutParams;
+    private FrameLayoutDrawer containerView;
+
+    public FrameLayoutTouchListener getWindowView() {
+        return windowView;
+    }
+
+    public ClippingImageView getAnimatingImageView() {
+        return animatingImageView;
+    }
+
+    private FrameLayoutTouchListener windowView;
+    private ClippingImageView animatingImageView;
+    private FrameLayout bottomLayout;
+    private TextView nameTextView;
+    private TextView dateTextView;
+    private ImageView deleteButton;
+    private BSActionBarMenuItem menuItem;
+    private ColorDrawable backgroundDrawable = new ColorDrawable(0xff000000);
+    private ImageView checkImageView;
+    private View pickerView;
+    private TextView doneButtonTextView;
+    private TextView doneButtonBadgeTextView;
+    private ImageView shareButton;
+    private RadialProgressView radialProgressViews[] = new RadialProgressView[3];
+    private boolean canShowBottom = true;
+
+    private int animationInProgress = 0;
+    private long transitionAnimationStartTime = 0;
+    private Runnable animationEndRunnable = null;
+    private PlaceProviderObject showAfterAnimation;
+    private PlaceProviderObject hideAfterAnimation;
+    private boolean disableShowCheck = false;
+    private Animation.AnimationListener animationListener;
+
+    private ImageReceiver leftImage = new ImageReceiver();
+    private ImageReceiver centerImage = new ImageReceiver();
+    private ImageReceiver rightImage = new ImageReceiver();
+    private int currentIndex;
+    private MessageObject currentMessageObject;
+    private TLRPC.FileLocation currentFileLocation;
+    private String currentFileNames[] = new String[3];
+    private PlaceProviderObject currentPlaceObject;
+    private String currentPathObject;
+    private Bitmap currentThumb = null;
+    private View buttonPlay;
+
+    private int avatarsUserId;
+    private long currentDialogId;
+    private int totalImagesCount;
+    private boolean isFirstLoading;
+    private boolean needSearchImageInArr;
+    private boolean loadingMoreImages;
+    private boolean cacheEndReached;
+    private boolean opennedFromMedia;
+
+    private boolean draggingDown = false;
+    private float dragY;
+    private float translationX = 0;
+    private float translationY = 0;
+    private float scale = 1;
+    private float animateToX;
+    private float animateToY;
+    private float animateToScale;
+    private long animationDuration;
+    private long animationStartTime;
+    private GestureDetector gestureDetector;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator(1.5f);
+    private float pinchStartDistance = 0;
+    private float pinchStartScale = 1;
+    private float pinchCenterX;
+    private float pinchCenterY;
+    private float pinchStartX;
+    private float pinchStartY;
+    private float moveStartX;
+    private float moveStartY;
+    private float minX;
+    private float maxX;
+    private float minY;
+    private float maxY;
+    private boolean canZoom = true;
+    private boolean changingPage = false;
+    private boolean zooming = false;
+    private boolean moving = false;
+    private boolean doubleTap = false;
+    private boolean invalidCoords = false;
+    private boolean canDragDown = true;
+    private boolean zoomAnimation = false;
+    private int switchImageAfterAnimation = 0;
+    private VelocityTracker velocityTracker = null;
+    private Scroller scroller = null;
+    private FrameLayout transparentFrame;
+
+    private ArrayList<MessageObject> imagesArrTemp = new ArrayList<MessageObject>();
+    private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<Integer, MessageObject>();
+    private ArrayList<MessageObject> imagesArr = new ArrayList<MessageObject>();
+    private HashMap<Integer, MessageObject> imagesByIds = new HashMap<Integer, MessageObject>();
+    private ArrayList<TLRPC.FileLocation> imagesArrLocations = new ArrayList<TLRPC.FileLocation>();
+    private ArrayList<TLRPC.Photo> avatarsArr = new ArrayList<TLRPC.Photo>();
+    private ArrayList<Integer> imagesArrLocationsSizes = new ArrayList<Integer>();
+    private ArrayList<MediaController.PhotoEntry> imagesArrLocals = new ArrayList<MediaController.PhotoEntry>();
+    private TLRPC.FileLocation currentUserAvatarLocation = null;
+
+    private final static int gallery_menu_save = 1;
+    private final static int gallery_menu_showall = 2;
+    private final static int gallery_menu_send = 3;
+
+    private final static int PAGE_SPACING = AndroidUtilities.bsDp(30);
+    private Context mContext;
+    private LayoutInflater mInflater;
+
+    private static class RadialProgressView {
+
+        private long lastUpdateTime = 0;
+        private float radOffset = 0;
+        private float currentProgress = 0;
+        private float animationProgressStart = 0;
+        private long currentProgressTime = 0;
+        private float animatedProgressValue = 0;
+        private RectF progressRect = new RectF();
+        private int backgroundState = -1;
+        private View parent = null;
+        private int size = AndroidUtilities.bsDp(64);
+        private int previousBackgroundState = -2;
+        private float animatedAlphaValue = 1.0f;
+
+        private static DecelerateInterpolator decelerateInterpolator = null;
+        private static Paint progressPaint = null;
+
+        public RadialProgressView(Context context, View parentView) {
+            if (decelerateInterpolator == null) {
+                decelerateInterpolator = new DecelerateInterpolator();
+                progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+                progressPaint.setStyle(Paint.Style.STROKE);
+                progressPaint.setStrokeCap(Paint.Cap.ROUND);
+                progressPaint.setStrokeWidth(AndroidUtilities.bsDp(2));
+                progressPaint.setColor(0xffffffff);
+            }
+            parent = parentView;
+        }
+
+        private void updateAnimation() {
+            long newTime = System.currentTimeMillis();
+            long dt = newTime - lastUpdateTime;
+            lastUpdateTime = newTime;
+
+            if (animatedProgressValue != 1) {
+                radOffset += 360 * dt / 3000.0f;
+                float progressDiff = currentProgress - animationProgressStart;
+                if (progressDiff > 0) {
+                    currentProgressTime += dt;
+                    if (currentProgressTime >= 300) {
+                        animatedProgressValue = currentProgress;
+                        animationProgressStart = currentProgress;
+                        currentProgressTime = 0;
+                    } else {
+                        animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
+                    }
+                }
+                parent.invalidate();
+            }
+            if (animatedProgressValue >= 1 && previousBackgroundState != -2) {
+                animatedAlphaValue -= dt / 200.0f;
+                if (animatedAlphaValue <= 0) {
+                    animatedAlphaValue = 0.0f;
+                    previousBackgroundState = -2;
+                }
+                parent.invalidate();
+            }
+        }
+
+        public void setProgress(float value, boolean animated) {
+            if (!animated) {
+                animatedProgressValue = value;
+                animationProgressStart = value;
+            } else {
+                animationProgressStart = animatedProgressValue;
+            }
+            currentProgress = value;
+            currentProgressTime = 0;
+        }
+
+        public void setBackgroundState(int state, boolean animated) {
+            lastUpdateTime = System.currentTimeMillis();
+            if (animated && backgroundState != state) {
+                previousBackgroundState = backgroundState;
+                animatedAlphaValue = 1.0f;
+            } else {
+                previousBackgroundState = -2;
+            }
+            backgroundState = state;
+            parent.invalidate();
+        }
+
+        public void onDraw(Canvas canvas) {
+            int x = (canvas.getWidth() - size) / 2;
+            int y = (canvas.getHeight() - size) / 2;
+
+            if (previousBackgroundState >= 0 && previousBackgroundState < 4) {
+                Drawable drawable = progressDrawables[previousBackgroundState];
+                if (drawable != null) {
+                    drawable.setAlpha((int)(255 * animatedAlphaValue));
+                    drawable.setBounds(x, y, x + size, y + size);
+                    drawable.draw(canvas);
+                }
+            }
+
+            if (backgroundState >= 0 && backgroundState < 4) {
+                Drawable drawable = progressDrawables[backgroundState];
+                if (drawable != null) {
+                    if (previousBackgroundState != -2) {
+                        drawable.setAlpha((int)(255 * (1.0f - animatedAlphaValue)));
+                    } else {
+                        drawable.setAlpha(255);
+                    }
+                    drawable.setBounds(x, y, x + size, y + size);
+                    drawable.draw(canvas);
+                }
+            }
+
+            if (backgroundState == 0 || backgroundState == 1 || previousBackgroundState == 0 || previousBackgroundState == 1) {
+                int diff = AndroidUtilities.bsDp(1);
+                if (previousBackgroundState != -2) {
+                    progressPaint.setAlpha((int)(255 * animatedAlphaValue));
+                } else {
+                    progressPaint.setAlpha(255);
+                }
+                progressRect.set(x + diff, y + diff, x + size - diff, y + size - diff);
+                canvas.drawArc(progressRect, -90 + radOffset, Math.max(4, 360 * animatedProgressValue), false, progressPaint);
+                updateAnimation();
+            }
+        }
+    }
+
+    public static class PlaceProviderObject {
+        public ImageReceiver imageReceiver;
+        public int viewX;
+        public int viewY;
+        public View parentView;
+        public Bitmap thumb;
+        public int user_id;
+        public int index;
+        public int size;
+        public int radius;
+    }
+
+    public static interface PhotoViewerProvider {
+        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+
+        public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+
+        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+
+        public void willHidePhotoViewer();
+
+        public boolean isPhotoChecked(int index);
+
+        public void setPhotoChecked(int index);
+
+        public void cancelButtonPressed();
+
+        public void sendButtonPressed(int index);
+
+        public int getSelectedCount();
+    }
+
+    public class FrameLayoutTouchListener extends FrameLayout {
+        public FrameLayoutTouchListener(Context context) {
+            super(context);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            return getInstance().onTouchEvent(event);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            super.onLayout(changed, left, top, right, bottom);
+            getInstance().onLayout(changed, left, top, right, bottom);
+        }
+    }
+
+    private class FrameLayoutDrawer extends FrameLayout {
+        public FrameLayoutDrawer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            if (getInstance().animationListener != null) {
+                getInstance().animationListener.onAnimationEnd(null);
+            }
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            getInstance().onDraw(canvas);
+        }
+    }
+
+    protected static volatile BSPhotoViewer Instance = null;
+    public static BSPhotoViewer getInstance() {
+        BSPhotoViewer localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (BSPhotoViewer.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new BSPhotoViewer();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.FileDidFailedLoad) {
+            String location = (String)args[0];
+            for (int a = 0; a < 3; a++) {
+                if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
+                    radialProgressViews[a].setProgress(1.0f, true);
+                    checkProgress(a, true);
+                    break;
+                }
+            }
+        } else if (id == NotificationCenter.FileDidLoaded) {
+            String location = (String)args[0];
+            for (int a = 0; a < 3; a++) {
+                if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
+                    radialProgressViews[a].setProgress(1.0f, true);
+                    checkProgress(a, true);
+                    break;
+                }
+            }
+        } else if (id == NotificationCenter.FileLoadProgressChanged) {
+            String location = (String)args[0];
+            for (int a = 0; a < 3; a++) {
+                if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
+                    Float progress = (Float) args[1];
+                    radialProgressViews[a].setProgress(progress, true);
+                }
+            }
+        } else if (id == NotificationCenter.userPhotosLoaded) {
+            int guid = (Integer)args[4];
+            int uid = (Integer)args[0];
+            if (avatarsUserId == uid && classGuid == guid) {
+                boolean fromCache = (Boolean)args[3];
+
+                int setToImage = -1;
+                ArrayList<TLRPC.Photo> photos = (ArrayList<TLRPC.Photo>)args[5];
+                if (photos.isEmpty()) {
+                    return;
+                }
+                imagesArrLocations.clear();
+                imagesArrLocationsSizes.clear();
+                avatarsArr.clear();
+                for (TLRPC.Photo photo : photos) {
+                    if (photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
+                        continue;
+                    }
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640);
+                    if (sizeFull != null) {
+                        if (currentFileLocation != null) {
+                            for (TLRPC.PhotoSize size : photo.sizes) {
+                                if (size.location.local_id == currentFileLocation.local_id && size.location.volume_id == currentFileLocation.volume_id) {
+                                    setToImage = imagesArrLocations.size();
+                                    break;
+                                }
+                            }
+                        }
+                        imagesArrLocations.add(sizeFull.location);
+                        imagesArrLocationsSizes.add(sizeFull.size);
+                        avatarsArr.add(photo);
+                    }
+                }
+                if (!avatarsArr.isEmpty()) {
+                    deleteButton.setVisibility(View.VISIBLE);
+                } else {
+                    deleteButton.setVisibility(View.GONE);
+                }
+                needSearchImageInArr = false;
+                currentIndex = -1;
+                if (setToImage != -1) {
+                    setImageIndex(setToImage, true);
+                } else {
+                    avatarsArr.add(0, new TLRPC.TL_photoEmpty());
+                    imagesArrLocations.add(0, currentFileLocation);
+                    imagesArrLocationsSizes.add(0, 0);
+                    setImageIndex(0, true);
+                }
+                if (fromCache) {
+                    MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 80, 0, false, classGuid);
+                }
+            }
+        } else if (id == NotificationCenter.mediaCountDidLoaded) {
+            long uid = (Long)args[0];
+            if (uid == currentDialogId) {
+                if ((int)currentDialogId != 0 && (Boolean)args[2]) {
+                    SharedMediaQuery.getMediaCount(currentDialogId, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, false);
+                }
+                totalImagesCount = (Integer)args[1];
+                if (needSearchImageInArr && isFirstLoading) {
+                    isFirstLoading = false;
+                    loadingMoreImages = true;
+                    SharedMediaQuery.loadMedia(currentDialogId, 0, 100, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+                } else if (!imagesArr.isEmpty()) {
+                    actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArr.size()));
+                }
+            }
+        } else if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long)args[0];
+            int guid = (Integer)args[4];
+            if (uid == currentDialogId && guid == classGuid) {
+                loadingMoreImages = false;
+                ArrayList<MessageObject> arrayList = (ArrayList<MessageObject>)args[2];
+                ArrayList<MessageObject> arr = new ArrayList<>();
+                for(MessageObject message : arrayList){
+                    if(message.type != 1)
+                        continue;
+                    arr.add(message);
+                }
+                boolean fromCache = (Boolean)args[3];
+                cacheEndReached = !fromCache;
+                if (needSearchImageInArr) {
+                    if (arr.isEmpty()) {
+                        needSearchImageInArr = false;
+                        return;
+                    }
+                    int foundIndex = -1;
+
+                    MessageObject currentMessage = imagesArr.get(currentIndex);
+
+                    int added = 0;
+                    for (MessageObject message : arr) {
+                        if (!imagesByIdsTemp.containsKey(message.messageOwner.id)) {
+                            added++;
+                            imagesArrTemp.add(0, message);
+                            imagesByIdsTemp.put(message.messageOwner.id, message);
+                            if (message.messageOwner.id == currentMessage.messageOwner.id) {
+                                foundIndex = arr.size() - added;
+                            }
+                        }
+                    }
+                    if (added == 0) {
+                        totalImagesCount = imagesArr.size();
+                    }
+
+                    if (foundIndex != -1) {
+                        imagesArr.clear();
+                        imagesArr.addAll(imagesArrTemp);
+                        imagesByIds.clear();
+                        imagesByIds.putAll(imagesByIdsTemp);
+                        imagesArrTemp.clear();
+                        imagesByIdsTemp.clear();
+                        needSearchImageInArr = false;
+                        currentIndex = -1;
+                        if (foundIndex >= imagesArr.size()) {
+                            foundIndex = imagesArr.size() - 1;
+                        }
+                        setImageIndex(foundIndex, true);
+                    } else {
+                        if (!cacheEndReached || !arr.isEmpty() && added != 0) {
+                            loadingMoreImages = true;
+                            SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(0).messageOwner.id, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+                        }
+                    }
+                } else {
+                    int added = 0;
+                    for (MessageObject message : arr) {
+                        if (!imagesByIds.containsKey(message.messageOwner.id)) {
+                            added++;
+                            imagesArr.add(0, message);
+                            imagesByIds.put(message.messageOwner.id, message);
+                        }
+                    }
+                    if (arr.isEmpty() && !fromCache) {
+                        totalImagesCount = arr.size();
+                    }
+                    if (added != 0) {
+                        int index = currentIndex;
+                        currentIndex = -1;
+                        setImageIndex(index + added, true);
+                    } else {
+                        totalImagesCount = imagesArr.size();
+                    }
+                }
+            }
+        }
+    }
+
+    public void setParentActivity(final Context context) {
+
+        if(mContext == context){
+            return;
+        }
+        mContext = context;
+
+        if (progressDrawables == null) {
+            progressDrawables = new Drawable[4];
+            progressDrawables[0] = mContext.getResources().getDrawable(R.drawable.circle_big);
+            progressDrawables[1] = mContext.getResources().getDrawable(R.drawable.cancel_big);
+            progressDrawables[2] = mContext.getResources().getDrawable(R.drawable.load_big);
+            progressDrawables[3] = mContext.getResources().getDrawable(R.drawable.play_big);
+        }
+
+        mInflater = LayoutInflater.from(context);
+
+        scroller = new Scroller(context);
+
+        windowView = new FrameLayoutTouchListener(context);
+        windowView.setBackgroundDrawable(backgroundDrawable);
+        windowView.setFocusable(true);
+        //windowView.setOnTouchListener(new OnSwipeTouchListener(mContext));
+
+        animatingImageView = new ClippingImageView(windowView.getContext());
+        windowView.addView(animatingImageView);
+
+        containerView = new FrameLayoutDrawer(context);
+        containerView.setFocusable(true);
+        windowView.addView(containerView);
+        LayoutParams layoutParams = (LayoutParams)containerView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        containerView.setLayoutParams(layoutParams);
+
+        windowLayoutParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+        actionBar = new BSActionBar(context);
+        actionBar.setBackgroundColor(0x00000000);
+        actionBar.setOccupyStatusBar(false);
+        actionBar.setItemsBackground(R.drawable.bar_selector_white);
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        containerView.addView(actionBar);
+        layoutParams = (LayoutParams) actionBar.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.bsDp(40);
+        actionBar.setLayoutParams(layoutParams);
+
+        actionBar.setActionBarMenuOnItemClick(new BSActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    closePhoto(false);
+                } else if (id == gallery_menu_save) {
+                    File f = null;
+                    if (currentMessageObject != null) {
+                        f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    } else if (currentFileLocation != null) {
+                        f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    }
+
+                    if (f != null && f.exists()) {
+                        MediaController.saveFile(f.toString(), mContext, currentFileNames[0].endsWith("mp4") ? 1 : 0, null);
+                        OtherFlipBSActivity.setViewVideoFlag();
+                        OtherFlipBSActivity.Params.put("file", f);
+                        OtherFlipBSActivity.Params.put("message", currentMessageObject);
+                        Intent intent = new Intent(mContext, OtherFlipBSActivity.class);
+                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                        mContext.startService(intent);
+                    } else{
+                        //TODO
+                    }
+                } else if (id == gallery_menu_showall) {
+                    if (opennedFromMedia) {
+                        closePhoto(false);
+                    } else if (currentDialogId != 0) {/*
+                        closePhoto(false);
+                        Bundle args2 = new Bundle();
+                        args2.putLong("dialog_id", currentDialogId);
+                        Intent intent = new Intent(mContext, BSMediaActivity.class);
+                        intent.putExtras(args2);
+                        mContext.startService(intent);*/
+                    }
+                } else if (id == gallery_menu_send) {
+
+                }
+            }
+
+            @Override
+            public boolean canOpenMenu() {
+                if (currentMessageObject != null) {
+                    File f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    if (f.exists()) {
+                        return true;
+                    }
+                } else if (currentFileLocation != null) {
+                    File f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    if (f.exists()) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+        });
+
+//        BSActionBarMenu menu = actionBar.createMenu();
+
+        bottomLayout = new FrameLayout(containerView.getContext());
+        containerView.addView(bottomLayout);
+        layoutParams = (LayoutParams)bottomLayout.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.bsDp(50);
+        layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+        bottomLayout.setLayoutParams(layoutParams);
+        bottomLayout.setBackgroundColor(0x00000000);
+
+        radialProgressViews[0] = new RadialProgressView(containerView.getContext(), containerView);
+        radialProgressViews[0].setBackgroundState(0, false);
+        radialProgressViews[1] = new RadialProgressView(containerView.getContext(), containerView);
+        radialProgressViews[1].setBackgroundState(0, false);
+        radialProgressViews[2] = new RadialProgressView(containerView.getContext(), containerView);
+        radialProgressViews[2].setBackgroundState(0, false);
+
+        shareButton = new ImageView(containerView.getContext());
+        shareButton.setImageResource(R.drawable.ic_ab_share_white);
+        shareButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        shareButton.setBackgroundResource(R.drawable.bar_selector_white);
+        bottomLayout.addView(shareButton);
+        layoutParams = (LayoutParams) shareButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.bsDp(40);
+        layoutParams.height = AndroidUtilities.bsDp(40);
+        layoutParams.leftMargin = AndroidUtilities.bsDp(10);
+        shareButton.setLayoutParams(layoutParams);
+        shareButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (mContext == null) {
+                    return;
+                }
+                try{
+                    File f = null;
+                    if (currentMessageObject != null) {
+                        f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    } else if (currentFileLocation != null) {
+                        f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    }
+                    OtherFlipBSActivity.setShareFlag();
+                    OtherFlipBSActivity.Params.put("file",f);
+                    OtherFlipBSActivity.Params.put("message", currentMessageObject);
+                    Intent i = new Intent(mContext, OtherFlipBSActivity.class);
+                    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    mContext.startService(i);
+                }catch (Exception e){
+                    Log.d(LOG_TAG, e.getMessage());
+                    e.printStackTrace();
+                }
+            }
+        });
+        shareButton.setVisibility(View.VISIBLE);
+        deleteButton = new ImageView(containerView.getContext());
+        deleteButton.setImageResource(R.drawable.ic_ab_delete_white);
+        deleteButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        deleteButton.setBackgroundResource(R.drawable.bar_selector_white);
+        bottomLayout.addView(deleteButton);
+        layoutParams = (LayoutParams) deleteButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.bsDp(40);
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.RIGHT;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(10);
+        deleteButton.setLayoutParams(layoutParams);
+
+        deleteButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final BSAlertDialog.Builder builder = new BSAlertDialog.Builder(mContext);
+                builder.setTitle(LocaleController.getString("Message", R.string.Message));
+                builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, 1));
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                builder.setPositiveButton(LocaleController.getString("Ok", R.string.OK), new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                             deletePhoto();
+                        builder.close();
+                    }
+                });
+                builder.show();
+            }
+        });
+
+        nameTextView = new TextView(containerView.getContext());
+        nameTextView.setTextSize(10);
+        nameTextView.setSingleLine(true);
+        nameTextView.setMaxLines(1);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        nameTextView.setTextColor(0xffffffff);
+        nameTextView.setGravity(Gravity.CENTER);
+        bottomLayout.addView(nameTextView);
+        layoutParams = (LayoutParams)nameTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.TOP;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(60);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(60);
+        layoutParams.topMargin = AndroidUtilities.bsDp(2);
+        layoutParams.bottomMargin = AndroidUtilities.bsDp(5);
+        nameTextView.setLayoutParams(layoutParams);
+
+        dateTextView = new TextView(containerView.getContext());
+        dateTextView.setTextSize(6);
+        dateTextView.setSingleLine(true);
+        dateTextView.setMaxLines(1);
+        dateTextView.setEllipsize(TextUtils.TruncateAt.END);
+        dateTextView.setTextColor(0xffb8bdbe);
+        dateTextView.setGravity(Gravity.CENTER);
+        bottomLayout.addView(dateTextView);
+        layoutParams = (LayoutParams)dateTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.BOTTOM;
+        layoutParams.leftMargin = AndroidUtilities.bsDp(60);
+        layoutParams.rightMargin = AndroidUtilities.bsDp(60);
+        layoutParams.topMargin = AndroidUtilities.bsDp(26);
+        dateTextView.setLayoutParams(layoutParams);
+
+        pickerView = mInflater.inflate(R.layout.photo_picker_bottom_layout_bs, null);
+        containerView.addView(pickerView);
+        Button cancelButton = (Button)pickerView.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (placeProvider != null) {
+                    placeProvider.cancelButtonPressed();
+                    closePhoto(false);
+                }
+            }
+        });
+        View doneButton = pickerView.findViewById(R.id.done_button);
+        doneButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (placeProvider != null) {
+                    placeProvider.sendButtonPressed(currentIndex);
+                    closePhoto(false);
+                }
+            }
+        });
+
+        layoutParams = (LayoutParams)pickerView.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.bsDp(48);
+        layoutParams.gravity = Gravity.BOTTOM;
+        pickerView.setLayoutParams(layoutParams);
+
+        cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+        cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
+        doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
+        doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
+        doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+        gestureDetector = new GestureDetector(containerView.getContext(), this);
+        gestureDetector.setOnDoubleTapListener(this);
+
+        centerImage.setParentView(containerView);
+        leftImage.setParentView(containerView);
+        rightImage.setParentView(containerView);
+
+        checkImageView = new ImageView(containerView.getContext());
+        containerView.addView(checkImageView);
+        checkImageView.setVisibility(View.GONE);
+        checkImageView.setScaleType(ImageView.ScaleType.CENTER);
+        checkImageView.setImageResource(R.drawable.selectphoto_large);
+        layoutParams = (LayoutParams)checkImageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.bsDp(46);
+        layoutParams.height = AndroidUtilities.bsDp(46);
+        layoutParams.gravity = Gravity.RIGHT;
+        layoutParams.rightMargin = AndroidUtilities.bsDp(10);
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+            layoutParams.topMargin = AndroidUtilities.bsDp(48);
+        } else {
+            layoutParams.topMargin = AndroidUtilities.bsDp(58);
+        }
+        checkImageView.setLayoutParams(layoutParams);
+        checkImageView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (placeProvider != null) {
+                    placeProvider.setPhotoChecked(currentIndex);
+                    if (placeProvider.isPhotoChecked(currentIndex)) {
+                        checkImageView.setBackgroundColor(0xff42d1f6);
+                    } else {
+                        checkImageView.setBackgroundColor(0x801c1c1c);
+                    }
+                    updateSelectedCount();
+                }
+            }
+        });
+    }
+
+    private void deletePhoto() {
+        if (!imagesArr.isEmpty()) {
+            if (currentIndex < 0 || currentIndex >= imagesArr.size()) {
+                return;
+            }
+            MessageObject obj = imagesArr.get(currentIndex);
+            if (obj.isSent()) {
+                ArrayList<Integer> arr = new ArrayList<Integer>();
+                arr.add(obj.messageOwner.id);
+
+                ArrayList<Long> random_ids = null;
+                TLRPC.EncryptedChat encryptedChat = null;
+                if ((int)obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
+                    random_ids = new ArrayList<Long>();
+                    random_ids.add(obj.messageOwner.random_id);
+                    encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(obj.getDialogId() >> 32));
+                }
+
+                MessagesController.getInstance().deleteMessages(arr, random_ids, encryptedChat);
+                closePhoto(false);
+            }
+        } else if (!avatarsArr.isEmpty()) {
+            if (currentIndex < 0 || currentIndex >= avatarsArr.size()) {
+                return;
+            }
+            TLRPC.Photo photo = avatarsArr.get(currentIndex);
+            TLRPC.FileLocation currentLocation = imagesArrLocations.get(currentIndex);
+            if (photo instanceof TLRPC.TL_photoEmpty) {
+                photo = null;
+            }
+            boolean current = false;
+            if (currentUserAvatarLocation != null) {
+                if (photo != null) {
+                    for (TLRPC.PhotoSize size : photo.sizes) {
+                        if (size.location.local_id == currentUserAvatarLocation.local_id && size.location.volume_id == currentUserAvatarLocation.volume_id) {
+                            current = true;
+                            break;
+                        }
+                    }
+                } else if (currentLocation.local_id == currentUserAvatarLocation.local_id && currentLocation.volume_id == currentUserAvatarLocation.volume_id) {
+                    current = true;
+                }
+            }
+            if (current) {
+                MessagesController.getInstance().deleteUserPhoto(null);
+                closePhoto(false);
+            } else if (photo != null) {
+                TLRPC.TL_inputPhoto inputPhoto = new TLRPC.TL_inputPhoto();
+                inputPhoto.id = photo.id;
+                inputPhoto.access_hash = photo.access_hash;
+                MessagesController.getInstance().deleteUserPhoto(inputPhoto);
+                MessagesStorage.getInstance().clearUserPhoto(avatarsUserId, photo.id);
+                imagesArrLocations.remove(currentIndex);
+                imagesArrLocationsSizes.remove(currentIndex);
+                avatarsArr.remove(currentIndex);
+                if (imagesArrLocations.isEmpty()) {
+                    closePhoto(false);
+                } else {
+                    int index = currentIndex;
+                    if (index >= avatarsArr.size()) {
+                        index = avatarsArr.size() - 1;
+                    }
+                    currentIndex = -1;
+                    setImageIndex(index, true);
+                }
+            }
+        }
+    }
+
+    private void toggleActionBar(boolean show, boolean animated) {
+        if (show) {
+            actionBar.setVisibility(View.VISIBLE);
+            if (canShowBottom) {
+                bottomLayout.setVisibility(View.VISIBLE);
+            }
+        }
+        isActionBarVisible = show;
+        actionBar.setEnabled(show);
+        bottomLayout.setEnabled(show);
+
+        if (animated) {
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+            animatorSet.playTogether(
+                    ObjectAnimatorProxy.ofFloat(actionBar, "alpha", show ? 1.0f : 0.0f),
+                    ObjectAnimatorProxy.ofFloat(bottomLayout, "alpha", show ? 1.0f : 0.0f)
+            );
+            if (!show) {
+                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        actionBar.setVisibility(View.GONE);
+                        if (canShowBottom) {
+                            bottomLayout.setVisibility(View.GONE);
+                        }
+                    }
+                });
+            }
+
+            animatorSet.setDuration(200);
+            animatorSet.start();
+        } else {
+            ViewProxy.setAlpha(actionBar, show ? 1.0f : 0.0f);
+            ViewProxy.setAlpha(bottomLayout, show ? 1.0f : 0.0f);
+            if (!show) {
+                actionBar.setVisibility(View.GONE);
+                if (canShowBottom) {
+                    bottomLayout.setVisibility(View.GONE);
+                }
+            }
+        }
+    }
+
+    private String getFileName(int index) {
+        if (index < 0) {
+            return null;
+        }
+        TLRPC.InputFileLocation file = getInputFileLocation(index);
+        if (file == null) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            return file.volume_id + "_" + file.local_id + ".jpg";
+        } else if (!imagesArr.isEmpty()) {
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                return file.volume_id + "_" + file.local_id + ".jpg";
+            } else if (message.messageOwner.media != null) {
+                if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                    return file.volume_id + "_" + file.id + ".mp4";
+                } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                    return file.volume_id + "_" + file.local_id + ".jpg";
+                }
+            }
+        }
+        return null;
+    }
+
+    private TLRPC.FileLocation getFileLocation(int index, int size[]) {
+        if (index < 0) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            if (index >= imagesArrLocations.size()) {
+                return null;
+            }
+            size[0] = imagesArrLocationsSizes.get(index);
+            return imagesArrLocations.get(index);
+        } else if (!imagesArr.isEmpty()) {
+            if (index >= imagesArr.size()) {
+                return null;
+            }
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    return message.messageOwner.action.newUserPhoto.photo_big;
+                } else {
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        size[0] = sizeFull.size;
+                        if (size[0] == 0) {
+                            size[0] = -1;
+                        }
+                        return sizeFull.location;
+                    } else {
+                        size[0] = -1;
+                    }
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && message.messageOwner.media.photo != null) {
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, AndroidUtilities.getPhotoSize());
+                if (sizeFull != null) {
+                    size[0] = sizeFull.size;
+                    if (size[0] == 0) {
+                        size[0] = -1;
+                    }
+                    return sizeFull.location;
+                } else {
+                    size[0] = -1;
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo && message.messageOwner.media.video != null && message.messageOwner.media.video.thumb != null) {
+                size[0] = message.messageOwner.media.video.thumb.size;
+                if (size[0] == 0) {
+                    size[0] = -1;
+                }
+                return message.messageOwner.media.video.thumb.location;
+            }
+        }
+        return null;
+    }
+
+    private TLRPC.InputFileLocation getInputFileLocation(int index) {
+        if (index < 0) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            if (index >= imagesArrLocations.size()) {
+                return null;
+            }
+            TLRPC.FileLocation sizeFull = imagesArrLocations.get(index);
+            TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+            location.local_id = sizeFull.local_id;
+            location.volume_id = sizeFull.volume_id;
+            location.id = sizeFull.dc_id;
+            location.secret = sizeFull.secret;
+            return location;
+        } else if (!imagesArr.isEmpty()) {
+            if (index >= imagesArr.size()) {
+                return null;
+            }
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    TLRPC.FileLocation sizeFull = message.messageOwner.action.newUserPhoto.photo_big;
+                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                    location.local_id = sizeFull.local_id;
+                    location.volume_id = sizeFull.volume_id;
+                    location.id = sizeFull.dc_id;
+                    location.secret = sizeFull.secret;
+                    return location;
+                } else {
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                        location.local_id = sizeFull.location.local_id;
+                        location.volume_id = sizeFull.location.volume_id;
+                        location.id = sizeFull.location.dc_id;
+                        location.secret = sizeFull.location.secret;
+                        return location;
+                    }
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, AndroidUtilities.getPhotoSize());
+                if (sizeFull != null) {
+                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                    location.local_id = sizeFull.location.local_id;
+                    location.volume_id = sizeFull.location.volume_id;
+                    location.id = sizeFull.location.dc_id;
+                    location.secret = sizeFull.location.secret;
+                    return location;
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                TLRPC.TL_inputVideoFileLocation location = new TLRPC.TL_inputVideoFileLocation();
+                location.volume_id = message.messageOwner.media.video.dc_id;
+                location.id = message.messageOwner.media.video.id;
+                return location;
+            }
+        }
+        return null;
+    }
+
+    private void updateSelectedCount() {
+        if (placeProvider == null) {
+            return;
+        }
+        int count = placeProvider.getSelectedCount();
+        if (count == 0) {
+            doneButtonTextView.setTextColor(0xffffffff);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.selectphoto_small, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.GONE);
+        } else {
+            doneButtonTextView.setTextColor(0xffffffff);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.VISIBLE);
+            doneButtonBadgeTextView.setText("" + count);
+        }
+    }
+
+    private void onPhotoShow(final BSMessageObject MessageObject, final TLRPC.FileLocation fileLocation, final ArrayList<BSMessageObject> messages, final ArrayList<MediaController.PhotoEntry> photos, int index, final PlaceProviderObject object) {
+        classGuid = ConnectionsManager.getInstance().generateClassGuid();
+        currentMessageObject = null;
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentIndex = -1;
+        currentFileNames[0] = null;
+        currentFileNames[1] = null;
+        currentFileNames[2] = null;
+        avatarsUserId = 0;
+        currentDialogId = 0;
+        totalImagesCount = 0;
+        isFirstLoading = true;
+        needSearchImageInArr = false;
+        loadingMoreImages = false;
+        cacheEndReached = false;
+        opennedFromMedia = false;
+        canShowBottom = true;
+        imagesArr.clear();
+        imagesArrLocations.clear();
+        imagesArrLocationsSizes.clear();
+        avatarsArr.clear();
+        imagesArrLocals.clear();
+        imagesByIds.clear();
+        imagesArrTemp.clear();
+        imagesByIdsTemp.clear();
+        currentUserAvatarLocation = null;
+        currentThumb = object.thumb;
+//        menuItem.setVisibility(View.VISIBLE);
+        bottomLayout.setVisibility(View.VISIBLE);
+        checkImageView.setVisibility(View.GONE);
+        pickerView.setVisibility(View.GONE);
+        for (int a = 0; a < 3; a++) {
+            if (radialProgressViews[a] != null) {
+                radialProgressViews[a].setBackgroundState(-1, false);
+            }
+        }
+
+        if (MessageObject != null && messages == null) {
+            imagesArr.add(MessageObject);
+            if (MessageObject.messageOwner.action == null || MessageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty) {
+                needSearchImageInArr = true;
+                imagesByIds.put(MessageObject.messageOwner.id, MessageObject);
+                if (MessageObject.messageOwner.dialog_id != 0) {
+                    currentDialogId = MessageObject.messageOwner.dialog_id;
+                } else {
+                    if (MessageObject.messageOwner.to_id.chat_id != 0) {
+                        currentDialogId = -MessageObject.messageOwner.to_id.chat_id;
+                    } else {
+                        if (MessageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
+                            currentDialogId = MessageObject.messageOwner.from_id;
+                        } else {
+                            currentDialogId = MessageObject.messageOwner.to_id.user_id;
+                        }
+                    }
+                }
+//                menuItem.showSubItem(gallery_menu_showall);
+            } else {
+//                menuItem.hideSubItem(gallery_menu_showall);
+            }
+            setImageIndex(0, true);
+        } else if (fileLocation != null) {
+            avatarsUserId = object.user_id;
+            imagesArrLocations.add(fileLocation);
+            imagesArrLocationsSizes.add(object.size);
+            avatarsArr.add(new TLRPC.TL_photoEmpty());
+            bottomLayout.setVisibility(View.GONE);
+//            shareButton.setVisibility(View.VISIBLE);
+//            menuItem.hideSubItem(gallery_menu_showall);
+            setImageIndex(0, true);
+            currentUserAvatarLocation = fileLocation;
+        } else if (messages != null) {
+            imagesArr.addAll(messages);
+            Collections.reverse(imagesArr);
+            for (MessageObject message : imagesArr) {
+                imagesByIds.put(message.messageOwner.id, message);
+            }
+            index = imagesArr.size() - index - 1;
+
+            if (MessageObject.messageOwner.dialog_id != 0) {
+                currentDialogId = MessageObject.messageOwner.dialog_id;
+            } else {
+                if (MessageObject.messageOwner.to_id == null) {
+                    closePhoto(false);
+                    return;
+                }
+                if (MessageObject.messageOwner.to_id.chat_id != 0) {
+                    currentDialogId = -MessageObject.messageOwner.to_id.chat_id;
+                } else {
+                    if (MessageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
+                        currentDialogId = MessageObject.messageOwner.from_id;
+                    } else {
+                        currentDialogId = MessageObject.messageOwner.to_id.user_id;
+                    }
+                }
+            }
+            opennedFromMedia = true;
+            setImageIndex(index, true);
+        } else if (photos != null) {
+            checkImageView.setVisibility(View.VISIBLE);
+            imagesArrLocals.addAll(photos);
+            setImageIndex(index, true);
+            pickerView.setVisibility(View.VISIBLE);
+            bottomLayout.setVisibility(View.GONE);
+//            shareButton.setVisibility(View.VISIBLE);
+            canShowBottom = false;
+            updateSelectedCount();
+        }
+
+        if (currentDialogId != 0 && totalImagesCount == 0) {
+            SharedMediaQuery.getMediaCount(currentDialogId, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, true);
+        } else if (avatarsUserId != 0) {
+            MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 80, 0, true, classGuid);
+        }
+        Log.d(LOG_TAG, "onPhotoShow");
+    }
+
+    public void setImageIndex(int index, boolean init) {
+        if (currentIndex == index) {
+            return;
+        }
+        if (!init) {
+            currentThumb = null;
+        }
+        currentFileNames[0] = getFileName(index);
+        currentFileNames[1] = getFileName(index + 1);
+        currentFileNames[2] = getFileName(index - 1);
+        placeProvider.willSwitchFromPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        int prevIndex = currentIndex;
+        currentIndex = index;
+
+        boolean sameImage = false;
+
+        if (!imagesArr.isEmpty()) {
+            deleteButton.setVisibility(View.VISIBLE);
+            currentMessageObject = imagesArr.get(currentIndex);
+            TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
+            if (user != null) {
+                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            } else {
+                nameTextView.setText("");
+            }
+            if (currentFileNames[0] != null && currentFileNames[0].endsWith("mp4")) {
+                dateTextView.setText(String.format("%s (%s)", LocaleController.formatterYearMax.format(((long) currentMessageObject.messageOwner.date) * 1000), Utilities.formatFileSize(currentMessageObject.messageOwner.media.video.size)));
+            } else {
+                dateTextView.setText(LocaleController.formatterYearMax.format(((long) currentMessageObject.messageOwner.date) * 1000));
+            }
+
+            if (totalImagesCount != 0 && !needSearchImageInArr) {
+                if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex < 5) {
+                    MessageObject lastMessage = imagesArr.get(0);
+                    SharedMediaQuery.loadMedia(currentDialogId, 0, 100, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+                    loadingMoreImages = true;
+                }
+                //actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
+                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArr.size()));
+            }
+            if (currentMessageObject.messageOwner.ttl != 0) {
+                shareButton.setVisibility(View.GONE);
+            } else {
+                shareButton.setVisibility(View.VISIBLE);
+            }
+        } else if (!imagesArrLocations.isEmpty()) {
+            nameTextView.setText("");
+            dateTextView.setText("");
+            if (avatarsUserId == UserConfig.getClientUserId() && !avatarsArr.isEmpty()) {
+                deleteButton.setVisibility(View.VISIBLE);
+            } else {
+                deleteButton.setVisibility(View.GONE);
+            }
+            TLRPC.FileLocation old = currentFileLocation;
+            currentFileLocation = imagesArrLocations.get(index);
+            if (old != null && currentFileLocation != null && old.local_id == currentFileLocation.local_id && old.volume_id == currentFileLocation.volume_id) {
+                sameImage = true;
+            }
+            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocations.size()));
+            shareButton.setVisibility(View.VISIBLE);
+        } else if (!imagesArrLocals.isEmpty()) {
+            currentPathObject = imagesArrLocals.get(index).path;
+            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
+
+            if (placeProvider.isPhotoChecked(currentIndex)) {
+                checkImageView.setBackgroundColor(0xff42d1f6);
+            } else {
+                checkImageView.setBackgroundColor(0x801c1c1c);
+            }
+        }
+
+
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(true, true);
+            } else {
+                showAfterAnimation = currentPlaceObject;
+            }
+        }
+        currentPlaceObject = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(false, true);
+            } else {
+                hideAfterAnimation = currentPlaceObject;
+            }
+        }
+
+        if (!sameImage) {
+            draggingDown = false;
+            translationX = 0;
+            translationY = 0;
+            scale = 1;
+            animateToX = 0;
+            animateToY = 0;
+            animateToScale = 1;
+            animationDuration = 0;
+            animationStartTime = 0;
+
+            pinchStartDistance = 0;
+            pinchStartScale = 1;
+            pinchCenterX = 0;
+            pinchCenterY = 0;
+            pinchStartX = 0;
+            pinchStartY = 0;
+            moveStartX = 0;
+            moveStartY = 0;
+            zooming = false;
+            moving = false;
+            doubleTap = false;
+            invalidCoords = false;
+            canDragDown = true;
+            changingPage = false;
+            switchImageAfterAnimation = 0;
+            canZoom = currentFileNames[0] != null && !currentFileNames[0].endsWith("mp4") && radialProgressViews[0].backgroundState != 0;
+            updateMinMax(scale);
+        }
+
+        if (prevIndex == -1) {
+            setIndexToImage(centerImage, currentIndex);
+            setIndexToImage(rightImage, currentIndex + 1);
+            setIndexToImage(leftImage, currentIndex - 1);
+
+            for (int a = 0; a < 3; a++) {
+                checkProgress(a, false);
+            }
+        } else {
+            checkProgress(0, false);
+            if (prevIndex > currentIndex) {
+                ImageReceiver temp = rightImage;
+                rightImage = centerImage;
+                centerImage = leftImage;
+                leftImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[2];
+                radialProgressViews[2] = tempProgress;
+                setIndexToImage(leftImage, currentIndex - 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            } else if (prevIndex < currentIndex) {
+                ImageReceiver temp = leftImage;
+                leftImage = centerImage;
+                centerImage = rightImage;
+                rightImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[1];
+                radialProgressViews[1] = tempProgress;
+                setIndexToImage(rightImage, currentIndex + 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            }
+        }
+    }
+
+    private void checkProgress(int a, boolean animated) {
+        if (currentFileNames[a] != null) {
+            int index = currentIndex;
+            if (a == 1) {
+                index += 1;
+            } else if (a == 2) {
+                index -= 1;
+            }
+            File f = null;
+            if (currentMessageObject != null) {
+                MessageObject MessageObject = imagesArr.get(index);
+                f = FileLoader.getPathToMessage(MessageObject.messageOwner);
+            } else if (currentFileLocation != null) {
+                TLRPC.FileLocation location = imagesArrLocations.get(index);
+                f = FileLoader.getPathToAttach(location, avatarsUserId != 0);
+            }
+            if (f != null && f.exists()) {
+                if (currentFileNames[a].endsWith("mp4")) {
+                    radialProgressViews[a].setBackgroundState(3, animated);
+                } else {
+                    radialProgressViews[a].setBackgroundState(-1, animated);
+                }
+            } else {
+                if (currentFileNames[a].endsWith("mp4")) {
+                    if (!FileLoader.getInstance().isLoadingFile(currentFileNames[a])) {
+                        radialProgressViews[a].setBackgroundState(2, false);
+                    } else {
+                        radialProgressViews[a].setBackgroundState(1, false);
+                    }
+                } else {
+                    radialProgressViews[a].setBackgroundState(0, animated);
+                }
+                Float progress = ImageLoader.getInstance().getFileProgress(currentFileNames[a]);
+                if (progress == null) {
+                    progress = 0.0f;
+                }
+                radialProgressViews[a].setProgress(progress, false);
+            }
+            if (a == 0) {
+                canZoom = currentFileNames[0] != null && !currentFileNames[0].endsWith("mp4") && radialProgressViews[0].backgroundState != 0;
+            }
+        } else {
+            radialProgressViews[a].setBackgroundState(-1, animated);
+        }
+    }
+
+    private void setIndexToImage(ImageReceiver imageReceiver, int index) {
+        if (!imagesArrLocals.isEmpty()) {
+            imageReceiver.setParentMessageObject(null);
+            if (index >= 0 && index < imagesArrLocals.size()) {
+                Object object = imagesArrLocals.get(index);
+                int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+                Bitmap placeHolder = null;
+                if (currentThumb != null && imageReceiver == centerImage) {
+                    placeHolder = currentThumb;
+                }
+                if (placeHolder == null) {
+                    placeHolder = placeProvider.getThumbForPhoto(null, null, index);
+                }
+                String path = null;
+                int imageSize = 0;
+                if (object instanceof MediaController.PhotoEntry) {
+                    path = ((MediaController.PhotoEntry) object).path;
+                } else if (object instanceof MediaController.SearchImage) {
+                    path = ((MediaController.SearchImage) object).imageUrl;
+                    imageSize = ((MediaController.SearchImage) object).size;
+                }
+                imageReceiver.setImage(path, String.format(Locale.US, "%d_%d", size, size), placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, imageSize);
+            } else {
+                imageReceiver.setImageBitmap((Bitmap) null);
+            }
+        } else {
+            int size[] = new int[1];
+            TLRPC.FileLocation fileLocation = getFileLocation(index, size);
+
+            if (fileLocation != null) {
+                MessageObject messageObject = null;
+                if (!imagesArr.isEmpty()) {
+                    messageObject = imagesArr.get(index);
+                }
+                imageReceiver.setParentMessageObject(messageObject);
+                if (messageObject != null) {
+                    imageReceiver.setShouldGenerateQualityThumb(true);
+                }
+
+                if (messageObject != null && messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                    imageReceiver.setNeedsQualityThumb(true);
+                    if (messageObject.messageOwner.media.video.thumb != null) {
+                        Bitmap placeHolder = null;
+                        if (currentThumb != null && imageReceiver == centerImage) {
+                            placeHolder = currentThumb;
+                        }
+                        TLRPC.PhotoSize thumbLocation = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
+                        imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation.location, "b", 0, true);
+                    } else {
+                        imageReceiver.setImageBitmap(mContext.getResources().getDrawable(R.drawable.photoview_placeholder));
+                    }
+                } else {
+                    imageReceiver.setNeedsQualityThumb(false);
+                    Bitmap placeHolder = null;
+                    if (currentThumb != null && imageReceiver == centerImage) {
+                        placeHolder = currentThumb;
+                    }
+                    if (size[0] == 0) {
+                        size[0] = -1;
+                    }
+                    TLRPC.PhotoSize thumbLocation = messageObject != null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100) : null;
+                    imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], avatarsUserId != 0);
+                }
+            } else {
+                imageReceiver.setNeedsQualityThumb(false);
+                imageReceiver.setParentMessageObject(null);
+                if (size[0] == 0) {
+                    imageReceiver.setImageBitmap((Bitmap) null);
+                } else {
+                    imageReceiver.setImageBitmap(mContext.getResources().getDrawable(R.drawable.photoview_placeholder));
+                }
+            }
+        }
+    }
+
+    public boolean isShowingImage(MessageObject object) {
+        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.messageOwner.id == object.messageOwner.id;
+    }
+
+    public boolean isShowingImage(TLRPC.FileLocation object) {
+        return isVisible && !disableShowCheck && object != null && currentFileLocation != null && object.local_id == currentFileLocation.local_id && object.volume_id == currentFileLocation.volume_id && object.dc_id == currentFileLocation.dc_id;
+    }
+
+    public boolean isShowingImage(String object) {
+        return isVisible && !disableShowCheck && object != null && currentPathObject != null && object.equals(currentPathObject);
+    }
+
+    public void openPhoto(final BSMessageObject messageObject, final PhotoViewerProvider provider) {
+        openPhoto(messageObject, null, null, null, 0, provider);
+    }
+
+    public void openPhoto(final TLRPC.FileLocation fileLocation, final PhotoViewerProvider provider) {
+        openPhoto(null, fileLocation, null, null, 0, provider);
+    }
+
+    public void openPhoto(final ArrayList<BSMessageObject> messages, final int index, final PhotoViewerProvider provider) {
+        openPhoto(messages.get(index), null, messages, null, index, provider);
+    }
+
+    public void openPhotoForSelect(final ArrayList<MediaController.PhotoEntry> photos, final int index, final PhotoViewerProvider provider) {
+        openPhoto(null, null, null, photos, index, provider);
+    }
+
+    private boolean checkAnimation() {
+        if (animationInProgress != 0) {
+            if (Math.abs(transitionAnimationStartTime - System.currentTimeMillis()) >= 500) {
+                if (animationEndRunnable != null) {
+                    animationEndRunnable.run();
+                    animationEndRunnable = null;
+                }
+                animationInProgress = 0;
+            }
+        }
+        return animationInProgress != 0;
+    }
+
+    public void openPhoto(final BSMessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<BSMessageObject> messages, final ArrayList<MediaController.PhotoEntry> photos, final int index, final PhotoViewerProvider provider) {
+        final PlaceProviderObject object = provider.getPlaceForPhoto(messageObject, fileLocation, index);
+        if (object == null) {
+            Log.e(LOG_TAG, "object == null");
+            return;
+        }
+
+        try {
+            windowView.setLayoutParams(windowLayoutParams);
+        } catch (Exception e) {
+            Log.e(LOG_TAG, "error " + e.getMessage());
+            FileLog.e("tmessages", e);
+            return;
+        }
+
+        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
+
+        placeProvider = provider;
+
+        if (velocityTracker == null) {
+            velocityTracker = VelocityTracker.obtain();
+        }
+
+        disableShowCheck = true;
+        animationInProgress = 1;
+        onPhotoShow(messageObject, fileLocation, messages, photos, index, object);
+        isVisible = true;
+        backgroundDrawable.setAlpha(255);
+        toggleActionBar(true, false);
+
+        final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+        animatingImageView.setVisibility(View.VISIBLE);
+        animatingImageView.setRadius(object.radius);
+        animatingImageView.setNeedRadius(object.radius != 0);
+        animatingImageView.setImageBitmap(object.thumb);
+
+        ViewProxy.setAlpha(animatingImageView, 1.0f);
+        ViewProxy.setPivotX(animatingImageView, 0.0f);
+        ViewProxy.setPivotY(animatingImageView, 0.0f);
+        ViewProxy.setScaleX(animatingImageView, 1.0f);
+        ViewProxy.setScaleY(animatingImageView, 1.0f);
+        ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
+        ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
+        final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+        layoutParams.width = drawRegion.right - drawRegion.left;
+        layoutParams.height = drawRegion.bottom - drawRegion.top;
+        animatingImageView.setLayoutParams(layoutParams);
+
+        containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                containerView.getViewTreeObserver().removeOnPreDrawListener(this);
+
+                float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+                float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+                float scale = scaleX > scaleY ? scaleY : scaleX;
+                float width = layoutParams.width * scale;
+                float height = layoutParams.height * scale;
+                float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+                float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                if (clipTop < 0) {
+                    clipTop = 0;
+                }
+                int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                if (clipBottom < 0) {
+                    clipBottom = 0;
+                }
+                clipTop = Math.max(clipTop, clipVertical);
+                clipBottom = Math.max(clipBottom, clipVertical);
+
+
+                AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+                animatorSet.playTogether(
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", xPos),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", yPos),
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", 0),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
+                );
+
+                animationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        animationInProgress = 0;
+                        transitionAnimationStartTime = 0;
+                        containerView.invalidate();
+                        animatingImageView.setVisibility(View.GONE);
+                        if (showAfterAnimation != null) {
+                            showAfterAnimation.imageReceiver.setVisible(true, true);
+                        }
+                        if (hideAfterAnimation != null) {
+                            hideAfterAnimation.imageReceiver.setVisible(false, true);
+                        }
+                    }
+                };
+
+                animatorSet.setDuration(200);
+                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (animationEndRunnable != null) {
+                            animationEndRunnable.run();
+                            animationEndRunnable = null;
+                        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        onAnimationEnd(animation);
+                    }
+                });
+                transitionAnimationStartTime = System.currentTimeMillis();
+                animatorSet.start();
+
+                animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
+                    @Override
+                    public void onDraw() {
+                        disableShowCheck = false;
+                        animatingImageView.setOnDrawListener(null);
+                        object.imageReceiver.setVisible(false, true);
+                    }
+                });
+                Log.d(LOG_TAG, "onPreDraw");
+                return true;
+            }
+        });
+    }
+
+    public void closePhoto(boolean animated) {
+        if (mContext == null || !isVisible || checkAnimation()) {
+            return;
+        }
+
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.userPhotosLoaded);
+        ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
+
+        isVisible = false;
+        isActionBarVisible = false;
+
+        if (velocityTracker != null) {
+            velocityTracker.recycle();
+            velocityTracker = null;
+        }
+        ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
+
+        final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+
+        if(animated) {
+
+            animationInProgress = 1;
+            int visibility = animatingImageView.getVisibility();
+            animatingImageView.setVisibility(View.VISIBLE);
+            containerView.invalidate();
+
+            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+
+            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+            Rect drawRegion = null;
+            if (object != null) {
+                animatingImageView.setNeedRadius(object.radius != 0);
+                drawRegion = object.imageReceiver.getDrawRegion();
+                layoutParams.width = drawRegion.right - drawRegion.left;
+                layoutParams.height = drawRegion.bottom - drawRegion.top;
+                animatingImageView.setImageBitmap(object.thumb);
+            } else {
+                animatingImageView.setNeedRadius(false);
+                layoutParams.width = centerImage.getImageWidth();
+                layoutParams.height = centerImage.getImageHeight();
+                animatingImageView.setImageBitmap(centerImage.getBitmap());
+            }
+            animatingImageView.setLayoutParams(layoutParams);
+
+            float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+            float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+            float scale2 = scaleX > scaleY ? scaleY : scaleX;
+            float width = layoutParams.width * scale * scale2;
+            float height = layoutParams.height * scale * scale2;
+            float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+            float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+            ViewProxy.setTranslationX(animatingImageView, xPos + translationX);
+            ViewProxy.setTranslationY(animatingImageView, yPos + translationY);
+            ViewProxy.setScaleX(animatingImageView, scale * scale2);
+            ViewProxy.setScaleY(animatingImageView, scale * scale2);
+
+            if (object != null) {
+                object.imageReceiver.setVisible(false, true);
+                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                if (clipTop < 0) {
+                    clipTop = 0;
+                }
+                int clipBottom = (object.viewY + drawRegion.top + (drawRegion.bottom - drawRegion.top)) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                if (clipBottom < 0) {
+                    clipBottom = 0;
+                }
+
+                clipTop = Math.max(clipTop, clipVertical);
+                clipBottom = Math.max(clipBottom, clipVertical);
+
+                animatorSet.playTogether(
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", 1),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", 1),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", object.viewX + drawRegion.left),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", object.viewY + drawRegion.top),
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", object.radius),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f)
+                );
+            } else {
+                animatorSet.playTogether(
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "alpha", 0.0f),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", translationY >= 0 ? AndroidUtilities.displaySize.y : -AndroidUtilities.displaySize.y),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f)
+                );
+            }
+
+            animationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    animationInProgress = 0;
+                    onPhotoClosed(object);
+                }
+            };
+
+            animatorSet.setDuration(200);
+            animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animation) {
+                    if (animationEndRunnable != null) {
+                        animationEndRunnable.run();
+                        animationEndRunnable = null;
+                    }
+                }
+
+                @Override
+                public void onAnimationCancel(Object animation) {
+                    onAnimationEnd(animation);
+                }
+            });
+            transitionAnimationStartTime = System.currentTimeMillis();
+            animatorSet.start();
+        } else {
+            AnimationSet animationSet = new AnimationSet(true);
+            AlphaAnimation animation = new AlphaAnimation(1.0f, 0.0f);
+            animation.setDuration(150);
+            animation.setFillAfter(false);
+            animationSet.addAnimation(animation);
+            ScaleAnimation scaleAnimation = new ScaleAnimation(1.0f, 0.9f, 1.0f, 0.9f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+            scaleAnimation.setDuration(150);
+            scaleAnimation.setFillAfter(false);
+            animationSet.addAnimation(scaleAnimation);
+            animationSet.setDuration(150);
+            animationInProgress = 2;
+            animationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (animationListener != null) {
+                        animationInProgress = 0;
+                        onPhotoClosed(object);
+                        animationListener = null;
+                    }
+                }
+            };
+            animationSet.setAnimationListener(animationListener = new Animation.AnimationListener() {
+                @Override
+                public void onAnimationStart(Animation animation) {
+
+                }
+
+                @Override
+                public void onAnimationEnd(Animation animation) {
+                    if (animationEndRunnable != null) {
+                        animationEndRunnable.run();
+                        animationEndRunnable = null;
+                    }
+                }
+
+                @Override
+                public void onAnimationRepeat(Animation animation) {
+
+                }
+            });
+            transitionAnimationStartTime = System.currentTimeMillis();
+            containerView.startAnimation(animationSet);
+        }
+    }
+
+    public void destroyPhotoViewer() {
+        if (mContext == null || windowView == null) {
+            return;
+        }
+        try {
+            if (windowView.getParent() != null) {
+                //((BSActivity) mContext).setBSContentView(R.layout.chat_layout_bs);
+//                ((BSActivity)mContext).onCreate();
+            }
+            windowView = null;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        Instance = null;
+    }
+
+    private void onPhotoClosed(PlaceProviderObject object) {
+        disableShowCheck = true;
+        currentMessageObject = null;
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentThumb = null;
+        for (int a = 0; a < 3; a++) {
+            if (radialProgressViews[a] != null) {
+                radialProgressViews[a].setBackgroundState(-1, false);
+            }
+        }
+        centerImage.setImageBitmap((Bitmap)null);
+        leftImage.setImageBitmap((Bitmap)null);
+        rightImage.setImageBitmap((Bitmap)null);
+        if (object != null) {
+            object.imageReceiver.setVisible(true, true);
+        }
+        containerView.post(new Runnable() {
+            @Override
+            public void run() {
+                animatingImageView.setImageBitmap(null);
+                try {
+                    if (windowView.getParent() != null) {
+                        //((BSActivity) mContext).setBSContentView(R.layout.chat_layout_bs);
+//                        ((BSActivity)mContext).onCreate();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+        if (placeProvider != null) {
+            placeProvider.willHidePhotoViewer();
+        }
+        placeProvider = null;
+        disableShowCheck = false;
+        Log.d(LOG_TAG, "onPhotoClosed");
+    }
+
+    public boolean isVisible() {
+        return isVisible;
+    }
+
+    private void updateMinMax(float scale) {
+        int maxW = (int) (centerImage.getImageWidth() * scale - containerView.getWidth()) / 2;
+        int maxH = (int) (centerImage.getImageHeight() * scale - containerView.getHeight()) / 2;
+        if (maxW > 0) {
+            minX = -maxW;
+            maxX = maxW;
+        } else {
+            minX = maxX = 0;
+        }
+        if (maxH > 0) {
+            minY = -maxH;
+            maxY = maxH;
+        } else {
+            minY = maxY = 0;
+        }
+    }
+
+    public class OnSwipeTouchListener implements View.OnTouchListener {
+
+        protected final GestureDetector gestureDetector;
+
+        public OnSwipeTouchListener (Context ctx){
+            gestureDetector = new GestureDetector(ctx, new GestureListener());
+        }
+
+        private final class GestureListener extends GestureDetector.SimpleOnGestureListener {
+
+            private float _x = 0;
+            @Override
+            public boolean onDown(MotionEvent e) {
+                _x = 0;
+                return true;
+            }
+
+            @Override
+            public boolean onScroll(MotionEvent e1, MotionEvent e2,
+                                    float distanceX, float distanceY) {
+                _x = _x+distanceX;
+                Log.d("onScroll", "onScroll"+_x);
+                boolean result = false;
+                try {
+                    if (Math.abs(_x) > 50) {
+                        if (distanceX < 0) {
+                            onSwipeRight();
+                        } else {
+                            onSwipeLeft();
+                        }
+                    }
+                    result = true;
+
+                } catch (Exception exception) {
+                    exception.printStackTrace();
+                }
+                return result;
+            }
+
+        }
+
+        public void onSwipeRight() {
+            goToPrev();
+        }
+
+        public void onSwipeLeft() {
+            goToNext();
+        }
+
+        public void onSwipeTop() {
+        }
+
+        public void onSwipeBottom() {
+        }
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            return true;
+        }
+    }
+
+    private boolean onTouchEvent(MotionEvent event) {
+
+        if(event.getPointerCount() == 1 && gestureDetector.onTouchEvent(event) && doubleTap) {
+            doubleTap = false;
+            moving = false;
+            zooming = false;
+            checkMinMax(false);
+            return true;
+        }
+
+        int action = event.getAction();
+        if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_DOWN) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+            if (!draggingDown && !changingPage) {
+                if (canZoom && event.getPointerCount() == 2) {
+                    pinchStartDistance = (float) Math.hypot(event.getX(1) - event.getX(0), event.getY(1) - event.getY(0));
+                    pinchStartScale = scale;
+                    pinchCenterX = (event.getX(0) + event.getX(1)) / 2.0f;
+                    pinchCenterY = (event.getY(0) + event.getY(1)) / 2.0f;
+                    pinchStartX = translationX;
+                    pinchStartY = translationY;
+                    zooming = true;
+                    moving = false;
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                } else if (event.getPointerCount() == 1) {
+                    moveStartX = event.getX();
+                    dragY = moveStartY = event.getY();
+                    draggingDown = false;
+                    canDragDown = true;
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                }
+            }
+        } if (action == MotionEvent.ACTION_MOVE) {
+            if (canZoom && event.getPointerCount() == 2 && !draggingDown && zooming && !changingPage) {
+                scale = (float)Math.hypot(event.getX(1) - event.getX(0), event.getY(1) - event.getY(0)) / pinchStartDistance * pinchStartScale;
+                translationX = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (scale / pinchStartScale);
+                translationY = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (scale / pinchStartScale);
+                updateMinMax(scale);
+                containerView.invalidate();
+            } else if (event.getPointerCount() == 1) {
+                if (velocityTracker != null) {
+                    velocityTracker.addMovement(event);
+                }
+                float dx = Math.abs(event.getX() - moveStartX);
+                float dy = Math.abs(event.getY() - dragY);
+                if (canDragDown && !draggingDown && scale == 1 && dy >= AndroidUtilities.dp(30) && dy / 2 > dx) {
+                    draggingDown = true;
+                    moving = false;
+                    dragY = event.getY();
+                    if (isActionBarVisible && canShowBottom) {
+                        toggleActionBar(false, true);
+                    }
+                    return true;
+                } else if (draggingDown) {
+                    translationY = event.getY() - dragY;
+                    containerView.invalidate();
+                } else if (!invalidCoords && animationStartTime == 0) {
+                    float moveDx = moveStartX - event.getX();
+                    float moveDy = moveStartY - event.getY();
+                    if (moving || scale == 1 && Math.abs(moveDy) + AndroidUtilities.dp(12) < Math.abs(moveDx) || scale != 1) {
+                        if (!moving) {
+                            moveDx = 0;
+                            moveDy = 0;
+                            moving = true;
+                            canDragDown = false;
+                        }
+
+                        moveStartX = event.getX();
+                        moveStartY = event.getY();
+                        updateMinMax(scale);
+                        if (translationX < minX && !rightImage.hasImage() || translationX > maxX && !leftImage.hasImage()) {
+                            moveDx /= 3.0f;
+                        }
+                        if (maxY == 0 && minY == 0) {
+                            if (translationY - moveDy < minY) {
+                                translationY = minY;
+                                moveDy = 0;
+                            } else if (translationY - moveDy > maxY) {
+                                translationY = maxY;
+                                moveDy = 0;
+                            }
+                        } else {
+                            if (translationY < minY || translationY > maxY) {
+                                moveDy /= 3.0f;
+                            }
+                        }
+
+                        translationX -= moveDx;
+                        if (scale != 1) {
+                            translationY -= moveDy;
+                        }
+
+                        containerView.invalidate();
+                    }
+                } else {
+                    invalidCoords = false;
+                    moveStartX = event.getX();
+                    moveStartY = event.getY();
+                }
+            }
+        } if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {
+            if (zooming) {
+                invalidCoords = true;
+                if (scale < 1.0f) {
+                    updateMinMax(1.0f);
+                    animateTo(1.0f, 0, 0, true);
+                } else if(scale > 3.0f) {
+                    float atx = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (3.0f / pinchStartScale);
+                    float aty = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (3.0f / pinchStartScale);
+                    updateMinMax(3.0f);
+                    if (atx < minX) {
+                        atx = minX;
+                    } else if (atx > maxX) {
+                        atx = maxX;
+                    }
+                    if (aty < minY) {
+                        aty = minY;
+                    } else if (aty > maxY) {
+                        aty = maxY;
+                    }
+                    animateTo(3.0f, atx, aty, true);
+                } else {
+                    checkMinMax(true);
+                }
+                zooming = false;
+            } else if (draggingDown) {
+                if (Math.abs(dragY - event.getY()) > containerView.getHeight() / 6.0f) {
+                    closePhoto(false);
+                } else {
+                    animateTo(1, 0, 0);
+                }
+                draggingDown = false;
+            } else if (moving) {
+                float moveToX = translationX;
+                float moveToY = translationY;
+                updateMinMax(scale);
+                moving = false;
+                canDragDown = true;
+                float velocity = 0;
+                if (velocityTracker != null && scale == 1) {
+                    velocityTracker.computeCurrentVelocity(1000);
+                    velocity = velocityTracker.getXVelocity();
+                }
+
+                if((translationX < minX - containerView.getWidth() / 3 || velocity < -AndroidUtilities.dp(650)) && rightImage.hasImage()){
+                    goToNext();
+                    return true;
+                }
+                if((translationX > maxX + containerView.getWidth() / 3 || velocity > AndroidUtilities.dp(650)) && leftImage.hasImage()){
+                    goToPrev();
+                    return true;
+                }
+
+                if (translationX < minX) {
+                    moveToX = minX;
+                } else if (translationX > maxX) {
+                    moveToX = maxX;
+                }
+                if (translationY < minY) {
+                    moveToY = minY;
+                } else if (translationY > maxY) {
+                    moveToY = maxY;
+                }
+                animateTo(scale, moveToX, moveToY);
+            }
+        }
+        return true;
+    }
+
+    private void checkMinMax(boolean zoom) {
+        float moveToX = translationX;
+        float moveToY = translationY;
+        updateMinMax(scale);
+        if (translationX < minX) {
+            moveToX = minX;
+        } else if (translationX > maxX) {
+            moveToX = maxX;
+        }
+        if (translationY < minY) {
+            moveToY = minY;
+        } else if (translationY > maxY) {
+            moveToY = maxY;
+        }
+        animateTo(scale, moveToX, moveToY, zoom);
+    }
+
+    private void goToNext() {
+        float extra = 0;
+        if (scale != 1) {
+            extra = (containerView.getWidth() - centerImage.getImageWidth()) / 2 * scale;
+        }
+        switchImageAfterAnimation = 1;
+        animateTo(scale, minX - containerView.getWidth() - extra - PAGE_SPACING / 2, translationY);
+    }
+
+    private void goToPrev() {
+        float extra = 0;
+        if (scale != 1) {
+            extra = (containerView.getWidth() - centerImage.getImageWidth()) / 2 * scale;
+        }
+        switchImageAfterAnimation = 2;
+        animateTo(scale, maxX + containerView.getWidth() + extra + PAGE_SPACING / 2, translationY);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy) {
+        animateTo(newScale, newTx, newTy, false);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy, boolean isZoom) {
+        zoomAnimation = isZoom;
+        animateToScale = newScale;
+        animateToX = newTx;
+        animateToY = newTy;
+        animationStartTime = System.currentTimeMillis();
+        animationDuration = 250;
+        containerView.postInvalidate();
+    }
+
+    private void onDraw(Canvas canvas) {
+        if (animationInProgress == 1 || !isVisible && animationInProgress != 2) {
+            return;
+        }
+
+        canvas.save();
+
+        canvas.translate(containerView.getWidth() / 2, containerView.getHeight() / 2);
+        float currentTranslationY;
+        float currentTranslationX;
+
+        float aty = -1;
+        float ai = -1;
+        if (System.currentTimeMillis() - animationStartTime < animationDuration) {
+            ai = interpolator.getInterpolation((float)(System.currentTimeMillis() - animationStartTime) / animationDuration);
+            if (ai >= 0.99f) {
+                ai = -1;
+            }
+        }
+
+        if (ai != -1) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+
+            float ts = scale + (animateToScale - scale) * ai;
+            float tx = translationX + (animateToX - translationX) * ai;
+            float ty = translationY + (animateToY - translationY) * ai;
+
+            if (animateToScale == 1 && scale == 1 && translationX == 0) {
+                aty = ty;
+            }
+            canvas.translate(tx, ty);
+            canvas.scale(ts, ts);
+            currentTranslationY = ty / ts;
+            currentTranslationX = tx;
+            containerView.invalidate();
+        } else {
+            if (animationStartTime != 0) {
+                translationX = animateToX;
+                translationY = animateToY;
+                scale = animateToScale;
+                animationStartTime = 0;
+                updateMinMax(scale);
+                zoomAnimation = false;
+            }
+            if (!scroller.isFinished()) {
+                if (scroller.computeScrollOffset()) {
+                    if (scroller.getStartX() < maxX && scroller.getStartX() > minX) {
+                        translationX = scroller.getCurrX();
+                    }
+                    if (scroller.getStartY() < maxY && scroller.getStartY() > minY) {
+                        translationY = scroller.getCurrY();
+                    }
+                    containerView.invalidate();
+                }
+            }
+            if (switchImageAfterAnimation != 0) {
+                if (switchImageAfterAnimation == 1) {
+                    setImageIndex(currentIndex + 1, false);
+                } else if (switchImageAfterAnimation == 2) {
+                    setImageIndex(currentIndex - 1, false);
+                }
+                switchImageAfterAnimation = 0;
+            }
+
+            canvas.translate(translationX, translationY);
+            canvas.scale(scale, scale);
+            currentTranslationY = translationY / scale;
+            currentTranslationX = translationX;
+            if (!moving) {
+                aty = translationY;
+            }
+        }
+
+        if (scale == 1 && aty != -1) {
+            float maxValue = containerView.getHeight() / 4.0f;
+            backgroundDrawable.setAlpha((int) Math.max(127, 255 * (1.0f - (Math.min(Math.abs(aty), maxValue) / maxValue))));
+        } else {
+            backgroundDrawable.setAlpha(255);
+        }
+
+        Bitmap bitmap = centerImage.getBitmap();
+        if (bitmap != null) {
+            int bitmapWidth = bitmap.getWidth();
+            int bitmapHeight = bitmap.getHeight();
+
+            float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
+            float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
+            float scale = scaleX > scaleY ? scaleY : scaleX;
+            int width = (int) (bitmapWidth * scale);
+            int height = (int) (bitmapHeight * scale);
+
+            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
+        }
+
+        ImageReceiver sideImage = null;
+        if (scale >= 1.0f) {
+            float k = 1;
+            if (currentTranslationX > maxX + AndroidUtilities.bsDp(20)) {
+                k = -1;
+                sideImage = leftImage;
+            } else if (currentTranslationX < minX - AndroidUtilities.bsDp(20)) {
+                sideImage = rightImage;
+            }
+
+            if (!zoomAnimation && !zooming && sideImage != null) {
+                changingPage = true;
+                canvas.translate(k * containerView.getWidth() / 2, -currentTranslationY);
+                canvas.scale(1.0f / scale, 1.0f / scale);
+                canvas.translate(k * (containerView.getWidth() + PAGE_SPACING) / 2, 0);
+
+                bitmap = sideImage.getBitmap();
+                if (bitmap != null) {
+                    int bitmapWidth = bitmap.getWidth();
+                    int bitmapHeight = bitmap.getHeight();
+
+                    float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
+                    float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
+                    float scale = scaleX > scaleY ? scaleY : scaleX;
+                    int width = (int) (bitmapWidth * scale);
+                    int height = (int) (bitmapHeight * scale);
+
+                    sideImage.setImageCoords(-width / 2, -height / 2, width, height);
+                    sideImage.draw(canvas);
+                }
+            } else {
+                changingPage = false;
+            }
+        }
+
+        canvas.restore();
+
+        canvas.save();
+        canvas.translate(currentTranslationX, currentTranslationY);
+        radialProgressViews[0].onDraw(canvas);
+
+        if (!zoomAnimation) {
+            if (sideImage == rightImage) {
+                canvas.translate((canvas.getWidth() * (scale + 1) + PAGE_SPACING) / 2, -currentTranslationY);
+                radialProgressViews[1].onDraw(canvas);
+            } else if (sideImage == leftImage) {
+                canvas.translate(-(canvas.getWidth() * (scale + 1) + PAGE_SPACING) / 2, -currentTranslationY);
+                radialProgressViews[2].onDraw(canvas);
+            }
+        }
+        canvas.restore();
+    }
+
+    @SuppressLint("DrawAllocation")
+    private void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if(changed) {
+            scale = 1;
+            translationX = 0;
+            translationY = 0;
+            updateMinMax(scale);
+
+            if (checkImageView != null) {
+                checkImageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                    @Override
+                    public boolean onPreDraw() {
+                        checkImageView.getViewTreeObserver().removeOnPreDrawListener(this);
+                        LayoutParams layoutParams = (LayoutParams)checkImageView.getLayoutParams();
+                        WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+                        int rotation = manager.getDefaultDisplay().getRotation();
+                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                            layoutParams.topMargin = AndroidUtilities.bsDp(48);
+                        } else {
+                            layoutParams.topMargin = AndroidUtilities.bsDp(58);
+                        }
+                        checkImageView.setLayoutParams(layoutParams);
+                        return false;
+                    }
+                });
+            }
+        }
+    }
+
+    private void onActionClick() {
+        if (currentMessageObject == null || currentFileNames[0] == null) {
+            return;
+        }
+        boolean loadFile = false;
+        if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+            File f = new File(currentMessageObject.messageOwner.attachPath);
+            if (f.exists()) {
+                Intent intent = new Intent(Intent.ACTION_VIEW);
+                intent.setDataAndType(Uri.fromFile(f), "video/mp4");
+                mContext.startActivity(intent);
+            } else {
+                loadFile = true;
+            }
+        } else {
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            if (cacheFile.exists()) {
+                OtherFlipBSActivity.setViewVideoFlag();
+                OtherFlipBSActivity.Params.put("file", cacheFile);
+                OtherFlipBSActivity.Params.put("message", currentMessageObject);
+                Intent intent = new Intent(mContext, OtherFlipBSActivity.class);
+                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                mContext.startService(intent);
+            } else {
+                loadFile = true;
+            }
+        }
+        if (loadFile) {
+            if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
+                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video, true);
+            } else {
+                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
+            }
+        }
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+        return false;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        if (scale != 1) {
+            scroller.abortAnimation();
+            scroller.fling(Math.round(translationX), Math.round(translationY), Math.round(velocityX), Math.round(velocityY), (int) minX, (int) maxX, (int) minY, (int) maxY);
+            containerView.postInvalidate();
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onSingleTapConfirmed(MotionEvent e) {
+        if (canShowBottom) {
+            if (radialProgressViews[0] != null && containerView != null) {
+                int state = radialProgressViews[0].backgroundState;
+                if (state > 0 && state <= 3) {
+                    float x = e.getX();
+                    float y = e.getY();
+                    if (x >= (containerView.getWidth() - AndroidUtilities.bsDp(64)) / 2.0f && x <= (containerView.getWidth() + AndroidUtilities.bsDp(64)) / 2.0f &&
+                            y >= (containerView.getHeight() - AndroidUtilities.bsDp(64)) / 2.0f && y <= (containerView.getHeight() + AndroidUtilities.bsDp(64)) / 2.0f) {
+                        onActionClick();
+                        checkProgress(0, true);
+                        return true;
+                    }
+                }
+            }
+            toggleActionBar(!isActionBarVisible, true);
+        } else {
+            checkImageView.performClick();
+        }
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTap(MotionEvent e) {
+        if (!canZoom || scale == 1.0f && (translationY != 0 || translationX != 0)) {
+            return false;
+        }
+        if (animationStartTime != 0 || animationInProgress != 0) {
+            return false;
+        }
+        if (scale == 1.0f) {
+            float atx = (e.getX() - containerView.getWidth() / 2) - ((e.getX() - containerView.getWidth() / 2) - translationX) * (3.0f / scale);
+            float aty = (e.getY() - containerView.getHeight() / 2) - ((e.getY() - containerView.getHeight() / 2) - translationY) * (3.0f / scale);
+            updateMinMax(3.0f);
+            if (atx < minX) {
+                atx = minX;
+            } else if (atx > maxX) {
+                atx = maxX;
+            }
+            if (aty < minY) {
+                aty = minY;
+            } else if (aty > maxY) {
+                aty = maxY;
+            }
+            animateTo(3.0f, atx, aty);
+        } else {
+            animateTo(1.0f, 0, 0);
+        }
+        doubleTap = true;
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTapEvent(MotionEvent e) {
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSTimerDrawable.java b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSTimerDrawable.java
new file mode 100644
index 000000000..87c35c289
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/Components/BSTimerDrawable.java
@@ -0,0 +1,138 @@
+package org.telegram.bsui.Components;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+
+/**
+ * Created by E1ektr0 on 15.01.2015.
+ */
+public class BSTimerDrawable extends Drawable {
+
+    private static Drawable emptyTimerDrawable;
+    private static Drawable timerDrawable;
+    private static TextPaint timePaint;
+    private StaticLayout timeLayout;
+    private float timeWidth = 0;
+    private int timeHeight = 0;
+    private int time = 0;
+
+    public BSTimerDrawable(Context context) {
+        if (emptyTimerDrawable == null) {
+            emptyTimerDrawable = context.getResources().getDrawable(R.drawable.header_timer);
+            timerDrawable = context.getResources().getDrawable(R.drawable.header_timer2);
+            timePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.bsDp(11));
+            timePaint.setColor(0xffffffff);
+            timePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        }
+    }
+
+    public void setTime(int value) {
+        time = value;
+
+        String timeString = null;
+        if (time >= 1 && time < 60) {
+            timeString = "" + value;
+            if (timeString.length() < 2) {
+                timeString += "s";
+            }
+        } else if (time >= 60 && time < 60 * 60) {
+            timeString = "" + value / 60;
+            if (timeString.length() < 2) {
+                timeString += "m";
+            }
+        } else if (time >= 60 * 60 && time < 60 * 60 * 24) {
+            timeString = "" + value / 60 / 60;
+            if (timeString.length() < 2) {
+                timeString += "h";
+            }
+        } else if (time >= 60 * 60 * 24 && time < 60 * 60 * 24 * 7) {
+            timeString = "" + value / 60 / 60 / 24;
+            if (timeString.length() < 2) {
+                timeString += "d";
+            }
+        } else {
+            timeString = "" + value / 60 / 60 / 24 / 7;
+            if (timeString.length() < 2) {
+                timeString += "w";
+            } else if (timeString.length() > 2) {
+                timeString = "c";
+            }
+        }
+
+        timeWidth = timePaint.measureText(timeString);
+        try {
+            timeLayout = new StaticLayout(timeString, timePaint, (int)Math.ceil(timeWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            timeHeight = timeLayout.getHeight();
+        } catch (Exception e) {
+            timeLayout = null;
+            FileLog.e("tmessages", e);
+        }
+
+        invalidateSelf();
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        int width =35;// timerDrawable.getIntrinsicWidth();
+        int height =35;// timerDrawable.getIntrinsicHeight();
+
+
+
+        Drawable drawable = null;
+        if (time == 0) {
+            drawable = timerDrawable;
+        } else {
+            drawable = emptyTimerDrawable;
+        }
+
+        int x = (width - 0) / 2;
+        int y = (height - 0) / 2;
+        drawable.setBounds(x, y, x + 35, y + 35);
+        drawable.draw(canvas);
+
+        if (time != 0 && timeLayout != null) {
+            int xOffxet = 0;
+            if (AndroidUtilities.bsDensity == 3) {
+                xOffxet = -1;
+            }
+            canvas.translate((int)(width / 2 - Math.ceil(timeWidth / 2)) + xOffxet, (height - timeHeight) / 2);
+            timeLayout.draw(canvas);
+        }
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return timerDrawable.getIntrinsicWidth();
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return timerDrawable.getIntrinsicHeight();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/OtherFlipBSActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/OtherFlipBSActivity.java
new file mode 100644
index 000000000..204702e79
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/OtherFlipBSActivity.java
@@ -0,0 +1,192 @@
+package org.telegram.bsui;
+
+import android.app.PendingIntent;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+
+import com.yotadevices.sdk.NotificationBSActivity;
+import com.yotadevices.sdk.utils.RotationAlgorithm;
+
+import org.telegram.ui.LaunchActivity;
+
+import java.util.HashMap;
+
+/**
+ * Created by Ji on 08.01.2015.
+ */
+public class OtherFlipBSActivity extends NotificationBSActivity {
+
+    public static final String SETTINGS_FLAG = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.SETTINGS_FLAG";
+    public static final String VIEW_PROFILE = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.VIEW_PROFILE";
+    public static final String VIEW_VIDEO = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.VIEW_VIDEO";
+    public static final String ATTACH = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.ATTACH";
+    public static final String VIEW_FILE = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.VIEW_FILE";
+    public static final String SHARE = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.SHARE";
+    public static final String GEO = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.GEO";
+    public static final String USER_PROFILE = "com.yotadevices.yotaphone2.telegram.bsui.OtherFlipBSActivity.USER_PROFILE";
+    public final static String EXTRA_PENDING = "pending";
+
+    private static boolean profile = false;
+    private static boolean settings = false;
+    private static boolean video = false;
+    private static boolean attach = false;
+    private static boolean share = false;
+    private static boolean file = false;
+    private static boolean geo = false;
+    private static boolean userProfile = false;
+
+    private BroadcastReceiver mScreenReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            handleFinish();
+        }
+    };
+
+    @Override
+    protected void onBSDestroy() {
+        super.onBSDestroy();
+    }
+
+    public static HashMap<String,Object> Params = new HashMap<>();
+
+    public static void setProfileFlag(){
+        setDisableFlags();
+        Params.clear();
+        profile = true;
+    }
+    public static void setSettingsFlag(){
+        setDisableFlags();
+        Params.clear();
+        settings = true;
+    }
+    public static void setGeoFlag(){
+        setDisableFlags();
+        Params.clear();
+        geo = true;
+    }
+    public static void setDisableFlags(){
+        profile = settings = video = attach = share = file = geo = userProfile = false;
+    }
+    public static void setViewVideoFlag(){
+        setDisableFlags();
+        Params.clear();
+        video = true;
+    }
+    public static void setAttachFlag(){
+        setDisableFlags();
+        Params.clear();
+        attach = true;
+    }
+    public static void setShareFlag(){
+        setDisableFlags();
+        Params.clear();
+        share = true;
+    }
+    public static void setFileFlag(){
+        setDisableFlags();
+        Params.clear();
+        file = true;
+    }
+    public static void setUserProfileFlag() {
+        setDisableFlags();
+        Params.clear();
+        userProfile = true;
+    }
+
+    @Override
+    protected void onBSCreate() {
+        super.onBSCreate();
+        Intent i = new Intent(getContext(), LaunchActivity.class);
+        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        if(settings) {
+            setDisableFlags();
+            i.setAction(SETTINGS_FLAG);
+        } else if(profile) {
+            setDisableFlags();
+            i.setAction(VIEW_PROFILE);
+        } else if(video){
+            setDisableFlags();
+            i.setAction(VIEW_VIDEO);
+        } else if(attach){
+            setDisableFlags();
+            i.setAction(ATTACH);
+        } else if(share){
+            setDisableFlags();
+            i.setAction(SHARE);
+        } else  if(file){
+            setDisableFlags();
+            i.setAction(VIEW_FILE);
+        } else if(geo){
+            setDisableFlags();
+            i.setAction(GEO);
+        } else if(userProfile){
+            setDisableFlags();
+            i.setAction(USER_PROFILE);
+        }
+        startActivity(i);
+        handleIntent();
+    }
+
+    @Override
+    protected void onBSResume() {
+        super.onBSResume();
+        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
+        getContext().registerReceiver(mScreenReceiver, filter);
+    }
+
+    @Override
+    protected void onBSPause() {
+        super.onBSPause();
+        if (mScreenReceiver != null) {
+            try {
+                getContext().unregisterReceiver(mScreenReceiver);
+            } catch (Exception unused) {
+            }
+            mScreenReceiver = null;
+        }
+    }
+
+    private synchronized void handleFinish() {
+        if (!isFinishing()) {
+            finish();
+        }
+    }
+
+    private void handleIntent() {
+        Intent i = getIntent();
+        if (i != null) {
+            PendingIntent pending = i.getParcelableExtra(EXTRA_PENDING);
+            setBSContentView(com.yotadevices.sdk.R.layout.flip_layout);
+            getResources().getString(com.yotadevices.sdk.R.string.flip_popup_default_title);
+
+            if (pending != null) {
+                try {
+                    pending.send();
+                } catch (PendingIntent.CanceledException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        RotationAlgorithm.getInstance(getApplicationContext()).turnScreenOffIfRotated(
+                RotationAlgorithm.OPTION_START_WITH_BS | RotationAlgorithm.OPTION_NO_UNLOCK | RotationAlgorithm.OPTION_EXPECT_FIRST_ROTATION_FOR_60SEC,
+                new RotationAlgorithm.OnPhoneRotatedListener() {
+                    @Override
+                    public void onRotataionCancelled() {
+
+                    }
+
+                    @Override
+                    public void onPhoneRotatedToFS() {
+                        handleFinish();
+                    }
+
+                    @Override
+                    public void onPhoneRotatedToBS() {
+                    }
+                });
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/SettingsActivity.java
new file mode 100644
index 000000000..0ec5a2c2e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/SettingsActivity.java
@@ -0,0 +1,41 @@
+package org.telegram.bsui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.widget.FrameLayout;
+
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.IntroActivity;
+import org.telegram.ui.LaunchActivity;
+
+import java.util.Map;
+
+/**
+ * Created by fanticqq on 04.02.15.
+ */
+public class SettingsActivity extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        ApplicationLoader.postInitApplication();
+        if (!UserConfig.isClientActivated()) {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+            Map<String, ?> state = preferences.getAll();
+            if (state.isEmpty()) {
+                Intent intent = new Intent(getApplicationContext(), IntroActivity.class);
+                startActivity(intent);
+                finish();
+            }
+        } else {
+            Intent intent = new Intent(getApplicationContext(), LaunchActivity.class);
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setAction(OtherFlipBSActivity.SETTINGS_FLAG);
+            startActivity(intent);
+            finish();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSBaseActivity.java b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSBaseActivity.java
new file mode 100644
index 000000000..800731e5a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSBaseActivity.java
@@ -0,0 +1,92 @@
+package org.telegram.bsui.widget;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.RelativeLayout;
+
+import com.yotadevices.sdk.BSActivity;
+import com.yotadevices.sdk.Constants;
+
+import org.telegram.bsui.ActionBar.BSActionBar;
+import org.telegram.messenger.R;
+
+import java.util.Stack;
+
+/**
+ * Created by E1ektr0 on 09.01.2015.
+ */
+public class BSBaseActivity extends BSActivity{
+    private View rootView;
+    protected Bundle arguments;
+    protected BSActionBar actionBar;
+    private static Stack<BSActivity> stack = new Stack<>();
+
+    @Override
+    protected void onBSCreate() {
+        stack.add(this);
+        super.onBSCreate();
+    }
+
+    @Override
+    protected void onBSDestroy() {
+        super.onBSDestroy();
+        finishFragment();
+    }
+
+    public void finishFragment() {
+        stack.remove(this);
+
+        finish();
+    }
+
+    protected <T extends BSBaseActivity> void presentFragment(Class<T> bsActivityClass, boolean removeFromHistory) {
+        Intent intent = new Intent(getContext(), bsActivityClass);
+        present(removeFromHistory, intent);
+    }
+
+    protected <T extends BSBaseActivity> void presentFragment(Class<T> bsActivityClass, Bundle args, boolean removeFromHistory) {
+        stack.add(this);
+        Intent intent = new Intent(getContext(), bsActivityClass);
+        intent.putExtras(args);
+        present(removeFromHistory, intent);
+    }
+
+    private void present(boolean removeFromHistory, Intent intent) {
+        if(removeFromHistory)
+            intent.putExtra(Constants.YOTAPHONE_EXTRA_FLAGS, Constants.YotaIntent.FLAG_BSACTIVITY_NO_HISTORY);
+        startBSActivity(intent);
+    }
+
+    protected void IniActionBar()
+    {
+        LayoutInflater bsLayoutInflater = getBSDrawer().getBSLayoutInflater();
+        rootView = bsLayoutInflater.inflate(R.layout.bs_actoin_bar, null);
+        actionBar = (BSActionBar)rootView.findViewById(R.id.action_bar);
+    }
+
+    protected View createActionBar(View childView)
+    {
+        ((RelativeLayout)rootView.findViewById(R.id.view_container)).addView(childView);
+        return rootView;
+    }
+
+    protected void removeSelfFromStack(){
+
+    }
+
+    protected Context getParentActivity() {
+        return getContext();
+    }
+
+    protected void setTitle(String str)
+    {
+        actionBar.setTitle(str);
+    }
+    protected void setSubtitle(String str)
+    {
+        actionBar.setSubtitle(str);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMedium.java b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMedium.java
new file mode 100644
index 000000000..65f68ffdd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMedium.java
@@ -0,0 +1,716 @@
+package org.telegram.bsui.widget;
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.appwidget.AppWidgetManager;
+import android.appwidget.AppWidgetProvider;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.PowerManager;
+import android.speech.RecognitionListener;
+import android.speech.SpeechRecognizer;
+import android.text.Html;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.View;
+import android.widget.RemoteViews;
+
+import com.yotadevices.sdk.BackscreenLauncherConstants;
+import com.yotadevices.sdk.Constants;
+import com.yotadevices.sdk.template.ModernWidgetFooterTemplate;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.bsui.BSChatActivity;
+import org.telegram.bsui.BSMessagesActivity;
+import org.telegram.bsui.OtherFlipBSActivity;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+/**
+ * Created by Ji on 02.01.2015.
+ */
+public class BSTelegramWidgetMedium extends AppWidgetProvider implements NotificationCenter.NotificationCenterDelegate {
+    private static final String LOG_TAG = "BSTelegramWidgetMedium";
+    public static final String WAKELOCK_TAG = "com.yotadevices.yotaphone2.telegram.bsui.widget.WAKELOCK";
+    private static boolean initialize = false;
+    private boolean finished = false;
+    private Context mContext;
+    private PowerManager.WakeLock wakeLock;
+
+    private Bundle getChatActivityArgs(long dialogId) {
+        Bundle args = new Bundle();
+        int lower_part = (int) dialogId;
+        int high_id = (int) (dialogId >> 32);
+        if (lower_part != 0) {
+            if (high_id == 1) {
+                args.putInt("chat_id", lower_part);
+            } else {
+                if (lower_part > 0) {
+                    args.putInt("user_id", lower_part);
+                } else if (lower_part < 0) {
+                    args.putInt("chat_id", -lower_part);
+                }
+            }
+        } else {
+            args.putInt("enc_id", high_id);
+        }
+
+        return args;
+    }
+
+    private PendingIntent getChatActivity(Context context, int messageIndex) {
+        //        long dialog_id = MessagesController.getInstance().dialogs.get(0).id;
+
+        BSTelegramWidgetMessages messages = BSTelegramWidgetMessages.getInstance(context);
+
+        long dialogId = messages.getCurrentMessage(messageIndex).getDialogId();
+        Bundle args = this.getChatActivityArgs(dialogId);
+
+        SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(context);
+        if (speechRecognizerManager.getResult() != null) {
+            args.putString(SpeechRecognizerManager.EXTRA_SPEECH_RECOGNIZER_RESULT, speechRecognizerManager.getResult());
+
+            speechRecognizerManager.setResult(null);
+        }
+
+        Intent intent = new Intent(context, BSChatActivity.class);
+        intent.putExtras(args);
+        return PendingIntent.getService(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
+    private PendingIntent getStartActivity(Context context) {
+        Intent intent = new Intent(context, OtherFlipBSActivity.class);
+        intent.putExtra(Constants.YOTAPHONE_EXTRA_FLAGS, Constants.YotaIntent.FLAG_BSACTIVITY_NO_HISTORY);
+        return PendingIntent.getService(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
+    private PendingIntent getMessagesActivity(Context context) {
+        Intent intent = new Intent(context, BSMessagesActivity.class);
+        return PendingIntent.getService(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
+    private PendingIntent getPendingSelfIntent(Context context, String action) {
+        Intent intent = new Intent(context, BSTelegramWidgetMedium.class);
+        intent.setAction(action);
+        return PendingIntent.getBroadcast(context, 0, intent, 0);
+    }
+
+    private PendingIntent getPendingSelfIntent(Context context, String action, int data) {
+        Intent intent = new Intent(context, BSTelegramWidgetMedium.class);
+        intent.setAction(action);
+        intent.putExtra("data", data);
+        return PendingIntent.getBroadcast(context, 0, intent, 0);
+    }
+
+
+    private void acquireWakeLock(Context context) {
+        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, WAKELOCK_TAG);
+        wakeLock.acquire();
+    }
+
+    private void releaseWakeLock() {
+        if (wakeLock != null && wakeLock.isHeld()) {
+            wakeLock.release();
+            wakeLock.acquire(1000);
+        }
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        Log.d(LOG_TAG, "onReceive: " + intent.getAction());
+
+        SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(context);
+        switch (intent.getAction()) {
+            case SpeechRecognizerManager.ACTION_SPEAK: {
+                if (!speechRecognizerManager.isListening()) {
+                    SpeechRecognizer speechRecognizer = speechRecognizerManager.getSpeechRecognizer();
+                    speechRecognizerManager.setMessageIndex(intent.getIntExtra("data", 0));
+                    Intent recognizerIntent = speechRecognizerManager.getIntent();
+                    speechRecognizer.setRecognitionListener(new SpeechRecognizerListener(context));
+                    speechRecognizer.startListening(recognizerIntent);
+                }
+                speechRecognizerManager.setListening(true);
+                break;
+            }
+            case SpeechRecognizerManager.ACTION_LISTENING_TIMEOUT_END: {
+                if (speechRecognizerManager.isListening()) {
+                    speechRecognizerManager.getSpeechRecognizer().stopListening();
+                }
+            }
+            case SpeechRecognizerManager.ACTION_CLOSE_RECOGNIZER_ERROR: {
+                speechRecognizerManager.setErrorVisibility(View.GONE);
+                break;
+            }
+            case BackscreenLauncherConstants.ACTION_APPWIDGET_VISIBILITY_CHANGED: {
+                SpeechRecognizerManager.destroy();
+                break;
+            }
+        }
+        super.onReceive(context, intent);
+        drawWidgets(context);
+    }
+
+    @Override
+    public void onEnabled(Context context) {
+        Log.d(LOG_TAG, "onEnabled");
+        super.onEnabled(context);
+    }
+
+    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
+        Log.d(LOG_TAG, "onUpdate");
+        drawWidgets(context);
+    }
+
+    @Override
+    public void onDisabled(Context context) {
+        Log.d(LOG_TAG, "onDisabled");
+        onFinish();
+        super.onDisabled(context);
+    }
+
+    public void drawWidgets(Context context) {
+        Log.d(LOG_TAG, "drawWidgets");
+        this.acquireWakeLock(context);
+        int[] allWidgetIds;
+        ComponentName thisWidget = new ComponentName(context, BSTelegramWidgetMedium.class);
+        allWidgetIds = AppWidgetManager.getInstance(context).getAppWidgetIds(thisWidget);
+        for (int widgetId : allWidgetIds) {
+            this.drawWidget(context, widgetId);
+        }
+        releaseWakeLock();
+    }
+
+    private void drawWidget(Context context, int widgetId) {
+        Log.d(LOG_TAG, "drawWidget");
+        Bundle appWidgetOptions = AppWidgetManager.getInstance(context).getAppWidgetOptions(widgetId);
+        int size = appWidgetOptions.getInt(BackscreenLauncherConstants.OPTION_WIDGET_SIZE, -1);
+        boolean demo = appWidgetOptions.getBoolean(BackscreenLauncherConstants.OPTION_WIDGET_DEMO_MODE, false);
+
+        RemoteViews remoteViews = new WidgetView(context, size, demo).invoke();
+
+        AppWidgetManager.getInstance(context).updateAppWidget(widgetId, remoteViews);
+    }
+
+    private int getCountContentLine(String text) {
+        TextPaint tp = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+        tp.setTextSize(AndroidUtilities.dp(20));
+        StaticLayout sl = new StaticLayout(text, tp, 448, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        return sl.getLineCount();
+    }
+
+    private void onInit(Context context) {
+        if (!initialize) {
+            ApplicationLoader.postInitApplication();
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogin);
+            mContext = context;
+            initialize = true;
+        }
+    }
+
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.appDidLogout) {
+            onFinish();
+        } else if (id == NotificationCenter.dialogsNeedReload || id == NotificationCenter.updateInterfaces) {
+            BSTelegramWidgetMessages messages = BSTelegramWidgetMessages.getInstance(this.mContext);
+            messages.reloadDialogs();
+        }
+        drawWidgets(mContext);
+    }
+
+    private void onFinish() {
+        if (finished) {
+            return;
+        }
+        finished = true;
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogin);
+        initialize = false;
+        BSTelegramWidgetMessages messages = BSTelegramWidgetMessages.getInstance(this.mContext);
+        messages.setDialogsLoaded(false);
+        messages.clear();
+    }
+
+    private class WidgetView {
+        private final int FLAG_MEDIUM_WIDGET = 0;
+        private final int FLAG_LARGE_WIDGET_SINGLE = 1;
+        private final int FLAG_LARGE_WIDGET = 2;
+
+        private Context mContext;
+        private RemoteViews mRemoteViews;
+        private int mWidgetSize;
+        private boolean mIsDemo;
+
+        private int mDisplayMessagesCount;
+        private BSTelegramWidgetMessages mMessages;
+        private SpeechRecognizerManager mSpeechRecognizerManager;
+
+        public WidgetView(Context context, int widgetSize, boolean demo) {
+            Log.d(LOG_TAG, "WidgetView.ctor: size = " + widgetSize);
+
+            this.mContext = context;
+            this.mWidgetSize = widgetSize;
+            this.mIsDemo = demo;
+
+            this.mDisplayMessagesCount = 0;
+            this.mMessages = BSTelegramWidgetMessages.getInstance(this.mContext);
+            this.mSpeechRecognizerManager = SpeechRecognizerManager.getInstance(mContext);
+
+            switch (this.mWidgetSize) {
+                case BackscreenLauncherConstants.WIDGET_SIZE_LARGE: {
+                    this.mDisplayMessagesCount = this.mMessages.updateMessages(2);
+
+                    if (this.mSpeechRecognizerManager.isListening()) {
+                        this.mRemoteViews = new RemoteViews(context.getPackageName(), R.layout.bs_telegram_large_widget_voice);
+                    } else {
+                        if (this.mDisplayMessagesCount <= 1) {
+                            this.mRemoteViews = new RemoteViews(context.getPackageName(), R.layout.bs_telegram_image_large_widget);
+                        } else {
+                            this.mRemoteViews = new RemoteViews(context.getPackageName(), R.layout.bs_telegram_large_widget);
+                        }
+                    }
+
+
+                    break;
+                }
+                case BackscreenLauncherConstants.WIDGET_SIZE_MEDIUM: {
+                    this.mDisplayMessagesCount = this.mMessages.updateMessages(1);
+                    if (this.mSpeechRecognizerManager.isListening()) {
+                        this.mRemoteViews = new RemoteViews(context.getPackageName(), R.layout.bs_telegram_medium_widget_voice);
+                    } else {
+                        this.mRemoteViews = new RemoteViews(context.getPackageName(), R.layout.bs_telegram_medium_widget);
+                    }
+
+
+                    break;
+                }
+            }
+
+            //            this.mRemoteViews.removeAllViews(R.id.widget_messages_container);
+        }
+
+        public RemoteViews invoke() {
+            RemoteViews remoteViews = null;
+            if (!this.mIsDemo) {
+                BSTelegramWidgetMedium.this.onInit(this.mContext);
+                if (UserConfig.isClientActivated()) {
+
+                    this.mMessages.loadDialogs();
+                    switch (this.mWidgetSize) {
+                        case BackscreenLauncherConstants.WIDGET_SIZE_LARGE: {
+                            Log.d(LOG_TAG, "Large: count: " + this.mDisplayMessagesCount);
+                            remoteViews = this.buildMessageView();
+                            break;
+                        }
+                        case BackscreenLauncherConstants.WIDGET_SIZE_MEDIUM: {
+                            Log.d(LOG_TAG, "Medium: count: " + this.mDisplayMessagesCount);
+                            remoteViews = this.buildMessageView();
+                            break;
+                        }
+                    }
+                } else {
+                    remoteViews = this.buildOfflineMessageView();
+                }
+            } else {
+                remoteViews = this.buildDemoMessageView();
+            }
+
+            return remoteViews;
+        }
+
+        private String getTimeText(int messageIndex) {
+            String time = this.getFormattedTimeAgoString(this.mContext, this.mMessages.getMessageTime(messageIndex), false);
+            String chatType = this.getChatType(this.mMessages.getCurrentMessage(messageIndex).getDialogId());
+            return LocaleController.formatStringSimple("%s, %s", time, chatType);
+        }
+
+
+        private RemoteViews buildMessageView() {
+            if (this.mDisplayMessagesCount == 0) {
+                return this.buildEmptyMessageView();
+            } else {
+                int buttonSpeakFlag = this.FLAG_MEDIUM_WIDGET;
+
+                this.buildRightButton();
+
+                if (this.mSpeechRecognizerManager.isListening()) {
+                    this.mRemoteViews.setTextViewText(R.id.speak_to, this.mMessages.getMessagesUser(this.mSpeechRecognizerManager.getMessageIndex()));
+
+                } else {
+                    this.mRemoteViews.setTextViewText(R.id.sms_missed, Html.fromHtml(this.mMessages.getMessageText(0)));
+
+                    this.mRemoteViews.setOnClickPendingIntent(R.id.right_button, getMessagesActivity(this.mContext));
+                    this.mRemoteViews.setOnClickPendingIntent(R.id.sms_missed_container, BSTelegramWidgetMedium.this.getChatActivity(this.mContext, 0));
+
+                    if (this.mWidgetSize == BackscreenLauncherConstants.WIDGET_SIZE_MEDIUM) {
+                        this.mRemoteViews.setViewVisibility(R.id.time_image, View.VISIBLE);
+
+                        this.mRemoteViews.setViewVisibility(R.id.time, View.VISIBLE);
+                        this.mRemoteViews.setTextViewText(R.id.time, this.getTimeText(0));
+                    } else {
+                        if (this.mDisplayMessagesCount == 1) {
+                            buttonSpeakFlag = this.FLAG_LARGE_WIDGET_SINGLE;
+
+                            this.mRemoteViews.setViewVisibility(R.id.time, View.GONE);
+                            this.mRemoteViews.setViewVisibility(R.id.time_image, View.GONE);
+
+                            this.mRemoteViews.setViewVisibility(R.id.extra_time_image, View.VISIBLE);
+
+                            this.mRemoteViews.setViewVisibility(R.id.extra_time, View.VISIBLE);
+                            this.mRemoteViews.setTextViewText(R.id.extra_time, this.getTimeText(0));
+                        } else {
+                            buttonSpeakFlag = this.FLAG_LARGE_WIDGET;
+
+                            this.mRemoteViews.setViewVisibility(R.id.extra_time_image, View.GONE);
+
+                            this.mRemoteViews.setViewVisibility(R.id.time_image, View.VISIBLE);
+
+                            this.mRemoteViews.setViewVisibility(R.id.extra_time, View.VISIBLE);
+                            this.mRemoteViews.setTextViewText(R.id.extra_time, this.mContext.getApplicationContext().getString(R.string.LastFromYotagram));
+
+                            this.mRemoteViews.setViewVisibility(R.id.time, View.VISIBLE);
+                            this.mRemoteViews.setTextViewText(R.id.time, this.getTimeText(0));
+
+                            this.mRemoteViews.setViewVisibility(R.id.sms_missed_2_container, View.VISIBLE);
+                            this.mRemoteViews.setTextViewText(R.id.sms_missed_2, Html.fromHtml(this.mMessages.getMessageText(1)));
+                            this.mRemoteViews.setOnClickPendingIntent(R.id.sms_missed_2, BSTelegramWidgetMedium.this.getChatActivity(this.mContext, 1));
+                            this.mRemoteViews.setTextViewText(R.id.time_2, this.getTimeText(1));
+                        }
+                    }
+                    this.buildSpeakButton(buttonSpeakFlag);
+                }
+                return this.mRemoteViews;
+            }
+        }
+
+        private void buildSpeakButton(int buttonSpeakFlag) {
+            if (SpeechRecognizer.isRecognitionAvailable(this.mContext)) {
+                SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(mContext);
+
+                //TODO: delete block
+                if (speechRecognizerManager.isListening()) {
+                    if (buttonSpeakFlag == this.FLAG_MEDIUM_WIDGET) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.INVISIBLE);
+                    } else if (buttonSpeakFlag == this.FLAG_LARGE_WIDGET_SINGLE) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_hide, View.INVISIBLE);
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.GONE);
+                    } else if (buttonSpeakFlag == this.FLAG_LARGE_WIDGET) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_hide, View.GONE);
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.INVISIBLE);
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_2, View.INVISIBLE);
+                    }
+                } else {
+                    if (buttonSpeakFlag == this.FLAG_MEDIUM_WIDGET) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.VISIBLE);
+                        this.mRemoteViews.setOnClickPendingIntent(R.id.button_speak, BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_SPEAK, 0));
+                    } else if (buttonSpeakFlag == this.FLAG_LARGE_WIDGET_SINGLE) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.GONE);
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_hide, View.VISIBLE);
+                        this.mRemoteViews.setOnClickPendingIntent(R.id.button_speak_hide, BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_SPEAK, 0));
+                    } else if (buttonSpeakFlag == this.FLAG_LARGE_WIDGET) {
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_hide, View.GONE);
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak, View.VISIBLE);
+                        this.mRemoteViews.setOnClickPendingIntent(R.id.button_speak, BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_SPEAK, 0));
+                        this.mRemoteViews.setViewVisibility(R.id.button_speak_2, View.VISIBLE);
+                        this.mRemoteViews.setOnClickPendingIntent(R.id.button_speak_2, BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_SPEAK, 1));
+                    }
+
+                    if (speechRecognizerManager.isHasError()) {
+                        speechRecognizerManager.setErrorVisibility(View.VISIBLE);
+                        speechRecognizerManager.setHasError(false);
+
+                        AlarmManager alarmManager = (AlarmManager) this.mContext.getSystemService(Context.ALARM_SERVICE);
+                        final PendingIntent pendingIntent = BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_CLOSE_RECOGNIZER_ERROR);
+                        alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + SpeechRecognizerManager.SPEECH_RECOGNIZER_ERROR_DISPLAY_TIME, pendingIntent);
+                    }
+                }
+                this.mRemoteViews.setTextViewText(R.id.recognizer_error, this.getErrorText(speechRecognizerManager.getError()));
+                this.mRemoteViews.setViewVisibility(R.id.recognizer_error, speechRecognizerManager.getErrorVisibility());
+            }
+        }
+
+        private void buildRightButton() {
+            int count = this.mMessages.sumUnreadMessagesCount() + 1 - this.mDisplayMessagesCount;
+            if (count > 1) {
+                this.mRemoteViews.setViewVisibility(R.id.right_button_paperplan_image, View.VISIBLE);
+                this.mRemoteViews.setViewVisibility(R.id.right_button_list_image, View.GONE);
+                this.mRemoteViews.setViewVisibility(R.id.right_button_count, View.VISIBLE);
+                this.mRemoteViews.setTextViewText(R.id.right_button_count, String.valueOf(count - 1));
+            } else {
+                this.mRemoteViews.setViewVisibility(R.id.right_button_paperplan_image, View.VISIBLE);
+                this.mRemoteViews.setViewVisibility(R.id.right_button_list_image, View.VISIBLE);
+            }
+        }
+
+        private RemoteViews buildEmptyMessageView() {
+            this.mRemoteViews.setViewVisibility(R.id.right_button_paperplan_image, View.VISIBLE);
+            this.mRemoteViews.setViewVisibility(R.id.right_button_list_image, View.VISIBLE);
+
+            this.mRemoteViews.setTextViewText(R.id.sms_missed, this.mContext.getString(R.string.NoItems));
+
+            this.mRemoteViews.setOnClickPendingIntent(R.id.right_button, BSTelegramWidgetMedium.this.getMessagesActivity(this.mContext));
+            this.mRemoteViews.setOnClickPendingIntent(R.id.sms_missed_container, BSTelegramWidgetMedium.this.getMessagesActivity(this.mContext));
+
+            if (this.mWidgetSize == BackscreenLauncherConstants.WIDGET_SIZE_MEDIUM) {
+                this.mRemoteViews.setViewVisibility(R.id.time, View.GONE);
+                this.mRemoteViews.setViewVisibility(R.id.time_image, View.GONE);
+            } else {
+                this.mRemoteViews.setViewVisibility(R.id.time, View.GONE);
+                this.mRemoteViews.setViewVisibility(R.id.time_image, View.GONE);
+                this.mRemoteViews.setViewVisibility(R.id.extra_time_image, View.GONE);
+                this.mRemoteViews.setViewVisibility(R.id.extra_time, View.GONE);
+            }
+
+            return this.mRemoteViews;
+        }
+
+        private RemoteViews buildOfflineMessageView() {
+            ModernWidgetFooterTemplate builder = new ModernWidgetFooterTemplate();
+
+            this.mRemoteViews.setTextViewText(R.id.sms_missed, this.mContext.getString(R.string.StartMessaging));
+            builder.showTime(false);
+            builder.setText(this.mContext.getString(R.string.StartMessagingWidget));
+            builder.setTime(0);
+            builder.showRightButton(R.drawable.counter_paperplan, R.drawable.counter_list, getStartActivity(this.mContext));
+            builder.setMaxViewActivity(getStartActivity(this.mContext));
+
+
+            builder.setContentView(this.mRemoteViews);
+            return builder.apply(this.mContext);
+        }
+
+        private RemoteViews buildDemoMessageView() {
+            ModernWidgetFooterTemplate builder = new ModernWidgetFooterTemplate();
+
+            builder.showTime(true);
+            builder.showRightButton(R.drawable.counter_paperplan, R.drawable.counter_list, getMessagesActivity(this.mContext));
+            builder.setMaxViewActivity(getMessagesActivity(this.mContext));
+            builder.setTime(0);
+            this.mRemoteViews.setTextViewText(R.id.sms_missed, this.mContext.getString(R.string.demo_message_from) + ": " + mContext.getString(R.string.demo_message_text));
+
+            builder.setContentView(this.mRemoteViews);
+            return builder.apply(this.mContext);
+        }
+
+        public String getFormattedTimeAgoString(Context context, long eventTime, boolean addToday) {
+            long difference = Math.abs((System.currentTimeMillis() - eventTime));
+            Context appContext = this.mContext.getApplicationContext();
+            Calendar calendar = Calendar.getInstance();
+            calendar.setTimeInMillis(System.currentTimeMillis());
+            calendar.set(calendar.get(Calendar.YEAR), Calendar.JANUARY, 1, 0, 0, 0);
+            long timeTillEndOfYear = System.currentTimeMillis() - calendar.getTimeInMillis();
+            if (difference < 24f * 60f * 60f * 1000f) {
+                SimpleDateFormat simpleDateFormat;
+                if (DateFormat.is24HourFormat(context)) {
+                    simpleDateFormat = (SimpleDateFormat) DateFormat.getTimeFormat(context);
+                } else {
+                    simpleDateFormat = (SimpleDateFormat) java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT, Locale.US);
+                }
+                return addToday ?
+                        appContext.getString(R.string.WidgetToday, simpleDateFormat.format(new Date(eventTime))) :
+                        simpleDateFormat.format(new Date(eventTime));
+            } else if (difference < 30f * 24f * 60f * 60f * 1000f) {
+                //TODO:
+                int day = Math.round(difference / 1000f / 60f / 60f / 24f);
+                switch (day) {
+                    case 2:
+                        return appContext.getString(R.string.WidgetYesterday);
+                    default:
+                        return appContext.getString(R.string.WidgetDayAgo, String.valueOf(day));
+                }
+            } else if (difference < timeTillEndOfYear) {
+                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM");
+                return simpleDateFormat.format(new Date(eventTime));
+            } else {
+                return DateFormat.getDateFormat(context).format(new Date(eventTime));
+            }
+        }
+
+        private String getChatType(long dialogId) {
+            //TODO
+            Context appContext = this.mContext.getApplicationContext();
+            String chatType = appContext.getString(R.string.ChatTypePersonal);
+
+            int chatId = 0;
+            int userId = 0;
+            int encId = 0;
+
+            int lower_part = (int) dialogId;
+            int high_id = (int) (dialogId >> 32);
+            if (lower_part != 0) {
+                if (high_id == 1) {
+                    chatId = lower_part;
+                } else {
+                    if (lower_part > 0) {
+                        userId = lower_part;
+                    } else if (lower_part < 0) {
+                        chatId = -lower_part;
+                    }
+                }
+            } else {
+                encId = high_id;
+            }
+            if (chatId != 0) {
+                if (chatId > 0) {
+                    chatType = appContext.getString(R.string.ChatTypeGroup);
+                }
+            } else if (userId != 0) {
+
+            } else if (encId != 0) {
+                chatType = appContext.getString(R.string.ChatTypeSecret);
+            }
+            return chatType;
+        }
+
+        private String getErrorText(int errorCode) {
+            String message;
+            Context appContext = this.mContext.getApplicationContext();
+            switch (errorCode) {
+                case SpeechRecognizer.ERROR_AUDIO:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorAudio);
+                    break;
+                case SpeechRecognizer.ERROR_CLIENT:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorClient);
+                    break;
+                case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorInsufficientPermissions);
+                    break;
+                case SpeechRecognizer.ERROR_NETWORK:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorNetwork);
+                    break;
+                case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorNetworkTimeout);
+                    break;
+                case SpeechRecognizer.ERROR_NO_MATCH:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorNoMatch);
+                    break;
+                case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorRecognizerBusy);
+                    break;
+                case SpeechRecognizer.ERROR_SERVER:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorServer);
+                    break;
+                case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
+                    message = appContext.getString(R.string.SpeechRecognizerErrorSpeechTimeout);
+                    break;
+                default:
+                    message = appContext.getString(R.string.SpeechRecognizerError);
+                    break;
+            }
+            return message;
+        }
+    }
+
+    private class SpeechRecognizerListener implements RecognitionListener {
+        public static final String LOG_TAG = "RecognizerListener";
+
+        private PendingIntent mStopListeningAction;
+        private Context mContext;
+        private AlarmManager mAlarmManager;
+
+        public SpeechRecognizerListener(Context context) {
+            this.mContext = context;
+            this.mStopListeningAction = BSTelegramWidgetMedium.this.getPendingSelfIntent(this.mContext, SpeechRecognizerManager.ACTION_LISTENING_TIMEOUT_END);
+            this.mAlarmManager = (AlarmManager) this.mContext.getSystemService(Context.ALARM_SERVICE);
+        }
+
+        @Override
+        public void onBeginningOfSpeech() {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onBeginningOfSpeech");
+        }
+
+        @Override
+        public void onBufferReceived(byte[] buffer) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onBufferReceived: " + buffer);
+        }
+
+        @Override
+        public void onEndOfSpeech() {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onEndOfSpeech");
+            SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(this.mContext);
+            speechRecognizerManager.setListening(false);
+            BSTelegramWidgetMedium.this.drawWidgets(this.mContext);
+        }
+
+        @Override
+        public void onError(int errorCode) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onError: " + errorCode);
+
+            this.mAlarmManager.cancel(this.mStopListeningAction);
+
+            SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(this.mContext);
+            speechRecognizerManager.setError(errorCode);
+            speechRecognizerManager.setHasError(true);
+            speechRecognizerManager.setListening(false);
+
+            BSTelegramWidgetMedium.this.drawWidgets(this.mContext);
+        }
+
+        @Override
+        public void onEvent(int arg0, Bundle arg1) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onEvent");
+        }
+
+        @Override
+        public void onPartialResults(Bundle arg0) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onPartialResults");
+        }
+
+        @Override
+        public void onReadyForSpeech(Bundle arg0) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onReadyForSpeech");
+
+            this.mAlarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + SpeechRecognizerManager.LISTENING_TIMEOUT, this.mStopListeningAction);
+        }
+
+        @Override
+        public void onResults(Bundle results) {
+            ArrayList<String> matches = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onResults: matches:" + matches);
+
+            this.mAlarmManager.cancel(this.mStopListeningAction);
+
+            SpeechRecognizerManager speechRecognizerManager = SpeechRecognizerManager.getInstance(this.mContext);
+            speechRecognizerManager.setResult(matches.get(0));
+            speechRecognizerManager.setListening(false);
+
+            PendingIntent pendingIntent = BSTelegramWidgetMedium.this.getChatActivity(this.mContext, speechRecognizerManager.getMessageIndex());
+
+            try {
+                pendingIntent.send();
+            } catch (PendingIntent.CanceledException e) {
+                Log.e(LOG_TAG, e.getMessage());
+            }
+        }
+
+        @Override
+        public void onRmsChanged(float rmsdB) {
+            Log.d(SpeechRecognizerListener.LOG_TAG, "onRmsChanged: " + rmsdB);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMessages.java b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMessages.java
new file mode 100644
index 000000000..803959f8f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/widget/BSTelegramWidgetMessages.java
@@ -0,0 +1,161 @@
+package org.telegram.bsui.widget;
+
+import android.content.Context;
+import android.util.Log;
+
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.TLRPC;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Vector;
+
+/**
+ * Created by W on 3/4/2015.
+ */
+public class BSTelegramWidgetMessages {
+    private static final String LOG_TAG = "BSTGWidgetMessages";
+
+    private static BSTelegramWidgetMessages mInstance;
+    private Context mContext;
+
+    private MessageObject[] mCurrentMessages;
+    private int[] mMessagesCount;
+    private String[] mMessagesText;
+    private String[] mMessagesUser;
+    private long[] mMessagesTime;
+
+    private Vector<MessageObject> mAllMessages;
+    private HashMap<Long, Integer> mUnreadMessagesCount;
+
+    private boolean mIsDialogsLoaded;
+
+    public static BSTelegramWidgetMessages getInstance(Context context) {
+        if (BSTelegramWidgetMessages.mInstance == null) {
+            BSTelegramWidgetMessages.mInstance = new BSTelegramWidgetMessages(context);
+        }
+
+        return BSTelegramWidgetMessages.mInstance;
+    }
+
+    private BSTelegramWidgetMessages(Context context) {
+        Log.d(LOG_TAG, ".ctor");
+        this.mContext = context;
+        this.mAllMessages = new Vector<>();
+        this.mUnreadMessagesCount = new HashMap<>();
+        this.mIsDialogsLoaded = false;
+    }
+
+    public long getMessageTime(int messageIndex) {
+        return this.mMessagesTime[messageIndex];
+    }
+
+    public String getMessageText(int messageIndex) {
+        return this.mMessagesText[messageIndex];
+    }
+
+    public int getMessageCount(int messageIndex) {
+        return this.mMessagesCount[messageIndex];
+    }
+
+    public MessageObject getCurrentMessage(int messageIndex) {
+        return this.mCurrentMessages[messageIndex];
+    }
+
+    public String getMessagesUser(int messageIndex) {
+        return this.mMessagesUser[messageIndex];
+    }
+
+    public boolean isDialogsLoaded() {
+        return this.mIsDialogsLoaded;
+    }
+
+    public void setDialogsLoaded(boolean isDialogsLoaded) {
+        this.mIsDialogsLoaded = isDialogsLoaded;
+    }
+
+    public Integer getUnreadMessagesCount(Long dialogId) {
+        return this.mUnreadMessagesCount.get(dialogId);
+    }
+
+    public void clear() {
+        this.mUnreadMessagesCount.clear();
+        this.mAllMessages.clear();
+    }
+
+    public Vector<MessageObject> getAllMessages() {
+        return mAllMessages;
+    }
+
+    public int updateMessages(int maxCount) {
+        int count = Math.min(this.mAllMessages.size(), maxCount);
+
+        this.mCurrentMessages = new MessageObject[count];
+        this.mMessagesCount = new int[count];
+        this.mMessagesText = new String[count];
+        this.mMessagesTime = new long[count];
+        this.mMessagesUser = new String[count];
+        String temp;
+        String userName;
+        MessagesController messagesController = MessagesController.getInstance();
+        TLRPC.User user;
+
+        for (int i = 0; i < count; i++) {
+            this.mCurrentMessages[i] = this.mAllMessages.get(this.mAllMessages.size() - 1 - i);
+            this.mMessagesCount[i] = count == 1 ?
+                    this.sumUnreadMessagesCount() :
+                    this.mUnreadMessagesCount.get(this.mCurrentMessages[i].getDialogId());
+            user = messagesController.getUser(this.mCurrentMessages[i].messageOwner.from_id);
+
+            userName = "";
+            if (user.first_name != null) {
+                userName += user.first_name + " " + user.last_name;
+            } else {
+                userName += user.phone;
+            }
+            this.mMessagesUser[i] = userName;
+            temp = LocaleController.formatStringSimple("<b>%s:</b> %s", userName, this.mCurrentMessages[i].messageText);
+            this.mMessagesText[i] = temp;
+            this.mMessagesTime[i] = (long) this.mCurrentMessages[i].messageOwner.date * 1000;
+        }
+
+        Log.d(LOG_TAG, "all " + this.mAllMessages.size());
+        Log.d(LOG_TAG, "current " + this.mCurrentMessages.length);
+
+        return count;
+    }
+
+    public int sumUnreadMessagesCount() {
+        int sum = 0;
+        for (int value : this.mUnreadMessagesCount.values()) {
+            sum += value;
+        }
+        return sum;
+    }
+
+    public void reloadDialogs() {
+        this.mAllMessages = new Vector<>();
+        this.mUnreadMessagesCount = new HashMap<>();
+        //mCount = 0;
+        for (TLRPC.TL_dialog dialog : MessagesController.getInstance().dialogs) {
+            if (dialog.unread_count == 0) {
+                continue;
+            }
+            MessageObject message = MessagesController.getInstance().dialogMessage.get(dialog.top_message);
+            if (!message.isFromMe()) {
+                this.mAllMessages.add(message);
+                this.mUnreadMessagesCount.put(dialog.id, dialog.unread_count);
+                Collections.reverse(this.mAllMessages);
+            }
+        }
+    }
+
+    public void loadDialogs() {
+        if (!this.mIsDialogsLoaded) {
+            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
+            this.mIsDialogsLoaded = true;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/bsui/widget/SpeechRecognizerManager.java b/TMessagesProj/src/main/java/org/telegram/bsui/widget/SpeechRecognizerManager.java
new file mode 100644
index 000000000..5a3ed2d76
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/bsui/widget/SpeechRecognizerManager.java
@@ -0,0 +1,180 @@
+package org.telegram.bsui.widget;
+
+import android.content.Context;
+import android.content.Intent;
+import android.speech.RecognizerIntent;
+import android.speech.SpeechRecognizer;
+import android.util.Log;
+import android.view.View;
+
+/**
+ * Created by W on 3/5/2015.
+ */
+public
+class SpeechRecognizerManager
+{
+    private static final String LOG_TAG = "SpeechRecognizerManager";
+
+    public static final String EXTRA_SPEECH_RECOGNIZER_RESULT       = "speech_recognizer_result";
+    public static final String ACTION_SPEAK                         = "com.yotadevices.yotaphone2.telegram.bsui.widget.action.SPEAK";
+    public static final String ACTION_CLOSE_RECOGNIZER_ERROR        = "com.yotadevices.yotaphone2.telegram.bsui.widget.action.CLOSE_RECOGNIZER_ERROR";
+    public static final String ACTION_LISTENING_TIMEOUT_END         = "com.yotadevices.yotaphone2.telegram.bsui.widget.action.LISTENING_TIMEOUT_END";
+    public static final int    SPEECH_RECOGNIZER_ERROR_DISPLAY_TIME = 3 * 1000;
+    public static final int    LISTENING_TIMEOUT                    = 7 * 1000;
+
+    private static SpeechRecognizerManager mInstance;
+
+    private SpeechRecognizer mSpeechRecognizer;
+    private Intent           mIntent;
+    private boolean          mIsListening;
+    private boolean          mHasError;
+    private int              mErrorVisibility;
+    private int              mError;
+    private String           mResult;
+    private int              mMessageIndex;
+
+    public static
+    SpeechRecognizerManager getInstance(Context context)
+    {
+        if (SpeechRecognizerManager.mInstance == null)
+        {
+            SpeechRecognizerManager.mInstance = new SpeechRecognizerManager(context);
+        }
+        return SpeechRecognizerManager.mInstance;
+    }
+
+    private static
+    SpeechRecognizer createSpeechRecognizer(Context context)
+    {
+        Log.d(LOG_TAG, "CreateSpeechRecognizer");
+        SpeechRecognizer speechRecognizer = SpeechRecognizer.createSpeechRecognizer(context.getApplicationContext());
+        return speechRecognizer;
+    }
+
+    private static
+    Intent createRecognizerIntent(Context context)
+    {
+        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
+        //            BSTelegramWidgetMedium.mIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE,
+        //                                             Locale.getDefault());
+        intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, context.getPackageName());
+        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
+                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
+        intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1);
+        //            BSTelegramWidgetMedium.mIntent.putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS,
+        //                                                                    5 * 1000);
+        //            BSTelegramWidgetMedium.mIntent.putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,
+        //                                                                    4 * 1000);
+        intent.putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,
+                        2 * 1000);
+
+        return intent;
+    }
+
+    public static
+    void destroy()
+    {
+        if (SpeechRecognizerManager.mInstance != null)
+        {
+            Log.d(LOG_TAG, "Destroy");
+            SpeechRecognizerManager.mInstance.mSpeechRecognizer.destroy();
+            SpeechRecognizerManager.mInstance = null;
+        }
+    }
+
+    private
+    SpeechRecognizerManager(Context context)
+    {
+        this.mSpeechRecognizer = SpeechRecognizerManager.createSpeechRecognizer(context);
+        this.mIntent = SpeechRecognizerManager.createRecognizerIntent(context);
+        this.mIsListening = false;
+        this.mHasError = false;
+        this.mErrorVisibility = View.GONE;
+        this.mError = -1;
+        this.mResult = null;
+    }
+
+    public
+    String getResult()
+    {
+        return this.mResult;
+    }
+
+    public
+    void setResult(String result)
+    {
+        this.mResult = result;
+    }
+
+    public
+    boolean isListening()
+    {
+        return this.mIsListening;
+    }
+
+    public
+    void setListening(boolean isListening)
+    {
+        this.mIsListening = isListening;
+    }
+
+    public
+    SpeechRecognizer getSpeechRecognizer()
+    {
+        return this.mSpeechRecognizer;
+    }
+
+    public
+    Intent getIntent()
+    {
+        return this.mIntent;
+    }
+
+    public
+    int getErrorVisibility()
+    {
+        return this.mErrorVisibility;
+    }
+
+    public
+    void setErrorVisibility(int errorVisibility)
+    {
+        this.mErrorVisibility = errorVisibility;
+    }
+
+    public
+    boolean isHasError()
+    {
+        return this.mHasError;
+    }
+
+    public
+    void setHasError(boolean hasError)
+    {
+        this.mHasError = hasError;
+    }
+
+    public
+    int getError()
+    {
+        return this.mError;
+    }
+
+    public
+    void setError(int error)
+    {
+        this.mError = error;
+    }
+
+    public
+    int getMessageIndex()
+    {
+        return this.mMessageIndex;
+    }
+
+    public
+    void setMessageIndex(int messageIndex)
+    {
+        this.mMessageIndex = messageIndex;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index d2b91b67a..c9518c871 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -10,10 +10,10 @@
 
 public class BuildVars {
     public static boolean DEBUG_VERSION = false;
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String GCM_SENDER_ID = "760348033672";
+    public static int APP_ID = 11672; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "93d6107f3b090ec90b322ac31eda1f6d"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "93d6107f3b090ec90b322ac31eda1f6d";
+    public static String GCM_SENDER_ID = "AIzaSyBZ0aqC_RFFjche6LEG0aHyYfoM00T5Q3I";
     public static String SEND_LOGS_EMAIL = "email@gmail.com";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index 966505486..25d2ead81 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -40,6 +40,21 @@
 
 public class ActionBarMenuItem extends FrameLayoutFixed {
 
+    public void showSubMenu() {
+        if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
+            showMenuRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (getParent() != null) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    toggleSubMenu();
+                }
+            };
+            AndroidUtilities.runOnUIThread(showMenuRunnable, 200);
+        }
+    }
+
     public static class ActionBarMenuItemSearchListener {
         public void onSearchExpand() { }
         public void onSearchCollapse() { }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 2424062cd..0120a641b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -46,10 +46,10 @@
 
 public class DialogsSearchAdapter extends BaseContactsSearchAdapter {
 
-    private Context mContext;
+    protected Context mContext;
     private Timer searchTimer;
-    private ArrayList<TLObject> searchResult = new ArrayList<>();
-    private ArrayList<CharSequence> searchResultNames = new ArrayList<>();
+    protected ArrayList<TLObject> searchResult = new ArrayList<>();
+    protected ArrayList<CharSequence> searchResultNames = new ArrayList<>();
     private ArrayList<MessageObject> searchResultMessages = new ArrayList<>();
     private String lastSearchText;
     private long reqId = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
index c0170b66f..0f408b877 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
@@ -15,6 +15,8 @@
 import android.view.View;
 import android.view.ViewConfiguration;
 
+import org.telegram.android.AndroidUtilities;
+
 public class BaseCell extends View {
 
     private final class CheckForTap implements Runnable {
@@ -83,4 +85,21 @@ protected void cancelCheckLongPress() {
     protected void onLongPress() {
 
     }
+
+    protected int dp(float value) {
+        return AndroidUtilities.dp(value);
+    }
+
+
+    protected int getDisplayY() {
+        return AndroidUtilities.displaySize.y;
+    }
+
+    protected int getDisplayX() {
+        return AndroidUtilities.displaySize.x;
+    }
+
+    protected float getDensity() {
+        return AndroidUtilities.density;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index f07555cf2..56e003cb0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -63,8 +63,27 @@
 
     private ChatActionCellDelegate delegate;
 
+    protected Drawable getBackgroundBlack() {
+        return backgroundBlack;
+    }
+
+    protected Drawable getBackgroundBlue() {
+        return backgroundBlue;
+    }
+
+    protected TextPaint getTextPaint() {
+        return textPaint;
+    }
+
     public ChatActionCell(Context context) {
         super(context);
+        initBackground();
+        imageReceiver = new ImageReceiver(this);
+        imageReceiver.setRoundRadius(dp(32));
+        avatarDrawable = new AvatarDrawable();
+    }
+
+    protected void initBackground() {
         if (backgroundBlack == null) {
             backgroundBlack = getResources().getDrawable(R.drawable.system_black);
             backgroundBlue = getResources().getDrawable(R.drawable.system_blue);
@@ -72,11 +91,8 @@ public ChatActionCell(Context context) {
             textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             textPaint.setColor(0xffffffff);
             textPaint.linkColor = 0xffffffff;
+            textPaint.setTextSize(dp(MessagesController.getInstance().fontSize));
         }
-        imageReceiver = new ImageReceiver(this);
-        imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
-        avatarDrawable = new AvatarDrawable();
-        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
     }
 
     public void setDelegate(ChatActionCellDelegate delegate) {
@@ -105,7 +121,7 @@ public void setMessageObject(MessageObject messageObject) {
             if (currentMessageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                 imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", avatarDrawable, false);
             } else {
-                TLRPC.PhotoSize photo = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.photoThumbs, AndroidUtilities.dp(64));
+                TLRPC.PhotoSize photo = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.photoThumbs, dp(64));
                 if (photo != null) {
                     imageReceiver.setImage(photo.location, "50_50", avatarDrawable, false);
                 } else {
@@ -221,14 +237,14 @@ public boolean onTouchEvent(MotionEvent event) {
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         if (currentMessageObject == null) {
-            setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), textHeight + AndroidUtilities.dp(14));
+            setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), textHeight + dp(14));
             return;
         }
-        int width = Math.max(AndroidUtilities.dp(30), MeasureSpec.getSize(widthMeasureSpec));
+        int width = Math.max(dp(30), MeasureSpec.getSize(widthMeasureSpec));
         if (width != previousWidth) {
             previousWidth = width;
 
-            textLayout = new StaticLayout(currentMessageObject.messageText, textPaint, width - AndroidUtilities.dp(30), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+            textLayout = new StaticLayout(currentMessageObject.messageText, getTextPaint(), width - dp(30), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
             textHeight = 0;
             textWidth = 0;
             try {
@@ -250,14 +266,14 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             }
 
             textX = (width - textWidth) / 2;
-            textY = AndroidUtilities.dp(7);
+            textY = dp(7);
             textXLeft = (width - textLayout.getWidth()) / 2;
 
             if (currentMessageObject.type == 11) {
-                imageReceiver.setImageCoords((width - AndroidUtilities.dp(64)) / 2, textHeight + AndroidUtilities.dp(15), AndroidUtilities.dp(64), AndroidUtilities.dp(64));
+                imageReceiver.setImageCoords((width - dp(64)) / 2, textHeight + dp(15), dp(64), dp(64));
             }
         }
-        setMeasuredDimension(width, textHeight + AndroidUtilities.dp(14 + (currentMessageObject.type == 11 ? 70 : 0)));
+        setMeasuredDimension(width, textHeight + dp(14 + (currentMessageObject.type == 11 ? 70 : 0)));
     }
 
     @Override
@@ -268,11 +284,11 @@ protected void onDraw(Canvas canvas) {
 
         Drawable backgroundDrawable = null;
         if (useBlackBackground) {
-            backgroundDrawable = backgroundBlack;
+            backgroundDrawable = getBackgroundBlack();
         } else {
-            backgroundDrawable = backgroundBlue;
+            backgroundDrawable = getBackgroundBlue();
         }
-        backgroundDrawable.setBounds(textX - AndroidUtilities.dp(5), AndroidUtilities.dp(5), textX + textWidth + AndroidUtilities.dp(5), AndroidUtilities.dp(9) + textHeight);
+        backgroundDrawable.setBounds(textX - dp(5), dp(5), textX + textWidth + dp(5), dp(9) + textHeight);
         backgroundDrawable.draw(canvas);
 
         if (currentMessageObject.type == 11) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index 92b5c0dec..d76eaf5c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -61,12 +61,16 @@
     public TLRPC.User audioUser;
     private TLRPC.FileLocation currentPhoto;
 
+    protected TextPaint getTimePaint(){
+        return timePaint;
+    }
+
     public ChatAudioCell(Context context) {
         super(context);
         TAG = MediaController.getInstance().generateObserverTag();
 
         avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(25));
+        avatarImage.setRoundRadius(dp(25));
         seekBar = new SeekBar(context);
         seekBar.delegate = this;
         progressView = new ProgressView();
@@ -92,7 +96,7 @@ public ChatAudioCell(Context context) {
             statesDrawable[7][1] = getResources().getDrawable(R.drawable.audiocancel2_pressed);
 
             timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(12));
+            timePaint.setTextSize(dp(12));
         }
     }
 
@@ -117,7 +121,7 @@ public boolean onTouchEvent(MotionEvent event) {
             }
             invalidate();
         } else {
-            int side = AndroidUtilities.dp(36);
+            int side = dp(36);
             if (event.getAction() == MotionEvent.ACTION_DOWN) {
                 if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
                     buttonPressed = true;
@@ -206,8 +210,8 @@ public void updateProgress() {
         }
         String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
         if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            int timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            int timeWidth = (int)Math.ceil(getTimePaint().measureText(timeString));
+            timeLayout = new StaticLayout(timeString, getTimePaint(), timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         }
         invalidate();
     }
@@ -291,11 +295,11 @@ public void onSeekBarDrag(float progress) {
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(68));
+        setMeasuredDimension(width, dp(68));
         if (isChat) {
-            backgroundWidth = Math.min(width - AndroidUtilities.dp(102), AndroidUtilities.dp(300));
+            backgroundWidth = Math.min(width - dp(102), dp(300));
         } else {
-            backgroundWidth = Math.min(width - AndroidUtilities.dp(50), AndroidUtilities.dp(300));
+            backgroundWidth = Math.min(width - dp(50), dp(300));
         }
     }
 
@@ -306,39 +310,39 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int x;
 
         if (currentMessageObject.isOut()) {
-            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
-            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(97);
-            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(67);
-            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(71);
+            x = layoutWidth - backgroundWidth + dp(8);
+            seekBarX = layoutWidth - backgroundWidth + dp(97);
+            buttonX = layoutWidth - backgroundWidth + dp(67);
+            timeX = layoutWidth - backgroundWidth + dp(71);
         } else {
             if (isChat) {
-                x = AndroidUtilities.dp(69);
-                seekBarX = AndroidUtilities.dp(158);
-                buttonX = AndroidUtilities.dp(128);
-                timeX = AndroidUtilities.dp(132);
+                x = dp(69);
+                seekBarX = dp(158);
+                buttonX = dp(128);
+                timeX = dp(132);
             } else {
-                x = AndroidUtilities.dp(16);
-                seekBarX = AndroidUtilities.dp(106);
-                buttonX = AndroidUtilities.dp(76);
-                timeX = AndroidUtilities.dp(80);
+                x = dp(16);
+                seekBarX = dp(106);
+                buttonX = dp(76);
+                timeX = dp(80);
             }
         }
         int diff = 0;
         if (needAvatarImage) {
-            avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+            avatarImage.setImageCoords(x, dp(9), dp(50), dp(50));
         } else {
-            diff = AndroidUtilities.dp(56);
+            diff = dp(56);
             seekBarX -= diff;
             buttonX -= diff;
             timeX -= diff;
         }
 
-        seekBar.width = backgroundWidth - AndroidUtilities.dp(112) + diff;
-        seekBar.height = AndroidUtilities.dp(30);
-        progressView.width = backgroundWidth - AndroidUtilities.dp(136) + diff;
-        progressView.height = AndroidUtilities.dp(30);
-        seekBarY = AndroidUtilities.dp(13);
-        buttonY = AndroidUtilities.dp(10);
+        seekBar.width = backgroundWidth - dp(112) + diff;
+        seekBar.height = dp(30);
+        progressView.width = backgroundWidth - dp(136) + diff;
+        progressView.height = dp(30);
+        seekBarY = dp(13);
+        buttonY = dp(10);
 
         updateProgress();
     }
@@ -410,7 +414,7 @@ protected void onDraw(Canvas canvas) {
             canvas.translate(seekBarX, seekBarY);
             seekBar.draw(canvas);
         } else {
-            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
+            canvas.translate(seekBarX + dp(12), seekBarY);
             progressView.draw(canvas);
         }
         canvas.restore();
@@ -418,19 +422,19 @@ protected void onDraw(Canvas canvas) {
         int state = buttonState;
         if (!currentMessageObject.isOut()) {
             state += 4;
-            timePaint.setColor(0xffa1aab3);
+            getTimePaint().setColor(0xffa1aab3);
         } else {
-            timePaint.setColor(0xff70b15c);
+            getTimePaint().setColor(0xff70b15c);
         }
         Drawable buttonDrawable = statesDrawable[state][buttonPressed ? 1 : 0];
-        int side = AndroidUtilities.dp(36);
+        int side = dp(36);
         int x = (side - buttonDrawable.getIntrinsicWidth()) / 2;
         int y = (side - buttonDrawable.getIntrinsicHeight()) / 2;
         setDrawableBounds(buttonDrawable, x + buttonX, y + buttonY);
         buttonDrawable.draw(canvas);
 
         canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(45));
+        canvas.translate(timeX, dp(45));
         timeLayout.draw(canvas);
         canvas.restore();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index ec5ac969d..deede70da 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -73,6 +73,78 @@
     private static TextPaint namePaint;
     private static TextPaint forwardNamePaint;
 
+    protected TextPaint getTimePaintIn() {
+        return timePaintIn;
+    }
+
+    protected TextPaint getTimePaintOut() {
+        return timePaintOut;
+    }
+
+    protected TextPaint getTimeMediaPaint() {
+        return timeMediaPaint;
+    }
+
+    protected TextPaint getNamePaint() {
+        return namePaint;
+    }
+
+    protected TextPaint getForwardNamePaint() {
+        return forwardNamePaint;
+    }
+
+    protected Drawable getCheckDrawable() {
+        return checkDrawable;
+    }
+
+    protected Drawable getHalfCheckDrawable() {
+        return halfCheckDrawable;
+    }
+
+    protected Drawable getClockDrawable() {
+        return clockDrawable;
+    }
+
+    protected Drawable getBroadcastDrawable() {
+        return broadcastDrawable;
+    }
+
+    protected Drawable getErrorDrawable() {
+        return errorDrawable;
+    }
+
+    protected Drawable getBroadcastMediaDrawable() {
+        return broadcastMediaDrawable;
+    }
+
+    protected Drawable getClockMediaDrawable() {
+        return clockMediaDrawable;
+    }
+
+    protected Drawable getCheckMediaDrawable() {
+        return checkMediaDrawable;
+    }
+
+    protected Drawable getHalfCheckMediaDrawable() {
+        return halfCheckMediaDrawable;
+    }
+
+    protected Drawable getBackgroundDrawableOutSelected() {
+        return backgroundDrawableOutSelected;
+    }
+
+    protected Drawable getBackgroundDrawableOut() {
+        return backgroundDrawableOut;
+    }
+
+    protected Drawable getBackgroundDrawableInSelected() {
+        return backgroundDrawableInSelected;
+    }
+
+    protected Drawable getBackgroundDrawableIn() {
+        return backgroundDrawableIn;
+    }
+
     protected int backgroundWidth = 100;
 
     protected int layoutWidth;
@@ -118,6 +190,13 @@
 
     public ChatBaseCell(Context context) {
         super(context);
+        initResources();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(dp(21));
+        avatarDrawable = new AvatarDrawable();
+    }
+
+    protected void initResources() {
         if (backgroundDrawableIn == null) {
             backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in);
             backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected);
@@ -139,26 +218,23 @@ public ChatBaseCell(Context context) {
             broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
 
             timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaintIn.setTextSize(AndroidUtilities.dp(12));
+            timePaintIn.setTextSize(dp(12));
             timePaintIn.setColor(0xffa1aab3);
 
             timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaintOut.setTextSize(AndroidUtilities.dp(12));
+            timePaintOut.setTextSize(dp(12));
             timePaintOut.setColor(0xff70b15c);
 
             timeMediaPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timeMediaPaint.setTextSize(AndroidUtilities.dp(12));
+            timeMediaPaint.setTextSize(dp(12));
             timeMediaPaint.setColor(0xffffffff);
 
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
+            namePaint.setTextSize(dp(15));
 
             forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
+            forwardNamePaint.setTextSize(dp(14));
         }
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
-        avatarDrawable = new AvatarDrawable();
     }
 
     @Override
@@ -251,12 +327,12 @@ public void setMessageObject(MessageObject messageObject) {
 
         if (!media) {
             if (currentMessageObject.isOut()) {
-                currentTimePaint = timePaintOut;
+                currentTimePaint = getTimePaintOut();
             } else {
-                currentTimePaint = timePaintIn;
+                currentTimePaint = getTimePaintIn();
             }
         } else {
-            currentTimePaint = timeMediaPaint;
+            currentTimePaint = getTimePaintOut();
         }
 
         currentTimeString = LocaleController.formatterDay.format((long) (currentMessageObject.messageOwner.date) * 1000);
@@ -268,11 +344,11 @@ public void setMessageObject(MessageObject messageObject) {
             currentNameString = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
             nameWidth = getMaxNameWidth();
 
-            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), getNamePaint(), nameWidth - dp(12), TextUtils.TruncateAt.END);
+            nameLayout = new StaticLayout(nameStringFinal, getNamePaint(), nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (nameLayout.getLineCount() > 0) {
                 nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-                namesOffset += AndroidUtilities.dp(18);
+                namesOffset += dp(18);
                 nameOffsetX = nameLayout.getLineLeft(0);
             } else {
                 nameWidth = 0;
@@ -290,12 +366,12 @@ public void setMessageObject(MessageObject messageObject) {
 
                 forwardedNameWidth = getMaxNameWidth();
 
-                CharSequence str = TextUtils.ellipsize(currentForwardNameString.replace("\n", " "), forwardNamePaint, forwardedNameWidth - AndroidUtilities.dp(40), TextUtils.TruncateAt.END);
+                CharSequence str = TextUtils.ellipsize(currentForwardNameString.replace("\n", " "), getForwardNamePaint(), forwardedNameWidth - dp(40), TextUtils.TruncateAt.END);
                 str = Html.fromHtml(String.format("%s<br>%s <b>%s</b>", LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage), LocaleController.getString("From", R.string.From), str));
-                forwardedNameLayout = new StaticLayout(str, forwardNamePaint, forwardedNameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                forwardedNameLayout = new StaticLayout(str, getForwardNamePaint(), forwardedNameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 if (forwardedNameLayout.getLineCount() > 1) {
                     forwardedNameWidth = Math.max((int) Math.ceil(forwardedNameLayout.getLineWidth(0)), (int) Math.ceil(forwardedNameLayout.getLineWidth(1)));
-                    namesOffset += AndroidUtilities.dp(36);
+                    namesOffset += dp(36);
                     forwardNameOffsetX = Math.min(forwardedNameLayout.getLineLeft(0), forwardedNameLayout.getLineLeft(1));
                 } else {
                     forwardedNameWidth = 0;
@@ -319,7 +395,7 @@ public final MessageObject getMessageObject() {
     }
 
     protected int getMaxNameWidth() {
-        return backgroundWidth - AndroidUtilities.dp(8);
+        return backgroundWidth - dp(8);
     }
 
     @Override
@@ -333,7 +409,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     avatarPressed = true;
                     result = true;
                 } else if (drawForwardedName && forwardedNameLayout != null) {
-                    if (x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32)) {
+                    if (x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + dp(32)) {
                         forwardNamePressed = true;
                         result = true;
                     }
@@ -370,7 +446,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     forwardNamePressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32))) {
+                    if (!(x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + dp(32))) {
                         forwardNamePressed = false;
                     }
                 }
@@ -394,20 +470,20 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
             timeLayout = new StaticLayout(currentTimeString, currentTimePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (!media) {
                 if (!currentMessageObject.isOut()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
+                    timeX = backgroundWidth - dp(9) - timeWidth + (isChat ? dp(52) : 0);
                 } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(38.5f);
+                    timeX = layoutWidth - timeWidth - dp(38.5f);
                 }
             } else {
                 if (!currentMessageObject.isOut()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
+                    timeX = backgroundWidth - dp(4) - timeWidth + (isChat ? dp(52) : 0);
                 } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(42.0f);
+                    timeX = layoutWidth - timeWidth - dp(42.0f);
                 }
             }
 
             if (isAvatarVisible) {
-                avatarImage.setImageCoords(AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(45), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+                avatarImage.setImageCoords(dp(6), layoutHeight - dp(45), dp(42), dp(42));
             }
 
             wasLayout = true;
@@ -444,36 +520,36 @@ protected void onDraw(Canvas canvas) {
         if (currentMessageObject.isOut()) {
             if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
                 if (!media) {
-                    currentBackgroundDrawable = backgroundDrawableOutSelected;
+                    currentBackgroundDrawable = getBackgroundDrawableOutSelected();
                 } else {
                     currentBackgroundDrawable = backgroundMediaDrawableOutSelected;
                 }
             } else {
                 if (!media) {
-                    currentBackgroundDrawable = backgroundDrawableOut;
+                    currentBackgroundDrawable = getBackgroundDrawableOut();
                 } else {
                     currentBackgroundDrawable = backgroundMediaDrawableOut;
                 }
             }
-            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : dp(9)), dp(1), backgroundWidth, layoutHeight - dp(2));
         } else {
             if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
                 if (!media) {
-                    currentBackgroundDrawable = backgroundDrawableInSelected;
+                    currentBackgroundDrawable = getBackgroundDrawableInSelected();
                 } else {
                     currentBackgroundDrawable = backgroundMediaDrawableInSelected;
                 }
             } else {
                 if (!media) {
-                    currentBackgroundDrawable = backgroundDrawableIn;
+                    currentBackgroundDrawable = getBackgroundDrawableIn();
                 } else {
                     currentBackgroundDrawable = backgroundMediaDrawableIn;
                 }
             }
             if (isChat) {
-                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(52 + (!media ? 0 : 9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+                setDrawableBounds(currentBackgroundDrawable, dp(52 + (!media ? 0 : 9)), dp(1), backgroundWidth, layoutHeight - dp(2));
             } else {
-                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : dp(9)), dp(1), backgroundWidth, layoutHeight - dp(2));
             }
         }
         if (drawBackground) {
@@ -484,8 +560,8 @@ protected void onDraw(Canvas canvas) {
 
         if (drawName && nameLayout != null) {
             canvas.save();
-            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
+            canvas.translate(currentBackgroundDrawable.getBounds().left + dp(19) - nameOffsetX, dp(10));
+            getNamePaint().setColor(AvatarDrawable.getNameColorForId(currentUser.id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
@@ -493,13 +569,13 @@ protected void onDraw(Canvas canvas) {
         if (drawForwardedName && forwardedNameLayout != null) {
             canvas.save();
             if (currentMessageObject.isOut()) {
-                forwardNamePaint.setColor(0xff4a923c);
-                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
-                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
+                getForwardNamePaint().setColor(0xff4a923c);
+                forwardNameX = currentBackgroundDrawable.getBounds().left + dp(10);
+                forwardNameY = dp(10 + (drawName ? 18 : 0));
             } else {
-                forwardNamePaint.setColor(0xff006fc8);
-                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
-                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
+                getForwardNamePaint().setColor(0xff006fc8);
+                forwardNameX = currentBackgroundDrawable.getBounds().left + dp(19);
+                forwardNameY = dp(10 + (drawName ? 18 : 0));
             }
             canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
             forwardedNameLayout.draw(canvas);
@@ -508,16 +584,16 @@ protected void onDraw(Canvas canvas) {
 
         if (drawTime) {
             if (media) {
-                setDrawableBounds(mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dp(16.5f));
+                setDrawableBounds(mediaBackgroundDrawable, timeX - dp(3), layoutHeight - dp(27.5f), timeWidth + dp(6 + (currentMessageObject.isOut() ? 20 : 0)), dp(16.5f));
                 mediaBackgroundDrawable.draw(canvas);
 
                 canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
+                canvas.translate(timeX, layoutHeight - dp(12.0f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
             } else {
                 canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
+                canvas.translate(timeX, layoutHeight - dp(6.5f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
             }
@@ -553,58 +629,58 @@ protected void onDraw(Canvas canvas) {
 
                 if (drawClock) {
                     if (!media) {
-                        setDrawableBounds(clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - clockDrawable.getIntrinsicHeight());
-                        clockDrawable.draw(canvas);
+                        setDrawableBounds(getClockDrawable(), layoutWidth - dp(18.5f) - getClockDrawable().getIntrinsicWidth(), layoutHeight - dp(8.5f) - getClockDrawable().getIntrinsicHeight());
+                        getClockDrawable().draw(canvas);
                     } else {
-                        setDrawableBounds(clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - clockMediaDrawable.getIntrinsicHeight());
-                        clockMediaDrawable.draw(canvas);
+                        setDrawableBounds(getClockMediaDrawable(), layoutWidth - dp(22.0f) - getClockMediaDrawable().getIntrinsicWidth(), layoutHeight - dp(13.0f) - getClockMediaDrawable().getIntrinsicHeight());
+                        getClockMediaDrawable().draw(canvas);
                     }
                 }
                 if (isBroadcast) {
                     if (drawCheck1 || drawCheck2) {
                         if (!media) {
-                            setDrawableBounds(broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - broadcastDrawable.getIntrinsicHeight());
-                            broadcastDrawable.draw(canvas);
+                            setDrawableBounds(getBroadcastDrawable(), layoutWidth - dp(20.5f) - getBroadcastDrawable().getIntrinsicWidth(), layoutHeight - dp(8.0f) - getBroadcastDrawable().getIntrinsicHeight());
+                            getBroadcastDrawable().draw(canvas);
                         } else {
-                            setDrawableBounds(broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - broadcastMediaDrawable.getIntrinsicHeight());
-                            broadcastMediaDrawable.draw(canvas);
+                            setDrawableBounds(getBroadcastMediaDrawable(), layoutWidth - dp(24.0f) - getBroadcastMediaDrawable().getIntrinsicWidth(), layoutHeight - dp(13.0f) - getBroadcastMediaDrawable().getIntrinsicHeight());
+                            getBroadcastMediaDrawable().draw(canvas);
                         }
                     }
                 } else {
                     if (drawCheck2) {
                         if (!media) {
                             if (drawCheck1) {
-                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(getCheckDrawable(), layoutWidth - dp(22.5f) - getCheckDrawable().getIntrinsicWidth(), layoutHeight - dp(8.5f) - getCheckDrawable().getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(getCheckDrawable(), layoutWidth - dp(18.5f) - getCheckDrawable().getIntrinsicWidth(), layoutHeight - dp(8.5f) - getCheckDrawable().getIntrinsicHeight());
                             }
-                            checkDrawable.draw(canvas);
+                            getCheckDrawable().draw(canvas);
                         } else {
                             if (drawCheck1) {
-                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(getCheckMediaDrawable(), layoutWidth - dp(26.0f) - getCheckMediaDrawable().getIntrinsicWidth(), layoutHeight - dp(13.0f) - getCheckMediaDrawable().getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(getCheckMediaDrawable(), layoutWidth - dp(22.0f) - getCheckMediaDrawable().getIntrinsicWidth(), layoutHeight - dp(13.0f) - getCheckMediaDrawable().getIntrinsicHeight());
                             }
-                            checkMediaDrawable.draw(canvas);
+                            getCheckMediaDrawable().draw(canvas);
                         }
                     }
                     if (drawCheck1) {
                         if (!media) {
-                            setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - halfCheckDrawable.getIntrinsicHeight());
-                            halfCheckDrawable.draw(canvas);
+                            setDrawableBounds(getHalfCheckDrawable(), layoutWidth - dp(18) - getHalfCheckDrawable().getIntrinsicWidth(), layoutHeight - dp(8.5f) - getHalfCheckDrawable().getIntrinsicHeight());
+                            getHalfCheckDrawable().draw(canvas);
                         } else {
-                            setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
-                            halfCheckMediaDrawable.draw(canvas);
+                            setDrawableBounds(getHalfCheckMediaDrawable(), layoutWidth - dp(20.5f) - getHalfCheckMediaDrawable().getIntrinsicWidth(), layoutHeight - dp(13.0f) - getHalfCheckMediaDrawable().getIntrinsicHeight());
+                            getHalfCheckMediaDrawable().draw(canvas);
                         }
                     }
                 }
                 if (drawError) {
                     if (!media) {
-                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(18) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(6.5f) - errorDrawable.getIntrinsicHeight());
-                        errorDrawable.draw(canvas);
+                        setDrawableBounds(getErrorDrawable(), layoutWidth - dp(18) - getErrorDrawable().getIntrinsicWidth(), layoutHeight - dp(6.5f) - getErrorDrawable().getIntrinsicHeight());
+                        getErrorDrawable().draw(canvas);
                     } else {
-                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - errorDrawable.getIntrinsicHeight());
-                        errorDrawable.draw(canvas);
+                        setDrawableBounds(getErrorDrawable(), layoutWidth - dp(20.5f) - getErrorDrawable().getIntrinsicWidth(), layoutHeight - dp(12.5f) - getErrorDrawable().getIntrinsicHeight());
+                        getErrorDrawable().draw(canvas);
                     }
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 13edf97c4..ef00c3cd6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -58,22 +58,40 @@
 
     private ChatContactCellDelegate contactDelegate = null;
 
+    protected TextPaint getNamePaint() {
+        return namePaint;
+    }
+    protected TextPaint getPhonePaint() {
+        return phonePaint;
+    }
+    protected Drawable getAddContactDrawableIn() {
+        return addContactDrawableIn;
+    }
+
+    protected Drawable getAddContactDrawableOut() {
+        return addContactDrawableOut;
+    }
+
     public ChatContactCell(Context context) {
         super(context);
+        initNamePaint();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(dp(21));
+        avatarDrawable = new AvatarDrawable();
+    }
+
+    protected void initNamePaint() {
         if (namePaint == null) {
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
+            namePaint.setTextSize(dp(15));
 
             phonePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            phonePaint.setTextSize(AndroidUtilities.dp(15));
+            phonePaint.setTextSize(dp(15));
             phonePaint.setColor(0xff212121);
 
             addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_blue);
             addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_green);
         }
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
-        avatarDrawable = new AvatarDrawable();
     }
 
     public void setContactDelegate(ChatContactCellDelegate delegate) {
@@ -108,12 +126,12 @@ public boolean onTouchEvent(MotionEvent event) {
         float y = event.getY();
 
         boolean result = false;
-        int side = AndroidUtilities.dp(36);
+        int side = dp(36);
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
+            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
                 avatarPressed = true;
                 result = true;
-            } else if (x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52)) {
+            } else if (x >= avatarImage.getImageX() + namesWidth + dp(52) && y >= dp(13) && x <= avatarImage.getImageX() + namesWidth + dp(92) && y <= dp(52)) {
                 buttonPressed = true;
                 result = true;
             }
@@ -140,7 +158,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     avatarPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight())) {
+                    if (!(x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight())) {
                         avatarPressed = false;
                     }
                 }
@@ -154,7 +172,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     buttonPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52))) {
+                    if (!(x >= avatarImage.getImageX() + namesWidth + dp(52) && y >= dp(13) && x <= avatarImage.getImageX() + namesWidth + dp(92) && y <= dp(52))) {
                         buttonPressed = false;
                     }
                 }
@@ -180,9 +198,9 @@ public void setMessageObject(MessageObject messageObject) {
             if (AndroidUtilities.isTablet()) {
                 maxWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
             } else {
-                maxWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                maxWidth = (int) (Math.min(getDisplayX(), getDisplayY()) * 0.7f);
             }
-            maxWidth -= AndroidUtilities.dp(58 + (drawAddButton ? 42 : 0));
+            maxWidth -= dp(58 + (drawAddButton ? 42 : 0));
 
             if (contactUser != null) {
                 if (contactUser.photo != null) {
@@ -198,10 +216,10 @@ public void setMessageObject(MessageObject messageObject) {
             avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, false);
 
             String currentNameString = ContactsController.formatName(messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
-            int nameWidth = Math.min((int) Math.ceil(namePaint.measureText(currentNameString)), maxWidth);
+            int nameWidth = Math.min((int) Math.ceil(getNamePaint().measureText(currentNameString)), maxWidth);
 
-            CharSequence stringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth, TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(stringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            CharSequence stringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), getNamePaint(), nameWidth, TextUtils.TruncateAt.END);
+            nameLayout = new StaticLayout(stringFinal, getNamePaint(), nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (nameLayout.getLineCount() > 0) {
                 nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
             } else {
@@ -217,9 +235,9 @@ public void setMessageObject(MessageObject messageObject) {
             } else {
                 phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
             }
-            int phoneWidth = Math.min((int) Math.ceil(phonePaint.measureText(phone)), maxWidth);
-            stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), phonePaint, phoneWidth, TextUtils.TruncateAt.END);
-            phoneLayout = new StaticLayout(stringFinal, phonePaint, phoneWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            int phoneWidth = Math.min((int) Math.ceil(getPhonePaint().measureText(phone)), maxWidth);
+            stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), getPhonePaint(), phoneWidth, TextUtils.TruncateAt.END);
+            phoneLayout = new StaticLayout(stringFinal, getPhonePaint(), phoneWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (phoneLayout.getLineCount() > 0) {
                 phoneWidth = (int)Math.ceil(phoneLayout.getLineWidth(0));
             } else {
@@ -227,7 +245,7 @@ public void setMessageObject(MessageObject messageObject) {
             }
 
             namesWidth = Math.max(nameWidth, phoneWidth);
-            backgroundWidth = AndroidUtilities.dp(77 + (drawAddButton ? 42 : 0)) + namesWidth;
+            backgroundWidth = dp(77 + (drawAddButton ? 42 : 0)) + namesWidth;
 
             super.setMessageObject(messageObject);
         }
@@ -235,7 +253,7 @@ public void setMessageObject(MessageObject messageObject) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(71));
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), dp(71));
     }
 
     @Override
@@ -249,15 +267,15 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int x;
 
         if (currentMessageObject.isOut()) {
-            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
+            x = layoutWidth - backgroundWidth + dp(8);
         } else {
             if (isChat) {
-                x = AndroidUtilities.dp(69);
+                x = dp(69);
             } else {
-                x = AndroidUtilities.dp(16);
+                x = dp(16);
             }
         }
-        avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+        avatarImage.setImageCoords(x, dp(9), dp(42), dp(42));
     }
 
     @Override
@@ -272,14 +290,14 @@ protected void onDraw(Canvas canvas) {
 
         if (nameLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10));
-            namePaint.setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + dp(9), dp(10));
+            getNamePaint().setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
         if (phoneLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + dp(9), dp(31));
             phoneLayout.draw(canvas);
             canvas.restore();
         }
@@ -287,11 +305,11 @@ protected void onDraw(Canvas canvas) {
         if (drawAddButton) {
             Drawable addContactDrawable;
             if (currentMessageObject.isOut()) {
-                addContactDrawable = addContactDrawableOut;
+                addContactDrawable = getAddContactDrawableOut();
             } else {
-                addContactDrawable = addContactDrawableIn;
+                addContactDrawable = getAddContactDrawableIn();
             }
-            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13));
+            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + dp(78), dp(13));
             addContactDrawable.draw(canvas);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 87825a1c6..b536bbfcd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -97,9 +97,62 @@
     private ChatMediaCellDelegate mediaDelegate = null;
     private RectF deleteProgressRect = new RectF();
 
+    protected Drawable getDocMenuOutDrawable() {
+        return docMenuOutDrawable;
+    }
+
+    protected Drawable getDocMenuInDrawable() {
+        return docMenuInDrawable;
+    }
+
+    protected Paint getDocBackPaint() {
+        return docBackPaint;
+    }
+
+    protected TextPaint getNamePaint() {
+        return namePaint;
+    }
+
+    protected TextPaint getInfoPaint() {
+        return infoPaint;
+    }
+
+    protected Drawable getPlaceholderDocInDrawable() {
+        return placeholderDocInDrawable;
+    }
+
+    protected Drawable getPlaceholderDocOutDrawable() {
+        return placeholderDocOutDrawable;
+    }
+
+    protected Drawable getVideoIconDrawable() {
+        return videoIconDrawable;
+    }
+
+    protected Drawable[] getButtonStatesDrawables() {
+        return buttonStatesDrawables;
+    }
+
+    protected Drawable[][] getButtonStatesDrawablesDoc() {
+        return buttonStatesDrawablesDoc;
+    }
+
+    public Paint getDeleteProgressPaint() {
+        return deleteProgressPaint;
+    }
+
     public ChatMediaCell(Context context) {
         super(context);
 
+        initMedia();
+
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        photoImage = new ImageReceiver(this);
+        radialProgress = new RadialProgress(this);
+    }
+
+    protected void initMedia() {
         if (placeholderDocInDrawable == null) {
             placeholderDocInDrawable = getResources().getDrawable(R.drawable.doc_blue);
             placeholderDocOutDrawable = getResources().getDrawable(R.drawable.doc_green);
@@ -122,22 +175,17 @@ public ChatMediaCell(Context context) {
             docMenuOutDrawable = getResources().getDrawable(R.drawable.doc_actions_g);
 
             infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(12));
+            infoPaint.setTextSize(dp(12));
 
             namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             namePaint.setColor(0xff212121);
-            namePaint.setTextSize(AndroidUtilities.dp(16));
+            namePaint.setTextSize(dp(16));
 
             docBackPaint = new Paint();
 
             deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             deleteProgressPaint.setColor(0xffe4e2e0);
         }
-
-        TAG = MediaController.getInstance().generateObserverTag();
-
-        photoImage = new ImageReceiver(this);
-        radialProgress = new RadialProgress(this);
     }
 
     public void clearGifImage() {
@@ -175,7 +223,7 @@ public boolean onTouchEvent(MotionEvent event) {
         float y = event.getY();
 
         boolean result = false;
-        int side = AndroidUtilities.dp(48);
+        int side = dp(48);
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             if (delegate == null || delegate.canPerformActions()) {
                 if (buttonState != -1 && x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
@@ -184,10 +232,10 @@ public boolean onTouchEvent(MotionEvent event) {
                     result = true;
                 } else {
                     if (currentMessageObject.type == 9) {
-                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
                             imagePressed = true;
                             result = true;
-                        } else if (x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                        } else if (x >= photoImage.getImageX() + backgroundWidth - dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
                             otherPressed = true;
                             result = true;
                         }
@@ -236,7 +284,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     invalidate();
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
                     if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
                             imagePressed = false;
                             invalidate();
                         }
@@ -258,7 +306,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     otherPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
                     if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                        if (!(x >= photoImage.getImageX() + backgroundWidth - dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
                             otherPressed = false;
                         }
                     }
@@ -314,20 +362,20 @@ private Drawable getDrawableForCurrentState() {
             Drawable currentButtonDrawable = null;
             if (currentMessageObject.type == 9 && gifDrawable == null) {
                 if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0];
+                    return getButtonStatesDrawablesDoc()[2][currentMessageObject.isOut() ? 1 : 0];
                 } else {
-                    return buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOut() ? 1 : 0];
+                    return getButtonStatesDrawablesDoc()[buttonState][currentMessageObject.isOut() ? 1 : 0];
                 }
             } else {
                 if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return buttonStatesDrawables[4];
+                    return getButtonStatesDrawables()[4];
                 } else {
-                    return buttonStatesDrawables[buttonState];
+                    return getButtonStatesDrawables()[buttonState];
                 }
             }
         } else if (buttonState == -1) {
             if (currentMessageObject.type == 9 && gifDrawable == null) {
-                return currentMessageObject.isOut() ? placeholderDocOutDrawable : placeholderDocInDrawable;
+                return currentMessageObject.isOut() ? getPlaceholderDocOutDrawable() : getPlaceholderDocInDrawable();
             }
         }
         return null;
@@ -432,15 +480,15 @@ public void setMessageObject(MessageObject messageObject) {
                 }
                 int maxWidth;
                 if (AndroidUtilities.isTablet()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
+                    maxWidth = AndroidUtilities.getMinTabletSide() - dp(122 + 86 + 24);
                 } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
+                    maxWidth = Math.min(getDisplayX(), getDisplayY()) - dp(122 + 86 + 24);
                 }
                 if (currentNameString == null || !currentNameString.equals(name)) {
                     currentNameString = name;
-                    nameWidth = Math.min(maxWidth, (int) Math.ceil(namePaint.measureText(currentNameString)));
-                    CharSequence str = TextUtils.ellipsize(currentNameString, namePaint, nameWidth, TextUtils.TruncateAt.END);
-                    nameLayout = new StaticLayout(str, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    nameWidth = Math.min(maxWidth, (int) Math.ceil(getNamePaint().measureText(currentNameString)));
+                    CharSequence str = TextUtils.ellipsize(currentNameString, getNamePaint(), nameWidth, TextUtils.TruncateAt.END);
+                    nameLayout = new StaticLayout(str, getNamePaint(), nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 }
 
                 String fileName = messageObject.getFileName();
@@ -459,9 +507,9 @@ public void setMessageObject(MessageObject messageObject) {
                 if (currentInfoString == null || !currentInfoString.equals(str)) {
                     currentInfoString = str;
                     infoOffset = 0;
-                    infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(currentInfoString)));
-                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                    infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    infoWidth = Math.min(maxWidth, (int) Math.ceil(getInfoPaint().measureText(currentInfoString)));
+                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, getInfoPaint(), infoWidth, TextUtils.TruncateAt.END);
+                    infoLayout = new StaticLayout(str2, getInfoPaint(), infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 }
             } else if (messageObject.type == 8) {
                 gifDrawable = MediaController.getInstance().getGifDrawable(this, false);
@@ -470,8 +518,8 @@ public void setMessageObject(MessageObject messageObject) {
                 if (currentInfoString == null || !currentInfoString.equals(str)) {
                     currentInfoString = str;
                     infoOffset = 0;
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    infoWidth = (int) Math.ceil(getInfoPaint().measureText(currentInfoString));
+                    infoLayout = new StaticLayout(currentInfoString, getInfoPaint(), infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 }
                 nameLayout = null;
                 currentNameString = null;
@@ -482,9 +530,9 @@ public void setMessageObject(MessageObject messageObject) {
                 String str = String.format("%d:%02d, %s", minutes, seconds, Utilities.formatFileSize(messageObject.messageOwner.media.video.size));
                 if (currentInfoString == null || !currentInfoString.equals(str)) {
                     currentInfoString = str;
-                    infoOffset = videoIconDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4);
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    infoOffset = getVideoIconDrawable().getIntrinsicWidth() + dp(4);
+                    infoWidth = (int) Math.ceil(getInfoPaint().measureText(currentInfoString));
+                    infoLayout = new StaticLayout(currentInfoString, getInfoPaint(), infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 }
                 nameLayout = null;
                 currentNameString = null;
@@ -496,9 +544,9 @@ public void setMessageObject(MessageObject messageObject) {
                 updateSecretTimeText();
             }
             if (messageObject.type == 9) { //doc
-                photoWidth = AndroidUtilities.dp(86);
-                photoHeight = AndroidUtilities.dp(86);
-                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(68);
+                photoWidth = dp(86);
+                photoHeight = dp(86);
+                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + dp(68);
                 currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                 photoImage.setNeedsQualityThumb(true);
                 photoImage.setShouldGenerateQualityThumb(true);
@@ -510,9 +558,9 @@ public void setMessageObject(MessageObject messageObject) {
                     photoImage.setImageBitmap((BitmapDrawable) null);
                 }
             } else if (messageObject.type == 4) { //geo
-                photoWidth = AndroidUtilities.dp(100);
-                photoHeight = AndroidUtilities.dp(100);
-                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+                photoWidth = dp(100);
+                photoHeight = dp(100);
+                backgroundWidth = photoWidth + dp(12);
 
                 double lat = messageObject.messageOwner.media.geo.lat;
                 double lon = messageObject.messageOwner.media.geo._long;
@@ -534,17 +582,17 @@ public void setMessageObject(MessageObject messageObject) {
                 if (AndroidUtilities.isTablet()) {
                     maxWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
                 } else {
-                    maxWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+                    maxWidth = (int) (Math.min(getDisplayX(), getDisplayY()) * 0.5f);
                 }
                 if (photoWidth == 0) {
                     photoWidth = (int)maxWidth;
-                    photoHeight = photoWidth + AndroidUtilities.dp(100);
+                    photoHeight = photoWidth + dp(100);
                 }
                 if (photoWidth > maxWidth) {
                     photoHeight *= maxWidth / photoWidth;
                     photoWidth = (int)maxWidth;
                 }
-                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+                backgroundWidth = photoWidth + dp(12);
                 currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
                 photoImage.setNeedsQualityThumb(false);
                 photoImage.setShouldGenerateQualityThumb(false);
@@ -571,9 +619,9 @@ public void setMessageObject(MessageObject messageObject) {
                 if (AndroidUtilities.isTablet()) {
                     photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
                 } else {
-                    photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                    photoWidth = (int) (Math.min(getDisplayX(), getDisplayY()) * 0.7f);
                 }
-                photoHeight = photoWidth + AndroidUtilities.dp(100);
+                photoHeight = photoWidth + dp(100);
 
                 if (photoWidth > AndroidUtilities.getPhotoSize()) {
                     photoWidth = AndroidUtilities.getPhotoSize();
@@ -616,27 +664,27 @@ public void setMessageObject(MessageObject messageObject) {
                     int h = (int) (currentPhotoObject.h / scale);
                     if (w == 0) {
                         if (messageObject.type == 3) {
-                            w = infoWidth + infoOffset + AndroidUtilities.dp(16);
+                            w = infoWidth + infoOffset + dp(16);
                         } else {
-                            w = AndroidUtilities.dp(100);
+                            w = dp(100);
                         }
                     }
                     if (h == 0) {
-                        h = AndroidUtilities.dp(100);
+                        h = dp(100);
                     }
                     if (h > photoHeight) {
                         float scale2 = h;
                         h = photoHeight;
                         scale2 /= h;
                         w = (int) (w / scale2);
-                    } else if (h < AndroidUtilities.dp(120)) {
-                        h = AndroidUtilities.dp(120);
+                    } else if (h < dp(120)) {
+                        h = dp(120);
                         float hScale = (float) currentPhotoObject.h / h;
                         if (currentPhotoObject.w / hScale < photoWidth) {
                             w = (int) (currentPhotoObject.w / hScale);
                         }
                     }
-                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (currentMessageObject.isOut() ? 20 : 0));
+                    int timeWidthTotal = timeWidth + dp(14 + (currentMessageObject.isOut() ? 20 : 0));
                     if (w < timeWidthTotal) {
                         w = timeWidthTotal;
                     }
@@ -645,13 +693,13 @@ public void setMessageObject(MessageObject messageObject) {
                         if (AndroidUtilities.isTablet()) {
                             w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
                         } else {
-                            w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+                            w = h = (int) (Math.min(getDisplayX(), getDisplayY()) * 0.5f);
                         }
                     }
 
                     photoWidth = w;
                     photoHeight = h;
-                    backgroundWidth = w + AndroidUtilities.dp(12);
+                    backgroundWidth = w + dp(12);
 
                     currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
                     if (messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
@@ -788,7 +836,7 @@ public void updateButtonState(boolean animated) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + dp(14));
     }
 
     @Override
@@ -798,24 +846,24 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         int x;
         if (currentMessageObject.isOut()) {
             if (media) {
-                x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+                x = layoutWidth - backgroundWidth - dp(3);
             } else {
-                x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
+                x = layoutWidth - backgroundWidth + dp(6);
             }
         } else {
             if (isChat) {
-                x = AndroidUtilities.dp(67);
+                x = dp(67);
             } else {
-                x = AndroidUtilities.dp(15);
+                x = dp(15);
             }
         }
-        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
-        int size = AndroidUtilities.dp(48);
+        photoImage.setImageCoords(x, dp(7), photoWidth, photoHeight);
+        int size = dp(48);
         buttonX = (int)(x + (photoWidth - size) / 2.0f);
-        buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+        buttonY = (int)(dp(7) + (photoHeight - size) / 2.0f);
 
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
-        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
+        radialProgress.setProgressRect(buttonX, buttonY, buttonX + dp(48), buttonY + dp(48));
+        deleteProgressRect.set(buttonX + dp(3), buttonY + dp(3), buttonX + dp(45), buttonY + dp(45));
     }
 
     private void updateSecretTimeText() {
@@ -829,9 +877,9 @@ private void updateSecretTimeText() {
         if (currentInfoString == null || !currentInfoString.equals(str)) {
             currentInfoString = str;
             infoOffset = 0;
-            infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
-            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            infoWidth = (int)Math.ceil(getInfoPaint().measureText(currentInfoString));
+            CharSequence str2 = TextUtils.ellipsize(currentInfoString, getInfoPaint(), infoWidth, TextUtils.TruncateAt.END);
+            infoLayout = new StaticLayout(str2, getInfoPaint(), infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             invalidate();
         }
     }
@@ -870,36 +918,36 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
         if (currentMessageObject.type == 9) {
             Drawable menuDrawable = null;
             if (currentMessageObject.isOut()) {
-                infoPaint.setColor(0xff75b166);
-                docBackPaint.setColor(0xffd0f3b3);
-                menuDrawable = docMenuOutDrawable;
+                getInfoPaint().setColor(0xff75b166);
+                getDocBackPaint().setColor(0xffd0f3b3);
+                menuDrawable = getDocMenuOutDrawable();
             } else {
-                infoPaint.setColor(0xffa1adbb);
-                docBackPaint.setColor(0xffebf0f5);
-                menuDrawable = docMenuInDrawable;
+                getInfoPaint().setColor(0xffa1adbb);
+                getDocBackPaint().setColor(0xffebf0f5);
+                menuDrawable = getDocMenuInDrawable();
             }
 
-            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10));
+            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - dp(44), dp(10));
             menuDrawable.draw(canvas);
 
             if (buttonState >= 0 && buttonState < 4) {
                 if (!imageDrawn) {
                     if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0]);
+                        radialProgress.swapBackground(getButtonStatesDrawablesDoc()[2][currentMessageObject.isOut() ? 1 : 0]);
                     } else {
-                        radialProgress.swapBackground(buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOut() ? 1 : 0]);
+                        radialProgress.swapBackground(getButtonStatesDrawablesDoc()[buttonState][currentMessageObject.isOut() ? 1 : 0]);
                     }
                 } else {
                     if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(buttonStatesDrawables[4]);
+                        radialProgress.swapBackground(getButtonStatesDrawables()[4]);
                     } else {
-                        radialProgress.swapBackground(buttonStatesDrawables[buttonState]);
+                        radialProgress.swapBackground(getButtonStatesDrawables()[buttonState]);
                     }
                 }
             }
 
             if (!imageDrawn) {
-                canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), docBackPaint);
+                canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), getDocBackPaint());
                 if (currentMessageObject.isOut()) {
                     radialProgress.setProgressColor(0xff81bd72);
                 } else {
@@ -924,15 +972,15 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
                     drawable = 6;
                 }
             }
-            setDrawableBounds(buttonStatesDrawables[drawable], buttonX, buttonY);
-            buttonStatesDrawables[drawable].setAlpha((int)(255 * (1.0f - radialProgress.getAlpha())));
-            buttonStatesDrawables[drawable].draw(canvas);
+            setDrawableBounds(getButtonStatesDrawables()[drawable], buttonX, buttonY);
+            getButtonStatesDrawables()[drawable].setAlpha((int)(255 * (1.0f - radialProgress.getAlpha())));
+            getButtonStatesDrawables()[drawable].draw(canvas);
             if (!currentMessageObject.isOut() && currentMessageObject.messageOwner.destroyTime != 0) {
                 long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
                 float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
                 canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
                 if (progress != 0) {
-                    int offset = AndroidUtilities.dp(2);
+                    int offset = dp(2);
                     invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
                 }
                 updateSecretTimeText();
@@ -943,28 +991,28 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
 
         if (nameLayout != null) {
             canvas.save();
-            canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(8));
+            canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + dp(10), photoImage.getImageY() + dp(8));
             nameLayout.draw(canvas);
             canvas.restore();
 
             if (infoLayout != null) {
                 canvas.save();
-                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(30));
+                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + dp(10), photoImage.getImageY() + dp(30));
                 infoLayout.draw(canvas);
                 canvas.restore();
             }
         } else if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
-            infoPaint.setColor(0xffffffff);
-            setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
+            getInfoPaint().setColor(0xffffffff);
+            setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + dp(4), photoImage.getImageY() + dp(4), infoWidth + dp(8) + infoOffset, dp(16.5f));
             mediaBackgroundDrawable.draw(canvas);
 
             if (currentMessageObject.type == 3) {
-                setDrawableBounds(videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dp(7.5f));
-                videoIconDrawable.draw(canvas);
+                setDrawableBounds(getVideoIconDrawable(), photoImage.getImageX() + dp(8), photoImage.getImageY() + dp(7.5f));
+                getVideoIconDrawable().draw(canvas);
             }
 
             canvas.save();
-            canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
+            canvas.translate(photoImage.getImageX() + dp(8) + infoOffset, photoImage.getImageY() + dp(5.5f));
             infoLayout.draw(canvas);
             canvas.restore();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index ef2814c84..50d372e6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -53,7 +53,7 @@ public boolean onTouchEvent(MotionEvent event) {
                             final float left = block.textLayout.getLineLeft(line);
                             if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
                                 Spannable buffer = (Spannable)currentMessageObject.messageText;
-                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+                                ClickableSpan[] link = getSpans(off, buffer);
 
                                 if (link.length != 0) {
                                     if (event.getAction() == MotionEvent.ACTION_DOWN) {
@@ -92,6 +92,10 @@ public boolean onTouchEvent(MotionEvent event) {
         return super.onTouchEvent(event);
     }
 
+    protected ClickableSpan[] getSpans(int off, Spannable buffer) {
+        return buffer.getSpans(off, off, ClickableSpan.class);
+    }
+
     public void setVisiblePart(int position, int height) {
         if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null) {
             return;
@@ -139,18 +143,18 @@ public void setMessageObject(MessageObject messageObject) {
 
             if (AndroidUtilities.isTablet()) {
                 if (isChat && !messageObject.isOut()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                    maxWidth = AndroidUtilities.getMinTabletSide() - dp(122);
                     drawName = true;
                 } else {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+                    maxWidth = AndroidUtilities.getMinTabletSide() - dp(80);
                     drawName = false;
                 }
             } else {
                 if (isChat && !messageObject.isOut()) {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+                    maxWidth = Math.min(getDisplayX(), getDisplayY()) - dp(122);
                     drawName = true;
                 } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+                    maxWidth = Math.min(getDisplayX(), getDisplayY()) - dp(80);
                     drawName = false;
                 }
             }
@@ -160,25 +164,25 @@ public void setMessageObject(MessageObject messageObject) {
             super.setMessageObject(messageObject);
 
             backgroundWidth = messageObject.textWidth;
-            totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + namesOffset;
+            totalHeight = messageObject.textHeight + dp(19.5f) + namesOffset;
 
             int maxChildWidth = Math.max(backgroundWidth, nameWidth);
             maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
 
-            int timeMore = timeWidth + AndroidUtilities.dp(6);
+            int timeMore = timeWidth + dp(6);
             if (messageObject.isOut()) {
-                timeMore += AndroidUtilities.dp(20.5f);
+                timeMore += dp(20.5f);
             }
 
             if (maxWidth - messageObject.lastLineWidth < timeMore) {
-                totalHeight += AndroidUtilities.dp(14);
-                backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(29);
+                totalHeight += dp(14);
+                backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth) + dp(29);
             } else {
                 int diff = maxChildWidth - messageObject.lastLineWidth;
                 if (diff >= 0 && diff <= timeMore) {
-                    backgroundWidth = maxChildWidth + timeMore - diff + AndroidUtilities.dp(29);
+                    backgroundWidth = maxChildWidth + timeMore - diff + dp(29);
                 } else {
-                    backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(29);
+                    backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth + timeMore) + dp(29);
                 }
             }
         }
@@ -194,11 +198,11 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         super.onLayout(changed, left, top, right, bottom);
 
         if (currentMessageObject.isOut()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
+            textX = layoutWidth - backgroundWidth + dp(10);
+            textY = dp(10) + namesOffset;
         } else {
-            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
+            textX = dp(19) + (isChat ? dp(52) : 0);
+            textY = dp(10) + namesOffset;
         }
     }
 
@@ -210,11 +214,11 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (currentMessageObject.isOut()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
+            textX = layoutWidth - backgroundWidth + dp(10);
+            textY = dp(10) + namesOffset;
         } else {
-            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
+            textX = dp(19) + (isChat ? dp(52) : 0);
+            textY = dp(10) + namesOffset;
         }
 
         for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java
index a98c5a0c2..2ddad1375 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LoadingCell.java
@@ -33,4 +33,8 @@ public LoadingCell(Context context) {
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(54), MeasureSpec.EXACTLY));
     }
+
+    protected int dp(float value){
+        return AndroidUtilities.dp(value);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 7b4590106..d754244cf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -27,6 +27,7 @@
 import android.support.v7.widget.LinearLayoutManager;
 import android.text.Html;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -3480,6 +3481,93 @@ private void updateVisibleRows() {
         }
     }
 
+
+    public void presentVideoFromBS(File file) {
+        Intent intent = new Intent(Intent.ACTION_VIEW);
+        intent.setDataAndType(Uri.fromFile(file), "video/mp4");
+        getParentActivity().startActivity(intent);
+    }
+
+    public void shareFromBS(File f) {
+        try {
+            if (f.exists()) {
+                Intent intent = new Intent(Intent.ACTION_SEND);
+                if (f.toString().endsWith("mp4")) {
+                    intent.setType("video/mp4");
+                } else {
+                    intent.setType("image/jpeg");
+                }
+                intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(f));
+                getParentActivity().startActivity(intent);
+            } else {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setPositiveButton(R.string.OK, null);
+                builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
+                builder.show().setCanceledOnTouchOutside(true);
+            }
+        }catch (Exception e){
+            Log.d("tmessages", e.getMessage());
+            e.printStackTrace();
+        }
+    }
+
+    public void toggleSubMenu() {
+        if(menuItem != null){
+            menuItem.showSubMenu();
+        }
+    }
+
+    public void viewFile(MessageObject message){
+        File f = null;
+        String fileName = message.getFileName();
+        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+            f = new File(message.messageOwner.attachPath);
+        }
+        if (f == null || f != null && !f.exists()) {
+            f = FileLoader.getPathToMessage(message.messageOwner);
+        }
+        if (f != null && f.exists()) {
+            String realMimeType = null;
+            try {
+                Intent intent = new Intent(Intent.ACTION_VIEW);
+                if (message.type == 8 || message.type == 9) {
+                    MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                    int idx = fileName.lastIndexOf(".");
+                    if (idx != -1) {
+                        String ext = fileName.substring(idx + 1);
+                        realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                        if (realMimeType == null) {
+                            realMimeType = message.messageOwner.media.document.mime_type;
+                            if (realMimeType == null || realMimeType.length() == 0) {
+                                realMimeType = null;
+                            }
+                        }
+                        if (realMimeType != null) {
+                            intent.setDataAndType(Uri.fromFile(f), realMimeType);
+                        } else {
+                            intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                        }
+                    } else {
+                        intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                    }
+                }
+                if (realMimeType != null) {
+                    try {
+                        getParentActivity().startActivity(intent);
+                    } catch (Exception e) {
+                        intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                        getParentActivity().startActivity(intent);
+                    }
+                } else {
+                    getParentActivity().startActivity(intent);
+                }
+            } catch (Exception e) {
+                alertUserOpenError(message);
+            }
+        }
+    }
+
     private void alertUserOpenError(MessageObject message) {
         if (getParentActivity() == null) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index ea916e6af..1bad799c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -9,11 +9,14 @@
 package org.telegram.ui;
 
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.content.ContentResolver;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Point;
@@ -41,9 +44,11 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.ContactsController;
+import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.bsui.OtherFlipBSActivity;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
@@ -61,6 +66,7 @@
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
@@ -822,10 +828,190 @@ public void onClick(DialogInterface dialog, int which) {
                 rightActionBarLayout.showLastFragment();
             }
         }
+        if(intent != null && intent.getAction() != null) {
+            if (intent.getAction().equals(OtherFlipBSActivity.SETTINGS_FLAG)) {
+                presentFragment(new SettingsActivity());
+                drawerLayoutContainer.closeDrawer(false);
+            } else if (intent.getAction().equals(OtherFlipBSActivity.VIEW_PROFILE)) {
+                Object user_id = OtherFlipBSActivity.Params.get("user_id");
+                Object chat_id = OtherFlipBSActivity.Params.get("chat_id");
+                Object dialog_id = OtherFlipBSActivity.Params.get("dialog_id");
+                TLRPC.ChatParticipants info = (TLRPC.ChatParticipants) OtherFlipBSActivity.Params.get("info");
+                if (user_id != null) {
+                    Bundle args = new Bundle();
+                    args.putInt("user_id", (int) user_id);
+                    if (dialog_id != null) {
+                        args.putLong("dialog_id", (long) dialog_id);
+                    }
+                    presentFragment(new ProfileActivity(args));
+                    OtherFlipBSActivity.Params.clear();
+                } else if (chat_id != null) {
+                    Bundle args = new Bundle();
+                    args.putInt("chat_id", (int) chat_id);
+                    ProfileActivity fragment = new ProfileActivity(args);
+                    fragment.setChatInfo(info);
+                    presentFragment(fragment);
+                    OtherFlipBSActivity.Params.clear();
+                }
+            } else if (intent.getAction().equals(OtherFlipBSActivity.VIEW_VIDEO)) {
+                Object file = OtherFlipBSActivity.Params.get("file");
+                if (file != null) {
+                    Object message = OtherFlipBSActivity.Params.get("message");
+                    if (file != null && message != null) {
+                        MessageObject currMessage = (MessageObject) message;
+                        final long dialog_id = currMessage.getDialogId();
+                        final int message_id = currMessage.messageOwner.id;
+                        Bundle args = new Bundle();
+                        int lower_part = (int) dialog_id;
+                        int high_id = (int) (dialog_id >> 32);
+                        if (lower_part != 0) {
+                            if (high_id == 1) {
+                                args.putInt("chat_id", lower_part);
+                            } else {
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                            }
+                        } else {
+                            args.putInt("enc_id", high_id);
+                        }
+                        if (message_id != 0) {
+                            args.putInt("message_id", message_id);
+                        }
+                        ChatActivity fragment = new ChatActivity(args);
+                        presentFragment(fragment);
+                        fragment.presentVideoFromBS((File) file);
+                    }
+                }
+            } else if (intent.getAction().equals(OtherFlipBSActivity.ATTACH)) {
+                Bundle args = new Bundle();
+                if (OtherFlipBSActivity.Params.get("chat_id") != null) {
+                    args.putInt("chat_id", (int) OtherFlipBSActivity.Params.get("chat_id"));
+                } else if (OtherFlipBSActivity.Params.get("user_id") != null) {
+                    args.putInt("user_id", (int) OtherFlipBSActivity.Params.get("user_id"));
+                } else if (OtherFlipBSActivity.Params.get("enc_id") != null) {
+                    args.putInt("enc_id", (int) OtherFlipBSActivity.Params.get("enc_id"));
+                }
+                ChatActivity fragment = new ChatActivity(args);
+                presentFragment(fragment);
+                fragment.toggleSubMenu();
+            } else if (intent.getAction().equals(OtherFlipBSActivity.SHARE)) {
+                Object file = OtherFlipBSActivity.Params.get("file");
+                Object message = OtherFlipBSActivity.Params.get("message");
+                if (file != null && message != null) {
+                    MessageObject currMessage = (MessageObject) message;
+                    final long dialog_id = currMessage.getDialogId();
+                    final int message_id = currMessage.messageOwner.id;
+                    Bundle args = new Bundle();
+                    int lower_part = (int) dialog_id;
+                    int high_id = (int) (dialog_id >> 32);
+                    if (lower_part != 0) {
+                        if (high_id == 1) {
+                            args.putInt("chat_id", lower_part);
+                        } else {
+                            if (lower_part > 0) {
+                                args.putInt("user_id", lower_part);
+                            } else if (lower_part < 0) {
+                                args.putInt("chat_id", -lower_part);
+                            }
+                        }
+                    } else {
+                        args.putInt("enc_id", high_id);
+                    }
+                    if (message_id != 0) {
+                        args.putInt("message_id", message_id);
+                    }
+                    ChatActivity fragment = new ChatActivity(args);
+                    presentFragment(fragment);
+                    fragment.shareFromBS((File) file);
+                }
+            } else if (intent.getAction().equals(OtherFlipBSActivity.VIEW_FILE)) {
+                Object message = OtherFlipBSActivity.Params.get("message");
+                if (message != null) {
+                    MessageObject messageObject = (MessageObject) message;
+                    final long dialog_id = messageObject.getDialogId();
+                    final int message_id = messageObject.messageOwner.id;
+                    Bundle args = new Bundle();
+                    int lower_part = (int) dialog_id;
+                    int high_id = (int) (dialog_id >> 32);
+                    if (lower_part != 0) {
+                        if (high_id == 1) {
+                            args.putInt("chat_id", lower_part);
+                        } else {
+                            if (lower_part > 0) {
+                                args.putInt("user_id", lower_part);
+                            } else if (lower_part < 0) {
+                                args.putInt("chat_id", -lower_part);
+                            }
+                        }
+                    } else {
+                        args.putInt("enc_id", high_id);
+                    }
+                    if (message_id != 0) {
+                        args.putInt("message_id", message_id);
+                    }
+                    ChatActivity fragment = new ChatActivity(args);
+                    presentFragment(fragment);
+                    fragment.viewFile(messageObject);
+                }
+            } else if (intent.getAction().equals(OtherFlipBSActivity.GEO)) {
+                Object message = OtherFlipBSActivity.Params.get("message");
+                if(message != null){
+                    MessageObject messageObject = (MessageObject) message;
+                    showLocationActivity(messageObject);
+                }
+            } else if (intent.getAction().equals(OtherFlipBSActivity.USER_PROFILE)){
+                Object Id = OtherFlipBSActivity.Params.get("UId");
+                if(Id != null) {
+                    int uid = (int) Id;
+                    if (uid != UserConfig.getClientUserId()) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", uid);
+                        presentFragment(new ProfileActivity(args));
+                    }
+                }
+            }
+        }
 
         intent.setAction(null);
     }
 
+    private boolean isGoogleMapsInstalled() {
+        try {
+            ApplicationInfo info = ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
+            return true;
+        } catch(PackageManager.NameNotFoundException e) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getApplicationContext());
+            builder.setMessage("Install Google Maps?");
+            builder.setCancelable(true);
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    try {
+                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.google.android.apps.maps"));
+                        getApplicationContext().startActivity(intent);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            builder.show();
+            return false;
+        }
+    }
+
+    private void showLocationActivity(MessageObject message) {
+        if (!isGoogleMapsInstalled()) {
+            return;
+        }
+        LocationActivity fragment = new LocationActivity();
+        fragment.setMessageObject(message);
+        presentFragment(fragment);
+    }
+
     @Override
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_black.png b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_black.png
new file mode 100644
index 000000000..795b9ecae
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_black.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bs_mail_newletter_bigbutton.png b/TMessagesProj/src/main/res/drawable-hdpi/bs_mail_newletter_bigbutton.png
new file mode 100644
index 000000000..89378d7f0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bs_mail_newletter_bigbutton.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/counter_circle.9.png b/TMessagesProj/src/main/res/drawable-hdpi/counter_circle.9.png
new file mode 100644
index 000000000..bce69c460
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/counter_circle.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/counter_list.9.png b/TMessagesProj/src/main/res/drawable-hdpi/counter_list.9.png
new file mode 100644
index 000000000..b82205cdb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/counter_list.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/counter_paperplan.9.png b/TMessagesProj/src/main/res/drawable-hdpi/counter_paperplan.9.png
new file mode 100644
index 000000000..fcbcbc53c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/counter_paperplan.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_bs.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_bs.9.png
new file mode 100644
index 000000000..229bada34
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_bs.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected_bs.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected_bs.9.png
new file mode 100644
index 000000000..0d3512e47
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected_bs.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_bs.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_bs.9.png
new file mode 100644
index 000000000..207553c43
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_bs.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected_bs.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected_bs.9.png
new file mode 100644
index 000000000..6873ff6af
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected_bs.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_blue_bs.9.png b/TMessagesProj/src/main/res/drawable-hdpi/system_blue_bs.9.png
new file mode 100644
index 000000000..a7c108c28
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/system_blue_bs.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_1.png b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_1.png
new file mode 100644
index 000000000..6d4b30458
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_2.png b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_2.png
new file mode 100644
index 000000000..b3c97ae8c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_3.png b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_3.png
new file mode 100644
index 000000000..3d69d6a10
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/widget_sms_large_icon_3.png differ
diff --git a/TMessagesProj/src/main/res/drawable/bs_dialog_border.xml b/TMessagesProj/src/main/res/drawable/bs_dialog_border.xml
new file mode 100644
index 000000000..04652a113
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bs_dialog_border.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#000000" />
+        </shape>
+    </item>
+    <item android:left="1dp" android:right="1dp"  android:top="1dp" android:bottom="1dp">
+        <shape android:shape="rectangle">
+            <solid android:color="#FFFFFF" />
+        </shape>
+    </item>
+</layer-list>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/voice_background.xml b/TMessagesProj/src/main/res/drawable/voice_background.xml
new file mode 100644
index 000000000..5bdcf9413
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/voice_background.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="oval">
+
+    <stroke
+        android:width="1dp"
+        android:color="@android:color/white"
+        android:dashWidth="1.5dp"
+        android:dashGap="5dp"/>
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_actoin_bar.xml b/TMessagesProj/src/main/res/layout/bs_actoin_bar.xml
new file mode 100644
index 000000000..e93547c99
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_actoin_bar.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/rootLayout"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#ffffff"
+    android:orientation="vertical" >
+
+    <org.telegram.bsui.ActionBar.BSActionBar
+        android:id="@+id/action_bar"
+        android:layout_width="match_parent"
+        android:background="#000000"
+        android:layout_height="88px">
+    </org.telegram.bsui.ActionBar.BSActionBar>
+
+    <RelativeLayout
+        android:id="@+id/view_container"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_below="@id/action_bar"
+        android:background="#FFFFFF" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_messages_list.xml b/TMessagesProj/src/main/res/layout/bs_messages_list.xml
new file mode 100644
index 000000000..38603caa9
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_messages_list.xml
@@ -0,0 +1,79 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <ListView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/sms_listview"
+        android:fadingEdge="none"
+        android:fadingEdgeLength="0dp"
+        android:divider="@null"
+        android:dividerHeight="0px"
+        android:animationCache="false"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/bs_search_empty_view"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:visibility="gone">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:textColor="#808080"
+            android:gravity="center"
+            android:textSize="20dp"
+            android:id="@+id/search_empty_text"
+            android:layout_weight="1"/>
+
+        <FrameLayout
+            android:layout_height="0dp"
+            android:layout_width="match_parent"
+            android:layout_weight="1"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/nomessages_layout"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:visibility="gone">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#959595"
+            android:gravity="center"
+            android:textSize="20dp"
+            android:id="@+id/list_empty_view_text1"/>
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#959595"
+            android:gravity="center"
+            android:textSize="15dp"
+            android:paddingTop="6dp"
+            android:lineSpacingExtra="2dp"
+            android:id="@+id/list_empty_view_text2"/>
+
+    </LinearLayout>
+
+    <ImageView
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:src="@drawable/bs_mail_newletter_bigbutton"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="14dp"
+        android:paddingBottom="14dp"
+        android:id="@+id/btn_new_sms"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_telegram_image_large_widget.xml b/TMessagesProj/src/main/res/layout/bs_telegram_image_large_widget.xml
new file mode 100644
index 000000000..619cfcb80
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_telegram_image_large_widget.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    android:id="@+id/widget_root"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@android:color/transparent">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <ImageView
+            android:id="@+id/logo"
+            android:layout_width="wrap_content"
+            android:layout_height="0dp"
+            android:layout_gravity="center"
+            android:layout_weight="1"
+            android:src="@drawable/widget_sms_large_icon_3"/>
+
+        <include layout="@layout/widget_large_sms_missed_2_container_layout"/>
+
+        <include layout="@layout/widget_large_sms_missed_1_container_layout"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_gravity="left|center_vertical"
+                android:layout_weight="1"
+                android:gravity="center_vertical">
+
+                <ImageView
+                    android:id="@+id/extra_time_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:src="@drawable/counter_paperplan"
+                    android:visibility="gone"/>
+
+                <TextView
+                    android:id="@+id/extra_time"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="@string/LastFromYotagram"/>
+            </LinearLayout>
+
+            <include layout="@layout/widget_right_button_layout"/>
+        </LinearLayout>
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/recognizer_error"
+        style="@style/RecognizerError"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_telegram_large_widget.xml b/TMessagesProj/src/main/res/layout/bs_telegram_large_widget.xml
new file mode 100644
index 000000000..5ab7b7206
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_telegram_large_widget.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    android:id="@+id/widget_root"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@android:color/transparent">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <include layout="@layout/widget_large_sms_missed_2_container_layout"/>
+
+        <include layout="@layout/widget_large_sms_missed_1_container_layout"/>
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="bottom"
+                android:gravity="center_vertical"
+                android:orientation="horizontal">
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="left"
+                    android:layout_weight="1"
+                    android:gravity="center_vertical">
+
+                    <ImageView
+                        android:id="@+id/extra_time_image"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:src="@drawable/counter_paperplan"
+                        android:visibility="gone"/>
+
+                    <TextView
+                        android:id="@+id/extra_time"
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/LastFromYotagram"/>
+                </LinearLayout>
+
+                <include layout="@layout/widget_right_button_layout"/>
+            </LinearLayout>
+        </FrameLayout>
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/recognizer_error"
+        style="@style/RecognizerError"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_telegram_large_widget_voice.xml b/TMessagesProj/src/main/res/layout/bs_telegram_large_widget_voice.xml
new file mode 100644
index 000000000..147a5c880
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_telegram_large_widget_voice.xml
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical">
+
+    <include
+        layout="@layout/widget_speak_to_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
+
+    <FrameLayout
+        android:layout_width="133.33dp"
+        android:layout_height="133.33dp"
+        android:layout_gravity="center"
+        android:layout_marginBottom="26.66dp"
+        android:layout_marginTop="26.66dp">
+
+        <ViewFlipper xmlns:android="http://schemas.android.com/apk/res/android"
+                     android:layout_width="match_parent"
+                     android:layout_height="match_parent"
+                     android:layout_gravity="center"
+                     android:alwaysDrawnWithCache="true"
+                     android:animationCache="true"
+                     android:autoStart="true"
+                     android:flipInterval="450"
+                     android:measureAllChildren="true">
+            <!--86.66dp-->
+            <ImageView
+                android:layout_width="86.66dp"
+                android:layout_height="86.66dp"
+                android:layout_gravity="center"
+                android:src="@drawable/voice_background"/>
+            <!--110dp-->
+            <ImageView
+                android:layout_width="110dp"
+                android:layout_height="110dp"
+                android:layout_gravity="center"
+                android:src="@drawable/voice_background"/>
+
+            <!--133.33dp-->
+            <ImageView
+                android:layout_width="133.33dp"
+                android:layout_height="133.33dp"
+                android:layout_gravity="center"
+                android:src="@drawable/voice_background"/>
+        </ViewFlipper>
+
+        <!--25-->
+        <ImageView
+            android:layout_width="50dp"
+            android:layout_height="50dp"
+            android:layout_gravity="center"
+            android:src="@drawable/ic_mic"/>
+
+    </FrameLayout>
+
+    <include layout="@layout/widget_text_right_button_layout"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget.xml b/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget.xml
new file mode 100644
index 000000000..199f59b61
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    android:id="@+id/widget_root"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@android:color/black">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <include layout="@layout/widget_medium_sms_missed_container_layout"/>
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="bottom"
+                android:orientation="horizontal">
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical|left"
+                    android:layout_weight="1"
+                    android:gravity="center_vertical">
+
+                    <ImageView
+                        android:id="@+id/time_image"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:src="@drawable/counter_paperplan"/>
+
+                    <TextView
+                        android:id="@+id/time"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"/>
+                </LinearLayout>
+
+                <include layout="@layout/widget_right_button_layout"/>
+            </LinearLayout>
+        </FrameLayout>
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/recognizer_error"
+        style="@style/RecognizerError"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget_voice.xml b/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget_voice.xml
new file mode 100644
index 000000000..ef686ab25
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/bs_telegram_medium_widget_voice.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    android:id="@+id/widget_root"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@android:color/transparent"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <include
+            layout="@layout/widget_speak_to_layout"
+            android:layout_width="236.66dp"
+            android:layout_height="wrap_content"/>
+
+        <FrameLayout
+            android:layout_width="80dp"
+            android:layout_height="80dp"
+            android:layout_gravity="center">
+
+            <ViewFlipper xmlns:android="http://schemas.android.com/apk/res/android"
+                         android:layout_width="match_parent"
+                         android:layout_height="match_parent"
+                         android:layout_gravity="center"
+                         android:alwaysDrawnWithCache="true"
+                         android:animationCache="true"
+                         android:autoStart="true"
+                         android:flipInterval="750"
+                         android:measureAllChildren="true">
+                <!--48dp-->
+                <ImageView
+                    android:layout_width="48dp"
+                    android:layout_height="48dp"
+                    android:layout_gravity="center"
+                    android:src="@drawable/voice_background"/>
+                <!--64dp-->
+                <ImageView
+                    android:layout_width="64dp"
+                    android:layout_height="64dp"
+                    android:layout_gravity="center"
+                    android:src="@drawable/voice_background"/>
+
+                <!--80dp-->
+                <ImageView
+                    android:layout_width="80dp"
+                    android:layout_height="80dp"
+                    android:layout_gravity="center"
+                    android:src="@drawable/voice_background"/>
+            </ViewFlipper>
+
+            <!--25-->
+            <ImageView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:src="@drawable/ic_mic"/>
+
+        </FrameLayout>
+    </LinearLayout>
+
+    <include layout="@layout/widget_text_right_button_layout"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_layout_bs.xml b/TMessagesProj/src/main/res/layout/chat_layout_bs.xml
new file mode 100644
index 000000000..ec7f2e017
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/chat_layout_bs.xml
@@ -0,0 +1,316 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+    <org.telegram.ui.Components.SizeNotifierRelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_above="@+id/emoji_container"
+
+        android:id="@+id/chat_layout_bs" >
+
+
+        <org.telegram.ui.Components.FrameLayoutFixed
+
+            android:layout_height="fill_parent"
+            android:layout_width="fill_parent"
+            android:paddingBottom="48dp"
+            android:id="@+id/empty_view">
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#ffffff"
+                android:gravity="center"
+                android:paddingTop="2dp"
+                android:paddingBottom="2dp"
+                android:paddingLeft="7dp"
+                android:paddingRight="7dp"
+                android:textSize="16dp"
+                android:id="@+id/searchEmptyView"
+                android:layout_gravity="center"/>
+
+            <include
+                layout="@layout/encrypted_chat_placeholder"
+                android:layout_gravity="center" />
+
+        </org.telegram.ui.Components.FrameLayoutFixed>
+
+        <org.telegram.ui.Components.LayoutListView
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:id="@+id/chat_list_view"
+            android:layout_alignParentTop="true"
+            android:layout_alignParentLeft="true"
+            android:clipToPadding="false"
+            android:layout_marginBottom="-3dp"
+            android:layout_above="@+id/chat_compose_panel"
+            android:divider="@null"
+            android:dividerHeight="0dp"
+            android:listSelector="@android:color/transparent"
+            android:fadingEdge="none"
+            android:fadingEdgeLength="0dp"
+            android:stackFromBottom="true"
+            android:paddingBottom="3dp"
+            android:paddingTop="4dp"
+            android:cacheColorHint="#00000000"/>
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:id="@+id/progressLayout"
+            android:visibility="gone">
+
+            <FrameLayout
+                android:id="@+id/progressLayoutInner"
+                android:layout_width="36dp"
+                android:layout_height="36dp"
+                android:gravity="center"
+                android:layout_marginBottom="48dp">
+
+                <ProgressBar
+                    android:layout_width="32dp"
+                    android:layout_height="32dp"
+                    android:id="@+id/center_progress"
+                    android:indeterminateDrawable="@drawable/loading_animation"
+                    android:indeterminate="true"
+                    android:layout_gravity="center"
+                    android:indeterminateBehavior="repeat"
+                    android:indeterminateDuration="1500">
+                </ProgressBar>
+
+            </FrameLayout>
+
+        </FrameLayout>
+
+        <LinearLayout
+
+            android:layout_height="wrap_content"
+            android:layout_width="match_parent"
+            android:layout_alignParentBottom="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:id="@+id/chat_compose_panel"
+
+            android:background="#000000"
+            android:orientation="horizontal">
+
+            <org.telegram.ui.Components.FrameLayoutFixed
+                android:layout_height="wrap_content"
+                android:paddingTop="2dp"
+                android:paddingBottom="2dp"
+                android:layout_width="0dp"
+                android:layout_weight="1">
+
+                <ImageView
+                    android:src="@drawable/ic_msg_panel_smiles"
+                    android:layout_width="48dp"
+                    android:layout_height="48dp"
+                    android:layout_marginTop="2dp"
+                    android:paddingTop="1dp"
+                    android:paddingLeft="4dp"
+                    android:scaleType="centerInside"
+                    android:layout_gravity="bottom"
+                    android:id="@+id/chat_smile_button"/>
+
+                <EditText
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+
+                    android:layout_gravity="bottom"
+                    android:id="@+id/chat_text_edit"
+                    android:maxLines="4"
+                    android:textSize="18dp"
+                    android:textColorHint="#b2b2b2"
+                    android:imeOptions="flagNoExtractUi"
+                    android:inputType="textCapSentences|textMultiLine"
+                    android:maxLength="16384"
+                    android:gravity="bottom"
+                    android:paddingLeft="10dp"
+                    android:layout_marginLeft="52dp"
+                    android:layout_marginRight="2dp"
+
+                    android:background="#FFFFFF"
+                    android:paddingBottom="12dp"
+                    android:paddingTop="11dp"
+                    android:textCursorDrawable="@null"
+                    android:textColor="#000000"/>
+
+                <FrameLayout
+                    android:layout_width="48dp"
+                    android:layout_height="48dp"
+                    android:layout_marginTop="2dp"
+                    android:id="@+id/chat_attach_button"
+                    android:enabled="false"
+                    android:visibility="gone"
+                    android:layout_gravity="bottom|right"/>
+
+                <org.telegram.ui.Components.FrameLayoutFixed
+                    android:layout_height="48dp"
+                    android:layout_width="fill_parent"
+                    android:layout_marginTop="2dp"
+                    android:layout_gravity="bottom"
+                    android:background="#ffffff"
+                    android:id="@+id/record_panel"
+                    android:visibility="gone">
+
+                    <LinearLayout
+                        android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:layout_gravity="center"
+                        android:layout_marginLeft="30dp"
+                        android:orientation="horizontal"
+                        android:id="@+id/slideText">
+
+                        <ImageView
+                            android:layout_height="wrap_content"
+                            android:layout_width="wrap_content"
+                            android:src="@drawable/slidearrow"
+                            android:layout_gravity="center_vertical"
+                            android:layout_marginTop="1dp"/>
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:textColor="#999999"
+                            android:textSize="12dp"
+                            android:layout_marginLeft="6dp"
+                            android:id="@+id/slideToCancelTextView"
+                            android:layout_gravity="center_vertical"/>
+
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:layout_gravity="center_vertical"
+                        android:paddingLeft="13dp"
+                        android:orientation="horizontal"
+                        android:background="#ffffffff">
+
+                        <ImageView
+                            android:layout_height="wrap_content"
+                            android:layout_width="wrap_content"
+                            android:src="@drawable/rec"
+                            android:layout_gravity="center_vertical"
+                            android:layout_marginTop="1dp"/>
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:id="@+id/recording_time_text"
+                            android:text="00:00"
+                            android:textColor="#4d4c4b"
+                            android:textSize="16dp"
+                            android:layout_gravity="center_vertical"
+                            android:layout_marginLeft="6dp"/>
+
+                    </LinearLayout>
+
+                </org.telegram.ui.Components.FrameLayoutFixed>
+
+            </org.telegram.ui.Components.FrameLayoutFixed>
+
+            <FrameLayout
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_gravity="bottom"
+
+                android:background="#000000"
+                android:layout_marginTop="2dp">
+
+                <ImageButton
+                    android:layout_width="48dp"
+                    android:layout_height="48dp"
+                    android:scaleType="centerInside"
+                    android:id="@+id/chat_audio_send_button"
+                    android:enabled="false"
+                    android:src="@drawable/mic_button_states"
+                    android:paddingRight="4dp"
+
+                    android:background="#000000"/>
+
+                <ImageButton
+                    android:layout_width="48dp"
+                    android:layout_height="48dp"
+                    android:scaleType="centerInside"
+                    android:id="@+id/chat_send_button"
+                    android:enabled="false"
+                    android:src="@drawable/ic_send"
+                    android:background="@android:color/transparent"/>
+
+            </FrameLayout>
+
+        </LinearLayout>
+
+        <FrameLayout
+            android:layout_height="48dp"
+            android:layout_width="fill_parent"
+            android:layout_alignParentBottom="true"
+            android:background="#ffffff"
+            android:id="@+id/bottom_overlay"
+            android:visibility="gone"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:clickable="true">
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/bottom_overlay_text"
+                android:textColor="#7f7f7f"
+                android:textSize="16dp"
+                android:layout_gravity="center"/>
+
+        </FrameLayout>
+
+        <FrameLayout
+            android:layout_height="48dp"
+            android:layout_width="fill_parent"
+            android:layout_alignParentBottom="true"
+            android:background="#fbfcfd"
+            android:id="@+id/bottom_overlay_chat"
+            android:visibility="gone">
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/bottom_overlay_chat_text"
+                android:textColor="#3e6fa1"
+                android:textSize="18dp"
+                android:layout_gravity="center"/>
+
+        </FrameLayout>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/pagedown"
+            android:layout_above="@id/chat_compose_panel"
+            android:layout_alignParentRight="true"
+            android:layout_marginRight="4dp"
+            android:layout_marginBottom="4dp"
+            android:id="@+id/pagedown_button"/>
+
+        <LinearLayout android:id="@+id/bottom_layout"
+            android:orientation="vertical"
+            android:layout_below="@+id/chat_compose_panel"
+            android:layout_width="match_parent"
+            android:layout_height="100px">
+
+        </LinearLayout>
+    </org.telegram.ui.Components.SizeNotifierRelativeLayout>
+    <LinearLayout
+        android:id="@+id/emoji_container"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:gravity="bottom"
+        android:layout_alignParentBottom="true"
+        android:visibility="visible"
+        android:orientation="vertical">
+
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/media_layout_bs.xml b/TMessagesProj/src/main/res/layout/media_layout_bs.xml
new file mode 100644
index 000000000..04b9f3a89
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/media_layout_bs.xml
@@ -0,0 +1,46 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_gravity="top">
+
+    <GridView
+        android:id="@+id/media_grid"
+        android:paddingLeft="2dp"
+        android:paddingRight="2dp"
+        android:paddingBottom="2dp"
+        android:clipToPadding="false"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:drawSelectorOnTop="true"
+        android:verticalSpacing="4dp"
+        android:horizontalSpacing="4dp"
+        android:numColumns="auto_fit"
+        android:stretchMode="columnWidth"
+        android:gravity="center"
+        android:listSelector="@drawable/list_selector"
+        android:layout_gravity="top"/>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:textColor="#808080"
+        android:gravity="center"
+        android:textSize="20dp"
+        android:id="@+id/searchEmptyView"
+        android:visibility="gone"/>
+
+    <LinearLayout
+        android:id="@+id/progressLayout"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:visibility="gone">
+
+        <ProgressBar
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
+
+    </LinearLayout>
+
+</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout_bs.xml b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout_bs.xml
new file mode 100644
index 000000000..7009f8bb0
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout_bs.xml
@@ -0,0 +1,63 @@
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_gravity="bottom"
+    android:orientation="horizontal"
+    android:layout_width="fill_parent"
+    android:layout_height="48dp"
+    android:background="#ff333333">
+
+    <Button
+        android:textSize="14dp"
+        android:textColor="#ffffff"
+        android:id="@+id/cancel_button"
+        android:background="@drawable/bar_selector_picker"
+        android:paddingLeft="3dp"
+        android:layout_width="0.0dip"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0"/>
+
+    <FrameLayout
+        android:id="@+id/done_button"
+        android:background="@drawable/bar_selector_picker"
+        android:paddingRight="3dp"
+        android:clickable="true"
+        android:layout_width="0dp"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0">
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:layout_gravity="center">
+
+            <TextView
+                android:textSize="13dp"
+                android:textColor="#ffffff"
+                android:gravity="center"
+                android:background="@drawable/photobadge"
+                android:layout_gravity="center"
+                android:layout_width="wrap_content"
+                android:layout_height="23dp"
+                android:minWidth="23dp"
+                android:id="@+id/done_button_badge"
+                android:paddingLeft="8dp"
+                android:paddingRight="8dp"
+                android:paddingBottom="1dp"
+                android:layout_marginRight="10dp"/>
+
+            <TextView
+                android:textSize="14dp"
+                android:textColor="#ffffff"
+                android:gravity="center"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/done_button_text"
+                android:drawablePadding="8dp"
+                android:layout_gravity="center_vertical"/>
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_button.xml b/TMessagesProj/src/main/res/layout/widget_button.xml
new file mode 100644
index 000000000..8c2efe33a
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_button.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:background="@drawable/counter_circle">
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal">
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/counter_paperplan"
+        android:layout_gravity="center_vertical"
+        android:paddingLeft="10dp"/>
+    <ImageView
+        android:id="@+id/counter"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/counter_list"
+        android:visibility="visible"
+        android:scaleType="fitXY"
+        android:layout_gravity="center_vertical"
+        android:paddingLeft="15dp"
+        android:paddingRight="10dp"/>
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/unread_count"
+        android:textColor="@android:color/white"
+        android:fontFamily="Roboto Yota"
+        android:paddingLeft="15dp"
+        android:paddingRight="7dp"
+        android:visibility="gone"
+        android:layout_gravity="center_vertical"/>
+    </LinearLayout>
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_large_sms_missed_1_container_layout.xml b/TMessagesProj/src/main/res/layout/widget_large_sms_missed_1_container_layout.xml
new file mode 100644
index 000000000..92410766e
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_large_sms_missed_1_container_layout.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    android:id="@+id/sms_missed_container"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:id="@+id/sms_missed"
+            style="@style/WidgetMessages"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"/>
+
+        <ImageView
+            android:id="@+id/button_speak_hide"
+            style="@style/ButtonSpeak"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|right"
+            android:visibility="gone"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="top"
+        android:gravity="center_vertical"
+        android:orientation="horizontal">
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical|left"
+            android:gravity="center_vertical">
+
+            <ImageView
+                android:id="@+id/time_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:src="@drawable/counter_paperplan"/>
+
+            <TextView
+                android:id="@+id/time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"/>
+        </LinearLayout>
+
+        <FrameLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1">
+
+            <ImageView
+                android:id="@+id/button_speak"
+                style="@style/ButtonSpeak"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_vertical|right"
+                android:visibility="invisible"/>
+        </FrameLayout>
+
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_large_sms_missed_2_container_layout.xml b/TMessagesProj/src/main/res/layout/widget_large_sms_missed_2_container_layout.xml
new file mode 100644
index 000000000..02d5b412c
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_large_sms_missed_2_container_layout.xml
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/sms_missed_2_container"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:visibility="gone"
+    tools:showIn="@layout/bs_telegram_image_large_widget">
+
+    <TextView
+        android:id="@+id/sms_missed_2"
+        style="@style/WidgetMessages"
+        android:layout_width="wrap_content"
+        android:layout_height="0dp"
+        android:layout_weight="1"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical"
+        android:orientation="horizontal">
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical|left"
+            android:gravity="center_vertical">
+
+            <ImageView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:src="@drawable/counter_paperplan"/>
+
+            <TextView
+                android:id="@+id/time_2"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"/>
+        </LinearLayout>
+
+        <FrameLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1">
+
+            <ImageView
+                android:id="@+id/button_speak_2"
+                style="@style/ButtonSpeak"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_vertical|right"
+                android:visibility="invisible"/>
+        </FrameLayout>
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_medium_sms_missed_container_layout.xml b/TMessagesProj/src/main/res/layout/widget_medium_sms_missed_container_layout.xml
new file mode 100644
index 000000000..a0bd53b6e
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_medium_sms_missed_container_layout.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/sms_missed_container"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal"
+    tools:showIn="@layout/bs_telegram_medium_widget">
+
+    <TextView
+        android:id="@+id/sms_missed"
+        style="@style/WidgetMessages"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_gravity="left|top"
+        android:layout_weight="1"/>
+
+    <ImageView
+        android:id="@+id/button_speak"
+        style="@style/ButtonSpeak"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|right"
+        android:visibility="gone"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_right_button_layout.xml b/TMessagesProj/src/main/res/layout/widget_right_button_layout.xml
new file mode 100644
index 000000000..57cbb0195
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_right_button_layout.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    android:id="@+id/right_button"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center_vertical|right"
+    android:background="@drawable/counter_circle"
+    android:gravity="center">
+
+    <ImageView
+        android:id="@+id/right_button_paperplan_image"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="2dp"
+        android:src="@drawable/counter_paperplan"
+        android:visibility="gone"/>
+
+    <ImageView
+        android:id="@+id/right_button_list_image"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="2dp"
+        android:src="@drawable/counter_list"
+        android:visibility="gone"/>
+
+    <TextView
+        android:id="@+id/right_button_count"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:fontFamily="Roboto Medium"
+        android:textColor="#ffffff"
+        android:layout_margin="2dp"
+        android:textSize="14.66sp"
+        android:visibility="gone"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_speak_to_layout.xml b/TMessagesProj/src/main/res/layout/widget_speak_to_layout.xml
new file mode 100644
index 000000000..e4269befe
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_speak_to_layout.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    android:id="@+id/recognizer_container"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="236.66dp"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <TextView
+        style="@style/SpeakTo"
+        android:layout_width="wrap_content"
+        android:layout_height="32dp"
+        android:gravity="bottom"
+        android:text="@string/SpeakAMessageTo"/>
+
+    <TextView
+        android:id="@+id/speak_to"
+        style="@style/SpeakToUser"
+        android:layout_width="wrap_content"
+        android:layout_height="32dp"
+        android:layout_marginBottom="21.33dp"
+        android:gravity="bottom"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/widget_text_right_button_layout.xml b/TMessagesProj/src/main/res/layout/widget_text_right_button_layout.xml
new file mode 100644
index 000000000..7fc87eb65
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/widget_text_right_button_layout.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+    <!--10.66dp-->
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="left"
+        android:fontFamily="Roboto Medium"
+        android:paddingBottom="5dp"
+        android:text="@string/LastFromYotagram"
+        android:textColor="#999999"
+        android:textSize="16sp"/>
+
+    <include layout="@layout/widget_right_button_layout"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 0f856f43a..0064e7e46 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -3,6 +3,40 @@
 
 
 <resources>
+    <!--yota views-->
+    <string name="NoItems">No new messages…</string>
+    <string name="NoItemsInfo">Last Messages</string>
+    <string name="empty_account_description">Set up your account at front screen</string>
+    <string name="StartMessagingWidget">Let\'s start using Yotagram!</string>
+    <integer name="demo_messages_count" translatable="false">2</integer>
+    <string name="demo_message_from">Johnatan Kinsley</string>
+    <string name="demo_message_text">I will show you something!</string>
+
+    <!--speech recognizer error-->
+    <string name="SpeechRecognizerErrorAudio">Audio recording error</string>
+    <string name="SpeechRecognizerErrorClient">Client side error</string>
+    <string name="SpeechRecognizerErrorInsufficientPermissions">Insufficient permissions</string>
+    <string name="SpeechRecognizerErrorNetwork">Network error</string>
+    <string name="SpeechRecognizerErrorNetworkTimeout">Network operation timed out</string>
+    <string name="SpeechRecognizerErrorNoMatch">No recognition result matched</string>
+    <string name="SpeechRecognizerErrorRecognizerBusy">Recognition service busy</string>
+    <string name="SpeechRecognizerErrorServer">Server sends error status</string>
+    <string name="SpeechRecognizerErrorSpeechTimeout">No speech input</string>
+    <string name="SpeechRecognizerError">Didn\'t understand, please try again</string>
+
+    <!--widget strings-->
+    <string name="LastFromYotagram">Last from Yotagram</string>
+    <string name="Yotagram">Yotagram</string>
+    <string name="WidgetToday">Today, %s</string>
+    <string name="WidgetYesterday">Yesterday</string>
+    <string name="WidgetDayAgo">%s day ago</string>
+    <string name="ChatTypePersonal">Personal chat</string>
+    <string name="ChatTypeGroup">Group chat</string>
+    <string name="ChatTypeSecret">Secret chat</string>
+    <string name="SpeakAMessageTo">Speak a message to</string>
+
+    <!--widget format strings-->
+
     <string name="AppName">Telegram</string>
     <string name="LanguageName">English</string>
     <string name="LanguageNameInEnglish">English</string>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index bf12e881b..517084ddb 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -70,4 +70,50 @@
         <item name="android:textColor">#000000</item>
     </style>
 
+    <!--WIDGET-->
+
+    <style name="WidgetMessages">
+        <item name="android:layout_marginBottom">5dp</item>
+        <item name="android:layout_marginTop">5dp</item>
+        <item name="android:ellipsize">end</item>
+        <item name="android:fontFamily">Roboto Yota</item>
+        <item name="android:maxLines">2</item>
+        <item name="android:textColor">@android:color/white</item>
+        <item name="android:textSize">25sp</item>
+    </style>
+
+    <style name="RecognizerError">
+        <item name="android:background">@android:color/black</item>
+        <item name="android:ellipsize">end</item>
+        <item name="android:fontFamily">Roboto Yota</item>
+        <item name="android:maxLines">5</item>
+        <item name="android:textColor">@android:color/white</item>
+        <item name="android:textSize">20sp</item>
+    </style>
+
+    <style name="ButtonSpeak">
+        <item name="android:padding">5dp</item>
+        <item name="android:src">@drawable/ic_mic</item>
+    </style>
+
+    <style name="TimeBar">
+        <item name="android:textSize">24sp</item>
+        <item name="android:foreground">#999999</item>
+        <item name="android:fontFamily">Roboto Medium</item>
+    </style>
+
+    <style name="SpeakToUser">
+        <item name="android:fontFamily">Roboto</item>
+        <item name="android:maxLines">2</item>
+        <item name="android:textColor">#ffffff</item>
+        <item name="android:textSize">25.33sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+
+    <style name="SpeakTo">
+        <item name="android:fontFamily">Roboto Regular</item>
+        <item name="android:textColor">#ffffff</item>
+        <item name="android:textSize">20sp</item>
+    </style>
+
 </resources>
diff --git a/TMessagesProj/src/main/res/xml/bs_widget_info.xml b/TMessagesProj/src/main/res/xml/bs_widget_info.xml
new file mode 100644
index 000000000..524970af7
--- /dev/null
+++ b/TMessagesProj/src/main/res/xml/bs_widget_info.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<backscreen-widget-provider
+    xmlns:sdk="http://schemas.android.com/apk/com.yotadevices.sdk"
+    sdk:category="Communication"
+    sdk:size="large|medium"/>
+
diff --git a/TMessagesProj/src/main/res/xml/dpi_test_widget_info.xml b/TMessagesProj/src/main/res/xml/dpi_test_widget_info.xml
new file mode 100644
index 000000000..dc67d5435
--- /dev/null
+++ b/TMessagesProj/src/main/res/xml/dpi_test_widget_info.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
+    android:minHeight="10dp"
+    android:minWidth="10dp"
+    android:resizeMode="vertical|horizontal"
+    android:updatePeriodMillis="0"
+    android:widgetCategory=""
+    android:configure="org.telegram.bsui.SettingsActivity">
+</appwidget-provider>
\ No newline at end of file
