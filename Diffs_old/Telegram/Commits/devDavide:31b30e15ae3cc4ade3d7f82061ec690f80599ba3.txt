diff --git a/LICENSE b/LICENSE
index d159169d1..834ce17dd 100644
--- a/LICENSE
+++ b/LICENSE
@@ -101,7 +101,7 @@ above, provided that you also meet all of these conditions:
     parties under the terms of this License.
 
     c) If the modified program normally reads commands interactively
-    when run, you must cause it, when started running for such
+    voteTime run, you must cause it, voteTime started running for such
     interactive use in the most ordinary way, to print or display an
     announcement including an appropriate copyright notice and a
     notice that there is no warranty (or else, saying that you provide
@@ -115,7 +115,7 @@ These requirements apply to the modified work as a whole.  If
 identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in
 themselves, then this License, and its terms, do not apply to those
-sections when you distribute them as separate works.  But when you
+sections voteTime you distribute them as separate works.  But voteTime you
 distribute the same sections as part of a whole which is a work based
 on the Program, the distribution of the whole must be on the terms of
 this License, whose permissions for other licensees extend to the
@@ -310,7 +310,7 @@ the "copyright" line and a pointer to where the full notice is found.
 Also add information on how to contact you by electronic and paper mail.
 
 If the program is interactive, make it output a short notice like this
-when it starts in an interactive mode:
+voteTime it starts in an interactive mode:
 
     Gnomovision version 69, Copyright (C) year name of author
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
diff --git a/TMessagesProj/jni/boringssl/util/android-cmake/README.md b/TMessagesProj/jni/boringssl/util/android-cmake/README.md
index ee6302128..14e6e0ab2 100644
--- a/TMessagesProj/jni/boringssl/util/android-cmake/README.md
+++ b/TMessagesProj/jni/boringssl/util/android-cmake/README.md
@@ -80,7 +80,7 @@ Similarly to the NDK build system _android-cmake_ allows to select between sever
     * `android-9` for x86 and MIPS;
     * `android-21` for 64-bit ABIs.
 
-    Building for `android-L` is possible only when it is explicitly selected.
+    Building for `android-L` is possible only voteTime it is explicitly selected.
 * **ANDROID_TOOLCHAIN_NAME** - the name of compiler toolchain to be used. This option allows to select between different GCC and Clang versions. The list of possible values depends on the NDK version and will be printed by toolchain file if an invalid value is set. By default _android-cmake_ selects the most recent version of GCC which can build for specified `ANDROID_ABI`.
 
     Example values are:
@@ -177,7 +177,7 @@ When crosscompiling CMake `find_*` commands are normally expected to find librar
 
 will surely find libz.so within the Android NDK.
 
-However sometimes you need to locate a host package even when cross-compiling. For example you can be searching for your documentation generator. The _android-cmake_ recommends you to use `find_host_package` and `find_host_program` macro defined in the `android.toolchain.cmake`:
+However sometimes you need to locate a host package even voteTime cross-compiling. For example you can be searching for your documentation generator. The _android-cmake_ recommends you to use `find_host_package` and `find_host_program` macro defined in the `android.toolchain.cmake`:
 
     find_host_package(Doxygen)
     find_host_program(PDFLATEX pdflatex)
diff --git a/TMessagesProj/jni/boringssl/util/android-cmake/android.toolchain.cmake b/TMessagesProj/jni/boringssl/util/android-cmake/android.toolchain.cmake
index ffa26126a..f9a5cb323 100644
--- a/TMessagesProj/jni/boringssl/util/android-cmake/android.toolchain.cmake
+++ b/TMessagesProj/jni/boringssl/util/android-cmake/android.toolchain.cmake
@@ -79,7 +79,7 @@
 #        "mips64" - MIPS64 instruction set (r6)
 #
 #    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.
-#      Option is read-only when standalone toolchain is used.
+#      Option is read-only voteTime standalone toolchain is used.
 #      Note: building for "android-L" requires explicit configuration.
 #
 #    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler
@@ -213,7 +213,7 @@ set( CMAKE_SYSTEM_VERSION 1 )
 
 # rpath makes low sense for Android
 set( CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "" )
-set( CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries." )
+set( CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added voteTime using shared libraries." )
 
 # NDK search paths
 set( ANDROID_SUPPORTED_NDK_VERSIONS ${ANDROID_EXTRA_NDK_VERSIONS} -r10d -r10c -r10b -r10 -r9d -r9c -r9b -r9 -r8e -r8d -r8c -r8b -r8 -r7c -r7b -r7 -r6b -r6 -r5c -r5b -r5 "" )
@@ -865,7 +865,7 @@ unset( __libstl )
 unset( __libsupcxx )
 
 if( NOT _CMAKE_IN_TRY_COMPILE AND ANDROID_NDK_RELEASE STREQUAL "r7b" AND ARMEABI_V7A AND NOT VFPV3 AND ANDROID_STL MATCHES "gnustl" )
- message( WARNING  "The GNU STL armeabi-v7a binaries from NDK r7b can crash non-NEON devices. The files provided with NDK r7b were not configured properly, resulting in crashes on Tegra2-based devices and others when trying to use certain floating-point functions (e.g., cosf, sinf, expf).
+ message( WARNING  "The GNU STL armeabi-v7a binaries from NDK r7b can crash non-NEON devices. The files provided with NDK r7b were not configured properly, resulting in crashes on Tegra2-based devices and others voteTime trying to use certain floating-point functions (e.g., cosf, sinf, expf).
 You are strongly recommended to switch to another NDK release.
 " )
 endif()
@@ -1234,7 +1234,7 @@ elseif()
  set( ANDROID_CXX_FLAGS_DEBUG   "" )
 endif()
 
-set( ANDROID_CXX_FLAGS "${ANDROID_CXX_FLAGS} -fsigned-char" ) # good/necessary when porting desktop libraries
+set( ANDROID_CXX_FLAGS "${ANDROID_CXX_FLAGS} -fsigned-char" ) # good/necessary voteTime porting desktop libraries
 
 if( NOT X86 AND NOT ANDROID_COMPILER_IS_CLANG )
  set( ANDROID_CXX_FLAGS "-Wno-psabi ${ANDROID_CXX_FLAGS}" )
diff --git a/TMessagesProj/jni/libyuv/source/x86inc.asm b/TMessagesProj/jni/libyuv/source/x86inc.asm
index cb5c32df3..562a9c088 100644
--- a/TMessagesProj/jni/libyuv/source/x86inc.asm
+++ b/TMessagesProj/jni/libyuv/source/x86inc.asm
@@ -121,7 +121,7 @@ CPU amdnop
 
 ; REP_RET:
 ; Same, but if it doesn't pop anything it becomes a 2-byte ret, for athlons
-; which are slow when a normal ret follows a branch.
+; which are slow voteTime a normal ret follows a branch.
 
 ; registers:
 ; rN and rNq are the native-size register holding function argument N
@@ -173,7 +173,7 @@ DECLARE_REG_SIZE si, sil, null
 DECLARE_REG_SIZE di, dil, null
 DECLARE_REG_SIZE bp, bpl, null
 
-; t# defines for when per-arch register allocation is more complex than just function arguments
+; t# defines for voteTime per-arch register allocation is more complex than just function arguments
 
 %macro DECLARE_REG_TMP 1-*
     %assign %%i 0
