diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index e34240e88..d99492063 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -7,7 +7,6 @@
 import android.content.SharedPreferences;
 import android.os.Handler;
 import android.os.IBinder;
-import android.provider.Settings;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -18,7 +17,6 @@
 import org.cloudveil.messenger.api.model.response.SettingsResponse;
 import org.cloudveil.messenger.api.service.holder.ServiceClientHolders;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.DialogObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
@@ -40,9 +38,13 @@
 
 public class ChannelCheckingService extends Service {
     private static final String ACTION_CHECK_CHANNELS = "org.cloudveil.messenger.service.check.channels";
+    private static final String EXTRA_ADDITION_DIALOG_ID = "extra_dialog_id";
     private static final long DEBOUNCE_TIME_MS = 200;
+
     private Disposable subscription;
     Handler handler = new Handler();
+    private long additionalDialogId = 0;
+
 
     @Nullable
     @Override
@@ -56,11 +58,23 @@ public static void startDataChecking(@NonNull Context context) {
         context.startService(intent);
     }
 
+    public static void startDataChecking(long dialogId, @NonNull Context context) {
+        Intent intent = new Intent(ACTION_CHECK_CHANNELS);
+        intent.setClass(context, ChannelCheckingService.class);
+        intent.putExtra(EXTRA_ADDITION_DIALOG_ID, dialogId);
+        context.startService(intent);
+    }
+
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent != null && intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS)) {
             handler.removeCallbacks(checkDataRunnable);
+            long additionalId = intent.getLongExtra(EXTRA_ADDITION_DIALOG_ID, 0);
+            if(additionalId != 0) {
+                additionalDialogId = additionalId;
+            }
+
             handler.postDelayed(checkDataRunnable, DEBOUNCE_TIME_MS);
         }
         return super.onStartCommand(intent, flags, startId);
@@ -216,57 +230,66 @@ private void addDialogsToRequest(@NonNull SettingsRequest request) {
         addDialogsToRequest(request, MessagesController.getInstance().dialogsForward);
         addDialogsToRequest(request, MessagesController.getInstance().dialogsGroupsOnly);
         addDialogsToRequest(request, MessagesController.getInstance().dialogsServerOnly);
+
+        if(additionalDialogId != 0) {
+            addDialogToRequest(additionalDialogId, request);
+            additionalDialogId = 0;
+        }
     }
 
     private void addDialogsToRequest(@NonNull SettingsRequest request, ArrayList<TLRPC.TL_dialog> dialogs) {
-        //this is very complicated code from Telegram core to separate dialogs to users, groups and channels
         for (TLRPC.TL_dialog dlg : dialogs) {
             long currentDialogId = dlg.id;
-            int lower_id = (int) currentDialogId;
-            int high_id = (int) (currentDialogId >> 32);
-            TLRPC.Chat chat = null;
-            TLRPC.User user = null;
-            if (lower_id != 0) {
-                if (high_id == 1) {
-                    chat = MessagesController.getInstance().getChat(lower_id);
-                } else {
-                    if (lower_id < 0) {
-                        chat = MessagesController.getInstance().getChat(-lower_id);
-                        if (chat != null && chat.migrated_to != null) {
-                            TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
-                            if (chat2 != null) {
-                                chat = chat2;
-                            }
+            addDialogToRequest(currentDialogId, request);
+        }
+    }
+
+    private void addDialogToRequest(long currentDialogId, @NonNull SettingsRequest request) {
+        //this is very complicated code from Telegram core to separate dialogs to users, groups and channels
+        int lower_id = (int) currentDialogId;
+        int high_id = (int) (currentDialogId >> 32);
+        TLRPC.Chat chat = null;
+        TLRPC.User user = null;
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    if (chat != null && chat.migrated_to != null) {
+                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        if (chat2 != null) {
+                            chat = chat2;
                         }
-                    } else {
-                        user = MessagesController.getInstance().getUser(lower_id);
                     }
-                }
-            } else {
-                TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
-                if (encryptedChat != null) {
-                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
                 }
             }
+        } else {
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+        }
 
-            SettingsRequest.Row row = new SettingsRequest.Row();
-            row.id = dlg.id;
-            if (chat != null) {
-                row.title = chat.title;
-                row.userName = chat.username;
+        SettingsRequest.Row row = new SettingsRequest.Row();
+        row.id = currentDialogId;
+        if (chat != null) {
+            row.title = chat.title;
+            row.userName = chat.username;
 
-                if (DialogObject.isChannel(dlg)) {
-                    request.addChannel(row);
-                } else {
-                    request.addGroup(row);
-                }
-            } else if (user != null) {
-                if (user.bot) {
-                    row.id = user.id;
-                    row.title = user.username;
-                    row.userName = user.username;
-                    request.addBot(row);
-                }
+            if (chat instanceof TLRPC.TL_channel) {
+                request.addChannel(row);
+            } else {
+                request.addGroup(row);
+            }
+        } else if (user != null) {
+            if (user.bot) {
+                row.id = user.id;
+                row.title = user.username;
+                row.userName = user.username;
+                request.addBot(row);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index da4d281f7..fabdcb73a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -9034,10 +9034,6 @@ public void onClick(DialogInterface dialog, int which) {
     }
 
     //CLoudVeil start
-    public boolean isDialogAllowed(TLRPC.TL_dialog dialog) {
-        return isDialogIdAllowed(dialog.id);
-    }
-
     public boolean isUserAllowed(TLRPC.User user) {
         if (user.bot) {
             if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
@@ -9088,20 +9084,50 @@ public boolean isDialogIdAllowed(long currentDialogId) {
         return false;
     }
 
-
-    public ArrayList<TLRPC.TL_dialog> filterDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
-        return dialogs;
-      /*todo remove  ArrayList<TLRPC.TL_dialog> filtered = new ArrayList<>();
-        if (dialogs == null) {
-            return filtered;
+    public boolean isDialogCheckedOnServer(long currentDialogId) {
+        int lower_id = (int) currentDialogId;
+        int high_id = (int) (currentDialogId >> 32);
+        TLRPC.Chat chat = null;
+        TLRPC.User user = null;
+        TLRPC.EncryptedChat encryptedChat = null;
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    if (chat != null && chat.migrated_to != null) {
+                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        if (chat2 != null) {
+                            chat = chat2;
+                        }
+                    }
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
+                }
+            }
+        } else {
+            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
         }
-        int i = 0;
-        for (TLRPC.TL_dialog dlg : dialogs) {
-            if (isDialogAllowed(dlg)) {
-                filtered.add(dlg);
+
+        if (chat != null) {
+            return allowedDialogs.containsKey(currentDialogId);
+        } else if (user != null) {
+            if (user.bot) {
+                long id = (long) user.id;
+                return allowedBots.containsKey(id);
             }
+            return true;
         }
-        return filtered;*/
+        return false;
+    }
+
+
+    public ArrayList<TLRPC.TL_dialog> filterDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
+        return dialogs;//no filter yet
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 9e7ab246e..79c49ce2b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -75,6 +75,7 @@
 import android.widget.Toast;
 
 import org.cloudveil.messenger.GlobalSecuritySettings;
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
@@ -173,6 +174,7 @@
 
 import java.io.File;
 import java.net.URLDecoder;
+import java.nio.channels.Channel;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collections;
@@ -366,7 +368,9 @@
     private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[]{new HashMap<>(), new HashMap<>()};
     private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
 
-
+    //CloudVeil start
+    protected ArrayList<MessageObject> messagesOld = new ArrayList<>();
+    //CloudVeil end
     protected ArrayList<MessageObject> messages = new ArrayList<>();
     private HashMap<Long, MessageObject.GroupedMessages> groupedMessagesMap = new HashMap<>();
     private int maxMessageId[] = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
@@ -783,6 +787,9 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.channelRightsUpdated);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateMentionsCount);
+        //CloudVeil start
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.filterDialogsReady);
+        //CloudVeil end
 
         super.onFragmentCreate();
 
@@ -918,6 +925,9 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.channelRightsUpdated);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateMentionsCount);
+        //CloudVeil start
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+        //CloudVeil end
 
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
@@ -1731,6 +1741,12 @@ public boolean onTouch(View v, MotionEvent event) {
                 } else {
                     emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
                 }
+                //CloudVeil start
+                if (!MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
+                    emptyView.setText(LocaleController.getString("cloudveil_hidden_for_protection", R.string.cloudveil_hidden_for_protection));
+                }
+                //CloudVeil end
+
                 emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                 emptyView.setGravity(Gravity.CENTER);
                 emptyView.setTextColor(Theme.getColor(Theme.key_chat_serviceText));
@@ -6469,7 +6485,20 @@ public boolean processSendingText(String text) {
 
     @Override
     public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.messagesDidLoaded) {
+        //CloudVeil start
+        if (id == NotificationCenter.filterDialogsReady) {
+            MessagesController messagesController = MessagesController.getInstance();
+            boolean isDialogAllowed = messagesController.isDialogIdAllowed(dialog_id);
+            if (messagesController.isDialogCheckedOnServer(dialog_id) && isDialogAllowed) {
+                messages = messagesController.filterMessages(messagesOld);
+                chatAdapter.notifyDataSetChanged();
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+            } else if (!isDialogAllowed) {
+                showWarning(getParentActivity());
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+            }
+            //ClloudVeil end
+        } else if (id == NotificationCenter.messagesDidLoaded) {
             int guid = (Integer) args[10];
             if (guid == classGuid) {
                 if (!openAnimationEnded) {
@@ -8641,7 +8670,16 @@ public void run() {
         }
 
         //CloudVeil start
-        messages = MessagesController.getInstance().filterMessages(messages);
+        for(MessageObject message : messages) {
+            messagesOld.add(message);
+        }
+        if (MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
+            messages = MessagesController.getInstance().filterMessages(messages);
+        } else {
+            messages = new ArrayList<>();
+            ChannelCheckingService.startDataChecking(dialog_id, getParentActivity());
+        }
+
         chatAdapter.notifyDataSetChanged();
         //CloudVeil end
     }
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index dabe9a125..6bdf192b9 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1784,4 +1784,5 @@
     <string name="cloudveil_message_warning">CloudVeil Messenger uses a server based system to control access to Bots, Channels, and Groups and other policy rules. This is used to block unacceptable content. Your Telegram id and list of channels, bots, and groups will be sent to our system to allow this to work. We do not have access to your messages themselves.</string>
     <string name="warning">Warning</string>
     <string name="cloudveil_message_dialog_forbidden">This channel/group/bot is blocked by our server policy.  Please contact CloudVeil Support at support@cloudveil.org to request it be unblocked.</string>
+    <string name="cloudveil_hidden_for_protection">Content blocked for your protection.</string>
 </resources>
