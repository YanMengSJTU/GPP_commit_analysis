diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserActivity.java
new file mode 100644
index 000000000..a279405d4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserActivity.java
@@ -0,0 +1,350 @@
+package org.telegram.ui.tools.AddUserToChat;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+import com.google.android.gms.maps.model.GroundOverlayOptions;
+import java.util.ArrayList;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.C0859R;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.NotificationCenter.NotificationCenterDelegate;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.messenger.support.widget.RecyclerView.ItemAnimator;
+import org.telegram.messenger.support.widget.RecyclerView.OnScrollListener;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.tgnet.TLRPC.Chat;
+import org.telegram.tgnet.TLRPC.TL_dialog;
+import org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.HintDialogCell;
+import org.telegram.ui.Cells.ProfileSearchCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.RecyclerListView;
+import org.telegram.ui.Components.RecyclerListView.OnItemClickListener;
+import org.telegram.ui.Components.VideoPlayer;
+import org.telegram.ui.StickersActivity.TouchHelperCallback;
+
+public class AddUserActivity extends BaseFragment implements NotificationCenterDelegate {
+    private AddUserAdapter dialogsAdapter;
+    private LinearLayout emptyView;
+    private LinearLayoutManager layoutManager;
+    private RecyclerListView listView;
+    private ProgressBar progressView;
+    private int userId;
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.1 */
+    class C12141 implements Runnable {
+        final /* synthetic */ Context val$context;
+
+        C12141(Context context) {
+            this.val$context = context;
+        }
+
+        public void run() {
+            Theme.loadRecources(this.val$context);
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.2 */
+    class C12152 extends ActionBarMenuOnItemClick {
+        C12152() {
+        }
+
+        public void onItemClick(int id) {
+            if (id == -1) {
+                AddUserActivity.this.finishFragment();
+            } else if (id != 1) {
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.3 */
+    class C12163 extends LinearLayoutManager {
+        C12163(Context x0) {
+            super(x0);
+        }
+
+        public boolean supportsPredictiveItemAnimations() {
+            return false;
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.4 */
+    class C12174 implements OnItemClickListener {
+        C12174() {
+        }
+
+        public void onItemClick(View view, int position) {
+            if (AddUserActivity.this.listView != null && AddUserActivity.this.listView.getAdapter() != null && AddUserActivity.this.listView.getAdapter() == AddUserActivity.this.dialogsAdapter) {
+                TL_dialog dialog = AddUserActivity.this.dialogsAdapter.getItem(position);
+                if (dialog != null) {
+                    MessagesController.getInstance().addUserToChat(-((int) dialog.id), MessagesController.getInstance().getUser(Integer.valueOf(AddUserActivity.this.userId)), null, 0, null, null);
+                    Toast toast = Toast.makeText(AddUserActivity.this.getParentActivity(), LocaleController.getString("Done", C0859R.string.Done), 1);
+                    ((TextView) ((LinearLayout) toast.getView()).getChildAt(0)).setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                    toast.show();
+                    AddUserActivity.this.finishFragment();
+                }
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.5 */
+    class C12185 implements OnTouchListener {
+        C12185() {
+        }
+
+        public boolean onTouch(View v, MotionEvent event) {
+            return true;
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.AddUserToChat.AddUserActivity.6 */
+    class C12196 extends OnScrollListener {
+        C12196() {
+        }
+
+        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+        }
+
+        public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+        }
+    }
+
+    public AddUserActivity(Bundle args) {
+        super(args);
+    }
+
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        if (getArguments() != null) {
+            this.userId = this.arguments.getInt("userId", 0);
+        }
+        return true;
+    }
+
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    public View createView(Context context) {
+        AndroidUtilities.runOnUIThread(new C12141(context));
+        this.actionBar.setTitle(LocaleController.getString("SelectChat", C0859R.string.SelectChat));
+        this.actionBar.setBackButtonImage(C0859R.drawable.ic_ab_back);
+        this.actionBar.setActionBarMenuOnItemClick(new C12152());
+        FrameLayout frameLayout = new FrameLayout(context);
+        this.fragmentView = frameLayout;
+        this.listView = new RecyclerListView(context);
+        this.listView.setVerticalScrollBarEnabled(true);
+        this.listView.setItemAnimator(null);
+        this.listView.setInstantClick(true);
+        this.listView.setLayoutAnimation(null);
+        this.listView.setTag(Integer.valueOf(4));
+        this.layoutManager = new C12163(context);
+        this.layoutManager.setOrientation(1);
+        this.listView.setLayoutManager(this.layoutManager);
+        this.listView.setVerticalScrollbarPosition(LocaleController.isRTL ? 1 : 2);
+        frameLayout.addView(this.listView, LayoutHelper.createFrame(-1, GroundOverlayOptions.NO_DIMENSION));
+        this.listView.setOnItemClickListener(new C12174());
+        this.emptyView = new LinearLayout(context);
+        this.emptyView.setOrientation(1);
+        this.emptyView.setVisibility(8);
+        this.emptyView.setGravity(17);
+        frameLayout.addView(this.emptyView, LayoutHelper.createFrame(-1, GroundOverlayOptions.NO_DIMENSION));
+        this.emptyView.setOnTouchListener(new C12185());
+        TextView textView = new TextView(context);
+        textView.setText(LocaleController.getString("NoChats", C0859R.string.NoChats));
+        textView.setTextColor(-6974059);
+        textView.setGravity(17);
+        textView.setTextSize(1, 20.0f);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        this.emptyView.addView(textView, LayoutHelper.createLinear(-2, -2));
+        textView = new TextView(context);
+        String help = LocaleController.getString("NoChatsHelp", C0859R.string.NoChatsHelp);
+        if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
+            help = help.replace('\n', ' ');
+        }
+        textView.setText(help);
+        textView.setTextColor(-6974059);
+        textView.setTextSize(1, 15.0f);
+        textView.setGravity(17);
+        textView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(6.0f), AndroidUtilities.dp(8.0f), 0);
+        textView.setLineSpacing((float) AndroidUtilities.dp(2.0f), TouchHelperCallback.ALPHA_FULL);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        this.emptyView.addView(textView, LayoutHelper.createLinear(-2, -2));
+        this.progressView = new ProgressBar(context);
+        this.progressView.setVisibility(8);
+        frameLayout.addView(this.progressView, LayoutHelper.createFrame(-2, -2, 17));
+        this.listView.setOnScrollListener(new C12196());
+        this.dialogsAdapter = new AddUserAdapter(context);
+        this.listView.setAdapter(this.dialogsAdapter);
+        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+            this.emptyView.setVisibility(8);
+            this.listView.setEmptyView(this.progressView);
+        } else {
+            this.progressView.setVisibility(8);
+            this.listView.setEmptyView(this.emptyView);
+        }
+        return this.fragmentView;
+    }
+
+    public void onResume() {
+        super.onResume();
+        if (this.dialogsAdapter != null) {
+            this.dialogsAdapter.notifyDataSetChanged();
+        }
+    }
+
+    protected void onDialogDismiss(Dialog dialog) {
+        super.onDialogDismiss(dialog);
+    }
+
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+    }
+
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == 1) {
+            int a = 0;
+            while (a < permissions.length) {
+                if (grantResults.length > a && grantResults[a] == 0) {
+                    String str = permissions[a];
+                    Object obj = -1;
+                    switch (str.hashCode()) {
+                        case 1365911975:
+                            if (str.equals("android.permission.WRITE_EXTERNAL_STORAGE")) {
+                                int i = 1;
+                                break;
+                            }
+                            break;
+                        case 1977429404:
+                            if (str.equals("android.permission.READ_CONTACTS")) {
+                                obj = null;
+                                break;
+                            }
+                            break;
+                    }
+                    switch (obj) {
+                        case VideoPlayer.TRACK_DEFAULT /*0*/:
+                            ContactsController.getInstance().readContacts();
+                            break;
+                        case VideoPlayer.TYPE_AUDIO /*1*/:
+                            ImageLoader.getInstance().checkMediaPaths();
+                            break;
+                        default:
+                            break;
+                    }
+                }
+                a++;
+            }
+        }
+    }
+
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.dialogsNeedReload) {
+            if (this.dialogsAdapter != null) {
+                if (this.dialogsAdapter.isDataSetChanged()) {
+                    this.dialogsAdapter.notifyDataSetChanged();
+                } else {
+                    updateVisibleRows(TLRPC.MESSAGE_FLAG_HAS_BOT_ID);
+                }
+            }
+            if (this.listView != null) {
+                try {
+                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                        this.emptyView.setVisibility(8);
+                        this.listView.setEmptyView(this.progressView);
+                    } else {
+                        this.progressView.setVisibility(8);
+                        this.listView.setEmptyView(this.emptyView);
+                    }
+                } catch (Throwable e) {
+                    FileLog.m18e("tmessages", e);
+                }
+            }
+        } else if (id == NotificationCenter.emojiDidLoaded) {
+            updateVisibleRows(0);
+        } else if (id == NotificationCenter.updateInterfaces) {
+            updateVisibleRows(((Integer) args[0]).intValue());
+        } else if (id != NotificationCenter.appDidLogout) {
+            if (id == NotificationCenter.encryptedChatUpdated) {
+                updateVisibleRows(0);
+            } else if (id == NotificationCenter.contactsDidLoaded) {
+                updateVisibleRows(0);
+            } else if (id != NotificationCenter.openedChatChanged) {
+                if (id == NotificationCenter.notificationsSettingsUpdated) {
+                    updateVisibleRows(0);
+                } else if (id == NotificationCenter.messageReceivedByAck || id == NotificationCenter.messageReceivedByServer || id == NotificationCenter.messageSendError) {
+                    updateVisibleRows(ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT);
+                }
+            }
+        }
+        if (id == NotificationCenter.didLoadedReplyMessages) {
+            updateVisibleRows(0);
+        }
+    }
+
+    private ArrayList<TL_dialog> getDialogsArray() {
+        ArrayList<TL_dialog> allDialogs = new ArrayList();
+        allDialogs.addAll(MessagesController.getInstance().dialogs);
+        ArrayList<TL_dialog> dialogs = new ArrayList();
+        for (int i = 0; i < allDialogs.size(); i++) {
+            TL_dialog dialog = (TL_dialog) allDialogs.get(i);
+            int lower_id = (int) dialog.id;
+            boolean isChat = lower_id < 0 && ((int) (dialog.id >> 32)) != 1;
+            Chat chat = MessagesController.getInstance().getChat(Integer.valueOf(-lower_id));
+            if (isChat && (chat.creator || chat.editor)) {
+                dialogs.add(dialog);
+            }
+        }
+        return dialogs;
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (this.listView != null) {
+            int count = this.listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = this.listView.getChildAt(a);
+                if (child instanceof DialogCell) {
+                    DialogCell cell = (DialogCell) child;
+                    if ((mask & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
+                        cell.checkCurrentDialogIndex();
+                    } else if ((mask & TLRPC.USER_FLAG_UNUSED3) == 0) {
+                        cell.update(mask);
+                    }
+                } else if (child instanceof UserCell) {
+                    ((UserCell) child).update(mask);
+                } else if (child instanceof ProfileSearchCell) {
+                    ((ProfileSearchCell) child).update(mask);
+                } else if (child instanceof RecyclerListView) {
+                    RecyclerListView innerListView = (RecyclerListView) child;
+                    int count2 = innerListView.getChildCount();
+                    for (int b = 0; b < count2; b++) {
+                        View child2 = innerListView.getChildAt(b);
+                        if (child2 instanceof HintDialogCell) {
+                            ((HintDialogCell) child2).checkUnreadCounter(mask);
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserAdapter.java
new file mode 100644
index 000000000..e460e34a1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserAdapter.java
@@ -0,0 +1,108 @@
+package org.telegram.ui.tools.AddUserToChat;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import java.util.ArrayList;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.support.widget.RecyclerView.Adapter;
+import org.telegram.messenger.support.widget.RecyclerView.LayoutParams;
+import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
+import org.telegram.tgnet.TLRPC.Chat;
+import org.telegram.tgnet.TLRPC.TL_dialog;
+import org.telegram.ui.Cells.LoadingCell;
+
+public class AddUserAdapter extends Adapter {
+    private int currentCount;
+    private Context mContext;
+
+    private class Holder extends ViewHolder {
+        public Holder(View itemView) {
+            super(itemView);
+        }
+    }
+
+    public AddUserAdapter(Context context) {
+        this.mContext = context;
+    }
+
+    public boolean isDataSetChanged() {
+        int current = this.currentCount;
+        if (current != getItemCount() || current == 1) {
+            return true;
+        }
+        return false;
+    }
+
+    private ArrayList<TL_dialog> getDialogsArray() {
+        ArrayList<TL_dialog> allDialogs = new ArrayList();
+        allDialogs.addAll(MessagesController.getInstance().dialogs);
+        ArrayList<TL_dialog> dialogs = new ArrayList();
+        for (int i = 0; i < allDialogs.size(); i++) {
+            TL_dialog dialog = (TL_dialog) allDialogs.get(i);
+            int lower_id = (int) dialog.id;
+            boolean isChat = lower_id < 0 && ((int) (dialog.id >> 32)) != 1;
+            Chat chat = MessagesController.getInstance().getChat(Integer.valueOf(-lower_id));
+            if (isChat && (chat.creator || chat.editor)) {
+                dialogs.add(dialog);
+            }
+        }
+        return dialogs;
+    }
+
+    public int getItemCount() {
+        int count = getDialogsArray().size();
+        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+            return 0;
+        }
+        if (!MessagesController.getInstance().dialogsEndReached) {
+            count++;
+        }
+        this.currentCount = count;
+        return count;
+    }
+
+    public TL_dialog getItem(int i) {
+        ArrayList<TL_dialog> arrayList = getDialogsArray();
+        if (i < 0 || i >= arrayList.size()) {
+            return null;
+        }
+        return (TL_dialog) arrayList.get(i);
+    }
+
+    public void onViewAttachedToWindow(ViewHolder holder) {
+        if (holder.itemView instanceof AddUserDialogCell) {
+            ((AddUserDialogCell) holder.itemView).checkCurrentDialogIndex();
+        }
+    }
+
+    public long getItemId(int i) {
+        return (long) i;
+    }
+
+    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
+        View view = null;
+        if (viewType == 0) {
+            view = new AddUserDialogCell(this.mContext);
+        } else if (viewType == 1) {
+            view = new LoadingCell(this.mContext);
+        }
+        view.setLayoutParams(new LayoutParams(-1, -2));
+        return new Holder(view);
+    }
+
+    public void onBindViewHolder(ViewHolder viewHolder, int i) {
+        if (viewHolder.getItemViewType() == 0) {
+            AddUserDialogCell cell = viewHolder.itemView;
+            cell.useSeparator = i != getItemCount() + -1;
+            cell.setDialog(getItem(i), i);
+        }
+    }
+
+    public int getItemViewType(int i) {
+        if (i == getDialogsArray().size()) {
+            return 1;
+        }
+        return 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserDialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserDialogCell.java
new file mode 100644
index 000000000..5204b120c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/AddUserDialogCell.java
@@ -0,0 +1,946 @@
+package org.telegram.ui.tools.AddUserToChat;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import android.os.Build.VERSION;
+import android.text.Layout.Alignment;
+import android.text.SpannableStringBuilder;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.text.TextUtils.TruncateAt;
+import android.text.style.ForegroundColorSpan;
+import android.view.MotionEvent;
+import android.view.View.MeasureSpec;
+import java.util.ArrayList;
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.C0859R;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.Emoji;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ImageReceiver;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.UserObject;
+import org.telegram.messenger.query.DraftQuery;
+import org.telegram.messenger.support.widget.RecyclerView.ItemAnimator;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.tgnet.TLRPC.Chat;
+import org.telegram.tgnet.TLRPC.DraftMessage;
+import org.telegram.tgnet.TLRPC.EncryptedChat;
+import org.telegram.tgnet.TLRPC.TL_dialog;
+import org.telegram.tgnet.TLRPC.TL_encryptedChat;
+import org.telegram.tgnet.TLRPC.TL_encryptedChatDiscarded;
+import org.telegram.tgnet.TLRPC.TL_encryptedChatRequested;
+import org.telegram.tgnet.TLRPC.TL_encryptedChatWaiting;
+import org.telegram.tgnet.TLRPC.TL_messageService;
+import org.telegram.tgnet.TLRPC.TL_userEmpty;
+import org.telegram.tgnet.TLRPC.User;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Apogram.Theming.ApoTheme;
+import org.telegram.ui.Cells.BaseCell;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.StickersActivity.TouchHelperCallback;
+
+public class AddUserDialogCell extends BaseCell {
+    private static Paint backPaint;
+    private static Drawable botDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable checkDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable countDrawable;
+    private static Drawable countDrawableGrey;
+    private static TextPaint countPaint;
+    private static Drawable errorDrawable;
+    private static Drawable groupDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Paint linePaint;
+    private static Drawable lockDrawable;
+    private static TextPaint messagePaint;
+    private static TextPaint messagePrintingPaint;
+    private static Drawable muteDrawable;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint namePaint;
+    private static Drawable statusDrawable;
+    private static Drawable superGroupDrawable;
+    private static TextPaint timePaint;
+    private static Drawable verifiedDrawable;
+    private AvatarDrawable avatarDrawable;
+    private ImageReceiver avatarImage;
+    private int avatarTop;
+    private Chat chat;
+    private int checkDrawLeft;
+    private int checkDrawTop;
+    private StaticLayout countLayout;
+    private int countLeft;
+    private int countTop;
+    private int countWidth;
+    private long currentDialogId;
+    private int currentEditDate;
+    private boolean dialogMuted;
+    private DraftMessage draftMessage;
+    private boolean drawCheck1;
+    private boolean drawCheck2;
+    private boolean drawClock;
+    private boolean drawCount;
+    private boolean drawError;
+    private boolean drawNameBot;
+    private boolean drawNameBroadcast;
+    private boolean drawNameGroup;
+    private boolean drawNameLock;
+    private boolean drawNameSuperGroup;
+    private boolean drawVerified;
+    private EncryptedChat encryptedChat;
+    private int errorLeft;
+    private int errorTop;
+    private int halfCheckDrawLeft;
+    private int index;
+    private boolean isDialogCell;
+    private boolean isSelected;
+    private int lastMessageDate;
+    private CharSequence lastPrintString;
+    private int lastSendState;
+    private boolean lastUnreadState;
+    private MessageObject message;
+    private StaticLayout messageLayout;
+    private int messageLeft;
+    private int messageTop;
+    private StaticLayout nameLayout;
+    private int nameLeft;
+    private int nameLockLeft;
+    private int nameLockTop;
+    private int nameMuteLeft;
+    private StaticLayout timeLayout;
+    private int timeLeft;
+    private int timeTop;
+    private int unreadCount;
+    public boolean useSeparator;
+    private User user;
+
+    public AddUserDialogCell(Context context) {
+        super(context);
+        this.user = null;
+        this.chat = null;
+        this.encryptedChat = null;
+        this.lastPrintString = null;
+        this.useSeparator = false;
+        this.timeTop = AndroidUtilities.dp(17.0f);
+        this.checkDrawTop = AndroidUtilities.dp(18.0f);
+        this.messageTop = AndroidUtilities.dp(40.0f);
+        this.errorTop = AndroidUtilities.dp(39.0f);
+        this.countTop = AndroidUtilities.dp(39.0f);
+        this.avatarTop = AndroidUtilities.dp(10.0f);
+        if (namePaint == null) {
+            namePaint = new TextPaint(1);
+            namePaint.setTextSize((float) AndroidUtilities.dp(17.0f));
+            namePaint.setColor(Theme.STICKERS_SHEET_TITLE_TEXT_COLOR);
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            nameEncryptedPaint = new TextPaint(1);
+            nameEncryptedPaint.setTextSize((float) AndroidUtilities.dp(17.0f));
+            nameEncryptedPaint.setColor(-16734706);
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            messagePaint = new TextPaint(1);
+            messagePaint.setTextSize((float) AndroidUtilities.dp(16.0f));
+            messagePaint.setColor(Theme.DIALOGS_MESSAGE_TEXT_COLOR);
+            messagePaint.linkColor = Theme.DIALOGS_MESSAGE_TEXT_COLOR;
+            messagePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            linePaint = new Paint();
+            linePaint.setColor(-2302756);
+            backPaint = new Paint();
+            backPaint.setColor(251658240);
+            messagePrintingPaint = new TextPaint(1);
+            messagePrintingPaint.setTextSize((float) AndroidUtilities.dp(16.0f));
+            messagePrintingPaint.setColor(ApplicationLoader.applicationContext.getSharedPreferences("ApoTheme", 0).getInt("theme_dialog_file_color", ApoTheme.getThemeColor()));
+            messagePrintingPaint.setTypeface(ApoTheme.getSuperTypeFace());
+            timePaint = new TextPaint(1);
+            timePaint.setTextSize((float) AndroidUtilities.dp(13.0f));
+            timePaint.setColor(Theme.PINNED_PANEL_MESSAGE_TEXT_COLOR);
+            timePaint.setTypeface(ApoTheme.getSuperTypeFace());
+            countPaint = new TextPaint(1);
+            countPaint.setTextSize((float) AndroidUtilities.dp(13.0f));
+            countPaint.setColor(-1);
+            countPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            lockDrawable = getResources().getDrawable(C0859R.drawable.list_secret);
+            checkDrawable = getResources().getDrawable(C0859R.drawable.dialogs_check);
+            halfCheckDrawable = getResources().getDrawable(C0859R.drawable.dialogs_halfcheck);
+            clockDrawable = getResources().getDrawable(C0859R.drawable.msg_clock);
+            errorDrawable = getResources().getDrawable(C0859R.drawable.dialogs_warning);
+            countDrawable = getResources().getDrawable(C0859R.drawable.dialogs_badge);
+            countDrawableGrey = getResources().getDrawable(C0859R.drawable.dialogs_badge2);
+            groupDrawable = getResources().getDrawable(C0859R.drawable.list_group);
+            superGroupDrawable = getResources().getDrawable(C0859R.drawable.list_supergroup);
+            broadcastDrawable = getResources().getDrawable(C0859R.drawable.list_broadcast);
+            muteDrawable = getResources().getDrawable(C0859R.drawable.mute_grey);
+            verifiedDrawable = getResources().getDrawable(C0859R.drawable.check_list);
+            botDrawable = getResources().getDrawable(C0859R.drawable.bot_list);
+            statusDrawable = getResources().getDrawable(C0859R.drawable.status_circle);
+        }
+        setBackgroundResource(C0859R.drawable.list_selector);
+        this.avatarImage = new ImageReceiver(this);
+        this.avatarImage.setRoundRadius(AndroidUtilities.dp(26.0f));
+        this.avatarDrawable = new AvatarDrawable();
+    }
+
+    public void setDialog(TL_dialog dialog, int i) {
+        this.currentDialogId = dialog.id;
+        this.isDialogCell = true;
+        this.index = i;
+        update(0);
+    }
+
+    public void setDialog(long dialog_id, MessageObject messageObject, int date) {
+        boolean z;
+        this.currentDialogId = dialog_id;
+        this.message = messageObject;
+        this.isDialogCell = false;
+        this.lastMessageDate = date;
+        this.currentEditDate = messageObject != null ? messageObject.messageOwner.edit_date : 0;
+        this.unreadCount = 0;
+        if (messageObject == null || !messageObject.isUnread()) {
+            z = false;
+        } else {
+            z = true;
+        }
+        this.lastUnreadState = z;
+        if (this.message != null) {
+            this.lastSendState = this.message.messageOwner.send_state;
+        }
+        update(0);
+    }
+
+    public long getDialogId() {
+        return this.currentDialogId;
+    }
+
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        this.avatarImage.onDetachedFromWindow();
+    }
+
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        this.avatarImage.onAttachedToWindow();
+    }
+
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), (this.useSeparator ? 1 : 0) + AndroidUtilities.dp(72.0f));
+    }
+
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (this.currentDialogId == 0) {
+            super.onLayout(changed, left, top, right, bottom);
+        } else if (changed) {
+            buildLayout();
+        }
+    }
+
+    public boolean onTouchEvent(MotionEvent event) {
+        if (VERSION.SDK_INT >= 21 && getBackground() != null && (event.getAction() == 0 || event.getAction() == 2)) {
+            getBackground().setHotspot(event.getX(), event.getY());
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void buildLayout() {
+        String mess;
+        TextPaint currentNamePaint;
+        int nameWidth;
+        int w;
+        int avatarLeft;
+        int messageWidth;
+        String nameString = TtmlNode.ANONYMOUS_REGION_ID;
+        String timeString = TtmlNode.ANONYMOUS_REGION_ID;
+        String countString = null;
+        CharSequence messageString = TtmlNode.ANONYMOUS_REGION_ID;
+        CharSequence printingString = null;
+        if (this.isDialogCell) {
+            printingString = (CharSequence) MessagesController.getInstance().printingStrings.get(Long.valueOf(this.currentDialogId));
+        }
+        TextPaint currentNamePaint2 = namePaint;
+        TextPaint currentMessagePaint = messagePaint;
+        boolean checkMessage = true;
+        this.drawNameGroup = false;
+        this.drawNameSuperGroup = false;
+        this.drawNameBroadcast = false;
+        this.drawNameLock = false;
+        this.drawNameBot = false;
+        this.drawVerified = false;
+        if (this.encryptedChat != null) {
+            this.drawNameLock = true;
+            this.nameLockTop = AndroidUtilities.dp(16.5f);
+            if (LocaleController.isRTL) {
+                this.nameLockLeft = (getMeasuredWidth() - AndroidUtilities.dp((float) AndroidUtilities.leftBaseline)) - lockDrawable.getIntrinsicWidth();
+                this.nameLeft = AndroidUtilities.dp(14.0f);
+            } else {
+                this.nameLockLeft = AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+                this.nameLeft = AndroidUtilities.dp((float) (AndroidUtilities.leftBaseline + 4)) + lockDrawable.getIntrinsicWidth();
+            }
+        } else if (this.chat != null) {
+            if (this.chat.id < 0 || (ChatObject.isChannel(this.chat) && !this.chat.megagroup)) {
+                this.drawNameBroadcast = true;
+                this.nameLockTop = AndroidUtilities.dp(16.5f);
+            } else if (this.chat.id < 0 || (ChatObject.isChannel(this.chat) && this.chat.megagroup)) {
+                this.drawNameSuperGroup = true;
+                this.nameLockTop = AndroidUtilities.dp(17.5f);
+            } else {
+                this.drawNameGroup = true;
+                this.nameLockTop = AndroidUtilities.dp(17.5f);
+            }
+            this.drawVerified = this.chat.verified;
+            int measuredWidth;
+            int intrinsicWidth;
+            if (LocaleController.isRTL) {
+                measuredWidth = getMeasuredWidth() - AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+                intrinsicWidth = this.drawNameGroup ? groupDrawable.getIntrinsicWidth() : this.drawNameSuperGroup ? superGroupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth();
+                this.nameLockLeft = measuredWidth - intrinsicWidth;
+                this.nameLeft = AndroidUtilities.dp(14.0f);
+            } else {
+                this.nameLockLeft = AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+                measuredWidth = AndroidUtilities.dp((float) (AndroidUtilities.leftBaseline + 4));
+                intrinsicWidth = this.drawNameGroup ? groupDrawable.getIntrinsicWidth() : this.drawNameSuperGroup ? superGroupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth();
+                this.nameLeft = intrinsicWidth + measuredWidth;
+            }
+        } else {
+            if (LocaleController.isRTL) {
+                this.nameLeft = AndroidUtilities.dp(14.0f);
+            } else {
+                this.nameLeft = AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+            }
+            if (this.user != null) {
+                if (this.user.bot) {
+                    this.drawNameBot = true;
+                    this.nameLockTop = AndroidUtilities.dp(16.5f);
+                    if (LocaleController.isRTL) {
+                        this.nameLockLeft = (getMeasuredWidth() - AndroidUtilities.dp((float) AndroidUtilities.leftBaseline)) - botDrawable.getIntrinsicWidth();
+                        this.nameLeft = AndroidUtilities.dp(14.0f);
+                    } else {
+                        this.nameLockLeft = AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+                        this.nameLeft = AndroidUtilities.dp((float) (AndroidUtilities.leftBaseline + 4)) + botDrawable.getIntrinsicWidth();
+                    }
+                }
+                this.drawVerified = this.user.verified;
+            }
+        }
+        int lastDate = this.lastMessageDate;
+        if (this.lastMessageDate == 0 && this.message != null) {
+            lastDate = this.message.messageOwner.date;
+        }
+        if (this.isDialogCell) {
+            this.draftMessage = DraftQuery.getDraft(this.currentDialogId);
+            if ((this.draftMessage != null && ((TextUtils.isEmpty(this.draftMessage.message) && this.draftMessage.reply_to_msg_id == 0) || (lastDate > this.draftMessage.date && this.unreadCount != 0))) || (!(!ChatObject.isChannel(this.chat) || this.chat.megagroup || this.chat.creator || this.chat.editor) || (this.chat != null && (this.chat.left || this.chat.kicked)))) {
+                this.draftMessage = null;
+            }
+        } else {
+            this.draftMessage = null;
+        }
+        if (printingString != null) {
+            messageString = printingString;
+            this.lastPrintString = printingString;
+            currentMessagePaint = messagePrintingPaint;
+        } else {
+            this.lastPrintString = null;
+            SpannableStringBuilder stringBuilder;
+            if (this.draftMessage != null) {
+                checkMessage = false;
+                String draftString;
+                if (TextUtils.isEmpty(this.draftMessage.message)) {
+                    draftString = LocaleController.getString("Draft", C0859R.string.Draft);
+                    stringBuilder = SpannableStringBuilder.valueOf(draftString);
+                    stringBuilder.setSpan(new ForegroundColorSpan(Theme.DIALOGS_DRAFT_TEXT_COLOR), 0, draftString.length(), 33);
+                    Object messageString2 = stringBuilder;
+                } else {
+                    mess = this.draftMessage.message;
+                    if (mess.length() > 150) {
+                        mess = mess.substring(0, 150);
+                    }
+                    stringBuilder = SpannableStringBuilder.valueOf(String.format("%s: %s", new Object[]{LocaleController.getString("Draft", C0859R.string.Draft), mess.replace('\n', ' ')}));
+                    stringBuilder.setSpan(new ForegroundColorSpan(Theme.DIALOGS_DRAFT_TEXT_COLOR), 0, draftString.length() + 1, 33);
+                    messageString = Emoji.replaceEmoji(stringBuilder, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
+                }
+            } else if (this.message != null) {
+                User fromUser = null;
+                Chat fromChat = null;
+                if (this.message.isFromUser()) {
+                    fromUser = MessagesController.getInstance().getUser(Integer.valueOf(this.message.messageOwner.from_id));
+                } else {
+                    fromChat = MessagesController.getInstance().getChat(Integer.valueOf(this.message.messageOwner.to_id.channel_id));
+                }
+                if (this.message.messageOwner instanceof TL_messageService) {
+                    messageString = this.message.messageText;
+                    currentMessagePaint = messagePrintingPaint;
+                } else if (this.chat != null && this.chat.id > 0 && fromChat == null) {
+                    String name;
+                    if (this.message.isOutOwner()) {
+                        name = LocaleController.getString("FromYou", C0859R.string.FromYou);
+                    } else if (fromUser != null) {
+                        name = UserObject.getFirstName(fromUser).replace("\n", TtmlNode.ANONYMOUS_REGION_ID);
+                    } else if (fromChat != null) {
+                        name = fromChat.title.replace("\n", TtmlNode.ANONYMOUS_REGION_ID);
+                    } else {
+                        name = "DELETED";
+                    }
+                    checkMessage = false;
+                    int color = ApplicationLoader.applicationContext.getSharedPreferences("ApoTheme", 0).getInt("theme_dialog_file_color", ApoTheme.getThemeColor());
+                    if (this.message.caption != null) {
+                        mess = this.message.caption.toString();
+                        if (mess.length() > 150) {
+                            mess = mess.substring(0, 150);
+                        }
+                        stringBuilder = SpannableStringBuilder.valueOf(String.format("%s: %s", new Object[]{name, mess.replace('\n', ' ')}));
+                    } else if (this.message.messageOwner.media != null && !this.message.isMediaEmpty()) {
+                        currentMessagePaint = messagePrintingPaint;
+                        stringBuilder = SpannableStringBuilder.valueOf(String.format("%s: %s", new Object[]{name, this.message.messageText}));
+                        stringBuilder.setSpan(new ForegroundColorSpan(color), name.length() + 2, stringBuilder.length(), 33);
+                    } else if (this.message.messageOwner.message != null) {
+                        mess = this.message.messageOwner.message;
+                        if (mess.length() > 150) {
+                            mess = mess.substring(0, 150);
+                        }
+                        stringBuilder = SpannableStringBuilder.valueOf(String.format("%s: %s", new Object[]{name, mess.replace('\n', ' ')}));
+                    } else {
+                        stringBuilder = SpannableStringBuilder.valueOf(TtmlNode.ANONYMOUS_REGION_ID);
+                    }
+                    if (stringBuilder.length() > 0) {
+                        stringBuilder.setSpan(new ForegroundColorSpan(color), 0, name.length() + 1, 33);
+                    }
+                    messageString = Emoji.replaceEmoji(stringBuilder, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
+                } else if (this.message.caption != null) {
+                    messageString = this.message.caption;
+                } else {
+                    messageString = this.message.messageText;
+                    if (!(this.message.messageOwner.media == null || this.message.isMediaEmpty())) {
+                        currentMessagePaint = messagePrintingPaint;
+                    }
+                }
+            } else if (this.encryptedChat != null) {
+                currentMessagePaint = messagePrintingPaint;
+                if (this.encryptedChat instanceof TL_encryptedChatRequested) {
+                    messageString = LocaleController.getString("EncryptionProcessing", C0859R.string.EncryptionProcessing);
+                } else if (this.encryptedChat instanceof TL_encryptedChatWaiting) {
+                    messageString = (this.user == null || this.user.first_name == null) ? LocaleController.formatString("AwaitingEncryption", C0859R.string.AwaitingEncryption, TtmlNode.ANONYMOUS_REGION_ID) : LocaleController.formatString("AwaitingEncryption", C0859R.string.AwaitingEncryption, this.user.first_name);
+                } else if (this.encryptedChat instanceof TL_encryptedChatDiscarded) {
+                    messageString = LocaleController.getString("EncryptionRejected", C0859R.string.EncryptionRejected);
+                } else if (this.encryptedChat instanceof TL_encryptedChat) {
+                    messageString = this.encryptedChat.admin_id == UserConfig.getClientUserId() ? (this.user == null || this.user.first_name == null) ? LocaleController.formatString("EncryptedChatStartedOutgoing", C0859R.string.EncryptedChatStartedOutgoing, TtmlNode.ANONYMOUS_REGION_ID) : LocaleController.formatString("EncryptedChatStartedOutgoing", C0859R.string.EncryptedChatStartedOutgoing, this.user.first_name) : LocaleController.getString("EncryptedChatStartedIncoming", C0859R.string.EncryptedChatStartedIncoming);
+                }
+            }
+        }
+        if (this.draftMessage != null) {
+            timeString = LocaleController.stringForMessageListDate((long) this.draftMessage.date);
+        } else if (this.lastMessageDate != 0) {
+            timeString = LocaleController.stringForMessageListDate((long) this.lastMessageDate);
+        } else if (this.message != null) {
+            timeString = LocaleController.stringForMessageListDate((long) this.message.messageOwner.date);
+        }
+        if (this.message == null) {
+            this.drawCheck1 = false;
+            this.drawCheck2 = false;
+            this.drawClock = false;
+            this.drawCount = false;
+            this.drawError = false;
+        } else {
+            if (this.unreadCount != 0) {
+                this.drawCount = true;
+                countString = String.format("%d", new Object[]{Integer.valueOf(this.unreadCount)});
+            } else {
+                this.drawCount = false;
+            }
+            if (!this.message.isOut() || this.draftMessage != null) {
+                this.drawCheck1 = false;
+                this.drawCheck2 = false;
+                this.drawClock = false;
+                this.drawError = false;
+            } else if (this.message.isSending()) {
+                this.drawCheck1 = false;
+                this.drawCheck2 = false;
+                this.drawClock = true;
+                this.drawError = false;
+            } else if (this.message.isSendError()) {
+                this.drawCheck1 = false;
+                this.drawCheck2 = false;
+                this.drawClock = false;
+                this.drawError = true;
+                this.drawCount = false;
+            } else if (this.message.isSent()) {
+                boolean z = !this.message.isUnread() || (ChatObject.isChannel(this.chat) && !this.chat.megagroup);
+                this.drawCheck1 = z;
+                this.drawCheck2 = true;
+                this.drawClock = false;
+                this.drawError = false;
+            }
+        }
+        int timeWidth = (int) Math.ceil((double) timePaint.measureText(timeString));
+        this.timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Alignment.ALIGN_NORMAL, TouchHelperCallback.ALPHA_FULL, 0.0f, false);
+        if (LocaleController.isRTL) {
+            this.timeLeft = AndroidUtilities.dp(15.0f);
+        } else {
+            this.timeLeft = (getMeasuredWidth() - AndroidUtilities.dp(15.0f)) - timeWidth;
+        }
+        if (this.chat != null) {
+            nameString = this.chat.title;
+            currentNamePaint = currentNamePaint2;
+        } else {
+            if (this.user != null) {
+                if (this.user.id / 1000 == 777 || this.user.id / 1000 == 333 || ContactsController.getInstance().contactsDict.get(this.user.id) != null) {
+                    nameString = UserObject.getUserName(this.user);
+                } else if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
+                    nameString = UserObject.getUserName(this.user);
+                } else if (this.user.phone == null || this.user.phone.length() == 0) {
+                    nameString = UserObject.getUserName(this.user);
+                } else {
+                    nameString = PhoneFormat.getInstance().format("+" + this.user.phone);
+                }
+                if (this.encryptedChat != null) {
+                    currentNamePaint = nameEncryptedPaint;
+                }
+            }
+            currentNamePaint = currentNamePaint2;
+        }
+        if (nameString.length() == 0) {
+            nameString = LocaleController.getString("HiddenName", C0859R.string.HiddenName);
+        }
+        if (LocaleController.isRTL) {
+            nameWidth = ((getMeasuredWidth() - this.nameLeft) - AndroidUtilities.dp((float) AndroidUtilities.leftBaseline)) - timeWidth;
+            this.nameLeft += timeWidth;
+        } else {
+            nameWidth = ((getMeasuredWidth() - this.nameLeft) - AndroidUtilities.dp(14.0f)) - timeWidth;
+        }
+        if (this.drawNameLock) {
+            nameWidth -= AndroidUtilities.dp(4.0f) + lockDrawable.getIntrinsicWidth();
+        } else if (this.drawNameGroup) {
+            nameWidth -= AndroidUtilities.dp(4.0f) + groupDrawable.getIntrinsicWidth();
+        } else if (this.drawNameSuperGroup) {
+            nameWidth -= AndroidUtilities.dp(4.0f) + superGroupDrawable.getIntrinsicWidth();
+        } else if (this.drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.dp(4.0f) + broadcastDrawable.getIntrinsicWidth();
+        } else if (this.drawNameBot) {
+            nameWidth -= AndroidUtilities.dp(4.0f) + botDrawable.getIntrinsicWidth();
+        }
+        if (this.drawClock) {
+            w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5.0f);
+            nameWidth -= w;
+            if (LocaleController.isRTL) {
+                this.checkDrawLeft = (this.timeLeft + timeWidth) + AndroidUtilities.dp(5.0f);
+                this.nameLeft += w;
+            } else {
+                this.checkDrawLeft = this.timeLeft - w;
+            }
+        } else if (this.drawCheck2) {
+            w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5.0f);
+            nameWidth -= w;
+            if (this.drawCheck1) {
+                nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8.0f);
+                if (LocaleController.isRTL) {
+                    this.checkDrawLeft = (this.timeLeft + timeWidth) + AndroidUtilities.dp(5.0f);
+                    this.halfCheckDrawLeft = this.checkDrawLeft + AndroidUtilities.dp(5.5f);
+                    this.nameLeft += (halfCheckDrawable.getIntrinsicWidth() + w) - AndroidUtilities.dp(8.0f);
+                } else {
+                    this.halfCheckDrawLeft = this.timeLeft - w;
+                    this.checkDrawLeft = this.halfCheckDrawLeft - AndroidUtilities.dp(5.5f);
+                }
+            } else if (LocaleController.isRTL) {
+                this.checkDrawLeft = (this.timeLeft + timeWidth) + AndroidUtilities.dp(5.0f);
+                this.nameLeft += w;
+            } else {
+                this.checkDrawLeft = this.timeLeft - w;
+            }
+        }
+        if (this.dialogMuted && !this.drawVerified) {
+            w = AndroidUtilities.dp(6.0f) + muteDrawable.getIntrinsicWidth();
+            nameWidth -= w;
+            if (LocaleController.isRTL) {
+                this.nameLeft += w;
+            }
+        } else if (this.drawVerified) {
+            w = AndroidUtilities.dp(6.0f) + verifiedDrawable.getIntrinsicWidth();
+            nameWidth -= w;
+            if (LocaleController.isRTL) {
+                this.nameLeft += w;
+            }
+        }
+        nameWidth = Math.max(AndroidUtilities.dp(12.0f), nameWidth);
+        try {
+            this.nameLayout = new StaticLayout(TextUtils.ellipsize(nameString.replace('\n', ' '), currentNamePaint, (float) (nameWidth - AndroidUtilities.dp(12.0f)), TruncateAt.END), currentNamePaint, nameWidth, Alignment.ALIGN_NORMAL, TouchHelperCallback.ALPHA_FULL, 0.0f, false);
+        } catch (Throwable e) {
+            FileLog.m18e("tmessages", e);
+        }
+        int messageWidth2 = getMeasuredWidth() - AndroidUtilities.dp((float) (AndroidUtilities.leftBaseline + 16));
+        if (LocaleController.isRTL) {
+            this.messageLeft = AndroidUtilities.dp(16.0f);
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 65.0f : 61.0f);
+        } else {
+            this.messageLeft = AndroidUtilities.dp((float) AndroidUtilities.leftBaseline);
+            avatarLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 13.0f : 9.0f);
+        }
+        this.avatarImage.setImageCoords(avatarLeft, this.avatarTop, AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
+        if (this.drawError) {
+            w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8.0f);
+            messageWidth = messageWidth2 - w;
+            if (LocaleController.isRTL) {
+                this.errorLeft = AndroidUtilities.dp(11.0f);
+                this.messageLeft += w;
+            } else {
+                this.errorLeft = (getMeasuredWidth() - errorDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(11.0f);
+            }
+        } else if (countString != null) {
+            this.countWidth = Math.max(AndroidUtilities.dp(12.0f), (int) Math.ceil((double) countPaint.measureText(countString)));
+            this.countLayout = new StaticLayout(countString, countPaint, this.countWidth, Alignment.ALIGN_CENTER, TouchHelperCallback.ALPHA_FULL, 0.0f, false);
+            w = this.countWidth + AndroidUtilities.dp(18.0f);
+            messageWidth = messageWidth2 - w;
+            if (LocaleController.isRTL) {
+                this.countLeft = AndroidUtilities.dp(19.0f);
+                this.messageLeft += w;
+            } else {
+                this.countLeft = (getMeasuredWidth() - this.countWidth) - AndroidUtilities.dp(19.0f);
+            }
+            this.drawCount = true;
+        } else {
+            this.drawCount = false;
+            messageWidth = messageWidth2;
+        }
+        if (checkMessage) {
+            if (messageString == null) {
+                messageString = TtmlNode.ANONYMOUS_REGION_ID;
+            }
+            mess = messageString.toString();
+            if (mess.length() > 150) {
+                mess = mess.substring(0, 150);
+            }
+            messageString = Emoji.replaceEmoji(mess.replace('\n', ' '), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17.0f), false);
+        }
+        messageWidth = Math.max(AndroidUtilities.dp(12.0f), messageWidth);
+        try {
+            this.messageLayout = new StaticLayout(TextUtils.ellipsize(messageString, currentMessagePaint, (float) (messageWidth - AndroidUtilities.dp(12.0f)), TruncateAt.END), currentMessagePaint, messageWidth, Alignment.ALIGN_NORMAL, TouchHelperCallback.ALPHA_FULL, 0.0f, false);
+        } catch (Throwable e2) {
+            FileLog.m18e("tmessages", e2);
+        }
+        float left;
+        double widthpx;
+        if (LocaleController.isRTL) {
+            if (this.nameLayout != null && this.nameLayout.getLineCount() > 0) {
+                left = this.nameLayout.getLineLeft(0);
+                widthpx = Math.ceil((double) this.nameLayout.getLineWidth(0));
+                if (this.dialogMuted && !this.drawVerified) {
+                    this.nameMuteLeft = (int) (((((double) this.nameLeft) + (((double) nameWidth) - widthpx)) - ((double) AndroidUtilities.dp(6.0f))) - ((double) muteDrawable.getIntrinsicWidth()));
+                } else if (this.drawVerified) {
+                    this.nameMuteLeft = (int) (((((double) this.nameLeft) + (((double) nameWidth) - widthpx)) - ((double) AndroidUtilities.dp(6.0f))) - ((double) verifiedDrawable.getIntrinsicWidth()));
+                }
+                if (left == 0.0f && widthpx < ((double) nameWidth)) {
+                    this.nameLeft = (int) (((double) this.nameLeft) + (((double) nameWidth) - widthpx));
+                }
+            }
+            if (this.messageLayout != null && this.messageLayout.getLineCount() > 0 && this.messageLayout.getLineLeft(0) == 0.0f) {
+                widthpx = Math.ceil((double) this.messageLayout.getLineWidth(0));
+                if (widthpx < ((double) messageWidth)) {
+                    this.messageLeft = (int) (((double) this.messageLeft) + (((double) messageWidth) - widthpx));
+                    return;
+                }
+                return;
+            }
+            return;
+        }
+        if (this.nameLayout != null && this.nameLayout.getLineCount() > 0) {
+            left = this.nameLayout.getLineRight(0);
+            if (left == ((float) nameWidth)) {
+                widthpx = Math.ceil((double) this.nameLayout.getLineWidth(0));
+                if (widthpx < ((double) nameWidth)) {
+                    this.nameLeft = (int) (((double) this.nameLeft) - (((double) nameWidth) - widthpx));
+                }
+            }
+            if (this.dialogMuted || this.drawVerified) {
+                this.nameMuteLeft = (int) ((((float) this.nameLeft) + left) + ((float) AndroidUtilities.dp(6.0f)));
+            }
+        }
+        if (this.messageLayout != null && this.messageLayout.getLineCount() > 0 && this.messageLayout.getLineRight(0) == ((float) messageWidth)) {
+            widthpx = Math.ceil((double) this.messageLayout.getLineWidth(0));
+            if (widthpx < ((double) messageWidth)) {
+                this.messageLeft = (int) (((double) this.messageLeft) - (((double) messageWidth) - widthpx));
+            }
+        }
+    }
+
+    public void setDialogSelected(boolean value) {
+        if (this.isSelected != value) {
+            invalidate();
+        }
+        this.isSelected = value;
+    }
+
+    private ArrayList<TL_dialog> getDialogsArray() {
+        ArrayList<TL_dialog> allDialogs = new ArrayList();
+        allDialogs.addAll(MessagesController.getInstance().dialogs);
+        ArrayList<TL_dialog> dialogs = new ArrayList();
+        for (int i = 0; i < allDialogs.size(); i++) {
+            TL_dialog dialog = (TL_dialog) allDialogs.get(i);
+            int lower_id = (int) dialog.id;
+            boolean isChat = lower_id < 0 && ((int) (dialog.id >> 32)) != 1;
+            Chat chat = MessagesController.getInstance().getChat(Integer.valueOf(-lower_id));
+            if (isChat && (chat.creator || chat.editor)) {
+                dialogs.add(dialog);
+            }
+        }
+        return dialogs;
+    }
+
+    public void checkCurrentDialogIndex() {
+        if (this.index < getDialogsArray().size()) {
+            TL_dialog dialog = (TL_dialog) getDialogsArray().get(this.index);
+            DraftMessage newDraftMessage = DraftQuery.getDraft(this.currentDialogId);
+            MessageObject newMessageObject = (MessageObject) MessagesController.getInstance().dialogMessage.get(Long.valueOf(dialog.id));
+            if (this.currentDialogId != dialog.id || ((this.message != null && this.message.getId() != dialog.top_message) || ((newMessageObject != null && newMessageObject.messageOwner.edit_date != this.currentEditDate) || this.unreadCount != dialog.unread_count || this.message != newMessageObject || ((this.message == null && newMessageObject != null) || newDraftMessage != this.draftMessage)))) {
+                this.currentDialogId = dialog.id;
+                update(0);
+            }
+        }
+    }
+
+    public void update(int mask) {
+        TL_dialog dialog;
+        boolean z;
+        if (this.isDialogCell) {
+            dialog = (TL_dialog) MessagesController.getInstance().dialogs_dict.get(Long.valueOf(this.currentDialogId));
+            if (dialog != null && mask == 0) {
+                int i;
+                this.message = (MessageObject) MessagesController.getInstance().dialogMessage.get(Long.valueOf(dialog.id));
+                if (this.message == null || !this.message.isUnread()) {
+                    z = false;
+                } else {
+                    z = true;
+                }
+                this.lastUnreadState = z;
+                this.unreadCount = dialog.unread_count;
+                if (this.message != null) {
+                    i = this.message.messageOwner.edit_date;
+                } else {
+                    i = 0;
+                }
+                this.currentEditDate = i;
+                this.lastMessageDate = dialog.last_message_date;
+                if (this.message != null) {
+                    this.lastSendState = this.message.messageOwner.send_state;
+                }
+            }
+        }
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if (this.isDialogCell && (mask & 64) != 0) {
+                CharSequence printString = (CharSequence) MessagesController.getInstance().printingStrings.get(Long.valueOf(this.currentDialogId));
+                if ((this.lastPrintString != null && printString == null) || ((this.lastPrintString == null && printString != null) || !(this.lastPrintString == null || printString == null || this.lastPrintString.equals(printString)))) {
+                    continueUpdate = true;
+                }
+            }
+            if (!(continueUpdate || (mask & 2) == 0 || this.chat != null)) {
+                continueUpdate = true;
+            }
+            if (!(continueUpdate || (mask & 1) == 0 || this.chat != null)) {
+                continueUpdate = true;
+            }
+            if (!(continueUpdate || (mask & 8) == 0 || this.user != null)) {
+                continueUpdate = true;
+            }
+            if (!(continueUpdate || (mask & 16) == 0 || this.user != null)) {
+                continueUpdate = true;
+            }
+            if (!(continueUpdate || (mask & TLRPC.USER_FLAG_UNUSED2) == 0)) {
+                if (this.message != null && this.lastUnreadState != this.message.isUnread()) {
+                    this.lastUnreadState = this.message.isUnread();
+                    continueUpdate = true;
+                } else if (this.isDialogCell) {
+                    dialog = (TL_dialog) MessagesController.getInstance().dialogs_dict.get(Long.valueOf(this.currentDialogId));
+                    if (!(dialog == null || this.unreadCount == dialog.unread_count)) {
+                        this.unreadCount = dialog.unread_count;
+                        continueUpdate = true;
+                    }
+                }
+            }
+            if (!(continueUpdate || (mask & ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT) == 0 || this.message == null || this.lastSendState == this.message.messageOwner.send_state)) {
+                this.lastSendState = this.message.messageOwner.send_state;
+                continueUpdate = true;
+            }
+            if (!continueUpdate) {
+                return;
+            }
+        }
+        if (this.isDialogCell && MessagesController.getInstance().isDialogMuted(this.currentDialogId)) {
+            z = true;
+        } else {
+            z = false;
+        }
+        this.dialogMuted = z;
+        this.user = null;
+        this.chat = null;
+        this.encryptedChat = null;
+        int lower_id = (int) this.currentDialogId;
+        int high_id = (int) (this.currentDialogId >> 32);
+        if (lower_id == 0) {
+            this.encryptedChat = MessagesController.getInstance().getEncryptedChat(Integer.valueOf(high_id));
+            if (this.encryptedChat != null) {
+                this.user = MessagesController.getInstance().getUser(Integer.valueOf(this.encryptedChat.user_id));
+            }
+        } else if (high_id == 1) {
+            this.chat = MessagesController.getInstance().getChat(Integer.valueOf(lower_id));
+        } else if (lower_id < 0) {
+            this.chat = MessagesController.getInstance().getChat(Integer.valueOf(-lower_id));
+            if (!(this.isDialogCell || this.chat == null || this.chat.migrated_to == null)) {
+                Chat chat2 = MessagesController.getInstance().getChat(Integer.valueOf(this.chat.migrated_to.channel_id));
+                if (chat2 != null) {
+                    this.chat = chat2;
+                }
+            }
+        } else {
+            this.user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+        }
+        TLObject photo = null;
+        if (this.user != null) {
+            if (this.user.photo != null) {
+                photo = this.user.photo.photo_small;
+            }
+            this.avatarDrawable.setInfo(this.user);
+        } else if (this.chat != null) {
+            if (this.chat.photo != null) {
+                photo = this.chat.photo.photo_small;
+            }
+            this.avatarDrawable.setInfo(this.chat);
+        }
+        this.avatarImage.setImage(photo, "50_50", this.avatarDrawable, null, false);
+        if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) {
+            requestLayout();
+        } else {
+            buildLayout();
+        }
+        invalidate();
+    }
+
+    protected void onDraw(Canvas canvas) {
+        if (this.currentDialogId != 0) {
+            if (this.isSelected) {
+                canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), backPaint);
+            }
+            if (this.drawNameLock) {
+                setDrawableBounds(lockDrawable, this.nameLockLeft, this.nameLockTop);
+                lockDrawable.draw(canvas);
+            } else if (this.drawNameGroup) {
+                setDrawableBounds(groupDrawable, this.nameLockLeft, this.nameLockTop);
+                groupDrawable.draw(canvas);
+            } else if (this.drawNameSuperGroup) {
+                setDrawableBounds(superGroupDrawable, this.nameLockLeft, this.nameLockTop);
+                superGroupDrawable.draw(canvas);
+            } else if (this.drawNameBroadcast) {
+                setDrawableBounds(broadcastDrawable, this.nameLockLeft, this.nameLockTop);
+                broadcastDrawable.draw(canvas);
+            } else if (this.drawNameBot) {
+                setDrawableBounds(botDrawable, this.nameLockLeft, this.nameLockTop);
+                botDrawable.draw(canvas);
+            }
+            if (this.nameLayout != null) {
+                canvas.save();
+                canvas.translate((float) this.nameLeft, (float) AndroidUtilities.dp(13.0f));
+                this.nameLayout.draw(canvas);
+                canvas.restore();
+            }
+            canvas.save();
+            canvas.translate((float) this.timeLeft, (float) this.timeTop);
+            this.timeLayout.draw(canvas);
+            canvas.restore();
+            if (this.messageLayout != null) {
+                canvas.save();
+                canvas.translate((float) this.messageLeft, (float) this.messageTop);
+                try {
+                    this.messageLayout.draw(canvas);
+                } catch (Throwable e) {
+                    FileLog.m18e("tmessages", e);
+                }
+                canvas.restore();
+            }
+            if (this.drawClock) {
+                setDrawableBounds(clockDrawable, this.checkDrawLeft, this.checkDrawTop);
+                clockDrawable.draw(canvas);
+            } else if (this.drawCheck2) {
+                if (this.drawCheck1) {
+                    setDrawableBounds(halfCheckDrawable, this.halfCheckDrawLeft, this.checkDrawTop);
+                    halfCheckDrawable.draw(canvas);
+                    setDrawableBounds(checkDrawable, this.checkDrawLeft, this.checkDrawTop);
+                    checkDrawable.draw(canvas);
+                } else {
+                    setDrawableBounds(checkDrawable, this.checkDrawLeft, this.checkDrawTop);
+                    checkDrawable.draw(canvas);
+                }
+            }
+            if (this.dialogMuted && !this.drawVerified) {
+                setDrawableBounds(muteDrawable, this.nameMuteLeft, AndroidUtilities.dp(16.5f));
+                muteDrawable.draw(canvas);
+            } else if (this.drawVerified) {
+                setDrawableBounds(verifiedDrawable, this.nameMuteLeft, AndroidUtilities.dp(16.5f));
+                verifiedDrawable.draw(canvas);
+            }
+            if (this.drawError) {
+                setDrawableBounds(errorDrawable, this.errorLeft, this.errorTop);
+                errorDrawable.draw(canvas);
+            } else if (this.drawCount) {
+                if (this.dialogMuted) {
+                    setDrawableBounds(countDrawableGrey, this.countLeft - AndroidUtilities.dp(5.5f), this.countTop, AndroidUtilities.dp(11.0f) + this.countWidth, countDrawable.getIntrinsicHeight());
+                    countDrawableGrey.draw(canvas);
+                } else {
+                    setDrawableBounds(countDrawable, this.countLeft - AndroidUtilities.dp(5.5f), this.countTop, AndroidUtilities.dp(11.0f) + this.countWidth, countDrawable.getIntrinsicHeight());
+                    countDrawable.draw(canvas);
+                }
+                canvas.save();
+                canvas.translate((float) this.countLeft, (float) (this.countTop + AndroidUtilities.dp(4.0f)));
+                this.countLayout.draw(canvas);
+                canvas.restore();
+            }
+            if (this.useSeparator) {
+                if (LocaleController.isRTL) {
+                    canvas.drawLine(0.0f, (float) (getMeasuredHeight() - 1), (float) (getMeasuredWidth() - AndroidUtilities.dp((float) AndroidUtilities.leftBaseline)), (float) (getMeasuredHeight() - 1), linePaint);
+                } else {
+                    canvas.drawLine((float) AndroidUtilities.dp((float) AndroidUtilities.leftBaseline), (float) (getMeasuredHeight() - 1), (float) getMeasuredWidth(), (float) (getMeasuredHeight() - 1), linePaint);
+                }
+            }
+            this.avatarImage.draw(canvas);
+            if (ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getBoolean("contact_status", false) && statusDrawable != null) {
+                int lower_id = (int) getDialogId();
+                int high_id = (int) (getDialogId() >> 32);
+                if (!DialogObject.isChannel((TL_dialog) MessagesController.getInstance().dialogs_dict.get(Long.valueOf(this.currentDialogId)))) {
+                    boolean isChat = lower_id < 0 && high_id != 1;
+                    if (!isChat && lower_id > 0 && high_id != 1) {
+                        User user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+                        boolean isBot = user != null && user.bot;
+                        if (!isBot) {
+                            int x;
+                            int y = (getMeasuredHeight() - statusDrawable.getMinimumHeight()) - AndroidUtilities.dp(10.0f);
+                            if (LocaleController.isRTL) {
+                                x = (getMeasuredWidth() - statusDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(45.0f);
+                            } else {
+                                x = AndroidUtilities.dp(45.0f);
+                            }
+                            statusDrawable.setBounds(x, y, statusDrawable.getIntrinsicWidth() + x, statusDrawable.getIntrinsicHeight() + y);
+                            if ((user != null && user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime()) || MessagesController.getInstance().onlinePrivacy.containsKey(Integer.valueOf(user.id))) {
+                                ((GradientDrawable) statusDrawable).setColor(-14032632);
+                            } else if (user == null || user.status == null || user.status.expires == 0 || UserObject.isDeleted(user) || (user instanceof TL_userEmpty)) {
+                                ((GradientDrawable) statusDrawable).setColor(Theme.MSG_TEXT_COLOR);
+                            } else {
+                                ((GradientDrawable) statusDrawable).setColor(-3355444);
+                            }
+                            statusDrawable.draw(canvas);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public boolean hasOverlappingRendering() {
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationAdapter.java
new file mode 100644
index 000000000..12770590d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationAdapter.java
@@ -0,0 +1,48 @@
+package org.telegram.ui.tools.AddUserToChat.UserChanges;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import java.util.ArrayList;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.ui.Apogram.SpecialContacts.SpecialContactCell;
+
+public class OperationAdapter extends BaseAdapter {
+    private Context mContext;
+    ArrayList<OperationModel> specialContactsModel;
+
+    public OperationAdapter(Context context) {
+        this.specialContactsModel = new ArrayList();
+        this.mContext = context;
+        getSpecialContactsArray();
+    }
+
+    private void getSpecialContactsArray() {
+        for (int i = 0; i < new SC_DBHelper(ApplicationLoader.applicationContext).getAllSContacts().size(); i++) {
+        }
+    }
+
+    public int getCount() {
+        return this.specialContactsModel.size();
+    }
+
+    public Object getItem(int position) {
+        if (this.specialContactsModel != null) {
+            return this.specialContactsModel.get(position);
+        }
+        return null;
+    }
+
+    public long getItemId(int position) {
+        return 0;
+    }
+
+    public View getView(int position, View convertView, ViewGroup parent) {
+        if (convertView == null) {
+            convertView = new SpecialContactCell(this.mContext, 10);
+        }
+        OperationModel modelP = (OperationModel) this.specialContactsModel.get(position);
+        return convertView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationCell.java
new file mode 100644
index 000000000..5a593acea
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationCell.java
@@ -0,0 +1,188 @@
+package org.telegram.ui.tools.AddUserToChat.UserChanges;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.view.View;
+import android.view.View.MeasureSpec;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ImageView.ScaleType;
+import java.text.DecimalFormat;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.C0859R;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.exoplayer.C0927C;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC.User;
+import org.telegram.ui.ActionBar.SimpleTextView;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Apogram.SolarCalendar;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.CheckBox;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class OperationCell extends FrameLayout {
+    private AvatarDrawable avatarDrawable;
+    private BackupImageView avatarImageView;
+    private CheckBox checkBox;
+    private SimpleTextView dateTextView;
+    private ImageView imageView;
+    private String mDate;
+    private String mOperation;
+    private User mUser;
+    private SimpleTextView nameTextView;
+    private int newValueColor;
+    private int oldValueColor;
+    private OperationModel operationModel;
+    private SimpleTextView operationTextView;
+
+    @SuppressLint({"RtlHardcoded"})
+    public OperationCell(Context context, int padding) {
+        int i;
+        int i2;
+        int i3;
+        int i4 = 5;
+        super(context);
+        this.mUser = null;
+        this.oldValueColor = -5723992;
+        this.newValueColor = -12876608;
+        this.avatarDrawable = new AvatarDrawable();
+        this.avatarImageView = new BackupImageView(context);
+        this.avatarImageView.setRoundRadius(AndroidUtilities.dp(24.0f));
+        View view = this.avatarImageView;
+        if (LocaleController.isRTL) {
+            i = 5;
+        } else {
+            i = 3;
+        }
+        addView(view, LayoutHelper.createFrame(48, 48.0f, i | 48, LocaleController.isRTL ? 0.0f : (float) (padding + 7), 8.0f, LocaleController.isRTL ? (float) (padding + 7) : 0.0f, 0.0f));
+        this.nameTextView = new SimpleTextView(context);
+        this.nameTextView.setTextColor(Theme.STICKERS_SHEET_TITLE_TEXT_COLOR);
+        this.nameTextView.setTextSize(17);
+        SimpleTextView simpleTextView = this.nameTextView;
+        if (LocaleController.isRTL) {
+            i2 = 5;
+        } else {
+            i2 = 3;
+        }
+        simpleTextView.setGravity(i2 | 48);
+        this.nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        view = this.nameTextView;
+        if (LocaleController.isRTL) {
+            i3 = 5;
+        } else {
+            i3 = 3;
+        }
+        addView(view, LayoutHelper.createFrame(-1, 20.0f, i3 | 48, LocaleController.isRTL ? 28.0f : (float) (padding + 68), 11.5f, LocaleController.isRTL ? (float) (padding + 68) : 28.0f, 0.0f));
+        this.operationTextView = new SimpleTextView(context);
+        this.operationTextView.setTextSize(14);
+        simpleTextView = this.operationTextView;
+        if (LocaleController.isRTL) {
+            i2 = 5;
+        } else {
+            i2 = 3;
+        }
+        simpleTextView.setGravity(i2 | 48);
+        this.operationTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        view = this.operationTextView;
+        if (LocaleController.isRTL) {
+            i3 = 5;
+        } else {
+            i3 = 3;
+        }
+        addView(view, LayoutHelper.createFrame(-1, 20.0f, i3 | 48, LocaleController.isRTL ? 28.0f : (float) (padding + 68), 34.5f, LocaleController.isRTL ? (float) (padding + 68) : 28.0f, 0.0f));
+        this.dateTextView = new SimpleTextView(context);
+        this.dateTextView.setTextSize(14);
+        simpleTextView = this.dateTextView;
+        if (LocaleController.isRTL) {
+            i2 = 3;
+        } else {
+            i2 = 5;
+        }
+        simpleTextView.setGravity(i2 | 48);
+        this.dateTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        view = this.dateTextView;
+        if (LocaleController.isRTL) {
+            i3 = 3;
+        } else {
+            i3 = 5;
+        }
+        addView(view, LayoutHelper.createFrame(-1, 20.0f, i3 | 48, LocaleController.isRTL ? (float) (padding + 5) : 28.0f, 60.5f, LocaleController.isRTL ? 28.0f : (float) (padding + 10), 0.0f));
+        this.imageView = new ImageView(context);
+        this.imageView.setScaleType(ScaleType.CENTER);
+        this.imageView.setVisibility(8);
+        View view2 = this.imageView;
+        if (LocaleController.isRTL) {
+            i2 = 5;
+        } else {
+            i2 = 3;
+        }
+        addView(view2, LayoutHelper.createFrame(-2, -2.0f, i2 | 16, LocaleController.isRTL ? 0.0f : 16.0f, 0.0f, LocaleController.isRTL ? 16.0f : 0.0f, 0.0f));
+        this.checkBox = new CheckBox(context, C0859R.drawable.round_check2);
+        this.checkBox.setVisibility(4);
+        View view3 = this.checkBox;
+        if (!LocaleController.isRTL) {
+            i4 = 3;
+        }
+        addView(view3, LayoutHelper.createFrame(22, 22.0f, i4 | 48, LocaleController.isRTL ? 0.0f : (float) (padding + 37), 38.0f, LocaleController.isRTL ? (float) (padding + 37) : 0.0f, 0.0f));
+    }
+
+    protected void onMeasure(int i, int i2) {
+        super.onMeasure(i, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(104.0f), C0927C.ENCODING_PCM_32BIT));
+    }
+
+    public void setChecked(boolean z, boolean z2) {
+        if (this.checkBox.getVisibility() != 0) {
+            this.checkBox.setVisibility(0);
+        }
+        this.checkBox.setChecked(z, z2);
+    }
+
+    public void setData(OperationModel model) {
+        if (model == null) {
+            this.nameTextView.setText(TtmlNode.ANONYMOUS_REGION_ID);
+            this.avatarImageView.setImageDrawable(null);
+        }
+        this.mUser = MessagesController.getInstance().getUser(Integer.valueOf(model.getUser()));
+        this.mOperation = model.getOperation();
+        this.mDate = String.valueOf(model.getDate());
+        update();
+    }
+
+    public void update() {
+        if (this.mUser != null) {
+            TLObject tLObject = null;
+            if (this.mUser.photo != null) {
+                tLObject = this.mUser.photo.photo_small;
+            }
+            this.avatarDrawable.setInfo(this.mUser);
+            this.avatarImageView.setImage(tLObject, "50_50", this.avatarDrawable);
+            this.nameTextView.setText(ContactsController.formatName(this.mUser.first_name, this.mUser.last_name));
+            this.operationTextView.setText(this.mOperation);
+            this.operationTextView.setTextColor(this.oldValueColor);
+            Date date = new Date(this.mDate);
+            String stringDate = getStringDate(date);
+            Calendar instance = Calendar.getInstance();
+            instance.setTime(date);
+            this.dateTextView.setText(m24a(instance.get(11), 2) + ":" + m24a(instance.get(12), 2));
+        }
+    }
+
+    public static String getStringDate(Date date) {
+        Calendar cal = Calendar.getInstance();
+        cal.setTime(date);
+        return new SolarCalendar(cal).getShortDesDate();
+    }
+
+    public static String m24a(int var0, int var1) {
+        char[] var2 = new char[var1];
+        Arrays.fill(var2, '0');
+        return new DecimalFormat(String.valueOf(var2)).format((long) var0);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationModel.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationModel.java
new file mode 100644
index 000000000..e379ca536
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/OperationModel.java
@@ -0,0 +1,25 @@
+package org.telegram.ui.tools.AddUserToChat.UserChanges;
+
+public class OperationModel {
+    private int date;
+    private String operation;
+    private int userId;
+
+    public OperationModel(int uid, String op, int d) {
+        this.userId = uid;
+        this.operation = op;
+        this.date = d;
+    }
+
+    public int getUser() {
+        return this.userId;
+    }
+
+    public String getOperation() {
+        return this.operation;
+    }
+
+    public int getDate() {
+        return this.date;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/SC_DBHelper.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/SC_DBHelper.java
new file mode 100644
index 000000000..01987527f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/AddUserToChat/UserChanges/SC_DBHelper.java
@@ -0,0 +1,99 @@
+package org.telegram.ui.tools.AddUserToChat.UserChanges;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import java.util.ArrayList;
+
+public class SC_DBHelper extends SQLiteOpenHelper {
+    private static final String _id = "_id";
+    private static final String database_NAME = "SuperSContactsDB";
+    private static final int database_VERSION = 3;
+    private static final String table_operation = "SContactsOperationTB";
+    private static final String table_scontacts = "SContactsTB";
+    private String date;
+    private String operation;
+    private String userId;
+
+    public SC_DBHelper(Context context) {
+        super(context, database_NAME, null, database_VERSION);
+        this.userId = "userId";
+        this.operation = "operation";
+        this.date = "date";
+    }
+
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL("CREATE TABLE SContactsTB ( _id INTEGER PRIMARY KEY AUTOINCREMENT, userId INTEGER)");
+        db.execSQL("CREATE TABLE SContactsOperationTB ( _id INTEGER PRIMARY KEY AUTOINCREMENT, userId INTEGER, operation TEXT, date integer default (strftime('%s','now') * 1000))");
+    }
+
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        db.execSQL("DROP TABLE IF EXISTS SContactsTB");
+        db.execSQL("DROP TABLE IF EXISTS SContactsOperationTB");
+        onCreate(db);
+    }
+
+    public void addSContact(int UID) {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(this.userId, Integer.valueOf(UID));
+        writableDatabase.insertWithOnConflict(table_scontacts, null, contentValues, 5);
+        writableDatabase.close();
+    }
+
+    public ArrayList<Integer> getAllSContacts() {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        Cursor cursor = writableDatabase.rawQuery("SELECT * FROM SContactsTB", null);
+        ArrayList<Integer> arrayList = new ArrayList();
+        if (cursor.moveToFirst()) {
+            do {
+                arrayList.add(Integer.valueOf(cursor.getInt(1)));
+            } while (cursor.moveToNext());
+        }
+        writableDatabase.close();
+        return arrayList;
+    }
+
+    public void deleteAllSContacts() {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        writableDatabase.delete(table_scontacts, null, null);
+        writableDatabase.close();
+    }
+
+    public void deleteSContact(int uid) {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        writableDatabase.delete(table_scontacts, this.userId + "=" + uid, null);
+        writableDatabase.close();
+    }
+
+    public void addOperation(int UID, String op, int d) {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(this.userId, Integer.valueOf(UID));
+        contentValues.put(this.operation, op);
+        contentValues.put(this.date, Integer.valueOf(d));
+        writableDatabase.insert(table_operation, null, contentValues);
+        writableDatabase.close();
+    }
+
+    public ArrayList<OperationModel> getAllOperation() {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        Cursor cursor = writableDatabase.rawQuery("SELECT * FROM SContactsOperationTB", null);
+        ArrayList<OperationModel> arrayList = new ArrayList();
+        if (cursor.moveToFirst()) {
+            do {
+                arrayList.add(new OperationModel(cursor.getInt(1), cursor.getString(2), cursor.getInt(database_VERSION)));
+            } while (cursor.moveToNext());
+        }
+        writableDatabase.close();
+        return arrayList;
+    }
+
+    public void deleteAllSOperation() {
+        SQLiteDatabase writableDatabase = getWritableDatabase();
+        writableDatabase.delete(table_operation, null, null);
+        writableDatabase.close();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/DialogsLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/DialogsLoader.java
new file mode 100644
index 000000000..d0152b650
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/DialogsLoader.java
@@ -0,0 +1,294 @@
+package org.telegram.ui.tools;
+
+import android.content.SharedPreferences;
+import java.util.ArrayList;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.tgnet.TLRPC.TL_dialog;
+import org.telegram.tgnet.TLRPC.User;
+
+public class DialogsLoader {
+    ArrayList<TL_dialog> allDialogs;
+    boolean chatUnlocked;
+    int defaulTab;
+    ArrayList<TL_dialog> dialogs;
+    boolean isTabsEnabled;
+    SharedPreferences preferences;
+    int selectedTab;
+
+    public DialogsLoader() {
+        this.preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
+        this.chatUnlocked = this.preferences.getBoolean("chat_unlocked", false);
+        this.isTabsEnabled = this.preferences.getBoolean("tabs", true);
+        this.defaulTab = this.preferences.getInt("defaul_tab", 5);
+        this.selectedTab = this.preferences.getInt("selected_tab", this.defaulTab);
+        this.allDialogs = new ArrayList();
+        this.dialogs = new ArrayList();
+    }
+
+    public ArrayList<TL_dialog> getDialogsArray() {
+        this.allDialogs.addAll(MessagesController.getInstance().dialogs);
+        int i;
+        TL_dialog dialog;
+        int lower_id;
+        int high_id;
+        boolean isChat;
+        User user;
+        boolean isBot;
+        if (this.chatUnlocked) {
+            if (!this.isTabsEnabled) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 7) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (dialog.unread_count > 0 && this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 6) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 5) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id)) && this.preferences.contains("fav_" + String.valueOf(dialog.id))) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 4) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        lower_id = (int) dialog.id;
+                        high_id = (int) (dialog.id >> 32);
+                        if (!DialogObject.isChannel(dialog)) {
+                            if (lower_id >= 0 || high_id == 1) {
+                                isChat = false;
+                            } else {
+                                isChat = true;
+                            }
+                            if (!(isChat || lower_id <= 0 || high_id == 1)) {
+                                user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+                                if (user == null || !user.bot) {
+                                    isBot = false;
+                                } else {
+                                    isBot = true;
+                                }
+                                if (!isBot) {
+                                    this.dialogs.add(dialog);
+                                }
+                            }
+                        }
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 3) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        high_id = (int) (dialog.id >> 32);
+                        if (((int) dialog.id) >= 0 || high_id == 1) {
+                            isChat = false;
+                        } else {
+                            isChat = true;
+                        }
+                        if (!DialogObject.isChannel(dialog) && isChat) {
+                            this.dialogs.add(dialog);
+                        }
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 2) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        lower_id = (int) dialog.id;
+                        if (DialogObject.isChannel(dialog) && MessagesController.getInstance().getChat(Integer.valueOf(-lower_id)).megagroup) {
+                            this.dialogs.add(dialog);
+                        }
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 1) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        lower_id = (int) dialog.id;
+                        if (DialogObject.isChannel(dialog) && !MessagesController.getInstance().getChat(Integer.valueOf(-lower_id)).megagroup) {
+                            this.dialogs.add(dialog);
+                        }
+                    }
+                }
+                return this.dialogs;
+            } else if (this.selectedTab == 0) {
+                for (i = 0; i < this.allDialogs.size(); i++) {
+                    dialog = (TL_dialog) this.allDialogs.get(i);
+                    if (this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                        lower_id = (int) dialog.id;
+                        high_id = (int) (dialog.id >> 32);
+                        if (!DialogObject.isChannel(dialog)) {
+                            if (lower_id >= 0 || high_id == 1) {
+                                isChat = false;
+                            } else {
+                                isChat = true;
+                            }
+                            user = null;
+                            if (!(isChat || lower_id <= 0 || high_id == 1)) {
+                                user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+                            }
+                            if (user == null || !user.bot) {
+                                isBot = false;
+                            } else {
+                                isBot = true;
+                            }
+                            if (isBot) {
+                                this.dialogs.add(dialog);
+                            }
+                        }
+                    }
+                }
+                return this.dialogs;
+            }
+        } else if (!this.isTabsEnabled) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    this.dialogs.add(dialog);
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 7) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id)) && dialog.unread_count > 0) {
+                    this.dialogs.add(dialog);
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 6) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    this.dialogs.add(dialog);
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 5) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id)) && this.preferences.contains("fav_" + String.valueOf(dialog.id))) {
+                    this.dialogs.add(dialog);
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 4) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    lower_id = (int) dialog.id;
+                    high_id = (int) (dialog.id >> 32);
+                    if (!DialogObject.isChannel(dialog)) {
+                        if (lower_id >= 0 || high_id == 1) {
+                            isChat = false;
+                        } else {
+                            isChat = true;
+                        }
+                        if (!(isChat || lower_id <= 0 || high_id == 1)) {
+                            user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+                            if (user == null || !user.bot) {
+                                isBot = false;
+                            } else {
+                                isBot = true;
+                            }
+                            if (!isBot) {
+                                this.dialogs.add(dialog);
+                            }
+                        }
+                    }
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 3) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    high_id = (int) (dialog.id >> 32);
+                    if (((int) dialog.id) >= 0 || high_id == 1) {
+                        isChat = false;
+                    } else {
+                        isChat = true;
+                    }
+                    if (!DialogObject.isChannel(dialog) && isChat) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 2) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    lower_id = (int) dialog.id;
+                    if (DialogObject.isChannel(dialog) && MessagesController.getInstance().getChat(Integer.valueOf(-lower_id)).megagroup) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 1) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    lower_id = (int) dialog.id;
+                    if (DialogObject.isChannel(dialog) && !MessagesController.getInstance().getChat(Integer.valueOf(-lower_id)).megagroup) {
+                        this.dialogs.add(dialog);
+                    }
+                }
+            }
+            return this.dialogs;
+        } else if (this.selectedTab == 0) {
+            for (i = 0; i < this.allDialogs.size(); i++) {
+                dialog = (TL_dialog) this.allDialogs.get(i);
+                if (!this.preferences.contains("hide_" + String.valueOf(dialog.id))) {
+                    lower_id = (int) dialog.id;
+                    high_id = (int) (dialog.id >> 32);
+                    if (!DialogObject.isChannel(dialog)) {
+                        if (lower_id >= 0 || high_id == 1) {
+                            isChat = false;
+                        } else {
+                            isChat = true;
+                        }
+                        user = null;
+                        if (!(isChat || lower_id <= 0 || high_id == 1)) {
+                            user = MessagesController.getInstance().getUser(Integer.valueOf(lower_id));
+                        }
+                        if (user == null || !user.bot) {
+                            isBot = false;
+                        } else {
+                            isBot = true;
+                        }
+                        if (isBot) {
+                            this.dialogs.add(dialog);
+                        }
+                    }
+                }
+            }
+            return this.dialogs;
+        }
+        return null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/SetPasswordActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/SetPasswordActivity.java
new file mode 100644
index 000000000..fe6c9c7a8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/SetPasswordActivity.java
@@ -0,0 +1,558 @@
+package org.telegram.ui.tools;
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Typeface;
+import android.os.Build.VERSION;
+import android.os.Vibrator;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.text.method.PasswordTransformationMethod;
+import android.view.ActionMode;
+import android.view.ActionMode.Callback;
+import android.view.ContextMenu;
+import android.view.ContextMenu.ContextMenuInfo;
+import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.View.OnCreateContextMenuListener;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver.OnPreDrawListener;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.TextView.OnEditorActionListener;
+import android.widget.Toast;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.C0859R;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.NotificationCenter.NotificationCenterDelegate;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.DialogsActivity;
+
+public class SetPasswordActivity extends BaseFragment implements NotificationCenterDelegate {
+    private static final int change_Pass = 3;
+    private static final int disable_hidden = 2;
+    private static final int done_button = 1;
+    private static final int enable_hidden = 1;
+    private static final int unlock_dialogs = 4;
+    private int changeenablePasscodeRow;
+    private int enablePasscodeRow;
+    private String firstPassword;
+    private ListAdapter listAdapter;
+    private ListView listView;
+    private int passcodeDetailRow;
+    private int passcodeSetStep;
+    private EditText passwordEditText;
+    private int rowCount;
+    private TextView titleTextView;
+    private int type;
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.1 */
+    class C12951 extends ActionBarMenuOnItemClick {
+        C12951() {
+        }
+
+        public void onItemClick(int id) {
+            if (id == -1) {
+                if (SetPasswordActivity.this.type == SetPasswordActivity.unlock_dialogs) {
+                    SetPasswordActivity.this.presentFragment(new DialogsActivity(null), true);
+                } else {
+                    SetPasswordActivity.this.finishFragment();
+                }
+            } else if (id != SetPasswordActivity.enable_hidden) {
+            } else {
+                if (SetPasswordActivity.this.passcodeSetStep == 0) {
+                    SetPasswordActivity.this.processNext();
+                } else if (SetPasswordActivity.this.passcodeSetStep == SetPasswordActivity.enable_hidden) {
+                    SetPasswordActivity.this.processDone();
+                }
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.2 */
+    class C12962 implements OnEditorActionListener {
+        C12962() {
+        }
+
+        public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+            if (SetPasswordActivity.this.passcodeSetStep == 0) {
+                SetPasswordActivity.this.processNext();
+                return true;
+            } else if (SetPasswordActivity.this.passcodeSetStep != SetPasswordActivity.enable_hidden) {
+                return false;
+            } else {
+                SetPasswordActivity.this.processDone();
+                return true;
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.3 */
+    class C12973 implements TextWatcher {
+        C12973() {
+        }
+
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        }
+
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+        }
+
+        public void afterTextChanged(Editable s) {
+            if (SetPasswordActivity.this.passwordEditText.length() != SetPasswordActivity.unlock_dialogs) {
+                return;
+            }
+            if (SetPasswordActivity.this.type != SetPasswordActivity.enable_hidden) {
+                SetPasswordActivity.this.processDone();
+            } else if (SetPasswordActivity.this.passcodeSetStep == 0) {
+                SetPasswordActivity.this.processNext();
+            } else if (SetPasswordActivity.this.passcodeSetStep == SetPasswordActivity.enable_hidden) {
+                SetPasswordActivity.this.processDone();
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.4 */
+    class C12984 implements OnCreateContextMenuListener {
+        C12984() {
+        }
+
+        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
+            menu.clear();
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.5 */
+    class C12995 implements Callback {
+        C12995() {
+        }
+
+        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+            return false;
+        }
+
+        public void onDestroyActionMode(ActionMode mode) {
+        }
+
+        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            return false;
+        }
+
+        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+            return false;
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.6 */
+    class C13006 implements OnItemClickListener {
+        C13006() {
+        }
+
+        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+            if (i == SetPasswordActivity.this.changeenablePasscodeRow) {
+                SetPasswordActivity.this.presentFragment(new SetPasswordActivity(SetPasswordActivity.change_Pass));
+                SetPasswordActivity.this.finishFragment();
+            } else if (i == SetPasswordActivity.this.enablePasscodeRow) {
+                TextCheckCell cell = (TextCheckCell) view;
+                if (ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID).length() != 0) {
+                    SetPasswordActivity.this.presentFragment(new SetPasswordActivity(SetPasswordActivity.disable_hidden));
+                } else {
+                    SetPasswordActivity.this.presentFragment(new SetPasswordActivity(SetPasswordActivity.enable_hidden));
+                }
+                SetPasswordActivity.this.finishFragment();
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.7 */
+    class C13017 implements Runnable {
+        C13017() {
+        }
+
+        public void run() {
+            if (SetPasswordActivity.this.passwordEditText != null) {
+                SetPasswordActivity.this.passwordEditText.requestFocus();
+                AndroidUtilities.showKeyboard(SetPasswordActivity.this.passwordEditText);
+            }
+        }
+    }
+
+    /* renamed from: org.telegram.ui.Apogram.SetPasswordActivity.8 */
+    class C13028 implements OnPreDrawListener {
+        C13028() {
+        }
+
+        public boolean onPreDraw() {
+            SetPasswordActivity.this.listView.getViewTreeObserver().removeOnPreDrawListener(this);
+            return true;
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            this.mContext = context;
+        }
+
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        public boolean isEnabled(int i) {
+            String chatPassword = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID);
+            if (i == SetPasswordActivity.this.enablePasscodeRow || (chatPassword.length() != 0 && i == SetPasswordActivity.this.changeenablePasscodeRow)) {
+                return true;
+            }
+            return false;
+        }
+
+        public int getCount() {
+            return SetPasswordActivity.this.rowCount;
+        }
+
+        public Object getItem(int i) {
+            return null;
+        }
+
+        public long getItemId(int i) {
+            return (long) i;
+        }
+
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            boolean z = false;
+            int viewType = getItemViewType(i);
+            String chatPassword;
+            if (viewType == 0) {
+                if (view == null) {
+                    view = new TextCheckCell(this.mContext);
+                    view.setBackgroundColor(-1);
+                }
+                TextCheckCell textCell = (TextCheckCell) view;
+                if (i == SetPasswordActivity.this.enablePasscodeRow) {
+                    chatPassword = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID);
+                    String string = LocaleController.getString("EnablePass", C0859R.string.EnablePass);
+                    if (chatPassword.length() > 0) {
+                        z = true;
+                    }
+                    textCell.setTextAndCheck(string, z, true);
+                }
+            } else if (viewType == SetPasswordActivity.enable_hidden) {
+                if (view == null) {
+                    view = new TextSettingsCell(this.mContext);
+                    view.setBackgroundColor(-1);
+                }
+                TextSettingsCell textCell2 = (TextSettingsCell) view;
+                if (i == SetPasswordActivity.this.changeenablePasscodeRow) {
+                    chatPassword = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID);
+                    textCell2.setText(LocaleController.getString("ChangePass", C0859R.string.ChangePass), false);
+                    textCell2.setTextColor(chatPassword.length() == 0 ? -3750202 : Theme.MSG_TEXT_COLOR);
+                }
+            } else if (viewType == SetPasswordActivity.disable_hidden) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(this.mContext);
+                }
+                if (i == SetPasswordActivity.this.passcodeDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChangePassInfo", C0859R.string.ChangePassInfo));
+                    view.setBackgroundResource(C0859R.drawable.greydivider_bottom);
+                }
+            }
+            return view;
+        }
+
+        public int getItemViewType(int i) {
+            if (i == SetPasswordActivity.this.enablePasscodeRow) {
+                return 0;
+            }
+            if (i == SetPasswordActivity.this.changeenablePasscodeRow) {
+                return SetPasswordActivity.enable_hidden;
+            }
+            if (i == SetPasswordActivity.this.passcodeDetailRow) {
+                return SetPasswordActivity.disable_hidden;
+            }
+            return 0;
+        }
+
+        public int getViewTypeCount() {
+            return SetPasswordActivity.change_Pass;
+        }
+
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+
+    public SetPasswordActivity(int type) {
+        this.passcodeSetStep = 0;
+        this.type = type;
+    }
+
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        updateRows();
+        return true;
+    }
+
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    public View createView(Context context) {
+        if (this.type != 5) {
+            this.actionBar.setBackButtonImage(C0859R.drawable.ic_ab_back);
+        }
+        this.actionBar.setAllowOverlayTitle(false);
+        this.actionBar.setActionBarMenuOnItemClick(new C12951());
+        this.fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = this.fragmentView;
+        LayoutParams layoutParams;
+        if (this.type != 0) {
+            this.actionBar.createMenu().addItemWithWidth(enable_hidden, C0859R.drawable.ic_done, AndroidUtilities.dp(56.0f));
+            this.titleTextView = new TextView(context);
+            this.titleTextView.setTextColor(Theme.ATTACH_SHEET_TEXT_COLOR);
+            if (this.type != enable_hidden) {
+                this.titleTextView.setText(LocaleController.getString("EnterCurrentPasscode", C0859R.string.EnterCurrentPasscode));
+            } else if (ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID).length() != 0) {
+                this.titleTextView.setText(LocaleController.getString("EnterNewPasscode", C0859R.string.EnterNewPasscode));
+            } else {
+                this.titleTextView.setText(LocaleController.getString("EnterNewFirstPasscode", C0859R.string.EnterNewFirstPasscode));
+            }
+            this.titleTextView.setTextSize(enable_hidden, 18.0f);
+            this.titleTextView.setGravity(enable_hidden);
+            this.titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            frameLayout.addView(this.titleTextView);
+            layoutParams = (LayoutParams) this.titleTextView.getLayoutParams();
+            layoutParams.width = -2;
+            layoutParams.height = -2;
+            layoutParams.gravity = enable_hidden;
+            layoutParams.topMargin = AndroidUtilities.dp(38.0f);
+            this.titleTextView.setLayoutParams(layoutParams);
+            this.passwordEditText = new EditText(context);
+            this.passwordEditText.setTextSize(enable_hidden, 20.0f);
+            this.passwordEditText.setTextColor(Theme.MSG_TEXT_COLOR);
+            this.passwordEditText.setMaxLines(enable_hidden);
+            this.passwordEditText.setLines(enable_hidden);
+            this.passwordEditText.setInputType(disable_hidden);
+            this.passwordEditText.setGravity(enable_hidden);
+            this.passwordEditText.setSingleLine(true);
+            if (this.type == enable_hidden) {
+                this.passcodeSetStep = 0;
+                this.passwordEditText.setImeOptions(5);
+            } else {
+                this.passcodeSetStep = enable_hidden;
+                this.passwordEditText.setImeOptions(6);
+            }
+            this.passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
+            this.passwordEditText.setTypeface(Typeface.DEFAULT);
+            AndroidUtilities.clearCursorDrawable(this.passwordEditText);
+            frameLayout.addView(this.passwordEditText);
+            layoutParams = (LayoutParams) this.passwordEditText.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(90.0f);
+            layoutParams.height = AndroidUtilities.dp(36.0f);
+            layoutParams.leftMargin = AndroidUtilities.dp(40.0f);
+            layoutParams.gravity = 51;
+            layoutParams.rightMargin = AndroidUtilities.dp(40.0f);
+            layoutParams.width = -1;
+            this.passwordEditText.setLayoutParams(layoutParams);
+            this.passwordEditText.setOnEditorActionListener(new C12962());
+            this.passwordEditText.addTextChangedListener(new C12973());
+            if (VERSION.SDK_INT < 11) {
+                this.passwordEditText.setOnCreateContextMenuListener(new C12984());
+            } else {
+                this.passwordEditText.setCustomSelectionActionModeCallback(new C12995());
+            }
+            if (this.type == change_Pass || this.type == unlock_dialogs) {
+                this.actionBar.setTitle(LocaleController.getString("Authentication", C0859R.string.Authentication));
+            } else {
+                this.actionBar.setTitle(LocaleController.getString("SetPass", C0859R.string.SetPass));
+            }
+        } else {
+            this.actionBar.setTitle(LocaleController.getString("HideChats", C0859R.string.HideChats));
+            frameLayout.setBackgroundColor(Theme.ACTION_BAR_MODE_SELECTOR_COLOR);
+            this.listView = new ListView(context);
+            this.listView.setDivider(null);
+            this.listView.setDividerHeight(0);
+            this.listView.setVerticalScrollBarEnabled(false);
+            this.listView.setDrawSelectorOnTop(true);
+            frameLayout.addView(this.listView);
+            layoutParams = (LayoutParams) this.listView.getLayoutParams();
+            layoutParams.width = -1;
+            layoutParams.height = -1;
+            layoutParams.gravity = 48;
+            this.listView.setLayoutParams(layoutParams);
+            ListView listView = this.listView;
+            android.widget.ListAdapter listAdapter = new ListAdapter(context);
+            this.listAdapter = listAdapter;
+            listView.setAdapter(listAdapter);
+            this.listView.setOnItemClickListener(new C13006());
+        }
+        return this.fragmentView;
+    }
+
+    public void onResume() {
+        super.onResume();
+        if (this.listAdapter != null) {
+            this.listAdapter.notifyDataSetChanged();
+        }
+        if (this.type != 0) {
+            AndroidUtilities.runOnUIThread(new C13017(), 200);
+        }
+    }
+
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.didSetPasscode && this.type == 0) {
+            updateRows();
+            if (this.listAdapter != null) {
+                this.listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    private void updateRows() {
+        this.rowCount = 0;
+        int i = this.rowCount;
+        this.rowCount = i + enable_hidden;
+        this.enablePasscodeRow = i;
+        i = this.rowCount;
+        this.rowCount = i + enable_hidden;
+        this.changeenablePasscodeRow = i;
+        i = this.rowCount;
+        this.rowCount = i + enable_hidden;
+        this.passcodeDetailRow = i;
+    }
+
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (this.listView != null) {
+            this.listView.getViewTreeObserver().addOnPreDrawListener(new C13028());
+        }
+    }
+
+    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
+        if (isOpen && this.type != 0) {
+            AndroidUtilities.showKeyboard(this.passwordEditText);
+        }
+    }
+
+    private void processNext() {
+        if (this.passwordEditText.getText().length() == 0) {
+            onPasscodeError();
+            return;
+        }
+        this.titleTextView.setText(LocaleController.getString("ReEnterYourPasscode", C0859R.string.ReEnterYourPasscode));
+        this.firstPassword = this.passwordEditText.getText().toString();
+        this.passwordEditText.setText(TtmlNode.ANONYMOUS_REGION_ID);
+        this.passcodeSetStep = enable_hidden;
+    }
+
+    private void processDone() {
+        boolean z = false;
+        if (this.passwordEditText.getText().length() == 0) {
+            onPasscodeError();
+        } else if (this.type == enable_hidden) {
+            if (this.firstPassword.equals(this.passwordEditText.getText().toString())) {
+                editor = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).edit();
+                editor.putString("chat_password", this.firstPassword);
+                editor.putBoolean("chat_unlocked", true);
+                editor.commit();
+                restartApp();
+                this.passwordEditText.clearFocus();
+                AndroidUtilities.hideKeyboard(this.passwordEditText);
+                return;
+            }
+            try {
+                Toast.makeText(getParentActivity(), LocaleController.getString("PasscodeDoNotMatch", C0859R.string.PasscodeDoNotMatch), 0).show();
+            } catch (Throwable e) {
+                FileLog.m18e("tmessages", e);
+            }
+            AndroidUtilities.shakeView(this.titleTextView, 2.0f, 0);
+            this.passwordEditText.setText(TtmlNode.ANONYMOUS_REGION_ID);
+        } else if (this.type == disable_hidden) {
+            preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
+            if (preferences.getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID).equals(this.passwordEditText.getText().toString())) {
+                editor = preferences.edit();
+                editor.putString("chat_password", TtmlNode.ANONYMOUS_REGION_ID);
+                editor.commit();
+                this.passwordEditText.clearFocus();
+                AndroidUtilities.hideKeyboard(this.passwordEditText);
+                restartApp();
+                return;
+            }
+            this.passwordEditText.setText(TtmlNode.ANONYMOUS_REGION_ID);
+            onPasscodeError();
+        } else if (this.type == change_Pass) {
+            if (ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID).equals(this.passwordEditText.getText().toString())) {
+                this.passwordEditText.clearFocus();
+                AndroidUtilities.hideKeyboard(this.passwordEditText);
+                presentFragment(new SetPasswordActivity(enable_hidden), true);
+                return;
+            }
+            this.passwordEditText.setText(TtmlNode.ANONYMOUS_REGION_ID);
+            onPasscodeError();
+        } else if (this.type == unlock_dialogs) {
+            preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
+            if (preferences.getString("chat_password", TtmlNode.ANONYMOUS_REGION_ID).equals(this.passwordEditText.getText().toString())) {
+                boolean chatUnlocked = preferences.getBoolean("chat_unlocked", false);
+                editor = preferences.edit();
+                String str = "chat_unlocked";
+                if (!chatUnlocked) {
+                    z = true;
+                }
+                editor.putBoolean(str, z);
+                editor.commit();
+                this.passwordEditText.clearFocus();
+                AndroidUtilities.hideKeyboard(this.passwordEditText);
+                presentFragment(new DialogsActivity(null), true);
+                return;
+            }
+            this.passwordEditText.setText(TtmlNode.ANONYMOUS_REGION_ID);
+            onPasscodeError();
+        }
+    }
+
+    private void restartApp() {
+        Context context = getParentActivity().getBaseContext();
+        Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());
+        intent.addFlags(67108864);
+        intent.addFlags(268435456);
+        if (VERSION.SDK_INT >= 11) {
+            intent.addFlags(TLRPC.MESSAGE_FLAG_EDITED);
+        }
+        ((AlarmManager) context.getSystemService(NotificationCompatApi21.CATEGORY_ALARM)).set(enable_hidden, System.currentTimeMillis() + 1, PendingIntent.getActivity(context, 0, intent, 268435456));
+        System.exit(disable_hidden);
+    }
+
+    private void onPasscodeError() {
+        if (getParentActivity() != null) {
+            Vibrator v = (Vibrator) getParentActivity().getSystemService("vibrator");
+            if (v != null) {
+                v.vibrate(200);
+            }
+            AndroidUtilities.shakeView(this.titleTextView, 2.0f, 0);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/SolarCalendar.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/SolarCalendar.java
new file mode 100644
index 000000000..02ca7746b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/SolarCalendar.java
@@ -0,0 +1,246 @@
+package org.telegram.ui.tools;
+
+import java.util.Calendar;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.C0859R;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.exoplayer.upstream.NetworkLock;
+import org.telegram.messenger.volley.Request.Method;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.VideoPlayer;
+
+public class SolarCalendar {
+    private Calendar calendar;
+    private int date;
+    private int month;
+    private int weekDay;
+    private int year;
+
+    public SolarCalendar() {
+        this.calendar = Calendar.getInstance();
+        calSolarCalendar();
+    }
+
+    public SolarCalendar(Calendar calendar) {
+        this.calendar = calendar;
+        calSolarCalendar();
+    }
+
+    private void calSolarCalendar() {
+        int georgianYear = this.calendar.get(1);
+        int georgianMonth = this.calendar.get(2) + 1;
+        int georgianDate = this.calendar.get(5);
+        this.weekDay = this.calendar.get(7) - 1;
+        int[] buf1 = new int[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
+        int[] buf2 = new int[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335};
+        int ld;
+        if (georgianYear % 4 != 0) {
+            this.date = buf1[georgianMonth - 1] + georgianDate;
+            if (this.date > 79) {
+                this.date -= 79;
+                if (this.date <= 186) {
+                    switch (this.date % 31) {
+                        case VideoPlayer.TRACK_DEFAULT /*0*/:
+                            this.month = this.date / 31;
+                            this.date = 31;
+                            break;
+                        default:
+                            this.month = (this.date / 31) + 1;
+                            this.date %= 31;
+                            break;
+                    }
+                    this.year = georgianYear - 621;
+                    return;
+                }
+                this.date -= 186;
+                switch (this.date % 30) {
+                    case VideoPlayer.TRACK_DEFAULT /*0*/:
+                        this.month = (this.date / 30) + 6;
+                        this.date = 30;
+                        break;
+                    default:
+                        this.month = (this.date / 30) + 7;
+                        this.date %= 30;
+                        break;
+                }
+                this.year = georgianYear - 621;
+                return;
+            }
+            if (georgianYear <= 1996 || georgianYear % 4 != 1) {
+                ld = 10;
+            } else {
+                ld = 11;
+            }
+            this.date += ld;
+            switch (this.date % 30) {
+                case VideoPlayer.TRACK_DEFAULT /*0*/:
+                    this.month = (this.date / 30) + 9;
+                    this.date = 30;
+                    break;
+                default:
+                    this.month = (this.date / 30) + 10;
+                    this.date %= 30;
+                    break;
+            }
+            this.year = georgianYear - 622;
+            return;
+        }
+        this.date = buf2[georgianMonth - 1] + georgianDate;
+        if (georgianYear >= 1996) {
+            ld = 79;
+        } else {
+            ld = 80;
+        }
+        if (this.date > ld) {
+            this.date -= ld;
+            if (this.date <= 186) {
+                switch (this.date % 31) {
+                    case VideoPlayer.TRACK_DEFAULT /*0*/:
+                        this.month = this.date / 31;
+                        this.date = 31;
+                        break;
+                    default:
+                        this.month = (this.date / 31) + 1;
+                        this.date %= 31;
+                        break;
+                }
+                this.year = georgianYear - 621;
+                return;
+            }
+            this.date -= 186;
+            switch (this.date % 30) {
+                case VideoPlayer.TRACK_DEFAULT /*0*/:
+                    this.month = (this.date / 30) + 6;
+                    this.date = 30;
+                    break;
+                default:
+                    this.month = (this.date / 30) + 7;
+                    this.date %= 30;
+                    break;
+            }
+            this.year = georgianYear - 621;
+            return;
+        }
+        this.date += 10;
+        switch (this.date % 30) {
+            case VideoPlayer.TRACK_DEFAULT /*0*/:
+                this.month = (this.date / 30) + 9;
+                this.date = 30;
+                break;
+            default:
+                this.month = (this.date / 30) + 10;
+                this.date %= 30;
+                break;
+        }
+        this.year = georgianYear - 622;
+    }
+
+    public String getWeekDay() {
+        String strWeekDay = TtmlNode.ANONYMOUS_REGION_ID;
+        switch (this.weekDay) {
+            case VideoPlayer.TRACK_DEFAULT /*0*/:
+                return LocaleController.getString("Sunday", C0859R.string.Sunday);
+            case VideoPlayer.TYPE_AUDIO /*1*/:
+                return LocaleController.getString("Monday", C0859R.string.Monday);
+            case VideoPlayer.STATE_PREPARING /*2*/:
+                return LocaleController.getString("Tuesday", C0859R.string.Tuesday);
+            case VideoPlayer.STATE_BUFFERING /*3*/:
+                return LocaleController.getString("Wednesday", C0859R.string.Wednesday);
+            case VideoPlayer.STATE_READY /*4*/:
+                return LocaleController.getString("Thursday", C0859R.string.Thursday);
+            case VideoPlayer.STATE_ENDED /*5*/:
+                return LocaleController.getString("Friday", C0859R.string.Friday);
+            case Method.TRACE /*6*/:
+                return LocaleController.getString("Saturday", C0859R.string.Saturday);
+            default:
+                return strWeekDay;
+        }
+    }
+
+    public String getMonth() {
+        String strMonth = TtmlNode.ANONYMOUS_REGION_ID;
+        switch (this.month) {
+            case VideoPlayer.TYPE_AUDIO /*1*/:
+                return LocaleController.getString("Farvardin", C0859R.string.Farvardin);
+            case VideoPlayer.STATE_PREPARING /*2*/:
+                return LocaleController.getString("Ordibehesht", C0859R.string.Ordibehesht);
+            case VideoPlayer.STATE_BUFFERING /*3*/:
+                return LocaleController.getString("Khordad", C0859R.string.Khordad);
+            case VideoPlayer.STATE_READY /*4*/:
+                return LocaleController.getString("Tir", C0859R.string.Tir);
+            case VideoPlayer.STATE_ENDED /*5*/:
+                return LocaleController.getString("Mordad", C0859R.string.Mordad);
+            case Method.TRACE /*6*/:
+                return LocaleController.getString("Shahrivar", C0859R.string.Shahrivar);
+            case Method.PATCH /*7*/:
+                return LocaleController.getString("Mehr", C0859R.string.Mehr);
+            case TLRPC.USER_FLAG_USERNAME /*8*/:
+                return LocaleController.getString("Aban", C0859R.string.Aban);
+            case C0859R.styleable.YearPicker_dp_yearMax /*9*/:
+                return LocaleController.getString("Azar", C0859R.string.Azar);
+            case NetworkLock.DOWNLOAD_PRIORITY /*10*/:
+                return LocaleController.getString("Dey", C0859R.string.Dey);
+            case C0859R.styleable.YearPicker_dp_yearTextSize /*11*/:
+                return LocaleController.getString("Bahman", C0859R.string.Bahman);
+            case Atom.FULL_HEADER_SIZE /*12*/:
+                return LocaleController.getString("Esfand", C0859R.string.Esfand);
+            default:
+                return strMonth;
+        }
+    }
+
+    public String getDesDate() {
+        StringBuilder describedDateFormat = new StringBuilder();
+        describedDateFormat.append(String.valueOf(this.date)).append(" ").append(getMonth()).append(" ").append(String.valueOf(this.year)).append(" ").append(LocaleController.getString("Saat", C0859R.string.Saat)).append(" ").append(getTime());
+        return String.valueOf(describedDateFormat);
+    }
+
+    public String getShortDesDateTime() {
+        StringBuilder describedDateFormat = new StringBuilder();
+        describedDateFormat.append(String.valueOf(this.date)).append(" ").append(getMonth()).append(" ").append(LocaleController.getString("Saat", C0859R.string.Saat)).append(" ").append(getTime());
+        return String.valueOf(describedDateFormat);
+    }
+
+    public String getShortDesDate() {
+        StringBuilder describedDateFormat = new StringBuilder();
+        describedDateFormat.append(String.valueOf(this.date)).append(" ").append(getMonth()).append(" ");
+        return String.valueOf(describedDateFormat);
+    }
+
+    public String getNumDateTime() {
+        StringBuilder numericDateFormat = new StringBuilder();
+        numericDateFormat.append(String.valueOf(this.year)).append("/").append(String.valueOf(this.month)).append("/").append(String.valueOf(this.date)).append(" ").append(LocaleController.getString("Saat", C0859R.string.Saat)).append(" ").append(getTime());
+        return String.valueOf(numericDateFormat);
+    }
+
+    public String getNumDate() {
+        StringBuilder numericDateFormat = new StringBuilder();
+        numericDateFormat.append(String.valueOf(this.year)).append("/").append(String.valueOf(this.month)).append("/").append(String.valueOf(this.date)).append(" ");
+        return String.valueOf(numericDateFormat);
+    }
+
+    public String getTime() {
+        boolean is24HourFormat = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0).getBoolean("enable24HourFormat", false);
+        int h = this.calendar.get(11);
+        int m = this.calendar.get(12);
+        StringBuilder time = new StringBuilder();
+        if (is24HourFormat) {
+            time.append(h).append(":").append(m);
+        } else {
+            int i = h < 12 ? h : h == 12 ? 12 : h - 12;
+            time.append(i).append(":").append(m < 10 ? "0" + m : Integer.valueOf(m)).append(h < 12 ? " " + LocaleController.getString("AM", C0859R.string.AM) : " " + LocaleController.getString("PM", C0859R.string.PM));
+        }
+        return String.valueOf(time);
+    }
+
+    public long getTimeInMillis() {
+        return this.calendar.getTimeInMillis();
+    }
+
+    public String toString() {
+        return getDesDate();
+    }
+
+    public static void main(String[] args) {
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/Util.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/Util.java
new file mode 100644
index 000000000..108f04e82
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/Util.java
@@ -0,0 +1,1278 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.drawable.BitmapDrawable;
+import android.os.Bundle;
+import android.os.Vibrator;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.SpannableStringBuilder;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.UserObject;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.ContactsAdapter;
+import org.telegram.ui.Adapters.SearchAdapter;
+import org.telegram.ui.Cells.AdminedChannelCell;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.RadioButtonCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextBlockCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.AvatarUpdater;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.ChipSpan;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.LetterSectionsListView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class Util extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
+
+    private View doneButton;
+    private EditText nameTextView;
+    private ProgressDialog progressDialog;
+    private ShadowSectionCell sectionCell;
+    private BackupImageView avatarImage;
+    private AvatarDrawable avatarDrawable;
+    private AvatarUpdater avatarUpdater;
+    private EditText descriptionTextView;
+    private TLRPC.FileLocation avatar;
+    private String nameToSet;
+
+    private LinearLayout linearLayout;
+    private LinearLayout linkContainer;
+    private LinearLayout publicContainer;
+    private TextBlockCell privateContainer;
+    private RadioButtonCell radioButtonCell1;
+    private RadioButtonCell radioButtonCell2;
+    private TextInfoPrivacyCell typeInfoCell;
+    private TextView checkTextView;
+    private HeaderCell headerCell;
+    private int checkReqId;
+    private String lastCheckName;
+    private Runnable checkRunnable;
+    private boolean lastNameAvailable;
+    private boolean isPrivate;
+    private boolean loadingInvite;
+    private TLRPC.ExportedChatInvite invite;
+
+    private boolean loadingAdminedChannels;
+    private TextInfoPrivacyCell adminedInfoCell;
+    private ArrayList<AdminedChannelCell> adminedChannelCells = new ArrayList<>();
+    private LoadingCell loadingAdminedCell;
+
+    private ContactsAdapter listViewAdapter;
+    private TextView emptyTextView;
+    private LetterSectionsListView listView;
+    private SearchAdapter searchListViewAdapter;
+    private boolean searchWas;
+    private boolean searching;
+    private HashMap<Integer, ChipSpan> selectedContacts = new HashMap<>();
+    private ArrayList<ChipSpan> allSpans = new ArrayList<>();
+    private int beforeChangeIndex;
+    private boolean ignoreChange;
+    private CharSequence changeString;
+
+    private int currentStep;
+    private int chatId;
+    private boolean canCreatePublic = true;
+    private TLRPC.InputFile uploadedAvatar;
+
+    private boolean createAfterUpload;
+    private boolean donePressed;
+
+    private final static int done_button = 1;
+
+    public Util(Bundle args) {
+        super(args);
+        currentStep = args.getInt("step", 0);
+        if (currentStep == 0) {
+            avatarDrawable = new AvatarDrawable();
+            avatarUpdater = new AvatarUpdater();
+
+            TLRPC.TL_channels_checkUsername req = new TLRPC.TL_channels_checkUsername();
+            req.username = "1";
+            req.channel = new TLRPC.TL_inputChannelEmpty();
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            canCreatePublic = error == null || !error.text.equals("CHANNELS_ADMIN_PUBLIC_TOO_MUCH");
+                        }
+                    });
+                }
+            });
+        } else {
+            if (currentStep == 1) {
+                canCreatePublic = args.getBoolean("canCreatePublic", true);
+                isPrivate = !canCreatePublic;
+                if (!canCreatePublic) {
+                    loadAdminedChannels();
+                }
+            }
+            chatId = args.getInt("chat_id", 0);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean onFragmentCreate() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidFailCreate);
+        if (currentStep == 2) {
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        } else if (currentStep == 1) {
+            generateLink();
+        }
+        if (avatarUpdater != null) {
+            avatarUpdater.parentFragment = this;
+            avatarUpdater.delegate = this;
+        }
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidFailCreate);
+        if (currentStep == 2) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        }
+        if (avatarUpdater != null) {
+            avatarUpdater.clear();
+        }
+        AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
+    }
+
+    @Override
+    public View createView(Context context) {
+        searching = false;
+        searchWas = false;
+
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+                    if (currentStep == 0) {
+                        if (donePressed) {
+                            return;
+                        }
+                        if (nameTextView.length() == 0) {
+                            Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
+                            if (v != null) {
+                                v.vibrate(200);
+                            }
+                            AndroidUtilities.shakeView(nameTextView, 2, 0);
+                            return;
+                        }
+                        donePressed = true;
+                        if (avatarUpdater.uploadingAvatar != null) {
+                            createAfterUpload = true;
+                            progressDialog = new ProgressDialog(getParentActivity());
+                            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                            progressDialog.setCanceledOnTouchOutside(false);
+                            progressDialog.setCancelable(false);
+                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    createAfterUpload = false;
+                                    progressDialog = null;
+                                    donePressed = false;
+                                    try {
+                                        dialog.dismiss();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            });
+                            progressDialog.show();
+                            return;
+                        }
+                        final int reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), new ArrayList<Integer>(), descriptionTextView.getText().toString(), ChatObject.CHAT_TYPE_CHANNEL, Util.this);
+                        progressDialog = new ProgressDialog(getParentActivity());
+                        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                        progressDialog.setCanceledOnTouchOutside(false);
+                        progressDialog.setCancelable(false);
+                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                                donePressed = false;
+                                try {
+                                    dialog.dismiss();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                        progressDialog.show();
+                    } else if (currentStep == 1) {
+                        if (!isPrivate) {
+                            if (nameTextView.length() == 0) {
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setMessage(LocaleController.getString("ChannelPublicEmptyUsername", R.string.ChannelPublicEmptyUsername));
+                                builder.setPositiveButton(LocaleController.getString("Close", R.string.Close), null);
+                                showDialog(builder.create());
+                                return;
+                            } else {
+                                if (!lastNameAvailable) {
+                                    Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
+                                    if (v != null) {
+                                        v.vibrate(200);
+                                    }
+                                    AndroidUtilities.shakeView(checkTextView, 2, 0);
+                                    return;
+                                } else {
+                                    MessagesController.getInstance().updateChannelUserName(chatId, lastCheckName);
+                                }
+                            }
+                        }
+                        Bundle args = new Bundle();
+                        args.putInt("step", 2);
+                        args.putInt("chat_id", chatId);
+                        presentFragment(new Util(args), true);
+                    } else {
+                        ArrayList<TLRPC.InputUser> result = new ArrayList<>();
+                        for (Integer uid : selectedContacts.keySet()) {
+                            TLRPC.InputUser user = MessagesController.getInputUser(MessagesController.getInstance().getUser(uid));
+                            if (user != null) {
+                                result.add(user);
+                            }
+                        }
+                        MessagesController.getInstance().addUsersToChannel(chatId, result, null);
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        Bundle args2 = new Bundle();
+                        args2.putInt("chat_id", chatId);
+                        presentFragment(new ChatActivity(args2), true);
+                    }
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        if (currentStep != 2) {
+            fragmentView = new ScrollView(context);
+            ScrollView scrollView = (ScrollView) fragmentView;
+            scrollView.setFillViewport(true);
+            linearLayout = new LinearLayout(context);
+            scrollView.addView(linearLayout, new ScrollView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+        } else {
+            fragmentView = new LinearLayout(context);
+            fragmentView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            linearLayout = (LinearLayout) fragmentView;
+        }
+        linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+        if (currentStep == 0) {
+            actionBar.setTitle(LocaleController.getString("NewChannel", R.string.NewChannel));
+            fragmentView.setBackgroundColor(0xffffffff);
+            FrameLayout frameLayout = new FrameLayout(context);
+            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            avatarImage = new BackupImageView(context);
+            avatarImage.setRoundRadius(AndroidUtilities.dp(32));
+            avatarDrawable.setInfo(5, null, null, false);
+            avatarDrawable.setDrawPhoto(true);
+            avatarImage.setImageDrawable(avatarDrawable);
+            frameLayout.addView(avatarImage, LayoutHelper.createFrame(64, 64, Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), LocaleController.isRTL ? 0 : 16, 12, LocaleController.isRTL ? 16 : 0, 12));
+            avatarImage.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                    CharSequence[] items;
+
+                    if (avatar != null) {
+                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                    } else {
+                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                    }
+
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (i == 0) {
+                                avatarUpdater.openCamera();
+                            } else if (i == 1) {
+                                avatarUpdater.openGallery();
+                            } else if (i == 2) {
+                                avatar = null;
+                                uploadedAvatar = null;
+                                avatarImage.setImage(avatar, "50_50", avatarDrawable);
+                            }
+                        }
+                    });
+                    showDialog(builder.create());
+                }
+            });
+
+            nameTextView = new EditText(context);
+            nameTextView.setHint(LocaleController.getString("EnterChannelName", R.string.EnterChannelName));
+            if (nameToSet != null) {
+                nameTextView.setText(nameToSet);
+                nameToSet = null;
+            }
+            nameTextView.setMaxLines(4);
+            nameTextView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            nameTextView.setHintTextColor(0xff979797);
+            nameTextView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            nameTextView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
+            InputFilter[] inputFilters = new InputFilter[1];
+            inputFilters[0] = new InputFilter.LengthFilter(100);
+            nameTextView.setFilters(inputFilters);
+            nameTextView.setPadding(0, 0, 0, AndroidUtilities.dp(8));
+            AndroidUtilities.clearCursorDrawable(nameTextView);
+            nameTextView.setTextColor(0xff212121);
+            frameLayout.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 16 : 96, 0, LocaleController.isRTL ? 96 : 16, 0));
+            nameTextView.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable s) {
+                    avatarDrawable.setInfo(5, nameTextView.length() > 0 ? nameTextView.getText().toString() : null, null, false);
+                    avatarImage.invalidate();
+                }
+            });
+
+            descriptionTextView = new EditText(context);
+            descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            descriptionTextView.setHintTextColor(0xff979797);
+            descriptionTextView.setTextColor(0xff212121);
+            descriptionTextView.setPadding(0, 0, 0, AndroidUtilities.dp(6));
+            descriptionTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            descriptionTextView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            descriptionTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            inputFilters = new InputFilter[1];
+            inputFilters[0] = new InputFilter.LengthFilter(120);
+            descriptionTextView.setFilters(inputFilters);
+            descriptionTextView.setHint(LocaleController.getString("DescriptionPlaceholder", R.string.DescriptionPlaceholder));
+            AndroidUtilities.clearCursorDrawable(descriptionTextView);
+            linearLayout.addView(descriptionTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 24, 18, 24, 0));
+            descriptionTextView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            descriptionTextView.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+
+                }
+            });
+
+            TextView helpTextView = new TextView(context);
+            helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            helpTextView.setTextColor(0xff6d6d72);
+            helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            helpTextView.setText(LocaleController.getString("DescriptionInfo", R.string.DescriptionInfo));
+            linearLayout.addView(helpTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 24, 10, 24, 20));
+        } else if (currentStep == 1) {
+            actionBar.setTitle(LocaleController.getString("ChannelSettings", R.string.ChannelSettings));
+            fragmentView.setBackgroundColor(0xfff0f0f0);
+
+            LinearLayout linearLayout2 = new LinearLayout(context);
+            linearLayout2.setOrientation(LinearLayout.VERTICAL);
+            linearLayout2.setBackgroundColor(0xffffffff);
+            linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            radioButtonCell1 = new RadioButtonCell(context);
+            radioButtonCell1.setBackgroundResource(R.drawable.list_selector);
+            radioButtonCell1.setTextAndValue(LocaleController.getString("ChannelPublic", R.string.ChannelPublic), LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), !isPrivate, false);
+            linearLayout2.addView(radioButtonCell1, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            radioButtonCell1.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (!isPrivate) {
+                        return;
+                    }
+                    isPrivate = false;
+                    updatePrivatePublic();
+                }
+            });
+
+            radioButtonCell2 = new RadioButtonCell(context);
+            radioButtonCell2.setBackgroundResource(R.drawable.list_selector);
+            radioButtonCell2.setTextAndValue(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate), LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo), isPrivate, false);
+            linearLayout2.addView(radioButtonCell2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            radioButtonCell2.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (isPrivate) {
+                        return;
+                    }
+                    isPrivate = true;
+                    updatePrivatePublic();
+                }
+            });
+
+            sectionCell = new ShadowSectionCell(context);
+            linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            linkContainer = new LinearLayout(context);
+            linkContainer.setOrientation(LinearLayout.VERTICAL);
+            linkContainer.setBackgroundColor(0xffffffff);
+            linearLayout.addView(linkContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            headerCell = new HeaderCell(context);
+            linkContainer.addView(headerCell);
+
+            publicContainer = new LinearLayout(context);
+            publicContainer.setOrientation(LinearLayout.HORIZONTAL);
+            linkContainer.addView(publicContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 17, 7, 17, 0));
+
+            EditText editText = new EditText(context);
+            editText.setText("telegram.me/");
+            editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            editText.setHintTextColor(0xff979797);
+            editText.setTextColor(0xff212121);
+            editText.setMaxLines(1);
+            editText.setLines(1);
+            editText.setEnabled(false);
+            editText.setBackgroundDrawable(null);
+            editText.setPadding(0, 0, 0, 0);
+            editText.setSingleLine(true);
+            editText.setInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            publicContainer.addView(editText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 36));
+
+            nameTextView = new EditText(context);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            nameTextView.setHintTextColor(0xff979797);
+            nameTextView.setTextColor(0xff212121);
+            nameTextView.setMaxLines(1);
+            nameTextView.setLines(1);
+            nameTextView.setBackgroundDrawable(null);
+            nameTextView.setPadding(0, 0, 0, 0);
+            nameTextView.setSingleLine(true);
+            nameTextView.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            nameTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            nameTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
+            AndroidUtilities.clearCursorDrawable(nameTextView);
+            publicContainer.addView(nameTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36));
+            nameTextView.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                    checkUserName(nameTextView.getText().toString());
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+
+                }
+            });
+
+            privateContainer = new TextBlockCell(context);
+            privateContainer.setBackgroundResource(R.drawable.list_selector);
+            linkContainer.addView(privateContainer);
+            privateContainer.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (invite == null) {
+                        return;
+                    }
+                    try {
+                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", invite.link);
+                        clipboard.setPrimaryClip(clip);
+                        Toast.makeText(getParentActivity(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+
+            checkTextView = new TextView(context);
+            checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            checkTextView.setVisibility(View.GONE);
+            linkContainer.addView(checkTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 17, 3, 17, 7));
+
+            typeInfoCell = new TextInfoPrivacyCell(context);
+            typeInfoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+            linearLayout.addView(typeInfoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            loadingAdminedCell = new LoadingCell(context);
+            linearLayout.addView(loadingAdminedCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            adminedInfoCell = new TextInfoPrivacyCell(context);
+            adminedInfoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+            linearLayout.addView(adminedInfoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            updatePrivatePublic();
+        } else if (currentStep == 2) {
+            actionBar.setTitle(LocaleController.getString("ChannelAddMembers", R.string.ChannelAddMembers));
+            actionBar.setSubtitle(LocaleController.formatPluralString("Members", selectedContacts.size()));
+
+            searchListViewAdapter = new SearchAdapter(context, null, false, false, false, false);
+            searchListViewAdapter.setCheckedMap(selectedContacts);
+            searchListViewAdapter.setUseUserCell(true);
+            listViewAdapter = new ContactsAdapter(context, 1, false, null, false);
+            listViewAdapter.setCheckedMap(selectedContacts);
+
+            FrameLayout frameLayout = new FrameLayout(context);
+            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            nameTextView = new EditText(context);
+            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            nameTextView.setHintTextColor(0xff979797);
+            nameTextView.setTextColor(0xff212121);
+            nameTextView.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+            nameTextView.setMinimumHeight(AndroidUtilities.dp(54));
+            nameTextView.setSingleLine(false);
+            nameTextView.setLines(2);
+            nameTextView.setMaxLines(2);
+            nameTextView.setVerticalScrollBarEnabled(true);
+            nameTextView.setHorizontalScrollBarEnabled(false);
+            nameTextView.setPadding(0, 0, 0, 0);
+            nameTextView.setHint(LocaleController.getString("AddMutual", R.string.AddMutual));
+            nameTextView.setTextIsSelectable(false);
+            nameTextView.setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+            AndroidUtilities.clearCursorDrawable(nameTextView);
+            frameLayout.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 10, 0, 10, 0));
+
+            nameTextView.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int start, int count, int after) {
+                    if (!ignoreChange) {
+                        beforeChangeIndex = nameTextView.getSelectionStart();
+                        changeString = new SpannableString(charSequence);
+                    }
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (!ignoreChange) {
+                        boolean search = false;
+                        int afterChangeIndex = nameTextView.getSelectionEnd();
+                        if (editable.toString().length() < changeString.toString().length()) {
+                            String deletedString = "";
+                            try {
+                                deletedString = changeString.toString().substring(afterChangeIndex, beforeChangeIndex);
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            if (deletedString.length() > 0) {
+                                if (searching && searchWas) {
+                                    search = true;
+                                }
+                                Spannable span = nameTextView.getText();
+                                for (int a = 0; a < allSpans.size(); a++) {
+                                    ChipSpan sp = allSpans.get(a);
+                                    if (span.getSpanStart(sp) == -1) {
+                                        allSpans.remove(sp);
+                                        selectedContacts.remove(sp.uid);
+                                    }
+                                }
+                                actionBar.setSubtitle(LocaleController.formatPluralString("Members", selectedContacts.size()));
+                                listView.invalidateViews();
+                            } else {
+                                search = true;
+                            }
+                        } else {
+                            search = true;
+                        }
+                        if (search) {
+                            String text = nameTextView.getText().toString().replace("<", "");
+                            if (text.length() != 0) {
+                                searching = true;
+                                searchWas = true;
+                                if (listView != null) {
+                                    listView.setAdapter(searchListViewAdapter);
+                                    searchListViewAdapter.notifyDataSetChanged();
+                                    listView.setFastScrollAlwaysVisible(false);
+                                    listView.setFastScrollEnabled(false);
+                                    listView.setVerticalScrollBarEnabled(true);
+                                }
+                                if (emptyTextView != null) {
+                                    emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                                }
+                                searchListViewAdapter.searchDialogs(text);
+                            } else {
+                                searchListViewAdapter.searchDialogs(null);
+                                searching = false;
+                                searchWas = false;
+                                listView.setAdapter(listViewAdapter);
+                                listViewAdapter.notifyDataSetChanged();
+                                listView.setFastScrollAlwaysVisible(true);
+                                listView.setFastScrollEnabled(true);
+                                listView.setVerticalScrollBarEnabled(false);
+                                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                            }
+                        }
+                    }
+                }
+            });
+
+            LinearLayout emptyTextLayout = new LinearLayout(context);
+            emptyTextLayout.setVisibility(View.INVISIBLE);
+            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
+            linearLayout.addView(emptyTextLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+
+            emptyTextView = new TextView(context);
+            emptyTextView.setTextColor(0xff808080);
+            emptyTextView.setTextSize(20);
+            emptyTextView.setGravity(Gravity.CENTER);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextLayout.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f));
+
+            FrameLayout frameLayout2 = new FrameLayout(context);
+            emptyTextLayout.addView(frameLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f));
+
+            listView = new LetterSectionsListView(context);
+            listView.setEmptyView(emptyTextLayout);
+            listView.setVerticalScrollBarEnabled(false);
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setFastScrollEnabled(true);
+            listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
+            listView.setAdapter(listViewAdapter);
+            listView.setFastScrollAlwaysVisible(true);
+            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            linearLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    TLRPC.User user;
+                    if (searching && searchWas) {
+                        user = (TLRPC.User) searchListViewAdapter.getItem(i);
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        user = (TLRPC.User) listViewAdapter.getItem(section, row);
+                    }
+                    if (user == null) {
+                        return;
+                    }
+
+                    boolean check = true;
+                    if (selectedContacts.containsKey(user.id)) {
+                        check = false;
+                        try {
+                            ChipSpan span = selectedContacts.get(user.id);
+                            selectedContacts.remove(user.id);
+                            SpannableStringBuilder text = new SpannableStringBuilder(nameTextView.getText());
+                            text.delete(text.getSpanStart(span), text.getSpanEnd(span));
+                            allSpans.remove(span);
+                            ignoreChange = true;
+                            nameTextView.setText(text);
+                            nameTextView.setSelection(text.length());
+                            ignoreChange = false;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else {
+                        ignoreChange = true;
+                        ChipSpan span = createAndPutChipForUser(user);
+                        if (span != null) {
+                            span.uid = user.id;
+                        }
+                        ignoreChange = false;
+                        if (span == null) {
+                            return;
+                        }
+                    }
+                    actionBar.setSubtitle(LocaleController.formatPluralString("Members", selectedContacts.size()));
+                    if (searching || searchWas) {
+                        ignoreChange = true;
+                        SpannableStringBuilder ssb = new SpannableStringBuilder("");
+                        for (ImageSpan sp : allSpans) {
+                            ssb.append("<<");
+                            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        }
+                        nameTextView.setText(ssb);
+                        nameTextView.setSelection(ssb.length());
+                        ignoreChange = false;
+
+                        searchListViewAdapter.searchDialogs(null);
+                        searching = false;
+                        searchWas = false;
+                        listView.setAdapter(listViewAdapter);
+                        listViewAdapter.notifyDataSetChanged();
+                        listView.setFastScrollAlwaysVisible(true);
+                        listView.setFastScrollEnabled(true);
+                        listView.setVerticalScrollBarEnabled(false);
+                        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                    } else {
+                        if (view instanceof UserCell) {
+                            ((UserCell) view).setChecked(check, true);
+                        }
+                    }
+                }
+            });
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL) {
+                        AndroidUtilities.hideKeyboard(nameTextView);
+                    }
+                    if (listViewAdapter != null) {
+                        listViewAdapter.setIsScrolling(i != SCROLL_STATE_IDLE);
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (absListView.isFastScrollEnabled()) {
+                        AndroidUtilities.clearDrawableAnimation(absListView);
+                    }
+                }
+            });
+        }
+
+        return fragmentView;
+    }
+
+    private void generateLink() {
+        if (loadingInvite || invite != null) {
+            return;
+        }
+        loadingInvite = true;
+        TLRPC.TL_channels_exportInvite req = new TLRPC.TL_channels_exportInvite();
+        req.channel = MessagesController.getInputChannel(chatId);
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (error == null) {
+                            invite = (TLRPC.ExportedChatInvite) response;
+                        }
+                        loadingInvite = false;
+                        privateContainer.setText(invite != null ? invite.link : LocaleController.getString("Loading", R.string.Loading), false);
+                    }
+                });
+            }
+        });
+    }
+
+    private void updatePrivatePublic() {
+        if (sectionCell == null) {
+            return;
+        }
+        if (!isPrivate && !canCreatePublic) {
+            typeInfoCell.setText(LocaleController.getString("ChangePublicLimitReached", R.string.ChangePublicLimitReached));
+            typeInfoCell.setTextColor(0xffcf3030);
+            linkContainer.setVisibility(View.GONE);
+            sectionCell.setVisibility(View.GONE);
+            if (loadingAdminedChannels) {
+                loadingAdminedCell.setVisibility(View.VISIBLE);
+                for (int a = 0; a < adminedChannelCells.size(); a++) {
+                    adminedChannelCells.get(a).setVisibility(View.GONE);
+                }
+                typeInfoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+                adminedInfoCell.setVisibility(View.GONE);
+            } else {
+                typeInfoCell.setBackgroundResource(R.drawable.greydivider);
+                loadingAdminedCell.setVisibility(View.GONE);
+                for (int a = 0; a < adminedChannelCells.size(); a++) {
+                    adminedChannelCells.get(a).setVisibility(View.VISIBLE);
+                }
+                adminedInfoCell.setVisibility(View.VISIBLE);
+            }
+        } else {
+            typeInfoCell.setTextColor(0xff808080);
+            sectionCell.setVisibility(View.VISIBLE);
+            adminedInfoCell.setVisibility(View.GONE);
+            typeInfoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+            for (int a = 0; a < adminedChannelCells.size(); a++) {
+                adminedChannelCells.get(a).setVisibility(View.GONE);
+            }
+            linkContainer.setVisibility(View.VISIBLE);
+            loadingAdminedCell.setVisibility(View.GONE);
+            typeInfoCell.setText(isPrivate ? LocaleController.getString("ChannelPrivateLinkHelp", R.string.ChannelPrivateLinkHelp) : LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
+            headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
+            publicContainer.setVisibility(isPrivate ? View.GONE : View.VISIBLE);
+            privateContainer.setVisibility(isPrivate ? View.VISIBLE : View.GONE);
+            linkContainer.setPadding(0, 0, 0, isPrivate ? 0 : AndroidUtilities.dp(7));
+            privateContainer.setText(invite != null ? invite.link : LocaleController.getString("Loading", R.string.Loading), false);
+            checkTextView.setVisibility(!isPrivate && checkTextView.length() != 0 ? View.VISIBLE : View.GONE);
+        }
+        radioButtonCell1.setChecked(!isPrivate, true);
+        radioButtonCell2.setChecked(isPrivate, true);
+        nameTextView.clearFocus();
+        AndroidUtilities.hideKeyboard(nameTextView);
+    }
+
+    @Override
+    public void didUploadedPhoto(final TLRPC.InputFile file, final TLRPC.PhotoSize small, final TLRPC.PhotoSize big) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                uploadedAvatar = file;
+                avatar = small.location;
+                avatarImage.setImage(avatar, "50_50", avatarDrawable);
+                if (createAfterUpload) {
+                    try {
+                        if (progressDialog != null && progressDialog.isShowing()) {
+                            progressDialog.dismiss();
+                            progressDialog = null;
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    doneButton.performClick();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        avatarUpdater.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentStep == 0) {
+            if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
+                args.putString("path", avatarUpdater.currentPicturePath);
+            }
+            if (nameTextView != null) {
+                String text = nameTextView.getText().toString();
+                if (text != null && text.length() != 0) {
+                    args.putString("nameTextView", text);
+                }
+            }
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        if (currentStep == 0) {
+            if (avatarUpdater != null) {
+                avatarUpdater.currentPicturePath = args.getString("path");
+            }
+            String text = args.getString("nameTextView");
+            if (text != null) {
+                if (nameTextView != null) {
+                    nameTextView.setText(text);
+                } else {
+                    nameToSet = text;
+                }
+            }
+        }
+    }
+
+    @Override
+    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
+        if (isOpen && currentStep != 1) {
+            nameTextView.requestFocus();
+            AndroidUtilities.showKeyboard(nameTextView);
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatDidFailCreate) {
+            if (progressDialog != null) {
+                try {
+                    progressDialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            donePressed = false;
+        } else if (id == NotificationCenter.chatDidCreated) {
+            if (progressDialog != null) {
+                try {
+                    progressDialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            int chat_id = (Integer) args[0];
+            Bundle bundle = new Bundle();
+            bundle.putInt("step", 1);
+            bundle.putInt("chat_id", chat_id);
+            bundle.putBoolean("canCreatePublic", canCreatePublic);
+            if (uploadedAvatar != null) {
+                MessagesController.getInstance().changeChatAvatar(chat_id, uploadedAvatar);
+            }
+            presentFragment(new Util(bundle), true);
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    private void loadAdminedChannels() {
+        if (loadingAdminedChannels) {
+            return;
+        }
+        loadingAdminedChannels = true;
+        updatePrivatePublic();
+        TLRPC.TL_channels_getAdminedPublicChannels req = new TLRPC.TL_channels_getAdminedPublicChannels();
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        loadingAdminedChannels = false;
+                        if (response != null) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            for (int a = 0; a < adminedChannelCells.size(); a++) {
+                                linearLayout.removeView(adminedChannelCells.get(a));
+                            }
+                            adminedChannelCells.clear();
+                            TLRPC.TL_messages_chats res = (TLRPC.TL_messages_chats) response;
+
+                            for (int a = 0; a < res.chats.size(); a++) {
+                                AdminedChannelCell adminedChannelCell = new AdminedChannelCell(getParentActivity(), new View.OnClickListener() {
+                                    @Override
+                                    public void onClick(View view) {
+                                        AdminedChannelCell cell = (AdminedChannelCell) view.getParent();
+                                        final TLRPC.Chat channel = cell.getCurrentChannel();
+                                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                        if (channel.megagroup) {
+                                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlert", R.string.RevokeLinkAlert, "telegram.me/" + channel.username, channel.title)));
+                                        } else {
+                                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlertChannel", R.string.RevokeLinkAlertChannel, "telegram.me/" + channel.username, channel.title)));
+                                        }
+                                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                        builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), new DialogInterface.OnClickListener() {
+                                            @Override
+                                            public void onClick(DialogInterface dialogInterface, int i) {
+                                                TLRPC.TL_channels_updateUsername req = new TLRPC.TL_channels_updateUsername();
+                                                req.channel = MessagesController.getInputChannel(channel);
+                                                req.username = "";
+                                                ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                                                    @Override
+                                                    public void run(TLObject response, TLRPC.TL_error error) {
+                                                        if (response instanceof TLRPC.TL_boolTrue) {
+                                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                                @Override
+                                                                public void run() {
+                                                                    canCreatePublic = true;
+                                                                    if (nameTextView.length() > 0) {
+                                                                        checkUserName(nameTextView.getText().toString());
+                                                                    }
+                                                                    updatePrivatePublic();
+                                                                }
+                                                            });
+                                                        }
+                                                    }
+                                                }, ConnectionsManager.RequestFlagInvokeAfter);
+                                            }
+                                        });
+                                        showDialog(builder.create());
+                                    }
+                                });
+                                adminedChannelCell.setChannel(res.chats.get(a), a == res.chats.size() - 1);
+                                adminedChannelCells.add(adminedChannelCell);
+                                linearLayout.addView(adminedChannelCell, linearLayout.getChildCount() - 1, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 72));
+                            }
+                            updatePrivatePublic();
+                        }
+                    }
+                });
+            }
+        });
+    }
+
+    private boolean checkUserName(final String name) {
+        if (name != null && name.length() > 0) {
+            checkTextView.setVisibility(View.VISIBLE);
+        } else {
+            checkTextView.setVisibility(View.GONE);
+        }
+        if (checkRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
+            checkRunnable = null;
+            lastCheckName = null;
+            if (checkReqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(checkReqId, true);
+            }
+        }
+        lastNameAvailable = false;
+        if (name != null) {
+            if (name.startsWith("_") || name.endsWith("_")) {
+                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                checkTextView.setTextColor(0xffcf3030);
+                return false;
+            }
+            for (int a = 0; a < name.length(); a++) {
+                char ch = name.charAt(a);
+                if (a == 0 && ch >= '0' && ch <= '9') {
+                    checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
+                    checkTextView.setTextColor(0xffcf3030);
+                    return false;
+                }
+                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                    checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                    checkTextView.setTextColor(0xffcf3030);
+                    return false;
+                }
+            }
+        }
+        if (name == null || name.length() < 5) {
+            checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
+            checkTextView.setTextColor(0xffcf3030);
+            return false;
+        }
+        if (name.length() > 32) {
+            checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
+            checkTextView.setTextColor(0xffcf3030);
+            return false;
+        }
+
+        checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
+        checkTextView.setTextColor(0xff6d6d72);
+        lastCheckName = name;
+        checkRunnable = new Runnable() {
+            @Override
+            public void run() {
+                TLRPC.TL_channels_checkUsername req = new TLRPC.TL_channels_checkUsername();
+                req.username = name;
+                req.channel = MessagesController.getInputChannel(chatId);
+                checkReqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                    @Override
+                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                checkReqId = 0;
+                                if (lastCheckName != null && lastCheckName.equals(name)) {
+                                    if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                        checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
+                                        checkTextView.setTextColor(0xff26972c);
+                                        lastNameAvailable = true;
+                                    } else {
+                                        if (error != null && error.text.equals("CHANNELS_ADMIN_PUBLIC_TOO_MUCH")) {
+                                            canCreatePublic = false;
+                                            loadAdminedChannels();
+                                        } else {
+                                            checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                                        }
+                                        checkTextView.setTextColor(0xffcf3030);
+                                        lastNameAvailable = false;
+                                    }
+                                }
+                            }
+                        });
+                    }
+                }, ConnectionsManager.RequestFlagFailOnServerErrors);
+            }
+        };
+        AndroidUtilities.runOnUIThread(checkRunnable, 300);
+        return true;
+    }
+
+    private void showErrorAlert(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        switch (error) {
+            case "USERNAME_INVALID":
+                builder.setMessage(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                break;
+            case "USERNAME_OCCUPIED":
+                builder.setMessage(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                break;
+            case "USERNAMES_UNAVAILABLE":
+                builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
+                break;
+            default:
+                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
+                break;
+        }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showDialog(builder.create());
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
+            }
+        }
+    }
+
+    private ChipSpan createAndPutChipForUser(TLRPC.User user) {
+        try {
+            LayoutInflater lf = (LayoutInflater) ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
+            View textView = lf.inflate(R.layout.group_create_bubble, null);
+            TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
+            String name = UserObject.getUserName(user);
+            if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
+                name = PhoneFormat.getInstance().format("+" + user.phone);
+            }
+            text.setText(name + ", ");
+
+            int spec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
+            textView.measure(spec, spec);
+            textView.layout(0, 0, textView.getMeasuredWidth(), textView.getMeasuredHeight());
+            Bitmap b = Bitmap.createBitmap(textView.getWidth(), textView.getHeight(), Bitmap.Config.ARGB_8888);
+            Canvas canvas = new Canvas(b);
+            canvas.translate(-textView.getScrollX(), -textView.getScrollY());
+            textView.draw(canvas);
+            textView.setDrawingCacheEnabled(true);
+            Bitmap cacheBmp = textView.getDrawingCache();
+            Bitmap viewBmp = cacheBmp.copy(Bitmap.Config.ARGB_8888, true);
+            textView.destroyDrawingCache();
+
+            final BitmapDrawable bmpDrawable = new BitmapDrawable(b);
+            bmpDrawable.setBounds(0, 0, b.getWidth(), b.getHeight());
+
+            SpannableStringBuilder ssb = new SpannableStringBuilder("");
+            ChipSpan span = new ChipSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
+            allSpans.add(span);
+            selectedContacts.put(user.id, span);
+            for (ImageSpan sp : allSpans) {
+                ssb.append("<<");
+                ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+            }
+            nameTextView.setText(ssb);
+            nameTextView.setSelection(ssb.length());
+            return span;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DataManager.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DataManager.java
new file mode 100644
index 000000000..880ffb4bb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DataManager.java
@@ -0,0 +1,295 @@
+package org.telegram.ui.tools.download;
+
+import org.joda.time.DateTime;
+import org.joda.time.Hours;
+
+import java.util.Calendar;
+
+import com.inspius.read247.MainActivity;
+import com.inspius.read247.app.constant.AppConstant;
+import com.inspius.read247.app.model.DataBookModel;
+import com.inspius.read247.app.model.DataHomeModel;
+import com.inspius.read247.app.model.DataStoryModel;
+import com.inspius.read247.app.pref.SettingPrefs_;
+import com.inspius.read247.std.util.Logger;
+
+/**
+ * Created by dev on 3/6/2015.
+ */
+public class DataManager {
+    DataHomeModel dataHome;
+    DataBookModel dataBook;
+    DataStoryModel dataStory;
+
+    MainActivity mContext;
+
+    SettingPrefs_ settingPrefs;
+
+    public DataManager(MainActivity mContext, SettingPrefs_ settingPrefs) {
+        this.mContext = mContext;
+        this.settingPrefs = settingPrefs;
+    }
+
+    /**
+     * get All Data
+     *
+     * @param listener
+     */
+    public void getAllData(final RPCListener listener) {
+        getDataHome(new RPCListener() {
+            @Override
+            public void onError(int code, String error) {
+                listener.onError(code, error);
+            }
+
+            @Override
+            public void onSuccess(Object object) {
+                getDataStory(new RPCListener() {
+                    @Override
+                    public void onError(int code, String error) {
+                        listener.onError(code, error);
+                    }
+
+                    @Override
+                    public void onSuccess(Object object) {
+                        getDataBook(new RPCListener() {
+                            @Override
+                            public void onError(int code, String error) {
+                                listener.onError(code, error);
+                            }
+
+                            @Override
+                            public void onSuccess(Object object) {
+                                listener.onSuccess(null);
+                            }
+                        });
+                    }
+                });
+            }
+        });
+    }
+
+//    public void requestData(AppConstant.SUB_MENU_TYPE type, final RPCListener listener) {
+//        if (type == AppConstant.SUB_MENU_TYPE.Home) {
+//            getDataHome(listener);
+//        } else if (type == AppConstant.SUB_MENU_TYPE.BOOK) {
+//            getDataBook(listener);
+//        } else if (type == AppConstant.SUB_MENU_TYPE.STORY) {
+//            getDataStory(listener);
+//        }
+//    }
+
+    /**
+     * Get list book
+     *
+     * @param listener
+     */
+    public void getDataBook(final RPCListener listener) {
+        if (dataBook != null) {
+            listener.onSuccess(dataBook);
+        } else {
+            String data = settingPrefs.listdataBook().get();
+            if (data.isEmpty()) {
+                requestDataBook(listener);
+            } else if (isLoadData(settingPrefs.timeGetDataBook().get())) {
+                requestDataBook(listener);
+            } else {
+                parseDataBook(data, listener);
+            }
+        }
+    }
+
+    /**
+     * Request list Book from Server
+     *
+     * @param listener
+     */
+    public void requestDataBook(final RPCListener listener) {
+        String url = AppConstant.URL_LIST_DATA_BOOK;
+        mContext.mRpc.getListData(url, new RPCListener() {
+            @Override
+            public void onError(int code, String error) {
+                String data = settingPrefs.listdataBook().get();
+                if (data.isEmpty()) {
+                    listener.onError(code, error);
+                } else {
+                    parseDataBook(data, listener);
+                }
+            }
+
+            @Override
+            public void onSuccess(Object object) {
+                String data = (String) object;
+                settingPrefs.edit().listdataBook().put(data).timeGetDataBook().put(Calendar.getInstance().getTimeInMillis()).apply();
+                parseDataBook(data, listener);
+            }
+        });
+    }
+
+    /**
+     * Parse response to list book
+     *
+     * @param data
+     * @param listener
+     */
+    void parseDataBook(final String data, final RPCListener listener) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                dataBook = DataBookModel.paserDataFromServer(data);
+                listener.onSuccess(dataBook);
+            }
+        }).start();
+    }
+
+    /**
+     * Get list story
+     *
+     * @param listener
+     */
+    public void getDataStory(final RPCListener listener) {
+        if (dataStory != null) {
+            listener.onSuccess(dataStory);
+        } else {
+            String data = settingPrefs.listdataStory().get();
+            if (data.isEmpty()) {
+                requestDataStory(listener);
+            } else if (isLoadData(settingPrefs.timeGetDataStory().get())) {
+                requestDataStory(listener);
+            } else {
+                parserListDataStory(data, listener);
+            }
+        }
+    }
+
+    /**
+     * Request get list story from Server
+     *
+     * @param listener
+     */
+    public void requestDataStory(final RPCListener listener) {
+        String url = AppConstant.URL_LIST_DATA_STORY;
+        mContext.mRpc.getListData(url, new RPCListener() {
+            @Override
+            public void onError(int code, String error) {
+                String data = settingPrefs.listdataStory().get();
+                if (data.isEmpty()) {
+                    listener.onError(code, error);
+                } else {
+                    parserListDataStory(data, listener);
+                }
+            }
+
+            @Override
+            public void onSuccess(Object object) {
+                String data = (String) object;
+                settingPrefs.edit().listdataStory().put(data).timeGetDataStory().put(Calendar.getInstance().getTimeInMillis()).apply();
+                parserListDataStory(data, listener);
+            }
+        });
+    }
+
+    /**
+     * Parse response to list story
+     *
+     * @param data
+     * @param listener
+     */
+    void parserListDataStory(final String data, final RPCListener listener) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                dataStory = DataStoryModel.paserDataFromServer(data);
+                listener.onSuccess(dataStory);
+            }
+        }).start();
+    }
+
+    /**
+     * Get list data at Home
+     *
+     * @param listener
+     */
+    public void getDataHome(final RPCListener listener) {
+        if (dataHome != null) {
+            listener.onSuccess(dataHome);
+        } else {
+            String data = settingPrefs.listdataHome().get();
+            if (data.isEmpty()) {
+                requestDataHome(listener);
+            } else if (isLoadData(settingPrefs.timeGetDataHome().get())) {
+                requestDataHome(listener);
+            } else {
+                parserListDataHome(data, listener);
+            }
+        }
+    }
+
+    /**
+     * Request get list data at Home from Server
+     *
+     * @param listener
+     */
+    public void requestDataHome(final RPCListener listener) {
+        String url = AppConstant.URL_LIST_DATA_HOME;
+        mContext.mRpc.getListData(url, new RPCListener() {
+            @Override
+            public void onError(int code, String error) {
+                String data = settingPrefs.listdataHome().get();
+                if (data.isEmpty()) {
+                    listener.onError(code, error);
+                } else {
+                    parserListDataHome(data, listener);
+                }
+            }
+
+            @Override
+            public void onSuccess(Object object) {
+                String data = (String) object;
+                settingPrefs.edit().listdataHome().put(data).timeGetDataHome().put(Calendar.getInstance().getTimeInMillis()).apply();
+                parserListDataHome(data, listener);
+            }
+        });
+    }
+
+    /**
+     * Parse response to data Home
+     *
+     * @param listener
+     */
+    void parserListDataHome(final String data, final RPCListener listener) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                dataHome = DataHomeModel.paserDataFromServer(data);
+
+                listener.onSuccess(dataHome);
+            }
+        }).start();
+    }
+
+    /**
+     * check space time load data
+     *
+     * @param sTime
+     * @return
+     */
+    boolean isLoadData(long sTime) {
+        if (sTime <= 0) {
+            return true;
+        } else {
+            DateTime start = new DateTime(sTime);
+            DateTime end = new DateTime(Calendar.getInstance().getTimeInMillis());
+            //int countDay = Days.daysBetween(start, end).getDays();
+            
+            int countHour = Hours.hoursBetween(start, end).getHours();
+            Logger.i("time Load Data", countHour + "");
+
+            // after 3h then reload
+            if (countHour > 3 || countHour < 0)
+                return true;
+            else
+                return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DownloadManager.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DownloadManager.java
new file mode 100644
index 000000000..765d7aa58
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/download/DownloadManager.java
@@ -0,0 +1,515 @@
+/*
+ * This is the source code of Telegram for Android v. 2.0.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.download;
+
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextInfoCell;
+import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.GroupCreateActivity;
+import org.telegram.ui.ProfileActivity;
+
+import java.util.ArrayList;
+
+public class DownloadManager extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    public interface PrivacyActivityDelegate {
+        void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
+    }
+
+    private ListView listView;
+    private ListAdapter listViewAdapter;
+    private int selectedUserId;
+
+    private boolean isGroup;
+
+    private ArrayList<Integer> uidArray;
+    private boolean isAlwaysShare;
+
+    private PrivacyActivityDelegate delegate;
+
+    private final static int block_user = 1;
+
+    public DownloadManager(ArrayList<Integer> users, boolean group, boolean always) {
+        super();
+        uidArray = users;
+        isAlwaysShare = always;
+        isGroup = group;
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        if (isGroup) {
+            if (isAlwaysShare) {
+                actionBar.setTitle(LocaleController.getString("AlwaysAllow", R.string.AlwaysAllow));
+            } else {
+                actionBar.setTitle(LocaleController.getString("NeverAllow", R.string.NeverAllow));
+            }
+        } else {
+            if (isAlwaysShare) {
+                actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
+            } else {
+                actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
+            }
+        }
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == block_user) {
+                    Bundle args = new Bundle();
+                    args.putBoolean(isAlwaysShare ? "isAlwaysShare" : "isNeverShare", true);
+                    args.putBoolean("isGroup", isGroup);
+                    GroupCreateActivity fragment = new GroupCreateActivity(args);
+                    fragment.setDelegate(new GroupCreateActivity.GroupCreateActivityDelegate() {
+                        @Override
+                        public void didSelectUsers(ArrayList<Integer> ids) {
+                            for (Integer id : ids) {
+                                if (uidArray.contains(id)) {
+                                    continue;
+                                }
+                                uidArray.add(id);
+                            }
+                            listViewAdapter.notifyDataSetChanged();
+                            if (delegate != null) {
+                                delegate.didUpdatedUserList(uidArray, true);
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        menu.addItem(block_user, R.drawable.plus);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        TextView emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff808080);
+        emptyTextView.setTextSize(20);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setVisibility(View.INVISIBLE);
+        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+        frameLayout.addView(emptyTextView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextView.getLayoutParams();
+        layoutParams.width = LayoutHelper.MATCH_PARENT;
+        layoutParams.height = LayoutHelper.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP;
+        emptyTextView.setLayoutParams(layoutParams);
+        emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        listView = new ListView(context);
+        listView.setEmptyView(emptyTextView);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setAdapter(listViewAdapter = new ListAdapter(context));
+        listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+        frameLayout.addView(listView);
+        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+        layoutParams.width = LayoutHelper.MATCH_PARENT;
+        layoutParams.height = LayoutHelper.MATCH_PARENT;
+        listView.setLayoutParams(layoutParams);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (i < uidArray.size()) {
+                    Bundle args = new Bundle();
+                    args.putInt("user_id", uidArray.get(i));
+                    presentFragment(new ProfileActivity(args));
+                }
+            }
+        });
+
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (i < 0 || i >= uidArray.size() || getParentActivity() == null) {
+                    return true;
+                }
+                selectedUserId = uidArray.get(i);
+
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                CharSequence[] items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                builder.setItems(items, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (i == 0) {
+                            uidArray.remove((Integer) selectedUserId);
+                            listViewAdapter.notifyDataSetChanged();
+                            if (delegate != null) {
+                                delegate.didUpdatedUserList(uidArray, false);
+                            }
+                        }
+                    }
+                });
+                showDialog(builder.create());
+                return true;
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateVisibleRows(mask);
+            }
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof UserCell) {
+                ((UserCell) child).update(mask);
+            }
+        }
+    }
+
+    public void setDelegate(PrivacyActivityDelegate privacyActivityDelegate) {
+        delegate = privacyActivityDelegate;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != uidArray.size();
+        }
+
+        @Override
+        public int getCount() {
+            if (uidArray.isEmpty()) {
+                return 0;
+            }
+            return uidArray.size() + 1;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new UserCell(mContext, 1, 0, false);
+                }
+                TLRPC.User user = MessagesController.getInstance().getUser(uidArray.get(i));
+                ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoCell(mContext);
+                    ((TextInfoCell) view).setText(LocaleController.getString("RemoveFromListText", R.string.RemoveFromListText));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if(i == uidArray.size()) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return uidArray.isEmpty();
+        }
+    }
+
+    /**
+     * Created by Binh on 4/4/2015.
+     */
+    @EBean
+    public static class DownloadManager {
+        DisplayImageOptions options;
+
+        @RootContext
+        MainActivity mContext;
+
+        ImageLoader imageLoader;
+        RPCListener listener;
+        ProductModel productModel;
+        ProgressDialog mDialog;
+        int total = 0;
+        int count = 0;
+        AlertDialog alertDialogReload;
+
+        public DownloadManager() {
+            imageLoader = ImageLoader.getInstance();
+
+            options = new DisplayImageOptions.Builder()
+                    //.showImageForEmptyUri(R.drawable.ic_emtry)
+                    //.showImageOnFail(R.drawable.ic_error)
+                    //.resetViewBeforeLoading(true)
+                    //.cacheInMemory(false)
+                    .cacheOnDisk(true)
+                            //.imageScaleType(ImageScaleType.EXACTLY)
+                            //.bitmapConfig(Bitmap.Config.RGB_565)
+                            //.considerExifParams(true)
+                            //.displayer(new FadeInBitmapDisplayer(300))
+                    .build();
+        }
+
+        /**
+         * Download document
+         *
+         * @param productModel
+         * @param listener
+         */
+        public void downloadDocument(final ProductModel productModel, final RPCListener listener) {
+            if (productModel != null)
+                this.productModel = productModel;
+
+            if (listener != null)
+                this.listener = listener;
+
+            total = productModel.numberPages;
+            count = 0;
+
+            if (total > 0) {
+                if (productModel == null)
+                    return;
+
+                showLoading();
+
+                new Thread(new Runnable() {
+                    @Override
+                    public void run() {
+                        imageLoader.loadImageSync(productModel.mobileThumbnail);
+                        for (int i = 0; i < total; i++) {
+                            final String imageUrl = String.format(AppConstant.URL_LIST_DATA_READ, productModel.documentId, i);
+                            imageLoader.loadImage(imageUrl, options, new ImageLoadingListener() {
+                                @Override
+                                public void onLoadingStarted(String imageUri, View view) {
+
+                                }
+
+                                @Override
+                                public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
+                                    if (alertDialogReload != null && alertDialogReload.isShowing())
+                                        return;
+
+                                    if (mDialog != null && mDialog.isShowing())
+                                        mDialog.dismiss();
+
+                                    stopLoadImage();
+
+                                    showReload();
+                                }
+
+                                @Override
+                                public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
+                                    countLoading();
+                                }
+
+                                @Override
+                                public void onLoadingCancelled(String imageUri, View view) {
+                                    if (mDialog != null && mDialog.isShowing())
+                                        mDialog.dismiss();
+                                }
+                            });
+                        }
+                    }
+                }).start();
+            } else {
+                mContext.showMessageBox(mContext.getString(R.string.msg_not_update_data), null);
+            }
+        }
+
+        @UiThread
+        void showReload() {
+            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(mContext);
+            alertDialogBuilder.setTitle(mContext.getString(R.string.msg_download_false));
+            alertDialogBuilder.setMessage(mContext.getString(R.string.msg_check_connect_or_memory));
+            alertDialogBuilder.setNegativeButton(mContext.getString(R.string.cancel), new DialogInterface.OnClickListener() {
+
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    dialog.cancel();
+                }
+            });
+
+            alertDialogBuilder.setPositiveButton(mContext.getString(R.string.msg_continue_download), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    downloadDocument(productModel, listener);
+                }
+            });
+
+            alertDialogReload = alertDialogBuilder.create();
+
+            alertDialogBuilder.show();
+        }
+
+        @UiThread
+        void showLoading() {
+            mDialog = DialogUtil.showDialogDownload(mContext, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    dialog.dismiss();
+                    cancelDownload();
+                }
+            });
+
+            mDialog.show();
+        }
+
+        @UiThread
+        void countLoading() {
+            count++;
+            float per = ((float) count / total) * 100f;
+            mDialog.setMessage(mContext.getString(R.string.msg_downloading) + (int) per + "%");
+
+            if (count == total) {
+                if (mDialog != null && mDialog.isShowing())
+                    mDialog.dismiss();
+
+                if (listener != null)
+                    listener.onSuccess(true);
+            }
+
+        }
+
+        @UiThread
+        @Background
+        public void cancelDownload() {
+            if (imageLoader == null)
+                return;
+
+            if (alertDialogReload != null && alertDialogReload.isShowing())
+                alertDialogReload.dismiss();
+
+            if (mDialog != null && mDialog.isShowing())
+                mDialog.dismiss();
+
+            stopLoadImage();
+
+            imageLoader.getDiskCache().remove(productModel.mobileThumbnail);
+
+            for (int i = 0; i < total; i++) {
+                final String imageUrl = String.format(AppConstant.URL_LIST_DATA_READ, productModel.documentId, i);
+                if (imageLoader != null)
+                    imageLoader.getDiskCache().remove(imageUrl);
+            }
+
+            count = 0;
+            total = 0;
+        }
+
+        public void stopLoadImage() {
+            if (imageLoader == null)
+                return;
+
+            imageLoader.stop();
+        }
+
+        public boolean isDownSuccess() {
+            if (count == total)
+                return true;
+            else
+                return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/model/FavChecker.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/FavChecker.java
new file mode 100644
index 000000000..7ee231e17
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/FavChecker.java
@@ -0,0 +1,23 @@
+package org.telegram.ui.tools.model;
+
+import com.google.gson.Gson;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+/**
+ * Created by dev on 3/6/2015.
+ */
+public class FavChecker {
+    @SerializedName("fav_checker")
+    public List<ProductModel> listTruyenMoi;
+
+    @SerializedName("fav_checker")
+    public List<ProductModel> listTruyenNoiBat;
+
+    public static FavChecker paserDataFromServer(String data) {
+        FavChecker dataHomeModel = new Gson().fromJson(data, FavChecker.class);
+        return dataHomeModel;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/model/GhostModeProtocole.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/GhostModeProtocole.java
new file mode 100644
index 000000000..8dd3a6850
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/GhostModeProtocole.java
@@ -0,0 +1,23 @@
+package org.telegram.ui.tools.model;
+
+import com.google.gson.Gson;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+/**
+ * Created by dev on 3/6/2015.
+ */
+public class GhostModeProtocole {
+    @SerializedName("gost_mode")
+    public List<ProductModel> listSachMoi;
+
+    @SerializedName("gost_mode")
+    public List<ProductModel> listSachNoiBat;
+
+    public static GhostModeProtocole paserDataFromServer(String data){
+        DataBookModel dataHomeModel = new Gson().fromJson(data, DataBookModel.class);
+        return dataHomeModel;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/model/HomeModel.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/HomeModel.java
new file mode 100644
index 000000000..c6582885a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/HomeModel.java
@@ -0,0 +1,25 @@
+package org.telegram.ui.tools.model;
+
+import android.content.Context;
+
+import com.inspius.read247.R;
+
+/**
+ * Created by dev on 3/9/2015.
+ */
+public class HomeModel {
+    public ProductModel productModel;
+    public String countView;
+    public String countDown;
+    public String author;
+
+    public HomeModel(Context context, ProductModel productModel) {
+        this.productModel = productModel;
+        countView = String.format(context.getString(R.string.item_view), productModel.viewCount);
+        countDown= String.format(context.getString(R.string.item_down), productModel.viewCount);
+
+        author = productModel.author;
+        if(author==null||author.isEmpty())
+            author = context.getString(R.string.not_known);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/model/SecurityController.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/SecurityController.java
new file mode 100644
index 000000000..5a191fed1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/model/SecurityController.java
@@ -0,0 +1,26 @@
+package org.telegram.ui.tools.model;
+
+import com.google.gson.Gson;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+/**
+ * Created by dev on 3/6/2015.
+ */
+public class SecurityController {
+    @SerializedName("secu")
+    public List<SecurityController> listSachMoi;
+
+    @SerializedName("secu")
+    public List<SecurityController lisTruyenMoi;
+
+    @SerializedName("secu")
+    public List<SecurityController> listDocNhieuNhat;
+
+    public static SecurityController paserDataFromServer(String data){
+        DataHomeModel dataHomeModel = new Gson().fromJson(data, DataHomeModel.class);
+        return dataHomeModel;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/my_activity/About.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/my_activity/About.java
new file mode 100644
index 000000000..32ce6294e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/my_activity/About.java
@@ -0,0 +1,15 @@
+package org.telegram.ui.tools.my_activity;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+
+import com.telegram.hame.mohamad.R;
+
+public class About extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_about);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/paint/Paint.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/paint/Paint.java
new file mode 100644
index 000000000..ec0784e86
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/paint/Paint.java
@@ -0,0 +1,521 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.paint;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.support.v4.content.FileProvider;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.BuildConfig;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.WallpaperCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.RecyclerListView;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class Paint extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+    private ImageView backgroundImage;
+    private FrameLayout progressView;
+    private View progressViewBackground;
+    private int selectedBackground;
+    private int selectedColor;
+    private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<>();
+    private HashMap<Integer, TLRPC.WallPaper> wallpappersByIds = new HashMap<>();
+    private View doneButton;
+    private String loadingFile = null;
+    private File loadingFileObject = null;
+    private TLRPC.PhotoSize loadingSize = null;
+    private String currentPicturePath;
+
+    private final static int done_button = 1;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        selectedBackground = preferences.getInt("selectedBackground", 1000001);
+        selectedColor = preferences.getInt("selectedColor", 0);
+        MessagesStorage.getInstance().getWallpapers();
+        File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper-temp.jpg");
+        toFile.delete();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ChatBackground", R.string.ChatBackground));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+                    boolean done;
+                    TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
+                    if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
+                        int width = AndroidUtilities.displaySize.x;
+                        int height = AndroidUtilities.displaySize.y;
+                        if (width > height) {
+                            int temp = width;
+                            width = height;
+                            height = temp;
+                        }
+                        TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
+                        String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
+                        File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                        File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper.jpg");
+                        try {
+                            done = AndroidUtilities.copyFile(f, toFile);
+                        } catch (Exception e) {
+                            done = false;
+                            FileLog.e("tmessages", e);
+                        }
+                    } else {
+                        if (selectedBackground == -1) {
+                            File fromFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper-temp.jpg");
+                            File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper.jpg");
+                            done = fromFile.renameTo(toFile);
+                        } else {
+                            done = true;
+                        }
+                    }
+
+                    if (done) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putInt("selectedBackground", selectedBackground);
+                        editor.putInt("selectedColor", selectedColor);
+                        editor.commit();
+                        ApplicationLoader.reloadWallpaper();
+                    }
+                    finishFragment();
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        FrameLayout frameLayout = new FrameLayout(context);
+        fragmentView = frameLayout;
+
+        backgroundImage = new ImageView(context);
+        backgroundImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
+        frameLayout.addView(backgroundImage, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        backgroundImage.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        progressView = new FrameLayout(context);
+        progressView.setVisibility(View.INVISIBLE);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 52));
+
+        progressViewBackground = new View(context);
+        progressViewBackground.setBackgroundResource(R.drawable.system_loader);
+        progressView.addView(progressViewBackground, LayoutHelper.createFrame(36, 36, Gravity.CENTER));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        try {
+            progressBar.setIndeterminateDrawable(context.getResources().getDrawable(R.drawable.loading_animation));
+        } catch (Exception e) {
+            //don't promt
+        }
+        progressBar.setIndeterminate(true);
+        AndroidUtilities.setProgressBarAnimationDuration(progressBar, 1500);
+        progressView.addView(progressBar, LayoutHelper.createFrame(32, 32, Gravity.CENTER));
+
+        RecyclerListView listView = new RecyclerListView(context);
+        listView.setClipToPadding(false);
+        listView.setTag(8);
+        listView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
+        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
+        listView.setLayoutManager(layoutManager);
+        listView.setDisallowInterceptTouchEvents(true);
+        listView.setOverScrollMode(RecyclerListView.OVER_SCROLL_NEVER);
+        listView.setAdapter(listAdapter = new ListAdapter(context));
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 102, Gravity.LEFT | Gravity.BOTTOM));
+        listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
+            @Override
+            public void onItemClick(View view, int position) {
+                if (position == 0) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                    CharSequence[] items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
+
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            try {
+                                if (i == 0) {
+                                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                                    File image = AndroidUtilities.generatePicturePath();
+                                    if (image != null) {
+                                        if (Build.VERSION.SDK_INT >= 24) {
+                                            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", image));
+                                            takePictureIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                                            takePictureIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                                        } else {
+                                            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
+                                        }
+                                        currentPicturePath = image.getAbsolutePath();
+                                    }
+                                    startActivityForResult(takePictureIntent, 10);
+                                } else if (i == 1) {
+                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                                    photoPickerIntent.setType("image/*");
+                                    startActivityForResult(photoPickerIntent, 11);
+                                }
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    });
+                    showDialog(builder.create());
+                } else {
+                    if (position - 1 < 0 || position - 1 >= wallPapers.size()) {
+                        return;
+                    }
+                    TLRPC.WallPaper wallPaper = wallPapers.get(position - 1);
+                    selectedBackground = wallPaper.id;
+                    listAdapter.notifyDataSetChanged();
+                    processSelectedBackground();
+                }
+            }
+        });
+
+        processSelectedBackground();
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == 10) {
+                AndroidUtilities.addMediaToGallery(currentPicturePath);
+                FileOutputStream stream = null;
+                try {
+                    Point screenSize = AndroidUtilities.getRealScreenSize();
+                    Bitmap bitmap = ImageLoader.loadBitmap(currentPicturePath, null, screenSize.x, screenSize.y, true);
+                    File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper-temp.jpg");
+                    stream = new FileOutputStream(toFile);
+                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
+                    selectedBackground = -1;
+                    selectedColor = 0;
+                    Drawable drawable = backgroundImage.getDrawable();
+                    backgroundImage.setImageBitmap(bitmap);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                } finally {
+                    try {
+                        if (stream != null) {
+                            stream.close();
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+                currentPicturePath = null;
+            } else if (requestCode == 11) {
+                if (data == null || data.getData() == null) {
+                    return;
+                }
+                try {
+                    Point screenSize = AndroidUtilities.getRealScreenSize();
+                    Bitmap bitmap = ImageLoader.loadBitmap(null, data.getData(), screenSize.x, screenSize.y, true);
+                    File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper-temp.jpg");
+                    FileOutputStream stream = new FileOutputStream(toFile);
+                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
+                    selectedBackground = -1;
+                    selectedColor = 0;
+                    Drawable drawable = backgroundImage.getDrawable();
+                    backgroundImage.setImageBitmap(bitmap);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentPicturePath != null) {
+            args.putString("path", currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        currentPicturePath = args.getString("path");
+    }
+
+    private void processSelectedBackground() {
+        TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
+        if (selectedBackground != -1 && selectedBackground != 1000001 && wallPaper != null && wallPaper instanceof TLRPC.TL_wallPaper) {
+            int width = AndroidUtilities.displaySize.x;
+            int height = AndroidUtilities.displaySize.y;
+            if (width > height) {
+                int temp = width;
+                width = height;
+                height = temp;
+            }
+            TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
+            if (size == null) {
+                return;
+            }
+            String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+            if (!f.exists()) {
+                int result[] = AndroidUtilities.calcDrawableColor(backgroundImage.getDrawable());
+                progressViewBackground.getBackground().setColorFilter(new PorterDuffColorFilter(result[0], PorterDuff.Mode.MULTIPLY));
+                loadingFile = fileName;
+                loadingFileObject = f;
+                doneButton.setEnabled(false);
+                progressView.setVisibility(View.VISIBLE);
+                loadingSize = size;
+                selectedColor = 0;
+                FileLoader.getInstance().loadFile(size, null, true);
+                backgroundImage.setBackgroundColor(0);
+            } else {
+                if (loadingFile != null) {
+                    FileLoader.getInstance().cancelLoadFile(loadingSize);
+                }
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+                try {
+                    backgroundImage.setImageURI(Uri.fromFile(f));
+                } catch (Throwable e) {
+                    FileLog.e("tmessages", e);
+                }
+                backgroundImage.setBackgroundColor(0);
+                selectedColor = 0;
+                doneButton.setEnabled(true);
+                progressView.setVisibility(View.GONE);
+            }
+        } else {
+            if (loadingFile != null) {
+                FileLoader.getInstance().cancelLoadFile(loadingSize);
+            }
+            if (selectedBackground == 1000001) {
+                backgroundImage.setImageResource(R.drawable.background_hd);
+                backgroundImage.setBackgroundColor(0);
+                selectedColor = 0;
+            } else if (selectedBackground == -1) {
+                File toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper-temp.jpg");
+                if (!toFile.exists()) {
+                    toFile = new File(ApplicationLoader.getFilesDirFixed(), "wallpaper.jpg");
+                }
+                if (toFile.exists()) {
+                    backgroundImage.setImageURI(Uri.fromFile(toFile));
+                } else {
+                    selectedBackground = 1000001;
+                    processSelectedBackground();
+                }
+            } else {
+                if (wallPaper == null) {
+                    return;
+                }
+                if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
+                    Drawable drawable = backgroundImage.getDrawable();
+                    backgroundImage.setImageBitmap(null);
+                    selectedColor = 0xff000000 | wallPaper.bg_color;
+                    backgroundImage.setBackgroundColor(selectedColor);
+                }
+            }
+            loadingFileObject = null;
+            loadingFile = null;
+            loadingSize = null;
+            doneButton.setEnabled(true);
+            progressView.setVisibility(View.GONE);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.FileDidFailedLoad) {
+            String location = (String) args[0];
+            if (loadingFile != null && loadingFile.equals(location)) {
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+                progressView.setVisibility(View.GONE);
+                doneButton.setEnabled(false);
+            }
+        } else if (id == NotificationCenter.FileDidLoaded) {
+            String location = (String) args[0];
+            if (loadingFile != null && loadingFile.equals(location)) {
+                backgroundImage.setImageURI(Uri.fromFile(loadingFileObject));
+                progressView.setVisibility(View.GONE);
+                backgroundImage.setBackgroundColor(0);
+                doneButton.setEnabled(true);
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+            }
+        } else if (id == NotificationCenter.wallpapersDidLoaded) {
+            wallPapers = (ArrayList<TLRPC.WallPaper>) args[0];
+            wallpappersByIds.clear();
+            for (TLRPC.WallPaper wallPaper : wallPapers) {
+                wallpappersByIds.put(wallPaper.id, wallPaper);
+            }
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+            if (!wallPapers.isEmpty() && backgroundImage != null) {
+                processSelectedBackground();
+            }
+            loadWallpapers();
+        }
+    }
+
+    private void loadWallpapers() {
+        TLRPC.TL_account_getWallPapers req = new TLRPC.TL_account_getWallPapers();
+        int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, TLRPC.TL_error error) {
+                if (error != null) {
+                    return;
+                }
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        wallPapers.clear();
+                        TLRPC.Vector res = (TLRPC.Vector) response;
+                        wallpappersByIds.clear();
+                        for (Object obj : res.objects) {
+                            wallPapers.add((TLRPC.WallPaper) obj);
+                            wallpappersByIds.put(((TLRPC.WallPaper) obj).id, (TLRPC.WallPaper) obj);
+                        }
+                        if (listAdapter != null) {
+                            listAdapter.notifyDataSetChanged();
+                        }
+                        if (backgroundImage != null) {
+                            processSelectedBackground();
+                        }
+                        MessagesStorage.getInstance().putWallpapers(wallPapers);
+                    }
+                });
+            }
+        });
+        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        processSelectedBackground();
+    }
+
+    private class ListAdapter extends RecyclerView.Adapter {
+
+        private class Holder extends RecyclerView.ViewHolder {
+
+            public Holder(View itemView) {
+                super(itemView);
+            }
+        }
+
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getItemCount() {
+            return 1 + wallPapers.size();
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
+            WallpaperCell view = new WallpaperCell(mContext);
+            return new Holder(view);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
+            ((WallpaperCell) viewHolder.itemView).setWallpaper(i == 0 ? null : wallPapers.get(i - 1), selectedBackground);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/HomeModel.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/HomeModel.java
new file mode 100644
index 000000000..9568e49ba
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/HomeModel.java
@@ -0,0 +1,25 @@
+package org.telegram.ui.tools.setting;
+
+import android.content.Context;
+
+import com.inspius.read247.R;
+
+/**
+ * Created by dev on 3/9/2015.
+ */
+public class HomeModel {
+    public ProductModel productModel;
+    public String countView;
+    public String countDown;
+    public String author;
+
+    public HomeModel(Context context, ProductModel productModel) {
+        this.productModel = productModel;
+        countView = String.format(context.getString(R.string.item_view), productModel.viewCount);
+        countDown= String.format(context.getString(R.string.item_down), productModel.viewCount);
+
+        author = productModel.author;
+        if(author==null||author.isEmpty())
+            author = context.getString(R.string.not_known);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/SettingPrefs.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/SettingPrefs.java
new file mode 100644
index 000000000..a30c89d91
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/SettingPrefs.java
@@ -0,0 +1,44 @@
+package org.telegram.ui.tools.setting;
+
+import org.androidannotations.annotations.sharedpreferences.DefaultLong;
+import org.androidannotations.annotations.sharedpreferences.DefaultString;
+import org.androidannotations.annotations.sharedpreferences.SharedPref;
+
+@SharedPref
+public interface SettingPrefs {
+    @DefaultString("")
+    String listSubMenuStory();
+
+    @DefaultString("")
+    String listSubMenuBook();
+
+    @DefaultString("")
+    String username();
+
+    @DefaultString("")
+    String password();
+
+    @DefaultString("")
+    String listdataHome();
+
+    @DefaultString("")
+    String listdataBook();
+
+    @DefaultString("")
+    String listdataStory();
+
+    @DefaultLong(-1)
+    long timeLoadSubMenu();
+
+    @DefaultLong(-1)
+    long timeGetDataHome();
+
+    @DefaultLong(-1)
+    long timeGetDataBook();
+
+    @DefaultLong(-1)
+    long timeGetDataStory();
+
+//    @DefaultString("")
+//    String showSearch();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/Tab.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/Tab.java
new file mode 100644
index 000000000..f98cef4f3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/Tab.java
@@ -0,0 +1,324 @@
+package org.telegram.ui.tools.setting;
+
+import android.animation.Animator;
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.telegram.hame.mohamad.R;
+
+import java.util.Locale;
+
+import at.markushi.ui.RevealColorView;
+
+@SuppressLint({ "InflateParams", "ClickableViewAccessibility" })
+/**
+ * A simple Tab with Material Design style
+ * @author neokree
+ *
+ */ 
+public class Tab implements View.OnTouchListener {
+
+    private final static int REVEAL_DURATION = 400;
+    private final static int HIDE_DURATION = 500;
+	
+	private View completeView;
+	private ImageView icon;
+	private TextView text;
+	private RevealColorView background;
+	private ImageView selector;
+	
+	private Resources res;
+	private TabListener listener;
+	private Drawable iconDrawable;
+
+	private int textColor;
+	private int iconColor;
+	private int primaryColor;
+	private int accentColor;
+
+	private boolean active;
+	private int position;
+    private boolean hasIcon;
+    private float density;
+    private Point lastTouchedPoint;
+
+	public Tab(Context ctx,boolean hasIcon) {
+        this.hasIcon = hasIcon;
+        density = ctx.getResources().getDisplayMetrics().density;
+		res = ctx.getResources();
+
+        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+            if(!hasIcon) {
+                completeView = LayoutInflater.from(ctx).inflate(R.layout.tab, null);
+
+                text = (TextView) completeView.findViewById(R.id.text);
+            }
+            else {
+                completeView = LayoutInflater.from(ctx).inflate(R.layout.tab_icon, null);
+
+                icon = (ImageView) completeView.findViewById(R.id.icon);
+            }
+
+            selector = (ImageView) completeView.findViewById(R.id.selector);
+        }
+        else {
+            if (!hasIcon) {
+                // if there is no icon
+                completeView = LayoutInflater.from(ctx).inflate(R.layout.material_tab, null);
+
+                text = (TextView) completeView.findViewById(R.id.text);
+            } else {
+                // with icon
+                completeView = LayoutInflater.from(ctx).inflate(R.layout.material_tab_icon, null);
+
+                icon = (ImageView) completeView.findViewById(R.id.icon);
+            }
+
+            background = (RevealColorView) completeView.findViewById(R.id.reveal);
+            selector = (ImageView) completeView.findViewById(R.id.selector);
+
+        }
+		// set the listener
+		completeView.setOnTouchListener(this);
+
+		active = false;
+		textColor = Color.WHITE; // default white text 
+		iconColor = Color.WHITE; // and icon
+	}
+	
+	
+	public void setAccentColor(int color) {
+		this.accentColor = color;
+        this.textColor = color;
+        this.iconColor = color;
+	}
+	
+	public void setPrimaryColor(int color) {
+		this.primaryColor = color;
+
+        if(deviceHaveRippleSupport()) {
+            background.setBackgroundColor(color);
+        }
+        else {
+            completeView.setBackgroundColor(color);
+        }
+
+	}
+	
+	public void setTextColor(int color) {
+		textColor = color;
+		if(text != null) {
+			text.setTextColor(color);
+		}
+	}
+	
+	public void setIconColor(int color)
+	{
+	    this.iconColor = color;
+	    if (this.icon != null)
+	      this.icon.setColorFilter(color);
+	}
+
+	public Tab setText(CharSequence text) {
+        if(hasIcon)
+            throw new RuntimeException("You had setted tabs with icons, uses icons instead text");
+
+		this.text.setText(text.toString().toUpperCase(Locale.US));
+        return this;
+	}
+	
+	public Tab setIcon(Drawable icon) {
+        if(!hasIcon)
+            throw new RuntimeException("You had setted tabs without icons, uses text instead icons");
+
+		iconDrawable = icon;
+		
+		this.icon.setImageDrawable(icon);
+		this.setIconColor(this.iconColor);
+		return this;
+	}
+	
+	public void disableTab() {
+		// set 60% alpha to text color
+		if(text != null)
+			this.text.setTextColor(Color.argb(0x99 ,Color.red(textColor), Color.green(textColor), Color.blue(textColor)));
+		// set 60% alpha to icon 
+		if(icon != null)
+			setIconAlpha(0x99);
+
+		// set transparent the selector view
+		this.selector.setBackgroundColor(res.getColor(android.R.color.transparent));
+		
+		active = false;
+		
+		if(listener != null)
+			listener.onTabUnselected(this);
+	}
+	
+	public void activateTab() {
+		// set full color text
+		if(text != null)
+			this.text.setTextColor(textColor);
+		// set 100% alpha to icon
+		if(icon != null)
+			setIconAlpha(0xFF);
+			
+		// set accent color to selector view
+		this.selector.setBackgroundColor(accentColor);
+		
+		active = true;
+	}
+	
+	public boolean isSelected() {
+		return active;
+	}
+
+	@Override
+	public boolean onTouch(View v, MotionEvent event) {
+        lastTouchedPoint = new Point();
+		lastTouchedPoint.x = (int) event.getX();
+        lastTouchedPoint.y = (int) event.getY();
+
+        if(event.getAction() == MotionEvent.ACTION_DOWN) {
+            if(!deviceHaveRippleSupport()) {
+                completeView.setBackgroundColor(Color.argb(0x80, Color.red(accentColor), Color.green(accentColor), Color.blue(accentColor)));
+            }
+
+            // do nothing
+            return true;
+        }
+
+        if(event.getAction() == MotionEvent.ACTION_CANCEL) {
+            if(!deviceHaveRippleSupport()) {
+                completeView.setBackgroundColor(primaryColor);
+            }
+            return true;
+        }
+
+        // new effects
+        if(event.getAction() == MotionEvent.ACTION_UP) {
+
+            if(!deviceHaveRippleSupport()) {
+                completeView.setBackgroundColor(primaryColor);
+            }
+            else {
+                // set the backgroundcolor
+                this.background.reveal(lastTouchedPoint.x, lastTouchedPoint.y, Color.argb(0x80, Color.red(accentColor), Color.green(accentColor), Color.blue(accentColor)), 0, REVEAL_DURATION, new Animator.AnimatorListener() {
+                    @Override
+                    public void onAnimationStart(Animator animation) {
+                    }
+
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        background.reveal(lastTouchedPoint.x, lastTouchedPoint.y, primaryColor, 0, HIDE_DURATION, null);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Animator animation) {
+                    }
+
+                    @Override
+                    public void onAnimationRepeat(Animator animation) {
+                    }
+                });
+            }
+
+            // set the click
+            if(listener != null) {
+
+                if(active) {
+                    // if the tab is active when the user click on it it will be reselect
+                    listener.onTabReselected(this);
+                }
+                else {
+                    listener.onTabSelected(this);
+                }
+            }
+            // if the tab is not activated, it will be active
+            if(!active)
+                this.activateTab();
+
+            return true;
+        }
+
+		return false;
+	}
+	
+	public View getView() {
+		return completeView;
+	}
+	
+	public Tab setTabListener(TabListener listener) {
+		this.listener = listener;
+		return this;
+	}
+
+    public TabListener getTabListener() {
+        return listener;
+    }
+
+
+	public int getPosition() {
+		return position;
+	}
+
+
+	public void setPosition(int position) {
+		this.position = position;
+	}
+	
+	@SuppressLint({"NewApi"})
+	private void setIconAlpha(int paramInt)
+	{
+	    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)
+	    {
+	      this.icon.setImageAlpha(paramInt);
+	      return;
+	    }
+	    this.icon.setColorFilter(Color.argb(paramInt, Color.red(this.iconColor), Color.green(this.iconColor), Color.blue(this.iconColor)));
+	}
+
+   private int getTextLenght() {
+       String textString = text.getText().toString();
+        Rect bounds = new Rect();
+        Paint textPaint = text.getPaint();
+        textPaint.getTextBounds(textString,0,textString.length(),bounds);
+        return bounds.width();
+   }
+
+    private boolean deviceHaveRippleSupport() {
+        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+            return false;
+        }
+        else {
+            return true;
+        }
+
+    }
+
+    private int getIconWidth() {
+        return (int) (density * 24);
+    }
+
+   public int getTabMinWidth() {
+        if(hasIcon) {
+            return getIconWidth();
+        }
+       else {
+            return getTextLenght();
+        }
+   }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabHost.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabHost.java
new file mode 100644
index 000000000..9d0ea06f2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabHost.java
@@ -0,0 +1,347 @@
+package org.telegram.ui.tools.setting;
+
+import java.util.LinkedList;
+import java.util.List;
+
+import it.neokree.materialtabs.R;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+
+
+/**
+ * A Toolbar that contains multiple tabs
+ * @author neokree
+ *
+ */
+@SuppressLint("InflateParams")
+public class TabHost extends RelativeLayout implements View.OnClickListener {
+	
+	private int primaryColor;
+	private int accentColor;
+	private int textColor;
+	private int iconColor;
+	private List<MaterialTab> tabs;
+	private boolean hasIcons;
+    private boolean isTablet;
+    private float density;
+    private boolean scrollable;
+
+    private HorizontalScrollView scrollView;
+    private LinearLayout layout;
+    private ImageButton left;
+    private ImageButton right;
+
+    private static int tabSelected;
+	
+	public TabHost(Context context) {
+		this(context, null);
+	}
+	
+	public TabHost(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+	
+	public TabHost(Context context, AttributeSet attrs, int defStyleAttr) {
+		super(context, attrs, defStyleAttr);
+
+        scrollView = new HorizontalScrollView(context);
+        scrollView.setOverScrollMode(HorizontalScrollView.OVER_SCROLL_NEVER);
+        scrollView.setHorizontalScrollBarEnabled(false);
+        layout = new LinearLayout(context);
+        scrollView.addView(layout);
+
+		// get attributes
+		if(attrs != null) {
+			TypedArray a = context.getTheme().obtainStyledAttributes(attrs,R.styleable.MaterialTabHost, 0, 0);
+			
+			try {
+                // custom attributes
+				hasIcons = a.getBoolean(R.styleable.MaterialTabHost_hasIcons, false);
+
+                primaryColor = a.getColor(R.styleable.MaterialTabHost_materialTabsPrimaryColor, Color.parseColor("#009688"));
+                accentColor = a.getColor(R.styleable.MaterialTabHost_accentColor,Color.parseColor("#00b0ff"));
+                iconColor = a.getColor(R.styleable.MaterialTabHost_iconColor,Color.WHITE);
+                textColor = a.getColor(R.styleable.MaterialTabHost_textColor,Color.WHITE);
+			} finally {
+				a.recycle();
+			}
+		}
+		else {
+			hasIcons = false;
+		}
+
+        this.isInEditMode();
+        scrollable = false;
+        isTablet = this.getResources().getBoolean(R.bool.isTablet);
+        density = this.getResources().getDisplayMetrics().density;
+        tabSelected = 0;
+
+		// initialize tabs list
+		tabs = new LinkedList<MaterialTab>();
+
+        // set background color
+        super.setBackgroundColor(primaryColor);
+	}
+	
+	public void setPrimaryColor(int color) {
+		this.primaryColor = color;
+
+        this.setBackgroundColor(primaryColor);
+
+		for(MaterialTab tab : tabs) {
+			tab.setPrimaryColor(color);
+		}
+	}
+	
+	public void setAccentColor(int color) {
+		this.accentColor = color;
+		
+		for(MaterialTab tab : tabs) {
+			tab.setAccentColor(color);
+		}
+	}
+	
+	public void setTextColor(int color) {
+		this.textColor = color;
+		
+		for(MaterialTab tab : tabs) {
+			tab.setTextColor(color);
+		}
+	}
+	
+	public void setIconColor(int color) {
+		this.iconColor = color;
+		
+		for(MaterialTab tab : tabs) {
+			tab.setIconColor(color);
+		}
+	}
+	
+	public void addTab(MaterialTab tab) {
+        // add properties to tab
+        tab.setAccentColor(accentColor);
+        tab.setPrimaryColor(primaryColor);
+        tab.setTextColor(textColor);
+        tab.setIconColor(iconColor);
+        tab.setPosition(tabs.size());
+
+        // insert new tab in list
+        tabs.add(tab);
+
+        if(tabs.size() == 4 && !hasIcons) {
+            // switch tabs to scrollable before its draw
+            scrollable = true;
+        }
+
+        if(tabs.size() == 6 && hasIcons) {
+            scrollable = true;
+        }
+	}
+	
+	public MaterialTab newTab() {
+		return new MaterialTab(this.getContext(),hasIcons);
+	}
+	
+	public void setSelectedNavigationItem(int position) {
+		if(position < 0 || position > tabs.size()) {
+			throw new RuntimeException("Index overflow");
+		} else {
+			// tab at position will select, other will deselect
+			for(int i = 0; i < tabs.size(); i++) {
+				MaterialTab tab = tabs.get(i);
+				
+				if(i == position) {
+					tab.activateTab();
+				}
+				else {
+					tabs.get(i).disableTab();
+				}
+			}
+
+            // move the tab if it is slidable
+            if(scrollable) {
+                scrollTo(position);
+            }
+
+            tabSelected = position;
+		}
+		
+	}
+
+    private void scrollTo(int position) {
+        int totalWidth = 0;//(int) ( 60 * density);
+        for (int i = 0; i < position; i++) {
+            int width = tabs.get(i).getView().getWidth();
+            if(width == 0) {
+                if(!isTablet)
+                    width = (int) (tabs.get(i).getTabMinWidth() + (24 * density));
+                else
+                    width = (int) (tabs.get(i).getTabMinWidth() + (48 * density));
+            }
+
+            totalWidth += width;
+        }
+        scrollView.smoothScrollTo(totalWidth, 0);
+    }
+	
+	@Override
+	public void removeAllViews() {
+		for(int i = 0; i<tabs.size();i++) {
+			tabs.remove(i);
+		}
+		layout.removeAllViews();
+        super.removeAllViews();
+	}
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+        if(this.getWidth() != 0 && tabs.size() != 0)
+            notifyDataSetChanged();
+    }
+
+
+    public void notifyDataSetChanged() {
+        super.removeAllViews();
+        layout.removeAllViews();
+
+
+        if (!scrollable) { // not scrollable tabs
+            int tabWidth = this.getWidth() / tabs.size();
+
+            // set params for resizing tabs width
+            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(tabWidth, HorizontalScrollView.LayoutParams.MATCH_PARENT);
+            for (MaterialTab t : tabs) {
+                layout.addView(t.getView(), params);
+            }
+
+        } else { //scrollable tabs
+
+            if(!isTablet) {
+                for (int i = 0; i < tabs.size(); i++) {
+                    LinearLayout.LayoutParams params;
+                    MaterialTab tab = tabs.get(i);
+
+                    int tabWidth = (int) (tab.getTabMinWidth() + (24 * density)); // 12dp + text/icon width + 12dp
+
+                    if (i == 0) {
+                        // first tab
+                        View view = new View(layout.getContext());
+                        view.setMinimumWidth((int) (60 * density));
+                        layout.addView(view);
+                    }
+
+                    params = new LinearLayout.LayoutParams(tabWidth, HorizontalScrollView.LayoutParams.MATCH_PARENT);
+                    layout.addView(tab.getView(), params);
+
+                    if (i == tabs.size() - 1) {
+                        // last tab
+                        View view = new View(layout.getContext());
+                        view.setMinimumWidth((int) (60 * density));
+                        layout.addView(view);
+                    }
+                }
+            }
+            else {
+                // is a tablet
+                for (int i = 0; i < tabs.size(); i++) {
+                    LinearLayout.LayoutParams params;
+                    MaterialTab tab = tabs.get(i);
+
+                    int tabWidth = (int) (tab.getTabMinWidth() + (48 * density)); // 24dp + text/icon width + 24dp
+
+                    params = new LinearLayout.LayoutParams(tabWidth, HorizontalScrollView.LayoutParams.MATCH_PARENT);
+                    layout.addView(tab.getView(), params);
+                }
+            }
+        }
+
+        if (isTablet && scrollable) {
+            // if device is a tablet and have scrollable tabs add right and left arrows
+            Resources res = getResources();
+
+            left = new ImageButton(this.getContext());
+            left.setId(R.id.left);
+            left.setImageDrawable(res.getDrawable(R.drawable.left_arrow));
+            left.setBackgroundColor(Color.TRANSPARENT);
+            left.setOnClickListener(this);
+
+            // set 56 dp width and 48 dp height
+            LayoutParams paramsLeft = new LayoutParams((int)( 56 * density),(int) (48 * density));
+            paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+            paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+            paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
+            this.addView(left,paramsLeft);
+
+            right = new ImageButton(this.getContext());
+            right.setId(R.id.right);
+            right.setImageDrawable(res.getDrawable(R.drawable.right_arrow));
+            right.setBackgroundColor(Color.TRANSPARENT);
+            right.setOnClickListener(this);
+
+            LayoutParams paramsRight = new LayoutParams((int)( 56 * density),(int) (48 * density));
+            paramsRight.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+            paramsRight.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+            paramsRight.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
+            this.addView(right,paramsRight);
+
+            LayoutParams paramsScroll = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+            paramsScroll.addRule(RelativeLayout.LEFT_OF, R.id.right);
+            paramsScroll.addRule(RelativeLayout.RIGHT_OF,R.id.left);
+            this.addView(scrollView,paramsScroll);
+        }
+        else {
+            // if is not a tablet add only scrollable content
+            LayoutParams paramsScroll = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+            this.addView(scrollView,paramsScroll);
+        }
+
+        this.setSelectedNavigationItem(tabSelected);
+    }
+
+    public MaterialTab getCurrentTab() {
+        for(MaterialTab tab : tabs) {
+            if (tab.isSelected())
+                return tab;
+        }
+
+        return null;
+    }
+
+    @Override
+    public void onClick(View v) { // on tablet left/right button clicked
+        int currentPosition = this.getCurrentTab().getPosition();
+
+        if (v.getId() == R.id.right && currentPosition < tabs.size() -1) {
+            currentPosition++;
+
+            // set next tab selected
+            this.setSelectedNavigationItem(currentPosition);
+
+            // change fragment
+            tabs.get(currentPosition).getTabListener().onTabSelected(tabs.get(currentPosition));
+            return;
+        }
+
+        if(v.getId() == R.id.left && currentPosition > 0) {
+            currentPosition--;
+
+            // set previous tab selected
+            this.setSelectedNavigationItem(currentPosition);
+            // change fragment
+            tabs.get(currentPosition).getTabListener().onTabSelected(tabs.get(currentPosition));
+            return;
+        }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabListener.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabListener.java
new file mode 100644
index 000000000..a599bc625
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/setting/TabListener.java
@@ -0,0 +1,9 @@
+package org.telegram.ui.tools.setting;
+
+public interface TabListener {
+	public void onTabSelected(MaterialTab tab);
+	
+	public void onTabReselected(MaterialTab tab);
+	
+	public void onTabUnselected(MaterialTab tab);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateActivity.java
new file mode 100644
index 000000000..5c83d3204
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateActivity.java
@@ -0,0 +1,1845 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.userupdate;
+
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.content.FileProvider;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.webkit.MimeTypeMap;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.BuildConfig;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.browser.Browser;
+import org.telegram.messenger.query.SharedMediaQuery;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
+import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.SharedDocumentCell;
+import org.telegram.ui.Cells.SharedLinkCell;
+import org.telegram.ui.Cells.SharedMediaSectionCell;
+import org.telegram.ui.Cells.SharedPhotoVideoCell;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberTextView;
+import org.telegram.ui.Components.PlayerView;
+import org.telegram.ui.Components.SectionsListView;
+import org.telegram.ui.Components.WebFrameLayout;
+import org.telegram.ui.DialogsActivity;
+import org.telegram.ui.PhotoViewer;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+@SuppressWarnings("unchecked")
+public class UpdateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
+    private SharedPhotoVideoAdapter photoVideoAdapter;
+    private SharedLinksAdapter linksAdapter;
+    private SharedDocumentsAdapter documentsAdapter;
+    private SharedDocumentsAdapter audioAdapter;
+    private MediaSearchAdapter documentsSearchAdapter;
+    private MediaSearchAdapter audioSearchAdapter;
+    private MediaSearchAdapter linksSearchAdapter;
+    private SectionsListView listView;
+    private LinearLayout progressView;
+    private TextView emptyTextView;
+    private ImageView emptyImageView;
+    private LinearLayout emptyView;
+    private TextView dropDown;
+    private ActionBarMenuItem dropDownContainer;
+    private ActionBarMenuItem searchItem;
+    private NumberTextView selectedMessagesCountTextView;
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
+    private ArrayList<SharedPhotoVideoCell> cellCache = new ArrayList<>(6);
+
+    private boolean searchWas;
+    private boolean searching;
+
+    private HashMap<Integer, MessageObject>[] selectedFiles = new HashMap[] {new HashMap<>(), new HashMap<>()};
+    private int cantDeleteMessagesCount;
+    private ArrayList<View> actionModeViews = new ArrayList<>();
+    private boolean scrolling;
+    private long mergeDialogId;
+    protected TLRPC.ChatFull info = null;
+
+    private long dialog_id;
+    private int selectedMode;
+    private int columnsCount = 4;
+
+    private class SharedMediaData {
+        private ArrayList<MessageObject> messages = new ArrayList<>();
+        private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[] {new HashMap<>(), new HashMap<>()};
+        private ArrayList<String> sections = new ArrayList<>();
+        private HashMap<String, ArrayList<MessageObject>> sectionArrays = new HashMap<>();
+        private int totalCount;
+        private boolean loading;
+        private boolean endReached[] = new boolean[] {false, true};
+        private int max_id[] = new int[] {0, 0};
+
+        public boolean addMessage(MessageObject messageObject, boolean isNew, boolean enc) {
+            int loadIndex = messageObject.getDialogId() == dialog_id ? 0 : 1;
+            if (messagesDict[loadIndex].containsKey(messageObject.getId())) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                messageObjects = new ArrayList<>();
+                sectionArrays.put(messageObject.monthKey, messageObjects);
+                if (isNew) {
+                    sections.add(0, messageObject.monthKey);
+                } else {
+                    sections.add(messageObject.monthKey);
+                }
+            }
+            if (isNew) {
+                messageObjects.add(0, messageObject);
+                messages.add(0, messageObject);
+            } else {
+                messageObjects.add(messageObject);
+                messages.add(messageObject);
+            }
+            messagesDict[loadIndex].put(messageObject.getId(), messageObject);
+            if (!enc) {
+                if (messageObject.getId() > 0) {
+                    max_id[loadIndex] = Math.min(messageObject.getId(), max_id[loadIndex]);
+                }
+            } else {
+                max_id[loadIndex] = Math.max(messageObject.getId(), max_id[loadIndex]);
+            }
+            return true;
+        }
+
+        public boolean deleteMessage(int mid, int loadIndex) {
+            MessageObject messageObject = messagesDict[loadIndex].get(mid);
+            if (messageObject == null) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                return false;
+            }
+            messageObjects.remove(messageObject);
+            messages.remove(messageObject);
+            messagesDict[loadIndex].remove(messageObject.getId());
+            if (messageObjects.isEmpty()) {
+                sectionArrays.remove(messageObject.monthKey);
+                sections.remove(messageObject.monthKey);
+            }
+            totalCount--;
+            return true;
+        }
+
+        public void replaceMid(int oldMid, int newMid) {
+            MessageObject obj = messagesDict[0].get(oldMid);
+            if (obj != null) {
+                messagesDict[0].remove(oldMid);
+                messagesDict[0].put(newMid, obj);
+                obj.messageOwner.id = newMid;
+            }
+        }
+    }
+
+    private SharedMediaData sharedMediaData[] = new SharedMediaData[5];
+
+    private final static int shared_media_item = 1;
+    private final static int files_item = 2;
+    private final static int links_item = 5;
+    private final static int music_item = 6;
+    private final static int forward = 3;
+    private final static int delete = 4;
+
+    public UpdateActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+        for (int a = 0; a < sharedMediaData.length; a++) {
+            sharedMediaData[a] = new SharedMediaData();
+            sharedMediaData[a].max_id[0] = ((int)dialog_id) == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
+            if (mergeDialogId != 0 && info != null) {
+                sharedMediaData[a].max_id[1] = info.migrated_from_max_id;
+                sharedMediaData[a].endReached[1] = false;
+            }
+        }
+        sharedMediaData[0].loading = true;
+        SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonDrawable(new BackDrawable(false));
+        actionBar.setTitle("");
+        actionBar.setAllowOverlayTitle(false);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    if (actionBar.isActionModeShowed()) {
+                        for (int a = 1; a >= 0; a--) {
+                            selectedFiles[a].clear();
+                        }
+                        cantDeleteMessagesCount = 0;
+                        actionBar.hideActionMode();
+                        listView.invalidateViews();
+                    } else {
+                        finishFragment();
+                    }
+                } else if (id == shared_media_item) {
+                    if (selectedMode == 0) {
+                        return;
+                    }
+                    selectedMode = 0;
+                    switchToCurrentSelectedMode();
+                } else if (id == files_item) {
+                    if (selectedMode == 1) {
+                        return;
+                    }
+                    selectedMode = 1;
+                    switchToCurrentSelectedMode();
+                } else if (id == links_item) {
+                    if (selectedMode == 3) {
+                        return;
+                    }
+                    selectedMode = 3;
+                    switchToCurrentSelectedMode();
+                } else if (id == music_item) {
+                    if (selectedMode == 4) {
+                        return;
+                    }
+                    selectedMode = 4;
+                    switchToCurrentSelectedMode();
+                } else if (id == delete) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("items", selectedFiles[0].size() + selectedFiles[1].size())));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            for (int a = 1; a >= 0; a--) {
+                                ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                ArrayList<Long> random_ids = null;
+                                TLRPC.EncryptedChat currentEncryptedChat = null;
+                                int channelId = 0;
+                                if (!ids.isEmpty()) {
+                                    MessageObject msg = selectedFiles[a].get(ids.get(0));
+                                    if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
+                                        channelId = msg.messageOwner.to_id.channel_id;
+                                    }
+                                }
+                                if ((int) dialog_id == 0) {
+                                    currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                                }
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedFiles[a].entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
+                                }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
+                                selectedFiles[a].clear();
+                            }
+                            actionBar.hideActionMode();
+                            actionBar.closeSearchField();
+                            cantDeleteMessagesCount = 0;
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                } else if (id == forward) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlySelect", true);
+                    args.putInt("dialogsType", 1);
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
+                        @Override
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
+                            int lower_part = (int) did;
+                            if (lower_part != 0) {
+                                Bundle args = new Bundle();
+                                args.putBoolean("scrollToTopOnResume", true);
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                                if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                    return;
+                                }
+
+                                ArrayList<MessageObject> fmessages = new ArrayList<>();
+                                for (int a = 1; a >= 0; a--) {
+                                    ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                    Collections.sort(ids);
+                                    for (Integer id : ids) {
+                                        if (id > 0) {
+                                            fmessages.add(selectedFiles[a].get(id));
+                                        }
+                                    }
+                                    selectedFiles[a].clear();
+                                }
+                                cantDeleteMessagesCount = 0;
+                                actionBar.hideActionMode();
+
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+
+                                ChatActivity chatActivity = new ChatActivity(args);
+                                presentFragment(chatActivity, true);
+                                chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
+
+                                if (!AndroidUtilities.isTablet()) {
+                                    removeSelfFromStack();
+                                }
+                            } else {
+                                fragment.finishFragment();
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        for (int a = 1; a >= 0; a--) {
+            selectedFiles[a].clear();
+        }
+        cantDeleteMessagesCount = 0;
+        actionModeViews.clear();
+
+        final ActionBarMenu menu = actionBar.createMenu();
+        searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+            @Override
+            public void onSearchExpand() {
+                dropDownContainer.setVisibility(View.GONE);
+                searching = true;
+            }
+
+            @Override
+            public void onSearchCollapse() {
+                dropDownContainer.setVisibility(View.VISIBLE);
+                if (selectedMode == 1) {
+                    documentsSearchAdapter.search(null);
+                } else if (selectedMode == 3) {
+                    linksSearchAdapter.search(null);
+                } else if (selectedMode == 4) {
+                    audioSearchAdapter.search(null);
+                }
+                searching = false;
+                searchWas = false;
+                switchToCurrentSelectedMode();
+            }
+
+            @Override
+            public void onTextChanged(EditText editText) {
+                String text = editText.getText().toString();
+                if (text.length() != 0) {
+                    searchWas = true;
+                    switchToCurrentSelectedMode();
+                }
+                if (selectedMode == 1) {
+                    if (documentsSearchAdapter == null) {
+                        return;
+                    }
+                    documentsSearchAdapter.search(text);
+                } else if (selectedMode == 3) {
+                    if (linksSearchAdapter == null) {
+                        return;
+                    }
+                    linksSearchAdapter.search(text);
+                } else if (selectedMode == 4) {
+                    if (audioSearchAdapter == null) {
+                        return;
+                    }
+                    audioSearchAdapter.search(text);
+                }
+            }
+        });
+        searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        searchItem.setVisibility(View.GONE);
+
+        dropDownContainer = new ActionBarMenuItem(context, menu, 0);
+        dropDownContainer.setSubMenuOpenSide(1);
+        dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
+        dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
+        if ((int) dialog_id != 0) {
+            dropDownContainer.addSubItem(links_item, LocaleController.getString("LinksTitle", R.string.LinksTitle), 0);
+            dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+        } else {
+            TLRPC.EncryptedChat currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) {
+                dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+            }
+        }
+        actionBar.addView(dropDownContainer, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 64 : 56, 0, 40, 0));
+        dropDownContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dropDownContainer.toggleSubMenu();
+            }
+        });
+
+        dropDown = new TextView(context);
+        dropDown.setGravity(Gravity.LEFT);
+        dropDown.setSingleLine(true);
+        dropDown.setLines(1);
+        dropDown.setMaxLines(1);
+        dropDown.setEllipsize(TextUtils.TruncateAt.END);
+        dropDown.setTextColor(0xffffffff);
+        dropDown.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
+        dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+        dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
+        dropDownContainer.addView(dropDown, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 16, 0, 0, 0));
+
+        final ActionBarMenu actionMode = actionBar.createActionMode();
+
+        selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
+        selectedMessagesCountTextView.setTextSize(18);
+        selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        selectedMessagesCountTextView.setTextColor(0xff737373);
+        selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
+
+        if ((int) dialog_id != 0) {
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+        }
+        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+
+        photoVideoAdapter = new SharedPhotoVideoAdapter(context);
+        documentsAdapter = new SharedDocumentsAdapter(context, 1);
+        audioAdapter = new SharedDocumentsAdapter(context, 4);
+        documentsSearchAdapter = new MediaSearchAdapter(context, 1);
+        audioSearchAdapter = new MediaSearchAdapter(context, 4);
+        linksSearchAdapter = new MediaSearchAdapter(context, 3);
+        linksAdapter = new SharedLinksAdapter(context);
+
+        FrameLayout frameLayout;
+        fragmentView = frameLayout = new FrameLayout(context);
+
+        listView = new SectionsListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setDrawSelectorOnTop(true);
+        listView.setClipToPadding(false);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    UpdateActivity.this.onItemClick(i, view, ((SharedDocumentCell) view).getMessage(), 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    UpdateActivity.this.onItemClick(i, view, ((SharedLinkCell) view).getMessage(), 0);
+                }
+            }
+        });
+        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+                if (scrollState == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                }
+                scrolling = scrollState != SCROLL_STATE_IDLE;
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                if (searching && searchWas) {
+                    return;
+                }
+                if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !sharedMediaData[selectedMode].loading) {
+                    int type;
+                    if (selectedMode == 0) {
+                        type = SharedMediaQuery.MEDIA_PHOTOVIDEO;
+                    } else if (selectedMode == 1) {
+                        type = SharedMediaQuery.MEDIA_FILE;
+                    } else if (selectedMode == 2) {
+                        type = SharedMediaQuery.MEDIA_AUDIO;
+                    } else if (selectedMode == 4) {
+                        type = SharedMediaQuery.MEDIA_MUSIC;
+                    } else {
+                        type = SharedMediaQuery.MEDIA_URL;
+                    }
+                    if (!sharedMediaData[selectedMode].endReached[0]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(dialog_id, 0, 50, sharedMediaData[selectedMode].max_id[0], type, true, classGuid);
+                    } else if (mergeDialogId != 0 && !sharedMediaData[selectedMode].endReached[1]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                    }
+                }
+            }
+        });
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateActivity.this.onItemLongClick(message, view, 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    SharedLinkCell cell = (SharedLinkCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateActivity.this.onItemLongClick(message, view, 0);
+                }
+                return false;
+            }
+        });
+
+        for (int a = 0; a < 6; a++) {
+            cellCache.add(new SharedPhotoVideoCell(context));
+        }
+
+        emptyView = new LinearLayout(context);
+        emptyView.setOrientation(LinearLayout.VERTICAL);
+        emptyView.setGravity(Gravity.CENTER);
+        emptyView.setVisibility(View.GONE);
+        emptyView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        emptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        emptyImageView = new ImageView(context);
+        emptyView.addView(emptyImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff8a8a8a);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+        emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        emptyView.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 24, 0, 0));
+
+        progressView = new LinearLayout(context);
+        progressView.setGravity(Gravity.CENTER);
+        progressView.setOrientation(LinearLayout.VERTICAL);
+        progressView.setVisibility(View.GONE);
+        progressView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressView.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        switchToCurrentSelectedMode();
+
+        if (!AndroidUtilities.isTablet()) {
+            frameLayout.addView(new PlayerView(context, this), LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long) args[0];
+            int guid = (Integer) args[3];
+            if (guid == classGuid) {
+                int type = (Integer) args[4];
+                sharedMediaData[type].loading = false;
+                sharedMediaData[type].totalCount = (Integer) args[1];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
+                boolean enc = ((int) dialog_id) == 0;
+                int loadIndex = uid == dialog_id ? 0 : 1;
+                for (int a = 0; a < arr.size(); a++) {
+                    MessageObject message = arr.get(a);
+                    sharedMediaData[type].addMessage(message, false, enc);
+                }
+                sharedMediaData[type].endReached[loadIndex] = (Boolean) args[5];
+                if (loadIndex == 0 && sharedMediaData[selectedMode].messages.isEmpty() && mergeDialogId != 0) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                }
+                if (!sharedMediaData[selectedMode].loading) {
+                    if (progressView != null) {
+                        progressView.setVisibility(View.GONE);
+                    }
+                    if (selectedMode == type && listView != null) {
+                        if (listView.getEmptyView() == null) {
+                            listView.setEmptyView(emptyView);
+                        }
+                    }
+                }
+                scrolling = true;
+                if (selectedMode == 0 && type == 0) {
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 1 && type == 1) {
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 3 && type == 3) {
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 4 && type == 4) {
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            TLRPC.Chat currentChat = null;
+            if ((int) dialog_id < 0) {
+                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+            }
+            int channelId = (Integer) args[1];
+            int loadIndex = 0;
+            if (ChatObject.isChannel(currentChat)) {
+                if (channelId == 0 && mergeDialogId != 0) {
+                    loadIndex = 1;
+                } else if (channelId == currentChat.id) {
+                    loadIndex = 0;
+                } else {
+                    return;
+                }
+            } else if (channelId != 0) {
+                return;
+            }
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                for (SharedMediaData data : sharedMediaData) {
+                    if (data.deleteMessage(ids, loadIndex)) {
+                        updated = true;
+                    }
+                }
+            }
+            if (updated) {
+                scrolling = true;
+                if (photoVideoAdapter != null) {
+                    photoVideoAdapter.notifyDataSetChanged();
+                }
+                if (documentsAdapter != null) {
+                    documentsAdapter.notifyDataSetChanged();
+                }
+                if (linksAdapter != null) {
+                    linksAdapter.notifyDataSetChanged();
+                }
+                if (audioAdapter != null) {
+                    audioAdapter.notifyDataSetChanged();
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long uid = (Long) args[0];
+            if (uid == dialog_id) {
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+                boolean enc = ((int) dialog_id) == 0;
+                boolean updated = false;
+                for (MessageObject obj : arr) {
+                    if (obj.messageOwner.media == null) {
+                        continue;
+                    }
+                    int type = SharedMediaQuery.getMediaType(obj.messageOwner);
+                    if (type == -1) {
+                        return;
+                    }
+                    if (sharedMediaData[type].addMessage(obj, true, enc)) {
+                        updated = true;
+                    }
+                }
+                if (updated) {
+                    scrolling = true;
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                    if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                        searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer) args[0];
+            Integer newMsgId = (Integer) args[1];
+            for (SharedMediaData data : sharedMediaData) {
+                data.replaceMid(msgId, newMsgId);
+            }
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (dropDownContainer != null) {
+            dropDownContainer.closeSubMenu();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        scrolling = true;
+        if (photoVideoAdapter != null) {
+            photoVideoAdapter.notifyDataSetChanged();
+        }
+        if (documentsAdapter != null) {
+            documentsAdapter.notifyDataSetChanged();
+        }
+        if (linksAdapter != null) {
+            linksAdapter.notifyDataSetChanged();
+        }
+        fixLayoutInternal();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    fixLayoutInternal();
+                    return true;
+                }
+            });
+        }
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    @Override
+    public boolean scaleToFill() {
+        return false;
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null || listView == null || selectedMode != 0) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            if (view instanceof SharedPhotoVideoCell) {
+                SharedPhotoVideoCell cell = (SharedPhotoVideoCell) view;
+                for (int i = 0; i < 6; i++) {
+                    MessageObject message = cell.getMessageObject(i);
+                    if (message == null) {
+                        break;
+                    }
+                    BackupImageView imageView = cell.getImageView(i);
+                    if (message.getId() == messageObject.getId()) {
+                        int coords[] = new int[2];
+                        imageView.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight);
+                        object.parentView = listView;
+                        object.imageReceiver = imageView.getImageReceiver();
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.parentView.getLocationInWindow(coords);
+                        object.clipTopAddition = AndroidUtilities.dp(40);
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public boolean allowCaption() {
+        return true;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public boolean cancelButtonPressed() { return true; }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void setChatInfo(TLRPC.ChatFull chatInfo) {
+        info = chatInfo;
+        if (info != null && info.migrated_from_chat_id != 0) {
+            mergeDialogId = -info.migrated_from_chat_id;
+        }
+    }
+
+    public void setMergeDialogId(long did) {
+        mergeDialogId = did;
+    }
+
+    private void switchToCurrentSelectedMode() {
+        if (searching && searchWas) {
+            if (listView != null) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsSearchAdapter);
+                    documentsSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 3) {
+                    listView.setAdapter(linksSearchAdapter);
+                    linksSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioSearchAdapter);
+                    audioSearchAdapter.notifyDataSetChanged();
+                }
+            }
+            if (emptyTextView != null) {
+                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+                emptyImageView.setVisibility(View.GONE);
+            }
+        } else {
+            emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+            emptyImageView.setVisibility(View.VISIBLE);
+            if (selectedMode == 0) {
+                listView.setAdapter(photoVideoAdapter);
+                dropDown.setText(LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle));
+                emptyImageView.setImageResource(R.drawable.tip1);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                }
+                searchItem.setVisibility(View.GONE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setVisibility(View.VISIBLE);
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsAdapter);
+                    dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
+                    emptyImageView.setImageResource(R.drawable.tip2);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    }
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioAdapter);
+                    dropDown.setText(LocaleController.getString("AudioTitle", R.string.AudioTitle));
+                    emptyImageView.setImageResource(R.drawable.tip4);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    }
+                }
+                searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, selectedMode == 1 ? SharedMediaQuery.MEDIA_FILE : SharedMediaQuery.MEDIA_MUSIC, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 3) {
+                listView.setAdapter(linksAdapter);
+                dropDown.setText(LocaleController.getString("LinksTitle", R.string.LinksTitle));
+                emptyImageView.setImageResource(R.drawable.tip3);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                }
+                searchItem.setVisibility(!sharedMediaData[3].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_URL, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            }
+        }
+    }
+
+    private boolean onItemLongClick(MessageObject item, View view, int a) {
+        if (actionBar.isActionModeShowed()) {
+            return false;
+        }
+        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+        selectedFiles[item.getDialogId() == dialog_id ? 0 : 1].put(item.getId(), item);
+        if (!item.canDeleteMessage(null)) {
+            cantDeleteMessagesCount++;
+        }
+        actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+        selectedMessagesCountTextView.setNumber(1, false);
+        AnimatorSet animatorSet = new AnimatorSet();
+        ArrayList<Animator> animators = new ArrayList<>();
+        for (int i = 0; i < actionModeViews.size(); i++) {
+            View view2 = actionModeViews.get(i);
+            AndroidUtilities.clearDrawableAnimation(view2);
+            animators.add(ObjectAnimator.ofFloat(view2, "scaleY", 0.1f, 1.0f));
+        }
+        animatorSet.playTogether(animators);
+        animatorSet.setDuration(250);
+        animatorSet.start();
+        scrolling = false;
+        if (view instanceof SharedDocumentCell) {
+            ((SharedDocumentCell) view).setChecked(true, true);
+        } else if (view instanceof SharedPhotoVideoCell) {
+            ((SharedPhotoVideoCell) view).setChecked(a, true, true);
+        } else if (view instanceof SharedLinkCell) {
+            ((SharedLinkCell) view).setChecked(true, true);
+        }
+        actionBar.showActionMode();
+        return true;
+    }
+
+    private void onItemClick(int index, View view, MessageObject message, int a) {
+        if (message == null) {
+            return;
+        }
+        if (actionBar.isActionModeShowed()) {
+            int loadIndex = message.getDialogId() == dialog_id ? 0 : 1;
+            if (selectedFiles[loadIndex].containsKey(message.getId())) {
+                selectedFiles[loadIndex].remove(message.getId());
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount--;
+                }
+            } else {
+                selectedFiles[loadIndex].put(message.getId(), message);
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount++;
+                }
+            }
+            if (selectedFiles[0].isEmpty() && selectedFiles[1].isEmpty()) {
+                actionBar.hideActionMode();
+            } else {
+                selectedMessagesCountTextView.setNumber(selectedFiles[0].size() + selectedFiles[1].size(), true);
+            }
+            actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+            scrolling = false;
+            if (view instanceof SharedDocumentCell) {
+                ((SharedDocumentCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedPhotoVideoCell) {
+                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedLinkCell) {
+                ((SharedLinkCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            }
+        } else {
+            if (selectedMode == 0) {
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhoto(sharedMediaData[selectedMode].messages, index, dialog_id, mergeDialogId, this);
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    if (cell.isLoaded()) {
+                        if (message.isMusic()) {
+                            if (MediaController.getInstance().setPlaylist(sharedMediaData[selectedMode].messages, message)) {
+                                return;
+                            }
+                        }
+                        File f = null;
+                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.getDocument()) : "";
+                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                            f = new File(message.messageOwner.attachPath);
+                        }
+                        if (f == null || f != null && !f.exists()) {
+                            f = FileLoader.getPathToMessage(message.messageOwner);
+                        }
+                        if (f != null && f.exists()) {
+                            String realMimeType = null;
+                            try {
+                                Intent intent = new Intent(Intent.ACTION_VIEW);
+                                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                int idx = fileName.lastIndexOf('.');
+                                if (idx != -1) {
+                                    String ext = fileName.substring(idx + 1);
+                                    realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                    if (realMimeType == null) {
+                                        realMimeType = message.getDocument().mime_type;
+                                        if (realMimeType == null || realMimeType.length() == 0) {
+                                            realMimeType = null;
+                                        }
+                                    }
+                                }
+                                if (Build.VERSION.SDK_INT >= 24) {
+                                    intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
+                                } else {
+                                    intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
+                                }
+                                if (realMimeType != null) {
+                                    try {
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    } catch (Exception e) {
+                                        if (Build.VERSION.SDK_INT >= 24) {
+                                            intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), "text/plain");
+                                        } else {
+                                            intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                        }
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    }
+                                } else {
+                                    getParentActivity().startActivityForResult(intent, 500);
+                                }
+                            } catch (Exception e) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
+                                showDialog(builder.create());
+                            }
+                        }
+                    } else if (!cell.isLoading()) {
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
+                        cell.updateFileExistIcon();
+                    } else {
+                        FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
+                        cell.updateFileExistIcon();
+                    }
+                }
+            } else if (selectedMode == 3) {
+                try {
+                    TLRPC.WebPage webPage = message.messageOwner.media.webpage;
+                    String link = null;
+                    if (webPage != null && !(webPage instanceof TLRPC.TL_webPageEmpty)) {
+                        if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                            openWebView(webPage);
+                            return;
+                        } else {
+                            link = webPage.url;
+                        }
+                    }
+                    if (link == null) {
+                        link = ((SharedLinkCell) view).getLink(0);
+                    }
+                    if (link != null) {
+                        Browser.openUrl(getParentActivity(), link);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    private void openWebView(TLRPC.WebPage webPage) {
+        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.site_name, webPage.description, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
+        builder.setUseFullWidth(true);
+        showDialog(builder.create());
+    }
+
+    private void fixLayoutInternal() {
+        if (listView == null) {
+            return;
+        }
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            selectedMessagesCountTextView.setTextSize(18);
+        } else {
+            selectedMessagesCountTextView.setTextSize(20);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            columnsCount = 4;
+            emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        } else {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                columnsCount = 6;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
+            } else {
+                columnsCount = 4;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+            }
+        }
+        photoVideoAdapter.notifyDataSetChanged();
+
+        if (dropDownContainer != null) {
+            if (!AndroidUtilities.isTablet()) {
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
+                layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                dropDownContainer.setLayoutParams(layoutParams);
+            }
+
+            if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                dropDown.setTextSize(18);
+            } else {
+                dropDown.setTextSize(20);
+            }
+        }
+    }
+
+    private class SharedLinksAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedLinksAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[3].sections.size() + (sharedMediaData[3].sections.isEmpty() || sharedMediaData[3].endReached[0] && sharedMediaData[3].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[3].sections.size()) {
+                return sharedMediaData[3].sectionArrays.get(sharedMediaData[3].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedLinkCell(mContext);
+                        ((SharedLinkCell) convertView).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                            @Override
+                            public void needOpenWebView(TLRPC.WebPage webPage) {
+                                UpdateActivity.this.openWebView(webPage);
+                            }
+
+                            @Override
+                            public boolean canPerformActions() {
+                                return !actionBar.isActionModeShowed();
+                            }
+                        });
+                    }
+                    SharedLinkCell sharedLinkCell = (SharedLinkCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedLinkCell.setLink(messageObject, position != messageObjects.size() || section == sharedMediaData[3].sections.size() - 1 && sharedMediaData[3].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedLinkCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[3].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedDocumentsAdapter extends BaseSectionsAdapter {
+
+        private Context mContext;
+        private int currentType;
+
+        public SharedDocumentsAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[currentType].sections.size() + (sharedMediaData[currentType].sections.isEmpty() || sharedMediaData[currentType].endReached[0] && sharedMediaData[currentType].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                return sharedMediaData[currentType].sectionArrays.get(sharedMediaData[currentType].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedDocumentCell(mContext);
+                    }
+                    SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedDocumentCell.setDocument(messageObject, position != messageObjects.size() || section == sharedMediaData[currentType].sections.size() - 1 && sharedMediaData[currentType].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedDocumentCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedPhotoVideoAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedPhotoVideoAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return false;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[0].sections.size() + (sharedMediaData[0].sections.isEmpty() || sharedMediaData[0].endReached[0] && sharedMediaData[0].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[0].sections.size()) {
+                return (int) Math.ceil(sharedMediaData[0].sectionArrays.get(sharedMediaData[0].sections.get(section)).size() / (float)columnsCount) + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SharedMediaSectionCell(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new SharedMediaSectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    SharedPhotoVideoCell cell;
+                    if (convertView == null) {
+                        if (!cellCache.isEmpty()) {
+                            convertView = cellCache.get(0);
+                            cellCache.remove(0);
+                        } else {
+                            convertView = new SharedPhotoVideoCell(mContext);
+                        }
+                        cell = (SharedPhotoVideoCell) convertView;
+                        cell.setDelegate(new SharedPhotoVideoCell.SharedPhotoVideoCellDelegate() {
+                            @Override
+                            public void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                onItemClick(index, cell, messageObject, a);
+                            }
+
+                            @Override
+                            public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                return onItemLongClick(messageObject, cell, a);
+                            }
+                        });
+                    } else {
+                        cell = (SharedPhotoVideoCell) convertView;
+                    }
+                    cell.setItemsCount(columnsCount);
+                    for (int a = 0; a < columnsCount; a++) {
+                        int index = (position - 1) * columnsCount + a;
+                        if (index < messageObjects.size()) {
+                            MessageObject messageObject = messageObjects.get(index);
+                            cell.setIsFirst(position == 1);
+                            cell.setItem(a, sharedMediaData[0].messages.indexOf(messageObject), messageObject);
+
+                            if (actionBar.isActionModeShowed()) {
+                                cell.setChecked(a, selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                            } else {
+                                cell.setChecked(a, false, !scrolling);
+                            }
+                        } else {
+                            cell.setItem(a, index, null);
+                        }
+                    }
+                    cell.requestLayout();
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[0].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    public class MediaSearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private ArrayList<MessageObject> searchResult = new ArrayList<>();
+        private Timer searchTimer;
+        protected ArrayList<MessageObject> globalSearch = new ArrayList<>();
+        private int reqId = 0;
+        private int lastReqId;
+        private int currentType;
+
+        public MediaSearchAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        public void queryServerSearch(final String query, final int max_id, long did) {
+            int uid = (int) did;
+            if (uid == 0) {
+                return;
+            }
+            if (reqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                reqId = 0;
+            }
+            if (query == null || query.length() == 0) {
+                globalSearch.clear();
+                lastReqId = 0;
+                notifyDataSetChanged();
+                return;
+            }
+            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.offset = 0;
+            req.limit = 50;
+            req.max_id = max_id;
+            if (currentType == 1) {
+                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
+            } else if (currentType == 3) {
+                req.filter = new TLRPC.TL_inputMessagesFilterUrl();
+            } else if (currentType == 4) {
+                req.filter = new TLRPC.TL_inputMessagesFilterMusic();
+            }
+            req.q = query;
+            req.peer = MessagesController.getInputPeer(uid);
+            if (req.peer == null) {
+                return;
+            }
+            final int currentReqId = ++lastReqId;
+            reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    final ArrayList<MessageObject> messageObjects = new ArrayList<>();
+                    if (error == null) {
+                        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                        for (int a = 0; a < res.messages.size(); a++) {
+                            TLRPC.Message message = res.messages.get(a);
+                            if (max_id != 0 && message.id > max_id) {
+                                continue;
+                            }
+                            messageObjects.add(new MessageObject(message, null, false));
+                        }
+                    }
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (currentReqId == lastReqId) {
+                                globalSearch = messageObjects;
+                                notifyDataSetChanged();
+                            }
+                            reqId = 0;
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+        }
+
+        public void search(final String query) {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (query == null) {
+                searchResult.clear();
+                notifyDataSetChanged();
+            } else {
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        processSearch(query);
+                    }
+                }, 200, 300);
+            }
+        }
+
+        private void processSearch(final String query) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (!sharedMediaData[currentType].messages.isEmpty()) {
+                        if (currentType == 1 || currentType == 4) {
+                            MessageObject messageObject = sharedMediaData[currentType].messages.get(sharedMediaData[currentType].messages.size() - 1);
+                            queryServerSearch(query, messageObject.getId(), messageObject.getDialogId());
+                        } else if (currentType == 3) {
+                            queryServerSearch(query, 0, dialog_id);
+                        }
+                    }
+                    if (currentType == 1 || currentType == 4) {
+                        final ArrayList<MessageObject> copy = new ArrayList<>();
+                        copy.addAll(sharedMediaData[currentType].messages);
+                        Utilities.searchQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                String search1 = query.trim().toLowerCase();
+                                if (search1.length() == 0) {
+                                    updateSearchResults(new ArrayList<MessageObject>());
+                                    return;
+                                }
+                                String search2 = LocaleController.getInstance().getTranslitString(search1);
+                                if (search1.equals(search2) || search2.length() == 0) {
+                                    search2 = null;
+                                }
+                                String search[] = new String[1 + (search2 != null ? 1 : 0)];
+                                search[0] = search1;
+                                if (search2 != null) {
+                                    search[1] = search2;
+                                }
+
+                                ArrayList<MessageObject> resultArray = new ArrayList<>();
+
+                                for (int a = 0; a < copy.size(); a++) {
+                                    MessageObject messageObject = copy.get(a);
+                                    for (int b = 0; b < search.length; b++) {
+                                        String q = search[b];
+                                        String name = messageObject.getDocumentName();
+                                        if (name == null || name.length() == 0) {
+                                            continue;
+                                        }
+                                        name = name.toLowerCase();
+                                        if (name.contains(q)) {
+                                            resultArray.add(messageObject);
+                                            break;
+                                        }
+                                        if (currentType == 4) {
+                                            TLRPC.Document document;
+                                            if (messageObject.type == 0) {
+                                                document = messageObject.messageOwner.media.webpage.document;
+                                            } else {
+                                                document = messageObject.messageOwner.media.document;
+                                            }
+                                            boolean ok = false;
+                                            for (int c = 0; c < document.attributes.size(); c++) {
+                                                TLRPC.DocumentAttribute attribute = document.attributes.get(c);
+                                                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                                                    if (attribute.performer != null) {
+                                                        ok = attribute.performer.toLowerCase().contains(q);
+                                                    }
+                                                    if (!ok && attribute.title != null) {
+                                                        ok = attribute.title.toLowerCase().contains(q);
+                                                    }
+                                                    break;
+                                                }
+                                            }
+                                            if (ok) {
+                                                resultArray.add(messageObject);
+                                                break;
+                                            }
+                                        }
+                                    }
+                                }
+
+                                updateSearchResults(resultArray);
+                            }
+                        });
+                    }
+                }
+            });
+        }
+
+        private void updateSearchResults(final ArrayList<MessageObject> documents) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    searchResult = documents;
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != searchResult.size() + globalSearch.size();
+        }
+
+        @Override
+        public int getCount() {
+            int count = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (globalCount != 0) {
+                count += globalCount;
+            }
+            return count;
+        }
+
+        public boolean isGlobalSearch(int i) {
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (i >= 0 && i < localCount) {
+                return false;
+            } else if (i > localCount && i <= globalCount + localCount) {
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public MessageObject getItem(int i) {
+            if (i < searchResult.size()) {
+                return searchResult.get(i);
+            } else {
+                return globalSearch.get(i - searchResult.size());
+            }
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (currentType == 1 || currentType == 4) {
+                if (view == null) {
+                    view = new SharedDocumentCell(mContext);
+                }
+                SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedDocumentCell.setDocument(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedDocumentCell.setChecked(false, !scrolling);
+                }
+            } else if (currentType == 3) {
+                if (view == null) {
+                    view = new SharedLinkCell(mContext);
+                    ((SharedLinkCell) view).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                        @Override
+                        public void needOpenWebView(TLRPC.WebPage webPage) {
+                            UpdateActivity.this.openWebView(webPage);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return !actionBar.isActionModeShowed();
+                        }
+                    });
+                }
+                SharedLinkCell sharedLinkCell = (SharedLinkCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedLinkCell.setLink(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedLinkCell.setChecked(false, !scrolling);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult.isEmpty() && globalSearch.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateBiz.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateBiz.java
new file mode 100644
index 000000000..132f85309
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateBiz.java
@@ -0,0 +1,1845 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.userupdate;
+
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.content.FileProvider;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.webkit.MimeTypeMap;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.BuildConfig;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.browser.Browser;
+import org.telegram.messenger.query.SharedMediaQuery;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
+import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.SharedDocumentCell;
+import org.telegram.ui.Cells.SharedLinkCell;
+import org.telegram.ui.Cells.SharedMediaSectionCell;
+import org.telegram.ui.Cells.SharedPhotoVideoCell;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberTextView;
+import org.telegram.ui.Components.PlayerView;
+import org.telegram.ui.Components.SectionsListView;
+import org.telegram.ui.Components.WebFrameLayout;
+import org.telegram.ui.DialogsActivity;
+import org.telegram.ui.PhotoViewer;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+@SuppressWarnings("unchecked")
+public class UpdateBiz extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
+    private SharedPhotoVideoAdapter photoVideoAdapter;
+    private SharedLinksAdapter linksAdapter;
+    private SharedDocumentsAdapter documentsAdapter;
+    private SharedDocumentsAdapter audioAdapter;
+    private MediaSearchAdapter documentsSearchAdapter;
+    private MediaSearchAdapter audioSearchAdapter;
+    private MediaSearchAdapter linksSearchAdapter;
+    private SectionsListView listView;
+    private LinearLayout progressView;
+    private TextView emptyTextView;
+    private ImageView emptyImageView;
+    private LinearLayout emptyView;
+    private TextView dropDown;
+    private ActionBarMenuItem dropDownContainer;
+    private ActionBarMenuItem searchItem;
+    private NumberTextView selectedMessagesCountTextView;
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
+    private ArrayList<SharedPhotoVideoCell> cellCache = new ArrayList<>(6);
+
+    private boolean searchWas;
+    private boolean searching;
+
+    private HashMap<Integer, MessageObject>[] selectedFiles = new HashMap[] {new HashMap<>(), new HashMap<>()};
+    private int cantDeleteMessagesCount;
+    private ArrayList<View> actionModeViews = new ArrayList<>();
+    private boolean scrolling;
+    private long mergeDialogId;
+    protected TLRPC.ChatFull info = null;
+
+    private long dialog_id;
+    private int selectedMode;
+    private int columnsCount = 4;
+
+    private class SharedMediaData {
+        private ArrayList<MessageObject> messages = new ArrayList<>();
+        private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[] {new HashMap<>(), new HashMap<>()};
+        private ArrayList<String> sections = new ArrayList<>();
+        private HashMap<String, ArrayList<MessageObject>> sectionArrays = new HashMap<>();
+        private int totalCount;
+        private boolean loading;
+        private boolean endReached[] = new boolean[] {false, true};
+        private int max_id[] = new int[] {0, 0};
+
+        public boolean addMessage(MessageObject messageObject, boolean isNew, boolean enc) {
+            int loadIndex = messageObject.getDialogId() == dialog_id ? 0 : 1;
+            if (messagesDict[loadIndex].containsKey(messageObject.getId())) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                messageObjects = new ArrayList<>();
+                sectionArrays.put(messageObject.monthKey, messageObjects);
+                if (isNew) {
+                    sections.add(0, messageObject.monthKey);
+                } else {
+                    sections.add(messageObject.monthKey);
+                }
+            }
+            if (isNew) {
+                messageObjects.add(0, messageObject);
+                messages.add(0, messageObject);
+            } else {
+                messageObjects.add(messageObject);
+                messages.add(messageObject);
+            }
+            messagesDict[loadIndex].put(messageObject.getId(), messageObject);
+            if (!enc) {
+                if (messageObject.getId() > 0) {
+                    max_id[loadIndex] = Math.min(messageObject.getId(), max_id[loadIndex]);
+                }
+            } else {
+                max_id[loadIndex] = Math.max(messageObject.getId(), max_id[loadIndex]);
+            }
+            return true;
+        }
+
+        public boolean deleteMessage(int mid, int loadIndex) {
+            MessageObject messageObject = messagesDict[loadIndex].get(mid);
+            if (messageObject == null) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                return false;
+            }
+            messageObjects.remove(messageObject);
+            messages.remove(messageObject);
+            messagesDict[loadIndex].remove(messageObject.getId());
+            if (messageObjects.isEmpty()) {
+                sectionArrays.remove(messageObject.monthKey);
+                sections.remove(messageObject.monthKey);
+            }
+            totalCount--;
+            return true;
+        }
+
+        public void replaceMid(int oldMid, int newMid) {
+            MessageObject obj = messagesDict[0].get(oldMid);
+            if (obj != null) {
+                messagesDict[0].remove(oldMid);
+                messagesDict[0].put(newMid, obj);
+                obj.messageOwner.id = newMid;
+            }
+        }
+    }
+
+    private SharedMediaData sharedMediaData[] = new SharedMediaData[5];
+
+    private final static int shared_media_item = 1;
+    private final static int files_item = 2;
+    private final static int links_item = 5;
+    private final static int music_item = 6;
+    private final static int forward = 3;
+    private final static int delete = 4;
+
+    public UpdateBiz(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+        for (int a = 0; a < sharedMediaData.length; a++) {
+            sharedMediaData[a] = new SharedMediaData();
+            sharedMediaData[a].max_id[0] = ((int)dialog_id) == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
+            if (mergeDialogId != 0 && info != null) {
+                sharedMediaData[a].max_id[1] = info.migrated_from_max_id;
+                sharedMediaData[a].endReached[1] = false;
+            }
+        }
+        sharedMediaData[0].loading = true;
+        SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonDrawable(new BackDrawable(false));
+        actionBar.setTitle("");
+        actionBar.setAllowOverlayTitle(false);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    if (actionBar.isActionModeShowed()) {
+                        for (int a = 1; a >= 0; a--) {
+                            selectedFiles[a].clear();
+                        }
+                        cantDeleteMessagesCount = 0;
+                        actionBar.hideActionMode();
+                        listView.invalidateViews();
+                    } else {
+                        finishFragment();
+                    }
+                } else if (id == shared_media_item) {
+                    if (selectedMode == 0) {
+                        return;
+                    }
+                    selectedMode = 0;
+                    switchToCurrentSelectedMode();
+                } else if (id == files_item) {
+                    if (selectedMode == 1) {
+                        return;
+                    }
+                    selectedMode = 1;
+                    switchToCurrentSelectedMode();
+                } else if (id == links_item) {
+                    if (selectedMode == 3) {
+                        return;
+                    }
+                    selectedMode = 3;
+                    switchToCurrentSelectedMode();
+                } else if (id == music_item) {
+                    if (selectedMode == 4) {
+                        return;
+                    }
+                    selectedMode = 4;
+                    switchToCurrentSelectedMode();
+                } else if (id == delete) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("items", selectedFiles[0].size() + selectedFiles[1].size())));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            for (int a = 1; a >= 0; a--) {
+                                ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                ArrayList<Long> random_ids = null;
+                                TLRPC.EncryptedChat currentEncryptedChat = null;
+                                int channelId = 0;
+                                if (!ids.isEmpty()) {
+                                    MessageObject msg = selectedFiles[a].get(ids.get(0));
+                                    if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
+                                        channelId = msg.messageOwner.to_id.channel_id;
+                                    }
+                                }
+                                if ((int) dialog_id == 0) {
+                                    currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                                }
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedFiles[a].entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
+                                }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
+                                selectedFiles[a].clear();
+                            }
+                            actionBar.hideActionMode();
+                            actionBar.closeSearchField();
+                            cantDeleteMessagesCount = 0;
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                } else if (id == forward) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlySelect", true);
+                    args.putInt("dialogsType", 1);
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
+                        @Override
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
+                            int lower_part = (int) did;
+                            if (lower_part != 0) {
+                                Bundle args = new Bundle();
+                                args.putBoolean("scrollToTopOnResume", true);
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                                if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                    return;
+                                }
+
+                                ArrayList<MessageObject> fmessages = new ArrayList<>();
+                                for (int a = 1; a >= 0; a--) {
+                                    ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                    Collections.sort(ids);
+                                    for (Integer id : ids) {
+                                        if (id > 0) {
+                                            fmessages.add(selectedFiles[a].get(id));
+                                        }
+                                    }
+                                    selectedFiles[a].clear();
+                                }
+                                cantDeleteMessagesCount = 0;
+                                actionBar.hideActionMode();
+
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+
+                                ChatActivity chatActivity = new ChatActivity(args);
+                                presentFragment(chatActivity, true);
+                                chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
+
+                                if (!AndroidUtilities.isTablet()) {
+                                    removeSelfFromStack();
+                                }
+                            } else {
+                                fragment.finishFragment();
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        for (int a = 1; a >= 0; a--) {
+            selectedFiles[a].clear();
+        }
+        cantDeleteMessagesCount = 0;
+        actionModeViews.clear();
+
+        final ActionBarMenu menu = actionBar.createMenu();
+        searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+            @Override
+            public void onSearchExpand() {
+                dropDownContainer.setVisibility(View.GONE);
+                searching = true;
+            }
+
+            @Override
+            public void onSearchCollapse() {
+                dropDownContainer.setVisibility(View.VISIBLE);
+                if (selectedMode == 1) {
+                    documentsSearchAdapter.search(null);
+                } else if (selectedMode == 3) {
+                    linksSearchAdapter.search(null);
+                } else if (selectedMode == 4) {
+                    audioSearchAdapter.search(null);
+                }
+                searching = false;
+                searchWas = false;
+                switchToCurrentSelectedMode();
+            }
+
+            @Override
+            public void onTextChanged(EditText editText) {
+                String text = editText.getText().toString();
+                if (text.length() != 0) {
+                    searchWas = true;
+                    switchToCurrentSelectedMode();
+                }
+                if (selectedMode == 1) {
+                    if (documentsSearchAdapter == null) {
+                        return;
+                    }
+                    documentsSearchAdapter.search(text);
+                } else if (selectedMode == 3) {
+                    if (linksSearchAdapter == null) {
+                        return;
+                    }
+                    linksSearchAdapter.search(text);
+                } else if (selectedMode == 4) {
+                    if (audioSearchAdapter == null) {
+                        return;
+                    }
+                    audioSearchAdapter.search(text);
+                }
+            }
+        });
+        searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        searchItem.setVisibility(View.GONE);
+
+        dropDownContainer = new ActionBarMenuItem(context, menu, 0);
+        dropDownContainer.setSubMenuOpenSide(1);
+        dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
+        dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
+        if ((int) dialog_id != 0) {
+            dropDownContainer.addSubItem(links_item, LocaleController.getString("LinksTitle", R.string.LinksTitle), 0);
+            dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+        } else {
+            TLRPC.EncryptedChat currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) {
+                dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+            }
+        }
+        actionBar.addView(dropDownContainer, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 64 : 56, 0, 40, 0));
+        dropDownContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dropDownContainer.toggleSubMenu();
+            }
+        });
+
+        dropDown = new TextView(context);
+        dropDown.setGravity(Gravity.LEFT);
+        dropDown.setSingleLine(true);
+        dropDown.setLines(1);
+        dropDown.setMaxLines(1);
+        dropDown.setEllipsize(TextUtils.TruncateAt.END);
+        dropDown.setTextColor(0xffffffff);
+        dropDown.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
+        dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+        dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
+        dropDownContainer.addView(dropDown, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 16, 0, 0, 0));
+
+        final ActionBarMenu actionMode = actionBar.createActionMode();
+
+        selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
+        selectedMessagesCountTextView.setTextSize(18);
+        selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        selectedMessagesCountTextView.setTextColor(0xff737373);
+        selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
+
+        if ((int) dialog_id != 0) {
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+        }
+        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+
+        photoVideoAdapter = new SharedPhotoVideoAdapter(context);
+        documentsAdapter = new SharedDocumentsAdapter(context, 1);
+        audioAdapter = new SharedDocumentsAdapter(context, 4);
+        documentsSearchAdapter = new MediaSearchAdapter(context, 1);
+        audioSearchAdapter = new MediaSearchAdapter(context, 4);
+        linksSearchAdapter = new MediaSearchAdapter(context, 3);
+        linksAdapter = new SharedLinksAdapter(context);
+
+        FrameLayout frameLayout;
+        fragmentView = frameLayout = new FrameLayout(context);
+
+        listView = new SectionsListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setDrawSelectorOnTop(true);
+        listView.setClipToPadding(false);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    UpdateBiz.this.onItemClick(i, view, ((SharedDocumentCell) view).getMessage(), 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    UpdateBiz.this.onItemClick(i, view, ((SharedLinkCell) view).getMessage(), 0);
+                }
+            }
+        });
+        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+                if (scrollState == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                }
+                scrolling = scrollState != SCROLL_STATE_IDLE;
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                if (searching && searchWas) {
+                    return;
+                }
+                if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !sharedMediaData[selectedMode].loading) {
+                    int type;
+                    if (selectedMode == 0) {
+                        type = SharedMediaQuery.MEDIA_PHOTOVIDEO;
+                    } else if (selectedMode == 1) {
+                        type = SharedMediaQuery.MEDIA_FILE;
+                    } else if (selectedMode == 2) {
+                        type = SharedMediaQuery.MEDIA_AUDIO;
+                    } else if (selectedMode == 4) {
+                        type = SharedMediaQuery.MEDIA_MUSIC;
+                    } else {
+                        type = SharedMediaQuery.MEDIA_URL;
+                    }
+                    if (!sharedMediaData[selectedMode].endReached[0]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(dialog_id, 0, 50, sharedMediaData[selectedMode].max_id[0], type, true, classGuid);
+                    } else if (mergeDialogId != 0 && !sharedMediaData[selectedMode].endReached[1]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                    }
+                }
+            }
+        });
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateBiz.this.onItemLongClick(message, view, 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    SharedLinkCell cell = (SharedLinkCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateBiz.this.onItemLongClick(message, view, 0);
+                }
+                return false;
+            }
+        });
+
+        for (int a = 0; a < 6; a++) {
+            cellCache.add(new SharedPhotoVideoCell(context));
+        }
+
+        emptyView = new LinearLayout(context);
+        emptyView.setOrientation(LinearLayout.VERTICAL);
+        emptyView.setGravity(Gravity.CENTER);
+        emptyView.setVisibility(View.GONE);
+        emptyView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        emptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        emptyImageView = new ImageView(context);
+        emptyView.addView(emptyImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff8a8a8a);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+        emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        emptyView.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 24, 0, 0));
+
+        progressView = new LinearLayout(context);
+        progressView.setGravity(Gravity.CENTER);
+        progressView.setOrientation(LinearLayout.VERTICAL);
+        progressView.setVisibility(View.GONE);
+        progressView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressView.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        switchToCurrentSelectedMode();
+
+        if (!AndroidUtilities.isTablet()) {
+            frameLayout.addView(new PlayerView(context, this), LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long) args[0];
+            int guid = (Integer) args[3];
+            if (guid == classGuid) {
+                int type = (Integer) args[4];
+                sharedMediaData[type].loading = false;
+                sharedMediaData[type].totalCount = (Integer) args[1];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
+                boolean enc = ((int) dialog_id) == 0;
+                int loadIndex = uid == dialog_id ? 0 : 1;
+                for (int a = 0; a < arr.size(); a++) {
+                    MessageObject message = arr.get(a);
+                    sharedMediaData[type].addMessage(message, false, enc);
+                }
+                sharedMediaData[type].endReached[loadIndex] = (Boolean) args[5];
+                if (loadIndex == 0 && sharedMediaData[selectedMode].messages.isEmpty() && mergeDialogId != 0) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                }
+                if (!sharedMediaData[selectedMode].loading) {
+                    if (progressView != null) {
+                        progressView.setVisibility(View.GONE);
+                    }
+                    if (selectedMode == type && listView != null) {
+                        if (listView.getEmptyView() == null) {
+                            listView.setEmptyView(emptyView);
+                        }
+                    }
+                }
+                scrolling = true;
+                if (selectedMode == 0 && type == 0) {
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 1 && type == 1) {
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 3 && type == 3) {
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 4 && type == 4) {
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            TLRPC.Chat currentChat = null;
+            if ((int) dialog_id < 0) {
+                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+            }
+            int channelId = (Integer) args[1];
+            int loadIndex = 0;
+            if (ChatObject.isChannel(currentChat)) {
+                if (channelId == 0 && mergeDialogId != 0) {
+                    loadIndex = 1;
+                } else if (channelId == currentChat.id) {
+                    loadIndex = 0;
+                } else {
+                    return;
+                }
+            } else if (channelId != 0) {
+                return;
+            }
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                for (SharedMediaData data : sharedMediaData) {
+                    if (data.deleteMessage(ids, loadIndex)) {
+                        updated = true;
+                    }
+                }
+            }
+            if (updated) {
+                scrolling = true;
+                if (photoVideoAdapter != null) {
+                    photoVideoAdapter.notifyDataSetChanged();
+                }
+                if (documentsAdapter != null) {
+                    documentsAdapter.notifyDataSetChanged();
+                }
+                if (linksAdapter != null) {
+                    linksAdapter.notifyDataSetChanged();
+                }
+                if (audioAdapter != null) {
+                    audioAdapter.notifyDataSetChanged();
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long uid = (Long) args[0];
+            if (uid == dialog_id) {
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+                boolean enc = ((int) dialog_id) == 0;
+                boolean updated = false;
+                for (MessageObject obj : arr) {
+                    if (obj.messageOwner.media == null) {
+                        continue;
+                    }
+                    int type = SharedMediaQuery.getMediaType(obj.messageOwner);
+                    if (type == -1) {
+                        return;
+                    }
+                    if (sharedMediaData[type].addMessage(obj, true, enc)) {
+                        updated = true;
+                    }
+                }
+                if (updated) {
+                    scrolling = true;
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                    if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                        searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer) args[0];
+            Integer newMsgId = (Integer) args[1];
+            for (SharedMediaData data : sharedMediaData) {
+                data.replaceMid(msgId, newMsgId);
+            }
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (dropDownContainer != null) {
+            dropDownContainer.closeSubMenu();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        scrolling = true;
+        if (photoVideoAdapter != null) {
+            photoVideoAdapter.notifyDataSetChanged();
+        }
+        if (documentsAdapter != null) {
+            documentsAdapter.notifyDataSetChanged();
+        }
+        if (linksAdapter != null) {
+            linksAdapter.notifyDataSetChanged();
+        }
+        fixLayoutInternal();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    fixLayoutInternal();
+                    return true;
+                }
+            });
+        }
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    @Override
+    public boolean scaleToFill() {
+        return false;
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null || listView == null || selectedMode != 0) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            if (view instanceof SharedPhotoVideoCell) {
+                SharedPhotoVideoCell cell = (SharedPhotoVideoCell) view;
+                for (int i = 0; i < 6; i++) {
+                    MessageObject message = cell.getMessageObject(i);
+                    if (message == null) {
+                        break;
+                    }
+                    BackupImageView imageView = cell.getImageView(i);
+                    if (message.getId() == messageObject.getId()) {
+                        int coords[] = new int[2];
+                        imageView.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight);
+                        object.parentView = listView;
+                        object.imageReceiver = imageView.getImageReceiver();
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.parentView.getLocationInWindow(coords);
+                        object.clipTopAddition = AndroidUtilities.dp(40);
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public boolean allowCaption() {
+        return true;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public boolean cancelButtonPressed() { return true; }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void setChatInfo(TLRPC.ChatFull chatInfo) {
+        info = chatInfo;
+        if (info != null && info.migrated_from_chat_id != 0) {
+            mergeDialogId = -info.migrated_from_chat_id;
+        }
+    }
+
+    public void setMergeDialogId(long did) {
+        mergeDialogId = did;
+    }
+
+    private void switchToCurrentSelectedMode() {
+        if (searching && searchWas) {
+            if (listView != null) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsSearchAdapter);
+                    documentsSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 3) {
+                    listView.setAdapter(linksSearchAdapter);
+                    linksSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioSearchAdapter);
+                    audioSearchAdapter.notifyDataSetChanged();
+                }
+            }
+            if (emptyTextView != null) {
+                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+                emptyImageView.setVisibility(View.GONE);
+            }
+        } else {
+            emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+            emptyImageView.setVisibility(View.VISIBLE);
+            if (selectedMode == 0) {
+                listView.setAdapter(photoVideoAdapter);
+                dropDown.setText(LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle));
+                emptyImageView.setImageResource(R.drawable.tip1);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                }
+                searchItem.setVisibility(View.GONE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setVisibility(View.VISIBLE);
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsAdapter);
+                    dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
+                    emptyImageView.setImageResource(R.drawable.tip2);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    }
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioAdapter);
+                    dropDown.setText(LocaleController.getString("AudioTitle", R.string.AudioTitle));
+                    emptyImageView.setImageResource(R.drawable.tip4);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    }
+                }
+                searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, selectedMode == 1 ? SharedMediaQuery.MEDIA_FILE : SharedMediaQuery.MEDIA_MUSIC, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 3) {
+                listView.setAdapter(linksAdapter);
+                dropDown.setText(LocaleController.getString("LinksTitle", R.string.LinksTitle));
+                emptyImageView.setImageResource(R.drawable.tip3);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                }
+                searchItem.setVisibility(!sharedMediaData[3].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_URL, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            }
+        }
+    }
+
+    private boolean onItemLongClick(MessageObject item, View view, int a) {
+        if (actionBar.isActionModeShowed()) {
+            return false;
+        }
+        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+        selectedFiles[item.getDialogId() == dialog_id ? 0 : 1].put(item.getId(), item);
+        if (!item.canDeleteMessage(null)) {
+            cantDeleteMessagesCount++;
+        }
+        actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+        selectedMessagesCountTextView.setNumber(1, false);
+        AnimatorSet animatorSet = new AnimatorSet();
+        ArrayList<Animator> animators = new ArrayList<>();
+        for (int i = 0; i < actionModeViews.size(); i++) {
+            View view2 = actionModeViews.get(i);
+            AndroidUtilities.clearDrawableAnimation(view2);
+            animators.add(ObjectAnimator.ofFloat(view2, "scaleY", 0.1f, 1.0f));
+        }
+        animatorSet.playTogether(animators);
+        animatorSet.setDuration(250);
+        animatorSet.start();
+        scrolling = false;
+        if (view instanceof SharedDocumentCell) {
+            ((SharedDocumentCell) view).setChecked(true, true);
+        } else if (view instanceof SharedPhotoVideoCell) {
+            ((SharedPhotoVideoCell) view).setChecked(a, true, true);
+        } else if (view instanceof SharedLinkCell) {
+            ((SharedLinkCell) view).setChecked(true, true);
+        }
+        actionBar.showActionMode();
+        return true;
+    }
+
+    private void onItemClick(int index, View view, MessageObject message, int a) {
+        if (message == null) {
+            return;
+        }
+        if (actionBar.isActionModeShowed()) {
+            int loadIndex = message.getDialogId() == dialog_id ? 0 : 1;
+            if (selectedFiles[loadIndex].containsKey(message.getId())) {
+                selectedFiles[loadIndex].remove(message.getId());
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount--;
+                }
+            } else {
+                selectedFiles[loadIndex].put(message.getId(), message);
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount++;
+                }
+            }
+            if (selectedFiles[0].isEmpty() && selectedFiles[1].isEmpty()) {
+                actionBar.hideActionMode();
+            } else {
+                selectedMessagesCountTextView.setNumber(selectedFiles[0].size() + selectedFiles[1].size(), true);
+            }
+            actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+            scrolling = false;
+            if (view instanceof SharedDocumentCell) {
+                ((SharedDocumentCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedPhotoVideoCell) {
+                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedLinkCell) {
+                ((SharedLinkCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            }
+        } else {
+            if (selectedMode == 0) {
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhoto(sharedMediaData[selectedMode].messages, index, dialog_id, mergeDialogId, this);
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    if (cell.isLoaded()) {
+                        if (message.isMusic()) {
+                            if (MediaController.getInstance().setPlaylist(sharedMediaData[selectedMode].messages, message)) {
+                                return;
+                            }
+                        }
+                        File f = null;
+                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.getDocument()) : "";
+                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                            f = new File(message.messageOwner.attachPath);
+                        }
+                        if (f == null || f != null && !f.exists()) {
+                            f = FileLoader.getPathToMessage(message.messageOwner);
+                        }
+                        if (f != null && f.exists()) {
+                            String realMimeType = null;
+                            try {
+                                Intent intent = new Intent(Intent.ACTION_VIEW);
+                                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                int idx = fileName.lastIndexOf('.');
+                                if (idx != -1) {
+                                    String ext = fileName.substring(idx + 1);
+                                    realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                    if (realMimeType == null) {
+                                        realMimeType = message.getDocument().mime_type;
+                                        if (realMimeType == null || realMimeType.length() == 0) {
+                                            realMimeType = null;
+                                        }
+                                    }
+                                }
+                                if (Build.VERSION.SDK_INT >= 24) {
+                                    intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
+                                } else {
+                                    intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
+                                }
+                                if (realMimeType != null) {
+                                    try {
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    } catch (Exception e) {
+                                        if (Build.VERSION.SDK_INT >= 24) {
+                                            intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), "text/plain");
+                                        } else {
+                                            intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                        }
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    }
+                                } else {
+                                    getParentActivity().startActivityForResult(intent, 500);
+                                }
+                            } catch (Exception e) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
+                                showDialog(builder.create());
+                            }
+                        }
+                    } else if (!cell.isLoading()) {
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
+                        cell.updateFileExistIcon();
+                    } else {
+                        FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
+                        cell.updateFileExistIcon();
+                    }
+                }
+            } else if (selectedMode == 3) {
+                try {
+                    TLRPC.WebPage webPage = message.messageOwner.media.webpage;
+                    String link = null;
+                    if (webPage != null && !(webPage instanceof TLRPC.TL_webPageEmpty)) {
+                        if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                            openWebView(webPage);
+                            return;
+                        } else {
+                            link = webPage.url;
+                        }
+                    }
+                    if (link == null) {
+                        link = ((SharedLinkCell) view).getLink(0);
+                    }
+                    if (link != null) {
+                        Browser.openUrl(getParentActivity(), link);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    private void openWebView(TLRPC.WebPage webPage) {
+        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.site_name, webPage.description, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
+        builder.setUseFullWidth(true);
+        showDialog(builder.create());
+    }
+
+    private void fixLayoutInternal() {
+        if (listView == null) {
+            return;
+        }
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            selectedMessagesCountTextView.setTextSize(18);
+        } else {
+            selectedMessagesCountTextView.setTextSize(20);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            columnsCount = 4;
+            emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        } else {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                columnsCount = 6;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
+            } else {
+                columnsCount = 4;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+            }
+        }
+        photoVideoAdapter.notifyDataSetChanged();
+
+        if (dropDownContainer != null) {
+            if (!AndroidUtilities.isTablet()) {
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
+                layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                dropDownContainer.setLayoutParams(layoutParams);
+            }
+
+            if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                dropDown.setTextSize(18);
+            } else {
+                dropDown.setTextSize(20);
+            }
+        }
+    }
+
+    private class SharedLinksAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedLinksAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[3].sections.size() + (sharedMediaData[3].sections.isEmpty() || sharedMediaData[3].endReached[0] && sharedMediaData[3].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[3].sections.size()) {
+                return sharedMediaData[3].sectionArrays.get(sharedMediaData[3].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedLinkCell(mContext);
+                        ((SharedLinkCell) convertView).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                            @Override
+                            public void needOpenWebView(TLRPC.WebPage webPage) {
+                                UpdateBiz.this.openWebView(webPage);
+                            }
+
+                            @Override
+                            public boolean canPerformActions() {
+                                return !actionBar.isActionModeShowed();
+                            }
+                        });
+                    }
+                    SharedLinkCell sharedLinkCell = (SharedLinkCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedLinkCell.setLink(messageObject, position != messageObjects.size() || section == sharedMediaData[3].sections.size() - 1 && sharedMediaData[3].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedLinkCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[3].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedDocumentsAdapter extends BaseSectionsAdapter {
+
+        private Context mContext;
+        private int currentType;
+
+        public SharedDocumentsAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[currentType].sections.size() + (sharedMediaData[currentType].sections.isEmpty() || sharedMediaData[currentType].endReached[0] && sharedMediaData[currentType].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                return sharedMediaData[currentType].sectionArrays.get(sharedMediaData[currentType].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedDocumentCell(mContext);
+                    }
+                    SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedDocumentCell.setDocument(messageObject, position != messageObjects.size() || section == sharedMediaData[currentType].sections.size() - 1 && sharedMediaData[currentType].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedDocumentCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedPhotoVideoAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedPhotoVideoAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return false;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[0].sections.size() + (sharedMediaData[0].sections.isEmpty() || sharedMediaData[0].endReached[0] && sharedMediaData[0].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[0].sections.size()) {
+                return (int) Math.ceil(sharedMediaData[0].sectionArrays.get(sharedMediaData[0].sections.get(section)).size() / (float)columnsCount) + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SharedMediaSectionCell(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new SharedMediaSectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    SharedPhotoVideoCell cell;
+                    if (convertView == null) {
+                        if (!cellCache.isEmpty()) {
+                            convertView = cellCache.get(0);
+                            cellCache.remove(0);
+                        } else {
+                            convertView = new SharedPhotoVideoCell(mContext);
+                        }
+                        cell = (SharedPhotoVideoCell) convertView;
+                        cell.setDelegate(new SharedPhotoVideoCell.SharedPhotoVideoCellDelegate() {
+                            @Override
+                            public void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                onItemClick(index, cell, messageObject, a);
+                            }
+
+                            @Override
+                            public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                return onItemLongClick(messageObject, cell, a);
+                            }
+                        });
+                    } else {
+                        cell = (SharedPhotoVideoCell) convertView;
+                    }
+                    cell.setItemsCount(columnsCount);
+                    for (int a = 0; a < columnsCount; a++) {
+                        int index = (position - 1) * columnsCount + a;
+                        if (index < messageObjects.size()) {
+                            MessageObject messageObject = messageObjects.get(index);
+                            cell.setIsFirst(position == 1);
+                            cell.setItem(a, sharedMediaData[0].messages.indexOf(messageObject), messageObject);
+
+                            if (actionBar.isActionModeShowed()) {
+                                cell.setChecked(a, selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                            } else {
+                                cell.setChecked(a, false, !scrolling);
+                            }
+                        } else {
+                            cell.setItem(a, index, null);
+                        }
+                    }
+                    cell.requestLayout();
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[0].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    public class MediaSearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private ArrayList<MessageObject> searchResult = new ArrayList<>();
+        private Timer searchTimer;
+        protected ArrayList<MessageObject> globalSearch = new ArrayList<>();
+        private int reqId = 0;
+        private int lastReqId;
+        private int currentType;
+
+        public MediaSearchAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        public void queryServerSearch(final String query, final int max_id, long did) {
+            int uid = (int) did;
+            if (uid == 0) {
+                return;
+            }
+            if (reqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                reqId = 0;
+            }
+            if (query == null || query.length() == 0) {
+                globalSearch.clear();
+                lastReqId = 0;
+                notifyDataSetChanged();
+                return;
+            }
+            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.offset = 0;
+            req.limit = 50;
+            req.max_id = max_id;
+            if (currentType == 1) {
+                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
+            } else if (currentType == 3) {
+                req.filter = new TLRPC.TL_inputMessagesFilterUrl();
+            } else if (currentType == 4) {
+                req.filter = new TLRPC.TL_inputMessagesFilterMusic();
+            }
+            req.q = query;
+            req.peer = MessagesController.getInputPeer(uid);
+            if (req.peer == null) {
+                return;
+            }
+            final int currentReqId = ++lastReqId;
+            reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    final ArrayList<MessageObject> messageObjects = new ArrayList<>();
+                    if (error == null) {
+                        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                        for (int a = 0; a < res.messages.size(); a++) {
+                            TLRPC.Message message = res.messages.get(a);
+                            if (max_id != 0 && message.id > max_id) {
+                                continue;
+                            }
+                            messageObjects.add(new MessageObject(message, null, false));
+                        }
+                    }
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (currentReqId == lastReqId) {
+                                globalSearch = messageObjects;
+                                notifyDataSetChanged();
+                            }
+                            reqId = 0;
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+        }
+
+        public void search(final String query) {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (query == null) {
+                searchResult.clear();
+                notifyDataSetChanged();
+            } else {
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        processSearch(query);
+                    }
+                }, 200, 300);
+            }
+        }
+
+        private void processSearch(final String query) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (!sharedMediaData[currentType].messages.isEmpty()) {
+                        if (currentType == 1 || currentType == 4) {
+                            MessageObject messageObject = sharedMediaData[currentType].messages.get(sharedMediaData[currentType].messages.size() - 1);
+                            queryServerSearch(query, messageObject.getId(), messageObject.getDialogId());
+                        } else if (currentType == 3) {
+                            queryServerSearch(query, 0, dialog_id);
+                        }
+                    }
+                    if (currentType == 1 || currentType == 4) {
+                        final ArrayList<MessageObject> copy = new ArrayList<>();
+                        copy.addAll(sharedMediaData[currentType].messages);
+                        Utilities.searchQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                String search1 = query.trim().toLowerCase();
+                                if (search1.length() == 0) {
+                                    updateSearchResults(new ArrayList<MessageObject>());
+                                    return;
+                                }
+                                String search2 = LocaleController.getInstance().getTranslitString(search1);
+                                if (search1.equals(search2) || search2.length() == 0) {
+                                    search2 = null;
+                                }
+                                String search[] = new String[1 + (search2 != null ? 1 : 0)];
+                                search[0] = search1;
+                                if (search2 != null) {
+                                    search[1] = search2;
+                                }
+
+                                ArrayList<MessageObject> resultArray = new ArrayList<>();
+
+                                for (int a = 0; a < copy.size(); a++) {
+                                    MessageObject messageObject = copy.get(a);
+                                    for (int b = 0; b < search.length; b++) {
+                                        String q = search[b];
+                                        String name = messageObject.getDocumentName();
+                                        if (name == null || name.length() == 0) {
+                                            continue;
+                                        }
+                                        name = name.toLowerCase();
+                                        if (name.contains(q)) {
+                                            resultArray.add(messageObject);
+                                            break;
+                                        }
+                                        if (currentType == 4) {
+                                            TLRPC.Document document;
+                                            if (messageObject.type == 0) {
+                                                document = messageObject.messageOwner.media.webpage.document;
+                                            } else {
+                                                document = messageObject.messageOwner.media.document;
+                                            }
+                                            boolean ok = false;
+                                            for (int c = 0; c < document.attributes.size(); c++) {
+                                                TLRPC.DocumentAttribute attribute = document.attributes.get(c);
+                                                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                                                    if (attribute.performer != null) {
+                                                        ok = attribute.performer.toLowerCase().contains(q);
+                                                    }
+                                                    if (!ok && attribute.title != null) {
+                                                        ok = attribute.title.toLowerCase().contains(q);
+                                                    }
+                                                    break;
+                                                }
+                                            }
+                                            if (ok) {
+                                                resultArray.add(messageObject);
+                                                break;
+                                            }
+                                        }
+                                    }
+                                }
+
+                                updateSearchResults(resultArray);
+                            }
+                        });
+                    }
+                }
+            });
+        }
+
+        private void updateSearchResults(final ArrayList<MessageObject> documents) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    searchResult = documents;
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != searchResult.size() + globalSearch.size();
+        }
+
+        @Override
+        public int getCount() {
+            int count = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (globalCount != 0) {
+                count += globalCount;
+            }
+            return count;
+        }
+
+        public boolean isGlobalSearch(int i) {
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (i >= 0 && i < localCount) {
+                return false;
+            } else if (i > localCount && i <= globalCount + localCount) {
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public MessageObject getItem(int i) {
+            if (i < searchResult.size()) {
+                return searchResult.get(i);
+            } else {
+                return globalSearch.get(i - searchResult.size());
+            }
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (currentType == 1 || currentType == 4) {
+                if (view == null) {
+                    view = new SharedDocumentCell(mContext);
+                }
+                SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedDocumentCell.setDocument(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedDocumentCell.setChecked(false, !scrolling);
+                }
+            } else if (currentType == 3) {
+                if (view == null) {
+                    view = new SharedLinkCell(mContext);
+                    ((SharedLinkCell) view).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                        @Override
+                        public void needOpenWebView(TLRPC.WebPage webPage) {
+                            UpdateBiz.this.openWebView(webPage);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return !actionBar.isActionModeShowed();
+                        }
+                    });
+                }
+                SharedLinkCell sharedLinkCell = (SharedLinkCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedLinkCell.setLink(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedLinkCell.setChecked(false, !scrolling);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult.isEmpty() && globalSearch.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateCell.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateCell.java
new file mode 100644
index 000000000..efa8eb15e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateCell.java
@@ -0,0 +1,1845 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.userupdate;
+
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.content.FileProvider;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.webkit.MimeTypeMap;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.BuildConfig;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.browser.Browser;
+import org.telegram.messenger.query.SharedMediaQuery;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
+import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.SharedDocumentCell;
+import org.telegram.ui.Cells.SharedLinkCell;
+import org.telegram.ui.Cells.SharedMediaSectionCell;
+import org.telegram.ui.Cells.SharedPhotoVideoCell;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberTextView;
+import org.telegram.ui.Components.PlayerView;
+import org.telegram.ui.Components.SectionsListView;
+import org.telegram.ui.Components.WebFrameLayout;
+import org.telegram.ui.DialogsActivity;
+import org.telegram.ui.PhotoViewer;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+@SuppressWarnings("unchecked")
+public class UpdateCell extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
+    private SharedPhotoVideoAdapter photoVideoAdapter;
+    private SharedLinksAdapter linksAdapter;
+    private SharedDocumentsAdapter documentsAdapter;
+    private SharedDocumentsAdapter audioAdapter;
+    private MediaSearchAdapter documentsSearchAdapter;
+    private MediaSearchAdapter audioSearchAdapter;
+    private MediaSearchAdapter linksSearchAdapter;
+    private SectionsListView listView;
+    private LinearLayout progressView;
+    private TextView emptyTextView;
+    private ImageView emptyImageView;
+    private LinearLayout emptyView;
+    private TextView dropDown;
+    private ActionBarMenuItem dropDownContainer;
+    private ActionBarMenuItem searchItem;
+    private NumberTextView selectedMessagesCountTextView;
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
+    private ArrayList<SharedPhotoVideoCell> cellCache = new ArrayList<>(6);
+
+    private boolean searchWas;
+    private boolean searching;
+
+    private HashMap<Integer, MessageObject>[] selectedFiles = new HashMap[] {new HashMap<>(), new HashMap<>()};
+    private int cantDeleteMessagesCount;
+    private ArrayList<View> actionModeViews = new ArrayList<>();
+    private boolean scrolling;
+    private long mergeDialogId;
+    protected TLRPC.ChatFull info = null;
+
+    private long dialog_id;
+    private int selectedMode;
+    private int columnsCount = 4;
+
+    private class SharedMediaData {
+        private ArrayList<MessageObject> messages = new ArrayList<>();
+        private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[] {new HashMap<>(), new HashMap<>()};
+        private ArrayList<String> sections = new ArrayList<>();
+        private HashMap<String, ArrayList<MessageObject>> sectionArrays = new HashMap<>();
+        private int totalCount;
+        private boolean loading;
+        private boolean endReached[] = new boolean[] {false, true};
+        private int max_id[] = new int[] {0, 0};
+
+        public boolean addMessage(MessageObject messageObject, boolean isNew, boolean enc) {
+            int loadIndex = messageObject.getDialogId() == dialog_id ? 0 : 1;
+            if (messagesDict[loadIndex].containsKey(messageObject.getId())) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                messageObjects = new ArrayList<>();
+                sectionArrays.put(messageObject.monthKey, messageObjects);
+                if (isNew) {
+                    sections.add(0, messageObject.monthKey);
+                } else {
+                    sections.add(messageObject.monthKey);
+                }
+            }
+            if (isNew) {
+                messageObjects.add(0, messageObject);
+                messages.add(0, messageObject);
+            } else {
+                messageObjects.add(messageObject);
+                messages.add(messageObject);
+            }
+            messagesDict[loadIndex].put(messageObject.getId(), messageObject);
+            if (!enc) {
+                if (messageObject.getId() > 0) {
+                    max_id[loadIndex] = Math.min(messageObject.getId(), max_id[loadIndex]);
+                }
+            } else {
+                max_id[loadIndex] = Math.max(messageObject.getId(), max_id[loadIndex]);
+            }
+            return true;
+        }
+
+        public boolean deleteMessage(int mid, int loadIndex) {
+            MessageObject messageObject = messagesDict[loadIndex].get(mid);
+            if (messageObject == null) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                return false;
+            }
+            messageObjects.remove(messageObject);
+            messages.remove(messageObject);
+            messagesDict[loadIndex].remove(messageObject.getId());
+            if (messageObjects.isEmpty()) {
+                sectionArrays.remove(messageObject.monthKey);
+                sections.remove(messageObject.monthKey);
+            }
+            totalCount--;
+            return true;
+        }
+
+        public void replaceMid(int oldMid, int newMid) {
+            MessageObject obj = messagesDict[0].get(oldMid);
+            if (obj != null) {
+                messagesDict[0].remove(oldMid);
+                messagesDict[0].put(newMid, obj);
+                obj.messageOwner.id = newMid;
+            }
+        }
+    }
+
+    private SharedMediaData sharedMediaData[] = new SharedMediaData[5];
+
+    private final static int shared_media_item = 1;
+    private final static int files_item = 2;
+    private final static int links_item = 5;
+    private final static int music_item = 6;
+    private final static int forward = 3;
+    private final static int delete = 4;
+
+    public UpdateCell(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+        for (int a = 0; a < sharedMediaData.length; a++) {
+            sharedMediaData[a] = new SharedMediaData();
+            sharedMediaData[a].max_id[0] = ((int)dialog_id) == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
+            if (mergeDialogId != 0 && info != null) {
+                sharedMediaData[a].max_id[1] = info.migrated_from_max_id;
+                sharedMediaData[a].endReached[1] = false;
+            }
+        }
+        sharedMediaData[0].loading = true;
+        SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonDrawable(new BackDrawable(false));
+        actionBar.setTitle("");
+        actionBar.setAllowOverlayTitle(false);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    if (actionBar.isActionModeShowed()) {
+                        for (int a = 1; a >= 0; a--) {
+                            selectedFiles[a].clear();
+                        }
+                        cantDeleteMessagesCount = 0;
+                        actionBar.hideActionMode();
+                        listView.invalidateViews();
+                    } else {
+                        finishFragment();
+                    }
+                } else if (id == shared_media_item) {
+                    if (selectedMode == 0) {
+                        return;
+                    }
+                    selectedMode = 0;
+                    switchToCurrentSelectedMode();
+                } else if (id == files_item) {
+                    if (selectedMode == 1) {
+                        return;
+                    }
+                    selectedMode = 1;
+                    switchToCurrentSelectedMode();
+                } else if (id == links_item) {
+                    if (selectedMode == 3) {
+                        return;
+                    }
+                    selectedMode = 3;
+                    switchToCurrentSelectedMode();
+                } else if (id == music_item) {
+                    if (selectedMode == 4) {
+                        return;
+                    }
+                    selectedMode = 4;
+                    switchToCurrentSelectedMode();
+                } else if (id == delete) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("items", selectedFiles[0].size() + selectedFiles[1].size())));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            for (int a = 1; a >= 0; a--) {
+                                ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                ArrayList<Long> random_ids = null;
+                                TLRPC.EncryptedChat currentEncryptedChat = null;
+                                int channelId = 0;
+                                if (!ids.isEmpty()) {
+                                    MessageObject msg = selectedFiles[a].get(ids.get(0));
+                                    if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
+                                        channelId = msg.messageOwner.to_id.channel_id;
+                                    }
+                                }
+                                if ((int) dialog_id == 0) {
+                                    currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                                }
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedFiles[a].entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
+                                }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
+                                selectedFiles[a].clear();
+                            }
+                            actionBar.hideActionMode();
+                            actionBar.closeSearchField();
+                            cantDeleteMessagesCount = 0;
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                } else if (id == forward) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlySelect", true);
+                    args.putInt("dialogsType", 1);
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
+                        @Override
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
+                            int lower_part = (int) did;
+                            if (lower_part != 0) {
+                                Bundle args = new Bundle();
+                                args.putBoolean("scrollToTopOnResume", true);
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                                if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                    return;
+                                }
+
+                                ArrayList<MessageObject> fmessages = new ArrayList<>();
+                                for (int a = 1; a >= 0; a--) {
+                                    ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                    Collections.sort(ids);
+                                    for (Integer id : ids) {
+                                        if (id > 0) {
+                                            fmessages.add(selectedFiles[a].get(id));
+                                        }
+                                    }
+                                    selectedFiles[a].clear();
+                                }
+                                cantDeleteMessagesCount = 0;
+                                actionBar.hideActionMode();
+
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+
+                                ChatActivity chatActivity = new ChatActivity(args);
+                                presentFragment(chatActivity, true);
+                                chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
+
+                                if (!AndroidUtilities.isTablet()) {
+                                    removeSelfFromStack();
+                                }
+                            } else {
+                                fragment.finishFragment();
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        for (int a = 1; a >= 0; a--) {
+            selectedFiles[a].clear();
+        }
+        cantDeleteMessagesCount = 0;
+        actionModeViews.clear();
+
+        final ActionBarMenu menu = actionBar.createMenu();
+        searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+            @Override
+            public void onSearchExpand() {
+                dropDownContainer.setVisibility(View.GONE);
+                searching = true;
+            }
+
+            @Override
+            public void onSearchCollapse() {
+                dropDownContainer.setVisibility(View.VISIBLE);
+                if (selectedMode == 1) {
+                    documentsSearchAdapter.search(null);
+                } else if (selectedMode == 3) {
+                    linksSearchAdapter.search(null);
+                } else if (selectedMode == 4) {
+                    audioSearchAdapter.search(null);
+                }
+                searching = false;
+                searchWas = false;
+                switchToCurrentSelectedMode();
+            }
+
+            @Override
+            public void onTextChanged(EditText editText) {
+                String text = editText.getText().toString();
+                if (text.length() != 0) {
+                    searchWas = true;
+                    switchToCurrentSelectedMode();
+                }
+                if (selectedMode == 1) {
+                    if (documentsSearchAdapter == null) {
+                        return;
+                    }
+                    documentsSearchAdapter.search(text);
+                } else if (selectedMode == 3) {
+                    if (linksSearchAdapter == null) {
+                        return;
+                    }
+                    linksSearchAdapter.search(text);
+                } else if (selectedMode == 4) {
+                    if (audioSearchAdapter == null) {
+                        return;
+                    }
+                    audioSearchAdapter.search(text);
+                }
+            }
+        });
+        searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        searchItem.setVisibility(View.GONE);
+
+        dropDownContainer = new ActionBarMenuItem(context, menu, 0);
+        dropDownContainer.setSubMenuOpenSide(1);
+        dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
+        dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
+        if ((int) dialog_id != 0) {
+            dropDownContainer.addSubItem(links_item, LocaleController.getString("LinksTitle", R.string.LinksTitle), 0);
+            dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+        } else {
+            TLRPC.EncryptedChat currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) {
+                dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+            }
+        }
+        actionBar.addView(dropDownContainer, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 64 : 56, 0, 40, 0));
+        dropDownContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dropDownContainer.toggleSubMenu();
+            }
+        });
+
+        dropDown = new TextView(context);
+        dropDown.setGravity(Gravity.LEFT);
+        dropDown.setSingleLine(true);
+        dropDown.setLines(1);
+        dropDown.setMaxLines(1);
+        dropDown.setEllipsize(TextUtils.TruncateAt.END);
+        dropDown.setTextColor(0xffffffff);
+        dropDown.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
+        dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+        dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
+        dropDownContainer.addView(dropDown, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 16, 0, 0, 0));
+
+        final ActionBarMenu actionMode = actionBar.createActionMode();
+
+        selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
+        selectedMessagesCountTextView.setTextSize(18);
+        selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        selectedMessagesCountTextView.setTextColor(0xff737373);
+        selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
+
+        if ((int) dialog_id != 0) {
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+        }
+        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+
+        photoVideoAdapter = new SharedPhotoVideoAdapter(context);
+        documentsAdapter = new SharedDocumentsAdapter(context, 1);
+        audioAdapter = new SharedDocumentsAdapter(context, 4);
+        documentsSearchAdapter = new MediaSearchAdapter(context, 1);
+        audioSearchAdapter = new MediaSearchAdapter(context, 4);
+        linksSearchAdapter = new MediaSearchAdapter(context, 3);
+        linksAdapter = new SharedLinksAdapter(context);
+
+        FrameLayout frameLayout;
+        fragmentView = frameLayout = new FrameLayout(context);
+
+        listView = new SectionsListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setDrawSelectorOnTop(true);
+        listView.setClipToPadding(false);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    UpdateCell.this.onItemClick(i, view, ((SharedDocumentCell) view).getMessage(), 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    UpdateCell.this.onItemClick(i, view, ((SharedLinkCell) view).getMessage(), 0);
+                }
+            }
+        });
+        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+                if (scrollState == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                }
+                scrolling = scrollState != SCROLL_STATE_IDLE;
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                if (searching && searchWas) {
+                    return;
+                }
+                if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !sharedMediaData[selectedMode].loading) {
+                    int type;
+                    if (selectedMode == 0) {
+                        type = SharedMediaQuery.MEDIA_PHOTOVIDEO;
+                    } else if (selectedMode == 1) {
+                        type = SharedMediaQuery.MEDIA_FILE;
+                    } else if (selectedMode == 2) {
+                        type = SharedMediaQuery.MEDIA_AUDIO;
+                    } else if (selectedMode == 4) {
+                        type = SharedMediaQuery.MEDIA_MUSIC;
+                    } else {
+                        type = SharedMediaQuery.MEDIA_URL;
+                    }
+                    if (!sharedMediaData[selectedMode].endReached[0]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(dialog_id, 0, 50, sharedMediaData[selectedMode].max_id[0], type, true, classGuid);
+                    } else if (mergeDialogId != 0 && !sharedMediaData[selectedMode].endReached[1]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                    }
+                }
+            }
+        });
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateCell.this.onItemLongClick(message, view, 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    SharedLinkCell cell = (SharedLinkCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateCell.this.onItemLongClick(message, view, 0);
+                }
+                return false;
+            }
+        });
+
+        for (int a = 0; a < 6; a++) {
+            cellCache.add(new SharedPhotoVideoCell(context));
+        }
+
+        emptyView = new LinearLayout(context);
+        emptyView.setOrientation(LinearLayout.VERTICAL);
+        emptyView.setGravity(Gravity.CENTER);
+        emptyView.setVisibility(View.GONE);
+        emptyView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        emptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        emptyImageView = new ImageView(context);
+        emptyView.addView(emptyImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff8a8a8a);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+        emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        emptyView.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 24, 0, 0));
+
+        progressView = new LinearLayout(context);
+        progressView.setGravity(Gravity.CENTER);
+        progressView.setOrientation(LinearLayout.VERTICAL);
+        progressView.setVisibility(View.GONE);
+        progressView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressView.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        switchToCurrentSelectedMode();
+
+        if (!AndroidUtilities.isTablet()) {
+            frameLayout.addView(new PlayerView(context, this), LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long) args[0];
+            int guid = (Integer) args[3];
+            if (guid == classGuid) {
+                int type = (Integer) args[4];
+                sharedMediaData[type].loading = false;
+                sharedMediaData[type].totalCount = (Integer) args[1];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
+                boolean enc = ((int) dialog_id) == 0;
+                int loadIndex = uid == dialog_id ? 0 : 1;
+                for (int a = 0; a < arr.size(); a++) {
+                    MessageObject message = arr.get(a);
+                    sharedMediaData[type].addMessage(message, false, enc);
+                }
+                sharedMediaData[type].endReached[loadIndex] = (Boolean) args[5];
+                if (loadIndex == 0 && sharedMediaData[selectedMode].messages.isEmpty() && mergeDialogId != 0) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                }
+                if (!sharedMediaData[selectedMode].loading) {
+                    if (progressView != null) {
+                        progressView.setVisibility(View.GONE);
+                    }
+                    if (selectedMode == type && listView != null) {
+                        if (listView.getEmptyView() == null) {
+                            listView.setEmptyView(emptyView);
+                        }
+                    }
+                }
+                scrolling = true;
+                if (selectedMode == 0 && type == 0) {
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 1 && type == 1) {
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 3 && type == 3) {
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 4 && type == 4) {
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            TLRPC.Chat currentChat = null;
+            if ((int) dialog_id < 0) {
+                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+            }
+            int channelId = (Integer) args[1];
+            int loadIndex = 0;
+            if (ChatObject.isChannel(currentChat)) {
+                if (channelId == 0 && mergeDialogId != 0) {
+                    loadIndex = 1;
+                } else if (channelId == currentChat.id) {
+                    loadIndex = 0;
+                } else {
+                    return;
+                }
+            } else if (channelId != 0) {
+                return;
+            }
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                for (SharedMediaData data : sharedMediaData) {
+                    if (data.deleteMessage(ids, loadIndex)) {
+                        updated = true;
+                    }
+                }
+            }
+            if (updated) {
+                scrolling = true;
+                if (photoVideoAdapter != null) {
+                    photoVideoAdapter.notifyDataSetChanged();
+                }
+                if (documentsAdapter != null) {
+                    documentsAdapter.notifyDataSetChanged();
+                }
+                if (linksAdapter != null) {
+                    linksAdapter.notifyDataSetChanged();
+                }
+                if (audioAdapter != null) {
+                    audioAdapter.notifyDataSetChanged();
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long uid = (Long) args[0];
+            if (uid == dialog_id) {
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+                boolean enc = ((int) dialog_id) == 0;
+                boolean updated = false;
+                for (MessageObject obj : arr) {
+                    if (obj.messageOwner.media == null) {
+                        continue;
+                    }
+                    int type = SharedMediaQuery.getMediaType(obj.messageOwner);
+                    if (type == -1) {
+                        return;
+                    }
+                    if (sharedMediaData[type].addMessage(obj, true, enc)) {
+                        updated = true;
+                    }
+                }
+                if (updated) {
+                    scrolling = true;
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                    if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                        searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer) args[0];
+            Integer newMsgId = (Integer) args[1];
+            for (SharedMediaData data : sharedMediaData) {
+                data.replaceMid(msgId, newMsgId);
+            }
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (dropDownContainer != null) {
+            dropDownContainer.closeSubMenu();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        scrolling = true;
+        if (photoVideoAdapter != null) {
+            photoVideoAdapter.notifyDataSetChanged();
+        }
+        if (documentsAdapter != null) {
+            documentsAdapter.notifyDataSetChanged();
+        }
+        if (linksAdapter != null) {
+            linksAdapter.notifyDataSetChanged();
+        }
+        fixLayoutInternal();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    fixLayoutInternal();
+                    return true;
+                }
+            });
+        }
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    @Override
+    public boolean scaleToFill() {
+        return false;
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null || listView == null || selectedMode != 0) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            if (view instanceof SharedPhotoVideoCell) {
+                SharedPhotoVideoCell cell = (SharedPhotoVideoCell) view;
+                for (int i = 0; i < 6; i++) {
+                    MessageObject message = cell.getMessageObject(i);
+                    if (message == null) {
+                        break;
+                    }
+                    BackupImageView imageView = cell.getImageView(i);
+                    if (message.getId() == messageObject.getId()) {
+                        int coords[] = new int[2];
+                        imageView.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight);
+                        object.parentView = listView;
+                        object.imageReceiver = imageView.getImageReceiver();
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.parentView.getLocationInWindow(coords);
+                        object.clipTopAddition = AndroidUtilities.dp(40);
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public boolean allowCaption() {
+        return true;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public boolean cancelButtonPressed() { return true; }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void setChatInfo(TLRPC.ChatFull chatInfo) {
+        info = chatInfo;
+        if (info != null && info.migrated_from_chat_id != 0) {
+            mergeDialogId = -info.migrated_from_chat_id;
+        }
+    }
+
+    public void setMergeDialogId(long did) {
+        mergeDialogId = did;
+    }
+
+    private void switchToCurrentSelectedMode() {
+        if (searching && searchWas) {
+            if (listView != null) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsSearchAdapter);
+                    documentsSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 3) {
+                    listView.setAdapter(linksSearchAdapter);
+                    linksSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioSearchAdapter);
+                    audioSearchAdapter.notifyDataSetChanged();
+                }
+            }
+            if (emptyTextView != null) {
+                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+                emptyImageView.setVisibility(View.GONE);
+            }
+        } else {
+            emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+            emptyImageView.setVisibility(View.VISIBLE);
+            if (selectedMode == 0) {
+                listView.setAdapter(photoVideoAdapter);
+                dropDown.setText(LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle));
+                emptyImageView.setImageResource(R.drawable.tip1);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                }
+                searchItem.setVisibility(View.GONE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setVisibility(View.VISIBLE);
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsAdapter);
+                    dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
+                    emptyImageView.setImageResource(R.drawable.tip2);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    }
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioAdapter);
+                    dropDown.setText(LocaleController.getString("AudioTitle", R.string.AudioTitle));
+                    emptyImageView.setImageResource(R.drawable.tip4);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    }
+                }
+                searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, selectedMode == 1 ? SharedMediaQuery.MEDIA_FILE : SharedMediaQuery.MEDIA_MUSIC, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 3) {
+                listView.setAdapter(linksAdapter);
+                dropDown.setText(LocaleController.getString("LinksTitle", R.string.LinksTitle));
+                emptyImageView.setImageResource(R.drawable.tip3);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                }
+                searchItem.setVisibility(!sharedMediaData[3].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_URL, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            }
+        }
+    }
+
+    private boolean onItemLongClick(MessageObject item, View view, int a) {
+        if (actionBar.isActionModeShowed()) {
+            return false;
+        }
+        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+        selectedFiles[item.getDialogId() == dialog_id ? 0 : 1].put(item.getId(), item);
+        if (!item.canDeleteMessage(null)) {
+            cantDeleteMessagesCount++;
+        }
+        actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+        selectedMessagesCountTextView.setNumber(1, false);
+        AnimatorSet animatorSet = new AnimatorSet();
+        ArrayList<Animator> animators = new ArrayList<>();
+        for (int i = 0; i < actionModeViews.size(); i++) {
+            View view2 = actionModeViews.get(i);
+            AndroidUtilities.clearDrawableAnimation(view2);
+            animators.add(ObjectAnimator.ofFloat(view2, "scaleY", 0.1f, 1.0f));
+        }
+        animatorSet.playTogether(animators);
+        animatorSet.setDuration(250);
+        animatorSet.start();
+        scrolling = false;
+        if (view instanceof SharedDocumentCell) {
+            ((SharedDocumentCell) view).setChecked(true, true);
+        } else if (view instanceof SharedPhotoVideoCell) {
+            ((SharedPhotoVideoCell) view).setChecked(a, true, true);
+        } else if (view instanceof SharedLinkCell) {
+            ((SharedLinkCell) view).setChecked(true, true);
+        }
+        actionBar.showActionMode();
+        return true;
+    }
+
+    private void onItemClick(int index, View view, MessageObject message, int a) {
+        if (message == null) {
+            return;
+        }
+        if (actionBar.isActionModeShowed()) {
+            int loadIndex = message.getDialogId() == dialog_id ? 0 : 1;
+            if (selectedFiles[loadIndex].containsKey(message.getId())) {
+                selectedFiles[loadIndex].remove(message.getId());
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount--;
+                }
+            } else {
+                selectedFiles[loadIndex].put(message.getId(), message);
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount++;
+                }
+            }
+            if (selectedFiles[0].isEmpty() && selectedFiles[1].isEmpty()) {
+                actionBar.hideActionMode();
+            } else {
+                selectedMessagesCountTextView.setNumber(selectedFiles[0].size() + selectedFiles[1].size(), true);
+            }
+            actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+            scrolling = false;
+            if (view instanceof SharedDocumentCell) {
+                ((SharedDocumentCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedPhotoVideoCell) {
+                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedLinkCell) {
+                ((SharedLinkCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            }
+        } else {
+            if (selectedMode == 0) {
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhoto(sharedMediaData[selectedMode].messages, index, dialog_id, mergeDialogId, this);
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    if (cell.isLoaded()) {
+                        if (message.isMusic()) {
+                            if (MediaController.getInstance().setPlaylist(sharedMediaData[selectedMode].messages, message)) {
+                                return;
+                            }
+                        }
+                        File f = null;
+                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.getDocument()) : "";
+                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                            f = new File(message.messageOwner.attachPath);
+                        }
+                        if (f == null || f != null && !f.exists()) {
+                            f = FileLoader.getPathToMessage(message.messageOwner);
+                        }
+                        if (f != null && f.exists()) {
+                            String realMimeType = null;
+                            try {
+                                Intent intent = new Intent(Intent.ACTION_VIEW);
+                                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                int idx = fileName.lastIndexOf('.');
+                                if (idx != -1) {
+                                    String ext = fileName.substring(idx + 1);
+                                    realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                    if (realMimeType == null) {
+                                        realMimeType = message.getDocument().mime_type;
+                                        if (realMimeType == null || realMimeType.length() == 0) {
+                                            realMimeType = null;
+                                        }
+                                    }
+                                }
+                                if (Build.VERSION.SDK_INT >= 24) {
+                                    intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
+                                } else {
+                                    intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
+                                }
+                                if (realMimeType != null) {
+                                    try {
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    } catch (Exception e) {
+                                        if (Build.VERSION.SDK_INT >= 24) {
+                                            intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), "text/plain");
+                                        } else {
+                                            intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                        }
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    }
+                                } else {
+                                    getParentActivity().startActivityForResult(intent, 500);
+                                }
+                            } catch (Exception e) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
+                                showDialog(builder.create());
+                            }
+                        }
+                    } else if (!cell.isLoading()) {
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
+                        cell.updateFileExistIcon();
+                    } else {
+                        FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
+                        cell.updateFileExistIcon();
+                    }
+                }
+            } else if (selectedMode == 3) {
+                try {
+                    TLRPC.WebPage webPage = message.messageOwner.media.webpage;
+                    String link = null;
+                    if (webPage != null && !(webPage instanceof TLRPC.TL_webPageEmpty)) {
+                        if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                            openWebView(webPage);
+                            return;
+                        } else {
+                            link = webPage.url;
+                        }
+                    }
+                    if (link == null) {
+                        link = ((SharedLinkCell) view).getLink(0);
+                    }
+                    if (link != null) {
+                        Browser.openUrl(getParentActivity(), link);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    private void openWebView(TLRPC.WebPage webPage) {
+        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.site_name, webPage.description, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
+        builder.setUseFullWidth(true);
+        showDialog(builder.create());
+    }
+
+    private void fixLayoutInternal() {
+        if (listView == null) {
+            return;
+        }
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            selectedMessagesCountTextView.setTextSize(18);
+        } else {
+            selectedMessagesCountTextView.setTextSize(20);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            columnsCount = 4;
+            emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        } else {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                columnsCount = 6;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
+            } else {
+                columnsCount = 4;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+            }
+        }
+        photoVideoAdapter.notifyDataSetChanged();
+
+        if (dropDownContainer != null) {
+            if (!AndroidUtilities.isTablet()) {
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
+                layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                dropDownContainer.setLayoutParams(layoutParams);
+            }
+
+            if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                dropDown.setTextSize(18);
+            } else {
+                dropDown.setTextSize(20);
+            }
+        }
+    }
+
+    private class SharedLinksAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedLinksAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[3].sections.size() + (sharedMediaData[3].sections.isEmpty() || sharedMediaData[3].endReached[0] && sharedMediaData[3].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[3].sections.size()) {
+                return sharedMediaData[3].sectionArrays.get(sharedMediaData[3].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedLinkCell(mContext);
+                        ((SharedLinkCell) convertView).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                            @Override
+                            public void needOpenWebView(TLRPC.WebPage webPage) {
+                                UpdateCell.this.openWebView(webPage);
+                            }
+
+                            @Override
+                            public boolean canPerformActions() {
+                                return !actionBar.isActionModeShowed();
+                            }
+                        });
+                    }
+                    SharedLinkCell sharedLinkCell = (SharedLinkCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedLinkCell.setLink(messageObject, position != messageObjects.size() || section == sharedMediaData[3].sections.size() - 1 && sharedMediaData[3].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedLinkCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[3].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedDocumentsAdapter extends BaseSectionsAdapter {
+
+        private Context mContext;
+        private int currentType;
+
+        public SharedDocumentsAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[currentType].sections.size() + (sharedMediaData[currentType].sections.isEmpty() || sharedMediaData[currentType].endReached[0] && sharedMediaData[currentType].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                return sharedMediaData[currentType].sectionArrays.get(sharedMediaData[currentType].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedDocumentCell(mContext);
+                    }
+                    SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedDocumentCell.setDocument(messageObject, position != messageObjects.size() || section == sharedMediaData[currentType].sections.size() - 1 && sharedMediaData[currentType].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedDocumentCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedPhotoVideoAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedPhotoVideoAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return false;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[0].sections.size() + (sharedMediaData[0].sections.isEmpty() || sharedMediaData[0].endReached[0] && sharedMediaData[0].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[0].sections.size()) {
+                return (int) Math.ceil(sharedMediaData[0].sectionArrays.get(sharedMediaData[0].sections.get(section)).size() / (float)columnsCount) + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SharedMediaSectionCell(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new SharedMediaSectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    SharedPhotoVideoCell cell;
+                    if (convertView == null) {
+                        if (!cellCache.isEmpty()) {
+                            convertView = cellCache.get(0);
+                            cellCache.remove(0);
+                        } else {
+                            convertView = new SharedPhotoVideoCell(mContext);
+                        }
+                        cell = (SharedPhotoVideoCell) convertView;
+                        cell.setDelegate(new SharedPhotoVideoCell.SharedPhotoVideoCellDelegate() {
+                            @Override
+                            public void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                onItemClick(index, cell, messageObject, a);
+                            }
+
+                            @Override
+                            public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                return onItemLongClick(messageObject, cell, a);
+                            }
+                        });
+                    } else {
+                        cell = (SharedPhotoVideoCell) convertView;
+                    }
+                    cell.setItemsCount(columnsCount);
+                    for (int a = 0; a < columnsCount; a++) {
+                        int index = (position - 1) * columnsCount + a;
+                        if (index < messageObjects.size()) {
+                            MessageObject messageObject = messageObjects.get(index);
+                            cell.setIsFirst(position == 1);
+                            cell.setItem(a, sharedMediaData[0].messages.indexOf(messageObject), messageObject);
+
+                            if (actionBar.isActionModeShowed()) {
+                                cell.setChecked(a, selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                            } else {
+                                cell.setChecked(a, false, !scrolling);
+                            }
+                        } else {
+                            cell.setItem(a, index, null);
+                        }
+                    }
+                    cell.requestLayout();
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[0].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    public class MediaSearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private ArrayList<MessageObject> searchResult = new ArrayList<>();
+        private Timer searchTimer;
+        protected ArrayList<MessageObject> globalSearch = new ArrayList<>();
+        private int reqId = 0;
+        private int lastReqId;
+        private int currentType;
+
+        public MediaSearchAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        public void queryServerSearch(final String query, final int max_id, long did) {
+            int uid = (int) did;
+            if (uid == 0) {
+                return;
+            }
+            if (reqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                reqId = 0;
+            }
+            if (query == null || query.length() == 0) {
+                globalSearch.clear();
+                lastReqId = 0;
+                notifyDataSetChanged();
+                return;
+            }
+            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.offset = 0;
+            req.limit = 50;
+            req.max_id = max_id;
+            if (currentType == 1) {
+                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
+            } else if (currentType == 3) {
+                req.filter = new TLRPC.TL_inputMessagesFilterUrl();
+            } else if (currentType == 4) {
+                req.filter = new TLRPC.TL_inputMessagesFilterMusic();
+            }
+            req.q = query;
+            req.peer = MessagesController.getInputPeer(uid);
+            if (req.peer == null) {
+                return;
+            }
+            final int currentReqId = ++lastReqId;
+            reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    final ArrayList<MessageObject> messageObjects = new ArrayList<>();
+                    if (error == null) {
+                        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                        for (int a = 0; a < res.messages.size(); a++) {
+                            TLRPC.Message message = res.messages.get(a);
+                            if (max_id != 0 && message.id > max_id) {
+                                continue;
+                            }
+                            messageObjects.add(new MessageObject(message, null, false));
+                        }
+                    }
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (currentReqId == lastReqId) {
+                                globalSearch = messageObjects;
+                                notifyDataSetChanged();
+                            }
+                            reqId = 0;
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+        }
+
+        public void search(final String query) {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (query == null) {
+                searchResult.clear();
+                notifyDataSetChanged();
+            } else {
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        processSearch(query);
+                    }
+                }, 200, 300);
+            }
+        }
+
+        private void processSearch(final String query) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (!sharedMediaData[currentType].messages.isEmpty()) {
+                        if (currentType == 1 || currentType == 4) {
+                            MessageObject messageObject = sharedMediaData[currentType].messages.get(sharedMediaData[currentType].messages.size() - 1);
+                            queryServerSearch(query, messageObject.getId(), messageObject.getDialogId());
+                        } else if (currentType == 3) {
+                            queryServerSearch(query, 0, dialog_id);
+                        }
+                    }
+                    if (currentType == 1 || currentType == 4) {
+                        final ArrayList<MessageObject> copy = new ArrayList<>();
+                        copy.addAll(sharedMediaData[currentType].messages);
+                        Utilities.searchQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                String search1 = query.trim().toLowerCase();
+                                if (search1.length() == 0) {
+                                    updateSearchResults(new ArrayList<MessageObject>());
+                                    return;
+                                }
+                                String search2 = LocaleController.getInstance().getTranslitString(search1);
+                                if (search1.equals(search2) || search2.length() == 0) {
+                                    search2 = null;
+                                }
+                                String search[] = new String[1 + (search2 != null ? 1 : 0)];
+                                search[0] = search1;
+                                if (search2 != null) {
+                                    search[1] = search2;
+                                }
+
+                                ArrayList<MessageObject> resultArray = new ArrayList<>();
+
+                                for (int a = 0; a < copy.size(); a++) {
+                                    MessageObject messageObject = copy.get(a);
+                                    for (int b = 0; b < search.length; b++) {
+                                        String q = search[b];
+                                        String name = messageObject.getDocumentName();
+                                        if (name == null || name.length() == 0) {
+                                            continue;
+                                        }
+                                        name = name.toLowerCase();
+                                        if (name.contains(q)) {
+                                            resultArray.add(messageObject);
+                                            break;
+                                        }
+                                        if (currentType == 4) {
+                                            TLRPC.Document document;
+                                            if (messageObject.type == 0) {
+                                                document = messageObject.messageOwner.media.webpage.document;
+                                            } else {
+                                                document = messageObject.messageOwner.media.document;
+                                            }
+                                            boolean ok = false;
+                                            for (int c = 0; c < document.attributes.size(); c++) {
+                                                TLRPC.DocumentAttribute attribute = document.attributes.get(c);
+                                                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                                                    if (attribute.performer != null) {
+                                                        ok = attribute.performer.toLowerCase().contains(q);
+                                                    }
+                                                    if (!ok && attribute.title != null) {
+                                                        ok = attribute.title.toLowerCase().contains(q);
+                                                    }
+                                                    break;
+                                                }
+                                            }
+                                            if (ok) {
+                                                resultArray.add(messageObject);
+                                                break;
+                                            }
+                                        }
+                                    }
+                                }
+
+                                updateSearchResults(resultArray);
+                            }
+                        });
+                    }
+                }
+            });
+        }
+
+        private void updateSearchResults(final ArrayList<MessageObject> documents) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    searchResult = documents;
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != searchResult.size() + globalSearch.size();
+        }
+
+        @Override
+        public int getCount() {
+            int count = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (globalCount != 0) {
+                count += globalCount;
+            }
+            return count;
+        }
+
+        public boolean isGlobalSearch(int i) {
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (i >= 0 && i < localCount) {
+                return false;
+            } else if (i > localCount && i <= globalCount + localCount) {
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public MessageObject getItem(int i) {
+            if (i < searchResult.size()) {
+                return searchResult.get(i);
+            } else {
+                return globalSearch.get(i - searchResult.size());
+            }
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (currentType == 1 || currentType == 4) {
+                if (view == null) {
+                    view = new SharedDocumentCell(mContext);
+                }
+                SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedDocumentCell.setDocument(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedDocumentCell.setChecked(false, !scrolling);
+                }
+            } else if (currentType == 3) {
+                if (view == null) {
+                    view = new SharedLinkCell(mContext);
+                    ((SharedLinkCell) view).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                        @Override
+                        public void needOpenWebView(TLRPC.WebPage webPage) {
+                            UpdateCell.this.openWebView(webPage);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return !actionBar.isActionModeShowed();
+                        }
+                    });
+                }
+                SharedLinkCell sharedLinkCell = (SharedLinkCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedLinkCell.setLink(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedLinkCell.setChecked(false, !scrolling);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult.isEmpty() && globalSearch.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateModel.java b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateModel.java
new file mode 100644
index 000000000..a6b89f90a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/tools/userupdate/UpdateModel.java
@@ -0,0 +1,1845 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.tools.userupdate;
+
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.content.FileProvider;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.webkit.MimeTypeMap;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.BuildConfig;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import com.arash.telegram.lavegram.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.browser.Browser;
+import org.telegram.messenger.query.SharedMediaQuery;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.ActionBarPopupWindow;
+import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.BaseSectionsAdapter;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.SharedDocumentCell;
+import org.telegram.ui.Cells.SharedLinkCell;
+import org.telegram.ui.Cells.SharedMediaSectionCell;
+import org.telegram.ui.Cells.SharedPhotoVideoCell;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberTextView;
+import org.telegram.ui.Components.PlayerView;
+import org.telegram.ui.Components.SectionsListView;
+import org.telegram.ui.Components.WebFrameLayout;
+import org.telegram.ui.DialogsActivity;
+import org.telegram.ui.PhotoViewer;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+@SuppressWarnings("unchecked")
+public class UpdateModel extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
+    private SharedPhotoVideoAdapter photoVideoAdapter;
+    private SharedLinksAdapter linksAdapter;
+    private SharedDocumentsAdapter documentsAdapter;
+    private SharedDocumentsAdapter audioAdapter;
+    private MediaSearchAdapter documentsSearchAdapter;
+    private MediaSearchAdapter audioSearchAdapter;
+    private MediaSearchAdapter linksSearchAdapter;
+    private SectionsListView listView;
+    private LinearLayout progressView;
+    private TextView emptyTextView;
+    private ImageView emptyImageView;
+    private LinearLayout emptyView;
+    private TextView dropDown;
+    private ActionBarMenuItem dropDownContainer;
+    private ActionBarMenuItem searchItem;
+    private NumberTextView selectedMessagesCountTextView;
+    private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
+    private ArrayList<SharedPhotoVideoCell> cellCache = new ArrayList<>(6);
+
+    private boolean searchWas;
+    private boolean searching;
+
+    private HashMap<Integer, MessageObject>[] selectedFiles = new HashMap[] {new HashMap<>(), new HashMap<>()};
+    private int cantDeleteMessagesCount;
+    private ArrayList<View> actionModeViews = new ArrayList<>();
+    private boolean scrolling;
+    private long mergeDialogId;
+    protected TLRPC.ChatFull info = null;
+
+    private long dialog_id;
+    private int selectedMode;
+    private int columnsCount = 4;
+
+    private class SharedMediaData {
+        private ArrayList<MessageObject> messages = new ArrayList<>();
+        private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[] {new HashMap<>(), new HashMap<>()};
+        private ArrayList<String> sections = new ArrayList<>();
+        private HashMap<String, ArrayList<MessageObject>> sectionArrays = new HashMap<>();
+        private int totalCount;
+        private boolean loading;
+        private boolean endReached[] = new boolean[] {false, true};
+        private int max_id[] = new int[] {0, 0};
+
+        public boolean addMessage(MessageObject messageObject, boolean isNew, boolean enc) {
+            int loadIndex = messageObject.getDialogId() == dialog_id ? 0 : 1;
+            if (messagesDict[loadIndex].containsKey(messageObject.getId())) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                messageObjects = new ArrayList<>();
+                sectionArrays.put(messageObject.monthKey, messageObjects);
+                if (isNew) {
+                    sections.add(0, messageObject.monthKey);
+                } else {
+                    sections.add(messageObject.monthKey);
+                }
+            }
+            if (isNew) {
+                messageObjects.add(0, messageObject);
+                messages.add(0, messageObject);
+            } else {
+                messageObjects.add(messageObject);
+                messages.add(messageObject);
+            }
+            messagesDict[loadIndex].put(messageObject.getId(), messageObject);
+            if (!enc) {
+                if (messageObject.getId() > 0) {
+                    max_id[loadIndex] = Math.min(messageObject.getId(), max_id[loadIndex]);
+                }
+            } else {
+                max_id[loadIndex] = Math.max(messageObject.getId(), max_id[loadIndex]);
+            }
+            return true;
+        }
+
+        public boolean deleteMessage(int mid, int loadIndex) {
+            MessageObject messageObject = messagesDict[loadIndex].get(mid);
+            if (messageObject == null) {
+                return false;
+            }
+            ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
+            if (messageObjects == null) {
+                return false;
+            }
+            messageObjects.remove(messageObject);
+            messages.remove(messageObject);
+            messagesDict[loadIndex].remove(messageObject.getId());
+            if (messageObjects.isEmpty()) {
+                sectionArrays.remove(messageObject.monthKey);
+                sections.remove(messageObject.monthKey);
+            }
+            totalCount--;
+            return true;
+        }
+
+        public void replaceMid(int oldMid, int newMid) {
+            MessageObject obj = messagesDict[0].get(oldMid);
+            if (obj != null) {
+                messagesDict[0].remove(oldMid);
+                messagesDict[0].put(newMid, obj);
+                obj.messageOwner.id = newMid;
+            }
+        }
+    }
+
+    private SharedMediaData sharedMediaData[] = new SharedMediaData[5];
+
+    private final static int shared_media_item = 1;
+    private final static int files_item = 2;
+    private final static int links_item = 5;
+    private final static int music_item = 6;
+    private final static int forward = 3;
+    private final static int delete = 4;
+
+    public UpdateModel(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+        for (int a = 0; a < sharedMediaData.length; a++) {
+            sharedMediaData[a] = new SharedMediaData();
+            sharedMediaData[a].max_id[0] = ((int)dialog_id) == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
+            if (mergeDialogId != 0 && info != null) {
+                sharedMediaData[a].max_id[1] = info.migrated_from_max_id;
+                sharedMediaData[a].endReached[1] = false;
+            }
+        }
+        sharedMediaData[0].loading = true;
+        SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonDrawable(new BackDrawable(false));
+        actionBar.setTitle("");
+        actionBar.setAllowOverlayTitle(false);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    if (actionBar.isActionModeShowed()) {
+                        for (int a = 1; a >= 0; a--) {
+                            selectedFiles[a].clear();
+                        }
+                        cantDeleteMessagesCount = 0;
+                        actionBar.hideActionMode();
+                        listView.invalidateViews();
+                    } else {
+                        finishFragment();
+                    }
+                } else if (id == shared_media_item) {
+                    if (selectedMode == 0) {
+                        return;
+                    }
+                    selectedMode = 0;
+                    switchToCurrentSelectedMode();
+                } else if (id == files_item) {
+                    if (selectedMode == 1) {
+                        return;
+                    }
+                    selectedMode = 1;
+                    switchToCurrentSelectedMode();
+                } else if (id == links_item) {
+                    if (selectedMode == 3) {
+                        return;
+                    }
+                    selectedMode = 3;
+                    switchToCurrentSelectedMode();
+                } else if (id == music_item) {
+                    if (selectedMode == 4) {
+                        return;
+                    }
+                    selectedMode = 4;
+                    switchToCurrentSelectedMode();
+                } else if (id == delete) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("items", selectedFiles[0].size() + selectedFiles[1].size())));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            for (int a = 1; a >= 0; a--) {
+                                ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                ArrayList<Long> random_ids = null;
+                                TLRPC.EncryptedChat currentEncryptedChat = null;
+                                int channelId = 0;
+                                if (!ids.isEmpty()) {
+                                    MessageObject msg = selectedFiles[a].get(ids.get(0));
+                                    if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
+                                        channelId = msg.messageOwner.to_id.channel_id;
+                                    }
+                                }
+                                if ((int) dialog_id == 0) {
+                                    currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                                }
+                                if (currentEncryptedChat != null) {
+                                    random_ids = new ArrayList<>();
+                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedFiles[a].entrySet()) {
+                                        MessageObject msg = entry.getValue();
+                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                            random_ids.add(msg.messageOwner.random_id);
+                                        }
+                                    }
+                                }
+                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
+                                selectedFiles[a].clear();
+                            }
+                            actionBar.hideActionMode();
+                            actionBar.closeSearchField();
+                            cantDeleteMessagesCount = 0;
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                } else if (id == forward) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlySelect", true);
+                    args.putInt("dialogsType", 1);
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
+                        @Override
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
+                            int lower_part = (int) did;
+                            if (lower_part != 0) {
+                                Bundle args = new Bundle();
+                                args.putBoolean("scrollToTopOnResume", true);
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                                if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                    return;
+                                }
+
+                                ArrayList<MessageObject> fmessages = new ArrayList<>();
+                                for (int a = 1; a >= 0; a--) {
+                                    ArrayList<Integer> ids = new ArrayList<>(selectedFiles[a].keySet());
+                                    Collections.sort(ids);
+                                    for (Integer id : ids) {
+                                        if (id > 0) {
+                                            fmessages.add(selectedFiles[a].get(id));
+                                        }
+                                    }
+                                    selectedFiles[a].clear();
+                                }
+                                cantDeleteMessagesCount = 0;
+                                actionBar.hideActionMode();
+
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+
+                                ChatActivity chatActivity = new ChatActivity(args);
+                                presentFragment(chatActivity, true);
+                                chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
+
+                                if (!AndroidUtilities.isTablet()) {
+                                    removeSelfFromStack();
+                                }
+                            } else {
+                                fragment.finishFragment();
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            }
+        });
+
+        for (int a = 1; a >= 0; a--) {
+            selectedFiles[a].clear();
+        }
+        cantDeleteMessagesCount = 0;
+        actionModeViews.clear();
+
+        final ActionBarMenu menu = actionBar.createMenu();
+        searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+            @Override
+            public void onSearchExpand() {
+                dropDownContainer.setVisibility(View.GONE);
+                searching = true;
+            }
+
+            @Override
+            public void onSearchCollapse() {
+                dropDownContainer.setVisibility(View.VISIBLE);
+                if (selectedMode == 1) {
+                    documentsSearchAdapter.search(null);
+                } else if (selectedMode == 3) {
+                    linksSearchAdapter.search(null);
+                } else if (selectedMode == 4) {
+                    audioSearchAdapter.search(null);
+                }
+                searching = false;
+                searchWas = false;
+                switchToCurrentSelectedMode();
+            }
+
+            @Override
+            public void onTextChanged(EditText editText) {
+                String text = editText.getText().toString();
+                if (text.length() != 0) {
+                    searchWas = true;
+                    switchToCurrentSelectedMode();
+                }
+                if (selectedMode == 1) {
+                    if (documentsSearchAdapter == null) {
+                        return;
+                    }
+                    documentsSearchAdapter.search(text);
+                } else if (selectedMode == 3) {
+                    if (linksSearchAdapter == null) {
+                        return;
+                    }
+                    linksSearchAdapter.search(text);
+                } else if (selectedMode == 4) {
+                    if (audioSearchAdapter == null) {
+                        return;
+                    }
+                    audioSearchAdapter.search(text);
+                }
+            }
+        });
+        searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        searchItem.setVisibility(View.GONE);
+
+        dropDownContainer = new ActionBarMenuItem(context, menu, 0);
+        dropDownContainer.setSubMenuOpenSide(1);
+        dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
+        dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
+        if ((int) dialog_id != 0) {
+            dropDownContainer.addSubItem(links_item, LocaleController.getString("LinksTitle", R.string.LinksTitle), 0);
+            dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+        } else {
+            TLRPC.EncryptedChat currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) {
+                dropDownContainer.addSubItem(music_item, LocaleController.getString("AudioTitle", R.string.AudioTitle), 0);
+            }
+        }
+        actionBar.addView(dropDownContainer, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 64 : 56, 0, 40, 0));
+        dropDownContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dropDownContainer.toggleSubMenu();
+            }
+        });
+
+        dropDown = new TextView(context);
+        dropDown.setGravity(Gravity.LEFT);
+        dropDown.setSingleLine(true);
+        dropDown.setLines(1);
+        dropDown.setMaxLines(1);
+        dropDown.setEllipsize(TextUtils.TruncateAt.END);
+        dropDown.setTextColor(0xffffffff);
+        dropDown.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
+        dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
+        dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
+        dropDownContainer.addView(dropDown, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 16, 0, 0, 0));
+
+        final ActionBarMenu actionMode = actionBar.createActionMode();
+
+        selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
+        selectedMessagesCountTextView.setTextSize(18);
+        selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        selectedMessagesCountTextView.setTextColor(0xff737373);
+        selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
+
+        if ((int) dialog_id != 0) {
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+        }
+        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+
+        photoVideoAdapter = new SharedPhotoVideoAdapter(context);
+        documentsAdapter = new SharedDocumentsAdapter(context, 1);
+        audioAdapter = new SharedDocumentsAdapter(context, 4);
+        documentsSearchAdapter = new MediaSearchAdapter(context, 1);
+        audioSearchAdapter = new MediaSearchAdapter(context, 4);
+        linksSearchAdapter = new MediaSearchAdapter(context, 3);
+        linksAdapter = new SharedLinksAdapter(context);
+
+        FrameLayout frameLayout;
+        fragmentView = frameLayout = new FrameLayout(context);
+
+        listView = new SectionsListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setDrawSelectorOnTop(true);
+        listView.setClipToPadding(false);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    UpdateModel.this.onItemClick(i, view, ((SharedDocumentCell) view).getMessage(), 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    UpdateModel.this.onItemClick(i, view, ((SharedLinkCell) view).getMessage(), 0);
+                }
+            }
+        });
+        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+                if (scrollState == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                }
+                scrolling = scrollState != SCROLL_STATE_IDLE;
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                if (searching && searchWas) {
+                    return;
+                }
+                if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !sharedMediaData[selectedMode].loading) {
+                    int type;
+                    if (selectedMode == 0) {
+                        type = SharedMediaQuery.MEDIA_PHOTOVIDEO;
+                    } else if (selectedMode == 1) {
+                        type = SharedMediaQuery.MEDIA_FILE;
+                    } else if (selectedMode == 2) {
+                        type = SharedMediaQuery.MEDIA_AUDIO;
+                    } else if (selectedMode == 4) {
+                        type = SharedMediaQuery.MEDIA_MUSIC;
+                    } else {
+                        type = SharedMediaQuery.MEDIA_URL;
+                    }
+                    if (!sharedMediaData[selectedMode].endReached[0]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(dialog_id, 0, 50, sharedMediaData[selectedMode].max_id[0], type, true, classGuid);
+                    } else if (mergeDialogId != 0 && !sharedMediaData[selectedMode].endReached[1]) {
+                        sharedMediaData[selectedMode].loading = true;
+                        SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                    }
+                }
+            }
+        });
+        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
+                if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateModel.this.onItemLongClick(message, view, 0);
+                } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
+                    SharedLinkCell cell = (SharedLinkCell) view;
+                    MessageObject message = cell.getMessage();
+                    return UpdateModel.this.onItemLongClick(message, view, 0);
+                }
+                return false;
+            }
+        });
+
+        for (int a = 0; a < 6; a++) {
+            cellCache.add(new SharedPhotoVideoCell(context));
+        }
+
+        emptyView = new LinearLayout(context);
+        emptyView.setOrientation(LinearLayout.VERTICAL);
+        emptyView.setGravity(Gravity.CENTER);
+        emptyView.setVisibility(View.GONE);
+        emptyView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        emptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        emptyImageView = new ImageView(context);
+        emptyView.addView(emptyImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        emptyTextView = new TextView(context);
+        emptyTextView.setTextColor(0xff8a8a8a);
+        emptyTextView.setGravity(Gravity.CENTER);
+        emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+        emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        emptyView.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 24, 0, 0));
+
+        progressView = new LinearLayout(context);
+        progressView.setGravity(Gravity.CENTER);
+        progressView.setOrientation(LinearLayout.VERTICAL);
+        progressView.setVisibility(View.GONE);
+        progressView.setBackgroundColor(0xfff0f0f0);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressView.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        switchToCurrentSelectedMode();
+
+        if (!AndroidUtilities.isTablet()) {
+            frameLayout.addView(new PlayerView(context, this), LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
+        }
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long) args[0];
+            int guid = (Integer) args[3];
+            if (guid == classGuid) {
+                int type = (Integer) args[4];
+                sharedMediaData[type].loading = false;
+                sharedMediaData[type].totalCount = (Integer) args[1];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
+                boolean enc = ((int) dialog_id) == 0;
+                int loadIndex = uid == dialog_id ? 0 : 1;
+                for (int a = 0; a < arr.size(); a++) {
+                    MessageObject message = arr.get(a);
+                    sharedMediaData[type].addMessage(message, false, enc);
+                }
+                sharedMediaData[type].endReached[loadIndex] = (Boolean) args[5];
+                if (loadIndex == 0 && sharedMediaData[selectedMode].messages.isEmpty() && mergeDialogId != 0) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(mergeDialogId, 0, 50, sharedMediaData[selectedMode].max_id[1], type, true, classGuid);
+                }
+                if (!sharedMediaData[selectedMode].loading) {
+                    if (progressView != null) {
+                        progressView.setVisibility(View.GONE);
+                    }
+                    if (selectedMode == type && listView != null) {
+                        if (listView.getEmptyView() == null) {
+                            listView.setEmptyView(emptyView);
+                        }
+                    }
+                }
+                scrolling = true;
+                if (selectedMode == 0 && type == 0) {
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 1 && type == 1) {
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 3 && type == 3) {
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                } else if (selectedMode == 4 && type == 4) {
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            TLRPC.Chat currentChat = null;
+            if ((int) dialog_id < 0) {
+                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+            }
+            int channelId = (Integer) args[1];
+            int loadIndex = 0;
+            if (ChatObject.isChannel(currentChat)) {
+                if (channelId == 0 && mergeDialogId != 0) {
+                    loadIndex = 1;
+                } else if (channelId == currentChat.id) {
+                    loadIndex = 0;
+                } else {
+                    return;
+                }
+            } else if (channelId != 0) {
+                return;
+            }
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                for (SharedMediaData data : sharedMediaData) {
+                    if (data.deleteMessage(ids, loadIndex)) {
+                        updated = true;
+                    }
+                }
+            }
+            if (updated) {
+                scrolling = true;
+                if (photoVideoAdapter != null) {
+                    photoVideoAdapter.notifyDataSetChanged();
+                }
+                if (documentsAdapter != null) {
+                    documentsAdapter.notifyDataSetChanged();
+                }
+                if (linksAdapter != null) {
+                    linksAdapter.notifyDataSetChanged();
+                }
+                if (audioAdapter != null) {
+                    audioAdapter.notifyDataSetChanged();
+                }
+                if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                    searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long uid = (Long) args[0];
+            if (uid == dialog_id) {
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+                boolean enc = ((int) dialog_id) == 0;
+                boolean updated = false;
+                for (MessageObject obj : arr) {
+                    if (obj.messageOwner.media == null) {
+                        continue;
+                    }
+                    int type = SharedMediaQuery.getMediaType(obj.messageOwner);
+                    if (type == -1) {
+                        return;
+                    }
+                    if (sharedMediaData[type].addMessage(obj, true, enc)) {
+                        updated = true;
+                    }
+                }
+                if (updated) {
+                    scrolling = true;
+                    if (photoVideoAdapter != null) {
+                        photoVideoAdapter.notifyDataSetChanged();
+                    }
+                    if (documentsAdapter != null) {
+                        documentsAdapter.notifyDataSetChanged();
+                    }
+                    if (linksAdapter != null) {
+                        linksAdapter.notifyDataSetChanged();
+                    }
+                    if (audioAdapter != null) {
+                        audioAdapter.notifyDataSetChanged();
+                    }
+                    if (selectedMode == 1 || selectedMode == 3 || selectedMode == 4) {
+                        searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() && !searching ? View.VISIBLE : View.GONE);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer) args[0];
+            Integer newMsgId = (Integer) args[1];
+            for (SharedMediaData data : sharedMediaData) {
+                data.replaceMid(msgId, newMsgId);
+            }
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (dropDownContainer != null) {
+            dropDownContainer.closeSubMenu();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        scrolling = true;
+        if (photoVideoAdapter != null) {
+            photoVideoAdapter.notifyDataSetChanged();
+        }
+        if (documentsAdapter != null) {
+            documentsAdapter.notifyDataSetChanged();
+        }
+        if (linksAdapter != null) {
+            linksAdapter.notifyDataSetChanged();
+        }
+        fixLayoutInternal();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    fixLayoutInternal();
+                    return true;
+                }
+            });
+        }
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    @Override
+    public boolean scaleToFill() {
+        return false;
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null || listView == null || selectedMode != 0) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            if (view instanceof SharedPhotoVideoCell) {
+                SharedPhotoVideoCell cell = (SharedPhotoVideoCell) view;
+                for (int i = 0; i < 6; i++) {
+                    MessageObject message = cell.getMessageObject(i);
+                    if (message == null) {
+                        break;
+                    }
+                    BackupImageView imageView = cell.getImageView(i);
+                    if (message.getId() == messageObject.getId()) {
+                        int coords[] = new int[2];
+                        imageView.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight);
+                        object.parentView = listView;
+                        object.imageReceiver = imageView.getImageReceiver();
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.parentView.getLocationInWindow(coords);
+                        object.clipTopAddition = AndroidUtilities.dp(40);
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public boolean allowCaption() {
+        return true;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public boolean cancelButtonPressed() { return true; }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void setChatInfo(TLRPC.ChatFull chatInfo) {
+        info = chatInfo;
+        if (info != null && info.migrated_from_chat_id != 0) {
+            mergeDialogId = -info.migrated_from_chat_id;
+        }
+    }
+
+    public void setMergeDialogId(long did) {
+        mergeDialogId = did;
+    }
+
+    private void switchToCurrentSelectedMode() {
+        if (searching && searchWas) {
+            if (listView != null) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsSearchAdapter);
+                    documentsSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 3) {
+                    listView.setAdapter(linksSearchAdapter);
+                    linksSearchAdapter.notifyDataSetChanged();
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioSearchAdapter);
+                    audioSearchAdapter.notifyDataSetChanged();
+                }
+            }
+            if (emptyTextView != null) {
+                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+                emptyImageView.setVisibility(View.GONE);
+            }
+        } else {
+            emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
+            emptyImageView.setVisibility(View.VISIBLE);
+            if (selectedMode == 0) {
+                listView.setAdapter(photoVideoAdapter);
+                dropDown.setText(LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle));
+                emptyImageView.setImageResource(R.drawable.tip1);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                }
+                searchItem.setVisibility(View.GONE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setVisibility(View.VISIBLE);
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (selectedMode == 1) {
+                    listView.setAdapter(documentsAdapter);
+                    dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
+                    emptyImageView.setImageResource(R.drawable.tip2);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    }
+                } else if (selectedMode == 4) {
+                    listView.setAdapter(audioAdapter);
+                    dropDown.setText(LocaleController.getString("AudioTitle", R.string.AudioTitle));
+                    emptyImageView.setImageResource(R.drawable.tip4);
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    }
+                }
+                searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, selectedMode == 1 ? SharedMediaQuery.MEDIA_FILE : SharedMediaQuery.MEDIA_MUSIC, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            } else if (selectedMode == 3) {
+                listView.setAdapter(linksAdapter);
+                dropDown.setText(LocaleController.getString("LinksTitle", R.string.LinksTitle));
+                emptyImageView.setImageResource(R.drawable.tip3);
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                }
+                searchItem.setVisibility(!sharedMediaData[3].messages.isEmpty() ? View.VISIBLE : View.GONE);
+                if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    sharedMediaData[selectedMode].loading = true;
+                    SharedMediaQuery.loadMedia(dialog_id, 0, 50, 0, SharedMediaQuery.MEDIA_URL, true, classGuid);
+                }
+                listView.setVisibility(View.VISIBLE);
+                if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
+                    progressView.setVisibility(View.VISIBLE);
+                    listView.setEmptyView(null);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    progressView.setVisibility(View.GONE);
+                    listView.setEmptyView(emptyView);
+                }
+                listView.setPadding(0, 0, 0, AndroidUtilities.dp(4));
+            }
+        }
+    }
+
+    private boolean onItemLongClick(MessageObject item, View view, int a) {
+        if (actionBar.isActionModeShowed()) {
+            return false;
+        }
+        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+        selectedFiles[item.getDialogId() == dialog_id ? 0 : 1].put(item.getId(), item);
+        if (!item.canDeleteMessage(null)) {
+            cantDeleteMessagesCount++;
+        }
+        actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+        selectedMessagesCountTextView.setNumber(1, false);
+        AnimatorSet animatorSet = new AnimatorSet();
+        ArrayList<Animator> animators = new ArrayList<>();
+        for (int i = 0; i < actionModeViews.size(); i++) {
+            View view2 = actionModeViews.get(i);
+            AndroidUtilities.clearDrawableAnimation(view2);
+            animators.add(ObjectAnimator.ofFloat(view2, "scaleY", 0.1f, 1.0f));
+        }
+        animatorSet.playTogether(animators);
+        animatorSet.setDuration(250);
+        animatorSet.start();
+        scrolling = false;
+        if (view instanceof SharedDocumentCell) {
+            ((SharedDocumentCell) view).setChecked(true, true);
+        } else if (view instanceof SharedPhotoVideoCell) {
+            ((SharedPhotoVideoCell) view).setChecked(a, true, true);
+        } else if (view instanceof SharedLinkCell) {
+            ((SharedLinkCell) view).setChecked(true, true);
+        }
+        actionBar.showActionMode();
+        return true;
+    }
+
+    private void onItemClick(int index, View view, MessageObject message, int a) {
+        if (message == null) {
+            return;
+        }
+        if (actionBar.isActionModeShowed()) {
+            int loadIndex = message.getDialogId() == dialog_id ? 0 : 1;
+            if (selectedFiles[loadIndex].containsKey(message.getId())) {
+                selectedFiles[loadIndex].remove(message.getId());
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount--;
+                }
+            } else {
+                selectedFiles[loadIndex].put(message.getId(), message);
+                if (!message.canDeleteMessage(null)) {
+                    cantDeleteMessagesCount++;
+                }
+            }
+            if (selectedFiles[0].isEmpty() && selectedFiles[1].isEmpty()) {
+                actionBar.hideActionMode();
+            } else {
+                selectedMessagesCountTextView.setNumber(selectedFiles[0].size() + selectedFiles[1].size(), true);
+            }
+            actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
+            scrolling = false;
+            if (view instanceof SharedDocumentCell) {
+                ((SharedDocumentCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedPhotoVideoCell) {
+                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles[loadIndex].containsKey(message.getId()), true);
+            } else if (view instanceof SharedLinkCell) {
+                ((SharedLinkCell) view).setChecked(selectedFiles[loadIndex].containsKey(message.getId()), true);
+            }
+        } else {
+            if (selectedMode == 0) {
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhoto(sharedMediaData[selectedMode].messages, index, dialog_id, mergeDialogId, this);
+            } else if (selectedMode == 1 || selectedMode == 4) {
+                if (view instanceof SharedDocumentCell) {
+                    SharedDocumentCell cell = (SharedDocumentCell) view;
+                    if (cell.isLoaded()) {
+                        if (message.isMusic()) {
+                            if (MediaController.getInstance().setPlaylist(sharedMediaData[selectedMode].messages, message)) {
+                                return;
+                            }
+                        }
+                        File f = null;
+                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.getDocument()) : "";
+                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                            f = new File(message.messageOwner.attachPath);
+                        }
+                        if (f == null || f != null && !f.exists()) {
+                            f = FileLoader.getPathToMessage(message.messageOwner);
+                        }
+                        if (f != null && f.exists()) {
+                            String realMimeType = null;
+                            try {
+                                Intent intent = new Intent(Intent.ACTION_VIEW);
+                                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                int idx = fileName.lastIndexOf('.');
+                                if (idx != -1) {
+                                    String ext = fileName.substring(idx + 1);
+                                    realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                    if (realMimeType == null) {
+                                        realMimeType = message.getDocument().mime_type;
+                                        if (realMimeType == null || realMimeType.length() == 0) {
+                                            realMimeType = null;
+                                        }
+                                    }
+                                }
+                                if (Build.VERSION.SDK_INT >= 24) {
+                                    intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
+                                } else {
+                                    intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
+                                }
+                                if (realMimeType != null) {
+                                    try {
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    } catch (Exception e) {
+                                        if (Build.VERSION.SDK_INT >= 24) {
+                                            intent.setDataAndType(FileProvider.getUriForFile(getParentActivity(), BuildConfig.APPLICATION_ID + ".provider", f), "text/plain");
+                                        } else {
+                                            intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                        }
+                                        getParentActivity().startActivityForResult(intent, 500);
+                                    }
+                                } else {
+                                    getParentActivity().startActivityForResult(intent, 500);
+                                }
+                            } catch (Exception e) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
+                                showDialog(builder.create());
+                            }
+                        }
+                    } else if (!cell.isLoading()) {
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
+                        cell.updateFileExistIcon();
+                    } else {
+                        FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
+                        cell.updateFileExistIcon();
+                    }
+                }
+            } else if (selectedMode == 3) {
+                try {
+                    TLRPC.WebPage webPage = message.messageOwner.media.webpage;
+                    String link = null;
+                    if (webPage != null && !(webPage instanceof TLRPC.TL_webPageEmpty)) {
+                        if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                            openWebView(webPage);
+                            return;
+                        } else {
+                            link = webPage.url;
+                        }
+                    }
+                    if (link == null) {
+                        link = ((SharedLinkCell) view).getLink(0);
+                    }
+                    if (link != null) {
+                        Browser.openUrl(getParentActivity(), link);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    private void openWebView(TLRPC.WebPage webPage) {
+        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.site_name, webPage.description, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
+        builder.setUseFullWidth(true);
+        showDialog(builder.create());
+    }
+
+    private void fixLayoutInternal() {
+        if (listView == null) {
+            return;
+        }
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            selectedMessagesCountTextView.setTextSize(18);
+        } else {
+            selectedMessagesCountTextView.setTextSize(20);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            columnsCount = 4;
+            emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+        } else {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                columnsCount = 6;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
+            } else {
+                columnsCount = 4;
+                emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
+            }
+        }
+        photoVideoAdapter.notifyDataSetChanged();
+
+        if (dropDownContainer != null) {
+            if (!AndroidUtilities.isTablet()) {
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
+                layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+                dropDownContainer.setLayoutParams(layoutParams);
+            }
+
+            if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                dropDown.setTextSize(18);
+            } else {
+                dropDown.setTextSize(20);
+            }
+        }
+    }
+
+    private class SharedLinksAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedLinksAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[3].sections.size() + (sharedMediaData[3].sections.isEmpty() || sharedMediaData[3].endReached[0] && sharedMediaData[3].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[3].sections.size()) {
+                return sharedMediaData[3].sectionArrays.get(sharedMediaData[3].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[3].sections.size()) {
+                String name = sharedMediaData[3].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[3].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedLinkCell(mContext);
+                        ((SharedLinkCell) convertView).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                            @Override
+                            public void needOpenWebView(TLRPC.WebPage webPage) {
+                                UpdateModel.this.openWebView(webPage);
+                            }
+
+                            @Override
+                            public boolean canPerformActions() {
+                                return !actionBar.isActionModeShowed();
+                            }
+                        });
+                    }
+                    SharedLinkCell sharedLinkCell = (SharedLinkCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedLinkCell.setLink(messageObject, position != messageObjects.size() || section == sharedMediaData[3].sections.size() - 1 && sharedMediaData[3].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedLinkCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[3].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedDocumentsAdapter extends BaseSectionsAdapter {
+
+        private Context mContext;
+        private int currentType;
+
+        public SharedDocumentsAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return row != 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[currentType].sections.size() + (sharedMediaData[currentType].sections.isEmpty() || sharedMediaData[currentType].endReached[0] && sharedMediaData[currentType].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                return sharedMediaData[currentType].sectionArrays.get(sharedMediaData[currentType].sections.get(section)).size() + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new GreySectionCell(mContext);
+            }
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                String name = sharedMediaData[currentType].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[currentType].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new GreySectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((GreySectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    if (convertView == null) {
+                        convertView = new SharedDocumentCell(mContext);
+                    }
+                    SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) convertView;
+                    MessageObject messageObject = messageObjects.get(position - 1);
+                    sharedDocumentCell.setDocument(messageObject, position != messageObjects.size() || section == sharedMediaData[currentType].sections.size() - 1 && sharedMediaData[currentType].loading);
+                    if (actionBar.isActionModeShowed()) {
+                        sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                    } else {
+                        sharedDocumentCell.setChecked(false, !scrolling);
+                    }
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[currentType].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    private class SharedPhotoVideoAdapter extends BaseSectionsAdapter {
+        private Context mContext;
+
+        public SharedPhotoVideoAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean isRowEnabled(int section, int row) {
+            return false;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sharedMediaData[0].sections.size() + (sharedMediaData[0].sections.isEmpty() || sharedMediaData[0].endReached[0] && sharedMediaData[0].endReached[1] ? 0 : 1);
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (section < sharedMediaData[0].sections.size()) {
+                return (int) Math.ceil(sharedMediaData[0].sectionArrays.get(sharedMediaData[0].sections.get(section)).size() / (float)columnsCount) + 1;
+            }
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SharedMediaSectionCell(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                MessageObject messageObject = messageObjects.get(0);
+                ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+            }
+            return convertView;
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (section < sharedMediaData[0].sections.size()) {
+                String name = sharedMediaData[0].sections.get(section);
+                ArrayList<MessageObject> messageObjects = sharedMediaData[0].sectionArrays.get(name);
+                if (position == 0) {
+                    if (convertView == null) {
+                        convertView = new SharedMediaSectionCell(mContext);
+                    }
+                    MessageObject messageObject = messageObjects.get(0);
+                    ((SharedMediaSectionCell) convertView).setText(LocaleController.getInstance().formatterMonthYear.format((long) messageObject.messageOwner.date * 1000).toUpperCase());
+                } else {
+                    SharedPhotoVideoCell cell;
+                    if (convertView == null) {
+                        if (!cellCache.isEmpty()) {
+                            convertView = cellCache.get(0);
+                            cellCache.remove(0);
+                        } else {
+                            convertView = new SharedPhotoVideoCell(mContext);
+                        }
+                        cell = (SharedPhotoVideoCell) convertView;
+                        cell.setDelegate(new SharedPhotoVideoCell.SharedPhotoVideoCellDelegate() {
+                            @Override
+                            public void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                onItemClick(index, cell, messageObject, a);
+                            }
+
+                            @Override
+                            public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a) {
+                                return onItemLongClick(messageObject, cell, a);
+                            }
+                        });
+                    } else {
+                        cell = (SharedPhotoVideoCell) convertView;
+                    }
+                    cell.setItemsCount(columnsCount);
+                    for (int a = 0; a < columnsCount; a++) {
+                        int index = (position - 1) * columnsCount + a;
+                        if (index < messageObjects.size()) {
+                            MessageObject messageObject = messageObjects.get(index);
+                            cell.setIsFirst(position == 1);
+                            cell.setItem(a, sharedMediaData[0].messages.indexOf(messageObject), messageObject);
+
+                            if (actionBar.isActionModeShowed()) {
+                                cell.setChecked(a, selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                            } else {
+                                cell.setChecked(a, false, !scrolling);
+                            }
+                        } else {
+                            cell.setItem(a, index, null);
+                        }
+                    }
+                    cell.requestLayout();
+                }
+            } else {
+                if (convertView == null) {
+                    convertView = new LoadingCell(mContext);
+                }
+            }
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            if (section < sharedMediaData[0].sections.size()) {
+                if (position == 0) {
+                    return 0;
+                } else {
+                    return 1;
+                }
+            }
+            return 2;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+    }
+
+    public class MediaSearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private ArrayList<MessageObject> searchResult = new ArrayList<>();
+        private Timer searchTimer;
+        protected ArrayList<MessageObject> globalSearch = new ArrayList<>();
+        private int reqId = 0;
+        private int lastReqId;
+        private int currentType;
+
+        public MediaSearchAdapter(Context context, int type) {
+            mContext = context;
+            currentType = type;
+        }
+
+        public void queryServerSearch(final String query, final int max_id, long did) {
+            int uid = (int) did;
+            if (uid == 0) {
+                return;
+            }
+            if (reqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                reqId = 0;
+            }
+            if (query == null || query.length() == 0) {
+                globalSearch.clear();
+                lastReqId = 0;
+                notifyDataSetChanged();
+                return;
+            }
+            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.offset = 0;
+            req.limit = 50;
+            req.max_id = max_id;
+            if (currentType == 1) {
+                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
+            } else if (currentType == 3) {
+                req.filter = new TLRPC.TL_inputMessagesFilterUrl();
+            } else if (currentType == 4) {
+                req.filter = new TLRPC.TL_inputMessagesFilterMusic();
+            }
+            req.q = query;
+            req.peer = MessagesController.getInputPeer(uid);
+            if (req.peer == null) {
+                return;
+            }
+            final int currentReqId = ++lastReqId;
+            reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    final ArrayList<MessageObject> messageObjects = new ArrayList<>();
+                    if (error == null) {
+                        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                        for (int a = 0; a < res.messages.size(); a++) {
+                            TLRPC.Message message = res.messages.get(a);
+                            if (max_id != 0 && message.id > max_id) {
+                                continue;
+                            }
+                            messageObjects.add(new MessageObject(message, null, false));
+                        }
+                    }
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (currentReqId == lastReqId) {
+                                globalSearch = messageObjects;
+                                notifyDataSetChanged();
+                            }
+                            reqId = 0;
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+        }
+
+        public void search(final String query) {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (query == null) {
+                searchResult.clear();
+                notifyDataSetChanged();
+            } else {
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        processSearch(query);
+                    }
+                }, 200, 300);
+            }
+        }
+
+        private void processSearch(final String query) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (!sharedMediaData[currentType].messages.isEmpty()) {
+                        if (currentType == 1 || currentType == 4) {
+                            MessageObject messageObject = sharedMediaData[currentType].messages.get(sharedMediaData[currentType].messages.size() - 1);
+                            queryServerSearch(query, messageObject.getId(), messageObject.getDialogId());
+                        } else if (currentType == 3) {
+                            queryServerSearch(query, 0, dialog_id);
+                        }
+                    }
+                    if (currentType == 1 || currentType == 4) {
+                        final ArrayList<MessageObject> copy = new ArrayList<>();
+                        copy.addAll(sharedMediaData[currentType].messages);
+                        Utilities.searchQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                String search1 = query.trim().toLowerCase();
+                                if (search1.length() == 0) {
+                                    updateSearchResults(new ArrayList<MessageObject>());
+                                    return;
+                                }
+                                String search2 = LocaleController.getInstance().getTranslitString(search1);
+                                if (search1.equals(search2) || search2.length() == 0) {
+                                    search2 = null;
+                                }
+                                String search[] = new String[1 + (search2 != null ? 1 : 0)];
+                                search[0] = search1;
+                                if (search2 != null) {
+                                    search[1] = search2;
+                                }
+
+                                ArrayList<MessageObject> resultArray = new ArrayList<>();
+
+                                for (int a = 0; a < copy.size(); a++) {
+                                    MessageObject messageObject = copy.get(a);
+                                    for (int b = 0; b < search.length; b++) {
+                                        String q = search[b];
+                                        String name = messageObject.getDocumentName();
+                                        if (name == null || name.length() == 0) {
+                                            continue;
+                                        }
+                                        name = name.toLowerCase();
+                                        if (name.contains(q)) {
+                                            resultArray.add(messageObject);
+                                            break;
+                                        }
+                                        if (currentType == 4) {
+                                            TLRPC.Document document;
+                                            if (messageObject.type == 0) {
+                                                document = messageObject.messageOwner.media.webpage.document;
+                                            } else {
+                                                document = messageObject.messageOwner.media.document;
+                                            }
+                                            boolean ok = false;
+                                            for (int c = 0; c < document.attributes.size(); c++) {
+                                                TLRPC.DocumentAttribute attribute = document.attributes.get(c);
+                                                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                                                    if (attribute.performer != null) {
+                                                        ok = attribute.performer.toLowerCase().contains(q);
+                                                    }
+                                                    if (!ok && attribute.title != null) {
+                                                        ok = attribute.title.toLowerCase().contains(q);
+                                                    }
+                                                    break;
+                                                }
+                                            }
+                                            if (ok) {
+                                                resultArray.add(messageObject);
+                                                break;
+                                            }
+                                        }
+                                    }
+                                }
+
+                                updateSearchResults(resultArray);
+                            }
+                        });
+                    }
+                }
+            });
+        }
+
+        private void updateSearchResults(final ArrayList<MessageObject> documents) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    searchResult = documents;
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != searchResult.size() + globalSearch.size();
+        }
+
+        @Override
+        public int getCount() {
+            int count = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (globalCount != 0) {
+                count += globalCount;
+            }
+            return count;
+        }
+
+        public boolean isGlobalSearch(int i) {
+            int localCount = searchResult.size();
+            int globalCount = globalSearch.size();
+            if (i >= 0 && i < localCount) {
+                return false;
+            } else if (i > localCount && i <= globalCount + localCount) {
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public MessageObject getItem(int i) {
+            if (i < searchResult.size()) {
+                return searchResult.get(i);
+            } else {
+                return globalSearch.get(i - searchResult.size());
+            }
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (currentType == 1 || currentType == 4) {
+                if (view == null) {
+                    view = new SharedDocumentCell(mContext);
+                }
+                SharedDocumentCell sharedDocumentCell = (SharedDocumentCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedDocumentCell.setDocument(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedDocumentCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedDocumentCell.setChecked(false, !scrolling);
+                }
+            } else if (currentType == 3) {
+                if (view == null) {
+                    view = new SharedLinkCell(mContext);
+                    ((SharedLinkCell) view).setDelegate(new SharedLinkCell.SharedLinkCellDelegate() {
+                        @Override
+                        public void needOpenWebView(TLRPC.WebPage webPage) {
+                            UpdateModel.this.openWebView(webPage);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return !actionBar.isActionModeShowed();
+                        }
+                    });
+                }
+                SharedLinkCell sharedLinkCell = (SharedLinkCell) view;
+                MessageObject messageObject = getItem(i);
+                sharedLinkCell.setLink(messageObject, i != getCount() - 1);
+                if (actionBar.isActionModeShowed()) {
+                    sharedLinkCell.setChecked(selectedFiles[messageObject.getDialogId() == dialog_id ? 0 : 1].containsKey(messageObject.getId()), !scrolling);
+                } else {
+                    sharedLinkCell.setChecked(false, !scrolling);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult.isEmpty() && globalSearch.isEmpty();
+        }
+    }
+}
