diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 907dafe74..d0a742de8 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -82,7 +82,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 222
-        versionName "1.4.10"
+        versionCode 230
+        versionName "1.4.13"
     }
 }
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 2deb2e199..b2e98731d 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.telegram.messenger">
+    package="org.telegram.messenger"
+    android:installLocation="auto">
 
     <supports-screens android:anyDensity="true"
                       android:smallScreens="true"
@@ -45,8 +46,7 @@
         android:theme="@style/Theme.TMessages.Start"
         android:name="org.telegram.ui.ApplicationLoader"
         android:hardwareAccelerated="true"
-        android:largeHeap="true"
-        android:installLocation="auto">
+        android:largeHeap="true">
 
         <activity
             android:name="org.telegram.ui.LaunchActivity"
diff --git a/TMessagesProj/src/main/assets/countries.txt b/TMessagesProj/src/main/assets/countries.txt
index cc4a2fbc4..c336d0620 100644
--- a/TMessagesProj/src/main/assets/countries.txt
+++ b/TMessagesProj/src/main/assets/countries.txt
@@ -70,7 +70,7 @@
 673;BN;Brunei Darussalam
 672;NF;Norfolk Island
 670;TL;Timor-Leste
-599;BQ;Bonaire, Sint Eustatius & Saba
+599;BQ;Bonaire, Sint Eustatius & Saba
 599;CW;CuraÃ§ao
 598;UY;Uruguay
 597;SR;Suriname
@@ -150,7 +150,7 @@
 246;IO;Diego Garcia
 245;GW;Guinea-Bissau
 244;AO;Angola
-243;CD;Congo (Dem. Rep.)
+243;CD;Congo (Dem. Rep.)
 242;CG;Congo (Rep.)
 241;GA;Gabon
 240;GQ;Equatorial Guinea
@@ -212,6 +212,7 @@
 45;DK;Denmark
 44;GB;United Kingdom
 43;AT;Austria
+42;YL;Y-land
 41;CH;Switzerland
 40;RO;Romania
 39;IT;Italy
@@ -223,9 +224,9 @@
 30;GR;Greece
 27;ZA;South Africa
 20;EG;Egypt
-7;KZ;Kazakhstan
-7;RU;Russian Federation
-1;PR;Puerto Rico
-1;DO;Dominican Rep.
-1;CA;Canada
+7;KZ;Kazakhstan
+7;RU;Russian Federation
+1;PR;Puerto Rico
+1;DO;Dominican Rep.
+1;CA;Canada
 1;US;USA
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 6efd387f0..ba0f5d848 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -149,7 +149,7 @@ public void cleanup() {
 
     public void checkAppAccount() {
         AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
-        Account[] accounts = am.getAccountsByType("org.telegram.messenger.account");
+        Account[] accounts = am.getAccountsByType("org.telegram.account");
         boolean recreateAccount = false;
         if (UserConfig.currentUser != null) {
             if (accounts.length == 1) {
@@ -173,8 +173,12 @@ public void checkAppAccount() {
                 am.removeAccount(c, null, null);
             }
             if (UserConfig.currentUser != null) {
-                currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.messenger.account");
-                am.addAccountExplicitly(currentAccount, "", null);
+                try {
+                    currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.account");
+                    am.addAccountExplicitly(currentAccount, "", null);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
             }
         }
     }
@@ -376,12 +380,12 @@ public void run() {
                 if (schedule) {
                     try {
                         AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
-                        Account[] accounts = am.getAccountsByType("org.telegram.messenger.account");
+                        Account[] accounts = am.getAccountsByType("org.telegram.account");
                         boolean recreateAccount = false;
                         if (UserConfig.currentUser != null) {
                             if (accounts.length != 1) {
                                 FileLog.e("tmessages", "detected account deletion!");
-                                currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.messenger.account");
+                                currentAccount = new Account(UserConfig.currentUser.phone, "org.telegram.account");
                                 am.addAccountExplicitly(currentAccount, "", null);
                                 performWriteContactsToPhoneBookInternal();
                             }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 9e3671c7a..afb2cad56 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -113,8 +113,7 @@ public VMRuntimeHack() {
             try {
                 Class cl = Class.forName("dalvik.system.VMRuntime");
                 Method getRt = cl.getMethod("getRuntime", new Class[0]);
-                Object obj = new Object[0];
-                runtime = getRt.invoke(null, obj);
+                runtime = getRt.invoke(null, new Object[0]);
                 trackAllocation = cl.getMethod("trackExternalAllocation", new Class[] {long.class});
                 trackFree = cl.getMethod("trackExternalFree", new Class[] {long.class});
                 success = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 8219abaee..515b303b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -10,6 +10,8 @@
 
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.database.ContentObserver;
+import android.database.Cursor;
 import android.media.AudioFormat;
 import android.media.AudioManager;
 import android.media.AudioRecord;
@@ -19,7 +21,9 @@
 import android.media.audiofx.AutomaticGainControl;
 import android.net.Uri;
 import android.os.Environment;
+import android.os.ParcelFileDescriptor;
 import android.os.Vibrator;
+import android.provider.MediaStore;
 import android.view.View;
 
 import org.telegram.objects.MessageObject;
@@ -35,6 +39,7 @@
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.Semaphore;
@@ -80,6 +85,7 @@ public AudioBuffer(int capacity) {
     public final static int recordStarted = 50004;
     public final static int recordStartError = 50005;
     public final static int recordStopped = 50006;
+    public final static int screenshotTook = 50007;
 
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>>();
     private HashMap<Integer, String> observersByTag = new HashMap<Integer, String>();
@@ -188,6 +194,72 @@ public void run() {
         }
     };
 
+    private class InternalObserver extends ContentObserver {
+        public InternalObserver() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            processMediaObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI);
+        }
+    }
+
+    private class ExternalObserver extends ContentObserver {
+        public ExternalObserver() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            processMediaObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+        }
+    }
+
+    private ExternalObserver externalObserver = null;
+    private InternalObserver internalObserver = null;
+    private long lastSecretChatEnterTime = 0;
+    private long lastSecretChatLeaveTime = 0;
+    private long lastMediaCheckTime = 0;
+    private TLRPC.EncryptedChat lastSecretChat = null;
+    private ArrayList<Long> lastSecretChatVisibleMessages = null;
+    private int startObserverToken = 0;
+    private StopMediaObserverRunnable stopMediaObserverRunnable = null;
+    private final class StopMediaObserverRunnable implements Runnable {
+        public int currentObserverToken = 0;
+
+        @Override
+        public void run() {
+            if (currentObserverToken == startObserverToken) {
+                try {
+                    if (internalObserver != null) {
+                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(internalObserver);
+                        internalObserver = null;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                try {
+                    if (externalObserver != null) {
+                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(externalObserver);
+                        externalObserver = null;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+    private String[] mediaProjections = new String[] {
+            MediaStore.Images.ImageColumns.DATA,
+            MediaStore.Images.ImageColumns.DISPLAY_NAME,
+            MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
+            MediaStore.Images.ImageColumns.DATE_TAKEN,
+            MediaStore.Images.ImageColumns.TITLE
+    };
+
     private static volatile MediaController Instance = null;
     public static MediaController getInstance() {
         MediaController localInstance = Instance;
@@ -290,6 +362,165 @@ public void cleanup() {
         currentGifMessageObject = null;
     }
 
+    public void startMediaObserver() {
+        if (android.os.Build.VERSION.SDK_INT > 0) { //disable while it's not perferct
+            return;
+        }
+        ApplicationLoader.applicationHandler.removeCallbacks(stopMediaObserverRunnable);
+        startObserverToken++;
+        try {
+            if (internalObserver == null) {
+                ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, false, externalObserver = new ExternalObserver());
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        try {
+            if (externalObserver == null) {
+                ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI, false, internalObserver = new InternalObserver());
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public void stopMediaObserver() {
+        if (android.os.Build.VERSION.SDK_INT < 10) { //disable while it's not perferct
+            return;
+        }
+        if (stopMediaObserverRunnable == null) {
+            stopMediaObserverRunnable = new StopMediaObserverRunnable();
+        }
+        stopMediaObserverRunnable.currentObserverToken = startObserverToken;
+        ApplicationLoader.applicationHandler.postDelayed(stopMediaObserverRunnable, 5000);
+    }
+
+    public void processMediaObserver(Uri uri) {
+        try {
+            Cursor cursor = ApplicationLoader.applicationContext.getContentResolver().query(uri, mediaProjections, null, null, "date_added DESC LIMIT 1");
+            final ArrayList<Long> screenshotDates = new ArrayList<Long>();
+            if (cursor != null) {
+                while (cursor.moveToNext()) {
+                    String val = "";
+                    String data = cursor.getString(0);
+                    String display_name = cursor.getString(1);
+                    String album_name = cursor.getString(2);
+                    String title = cursor.getString(4);
+                    long date = cursor.getLong(3);
+                    if (data != null && data.toLowerCase().contains("screenshot") ||
+                            display_name != null && display_name.toLowerCase().contains("screenshot") ||
+                            album_name != null && album_name.toLowerCase().contains("screenshot") ||
+                            title != null && title.toLowerCase().contains("screenshot")) {
+                        /*BitmapRegionDecoder bitmapRegionDecoder = null;
+                        boolean added = false;
+                        try {
+                            int waitCount = 0;
+                            while (waitCount < 5 && bitmapRegionDecoder == null) {
+                                try {
+                                    bitmapRegionDecoder = BitmapRegionDecoder.newInstance(data, true);
+                                    if (bitmapRegionDecoder != null) {
+                                        break;
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                                Thread.sleep(1000);
+                            }
+                            if (bitmapRegionDecoder != null) {
+                                Bitmap bitmap = bitmapRegionDecoder.decodeRegion(new Rect(0, 0, Utilities.dp(44), Utilities.dp(44)), null);
+                                int w = bitmap.getWidth();
+                                int h = bitmap.getHeight();
+                                for (int y = 0; y < h; y++) {
+                                    int rowCount = 0;
+                                    for (int x = 0; x < w; x++) {
+                                        int px = bitmap.getPixel(x, y);
+                                        if (px == 0xffffffff) {
+                                            rowCount++;
+                                        } else {
+                                            rowCount = 0;
+                                        }
+                                        if (rowCount > 8) {
+                                            break;
+                                        }
+                                    }
+                                    if (rowCount > 8) {
+                                        screenshotDates.add(date);
+                                        added = true;
+                                        break;
+                                    }
+                                }
+                                bitmapRegionDecoder.recycle();
+                                try {
+                                    if (bitmap != null) {
+                                        bitmap.recycle();
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                            try {
+                                if (bitmapRegionDecoder != null) {
+                                    bitmapRegionDecoder.recycle();
+                                }
+                            } catch (Exception e2) {
+                                FileLog.e("tmessages", e2);
+                            }
+                            if (!added) {
+                                screenshotDates.add(date);
+                            }
+                        }*/
+                        screenshotDates.add(date);
+                    }
+                    FileLog.e("tmessages", "screenshot!");
+                }
+                cursor.close();
+            }
+            if (!screenshotDates.isEmpty()) {
+                Utilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(screenshotTook);
+                        checkScreenshots(screenshotDates);
+                    }
+                });
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private void checkScreenshots(ArrayList<Long> dates) {
+        if (dates == null || dates.isEmpty() || lastSecretChatEnterTime == 0 || lastSecretChat == null || !(lastSecretChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
+        long dt = 2000;
+        boolean send = false;
+        for (Long date : dates) {
+            if (lastMediaCheckTime != 0 && date <= lastMediaCheckTime) {
+                continue;
+            }
+
+            if (date >= lastSecretChatEnterTime) {
+                if (lastSecretChatLeaveTime == 0 || date <= lastSecretChatLeaveTime + dt) {
+                    lastMediaCheckTime = Math.max(lastMediaCheckTime, date);
+                    send = true;
+                }
+            }
+        }
+        if (send) {
+            MessagesController.getInstance().sendScreenshotMessage(lastSecretChat, lastSecretChatVisibleMessages);
+        }
+    }
+
+    public void setLastEncryptedChatParams(long enterTime, long leaveTime, TLRPC.EncryptedChat encryptedChat, ArrayList<Long> visibleMessages) {
+        lastSecretChatEnterTime = enterTime;
+        lastSecretChatLeaveTime = leaveTime;
+        lastSecretChat = encryptedChat;
+        lastSecretChatVisibleMessages = visibleMessages;
+    }
+
     public int generateObserverTag() {
         return lastTag++;
     }
@@ -1159,7 +1390,8 @@ public GifDrawable getGifDrawable(ChatMediaCell cell, boolean create) {
                 if (f.length() > 0) {
                     cacheFile = f;
                 }
-            } else {
+            }
+            if (cacheFile == null) {
                 cacheFile = new File(Utilities.getCacheDir(), messageObject.getFileName());
             }
             try {
@@ -1194,4 +1426,81 @@ public void clearGifDrawable(ChatMediaCell cell) {
             currentGifMessageObject = null;
         }
     }
+
+    public static boolean isGif(Uri uri) {
+        ParcelFileDescriptor parcelFD = null;
+        FileInputStream input = null;
+        try {
+            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+            input = new FileInputStream(parcelFD.getFileDescriptor());
+            if (input.getChannel().size() > 3) {
+                byte[] header = new byte[3];
+                input.read(header, 0, 3);
+                String str = new String(header);
+                if (str != null && str.equalsIgnoreCase("gif")) {
+                    return true;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            try {
+                if (parcelFD != null) {
+                    parcelFD.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (input != null) {
+                    input.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+        }
+        return false;
+    }
+
+    public static String copyDocumentToCache(Uri uri) {
+        ParcelFileDescriptor parcelFD = null;
+        FileInputStream input = null;
+        FileOutputStream output = null;
+        try {
+            int id = UserConfig.lastLocalId;
+            UserConfig.lastLocalId--;
+            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+            input = new FileInputStream(parcelFD.getFileDescriptor());
+            File f = new File(Utilities.getCacheDir(), String.format(Locale.US, "%d.gif", id));
+            output = new FileOutputStream(f);
+            input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
+            UserConfig.saveConfig(false);
+            return f.getAbsolutePath();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            try {
+                if (parcelFD != null) {
+                    parcelFD.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (input != null) {
+                    input.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (output != null) {
+                    output.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+        }
+        return null;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 56dd2f724..43c7e6818 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -403,7 +403,7 @@ public void run() {
     public void deleteAllAppAccounts() {
         try {
             AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
-            Account[] accounts = am.getAccountsByType("org.telegram.messenger.account");
+            Account[] accounts = am.getAccountsByType("org.telegram.account");
             for (Account c : accounts) {
                 am.removeAccount(c, null, null);
             }
@@ -1620,6 +1620,9 @@ private void processPendingEncMessages() {
     }
 
     private void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.EncryptedChat encryptedChat) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = getNextRandomId();
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
@@ -1627,9 +1630,13 @@ private void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.Encrypt
         reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
         reqSend.action.random_ids = random_ids;
         performSendEncryptedRequest(reqSend, null, encryptedChat, null);
+
     }
 
     private void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = getNextRandomId();
         reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
@@ -1639,6 +1646,9 @@ private void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
     }
 
     public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
         TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
 
         newMsg.action = new TLRPC.TL_messageActionTTLChange();
@@ -1679,6 +1689,54 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
         performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
     }
 
+    public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids) {
+        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
+            return;
+        }
+
+        TLRPC.TL_decryptedMessageActionScreenshotMessages action = new TLRPC.TL_decryptedMessageActionScreenshotMessages();
+        action.random_ids = random_ids;
+
+        TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
+
+        newMsg.action = new TLRPC.TL_messageEcryptedAction();
+        newMsg.action.encryptedAction = action;
+
+        newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
+        newMsg.from_id = UserConfig.clientUserId;
+        newMsg.unread = true;
+        newMsg.dialog_id = ((long)encryptedChat.id) << 32;
+        newMsg.to_id = new TLRPC.TL_peerUser();
+        if (encryptedChat.participant_id == UserConfig.clientUserId) {
+            newMsg.to_id.user_id = encryptedChat.admin_id;
+        } else {
+            newMsg.to_id.user_id = encryptedChat.participant_id;
+        }
+        newMsg.out = true;
+        newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
+        newMsg.random_id = getNextRandomId();
+        UserConfig.saveConfig(false);
+        final MessageObject newMsgObj = new MessageObject(newMsg, users);
+        newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENDING;
+
+        final ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
+        objArr.add(newMsgObj);
+        ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
+        arr.add(newMsg);
+        MessagesStorage.getInstance().putMessages(arr, false, true);
+        updateInterfaceWithMessages(newMsg.dialog_id, objArr);
+        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+
+        sendingMessages.put(newMsg.id, newMsgObj);
+
+        TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
+        reqSend.random_id = newMsg.random_id;
+        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
+        random.nextBytes(reqSend.random_bytes);
+        reqSend.action = action;
+        performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
+    }
+
     private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.FileLocation location, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, long peer) {
 // FAD Code starts ---------------------------------------
         // If a message came as an object change it back as normal
@@ -1941,7 +1999,11 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media.last_name = user.last_name;
                     performSendMessageRequest(reqSend, newMsgObj);
                 } else if (type == 7) {
-                    reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                    if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                    } else {
+                        reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                    }
                     reqSend.media.mime_type = document.mime_type;
                     reqSend.media.file_name = document.file_name;
                     DelayedMessage delayedMessage = new DelayedMessage();
@@ -2136,8 +2198,22 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                         size2.location = size.location;
                     }
                 }
-                sentMessage.message = newMsg.message;
-                sentMessage.attachPath = newMsg.attachPath;
+                if (newMsg.attachPath != null && newMsg.attachPath.startsWith(Utilities.getCacheDir().getAbsolutePath())) {
+                    File cacheFile = new File(newMsg.attachPath);
+                    File cacheFile2 = new File(Utilities.getCacheDir(), MessageObject.getAttachFileName(sentMessage.media.document));
+                    boolean result = cacheFile.renameTo(cacheFile2);
+                    if (result) {
+                        newMsg.attachPath = null;
+                        newMsg.media.document.dc_id = sentMessage.media.document.dc_id;
+                        newMsg.media.document.id = sentMessage.media.document.id;
+                    } else {
+                        sentMessage.attachPath = newMsg.attachPath;
+                        sentMessage.message = newMsg.message;
+                    }
+                } else {
+                    sentMessage.attachPath = newMsg.attachPath;
+                    sentMessage.message = newMsg.message;
+                }
             } else if (sentMessage.media instanceof TLRPC.TL_messageMediaAudio && sentMessage.media.audio != null && newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
                 sentMessage.message = newMsg.message;
                 sentMessage.attachPath = newMsg.attachPath;
@@ -2207,6 +2283,13 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 newMsg.media.document.path = document.path;
                 newMsg.media.document.thumb = document.thumb;
                 newMsg.media.document.dc_id = file.dc_id;
+
+                if (document.path != null && document.path.startsWith(Utilities.getCacheDir().getAbsolutePath())) {
+                    File cacheFile = new File(document.path);
+                    File cacheFile2 = new File(Utilities.getCacheDir(), MessageObject.getAttachFileName(newMsg.media.document));
+                    cacheFile.renameTo(cacheFile2);
+                }
+
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
                 MessagesStorage.getInstance().putMessages(arr, false, true);
@@ -3447,7 +3530,7 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
             if (missingData) {
                 needGetDiff = true;
             } else {
-                if (MessagesStorage.lastSeqValue + 1 == updates.seq && !gettingDifference) {
+                if (MessagesStorage.lastSeqValue + 1 == updates.seq) {
                     TLRPC.TL_message message = new TLRPC.TL_message();
                     message.from_id = updates.from_id;
                     message.id = updates.id;
@@ -3509,7 +3592,7 @@ public void run() {
             if (missingData) {
                 needGetDiff = true;
             } else {
-                if (MessagesStorage.lastSeqValue + 1 == updates.seq && !gettingDifference) {
+                if (MessagesStorage.lastSeqValue + 1 == updates.seq) {
                     TLRPC.TL_message message = new TLRPC.TL_message();
                     message.from_id = updates.from_id;
                     message.id = updates.id;
@@ -3568,7 +3651,7 @@ public void run() {
                 }
             }
         } else if (updates instanceof TLRPC.TL_updatesCombined) {
-            if ((MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start) && !gettingDifference) {
+            if (MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start) {
                 MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
                 int lastPtsValue = MessagesStorage.lastPtsValue;
                 int lastQtsValue = MessagesStorage.lastQtsValue;
@@ -3598,7 +3681,7 @@ public void run() {
                 }
             }
         } else if (updates instanceof TLRPC.TL_updates) {
-            if ((MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue) && !gettingDifference) {
+            if (MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue) {
                 MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
                 int lastPtsValue = MessagesStorage.lastPtsValue;
                 int lastQtsValue = MessagesStorage.lastQtsValue;
@@ -4606,6 +4689,7 @@ private void showInAppNotification(MessageObject messageObject) {
             notification.ledOnMS = 1000;
             notification.ledOffMS = 1000;
             notification.flags |= Notification.FLAG_SHOW_LIGHTS;
+            notification.defaults = 0;
             try {
                 mNotificationManager.notify(1, notification);
                 if (preferences.getBoolean("EnablePebbleNotifications", false)) {
@@ -4891,10 +4975,17 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                     return newMessage;
                 } else if (object instanceof TLRPC.TL_decryptedMessageService) {
                     TLRPC.TL_decryptedMessageService serviceMessage = (TLRPC.TL_decryptedMessageService)object;
-                    if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                    if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL || serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
                         TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
-                        newMessage.action = new TLRPC.TL_messageActionTTLChange();
-                        newMessage.action.ttl = chat.ttl = serviceMessage.action.ttl_seconds;
+                        if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                            newMessage.action = new TLRPC.TL_messageActionTTLChange();
+                            newMessage.action.ttl = chat.ttl = serviceMessage.action.ttl_seconds;
+                        } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                            newMessage.action = new TLRPC.TL_messageEcryptedAction();
+                            newMessage.action.encryptedAction = serviceMessage.action;
+                        } else {
+                            return null;
+                        }
                         newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
                         UserConfig.saveConfig(false);
                         newMessage.unread = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
index 0e2afdd4e..0785977d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
@@ -9,6 +9,7 @@
 package org.telegram.messenger;
 
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
 import android.os.Build;
 
 import java.io.File;
@@ -29,17 +30,36 @@
 
     private static volatile boolean nativeLoaded = false;
 
+    private static File getNativeLibraryDir(Context context) {
+        File f = null;
+        if (context != null) {
+            try {
+                f = new File((String)ApplicationInfo.class.getField("nativeLibraryDir").get(context.getApplicationInfo()));
+            } catch (Throwable th) {
+                th.printStackTrace();
+            }
+        }
+        if (f == null) {
+            f = new File(context.getApplicationInfo().dataDir, "lib");
+        }
+        if (f != null && f.isDirectory()) {
+            return f;
+        }
+        return null;
+    }
+
+
     public static synchronized void initNativeLibs(Context context) {
         if (nativeLoaded) {
             return;
         }
 
-        if (Build.VERSION.SDK_INT >= 9) {
-            try {
-                String folder = null;
-                long libSize = 0;
-                long libSize2 = 0;
+        try {
+            String folder = null;
+            long libSize = 0;
+            long libSize2 = 0;
 
+            try {
                 if (Build.CPU_ABI.equalsIgnoreCase("armeabi-v7a")) {
                     folder = "armeabi-v7a";
                     libSize = sizes[1];
@@ -55,85 +75,91 @@ public static synchronized void initNativeLibs(Context context) {
                     folder = "mips";
                     libSize = sizes[3];
                 } else {
+                    folder = "armeabi";
+                    libSize = sizes[0];
+                    libSize2 = sizes[1];
+                    FileLog.e("tmessages", "Unsupported arch: " + Build.CPU_ABI);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                folder = "armeabi";
+                libSize = sizes[0];
+                libSize2 = sizes[1];
+            }
+
+
+            File destFile = getNativeLibraryDir(context);
+            if (destFile != null && destFile.exists() && (destFile.length() == libSize || libSize2 != 0 && destFile.length() == libSize2)) {
+                FileLog.d("tmessages", "Load normal lib");
+                try {
                     System.loadLibrary("tmessages");
                     nativeLoaded = true;
-                    FileLog.e("tmessages", "Unsupported arch: " + Build.CPU_ABI);
                     return;
+                } catch (Exception e) {
+                    e.printStackTrace();
                 }
+            }
 
-                File destFile = new File(context.getApplicationInfo().nativeLibraryDir + "/libtmessages.so");
-                if (destFile.exists() && (destFile.length() == libSize || libSize2 != 0 && destFile.length() == libSize2)) {
-                    FileLog.d("tmessages", "Load normal lib");
+            File destLocalFile = new File(context.getFilesDir().getAbsolutePath() + "/libtmessages.so");
+            if (destLocalFile.exists()) {
+                if (destLocalFile.length() == libSize) {
                     try {
-                        System.loadLibrary("tmessages");
+                        FileLog.d("tmessages", "Load local lib");
+                        System.load(destLocalFile.getAbsolutePath());
                         nativeLoaded = true;
                         return;
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
+                } else {
+                    destLocalFile.delete();
                 }
+            }
 
-                File destLocalFile = new File(context.getFilesDir().getAbsolutePath() + "/libtmessages.so");
-                if (destLocalFile.exists()) {
-                    if (destLocalFile.length() == libSize) {
-                        try {
-                            FileLog.d("tmessages", "Load local lib");
-                            System.load(destLocalFile.getAbsolutePath());
-                            nativeLoaded = true;
-                            return;
-                        } catch (Exception e) {
-                            e.printStackTrace();
-                        }
-                    } else {
-                        destLocalFile.delete();
-                    }
-                }
-
-                FileLog.e("tmessages", "Library not found, arch = " + folder);
+            FileLog.e("tmessages", "Library not found, arch = " + folder);
 
-                ZipFile zipFile = null;
-                InputStream stream = null;
-                try {
-                    zipFile = new ZipFile(context.getApplicationInfo().sourceDir);
-                    ZipEntry entry = zipFile.getEntry("lib/" + folder + "/libtmessages.so");
-                    if (entry == null) {
-                        throw new Exception("Unable to find file in apk:" + "lib/" + folder + "/libtmessages.so");
-                    }
-                    stream = zipFile.getInputStream(entry);
-
-                    OutputStream out = new FileOutputStream(destLocalFile);
-                    byte[] buf = new byte[4096];
-                    int len;
-                    while ((len = stream.read(buf)) > 0) {
-                        Thread.yield();
-                        out.write(buf, 0, len);
-                    }
-                    out.close();
+            ZipFile zipFile = null;
+            InputStream stream = null;
+            try {
+                zipFile = new ZipFile(context.getApplicationInfo().sourceDir);
+                ZipEntry entry = zipFile.getEntry("lib/" + folder + "/libtmessages.so");
+                if (entry == null) {
+                    throw new Exception("Unable to find file in apk:" + "lib/" + folder + "/libtmessages.so");
+                }
+                stream = zipFile.getInputStream(entry);
+
+                OutputStream out = new FileOutputStream(destLocalFile);
+                byte[] buf = new byte[4096];
+                int len;
+                while ((len = stream.read(buf)) > 0) {
+                    Thread.yield();
+                    out.write(buf, 0, len);
+                }
+                out.close();
 
-                    System.load(destLocalFile.getAbsolutePath());
-                    nativeLoaded = true;
-                    return;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (stream != null) {
-                        try {
-                            stream.close();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
+                System.load(destLocalFile.getAbsolutePath());
+                nativeLoaded = true;
+                return;
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            } finally {
+                if (stream != null) {
+                    try {
+                        stream.close();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
-                    if (zipFile != null) {
-                        try {
-                            zipFile.close();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
+                }
+                if (zipFile != null) {
+                    try {
+                        zipFile.close();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
                 }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
             }
+        } catch (Throwable e) {
+            e.printStackTrace();
         }
 
         System.loadLibrary("tmessages");
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index 40580e068..2e1895e5c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -410,6 +410,8 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_help_getSupport.constructor, TLRPC.TL_help_getSupport.class);
         classStore.put(TLRPC.TL_decryptedMessageActionDeleteMessages.constructor, TLRPC.TL_decryptedMessageActionDeleteMessages.class);
         classStore.put(TLRPC.TL_decryptedMessageActionFlushHistory.constructor, TLRPC.TL_decryptedMessageActionFlushHistory.class);
+        classStore.put(TLRPC.TL_decryptedMessageActionScreenshotMessages.constructor, TLRPC.TL_decryptedMessageActionScreenshotMessages.class);
+        classStore.put(TLRPC.TL_messageEcryptedAction.constructor, TLRPC.TL_messageEcryptedAction.class);
 
         classStore.put(TLRPC.TL_msg_container.constructor, TLRPC.TL_msg_container.class);
         classStore.put(TLRPC.TL_fileEncryptedLocation.constructor, TLRPC.TL_fileEncryptedLocation.class);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index c624ee7f0..e1fa97689 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -8818,6 +8818,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public ArrayList<Integer> users = new ArrayList<Integer>();
         public String address;
         public int ttl;
+        public DecryptedMessageAction encryptedAction;
     }
 
     public static class TL_messageActionTTLChange extends MessageAction {
@@ -9110,6 +9111,52 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_decryptedMessageActionScreenshotMessages extends DecryptedMessageAction {
+        public static int constructor = 0x954bd30;
+
+
+        public void readParams(AbsSerializedData stream) {
+            boolean[] error = new boolean[1];
+            stream.readInt32(error);
+            if (error[0]) {
+                return;
+            }
+            int count = stream.readInt32(error);
+            if (error[0]) {
+                return;
+            }
+            for (long a = 0; a < count; a++) {
+                random_ids.add(stream.readInt64(error));
+                if (error[0]) {
+                    return;
+                }
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = random_ids.size();
+            stream.writeInt32(count);
+            for (Long value : random_ids) {
+                stream.writeInt64(value);
+            }
+        }
+    }
+
+    public static class TL_messageEcryptedAction extends MessageAction {
+        public static int constructor = 0x555555F7;
+
+        public void readParams(AbsSerializedData stream) {
+            encryptedAction = (DecryptedMessageAction)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            encryptedAction.serializeToStream(stream);
+        }
+    }
+
     public static class TL_upload_saveBigFilePart extends TLObject {
         public static int constructor = 0xde7b673d;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index 473b91d00..117a4c41b 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -218,6 +218,18 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     } else {
                         messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
                     }
+                } else if (message.action instanceof TLRPC.TL_messageEcryptedAction) {
+                    if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                        if (isFromMe()) {
+                            messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
+                        } else {
+                            if (fromUser != null) {
+                                messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", fromUser.first_name);
+                            } else {
+                                messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", "");
+                            }
+                        }
+                    }
                 }
             }
         } else if (message.media != null && !(message.media instanceof TLRPC.TL_messageMediaEmpty)) {
@@ -376,6 +388,9 @@ public static String getAttachFileName(TLObject attach) {
             }
         } else if (attach instanceof TLRPC.PhotoSize) {
             TLRPC.PhotoSize photo = (TLRPC.PhotoSize)attach;
+            if (photo.location == null) {
+                return "";
+            }
             return photo.location.volume_id + "_" + photo.location.local_id + ".jpg";
         } else if (attach instanceof TLRPC.Audio) {
             TLRPC.Audio audio = (TLRPC.Audio)attach;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 5614b3e63..a7f92f5fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -53,6 +53,7 @@
     private int photoWidth;
     private int photoHeight;
     private PhotoObject currentPhotoObject;
+    private String currentUrl;
     private String currentPhotoFilter;
     private ImageReceiver photoImage;
     private ProgressView progressView;
@@ -274,19 +275,33 @@ private void didPressedButton() {
         }
     }
 
-    @Override
-    protected boolean isUserDataChanged() {
-        return currentPhotoObject == null || super.isUserDataChanged();
+    private boolean isPhotoDataChanged(MessageObject object) {
+        if (object.type == 4) {
+            if (currentUrl == null) {
+                return true;
+            }
+            double lat = object.messageOwner.media.geo.lat;
+            double lon = object.messageOwner.media.geo._long;
+            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(Utilities.density)), lat, lon);
+            if (!url.equals(currentUrl)) {
+                return true;
+            }
+        } else if (currentPhotoObject == null) {
+            return true;
+        }
+        return false;
     }
 
     @Override
     public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
+        if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || isUserDataChanged()) {
             super.setMessageObject(messageObject);
 
             progressVisible = false;
             buttonState = -1;
             gifDrawable = null;
+            currentPhotoObject = null;
+            currentUrl = null;
 
             if (messageObject.type == 8) {
                 gifDrawable = MediaController.getInstance().getGifDrawable(this, false);
@@ -321,8 +336,8 @@ public void setMessageObject(MessageObject messageObject) {
 
                 double lat = messageObject.messageOwner.media.geo.lat;
                 double lon = messageObject.messageOwner.media.geo._long;
-                String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(Utilities.density)), lat, lon);
-                photoImage.setImage(url, null, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
+                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(Utilities.density)), lat, lon);
+                photoImage.setImage(currentUrl, null, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
             } else {
                 photoWidth = (int) (Math.min(Utilities.displaySize.x, Utilities.displaySize.y) * 0.7f);
                 photoHeight = photoWidth + Utilities.dp(100);
@@ -420,7 +435,8 @@ public void updateButtonState() {
                     fileName = currentMessageObject.messageOwner.attachPath;
                     cacheFile = f;
                 }
-            } else {
+            }
+            if (fileName == null) {
                 fileName = currentMessageObject.getFileName();
                 cacheFile = new File(Utilities.getCacheDir(), fileName);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 478a155b3..9396d1aba 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -136,6 +136,7 @@ public void setMessageObject(MessageObject messageObject) {
                 drawName = true;
             } else {
                 maxWidth = Utilities.displaySize.x - Utilities.dp(80);
+                drawName = false;
             }
 
             backgroundWidth = maxWidth;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 43449635c..bec75a088 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -196,6 +196,9 @@
 
     private CharSequence lastPrintString;
 
+    private long chatEnterTime = 0;
+    private long chatLeaveTime = 0;
+
     private final static int copy = 1;
     private final static int forward = 2;
     private final static int delete = 3;
@@ -268,7 +271,7 @@ public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
                         random_ids = new ArrayList<Long>();
                         for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
                             MessageObject msg = entry.getValue();
-                            if (msg.messageOwner.random_id != 0) {
+                            if (msg.messageOwner.random_id != 0 && msg.type != 10) {
                                 random_ids.add(msg.messageOwner.random_id);
                             }
                         }
@@ -401,6 +404,7 @@ public void run() {
             dialog_id = ((long)encId) << 32;
             maxMessageId = Integer.MIN_VALUE;
             minMessageId = Integer.MAX_VALUE;
+            MediaController.getInstance().startMediaObserver();
         } else {
             return false;
         }
@@ -429,6 +433,7 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, MediaController.recordStarted);
         NotificationCenter.getInstance().addObserver(this, MediaController.recordStartError);
         NotificationCenter.getInstance().addObserver(this, MediaController.recordStopped);
+        NotificationCenter.getInstance().addObserver(this, MediaController.screenshotTook);
         NotificationCenter.getInstance().addObserver(this, 997);
 
         loading = true;
@@ -478,7 +483,11 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, MediaController.recordStarted);
         NotificationCenter.getInstance().removeObserver(this, MediaController.recordStartError);
         NotificationCenter.getInstance().removeObserver(this, MediaController.recordStopped);
+        NotificationCenter.getInstance().removeObserver(this, MediaController.screenshotTook);
         NotificationCenter.getInstance().removeObserver(this, 997);
+        if (currentEncryptedChat != null) {
+            MediaController.getInstance().stopMediaObserver();
+        }
         if (sizeNotifierRelativeLayout != null) {
             sizeNotifierRelativeLayout.delegate = null;
             sizeNotifierRelativeLayout = null;
@@ -1273,7 +1282,7 @@ private int getMessageType(MessageObject messageObject) {
                             if (canSave) {
                                 if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
                                     String mime = messageObject.messageOwner.media.document.mime_type;
-                                    if (mime != null && mime.equals("text/xml")) {
+                                    if (mime != null && mime.endsWith("/xml")) {
                                         return 5;
                                     }
                                 }
@@ -1317,7 +1326,7 @@ private int getMessageType(MessageObject messageObject) {
                         if (canSave) {
                             if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
                                 String mime = messageObject.messageOwner.media.document.mime_type;
-                                if (mime != null && mime.equals("text/xml")) {
+                                if (mime != null && mime.endsWith("text/xml")) {
                                     return 5;
                                 }
                             }
@@ -1469,13 +1478,21 @@ private void checkAndUpdateAvatar() {
         TLRPC.FileLocation newPhoto = null;
         int placeHolderId = 0;
         if (currentUser != null) {
-            currentUser = MessagesController.getInstance().users.get(currentUser.id);
+            TLRPC.User user = MessagesController.getInstance().users.get(currentUser.id);
+            if (user == null) {
+                return;
+            }
+            currentUser = user;
             if (currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             }
             placeHolderId = Utilities.getUserAvatarForId(currentUser.id);
         } else if (currentChat != null) {
-            currentChat = MessagesController.getInstance().chats.get(currentChat.id);
+            TLRPC.Chat chat = MessagesController.getInstance().chats.get(currentChat.id);
+            if (chat == null) {
+                return;
+            }
+            currentChat = chat;
             if (currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
             }
@@ -1549,7 +1566,18 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     return;
                 }
                 String tempPath = Utilities.getPath(data.getData());
+
+                boolean isGif = false;
                 if (tempPath != null && tempPath.endsWith(".gif")) {
+                    isGif = true;
+                } else if (tempPath == null) {
+                    isGif = MediaController.isGif(data.getData());
+                    if (isGif) {
+                        tempPath = MediaController.copyDocumentToCache(data.getData());
+                    }
+                }
+
+                if (tempPath != null && isGif) {
                     processSendingDocument(tempPath);
                 } else {
                     processSendingPhoto(null, data.getData());
@@ -2414,6 +2442,8 @@ public void run() {
                 recordingAudio = true;
                 updateAudioRecordIntefrace();
             }
+        } else if (id == MediaController.screenshotTook) {
+            updateInformationForScreenshotDetector();
         }
     }
 
@@ -2645,10 +2675,10 @@ public void run() {
                 }
             }, 400);
         }
-
-//        if (currentEncryptedChat != null && parentActivity != null) {
-//            parentActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
-//        }
+        if (currentEncryptedChat != null) {
+            chatEnterTime = System.currentTimeMillis();
+            chatLeaveTime = 0;
+        }
     }
 
     private void setTypingAnimation(boolean start) {
@@ -2696,9 +2726,35 @@ public void onPause() {
             editor.commit();
         }
 
-//        if (currentEncryptedChat != null && parentActivity != null) {
-//            parentActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
-//        }
+        if (currentEncryptedChat != null) {
+            chatLeaveTime = System.currentTimeMillis();
+            updateInformationForScreenshotDetector();
+        }
+    }
+
+    private void updateInformationForScreenshotDetector() {
+        ArrayList<Long> visibleMessages = new ArrayList<Long>();
+        if (chatListView != null) {
+            int count = chatListView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View view = chatListView.getChildAt(a);
+                MessageObject object = null;
+                if (view instanceof ChatBaseCell) {
+                    ChatBaseCell cell = (ChatBaseCell) view;
+                    object = cell.getMessageObject();
+                } else {
+                    Object tag = view.getTag();
+                    if (tag instanceof ChatListRowHolderEx) {
+                        ChatListRowHolderEx holder = (ChatListRowHolderEx) tag;
+                        object = holder.message;
+                    }
+                }
+                if (object != null && object.messageOwner.id < 0 && object.messageOwner.random_id != 0) {
+                    visibleMessages.add(object.messageOwner.random_id);
+                }
+            }
+        }
+        MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
     }
 
     private void fixLayout() {
@@ -3165,7 +3221,7 @@ private void processSelectedOption(int option) {
                 ArrayList<Integer> arr = new ArrayList<Integer>();
                 arr.add(selectedObject.messageOwner.id);
                 ArrayList<Long> random_ids = null;
-                if (currentEncryptedChat != null && selectedObject.messageOwner.random_id != 0) {
+                if (currentEncryptedChat != null && selectedObject.messageOwner.random_id != 0 && selectedObject.type != 10) {
                     random_ids = new ArrayList<Long>();
                     random_ids.add(selectedObject.messageOwner.random_id);
                 }
@@ -3178,7 +3234,7 @@ private void processSelectedOption(int option) {
                 ids.add(selectedObject.messageOwner.id);
                 removeUnreadPlane(true);
                 ArrayList<Long> random_ids = null;
-                if (currentEncryptedChat != null && selectedObject.messageOwner.random_id != 0) {
+                if (currentEncryptedChat != null && selectedObject.messageOwner.random_id != 0 && selectedObject.type != 10) {
                     random_ids = new ArrayList<Long>();
                     random_ids.add(selectedObject.messageOwner.random_id);
                 }
@@ -3397,7 +3453,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 break;
             }
             case attach_location: {
-                if (!isGoogleMapsInstalled()) {
+                if (!isGoogleMapsInstalled() || parentActivity == null) {
                     return true;
                 }
                 LocationActivity fragment = new LocationActivity();
@@ -3405,6 +3461,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 break;
             }
             case attach_document: {
+                if (parentActivity == null) {
+                    return true;
+                }
                 DocumentSelectActivity fragment = new DocumentSelectActivity();
                 fragment.delegate = this;
                 ((LaunchActivity)parentActivity).presentFragment(fragment, "document", false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
index ce3fb03ef..c4f26ad6b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
@@ -69,7 +69,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_DONE) {
+                    if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
                         doneButton.performClick();
                         return true;
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index a5fe2b81a..f0a3b6c61 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -380,6 +380,14 @@ public void onResume() {
         ((LaunchActivity)parentActivity).updateActionBar();
     }
 
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (searchItem != null && searchItem.isActionViewExpanded()) {
+            searchItem.collapseActionView();
+        }
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         int itemId = item.getItemId();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 23f58c303..7c220f551 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -172,6 +172,14 @@ protected void onResume() {
         applySelfActionBar();
     }
 
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (searchItem != null && searchItem.isActionViewExpanded()) {
+            searchItem.collapseActionView();
+        }
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         int itemId = item.getItemId();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GalleryImageViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/GalleryImageViewer.java
index b2dd8cd6a..227e83c6e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GalleryImageViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GalleryImageViewer.java
@@ -172,6 +172,14 @@ public void onCreate(Bundle savedInstanceState) {
                 timeTextView.setVisibility(View.INVISIBLE);
                 localPagerAdapter = new LocalPagerAdapter(arr);
             } else if (messagesArr != null) {
+                MessageObject object = null;
+                for (MessageObject messageObject : messagesArr) {
+                    if (messageObject.messageOwner.dialog_id != 0 || messageObject.messageOwner.to_id != null) {
+                        object = messageObject;
+                        break;
+                    }
+                }
+
                 ArrayList<MessageObject> imagesArr = new ArrayList<MessageObject>();
                 HashMap<Integer, MessageObject> imagesByIds = new HashMap<Integer, MessageObject>();
                 imagesArr.addAll(messagesArr);
@@ -181,10 +189,13 @@ public void onCreate(Bundle savedInstanceState) {
                 }
                 index = imagesArr.size() - index - 1;
 
-                MessageObject object = imagesArr.get(0);
+
                 if (object.messageOwner.dialog_id != 0) {
                     currentDialog = object.messageOwner.dialog_id;
                 } else {
+                    if (object.messageOwner.to_id == null) {
+                        finish();
+                    }
                     if (object.messageOwner.to_id.chat_id != 0) {
                         currentDialog = -object.messageOwner.to_id.chat_id;
                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index fa6cf2dca..d95c21d47 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -233,6 +233,14 @@ public void onResume() {
         ((LaunchActivity)parentActivity).updateActionBar();
     }
 
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (searchItem != null && searchItem.isActionViewExpanded()) {
+            searchItem.collapseActionView();
+        }
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         int itemId = item.getItemId();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 0847666fb..1dcdf76c9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -38,6 +38,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
@@ -57,6 +58,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.Map;
 
 public class LaunchActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
     private boolean finished = false;
@@ -90,8 +92,15 @@ protected void onCreate(Bundle savedInstanceState) {
                 finish();
                 return;
             }
-            Intent intent2 = new Intent(this, IntroActivity.class);
-            startActivity(intent2);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+            Map<String, ?> state = preferences.getAll();
+            if (state.isEmpty()) {
+                Intent intent2 = new Intent(this, IntroActivity.class);
+                startActivity(intent2);
+            } else {
+                Intent intent2 = new Intent(this, LoginActivity.class);
+                startActivity(intent2);
+            }
             finish();
             return;
         }
@@ -328,22 +337,24 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                     if (!(parcelable instanceof Uri)) {
                         parcelable = Uri.parse(parcelable.toString());
                     }
-                    if (parcelable != null && type != null && type.startsWith("image/")) {
-                        String tempPath = Utilities.getPath((Uri)parcelable);
-                        if (type.equals("image/gif") || tempPath != null && tempPath.endsWith(".gif")) {
-                            try {
-                                documentPath = Utilities.getPath((Uri)parcelable);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            if (documentPath == null) {
-                                photoPath = (Uri) parcelable;
+                    Uri uri = (Uri)parcelable;
+                    if (uri != null && type != null && type.startsWith("image/")) {
+                        String tempPath = Utilities.getPath(uri);
+                        boolean isGif = false;
+                        if (tempPath != null && tempPath.endsWith(".gif")) {
+                            isGif = true;
+                            documentPath = tempPath;
+                        } else if (tempPath == null) {
+                            isGif = MediaController.isGif(uri);
+                            if (isGif) {
+                                documentPath = MediaController.copyDocumentToCache(uri);
                             }
-                        } else {
-                            photoPath = (Uri) parcelable;
+                        }
+                        if (!isGif || documentPath == null) {
+                            photoPath = uri;
                         }
                     } else {
-                        path = Utilities.getPath((Uri)parcelable);
+                        path = Utilities.getPath(uri);
                         if (path != null) {
                             if (path.startsWith("file:")) {
                                 path = path.replace("file://", "");
@@ -372,13 +383,24 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                 if (!(parcelable instanceof Uri)) {
                                     parcelable = Uri.parse(parcelable.toString());
                                 }
-                                String tempPath = Utilities.getPath((Uri)parcelable);
-                                if (type.equals("image/gif") || tempPath != null && tempPath.endsWith(".gif")) {
+                                Uri uri = (Uri)parcelable;
+                                String tempPath = Utilities.getPath(uri);
+
+                                boolean isGif = false;
+                                if (tempPath != null && tempPath.endsWith(".gif")) {
+                                    isGif = true;
+                                } else if (tempPath == null) {
+                                    isGif = MediaController.isGif(uri);
+                                    if (isGif) {
+                                        tempPath = MediaController.copyDocumentToCache(uri);
+                                    }
+                                }
+                                if (isGif && tempPath != null) {
                                     if (documentsPathArray == null) {
                                         documentsPathArray = new ArrayList<String>();
                                     }
                                     try {
-                                        documentsPathArray.add(Utilities.getPath((Uri) parcelable));
+                                        documentsPathArray.add(tempPath);
                                     } catch (Exception e) {
                                         FileLog.e("tmessages", e);
                                     }
@@ -386,7 +408,7 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
                                     if (imagesPathArray == null) {
                                         imagesPathArray = new ArrayList<Uri>();
                                     }
-                                    imagesPathArray.add((Uri) parcelable);
+                                    imagesPathArray.add(uri);
                                 }
                             }
                         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index bfad47660..62bb91234 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -12,6 +12,7 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.os.Bundle;
@@ -24,11 +25,15 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.SlideView;
 
+import java.util.Map;
+import java.util.Set;
+
 public class LoginActivity extends ActionBarActivity implements SlideView.SlideViewDelegate {
     private int currentViewNum = 0;
     private SlideView[] views = new SlideView[3];
@@ -40,9 +45,6 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                 ((LoginActivityPhoneView)views[0]).selectCountry(data.getStringExtra("country"));
             }
         }
-//        if (views[currentViewNum] instanceof LoginActivityRegisterView) {
-//            ((LoginActivityRegisterView)views[currentViewNum]).avatarUpdater.onActivityResult(requestCode, resultCode, data);
-//        }
     }
 
     @Override
@@ -57,6 +59,90 @@ protected void onPause() {
         ApplicationLoader.lastPauseTime = System.currentTimeMillis();
     }
 
+    private void saveCurrentState() {
+        try {
+            Bundle bundle = new Bundle();
+            bundle.putInt("currentViewNum", currentViewNum);
+            for (int a = 0; a <= currentViewNum; a++) {
+                SlideView v = views[a];
+                if (v != null) {
+                    v.saveStateParams(bundle);
+                }
+            }
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.clear();
+            putBundleToEditor(bundle, editor, null);
+            editor.commit();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private Bundle loadCurrentState() {
+        try {
+            Bundle bundle = new Bundle();
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+            Map<String, ?> params = preferences.getAll();
+            for (Map.Entry<String, ?> entry : params.entrySet()) {
+                String key = entry.getKey();
+                Object value = entry.getValue();
+                String[] args = key.split("_\\|_");
+                if (args.length == 1) {
+                    if (value instanceof String) {
+                        bundle.putString(key, (String) value);
+                    } else if (value instanceof Integer) {
+                        bundle.putInt(key, (Integer) value);
+                    }
+                } else if (args.length == 2) {
+                    Bundle inner = bundle.getBundle(args[0]);
+                    if (inner == null) {
+                        inner = new Bundle();
+                        bundle.putBundle(args[0], inner);
+                    }
+                    if (value instanceof String) {
+                        inner.putString(args[1], (String) value);
+                    } else if (value instanceof Integer) {
+                        inner.putInt(args[1], (Integer) value);
+                    }
+                }
+            }
+            return bundle;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+
+    private void clearCurrentState() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.clear();
+        editor.commit();
+    }
+
+    private void putBundleToEditor(Bundle bundle, SharedPreferences.Editor editor, String prefix) {
+        Set<String> keys = bundle.keySet();
+        for (String key : keys) {
+            Object obj = bundle.get(key);
+            if (obj instanceof String) {
+                if (prefix != null) {
+                    editor.putString(prefix + "_|_" + key, (String) obj);
+                } else {
+                    editor.putString(key, (String) obj);
+                }
+            } else if (obj instanceof Integer) {
+                if (prefix != null) {
+                    editor.putInt(prefix + "_|_" + key, (Integer) obj);
+                } else {
+                    editor.putInt(key, (Integer) obj);
+                }
+            } else if (obj instanceof Bundle) {
+                putBundleToEditor((Bundle)obj, editor, key);
+            }
+        }
+    }
+
     public void ShowAlertDialog(final Activity activity, final String message) {
         activity.runOnUiThread(new Runnable() {
             @Override
@@ -95,12 +181,16 @@ protected void onCreate(Bundle savedInstanceState) {
 
         getSupportActionBar().setTitle(views[0].getHeaderName());
 
+        savedInstanceState = loadCurrentState();
         if (savedInstanceState != null) {
             currentViewNum = savedInstanceState.getInt("currentViewNum", 0);
         }
         for (int a = 0; a < views.length; a++) {
             SlideView v = views[a];
             if (v != null) {
+                if (savedInstanceState != null) {
+                    v.restoreStateParams(savedInstanceState);
+                }
                 v.delegate = this;
                 v.setVisibility(currentViewNum == a ? View.VISIBLE : View.GONE);
             }
@@ -239,7 +329,7 @@ protected void onDestroy() {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        outState.putInt("currentViewNum", currentViewNum);
+        saveCurrentState();
     }
 
     @Override
@@ -247,5 +337,6 @@ public void needFinishActivity() {
         Intent intent2 = new Intent(this, LaunchActivity.class);
         startActivity(intent2);
         finish();
+        clearCurrentState();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
index a9f693dca..e6f7bda6b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
@@ -11,8 +11,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
 import android.support.v7.app.ActionBarActivity;
 import android.telephony.TelephonyManager;
 import android.text.Editable;
@@ -322,7 +320,7 @@ public void onNextPressed() {
             delegate.needShowAlert(LocaleController.getString("WrongCountry", R.string.WrongCountry));
             return;
         }
-        if (codeField.length() == 0 || phoneField.length() == 0) {
+        if (codeField.length() == 0) {
             delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
             return;
         }
@@ -400,55 +398,26 @@ public String getHeaderName() {
     }
 
     @Override
-    protected Parcelable onSaveInstanceState() {
-        Parcelable superState = super.onSaveInstanceState();
-        return new SavedState(superState, phoneField.getText().toString(), codeField.getText().toString());
+    public void saveStateParams(Bundle bundle) {
+        String code = codeField.getText().toString();
+        if (code != null && code.length() != 0) {
+            bundle.putString("phoneview_code", code);
+        }
+        String phone = phoneField.getText().toString();
+        if (phone != null && phone.length() != 0) {
+            bundle.putString("phoneview_phone", phone);
+        }
     }
 
     @Override
-    protected void onRestoreInstanceState(Parcelable state) {
-        SavedState savedState = (SavedState) state;
-        super.onRestoreInstanceState(savedState.getSuperState());
-        codeField.setText(savedState.code);
-        phoneField.setText(savedState.phone);
-    }
-
-    protected static class SavedState extends BaseSavedState {
-        public String phone;
-        public String code;
-
-        private SavedState(Parcelable superState, String text1, String text2) {
-            super(superState);
-            phone = text1;
-            code = text2;
-            if (phone == null) {
-                phone = "";
-            }
-            if (code == null) {
-                code = "";
-            }
+    public void restoreStateParams(Bundle bundle) {
+        String code = bundle.getString("phoneview_code");
+        if (code != null) {
+            codeField.setText(code);
         }
-
-        private SavedState(Parcel in) {
-            super(in);
-            phone = in.readString();
-            code = in.readString();
-        }
-
-        @Override
-        public void writeToParcel(Parcel destination, int flags) {
-            super.writeToParcel(destination, flags);
-            destination.writeString(phone);
-            destination.writeString(code);
+        String phone = bundle.getString("phoneview_phone");
+        if (phone != null) {
+            phoneField.setText(phone);
         }
-
-        public static final Parcelable.Creator<SavedState> CREATOR = new Creator<SavedState>() {
-            public SavedState createFromParcel(Parcel in) {
-                return new SavedState(in);
-            }
-            public SavedState[] newArray(int size) {
-                return new SavedState[size];
-            }
-        };
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
index 572320f3f..2a128493e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
@@ -10,8 +10,6 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
 import android.view.View;
@@ -40,10 +38,6 @@
     private String requestPhone;
     private String phoneHash;
     private String phoneCode;
-    //private BackupImageView avatarImage;
-    //public AvatarUpdater avatarUpdater = new AvatarUpdater();
-    //private TLRPC.PhotoSize avatarPhoto = null;
-    //private TLRPC.PhotoSize avatarPhotoBig = null;
     private Bundle currentParams;
 
     public LoginActivityRegisterView(Context context) {
@@ -62,25 +56,10 @@ public LoginActivityRegisterView(Context context, AttributeSet attrs, int defSty
     protected void onFinishInflate() {
         super.onFinishInflate();
 
-//        avatarUpdater.parentActivity = (Activity)delegate;
-//        avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
-//            @Override
-//            public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
-//                avatarPhotoBig = big;
-//                avatarPhoto = small;
-//                if (avatarImage != null) {
-//                    avatarImage.setImage(small.location, null, R.drawable.user_placeholder);
-//                }
-//            }
-//        };
-//        avatarUpdater.returnOnly = true;
-
-        //ImageButton avatarButton = (ImageButton)findViewById(R.id.settings_change_avatar_button);
         firstNameField = (EditText)findViewById(R.id.login_first_name_field);
         firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
         lastNameField = (EditText)findViewById(R.id.login_last_name_field);
         lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
-        //avatarImage = (BackupImageView)findViewById(R.id.settings_avatar_image);
 
         TextView textView = (TextView)findViewById(R.id.login_register_info);
         textView.setText(LocaleController.getString("RegisterText", R.string.RegisterText));
@@ -107,51 +86,6 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             }
         });
 
-//        avatarButton.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View view) {
-//                AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-//
-//                CharSequence[] items;
-//
-//                if (avatarPhoto != null) {
-//                    items = new CharSequence[]{getString(R.string.FromCamera), getString(R.string.FromGalley), getString(R.string.DeletePhoto)};
-//                } else {
-//                    items = new CharSequence[]{getString(R.string.FromCamera), getString(R.string.FromGalley)};
-//                }
-//
-//                builder.setItems(items, new DialogInterface.OnClickListener() {
-//                    @Override
-//                    public void onClick(DialogInterface dialogInterface, int i) {
-//                        if (i == 0) {
-//                            avatarUpdater.openCamera();
-//                        } else if (i == 1) {
-//                            avatarUpdater.openGallery();
-//                        } else if (i == 2) {
-//                            resetAvatar();
-//                        }
-//                    }
-//                });
-//                builder.show().setCanceledOnTouchOutside(true);
-//            }
-//        });
-    }
-
-    public void resetAvatar() {
-//        avatarPhoto = null;
-//        avatarPhotoBig = null;
-//        if (avatarImage != null) {
-//            avatarImage.setImageResource(R.drawable.user_placeholder);
-//        }
-    }
-
-    @Override
-    public void onDestroyActivity() {
-        super.onDestroyActivity();
-//        if (avatarUpdater != null) {
-//            avatarUpdater.clear();
-//            avatarUpdater = null;
-//        }
     }
 
     @Override
@@ -184,7 +118,6 @@ public void setParams(Bundle params) {
         phoneHash = params.getString("phoneHash");
         phoneCode = params.getString("code");
         currentParams = params;
-        resetAvatar();
     }
 
     @Override
@@ -249,63 +182,33 @@ public void run() {
     }
 
     @Override
-    protected Parcelable onSaveInstanceState() {
-        Parcelable superState = super.onSaveInstanceState();
-        return new SavedState(superState, firstNameField.getText().toString(), lastNameField.getText().toString(), currentParams);
+    public void saveStateParams(Bundle bundle) {
+        String first = firstNameField.getText().toString();
+        if (first != null && first.length() != 0) {
+            bundle.putString("registerview_first", first);
+        }
+        String last = lastNameField.getText().toString();
+        if (last != null && last.length() != 0) {
+            bundle.putString("registerview_last", last);
+        }
+        if (currentParams != null) {
+            bundle.putBundle("registerview_params", currentParams);
+        }
     }
 
     @Override
-    protected void onRestoreInstanceState(Parcelable state) {
-        SavedState savedState = (SavedState) state;
-        super.onRestoreInstanceState(savedState.getSuperState());
-        currentParams = savedState.params;
+    public void restoreStateParams(Bundle bundle) {
+        currentParams = bundle.getBundle("registerview_params");
         if (currentParams != null) {
             setParams(currentParams);
         }
-        firstNameField.setText(savedState.firstName);
-        lastNameField.setText(savedState.lastName);
-    }
-
-    protected static class SavedState extends BaseSavedState {
-        public String firstName;
-        public String lastName;
-        public Bundle params;
-
-        private SavedState(Parcelable superState, String text1, String text2, Bundle p1) {
-            super(superState);
-            firstName = text1;
-            lastName = text2;
-            if (firstName == null) {
-                firstName = "";
-            }
-            if (lastName == null) {
-                lastName = "";
-            }
-            params = p1;
-        }
-
-        private SavedState(Parcel in) {
-            super(in);
-            firstName = in.readString();
-            lastName = in.readString();
-            params = in.readBundle();
+        String first = bundle.getString("registerview_first");
+        if (first != null) {
+            firstNameField.setText(first);
         }
-
-        @Override
-        public void writeToParcel(Parcel destination, int flags) {
-            super.writeToParcel(destination, flags);
-            destination.writeString(firstName);
-            destination.writeString(lastName);
-            destination.writeBundle(params);
+        String last = bundle.getString("registerview_last");
+        if (last != null) {
+            lastNameField.setText(last);
         }
-
-        public static final Parcelable.Creator<SavedState> CREATOR = new Creator<SavedState>() {
-            public SavedState createFromParcel(Parcel in) {
-                return new SavedState(in);
-            }
-            public SavedState[] newArray(int size) {
-                return new SavedState[size];
-            }
-        };
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
index fabb2fd36..d9283a4b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
@@ -10,8 +10,6 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
 import android.text.Html;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
@@ -51,7 +49,7 @@
 
     private Timer timeTimer;
     private final Integer timerSync = 1;
-    private int time = 60000;
+    private volatile int time = 60000;
     private double lastCurrentTime;
     private boolean waitingForSms = false;
 
@@ -107,6 +105,9 @@ public String getHeaderName() {
 
     @Override
     public void setParams(Bundle params) {
+        if (params == null) {
+            return;
+        }
         codeField.setText("");
         Utilities.setWaitingForSms(true);
         NotificationCenter.getInstance().addObserver(this, 998);
@@ -118,6 +119,10 @@ public void setParams(Bundle params) {
         registered = params.getString("registered");
         time = params.getInt("calltime");
 
+        if (phone == null) {
+            return;
+        }
+
         String number = PhoneFormat.getInstance().format(phone);
         confirmTextView.setText(Html.fromHtml(String.format(ApplicationLoader.applicationContext.getResources().getString(R.string.SentSmsCode) + " <b>%s</b>", number)));
 
@@ -380,47 +385,32 @@ public void run() {
     }
 
     @Override
-    protected Parcelable onSaveInstanceState() {
-        Parcelable superState = super.onSaveInstanceState();
-        return new SavedState(superState, currentParams);
+    public void saveStateParams(Bundle bundle) {
+        String code = codeField.getText().toString();
+        if (code != null && code.length() != 0) {
+            bundle.putString("smsview_code", code);
+        }
+        if (currentParams != null) {
+            bundle.putBundle("smsview_params", currentParams);
+        }
+        if (time != 0) {
+            bundle.putInt("time", time);
+        }
     }
 
     @Override
-    protected void onRestoreInstanceState(Parcelable state) {
-        SavedState savedState = (SavedState) state;
-        super.onRestoreInstanceState(savedState.getSuperState());
-        currentParams = savedState.params;
+    public void restoreStateParams(Bundle bundle) {
+        currentParams = bundle.getBundle("smsview_params");
         if (currentParams != null) {
             setParams(currentParams);
         }
-    }
-
-    protected static class SavedState extends BaseSavedState {
-        public Bundle params;
-
-        private SavedState(Parcelable superState, Bundle p1) {
-            super(superState);
-            params = p1;
-        }
-
-        private SavedState(Parcel in) {
-            super(in);
-            params = in.readBundle();
+        String code = bundle.getString("smsview_code");
+        if (code != null) {
+            codeField.setText(code);
         }
-
-        @Override
-        public void writeToParcel(Parcel destination, int flags) {
-            super.writeToParcel(destination, flags);
-            destination.writeBundle(params);
+        Integer t = bundle.getInt("time");
+        if (t != 0) {
+            time = t;
         }
-
-        public static final Parcelable.Creator<SavedState> CREATOR = new Creator<SavedState>() {
-            public SavedState createFromParcel(Parcel in) {
-                return new SavedState(in);
-            }
-            public SavedState[] newArray(int size) {
-                return new SavedState[size];
-            }
-        };
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 22faf2e17..df1c05fad 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -37,7 +37,6 @@
 import org.telegram.ui.Views.BackupImageView;
 import org.telegram.ui.Views.BaseFragment;
 import org.telegram.ui.Views.OnSwipeTouchListener;
-import org.w3c.dom.Text;
 
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 77a364c14..badde5789 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -361,10 +361,19 @@ public void onResume() {
         if (messagesListViewAdapter != null) {
             messagesListViewAdapter.notifyDataSetChanged();
         }
+
         ((LaunchActivity)parentActivity).showActionBar();
         ((LaunchActivity)parentActivity).updateActionBar();
     }
 
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (searchItem != null && searchItem.isActionViewExpanded()) {
+            searchItem.collapseActionView();
+        }
+    }
+
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
@@ -541,6 +550,9 @@ public void run() {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        if (parentActivity == null) {
+            return;
+        }
         searchItem = (SupportMenuItem)menu.add(Menu.NONE, 0, Menu.NONE, LocaleController.getString("Search", R.string.Search)).setIcon(R.drawable.ic_ab_search);
         searchItem.setShowAsAction(SupportMenuItem.SHOW_AS_ACTION_ALWAYS|SupportMenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
         searchItem.setActionView(searchView = new SearchView(parentActivity));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
index 4cb4165da..9c1304f9b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
@@ -533,7 +533,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 View selection = view.findViewById(R.id.selection);
                 TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
                 TLRPC.PhotoSize size = PhotoObject.getClosestPhotoSizeWithSize(wallPaper.sizes, Utilities.dp(100), Utilities.dp(100));
-                image.setImage(size.location, "100_100", 0);
+                if (size != null && size.location != null) {
+                    image.setImage(size.location, "100_100", 0);
+                }
                 if (wallPaper.id == selectedBackground) {
                     selection.setVisibility(View.VISIBLE);
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
index 2f0d44866..3462651ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
@@ -60,4 +60,12 @@ public void onShow() {
     public void onDestroyActivity() {
         delegate = null;
     }
+
+    public void saveStateParams(Bundle bundle) {
+
+    }
+
+    public void restoreStateParams(Bundle bundle) {
+
+    }
 }
diff --git a/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml b/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
index cf38ff8dd..c265685e2 100644
--- a/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
+++ b/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
@@ -28,52 +28,100 @@
         android:layout_gravity="right"
         android:id="@+id/secret_title"/>
 
-    <TextView android:layout_height="wrap_content"
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginTop="8dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical|right"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:layout_gravity="right"
-        android:id="@+id/secret_description1"
-        android:drawableRight="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:layout_gravity="right">
 
-    <TextView android:layout_height="wrap_content"
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description1"/>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="3dp"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical|right"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:layout_gravity="right"
-        android:id="@+id/secret_description2"
-        android:drawableRight="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp"
+        android:layout_gravity="right">
 
-    <TextView android:layout_height="wrap_content"
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description2"/>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="3dp"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical|right"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:layout_gravity="right"
-        android:id="@+id/secret_description3"
-        android:drawableRight="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp"
+        android:layout_gravity="right">
 
-    <TextView android:layout_height="wrap_content"
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description3"/>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="3dp"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical|right"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:layout_gravity="right"
-        android:id="@+id/secret_description4"
-        android:drawableRight="@drawable/ic_lock_white"
-        android:drawablePadding="8dp" />
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp"
+        android:layout_gravity="right">
+
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description4"/>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginLeft="8dp"
+            android:layout_marginTop="3dp"/>
+
+    </LinearLayout>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml b/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
index a820c0e3a..6df0e8915 100644
--- a/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
+++ b/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
@@ -27,48 +27,96 @@
         android:textSize="15dp"
         android:id="@+id/secret_title"/>
 
-    <TextView android:layout_height="wrap_content"
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="8dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:id="@+id/secret_description1"
-        android:drawableLeft="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
-    <TextView android:layout_height="wrap_content"
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginRight="8dp"
+            android:layout_marginTop="4dp"/>
+
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description1"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:id="@+id/secret_description2"
-        android:drawableLeft="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
-    <TextView android:layout_height="wrap_content"
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginRight="8dp"
+            android:layout_marginTop="4dp"/>
+
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description2"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:id="@+id/secret_description3"
-        android:drawableLeft="@drawable/ic_lock_white"
-        android:drawablePadding="8dp"/>
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
-    <TextView android:layout_height="wrap_content"
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginRight="8dp"
+            android:layout_marginTop="4dp"/>
+
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description3"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_marginTop="4dp"
-        android:maxWidth="260dp"
-        android:gravity="center_vertical"
-        android:textColor="#ffffff"
-        android:textSize="15dp"
-        android:id="@+id/secret_description4"
-        android:drawableLeft="@drawable/ic_lock_white"
-        android:drawablePadding="8dp" />
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
+            android:layout_marginRight="8dp"
+            android:layout_marginTop="4dp"/>
+
+        <TextView android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:maxWidth="260dp"
+            android:gravity="center_vertical"
+            android:textColor="#ffffff"
+            android:textSize="15dp"
+            android:id="@+id/secret_description4"/>
+
+    </LinearLayout>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 1e4c4ce4e..e7bd44acf 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -331,6 +331,8 @@
     <string name="AttachDocument">ÙØ³ØªÙØ¯</string>
     <string name="AttachAudio">ÙÙØ·Ø¹ ØµÙØªÙ</string>
     <string name="FromYou">Ø£ÙØª</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Ø±ÙÙ Ø§ÙÙØ§ØªÙ ØºÙØ± ØµØ­ÙØ­</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 445a805da..28bac65bf 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -224,7 +224,7 @@
     <string name="NoBlocked">Keine blockierten Benutzer</string>
     <string name="YourPhoneNumber">DEINE TELEFONNUMMER</string>
     <string name="MessageNotifications">NACHRICHTEN</string>
-    <string name="Alert">Nachrichtenton</string>
+    <string name="Alert">Benachrichtigung</string>
     <string name="MessagePreview">Nachrichtenvorschau</string>
     <string name="GroupNotifications">GRUPPEN</string>
     <string name="Sound">Nachrichtenton auswÃ¤hlen</string>
@@ -256,12 +256,12 @@
     <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Sprache</string>
-    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]>: it has important <![CDATA[<a href="http://telegram.org/faq#troubleshooting">troubleshooting tips</a>]]> and answers to most questions.</string>
-    <string name="AskButton">Ask a volunteer</string>
+    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von Freiwilligen geleistet wird. Wir versuchen so schnell wie mÃ¶glich zu antworten. Dies kann jedoch manchmal etwas lÃ¤nger dauern.<![CDATA[<br><br>]]>Bitte schau in den <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]>: nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href="http://telegram.org/faq#troubleshooting">ProblemlÃ¶sung</a>]]>.</string>
+    <string name="AskButton">Frage einen Freiwilligen</string>
     <string name="TelegramFaq">Telegram-FAQ</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Lokalisierung lÃ¶schen?</string>
-    <string name="IncorrectLocalization">Incorrect localization file</string>
+    <string name="IncorrectLocalization">Falsche Sprachdatei</string>
 
     <!--media view-->
     <string name="NoMedia">Noch keine geteilten Medien vorhanden</string>
@@ -321,7 +321,7 @@
     <string name="ActionYouCreateGroup">Du hast die Gruppe erstellt</string>
     <string name="ActionKickUserYou">un1 hat dich aus der Gruppe entfernt</string>
     <string name="ActionAddUserYou">un1 hat dich hinzugefÃ¼gt</string>
-    <string name="UnsuppotedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstÃ¼tzt.</string>
+    <string name="UnsuppotedMedia">Diese Nachricht wird auf deiner Version von Telegram nicht unterstÃ¼tzt. Bitte aktualisiere die App um sie zu sehen: http://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Standort</string>
@@ -329,6 +329,8 @@
     <string name="AttachDocument">Dokument</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">Du</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">UngÃ¼ltige Telefonnummer</string>
@@ -356,12 +358,12 @@
     <string name="Page6Title">Cloud-Basiert</string>
     <string name="Page7Title">Vertraulich</string>
     <string name="Page1Message">Willkommen im Zeitalter der sicheren und schnellen Kommunikation.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> stellt Nachrichten schneller<![CDATA[<br/>]]>zu als andere Anwendungen</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist fÃ¼r immer kostenlos.<![CDATA[<br/>]]>Keine Werbung. Keine wiederkehrenden Kosten.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schÃ¼tzt deine Nachrichten<![CDATA[<br/>]]>vor Hacker-Angriffen</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> hat keine Grenzen in Sachen<![CDATA[<br/>]]>GrÃ¶Ãe deiner Chats und Medien</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lÃ¤sst sich von verschiedenen<![CDATA[<br/>]]>GerÃ¤ten gleichzeitig nutzen</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]>-Nachrichten sind stark<![CDATA[<br/>]]>verschlÃ¼sselt und kÃ¶nnen sich selbst zerstÃ¶ren</string>
+    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> stellt Nachrichten schneller zu als andere Anwendungen</string>
+    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist fÃ¼r immer kostenlos. Keine Werbung. Keine wiederkehrenden Kosten.</string>
+    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schÃ¼tzt deine Nachrichten vor Hacker-Angriffen</string>
+    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> hat keine Grenzen in Sachen GrÃ¶Ãe deiner Chats und Medien</string>
+    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lÃ¤sst sich von verschiedenen GerÃ¤ten gleichzeitig nutzen</string>
+    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]>-Nachrichten sind stark verschlÃ¼sselt und kÃ¶nnen sich selbst zerstÃ¶ren</string>
     <string name="StartMessaging">Jetzt beginnen</string>
 
     <!--Don't change this! Not for localization!-->
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 0a709c4f4..f5a341b0e 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -329,6 +329,8 @@
     <string name="AttachDocument">Archivo</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">TÃº</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">NÃºmero de telÃ©fono invÃ¡lido</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 1edff811d..2e051f588 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -321,7 +321,7 @@
     <string name="ActionYouCreateGroup">Hai creato il gruppo</string>
     <string name="ActionKickUserYou">un1 ti ha rimosso</string>
     <string name="ActionAddUserYou">un1 ti ha aggiunto</string>
-    <string name="UnsuppotedMedia">Questo messaggio non Ã¨ supportato dalla tua versione di Telegram.</string>
+    <string name="UnsuppotedMedia">Questo messaggio non Ã¨ supportato sulla tua versione di Telegram. Aggiorna l\'applicazione per\nvisualizzarlo: http://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Posizione</string>
@@ -329,6 +329,8 @@
     <string name="AttachDocument">Documento</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">Tu</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Numero di telefono non valido</string>
@@ -358,7 +360,7 @@
     <string name="Page1Message">Benvenuto nell\'era della messaggistica veloce e sicura</string>
     <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> consegna i messaggi piÃ¹ velocemente di qualsiasi altra applicazione</string>
     <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> Ã¨ gratuita per sempre. Nessuna pubblicitÃ . Nessun costo di abbonamento</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> tiene al sicuro i tuoi messaggi dagli attacchi dei hacker</string>
+    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> tiene al sicuro i tuoi messaggi dagli attacchi degli hacker</string>
     <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> non ha limiti sulle dimensioni dei tuoi file multimediali e delle chat</string>
     <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> ti consente di accedere ai messaggi da piÃ¹ dispositivi</string>
     <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> cifra in maniera sicura i messaggi e puÃ² far sÃ¬ che si autodistruggano</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 3913b251f..c6ef21e91 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -110,7 +110,7 @@
     <string name="YouLeft">U hebt deze groep verlaten</string>
     <string name="DeleteThisGroup">Deze groep verwijderen</string>
     <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
-    <string name="SaveToDownloads">Opslaan in downloads</string>
+    <string name="SaveToDownloads">Opslaan in Downloads</string>
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
 
     <!--notification-->
@@ -256,12 +256,12 @@
     <string name="ContactJoined">Contact lid geworden van Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Taal</string>
-    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href="http://telegram.org/faq#general">Telegram FAQ</a>]]>: it has important <![CDATA[<a href="http://telegram.org/faq#troubleshooting">troubleshooting tips</a>]]> and answers to most questions.</string>
-    <string name="AskButton">Ask a volunteer</string>
-    <string name="TelegramFaq">Telegram FAQ</string>
+    <string name="AskAQuestionInfo">Houd er rekening mee dat de ondersteuning van Telegram door vrijwilligers wordt gedaan. We doen ons best om zo snel als mogelijk te antwoorden, maar het kan even even duren.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href="http://telegram.org/faq#general">veelgestelde vragen (FAQ)</a>]]>: hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href="http://telegram.org/faq#troubleshooting">het oplossen van problemen</a>]]>.</string>
+    <string name="AskButton">Vraag een vrijwilliger</string>
+    <string name="TelegramFaq">Telegram veelgestelde vragen (FAQ)</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
-    <string name="DeleteLocalization">Delete localization?</string>
-    <string name="IncorrectLocalization">Incorrect localization file</string>
+    <string name="DeleteLocalization">Verwijder vertaling?</string>
+    <string name="IncorrectLocalization">Ongeldig vertalingsbestand</string>
 
     <!--media view-->
     <string name="NoMedia">Nog geen media gedeeld</string>
@@ -280,7 +280,7 @@
     <!--photo gallery view-->
     <string name="ShowAllMedia">Alle media weergeven</string>
     <string name="SaveToGallery">Opslaan in galerij</string>
-    <string name="Of">%1$d van %1$d</string>
+    <string name="Of">%1$d van %2$d</string>
     <string name="Gallery">Galerij</string>
 
     <!--button titles-->
@@ -321,7 +321,7 @@
     <string name="ActionYouCreateGroup">U hebt de groep gemaakt</string>
     <string name="ActionKickUserYou">un1 heeft u verwijderd</string>
     <string name="ActionAddUserYou">un1 heeft u toegevoegd</string>
-    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund in uw versie van Telegram.</string>
+    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund door uw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: http://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Locatie</string>
@@ -329,6 +329,8 @@
     <string name="AttachDocument">Document</string>
     <string name="AttachAudio">Geluidsbestand</string>
     <string name="FromYou">U</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Ongeldig telefoonnummer</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 9952b00b3..c0974912d 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -331,6 +331,8 @@
     <string name="AttachDocument">Document</string>
     <string name="AttachAudio">Audio</string>
     <string name="FromYou">You</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
 
     <!--Alert messages-->
     <string name="InvalidPhoneNumber">Invalid phone number</string>
diff --git a/TMessagesProj/src/main/res/xml/auth.xml b/TMessagesProj/src/main/res/xml/auth.xml
index 2d2c8a729..7856d0c83 100644
--- a/TMessagesProj/src/main/res/xml/auth.xml
+++ b/TMessagesProj/src/main/res/xml/auth.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
-    android:accountType="org.telegram.messenger.account"
+    android:accountType="org.telegram.account"
     android:icon="@drawable/ic_launcher"
     android:smallIcon="@drawable/ic_launcher"
     android:label="@string/AppName"
diff --git a/TMessagesProj/src/main/res/xml/sync_contacts.xml b/TMessagesProj/src/main/res/xml/sync_contacts.xml
index b1fecac3b..9ec405a98 100644
--- a/TMessagesProj/src/main/res/xml/sync_contacts.xml
+++ b/TMessagesProj/src/main/res/xml/sync_contacts.xml
@@ -1,3 +1,3 @@
 <sync-adapter xmlns:android="http://schemas.android.com/apk/res/android"
     android:contentAuthority="com.android.contacts"
-    android:accountType="org.telegram.messenger.account"/>
\ No newline at end of file
+    android:accountType="org.telegram.account"/>
\ No newline at end of file
