diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
index 2de73f604..84c69e987 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
@@ -10,16 +10,16 @@
     private final Date creationDate;
     private String title;
     private final String longDescription;
-    private final int fullChatId;
+    private final long groupCharId;
     private final int userCreatorId;
     private boolean open;
 
     // icon/image will be retrived externally by url or file.
     // Like the file containing the decision image can be named like decisio_<id>.png, and cached on the fs
 
-    public Decision(int fullChatId, int userCreatorId, String title, String longDescription,
+    public Decision(long groupCharId, int userCreatorId, String title, String longDescription,
                     Date creationDate, boolean open) {
-        this.fullChatId = fullChatId;
+        this.groupCharId = groupCharId;
         this.title = title;
         this.longDescription = longDescription;
         this.userCreatorId = userCreatorId;
@@ -27,9 +27,9 @@ public Decision(int fullChatId, int userCreatorId, String title, String longDesc
         this.open = open;
     }
 
-    public Decision(long id, int fullChatId, int userCreatorId, String title, String longDescription,
+    public Decision(long id, long groupCharId, int userCreatorId, String title, String longDescription,
                     Date creationDate, boolean open) {
-        this(fullChatId,userCreatorId,title, longDescription, creationDate, open);
+        this(groupCharId,userCreatorId,title, longDescription, creationDate, open);
         setId(id);
 
     }
@@ -37,8 +37,8 @@ public Decision(long id, int fullChatId, int userCreatorId, String title, String
     /*
      * @return the id of an TLRPC.ChatFull
      */
-    public int getChatId() {
-        return fullChatId;
+    public long getChatId() {
+        return groupCharId;
     }
 
     /**
@@ -80,7 +80,7 @@ public boolean equals(Object o) {
 
         Decision decision = (Decision) o;
 
-        if (fullChatId != decision.fullChatId) return false;
+        if (groupCharId != decision.groupCharId) return false;
         if (getUserCreatorId() != decision.getUserCreatorId()) return false;
         if (isOpen() != decision.isOpen()) return false;
         if (getTitle() != null ? !getTitle().equals(decision.getTitle()) : decision.getTitle() != null)
@@ -103,7 +103,7 @@ public int hashCode() {
         int result = super.hashCode();
         result = 31 * result + (getTitle() != null ? getTitle().hashCode() : 0);
         result = 31 * result + (getLongDescription() != null ? getLongDescription().hashCode() : 0);
-        result = 31 * result + fullChatId;
+        result = (int) (31 * result + groupCharId);
         result = 31 * result + (int) (getUserCreatorId() ^ (getUserCreatorId() >>> 32));
         result = 31 * result + (isOpen() ? 1 : 0);
         return result;
@@ -112,7 +112,7 @@ public int hashCode() {
     @Override
     public String toString() {
         return "Decision{" +
-                "fullChatId=" + fullChatId +
+                "groupCharId=" + groupCharId +
                 ", userCreatorId=" + userCreatorId +
                 ", longDescription='" + longDescription + '\'' +
                 ", title='" + title + '\'' +
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/ParsedMessage.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/ParsedMessage.java
new file mode 100644
index 000000000..27ddbff45
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/ParsedMessage.java
@@ -0,0 +1,63 @@
+package org.pollgram.decision.data;
+
+/**
+ * Created by davide on 04/01/16.
+ */
+public class ParsedMessage extends  DBBean{
+
+    private final long groupId;
+    private final int messageId;
+    private final boolean parsedSuccessfully;
+
+    public ParsedMessage(long id, long groupId, int messageId, boolean parsedSuccessfully) {
+        this(groupId,messageId, parsedSuccessfully);
+        setId(id);
+    }
+
+    public ParsedMessage(long groupId, int messageId, boolean parsedSuccessfully) {
+        this.groupId = groupId;
+        this.messageId = messageId;
+        this.parsedSuccessfully = parsedSuccessfully;
+    }
+
+    public long getGroupId() {
+        return groupId;
+    }
+
+    public int getMessageId() {
+        return messageId;
+    }
+
+    public boolean isParsedSuccessfully() {
+        return parsedSuccessfully;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof ParsedMessage)) return false;
+
+        ParsedMessage that = (ParsedMessage) o;
+
+        if (getGroupId() != that.getGroupId()) return false;
+        return getMessageId() == that.getMessageId();
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + (int) (getGroupId() ^ (getGroupId() >>> 32));
+        result = 31 * result + getMessageId();
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "ParsedMessage{" +
+                "groupId=" + groupId +
+                ", messageId=" + messageId +
+                ", parsedSuccessfully=" + parsedSuccessfully +
+                '}';
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index 604bb1300..0bab433fc 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -8,6 +8,7 @@
 
 import org.pollgram.decision.data.DBBean;
 import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.ParsedMessage;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.Vote;
 import org.telegram.messenger.ApplicationLoader;
@@ -30,13 +31,13 @@
         static final String ID = DEFAULT_ID_FILE_NAME;
         static final String TITLE = "title";
         static final String LONG_DESCRIPTION = "long_description";
-        static final String FULL_CHAT_ID = "full_chat_id";
+        static final String GROUP_ID = "group_id";
         static final String USER_CREATOR_ID = "user_creator_id";
         static final String CREATION_DATE = "creation_date";
         static final String OPEN = "open";
 
         public static String cloumns(String tableAlias) {
-            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, FULL_CHAT_ID,CREATION_DATE, USER_CREATOR_ID, OPEN);
+            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, GROUP_ID,CREATION_DATE, USER_CREATOR_ID, OPEN);
         }
     }
 
@@ -65,6 +66,19 @@ static String cloumns(String tableAlias){
         }
     }
 
+    static class T_ParsedMessages {
+        static final String TABLE_NAME = "parsedMessages";
+        static final String ID = DEFAULT_ID_FILE_NAME;
+        static final String GROUP_ID = "group_id";
+        static final String MESSAGE_ID = "message_id";
+        static final String PARSED_SUCCESSFULLY = "parsed_successfully";
+
+
+        static String cloumns(String tableAlias){
+            return createColumns(tableAlias, ID,GROUP_ID,MESSAGE_ID,PARSED_SUCCESSFULLY);
+        }
+    }
+
     private static String createColumns(String tableName, String... columnsNames){
         StringBuilder sb = new StringBuilder();
         for (int i = 0; i < columnsNames.length; i++) {
@@ -134,11 +148,11 @@ public Decision from(Cursor c) {
             long id = getLong(c, T_Decision.ID);
             String title = getString(c, T_Decision.TITLE);
             String description = getString(c, T_Decision.LONG_DESCRIPTION);
-            int fullChatId = getInt(c, T_Decision.FULL_CHAT_ID);
+            long groupChatId = getLong(c, T_Decision.GROUP_ID);
             int userCreatorId = getInt(c, T_Decision.USER_CREATOR_ID);
             Date creationDate = getDate(c, T_Decision.CREATION_DATE);
             boolean isOpen = getBoolean(c, T_Decision.OPEN);
-            return new Decision(id, fullChatId, userCreatorId, title, description, creationDate, isOpen);
+            return new Decision(id, groupChatId, userCreatorId, title, description, creationDate, isOpen);
         }
 
         @Override
@@ -146,7 +160,7 @@ public ContentValues toCV(Decision d) {
             ContentValues cv = new ContentValues();
             cv.put(T_Decision.TITLE, d.getTitle());
             cv.put(T_Decision.LONG_DESCRIPTION, d.getLongDescription());
-            cv.put(T_Decision.FULL_CHAT_ID, d.getChatId());
+            cv.put(T_Decision.GROUP_ID, d.getChatId());
             cv.put(T_Decision.USER_CREATOR_ID, d.getUserCreatorId());
             cv.put(T_Decision.CREATION_DATE, d.getCreationDate().getTime());
             cv.put(T_Decision.OPEN, d.isOpen());
@@ -188,6 +202,40 @@ public ContentValues toCV(TextOption to) {
 
     };
 
+    /**
+     * DBObjectMapper for TextOption
+     */
+    static final DBObjectMapper<ParsedMessage> PARSED_MESSAGES_MAPPER = new DBObjectMapper<ParsedMessage>() {
+        @Override
+        public String getTableName() {
+            return T_ParsedMessages.TABLE_NAME;
+        }
+
+        @Override
+        public String getIdFiledName() {
+            return T_ParsedMessages.ID;
+        }
+
+        @Override
+        public ParsedMessage from(Cursor c) {
+            long id = getLong(c, T_ParsedMessages.ID);
+            int groupId = getInt(c, T_ParsedMessages.GROUP_ID);
+            int messageID = getInt(c, T_ParsedMessages.MESSAGE_ID);
+            boolean parsedSuccessfully = getBoolean(c, T_ParsedMessages.PARSED_SUCCESSFULLY);
+            return new ParsedMessage(id, groupId, messageID, parsedSuccessfully);
+        }
+
+        @Override
+        public ContentValues toCV(ParsedMessage to) {
+            ContentValues cv = new ContentValues();
+            cv.put(T_ParsedMessages.GROUP_ID, to.getGroupId());
+            cv.put(T_ParsedMessages.MESSAGE_ID, to.getMessageId());
+            cv.put(T_ParsedMessages.PARSED_SUCCESSFULLY, to.isParsedSuccessfully());
+            return cv;
+        }
+
+    };
+
     static boolean getBoolean(int num) {
         return num == 1;
     }
@@ -328,11 +376,11 @@ public void onCreate(SQLiteDatabase db) {
                 T_Decision.ID + " INTEGER PRIMARY KEY, " +
                 T_Decision.TITLE + " TEXT, " +
                 T_Decision.LONG_DESCRIPTION + " TEXT, " +
-                T_Decision.FULL_CHAT_ID + " INTEGER," +
+                T_Decision.GROUP_ID + " INTEGER," +
                 T_Decision.USER_CREATOR_ID + " INTEGER," +
                 T_Decision.CREATION_DATE + " TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                 T_Decision.OPEN + " INTEGER, " +
-                "UNIQUE ("+T_Decision.TITLE+","+T_Decision.FULL_CHAT_ID+")" +
+                "UNIQUE (" + T_Decision.TITLE + "," + T_Decision.GROUP_ID + ")" +
                 ") ;");
         db.execSQL("CREATE TABLE " + T_TextOption.TABLE_NAME + " (" +
                 T_TextOption.ID + " INTEGER PRIMARY KEY, " +
@@ -349,7 +397,14 @@ public void onCreate(SQLiteDatabase db) {
                 T_Vote.FK_OPTION + " INTEGER, " +
                 T_Vote.USER_ID + " INTEGER, " +
                 "FOREIGN KEY(" + T_Vote.FK_OPTION + ")REFERENCES " +
-                    T_TextOption.TABLE_NAME + " (" + T_TextOption.ID + ") ON DELETE CASCADE ) ;");
+                T_TextOption.TABLE_NAME + " (" + T_TextOption.ID + ") ON DELETE CASCADE ) ;");
+        db.execSQL("CREATE TABLE " + T_ParsedMessages.TABLE_NAME + "(" +
+                T_ParsedMessages.ID + " INTEGER PRIMARY KEY," +
+                T_ParsedMessages.GROUP_ID + " INTEGER," +
+                T_ParsedMessages.MESSAGE_ID + " INTEGER, " +
+                T_ParsedMessages.PARSED_SUCCESSFULLY + " INTEGER, " +
+                "UNIQUE (" + T_ParsedMessages.GROUP_ID + "," + T_ParsedMessages.MESSAGE_ID + ")" +
+                " );");
         Log.i(LOG_TAG, "Db creation completed");
 
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index 146124b22..4f1e07837 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -4,6 +4,7 @@
 
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.ParsedMessage;
 import org.pollgram.decision.data.Vote;
 
 import java.util.List;
@@ -70,7 +71,7 @@
      * @param chatId
      * @return null if no decision was found
      */
-    Decision getDecision(String decisionTitle, int chatId);
+    Decision getDecision(String decisionTitle, long chatId);
 
     Option getOption(String optionTitle, Decision decision);
 
@@ -93,6 +94,29 @@
      */
     void delete(Decision decision);
 
+    /**
+     *
+     * @param groupChatId
+     * @param id
+     * @return whether the message has been parsed succesfully
+     */
+    boolean hasBeenParsed(final long groupChatId, int id);
+
+    /**
+     * set a message as parsed
+     * @param groupChatId
+     * @param messageId
+     * @param parsedSuccessfully the message has been parsed successfully
+     */
+    ParsedMessage setMessageAsParsed(final long groupChatId, int messageId, boolean parsedSuccessfully);
+
+    /**
+     * @param groupChatId
+     * @return the list of the messages that has not been parsed yet
+     */
+    List<ParsedMessage> getUnparsedMessages(final long groupChatId);
+
+
     /**
      * Result for method getWinningOption
      */
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 62e749677..f9e9f7f34 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -7,6 +7,7 @@
 
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.ParsedMessage;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.TimeRangeOption;
 import org.pollgram.decision.data.Vote;
@@ -39,16 +40,36 @@ public void putStubData(int chatId, int creatorId) {
         // TODO remove it one day
         Log.i(LOG_TAG, "Put Stub test data");
 
-        Date creationDate = new Date();
-        Decision decision1 =  new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", creationDate, true);
+        {
+            Date creationDate = new Date();
+            Decision decision1 = new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", creationDate, true);
 
-        List<Option> options = new ArrayList<>();
-        options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
-        options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
-        options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
-        options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
+            List<Option> options = new ArrayList<>();
+            options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
+            options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
+            options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
+            options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
 
-        PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
+            PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
+        }
+
+        {
+            Date creationDate = new Date();
+            Decision decision1 = new Decision(chatId, creatorId, "Where do we'd like to go skiing ?",
+                    "Lorem ipsum dolor sit amet, vix te deserunt ullamcorper. Ut probatus dignissim sea, vocent discere vivendum ad mea. Eam ut blandit scribentur, ius an salutatus reprimique. Ut eros rationibus nec, ex deserunt invenire quo.\n" +
+                            "\n" +
+                            "Id nulla tacimates mandamus est, duo agam luptatum philosophia ex, wisi vidit reprehendunt quo ea. Ei sed omnis nostrum probatus, quis liber expetendis id sea. Pro id nibh recusabo, has suas volutpat cu. Copiosae detraxit petentium has ne. ", creationDate, true);
+
+            List<Option> options = new ArrayList<>();
+            options.add(new TextOption("Val di fiemme obereggen, ovvero pameago", "L'è sempre bel e ghe el park davert", decision1.getId()));
+            options.add(new TextOption("Cortina d'ampezzo", "Lorem ipsum dolor sit amet, vix te deserunt ullamcorper. Ut probatus dignissim sea, vocent discere vivendum ad mea. Eam ut blandit scribentur, ius an salutatus reprimique. Ut eros rationibus nec, ex deserunt invenire quo.\n" +
+                    "\n" +
+                    "Id nulla tacimates mandamus est, duo agam luptatum philosophia ex, wisi vidit reprehendunt quo ea. Ei sed omnis nostrum probatus, quis liber expetendis id sea. Pro id nibh recusabo, has suas volutpat cu. Copiosae detraxit petentium has ne.", decision1.getId()));
+            options.add(new TextOption("Le funivie del'ghiacciaio della valle di stubai che si trova in austria vicino ad innsbruck", "è un po lungo il viaggio ma potrebbe essere assai fico", decision1.getId()));
+            options.add(new TextOption("Sul piste del passo del Broccon", null, decision1.getId()));
+
+            PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
+        }
     }
 
     @Override
@@ -149,7 +170,7 @@ public Decision getDecision(long decisionId) {
 
     @Override
     public List<Decision> getDecisions(int chatId, @Nullable Boolean open) {
-        String selection = PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ? ";
+        String selection = PGSqlLiteHelper.T_Decision.GROUP_ID + " = ? ";
         String[] selectionArgs;
         if (open != null) {
             selection = PGSqlLiteHelper.T_Decision.OPEN + "= ? and " + selection;
@@ -257,10 +278,10 @@ public Vote save(Vote vote) {
     }
 
     @Override
-    public Decision getDecision(String decisionTitle, int chatId) {
+    public Decision getDecision(String decisionTitle, long chatId) {
         return helper.findFirst(helper.DECISION_MAPPER,
-                PGSqlLiteHelper.T_Decision.TITLE + " = ? AND " + PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ?",
-                new String[]{decisionTitle, Integer.toString(chatId)});
+                PGSqlLiteHelper.T_Decision.TITLE + " = ? AND " + PGSqlLiteHelper.T_Decision.GROUP_ID + " = ?",
+                new String[]{decisionTitle, Long.toString(chatId)});
     }
 
     @Override
@@ -281,5 +302,43 @@ public Vote getVote(long optionId, int userId) {
                 new String[]{Long.toString(optionId), Integer.toString(userId)});
     }
 
+    @Override
+    public boolean hasBeenParsed(final long groupChatId, int messageId) {
+        ParsedMessage pm = getParseMessage(groupChatId,messageId);
+        return pm == null ? false : pm.isParsedSuccessfully();
+    }
+
+    private  ParsedMessage getParseMessage(final long groupChatId, int messageId){
+        return helper.findFirst(PGSqlLiteHelper.PARSED_MESSAGES_MAPPER,
+                PGSqlLiteHelper.T_ParsedMessages.GROUP_ID + " = ? and " +
+                        PGSqlLiteHelper.T_ParsedMessages.MESSAGE_ID + " = ? ",
+                new String[]{Long.toString(groupChatId), Integer.toString(messageId)});
+    }
+
+    @Override
+    public ParsedMessage setMessageAsParsed(final long groupChatId, int messageId, boolean parsedSuccessfully) {
+        ParsedMessage newValue = new ParsedMessage(groupChatId,messageId, parsedSuccessfully);
+        return save(newValue);
+    }
+
+    private ParsedMessage save(ParsedMessage newValue){
+        ParsedMessage foundParseMessage = getParseMessage(newValue.getGroupId(),newValue.getMessageId());
+        if (foundParseMessage == null)
+            return helper.insert(newValue, helper.PARSED_MESSAGES_MAPPER);
+        else{
+            newValue.setId(foundParseMessage.getId());
+            helper.update(newValue, helper.PARSED_MESSAGES_MAPPER);
+            return newValue;
+        }
+    }
+
+    @Override
+    public List<ParsedMessage> getUnparsedMessages(final long groupChatId) {
+        return helper.query(PGSqlLiteHelper.PARSED_MESSAGES_MAPPER,
+                PGSqlLiteHelper.T_ParsedMessages.GROUP_ID + " = ? and " +
+                        PGSqlLiteHelper.T_ParsedMessages.PARSED_SUCCESSFULLY + " = ? ",
+                new String[]{Long.toString(groupChatId), PGSqlLiteHelper.toString(false)});
+
+    }
 }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index a5d128f7b..a5d622107 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -84,7 +84,9 @@ public String getDescription() {
      * @param messageObject
      * @return the group chat id of this message or -1 if this message is not a group chat message
      */
-    int getMessageGroupId(MessageObject messageObject);
+    long getMessageGroupId(MessageObject messageObject);
+
+    long getMessageGroupId(long dialog_id);
 
     /**
      * @param msg message to parse
@@ -150,7 +152,7 @@ public String getDescription() {
      * @return a collection of the vote contained in the message
      * @throws ParseException is the message is not well formed
      */
-    Collection<Vote> getVotes(String msg, int currentChat, Date messageDate, int userId) throws PollgramParseException;
+    Collection<Vote> getVotes(String msg, long currentChat, Date messageDate, int userId) throws PollgramParseException;
 
     /**
      * Retrun vale for getNewDecision method
@@ -174,7 +176,7 @@ public NewDecisionData(@NonNull Decision decision, @NonNull List<Option> optionL
      * @param messageDate the message date
      * @return the decision and its options
      */
-    NewDecisionData getNewDecision(String msg, int currentChat, int userId, Date messageDate) throws PollgramParseException;
+    NewDecisionData getNewDecision(String msg, long currentChat, int userId, Date messageDate) throws PollgramParseException;
 
     /**
      * Return value for getCloseDecision
@@ -195,7 +197,7 @@ public ClosedDecisionDate(Decision decision, Option winningOption) {
      * @param groupChatId
      * @return the data for close decision message
      */
-    ClosedDecisionDate getCloseDecision(String text, int groupChatId) throws PollgramParseException;
+    ClosedDecisionDate getCloseDecision(String text, long groupChatId) throws PollgramParseException;
 
     /**
      * * Only if getMessageType(text) == MessageType_DELETE_DECISION
@@ -203,7 +205,7 @@ public ClosedDecisionDate(Decision decision, Option winningOption) {
      * @param groupChatId
      * @return the decision to delete
      */
-    Decision getDeleteDecision(String text, int groupChatId) throws PollgramParseException;
+    Decision getDeleteDecision(String text, long groupChatId) throws PollgramParseException;
 
     /**
      * Only if getMessageType(text) == MessageType_REOPEN_DECISION
@@ -211,6 +213,6 @@ public ClosedDecisionDate(Decision decision, Option winningOption) {
      * @param groupChatId
      * @return the decision to reopen
      */
-    Decision getReopenDecision(String text, int groupChatId) throws PollgramParseException;
+    Decision getReopenDecision(String text, long groupChatId) throws PollgramParseException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 2e26eab3a..1c2bf3930 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -53,10 +53,9 @@
     }
 
     String getTailingString(){
-        Context c = ApplicationLoader.applicationContext;
         return new StringBuilder().append(NEW_LINE).
                 append(NEW_LINE).
-                append(c.getString(R.string.downloadPollgramFromMarket)).
+                append(getResString(R.string.downloadPollgramFromMarket)).
                 append(' ').
                 append(GOOGLE_PLAY_POOLGRAM_URL).
                 toString();
@@ -115,11 +114,16 @@ private String format(Object obj){
         return strValue;
     }
 
+    private String getResString(int resId){
+        String s = context.getString(resId);
+        return s.replace(Character.toString(QUOTE_CHAR), Character.toString(ESCAPE_QUOTE_CHAR));
+    }
+
     private String getBooleanValue(Boolean b) {
         StringBuilder sb = new StringBuilder();
         sb.append(b ? TRUE_EMOJI : FALSE_EMOJI);
         sb.append(" ");
-        sb.append(ApplicationLoader.applicationContext.getString(b ? R.string.yes : R.string.no));
+        sb.append(getResString(b ? R.string.yes : R.string.no));
         return sb.toString();
     }
 
@@ -130,15 +134,15 @@ private Boolean getBooleanValue(String str) {
     @Override
     public String buildRemindMessage(String userAsString, Decision decision) {
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(R.string.tmsg_RemindToVoteP1));
+        body.append(getResString(R.string.tmsg_RemindToVoteP1));
         body.append(' ');
         body.append(userAsString);
         body.append(' ');
-        body.append(context.getString(R.string.tmsg_RemindToVoteP2));
+        body.append(getResString(R.string.tmsg_RemindToVoteP2));
         body.append(NEW_LINE);
         body.append(format(decision));
         body.append(NEW_LINE);
-        body.append(context.getString(R.string.tmsg_RemindToVoteP3));
+        body.append(getResString(R.string.tmsg_RemindToVoteP3));
         body.append(' ');
         body.append(WINKING_FACE_EMOJI);
         return  buildMessage(MessageType.REMIND_TO_VOTE, body.toString());
@@ -147,21 +151,21 @@ public String buildRemindMessage(String userAsString, Decision decision) {
     @Override
     public String buildCloseDecision(Decision decision, Option winningOption, int voteCount) {
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(R.string.tmsg_CloseDecisionP1));
+        body.append(getResString(R.string.tmsg_CloseDecisionP1));
         body.append(' ');
         body.append(format(decision));
-        body.append(context.getString(R.string.tmsg_CloseDecisionP2));
+        body.append(getResString(R.string.tmsg_CloseDecisionP2));
         body.append(' ');
         if (voteCount == 0)
-            body.append(format(context.getString(R.string.tmsg_CloseDecisionNoOptionDesc)));
+            body.append(format(getResString(R.string.tmsg_CloseDecisionNoOptionDesc)));
         else
             body.append(format(winningOption));
         body.append(' ');
-        body.append(context.getString(R.string.tmsg_CloseDecisionP3));
+        body.append(getResString(R.string.tmsg_CloseDecisionP3));
         body.append(' ');
         body.append(voteCount);
         body.append(' ');
-        body.append(context.getString(R.string.tmsg_CloseDecisionP4));
+        body.append(getResString(R.string.tmsg_CloseDecisionP4));
 
         return  buildMessage(MessageType.CLOSE_DECISION, body.toString());
     }
@@ -180,18 +184,18 @@ public String buildDeleteDecision(Decision decision) {
 
     private String buildDeleteOrReopenMessage(MessageType type, Decision decision, int prefixStringRes, int suffixStringRes){
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(prefixStringRes));
+        body.append(getResString(prefixStringRes));
         body.append(' ');
         body.append(format(decision));
         body.append(NEW_LINE);
-        body.append(context.getString(suffixStringRes));
+        body.append(getResString(suffixStringRes));
         return buildMessage(type, body.toString());
     }
 
     @Override
     public String buildNotifyVoteMessage(Decision decision, Collection<Vote> votes2Save) {
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(R.string.tmsg_Vote));
+        body.append(getResString(R.string.tmsg_Vote));
         body.append(NEW_LINE);
         body.append(format(decision));
         body.append(NEW_LINE);
@@ -213,7 +217,7 @@ public String buildNotifyVoteMessage(Decision decision, Collection<Vote> votes2S
     @Override
     public String buildNotifyNewDecision(Decision decision, List<Option> options) {
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(R.string.tmsg_NewDecisionMsgPrefix));
+        body.append(getResString(R.string.tmsg_NewDecisionMsgPrefix));
         body.append(NEW_LINE);
         body.append(format(decision));
         body.append(',');
@@ -221,7 +225,7 @@ public String buildNotifyNewDecision(Decision decision, List<Option> options) {
         body.append(format(decision.getLongDescription()));
         body.append('.');
         body.append(NEW_LINE);
-        body.append(context.getString(R.string.tmsg_NewDecisionOptionsPrefix));
+        body.append(getResString(R.string.tmsg_NewDecisionOptionsPrefix));
         body.append(NEW_LINE);
         for(Option o : options){
             body.append(BULLET_LIST_EMOJI);
@@ -301,27 +305,29 @@ public MessageType getMessageType(String msg){
     }
 
     @Override
-    public int getMessageGroupId(MessageObject messageObject) {
+    public long getMessageGroupId(MessageObject messageObject) {
         if (messageObject.messageOwner == null)
             return -1;
 
 
         if (messageObject.getDialogId() > 0){
-            Log.d(LOG_TAG,"message.messageOwner.dialog_id positive, in not a group chat");
             return -1;
         }
 
-        int groupChatId = (int)(messageObject.getDialogId() * -1);
-        if (ChatObject.isChannel(groupChatId)){
-            Log.d(LOG_TAG,"is a channel");
+        return getMessageGroupId(messageObject.getDialogId());
+    }
+
+    @Override
+    public long getMessageGroupId(long dialog_id) {
+        long groupChatId = dialog_id * -1;
+        if (ChatObject.isChannel((int) groupChatId)){
             return -1;
         }
-
         return groupChatId;
     }
 
     @Override
-    public Collection<Vote> getVotes(String msg, int currentChat, Date messageDate ,int userId) throws PollgramParseException {
+    public Collection<Vote> getVotes(String msg, long currentChat, Date messageDate ,int userId) throws PollgramParseException {
 
         try {
             StringTokenizer strTok = new EscapeStringTokenizer(msg, true);
@@ -358,7 +364,7 @@ public int getMessageGroupId(MessageObject messageObject) {
     }
 
     @Override
-    public NewDecisionData getNewDecision(String msg, int currentChat, int userId, Date messageDate) throws PollgramParseException {
+    public NewDecisionData getNewDecision(String msg, long currentChat, int userId, Date messageDate) throws PollgramParseException {
         Decision decision;
         List<Option> optionList = new ArrayList<>();
         try {
@@ -389,7 +395,7 @@ public NewDecisionData getNewDecision(String msg, int currentChat, int userId, D
     }
 
     @Override
-    public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws PollgramParseException {
+    public ClosedDecisionDate getCloseDecision(String msg, long currentChat) throws PollgramParseException {
         Decision decision;
         Option winningOption;
         try {
@@ -416,14 +422,14 @@ public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws P
     }
 
     @Override
-    public Decision getDeleteDecision(String text, int groupChatId) throws PollgramParseException {
+    public Decision getDeleteDecision(String text, long groupChatId) throws PollgramParseException {
         Decision d = getDecisionInDeleteOrReopenMessage(text, groupChatId);
         Log.d(LOG_TAG, "getDeleteDecision Decision[" + d + "]");
         return d;
     }
 
     @Override
-    public Decision getReopenDecision(String text, int groupChatId) throws PollgramParseException {
+    public Decision getReopenDecision(String text, long groupChatId) throws PollgramParseException {
         Decision d = getDecisionInDeleteOrReopenMessage(text,groupChatId);
         Log.d(LOG_TAG, "getReopenDecision Decision["+d+"]");
         return d;
@@ -435,7 +441,7 @@ public Decision getReopenDecision(String text, int groupChatId) throws PollgramP
      * @param groupChatId
      * @return
      */
-    private Decision getDecisionInDeleteOrReopenMessage(String msg, int groupChatId) throws PollgramParseException {
+    private Decision getDecisionInDeleteOrReopenMessage(String msg, long groupChatId) throws PollgramParseException {
         Decision decision;
         try {
             StringTokenizer strTok = new EscapeStringTokenizer(msg);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index c7264072b..f4f9e0000 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -11,7 +11,9 @@
 import org.telegram.tgnet.TLRPC;
 
 import java.util.Collection;
+import java.util.Date;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by davide on 10/11/15.
@@ -35,6 +37,26 @@
 
     void notifyDelete(Decision decision);
 
+    /**
+     * @param message
+     * @return whether the messsage is a pollgram transaction message
+     */
+    boolean isPollgramMessage(MessageObject message);
+
+    /**
+     * @param messageObject
+     * @return the reference date of the passed message
+     */
+    Date getMessageDate(MessageObject messageObject);
+
+    /**
+     * Process a message and return the new message, performing some transformation if needed.
+     * @param message the input message
+     * @param showToastOnError show a Toast if an error will occur
+     * @return the input message transformed if needed
+     */
+    void processMessage(MessageObject message, boolean showToastOnError);
+
     /**
      * Process a message and return the new message, performing some transformation if needed.
      * @param message the input message
@@ -63,4 +85,20 @@ Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messa
      */
     String asString(TLRPC.User user);
 
+    /**
+     * runs the initial import of messages in the group..only inf not did before
+     * @param objects
+     */
+    void processMessages(final long dialog_id, List<MessageObject> objects);
+
+    /**
+     *
+     * @param dialog_id
+     * @param dialogMessagesByIds
+     * @param excludeMessages
+     * @return the messages that has not been parsed successfully, since now, that are included in
+     * dialogMessagesByIds but not in excludeMessages
+     */
+    List<MessageObject> getUnParsedMessages(final long dialog_id, Map<Integer, MessageObject> dialogMessagesByIds,
+                                            List<MessageObject> excludeMessages);
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 9d8a46888..76bf54387 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -9,6 +9,7 @@
 import org.pollgram.decision.data.DBBean;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.ParsedMessage;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.ui.VotesManagerFragment;
@@ -26,7 +27,12 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.TreeMap;
 
 /**
  * Created by davide on 10/11/15.
@@ -140,15 +146,39 @@ public void notifyNewDecision(Decision decision, List<Option> options) {
         sendMessage(decision.getChatId(), message);
     }
 
+    @Override
+    public boolean isPollgramMessage(MessageObject message) {
+        long groupChatId = messageManager.getMessageGroupId(message);
+        if (groupChatId == -1)
+            return false;
+
+        String text = message.messageText.toString();
+        return messageManager.getMessageType(text) != null;
+    }
+
+    @Override
+    public Date getMessageDate(MessageObject messageObject) {
+        if (messageObject == null)
+            return null;
+        if (messageObject.messageOwner == null)
+            return null;
+        return new Date((long) (messageObject.messageOwner.date) * 1000);
+    }
+
     @Override
     public void processMessage(MessageObject message) {
+        processMessage(message, true);
+    }
+
+    @Override
+    public void processMessage(MessageObject message, boolean showToastOnError) {
         Log.d(LOG_TAG, "parsing message [" + message.messageText + "]");
         if (message.messageOwner == null) {
             Log.d(NOT_PARSED_TAG,"message.messageOwner not set");
             return;
         }
 
-        int groupChatId = messageManager.getMessageGroupId(message);
+        long groupChatId = messageManager.getMessageGroupId(message);
         if (groupChatId == -1){
             Log.d(NOT_PARSED_TAG,"group chat id not found");
             return;
@@ -161,8 +191,15 @@ public void processMessage(MessageObject message) {
             return;
         }
 
+        int messageId = message.messageOwner.id;
+        if (pollgramDAO.hasBeenParsed(groupChatId, messageId)) {
+            Log.d(NOT_PARSED_TAG,"it has already been parsed message["+messageId+"] group["+groupChatId+"]");
+            return;
+        }
+
         int userId = message.messageOwner.from_id;
-        Date messageDate = new Date((long)(message.messageOwner.date)*1000);
+        Date messageDate = getMessageDate(message);
+        boolean parsedSuccessfully = true;
 
         try {
             switch (msgType) {
@@ -208,12 +245,21 @@ public void processMessage(MessageObject message) {
                         pollgramDAO.save(v);
                     break;
                 }
+                default: {
+                    Log.e(NOT_PARSED_TAG,"unknown message type["+msgType+"]");
+                }
             }
+
         } catch (PollgramParseException e){
-            Toast.makeText(ApplicationLoader.applicationContext,
-                    "Error process message: "+ e.getMessage(), Toast.LENGTH_LONG).show();
+            parsedSuccessfully = false;
+            if (showToastOnError) {
+                Toast.makeText(ApplicationLoader.applicationContext,
+                        "Error process message: " + e.getMessage(), Toast.LENGTH_LONG).show();
+            }
             Log.e(LOG_TAG,"Error parsing message ["+text+"]",e);
         }
+
+        pollgramDAO.setMessageAsParsed(groupChatId,messageId, parsedSuccessfully);
     }
 
     protected void sendMessage(long groupChatId, String message) {
@@ -269,7 +315,7 @@ public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObjec
         if (type == null) {
             throw new PollgramDAOException("Not a pollgram message");
         }
-        int groupChatId = messageManager.getMessageGroupId(messageObject);
+        long groupChatId = messageManager.getMessageGroupId(messageObject);
         if (groupChatId == -1) {
             throw new PollgramDAOException("Not a group chat message");
         }
@@ -292,4 +338,46 @@ public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObjec
         return  bundle;
     }
 
+
+    @Override
+    public void processMessages(final long dialog_id, List<MessageObject> objects) {
+        long groupChatId = messageManager.getMessageGroupId(dialog_id);
+        Log.i(LOG_TAG, "Messages not imported yet for group [" + groupChatId + "] importing " + objects.size() + " messages");
+        SortedMap<Date, MessageObject> timeOrderedPollgramMessages = new TreeMap<Date, MessageObject>();
+        for (MessageObject messageObject : objects) {
+            if (isPollgramMessage(messageObject)) {
+                Date d = getMessageDate(messageObject);
+                timeOrderedPollgramMessages.put(d, messageObject);
+            }
+        }
+        for (Date d : timeOrderedPollgramMessages.keySet()) {
+            MessageObject messageObject = timeOrderedPollgramMessages.get(d);
+            Log.d("Pollgram", "Parsing message date[" + d + "] message["+messageObject.messageText+"]");
+            processMessage(messageObject, false);
+        }
+    }
+
+    @Override
+    public List<MessageObject> getUnParsedMessages(final long dialog_id, Map<Integer, MessageObject> dialogMessagesByIds,
+                                                   List<MessageObject> excludeMessages) {
+        Set<Integer> excludeMessagesSet = new HashSet<>();
+        for (MessageObject mo : excludeMessages) {
+            if (mo.messageOwner != null)
+                excludeMessagesSet.add(mo.messageOwner.id);
+        }
+
+        long groupChatId = messageManager.getMessageGroupId(dialog_id);
+        List<ParsedMessage> unparsed = pollgramDAO.getUnparsedMessages(groupChatId);
+        List<MessageObject> outList = new ArrayList<>();
+        for (ParsedMessage pm : unparsed){
+            if (excludeMessagesSet.contains(pm.getMessageId()))
+                continue;
+            MessageObject msgObj = dialogMessagesByIds.get(pm.getMessageId());
+            if (msgObj == null)
+                Log.w(LOG_TAG, "Message not found in dialogMessagesByIds map for id ["+pm.getMessageId()+"]");
+            else
+                outList.add(msgObj);
+        }
+        return outList;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index de4109496..2128f5e26 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -290,9 +290,14 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
                 TextView tvOption = new TextView(getContext());
                 tvOption.setText(option.getTitle());
                 tvOption.setTypeface(tvOption.getTypeface(), Typeface.BOLD);
-                tvOption.setBackgroundResource(R.drawable.cell_normal);
                 UIUtils.setDynamicTextSize(tvOption);
-                add2Row(row, tvOption, firstRowHeight);
+
+                LinearLayout rowLayout = new LinearLayout(getContext());
+                rowLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, firstRowHeight));
+                rowLayout.setBackgroundResource(R.drawable.cell_normal);
+                rowLayout.addView(tvOption);
+
+                add2Row(row, rowLayout, firstRowHeight);
             }
             tableLayout.addView(row);
             fixedColumn.addView(emptyCell, ViewGroup.LayoutParams.WRAP_CONTENT, firstRowHeight);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index f611fa57f..d4ffaa2be 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -430,7 +430,6 @@ public void run() {
             Integer newMsgId = (Integer) args[1];
             Long did = (Long) args[3];
             MessageObject obj = dialogMessage.get(did);
-            pollgramService.processMessage(obj);
             if (obj != null && obj.getId() == msgId) {
                 obj.messageOwner.id = newMsgId;
                 obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
@@ -862,7 +861,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         }
                         message.dialog_id = dialog_id;
                         MessageObject msg = new MessageObject(message, usersLocal, chatsLocal, true);
-                        pollgramService.processMessage(msg);
                         objects.add(msg);
                     }
 
@@ -2016,6 +2014,9 @@ public void run() {
                         }
                     }
                 }
+                pollgramService.processMessages(dialog_id, objects);
+                pollgramService.processMessages(dialog_id, pollgramService.getUnParsedMessages(dialog_id, dialogMessagesByIds, objects));
+
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
@@ -2651,7 +2652,6 @@ public void run() {
                         }
                     }
                     MessageObject messageObject = new MessageObject(message, usersDict, chatsDict, false);
-                    pollgramService.processMessage(messageObject);
                     new_dialogMessage.put(messageObject.getDialogId(), messageObject);
                 }
                 for (int a = 0; a < dialogsRes.dialogs.size(); a++) {
@@ -4372,7 +4372,6 @@ public void run() {
                                                 arr = new ArrayList<>();
                                                 messages.put(uid, arr);
                                             }
-                                            pollgramService.processMessage(obj);
                                             arr.add(obj);
                                         }
 
@@ -4691,10 +4690,10 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
                     message.media = new TLRPC.TL_messageMediaEmpty();
                     MessagesStorage.lastPtsValue = updates.pts;
                     final MessageObject obj = new MessageObject(message, null, true);
+                    // callend when a new message is received
                     pollgramService.processMessage(obj);
 
 
-
                     final ArrayList<MessageObject> objArr = new ArrayList<>();
                     objArr.add(obj);
                     ArrayList<TLRPC.Message> arr = new ArrayList<>();
@@ -5145,7 +5144,6 @@ public void run() {
                 messagesArr.add(message);
                 ImageLoader.saveMessageThumbs(message);
                 MessageObject obj = new MessageObject(message, usersDict, chatsDict, true);
-                pollgramService.processMessage(obj);
                 if (obj.type == 11) {
                     interfaceUpdateMask |= UPDATE_MASK_CHAT_AVATAR;
                 } else if (obj.type == 10) {
@@ -5277,7 +5275,6 @@ public void run() {
 
                     messagesArr.add(newMessage);
                     MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, true);
-                    pollgramService.processMessage(obj);
                     ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
                     if (arr == null) {
                         arr = new ArrayList<>();
@@ -5326,7 +5323,6 @@ public void run() {
 
                 messagesArr.add(newMessage);
                 MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, true);
-                pollgramService.processMessage(obj);
                 ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
                 if (arr == null) {
                     arr = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index f84498efd..2be4e4ea1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -40,36 +40,40 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.messenger.AndroidUtilities;
+import org.pollgram.R;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
+import org.telegram.messenger.Utilities;
 import org.telegram.messenger.query.BotQuery;
 import org.telegram.messenger.query.SharedMediaQuery;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.NotificationCenter;
-import org.pollgram.R;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BackDrawable;
-import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.AboutLinkCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.EmptyCell;
@@ -79,14 +83,10 @@
 import org.telegram.ui.Cells.TextDetailCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
 import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.AvatarUpdater;
 import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.IdenticonDrawable;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
