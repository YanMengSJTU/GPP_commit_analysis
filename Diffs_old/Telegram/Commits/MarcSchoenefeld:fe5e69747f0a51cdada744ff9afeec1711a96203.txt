diff --git a/TMessagesProj/jni/audio.c b/TMessagesProj/jni/audio.c
index b2290cceb..238a99be3 100644
--- a/TMessagesProj/jni/audio.c
+++ b/TMessagesProj/jni/audio.c
@@ -191,12 +191,14 @@ static void comment_init(char **comments, int *length, const char *vendor_string
     int user_comment_list_length = 0;
     size_t len = 8 + 4 + vendor_length + 4;
     char *p = (char *)malloc(len);
+    if (p) {
     memcpy(p, "OpusTags", 8);
     writeint(p, 8, vendor_length);
     memcpy(p + 12, vendor_string, vendor_length);
     writeint(p, 12 + vendor_length, user_comment_list_length);
     *length = len;
     *comments = p;
+    }
 }
 
 static void comment_pad(char **comments, int* length, size_t amount) {
@@ -205,11 +207,13 @@ static void comment_pad(char **comments, int* length, size_t amount) {
         // Make sure there is at least amount worth of padding free, and round up to the maximum that fits in the current ogg segments
         size_t newlen = (*length + amount + 255) / 255 * 255 - 1;
         p = realloc(p, newlen);
-        for (int32_t i = *length; i < newlen; i++) {
-            p[i] = 0;
+        if (p) {
+            for (int32_t i = *length; i < newlen; i++) {
+                p[i] = 0;
+            }
+            *comments = p;
+            *length = newlen;
         }
-        *comments = p;
-        *length = newlen;
     }
 }
 
@@ -327,7 +331,7 @@ int initRecorder(const char *path) {
     
     min_bytes = max_frame_bytes = (1275 * 3 + 7) * header.nb_streams;
     _packet = malloc(max_frame_bytes);
-    
+    /* _packet == 0  ?? */
     result = opus_encoder_ctl(_encoder, OPUS_SET_BITRATE(bitrate));
     if (result != OPUS_OK) {
         LOGE("Error OPUS_SET_BITRATE returned: %s", opus_strerror(result));
@@ -358,7 +362,8 @@ int initRecorder(const char *path) {
     }
     
     unsigned char header_data[100];
-    int packet_size = opus_header_to_packet(&header, header_data, 100);
+    int packet_size = opus_header_to
+        (&header, header_data, 100);
     op.packet = header_data;
     op.bytes = packet_size;
     op.b_o_s = 1;
@@ -546,6 +551,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform2(JN
 
     const int32_t resultSamples = 100;
     uint16_t *samples = malloc(100 * 2);
+    /* in ideal world, this would always succeed */
     uint64_t sampleIndex = 0;
     uint16_t peakSample = 0;
     int32_t sampleRate = (int32_t) max(1, length / resultSamples);
@@ -586,6 +592,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform2(JN
     jbyteArray *result = (*env)->NewByteArray(env, bitstreamLength);
     if (result) {
         uint8_t *bytes = malloc(bitstreamLength + 4);
+        /* could fail, who cares? */
         memset(bytes, 0, bitstreamLength + 4);
         for (int32_t i = 0; i < resultSamples; i++) {
             int32_t value = min(31, abs((int32_t) samples[i]) * 31 / peak);
@@ -616,7 +623,10 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform(JNI
         size_t bufferSize = 1024 * 128;
         if (sampleBuffer == NULL) {
             sampleBuffer = malloc(bufferSize);
+            /* and end up still with NULL, and now? */
         }
+        
+        /* so what if samples == 0 or sampleBuffer == 0 */  
         uint64_t sampleIndex = 0;
         uint16_t peakSample = 0;
 
@@ -664,6 +674,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform(JNI
         result = (*env)->NewByteArray(env, bitstreamLength);
         if (result) {
             uint8_t *bytes = malloc(bitstreamLength + 4);
+            /* memset on NULL, who wants that? */ 
             memset(bytes, 0, bitstreamLength + 4);
 
             for (int32_t i = 0; i < resultSamples; i++) {
