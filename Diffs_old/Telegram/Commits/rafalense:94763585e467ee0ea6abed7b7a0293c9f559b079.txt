diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java
new file mode 100644
index 000000000..a844e6555
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java
@@ -0,0 +1,600 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.ColorSelectorDialog;
+
+import java.io.File;
+import java.util.ArrayList;
+
+import static org.telegram.ui.Components.ColorSelectorDialog.OnColorChangedListener;
+
+public class ThemingActivity extends BaseFragment {
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+
+    private static final String TAG = "ThemingActivity";
+
+    private boolean reseting = false;
+    private boolean saving = false;
+
+    private int generalSection2Row;
+    private int themeColorRow;
+    private int screensSectionRow;
+    private int screensSection2Row;
+    private int chatsRow;
+    private int chatRow;
+    private int contactsRow;
+
+    private int themesSectionRow;
+    private int themesSection2Row;
+    private int resetThemeRow;
+    private int saveThemeRow;
+    private int applyThemeRow;
+
+    private int rowCount;
+
+    public final static int CENTER = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        generalSection2Row = rowCount++;
+        themeColorRow = rowCount++;
+
+        screensSectionRow = rowCount++;
+        screensSection2Row = rowCount++;
+        chatsRow = rowCount++;
+        chatRow = rowCount++;
+        contactsRow = rowCount++;
+
+        themesSectionRow = rowCount++;
+        themesSection2Row = rowCount++;
+        saveThemeRow = rowCount++;
+        applyThemeRow = rowCount++;
+        resetThemeRow = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        if(AndroidUtilities.needRestart){
+            //AndroidUtilities.needRestart = false;
+            AndroidUtilities.restartApp();
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater) {
+        if (fragmentView == null) {
+            //SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(THEME_PREFS, Activity.MODE_PRIVATE);
+            //themeColor = themePrefs.getInt("themeColor", defThemeColor);
+            //actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
+            //actionBar.setBackgroundColor(themeColor);
+
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+
+            //actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setTitle(LocaleController.getString("Theming", R.string.Theming));
+
+            //plus
+            //TextView title = (TextView)getParentActivity().findViewById(R.id.action_bar_title);
+            //AndroidUtilities.paintActionBarHeader(getParentActivity(),actionBar,"chatsHeaderBackgroundColorCheck","");
+            //AndroidUtilities.setTVTextColor(getParentActivity(),title,"plus_header_title_color_check", Color.WHITE);
+            //plus*
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+            /*
+            ActionBarMenu menu = actionBar.createMenu();
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
+            item.addSubItem(logout, LocaleController.getString("LogOut", R.string.LogOut), 0);
+            */
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+
+                    if (i == themeColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt(color);
+                            }
+
+                        },preferences.getInt("themeColor", AndroidUtilities.defColor), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if(i == saveThemeRow){
+                        LayoutInflater li = LayoutInflater.from(getParentActivity());
+                        View promptsView = li.inflate(R.layout.editbox_dialog, null);
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setView(promptsView);
+                        final EditText userInput = (EditText) promptsView.findViewById(R.id.editTextDialogUserInput);
+                        builder.setMessage(LocaleController.getString("EnterName", R.string.EnterName));
+                        //builder.setTitle(LocaleController.getString("SaveTheme", R.string.SaveTheme));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (saving) {
+                                    return;
+                                }
+                                saving = true;
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        saving = false;
+                                        if (getParentActivity() != null) {
+                                            String pName = userInput.getText().toString();
+                                            AndroidUtilities.setStringPref(getParentActivity(),"themeName",pName);
+                                            AndroidUtilities.savePreferencesToSD(getParentActivity(), AndroidUtilities.THEME_PREFS+".xml", pName+".xml", true);
+                                            AndroidUtilities.copyWallpaperToSD(getParentActivity(), pName, true);
+                                            //Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("SaveThemeToastText", R.string.SaveThemeToastText), Toast.LENGTH_SHORT);
+                                            //toast.show();
+                                        }
+                                    }
+                                });
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    }  else if (i == applyThemeRow) {
+                        DocumentSelectActivity fragment = new DocumentSelectActivity();
+                        fragment.fileFilter = ".xml";
+                        fragment.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
+                            @Override
+                            public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
+                                final String xmlFile = files.get(0);
+                                File themeFile = new File(xmlFile);
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("ApplyTheme", R.string.ApplyTheme));
+                                builder.setMessage(themeFile.getName());
+                                final String wName = xmlFile.substring(0, xmlFile.lastIndexOf(".")) + "_wallpaper.jpg";
+                                File wFile = new File(wName);
+                                if(wFile.exists()){
+                                    builder.setMessage(themeFile.getName()+"\n"+wFile.getName());
+                                    //Change Stock Background to set Custom Wallpaper
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                    int selectedBackground = preferences.getInt("selectedBackground", 1000001);
+                                    if (selectedBackground == 1000001) {
+                                        //File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                                        //if (!toFile.exists()) {
+                                            SharedPreferences.Editor editor = preferences.edit();
+                                            editor.putInt("selectedBackground", 113);
+                                            editor.putInt("selectedColor", 0);
+                                            editor.commit();
+                                        //}
+                                    }
+                                }
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                    if(AndroidUtilities.loadPrefFromSD(getParentActivity(), xmlFile) == 4){
+                                                        AndroidUtilities.loadWallpaperFromSDPath(getParentActivity(), wName);
+                                                        AndroidUtilities.restartApp();
+                                                    }
+                                            }
+                                        });
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                showAlertDialog(builder);
+                            }
+
+                            @Override
+                            public void startDocumentSelectActivity() {}
+                        });
+                        presentFragment(fragment);
+                    } else if(i == resetThemeRow){
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
+                        builder.setTitle(LocaleController.getString("ResetThemeSettings", R.string.ResetThemeSettings));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (reseting) {
+                                    return;
+                                }
+                                reseting = true;
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                reseting = false;
+                                                SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+                                                SharedPreferences.Editor editor = themePrefs.edit();
+                                                editor.clear();
+                                                editor.commit();
+                                                //Stock Background
+                                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                                editor = preferences.edit();
+                                                editor.putInt("selectedBackground", 1000001);
+                                                editor.putInt("selectedColor", 0);
+                                                editor.commit();
+                                                File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                                                if (toFile.exists()) {
+                                                    toFile.delete();
+                                                }
+                                                fixLayout();
+                                                if (getParentActivity() != null) {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetThemeToastText", R.string.ResetThemeToastText), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                }
+                                            }
+                                });
+                                AndroidUtilities.needRestart = true;
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == chatsRow) {
+                        presentFragment(new ThemingChatsActivity());
+                    } else if (i == chatRow) {
+                        presentFragment(new ThemingChatActivity());
+                    } else if (i == contactsRow) {
+                        presentFragment(new ThemingContactsActivity());
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    if (i == themeColorRow) {
+                        commitInt(AndroidUtilities.defColor);
+                    }
+                    return true;
+                }
+            });
+
+            frameLayout.addView(actionBar);
+
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void showAttachmentError() {
+        if (getParentActivity() == null) {
+            return;
+        }
+        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
+        toast.show();
+    }
+/*
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == 0) {
+
+            } else if (requestCode == 22) {
+                if (data == null || data.getData() == null) {
+                    showAttachmentError();
+                    return;
+                }
+                String tempPath = Utilities.getPath(data.getData());
+                String originalPath = tempPath;
+                if (tempPath == null) {
+                    originalPath = data.toString();
+                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
+                }
+                if (tempPath == null) {
+                    showAttachmentError();
+                    return;
+                }
+                Toast toast = Toast.makeText(getParentActivity(), tempPath + "\n " + originalPath, Toast.LENGTH_SHORT);
+                toast.show();
+                //SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, Long.parseLong(null));
+            }
+        }
+    }*/
+/*
+    private void saveThemeDialog(){
+
+        LayoutInflater li = LayoutInflater.from(getParentActivity());
+        View promptsView = li.inflate(R.layout.editbox_dialog, null);
+        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getParentActivity());
+        alertDialogBuilder.setView(promptsView);
+        final EditText userInput = (EditText) promptsView.findViewById(R.id.editTextDialogUserInput);
+
+        alertDialogBuilder
+                .setCancelable(false)
+                .setPositiveButton(R.string.ok,
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog,int id) {
+                                savePrefs(Utils.this);
+                                String pName = userInput.getText().toString();
+                                functions.savePreferencesToSD(Utils.this,my_pref_file_name+".xml",pName+".xml",true);
+                                functions.copyWallpaperToSD(Utils.this,pName,true);
+                            }
+                        })
+                .setNegativeButton(R.string.cancel,
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog,int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alertDialog = alertDialogBuilder.create();
+        alertDialog.show();
+    }*/
+
+    private void commitInt(int i){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("themeColor", i);
+        //Reset Theme Colors
+        editor.putInt("chatsHeaderColor", i);
+        editor.putInt("chatsCountBGColor", i);
+        editor.putInt("chatsChecksColor", i);
+        editor.putInt("chatsParticipantColor", AndroidUtilities.setDarkColor(i, 0x15));
+        editor.putInt("chatsFloatingBGColor", i);
+
+        editor.putInt("chatHeaderColor", i);
+        editor.putInt("chatRBubbleColor", AndroidUtilities.setDarkColor(i, -0x80));
+        editor.putInt("chatStatusColor", AndroidUtilities.setDarkColor(i, -0x40));
+        editor.putInt("chatRTimeColor", AndroidUtilities.setDarkColor(i, 0x15));
+        editor.putInt("chatEmojiViewTabColor", AndroidUtilities.setDarkColor(i, 0x15));
+        editor.putInt("chatChecksColor", i);
+        editor.putInt("chatSendIconColor", i);
+
+        editor.putInt("contactsHeaderColor", i);
+        editor.putInt("contactsOnlineColor", AndroidUtilities.setDarkColor(i, 0x15));
+
+        editor.commit();
+        fixLayout();
+        AndroidUtilities.themeColor = i;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    //needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                return false;
+            }
+        });
+        listView.setAdapter(listAdapter);
+        actionBar.setBackgroundColor(AndroidUtilities.getIntColor("themeColor"));
+
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return  i == themeColorRow || i == chatsRow || i == chatRow || i == contactsRow || i == resetThemeRow || i == saveThemeRow || i == applyThemeRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new ShadowSectionCell(mContext);
+                }
+            }
+            else if (type == 1) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == generalSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("General", R.string.General));
+                } else if (i == screensSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Screens", R.string.Screens));
+                } else if (i == themesSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Themes", R.string.Themes));
+                }
+            }
+            else if (type == 2) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == chatsRow) {
+                    textCell.setText(LocaleController.getString("MainScreen", R.string.MainScreen), true);
+                } else if (i == chatRow) {
+                    textCell.setText(LocaleController.getString("ChatScreen", R.string.ChatScreen), true);
+                } else if (i == contactsRow) {
+                    textCell.setText(LocaleController.getString("ContactsScreen", R.string.ContactsScreen), true);
+                }
+
+            }
+            else if (type == 3) {
+                if (view == null) {
+                    view = new TextDetailSettingsCell(mContext);
+                }
+                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
+                if (i == resetThemeRow) {
+                    textCell.setMultilineDetail(true);
+                    textCell.setTextAndValue(LocaleController.getString("ResetThemeSettings", R.string.ResetThemeSettings), LocaleController.getString("ResetThemeSettingsSum", R.string.ResetThemeSettingsSum), false);
+                } else if (i == saveThemeRow) {
+                    textCell.setMultilineDetail(true);
+                    textCell.setTextAndValue(LocaleController.getString("SaveTheme", R.string.SaveTheme), LocaleController.getString("SaveThemeSum", R.string.SaveThemeSum), false);
+                }  else if (i == applyThemeRow) {
+                    textCell.setMultilineDetail(true);
+                    textCell.setTextAndValue(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), LocaleController.getString("ApplyThemeSum", R.string.ApplyThemeSum), false);
+                }
+            }
+            else if (type == 4){
+                if (view == null) {
+                    view = new TextColorCell(mContext);
+                }
+                TextColorCell textCell = (TextColorCell) view;
+                if (i == themeColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("themeColor", R.string.themeColor), AndroidUtilities.getIntColor("themeColor"), true);
+                }
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if ( i == screensSectionRow || i == themesSectionRow ) {
+                return 0;
+            }
+            else if ( i == generalSection2Row || i == screensSection2Row || i == themesSection2Row) {
+                return 1;
+            }
+            else if ( i == chatsRow ) {
+                return 2;
+            }
+            else if ( i == resetThemeRow || i == saveThemeRow || i == applyThemeRow) {
+                return 3;
+            }
+            else if ( i == themeColorRow) {
+                return 4;
+            }
+            else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 5;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java
new file mode 100644
index 000000000..f7c807651
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java
@@ -0,0 +1,896 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.ColorSelectorDialog;
+import org.telegram.ui.Components.NumberPicker;
+
+import static org.telegram.ui.Components.ColorSelectorDialog.OnColorChangedListener;
+
+public class ThemingChatActivity extends BaseFragment {
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+
+    private static final String TAG = "ThemingChatsActivity";
+
+    private int headerSection2Row;
+    private int headerColorRow;
+    private int rowsSectionRow;
+    private int rowsSection2Row;
+    private int rBubbleColorRow;
+    private int lBubbleColorRow;
+    private int rTextColorRow;
+    private int textSizeRow;
+    private int lTextColorRow;
+    private int rTimeColorRow;
+    private int lTimeColorRow;
+    private int checksColorRow;
+    private int dateBubbleColorRow;
+    private int nameColorRow;
+    private int nameSizeRow;
+    private int statusColorRow;
+    private int statusSizeRow;
+    private int dateColorRow;
+    private int dateSizeRow;
+    private int timeSizeRow;
+    private int editTextColorRow;
+    private int editTextSizeRow;
+    private int editTextBGColorRow;
+    private int emojiViewBGColorRow;
+    private int emojiViewTabColorRow;
+    private int sendColorRow;
+
+    private int rowCount;
+
+    public final static int CENTER = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        headerSection2Row = rowCount++;
+        headerColorRow = rowCount++;
+
+        nameSizeRow = rowCount++;
+        nameColorRow = rowCount++;
+        statusSizeRow = rowCount++;
+        statusColorRow = rowCount++;
+
+        rowsSectionRow = rowCount++;
+        rowsSection2Row = rowCount++;
+
+        textSizeRow = rowCount++;
+        rTextColorRow = rowCount++;
+        //lTextColorRow = rowCount++;
+
+        timeSizeRow = rowCount++;
+        rTimeColorRow = rowCount++;
+        lTimeColorRow = rowCount++;
+        checksColorRow = rowCount++;
+
+        dateSizeRow = rowCount++;
+        dateColorRow = rowCount++;
+
+        rBubbleColorRow = rowCount++;
+        lBubbleColorRow = rowCount++;
+        dateBubbleColorRow = rowCount++;
+
+        sendColorRow = rowCount++;
+        editTextSizeRow = rowCount++;
+        editTextColorRow = rowCount++;
+        editTextBGColorRow = rowCount++;
+
+        emojiViewBGColorRow = rowCount++;
+        emojiViewTabColorRow = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater) {
+        if (fragmentView == null) {
+
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setTitle(LocaleController.getString("ChatScreen", R.string.ChatScreen));
+
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+
+                    SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+
+                    if (i == headerColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatHeaderColor", color);
+                            }
+
+                        },themePrefs.getInt("chatHeaderColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == rBubbleColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatRBubbleColor", color);
+                            }
+
+                        },themePrefs.getInt("chatRBubbleColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x80)), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == lBubbleColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatLBubbleColor", color);
+                            }
+
+                        },themePrefs.getInt("chatLBubbleColor", 0xffffffff), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == rTextColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatRTextColor", color);
+                            }
+
+                        },themePrefs.getInt("chatRTextColor", 0xff000000), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == lTextColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatLTextColor", color);
+                            }
+
+                        },themePrefs.getInt("chatLTextColor", 0xff000000), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == rTimeColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatRTimeColor", color);
+                            }
+
+                        },themePrefs.getInt("chatRTimeColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == lTimeColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatLTimeColor", color);
+                            }
+
+                        },themePrefs.getInt("chatLTimeColor", 0xffa1aab3), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == dateBubbleColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatDateBubbleColor", color);
+                            }
+
+                        },themePrefs.getInt("chatDateBubbleColor", 0x59000000), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == nameColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatNameColor", color);
+                            }
+
+                        },themePrefs.getInt("chatNameColor", 0xffffffff), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == sendColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatSendIconColor", color);
+                            }
+
+                        },themePrefs.getInt("chatSendIconColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == editTextColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatEditTextColor", color);
+                            }
+
+                        },themePrefs.getInt("chatEditTextColor", 0xff000000), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == editTextBGColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatEditTextBGColor", color);
+                            }
+
+                        },themePrefs.getInt("chatEditTextBGColor", 0xffffffff), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == emojiViewBGColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatEmojiViewBGColor", color);
+                            }
+
+                        },themePrefs.getInt("chatEmojiViewBGColor", 0xff222222), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == emojiViewTabColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatEmojiViewTabColor", color);
+                            }
+
+                        },themePrefs.getInt("chatEmojiViewTabColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), CENTER, 0, true);
+
+                        colorDialog.show();
+                    } else if (i == statusColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatStatusColor", color);
+                            }
+
+                        },themePrefs.getInt("chatStatusColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x40)), CENTER, 0, false);
+
+                        colorDialog.show();
+                    }  else if (i == dateColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatDateColor", color);
+                            }
+
+                        },themePrefs.getInt("chatDateColor", 0xffffffff), CENTER, 0, false);
+                        colorDialog.show();
+                    } else if (i == checksColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatChecksColor", color);
+                            }
+
+                        },themePrefs.getInt("chatChecksColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, true);
+                        colorDialog.show();
+                    } else if (i == nameSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("NameSize", R.string.NameSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatNameSize", 18);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatNameSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == statusSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("StatusSize", R.string.StatusSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatStatusSize", 14);
+                        numberPicker.setMinValue(8);
+                        numberPicker.setMaxValue(22);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if(numberPicker.getValue() != currentValue){
+                                    commitInt("chatStatusSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == textSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatTextSize", 16);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatTextSize", numberPicker.getValue());
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putInt("fons_size", numberPicker.getValue());
+                                    MessagesController.getInstance().fontSize = numberPicker.getValue();
+                                    editor.commit();
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == timeSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("TimeSize", R.string.TimeSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatTimeSize", 12);
+                        numberPicker.setMinValue(8);
+                        numberPicker.setMaxValue(20);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatTimeSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == dateSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("DateSize", R.string.DateSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatDateSize", 16);
+                        numberPicker.setMinValue(8);
+                        numberPicker.setMaxValue(20);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatDateSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }  else if (i == editTextSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("EditTextSize", R.string.EditTextSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatEditTextSize", 18);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(28);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatEditTextSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    if (i == headerColorRow) {
+                        resetInt("chatHeaderColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == rBubbleColorRow) {
+                        resetInt("chatRBubbleColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x80));
+                    } else if (i == lBubbleColorRow) {
+                        resetInt("chatLBubbleColor", 0xffffffff);
+                    } else if (i == rTextColorRow) {
+                        resetInt("chatRTextColor", 0xff000000);
+                    } else if (i == lTextColorRow) {
+                        resetInt("chatLTextColor", 0xff000000);
+                    } else if (i == nameColorRow) {
+                        resetInt("chatNameColor", 0xffffffff);
+                    } else if (i == nameSizeRow) {
+                        resetInt("chatNameSize", 17);
+                    } else if (i == statusColorRow) {
+                        resetInt("chatStatusColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x40));
+                    } else if (i == statusSizeRow) {
+                        resetInt("chatStatusSize", 14);
+                    } else if (i == rTimeColorRow) {
+                        resetInt("chatRTimeColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15));
+                    } else if (i == lTimeColorRow) {
+                        resetInt("chatLTimeColor", 0xffa1aab3);
+                    } else if (i == dateColorRow) {
+                        resetInt("chatDateColor", 0xffffffff);
+                    } else if (i == checksColorRow) {
+                        resetInt("chatChecksColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == textSizeRow) {
+                        resetInt("chatTextSize", 16);
+                    } else if (i == timeSizeRow) {
+                        resetInt("chatTimeSize", 12);
+                    } else if (i == dateSizeRow) {
+                        resetInt("chatDateSize", 16);
+                    } else if (i == dateBubbleColorRow) {
+                        resetInt("chatDateBubbleColor", 0x59000000);
+                    } else if (i == sendColorRow) {
+                        resetInt("chatSendIconColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == editTextColorRow) {
+                        resetInt("chatEditTextColor", 0xff000000);
+                    } else if (i == editTextSizeRow) {
+                        resetInt("chatEditTextSize", 18);
+                    } else if (i == editTextBGColorRow) {
+                        resetInt("chatEditTextBGColor", 0xffffffff);
+                    } else if (i == emojiViewBGColorRow) {
+                        resetInt("chatEmojiViewBGColor", 0xff222222);
+                    } else if (i == emojiViewTabColorRow) {
+                        resetInt("chatEmojiViewTabColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15));
+                    }
+                    return true;
+                }
+            });
+
+            frameLayout.addView(actionBar);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void resetInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.remove(key);
+        editor.commit();
+        if(key.equals("chatTextSize")){
+            preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            editor = preferences.edit();
+            editor.putInt("fons_size", value);
+            MessagesController.getInstance().fontSize = value;
+            editor.commit();
+        }
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    private void commitInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt(key, value);
+        editor.commit();
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    //needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                return false;
+            }
+        });
+        listView.setAdapter(listAdapter);
+        //actionBar.setBackgroundColor(AndroidUtilities.getIntColor("themeColor"));
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return  i == headerColorRow || i == rBubbleColorRow || i == lBubbleColorRow || i == nameColorRow || i == nameSizeRow || i == statusColorRow || i == statusSizeRow ||
+                    i == textSizeRow || i == timeSizeRow || i == dateColorRow || i == dateSizeRow || i == dateBubbleColorRow || i == rTextColorRow || i == lTextColorRow ||
+                    i == rTimeColorRow|| i == lTimeColorRow || i == checksColorRow || i == editTextSizeRow || i == editTextColorRow || i == sendColorRow || i == editTextBGColorRow ||
+                    i == emojiViewBGColorRow || i == emojiViewTabColorRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+            if (type == 0) {
+                if (view == null) {
+                    view = new ShadowSectionCell(mContext);
+                }
+            }
+            else if (type == 1) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == headerSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Header", R.string.Header));
+                } else if (i == rowsSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("ChatList", R.string.ChatList));
+                }
+            }
+            else if (type == 2) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == nameSizeRow) {
+                    int size = themePrefs.getInt("chatNameSize", AndroidUtilities.isTablet() ? 20 : 18);
+                    textCell.setTextAndValue(LocaleController.getString("NameSize", R.string.NameSize), String.format("%d", size), true);
+                } else if (i == statusSizeRow) {
+                    int size = themePrefs.getInt("chatStatusSize", AndroidUtilities.isTablet() ? 16 : 14);
+                    textCell.setTextAndValue(LocaleController.getString("StatusSize", R.string.StatusSize), String.format("%d", size), true);
+                } else if (i == textSizeRow) {
+                    int size = themePrefs.getInt("chatTextSize", AndroidUtilities.isTablet() ? 18 : 16);
+                    textCell.setTextAndValue(LocaleController.getString("TextSize", R.string.TextSize), String.format("%d", size), true);
+                } else if (i == timeSizeRow) {
+                    int size = themePrefs.getInt("chatTimeSize", AndroidUtilities.isTablet() ? 14 : 12);
+                    textCell.setTextAndValue(LocaleController.getString("TimeSize", R.string.TimeSize), String.format("%d", size), true);
+                } else if (i == dateSizeRow) {
+                    int size = themePrefs.getInt("chatDateSize", AndroidUtilities.isTablet() ? 18 : 16);
+                    textCell.setTextAndValue(LocaleController.getString("DateSize", R.string.DateSize), String.format("%d", size), true);
+                }  else if (i == editTextSizeRow) {
+                    int size = themePrefs.getInt("chatEditTextSize", AndroidUtilities.isTablet() ? 20 : 18);
+                    textCell.setTextAndValue(LocaleController.getString("EditTextSize", R.string.EditTextSize), String.format("%d", size), true);
+                }
+            }
+            else if (type == 3){
+                if (view == null) {
+                    view = new TextColorCell(mContext);
+                }
+
+                TextColorCell textCell = (TextColorCell) view;
+
+                if (i == headerColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("HeaderColor", R.string.HeaderColor), themePrefs.getInt("chatHeaderColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == rBubbleColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("RBubbleColor", R.string.RBubbleColor), themePrefs.getInt("chatRBubbleColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x80)), true);
+                } else if (i == lBubbleColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("LBubbleColor", R.string.LBubbleColor), themePrefs.getInt("chatLBubbleColor", 0xffffffff), true);
+                } else if (i == rTextColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("RTextColor", R.string.RTextColor), themePrefs.getInt("chatRTextColor", 0xff000000), true);
+                } else if (i == lTextColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("LTextColor", R.string.LTextColor), themePrefs.getInt("chatLTextColor", 0xff000000), true);
+                } else if (i == nameColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("NameColor", R.string.NameColor), themePrefs.getInt("chatNameColor", 0xffffffff), true);
+                } else if (i == statusColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("StatusColor", R.string.StatusColor), themePrefs.getInt("chatStatusColor", AndroidUtilities.getIntDarkerColor("themeColor",-0x40)), true);
+                } else if (i == rTimeColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("RTimeColor", R.string.RTimeColor), themePrefs.getInt("chatRTimeColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), true);
+                } else if (i == lTimeColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("LTimeColor", R.string.LTimeColor), themePrefs.getInt("chatLTimeColor", 0xffa1aab3), true);
+                } else if (i == checksColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("ChecksColor", R.string.ChecksColor), themePrefs.getInt("chatChecksColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == dateColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("DateColor", R.string.DateColor), themePrefs.getInt("chatDateColor", 0xffffffff), true);
+                } else if (i == dateBubbleColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("DateBubbleColor", R.string.DateBubbleColor), themePrefs.getInt("chatDateBubbleColor", 0x59000000), true);
+                } else if (i == sendColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("SendIcon", R.string.SendIcon), themePrefs.getInt("chatSendIconColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == editTextColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("EditTextColor", R.string.EditTextColor), themePrefs.getInt("chatEditTextColor", 0xff000000), true);
+                } else if (i == editTextBGColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("EditTextBGColor", R.string.EditTextBGColor), themePrefs.getInt("chatEditTextBGColor", 0xffffffff), true);
+                } else if (i == emojiViewBGColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("EmojiViewBGColor", R.string.EmojiViewBGColor), themePrefs.getInt("chatEmojiViewBGColor", 0xff222222), true);
+                } else if (i == emojiViewTabColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("EmojiViewTabColor", R.string.EmojiViewTabColor), themePrefs.getInt("chatEmojiViewTabColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), true);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if ( i == rowsSectionRow ) {
+                return 0;
+            }
+            else if ( i == headerSection2Row || i == rowsSection2Row ) {
+                return 1;
+            }
+            else if ( i == nameSizeRow ||  i == statusSizeRow || i == textSizeRow || i == timeSizeRow || i == dateSizeRow  || i == editTextSizeRow) {
+                return 2;
+            }
+
+            else if ( i == headerColorRow || i == rBubbleColorRow || i == lBubbleColorRow || i == nameColorRow || i == statusColorRow || i == dateColorRow || i == dateBubbleColorRow ||
+                    i == rTextColorRow || i == lTextColorRow || i == rTimeColorRow || i == lTimeColorRow || i == checksColorRow || i == sendColorRow || i == editTextColorRow || i == editTextBGColorRow ||
+                    i == emojiViewBGColorRow || i == emojiViewTabColorRow) {
+                return 3;
+            }
+            else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 4;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java
new file mode 100644
index 000000000..801dc5c82
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java
@@ -0,0 +1,678 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.ColorSelectorDialog;
+import org.telegram.ui.Components.NumberPicker;
+
+import static org.telegram.ui.Components.ColorSelectorDialog.OnColorChangedListener;
+
+public class ThemingChatsActivity extends BaseFragment {
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+
+    //private static final String TAG = "ThemingChatsActivity";
+
+    private int headerSection2Row;
+    private int headerColorRow;
+    private int rowsSectionRow;
+    private int rowsSection2Row;
+    private int rowColorRow;
+    private int nameColorRow;
+    private int checksColorRow;
+    private int muteColorRow;
+    private int nameSizeRow;
+    private int messageColorRow;
+    private int participantColorRow;
+    private int messageSizeRow;
+    private int timeColorRow;
+    private int timeSizeRow;
+    private int countColorRow;
+    private int countSizeRow;
+    private int countBGColorRow;
+    private int floatingPencilColorRow;
+    private int floatingBGColorRow;
+
+    private int rowCount;
+
+    public final static int CENTER = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        headerSection2Row = rowCount++;
+        headerColorRow = rowCount++;
+
+        rowsSectionRow = rowCount++;
+        rowsSection2Row = rowCount++;
+        rowColorRow = rowCount++;
+
+        nameColorRow = rowCount++;
+        nameSizeRow = rowCount++;
+        muteColorRow = rowCount++;
+        checksColorRow = rowCount++;
+
+        messageColorRow = rowCount++;
+        messageSizeRow = rowCount++;
+        participantColorRow = rowCount++;
+        timeColorRow = rowCount++;
+        timeSizeRow = rowCount++;
+        countColorRow = rowCount++;
+        countSizeRow = rowCount++;
+        countBGColorRow = rowCount++;
+
+        floatingPencilColorRow = rowCount++;
+        floatingBGColorRow = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater) {
+        if (fragmentView == null) {
+
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setTitle(LocaleController.getString("MainScreen", R.string.MainScreen));
+
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+
+                    SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+
+                    if (i == headerColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsHeaderColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsHeaderColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == rowColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsRowColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsRowColor", 0xffffffff), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == nameColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsNameColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsNameColor", 0xff000000), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == muteColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsMuteColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsMuteColor", 0xffa8a8a8), CENTER, 0, true);
+                        colorDialog.show();
+                    } else if (i == checksColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsChecksColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsChecksColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, true);
+                        colorDialog.show();
+                    } else if (i == messageColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsMessageColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsMessageColor", 0xff8f8f8f), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == participantColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsParticipantColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsParticipantColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == timeColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsTimeColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsTimeColor", 0xff999999), CENTER, 0, false);
+                        colorDialog.show();
+                    } else if (i == countColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsCountColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsCountColor", 0xffffffff), CENTER, 0, false);
+                        colorDialog.show();
+                    } else if (i == countBGColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsCountBGColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsCountBGColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, true);
+                        colorDialog.show();
+                    } else if (i == nameSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("NameSize", R.string.NameSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatsNameSize", 17);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatsNameSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == messageSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("MessageSize", R.string.MessageSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatsMessageSize", 16);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if(numberPicker.getValue() != currentValue){
+                                    commitInt("chatsMessageSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == timeSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("TimeDateSize", R.string.TimeDateSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatsTimeSize", 13);
+                        numberPicker.setMinValue(5);
+                        numberPicker.setMaxValue(25);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatsTimeSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == countSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("CountSize", R.string.CountSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("chatsCountSize", 13);
+                        numberPicker.setMinValue(8);
+                        numberPicker.setMaxValue(20);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("chatsCountSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == floatingPencilColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsFloatingPencilColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsFloatingPencilColor", 0xffffffff), CENTER, 0, true);
+                        colorDialog.show();
+                    } else if (i == floatingBGColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("chatsFloatingBGColor", color);
+                            }
+
+                        },themePrefs.getInt("chatsFloatingBGColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, true);
+                        colorDialog.show();
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    if (i == headerColorRow) {
+                        resetInt("chatsHeaderColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == rowColorRow) {
+                        resetInt("chatsRowColor", 0xffffffff);
+                    } else if (i == nameColorRow) {
+                        resetInt("chatsNameColor", 0xff000000);
+                    } else if (i == muteColorRow) {
+                        resetInt("chatsMuteColor", 0xffa8a8a8);
+                    } else if (i == checksColorRow) {
+                        resetInt("chatsChecksColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == nameSizeRow) {
+                        resetInt("chatsNameSize", 17);
+                    } else if (i == messageColorRow) {
+                        resetInt("chatsMessageColor", 0xff8f8f8f);
+                    } else if (i == participantColorRow) {
+                        resetInt("chatsParticipantColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15));
+                    } else if (i == messageSizeRow) {
+                        resetInt("chatsMessageSize", 16);
+                    } else if (i == timeColorRow) {
+                        resetInt("chatsTimeColor", 0xff999999);
+                    } else if (i == timeSizeRow) {
+                        resetInt("chatsTimeSize", 13);
+                    } else if (i == countColorRow) {
+                        resetInt("chatsCountColor", 0xffffffff);
+                    } else if (i == countSizeRow) {
+                        resetInt("chatsCountSize", 13);
+                    } else if (i == countBGColorRow) {
+                        resetInt("chatsCountBGColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == floatingPencilColorRow) {
+                        resetInt("chatsFloatingPencilColor", 0xffffffff);
+                    } else if (i == floatingBGColorRow) {
+                        resetInt("chatsFloatingBGColor", AndroidUtilities.getIntColor("themeColor"));
+                    }
+                    return true;
+                }
+            });
+
+            frameLayout.addView(actionBar);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void resetInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.remove(key);
+        editor.commit();
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    private void commitInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt(key, value);
+        editor.commit();
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    //needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                return false;
+            }
+        });
+        listView.setAdapter(listAdapter);
+        //actionBar.setBackgroundColor(AndroidUtilities.getIntColor("themeColor"));
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return  i == headerColorRow || i == rowColorRow || i == nameColorRow || i == muteColorRow || i == checksColorRow || i == nameSizeRow || i == messageColorRow || i == participantColorRow || i == messageSizeRow ||
+                    i == timeColorRow || i == timeSizeRow || i == countColorRow || i == countSizeRow || i == countBGColorRow || i == floatingPencilColorRow || i == floatingBGColorRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+            if (type == 0) {
+                if (view == null) {
+                    view = new ShadowSectionCell(mContext);
+                }
+            }
+            else if (type == 1) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == headerSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Header", R.string.Header));
+                } else if (i == rowsSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("ChatsList", R.string.ChatsList));
+                }
+            }
+            else if (type == 2) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == nameSizeRow) {
+                    int size = themePrefs.getInt("chatsNameSize", AndroidUtilities.isTablet() ? 19 : 17);
+                    textCell.setTextAndValue(LocaleController.getString("NameSize", R.string.NameSize), String.format("%d", size), true);
+                } else if (i == messageSizeRow) {
+                    int size = themePrefs.getInt("chatsMessageSize", AndroidUtilities.isTablet() ? 18 : 16);
+                    textCell.setTextAndValue(LocaleController.getString("MessageSize", R.string.MessageSize), String.format("%d", size), true);
+                } else if (i == timeSizeRow) {
+                    int size = themePrefs.getInt("chatsTimeSize", AndroidUtilities.isTablet() ? 15 : 13);
+                    textCell.setTextAndValue(LocaleController.getString("TimeDateSize", R.string.TimeDateSize), String.format("%d", size), true);
+                } else if (i == countSizeRow) {
+                    int size = themePrefs.getInt("chatsCountSize", AndroidUtilities.isTablet() ? 15 : 13);
+                    textCell.setTextAndValue(LocaleController.getString("CountSize", R.string.CountSize), String.format("%d", size), true);
+                }
+
+            }
+            else if (type == 3){
+                if (view == null) {
+                    view = new TextColorCell(mContext);
+                }
+
+                TextColorCell textCell = (TextColorCell) view;
+
+                if (i == headerColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("HeaderColor", R.string.HeaderColor), themePrefs.getInt("chatsHeaderColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == rowColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("RowColor", R.string.RowColor), themePrefs.getInt("chatsRowColor", 0xffffffff), true);
+                } else if (i == nameColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("NameColor", R.string.NameColor), themePrefs.getInt("chatsNameColor", 0xff000000), true);
+                } else if (i == muteColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("MuteColor", R.string.MuteColor), themePrefs.getInt("chatsMuteColor", 0xffa8a8a8), true);
+                } else if (i == checksColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("ChecksColor", R.string.ChecksColor), themePrefs.getInt("chatsChecksColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == messageColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("MessageColor", R.string.MessageColor), themePrefs.getInt("chatsMessageColor", 0xff8f8f8f), true);
+                } else if (i == participantColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("ParticipantColor", R.string.ParticipantColor), themePrefs.getInt("chatsParticipantColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), true);
+                } else if (i == timeColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("TimeDateColor", R.string.TimeDateColor), themePrefs.getInt("chatsTimeColor", 0xff999999), true);
+                } else if (i == countColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("CountColor", R.string.CountColor), themePrefs.getInt("chatsCountColor", 0xffffffff), true);
+                } else if (i == countBGColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("CountBGColor", R.string.CountBGColor), themePrefs.getInt("chatsCountBGColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == floatingPencilColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("FloatingPencilColor", R.string.FloatingPencilColor), themePrefs.getInt("chatsFloatingPencilColor", 0xffffffff), true);
+                } else if (i == floatingBGColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("FloatingBGColor", R.string.FloatingBGColor), themePrefs.getInt("chatsFloatingBGColor", AndroidUtilities.getIntColor("themeColor")), true);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if ( i == rowsSectionRow ) {
+                return 0;
+            }
+            else if ( i == headerSection2Row || i == rowsSection2Row ) {
+                return 1;
+            }
+            else if ( i == nameSizeRow ||  i == messageSizeRow || i == timeSizeRow || i == countSizeRow ) {
+                return 2;
+            }
+
+            else if ( i == headerColorRow || i == rowColorRow || i == nameColorRow || i == muteColorRow || i == checksColorRow || i == messageColorRow  || i == participantColorRow || i == timeColorRow || i == countColorRow
+                    || i == countBGColorRow || i == floatingPencilColorRow || i == floatingBGColorRow) {
+                return 3;
+            }
+            else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 4;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java
new file mode 100644
index 000000000..f86304bc1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java
@@ -0,0 +1,478 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextColorCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.ColorSelectorDialog;
+import org.telegram.ui.Components.NumberPicker;
+
+import static org.telegram.ui.Components.ColorSelectorDialog.OnColorChangedListener;
+
+public class ThemingContactsActivity extends BaseFragment {
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+
+    //private static final String TAG = "ThemingContactsActivity";
+
+    private int headerSection2Row;
+    private int headerColorRow;
+    private int rowsSectionRow;
+    private int rowsSection2Row;
+    private int rowColorRow;
+    private int nameColorRow;
+    private int nameSizeRow;
+    private int statusColorRow;
+    private int statusSizeRow;
+    private int onlineColorRow;
+
+
+    private int rowCount;
+
+    public final static int CENTER = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        headerSection2Row = rowCount++;
+        headerColorRow = rowCount++;
+
+        rowsSectionRow = rowCount++;
+        rowsSection2Row = rowCount++;
+        rowColorRow = rowCount++;
+        nameColorRow = rowCount++;
+        nameSizeRow = rowCount++;
+        statusColorRow = rowCount++;
+        statusSizeRow = rowCount++;
+        onlineColorRow = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater) {
+        if (fragmentView == null) {
+
+            actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+
+            if (AndroidUtilities.isTablet()) {
+                actionBar.setOccupyStatusBar(false);
+            }
+            actionBar.setTitle(LocaleController.getString("MainScreen", R.string.MainScreen));
+
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            listAdapter = new ListAdapter(getParentActivity());
+
+            fragmentView = new FrameLayout(getParentActivity());
+            FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+            listView = new ListView(getParentActivity());
+            listView.setDivider(null);
+            listView.setDividerHeight(0);
+            listView.setVerticalScrollBarEnabled(false);
+            AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
+            frameLayout.addView(listView);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+            layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP;
+            listView.setLayoutParams(layoutParams);
+            listView.setAdapter(listAdapter);
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+
+                    SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+
+                    if (i == headerColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("contactsHeaderColor", color);
+                            }
+
+                        },themePrefs.getInt("contactsHeaderColor", AndroidUtilities.getIntColor("themeColor")), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == rowColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("contactsRowColor", color);
+                            }
+
+                        },themePrefs.getInt("contactsRowColor", 0xffffffff), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == nameColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+                        view = li.inflate(R.layout.colordialog, null, false);
+
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("contactsNameColor", color);
+                            }
+
+                        },themePrefs.getInt("contactsNameColor", 0xff000000), CENTER, 0, false);
+
+                        colorDialog.show();
+                    } else if (i == statusColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("contactsStatusColor", color);
+                            }
+
+                        },themePrefs.getInt("contactsStatusColor", 0xffa8a8a8), CENTER, 0, false);
+
+                        colorDialog.show();
+                    }  else if (i == onlineColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt("contactsOnlineColor", color);
+                            }
+
+                        },themePrefs.getInt("contactsOnlineColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), CENTER, 0, false);
+                        colorDialog.show();
+                    } else if (i == nameSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("NameSize", R.string.NameSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("contactsNameSize", 17);
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("contactsNameSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == statusSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("StatusSize", R.string.StatusSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("contactsStatusSize", 14);
+                        numberPicker.setMinValue(10);
+                        numberPicker.setMaxValue(20);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if(numberPicker.getValue() != currentValue){
+                                    commitInt("contactsStatusSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    if (i == headerColorRow) {
+                        resetInt("contactsHeaderColor", AndroidUtilities.getIntColor("themeColor"));
+                    } else if (i == rowColorRow) {
+                        resetInt("contactsRowColor", 0xffffffff);
+                    } else if (i == nameColorRow) {
+                        resetInt("contactsNameColor", 0xff000000);
+                    } else if (i == nameSizeRow) {
+                        resetInt("contactsNameSize", 17);
+                    } else if (i == statusColorRow) {
+                        resetInt("contactsStatusColor", 0xffa8a8a8);
+                    } else if (i == statusSizeRow) {
+                        resetInt("contactsStatusSize", 14);
+                    } else if (i == onlineColorRow) {
+                        resetInt("contactsOnlineColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15));
+                    }
+                    return true;
+                }
+            });
+
+            frameLayout.addView(actionBar);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void resetInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.remove(key);
+        editor.commit();
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    private void commitInt(String key, int value){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt(key, value);
+        editor.commit();
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        if (fragmentView == null) {
+            return;
+        }
+        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    //needLayout();
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                return false;
+            }
+        });
+        listView.setAdapter(listAdapter);
+        //actionBar.setBackgroundColor(AndroidUtilities.getIntColor("themeColor"));
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return  i == headerColorRow || i == rowColorRow || i == nameColorRow || i == nameSizeRow || i == statusColorRow || i == statusSizeRow ||
+                    i == onlineColorRow ;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, Activity.MODE_PRIVATE);
+            if (type == 0) {
+                if (view == null) {
+                    view = new ShadowSectionCell(mContext);
+                }
+            }
+            else if (type == 1) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == headerSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("Header", R.string.Header));
+                } else if (i == rowsSection2Row) {
+                    ((HeaderCell) view).setText(LocaleController.getString("ContactsList", R.string.ContactsList));
+                }
+            }
+            else if (type == 2) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == nameSizeRow) {
+                    int size = themePrefs.getInt("contactsNameSize", AndroidUtilities.isTablet() ? 19 : 17);
+                    textCell.setTextAndValue(LocaleController.getString("NameSize", R.string.NameSize), String.format("%d", size), true);
+                } else if (i == statusSizeRow) {
+                    int size = themePrefs.getInt("contactsStatusSize", AndroidUtilities.isTablet() ? 16 : 14);
+                    textCell.setTextAndValue(LocaleController.getString("StatusSize", R.string.StatusSize), String.format("%d", size), true);
+                }
+
+            }
+            else if (type == 3){
+                if (view == null) {
+                    view = new TextColorCell(mContext);
+                }
+
+                TextColorCell textCell = (TextColorCell) view;
+
+                if (i == headerColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("HeaderColor", R.string.HeaderColor), themePrefs.getInt("contactsHeaderColor", AndroidUtilities.getIntColor("themeColor")), true);
+                } else if (i == rowColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("RowColor", R.string.RowColor), themePrefs.getInt("contactsRowColor", 0xffffffff), true);
+                } else if (i == nameColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("NameColor", R.string.NameColor), themePrefs.getInt("contactsNameColor", 0xff000000), true);
+                } else if (i == statusColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("StatusColor", R.string.StatusColor), themePrefs.getInt("contactsStatusColor", 0xffa8a8a8), true);
+                } else if (i == onlineColorRow) {
+                    textCell.setTextAndColor(LocaleController.getString("OnlineColor", R.string.OnlineColor), themePrefs.getInt("contactsOnlineColor", AndroidUtilities.getIntDarkerColor("themeColor",0x15)), true);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if ( i == rowsSectionRow ) {
+                return 0;
+            }
+            else if ( i == headerSection2Row || i == rowsSection2Row ) {
+                return 1;
+            }
+            else if ( i == nameSizeRow ||  i == statusSizeRow ) {
+                return 2;
+            }
+
+            else if ( i == headerColorRow || i == rowColorRow || i == nameColorRow || i == statusColorRow || i == onlineColorRow) {
+                return 3;
+            }
+            else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 4;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
