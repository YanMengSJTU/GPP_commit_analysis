diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
index b58b7faf3..54c75e364 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -1,5 +1,6 @@
 package org.telegram.messenger;
 
+import android.app.PendingIntent;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
@@ -7,17 +8,23 @@
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
+import android.media.AudioManager;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.IBinder;
+import android.provider.Settings;
 import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
 import android.widget.Toast;
 
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.client.RestTemplate;
+import org.telegram.ui.LaunchActivity;
 
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
 
 import DataSchema.Channel;
@@ -143,7 +150,8 @@ public void onLocationChanged(final Location loc)
                 loc.getLatitude();
                 loc.getLongitude();
                 int userId = UserConfig.getClientUserId();
-                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=2&lat=17.429549&long=78.3411581";
+                String userTag = UserConfig.getCurrentUser().first_name;
+                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=186345694&userTag=gaurav&lat=17.429549&long=78.3411581";
                 //"http://botchaapis.appspot.com/getchannels?userId=1&lat="+loc.getLatitude()+"&long="+loc.getLongitude();
                 final AsyncTask<Void, Void, List<Channel>> execute;
                 execute = new HttpRequestTask().execute();
@@ -152,10 +160,40 @@ public void onLocationChanged(final Location loc)
                 intent.putExtra("Longitude", loc.getLongitude());
                 intent.putExtra("Provider", loc.getProvider());
                 Toast.makeText(getApplicationContext(), "Changed. UserId: " + userId + ", Lat: " + loc.getLatitude() + ", Long: " + loc.getLongitude(), Toast.LENGTH_SHORT).show();
+                showScreenNotification();
                 sendBroadcast(intent);
             }
         }
 
+        public void showScreenNotification() {
+            HashMap<Integer, String> channelsAvailable = new HashMap<Integer, String>();
+            channelsAvailable.put(1, "StciHackathon");
+            channelsAvailable.put(2, "MSHydBuilding3");
+            channelsAvailable.put(3, "MSHyd");
+            NotificationCompat.Builder mBuilder;
+            Intent localIntent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+            localIntent.setFlags(32768);
+            PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, localIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+            mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                    .setContentTitle("New channels found")
+                    .setSmallIcon(R.drawable.notification)
+                    .setAutoCancel(true)
+                    .setNumber(1)
+                    .setContentIntent(contentIntent)
+                    .setGroup("messages")
+                    .setGroupSummary(true)
+                    .setColor(0xff2ca5e0);
+            mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
+            mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
+            mBuilder.setContentText("View new channels available at this location");
+            //mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText("View new channels"));
+            mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
+            //showExtraNotifications(mBuilder, true);
+            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
+            notificationManager.notify(1, mBuilder.build());
+            MessagesController.getInstance().isNewChannelsAvailable = true;
+        }
+
         public void onProviderDisabled(String provider)
         {
             Toast.makeText(getApplicationContext(), "Gps Disabled", Toast.LENGTH_SHORT).show();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index b524c3beb..7016429ae 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -48,15 +48,23 @@
 
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
-    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
-
-    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
-
-    private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
-
+    public static final int UPDATE_MASK_NAME = 1;
+    public static final int UPDATE_MASK_AVATAR = 2;
+    public static final int UPDATE_MASK_STATUS = 4;
+    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
+    public static final int UPDATE_MASK_CHAT_NAME = 16;
+    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
+    public static final int UPDATE_MASK_USER_PRINT = 64;
+    public static final int UPDATE_MASK_USER_PHONE = 128;
+    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
+    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
+    public static final int UPDATE_MASK_PHONE = 1024;
+    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
+    public static final int UPDATE_MASK_SEND_STATE = 4096;
+    public static final int UPDATE_MASK_CHANNEL = 8192;
+    public static final int UPDATE_MASK_CHAT_ADMINS = 16384;
+    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
+    private static volatile MessagesController Instance = null;
     public ArrayList<TLRPC.Dialog> dialogs = new ArrayList<>();
     public ArrayList<TLRPC.Dialog> dialogsServerOnly = new ArrayList<>();
     public ArrayList<TLRPC.Dialog> dialogsGroupsOnly = new ArrayList<>();
@@ -70,23 +78,38 @@
     public HashMap<Long, Integer> printingStringsTypes = new HashMap<>();
     public HashMap<Integer, HashMap<Long, Boolean>> sendingTypings = new HashMap<>();
     public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
+    public boolean isNewChannelsAvailable = false;
+    public boolean loadingBlockedUsers = false;
+    public ArrayList<Integer> blockedUsers = new ArrayList<>();
+    public boolean loadingDialogs = false;
+    public boolean dialogsEndReached = false;
+    public boolean gettingDifference = false;
+    public boolean updatingState = false;
+    public boolean firstGettingTask = false;
+    public boolean registeringForPush = false;
+    public boolean enableJoined = true;
+    public int fontSize = AndroidUtilities.dp(16);
+    public int maxGroupCount = 200;
+    public int maxBroadcastCount = 100;
+    public int maxMegagroupCount = 1000;
+    public int minGroupConvertSize = 200;
+    public int groupBigSize;
+    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
+    private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
     private int lastPrintingStringCount = 0;
-
     private SparseIntArray shortPollChannels = new SparseIntArray();
     private SparseIntArray needShortPollChannels = new SparseIntArray();
-
-    public boolean loadingBlockedUsers = false;
-    public ArrayList<Integer> blockedUsers = new ArrayList<>();
-
     private SparseArray<ArrayList<Integer>> channelViewsToSend = new SparseArray<>();
     private SparseArray<ArrayList<Integer>> channelViewsToReload = new SparseArray<>();
     private long lastViewsCheckTime;
-
     private HashMap<Integer, ArrayList<TLRPC.Updates>> updatesQueueChannels = new HashMap<>();
     private HashMap<Integer, Long> updatesStartWaitTimeChannels = new HashMap<>();
     private HashMap<Integer, Integer> channelsPts = new HashMap<>();
     private HashMap<Integer, Boolean> gettingDifferenceChannels = new HashMap<>();
-
     private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
     private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
     private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
@@ -99,83 +122,19 @@
     private ArrayList<Integer> loadingFullParticipants = new ArrayList<>();
     private ArrayList<Integer> loadedFullParticipants = new ArrayList<>();
     private ArrayList<Integer> loadedFullChats = new ArrayList<>();
-
     private HashMap<Long, ArrayList<Integer>> reloadingMessages = new HashMap<>();
-
     private boolean gettingNewDeleteTask = false;
     private int currentDeletingTaskTime = 0;
     private ArrayList<Integer> currentDeletingTaskMids = null;
     private Runnable currentDeleteTaskRunnable = null;
-
-    public boolean loadingDialogs = false;
     private boolean migratingDialogs = false;
-    public boolean dialogsEndReached = false;
-    public boolean gettingDifference = false;
-    public boolean updatingState = false;
-    public boolean firstGettingTask = false;
-    public boolean registeringForPush = false;
-
     private long lastStatusUpdateTime = 0;
     private int statusRequest = 0;
     private int statusSettingState = 0;
     private boolean offlineSent = false;
     private String uploadingAvatar = null;
-
-    public boolean enableJoined = true;
-    public int fontSize = AndroidUtilities.dp(16);
-    public int maxGroupCount = 200;
-    public int maxBroadcastCount = 100;
-    public int maxMegagroupCount = 1000;
-    public int minGroupConvertSize = 200;
-    public int groupBigSize;
     private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
 
-    private class UserActionUpdatesSeq extends TLRPC.Updates {
-
-    }
-
-    private class UserActionUpdatesPts extends TLRPC.Updates {
-
-    }
-
-    public static final int UPDATE_MASK_NAME = 1;
-    public static final int UPDATE_MASK_AVATAR = 2;
-    public static final int UPDATE_MASK_STATUS = 4;
-    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
-    public static final int UPDATE_MASK_CHAT_NAME = 16;
-    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
-    public static final int UPDATE_MASK_USER_PRINT = 64;
-    public static final int UPDATE_MASK_USER_PHONE = 128;
-    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
-    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
-    public static final int UPDATE_MASK_PHONE = 1024;
-    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
-    public static final int UPDATE_MASK_SEND_STATE = 4096;
-    public static final int UPDATE_MASK_CHANNEL = 8192;
-    public static final int UPDATE_MASK_CHAT_ADMINS = 16384;
-    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
-
-    public static class PrintingUser {
-        public long lastTime;
-        public int userId;
-        public TLRPC.SendMessageAction action;
-    }
-
-    private static volatile MessagesController Instance = null;
-
-    public static MessagesController getInstance() {
-        MessagesController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MessagesController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new MessagesController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
     public MessagesController() {
         ImageLoader.getInstance();
         MessagesStorage.getInstance();
@@ -213,39 +172,17 @@ public MessagesController() {
         }
     }
 
-    public void updateConfig(final TLRPC.TL_config config) {
-        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
-            @Override
-            public void run() {
-                //maxBroadcastCount = config.broadcast_size_max;
-                maxMegagroupCount = config.megagroup_size_max;
-                maxGroupCount = config.chat_size_max;
-                groupBigSize = config.chat_big_size;
-                disabledFeatures = config.disabled_features;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putInt("maxGroupCount", maxGroupCount);
-                //editor.putInt("maxBroadcastCount", maxBroadcastCount);
-                editor.putInt("maxMegagroupCount", maxMegagroupCount);
-                editor.putInt("groupBigSize", groupBigSize);
-                try {
-                    SerializedData data = new SerializedData();
-                    data.writeInt32(disabledFeatures.size());
-                    for (TLRPC.TL_disabledFeature disabledFeature : disabledFeatures) {
-                        disabledFeature.serializeToStream(data);
-                    }
-                    String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
-                    if (string.length() != 0) {
-                        editor.putString("disabledFeatures", string);
-                    }
-                } catch (Exception e) {
-                    editor.remove("disabledFeatures");
-                    FileLog.e("tmessages", e);
+    public static MessagesController getInstance() {
+        MessagesController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (MessagesController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new MessagesController();
                 }
-                editor.commit();
             }
-        });
+        }
+        return localInstance;
     }
 
     public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
@@ -267,26 +204,6 @@ public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
         return true;
     }
 
-    public void addSupportUser() {
-        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
-        user.phone = "333";
-        user.id = 333000;
-        user.first_name = "Telegram";
-        user.last_name = "";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-
-        user = new TLRPC.TL_userForeign_old2();
-        user.phone = "42777";
-        user.id = 777000;
-        user.first_name = "Telegram";
-        user.last_name = "Notifications";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-    }
-
     public static TLRPC.InputUser getInputUser(TLRPC.User user) {
         if (user == null) {
             return new TLRPC.TL_inputUserEmpty();
@@ -364,6 +281,158 @@ public void addSupportUser() {
         return inputPeer;
     }
 
+    protected static void addNewGifToRecent(TLRPC.Document document, int date) {
+        ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
+        MediaController.SearchImage searchImage = new MediaController.SearchImage();
+        searchImage.type = 2;
+        searchImage.document = document;
+        searchImage.date = date;
+        searchImage.id = "" + searchImage.document.id;
+        arrayList.add(searchImage);
+        MessagesStorage.getInstance().putWebRecent(arrayList);
+    }
+
+    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
+        if (username == null || fragment == null) {
+            return;
+        }
+        TLRPC.User user = MessagesController.getInstance().getUser(username);
+        if (user != null) {
+            Bundle args = new Bundle();
+            args.putInt("user_id", user.id);
+            if (type == 0) {
+                fragment.presentFragment(new ProfileActivity(args));
+            } else {
+                fragment.presentFragment(new ChatActivity(args));
+            }
+        } else {
+            if (fragment.getParentActivity() == null) {
+                return;
+            }
+            final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
+            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+            progressDialog.setCanceledOnTouchOutside(false);
+            progressDialog.setCancelable(false);
+
+            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
+            req.username = username;
+            final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            fragment.setVisibleDialog(null);
+                            if (error == null) {
+                                TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
+                                MessagesController.getInstance().putUsers(res.users, false);
+                                MessagesController.getInstance().putChats(res.chats, false);
+                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, true);
+                                Bundle args = new Bundle();
+                                if (!res.chats.isEmpty()) {
+                                    args.putInt("chat_id", res.chats.get(0).id);
+                                } else {
+                                    args.putInt("user_id", res.users.get(0).id);
+                                }
+                                if (fragment != null) {
+                                    if (type == 0 && res.chats.isEmpty()) {
+                                        fragment.presentFragment(new ProfileActivity(args));
+                                    } else {
+                                        fragment.presentFragment(new ChatActivity(args));
+                                    }
+                                }
+                            } else {
+                                if (fragment != null && fragment.getParentActivity() != null) {
+                                    try {
+                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            }
+                        }
+                    });
+                }
+            });
+            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                    try {
+                        dialog.dismiss();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    if (fragment != null) {
+                        fragment.setVisibleDialog(null);
+                    }
+                }
+            });
+            fragment.setVisibleDialog(progressDialog);
+            progressDialog.show();
+        }
+    }
+
+    public void updateConfig(final TLRPC.TL_config config) {
+        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
+            @Override
+            public void run() {
+                //maxBroadcastCount = config.broadcast_size_max;
+                maxMegagroupCount = config.megagroup_size_max;
+                maxGroupCount = config.chat_size_max;
+                groupBigSize = config.chat_big_size;
+                disabledFeatures = config.disabled_features;
+
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putInt("maxGroupCount", maxGroupCount);
+                //editor.putInt("maxBroadcastCount", maxBroadcastCount);
+                editor.putInt("maxMegagroupCount", maxMegagroupCount);
+                editor.putInt("groupBigSize", groupBigSize);
+                try {
+                    SerializedData data = new SerializedData();
+                    data.writeInt32(disabledFeatures.size());
+                    for (TLRPC.TL_disabledFeature disabledFeature : disabledFeatures) {
+                        disabledFeature.serializeToStream(data);
+                    }
+                    String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
+                    if (string.length() != 0) {
+                        editor.putString("disabledFeatures", string);
+                    }
+                } catch (Exception e) {
+                    editor.remove("disabledFeatures");
+                    FileLog.e("tmessages", e);
+                }
+                editor.commit();
+            }
+        });
+    }
+
+    public void addSupportUser() {
+        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
+        user.phone = "333";
+        user.id = 333000;
+        user.first_name = "Telegram";
+        user.last_name = "";
+        user.status = null;
+        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
+        putUser(user, true);
+
+        user = new TLRPC.TL_userForeign_old2();
+        user.phone = "42777";
+        user.id = 777000;
+        user.first_name = "Telegram";
+        user.last_name = "Notifications";
+        user.status = null;
+        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
+        putUser(user, true);
+    }
+
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
@@ -5952,17 +6021,6 @@ protected void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> me
         updateInterfaceWithMessages(uid, messages, false);
     }
 
-    protected static void addNewGifToRecent(TLRPC.Document document, int date) {
-        ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
-        MediaController.SearchImage searchImage = new MediaController.SearchImage();
-        searchImage.type = 2;
-        searchImage.document = document;
-        searchImage.date = date;
-        searchImage.id = "" + searchImage.document.id;
-        arrayList.add(searchImage);
-        MessagesStorage.getInstance().putWebRecent(arrayList);
-    }
-
     protected void updateInterfaceWithMessages(final long uid, final ArrayList<MessageObject> messages, boolean isBroadcast) {
         if (messages == null || messages.isEmpty()) {
             return;
@@ -6092,89 +6150,17 @@ public int compare(TLRPC.Dialog tl_dialog, TLRPC.Dialog tl_dialog2) {
         }
     }
 
-    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
-        if (username == null || fragment == null) {
-            return;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(username);
-        if (user != null) {
-            Bundle args = new Bundle();
-            args.putInt("user_id", user.id);
-            if (type == 0) {
-                fragment.presentFragment(new ProfileActivity(args));
-            } else {
-                fragment.presentFragment(new ChatActivity(args));
-            }
-        } else {
-            if (fragment.getParentActivity() == null) {
-                return;
-            }
-            final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
-            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-            progressDialog.setCanceledOnTouchOutside(false);
-            progressDialog.setCancelable(false);
+    public static class PrintingUser {
+        public long lastTime;
+        public int userId;
+        public TLRPC.SendMessageAction action;
+    }
+
+    private class UserActionUpdatesSeq extends TLRPC.Updates {
+
+    }
+
+    private class UserActionUpdatesPts extends TLRPC.Updates {
 
-            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
-            req.username = username;
-            final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            fragment.setVisibleDialog(null);
-                            if (error == null) {
-                                TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
-                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, true);
-                                Bundle args = new Bundle();
-                                if (!res.chats.isEmpty()) {
-                                    args.putInt("chat_id", res.chats.get(0).id);
-                                } else {
-                                    args.putInt("user_id", res.users.get(0).id);
-                                }
-                                if (fragment != null) {
-                                    if (type == 0 && res.chats.isEmpty()) {
-                                        fragment.presentFragment(new ProfileActivity(args));
-                                    } else {
-                                        fragment.presentFragment(new ChatActivity(args));
-                                    }
-                                }
-                            } else {
-                                if (fragment != null && fragment.getParentActivity() != null) {
-                                    try {
-                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            }
-                        }
-                    });
-                }
-            });
-            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    ConnectionsManager.getInstance().cancelRequest(reqId, true);
-                    try {
-                        dialog.dismiss();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    if (fragment != null) {
-                        fragment.setVisibleDialog(null);
-                    }
-                }
-            });
-            fragment.setVisibleDialog(progressDialog);
-            progressDialog.show();
-        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 8ffcf72fd..7bdc2c622 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -47,7 +47,6 @@
 
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.client.RestTemplate;
-import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
@@ -475,6 +474,50 @@ public void onGlobalLayout() {
                 }
             }
         });
+
+        if (MessagesController.getInstance().isNewChannelsAvailable == true) {
+
+            MessagesController.getInstance().isNewChannelsAvailable = false;
+            createChannelDialog();
+        }
+    }
+
+    public void createChannelDialog() {
+        final ArrayList<Integer> mSelectedItems = new ArrayList();  // Where we track the selected items
+        AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
+        // Set the dialog title
+        builder.setTitle("Channels")
+                // Specify the list array, the items to be selected by default (null for none),
+                // and the listener through which to receive callbacks when items are selected
+                .setMultiChoiceItems(new String[]{"Hackathon", "Microsoft"}, null,
+                        new DialogInterface.OnMultiChoiceClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which,
+                                                boolean isChecked) {
+                                if (isChecked) {
+                                    // If the user checked the item, add it to the selected items
+                                    mSelectedItems.add(which);
+                                } else if (mSelectedItems.contains(which)) {
+                                    // Else, if the item is already in the array, remove it
+                                    mSelectedItems.remove(Integer.valueOf(which));
+                                }
+                            }
+                        })
+                        // Set the action buttons
+                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                        // User clicked OK, so save the mSelectedItems results somewhere
+                        // or return them to the component that opened the dialog
+                    }
+                })
+                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                    }
+                });
+
+        builder.create().show();
     }
 
     private void showPasscodeActivity() {
@@ -2112,6 +2155,9 @@ public void onRebuildAllFragments(ActionBarLayout layout) {
         drawerLayoutAdapter.notifyDataSetChanged();
     }
 
+    public void launchLocationService() {
+        startService(new Intent(getBaseContext(), LocationService.class));
+    }
 
     private class HttpRequestTask extends AsyncTask<Void, Void, Greeting> {
         @Override
@@ -2138,8 +2184,4 @@ protected void onPostExecute(Greeting greeting) {
         }
 
     }
-
-    public void launchLocationService() {
-        startService(new Intent(getBaseContext(), LocationService.class));
-    }
 }
