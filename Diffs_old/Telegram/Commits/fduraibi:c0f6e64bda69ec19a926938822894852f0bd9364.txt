diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 8b607d4c7..836098767 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -83,7 +83,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 290
-        versionName "1.6.2"
+        versionCode 292
+        versionName "1.7.0"
     }
 }
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index 33857ab90..1a1481668 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -8,6 +8,7 @@ LOCAL_CFLAGS 	+= -Drestrict='' -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT
 LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -O2 -funroll-loops
 #LOCAL_LDLIBS 	:= -llog
+LOCAL_LDLIBS 	:= -ljnigraphics
 
 LOCAL_SRC_FILES     := \
 ./opus/src/opus.c \
diff --git a/TMessagesProj/jni/gif.c b/TMessagesProj/jni/gif.c
index b78811947..06b7a6283 100644
--- a/TMessagesProj/jni/gif.c
+++ b/TMessagesProj/jni/gif.c
@@ -1,4 +1,4 @@
-//tanks to https://github.com/koral--/android-gif-drawable
+//thanks to https://github.com/koral--/android-gif-drawable
 /*
  MIT License
  Copyright (c)
@@ -73,7 +73,7 @@ typedef struct {
 
 typedef struct {
 	unsigned int duration;
-	short transpIndex;
+	int transpIndex;
 	unsigned char disposalMethod;
 } FrameInfo;
 
@@ -121,19 +121,20 @@ void gifOnJNIUnload(JavaVM *vm, void *reserved) {
 }
 
 static int fileReadFunc(GifFileType *gif, GifByteType *bytes, int size) {
-	FILE *file = (FILE *)gif->UserData;
+    FILE *file = (FILE *)gif->UserData;
 	return fread(bytes, 1, size, file);
 }
 
 static int fileRewindFun(GifInfo *info) {
-	return fseek(info->gifFilePtr->UserData, info->startPos, SEEK_SET);
+    return fseek(info->gifFilePtr->UserData, info->startPos, SEEK_SET);
 }
 
 static unsigned long getRealTime() {
 	struct timespec ts;
 	const clockid_t id = CLOCK_MONOTONIC;
-	if (id != (clockid_t) - 1 && clock_gettime(id, &ts) != -1)
-    return ts.tv_sec * 1000 + ts.tv_nsec / 1000000;
+	if (id != (clockid_t) - 1 && clock_gettime(id, &ts) != -1) {
+        return ts.tv_sec * 1000 + ts.tv_nsec / 1000000;
+    }
 	return -1;
 }
 
@@ -195,7 +196,7 @@ static void packARGB32(argb *pixel, GifByteType alpha, GifByteType red, GifByteT
 }
 
 static void getColorFromTable(int idx, argb *dst, const ColorMapObject *cmap) {
-	char colIdx = idx >= cmap->ColorCount ? 0 : idx;
+    int colIdx = (idx >= cmap->ColorCount) ? 0 : idx;
 	GifColorType *col = &cmap->Colors[colIdx];
 	packARGB32(dst, 0xFF, col->Red, col->Green, col->Blue);
 }
@@ -218,7 +219,7 @@ static inline bool setupBackupBmp(GifInfo *info, short transpIndex) {
 	if (transpIndex == -1) {
         getColorFromTable(fGIF->SBackGroundColor, &paintingColor, fGIF->SColorMap);
     } else {
-        packARGB32(&paintingColor,0,0,0,0);
+        packARGB32(&paintingColor, 0, 0, 0, 0);
     }
 	eraseColor(info->backupPtr, fGIF->SWidth, fGIF->SHeight, paintingColor);
 	return true;
@@ -231,14 +232,15 @@ static int readExtensions(int ExtFunction, GifByteType *ExtData, GifInfo *info)
 	if (ExtFunction == GRAPHICS_EXT_FUNC_CODE && ExtData[0] == 4) {
 		FrameInfo *fi = &info->infos[info->gifFilePtr->ImageCount];
 		fi->transpIndex = -1;
-		char *b = (char *)ExtData + 1;
+		char *b = (char*) ExtData + 1;
 		short delay = ((b[2] << 8) | b[1]);
 		fi->duration = delay > 1 ? delay * 10 : 100;
 		fi->disposalMethod = ((b[0] >> 2) & 7);
-		if (ExtData[1] & 1)
-        fi->transpIndex = (short) b[3];
+		if (ExtData[1] & 1) {
+            fi->transpIndex = 0xff & b[3];
+        }
 		if (fi->disposalMethod == 3 && info->backupPtr == NULL) {
-			if (!setupBackupBmp(info,fi->transpIndex)) {
+			if (!setupBackupBmp(info, fi->transpIndex)) {
                 return GIF_ERROR;
             }
 		}
@@ -260,7 +262,7 @@ static int readExtensions(int ExtFunction, GifByteType *ExtData, GifInfo *info)
 	return GIF_OK;
 }
 
-static int DDGifSlurp(GifFileType *GifFile, GifInfo *info, bool shouldDecode) {
+static int DDGifSlurp(GifFileType *GifFile, GifInfo* info, bool shouldDecode) {
 	GifRecordType RecordType;
 	GifByteType *ExtData;
 	int codeSize;
@@ -268,103 +270,109 @@ static int DDGifSlurp(GifFileType *GifFile, GifInfo *info, bool shouldDecode) {
 	size_t ImageSize;
 	do {
 		if (DGifGetRecordType(GifFile, &RecordType) == GIF_ERROR) {
-            return GIF_ERROR;
+            return (GIF_ERROR);
         }
 		switch (RecordType) {
-            case IMAGE_DESC_RECORD_TYPE: {
-                if (DGifGetImageDesc(GifFile, !shouldDecode) == GIF_ERROR) {
-                    return GIF_ERROR;
-                }
-                int i = shouldDecode ? info->currentIndex : GifFile->ImageCount - 1;
-                SavedImage *sp = &GifFile->SavedImages[i];
-                ImageSize = sp->ImageDesc.Width * sp->ImageDesc.Height;
-                
-                if (sp->ImageDesc.Width < 1 || sp->ImageDesc.Height < 1 || ImageSize > (SIZE_MAX / sizeof(GifPixelType))) {
-                    GifFile->Error = D_GIF_ERR_INVALID_IMG_DIMS;
-                    return GIF_ERROR;
-                }
-                if (sp->ImageDesc.Width > GifFile->SWidth || sp->ImageDesc.Height > GifFile->SHeight) {
-                    GifFile->Error = D_GIF_ERR_IMG_NOT_CONFINED;
-                    return GIF_ERROR;
-                }
-                if (shouldDecode) {
-                    sp->RasterBits = info->rasterBits;
-                    if (sp->ImageDesc.Interlace) {
-                        int i, j;
-                        int InterlacedOffset[] = { 0, 4, 2, 1 };
-                        int InterlacedJumps[] = { 8, 8, 4, 2 };
-                        for (i = 0; i < 4; i++) {
-                            for (j = InterlacedOffset[i]; j < sp->ImageDesc.Height; j += InterlacedJumps[i]) {
-                                if (DGifGetLine(GifFile, sp->RasterBits + j * sp->ImageDesc.Width, sp->ImageDesc.Width) == GIF_ERROR) {
-                                    return GIF_ERROR;
-                                }
+            case IMAGE_DESC_RECORD_TYPE:
+            
+			if (DGifGetImageDesc(GifFile, !shouldDecode) == GIF_ERROR) {
+                return (GIF_ERROR);
+            }
+			int i = shouldDecode ? info->currentIndex : GifFile->ImageCount - 1;
+			SavedImage *sp = &GifFile->SavedImages[i];
+			ImageSize = sp->ImageDesc.Width * sp->ImageDesc.Height;
+            
+			if (sp->ImageDesc.Width < 1 || sp->ImageDesc.Height < 1 || ImageSize > (SIZE_MAX / sizeof(GifPixelType))) {
+				GifFile->Error = D_GIF_ERR_INVALID_IMG_DIMS;
+				return GIF_ERROR;
+			}
+			if (sp->ImageDesc.Width > GifFile->SWidth || sp->ImageDesc.Height > GifFile->SHeight) {
+				GifFile->Error = D_GIF_ERR_IMG_NOT_CONFINED;
+				return GIF_ERROR;
+			}
+			if (shouldDecode) {
+				sp->RasterBits = info->rasterBits;
+				if (sp->ImageDesc.Interlace) {
+					int i, j;
+					int InterlacedOffset[] = { 0, 4, 2, 1 };
+					int InterlacedJumps[] = { 8, 8, 4, 2 };
+					for (i = 0; i < 4; i++) {
+                        for (j = InterlacedOffset[i]; j < sp->ImageDesc.Height; j += InterlacedJumps[i]) {
+                            if (DGifGetLine(GifFile, sp->RasterBits + j * sp->ImageDesc.Width, sp->ImageDesc.Width) == GIF_ERROR) {
+                                return GIF_ERROR;
                             }
                         }
-                    } else {
-                        if (DGifGetLine(GifFile, sp->RasterBits, ImageSize) == GIF_ERROR) {
-                            return GIF_ERROR;
-                        }
-                    }
-                    if (info->currentIndex >= GifFile->ImageCount - 1) {
-                        if (info->loopCount > 0)
-                        info->currentLoop++;
-                        if (fileRewindFun(info) != 0) {
-                            info->gifFilePtr->Error = D_GIF_ERR_READ_FAILED;
-                            return GIF_ERROR;
-                        }
                     }
-                    return GIF_OK;
-                } else {
-                    if (DGifGetCode(GifFile, &codeSize, &ExtData) == GIF_ERROR) {
-                        return GIF_ERROR;
+				} else {
+					if (DGifGetLine(GifFile, sp->RasterBits, ImageSize) == GIF_ERROR) {
+                        return (GIF_ERROR);
                     }
-                    while (ExtData) {
-                        if (DGifGetCodeNext(GifFile, &ExtData) == GIF_ERROR) {
-                            return GIF_ERROR;
-                        }
+				}
+				if (info->currentIndex >= GifFile->ImageCount - 1) {
+					if (info->loopCount > 0) {
+                        info->currentLoop++;
                     }
+					if (fileRewindFun(info) != 0) {
+						info->gifFilePtr->Error = D_GIF_ERR_READ_FAILED;
+						return GIF_ERROR;
+					}
+				}
+				return GIF_OK;
+			} else {
+				if (DGifGetCode(GifFile, &codeSize, &ExtData) == GIF_ERROR) {
+                    return (GIF_ERROR);
                 }
-                break;
+				while (ExtData != NULL) {
+					if (DGifGetCodeNext(GifFile, &ExtData) == GIF_ERROR) {
+                        return (GIF_ERROR);
+                    }
+				}
+			}
+			break;
+            
+            case EXTENSION_RECORD_TYPE:
+			if (DGifGetExtension(GifFile, &ExtFunction, &ExtData) == GIF_ERROR) {
+                return (GIF_ERROR);
             }
             
-            case EXTENSION_RECORD_TYPE: {
-                if (DGifGetExtension(GifFile, &ExtFunction, &ExtData) == GIF_ERROR) {
+			if (!shouldDecode) {
+				FrameInfo *tmpInfos = realloc(info->infos, (GifFile->ImageCount + 1) * sizeof(FrameInfo));
+                if (tmpInfos == NULL) {
                     return GIF_ERROR;
                 }
-            
-                if (!shouldDecode) {
-                    info->infos = realloc(info->infos, (GifFile->ImageCount + 1) * sizeof(FrameInfo));
-                    if (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {
-                        return GIF_ERROR;
-                    }
+                info->infos = tmpInfos;
+				if (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {
+                    return GIF_ERROR;
+                }
+			}
+			while (ExtData != NULL) {
+				if (DGifGetExtensionNext(GifFile, &ExtData, &ExtFunction) == GIF_ERROR) {
+                    return (GIF_ERROR);
                 }
-                while (ExtData) {
-                    if (DGifGetExtensionNext(GifFile, &ExtData, &ExtFunction) == GIF_ERROR) {
+				if (!shouldDecode) {
+					if (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {
                         return GIF_ERROR;
                     }
-                    if (!shouldDecode) {
-                        if (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {
-                            return GIF_ERROR;
-                        }
-                    }
-                }
-                break;
-            }
+				}
+			}
+			break;
+            
             case TERMINATE_RECORD_TYPE:
+			break;
+            
             default:
 			break;
 		}
 	} while (RecordType != TERMINATE_RECORD_TYPE);
-    
 	bool ok = true;
 	if (shouldDecode) {
 		ok = (fileRewindFun(info) == 0);
 	}
 	if (ok) {
-        return GIF_OK;
+        return (GIF_OK);
     } else {
 		info->gifFilePtr->Error = D_GIF_ERR_READ_FAILED;
-		return GIF_ERROR;
+		return (GIF_ERROR);
 	}
 }
 
@@ -381,7 +389,7 @@ static argb *getAddr(argb *bm, int width, int left, int top) {
 }
 
 static void blitNormal(argb *bm, int width, int height, const SavedImage *frame, const ColorMapObject *cmap, int transparent) {
-	const unsigned char *src = (unsigned char *)frame->RasterBits;
+	const unsigned char* src = (unsigned char*) frame->RasterBits;
 	argb *dst = getAddr(bm, width, frame->ImageDesc.Left, frame->ImageDesc.Top);
 	GifWord copyWidth = frame->ImageDesc.Width;
 	if (frame->ImageDesc.Left + copyWidth > width) {
@@ -393,9 +401,6 @@ static void blitNormal(argb *bm, int width, int height, const SavedImage *frame,
 		copyHeight = height - frame->ImageDesc.Top;
 	}
     
-	int srcPad, dstPad;
-	dstPad = width - copyWidth;
-	srcPad = frame->ImageDesc.Width - copyWidth;
 	for (; copyHeight > 0; copyHeight--) {
 		copyLine(dst, src, cmap, transparent, copyWidth);
 		src += frame->ImageDesc.Width;
@@ -404,7 +409,7 @@ static void blitNormal(argb *bm, int width, int height, const SavedImage *frame,
 }
 
 static void fillRect(argb *bm, int bmWidth, int bmHeight, GifWord left, GifWord top, GifWord width, GifWord height, argb col) {
-	uint32_t *dst = (uint32_t *)getAddr(bm, bmWidth, left, top);
+	uint32_t* dst = (uint32_t*) getAddr(bm, bmWidth, left, top);
 	GifWord copyWidth = width;
 	if (left + copyWidth > bmWidth) {
 		copyWidth = bmWidth - left;
@@ -414,7 +419,7 @@ static void fillRect(argb *bm, int bmWidth, int bmHeight, GifWord left, GifWord
 	if (top + copyHeight > bmHeight) {
 		copyHeight = bmHeight - top;
 	}
-	uint32_t *pColor = (uint32_t *)(&col);
+	uint32_t* pColor = (uint32_t *) (&col);
 	for (; copyHeight > 0; copyHeight--) {
 		memset(dst, *pColor, copyWidth * sizeof(argb));
 		dst += bmWidth;
@@ -424,12 +429,11 @@ static void fillRect(argb *bm, int bmWidth, int bmHeight, GifWord left, GifWord
 static void drawFrame(argb *bm, int bmWidth, int bmHeight, const SavedImage *frame, const ColorMapObject *cmap, short transpIndex) {
 	if (frame->ImageDesc.ColorMap != NULL) {
 		cmap = frame->ImageDesc.ColorMap;
-		if (cmap == NULL || cmap->ColorCount != (1 << cmap->BitsPerPixel)) {
+		if (cmap->ColorCount != (1 << cmap->BitsPerPixel)) {
             cmap = defaultCmap;
         }
 	}
-    
-	blitNormal(bm, bmWidth, bmHeight, frame, cmap, (int) transpIndex);
+	blitNormal(bm, bmWidth, bmHeight, frame, cmap, transpIndex);
 }
 
 static bool checkIfCover(const SavedImage *target, const SavedImage *covered) {
@@ -445,30 +449,28 @@ static bool checkIfCover(const SavedImage *target, const SavedImage *covered) {
 }
 
 static inline void disposeFrameIfNeeded(argb *bm, GifInfo *info, unsigned int idx) {
-	argb *backup = info->backupPtr;
+	argb* backup = info->backupPtr;
 	argb color;
 	packARGB32(&color, 0, 0, 0, 0);
 	GifFileType *fGif = info->gifFilePtr;
-	SavedImage *cur = &fGif->SavedImages[idx - 1];
-	SavedImage *next = &fGif->SavedImages[idx];
+	SavedImage* cur = &fGif->SavedImages[idx - 1];
+	SavedImage* next = &fGif->SavedImages[idx];
 	bool curTrans = info->infos[idx - 1].transpIndex != -1;
 	int curDisposal = info->infos[idx - 1].disposalMethod;
 	bool nextTrans = info->infos[idx].transpIndex != -1;
 	int nextDisposal = info->infos[idx].disposalMethod;
-    
 	argb *tmp;
 	if ((curDisposal == 2 || curDisposal == 3) && (nextTrans || !checkIfCover(next, cur))) {
 		switch (curDisposal) {
-            case 2: {
-                fillRect(bm, fGif->SWidth, fGif->SHeight, cur->ImageDesc.Left, cur->ImageDesc.Top, cur->ImageDesc.Width, cur->ImageDesc.Height, color);
-            }
+            case 2:
+            
+			fillRect(bm, fGif->SWidth, fGif->SHeight, cur->ImageDesc.Left, cur->ImageDesc.Top, cur->ImageDesc.Width, cur->ImageDesc.Height, color);
 			break;
             
-            case 3: {
-                tmp = bm;
-                bm = backup;
-                backup = tmp;
-            }
+            case 3:
+			tmp = bm;
+			bm = backup;
+			backup = tmp;
 			break;
 		}
 	}
@@ -478,27 +480,25 @@ static inline void disposeFrameIfNeeded(argb *bm, GifInfo *info, unsigned int id
     }
 }
 
-static jboolean reset(GifInfo *info) {
+static void reset(GifInfo *info) {
 	if (fileRewindFun(info) != 0) {
-        return JNI_FALSE;
+        return;
     }
 	info->nextStartTime = 0;
 	info->currentLoop = -1;
 	info->currentIndex = -1;
-	return JNI_TRUE;
 }
 
 static void getBitmap(argb *bm, GifInfo *info) {
-	GifFileType *fGIF = info->gifFilePtr;
+	GifFileType* fGIF = info->gifFilePtr;
     
 	argb paintingColor;
 	int i = info->currentIndex;
 	if (DDGifSlurp(fGIF, info, true) == GIF_ERROR) {
-        return; //TODO add leniency support
+        return;
     }
-	SavedImage *cur = &fGIF->SavedImages[i];
-    
-	short transpIndex = info->infos[i].transpIndex;
+	SavedImage* cur = &fGIF->SavedImages[i];
+	int transpIndex = info->infos[i].transpIndex;
 	if (i == 0) {
 		if (transpIndex == -1) {
             getColorFromTable(fGIF->SBackGroundColor, &paintingColor, fGIF->SColorMap);
@@ -513,11 +513,14 @@ static void getBitmap(argb *bm, GifInfo *info) {
 }
 
 static void setMetaData(int width, int height, int ImageCount, int errorCode, JNIEnv *env, jintArray metaData) {
-	jint *ints = (*env)->GetIntArrayElements(env, metaData, 0);
-	*ints++ = width;
-	*ints++ = height;
-	*ints++ = ImageCount;
-	*ints = errorCode;
+	jint *const ints = (*env)->GetIntArrayElements(env, metaData, 0);
+	if (ints == NULL) {
+        return;
+    }
+	ints[0] = width;
+	ints[1] = height;
+	ints[2] = ImageCount;
+	ints[3] = errorCode;
 	(*env)->ReleaseIntArrayElements(env, metaData, ints, 0);
 }
 
@@ -554,9 +557,6 @@ static jint open(GifFileType *GifFileIn, int Error, int startPos, JNIEnv *env, j
 	info->speedFactor = 1.0;
 	info->rasterBits = calloc(GifFileIn->SHeight * GifFileIn->SWidth, sizeof(GifPixelType));
 	info->infos = malloc(sizeof(FrameInfo));
-	info->infos->duration = 0;
-	info->infos->disposalMethod = 0;
-	info->infos->transpIndex = -1;
 	info->backupPtr = NULL;
     
 	if (info->rasterBits == NULL || info->infos == NULL) {
@@ -564,15 +564,18 @@ static jint open(GifFileType *GifFileIn, int Error, int startPos, JNIEnv *env, j
 		setMetaData(width, height, 0, D_GIF_ERR_NOT_ENOUGH_MEM, env, metaData);
 		return (jint) NULL;
 	}
-    
-	if (DDGifSlurp(GifFileIn, info, false) == GIF_ERROR) {
-        Error = GifFileIn->Error;
-    }
+	info->infos->duration = 0;
+	info->infos->disposalMethod = 0;
+	info->infos->transpIndex = -1;
 	if (GifFileIn->SColorMap == NULL || GifFileIn->SColorMap->ColorCount != (1 << GifFileIn->SColorMap->BitsPerPixel)) {
 		GifFreeMapObject(GifFileIn->SColorMap);
 		GifFileIn->SColorMap = defaultCmap;
 	}
+
+	DDGifSlurp(GifFileIn, info, false);
+
 	int imgCount = GifFileIn->ImageCount;
+
 	if (imgCount < 1) {
         Error = D_GIF_ERR_NO_FRAMES;
     }
@@ -583,7 +586,6 @@ static jint open(GifFileType *GifFileIn, int Error, int startPos, JNIEnv *env, j
         cleanUp(info);
     }
 	setMetaData(width, height, imgCount, Error, env, metaData);
-    
 	return (jint)(Error == 0 ? info : NULL);
 }
 
@@ -600,12 +602,12 @@ JNIEXPORT jlong JNICALL Java_org_telegram_ui_Views_GifDrawable_getAllocationByte
 	return sum;
 }
 
-JNIEXPORT jboolean JNICALL Java_org_telegram_ui_Views_GifDrawable_reset(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_reset(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
-        return JNI_FALSE;
+        return;
     }
-	return reset(info);
+	reset(info);
 }
 
 JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_setSpeedFactor(JNIEnv *env, jclass class, jobject gifInfo, jfloat factor) {
@@ -618,7 +620,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_setSpeedFactor(JNI
 
 JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToTime(JNIEnv *env, jclass class, jobject gifInfo, jint desiredPos, jintArray jPixels) {
 	GifInfo *info = (GifInfo *)gifInfo;
-	if (info == NULL) {
+	if (info == NULL || jPixels == NULL) {
         return;
     }
 	int imgCount = info->gifFilePtr->ImageCount;
@@ -643,25 +645,29 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToTime(JNIEnv
 	if (i == imgCount - 1 && lastFrameRemainder > info->infos[i].duration) {
         lastFrameRemainder = info->infos[i].duration;
     }
-	info->lastFrameReaminder = lastFrameRemainder;
 	if (i > info->currentIndex) {
-		jint *pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
+		jint *const pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
+		if (pixels == NULL) {
+            return;
+        }
 		while (info->currentIndex <= i) {
 			info->currentIndex++;
-			getBitmap((argb *)pixels, info);
+			getBitmap((argb*) pixels, info);
 		}
 		(*env)->ReleaseIntArrayElements(env, jPixels, pixels, 0);
 	}
+	info->lastFrameReaminder = lastFrameRemainder;
+    
 	if (info->speedFactor == 1.0) {
         info->nextStartTime = getRealTime() + lastFrameRemainder;
-    } else {
+	} else {
         info->nextStartTime = getRealTime() + lastFrameRemainder * info->speedFactor;
     }
 }
 
 JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToFrame(JNIEnv *env, jclass class, jobject gifInfo, jint desiredIdx, jintArray jPixels) {
 	GifInfo *info = (GifInfo *)gifInfo;
-	if (info == NULL) {
+	if (info == NULL|| jPixels==NULL) {
         return;
     }
 	if (desiredIdx <= info->currentIndex) {
@@ -673,15 +679,19 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToFrame(JNIEnv
         return;
     }
     
+	jint *const pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
+	if (pixels == NULL) {
+        return;
+    }
+    
+	info->lastFrameReaminder = 0;
 	if (desiredIdx >= imgCount) {
         desiredIdx = imgCount - 1;
     }
     
-	info->lastFrameReaminder = 0;
-	jint *pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
 	while (info->currentIndex < desiredIdx) {
 		info->currentIndex++;
-		getBitmap((argb *)pixels, info);
+		getBitmap((argb *) pixels, info);
 	}
 	(*env)->ReleaseIntArrayElements(env, jPixels, pixels, 0);
 	if (info->speedFactor == 1.0) {
@@ -689,16 +699,13 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToFrame(JNIEnv
     } else {
         info->nextStartTime = getRealTime() + info->infos[info->currentIndex].duration * info->speedFactor;
     }
-    
 }
 
 JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_renderFrame(JNIEnv *env, jclass class, jintArray jPixels, jobject gifInfo, jintArray metaData) {
-    
 	GifInfo *info = (GifInfo *)gifInfo;
-	if (info == NULL) {
+	if (info == NULL || jPixels == NULL) {
         return;
     }
-    
 	bool needRedraw = false;
 	unsigned long rt = getRealTime();
     
@@ -708,24 +715,40 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_renderFrame(JNIEnv
         }
 		needRedraw = true;
 	}
-	jint *rawMetaData = (*env)->GetIntArrayElements(env, metaData, 0);
+	jint *const rawMetaData = (*env)->GetIntArrayElements(env, metaData, 0);
+	if (rawMetaData == NULL) {
+        return;
+    }
     
-	if (needRedraw) {
-		jint *pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
+ 	if (needRedraw) {
+		jint *const pixels = (*env)->GetIntArrayElements(env, jPixels, 0);
+		if (pixels == NULL) {
+		    (*env)->ReleaseIntArrayElements(env, metaData, rawMetaData, 0);
+		    return;
+		}
 		getBitmap((argb *)pixels, info);
 		rawMetaData[3] = info->gifFilePtr->Error;
         
 		(*env)->ReleaseIntArrayElements(env, jPixels, pixels, 0);
-        
-		int scaledDuration = info->infos[info->currentIndex].duration;
+		unsigned int scaledDuration = info->infos[info->currentIndex].duration;
 		if (info->speedFactor != 1.0) {
-            scaledDuration /= info->speedFactor;
-        }
+			scaledDuration /= info->speedFactor;
+			if (scaledDuration<=0) {
+                scaledDuration=1;
+            } else if (scaledDuration > INT_MAX) {
+                scaledDuration = INT_MAX;
+            }
+		}
 		info->nextStartTime = rt + scaledDuration;
 		rawMetaData[4] = scaledDuration;
 	} else {
-        rawMetaData[4] = (int) (rt - info->nextStartTime);
-    }
+	    long delay = info->nextStartTime-rt;
+	    if (delay < 0) {
+            rawMetaData[4] = -1;
+        } else {
+            rawMetaData[4] = (int) delay;
+        }
+	}
 	(*env)->ReleaseIntArrayElements(env, metaData, rawMetaData, 0);
 }
 
@@ -794,9 +817,6 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_saveRemainder(JNIE
         return;
     }
 	info->lastFrameReaminder = getRealTime() - info->nextStartTime;
-    if (info->lastFrameReaminder > 0) {
-        info->lastFrameReaminder = 0;
-    }
 }
 
 JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_restoreRemainder(JNIEnv *env, jclass class, jobject gifInfo) {
@@ -814,7 +834,7 @@ JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_openFile(JNIEnv *e
 		return (jint) NULL;
 	}
     
-	const char *fname = (*env)->GetStringUTFChars(env, jfname, 0);
+	const char *const fname = (*env)->GetStringUTFChars(env, jfname, 0);
 	FILE *file = fopen(fname, "rb");
 	(*env)->ReleaseStringUTFChars(env, jfname, fname);
 	if (file == NULL) {
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index 1482314d3..ef63bfbf0 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -2,8 +2,101 @@
 #include <stdio.h>
 #include <setjmp.h>
 #include <libjpeg/jpeglib.h>
+#include <android/bitmap.h>
 #include "utils.h"
 
+static inline uint64_t get_colors (const uint8_t *p) {
+    return p[0] + (p[1] << 16) + ((uint64_t)p[2] << 32);
+}
+
+static void fastBlur(int imageWidth, int imageHeight, int imageStride, void *pixels) {
+    uint8_t *pix = (uint8_t *)pixels;
+    const int w = imageWidth;
+    const int h = imageHeight;
+    const int stride = imageStride;
+    const int radius = 3;
+    const int r1 = radius + 1;
+    const int div = radius * 2 + 1;
+    
+    if (radius > 15 || div >= w || div >= h) {
+        return;
+    }
+    
+    uint64_t rgb[imageStride * imageHeight];
+    
+    int x, y, i;
+    
+    int yw = 0;
+    const int we = w - r1;
+    for (y = 0; y < h; y++) {
+        uint64_t cur = get_colors (&pix[yw]);
+        uint64_t rgballsum = -radius * cur;
+        uint64_t rgbsum = cur * ((r1 * (r1 + 1)) >> 1);
+        
+        for (i = 1; i <= radius; i++) {
+            uint64_t cur = get_colors (&pix[yw + i * 4]);
+            rgbsum += cur * (r1 - i);
+            rgballsum += cur;
+        }
+        
+        x = 0;
+        
+        #define update(start, middle, end)  \
+                rgb[y * w + x] = (rgbsum >> 4) & 0x00FF00FF00FF00FFLL; \
+                rgballsum += get_colors (&pix[yw + (start) * 4]) - 2 * get_colors (&pix[yw + (middle) * 4]) + get_colors (&pix[yw + (end) * 4]); \
+                rgbsum += rgballsum;        \
+                x++;                        \
+
+        while (x < r1) {
+            update (0, x, x + r1);
+        }
+        while (x < we) {
+            update (x - r1, x, x + r1);
+        }
+        while (x < w) {
+            update (x - r1, x, w - 1);
+        }
+        
+        #undef update
+        
+        yw += stride;
+    }
+    
+    const int he = h - r1;
+    for (x = 0; x < w; x++) {
+        uint64_t rgballsum = -radius * rgb[x];
+        uint64_t rgbsum = rgb[x] * ((r1 * (r1 + 1)) >> 1);
+        for (i = 1; i <= radius; i++) {
+            rgbsum += rgb[i * w + x] * (r1 - i);
+            rgballsum += rgb[i * w + x];
+        }
+        
+        y = 0;
+        int yi = x * 4;
+        
+        #define update(start, middle, end)  \
+                int64_t res = rgbsum >> 4;   \
+                pix[yi] = res;              \
+                pix[yi + 1] = res >> 16;    \
+                pix[yi + 2] = res >> 32;    \
+                rgballsum += rgb[x + (start) * w] - 2 * rgb[x + (middle) * w] + rgb[x + (end) * w]; \
+                rgbsum += rgballsum;        \
+                y++;                        \
+                yi += stride;
+        
+        while (y < r1) {
+            update (0, y, y + r1);
+        }
+        while (y < he) {
+            update (y - r1, y, y + r1);
+        }
+        while (y < h) {
+            update (y - r1, y, h - 1);
+        }
+        #undef update
+    }
+}
+
 typedef struct my_error_mgr {
     struct jpeg_error_mgr pub;
     jmp_buf setjmp_buffer;
@@ -16,6 +109,15 @@ METHODDEF(void) my_error_exit(j_common_ptr cinfo) {
     longjmp(myerr->setjmp_buffer, 1);
 }
 
+JNIEXPORT void Java_org_telegram_messenger_Utilities_blurBitmap(JNIEnv *env, jclass class, jobject bitmap, int width, int height, int stride) {
+    void *pixels = 0;
+    if (AndroidBitmap_lockPixels(env, bitmap, &pixels) < 0) {
+        return;
+    }
+    fastBlur(width, height, stride, pixels);
+    AndroidBitmap_unlockPixels(env, bitmap);
+}
+
 JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jintArray bitmap, int scale, int format, int width, int height) {
     
     int i;
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.so
index 8ffd1fbc4..f5677c7df 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.so b/TMessagesProj/libs/armeabi/libtmessages.so
index f24065136..bc96b1c3c 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.so and b/TMessagesProj/libs/armeabi/libtmessages.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.so b/TMessagesProj/libs/x86/libtmessages.so
index f251e2320..c8bb5c7fc 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.so and b/TMessagesProj/libs/x86/libtmessages.so differ
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index e2c09a391..fe167a42a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -93,6 +93,9 @@
     public boolean enableJoined = true;
     public int fontSize = AndroidUtilities.dp(16);
 
+    private TLRPC.ChatParticipants currentChatInfo = null;
+    private int chatParticipantsId = 0;
+
     private class UserActionUpdates extends TLRPC.Updates {
 
     }
@@ -118,7 +121,7 @@
     }
 
     private class DelayedMessage {
-        public TLRPC.TL_messages_sendMedia sendRequest;
+        public TLObject sendRequest;
         public TLRPC.TL_decryptedMessage sendEncryptedRequest;
         public int type;
         public String originalPath;
@@ -182,7 +185,8 @@ public MessagesController() {
         MessagesStorage storage = MessagesStorage.getInstance();
         NotificationCenter.getInstance().addObserver(this, FileLoader.FileDidUpload);
         NotificationCenter.getInstance().addObserver(this, FileLoader.FileDidFailUpload);
-        NotificationCenter.getInstance().addObserver(this, 10);
+        NotificationCenter.getInstance().addObserver(this, chatInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, messageReceivedByServer);
         addSupportUser();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
         enableJoined = preferences.getBoolean("EnableContactJoined", true);
@@ -282,28 +286,35 @@ public void run() {
                         if (arr != null) {
                             for (int a = 0; a < arr.size(); a++) {
                                 DelayedMessage message = arr.get(a);
-                                if (file != null && message.sendRequest != null) {
+                                TLRPC.InputMedia media = null;
+                                if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                                    media = ((TLRPC.TL_messages_sendMedia)message.sendRequest).media;
+                                } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                                    media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
+                                }
+
+                                if (file != null && media != null) {
                                     if (message.type == 0) {
-                                        message.sendRequest.media.file = file;
+                                        media.file = file;
                                         performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     } else if (message.type == 1) {
-                                        if (message.sendRequest.media.thumb == null) {
-                                            message.sendRequest.media.thumb = file;
+                                        if (media.thumb == null) {
+                                            media.thumb = file;
                                             performSendDelayedMessage(message);
                                         } else {
-                                            message.sendRequest.media.file = file;
+                                            media.file = file;
                                             performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                         }
                                     } else if (message.type == 2) {
-                                        if (message.sendRequest.media.thumb == null && message.location != null) {
-                                            message.sendRequest.media.thumb = file;
+                                        if (media.thumb == null && message.location != null) {
+                                            media.thumb = file;
                                             performSendDelayedMessage(message);
                                         } else {
-                                            message.sendRequest.media.file = file;
+                                            media.file = file;
                                             performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                         }
                                     } else if (message.type == 3) {
-                                        message.sendRequest.media.file = file;
+                                        media.file = file;
                                         performSendMessageRequest(message.sendRequest, message.obj, message.originalPath);
                                     }
                                     arr.remove(a);
@@ -380,6 +391,11 @@ public void run() {
                 }
                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
             }
+        } else if (id == chatInfoDidLoaded) {
+            int chatId = (Integer)args[0];
+            if (chatParticipantsId == chatId) {
+                currentChatInfo = (TLRPC.ChatParticipants)args[1];
+            }
         }
     }
 
@@ -388,6 +404,7 @@ protected void finalize() throws Throwable {
         super.finalize();
         NotificationCenter.getInstance().removeObserver(this, FileLoader.FileDidUpload);
         NotificationCenter.getInstance().removeObserver(this, FileLoader.FileDidFailUpload);
+        NotificationCenter.getInstance().removeObserver(this, chatInfoDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, messageReceivedByServer);
     }
 
@@ -432,6 +449,8 @@ public void cleanUp() {
         startingSecretChat = false;
         statusRequest = 0;
         statusSettingState = 0;
+        currentChatInfo = null;
+        chatParticipantsId = 0;
         addSupportUser();
     }
 
@@ -753,8 +772,14 @@ public void deleteDialog(final long did, int offset, final boolean onlyHistory)
                     dialogsServerOnly.remove(dialog);
                     dialogs_dict.remove(did);
                     totalDialogsCount--;
+                } else {
+                    dialog.unread_count = 0;
                 }
                 dialogMessage.remove(dialog.top_message);
+                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
+                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                dialogsToUpdate.put(did, 0);
+                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
                 MessagesStorage.getInstance().deleteDialog(did, onlyHistory);
                 NotificationCenter.getInstance().postNotificationName(removeAllMessagesFromDialog, did);
                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -806,18 +831,22 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
                 });
             } else {
-                int encId = (int)(did >> 32);
-                if (onlyHistory) {
-                    TLRPC.EncryptedChat encryptedChat = encryptedChats.get(encId);
-                    sendClearHistoryMessage(encryptedChat);
-                } else {
-                    declineSecretChat(encId);
+                int high_id = (int)(did >> 32);
+                if (high_id > 0) {
+                    if (onlyHistory) {
+                        TLRPC.EncryptedChat encryptedChat = encryptedChats.get(high_id);
+                        sendClearHistoryMessage(encryptedChat);
+                    } else {
+                        declineSecretChat(high_id);
+                    }
                 }
             }
         }
     }
 
     public void loadChatInfo(final int chat_id) {
+        currentChatInfo = null;
+        chatParticipantsId = chat_id;
         MessagesStorage.getInstance().loadChatInfo(chat_id);
     }
 
@@ -877,7 +906,7 @@ public void updateTimerProc() {
         checkDeletingTask();
 
         if (UserConfig.isClientActivated()) {
-            if (ConnectionsManager.getInstance().getPauseTime() == 0 && ApplicationLoader.isScreenOn) {
+            if (ConnectionsManager.getInstance().getPauseTime() == 0 && ApplicationLoader.isScreenOn && !ApplicationLoader.mainInterfacePaused) {
                 if (statusSettingState != 1 && (lastStatusUpdateTime == 0 || lastStatusUpdateTime <= System.currentTimeMillis() - 55000 || offlineSent)) {
                     statusSettingState = 1;
 
@@ -1047,21 +1076,23 @@ public void run(TLObject response, TLRPC.TL_error error) {
             }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
             ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
         } else {
-            int encId = (int)(dialog_id >> 32);
-            TLRPC.EncryptedChat chat = encryptedChats.get(encId);
-            if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
-                TLRPC.TL_messages_setEncryptedTyping req = new TLRPC.TL_messages_setEncryptedTyping();
-                req.peer = new TLRPC.TL_inputEncryptedChat();
-                req.peer.chat_id = chat.id;
-                req.peer.access_hash = chat.access_hash;
-                req.typing = true;
-                long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
+            int high_id = (int)(dialog_id >> 32);
+            if (high_id > 0) {
+                TLRPC.EncryptedChat chat = encryptedChats.get(high_id);
+                if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
+                    TLRPC.TL_messages_setEncryptedTyping req = new TLRPC.TL_messages_setEncryptedTyping();
+                    req.peer = new TLRPC.TL_inputEncryptedChat();
+                    req.peer.chat_id = chat.id;
+                    req.peer.access_hash = chat.access_hash;
+                    req.typing = true;
+                    long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                        @Override
+                        public void run(TLObject response, TLRPC.TL_error error) {
 
-                    }
-                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+                        }
+                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                    ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+                }
             }
         }
     }
@@ -1126,7 +1157,7 @@ public void run() {
                 final ArrayList<MessageObject> objects = new ArrayList<MessageObject>();
                 for (TLRPC.Message message : messagesRes.messages) {
                     message.dialog_id = dialog_id;
-                    objects.add(new MessageObject(message, usersLocal));
+                    objects.add(new MessageObject(message, usersLocal, 2));
                 }
                 Utilities.RunOnUIThread(new Runnable() {
                     @Override
@@ -1235,7 +1266,7 @@ public void run() {
                 }
 
                 for (TLRPC.Message m : dialogsRes.messages) {
-                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal));
+                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal, 0));
                 }
                 for (TLRPC.TL_dialog d : dialogsRes.dialogs) {
                     if (d.last_message_date == 0) {
@@ -1375,7 +1406,7 @@ public void run() {
                 }
 
                 for (TLRPC.Message m : dialogsRes.messages) {
-                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal));
+                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal, 0));
                 }
                 for (TLRPC.TL_dialog d : dialogsRes.dialogs) {
                     if (d.last_message_date == 0) {
@@ -1616,47 +1647,49 @@ public void run(TLObject response, TLRPC.TL_error error) {
             if (max_date == 0) {
                 return;
             }
-            NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0);
-            int encId = (int)(dialog_id >> 32);
-            TLRPC.EncryptedChat chat = encryptedChats.get(encId);
-            if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
-                TLRPC.TL_messages_readEncryptedHistory req = new TLRPC.TL_messages_readEncryptedHistory();
-                req.peer = new TLRPC.TL_inputEncryptedChat();
-                req.peer.chat_id = chat.id;
-                req.peer.access_hash = chat.access_hash;
-                req.max_date = max_date;
+            int high_id = (int)(dialog_id >> 32);
+            if (high_id > 0) {
+                NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0);
+                TLRPC.EncryptedChat chat = encryptedChats.get(high_id);
+                if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
+                    TLRPC.TL_messages_readEncryptedHistory req = new TLRPC.TL_messages_readEncryptedHistory();
+                    req.peer = new TLRPC.TL_inputEncryptedChat();
+                    req.peer.chat_id = chat.id;
+                    req.peer.access_hash = chat.access_hash;
+                    req.max_date = max_date;
+
+                    ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                        @Override
+                        public void run(TLObject response, TLRPC.TL_error error) {
+                            //MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, true);
+                        }
+                    });
+                }
+                MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, false);
 
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                     @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        //MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, true);
+                    public void run() {
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
+                                if (dialog != null) {
+                                    dialog.unread_count = 0;
+                                    NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                                }
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                dialogsToUpdate.put(dialog_id, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
+                            }
+                        });
                     }
                 });
-            }
-            MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, false);
 
-            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                            if (dialog != null) {
-                                dialog.unread_count = 0;
-                                NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                            }
-                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
-                            dialogsToUpdate.put(dialog_id, 0);
-                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
-                        }
-                    });
+                if (chat.ttl > 0 && was) {
+                    int serverTime = Math.max(ConnectionsManager.getInstance().getCurrentTime(), max_date);
+                    MessagesStorage.getInstance().createTaskForDate(chat.id, serverTime, serverTime, 0);
                 }
-            });
-
-            if (chat.ttl > 0 && was) {
-                int serverTime = Math.max(ConnectionsManager.getInstance().getCurrentTime(), max_date);
-                MessagesStorage.getInstance().createTaskForDate(chat.id, serverTime, serverTime, 0);
             }
         }
     }
@@ -1796,7 +1829,7 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
         objArr.add(newMsgObj);
         ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
         arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true);
+        MessagesStorage.getInstance().putMessages(arr, false, true, false);
         updateInterfaceWithMessages(newMsg.dialog_id, objArr);
         NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
 
@@ -1845,7 +1878,7 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
         objArr.add(newMsgObj);
         ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
         arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true);
+        MessagesStorage.getInstance().putMessages(arr, false, true, false);
         updateInterfaceWithMessages(newMsg.dialog_id, objArr);
         NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
 
@@ -1945,6 +1978,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
         int lower_id = (int)peer;
         TLRPC.EncryptedChat encryptedChat = null;
         TLRPC.InputPeer sendToPeer = null;
+        ArrayList<TLRPC.InputUser> sendToPeers = null;
         if (lower_id != 0) {
             if (lower_id < 0) {
                 newMsg.to_id = new TLRPC.TL_peerChat();
@@ -1969,27 +2003,44 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 }
             }
         } else {
-            encryptedChat = encryptedChats.get((int)(peer >> 32));
-            newMsg.to_id = new TLRPC.TL_peerUser();
-            if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
-                newMsg.to_id.user_id = encryptedChat.admin_id;
+            int high_id = (int)(peer >> 32);
+            if (high_id > 0) {
+                encryptedChat = encryptedChats.get(high_id);
+                newMsg.to_id = new TLRPC.TL_peerUser();
+                if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
+                    newMsg.to_id.user_id = encryptedChat.admin_id;
+                } else {
+                    newMsg.to_id.user_id = encryptedChat.participant_id;
+                }
+                newMsg.ttl = encryptedChat.ttl;
             } else {
-                newMsg.to_id.user_id = encryptedChat.participant_id;
+                if (currentChatInfo == null) {
+                    return;
+                }
+                sendToPeers = new ArrayList<TLRPC.InputUser>();
+                for (TLRPC.TL_chatParticipant participant : currentChatInfo.participants) {
+                    TLRPC.User sendToUser = users.get(participant.user_id);
+                    TLRPC.InputUser peerUser = getInputUser(sendToUser);
+                    if (peerUser != null) {
+                        sendToPeers.add(peerUser);
+                    }
+                }
+                newMsg.to_id = new TLRPC.TL_peerChat();
+                newMsg.to_id.chat_id = high_id;
             }
-            newMsg.ttl = encryptedChat.ttl;
         }
         newMsg.out = true;
         newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
         newMsg.random_id = getNextRandomId();
         UserConfig.saveConfig(false);
-        final MessageObject newMsgObj = new MessageObject(newMsg, null);
+        final MessageObject newMsgObj = new MessageObject(newMsg, null, 2);
         newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENDING;
 
         final ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
         objArr.add(newMsgObj);
         ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
         arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true);
+        MessagesStorage.getInstance().putMessages(arr, false, true, false);
         updateInterfaceWithMessages(peer, objArr);
         NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
 
@@ -1997,11 +2048,19 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
 
         if (type == 0) {
             if (encryptedChat == null) {
-                TLRPC.TL_messages_sendMessage reqSend = new TLRPC.TL_messages_sendMessage();
-                reqSend.message = message;
-                reqSend.peer = sendToPeer;
-                reqSend.random_id = newMsg.random_id;
-                performSendMessageRequest(reqSend, newMsgObj, null);
+                if (sendToPeers != null) {
+                    TLRPC.TL_messages_sendBroadcast reqSend = new TLRPC.TL_messages_sendBroadcast();
+                    reqSend.message = message;
+                    reqSend.contacts = sendToPeers;
+                    reqSend.media = new TLRPC.TL_inputMediaEmpty();
+                    performSendMessageRequest(reqSend, newMsgObj, null);
+                } else {
+                    TLRPC.TL_messages_sendMessage reqSend = new TLRPC.TL_messages_sendMessage();
+                    reqSend.message = message;
+                    reqSend.peer = sendToPeer;
+                    reqSend.random_id = newMsg.random_id;
+                    performSendMessageRequest(reqSend, newMsgObj, null);
+                }
             } else {
                 TLRPC.TL_decryptedMessage reqSend = new TLRPC.TL_decryptedMessage();
                 reqSend.random_id = newMsg.random_id;
@@ -2013,74 +2072,64 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             }
         } else if (type >= 1 && type <= 3 || type >= 5 && type <= 8) {
             if (encryptedChat == null) {
-                TLRPC.TL_messages_sendMedia reqSend = new TLRPC.TL_messages_sendMedia();
-                reqSend.peer = sendToPeer;
-                reqSend.random_id = newMsg.random_id;
+                TLRPC.InputMedia inputMedia = null;
+                DelayedMessage delayedMessage = null;
                 if (type == 1) {
-                    reqSend.media = new TLRPC.TL_inputMediaGeoPoint();
-                    reqSend.media.geo_point = new TLRPC.TL_inputGeoPoint();
-                    reqSend.media.geo_point.lat = lat;
-                    reqSend.media.geo_point._long = lon;
-                    performSendMessageRequest(reqSend, newMsgObj, null);
+                    inputMedia = new TLRPC.TL_inputMediaGeoPoint();
+                    inputMedia.geo_point = new TLRPC.TL_inputGeoPoint();
+                    inputMedia.geo_point.lat = lat;
+                    inputMedia.geo_point._long = lon;
                 } else if (type == 2) {
                     if (photo.access_hash == 0) {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedPhoto();
-                        DelayedMessage delayedMessage = new DelayedMessage();
+                        inputMedia = new TLRPC.TL_inputMediaUploadedPhoto();
+                        delayedMessage = new DelayedMessage();
                         delayedMessage.originalPath = originalPath;
-                        delayedMessage.sendRequest = reqSend;
                         delayedMessage.type = 0;
                         delayedMessage.obj = newMsgObj;
                         delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                        performSendDelayedMessage(delayedMessage);
                     } else {
                         TLRPC.TL_inputMediaPhoto media = new TLRPC.TL_inputMediaPhoto();
                         media.id = new TLRPC.TL_inputPhoto();
                         media.id.id = photo.id;
                         media.id.access_hash = photo.access_hash;
-                        reqSend.media = media;
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        inputMedia = media;
                     }
                 } else if (type == 3) {
                     if (video.access_hash == 0) {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedThumbVideo();
-                        reqSend.media.duration = video.duration;
-                        reqSend.media.w = video.w;
-                        reqSend.media.h = video.h;
-                        reqSend.media.mime_type = video.mime_type;
-                        DelayedMessage delayedMessage = new DelayedMessage();
+                        inputMedia = new TLRPC.TL_inputMediaUploadedThumbVideo();
+                        inputMedia.duration = video.duration;
+                        inputMedia.w = video.w;
+                        inputMedia.h = video.h;
+                        inputMedia.mime_type = video.mime_type;
+                        delayedMessage = new DelayedMessage();
                         delayedMessage.originalPath = originalPath;
-                        delayedMessage.sendRequest = reqSend;
                         delayedMessage.type = 1;
                         delayedMessage.obj = newMsgObj;
                         delayedMessage.location = video.thumb.location;
                         delayedMessage.videoLocation = video;
-                        performSendDelayedMessage(delayedMessage);
                     } else {
                         TLRPC.TL_inputMediaVideo media = new TLRPC.TL_inputMediaVideo();
                         media.id = new TLRPC.TL_inputVideo();
                         media.id.id = video.id;
                         media.id.access_hash = video.access_hash;
-                        reqSend.media = media;
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        inputMedia = media;
                     }
                 } else if (type == 6) {
-                    reqSend.media = new TLRPC.TL_inputMediaContact();
-                    reqSend.media.phone_number = user.phone;
-                    reqSend.media.first_name = user.first_name;
-                    reqSend.media.last_name = user.last_name;
-                    performSendMessageRequest(reqSend, newMsgObj, null);
+                    inputMedia = new TLRPC.TL_inputMediaContact();
+                    inputMedia.phone_number = user.phone;
+                    inputMedia.first_name = user.first_name;
+                    inputMedia.last_name = user.last_name;
                 } else if (type == 7) {
                     if (document.access_hash == 0) {
                         if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
-                            reqSend.media = new TLRPC.TL_inputMediaUploadedThumbDocument();
+                            inputMedia = new TLRPC.TL_inputMediaUploadedThumbDocument();
                         } else {
-                            reqSend.media = new TLRPC.TL_inputMediaUploadedDocument();
+                            inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
                         }
-                        reqSend.media.mime_type = document.mime_type;
-                        reqSend.media.file_name = document.file_name;
-                        DelayedMessage delayedMessage = new DelayedMessage();
+                        inputMedia.mime_type = document.mime_type;
+                        inputMedia.file_name = document.file_name;
+                        delayedMessage = new DelayedMessage();
                         delayedMessage.originalPath = originalPath;
-                        delayedMessage.sendRequest = reqSend;
                         delayedMessage.type = 2;
                         delayedMessage.obj = newMsgObj;
                         delayedMessage.documentLocation = document;
@@ -2091,26 +2140,73 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                         media.id = new TLRPC.TL_inputDocument();
                         media.id.id = document.id;
                         media.id.access_hash = document.access_hash;
-                        reqSend.media = media;
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        inputMedia = media;
                     }
                 } else if (type == 8) {
                     if (audio.access_hash == 0) {
-                        reqSend.media = new TLRPC.TL_inputMediaUploadedAudio();
-                        reqSend.media.duration = audio.duration;
-                        reqSend.media.mime_type = audio.mime_type;
-                        DelayedMessage delayedMessage = new DelayedMessage();
-                        delayedMessage.sendRequest = reqSend;
+                        inputMedia = new TLRPC.TL_inputMediaUploadedAudio();
+                        inputMedia.duration = audio.duration;
+                        inputMedia.mime_type = audio.mime_type;
+                        delayedMessage = new DelayedMessage();
                         delayedMessage.type = 3;
                         delayedMessage.obj = newMsgObj;
                         delayedMessage.audioLocation = audio;
-                        performSendDelayedMessage(delayedMessage);
                     } else {
                         TLRPC.TL_inputMediaAudio media = new TLRPC.TL_inputMediaAudio();
                         media.id = new TLRPC.TL_inputAudio();
                         media.id.id = audio.id;
                         media.id.access_hash = audio.access_hash;
-                        reqSend.media = media;
+                        inputMedia = media;
+                    }
+                }
+
+                TLObject reqSend = null;
+
+                if (sendToPeers != null) {
+                    TLRPC.TL_messages_sendBroadcast request = new TLRPC.TL_messages_sendBroadcast();
+                    request.contacts = sendToPeers;
+                    request.media = inputMedia;
+                    request.message = "";
+                    if (delayedMessage != null) {
+                        delayedMessage.sendRequest = request;
+                    }
+                    reqSend = request;
+                } else {
+                    TLRPC.TL_messages_sendMedia request = new TLRPC.TL_messages_sendMedia();
+                    request.peer = sendToPeer;
+                    request.random_id = newMsg.random_id;
+                    request.media = inputMedia;
+                    if (delayedMessage != null) {
+                        delayedMessage.sendRequest = request;
+                    }
+                    reqSend = request;
+                }
+                if (type == 1) {
+                    performSendMessageRequest(reqSend, newMsgObj, null);
+                } else if (type == 2) {
+                    if (photo.access_hash == 0) {
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
+                } else if (type == 3) {
+                    if (video.access_hash == 0) {
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
+                } else if (type == 6) {
+                    performSendMessageRequest(reqSend, newMsgObj, null);
+                } else if (type == 7) {
+                    if (document.access_hash == 0) {
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
+                        performSendMessageRequest(reqSend, newMsgObj, null);
+                    }
+                } else if (type == 8) {
+                    if (audio.access_hash == 0) {
+                        performSendDelayedMessage(delayedMessage);
+                    } else {
                         performSendMessageRequest(reqSend, newMsgObj, null);
                     }
                 }
@@ -2361,7 +2457,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 FileLoader.getInstance().replaceImageInCache(fileName, fileName2);
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true);
+                MessagesStorage.getInstance().putMessages(arr, false, true, false);
 
                 MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.photo, 3);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
@@ -2384,7 +2480,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                 newMsg.media.video.mime_type = video.mime_type;
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true);
+                MessagesStorage.getInstance().putMessages(arr, false, true, false);
 
                 MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.video, 5);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
@@ -2411,7 +2507,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
 
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true);
+                MessagesStorage.getInstance().putMessages(arr, false, true, false);
 
                 MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.document, 4);
             } else if (newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
@@ -2439,7 +2535,7 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
 
                 ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
                 arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true);
+                MessagesStorage.getInstance().putMessages(arr, false, true, false);
             }
         }
     }
@@ -2540,12 +2636,13 @@ public void run() {
         });
     }
 
-    private void performSendMessageRequest(TLObject req, final MessageObject newMsgObj, final String originalPath) {
+    private void performSendMessageRequest(final TLObject req, final MessageObject newMsgObj, final String originalPath) {
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
                     final int oldId = newMsgObj.messageOwner.id;
+                    final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
                     final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
 
                     if (response instanceof TLRPC.TL_messages_sentMessage) {
@@ -2597,9 +2694,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     } else if (response instanceof TLRPC.messages_StatedMessages) {
                         TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
                         if (!res.messages.isEmpty()) {
+                            sentMessages.addAll(res.messages);
                             TLRPC.Message message = res.messages.get(0);
-                            newMsgObj.messageOwner.id = message.id;
-                            sentMessages.add(message);
+                            if (!isBroadcast) {
+                                newMsgObj.messageOwner.id = message.id;
+                            }
                             processSentMessage(newMsgObj.messageOwner, message, null, null, originalPath);
                         }
                         if (MessagesStorage.lastSeqValue + 1 == res.seq) {
@@ -2624,13 +2723,28 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, newMsgObj.messageOwner.id, 0, false);
-                            MessagesStorage.getInstance().putMessages(sentMessages, true, false);
+                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.messageOwner.random_id, oldId, (isBroadcast ? oldId : newMsgObj.messageOwner.id), 0, false);
+                            MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast);
+                            if (isBroadcast) {
+                                ArrayList<TLRPC.Message> currentMessage = new ArrayList<TLRPC.Message>();
+                                currentMessage.add(newMsgObj.messageOwner);
+                                newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENT;
+                                MessagesStorage.getInstance().putMessages(currentMessage, true, false, false);
+                            }
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENT;
-                                    NotificationCenter.getInstance().postNotificationName(messageReceivedByServer, oldId, newMsgObj.messageOwner.id, newMsgObj);
+                                    if (isBroadcast) {
+                                        for (TLRPC.Message message : sentMessages) {
+                                            ArrayList<MessageObject> arr = new ArrayList<MessageObject>();
+                                            MessageObject messageObject = new MessageObject(message, users, 0);
+                                            arr.add(messageObject);
+                                            updateInterfaceWithMessages(messageObject.getDialogId(), arr, isBroadcast);
+                                        }
+                                        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                                    }
+                                    NotificationCenter.getInstance().postNotificationName(messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.messageOwner.id), newMsgObj);
                                     sendingMessages.remove(oldId);
                                 }
                             });
@@ -2682,7 +2796,13 @@ private void performSendDelayedMessage(final DelayedMessage message) {
             }
         } else if (message.type == 1) {
             if (message.sendRequest != null) {
-                if (message.sendRequest.media.thumb == null) {
+                TLRPC.InputMedia media = null;
+                if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                    media = ((TLRPC.TL_messages_sendMedia)message.sendRequest).media;
+                } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                    media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
+                }
+                if (media.thumb == null) {
                     String location = AndroidUtilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                     putToDelayedMessages(location, message);
                     FileLoader.getInstance().uploadFile(location, false);
@@ -2703,7 +2823,13 @@ private void performSendDelayedMessage(final DelayedMessage message) {
                 FileLoader.getInstance().uploadFile(location, true);
             }
         } else if (message.type == 2) {
-            if (message.sendRequest != null && message.sendRequest.media.thumb == null && message.location != null) {
+            TLRPC.InputMedia media = null;
+            if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                media = ((TLRPC.TL_messages_sendMedia)message.sendRequest).media;
+            } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
+            }
+            if (message.sendRequest != null && media.thumb == null && message.location != null) {
                 String location = AndroidUtilities.getCacheDir() + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
                 putToDelayedMessages(location, message);
                 FileLoader.getInstance().uploadFile(location, false);
@@ -2727,78 +2853,133 @@ private void performSendDelayedMessage(final DelayedMessage message) {
         }
     }
 
-    public long createChat(String title, ArrayList<Integer> selectedContacts, final TLRPC.InputFile uploadedAvatar) {
-        TLRPC.TL_messages_createChat req = new TLRPC.TL_messages_createChat();
-        req.title = title;
-        for (Integer uid : selectedContacts) {
-            TLRPC.User user = users.get(uid);
-            if (user == null) {
-                continue;
+    public long createChat(String title, ArrayList<Integer> selectedContacts, final TLRPC.InputFile uploadedAvatar, boolean isBroadcast) {
+        if (isBroadcast) {
+            TLRPC.TL_chat chat = new TLRPC.TL_chat();
+            chat.id = UserConfig.lastBroadcastId;
+            chat.title = title;
+            chat.photo = new TLRPC.TL_chatPhotoEmpty();
+            chat.participants_count = selectedContacts.size();
+            chat.date = (int)(System.currentTimeMillis() / 1000);
+            chat.left = false;
+            chat.version = 1;
+            UserConfig.lastBroadcastId--;
+            chats.put(chat.id, chat);
+            ArrayList<TLRPC.Chat> chatsArrays = new ArrayList<TLRPC.Chat>();
+            chatsArrays.add(chat);
+            MessagesStorage.getInstance().putUsersAndChats(null, chatsArrays, true, true);
+
+            TLRPC.TL_chatParticipants participants = new TLRPC.TL_chatParticipants();
+            participants.chat_id = chat.id;
+            participants.admin_id = UserConfig.getClientUserId();
+            participants.version = 1;
+            for (Integer id : selectedContacts) {
+                TLRPC.TL_chatParticipant participant = new TLRPC.TL_chatParticipant();
+                participant.user_id = id;
+                participant.inviter_id = UserConfig.getClientUserId();
+                participant.date = (int)(System.currentTimeMillis() / 1000);
+                participants.participants.add(participant);
             }
-            req.users.add(getInputUser(user));
-        }
-        return ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
+            MessagesStorage.getInstance().updateChatInfo(chat.id, participants, false);
+
+            TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
+            newMsg.action = new TLRPC.TL_messageActionCreatedBroadcastList();
+            newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
+            newMsg.from_id = UserConfig.getClientUserId();
+            newMsg.unread = false;
+            newMsg.dialog_id = ((long)chat.id) << 32;
+            newMsg.to_id = new TLRPC.TL_peerChat();
+            newMsg.to_id.chat_id = chat.id;
+            newMsg.out = false;
+            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
+            newMsg.random_id = 0;
+            UserConfig.saveConfig(false);
+            MessageObject newMsgObj = new MessageObject(newMsg, users);
+            newMsgObj.messageOwner.send_state = MESSAGE_SEND_STATE_SENT;
+
+            ArrayList<MessageObject> objArr = new ArrayList<MessageObject>();
+            objArr.add(newMsgObj);
+            ArrayList<TLRPC.Message> arr = new ArrayList<TLRPC.Message>();
+            arr.add(newMsg);
+            MessagesStorage.getInstance().putMessages(arr, false, true, false);
+            updateInterfaceWithMessages(newMsg.dialog_id, objArr);
+            NotificationCenter.getInstance().postNotificationName(chatDidCreated, chat.id);
+            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+
+            return 0;
+        } else {
+            TLRPC.TL_messages_createChat req = new TLRPC.TL_messages_createChat();
+            req.title = title;
+            for (Integer uid : selectedContacts) {
+                TLRPC.User user = users.get(uid);
+                if (user == null) {
+                    continue;
+                }
+                req.users.add(getInputUser(user));
+            }
+            return ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error != null) {
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                NotificationCenter.getInstance().postNotificationName(chatDidFailCreate);
+                            }
+                        });
+                        return;
+                    }
+                    final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+
                     Utilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            NotificationCenter.getInstance().postNotificationName(chatDidFailCreate);
+                            for (TLRPC.User user : res.users) {
+                                users.put(user.id, user);
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
+                                }
+                            }
+                            for (TLRPC.Chat chat : res.chats) {
+                                chats.put(chat.id, chat);
+                            }
+                            final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
+                            messagesObj.add(new MessageObject(res.message, users));
+                            TLRPC.Chat chat = res.chats.get(0);
+                            updateInterfaceWithMessages(-chat.id, messagesObj);
+                            NotificationCenter.getInstance().postNotificationName(chatDidCreated, chat.id);
+                            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                            if (uploadedAvatar != null) {
+                                changeChatAvatar(chat.id, uploadedAvatar);
+                            }
                         }
                     });
-                    return;
-                }
-                final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
-                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User user : res.users) {
-                            users.put(user.id, user);
-                            if (user.id == UserConfig.getClientUserId()) {
-                                UserConfig.setCurrentUser(user);
+                    final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
+                    messages.add(res.message);
+                    MessagesStorage.getInstance().putMessages(messages, true, true, false);
+                    if (MessagesStorage.lastSeqValue + 1 == res.seq) {
+                        MessagesStorage.lastSeqValue = res.seq;
+                        MessagesStorage.lastPtsValue = res.pts;
+                        MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+                    } else if (MessagesStorage.lastSeqValue != res.seq) {
+                        FileLog.e("tmessages", "need get diff TL_messages_createChat, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
+                        if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTime == 0) {
+                                updatesStartWaitTime = System.currentTimeMillis();
                             }
+                            FileLog.e("tmessages", "add TL_messages_createChat to queue");
+                            UserActionUpdates updates = new UserActionUpdates();
+                            updates.seq = res.seq;
+                            updatesQueue.add(updates);
+                        } else {
+                            getDifference();
                         }
-                        for (TLRPC.Chat chat : res.chats) {
-                            chats.put(chat.id, chat);
-                        }
-                        final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
-                        messagesObj.add(new MessageObject(res.message, users));
-                        TLRPC.Chat chat = res.chats.get(0);
-                        updateInterfaceWithMessages(-chat.id, messagesObj);
-                        NotificationCenter.getInstance().postNotificationName(chatDidCreated, chat.id);
-                        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                        if (uploadedAvatar != null) {
-                            changeChatAvatar(chat.id, uploadedAvatar);
-                        }
-                    }
-                });
-
-                final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
-                messages.add(res.message);
-                MessagesStorage.getInstance().putMessages(messages, true, true);
-                if (MessagesStorage.lastSeqValue + 1 == res.seq) {
-                    MessagesStorage.lastSeqValue = res.seq;
-                    MessagesStorage.lastPtsValue = res.pts;
-                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-                } else if (MessagesStorage.lastSeqValue != res.seq) {
-                    FileLog.e("tmessages", "need get diff TL_messages_createChat, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
-                        }
-                        FileLog.e("tmessages", "add TL_messages_createChat to queue");
-                        UserActionUpdates updates = new UserActionUpdates();
-                        updates.seq = res.seq;
-                        updatesQueue.add(updates);
-                    } else {
-                        getDifference();
                     }
                 }
-            }
-        });
+            });
+        }
     }
 
     public void addUserToChat(int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info, int count_fwd) {
@@ -2806,223 +2987,285 @@ public void addUserToChat(int chat_id, final TLRPC.User user, final TLRPC.ChatPa
             return;
         }
 
-        TLRPC.TL_messages_addChatUser req = new TLRPC.TL_messages_addChatUser();
-        req.chat_id = chat_id;
-        req.fwd_limit = count_fwd;
-        req.user_id = getInputUser(user);
+        if (chat_id > 0) {
+            TLRPC.TL_messages_addChatUser req = new TLRPC.TL_messages_addChatUser();
+            req.chat_id = chat_id;
+            req.fwd_limit = count_fwd;
+            req.user_id = getInputUser(user);
 
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error != null) {
+                        return;
+                    }
 
-                final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
-                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+                    final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User user : res.users) {
-                            users.put(user.id, user);
-                            if (user.id == UserConfig.getClientUserId()) {
-                                UserConfig.setCurrentUser(user);
+                    Utilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            for (TLRPC.User user : res.users) {
+                                users.put(user.id, user);
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
+                                }
                             }
-                        }
-                        for (TLRPC.Chat chat : res.chats) {
+                            for (TLRPC.Chat chat : res.chats) {
+                                chats.put(chat.id, chat);
+                            }
+                            final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
+                            messagesObj.add(new MessageObject(res.message, users));
+                            TLRPC.Chat chat = res.chats.get(0);
                             chats.put(chat.id, chat);
-                        }
-                        final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
-                        messagesObj.add(new MessageObject(res.message, users));
-                        TLRPC.Chat chat = res.chats.get(0);
-                        chats.put(chat.id, chat);
-                        updateInterfaceWithMessages(-chat.id, messagesObj);
-                        NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
-                        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                            updateInterfaceWithMessages(-chat.id, messagesObj);
+                            NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
+                            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
 
-                        if (info != null) {
-                            for (TLRPC.TL_chatParticipant p : info.participants) {
-                                if (p.user_id == user.id) {
-                                    return;
+                            if (info != null) {
+                                for (TLRPC.TL_chatParticipant p : info.participants) {
+                                    if (p.user_id == user.id) {
+                                        return;
+                                    }
                                 }
+                                TLRPC.TL_chatParticipant newPart = new TLRPC.TL_chatParticipant();
+                                newPart.user_id = user.id;
+                                newPart.inviter_id = UserConfig.getClientUserId();
+                                newPart.date = ConnectionsManager.getInstance().getCurrentTime();
+                                info.participants.add(0, newPart);
+                                MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
+                                NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
                             }
-                            TLRPC.TL_chatParticipant newPart = new TLRPC.TL_chatParticipant();
-                            newPart.user_id = user.id;
-                            newPart.inviter_id = UserConfig.getClientUserId();
-                            newPart.date = ConnectionsManager.getInstance().getCurrentTime();
-                            info.participants.add(0, newPart);
-                            MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
-                            NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
                         }
-                    }
-                });
+                    });
 
-                final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
-                messages.add(res.message);
-                MessagesStorage.getInstance().putMessages(messages, true, true);
-                if (MessagesStorage.lastSeqValue + 1 == res.seq) {
-                    MessagesStorage.lastSeqValue = res.seq;
-                    MessagesStorage.lastPtsValue = res.pts;
-                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-                } else if (MessagesStorage.lastSeqValue != res.seq) {
-                    FileLog.e("tmessages", "need get diff TL_messages_addChatUser, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+                    final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
+                    messages.add(res.message);
+                    MessagesStorage.getInstance().putMessages(messages, true, true, false);
+                    if (MessagesStorage.lastSeqValue + 1 == res.seq) {
+                        MessagesStorage.lastSeqValue = res.seq;
+                        MessagesStorage.lastPtsValue = res.pts;
+                        MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+                    } else if (MessagesStorage.lastSeqValue != res.seq) {
+                        FileLog.e("tmessages", "need get diff TL_messages_addChatUser, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
+                        if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTime == 0) {
+                                updatesStartWaitTime = System.currentTimeMillis();
+                            }
+                            FileLog.e("tmessages", "add TL_messages_addChatUser to queue");
+                            UserActionUpdates updates = new UserActionUpdates();
+                            updates.seq = res.seq;
+                            updatesQueue.add(updates);
+                        } else {
+                            getDifference();
                         }
-                        FileLog.e("tmessages", "add TL_messages_addChatUser to queue");
-                        UserActionUpdates updates = new UserActionUpdates();
-                        updates.seq = res.seq;
-                        updatesQueue.add(updates);
-                    } else {
-                        getDifference();
                     }
                 }
+            });
+        } else {
+            if (info != null) {
+                for (TLRPC.TL_chatParticipant p : info.participants) {
+                    if (p.user_id == user.id) {
+                        return;
+                    }
+                }
+
+                TLRPC.Chat chat = chats.get(chat_id);
+                chat.participants_count++;
+                ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<TLRPC.Chat>();
+                chatArrayList.add(chat);
+                MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
+
+                TLRPC.TL_chatParticipant newPart = new TLRPC.TL_chatParticipant();
+                newPart.user_id = user.id;
+                newPart.inviter_id = UserConfig.getClientUserId();
+                newPart.date = ConnectionsManager.getInstance().getCurrentTime();
+                info.participants.add(0, newPart);
+                MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
+                NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
+                NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
             }
-        });
+        }
     }
 
     public void deleteUserFromChat(int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info) {
         if (user == null) {
             return;
         }
-        TLRPC.TL_messages_deleteChatUser req = new TLRPC.TL_messages_deleteChatUser();
-        req.chat_id = chat_id;
-        req.user_id = getInputUser(user);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
-                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+        if (chat_id > 0) {
+            TLRPC.TL_messages_deleteChatUser req = new TLRPC.TL_messages_deleteChatUser();
+            req.chat_id = chat_id;
+            req.user_id = getInputUser(user);
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error != null) {
+                        return;
+                    }
+                    final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User user : res.users) {
-                            users.put(user.id, user);
-                            if (user.id == UserConfig.getClientUserId()) {
-                                UserConfig.setCurrentUser(user);
+                    Utilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            for (TLRPC.User user : res.users) {
+                                users.put(user.id, user);
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
+                                }
                             }
-                        }
-                        for (TLRPC.Chat chat : res.chats) {
-                            chats.put(chat.id, chat);
-                        }
-                        if (user.id != UserConfig.getClientUserId()) {
-                            final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
-                            messagesObj.add(new MessageObject(res.message, users));
-                            TLRPC.Chat chat = res.chats.get(0);
-                            chats.put(chat.id, chat);
-                            updateInterfaceWithMessages(-chat.id, messagesObj);
-                            NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
-                            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                        }
-                        boolean changed = false;
-                        if (info != null) {
-                            for (int a = 0; a < info.participants.size(); a++) {
-                                TLRPC.TL_chatParticipant p = info.participants.get(a);
-                                if (p.user_id == user.id) {
-                                    info.participants.remove(a);
-                                    changed = true;
-                                    break;
+                            for (TLRPC.Chat chat : res.chats) {
+                                chats.put(chat.id, chat);
+                            }
+                            if (user.id != UserConfig.getClientUserId()) {
+                                final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
+                                messagesObj.add(new MessageObject(res.message, users));
+                                TLRPC.Chat chat = res.chats.get(0);
+                                chats.put(chat.id, chat);
+                                updateInterfaceWithMessages(-chat.id, messagesObj);
+                                NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
+                                NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                            }
+                            boolean changed = false;
+                            if (info != null) {
+                                for (int a = 0; a < info.participants.size(); a++) {
+                                    TLRPC.TL_chatParticipant p = info.participants.get(a);
+                                    if (p.user_id == user.id) {
+                                        info.participants.remove(a);
+                                        changed = true;
+                                        break;
+                                    }
+                                }
+                                if (changed) {
+                                    MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
+                                    NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
                                 }
                             }
-                            if (changed) {
-                                MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
-                                NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
+                        }
+                    });
+
+                    if (user.id != UserConfig.getClientUserId()) {
+                        final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
+                        messages.add(res.message);
+                        MessagesStorage.getInstance().putMessages(messages, true, true, false);
+                    }
+                    if (MessagesStorage.lastSeqValue + 1 == res.seq) {
+                        MessagesStorage.lastSeqValue = res.seq;
+                        MessagesStorage.lastPtsValue = res.pts;
+                        MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+                    } else if (MessagesStorage.lastSeqValue != res.seq) {
+                        FileLog.e("tmessages", "need get diff TL_messages_deleteChatUser, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
+                        if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTime == 0) {
+                                updatesStartWaitTime = System.currentTimeMillis();
                             }
+                            FileLog.e("tmessages", "add TL_messages_deleteChatUser to queue");
+                            UserActionUpdates updates = new UserActionUpdates();
+                            updates.seq = res.seq;
+                            updatesQueue.add(updates);
+                        } else {
+                            getDifference();
                         }
                     }
-                });
-
-                if (user.id != UserConfig.getClientUserId()) {
-                    final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
-                    messages.add(res.message);
-                    MessagesStorage.getInstance().putMessages(messages, true, true);
                 }
-                if (MessagesStorage.lastSeqValue + 1 == res.seq) {
-                    MessagesStorage.lastSeqValue = res.seq;
-                    MessagesStorage.lastPtsValue = res.pts;
-                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-                } else if (MessagesStorage.lastSeqValue != res.seq) {
-                    FileLog.e("tmessages", "need get diff TL_messages_deleteChatUser, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+            });
+        } else {
+            if (info != null) {
+                TLRPC.Chat chat = chats.get(chat_id);
+                chat.participants_count--;
+                ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<TLRPC.Chat>();
+                chatArrayList.add(chat);
+                MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
+
+                boolean changed = false;
+                if (info != null) {
+                    for (int a = 0; a < info.participants.size(); a++) {
+                        TLRPC.TL_chatParticipant p = info.participants.get(a);
+                        if (p.user_id == user.id) {
+                            info.participants.remove(a);
+                            changed = true;
+                            break;
                         }
-                        FileLog.e("tmessages", "add TL_messages_deleteChatUser to queue");
-                        UserActionUpdates updates = new UserActionUpdates();
-                        updates.seq = res.seq;
-                        updatesQueue.add(updates);
-                    } else {
-                        getDifference();
+                    }
+                    if (changed) {
+                        MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
+                        NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
                     }
                 }
+                NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
             }
-        });
+        }
     }
 
     public void changeChatTitle(int chat_id, String title) {
-        TLRPC.TL_messages_editChatTitle req = new TLRPC.TL_messages_editChatTitle();
-        req.chat_id = chat_id;
-        req.title = title;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
-                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+        if (chat_id > 0) {
+            TLRPC.TL_messages_editChatTitle req = new TLRPC.TL_messages_editChatTitle();
+            req.chat_id = chat_id;
+            req.title = title;
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error != null) {
+                        return;
+                    }
+                    final TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
 
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User user : res.users) {
-                            users.put(user.id, user);
-                            if (user.id == UserConfig.getClientUserId()) {
-                                UserConfig.setCurrentUser(user);
+                    Utilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            for (TLRPC.User user : res.users) {
+                                users.put(user.id, user);
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    UserConfig.setCurrentUser(user);
+                                }
                             }
-                        }
-                        for (TLRPC.Chat chat : res.chats) {
+                            for (TLRPC.Chat chat : res.chats) {
+                                chats.put(chat.id, chat);
+                            }
+                            final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
+                            messagesObj.add(new MessageObject(res.message, users));
+                            TLRPC.Chat chat = res.chats.get(0);
                             chats.put(chat.id, chat);
+                            updateInterfaceWithMessages(-chat.id, messagesObj);
+                            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                            NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_NAME);
                         }
-                        final ArrayList<MessageObject> messagesObj = new ArrayList<MessageObject>();
-                        messagesObj.add(new MessageObject(res.message, users));
-                        TLRPC.Chat chat = res.chats.get(0);
-                        chats.put(chat.id, chat);
-                        updateInterfaceWithMessages(-chat.id, messagesObj);
-                        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                        NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_NAME);
-                    }
-                });
+                    });
 
-                final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
-                messages.add(res.message);
-                MessagesStorage.getInstance().putMessages(messages, true, true);
-                if (MessagesStorage.lastSeqValue + 1 == res.seq) {
-                    MessagesStorage.lastSeqValue = res.seq;
-                    MessagesStorage.lastPtsValue = res.pts;
-                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-                } else if (MessagesStorage.lastSeqValue != res.seq) {
-                    FileLog.e("tmessages", "need get diff TL_messages_editChatTitle, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+                    final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
+                    messages.add(res.message);
+                    MessagesStorage.getInstance().putMessages(messages, true, true, false);
+                    if (MessagesStorage.lastSeqValue + 1 == res.seq) {
+                        MessagesStorage.lastSeqValue = res.seq;
+                        MessagesStorage.lastPtsValue = res.pts;
+                        MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+                    } else if (MessagesStorage.lastSeqValue != res.seq) {
+                        FileLog.e("tmessages", "need get diff TL_messages_editChatTitle, seq: " + MessagesStorage.lastSeqValue + " " + res.seq);
+                        if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTime == 0) {
+                                updatesStartWaitTime = System.currentTimeMillis();
+                            }
+                            FileLog.e("tmessages", "add TL_messages_editChatTitle to queue");
+                            UserActionUpdates updates = new UserActionUpdates();
+                            updates.seq = res.seq;
+                            updatesQueue.add(updates);
+                        } else {
+                            getDifference();
                         }
-                        FileLog.e("tmessages", "add TL_messages_editChatTitle to queue");
-                        UserActionUpdates updates = new UserActionUpdates();
-                        updates.seq = res.seq;
-                        updatesQueue.add(updates);
-                    } else {
-                        getDifference();
                     }
                 }
-            }
-        });
+            });
+        } else {
+            TLRPC.Chat chat = chats.get(chat_id);
+            chat.title = title;
+            ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<TLRPC.Chat>();
+            chatArrayList.add(chat);
+            MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
+            NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+            NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_CHAT_NAME);
+        }
     }
 
     public void changeChatAvatar(int chat_id, TLRPC.InputFile uploadedAvatar) {
@@ -3068,7 +3311,7 @@ public void run() {
 
                 final ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
                 messages.add(res.message);
-                MessagesStorage.getInstance().putMessages(messages, true, true);
+                MessagesStorage.getInstance().putMessages(messages, true, true, false);
                 if (MessagesStorage.lastSeqValue + 1 == res.seq) {
                     MessagesStorage.lastSeqValue = res.seq;
                     MessagesStorage.lastPtsValue = res.pts;
@@ -3401,7 +3644,7 @@ public void run() {
 
                                         final ArrayList<MessageObject> pushMessages = new ArrayList<MessageObject>();
                                         for (TLRPC.Message message : res.new_messages) {
-                                            MessageObject obj = new MessageObject(message, usersDict);
+                                            MessageObject obj = new MessageObject(message, usersDict, 2);
 
                                             long dialog_id = obj.messageOwner.dialog_id;
                                             if (dialog_id == 0) {
@@ -3457,7 +3700,7 @@ public void run() {
                                             @Override
                                             public void run() {
                                                 MessagesStorage.getInstance().startTransaction(false);
-                                                MessagesStorage.getInstance().putMessages(res.new_messages, false, false);
+                                                MessagesStorage.getInstance().putMessages(res.new_messages, false, false, false);
                                                 MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, false);
                                                 MessagesStorage.getInstance().commitTransaction(false);
                                             }
@@ -3557,7 +3800,7 @@ public void run() {
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                         }
                     });
-                    MessagesStorage.getInstance().putMessages(arr, false, true);
+                    MessagesStorage.getInstance().putMessages(arr, false, true, false);
                 } else if (MessagesStorage.lastSeqValue != updates.seq) {
                     FileLog.e("tmessages", "need get diff TL_updateShortChatMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
                     if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
@@ -3612,7 +3855,7 @@ public void run() {
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
                         }
                     });
-                    MessagesStorage.getInstance().putMessages(arr, false, true);
+                    MessagesStorage.getInstance().putMessages(arr, false, true, false);
                 } else if (MessagesStorage.lastSeqValue != updates.seq) {
                     FileLog.e("tmessages", "need get diff TL_updateShortMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
                     if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
@@ -3785,7 +4028,7 @@ public void run() {
                     }
                 }
                 messagesArr.add(upd.message);
-                MessageObject obj = new MessageObject(upd.message, usersDict);
+                MessageObject obj = new MessageObject(upd.message, usersDict, 2);
                 if (obj.type == 11) {
                     interfaceUpdateMask |= UPDATE_MASK_CHAT_AVATAR;
                 } else if (obj.type == 10) {
@@ -3934,7 +4177,7 @@ public void run() {
                 if (message != null) {
                     int cid = ((TLRPC.TL_updateNewEncryptedMessage)update).message.chat_id;
                     messagesArr.add(message);
-                    MessageObject obj = new MessageObject(message, usersDict);
+                    MessageObject obj = new MessageObject(message, usersDict, 2);
                     long uid = ((long)cid) << 32;
                     ArrayList<MessageObject> arr = messages.get(uid);
                     if (arr == null) {
@@ -4083,7 +4326,7 @@ public void run() {
         }
 
         if (!messagesArr.isEmpty()) {
-            MessagesStorage.getInstance().putMessages(messagesArr, true, true);
+            MessagesStorage.getInstance().putMessages(messagesArr, true, true, false);
         }
 
         Utilities.RunOnUIThread(new Runnable() {
@@ -4137,7 +4380,7 @@ public void run() {
                                 } else {
                                     editor.remove("notify2_" + dialog_id);
                                 }
-                            } else if (update.peer instanceof TLRPC.TL_notifyChats) {
+                            }/* else if (update.peer instanceof TLRPC.TL_notifyChats) { disable global settings sync
                                 if (editor == null) {
                                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                                     editor = preferences.edit();
@@ -4151,7 +4394,7 @@ public void run() {
                                 }
                                 editor.putBoolean("EnableAll", update.notify_settings.mute_until == 0);
                                 editor.putBoolean("EnablePreviewAll", update.notify_settings.show_previews);
-                            }
+                            }*/
                         }
                     }
                     if (editor != null) {
@@ -4318,6 +4561,10 @@ public void run() {
     }
 
     private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages) {
+        updateInterfaceWithMessages(uid, messages, false);
+    }
+
+    private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages, boolean isBroadcast) {
         MessageObject lastMessage = null;
         TLRPC.TL_dialog dialog = dialogs_dict.get(uid);
 
@@ -4334,24 +4581,28 @@ private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> mess
         boolean changed = false;
 
         if (dialog == null) {
-            dialog = new TLRPC.TL_dialog();
-            dialog.id = uid;
-            dialog.unread_count = 0;
-            dialog.top_message = lastMessage.messageOwner.id;
-            dialog.last_message_date = lastMessage.messageOwner.date;
-            dialogs_dict.put(uid, dialog);
-            dialogs.add(dialog);
-            dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
-            changed = true;
+            if (!isBroadcast) {
+                dialog = new TLRPC.TL_dialog();
+                dialog.id = uid;
+                dialog.unread_count = 0;
+                dialog.top_message = lastMessage.messageOwner.id;
+                dialog.last_message_date = lastMessage.messageOwner.date;
+                dialogs_dict.put(uid, dialog);
+                dialogs.add(dialog);
+                dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+                changed = true;
+            }
         } else {
             if (dialog.top_message > 0 && lastMessage.messageOwner.id > 0 && lastMessage.messageOwner.id > dialog.top_message ||
                     dialog.top_message < 0 && lastMessage.messageOwner.id < 0 && lastMessage.messageOwner.id < dialog.top_message ||
                     dialog.last_message_date < lastMessage.messageOwner.date) {
                 dialogMessage.remove(dialog.top_message);
                 dialog.top_message = lastMessage.messageOwner.id;
-                dialog.last_message_date = lastMessage.messageOwner.date;
+                if (!isBroadcast) {
+                    dialog.last_message_date = lastMessage.messageOwner.date;
+                    changed = true;
+                }
                 dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
-                changed = true;
             }
         }
 
@@ -4598,8 +4849,13 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             public void run() {
                                 TLRPC.TL_dialog dialog = dialogs_dict.get(did);
                                 if (dialog != null) {
+                                    dialog.unread_count = 0;
                                     dialogMessage.remove(dialog.top_message);
                                 }
+                                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE);
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<Long, Integer>();
+                                dialogsToUpdate.put(did, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate, true);
                                 MessagesStorage.getInstance().deleteDialog(did, true);
                                 NotificationCenter.getInstance().postNotificationName(removeAllMessagesFromDialog, did);
                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index b63b59e1e..58c25e751 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -367,6 +367,7 @@ public void run() {
                         database.executeFast("DELETE FROM dialogs WHERE did = " + did).stepThis().dispose();
                         database.executeFast("DELETE FROM chat_settings WHERE uid = " + did).stepThis().dispose();
                     }
+                    database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM media_counts WHERE uid = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM messages WHERE uid = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM media WHERE uid = " + did).stepThis().dispose();
@@ -1808,7 +1809,7 @@ public void run() {
         }
     }
 
-    private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final boolean withTransaction) {
+    private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, final boolean isBroadcast) {
         try {
             if (withTransaction) {
                 database.beginTransaction();
@@ -1949,10 +1950,21 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
             state.dispose();
             state2.dispose();
             state3.dispose();
-            state = database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ifnull((SELECT unread_count FROM dialogs WHERE did = ?), 0) + ?, ?)");
+
+            state = database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?)");
             for (HashMap.Entry<Long, TLRPC.Message> pair : messagesMap.entrySet()) {
-                state.requery();
                 Long key = pair.getKey();
+
+                int dialog_date = 0;
+                int old_unread_count = 0;
+                SQLiteCursor cursor = database.queryFinalized("SELECT date, unread_count FROM dialogs WHERE did = " + key);
+                if (cursor.next()) {
+                    dialog_date = cursor.intValue(0);
+                    old_unread_count = cursor.intValue(1);
+                }
+                cursor.dispose();
+
+                state.requery();
                 TLRPC.Message value = pair.getValue();
                 Integer unread_count = messagesCounts.get(key);
                 if (unread_count == null) {
@@ -1963,10 +1975,13 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                     messageId = value.local_id;
                 }
                 state.bindLong(1, key);
-                state.bindInteger(2, value.date);
-                state.bindLong(3, key);
-                state.bindInteger(4, unread_count);
-                state.bindInteger(5, messageId);
+                if (!isBroadcast) {
+                    state.bindInteger(2, value.date);
+                } else {
+                    state.bindInteger(2, dialog_date != 0 ? dialog_date : value.date);
+                }
+                state.bindInteger(3, unread_count);
+                state.bindInteger(4, messageId);
                 state.step();
             }
             state.dispose();
@@ -2002,7 +2017,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
         }
     }
 
-    public void putMessages(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, boolean useQueue) {
+    public void putMessages(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, boolean useQueue, final boolean isBroadcast) {
         if (messages.size() == 0) {
             return;
         }
@@ -2010,11 +2025,11 @@ public void putMessages(final ArrayList<TLRPC.Message> messages, final boolean w
             storageQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    putMessagesInternal(messages, withTransaction);
+                    putMessagesInternal(messages, withTransaction, isBroadcast);
                 }
             });
         } else {
-            putMessagesInternal(messages, withTransaction);
+            putMessagesInternal(messages, withTransaction, isBroadcast);
         }
     }
 
@@ -2425,9 +2440,15 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
                         }
                     }
                 } else {
-                    int encryptedId = (int)(dialog.id >> 32);
-                    if (!encryptedToLoad.contains(encryptedId)) {
-                        encryptedToLoad.add(encryptedId);
+                    int high_id = (int)(dialog.id >> 32);
+                    if (high_id > 0) {
+                        if (!encryptedToLoad.contains(high_id)) {
+                            encryptedToLoad.add(high_id);
+                        }
+                    } else {
+                        if (!chatsToLoad.contains(high_id)) {
+                            chatsToLoad.add(high_id);
+                        }
                     }
                 }
             }
@@ -2692,9 +2713,15 @@ public void run() {
                                 }
                             }
                         } else {
-                            int encryptedId = (int)(dialog.id >> 32);
-                            if (!encryptedToLoad.contains(encryptedId)) {
-                                encryptedToLoad.add(encryptedId);
+                            int high_id = (int)(dialog.id >> 32);
+                            if (high_id > 0) {
+                                if (!encryptedToLoad.contains(high_id)) {
+                                    encryptedToLoad.add(high_id);
+                                }
+                            } else {
+                                if (!chatsToLoad.contains(high_id)) {
+                                    chatsToLoad.add(high_id);
+                                }
                             }
                         }
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
index 970facb40..ed9bae335 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
@@ -25,8 +25,8 @@
 
     private static final long sizes[] = new long[] {
             799376,     //armeabi
-            848548,     //armeabi-v7a
-            1246260,    //x86
+            852644,     //armeabi-v7a
+            1250356,    //x86
             0,          //mips
     };
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 17e9b9e01..1ec524c98 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -400,7 +400,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             }
 
             if (photoPath != null) {
-                Bitmap img = FileLoader.getInstance().getImageFromMemory(photoPath, null, null, "50_50", false);
+                Bitmap img = FileLoader.getInstance().getImageFromMemory(photoPath, null, null, "50_50");
                 if (img != null) {
                     mBuilder.setLargeIcon(img);
                 }
@@ -536,7 +536,7 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
 
             Boolean value = settingsCache.get(dialog_id);
             boolean isChat = (int)dialog_id < 0;
-            popup = preferences.getInt(isChat ? "popupGroup" : "popupAll", 0);
+            popup = (int)dialog_id == 0 ? 0 : preferences.getInt(isChat ? "popupGroup" : "popupAll", 0);
             if (value == null) {
                 int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
                 value = !(notify_override == 2 || (!preferences.getBoolean("EnableAll", true) || isChat && !preferences.getBoolean("EnableGroup", true)) && notify_override == 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 8af9e0ec2..706fb5e3d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -850,7 +850,7 @@ public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate c
     }
 
     public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, final RPCRequest.RPCQuickAckDelegate quickAckBlock, final boolean requiresCompletion, final int requestClass, final int datacenterId, final boolean runQueue) {
-        if (!UserConfig.isClientActivated() && (requestClass & RPCRequest.RPCRequestClassWithoutLogin) == 0) {
+        if (rpc == null || !UserConfig.isClientActivated() && (requestClass & RPCRequest.RPCRequestClassWithoutLogin) == 0) {
             FileLog.e("tmessages", "can't do request without login " + rpc);
             return 0;
         }
@@ -1752,7 +1752,7 @@ public void run() {
     }
 
     private void registerForPush() {
-        if (registeringForPush) {
+        if (registeringForPush || !UserConfig.isClientActivated()) {
             return;
         }
         UserConfig.registeredForInternalPush = false;
@@ -1805,6 +1805,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         UserConfig.saveConfig(false);
                         saveSession();
                         FileLog.e("tmessages", "registered for internal push");
+                    } else {
+                        UserConfig.registeredForInternalPush = false;
                     }
                     registeringForPush = false;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index cf54747f4..700f37e9a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -248,10 +248,14 @@ public void run() {
 
                             float w_filter = 0;
                             float h_filter = 0;
+                            boolean blur = false;
                             if (filter != null) {
                                 String args[] = filter.split("_");
                                 w_filter = Float.parseFloat(args[0]) * AndroidUtilities.density;
                                 h_filter = Float.parseFloat(args[1]) * AndroidUtilities.density;
+                                if (args.length > 2) {
+                                    blur = true;
+                                }
                                 opts.inJustDecodeBounds = true;
 
                                 if (mediaIdFinal != null) {
@@ -270,7 +274,7 @@ public void run() {
                                 opts.inSampleSize = (int)scaleFactor;
                             }
 
-                            if (filter == null) {
+                            if (filter == null || blur) {
                                 opts.inPreferredConfig = Bitmap.Config.ARGB_8888;
                             } else {
                                 opts.inPreferredConfig = Bitmap.Config.RGB_565;
@@ -300,7 +304,9 @@ public void run() {
                                             image = scaledBitmap;
                                         }
                                     }
-
+                                    if (image != null && blur && bitmapH < 100 && bitmapW < 100) {
+                                        Utilities.blurBitmap(image, (int)bitmapW, (int)bitmapH, image.getRowBytes());
+                                    }
                                 }
                                 if (FileLoader.getInstance().runtimeHack != null) {
                                     FileLoader.getInstance().runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
@@ -494,10 +500,14 @@ public void run() {
 
                     float w_filter = 0;
                     float h_filter;
+                    boolean blur = false;
                     if (filter != null) {
                         String args[] = filter.split("_");
                         w_filter = Float.parseFloat(args[0]) * AndroidUtilities.density;
                         h_filter = Float.parseFloat(args[1]) * AndroidUtilities.density;
+                        if (args.length > 2) {
+                            blur = true;
+                        }
 
                         opts.inJustDecodeBounds = true;
                         BitmapFactory.decodeFile(cacheFileFinal.getAbsolutePath(), opts);
@@ -511,7 +521,7 @@ public void run() {
                         opts.inSampleSize = (int) scaleFactor;
                     }
 
-                    if (filter == null) {
+                    if (filter == null || blur) {
                         opts.inPreferredConfig = Bitmap.Config.ARGB_8888;
                     } else {
                         opts.inPreferredConfig = Bitmap.Config.RGB_565;
@@ -540,7 +550,9 @@ public void run() {
                                     image = scaledBitmap;
                                 }
                             }
-
+                            if (image != null && blur && bitmapH < 100 && bitmapW < 100) {
+                                Utilities.blurBitmap(image, (int)bitmapW, (int)bitmapH, image.getRowBytes());
+                            }
                         }
                         if (image != null && FileLoader.getInstance().runtimeHack != null) {
                             FileLoader.getInstance().runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 7d9f1a951..c46598ffd 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -64,7 +64,7 @@
     private long lastProgressUpdateTime = 0;
     private HashMap<String, Integer> BitmapUseCounts = new HashMap<String, Integer>();
 
-    int lastImageNum;
+    private int lastImageNum = 0;
 
     public static final int FileDidUpload = 10000;
     public static final int FileDidFailUpload = 10001;
@@ -717,15 +717,15 @@ public void run() {
         });
     }
 
-    public Bitmap getImageFromMemory(TLRPC.FileLocation url, ImageReceiver imageView, String filter, boolean cancel) {
-        return getImageFromMemory(url, null, imageView, filter, cancel);
+    public Bitmap getImageFromMemory(TLRPC.FileLocation url, ImageReceiver imageView, String filter) {
+        return getImageFromMemory(url, null, imageView, filter);
     }
 
-    public Bitmap getImageFromMemory(String url, ImageReceiver imageView, String filter, boolean cancel) {
-        return getImageFromMemory(null, url, imageView, filter, cancel);
+    public Bitmap getImageFromMemory(String url, ImageReceiver imageView, String filter) {
+        return getImageFromMemory(null, url, imageView, filter);
     }
 
-    public Bitmap getImageFromMemory(TLRPC.FileLocation url, String httpUrl, ImageReceiver imageView, String filter, boolean cancel) {
+    public Bitmap getImageFromMemory(TLRPC.FileLocation url, String httpUrl, ImageReceiver imageView, String filter) {
         if (url == null && httpUrl == null) {
             return null;
         }
@@ -739,11 +739,7 @@ public Bitmap getImageFromMemory(TLRPC.FileLocation url, String httpUrl, ImageRe
             key += "@" + filter;
         }
 
-        Bitmap img = imageFromKey(key);
-        if (imageView != null && img != null && cancel) {
-            cancelLoadingForImageView(imageView);
-        }
-        return img;
+        return imageFromKey(key);
     }
 
     private void performReplace(String oldKey, String newKey) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index 513417a47..43025e060 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -439,6 +439,7 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_decryptedMessageMediaAudio_old.constructor, TLRPC.TL_decryptedMessageMediaAudio_old.class);
         classStore.put(TLRPC.TL_audio_old.constructor, TLRPC.TL_audio_old.class);
         classStore.put(TLRPC.TL_video_old.constructor, TLRPC.TL_video_old.class);
+        classStore.put(TLRPC.TL_messageActionCreatedBroadcastList.constructor, TLRPC.TL_messageActionCreatedBroadcastList.class);
     }
 
     static TLClassStore store = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index a2dad78c9..6c3c0eb03 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -8996,6 +8996,17 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_messageActionCreatedBroadcastList extends MessageAction {
+        public static int constructor = 0x55555557;
+
+        public void readParams(AbsSerializedData stream) {
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_documentEncrypted extends TL_document {
         public static int constructor = 0x55555556;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 34b469785..7abb922d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -24,6 +24,7 @@
     public static String pushString = "";
     public static int lastSendMessageId = -210000;
     public static int lastLocalId = -210000;
+    public static int lastBroadcastId = -1;
     public static String contactsHash = "";
     public static String importHash = "";
     private final static Integer sync = 1;
@@ -56,6 +57,7 @@ public static void saveConfig(boolean withFile, File oldFile) {
                 editor.putString("importHash", importHash);
                 editor.putBoolean("saveIncomingPhotos", saveIncomingPhotos);
                 editor.putInt("contactsVersion", contactsVersion);
+                editor.putInt("lastBroadcastId", lastBroadcastId);
                 editor.putBoolean("registeredForInternalPush", registeredForInternalPush);
                 if (currentUser != null) {
                     if (withFile) {
@@ -174,6 +176,7 @@ public void run() {
                 importHash = preferences.getString("importHash", "");
                 saveIncomingPhotos = preferences.getBoolean("saveIncomingPhotos", false);
                 contactsVersion = preferences.getInt("contactsVersion", 0);
+                lastBroadcastId = preferences.getInt("lastBroadcastId", -1);
                 registeredForInternalPush = preferences.getBoolean("registeredForInternalPush", false);
                 String user = preferences.getString("user", null);
                 if (user != null) {
@@ -196,6 +199,7 @@ public static void clearConfig() {
         lastLocalId = -210000;
         lastSendMessageId = -210000;
         contactsVersion = 1;
+        lastBroadcastId = -1;
         saveIncomingPhotos = false;
         saveConfig(true);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 9085e859d..79579de05 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -132,6 +132,7 @@
 
     public native static long doPQNative(long _what);
     public native static void loadBitmap(String path, int[] bitmap, int scale, int format, int width, int height);
+    public native static void blurBitmap(Object bitmap, int width, int height, int stride);
     private native static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, int offset, int length);
 
     public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, boolean changeIv, int offset, int length) {
@@ -139,6 +140,9 @@ public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, bo
     }
 
     public static Integer parseInt(String value) {
+        if (value == null) {
+            return 0;
+        }
         Integer val = 0;
         try {
             Matcher matcher = pattern.matcher(value);
@@ -548,7 +552,7 @@ public static int getUserAvatarForId(int id) {
     }
 
     public static int getGroupAvatarForId(int id) {
-        return arrGroupsAvatars[getColorIndex(-id)];
+        return arrGroupsAvatars[getColorIndex(-Math.abs(id))];
     }
 
     public static String MD5(String md5) {
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index c7de0966b..0a6073ab7 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -64,6 +64,10 @@
     public ArrayList<TextLayoutBlock> textLayoutBlocks;
 
     public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users) {
+        this(message, users, 1);
+    }
+
+    public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, int preview) {
         if (textPaint == null) {
             textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             textPaint.setColor(0xff000000);
@@ -137,7 +141,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                 } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
                     photoThumbs = new ArrayList<PhotoObject>();
                     for (TLRPC.PhotoSize size : message.action.photo.sizes) {
-                        photoThumbs.add(new PhotoObject(size));
+                        photoThumbs.add(new PhotoObject(size, preview));
                     }
                     if (isFromMe()) {
                         messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
@@ -233,13 +237,15 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             }
                         }
                     }
+                } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
+                    messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
                 }
             }
         } else if (message.media != null && !(message.media instanceof TLRPC.TL_messageMediaEmpty)) {
             if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                 photoThumbs = new ArrayList<PhotoObject>();
                 for (TLRPC.PhotoSize size : message.media.photo.sizes) {
-                    PhotoObject obj = new PhotoObject(size);
+                    PhotoObject obj = new PhotoObject(size, preview);
                     photoThumbs.add(obj);
                     if (imagePreview == null && obj.image != null) {
                         imagePreview = obj.image;
@@ -248,7 +254,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                 messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
             } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
                 photoThumbs = new ArrayList<PhotoObject>();
-                PhotoObject obj = new PhotoObject(message.media.video.thumb);
+                PhotoObject obj = new PhotoObject(message.media.video.thumb, preview);
                 photoThumbs.add(obj);
                 if (imagePreview == null && obj.image != null) {
                     imagePreview = obj.image;
@@ -263,7 +269,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
                 if (!(message.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
                     photoThumbs = new ArrayList<PhotoObject>();
-                    PhotoObject obj = new PhotoObject(message.media.document.thumb);
+                    PhotoObject obj = new PhotoObject(message.media.document.thumb, preview);
                     photoThumbs.add(obj);
                 }
                 messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java b/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
index a93f03908..5b605b730 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
@@ -13,6 +13,7 @@
 
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.Utilities;
 
 import java.util.ArrayList;
 
@@ -20,18 +21,23 @@
     public TLRPC.PhotoSize photoOwner;
     public Bitmap image;
 
-    public PhotoObject(TLRPC.PhotoSize photo) {
+    public PhotoObject(TLRPC.PhotoSize photo, int preview) {
         photoOwner = photo;
 
-        if (photo instanceof TLRPC.TL_photoCachedSize) {
+        if (preview != 0 && photo instanceof TLRPC.TL_photoCachedSize) {
             BitmapFactory.Options opts = new BitmapFactory.Options();
-            opts.inPreferredConfig = Bitmap.Config.RGB_565;
+            opts.inPreferredConfig = Bitmap.Config.ARGB_8888;
             opts.inDither = false;
             opts.outWidth = photo.w;
             opts.outHeight = photo.h;
             image = BitmapFactory.decodeByteArray(photoOwner.bytes, 0, photoOwner.bytes.length, opts);
-            if (image != null && FileLoader.getInstance().runtimeHack != null) {
-                FileLoader.getInstance().runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
+            if (image != null) {
+                if (preview == 2) {
+                    Utilities.blurBitmap(image, image.getWidth(), image.getHeight(), image.getRowBytes());
+                }
+                if (FileLoader.getInstance().runtimeHack != null) {
+                    FileLoader.getInstance().runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
+                }
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 426959720..b5b8c9fb3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -32,7 +32,7 @@
 import org.telegram.ui.PhotoViewer;
 import org.telegram.ui.Views.GifDrawable;
 import org.telegram.ui.Views.ImageReceiver;
-import org.telegram.ui.Views.ProgressView;
+import org.telegram.ui.Views.RoundProgressView;
 
 import java.io.File;
 import java.util.Locale;
@@ -46,7 +46,7 @@
     private static Drawable placeholderInDrawable;
     private static Drawable placeholderOutDrawable;
     private static Drawable videoIconDrawable;
-    private static Drawable[][] buttonStatesDrawables = new Drawable[4][2];
+    private static Drawable[] buttonStatesDrawables = new Drawable[4];
     private static TextPaint infoPaint;
     private static MessageObject lastDownloadedGifMessage = null;
 
@@ -58,10 +58,11 @@
     private String currentUrl;
     private String currentPhotoFilter;
     private ImageReceiver photoImage;
-    private ProgressView progressView;
+    private RoundProgressView progressView;
     public int downloadPhotos = 0;
     private boolean progressVisible = false;
     private boolean photoNotSet = false;
+    private boolean cancelLoading = false;
 
     private int TAG;
 
@@ -86,14 +87,10 @@ public ChatMediaCell(Context context) {
         if (placeholderInDrawable == null) {
             placeholderInDrawable = getResources().getDrawable(R.drawable.photo_placeholder_in);
             placeholderOutDrawable = getResources().getDrawable(R.drawable.photo_placeholder_out);
-            buttonStatesDrawables[0][0] = getResources().getDrawable(R.drawable.photoload);
-            buttonStatesDrawables[0][1] = getResources().getDrawable(R.drawable.photoload_pressed);
-            buttonStatesDrawables[1][0] = getResources().getDrawable(R.drawable.photocancel);
-            buttonStatesDrawables[1][1] = getResources().getDrawable(R.drawable.photocancel_pressed);
-            buttonStatesDrawables[2][0] = getResources().getDrawable(R.drawable.photogif);
-            buttonStatesDrawables[2][1] = getResources().getDrawable(R.drawable.photogif_pressed);
-            buttonStatesDrawables[3][0] = getResources().getDrawable(R.drawable.playvideo);
-            buttonStatesDrawables[3][1] = getResources().getDrawable(R.drawable.playvideo_pressed);
+            buttonStatesDrawables[0] = getResources().getDrawable(R.drawable.photoload);
+            buttonStatesDrawables[1] = getResources().getDrawable(R.drawable.photocancel);
+            buttonStatesDrawables[2] = getResources().getDrawable(R.drawable.photogif);
+            buttonStatesDrawables[3] = getResources().getDrawable(R.drawable.playvideo);
             videoIconDrawable = getResources().getDrawable(R.drawable.ic_video);
 
             infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
@@ -105,8 +102,7 @@ public ChatMediaCell(Context context) {
 
         photoImage = new ImageReceiver();
         photoImage.parentView = this;
-        progressView = new ProgressView();
-        progressView.setProgressColors(0x802a2a2a, 0xffffffff);
+        progressView = new RoundProgressView();
     }
 
     public void clearGifImage() {
@@ -228,6 +224,7 @@ private void didPressedImage() {
 
     private void didPressedButton() {
         if (buttonState == 0) {
+            cancelLoading = false;
             if (currentMessageObject.type == 1) {
                 if (currentMessageObject.imagePreview != null) {
                     photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(currentMessageObject.imagePreview), currentPhotoObject.photoOwner.size);
@@ -249,6 +246,7 @@ private void didPressedButton() {
                     delegate.didPressedCancelSendButton(this);
                 }
             } else {
+                cancelLoading = true;
                 if (currentMessageObject.type == 1) {
                     FileLoader.getInstance().cancelLoadingForImageView(photoImage);
                 } else if (currentMessageObject.type == 8) {
@@ -307,6 +305,7 @@ private boolean isPhotoDataChanged(MessageObject object) {
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || isUserDataChanged()) {
             super.setMessageObject(messageObject);
+            cancelLoading = false;
 
             progressVisible = false;
             buttonState = -1;
@@ -416,6 +415,9 @@ public void setMessageObject(MessageObject messageObject) {
                     photoHeight = h;
                     backgroundWidth = w + AndroidUtilities.dp(12);
                     currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
+                    if (messageObject.photoThumbs.size() > 1) {
+                        currentPhotoFilter += "_b";
+                    }
 
                     if (currentPhotoObject.image != null) {
                         photoImage.setImageBitmap(currentPhotoObject.image);
@@ -506,20 +508,16 @@ public void updateButtonState() {
             if (!cacheFile.exists()) {
                 MediaController.getInstance().addLoadingFileObserver(fileName, this);
                 if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    if (currentMessageObject.type != 1 || downloadPhotos == 1 || downloadPhotos == 2 && !ConnectionsManager.isConnectedToWiFi()) {
+                    if (cancelLoading || currentMessageObject.type != 1 || downloadPhotos == 1 || downloadPhotos == 2 && !ConnectionsManager.isConnectedToWiFi()) {
                         buttonState = 0;
                         progressVisible = false;
                     } else {
-                        buttonState = -1;
+                        buttonState = 1;
                         progressVisible = true;
                     }
                     progressView.setProgress(0);
                 } else {
-                    if (currentMessageObject.type != 1 || downloadPhotos == 1 || downloadPhotos == 2 && !ConnectionsManager.isConnectedToWiFi()) {
-                        buttonState = 1;
-                    } else {
-                        buttonState = -1;
-                    }
+                    buttonState = 1;
                     progressVisible = true;
                     Float progress = FileLoader.getInstance().fileProgresses.get(fileName);
                     if (progress != null) {
@@ -565,13 +563,10 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         photoImage.imageW = photoWidth;
         photoImage.imageH = photoHeight;
 
-        progressView.width = timeX - photoImage.imageX - AndroidUtilities.dpf(23.0f);
-        progressView.height = AndroidUtilities.dp(3);
-        progressView.progressHeight = AndroidUtilities.dp(3);
-
         int size = AndroidUtilities.dp(44);
         buttonX = (int)(photoImage.imageX + (photoWidth - size) / 2.0f);
         buttonY = (int)(photoImage.imageY + (photoHeight - size) / 2.0f);
+        progressView.rect.set(buttonX + AndroidUtilities.dp(2), buttonY + AndroidUtilities.dp(2), buttonX + AndroidUtilities.dp(42), buttonY + AndroidUtilities.dp(42));
     }
 
     @Override
@@ -587,22 +582,16 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             drawTime = photoImage.getVisible();
         }
 
-        if (progressVisible) {
-            setDrawableBounds(mediaBackgroundDrawable, photoImage.imageX + AndroidUtilities.dp(4), layoutHeight - AndroidUtilities.dpf(27.5f), progressView.width + AndroidUtilities.dp(12), AndroidUtilities.dpf(16.5f));
-            mediaBackgroundDrawable.draw(canvas);
-
-            canvas.save();
-            canvas.translate(photoImage.imageX + AndroidUtilities.dp(10), layoutHeight - AndroidUtilities.dpf(21.0f));
-            progressView.draw(canvas);
-            canvas.restore();
-        }
-
         if (buttonState >= 0 && buttonState < 4) {
-            Drawable currentButtonDrawable = buttonStatesDrawables[buttonState][buttonPressed];
+            Drawable currentButtonDrawable = buttonStatesDrawables[buttonState];
             setDrawableBounds(currentButtonDrawable, buttonX, buttonY);
             currentButtonDrawable.draw(canvas);
         }
 
+        if (progressVisible) {
+            progressView.draw(canvas);
+        }
+
         if (infoLayout != null && ((buttonState >= 0 && buttonState < 4) || currentMessageObject.type == 1)) {
 
             if (currentMessageObject.type == 1){
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 25109034d..c58517581 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -46,6 +46,7 @@
     private static Drawable lockDrawable;
     private static Drawable countDrawable;
     private static Drawable groupDrawable;
+    private static Drawable broadcastDrawable;
 
     private TLRPC.TL_dialog currentDialog;
     private ImageReceiver avatarImage;
@@ -130,6 +131,10 @@ private void init() {
             groupDrawable = getResources().getDrawable(R.drawable.grouplist);
         }
 
+        if (broadcastDrawable == null) {
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
+        }
+
         if (avatarImage == null) {
             avatarImage = new ImageReceiver();
             avatarImage.parentView = this;
@@ -227,9 +232,14 @@ public void update(int mask) {
                 user = MessagesController.getInstance().users.get(lower_id);
             }
         } else {
-            encryptedChat = MessagesController.getInstance().encryptedChats.get((int)(currentDialog.id >> 32));
-            if (encryptedChat != null) {
-                user = MessagesController.getInstance().users.get(encryptedChat.user_id);
+            int high_id = (int)(currentDialog.id >> 32);
+            if (high_id > 0) {
+                encryptedChat = MessagesController.getInstance().encryptedChats.get(high_id);
+                if (encryptedChat != null) {
+                    user = MessagesController.getInstance().users.get(encryptedChat.user_id);
+                }
+            } else {
+                chat = MessagesController.getInstance().chats.get(high_id);
             }
         }
 
@@ -274,6 +284,9 @@ protected void onDraw(Canvas canvas) {
         } else if (cellLayout.drawNameGroup) {
             setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
             groupDrawable.draw(canvas);
+        } else if (cellLayout.drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            broadcastDrawable.draw(canvas);
         }
 
         canvas.save();
@@ -328,6 +341,7 @@ protected void onDraw(Canvas canvas) {
         private StaticLayout nameLayout;
         private boolean drawNameLock;
         private boolean drawNameGroup;
+        private boolean drawNameBroadcast;
         private int nameLockLeft;
         private int nameLockTop;
 
@@ -372,9 +386,12 @@ public void build(int width, int height) {
             TextPaint currentMessagePaint = messagePaint;
             boolean checkMessage = true;
 
+            drawNameGroup = false;
+            drawNameBroadcast = false;
+            drawNameLock = false;
+
             if (encryptedChat != null) {
                 drawNameLock = true;
-                drawNameGroup = false;
                 nameLockTop = AndroidUtilities.dp(13);
                 if (!LocaleController.isRTL) {
                     nameLockLeft = AndroidUtilities.dp(77);
@@ -384,19 +401,21 @@ public void build(int width, int height) {
                     nameLeft = AndroidUtilities.dp(14);
                 }
             } else {
-                drawNameLock = false;
                 if (chat != null) {
-                    drawNameGroup = true;
+                    if (chat.id < 0) {
+                        drawNameBroadcast = true;
+                    } else {
+                        drawNameGroup = true;
+                    }
                     nameLockTop = AndroidUtilities.dp(14);
                     if (!LocaleController.isRTL) {
                         nameLockLeft = AndroidUtilities.dp(77);
-                        nameLeft = AndroidUtilities.dp(81) + groupDrawable.getIntrinsicWidth();
+                        nameLeft = AndroidUtilities.dp(81) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
                     } else {
-                        nameLockLeft = width - AndroidUtilities.dp(77) - groupDrawable.getIntrinsicWidth();
+                        nameLockLeft = width - AndroidUtilities.dp(77) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
                         nameLeft = AndroidUtilities.dp(14);
                     }
                 } else {
-                    drawNameGroup = false;
                     if (!LocaleController.isRTL) {
                         nameLeft = AndroidUtilities.dp(77);
                     } else {
@@ -461,7 +480,7 @@ public void build(int width, int height) {
                         messageString = message.messageText;
                         currentMessagePaint = messagePrintingPaint;
                     } else {
-                        if (chat != null) {
+                        if (chat != null && chat.id > 0) {
                             String name = "";
                             if (message.isFromMe()) {
                                 name = LocaleController.getString("FromYou", R.string.FromYou);
@@ -505,7 +524,7 @@ public void build(int width, int height) {
                     }
                 }
 
-                if (message.isFromMe()) {
+                if (message.isFromMe() && message.isOut()) {
                     if (message.messageOwner.send_state == MessagesController.MESSAGE_SEND_STATE_SENDING) {
                         drawCheck1 = false;
                         drawCheck2 = false;
@@ -579,6 +598,8 @@ public void build(int width, int height) {
                 nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
             } else if (drawNameGroup) {
                 nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
+            } else if (drawNameBroadcast) {
+                nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
             }
             if (drawClock) {
                 int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(2);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 510e257e2..6b2102533 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -215,7 +215,11 @@ public void run() {
                 }
             }
             MessagesController.getInstance().loadChatInfo(currentChat.id);
-            dialog_id = -chatId;
+            if (chatId > 0) {
+                dialog_id = -chatId;
+            } else {
+                dialog_id = ((long)chatId) << 32;
+            }
         } else if (userId != 0) {
             currentUser = MessagesController.getInstance().users.get(userId);
             if (currentUser == null) {
@@ -536,6 +540,8 @@ public void onItemClick(int id) {
 
             if (currentEncryptedChat != null) {
                 actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+            } else if (currentChat != null && currentChat.id < 0) {
+                actionBarLayer.setTitleIcon(R.drawable.broadcast2, AndroidUtilities.dp(4));
             }
 
             ActionBarMenu menu = actionBarLayer.createMenu();
@@ -1054,7 +1060,8 @@ private void updateOnlineCount() {
 
     private int getMessageType(MessageObject messageObject) {
         if (currentEncryptedChat == null) {
-            if (messageObject.messageOwner.id <= 0 && messageObject.isOut()) {
+            boolean isBroadcastError = (int)dialog_id == 0 && messageObject.messageOwner.id <= 0 && messageObject.messageOwner.send_state == MessagesController.MESSAGE_SEND_STATE_SEND_ERROR;
+            if ((int)dialog_id != 0 && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
                 if (messageObject.messageOwner.send_state == MessagesController.MESSAGE_SEND_STATE_SEND_ERROR) {
                     if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
                         return 0;
@@ -1780,7 +1787,7 @@ public void didReceivedNotification(int id, final Object... args) {
                     if (messArr.size() != count) {
                         if (isCache) {
                             cacheEndReaced = true;
-                            if (currentEncryptedChat != null) {
+                            if ((int)dialog_id == 0) {
                                 endReached = true;
                             }
                         } else {
@@ -2963,24 +2970,24 @@ private void processForwardFromMe(MessageObject messageObject, long did) {
 
     private void forwardSelectedMessages(long did, boolean fromMyName) {
         if (forwaringMessage != null) {
-            if (forwaringMessage.messageOwner.id > 0) {
-                if (QuoteForward) {
+            if (QuoteForward) {
+                if (forwaringMessage.messageOwner.id > 0) {
                     MessagesController.getInstance().sendMessage(forwaringMessage, did);
-                } else {
-                    processForwardFromMe(forwaringMessage, did);
                 }
+            } else {
+                processForwardFromMe(forwaringMessage, did);
             }
             forwaringMessage = null;
         } else {
             ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
             Collections.sort(ids);
             for (Integer id : ids) {
-                if (id > 0) {
-                    if (QuoteForward) {
+                if (QuoteForward) {
+                    if (id > 0) {
                         MessagesController.getInstance().sendMessage(selectedMessagesIds.get(id), did);
-                    } else {
-                        processForwardFromMe(selectedMessagesIds.get(id), did);
                     }
+                } else {
+                    processForwardFromMe(selectedMessagesIds.get(id), did);
                 }
             }
             selectedMessagesCanCopyIds.clear();
@@ -2991,7 +2998,9 @@ private void forwardSelectedMessages(long did, boolean fromMyName) {
     @Override
     public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
         if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
-
+            if ((int)dialog_id == 0 && currentEncryptedChat == null) {
+                param = true;
+            }
             if (did != dialog_id) {
                 int lower_part = (int)did;
                 if (lower_part != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index 115c41405..4f8f86987 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -112,7 +112,9 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, MessagesController.closeChats);
 
         updateOnlineCount();
-        MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
+        if (chat_id > 0) {
+            MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
+        }
         avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
             @Override
             public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
@@ -131,10 +133,12 @@ public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.
     private void updateRowsIds() {
         rowCount = 0;
         avatarRow = rowCount++;
-        settingsSectionRow = rowCount++;
-        settingsNotificationsRow = rowCount++;
-        sharedMediaSectionRow = rowCount++;
-        sharedMediaRow = rowCount++;
+        if (chat_id > 0) {
+            settingsSectionRow = rowCount++;
+            settingsNotificationsRow = rowCount++;
+            sharedMediaSectionRow = rowCount++;
+            sharedMediaRow = rowCount++;
+        }
         if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
             membersSectionRow = rowCount++;
             rowCount += info.participants.size();
@@ -149,7 +153,9 @@ private void updateRowsIds() {
             addMemberRow = -1;
             membersSectionRow = -1;
         }
-        leaveGroupRow = rowCount++;
+        if (chat_id > 0) {
+            leaveGroupRow = rowCount++;
+        }
     }
 
     @Override
@@ -166,7 +172,11 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
             actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
             actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("GroupInfo", R.string.GroupInfo));
+            if (chat_id > 0) {
+                actionBarLayer.setTitle(LocaleController.getString("GroupInfo", R.string.GroupInfo));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("BroadcastList", R.string.BroadcastList));
+            }
             actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
@@ -181,7 +191,11 @@ public void onItemClick(int id) {
             View item = menu.addItemResource(done_button, R.layout.group_profile_add_member_layout);
             TextView textView = (TextView)item.findViewById(R.id.done_button);
             if (textView != null) {
-                textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                if (chat_id > 0) {
+                    textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                } else {
+                    textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
+                }
             }
 
             fragmentView = inflater.inflate(R.layout.chat_profile_layout, container, false);
@@ -206,7 +220,7 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                         selectedUser = user;
 
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        CharSequence[] items = new CharSequence[] {LocaleController.getString("KickFromGroup", R.string.KickFromGroup)};
+                        CharSequence[] items = new CharSequence[] {chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
 
                         builder.setItems(items, new DialogInterface.OnClickListener() {
                             @Override
@@ -259,7 +273,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
 
     @Override
     public void didSelectContact(TLRPC.User user, String param) {
-        MessagesController.getInstance().addUserToChat(chat_id, user, info, Utilities.parseInt(param));
+        MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
     }
 
     @Override
@@ -461,7 +475,9 @@ private void openAddMenu() {
         args.putBoolean("destroyAfterSelect", true);
         args.putBoolean("usersAsSections", true);
         args.putBoolean("returnAsResult", true);
-        args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
+        if (chat_id > 0) {
+            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
+        }
         ContactsActivity fragment = new ContactsActivity(args);
         fragment.setDelegate(this);
         if (info != null) {
@@ -546,52 +562,56 @@ public void onClick(View view) {
                     });
 
                     final ImageButton button2 = (ImageButton)view.findViewById(R.id.settings_change_avatar_button);
-                    button2.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View view) {
-                            if (getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            CharSequence[] items;
-                            int type;
-                            TLRPC.Chat chat = MessagesController.getInstance().chats.get(chat_id);
-                            if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
-                                items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                                type = 0;
-                            } else {
-                                items = new CharSequence[] {LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                                type = 1;
-                            }
+                    if (chat_id > 0) {
+                        button2.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                CharSequence[] items;
+                                int type;
+                                TLRPC.Chat chat = MessagesController.getInstance().chats.get(chat_id);
+                                if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
+                                    items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                                    type = 0;
+                                } else {
+                                    items = new CharSequence[]{LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                                    type = 1;
+                                }
 
-                            final int arg0 = type;
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    int action = 0;
-                                    if (arg0 == 1) {
-                                        if (i == 0) {
-                                            action = 0;
-                                        } else if (i == 1) {
-                                            action = 1;
-                                        } else if (i == 2) {
-                                            action = 2;
-                                        } else if (i == 3) {
-                                            action = 3;
-                                        }
-                                    } else if (arg0 == 0) {
-                                        if (i == 0) {
-                                            action = 1;
-                                        } else if (i == 1) {
-                                            action = 2;
+                                final int arg0 = type;
+                                builder.setItems(items, new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        int action = 0;
+                                        if (arg0 == 1) {
+                                            if (i == 0) {
+                                                action = 0;
+                                            } else if (i == 1) {
+                                                action = 1;
+                                            } else if (i == 2) {
+                                                action = 2;
+                                            } else if (i == 3) {
+                                                action = 3;
+                                            }
+                                        } else if (arg0 == 0) {
+                                            if (i == 0) {
+                                                action = 1;
+                                            } else if (i == 1) {
+                                                action = 2;
+                                            }
                                         }
+                                        processPhotoMenu(action);
                                     }
-                                    processPhotoMenu(action);
-                                }
-                            });
-                            showAlertDialog(builder);
-                        }
-                    });
+                                });
+                                showAlertDialog(builder);
+                            }
+                        });
+                    } else {
+                        button2.setVisibility(View.GONE);
+                    }
                 } else {
                     onlineText = (TextView)view.findViewById(R.id.settings_online);
                 }
@@ -665,7 +685,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.chat_profile_add_row, viewGroup, false);
                     TextView textView = (TextView)view.findViewById(R.id.messages_list_row_name);
-                    textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                    if (chat_id > 0) {
+                        textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                    } else {
+                        textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
+                        View divider = view.findViewById(R.id.settings_row_divider);
+                        divider.setVisibility(View.INVISIBLE);
+                    }
                 }
             } else if (type == 5) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
index 2b204a9dd..0bd08b2b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
@@ -76,7 +76,11 @@ public void onClick(View view) {
             TLRPC.Chat currentChat = MessagesController.getInstance().chats.get(chat_id);
 
             firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
-            firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
+            if (chat_id > 0) {
+                firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
+            } else {
+                firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
+            }
             firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -91,7 +95,11 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             firstNameField.setSelection(firstNameField.length());
 
             TextView headerLabel = (TextView)fragmentView.findViewById(R.id.settings_section_text);
-            headerLabel.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
+            if (chat_id > 0) {
+                headerLabel.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
+            } else {
+                headerLabel.setText(LocaleController.getString("EnterListName", R.string.EnterListName).toUpperCase());
+            }
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 6baa5a90b..93b6d220a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -90,6 +90,7 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
     private TextView emptyTextView;
     private EditText userSelectEditText;
     private boolean ignoreChange = false;
+    private boolean isBroadcast = false;
 
     private HashMap<Integer, XImageSpan> selectedContacts =  new HashMap<Integer, XImageSpan>();
     private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
@@ -105,6 +106,15 @@ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.Fon
 
     private final static int done_button = 1;
 
+    public GroupCreateActivity() {
+        super();
+    }
+
+    public GroupCreateActivity(Bundle args) {
+        super(args);
+        isBroadcast = args.getBoolean("broadcast", false);
+    }
+
     @Override
     public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, MessagesController.contactsDidLoaded);
@@ -126,7 +136,11 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
             actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
             actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            if (isBroadcast) {
+                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            }
             actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), 200));
 
             actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
@@ -140,6 +154,7 @@ public void onItemClick(int id) {
                             result.addAll(selectedContacts.keySet());
                             Bundle args = new Bundle();
                             args.putIntegerArrayList("result", result);
+                            args.putBoolean("broadcast", isBroadcast);
                             presentFragment(new GroupCreateFinalActivity(args));
                         }
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index 6d8e2c55a..85be68b0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -54,11 +54,13 @@
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
     private ProgressDialog progressDialog = null;
     private String nameToSet = null;
+    private boolean isBroadcast = false;
 
     private final static int done_button = 1;
 
     public GroupCreateFinalActivity(Bundle args) {
         super(args);
+        isBroadcast = args.getBoolean("broadcast", false);
     }
 
     @SuppressWarnings("unchecked")
@@ -120,7 +122,11 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
             actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
             actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            if (isBroadcast) {
+                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            }
 
             actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
                 @Override
@@ -136,29 +142,33 @@ public void onItemClick(int id) {
                         }
                         donePressed = true;
 
-                        if (avatarUpdater.uploadingAvatar != null) {
-                            createAfterUpload = true;
+                        if (isBroadcast) {
+                            MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
                         } else {
-                            progressDialog = new ProgressDialog(getParentActivity());
-                            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-                            progressDialog.setCanceledOnTouchOutside(false);
-                            progressDialog.setCancelable(false);
-
-                            final long reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar);
-
-                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialog, int which) {
-                                    ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                                    donePressed = false;
-                                    try {
-                                        dialog.dismiss();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
+                            if (avatarUpdater.uploadingAvatar != null) {
+                                createAfterUpload = true;
+                            } else {
+                                progressDialog = new ProgressDialog(getParentActivity());
+                                progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                                progressDialog.setCanceledOnTouchOutside(false);
+                                progressDialog.setCancelable(false);
+
+                                final long reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
+
+                                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                                        donePressed = false;
+                                        try {
+                                            dialog.dismiss();
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
                                     }
-                                }
-                            });
-                            progressDialog.show();
+                                });
+                                progressDialog.show();
+                            }
                         }
                     }
                 }
@@ -173,45 +183,53 @@ public void onClick(DialogInterface dialog, int which) {
             fragmentView = inflater.inflate(R.layout.group_create_final_layout, container, false);
 
             final ImageButton button2 = (ImageButton)fragmentView.findViewById(R.id.settings_change_avatar_button);
-            button2.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            if (isBroadcast) {
+                button2.setVisibility(View.GONE);
+            } else {
+                button2.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
-                    CharSequence[] items;
+                        CharSequence[] items;
 
-                    if (avatar != null) {
-                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                    } else {
-                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                    }
+                        if (avatar != null) {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                        } else {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                        }
 
-                    builder.setItems(items, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == 0) {
-                                avatarUpdater.openCamera();
-                            } else if (i == 1) {
-                                avatarUpdater.openGallery();
-                            } else if (i == 2) {
-                                avatar = null;
-                                uploadedAvatar = null;
-                                avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    avatarUpdater.openCamera();
+                                } else if (i == 1) {
+                                    avatarUpdater.openGallery();
+                                } else if (i == 2) {
+                                    avatar = null;
+                                    uploadedAvatar = null;
+                                    avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                                }
                             }
-                        }
-                    });
-                    showAlertDialog(builder);
-                }
-            });
+                        });
+                        showAlertDialog(builder);
+                    }
+                });
+            }
 
             avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
             avatarImage.setImageResource(R.drawable.group_blue);
 
             nameTextView = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
-            nameTextView.setHint(LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
+            if (isBroadcast) {
+                nameTextView.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
+            } else {
+                nameTextView.setHint(LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
+            }
             if (nameToSet != null) {
                 nameTextView.setText(nameToSet);
                 nameToSet = null;
@@ -237,7 +255,7 @@ public void run() {
                 avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
                 if (createAfterUpload) {
                     FileLog.e("tmessages", "avatar did uploaded");
-                    MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar);
+                    MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, false);
                 }
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 2e28adc44..1fd650783 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -458,7 +458,12 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                     args.putInt("chat_id", -lower_part);
                 }
             } else {
-                args.putInt("enc_id", (int)(dialog_id >> 32));
+                int high_id = (int)(dialog_id >> 32);
+                if (high_id > 0) {
+                    args.putInt("enc_id", high_id);
+                } else {
+                    args.putInt("chat_id", high_id);
+                }
             }
             ChatActivity fragment = new ChatActivity(args);
             presentFragment(fragment, true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index ecdbd2c39..c3ab5d6ac 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -74,6 +74,7 @@
     private final static int messages_list_menu_new_secret_chat = 3;
     private final static int messages_list_menu_contacts = 4;
     private final static int messages_list_menu_settings = 5;
+    private final static int messages_list_menu_new_broadcast = 6;
 
     public static interface MessagesActivityDelegate {
         public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
@@ -175,6 +176,7 @@ public void onTextChanged(EditText editText) {
                 ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
                 item.addSubItem(messages_list_menu_new_chat, LocaleController.getString("NewGroup", R.string.NewGroup), 0);
                 item.addSubItem(messages_list_menu_new_secret_chat, LocaleController.getString("NewSecretChat", R.string.NewSecretChat), 0);
+                item.addSubItem(messages_list_menu_new_broadcast, LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), 0);
                 item.addSubItem(messages_list_menu_contacts, LocaleController.getString("Contacts", R.string.Contacts), 0);
                 item.addSubItem(messages_list_menu_settings, LocaleController.getString("Settings", R.string.Settings), 0);
             }
@@ -206,6 +208,10 @@ public void onItemClick(int id) {
                         if (onlySelect) {
                             finishFragment();
                         }
+                    } else if (id == messages_list_menu_new_broadcast) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("broadcast", true);
+                        presentFragment(new GroupCreateActivity(args));
                     }
                 }
             });
@@ -289,7 +295,12 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                 args.putInt("chat_id", -lower_part);
                             }
                         } else {
-                            args.putInt("enc_id", (int)(dialog_id >> 32));
+                            int high_id = (int)(dialog_id >> 32);
+                            if (high_id > 0) {
+                                args.putInt("enc_id", high_id);
+                            } else {
+                                args.putInt("chat_id", high_id);
+                            }
                         }
                         presentFragment(new ChatActivity(args));
                     }
@@ -497,13 +508,21 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
                     builder.setMessage(LocaleController.formatStringSimple(selectAlertString, chat.title));
                 }
             } else {
-                int chat_id = (int)(dialog_id >> 32);
-                TLRPC.EncryptedChat chat = MessagesController.getInstance().encryptedChats.get(chat_id);
-                TLRPC.User user = MessagesController.getInstance().users.get(chat.user_id);
-                if (user == null) {
-                    return;
+                int high_id = (int)(dialog_id >> 32);
+                if (high_id > 0) {
+                    TLRPC.EncryptedChat chat = MessagesController.getInstance().encryptedChats.get(high_id);
+                    TLRPC.User user = MessagesController.getInstance().users.get(chat.user_id);
+                    if (user == null) {
+                        return;
+                    }
+                    builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
+                } else {
+                    TLRPC.Chat chat = MessagesController.getInstance().chats.get(high_id);
+                    if (chat == null) {
+                        return;
+                    }
+                    builder.setMessage(LocaleController.formatStringSimple(selectAlertString, chat.title));
                 }
-                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, Utilities.formatName(user.first_name, user.last_name)));
             }
             CheckBox checkBox = null;
             /*if (delegate instanceof ChatActivity) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index c2f86eaf1..dc519d780 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -874,9 +874,6 @@ protected void onPause() {
             chatActivityEnterView.setFieldFocused(false);
         }
         ConnectionsManager.getInstance().setAppPaused(true, false);
-        if (wakeLock.isHeld()) {
-            wakeLock.release();
-        }
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index e79239b45..07184d6b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -568,6 +568,9 @@ public void run() {
                                 } catch (Exception e) {
                                     FileLog.e("tmessages", e);
                                 }
+                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                users.add(res.user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
                                 MessagesController.getInstance().users.put(res.user.id, res.user);
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", res.user.id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index 9b7298bb7..91ed628c4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -406,7 +406,8 @@ public void onClick(DialogInterface dialog, int which) {
     }
 
     public void updateServerNotificationsSettings(boolean group) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        //disable global settings sync
+        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
         TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
         req.settings = new TLRPC.TL_inputPeerNotifySettings();
         req.settings.sound = "default";
@@ -425,7 +426,7 @@ public void updateServerNotificationsSettings(boolean group) {
             public void run(TLObject response, TLRPC.TL_error error) {
 
             }
-        });
+        });*/
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 2774c356b..948745659 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -467,18 +467,15 @@ private void startConvert() throws Exception {
         List<Track> tracks = movie.getTracks();
         movie.setTracks(new LinkedList<Track>());
 
-        double startTime = videoTimelineView.getLeftProgress() * videoPlayer.getDuration() / 1000.0;
-        double endTime = videoTimelineView.getRightProgress() * videoPlayer.getDuration() / 1000.0;
+        double startTime = 0;
+        double endTime = 0;
 
-        boolean timeCorrected = false;
         for (Track track : tracks) {
             if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) {
-                if (timeCorrected) {
-                    throw new RuntimeException("The startTime has already been corrected by another track with SyncSample. Not Supported.");
-                }
-                startTime = correctTimeToSyncSample(track, startTime, false);
-                endTime = correctTimeToSyncSample(track, endTime, true);
-                timeCorrected = true;
+                double duration = (double)track.getDuration() / (double)track.getTrackMetaData().getTimescale();
+                startTime = correctTimeToSyncSample(track, videoTimelineView.getLeftProgress() * duration, false);
+                endTime = videoTimelineView.getRightProgress() * duration;
+                break;
             }
         }
 
@@ -486,7 +483,7 @@ private void startConvert() throws Exception {
             long currentSample = 0;
             double currentTime = 0;
             double lastTime = 0;
-            long startSample = -1;
+            long startSample = 0;
             long endSample = -1;
 
             for (int i = 0; i < track.getSampleDurations().length; i++) {
@@ -503,9 +500,7 @@ private void startConvert() throws Exception {
             }
             movie.addTrack(new CroppedTrack(track, startSample, endSample));
         }
-        long start1 = System.currentTimeMillis();
         Container out = new DefaultMp4Builder().build(movie);
-        long start2 = System.currentTimeMillis();
 
         String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
         UserConfig.lastLocalId--;
@@ -524,6 +519,11 @@ private void startConvert() throws Exception {
         }
     }
 
+//    private void startEncodeVideo() {
+//        MediaExtractor mediaExtractor = new MediaExtractor();
+//        mediaExtractor.s
+//    }
+
     private static double correctTimeToSyncSample(Track track, double cutHere, boolean next) {
         double[] timeOfSyncSamples = new double[track.getSyncSamples().length];
         long currentSample = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
index 93668ed3c..5af31e03e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
@@ -46,7 +46,7 @@ of this software and associated documentation files (the "Software"), to deal
     private static native void renderFrame(int[] pixels, int gifFileInPtr, int[] metaData);
     private static native int openFile(int[] metaData, String filePath);
     private static native void free(int gifFileInPtr);
-    private static native boolean reset(int gifFileInPtr);
+    private static native void reset(int gifFileInPtr);
     private static native void setSpeedFactor(int gifFileInPtr, float factor);
     private static native String getComment(int gifFileInPtr);
     private static native int getLoopCount(int gifFileInPtr);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
index 95d6e59ef..d17a04b9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
@@ -75,17 +75,20 @@ public void setImage(TLRPC.FileLocation path, String httpUrl, String filter, Dra
         if (filter != null) {
             key += "@" + filter;
         }
-        Bitmap img;
+        Bitmap img = null;
         if (currentPath != null) {
             if (currentPath.equals(key)) {
-                return;
+                if (currentImage != null) {
+                    return;
+                } else {
+                    img = FileLoader.getInstance().getImageFromMemory(path, httpUrl, this, filter);
+                }
             } else {
-                img = FileLoader.getInstance().getImageFromMemory(path, httpUrl, this, filter, true);
+                img = FileLoader.getInstance().getImageFromMemory(path, httpUrl, this, filter);
                 recycleBitmap(img);
             }
-        } else {
-            img = FileLoader.getInstance().getImageFromMemory(path, httpUrl, this, filter, true);
         }
+        img = FileLoader.getInstance().getImageFromMemory(path, httpUrl, this, filter);
         currentPath = key;
         last_path = path;
         last_httpUrl = httpUrl;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java
new file mode 100644
index 000000000..df1ddaa9c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/RoundProgressView.java
@@ -0,0 +1,43 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Views;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+
+import org.telegram.android.AndroidUtilities;
+
+public class RoundProgressView {
+    private Paint paint;
+
+    public float currentProgress = 0;
+    public RectF rect = new RectF();
+
+    public RoundProgressView() {
+        paint = new Paint();
+        paint.setColor(0xffffffff);
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(AndroidUtilities.dp(1));
+        paint.setAntiAlias(true);
+    }
+
+    public void setProgress(float progress) {
+        currentProgress = progress;
+        if (currentProgress < 0) {
+            currentProgress = 0;
+        } else if (currentProgress > 1) {
+            currentProgress = 1;
+        }
+    }
+
+    public void draw(Canvas canvas) {
+        canvas.drawArc(rect, -90, 360 * currentProgress, false, paint);
+    }
+}
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png
new file mode 100644
index 000000000..bd523d0c1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-hdpi/broadcast2.png
new file mode 100644
index 000000000..9c4837b89
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/broadcast2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png
index 7f5b708e7..bd41cc686 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png
deleted file mode 100755
index c96b2910b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photogif.png b/TMessagesProj/src/main/res/drawable-hdpi/photogif.png
index 26945dd9b..29f155b4a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-hdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png
deleted file mode 100755
index 5cc3e7c45..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload.png
index 8c8e0ea52..20783e58b 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-hdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png
deleted file mode 100755
index dc1b5698e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png
old mode 100755
new mode 100644
index 2de03e80a..449d7ada3
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png
deleted file mode 100755
index efda9fc01..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png
new file mode 100644
index 000000000..cd47e3ee8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png
new file mode 100644
index 000000000..6fc507a95
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-ldpi/broadcast2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png b/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png
index e2efce8b5..857a1202c 100755
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-ldpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/photocancel_pressed.png
deleted file mode 100755
index 50050bee7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photocancel_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photogif.png b/TMessagesProj/src/main/res/drawable-ldpi/photogif.png
index adae3f8d4..9599c4c35 100755
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photogif.png and b/TMessagesProj/src/main/res/drawable-ldpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/photogif_pressed.png
deleted file mode 100755
index cffbbd2ba..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photogif_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photoload.png b/TMessagesProj/src/main/res/drawable-ldpi/photoload.png
index de8b436af..d08458bda 100755
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photoload.png and b/TMessagesProj/src/main/res/drawable-ldpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/photoload_pressed.png
deleted file mode 100755
index 5209e3e98..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/photoload_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png b/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png
old mode 100755
new mode 100644
index d6e7a1d38..8521b0d7d
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-ldpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-ldpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-ldpi/playvideo_pressed.png
deleted file mode 100755
index d2a233ff9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-ldpi/playvideo_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png
new file mode 100644
index 000000000..db6c94111
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-mdpi/broadcast2.png
new file mode 100644
index 000000000..57e7d3b31
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/broadcast2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png
index 2a5aa52af..59df84729 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png
deleted file mode 100755
index a6244f870..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photogif.png b/TMessagesProj/src/main/res/drawable-mdpi/photogif.png
index b3205005b..d91f0d319 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-mdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png
deleted file mode 100755
index 66ad8db2e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload.png
index 1f27b560c..b010df619 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-mdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png
deleted file mode 100755
index 5cddd0810..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png
old mode 100755
new mode 100644
index fad4ea731..d1b0b4aac
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png
deleted file mode 100755
index 8c93f6d6f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png
new file mode 100644
index 000000000..f32433921
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast2.png
new file mode 100644
index 000000000..38524b578
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/broadcast2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png
index ed51e34e7..a13c7ec2b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png
deleted file mode 100755
index 99664ecc5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png b/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png
index 761339f01..e6d7cd8c4 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png
deleted file mode 100755
index a02c37842..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png
index ca7dae9db..a72fe3e14 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png
deleted file mode 100755
index 542616bc1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png
old mode 100755
new mode 100644
index a43f768fc..e13c056cf
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png
deleted file mode 100755
index e75bdb589..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png
new file mode 100644
index 000000000..4d978707a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast2.png
new file mode 100644
index 000000000..9b686f347
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/broadcast2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png
index 312e2afec..51c602e00 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png
deleted file mode 100755
index 91b39a419..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png
index 9fc94f65b..71c589122 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png
deleted file mode 100755
index 326deb6c1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png
index cfa2ac2ce..4270d1c88 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png
deleted file mode 100755
index 1e8c1a35e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png
old mode 100755
new mode 100644
index cdf0095d1..543ce17f0
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png
deleted file mode 100755
index bd3c6ec0d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
index aea3bd3b2..f821e53ec 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
@@ -45,6 +45,7 @@
             android:layout_marginTop="0dp"
             android:gravity="right|center_vertical"
             android:imeOptions="flagNoExtractUi"
+            android:inputType="textCapSentences"
             android:layout_gravity="center_vertical|right"
             android:textCursorDrawable="@null"
             android:textColor="#000000"/>
diff --git a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
index 1095df7c9..ba3f3ce36 100644
--- a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
@@ -45,6 +45,7 @@
             android:layout_marginTop="0dp"
             android:gravity="left|center_vertical"
             android:imeOptions="flagNoExtractUi"
+            android:inputType="textCapSentences"
             android:layout_gravity="center_vertical"
             android:textCursorDrawable="@null"
             android:textColor="#000000"/>
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 577546508..bf9f268f8 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">الاسم مخفي</string>
     <string name="SelectChat">اختر محادثة</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">اختر ملف</string>
     <string name="FreeOfTotal">متاح %1$s من %2$s</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 12204ad51..6aae8813f 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Versteckter Name</string>
     <string name="SelectChat">Chat auswählen</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast Liste</string>
+    <string name="NewBroadcastList">Neue Broadcast Liste</string>
+    <string name="EnterListName">Name der Liste eingeben</string>
+    <string name="YouCreatedBroadcastList">Du hast eine Broadcast Liste erstellt</string>
+    <string name="AddRecipient">Empfänger hinzufügen</string>
+    <string name="KickFromBroadcast">Aus Broadcast Liste entfernen</string>
+
     <!--documents view-->
     <string name="SelectFile">Datei auswählen</string>
     <string name="FreeOfTotal">Freier Speicher: %1$s von %2$s</string>
@@ -150,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s hat dich aus der Gruppe %2$s entfernt</string>
     <string name="NotificationGroupLeftMember">%1$s hat die Gruppe %2$s verlassen</string>
     <string name="NotificationContactJoined">%1$s benutzt jetzt Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\n\nwir haben einen Zugriff auf dein Konto von einem neuen Gerät am %2$s erkannt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du das nicht warst, kannst du in den Einstellungen alle Sitzungen beenden.\n\nDanke,\ndas Telegram Team</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nWir haben eine Anmeldung von einem neuen Gerät mit der IP-Adresse %2$s festgestellt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du es nicht selbst gewesen bist, melde alle anderen Sitzungen in den Telegram Einstellungen unverzüglich ab. \n\n\nMit freundlichen Grüßen,\nDas Telegram Team</string>
     <string name="NotificationContactNewPhoto">%1$s hat das Profilbild geändert</string>
 
     <!--contacts view-->
@@ -193,7 +201,7 @@
     <string name="PhoneHome">FESTNETZ</string>
     <string name="PhoneMobile">MOBIL</string>
     <string name="PhoneWork">ARBEIT</string>
-    <string name="PhoneOther">ANDERE</string>
+    <string name="PhoneOther">SONSTIGES</string>
     <string name="PhoneMain">HAUPTNUMMER</string>
     <string name="ContactInfo">Kontaktdaten</string>
     <string name="PHONE">TELEFON</string>
@@ -270,12 +278,12 @@
     <string name="SortFirstName">Vorname</string>
     <string name="SortLastName">Nachname</string>
     <string name="LedColor">LED-Farbe</string>
-    <string name="PopupNotification">Popup-Benachrichtigung</string>
+    <string name="PopupNotification">Popup Benachrichtigungen</string>
     <string name="NoPopup">Kein Popup</string>
     <string name="OnlyWhenScreenOn">Nur wenn Bildschirm „an“</string>
     <string name="OnlyWhenScreenOff">Nur wenn Bildschirm „aus“</string>
     <string name="AlwaysShowPopup">Popups immer anzeigen</string>
-    <string name="BadgeNumber">Nummer auf Symbol</string>
+    <string name="BadgeNumber">BADGE (Anzahl)</string>
 
     <!--media view-->
     <string name="NoMedia">Noch keine geteilten Medien vorhanden</string>
@@ -300,9 +308,9 @@
     <string name="NoPhotos">Noch keine Fotos</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
+    <string name="EditVideo">Video bearbeiten</string>
+    <string name="OriginalVideo">Originalvideo</string>
+    <string name="EditedVideo">Bearbeitetes Video</string>
 
     <!--button titles-->
     <string name="Next">Weiter</string>
@@ -365,7 +373,7 @@
     <string name="Loading">Lädt…</string>
     <string name="NoPlayerInstalled">Du hast keinen Videoplayer. Bitte installiere einen um fortzufahren.</string>
     <string name="NoMailInstalled">Bitte sende uns eine Email an sms@telegram.org mit einer Beschreibung des Problems.</string>
-    <string name="NoHandleAppInstalled">Du hast keine App, die den Dokumententyp \'%1$s\' öffnen kann.</string>
+    <string name="NoHandleAppInstalled">Du hast keine Applikationen, die den Dateityp \'%1$s\' öffnen könnten. Bitte installiere eine entsprechende Anwendung um fortzufahren.</string>
     <string name="InviteUser">Dieser Benutzer hat noch kein Telegram. Möchtest du ihn einladen?</string>
     <string name="AreYouSure">Bist du sicher?</string>
     <string name="AddContactQ">Kontakt hinzufügen?</string>
@@ -377,7 +385,7 @@
     <string name="AreYouSureSessions">Sicher, dass du alle anderen Geräte abmelden möchtest?</string>
     <string name="AreYouSureDeleteAndExit">Diese Gruppe wirklich löschen und verlassen?</string>
     <string name="AreYouSureDeleteThisChat">Möchtest du wirklich diesen Chat löschen?</string>
-    <string name="AreYouSureShareMyContactInfo">Möchtest du wirklich die eigenen Kontaktdaten teilen?</string>
+    <string name="AreYouSureShareMyContactInfo">Wirklich die eigenen Kontaktinformationen teilen?</string>
     <string name="AreYouSureBlockContact">Diesen Kontakt wirklich blockieren?</string>
     <string name="AreYouSureUnblockContact">Blockierung für diesen Kontakt wirklich aufheben?</string>
     <string name="AreYouSureDeleteContact">Diesen Kontakt wirklich löschen?</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 97e24d273..0cff52bef 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Nombre oculto</string>
     <string name="SelectChat">Selecciona el chat</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Lista de difusión</string>
+    <string name="NewBroadcastList">Nueva lista de difusión</string>
+    <string name="EnterListName">Ingresa el nombre de la lista</string>
+    <string name="YouCreatedBroadcastList">Creaste una lista de difusión</string>
+    <string name="AddRecipient">Añadir destinatario</string>
+    <string name="KickFromBroadcast">Quitar de la lista de difusión</string>
+
     <!--documents view-->
     <string name="SelectFile">Seleccionar archivo</string>
     <string name="FreeOfTotal">%1$s de %2$s libres</string>
@@ -150,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s te ha expulsado del grupo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s abandonó el grupo %2$s</string>
     <string name="NotificationContactJoined">¡%1$s se unió a Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nHemos detectado una conexión a tu cuenta desde un nuevo dispositivo el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Cerrar todas las otras sesiones.\n\nGracias,\nEl equipo de Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nHemos detectado un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Cerrar todas las otras sesiones. \n\nAtentamente,\nEl Equipo de Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s actualizó su foto de perfil</string>
 
     <!--contacts view-->
@@ -263,19 +271,19 @@
     <string name="Enabled">Activado</string>
     <string name="Disabled">Desactivado</string>
     <string name="NotificationsService">Servicio de notificaciones</string>
-    <string name="NotificationsServiceDisableInfo">Si los servicios de google play son suficientes para recibir notificaciones, puedes desactivar el \'Servicio de notificaciones\'. Sin embargo, te recomendamos activarlos para mantener la aplicación funcionando en segundo plano y recibir notificaciones de forma instantánea.</string>
+    <string name="NotificationsServiceDisableInfo">Si los Servicios de Google Play son suficientes para que recibas las notificaciones, puedes desactivar el Servicio de notificaciones. Sin embargo, te recomendamos que lo dejes activo para mantener funcionando la aplicación en segundo plano y recibir las notificaciones al instante.</string>
     <string name="SortBy">Ordenar por</string>
     <string name="ImportContacts">Importar contactos</string>
     <string name="WiFiOnly">Solo vía Wifi</string>
     <string name="SortFirstName">Nombre</string>
     <string name="SortLastName">Apellido</string>
     <string name="LedColor">Color del LED</string>
-    <string name="PopupNotification">Notificación emergente</string>
+    <string name="PopupNotification">Notificaciones emergentes</string>
     <string name="NoPopup">Sin notificación emergente</string>
     <string name="OnlyWhenScreenOn">Sólo con pantalla encendida</string>
     <string name="OnlyWhenScreenOff">Sólo con pantalla apagada</string>
     <string name="AlwaysShowPopup">Siempre mostrar notificación emergente</string>
-    <string name="BadgeNumber">Globo de notificación</string>
+    <string name="BadgeNumber">Globo en el ícono</string>
 
     <!--media view-->
     <string name="NoMedia">No hay fotos ni vídeos compartidos aún</string>
@@ -300,9 +308,9 @@
     <string name="NoPhotos">No hay fotos aún</string>
 
     <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
+    <string name="EditVideo">Editar vídeo</string>
+    <string name="OriginalVideo">Vídeo original</string>
+    <string name="EditedVideo">Vídeo editado</string>
 
     <!--button titles-->
     <string name="Next">Siguiente</string>
@@ -364,8 +372,8 @@
     <string name="InvalidLastName">Apellido/s inválido/s</string>
     <string name="Loading">Cargando...</string>
     <string name="NoPlayerInstalled">No tienes reproductor de vídeo. Por favor, instala uno para continuar.</string>
-    <string name="NoMailInstalled">Por favor, envía un correo a sms@telegram.org y explica tu problema.</string>
-    <string name="NoHandleAppInstalled">No tienes una aplicación que pueda manejar el tipo mime \'%1$s\'. Por favor, instala una para continuar</string>
+    <string name="NoMailInstalled">Por favor, envíanos un correo electrónico a sms@telegram.org y cuéntanos tu problema.</string>
+    <string name="NoHandleAppInstalled">No tienes aplicaciones que puedan manejar el tipo de archivo \'%1$s\'. Por favor, instala una para continuar.</string>
     <string name="InviteUser">Este usuario no tiene Telegram aún. ¿Enviarle una invitación?</string>
     <string name="AreYouSure">¿Estás seguro?</string>
     <string name="AddContactQ">¿Añadir contacto?</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 48f0603a7..33ace9e3c 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Nome nascosto</string>
     <string name="SelectChat">Seleziona chat</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">Seleziona file</string>
     <string name="FreeOfTotal">Liberi %1$s di %2$s</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 031542515..93ab9bd54 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Verborgen naam</string>
     <string name="SelectChat">Kies een gesprek</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">Kies een bestand</string>
     <string name="FreeOfTotal">Vrij: %1$s van %2$s</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 4fa52bcdc..90d53c6e7 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Nome oculto</string>
     <string name="SelectChat">Selecione uma Conversa</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">Selecione um Arquivo</string>
     <string name="FreeOfTotal">Disponível %1$s de %2$s</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index f9111820b..4468f6850 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Nome oculto</string>
     <string name="SelectChat">Selecionar chat</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">Selecionar ficheiro</string>
     <string name="FreeOfTotal">%1$s de %2$s livres</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 3f862302e..86fed5952 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -57,6 +57,14 @@
     <string name="HiddenName">Hidden Name</string>
     <string name="SelectChat">Select Chat</string>
 
+    <!--broadcasts-->
+    <string name="BroadcastList">Broadcast List</string>
+    <string name="NewBroadcastList">New Broadcast List</string>
+    <string name="EnterListName">Enter list name</string>
+    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
+    <string name="AddRecipient">Add Recipient</string>
+    <string name="KickFromBroadcast">Remove from broadcast list</string>
+
     <!--documents view-->
     <string name="SelectFile">Select File</string>
     <string name="FreeOfTotal">Free %1$s of %2$s</string>
@@ -150,7 +158,7 @@
     <string name="NotificationGroupKickYou">%1$s removed you from the group %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s has left the group %2$s</string>
     <string name="NotificationContactJoined">%1$s joined Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn’t you, you can go to Settings – Terminate all sessions.\n\nThanks,\nThe Telegram Team</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Terminate all sessions.\n\nSincerely,\nThe Telegram Team</string>
     <string name="NotificationContactNewPhoto">%1$s updated profile photo</string>
 
     <!--contacts view-->
@@ -263,19 +271,19 @@
     <string name="Enabled">Enabled</string>
     <string name="Disabled">Disabled</string>
     <string name="NotificationsService">Notifications Service</string>
-    <string name="NotificationsServiceDisableInfo">If google play services are enough for you to receive notifications, you can disable Notifications Service. However we recommend you to leave it enabled to keep app running in background and receive instant notifications.</string>
+    <string name="NotificationsServiceDisableInfo">If Google Play Services are enough for you to receive notifications, you can disable Notifications Service. However we recommend you to leave it enabled to keep app running in background and receive instant notifications.</string>
     <string name="SortBy">Sort By</string>
     <string name="ImportContacts">Import Contacts</string>
     <string name="WiFiOnly">Via WiFi only</string>
     <string name="SortFirstName">First name</string>
     <string name="SortLastName">Last name</string>
     <string name="LedColor">LED Color</string>
-    <string name="PopupNotification">Popup Notification</string>
+    <string name="PopupNotification">Popup Notifications</string>
     <string name="NoPopup">No popup</string>
     <string name="OnlyWhenScreenOn">Only when screen "on"</string>
     <string name="OnlyWhenScreenOff">Only when screen "off"</string>
     <string name="AlwaysShowPopup">Always show popup</string>
-    <string name="BadgeNumber">Badge Number</string>
+    <string name="BadgeNumber">Badge Counter</string>
 
     <!--media view-->
     <string name="NoMedia">No shared media yet</string>
@@ -364,8 +372,8 @@
     <string name="InvalidLastName">Invalid last name</string>
     <string name="Loading">Loading...</string>
     <string name="NoPlayerInstalled">You don\'t have a video player, please install one to continue</string>
-    <string name="NoMailInstalled">Please send an email to sms@telegram.org and explain your problem.</string>
-    <string name="NoHandleAppInstalled">You don\'t have any application that can handle with mime type \'%1$s\', please install one to continue</string>
+    <string name="NoMailInstalled">Please send an email to sms@telegram.org and tell us about your problem.</string>
+    <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
     <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
     <string name="AreYouSure">Are you sure?</string>
     <string name="AddContactQ">Add contact?</string>
@@ -373,15 +381,15 @@
     <string name="ForwardMessagesTo">Forward messages to %1$s?</string>
     <string name="DeleteChatQuestion">Delete this chat?</string>
     <string name="SendMessagesTo">Send messages to %1$s?</string>
-    <string name="AreYouSureLogout">Are you sure you want to logout?</string>
+    <string name="AreYouSureLogout">Are you sure you want to log out?</string>
     <string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
-    <string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave group?</string>
+    <string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave the group?</string>
     <string name="AreYouSureDeleteThisChat">Are you sure you want to delete this chat?</string>
-    <string name="AreYouSureShareMyContactInfo">Are you sure that you want to share your contact info?</string>
+    <string name="AreYouSureShareMyContactInfo">Are you sure you want to share your contact info?</string>
     <string name="AreYouSureBlockContact">Are you sure you want to block this contact?</string>
     <string name="AreYouSureUnblockContact">Are you sure you want to unblock this contact?</string>
     <string name="AreYouSureDeleteContact">Are you sure you want to delete this contact?</string>
-    <string name="AreYouSureSecretChat">Are you sure you want to start secret chat?</string>
+    <string name="AreYouSureSecretChat">Are you sure you want to start a secret chat?</string>
     <string name="ForwardFromMyName">forward from my name</string>
 
     <!--Intro view-->
