diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 165f3ce06..9790bc7b6 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -27,9 +27,11 @@ android {
     }
 
     signingConfigs {
+        /*
         debug {
             storeFile file("config/debug.keystore")
         }
+        */
 
         release {
             storeFile file("config/release.keystore")
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index acc95e7d3..dc1d14a81 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -766,18 +766,20 @@ public void onAnimationEnd(Object animation) {
     }*/
 
     public static void checkForCrashes(Activity context) {
-        CrashManager.register(context, BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
-            @Override
-            public boolean includeDeviceData() {
-                return true;
-            }
-        });
+//        CrashManager.register(context, BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
+            //@Override
+            //public boolean includeDeviceData() {
+                //return true;
+            //}
+        //});
     }
 
     public static void checkForUpdates(Activity context) {
+        /*
         if (BuildVars.DEBUG_VERSION) {
             UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
         }
+        */
     }
 
     public static void unregisterUpdates() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index e8da530bb..372124bc8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -9,13 +9,13 @@
 package org.telegram.messenger;
 
 public class BuildVars {
-    public static boolean DEBUG_VERSION = false;
+    public static boolean DEBUG_VERSION = true;
     public static int BUILD_VERSION = 627;
     public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
     public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
+    // public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
     public static String GCM_SENDER_ID = "760348033672";
-    public static String SEND_LOGS_EMAIL = "email@gmail.com";
+    public static String SEND_LOGS_EMAIL = "zeqing.g@gmail.com";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NativeCrashManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/NativeCrashManager.java
index cbfdc225a..3905355da 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NativeCrashManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NativeCrashManager.java
@@ -24,7 +24,7 @@ public static void handleDumpFiles(Activity activity) {
         for (String dumpFilename : filenames) {
             String logFilename = createLogFile();
             if (logFilename != null) {
-                uploadDumpAndLog(activity, BuildVars.HOCKEY_APP_HASH, dumpFilename, logFilename);
+                //uploadDumpAndLog(activity, BuildVars.HOCKEY_APP_HASH, dumpFilename, logFilename);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index 79176988b..ce471bac3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -101,6 +101,7 @@
     public static final int audioDidSent = totalEvents++;
     public static final int audioDidStarted = totalEvents++;
     public static final int audioRouteChanged = totalEvents++;
+    public static final int spaSettings = totalEvents++;
 
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index 3fa6f3754..f4848730e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -993,7 +993,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (UserConfig.passcodeType == 1 && (AndroidUtilities.isTablet() || getContext().getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)) {
             int t = 0;
-            if (passwordFrameLayout.getTag() != 0) {
+            if ((int) passwordFrameLayout.getTag() != 0) {
                 t = (Integer) passwordFrameLayout.getTag();
             }
             LayoutParams layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
new file mode 100644
index 000000000..1b71cbb0a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
@@ -0,0 +1,235 @@
+package org.telegram.ui;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+/**
+ * Created by zqguo on 2015/10/26.
+ */
+public class SPASettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+
+    private int spaRequstRow;
+    private int selectPrivacyItemsRow;
+    private int friendsListRow;
+    private int sendSpaRequstRow;
+    private int spaRequstDetailRow;
+    private int spaResultRow;
+    private int spaResultRow2;
+    private int spaResultDetailRow;
+    private int rowCount;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        // need ContactsController.getInstance().loadPrivacySettings();
+
+        rowCount = 0;
+        spaRequstRow = rowCount++;
+        selectPrivacyItemsRow = rowCount++;
+        friendsListRow = rowCount++;
+        sendSpaRequstRow = rowCount++;
+        spaRequstDetailRow = rowCount++;
+        spaResultRow = rowCount++;
+        spaResultRow2 = rowCount++;
+        spaResultDetailRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.spaSettings);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("SPASettings", R.string.SPASettings));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+               if (i == selectPrivacyItemsRow)  {
+                   Log.v("SPA", "select privacy items");
+                   presentFragment(new SelectPrivacyItems());
+               } else if (i == friendsListRow) {
+                   Log.v("SPA", "friends list");
+               } else if (i == sendSpaRequstRow) {
+                   Log.v("SPA", "send spa request");
+               } else if (i == spaResultRow2) {
+                   Log.v("SPA", "spa result");
+               }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.spaSettings) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == spaRequstRow || i == selectPrivacyItemsRow || i == friendsListRow || i == spaRequstDetailRow || i == sendSpaRequstRow || i == spaResultRow || i == spaResultRow2 || i == spaResultDetailRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == selectPrivacyItemsRow) {
+                    textCell.setText(LocaleController.getString("SPASelectItems", R.string.SPASelectItems), true);
+                } else if (i == friendsListRow) {
+                    textCell.setText(LocaleController.getString("SPAFriendsList", R.string.SPAFriendsList), true);
+                } else if (i == sendSpaRequstRow) {
+                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPASendRequest), true);
+                } else if (i == spaResultRow2) {
+                    textCell.setText(LocaleController.getString("SPAResult", R.string.SPAResult), true);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(mContext);
+                }
+                if (i == spaRequstDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SPAResultHelp", R.string.SPAResultHelp));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                } else if (i == spaResultDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SPASendingHelp", R.string.SPASendingHelp));
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == spaRequstRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SPARequestTitle", R.string.SPARequestTitle));
+                } else if (i == spaResultRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SPAResultTitle", R.string.SPAResultTitle));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == selectPrivacyItemsRow || position == friendsListRow || position == sendSpaRequstRow || position == spaResultRow2) {
+                return 0;
+            } else if (position == spaRequstDetailRow || position == spaResultDetailRow) {
+                return 1;
+            } else if (position == spaRequstRow || position == spaResultRow)  {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java b/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java
new file mode 100644
index 000000000..f40f1b7be
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SelectPrivacyItems.java
@@ -0,0 +1,235 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+/**
+ * Created by zqguo on 2015/10/27.
+ */
+public class SelectPrivacyItems extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListAdapter listAdapter;
+
+    private int privacySectionRow;
+    private int lastSeenRow;
+    private int privacyDetailRow;
+    private int securitySectionRow;
+    private int passcodeLock;
+    private int securityDetailRow;
+    private int rowCount;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        privacySectionRow = rowCount++;
+        lastSeenRow = rowCount++;
+        privacyDetailRow = rowCount++;
+        securitySectionRow = rowCount++;
+        passcodeLock = rowCount++;
+        securityDetailRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.spaSettings);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("SPASettings", R.string.SPASettings));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if (i == lastSeenRow)  {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean last_seen_setting = preferences.getBoolean("last_seen_setting", false);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("last_seen_setting", !last_seen_setting);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!last_seen_setting);
+                    }
+                } else if (i == passcodeLock) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean passcode_setting = preferences.getBoolean("passcode_setting", false);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("passcode_setting", !passcode_setting);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!passcode_setting);
+                    }
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.spaSettings) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == privacyDetailRow || i == privacySectionRow || i == lastSeenRow || i == securityDetailRow || i == securitySectionRow || i == passcodeLock;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextCheckCell(mContext);
+                }
+                TextCheckCell textCell = (TextCheckCell) view;
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                if (i == lastSeenRow) {
+                    textCell.setTextAndCheck(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), preferences.getBoolean("last_seen_setting", false), false);
+                } else if (i == passcodeLock) {
+                    textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), preferences.getBoolean("passcode_setting", false), false);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(mContext);
+                }
+                if (i == privacyDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SPAPrivacyDetailHelp", R.string.SPAPrivacyDetailHelp));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                } else if (i == securityDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SPASecurityDetailHelp", R.string.SPASecurityDetailHelp));
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                if (i == privacySectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
+                } else if (i == securitySectionRow) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SecurityTitle", R.string.SecurityTitle));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == lastSeenRow || position == passcodeLock) {
+                return 0;
+            } else if (position == privacyDetailRow || position == securityDetailRow) {
+                return 1;
+            } else if (position == privacySectionRow || position == securitySectionRow)  {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 8c1170404..4ac4a3a5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -33,6 +33,7 @@
 import android.text.TextUtils;
 import android.text.method.LinkMovementMethod;
 import android.util.Base64;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -141,6 +142,10 @@
     private int contactsReimportRow;
     private int contactsSortRow;
     private int rowCount;
+    // for spa
+    private int spaSetting;
+    private int spaSetting2;
+    private int spaSettingsRow;
 
     private final static int edit_name = 1;
     private final static int logout = 2;
@@ -229,6 +234,9 @@ public void run() {
         backgroundRow = rowCount++;
         languageRow = rowCount++;
         enableAnimationsRow = rowCount++;
+        spaSetting = rowCount++;
+        spaSetting2 = rowCount++;
+        spaSettingsRow = rowCount++;
         mediaDownloadSection = rowCount++;
         mediaDownloadSection2 = rowCount++;
         mobileDownloadRow = rowCount++;
@@ -468,6 +476,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         ((TextCheckCell) view).setChecked(MediaController.getInstance().canSaveToGallery());
                     }
                 } else if (i == privacyRow) {
+                    // Log.v("SPA", "arrive privacy row");
                     presentFragment(new PrivacySettingsActivity());
                 } else if (i == languageRow) {
                     presentFragment(new LanguageSelectActivity());
@@ -594,6 +603,8 @@ public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                     presentFragment(new ChangePhoneHelpActivity());
                 } else if (i == stickersRow) {
                     presentFragment(new StickersActivity());
+                } else if (i == spaSettingsRow) {
+                    presentFragment(new SPASettingsActivity());
                 }
             }
         });
@@ -1068,7 +1079,7 @@ public boolean isEnabled(int i) {
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == privacyRow || i == wifiDownloadRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
-                    i == stickersRow;
+                    i == stickersRow || i == spaSettingsRow;
         }
 
         @Override
@@ -1150,6 +1161,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
                 } else if (i == stickersRow) {
                     textCell.setText(LocaleController.getString("Stickers", R.string.Stickers), true);
+                } else if (i == spaSettingsRow) {
+                    textCell.setText(LocaleController.getString("SPASettingsRow", R.string.SPASettingsRow), true);
                 }
             } else if (type == 3) {
                 if (view == null) {
@@ -1179,7 +1192,10 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
                 } else if (i == numberSectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
+                } else if (i == spaSetting2) {
+                    ((HeaderCell) view).setText(LocaleController.getString("SPA", R.string.SPASettings));
                 }
+
             } else if (type == 5) {
                 if (view == null) {
                     view = new TextInfoCell(mContext);
@@ -1264,7 +1280,7 @@ public int getItemViewType(int i) {
             if (i == emptyRow || i == overscrollRow) {
                 return 0;
             }
-            if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
+            if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow || i == spaSetting) {
                 return 1;
             } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
                 return 3;
@@ -1274,7 +1290,7 @@ public int getItemViewType(int i) {
                 return 5;
             } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow || i == numberRow || i == usernameRow) {
                 return 6;
-            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
+            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2 || i == spaSetting2) {
                 return 4;
             } else {
                 return 2;
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 0b29a9eb5..c5c64d5b6 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -465,6 +465,19 @@
     <string name="SmartNotificationsTimes">times</string>
     <string name="SmartNotificationsWithin">within</string>
     <string name="SmartNotificationsMinutes">minutes</string>
+    <!--spa view-->
+    <string name="SPASettings">SPA</string>
+    <string name="SPASettingsRow">SPA Settings</string>
+    <string name="SPASendingHelp">Choose friends who you want to send SPA requests and you can give each person a weight value instead the default weight according to them knowledge about policy administration.</string>
+    <string name="SPAResultHelp">Show the state of SPA process. When receive SPA result, you can apply the result manually or allow SPA apply the result automatically.</string>
+    <string name="SPARequestTitle">SPA Request</string>
+    <string name="SPAResultTitle">SPA Result</string>
+    <string name="SPASelectItems">Select SPA Items</string>
+    <string name="SPAFriendsList">Friends List</string>
+    <string name="SPASendRequest">Send SPA Requests</string>
+    <string name="SPAResult">SPA Result</string>
+    <string name="SPAPrivacyDetailHelp">Choose privacy settings being proposed by SPA.</string>
+    <string name="SPASecurityDetailHelp">Choose security settings being proposed by SPA.</string>
     <!--sessions view-->
     <string name="SessionsTitle">Active Sessions</string>
     <string name="CurrentSession">Current session</string>
diff --git a/gradle.properties b/gradle.properties
index 01520498d..c3113a117 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,20 @@
-RELEASE_STORE_PASSWORD=password
+## Project-wide Gradle settings.
+#
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+#
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+#
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+#Tue Oct 20 14:15:02 CST 2015
+RELEASE_KEY_PASSWORD=password
+systemProp.http.proxyHost=10.131.1.68
 RELEASE_KEY_ALIAS=alias
-RELEASE_KEY_PASSWORD=password
\ No newline at end of file
+RELEASE_STORE_PASSWORD=password
+systemProp.http.proxyPort=7777
