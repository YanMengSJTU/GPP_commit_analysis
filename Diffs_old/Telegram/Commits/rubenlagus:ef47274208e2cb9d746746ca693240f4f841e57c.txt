diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 27e1ab1c5..45f4ab781 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -1527,6 +1527,49 @@ public void run() {
         }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
     }
 
+    /**
+     * Fetch 100 first blocked contacts from server
+     */
+    public void addBlockedContacts() {
+
+        TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
+        req.offset = 0;
+        req.limit = 100;
+        long requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                final TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked) response;
+                for (TLRPC.User user : res.users) {
+                    MessagesController.getInstance().users.put(user.id, user);
+                }
+                MessagesStorage.getInstance().putBlockedContacts(res.blocked,1);
+            }
+        }, null, true, RPCRequest.RPCRequestClassGeneric);
+    }
+
+    /**
+     * If more than 100 blocked contacts, this method is called until all of them have been fetched.
+     * @param times Number of times blocked contacts have been fetched from server during the update.
+     */
+    public void addBlockedContactsTimes(final int times) {
+
+        TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
+        req.offset = 100*(times-1);
+        req.limit = 100*times;
+        long requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                final TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked) response;
+                for (TLRPC.User user : res.users) {
+                    MessagesController.getInstance().users.put(user.id, user);
+                }
+                MessagesStorage.getInstance().putBlockedContacts(res.blocked, times);
+            }
+        }, null, true, RPCRequest.RPCRequestClassGeneric);
+    }
+
+
+
     public void deleteContact(final ArrayList<TLRPC.User> users) {
         if (users == null || users.isEmpty()) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index f6f9d8ec9..72451749a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -167,6 +167,9 @@
 
     public static final int removeAllMessagesFromDialog = 25;
 
+    // Notification ID when blocked contacts cache is updated
+    public static final int blockedContactsDidLoaded = 26;
+
     private static volatile MessagesController Instance = null;
     public static MessagesController getInstance() {
         MessagesController localInstance = Instance;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index 1466d87bd..9135dcdb2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -14,6 +14,7 @@
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
+import org.telegram.SQLite.SQLiteException;
 import org.telegram.SQLite.SQLitePreparedStatement;
 import org.telegram.objects.MessageObject;
 import org.telegram.ui.ApplicationLoader;
@@ -91,6 +92,7 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE randoms(random_id INTEGER PRIMARY KEY, mid INTEGER)").stepThis().dispose();
                 database.executeFast("CREATE TABLE enc_tasks(date INTEGER, data BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
+                database.executeFast("CREATE TABLE blocked(uid INTEGER PRIMARY KEY)").stepThis().dispose();
                 database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                 database.executeFast("CREATE TABLE user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
 
@@ -903,6 +905,80 @@ public void run() {
         });
     }
 
+    /**
+     * Add blocked contacts to database
+     * @param contacts Array of TL_contactBlocked
+     * @param times Number of times this method have been called until now during the same update.
+     *
+     * @note If less than 100 contacts, a notification is posted, otherwise, it call "addBlockedContactsTimes"
+     * with times+1
+     */
+    public void putBlockedContacts(final ArrayList<TLRPC.TL_contactBlocked> contacts, final int times) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    if (times == 1)
+                        database.executeFast("DELETE FROM blocked").stepThis().dispose();
+                    database.beginTransaction();
+                    SQLitePreparedStatement state = database.executeFast("INSERT INTO blocked VALUES(?)");
+                    for (TLRPC.TL_contactBlocked contact : contacts) {
+                        state.requery();
+                        state.bindInteger(1, contact.user_id);
+                        state.step();
+                    }
+                    state.dispose();
+                    database.commitTransaction();
+                    if (contacts.size() < 100)
+                        NotificationCenter.getInstance().postNotificationName(MessagesController.blockedContactsDidLoaded);
+                    else
+                        ContactsController.getInstance().addBlockedContactsTimes(times+1);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    /**
+     * Return an ArrayList with the IDs of all blocked users in cache
+     * @return ArraList<Integer>
+     */
+    public ArrayList<Integer> getBlockedContacts(){
+        ArrayList<Integer> blockedContacts = new ArrayList<Integer>();
+        SQLiteCursor cursor = null;
+        try {
+            cursor = database.queryFinalized("SELECT * FROM blocked");
+            while (cursor.next()) {
+                blockedContacts.add(cursor.intValue(0));
+            }
+        } catch (SQLiteException e) {
+            e.printStackTrace();
+        }
+        return blockedContacts;
+    }
+
+    /**
+     * Return if a contact is blocked or not
+     * @param user_id ID of the contact to check
+     * @return True if the contact is blocked, False otherwise
+     */
+    public Boolean getBlockedContact(int user_id) {
+        Boolean blocked = false;
+        try {
+            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM blocked WHERE uid = %d", user_id));
+            while (cursor.next()) {
+                if (user_id == cursor.intValue(0))
+                    blocked = true;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return blocked;
+    }
+
+
+
     public void deleteContacts(final ArrayList<Integer> uids) {
         if (uids == null || uids.isEmpty()) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 85e5f4ac3..b0173da60 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -65,6 +65,8 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
@@ -181,7 +183,6 @@
     private float startedDraggingX = -1;
     private float distCanMove = Utilities.dp(80);
     private PowerManager.WakeLock mWakeLock = null;
-
     private String currentPicturePath;
 
     private TLRPC.ChatParticipants info = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 5c1245033..ae9c8731d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -101,6 +101,8 @@ public boolean onFragmentCreate() {
             ContactsController.getInstance().checkAppAccount();
             dialogsLoaded = true;
         }
+        // Force update of blocked user cache
+        ContactsController.getInstance().addBlockedContacts();
         return true;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
index b0643ce6e..39ed78ebb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
@@ -21,7 +21,9 @@
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
@@ -36,7 +38,6 @@
 import org.telegram.ui.Views.ActionBar.BaseFragment;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 
 public class SettingsBlockedUsers extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
     private ListView listView;
@@ -44,8 +45,7 @@
     private boolean loading;
     private View progressView;
     private TextView emptyView;
-    private ArrayList<TLRPC.TL_contactBlocked> blockedContacts = new ArrayList<TLRPC.TL_contactBlocked>();
-    private HashMap<Integer, TLRPC.TL_contactBlocked> blockedContactsDict = new HashMap<Integer, TLRPC.TL_contactBlocked>();
+    private ArrayList<Integer> blockedContacts = new ArrayList<Integer>();
     private int selectedUserId;
 
     private final static int block_user = 1;
@@ -54,7 +54,8 @@
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
         NotificationCenter.getInstance().addObserver(this, MessagesController.updateInterfaces);
-        loadBlockedContacts(0, 200);
+        NotificationCenter.getInstance().addObserver(this, MessagesController.blockedContactsDidLoaded);
+        loadBlockedContacts();
         return true;
     }
 
@@ -62,6 +63,7 @@ public boolean onFragmentCreate() {
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
         NotificationCenter.getInstance().removeObserver(this, MessagesController.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, MessagesController.blockedContactsDidLoaded);
     }
 
     @Override
@@ -111,7 +113,7 @@ public void onItemClick(int id) {
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     if (i < blockedContacts.size()) {
                         Bundle args = new Bundle();
-                        args.putInt("user_id", blockedContacts.get(i).user_id);
+                        args.putInt("user_id", blockedContacts.get(i));
                         presentFragment(new UserProfileActivity(args));
                     }
                 }
@@ -123,7 +125,7 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     if (i >= blockedContacts.size()) {
                         return true;
                     }
-                    selectedUserId = blockedContacts.get(i).user_id;
+                    selectedUserId = blockedContacts.get(i);
 
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
@@ -139,14 +141,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                     return;
                                 }
                                 req.id = MessagesController.getInputUser(user);
-                                TLRPC.TL_contactBlocked blocked = blockedContactsDict.get(selectedUserId);
-                                blockedContactsDict.remove(selectedUserId);
-                                blockedContacts.remove(blocked);
+                                blockedContacts.remove(selectedUserId);
                                 listViewAdapter.notifyDataSetChanged();
                                 ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                                     @Override
                                     public void run(TLObject response, TLRPC.TL_error error) {
-
+                                        // Force update of blocked user cache
+                                        ContactsController.getInstance().addBlockedContacts();
                                     }
                                 }, null, true, RPCRequest.RPCRequestClassGeneric);
                             }
@@ -166,62 +167,25 @@ public void run(TLObject response, TLRPC.TL_error error) {
         return fragmentView;
     }
 
-    private void loadBlockedContacts(int offset, int count) {
-        if (loading) {
-            return;
-        }
-        loading = true;
-        TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
-        req.offset = offset;
-        req.limit = count;
-        long requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+    private void loadBlockedContacts() {
+
+        Utilities.RunOnUIThread(new Runnable() {
             @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loading = false;
-                            if (progressView != null) {
-                                progressView.setVisibility(View.GONE);
-                            }
-                            if (listView != null && listView.getEmptyView() == null) {
-                                listView.setEmptyView(emptyView);
-                            }
-                            if (listViewAdapter != null) {
-                                listViewAdapter.notifyDataSetChanged();
-                            }
-                        }
-                    });
+            public void run() {
+                blockedContacts.clear();
+                blockedContacts.addAll(MessagesStorage.getInstance().getBlockedContacts());
+
+                if (progressView != null) {
+                    progressView.setVisibility(View.GONE);
+                }
+                if (listView != null && listView.getEmptyView() == null) {
+                    listView.setEmptyView(emptyView);
+                }
+                if (listViewAdapter != null) {
+                    listViewAdapter.notifyDataSetChanged();
                 }
-                final TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked)response;
-                Utilities.RunOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        loading = false;
-                        for (TLRPC.User user : res.users) {
-                            MessagesController.getInstance().users.put(user.id, user);
-                        }
-                        for (TLRPC.TL_contactBlocked blocked : res.blocked) {
-                            if (!blockedContactsDict.containsKey(blocked.user_id)) {
-                                blockedContacts.add(blocked);
-                                blockedContactsDict.put(blocked.user_id, blocked);
-                            }
-                        }
-                        if (progressView != null) {
-                            progressView.setVisibility(View.GONE);
-                        }
-                        if (listView != null && listView.getEmptyView() == null) {
-                            listView.setEmptyView(emptyView);
-                        }
-                        if (listViewAdapter != null) {
-                            listViewAdapter.notifyDataSetChanged();
-                        }
-                    }
-                });
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric);
-        ConnectionsManager.getInstance().bindRequestToGuid(requestId, classGuid);
+        });
     }
 
     @Override
@@ -231,7 +195,10 @@ public void didReceivedNotification(int id, Object... args) {
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 updateVisibleRows(mask);
             }
+        } else if (id == MessagesController.blockedContactsDidLoaded) {
+            loadBlockedContacts();
         }
+
     }
 
     private void updateVisibleRows(int mask) {
@@ -257,21 +224,19 @@ public void onResume() {
 
     @Override
     public void didSelectContact(TLRPC.User user) {
-        if (user == null || blockedContactsDict.containsKey(user.id)) {
+        if (user == null || blockedContacts.contains(user.id)) {
             return;
         }
         TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
         req.id = MessagesController.getInputUser(user);
         TLRPC.TL_contactBlocked blocked = new TLRPC.TL_contactBlocked();
-        blocked.user_id = user.id;
-        blocked.date = (int)(System.currentTimeMillis() / 1000);
-        blockedContactsDict.put(blocked.user_id, blocked);
-        blockedContacts.add(blocked);
+        blockedContacts.add(user.id);
         listViewAdapter.notifyDataSetChanged();
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
-
+                // Force update of blocked user cache
+                ContactsController.getInstance().addBlockedContacts();
             }
         }, null, true, RPCRequest.RPCRequestClassGeneric);
     }
@@ -325,7 +290,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((ChatOrUserCell)view).usePadding = false;
                     ((ChatOrUserCell)view).useSeparator = true;
                 }
-                TLRPC.User user = MessagesController.getInstance().users.get(blockedContacts.get(i).user_id);
+                TLRPC.User user = MessagesController.getInstance().users.get(blockedContacts.get(i));
                 ((ChatOrUserCell)view).setData(user, null, null, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : "Unknown");
             } else if (type == 1) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index 496ed2afe..3bb43ab2c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -51,6 +51,7 @@
 import org.telegram.ui.Views.IdenticonView;
 
 import java.util.ArrayList;
+import java.util.List;
 
 public class UserProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
     private ListView listView;
@@ -61,12 +62,14 @@
     private boolean creatingChat = false;
     private long dialog_id;
     private TLRPC.EncryptedChat currentEncryptedChat;
+    private Boolean blocked = false;
 
     private final static int add_contact = 1;
     private final static int block_contact = 2;
     private final static int share_contact = 3;
     private final static int edit_contact = 4;
     private final static int delete_contact = 5;
+    private final static int unblock_contact = 6;
 
     private int avatarRow;
     private int phoneSectionRow;
@@ -92,11 +95,13 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, MessagesController.mediaCountDidLoaded);
         NotificationCenter.getInstance().addObserver(this, MessagesController.encryptedChatCreated);
         NotificationCenter.getInstance().addObserver(this, MessagesController.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, MessagesController.blockedContactsDidLoaded);
         user_id = arguments.getInt("user_id", 0);
         dialog_id = arguments.getLong("dialog_id", 0);
         if (dialog_id != 0) {
             currentEncryptedChat = MessagesController.getInstance().encryptedChats.get((int)(dialog_id >> 32));
         }
+        blocked = MessagesStorage.getInstance().getBlockedContact(user_id);
         updateRowsIds();
         return MessagesController.getInstance().users.get(user_id) != null && super.onFragmentCreate();
     }
@@ -109,6 +114,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, MessagesController.mediaCountDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, MessagesController.encryptedChatCreated);
         NotificationCenter.getInstance().removeObserver(this, MessagesController.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, MessagesController.blockedContactsDidLoaded);
     }
 
     private void updateRowsIds() {
@@ -147,7 +153,7 @@ public View createView(LayoutInflater inflater, ViewGroup container) {
                 public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
-                    } else if (id == block_contact) {
+                    } else if (id == block_contact) { // If we want to lock the contact
                         TLRPC.User user = MessagesController.getInstance().users.get(user_id);
                         if (user == null) {
                             return;
@@ -156,11 +162,31 @@ public void onItemClick(int id) {
                         req.id = MessagesController.getInputUser(user);
                         TLRPC.TL_contactBlocked blocked = new TLRPC.TL_contactBlocked();
                         blocked.user_id = user_id;
-                        blocked.date = (int)(System.currentTimeMillis() / 1000);
+                        blocked.date = (int) (System.currentTimeMillis() / 1000);
+                        updateBlockedUnblocked(true);
                         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                             @Override
                             public void run(TLObject response, TLRPC.TL_error error) {
-
+                                // Force update of blocked user cache
+                                ContactsController.getInstance().addBlockedContacts();
+                            }
+                        }, null, true, RPCRequest.RPCRequestClassGeneric);
+                    } else if (id == unblock_contact) { // If we want to unlock the contact
+                        TLRPC.User user = MessagesController.getInstance().users.get(user_id);
+                        if (user == null) {
+                            return;
+                        }
+                        TLRPC.TL_contacts_unblock req = new TLRPC.TL_contacts_unblock();
+                        req.id = MessagesController.getInputUser(user);
+                        TLRPC.TL_contactBlocked blocked = new TLRPC.TL_contactBlocked();
+                        blocked.user_id = user_id;
+                        blocked.date = (int) (System.currentTimeMillis() / 1000);
+                        updateBlockedUnblocked(false);
+                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+                                // Force update of blocked user cache
+                                ContactsController.getInstance().addBlockedContacts();
                             }
                         }, null, true, RPCRequest.RPCRequestClassGeneric);
                     } else if (id == add_contact) {
@@ -371,6 +397,15 @@ public void onClick(DialogInterface dialog, int which) {
         return fragmentView;
     }
 
+    /**
+     * Modify the option block/unblock contact and recreate the Menu to fix this modification
+     * @param newState New state of current contact
+     */
+    public void updateBlockedUnblocked(boolean newState) {
+        blocked = newState;
+        createActionBarMenu();
+    }
+
     @Override
     public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_OK) {
@@ -443,6 +478,9 @@ public void didReceivedNotification(int id, Object... args) {
                     listAdapter.notifyDataSetChanged();
                 }
             }
+        } else if (id == MessagesController.blockedContactsDidLoaded) {
+            blocked = MessagesStorage.getInstance().getBlockedContact(user_id);
+            createActionBarMenu();
         }
     }
 
@@ -508,28 +546,42 @@ public void sendButtonPressed(int index) { }
     public int getSelectedCount() { return 0; }
 
     private void createActionBarMenu() {
-        ActionBarMenu menu = actionBarLayer.createMenu();
-        menu.clearItems();
-
-        if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
-            TLRPC.User user = MessagesController.getInstance().users.get(user_id);
-            if (user == null) {
-                return;
-            }
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-            if (user.phone != null && user.phone.length() != 0) {
-                item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
-                item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
-            } else {
-                item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
+        final ActionBarMenu menu = actionBarLayer.createMenu();
+        Utilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                menu.clearItems();
+                if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
+                    TLRPC.User user = MessagesController.getInstance().users.get(user_id);
+                    if (user == null) {
+                        return;
+                    }
+                    ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+                    if (user.phone != null && user.phone.length() != 0) {
+                        item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
+                        if (blocked) // If the user is blocked, show "Unblock"
+                            item.addSubItem(unblock_contact, LocaleController.getString("Unblock", R.string.Unblock), 0);
+                        else // Otherwise show "Block"
+                            item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
+                    } else {
+                        if (blocked) // If the user is blocked, show "Unblock"
+                            item.addSubItem(unblock_contact, LocaleController.getString("Unblock", R.string.Unblock), 0);
+                        else // Otherwise show "Block"
+                            item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
+                    }
+                } else {
+                    ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+                    item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
+                    if (blocked) // If the user is blocked, show "Unblock"
+                        item.addSubItem(unblock_contact, LocaleController.getString("Unblock", R.string.Unblock), 0);
+                    else // Otherwise show "Block"
+                        item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
+                    item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
+                    item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
+                }
             }
-        } else {
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-            item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
-            item.addSubItem(block_contact, LocaleController.getString("BlockContact", R.string.BlockContact), 0);
-            item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
-            item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
-        }
+        });
+
     }
 
     @Override
