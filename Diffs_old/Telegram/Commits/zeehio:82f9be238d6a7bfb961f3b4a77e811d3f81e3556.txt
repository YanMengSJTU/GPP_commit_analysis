diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 0be48dbc6..207b7a544 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -73,7 +73,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 22
-        versionCode 572
-        versionName "3.0.1"
+        versionCode 580
+        versionName "3.1.1"
     }
 }
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 2009cf46a..e5c2d138d 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -161,8 +161,20 @@
 
         <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
         <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
-        <service android:name="org.telegram.android.NotificationDelay" android:exported="false"/>
         <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
+        <service android:name="org.telegram.android.MusicPlayerService" android:exported="true" android:enabled="true"/>
+
+        <receiver android:name="org.telegram.android.MusicPlayerReceiver" >
+            <intent-filter>
+                <action android:name="org.telegram.android.musicplayer.close" />
+                <action android:name="org.telegram.android.musicplayer.pause" />
+                <action android:name="org.telegram.android.musicplayer.next" />
+                <action android:name="org.telegram.android.musicplayer.play" />
+                <action android:name="org.telegram.android.musicplayer.previous" />
+                <action android:name="android.intent.action.MEDIA_BUTTON" />
+                <action android:name="android.media.AUDIO_BECOMING_NOISY" />
+            </intent-filter>
+        </receiver>
 
         <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
             <intent-filter>
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
index 573107797..357750329 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
@@ -8,7 +8,6 @@
 
 package org.telegram.SQLite;
 
-import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
 
 import java.nio.ByteBuffer;
@@ -30,7 +29,7 @@ public int getStatementHandle() {
 	public SQLitePreparedStatement(SQLiteDatabase db, String sql, boolean finalize) throws SQLiteException {
 		finalizeAfterQuery = finalize;
 		sqliteStatementHandle = prepare(db.getSQLiteHandle(), sql);
-        if (BuildVars.DEBUG_VERSION) {
+        /*if (BuildVars.DEBUG_VERSION) {
             if (hashMap == null) {
                 hashMap = new HashMap<>();
             }
@@ -38,7 +37,7 @@ public SQLitePreparedStatement(SQLiteDatabase db, String sql, boolean finalize)
             for (HashMap.Entry<SQLitePreparedStatement, String> entry : hashMap.entrySet()) {
                 FileLog.d("tmessages", "exist entry = " + entry.getValue());
             }
-        }
+        }*/
 	}
 
 
@@ -101,9 +100,9 @@ public void finalizeQuery() {
             return;
         }
 		try {
-            if (BuildVars.DEBUG_VERSION) {
+            /*if (BuildVars.DEBUG_VERSION) {
                 hashMap.remove(this);
-            }
+            }*/
 			isFinalized = true;
 			finalize(sqliteStatementHandle);
 		} catch (SQLiteException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 89992d69d..681294e85 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -542,16 +542,6 @@ public static int getViewInset(View view) {
         return 0;
     }
 
-    public static int getCurrentActionBarHeight() {
-        if (isTablet()) {
-            return dp(64);
-        } else if (ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            return dp(48);
-        } else {
-            return dp(56);
-        }
-    }
-
     public static Point getRealScreenSize() {
         Point size = new Point();
         try {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java b/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
index be5993931..c41b14bfa 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
@@ -66,13 +66,13 @@ public void playTogether(Object... items) {
 
     public void playTogether(ArrayList<Object> items) {
         if (View10.NEED_PROXY) {
-            ArrayList<Animator10> animators = new ArrayList<Animator10>();
+            ArrayList<Animator10> animators = new ArrayList<>();
             for (Object obj : items) {
                 animators.add((Animator10)obj);
             }
             ((AnimatorSet10) animatorSet).playTogether(animators);
         } else {
-            ArrayList<Animator> animators = new ArrayList<Animator>();
+            ArrayList<Animator> animators = new ArrayList<>();
             for (Object obj : items) {
                 animators.add((Animator)obj);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index a4bb1c349..4e492ceaf 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -20,6 +20,7 @@
 import android.net.Uri;
 import android.provider.BaseColumns;
 import android.provider.ContactsContract;
+import android.text.TextUtils;
 import android.util.SparseArray;
 
 import org.telegram.PhoneFormat.PhoneFormat;
@@ -330,7 +331,7 @@ public void run() {
             ContentResolver cr = ApplicationLoader.applicationContext.getContentResolver();
 
             HashMap<String, Contact> shortContacts = new HashMap<>();
-            StringBuilder ids = new StringBuilder();
+            ArrayList<Integer> idsArr = new ArrayList<>();
             Cursor pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, projectionPhones, null, null, null);
             if (pCur != null) {
                 if (pCur.getCount() > 0) {
@@ -355,10 +356,9 @@ public void run() {
                         }
 
                         Integer id = pCur.getInt(0);
-                        if (ids.length() != 0) {
-                            ids.append(",");
+                        if (!idsArr.contains(id)) {
+                            idsArr.add(id);
                         }
-                        ids.append(id);
 
                         int type = pCur.getInt(2);
                         Contact contact = contactsMap.get(id);
@@ -392,8 +392,9 @@ public void run() {
                 }
                 pCur.close();
             }
+            String ids = TextUtils.join(",", idsArr);
 
-            pCur = cr.query(ContactsContract.Data.CONTENT_URI, projectionNames, ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID + " IN (" + ids.toString() + ") AND " + ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, null);
+            pCur = cr.query(ContactsContract.Data.CONTENT_URI, projectionNames, ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID + " IN (" + ids + ") AND " + ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, null);
             if (pCur != null && pCur.getCount() > 0) {
                 while (pCur.moveToNext()) {
                     int id = pCur.getInt(0);
@@ -474,6 +475,23 @@ public void run() {
             FileLog.e("tmessages", e);
             contactsMap.clear();
         }
+        if (BuildVars.DEBUG_VERSION) {
+            for (HashMap.Entry<Integer, Contact> entry : contactsMap.entrySet()) {
+                Contact contact = entry.getValue();
+                FileLog.e("tmessages", "contact = " + contact.first_name + " " + contact.last_name);
+                if (contact.first_name.length() == 0 && contact.last_name.length() == 0 && contact.phones.size() > 0) {
+                    FileLog.e("tmessages", "warning, empty name for contact = " + contact.id);
+                }
+                FileLog.e("tmessages", "phones:");
+                for (String s : contact.phones) {
+                    FileLog.e("tmessages", "phone = " + s);
+                }
+                FileLog.e("tmessages", "short phones:");
+                for (String s : contact.shortPhones) {
+                    FileLog.e("tmessages", "short phone = " + s);
+                }
+            }
+        }
         return contactsMap;
     }
 
@@ -569,7 +587,7 @@ public void run() {
                             }
                         }
 
-                        boolean nameChanged = existing != null && (!existing.first_name.equals(value.first_name) || !existing.last_name.equals(value.last_name));
+                        boolean nameChanged = existing != null && (value.first_name.length() != 0 && !existing.first_name.equals(value.first_name) || value.last_name != null && !existing.last_name.equals(value.last_name));
                         if (existing == null || nameChanged) {
                             for (int a = 0; a < value.phones.size(); a++) {
                                 String sphone = value.shortPhones.get(a);
@@ -607,8 +625,12 @@ public void run() {
                                 int index = existing.shortPhones.indexOf(sphone);
                                 if (index == -1) {
                                     if (request) {
-                                        if (contactsByPhone.containsKey(sphone)) {
-                                            continue;
+                                        TLRPC.TL_contact contact = contactsByPhone.get(sphone);
+                                        if (contact != null) {
+                                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                                            if (user == null || user.first_name != null && user.first_name.length() != 0 || user.last_name != null && user.last_name.length() != 0) {
+                                                continue;
+                                            }
                                         }
 
                                         TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
@@ -702,8 +724,12 @@ public void run() {
                         int id = pair.getKey();
                         for (int a = 0; a < value.phones.size(); a++) {
                             String phone = value.shortPhones.get(a);
-                            if (contactsByPhone.containsKey(phone)) {
-                                continue;
+                            TLRPC.TL_contact contact = contactsByPhone.get(phone);
+                            if (contact != null) {
+                                TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                                if (user == null || user.first_name != null && user.first_name.length() != 0 || user.last_name != null && user.last_name.length() != 0) {
+                                    continue;
+                                }
                             }
                             TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
                             imp.client_id = id;
@@ -721,9 +747,9 @@ public void run() {
                     if (!toImport.isEmpty()) {
                         if (BuildVars.DEBUG_VERSION) {
                             FileLog.e("tmessages", "start import contacts");
-//                            for (TLRPC.TL_inputPhoneContact contact : toImport) {
-//                                FileLog.e("tmessages", "add contact " + contact.first_name + " " + contact.last_name + " " + contact.phone);
-//                            }
+                            for (TLRPC.TL_inputPhoneContact contact : toImport) {
+                                FileLog.e("tmessages", "add contact " + contact.first_name + " " + contact.last_name + " " + contact.phone);
+                            }
                         }
                         final int count = (int)Math.ceil(toImport.size() / 500.0f);
                         for (int a = 0; a < count; a++) {
@@ -743,9 +769,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                         }
                                         TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
                                         if (BuildVars.DEBUG_VERSION) {
-//                                            for (TLRPC.User user : res.users) {
-//                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-//                                            }
+                                            for (TLRPC.User user : res.users) {
+                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
+                                            }
                                         }
                                         MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
                                         ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
@@ -903,9 +929,9 @@ public void run() {
                     if (user != null) {
                         usersDict.put(user.id, user);
 
-//                        if (BuildVars.DEBUG_VERSION) {
-//                            FileLog.e("tmessages", "loaded user contact " + user.first_name + " " + user.last_name + " " + user.phone);
-//                        }
+                        if (BuildVars.DEBUG_VERSION) {
+                            FileLog.e("tmessages", "loaded user contact " + user.first_name + " " + user.last_name + " " + user.phone);
+                        }
                     }
                 }
 
@@ -1524,9 +1550,9 @@ public void addContact(TLRPC.User user) {
         contactsParams.add(c);
         req.contacts = contactsParams;
         req.replace = false;
-//        if (BuildVars.DEBUG_VERSION) {
-//            FileLog.e("tmessages", "add contact " + user.first_name + " " + user.last_name + " " + user.phone);
-//        }
+        if (BuildVars.DEBUG_VERSION) {
+            FileLog.e("tmessages", "add contact " + user.first_name + " " + user.last_name + " " + user.phone);
+        }
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
@@ -1536,11 +1562,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 final TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
                 MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
 
-//                if (BuildVars.DEBUG_VERSION) {
-//                    for (TLRPC.User user : res.users) {
-//                        FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-//                    }
-//                }
+                if (BuildVars.DEBUG_VERSION) {
+                    for (TLRPC.User user : res.users) {
+                        FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
+                    }
+                }
 
                 for (final TLRPC.User u : res.users) {
                     Utilities.phoneBookQueue.postRunnable(new Runnable() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index 71a5e9b72..7dd282aae 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -33,13 +33,13 @@
 import org.telegram.messenger.ApplicationLoader;
 
 public class Emoji {
-	private static HashMap<Long, DrawableInfo> rects = new HashMap<>();
-	private static int drawImgSize;
+    private static HashMap<Long, DrawableInfo> rects = new HashMap<>();
+    private static int drawImgSize;
     private static int bigImgSize;
-	private static boolean inited = false;
-	private static Paint placeholderPaint;
-	private static Bitmap emojiBmp[] = new Bitmap[5];
-	private static boolean loadingEmoji[] = new boolean[5];
+    private static boolean inited = false;
+    private static Paint placeholderPaint;
+    private static Bitmap emojiBmp[] = new Bitmap[5];
+    private static boolean loadingEmoji[] = new boolean[5];
 
     private static final int[] cols = {
             13, 10, 15, 10, 14
@@ -60,139 +60,144 @@
             0x2B1C, 0x2B50, 0x2B55, 0x3030, 0x303D, 0x3297, 0x3299
     };
 
-    public static  long[][] data = {
+    public static long[][] data = {
             new long[]
                     {},
             new long[]//189
-                    {0x00000000D83DDE04L, 0x00000000D83DDE03L, 0x00000000D83DDE00L, 0x00000000D83DDE0AL, 0x000000000000263AL, 0x00000000D83DDE09L, 0x00000000D83DDE0DL,
-                    0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
-                    0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
-                    0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
-                    0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
-                    0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
-                    0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
-                    0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
-                    0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
-                    0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
-                    0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
-                    0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
-                    0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
-                    0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
-                    0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
-                    0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
-                    0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
-                    0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
-                    0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
-                    0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
-                    0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
-                    0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
-                    0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
-                    0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
-                    0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
-                    0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
-                    0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
+                    {
+                            0x00000000D83DDE04L, 0x00000000D83DDE03L, 0x00000000D83DDE00L, 0x00000000D83DDE0AL, 0x000000000000263AL, 0x00000000D83DDE09L, 0x00000000D83DDE0DL,
+                            0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
+                            0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
+                            0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
+                            0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
+                            0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
+                            0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
+                            0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
+                            0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
+                            0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
+                            0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
+                            0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
+                            0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
+                            0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
+                            0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
+                            0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
+                            0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
+                            0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
+                            0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
+                            0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
+                            0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
+                            0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
+                            0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
+                            0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
+                            0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
+                            0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
+                            0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
             new long[]//116
-                    {0x00000000D83DDC36L, 0x00000000D83DDC3AL, 0x00000000D83DDC31L, 0x00000000D83DDC2DL, 0x00000000D83DDC39L, 0x00000000D83DDC30L, 0x00000000D83DDC38L, 0x00000000D83DDC2FL,
-                    0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
-                    0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
-                    0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
-                    0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
-                    0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
-                    0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
-                    0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
-                    0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
-                    0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
-                    0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
-                    0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
-                    0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
-                    0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
-                    0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
-                    0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
-                    0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
+                    {
+                            0x00000000D83DDC36L, 0x00000000D83DDC3AL, 0x00000000D83DDC31L, 0x00000000D83DDC2DL, 0x00000000D83DDC39L, 0x00000000D83DDC30L, 0x00000000D83DDC38L, 0x00000000D83DDC2FL,
+                            0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
+                            0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
+                            0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
+                            0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
+                            0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
+                            0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
+                            0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
+                            0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
+                            0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
+                            0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
+                            0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
+                            0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
+                            0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
+                            0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
+                            0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
+                            0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
             new long[]//230
-                    {0x00000000D83CDF8DL, 0x00000000D83DDC9DL, 0x00000000D83CDF8EL, 0x00000000D83CDF92L, 0x00000000D83CDF93L, 0x00000000D83CDF8FL, 0x00000000D83CDF86L, 0x00000000D83CDF87L,
-                    0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
-                    0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
-                    0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
-                    0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
-                    0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L,
-                    0x00000000D83DDD15L, 0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
-                    0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
-                    0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC1L, 0x00000000D83DDEC0L,
-                    0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
-                    0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
-                    0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
-                    0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
-                    0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
-                    0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
-                    0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
-                    0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
-                    0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
-                    0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
-                    0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
-                    0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
-                    0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
-                    0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
-                    0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
-                    0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
-                    0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
-                    0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
-                    0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
-                    0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
-                    0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
-                    0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
-                    0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
-                    0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
+                    {
+                            0x00000000D83CDF8DL, 0x00000000D83DDC9DL, 0x00000000D83CDF8EL, 0x00000000D83CDF92L, 0x00000000D83CDF93L, 0x00000000D83CDF8FL, 0x00000000D83CDF86L, 0x00000000D83CDF87L,
+                            0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
+                            0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
+                            0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
+                            0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
+                            0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L,
+                            0x00000000D83DDD15L, 0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
+                            0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
+                            0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC1L, 0x00000000D83DDEC0L,
+                            0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
+                            0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
+                            0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
+                            0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
+                            0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
+                            0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
+                            0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
+                            0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
+                            0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
+                            0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
+                            0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
+                            0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
+                            0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
+                            0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
+                            0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
+                            0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
+                            0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
+                            0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
+                            0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
+                            0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
+                            0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
+                            0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
+                            0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
+                            0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
             new long[]//101
-                    {0x00000000D83CDFE0L, 0x00000000D83CDFE1L, 0x00000000D83CDFEBL, 0x00000000D83CDFE2L, 0x00000000D83CDFE3L, 0x00000000D83CDFE5L, 0x00000000D83CDFE6L, 0x00000000D83CDFEAL,
-                    0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
-                    0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
-                    0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
-                    0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
-                    0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
-                    0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
-                    0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
-                    0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
-                    0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
-                    0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
-                    0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
-                    0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
-                    0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
-                    0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
+                    {
+                            0x00000000D83CDFE0L, 0x00000000D83CDFE1L, 0x00000000D83CDFEBL, 0x00000000D83CDFE2L, 0x00000000D83CDFE3L, 0x00000000D83CDFE5L, 0x00000000D83CDFE6L, 0x00000000D83CDFEAL,
+                            0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
+                            0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
+                            0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
+                            0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
+                            0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
+                            0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
+                            0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
+                            0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
+                            0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
+                            0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
+                            0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
+                            0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
+                            0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
+                            0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
             new long[]//209
-                    {0x00000000003120E3L, 0x00000000003220E3L, 0x00000000003320E3L, 0x00000000003420E3L, 0x00000000003520E3L, 0x00000000003620E3L, 0x00000000003720E3L,
-                    0x00000000003820E3L, 0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L,
-                    0x0000000000002B06L, 0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L,
-                    0x0000000000002197L, 0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L,
-                    0x00000000000025C0L, 0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L,
-                    0x00000000000023EAL, 0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L,
-                    0x00000000D83DDD00L, 0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L,
-                    0x00000000D83CDD96L, 0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L,
-                    0x00000000D83CDE32L, 0x00000000D83CDE34L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
-                    0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
-                    0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
-                    0x00000000D83DDEC2L, 0x00000000D83DDEC4L, 0x00000000D83DDEC5L, 0x00000000D83DDEC3L, 0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L,
-                    0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
-                    0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
-                    0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
-                    0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
-                    0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
-                    0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
-                    0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
-                    0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
-                    0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x000000000000203CL,
-                    0x0000000000002049L, 0x0000000000002753L,
-                    0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
-                    0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
-                    0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
-                    0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
-                    0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
-                    0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
-                    0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
-                    0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
-                    0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
-	
-	static {
+                    {
+                            0x00000000003120E3L, 0x00000000003220E3L, 0x00000000003320E3L, 0x00000000003420E3L, 0x00000000003520E3L, 0x00000000003620E3L, 0x00000000003720E3L,
+                            0x00000000003820E3L, 0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L,
+                            0x0000000000002B06L, 0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L,
+                            0x0000000000002197L, 0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L,
+                            0x00000000000025C0L, 0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L,
+                            0x00000000000023EAL, 0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L,
+                            0x00000000D83DDD00L, 0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L,
+                            0x00000000D83CDD96L, 0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L,
+                            0x00000000D83CDE32L, 0x00000000D83CDE34L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
+                            0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
+                            0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
+                            0x00000000D83DDEC2L, 0x00000000D83DDEC4L, 0x00000000D83DDEC5L, 0x00000000D83DDEC3L, 0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L,
+                            0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
+                            0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
+                            0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
+                            0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
+                            0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
+                            0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
+                            0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
+                            0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
+                            0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x000000000000203CL,
+                            0x0000000000002049L, 0x0000000000002753L,
+                            0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
+                            0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
+                            0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
+                            0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
+                            0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
+                            0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
+                            0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
+                            0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
+                            0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
+
+    static {
         int emojiFullSize;
         if (AndroidUtilities.density <= 1.0f) {
             emojiFullSize = 32;
@@ -203,25 +208,25 @@
         } else {
             emojiFullSize = 96;
         }
-		drawImgSize = AndroidUtilities.dp(20);
+        drawImgSize = AndroidUtilities.dp(20);
         if (AndroidUtilities.isTablet()) {
             bigImgSize = AndroidUtilities.dp(40);
         } else {
             bigImgSize = AndroidUtilities.dp(32);
         }
 
-		for (int j = 1; j < data.length; j++) {
-			for (int i = 0; i < data[j].length; i++) {
+        for (int j = 1; j < data.length; j++) {
+            for (int i = 0; i < data[j].length; i++) {
                 Rect rect = new Rect((i % cols[j - 1]) * emojiFullSize, (i / cols[j - 1]) * emojiFullSize, (i % cols[j - 1] + 1) * emojiFullSize, (i / cols[j - 1] + 1) * emojiFullSize);
-				rects.put(data[j][i], new DrawableInfo(rect, (byte)(j - 1)));
-			}
-		}
-		placeholderPaint = new Paint();
-		placeholderPaint.setColor(0x00000000);
-	}
-
-	private static void loadEmoji(final int page) {
-		try {
+                rects.put(data[j][i], new DrawableInfo(rect, (byte) (j - 1)));
+            }
+        }
+        placeholderPaint = new Paint();
+        placeholderPaint.setColor(0x00000000);
+    }
+
+    private static void loadEmoji(final int page) {
+        try {
             float scale;
             int imageResize = 1;
             if (AndroidUtilities.density <= 1.0f) {
@@ -290,64 +295,64 @@ public void run() {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.emojiDidLoaded);
                 }
             });
-		} catch(Throwable x) {
+        } catch (Throwable x) {
             FileLog.e("tmessages", "Error loading emoji", x);
         }
-	}
-	
-	private static void loadEmojiAsync(final int page) {
-		if (loadingEmoji[page]) {
+    }
+
+    private static void loadEmojiAsync(final int page) {
+        if (loadingEmoji[page]) {
             return;
         }
         loadingEmoji[page] = true;
-		new Thread(new Runnable() {
+        new Thread(new Runnable() {
             public void run() {
                 loadEmoji(page);
                 loadingEmoji[page] = false;
             }
         }).start();
-	}
-	
-	public static void invalidateAll(View view) {
-		if (view instanceof ViewGroup) {
-			ViewGroup g = (ViewGroup)view;
-			for (int i = 0; i < g.getChildCount(); i++) {
-				invalidateAll(g.getChildAt(i));
-			}
-		} else if (view instanceof TextView) {
-			view.invalidate();
-		}
-	}
-	
-	public static EmojiDrawable getEmojiDrawable(long code) {
-		DrawableInfo info = rects.get(code);
-		if (info == null) {
+    }
+
+    public static void invalidateAll(View view) {
+        if (view instanceof ViewGroup) {
+            ViewGroup g = (ViewGroup) view;
+            for (int i = 0; i < g.getChildCount(); i++) {
+                invalidateAll(g.getChildAt(i));
+            }
+        } else if (view instanceof TextView) {
+            view.invalidate();
+        }
+    }
+
+    public static EmojiDrawable getEmojiDrawable(long code) {
+        DrawableInfo info = rects.get(code);
+        if (info == null) {
             FileLog.e("tmessages", "No emoji drawable for code " + String.format("%016X", code));
-			return null;
-		}
-		EmojiDrawable ed = new EmojiDrawable(info);
-		ed.setBounds(0, 0, drawImgSize, drawImgSize);
-		return ed;
-	}
-	
-	public static Drawable getEmojiBigDrawable(long code) {
-		EmojiDrawable ed = getEmojiDrawable(code);
-		if (ed == null) {
             return null;
         }
-		ed.setBounds(0, 0, bigImgSize, bigImgSize);
-		ed.fullSize = true;
-		return ed;
-	}
-	
-	public static class EmojiDrawable extends Drawable {
+        EmojiDrawable ed = new EmojiDrawable(info);
+        ed.setBounds(0, 0, drawImgSize, drawImgSize);
+        return ed;
+    }
+
+    public static Drawable getEmojiBigDrawable(long code) {
+        EmojiDrawable ed = getEmojiDrawable(code);
+        if (ed == null) {
+            return null;
+        }
+        ed.setBounds(0, 0, bigImgSize, bigImgSize);
+        ed.fullSize = true;
+        return ed;
+    }
+
+    public static class EmojiDrawable extends Drawable {
         private DrawableInfo info;
-		private boolean fullSize = false;
-		private static Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
-		
-		public EmojiDrawable(DrawableInfo i) {
-			info = i;
-		}
+        private boolean fullSize = false;
+        private static Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
+
+        public EmojiDrawable(DrawableInfo i) {
+            info = i;
+        }
 
         public DrawableInfo getDrawableInfo() {
             return info;
@@ -364,12 +369,12 @@ public Rect getDrawRect() {
         }
 
         @Override
-		public void draw(Canvas canvas) {
-			if (emojiBmp[info.page] == null) {
+        public void draw(Canvas canvas) {
+            if (emojiBmp[info.page] == null) {
                 loadEmojiAsync(info.page);
-				canvas.drawRect(getBounds(), placeholderPaint);
-				return;
-			}
+                canvas.drawRect(getBounds(), placeholderPaint);
+                return;
+            }
             Rect b;
             if (fullSize) {
                 b = getDrawRect();
@@ -380,33 +385,33 @@ public void draw(Canvas canvas) {
             if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
                 canvas.drawBitmap(emojiBmp[info.page], info.rect, b, paint);
             }
-		}
+        }
 
-		@Override
-		public int getOpacity() {
-			return 0;
-		}
+        @Override
+        public int getOpacity() {
+            return 0;
+        }
 
-		@Override
-		public void setAlpha(int alpha) {
+        @Override
+        public void setAlpha(int alpha) {
 
         }
 
-		@Override
-		public void setColorFilter(ColorFilter cf) {
+        @Override
+        public void setColorFilter(ColorFilter cf) {
 
         }
-	}
-	
-	private static class DrawableInfo {
+    }
+
+    private static class DrawableInfo {
         public Rect rect;
         public byte page;
 
-		public DrawableInfo(Rect r, byte p) {
-			rect = r;
+        public DrawableInfo(Rect r, byte p) {
+            rect = r;
             page = p;
-		}
-	}
+        }
+    }
 
     private static boolean inArray(char c, char[] a) {
         for (char cc : a) {
@@ -425,18 +430,22 @@ private static boolean isNextCharIsColor(CharSequence cs, int i) {
         return value == 0xd83cdffb || value == 0xd83cdffc || value == 0xd83cdffd || value == 0xd83cdffe || value == 0xd83cdfff;
     }
 
-    public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fontMetrics, int size) {
+    public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fontMetrics, int size, boolean createNew) {
         if (cs == null || cs.length() == 0) {
             return cs;
         }
+        //SpannableStringLight.isFieldsAvailable();
+        //SpannableStringLight s = new SpannableStringLight(cs.toString());
         Spannable s;
-        if (cs instanceof Spannable) {
-            s = (Spannable)cs;
+        if (!createNew && cs instanceof Spannable) {
+            s = (Spannable) cs;
         } else {
-            s = Spannable.Factory.getInstance().newSpannable(cs);
+            s = Spannable.Factory.getInstance().newSpannable(cs.toString());
         }
         long buf = 0;
         int emojiCount = 0;
+        //s.setSpansCount(emojiCount);
+
         try {
             for (int i = 0; i < cs.length(); i++) {
                 char c = cs.charAt(i);
@@ -450,12 +459,12 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                     if (d != null) {
                         boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                         EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                        emojiCount++;
                         if (c >= 0xDDE6 && c <= 0xDDFA) {
                             s.setSpan(span, i - 3, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                         } else {
                             s.setSpan(span, i - 1, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                         }
+                        emojiCount++;
                         if (nextIsSkinTone) {
                             i += 2;
                         }
@@ -472,8 +481,8 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                             if (d != null) {
                                 boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                                 EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                                emojiCount++;
                                 s.setSpan(span, i - 1, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                                emojiCount++;
                                 if (nextIsSkinTone) {
                                     i += 2;
                                 }
@@ -486,8 +495,8 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                     if (d != null) {
                         boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                         EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
-                        emojiCount++;
                         s.setSpan(span, i, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        emojiCount++;
                         if (nextIsSkinTone) {
                             i += 2;
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 3cf8e8277..21355c5d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -1285,6 +1285,9 @@ public void run() {
     }
 
     public Float getFileProgress(String location) {
+        if (location == null) {
+            return null;
+        }
         return fileProgresses.get(location);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 273f3ba88..d7fda8509 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -46,6 +46,8 @@
 import android.provider.MediaStore;
 import android.view.View;
 
+import org.telegram.android.audioinfo.AudioInfo;
+import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.android.video.InputSurface;
 import org.telegram.android.video.MP4Builder;
 import org.telegram.android.video.Mp4Movie;
@@ -78,22 +80,34 @@
 public class MediaController implements NotificationCenter.NotificationCenterDelegate, SensorEventListener {
 
     private native int startRecord(String path);
+
     private native int writeFrame(ByteBuffer frame, int len);
+
     private native void stopRecord();
+
     private native int openOpusFile(String path);
+
     private native int seekOpusFile(float position);
+
     private native int isOpusFile(String path);
+
     private native void closeOpusFile();
+
     private native void readOpusFile(ByteBuffer buffer, int capacity, int[] args);
+
     private native long getTotalPcmDuration();
 
     public static int[] readArgs = new int[3];
 
     public interface FileDownloadProgressListener {
         void onFailedDownload(String fileName);
+
         void onSuccessDownload(String fileName);
+
         void onProgressDownload(String fileName, float progress);
+
         void onProgressUpload(String fileName, float progress, boolean isEncrypted);
+
         int getObserverTag();
     }
 
@@ -127,6 +141,16 @@ public AudioBuffer(int capacity) {
             MediaStore.Video.Media.DATE_TAKEN
     };
 
+    public static class AudioEntry {
+        public long id;
+        public String author;
+        public String title;
+        public String genre;
+        public int duration;
+        public String path;
+        public MessageObject messageObject;
+    }
+
     public static class AlbumEntry {
         public int bucketId;
         public String bucketName;
@@ -221,7 +245,10 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private HashMap<String, DownloadObject> downloadQueueKeys = new HashMap<>();
 
     private boolean saveToGallery = true;
+    private boolean shuffleMusic;
+    private int repeatMode;
 
+    private Runnable refreshGalleryRunnable;
     public static AlbumEntry allPhotosAlbumEntry;
 
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<>();
@@ -249,6 +276,11 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private final Object progressTimerSync = new Object();
     private boolean useFrontSpeaker;
     private int buffersWrited;
+    private ArrayList<MessageObject> playlist = new ArrayList<>();
+    private ArrayList<MessageObject> shuffledPlaylist = new ArrayList<>();
+    private int currentPlaylistNum;
+    private boolean downloadingCurrentMessage;
+    private AudioInfo audioInfo;
 
     private AudioRecord audioRecorder = null;
     private TLRPC.TL_audio recordingAudio = null;
@@ -271,6 +303,7 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private int recordBufferSize;
     private boolean sendAfterDone;
 
+    private Runnable recordStartRunnable;
     private DispatchQueue recordQueue;
     private DispatchQueue fileEncodingQueue;
     private Runnable recordRunnable = new Runnable() {
@@ -359,7 +392,7 @@ public void onChange(boolean selfChange) {
         }
     }
 
-    /*private class GalleryObserverInternal extends ContentObserver {
+    private class GalleryObserverInternal extends ContentObserver {
         public GalleryObserverInternal() {
             super(null);
         }
@@ -367,9 +400,13 @@ public GalleryObserverInternal() {
         @Override
         public void onChange(boolean selfChange) {
             super.onChange(selfChange);
-            AndroidUtilities.runOnUIThread(new Runnable() {
+            if (refreshGalleryRunnable != null) {
+                AndroidUtilities.cancelRunOnUIThread(refreshGalleryRunnable);
+            }
+            AndroidUtilities.runOnUIThread(refreshGalleryRunnable = new Runnable() {
                 @Override
                 public void run() {
+                    refreshGalleryRunnable = null;
                     loadGalleryPhotosAlbums(0);
                 }
             }, 2000);
@@ -384,14 +421,18 @@ public GalleryObserverExternal() {
         @Override
         public void onChange(boolean selfChange) {
             super.onChange(selfChange);
-            AndroidUtilities.runOnUIThread(new Runnable() {
+            if (refreshGalleryRunnable != null) {
+                AndroidUtilities.cancelRunOnUIThread(refreshGalleryRunnable);
+            }
+            AndroidUtilities.runOnUIThread(refreshGalleryRunnable = new Runnable() {
                 @Override
                 public void run() {
+                    refreshGalleryRunnable = null;
                     loadGalleryPhotosAlbums(0);
                 }
             }, 2000);
         }
-    }*/
+    }
 
     private ExternalObserver externalObserver = null;
     private InternalObserver internalObserver = null;
@@ -402,6 +443,7 @@ public void run() {
     private ArrayList<Long> lastSecretChatVisibleMessages = null;
     private int startObserverToken = 0;
     private StopMediaObserverRunnable stopMediaObserverRunnable = null;
+
     private final class StopMediaObserverRunnable implements Runnable {
         public int currentObserverToken = 0;
 
@@ -427,9 +469,11 @@ public void run() {
             }
         }
     }
+
     private String[] mediaProjections = null;
 
     private static volatile MediaController Instance = null;
+
     public static MediaController getInstance() {
         MediaController localInstance = Instance;
         if (localInstance == null) {
@@ -484,6 +528,8 @@ public MediaController() {
         wifiDownloadMask = preferences.getInt("wifiDownloadMask", AUTODOWNLOAD_MASK_PHOTO | AUTODOWNLOAD_MASK_AUDIO);
         roamingDownloadMask = preferences.getInt("roamingDownloadMask", 0);
         saveToGallery = preferences.getBoolean("save_gallery", false);
+        shuffleMusic = preferences.getBoolean("shuffleMusic", false);
+        repeatMode = preferences.getInt("repeatMode", 0);
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
@@ -491,6 +537,7 @@ public MediaController() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileUploadProgressChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.musicDidLoaded);
 
         BroadcastReceiver networkStateReceiver = new BroadcastReceiver() {
             @Override
@@ -506,7 +553,7 @@ public void onReceive(Context context, Intent intent) {
         }
 
         if (Build.VERSION.SDK_INT >= 16) {
-            mediaProjections = new String[] {
+            mediaProjections = new String[]{
                     MediaStore.Images.ImageColumns.DATA,
                     MediaStore.Images.ImageColumns.DISPLAY_NAME,
                     MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
@@ -516,7 +563,7 @@ public void onReceive(Context context, Intent intent) {
                     MediaStore.Images.ImageColumns.HEIGHT
             };
         } else {
-            mediaProjections = new String[] {
+            mediaProjections = new String[]{
                     MediaStore.Images.ImageColumns.DATA,
                     MediaStore.Images.ImageColumns.DISPLAY_NAME,
                     MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
@@ -525,7 +572,7 @@ public void onReceive(Context context, Intent intent) {
             };
         }
 
-        /*try {
+        try {
             ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, false, new GalleryObserverExternal());
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -534,7 +581,7 @@ public void onReceive(Context context, Intent intent) {
             ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI, false, new GalleryObserverInternal());
         } catch (Exception e) {
             FileLog.e("tmessages", e);
-        }*/
+        }
     }
 
     private void startProgressTimer() {
@@ -606,12 +653,13 @@ private void stopProgressTimer() {
     }
 
     public void cleanup() {
-        clenupPlayer(false);
+        clenupPlayer(false, true);
         if (currentGifDrawable != null) {
             currentGifDrawable.recycle();
             currentGifDrawable = null;
         }
         currentMediaCell = null;
+        audioInfo = null;
         currentGifMessageObject = null;
         photoDownloadQueue.clear();
         audioDownloadQueue.clear();
@@ -619,6 +667,8 @@ public void cleanup() {
         videoDownloadQueue.clear();
         downloadQueueKeys.clear();
         videoConvertQueue.clear();
+        playlist.clear();
+        shuffledPlaylist.clear();
         typingTimes.clear();
         cancelVideoConvert(null);
     }
@@ -652,7 +702,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : photoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.PhotoSize)downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.PhotoSize) downloadObject.object);
             }
             photoDownloadQueue.clear();
         }
@@ -662,7 +712,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : audioDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Audio)downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Audio) downloadObject.object);
             }
             audioDownloadQueue.clear();
         }
@@ -672,7 +722,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : documentDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Document)downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Document) downloadObject.object);
             }
             documentDownloadQueue.clear();
         }
@@ -682,7 +732,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : videoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Video)downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Video) downloadObject.object);
             }
             videoDownloadQueue.clear();
         }
@@ -713,7 +763,7 @@ public boolean canDownloadMedia(int type) {
     private int getCurrentDownloadMask() {
         if (ConnectionsManager.isConnectedToWiFi()) {
             return wifiDownloadMask;
-        } else if(ConnectionsManager.isRoaming()) {
+        } else if (ConnectionsManager.isRoaming()) {
             return roamingDownloadMask;
         } else {
             return mobileDataDownloadMask;
@@ -742,13 +792,13 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
 
             boolean added = true;
             if (downloadObject.object instanceof TLRPC.Audio) {
-                FileLoader.getInstance().loadFile((TLRPC.Audio)downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.Audio) downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.PhotoSize) {
-                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, null, false);
+                FileLoader.getInstance().loadFile((TLRPC.PhotoSize) downloadObject.object, null, false);
             } else if (downloadObject.object instanceof TLRPC.Video) {
-                FileLoader.getInstance().loadFile((TLRPC.Video)downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.Video) downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.Document) {
-                FileLoader.getInstance().loadFile((TLRPC.Document)downloadObject.object, false, false);
+                FileLoader.getInstance().loadFile((TLRPC.Document) downloadObject.object, false, false);
             } else {
                 added = false;
             }
@@ -986,7 +1036,7 @@ private void processLaterArrays() {
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -999,10 +1049,16 @@ public void didReceivedNotification(int id, Object... args) {
             }
             listenerInProgress = false;
             processLaterArrays();
-            checkDownloadFinished(fileName, (Integer)args[1]);
+            checkDownloadFinished(fileName, (Integer) args[1]);
         } else if (id == NotificationCenter.FileDidLoaded) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
+            if (downloadingCurrentMessage && playingMessageObject != null) {
+                String file = FileLoader.getAttachFileName(playingMessageObject.messageOwner.media.document);
+                if (file.equals(fileName)) {
+                    playAudio(playingMessageObject);
+                }
+            }
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -1018,10 +1074,10 @@ public void didReceivedNotification(int id, Object... args) {
             checkDownloadFinished(fileName, 0);
         } else if (id == NotificationCenter.FileLoadProgressChanged) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                Float progress = (Float)args[1];
+                Float progress = (Float) args[1];
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
                     if (reference.get() != null) {
                         reference.get().onProgressDownload(fileName, progress);
@@ -1032,11 +1088,11 @@ public void didReceivedNotification(int id, Object... args) {
             processLaterArrays();
         } else if (id == NotificationCenter.FileUploadProgressChanged) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                Float progress = (Float)args[1];
-                Boolean enc = (Boolean)args[2];
+                Float progress = (Float) args[1];
+                Boolean enc = (Boolean) args[2];
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
                     if (reference.get() != null) {
                         reference.get().onProgressUpload(fileName, progress, enc);
@@ -1070,15 +1126,27 @@ public void didReceivedNotification(int id, Object... args) {
             }
         } else if (id == NotificationCenter.messagesDeleted) {
             if (playingMessageObject != null) {
-                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
+                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
                 if (markAsDeletedMessages.contains(playingMessageObject.getId())) {
-                    clenupPlayer(false);
+                    clenupPlayer(false, true);
                 }
             }
         } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
-            long did = (Long)args[0];
+            long did = (Long) args[0];
             if (playingMessageObject != null && playingMessageObject.getDialogId() == did) {
-                clenupPlayer(false);
+                clenupPlayer(false, true);
+            }
+        } else if (id == NotificationCenter.musicDidLoaded) {
+            long did = (Long) args[0];
+            if (playingMessageObject != null && playingMessageObject.isMusic() && playingMessageObject.getDialogId() == did) {
+                ArrayList<MessageObject> arrayList = (ArrayList<MessageObject>) args[1];
+                playlist.addAll(0, arrayList);
+                if (shuffleMusic) {
+                    buildShuffledPlayList();
+                    currentPlaylistNum = 0;
+                } else {
+                    currentPlaylistNum += arrayList.size();
+                }
             }
         }
     }
@@ -1174,7 +1242,7 @@ public void run() {
                                         audioTrackPlayer.setNotificationMarkerPosition(1);
                                     }
                                     if (finalBuffersWrited == 1) {
-                                        clenupPlayer(true);
+                                        clenupPlayer(true, true);
                                     }
                                 }
                             }
@@ -1221,7 +1289,7 @@ public void onSensorChanged(SensorEvent event) {
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioRouteChanged, useFrontSpeaker);
         MessageObject currentMessageObject = playingMessageObject;
         float progress = playingMessageObject.audioProgress;
-        clenupPlayer(false);
+        clenupPlayer(false, true);
         currentMessageObject.audioProgress = progress;
         playAudio(currentMessageObject);
         ignoreProximity = false;
@@ -1266,9 +1334,9 @@ private void startProximitySensor() {
         }
     }
 
-    private void clenupPlayer(boolean notify) {
+    public void clenupPlayer(boolean notify, boolean stopService) {
         stopProximitySensor();
-        if (audioPlayer != null || audioTrackPlayer != null) {
+        if (playingMessageObject != null) {
             if (audioPlayer != null) {
                 try {
                     audioPlayer.stop();
@@ -1301,12 +1369,20 @@ private void clenupPlayer(boolean notify) {
             lastProgress = 0;
             buffersWrited = 0;
             isPaused = false;
+            if (downloadingCurrentMessage) {
+                FileLoader.getInstance().cancelLoadFile(playingMessageObject.messageOwner.media.document);
+            }
             MessageObject lastFile = playingMessageObject;
             playingMessageObject.audioProgress = 0.0f;
             playingMessageObject.audioProgressSec = 0;
             playingMessageObject = null;
+            downloadingCurrentMessage = false;
             if (notify) {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidReset, lastFile.getId());
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidReset, lastFile.getId(), stopService);
+            }
+            if (stopService) {
+                Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+                ApplicationLoader.applicationContext.stopService(intent);
             }
         }
     }
@@ -1364,6 +1440,151 @@ public boolean seekToProgress(MessageObject messageObject, float progress) {
         return true;
     }
 
+    public MessageObject getPlayingMessageObject() {
+        return playingMessageObject;
+    }
+
+    private void buildShuffledPlayList() {
+        ArrayList<MessageObject> all = new ArrayList<>(playlist);
+        shuffledPlaylist.clear();
+
+        MessageObject messageObject = playlist.get(currentPlaylistNum);
+        all.remove(currentPlaylistNum);
+        shuffledPlaylist.add(messageObject);
+
+        int count = all.size();
+        for (int a = 0; a < count; a++) {
+            int index = Utilities.random.nextInt(all.size());
+            shuffledPlaylist.add(all.get(index));
+            all.remove(index);
+        }
+    }
+
+    public boolean setPlaylist(ArrayList<MessageObject> messageObjects, MessageObject current) {
+        if (playingMessageObject == current) {
+            return playAudio(current);
+        }
+        playlist.clear();
+        for (int a = messageObjects.size() - 1; a >= 0; a--) {
+            MessageObject messageObject = messageObjects.get(a);
+            if (messageObject.isMusic()) {
+                playlist.add(messageObject);
+            }
+        }
+        currentPlaylistNum = playlist.indexOf(current);
+        if (currentPlaylistNum == -1) {
+            playlist.clear();
+            shuffledPlaylist.clear();
+            return false;
+        }
+        if (shuffleMusic) {
+            buildShuffledPlayList();
+            currentPlaylistNum = 0;
+        }
+        SharedMediaQuery.loadMusic(current.getDialogId(), playlist.get(0).getId());
+        return playAudio(current);
+    }
+
+    public void playNextMessage() {
+        playNextMessage(false);
+    }
+
+    private void playNextMessage(boolean byStop) {
+        ArrayList<MessageObject> currentPlayList = shuffleMusic ? shuffledPlaylist : playlist;
+
+        if (byStop && repeatMode == 2) {
+            clenupPlayer(false, false);
+            playAudio(currentPlayList.get(currentPlaylistNum));
+            return;
+        }
+        currentPlaylistNum++;
+        if (currentPlaylistNum >= currentPlayList.size()) {
+            currentPlaylistNum = 0;
+            if (byStop && repeatMode == 0) {
+                stopProximitySensor();
+                if (audioPlayer != null || audioTrackPlayer != null) {
+                    if (audioPlayer != null) {
+                        try {
+                            audioPlayer.stop();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        try {
+                            audioPlayer.release();
+                            audioPlayer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (audioTrackPlayer != null) {
+                        synchronized (playerObjectSync) {
+                            try {
+                                audioTrackPlayer.pause();
+                                audioTrackPlayer.flush();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            try {
+                                audioTrackPlayer.release();
+                                audioTrackPlayer = null;
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    }
+                    stopProgressTimer();
+                    lastProgress = 0;
+                    buffersWrited = 0;
+                    isPaused = true;
+                    playingMessageObject.audioProgress = 0.0f;
+                    playingMessageObject.audioProgressSec = 0;
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
+                }
+                return;
+            }
+        }
+        if (currentPlaylistNum < 0 || currentPlaylistNum >= currentPlayList.size()) {
+            return;
+        }
+        playAudio(currentPlayList.get(currentPlaylistNum));
+    }
+
+    public void playPreviousMessage() {
+        ArrayList<MessageObject> currentPlayList = shuffleMusic ? shuffledPlaylist : playlist;
+
+        currentPlaylistNum--;
+        if (currentPlaylistNum < 0) {
+            currentPlaylistNum = currentPlayList.size() - 1;
+        }
+        if (currentPlaylistNum < 0 || currentPlaylistNum >= currentPlayList.size()) {
+            return;
+        }
+        playAudio(currentPlayList.get(currentPlaylistNum));
+    }
+
+    private void checkIsNextMusicFileDownloaded() {
+        ArrayList<MessageObject> currentPlayList = shuffleMusic ? shuffledPlaylist : playlist;
+        if (currentPlayList == null || currentPlayList.size() < 2) {
+            return;
+        }
+        int nextIndex = currentPlaylistNum + 1;
+        if (nextIndex >= currentPlayList.size()) {
+            nextIndex = 0;
+        }
+        MessageObject nextAudio = currentPlayList.get(nextIndex);
+        File file = null;
+        if (nextAudio.messageOwner.attachPath != null && nextAudio.messageOwner.attachPath.length() > 0) {
+            file = new File(nextAudio.messageOwner.attachPath);
+            if (!file.exists()) {
+                file = null;
+            }
+        }
+        final File cacheFile = file != null ? file : FileLoader.getPathToMessage(nextAudio.messageOwner);
+        boolean exist = cacheFile != null && cacheFile.exists();
+        if (cacheFile != null && cacheFile != file && !cacheFile.exists() && nextAudio.isMusic()) {
+            FileLoader.getInstance().loadFile(nextAudio.messageOwner.media.document, true, false);
+        }
+    }
+
     public boolean playAudio(MessageObject messageObject) {
         if (messageObject == null) {
             return false;
@@ -1374,8 +1595,10 @@ public boolean playAudio(MessageObject messageObject) {
             }
             return true;
         }
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
-        clenupPlayer(true);
+        if (audioTrackPlayer != null) {
+            MusicPlayerService.setIgnoreAudioFocus();
+        }
+        clenupPlayer(true, false);
         File file = null;
         if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
             file = new File(messageObject.messageOwner.attachPath);
@@ -1384,8 +1607,33 @@ public boolean playAudio(MessageObject messageObject) {
             }
         }
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
+        if (cacheFile != null && cacheFile != file && !cacheFile.exists() && messageObject.isMusic()) {
+            FileLoader.getInstance().loadFile(messageObject.messageOwner.media.document, true, false);
+            downloadingCurrentMessage = true;
+            isPaused = false;
+            lastProgress = 0;
+            lastPlayPcm = 0;
+            audioInfo = null;
+            playingMessageObject = messageObject;
+            if (playingMessageObject.messageOwner.media.document != null) {
+                Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+                ApplicationLoader.applicationContext.startService(intent);
+            } else {
+                Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+                ApplicationLoader.applicationContext.stopService(intent);
+            }
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
+            return true;
+        } else {
+            downloadingCurrentMessage = false;
+        }
+        if (messageObject.isMusic()) {
+            checkIsNextMusicFileDownloaded();
+        }
 
         if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
+            playlist.clear();
+            shuffledPlaylist.clear();
             synchronized (playerObjectSync) {
                 try {
                     ignoreFirstProgress = 3;
@@ -1410,7 +1658,7 @@ public void run() {
                     audioTrackPlayer.setPlaybackPositionUpdateListener(new AudioTrack.OnPlaybackPositionUpdateListener() {
                         @Override
                         public void onMarkerReached(AudioTrack audioTrack) {
-                            clenupPlayer(true);
+                            clenupPlayer(true, true);
                         }
 
                         @Override
@@ -1420,7 +1668,9 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                     });
                     audioTrackPlayer.play();
                     startProgressTimer();
-                    startProximitySensor();
+                    if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+                        startProximitySensor();
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                     if (audioTrackPlayer != null) {
@@ -1428,6 +1678,7 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                         audioTrackPlayer = null;
                         isPaused = false;
                         playingMessageObject = null;
+                        downloadingCurrentMessage = false;
                     }
                     return false;
                 }
@@ -1440,13 +1691,28 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                 audioPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                     @Override
                     public void onCompletion(MediaPlayer mediaPlayer) {
-                        clenupPlayer(true);
+                        if (!playlist.isEmpty() && playlist.size() > 1) {
+                            playNextMessage(true);
+                        } else {
+                            clenupPlayer(true, true);
+                        }
                     }
                 });
                 audioPlayer.prepare();
                 audioPlayer.start();
                 startProgressTimer();
-                startProximitySensor();
+                if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+                    audioInfo = null;
+                    playlist.clear();
+                    shuffledPlaylist.clear();
+                    startProximitySensor();
+                } else {
+                    try {
+                        audioInfo = AudioInfo.getAudioInfo(cacheFile);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
                 if (audioPlayer != null) {
@@ -1454,6 +1720,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                     audioPlayer = null;
                     isPaused = false;
                     playingMessageObject = null;
+                    downloadingCurrentMessage = false;
                 }
                 return false;
             }
@@ -1463,6 +1730,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
         lastProgress = 0;
         lastPlayPcm = 0;
         playingMessageObject = messageObject;
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
 
         if (audioPlayer != null) {
             try {
@@ -1484,7 +1752,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                 public void run() {
                     try {
                         if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
-                            lastPlayPcm = (long)(currentTotalPcmDuration * playingMessageObject.audioProgress);
+                            lastPlayPcm = (long) (currentTotalPcmDuration * playingMessageObject.audioProgress);
                             seekOpusFile(playingMessageObject.audioProgress);
                         }
                     } catch (Exception e) {
@@ -1500,6 +1768,14 @@ public void run() {
             });
         }
 
+        if (playingMessageObject.messageOwner.media.document != null) {
+            Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+            ApplicationLoader.applicationContext.startService(intent);
+        } else {
+            Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+            ApplicationLoader.applicationContext.stopService(intent);
+        }
+
         return true;
     }
 
@@ -1533,7 +1809,55 @@ public void stopAudio() {
         }
         stopProgressTimer();
         playingMessageObject = null;
+        downloadingCurrentMessage = false;
         isPaused = false;
+
+        Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
+        ApplicationLoader.applicationContext.stopService(intent);
+    }
+
+    public AudioInfo getAudioInfo() {
+        return audioInfo;
+    }
+
+    public boolean isShuffleMusic() {
+        return shuffleMusic;
+    }
+
+    public int getRepeatMode() {
+        return repeatMode;
+    }
+
+    public void toggleShuffleMusic() {
+        shuffleMusic = !shuffleMusic;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("shuffleMusic", shuffleMusic);
+        editor.commit();
+        if (shuffleMusic) {
+            buildShuffledPlayList();
+            currentPlaylistNum = 0;
+        } else {
+            if (playingMessageObject != null) {
+                currentPlaylistNum = playlist.indexOf(playingMessageObject);
+                if (currentPlaylistNum == -1) {
+                    playlist.clear();
+                    shuffledPlaylist.clear();
+                    clenupPlayer(true, true);
+                }
+            }
+        }
+    }
+
+    public void toggleRepeatMode() {
+        repeatMode++;
+        if (repeatMode > 2) {
+            repeatMode = 0;
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("repeatMode", repeatMode);
+        editor.commit();
     }
 
     public boolean pauseAudio(MessageObject messageObject) {
@@ -1549,6 +1873,7 @@ public boolean pauseAudio(MessageObject messageObject) {
                 audioTrackPlayer.pause();
             }
             isPaused = true;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
         } catch (Exception e) {
             FileLog.e("tmessages", e);
             isPaused = false;
@@ -1561,7 +1886,9 @@ public boolean resumeAudio(MessageObject messageObject) {
         if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
             return false;
         }
-        startProximitySensor();
+        if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+            startProximitySensor();
+        }
         try {
             startProgressTimer();
             if (audioPlayer != null) {
@@ -1571,6 +1898,7 @@ public boolean resumeAudio(MessageObject messageObject) {
                 checkPlayerQueue();
             }
             isPaused = false;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
         } catch (Exception e) {
             FileLog.e("tmessages", e);
             return false;
@@ -1579,15 +1907,23 @@ public boolean resumeAudio(MessageObject messageObject) {
     }
 
     public boolean isPlayingAudio(MessageObject messageObject) {
-        return !(audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId());
+        return !(audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && (playingMessageObject.getId() != messageObject.getId() || downloadingCurrentMessage));
     }
 
     public boolean isAudioPaused() {
-        return isPaused;
+        return isPaused || downloadingCurrentMessage;
+    }
+
+    public boolean isDownloadingCurrentMessage() {
+        return downloadingCurrentMessage;
     }
 
     public void startRecording(final long dialog_id, final MessageObject reply_to_msg) {
-        clenupPlayer(true);
+        boolean paused = false;
+        if (playingMessageObject != null && isPlayingAudio(playingMessageObject) && !isAudioPaused()) {
+            paused = true;
+            pauseAudio(playingMessageObject);
+        }
 
         try {
             Vibrator v = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
@@ -1596,13 +1932,14 @@ public void startRecording(final long dialog_id, final MessageObject reply_to_ms
             FileLog.e("tmessages", e);
         }
 
-        recordQueue.postRunnable(new Runnable() {
+        recordQueue.postRunnable(recordStartRunnable = new Runnable() {
             @Override
             public void run() {
                 if (audioRecorder != null) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            recordStartRunnable = null;
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
                         }
                     });
@@ -1624,6 +1961,7 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
+                                recordStartRunnable = null;
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
                             }
                         });
@@ -1653,6 +1991,7 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            recordStartRunnable = null;
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
                         }
                     });
@@ -1663,11 +2002,12 @@ public void run() {
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
+                        recordStartRunnable = null;
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStarted);
                     }
                 });
             }
-        });
+        }, paused ? 500 : 0);
     }
 
     private void stopRecordingInternal(final boolean send) {
@@ -1709,6 +2049,9 @@ public void run() {
     }
 
     public void stopRecording(final boolean send) {
+        if (recordStartRunnable != null) {
+            recordQueue.cancelRunnable(recordStartRunnable);
+        }
         recordQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -1790,10 +2133,15 @@ public void run() {
                             destFile = AndroidUtilities.generateVideoPath();
                         } else if (type == 2) {
                             File f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
+                            f.mkdir();
+                            destFile = new File(f, name);
+                        } else if (type == 3) {
+                            File f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
+                            f.mkdirs();
                             destFile = new File(f, name);
                         }
 
-                        if(!destFile.exists()) {
+                        if (!destFile.exists()) {
                             destFile.createNewFile();
                         }
                         FileChannel source = null;
@@ -1835,7 +2183,7 @@ public void run() {
                             }
                         }
 
-                        if (result && (type == 0 || type == 1)) {
+                        if (result && (type == 0 || type == 1 || type == 3)) {
                             AndroidUtilities.addMediaToGallery(Uri.fromFile(destFile));
                         }
                     } catch (Exception e) {
@@ -1940,7 +2288,7 @@ public static boolean isWebp(Uri uri) {
                 String str = new String(header);
                 if (str != null) {
                     str = str.toLowerCase();
-                    if (str.startsWith("riff") && str.endsWith("webp")){
+                    if (str.startsWith("riff") && str.endsWith("webp")) {
                         return true;
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 48aaa2651..7569f9cb0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -313,6 +313,8 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     } else {
                         messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
                     }
+                } else if (isMusic()) {
+                    messageText = LocaleController.getString("AttachMusic", R.string.AttachMusic);
                 } else {
                     String name = FileLoader.getDocumentFileName(message.media.document);
                     if (name != null && name.length() > 0) {
@@ -327,7 +329,9 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         } else {
             messageText = message.message;
         }
-        messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+        if (generateLayout) {
+            messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
+        }
 
         if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded_old2) {
             if (isMediaEmpty()) {
@@ -355,6 +359,9 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         type = 8;
                     } else if (message.media.document.mime_type.equals("image/webp") && isSticker()) {
                         type = 13;
+                    } else if (isMusic()) {
+                        type = 14;
+                        contentType = 8;
                     } else {
                         type = 9;
                     }
@@ -600,7 +607,7 @@ public void generateCaption() {
             return;
         }
         if (messageOwner.media != null && messageOwner.media.caption != null && messageOwner.media.caption.length() > 0) {
-            caption = Emoji.replaceEmoji(messageOwner.media.caption, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+            caption = Emoji.replaceEmoji(messageOwner.media.caption, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
             if (containsUrls(caption)) {
                 try {
                     Linkify.addLinks((Spannable) caption, Linkify.WEB_URLS);
@@ -950,6 +957,17 @@ public static boolean isStickerMessage(TLRPC.Message message) {
         return false;
     }
 
+    public static boolean isMusicMessage(TLRPC.Message message) {
+        if (message.media != null && message.media.document != null) {
+            for (TLRPC.DocumentAttribute attribute : message.media.document.attributes) {
+                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
     public static TLRPC.InputStickerSet getInputStickerSet(TLRPC.Message message) {
         if (message.media != null && message.media.document != null) {
             for (TLRPC.DocumentAttribute attribute : message.media.document.attributes) {
@@ -986,6 +1004,8 @@ public int getApproximateHeight() {
             return AndroidUtilities.dp(100);
         } else if (type == 4) {
             return AndroidUtilities.dp(114);
+        } else if (type == 14) {
+            return AndroidUtilities.dp(78);
         } else if (type == 13) {
             float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
             float maxWidth;
@@ -1061,6 +1081,39 @@ public boolean isSticker() {
         return isStickerMessage(messageOwner);
     }
 
+    public boolean isMusic() {
+        return isMusicMessage(messageOwner);
+    }
+
+    public String getMusicTitle() {
+        for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
+            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                String title = attribute.title;
+                if (title == null || title.length() == 0) {
+                    title = FileLoader.getDocumentFileName(messageOwner.media.document);
+                    if (title == null || title.length() == 0) {
+                        title = LocaleController.getString("AudioUnknownTitle", R.string.AudioUnknownTitle);
+                    }
+                }
+                return title;
+            }
+        }
+        return "";
+    }
+
+    public String getMusicAuthor() {
+        for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
+            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                String performer = attribute.performer;
+                if (performer == null || performer.length() == 0) {
+                    performer = LocaleController.getString("AudioUnknownArtist", R.string.AudioUnknownArtist);
+                }
+                return performer;
+            }
+        }
+        return "";
+    }
+
     public TLRPC.InputStickerSet getInputStickerSet() {
         return getInputStickerSet(messageOwner);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 156d4b38c..6bcaf3359 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -3900,7 +3900,7 @@ public void run() {
         }
         if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty() || !markAsReadEncrypted.isEmpty()) {
             if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty()) {
-                MessagesStorage.getInstance().updateDialogsWithReadedMessages(markAsReadMessagesInbox, true);
+                MessagesStorage.getInstance().updateDialogsWithReadMessages(markAsReadMessagesInbox, true);
             }
             MessagesStorage.getInstance().markMessagesAsRead(markAsReadMessagesInbox, markAsReadMessagesOutbox, markAsReadEncrypted, true);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index b5030041b..ad37757fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -1149,7 +1149,7 @@ public void run() {
         });
     }
 
-    private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> messages, final HashMap<Integer, Integer> inbox) {
+    private void updateDialogsWithReadMessagesInternal(final ArrayList<Integer> messages, final HashMap<Integer, Integer> inbox) {
         try {
             HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
             StringBuilder dialogsToReload = new StringBuilder();
@@ -1184,14 +1184,13 @@ private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> me
                     SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mid <= %d AND read_state IN(0,2) AND out = 0", entry.getKey(), entry.getValue()));
                     if (cursor.next()) {
                         int count = cursor.intValue(0);
-                        if (count == 0) {
-                            continue;
-                        }
-                        dialogsToUpdate.put((long) entry.getKey(), count);
-                        if (dialogsToReload.length() != 0) {
-                            dialogsToReload.append(",");
+                        if (count != 0) {
+                            dialogsToUpdate.put((long) entry.getKey(), count);
+                            if (dialogsToReload.length() != 0) {
+                                dialogsToReload.append(",");
+                            }
+                            dialogsToReload.append(entry.getKey());
                         }
-                        dialogsToReload.append(entry.getKey());
                     }
                     cursor.dispose();
                 }
@@ -1231,7 +1230,7 @@ private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> me
         }
     }
 
-    public void updateDialogsWithReadedMessages(final HashMap<Integer, Integer> inbox, boolean useQueue) {
+    public void updateDialogsWithReadMessages(final HashMap<Integer, Integer> inbox, boolean useQueue) {
         if (inbox.isEmpty()) {
             return;
         }
@@ -1239,11 +1238,11 @@ public void updateDialogsWithReadedMessages(final HashMap<Integer, Integer> inbo
             storageQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    updateDialogsWithReadedMessagesInternal(null, inbox);
+                    updateDialogsWithReadMessagesInternal(null, inbox);
                 }
             });
         } else {
-            updateDialogsWithReadedMessagesInternal(null, inbox);
+            updateDialogsWithReadMessagesInternal(null, inbox);
         }
     }
 
@@ -3473,7 +3472,7 @@ public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, mids);
                             }
                         });
-                        MessagesStorage.getInstance().updateDialogsWithReadedMessagesInternal(mids, null);
+                        MessagesStorage.getInstance().updateDialogsWithReadMessagesInternal(mids, null);
                         MessagesStorage.getInstance().markMessagesAsDeletedInternal(mids);
                         MessagesStorage.getInstance().updateDialogsWithDeletedMessagesInternal(mids);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerReceiver.java
new file mode 100644
index 000000000..eb129930e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerReceiver.java
@@ -0,0 +1,69 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.android;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.view.KeyEvent;
+
+public class MusicPlayerReceiver extends BroadcastReceiver {
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        if (intent.getAction().equals(Intent.ACTION_MEDIA_BUTTON)) {
+            if (intent.getExtras() == null) {
+                return;
+            }
+            KeyEvent keyEvent = (KeyEvent) intent.getExtras().get(Intent.EXTRA_KEY_EVENT);
+            if (keyEvent == null) {
+                return;
+            }
+            if (keyEvent.getAction() != KeyEvent.ACTION_DOWN)
+                return;
+
+            switch (keyEvent.getKeyCode()) {
+                case KeyEvent.KEYCODE_HEADSETHOOK:
+                case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
+                    if (MediaController.getInstance().isAudioPaused()) {
+                        MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+                    } else {
+                        MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+                    }
+                    break;
+                case KeyEvent.KEYCODE_MEDIA_PLAY:
+                    MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+                    break;
+                case KeyEvent.KEYCODE_MEDIA_PAUSE:
+                    MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+                    break;
+                case KeyEvent.KEYCODE_MEDIA_STOP:
+                    break;
+                case KeyEvent.KEYCODE_MEDIA_NEXT:
+                    MediaController.getInstance().playNextMessage();
+                    break;
+                case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
+                    MediaController.getInstance().playPreviousMessage();
+                    break;
+            }
+        } else {
+            if (intent.getAction().equals(MusicPlayerService.NOTIFY_PLAY)) {
+                MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+            } else if (intent.getAction().equals(MusicPlayerService.NOTIFY_PAUSE) || intent.getAction().equals(android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY)) {
+                MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+            } else if (intent.getAction().equals(MusicPlayerService.NOTIFY_NEXT)) {
+                MediaController.getInstance().playNextMessage();
+            } else if (intent.getAction().equals(MusicPlayerService.NOTIFY_CLOSE)) {
+                MediaController.getInstance().clenupPlayer(true, true);
+            } else if (intent.getAction().equals(MusicPlayerService.NOTIFY_PREVIOUS)) {
+                MediaController.getInstance().playPreviousMessage();
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerService.java b/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerService.java
new file mode 100644
index 000000000..6201d7e08
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/MusicPlayerService.java
@@ -0,0 +1,295 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.android;
+
+import android.annotation.SuppressLint;
+import android.app.Notification;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.media.AudioManager;
+import android.media.MediaMetadataRetriever;
+import android.media.RemoteControlClient;
+import android.os.Build;
+import android.os.IBinder;
+import android.support.v4.app.NotificationCompat;
+import android.telephony.PhoneStateListener;
+import android.telephony.TelephonyManager;
+import android.view.View;
+import android.widget.RemoteViews;
+
+import org.telegram.android.audioinfo.AudioInfo;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.ui.LaunchActivity;
+
+public class MusicPlayerService extends Service implements AudioManager.OnAudioFocusChangeListener, NotificationCenter.NotificationCenterDelegate {
+
+    public static final String NOTIFY_PREVIOUS = "org.telegram.android.musicplayer.previous";
+    public static final String NOTIFY_CLOSE = "org.telegram.android.musicplayer.close";
+    public static final String NOTIFY_PAUSE = "org.telegram.android.musicplayer.pause";
+    public static final String NOTIFY_PLAY = "org.telegram.android.musicplayer.play";
+    public static final String NOTIFY_NEXT = "org.telegram.android.musicplayer.next";
+
+    private RemoteControlClient remoteControlClient;
+    private AudioManager audioManager;
+    private static boolean ignoreAudioFocus = false;
+    private PhoneStateListener phoneStateListener;
+
+    private static boolean supportBigNotifications = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
+    private static boolean supportLockScreenControls = Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    @Override
+    public void onCreate() {
+        audioManager = (AudioManager) getSystemService(AUDIO_SERVICE);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioPlayStateChanged);
+        try {
+            phoneStateListener = new PhoneStateListener() {
+                @Override
+                public void onCallStateChanged(int state, String incomingNumber) {
+                    if (state == TelephonyManager.CALL_STATE_RINGING) {
+                        if (MediaController.getInstance().isPlayingAudio(MediaController.getInstance().getPlayingMessageObject()) && !MediaController.getInstance().isAudioPaused()) {
+                            MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+                        }
+                    } else if (state == TelephonyManager.CALL_STATE_IDLE) {
+
+                    } else if (state == TelephonyManager.CALL_STATE_OFFHOOK) {
+
+                    }
+                    super.onCallStateChanged(state, incomingNumber);
+                }
+            };
+            TelephonyManager mgr = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
+            if (mgr != null) {
+                mgr.listen(phoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        super.onCreate();
+    }
+
+    @SuppressLint("NewApi")
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        try {
+            MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+            if (messageObject == null) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        stopSelf();
+                    }
+                });
+                return START_STICKY;
+            }
+            if (supportLockScreenControls) {
+                ComponentName remoteComponentName = new ComponentName(getApplicationContext(), MusicPlayerReceiver.class.getName());
+                try {
+                    if (remoteControlClient == null) {
+                        audioManager.registerMediaButtonEventReceiver(remoteComponentName);
+                        Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);
+                        mediaButtonIntent.setComponent(remoteComponentName);
+                        PendingIntent mediaPendingIntent = PendingIntent.getBroadcast(this, 0, mediaButtonIntent, 0);
+                        remoteControlClient = new RemoteControlClient(mediaPendingIntent);
+                        audioManager.registerRemoteControlClient(remoteControlClient);
+                    }
+                    remoteControlClient.setTransportControlFlags(RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE |
+                            RemoteControlClient.FLAG_KEY_MEDIA_STOP | RemoteControlClient.FLAG_KEY_MEDIA_PREVIOUS | RemoteControlClient.FLAG_KEY_MEDIA_NEXT);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            createNotification(messageObject);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return START_STICKY;
+    }
+
+    @SuppressLint("NewApi")
+    private void createNotification(MessageObject messageObject) {
+        String songName = messageObject.getMusicTitle();
+        String authorName = messageObject.getMusicAuthor();
+        AudioInfo audioInfo = MediaController.getInstance().getAudioInfo();
+
+        RemoteViews simpleContentView = new RemoteViews(getApplicationContext().getPackageName(), R.layout.player_small_notification);
+        RemoteViews expandedView = null;
+        if (supportBigNotifications) {
+            expandedView = new RemoteViews(getApplicationContext().getPackageName(), R.layout.player_big_notification);
+        }
+
+        Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+        intent.setAction("com.tmessages.openplayer");
+        intent.setFlags(32768);
+        PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, intent, 0);
+
+        Notification notification = new NotificationCompat.Builder(getApplicationContext())
+                .setSmallIcon(R.drawable.player)
+                .setContentIntent(contentIntent)
+                .setContentTitle(songName).build();
+
+        notification.contentView = simpleContentView;
+        if (supportBigNotifications) {
+            notification.bigContentView = expandedView;
+        }
+
+        setListeners(simpleContentView);
+        if (supportBigNotifications) {
+            setListeners(expandedView);
+        }
+
+        Bitmap albumArt = audioInfo != null ? audioInfo.getSmallCover() : null;
+        if (albumArt != null) {
+            notification.contentView.setImageViewBitmap(R.id.player_album_art, albumArt);
+            if (supportBigNotifications) {
+                notification.bigContentView.setImageViewBitmap(R.id.player_album_art, albumArt);
+            }
+        } else {
+            notification.contentView.setImageViewResource(R.id.player_album_art, R.drawable.nocover_small);
+            if (supportBigNotifications) {
+                notification.bigContentView.setImageViewResource(R.id.player_album_art, R.drawable.nocover_big);
+            }
+        }
+        if (MediaController.getInstance().isDownloadingCurrentMessage()) {
+            notification.contentView.setViewVisibility(R.id.player_pause, View.GONE);
+            notification.contentView.setViewVisibility(R.id.player_play, View.GONE);
+            notification.contentView.setViewVisibility(R.id.player_next, View.GONE);
+            notification.contentView.setViewVisibility(R.id.player_previous, View.GONE);
+            notification.contentView.setViewVisibility(R.id.player_progress_bar, View.VISIBLE);
+            if (supportBigNotifications) {
+                notification.bigContentView.setViewVisibility(R.id.player_pause, View.GONE);
+                notification.bigContentView.setViewVisibility(R.id.player_play, View.GONE);
+                notification.bigContentView.setViewVisibility(R.id.player_next, View.GONE);
+                notification.bigContentView.setViewVisibility(R.id.player_previous, View.GONE);
+                notification.bigContentView.setViewVisibility(R.id.player_progress_bar, View.VISIBLE);
+            }
+        } else {
+            notification.contentView.setViewVisibility(R.id.player_progress_bar, View.GONE);
+            notification.contentView.setViewVisibility(R.id.player_next, View.VISIBLE);
+            notification.contentView.setViewVisibility(R.id.player_previous, View.VISIBLE);
+            if (supportBigNotifications) {
+                notification.bigContentView.setViewVisibility(R.id.player_next, View.VISIBLE);
+                notification.bigContentView.setViewVisibility(R.id.player_previous, View.VISIBLE);
+                notification.bigContentView.setViewVisibility(R.id.player_progress_bar, View.GONE);
+            }
+
+            if (MediaController.getInstance().isAudioPaused()) {
+                notification.contentView.setViewVisibility(R.id.player_pause, View.GONE);
+                notification.contentView.setViewVisibility(R.id.player_play, View.VISIBLE);
+                if (supportBigNotifications) {
+                    notification.bigContentView.setViewVisibility(R.id.player_pause, View.GONE);
+                    notification.bigContentView.setViewVisibility(R.id.player_play, View.VISIBLE);
+                }
+            } else {
+                notification.contentView.setViewVisibility(R.id.player_pause, View.VISIBLE);
+                notification.contentView.setViewVisibility(R.id.player_play, View.GONE);
+                if (supportBigNotifications) {
+                    notification.bigContentView.setViewVisibility(R.id.player_pause, View.VISIBLE);
+                    notification.bigContentView.setViewVisibility(R.id.player_play, View.GONE);
+                }
+            }
+        }
+
+        notification.contentView.setTextViewText(R.id.player_song_name, songName);
+        notification.contentView.setTextViewText(R.id.player_author_name, authorName);
+        if (supportBigNotifications) {
+            notification.bigContentView.setTextViewText(R.id.player_song_name, songName);
+            notification.bigContentView.setTextViewText(R.id.player_author_name, authorName);
+        }
+        notification.flags |= Notification.FLAG_ONGOING_EVENT;
+        startForeground(5, notification);
+
+        if (remoteControlClient != null) {
+            RemoteControlClient.MetadataEditor metadataEditor = remoteControlClient.editMetadata(true);
+            metadataEditor.putString(MediaMetadataRetriever.METADATA_KEY_ARTIST, authorName);
+            metadataEditor.putString(MediaMetadataRetriever.METADATA_KEY_TITLE, songName);
+            if (audioInfo != null && audioInfo.getCover() != null) {
+                metadataEditor.putBitmap(RemoteControlClient.MetadataEditor.BITMAP_KEY_ARTWORK, audioInfo.getCover());
+            }
+            metadataEditor.apply();
+            audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
+        }
+    }
+
+    public void setListeners(RemoteViews view) {
+        PendingIntent pendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, new Intent(NOTIFY_PREVIOUS), PendingIntent.FLAG_UPDATE_CURRENT);
+        view.setOnClickPendingIntent(R.id.player_previous, pendingIntent);
+        pendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, new Intent(NOTIFY_CLOSE), PendingIntent.FLAG_UPDATE_CURRENT);
+        view.setOnClickPendingIntent(R.id.player_close, pendingIntent);
+        pendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, new Intent(NOTIFY_PAUSE), PendingIntent.FLAG_UPDATE_CURRENT);
+        view.setOnClickPendingIntent(R.id.player_pause, pendingIntent);
+        pendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, new Intent(NOTIFY_NEXT), PendingIntent.FLAG_UPDATE_CURRENT);
+        view.setOnClickPendingIntent(R.id.player_next, pendingIntent);
+        pendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, new Intent(NOTIFY_PLAY), PendingIntent.FLAG_UPDATE_CURRENT);
+        view.setOnClickPendingIntent(R.id.player_play, pendingIntent);
+    }
+
+    @SuppressLint("NewApi")
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (remoteControlClient != null) {
+            RemoteControlClient.MetadataEditor metadataEditor = remoteControlClient.editMetadata(true);
+            metadataEditor.clear();
+            metadataEditor.apply();
+            audioManager.unregisterRemoteControlClient(remoteControlClient);
+        }
+        try {
+            TelephonyManager mgr = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
+            if (mgr != null) {
+                mgr.listen(phoneStateListener, PhoneStateListener.LISTEN_NONE);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioPlayStateChanged);
+    }
+
+    @Override
+    public void onAudioFocusChange(int focusChange) {
+        if (ignoreAudioFocus) {
+            ignoreAudioFocus = false;
+            return;
+        }
+        if (focusChange == AudioManager.AUDIOFOCUS_LOSS) {
+            if (MediaController.getInstance().isPlayingAudio(MediaController.getInstance().getPlayingMessageObject()) && !MediaController.getInstance().isAudioPaused()) {
+                MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+            }
+        } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
+            //MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.audioPlayStateChanged) {
+            MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+            if (messageObject != null) {
+                createNotification(messageObject);
+            } else {
+                stopSelf();
+            }
+        }
+    }
+
+    public static void setIgnoreAudioFocus() {
+        ignoreAudioFocus = true;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index ffaf321a6..474d0c770 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -64,6 +64,7 @@
     public static final int botInfoDidLoaded = totalEvents++;
     public static final int botKeyboardDidLoaded = totalEvents++;
     public static final int chatSearchResultsAvailable = totalEvents++;
+    public static final int musicDidLoaded = totalEvents++;
 
     public static final int httpFileDidLoaded = totalEvents++;
     public static final int httpFileDidFailedLoad = totalEvents++;
@@ -89,6 +90,7 @@
 
     public static final int audioProgressDidChanged = totalEvents++;
     public static final int audioDidReset = totalEvents++;
+    public static final int audioPlayStateChanged = totalEvents++;
     public static final int recordProgressChanged = totalEvents++;
     public static final int recordStarted = totalEvents++;
     public static final int recordStartError = totalEvents++;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 3283523ab..5983c3855 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -31,8 +31,6 @@
 import android.support.v4.app.NotificationManagerCompat;
 import android.support.v4.app.RemoteInput;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLog;
@@ -602,11 +600,8 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             }
 
             String lastMessage = null;
-            String lastMessageFull = null;
             if (pushMessages.size() == 1) {
-                String message = lastMessageFull = getStringForMessage(pushMessages.get(0), false);
-                //lastMessage = getStringForMessage(pushMessages.get(0), true);
-                lastMessage = lastMessageFull;
+                String message = lastMessage = getStringForMessage(pushMessages.get(0), false);
                 if (message == null) {
                     return;
                 }
@@ -630,8 +625,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                         continue;
                     }
                     if (i == 0) {
-                        lastMessageFull = message;
-                        lastMessage = lastMessageFull;
+                        lastMessage = message;
                     }
                     if (pushDialogs.size() == 1) {
                         if (replace) {
@@ -692,9 +686,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
 
             showExtraNotifications(mBuilder, notifyAboutLast);
             notificationManager.notify(1, mBuilder.build());
-            if (preferences.getBoolean("EnablePebbleNotifications", false)) {
-                sendAlertToPebble(lastMessageFull);
-            }
 
             scheduleNotificationRepeat();
         } catch (Exception e) {
@@ -897,26 +888,6 @@ private void dismissNotification() {
         }
     }
 
-    private void sendAlertToPebble(String message) {
-        try {
-            final Intent i = new Intent("com.getpebble.action.SEND_NOTIFICATION");
-
-            final HashMap<String, String> data = new HashMap<>();
-            data.put("title", LocaleController.getString("AppName", R.string.AppName));
-            data.put("body", message);
-            final JSONObject jsonData = new JSONObject(data);
-            final String notificationData = new JSONArray().put(jsonData).toString();
-
-            i.putExtra("messageType", "PEBBLE_ALERT");
-            i.putExtra("sender", LocaleController.formatString("AppName", R.string.AppName));
-            i.putExtra("notificationData", notificationData);
-
-            ApplicationLoader.applicationContext.sendBroadcast(i);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
     public void processReadMessages(HashMap<Integer, Integer> inbox, long dialog_id, int max_date, int max_id, boolean isPopup) {
         int oldCount = popupMessages.size();
         if (inbox != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index 060d21799..230497db8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -19,6 +19,7 @@
 import android.webkit.MimeTypeMap;
 import android.widget.Toast;
 
+import org.telegram.android.audioinfo.AudioInfo;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -557,6 +558,9 @@ public void sendMessage(ArrayList<MessageObject> messages, long peer) {
 
         for (int a = 0; a < messages.size(); a++) {
             MessageObject msgObj = messages.get(a);
+            if (msgObj.getId() <= 0) {
+                continue;
+            }
 
             final TLRPC.Message newMsg = new TLRPC.TL_message();
             newMsg.flags |= TLRPC.MESSAGE_FLAG_FWD;
@@ -1858,6 +1862,7 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
             return false;
         }
         MimeTypeMap myMime = MimeTypeMap.getSingleton();
+        TLRPC.TL_documentAttributeAudio attributeAudio = null;
         if (uri != null) {
             String extension = null;
             if (mime != null) {
@@ -1885,8 +1890,31 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
         if (idx != -1) {
             ext = path.substring(idx + 1);
         }
+        if (ext.toLowerCase().equals("mp3") || ext.toLowerCase().equals("m4a")) {
+            AudioInfo audioInfo = AudioInfo.getAudioInfo(f);
+            if (audioInfo != null && audioInfo.getDuration() != 0) {
+                if (isEncrypted) {
+                    attributeAudio = new TLRPC.TL_documentAttributeAudio_old();
+                } else {
+                    attributeAudio = new TLRPC.TL_documentAttributeAudio();
+                }
+                attributeAudio.duration = (int) (audioInfo.getDuration() / 1000);
+                attributeAudio.title = audioInfo.getTitle();
+                attributeAudio.performer = audioInfo.getArtist();
+                if (attributeAudio.title == null) {
+                    attributeAudio.title = "";
+                }
+                if (attributeAudio.performer == null) {
+                    attributeAudio.performer = "";
+                }
+            }
+        }
         if (originalPath != null) {
-            originalPath += "" + f.length();
+            if (attributeAudio != null) {
+                originalPath += "audio" + f.length();
+            } else {
+                originalPath += "" + f.length();
+            }
         }
 
         TLRPC.TL_document document = null;
@@ -1905,6 +1933,9 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
             document.attributes.add(fileName);
             document.size = (int) f.length();
             document.dc_id = 0;
+            if (attributeAudio != null) {
+                document.attributes.add(attributeAudio);
+            }
             if (ext.length() != 0) {
                 if (ext.toLowerCase().equals("webp")) {
                     document.mime_type = "image/webp";
@@ -1990,6 +2021,56 @@ public static void prepareSendingDocument(String path, String originalPath, Uri
         prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id, reply_to_msg);
     }
 
+    public static void prepareSendingAudioDocuments(final ArrayList<MessageObject> messageObjects, final long dialog_id, final MessageObject reply_to_msg) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                int size = messageObjects.size();
+                for (int a = 0; a < size; a++) {
+                    final MessageObject messageObject = messageObjects.get(a);
+                    String originalPath = messageObject.messageOwner.attachPath;
+                    final File f = new File(originalPath);
+
+                    boolean isEncrypted = (int) dialog_id == 0;
+
+
+                    if (originalPath != null) {
+                        originalPath += "audio" + f.length();
+                    }
+
+                    TLRPC.TL_document document = null;
+                    if (!isEncrypted) {
+                        document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 1 : 4);
+                    }
+                    if (document == null) {
+                        document = (TLRPC.TL_document) messageObject.messageOwner.media.document;
+                    }
+
+                    if (isEncrypted) {
+                        for (int b = 0; b < document.attributes.size(); b++) {
+                            if (document.attributes.get(b) instanceof TLRPC.TL_documentAttributeAudio) {
+                                TLRPC.TL_documentAttributeAudio_old old = new TLRPC.TL_documentAttributeAudio_old();
+                                old.duration = document.attributes.get(b).duration;
+                                document.attributes.remove(b);
+                                document.attributes.add(old);
+                                break;
+                            }
+                        }
+                    }
+
+                    final String originalPathFinal = originalPath;
+                    final TLRPC.TL_document documentFinal = document;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, messageObject.messageOwner.attachPath, dialog_id, reply_to_msg);
+                        }
+                    });
+                }
+            }
+        }).start();
+    }
+
     public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id, final MessageObject reply_to_msg) {
         if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/UserObject.java b/TMessagesProj/src/main/java/org/telegram/android/UserObject.java
index 1fe80d039..7a0ad4ff7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/UserObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/UserObject.java
@@ -8,6 +8,7 @@
 
 package org.telegram.android;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 
@@ -29,7 +30,8 @@ public static String getUserName(TLRPC.User user) {
         if (user == null || isDeleted(user)) {
             return LocaleController.getString("HiddenName", R.string.HiddenName);
         }
-        return ContactsController.formatName(user.first_name, user.last_name);
+        String name = ContactsController.formatName(user.first_name, user.last_name);
+        return name.length() != 0 || user.phone == null || user.phone.length() == 0 ? name : PhoneFormat.getInstance().format("+" + user.phone);
     }
 
     public static String getFirstName(TLRPC.User user) {
@@ -40,6 +42,6 @@ public static String getFirstName(TLRPC.User user) {
         if (name == null || name.length() == 0) {
             name = user.last_name;
         }
-        return name != null && name.length() > 0 ? name : "DELETED";
+        return name != null && name.length() > 0 ? name : LocaleController.getString("HiddenName", R.string.HiddenName);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/AudioInfo.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/AudioInfo.java
new file mode 100755
index 000000000..19e16415f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/AudioInfo.java
@@ -0,0 +1,154 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo;
+
+import android.graphics.Bitmap;
+
+import org.telegram.android.audioinfo.m4a.M4AInfo;
+import org.telegram.android.audioinfo.mp3.MP3Info;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.RandomAccessFile;
+
+public abstract class AudioInfo {
+	protected String brand;			// brand, e.g. "M4A", "ID3", ...
+	protected String version;		// version, e.g. "0", "2.3.0", ... 
+
+	protected long duration;		// track duration (milliseconds)
+
+	protected String title;			// track title
+	protected String artist;		// track artist
+	protected String albumArtist;	// album artist
+	protected String album;			// album title
+	protected short year;			// year...
+	protected String genre;			// genre name
+	protected String comment;		// comment...
+	protected short track;			// track number
+	protected short tracks;			// number of tracks
+	protected short disc;			// disc number
+	protected short discs;			// number of discs
+	protected String copyright;		// copyright notice
+	protected String composer;		// composer name
+	protected String grouping;		// track grouping
+	protected boolean compilation;	// compilation flag
+	protected String lyrics;		// song lyrics
+	protected Bitmap cover;			// cover image data
+    protected Bitmap smallCover;	// cover image data
+
+	public String getBrand() {
+		return brand;
+	}
+
+	public String getVersion() {
+		return version;
+	}
+
+	public long getDuration() {
+		return duration;
+	}
+
+	public String getTitle() {
+		return title;
+	}
+
+	public String getArtist() {
+		return artist;
+	}
+
+	public String getAlbumArtist() {
+		return albumArtist;
+	}
+
+	public String getAlbum() {
+		return album;
+	}
+
+	public short getYear() {
+		return year;
+	}
+
+	public String getGenre() {
+		return genre;
+	}
+
+	public String getComment() {
+		return comment;
+	}
+
+	public short getTrack() {
+		return track;
+	}
+
+	public short getTracks() {
+		return tracks;
+	}
+
+	public short getDisc() {
+		return disc;
+	}
+
+	public short getDiscs() {
+		return discs;
+	}
+
+	public String getCopyright() {
+		return copyright;
+	}
+
+	public String getComposer() {
+		return composer;
+	}
+
+	public String getGrouping() {
+		return grouping;
+	}
+
+	public boolean isCompilation() {
+		return compilation;
+	}
+
+	public String getLyrics() {
+		return lyrics;
+	}
+
+	public Bitmap getCover() {
+		return cover;
+	}
+
+    public Bitmap getSmallCover() {
+        return smallCover;
+    }
+
+	public static AudioInfo getAudioInfo(File file) {
+        try {
+            byte header[] = new byte[12];
+            RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r");
+            randomAccessFile.readFully(header, 0, 8);
+            randomAccessFile.close();
+            InputStream input = new BufferedInputStream(new FileInputStream(file));
+            if (header[4] == 'f' && header[5] == 't' && header[6] == 'y' && header[7] == 'p') {
+                return new M4AInfo(input);
+            } else {
+                return new MP3Info(input, file.length());
+            }
+        } catch (Exception e) {
+            return null;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/M4AInfo.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/M4AInfo.java
new file mode 100755
index 000000000..82d3f6458
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/M4AInfo.java
@@ -0,0 +1,325 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.m4a;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+
+import org.telegram.android.audioinfo.AudioInfo;
+import org.telegram.android.audioinfo.mp3.ID3v1Genre;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.math.BigDecimal;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class M4AInfo extends AudioInfo {
+	static final Logger LOGGER = Logger.getLogger(M4AInfo.class.getName());
+
+	private static final String ASCII = "ISO8859_1";
+	private static final String UTF_8 = "UTF-8";
+
+	private BigDecimal volume;        // normal = 1.0
+	private BigDecimal speed;        // normal = 1.0
+
+	private short tempo;
+	private byte rating;            // none = 0, clean = 2, explicit = 4
+
+	private final Level debugLevel;
+
+	public M4AInfo(InputStream input) throws IOException {
+		this(input, Level.FINEST);
+	}
+
+	public M4AInfo(InputStream input, Level debugLevel) throws IOException {
+		this.debugLevel = debugLevel;
+		MP4Input mp4 = new MP4Input(input);
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, mp4.toString());
+		}
+		ftyp(mp4.nextChild("ftyp"));
+		moov(mp4.nextChildUpTo("moov"));
+	}
+
+	void ftyp(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		brand = atom.readString(4, ASCII).trim();
+		if (brand.matches("M4V|MP4|mp42|isom")) { // experimental file types
+			LOGGER.warning(atom.getPath() + ": brand=" + brand + " (experimental)");
+		} else if (!brand.matches("M4A|M4P")) {
+			LOGGER.warning(atom.getPath() + ": brand=" + brand + " (expected M4A or M4P)");
+		}
+		version = String.valueOf(atom.readInt());
+	}
+
+	void moov(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		while (atom.hasMoreChildren()) {
+			MP4Atom child = atom.nextChild();
+			switch (child.getType()) {
+				case "mvhd":
+					mvhd(child);
+					break;
+				case "trak":
+					trak(child);
+					break;
+				case "udta":
+					udta(child);
+					break;
+				default:
+					break;
+			}
+		}
+	}
+
+	void mvhd(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		byte version = atom.readByte();
+		atom.skip(3); // flags
+		atom.skip(version == 1 ? 16 : 8); // created/modified date
+		int scale = atom.readInt();
+		long units = version == 1 ? atom.readLong() : atom.readInt();
+		if (duration == 0) {
+			duration = 1000 * units / scale;
+		} else if (LOGGER.isLoggable(debugLevel) && Math.abs(duration - 1000 * units / scale) > 2) {
+			LOGGER.log(debugLevel, "mvhd: duration " + duration + " -> " + (1000 * units / scale));
+		}
+		speed = atom.readIntegerFixedPoint();
+		volume = atom.readShortFixedPoint();
+	}
+
+	void trak(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		mdia(atom.nextChildUpTo("mdia"));
+	}
+
+	void mdia(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		mdhd(atom.nextChild("mdhd"));
+	}
+
+	void mdhd(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		byte version = atom.readByte();
+		atom.skip(3);
+		atom.skip(version == 1 ? 16 : 8); // created/modified date
+		int sampleRate = atom.readInt();
+		long samples = version == 1 ? atom.readLong() : atom.readInt();
+		if (duration == 0) {
+			duration = 1000 * samples / sampleRate;
+		} else if (LOGGER.isLoggable(debugLevel) && Math.abs(duration - 1000 * samples / sampleRate) > 2) {
+			LOGGER.log(debugLevel, "mdhd: duration " + duration + " -> " + (1000 * samples / sampleRate));
+		}
+	}
+
+	void udta(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		while (atom.hasMoreChildren()) {
+			MP4Atom child = atom.nextChild();
+			if ("meta".equals(child.getType())) {
+				meta(child);
+				break;
+			}
+		}
+	}
+
+	void meta(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		atom.skip(4); // version/flags
+		while (atom.hasMoreChildren()) {
+			MP4Atom child = atom.nextChild();
+			if ("ilst".equals(child.getType())) {
+				ilst(child);
+				break;
+			}
+		}
+	}
+
+	void ilst(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		while (atom.hasMoreChildren()) {
+			MP4Atom child = atom.nextChild();
+			if (LOGGER.isLoggable(debugLevel)) {
+				LOGGER.log(debugLevel, child.toString());
+			}
+			if (child.getRemaining() == 0) {
+				if (LOGGER.isLoggable(debugLevel)) {
+					LOGGER.log(debugLevel, child.getPath() + ": contains no value");
+				}
+				continue;
+			}
+			data(child.nextChildUpTo("data"));
+		}
+	}
+
+	void data(MP4Atom atom) throws IOException {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, atom.toString());
+		}
+		atom.skip(4); // version & flags
+		atom.skip(4); // reserved
+		switch (atom.getParent().getType()) {
+			case "©alb":
+				album = atom.readString(UTF_8);
+				break;
+			case "aART":
+				albumArtist = atom.readString(UTF_8);
+				break;
+			case "©ART":
+				artist = atom.readString(UTF_8);
+				break;
+			case "©cmt":
+				comment = atom.readString(UTF_8);
+				break;
+			case "©com":
+			case "©wrt":
+				if (composer == null || composer.trim().length() == 0) {
+					composer = atom.readString(UTF_8);
+				}
+				break;
+			case "covr":
+                try {
+                    byte[] bytes = atom.readBytes();
+                    BitmapFactory.Options opts = new BitmapFactory.Options();
+                    opts.inJustDecodeBounds = true;
+                    opts.inSampleSize = 1;
+                    BitmapFactory.decodeByteArray(bytes, 0, bytes.length, opts);
+                    if (opts.outWidth > 800 || opts.outHeight > 800) {
+                        int size = Math.max(opts.outWidth, opts.outHeight);
+                        while (size > 800) {
+                            opts.inSampleSize *= 2;
+                            size /= 2;
+                        }
+                    }
+                    opts.inJustDecodeBounds = false;
+                    cover = BitmapFactory.decodeByteArray(bytes, 0, bytes.length, opts);
+                    if (cover != null) {
+                        float scale = Math.max(cover.getWidth(), cover.getHeight()) / 120.0f;
+                        if (scale > 0) {
+                            smallCover = Bitmap.createScaledBitmap(cover, (int) (cover.getWidth() / scale), (int) (cover.getHeight() / scale), true);
+                        } else {
+                            smallCover = cover;
+                        }
+                        if (smallCover == null) {
+                            smallCover = cover;
+                        }
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+				break;
+			case "cpil":
+				compilation = atom.readBoolean();
+				break;
+			case "cprt":
+			case "©cpy":
+				if (copyright == null || copyright.trim().length() == 0) {
+					copyright = atom.readString(UTF_8);
+				}
+				break;
+			case "©day":
+				String day = atom.readString(UTF_8).trim();
+				if (day.length() >= 4) {
+					try {
+						year = Short.valueOf(day.substring(0, 4));
+					} catch (NumberFormatException e) {
+						// ignore
+					}
+				}
+				break;
+			case "disk":
+				atom.skip(2); // padding?
+				disc = atom.readShort();
+				discs = atom.readShort();
+				break;
+			case "gnre":
+				if (genre == null || genre.trim().length() == 0) {
+					if (atom.getRemaining() == 2) { // id3v1 genre?
+						int index = atom.readShort() - 1;
+						ID3v1Genre id3v1Genre = ID3v1Genre.getGenre(index);
+						if (id3v1Genre != null) {
+							genre = id3v1Genre.getDescription();
+						}
+					} else {
+						genre = atom.readString(UTF_8);
+					}
+				}
+				break;
+			case "©gen":
+				if (genre == null || genre.trim().length() == 0) {
+					genre = atom.readString(UTF_8);
+				}
+				break;
+			case "©grp":
+				grouping = atom.readString(UTF_8);
+				break;
+			case "©lyr":
+				lyrics = atom.readString(UTF_8);
+				break;
+			case "©nam":
+				title = atom.readString(UTF_8);
+				break;
+			case "rtng":
+				rating = atom.readByte();
+				break;
+			case "tmpo":
+				tempo = atom.readShort();
+				break;
+			case "trkn":
+				atom.skip(2); // padding?
+				track = atom.readShort();
+				tracks = atom.readShort();
+				break;
+			default:
+				break;
+		}
+	}
+
+	public short getTempo() {
+		return tempo;
+	}
+
+	public byte getRating() {
+		return rating;
+	}
+
+	public BigDecimal getSpeed() {
+		return speed;
+	}
+
+	public BigDecimal getVolume() {
+		return volume;
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Atom.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Atom.java
new file mode 100755
index 000000000..7b99fe812
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Atom.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.m4a;
+
+import org.telegram.android.audioinfo.util.RangeInputStream;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.math.BigDecimal;
+
+public class MP4Atom extends MP4Box<RangeInputStream> {
+	public MP4Atom(RangeInputStream input, MP4Box<?> parent, String type) {
+		super(input, parent, type);
+	}
+
+	public long getLength() {
+		return getInput().getPosition() + getInput().getRemainingLength();
+	}
+
+	public long getOffset() {
+		return getParent().getPosition() - getPosition();
+	}
+
+	public long getRemaining() {
+		return getInput().getRemainingLength();
+	}
+
+	public boolean hasMoreChildren() {
+		return (getChild() != null ? getChild().getRemaining() : 0) < getRemaining();
+	}
+
+	public MP4Atom nextChildUpTo(String expectedTypeExpression) throws IOException {
+		while (getRemaining() > 0) {
+			MP4Atom atom = nextChild();
+			if (atom.getType().matches(expectedTypeExpression)) {
+				return atom;
+			}
+		}
+		throw new IOException("atom type mismatch, not found: " + expectedTypeExpression);
+	}
+
+	public boolean readBoolean() throws IOException {
+		return data.readBoolean();
+	}
+
+	public byte readByte() throws IOException {
+		return data.readByte();
+	}
+
+	public short readShort() throws IOException {
+		return data.readShort();
+	}
+
+	public int readInt() throws IOException {
+		return data.readInt();
+	}
+
+	public long readLong() throws IOException {
+		return data.readLong();
+	}
+
+	public byte[] readBytes(int len) throws IOException {
+		byte[] bytes = new byte[len];
+		data.readFully(bytes);
+		return bytes;
+	}
+
+	public byte[] readBytes() throws IOException {
+		return readBytes((int) getRemaining());
+	}
+
+	public BigDecimal readShortFixedPoint() throws IOException {
+		int integer = data.readByte();
+		int decimal = data.readUnsignedByte();
+		return new BigDecimal(String.valueOf(integer) + "" + String.valueOf(decimal));
+	}
+
+	public BigDecimal readIntegerFixedPoint() throws IOException {
+		int integer = data.readShort();
+		int decimal = data.readUnsignedShort();
+		return new BigDecimal(String.valueOf(integer) + "" + String.valueOf(decimal));
+	}
+
+	public String readString(int len, String enc) throws IOException {
+		String s = new String(readBytes(len), enc);
+		int end = s.indexOf(0);
+		return end < 0 ? s : s.substring(0, end);
+	}
+
+	public String readString(String enc) throws IOException {
+		return readString((int) getRemaining(), enc);
+	}
+
+	public void skip(int len) throws IOException {
+		int total = 0;
+		while (total < len) {
+			int current = data.skipBytes(len - total);
+			if (current > 0) {
+				total += current;
+			} else {
+				throw new EOFException();
+			}
+		}
+	}
+
+	public void skip() throws IOException {
+		while (getRemaining() > 0) {
+			if (getInput().skip(getRemaining()) == 0) {
+				throw new EOFException("Cannot skip atom");
+			}
+		}
+	}
+
+	private StringBuffer appendPath(StringBuffer s, MP4Box<?> box) {
+		if (box.getParent() != null) {
+			appendPath(s, box.getParent());
+			s.append("/");
+		}
+		return s.append(box.getType());
+	}
+
+	public String getPath() {
+		return appendPath(new StringBuffer(), this).toString();
+	}
+
+	public String toString() {
+		StringBuffer s = new StringBuffer();
+		appendPath(s, this);
+		s.append("[off=");
+		s.append(getOffset());
+		s.append(",pos=");
+		s.append(getPosition());
+		s.append(",len=");
+		s.append(getLength());
+		s.append("]");
+		return s.toString();
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Box.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Box.java
new file mode 100755
index 000000000..66e8050d8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Box.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.m4a;
+
+import org.telegram.android.audioinfo.util.PositionInputStream;
+import org.telegram.android.audioinfo.util.RangeInputStream;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.IOException;
+
+public class MP4Box<I extends PositionInputStream> {
+	protected static final String ASCII = "ISO8859_1";
+
+	private final I input;
+	private final MP4Box<?> parent;
+	private final String type;
+
+	protected final DataInput data;
+
+	private MP4Atom child;
+
+	public MP4Box(I input, MP4Box<?> parent, String type) {
+		this.input = input;
+		this.parent = parent;
+		this.type = type;
+		this.data = new DataInputStream(input);
+	}
+
+	public String getType() {
+		return type;
+	}
+
+	public MP4Box<?> getParent() {
+		return parent;
+	}
+
+	public long getPosition() {
+		return input.getPosition();
+	}
+
+	public I getInput() {
+		return input;
+	}
+
+	protected MP4Atom getChild() {
+		return child;
+	}
+
+	public MP4Atom nextChild() throws IOException {
+		if (child != null) {
+			child.skip();
+		}
+		int atomLength = data.readInt();
+		byte[] typeBytes = new byte[4];
+		data.readFully(typeBytes);
+		String atomType = new String(typeBytes, ASCII);
+		RangeInputStream atomInput;
+		if (atomLength == 1) { // extended length
+			atomInput = new RangeInputStream(input, 16, data.readLong() - 16);
+		} else {
+			atomInput = new RangeInputStream(input, 8, atomLength - 8);
+		}
+		return child = new MP4Atom(atomInput, this, atomType);
+	}
+
+	public MP4Atom nextChild(String expectedTypeExpression) throws IOException {
+		MP4Atom atom = nextChild();
+		if (atom.getType().matches(expectedTypeExpression)) {
+			return atom;
+		}
+		throw new IOException("atom type mismatch, expected " + expectedTypeExpression + ", got " + atom.getType());
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Input.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Input.java
new file mode 100755
index 000000000..caacb2510
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/m4a/MP4Input.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.m4a;
+
+import org.telegram.android.audioinfo.util.PositionInputStream;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public final class MP4Input extends MP4Box<PositionInputStream> {
+
+	public MP4Input(InputStream delegate) {
+		super(new PositionInputStream(delegate), null, "");
+	}
+
+	public MP4Atom nextChildUpTo(String expectedTypeExpression) throws IOException {
+		while (true) {
+			MP4Atom atom = nextChild();
+			if (atom.getType().matches(expectedTypeExpression)) {
+				return atom;
+			}
+		}
+	}
+
+	public String toString() {
+		return "mp4[pos=" + getPosition() + "]";
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Genre.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Genre.java
new file mode 100755
index 000000000..c43a85e62
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Genre.java
@@ -0,0 +1,171 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+public enum ID3v1Genre {
+	/*
+	 * The following genres is defined in ID3v1 (0-79)
+	 */
+	Blues("Blues"),
+	ClassicRock("Classic Rock"),
+	Country("Country"),
+	Dance("Dance"),
+	Disco("Disco"),
+	Funk("Funk"),
+	Grunge("Grunge"),
+	HipHop("Hip-Hop"),
+	Jazz("Jazz"),
+	Metal("Metal"),
+	NewAge("New Age"),
+	Oldies("Oldies"),
+	Other("Other"),
+	Pop("Pop"),
+	RnB("R&B"),
+	Rap("Rap"),
+	Reggae("Reggae"),
+	Rock("Rock"),
+	Techno("Techno"),
+	Industrial("Industrial"),
+	Alternative("Alternative"),
+	Ska("Ska"),
+	DeathMetal("Death Metal"),
+	Pranks("Pranks"),
+	Soundtrack("Soundtrack"),
+	EuroTechno("Euro-Techno"),
+	Ambient("Ambient"),
+	TripHop("Trip-Hop"),
+	Vocal("Vocal"),
+	JazzFunk("Jazz+Funk"),
+	Fusion("Fusion"),
+	Trance("Trance"),
+	Classical("Classical"),
+	Instrumental("Instrumental"),
+	Acid("Acid"),
+	House("House"),
+	Game("Game"),
+	SoundClip("Sound Clip"),
+	Gospel("Gospel"),
+	Noise("Noise"),
+	AlternRock("AlternRock"),
+	Bass("Bass"),
+	Soul("Soul"),
+	Punk("Punk"),
+	Space("Space"),
+	Meditative("Meditative"),
+	InstrumentalPop("Instrumental Pop"),
+	InstrumentalRock("Instrumental Rock"),
+	Ethnic("Ethnic"),
+	Gothic("Gothic"),
+	Darkwave("Darkwave"),
+	TechnoIndustrial("Techno-Industrial"),
+	Electronic("Electronic"),
+	PopFolk("Pop-Folk"),
+	Eurodance("Eurodance"),
+	Dream("Dream"),
+	SouthernRock("Southern Rock"),
+	Comedy("Comedy"),
+	Cult("Cult"),
+	Gangsta("Gangsta"),
+	Top40("Top 40"),
+	ChristianRap("Christian Rap"),
+	PopFunk("Pop/Funk"),
+	Jungle("Jungle"),
+	NativeAmerican("Native American"),
+	Cabaret("Cabaret"),
+	NewWave("New Wave"),
+	Psychadelic("Psychadelic"),
+	Rave("Rave"),
+	Showtunes("Showtunes"),
+	Trailer("Trailer"),
+	LoFi("Lo-Fi"),
+	Tribal("Tribal"),
+	AcidPunk("Acid Punk"),
+	AcidJazz("Acid Jazz"),
+	Polka("Polka"),
+	Retro("Retro"),
+	Musical("Musical"),
+	RockAndRoll("Rock & Roll"),
+	HardRock("Hard Rock"),
+
+	/*
+	 * The following genres are Winamp extensions (80-125)
+	 */
+	Folk("Folk"),
+	FolkRock("Folk-Rock"),
+	NationalFolk("National Folk"),
+	Swing("Swing"),
+	FastFusion("Fast Fusion"),
+	Bebop("Bebop"),
+	Latin("Latin"),
+	Revival("Revival"),
+	Celtic("Celtic"),
+	Bluegrass("Bluegrass"),
+	Avantgarde("Avantgarde"),
+	GothicRock("Gothic Rock"),
+	ProgressiveRock("Progressive Rock"),
+	PsychedelicRock("Psychedelic Rock"),
+	SymphonicRock("Symphonic Rock"),
+	SlowRock("Slow Rock"),
+	BigBand("Big Band"),
+	Chorus("Chorus"),
+	EasyListening("Easy Listening"),
+	Acoustic("Acoustic"),
+	Humour("Humour"),
+	Speech("Speech"),
+	Chanson("Chanson"),
+	Opera("Opera"),
+	ChamberMusic("Chamber Music"),
+	Sonata("Sonata"),
+	Symphony("Symphony"),
+	BootyBass("Booty Bass"),
+	Primus("Primus"),
+	PornGroove("Porn Groove"),
+	Satire("Satire"),
+	SlowJam("Slow Jam"),
+	Club("Club"),
+	Tango("Tango"),
+	Samba("Samba"),
+	Folklore("Folklore"),
+	Ballad("Ballad"),
+	PowerBallad("Power Ballad"),
+	RhytmicSoul("Rhythmic Soul"),
+	Freestyle("Freestyle"),
+	Duet("Duet"),
+	PunkRock("Punk Rock"),
+	DrumSolo("Drum Solo"),
+	ACapella("A capella"),
+	EuroHouse("Euro-House"),
+	DanceHall("Dance Hall");
+
+	public static ID3v1Genre getGenre(int id) {
+		ID3v1Genre[] values = values();
+		return id >= 0 && id < values.length ? values[id] : null;
+	}
+
+	private final String description;
+
+	ID3v1Genre(String description) {
+		this.description = description;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public int getId() {
+		return ordinal();
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Info.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Info.java
new file mode 100755
index 000000000..1ca33999a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v1Info.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.AudioInfo;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class ID3v1Info extends AudioInfo {
+    public static boolean isID3v1StartPosition(InputStream input) throws IOException {
+        input.mark(3);
+        try {
+            return input.read() == 'T' && input.read() == 'A' && input.read() == 'G';
+        } finally {
+            input.reset();
+        }
+    }
+
+    public ID3v1Info(InputStream input) throws IOException {
+        if (isID3v1StartPosition(input)) {
+            brand = "ID3";
+            version = "1.0";
+            byte[] bytes = readBytes(input, 128);
+            title = extractString(bytes, 3, 30);
+            artist = extractString(bytes, 33, 30);
+            album = extractString(bytes, 63, 30);
+            try {
+                year = Short.parseShort(extractString(bytes, 93, 4));
+            } catch (NumberFormatException e) {
+                year = 0;
+            }
+            comment = extractString(bytes, 97, 30);
+            ID3v1Genre id3v1Genre = ID3v1Genre.getGenre(bytes[127]);
+            if (id3v1Genre != null) {
+                genre = id3v1Genre.getDescription();
+            }
+			
+			/*
+			 * ID3v1.1
+			 */
+            if (bytes[125] == 0 && bytes[126] != 0) {
+                version = "1.1";
+                track = (short) (bytes[126] & 0xFF);
+            }
+        }
+    }
+
+    byte[] readBytes(InputStream input, int len) throws IOException {
+        int total = 0;
+        byte[] bytes = new byte[len];
+        while (total < len) {
+            int current = input.read(bytes, total, len - total);
+            if (current > 0) {
+                total += current;
+            } else {
+                throw new EOFException();
+            }
+        }
+        return bytes;
+    }
+
+    String extractString(byte[] bytes, int offset, int length) {
+        try {
+            String text = new String(bytes, offset, length, "ISO-8859-1");
+            int zeroIndex = text.indexOf(0);
+            return zeroIndex < 0 ? text : text.substring(0, zeroIndex);
+        } catch (Exception e) {
+            return "";
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2DataInput.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2DataInput.java
new file mode 100755
index 000000000..2a4ba062e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2DataInput.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class ID3v2DataInput {
+	private final InputStream input;
+
+	public ID3v2DataInput(InputStream in) {
+		this.input = in;
+	}
+
+	public final void readFully(byte b[], int off, int len) throws IOException {
+		int total = 0;
+		while (total < len) {
+			int current = input.read(b, off + total, len - total);
+			if (current > 0) {
+				total += current;
+			} else {
+				throw new EOFException();
+			}
+		}
+	}
+
+	public byte[] readFully(int len) throws IOException {
+		byte[] bytes = new byte[len];
+		readFully(bytes, 0, len);
+		return bytes;
+	}
+
+	public void skipFully(long len) throws IOException {
+		long total = 0;
+		while (total < len) {
+			long current = input.skip(len - total);
+			if (current > 0) {
+				total += current;
+			} else {
+				throw new EOFException();
+			}
+		}
+	}
+
+	public byte readByte() throws IOException {
+		int b = input.read();
+		if (b < 0) {
+			throw new EOFException();
+		}
+		return (byte) b;
+	}
+
+	public int readInt() throws IOException {
+		return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16) | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF);
+	}
+
+	public int readSyncsafeInt() throws IOException {
+		return ((readByte() & 0x7F) << 21) | ((readByte() & 0x7F) << 14) | ((readByte() & 0x7F) << 7) | (readByte() & 0x7F);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Encoding.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Encoding.java
new file mode 100755
index 000000000..4d9d5c696
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Encoding.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import java.nio.charset.Charset;
+
+public enum ID3v2Encoding {
+	ISO_8859_1(Charset.forName("ISO-8859-1"), 1),
+	UTF_16(Charset.forName("UTF-16"), 2),
+	UTF_16BE(Charset.forName("UTF-16BE"), 2),
+	UTF_8(Charset.forName("UTF-8"), 1);
+
+	private final Charset charset;
+	private final int zeroBytes;
+
+	ID3v2Encoding(Charset charset, int zeroBytes) {
+		this.charset = charset;
+		this.zeroBytes = zeroBytes;
+	}
+
+	public Charset getCharset() {
+		return charset;
+	}
+
+	public int getZeroBytes() {
+		return zeroBytes;
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Exception.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Exception.java
new file mode 100755
index 000000000..1321f1477
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Exception.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+public class ID3v2Exception extends Exception {
+	private static final long serialVersionUID = 1L;
+
+	public ID3v2Exception(String message) {
+		super(message);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameBody.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameBody.java
new file mode 100755
index 000000000..c1187911f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameBody.java
@@ -0,0 +1,155 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.util.RangeInputStream;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public class ID3v2FrameBody {
+
+    static final class Buffer {
+        byte[] bytes;
+
+        Buffer(int initialLength) {
+            bytes = new byte[initialLength];
+        }
+
+        byte[] bytes(int minLength) {
+            if (minLength > bytes.length) {
+                int length = bytes.length * 2;
+                while (minLength > length) {
+                    length *= 2;
+                }
+                bytes = new byte[length];
+            }
+            return bytes;
+        }
+    }
+
+    static final ThreadLocal<Buffer> textBuffer = new ThreadLocal<Buffer>() {
+        @Override
+        protected Buffer initialValue() {
+            return new Buffer(4096);
+        }
+    };
+
+    private final RangeInputStream input;
+    private final ID3v2TagHeader tagHeader;
+    private final ID3v2FrameHeader frameHeader;
+    private final ID3v2DataInput data;
+
+    ID3v2FrameBody(InputStream delegate, long position, int dataLength, ID3v2TagHeader tagHeader, ID3v2FrameHeader frameHeader) throws IOException {
+        this.input = new RangeInputStream(delegate, position, dataLength);
+        this.data = new ID3v2DataInput(input);
+        this.tagHeader = tagHeader;
+        this.frameHeader = frameHeader;
+    }
+
+    public ID3v2DataInput getData() {
+        return data;
+    }
+
+    public long getPosition() {
+        return input.getPosition();
+    }
+
+    public long getRemainingLength() {
+        return input.getRemainingLength();
+    }
+
+    public ID3v2TagHeader getTagHeader() {
+        return tagHeader;
+    }
+
+    public ID3v2FrameHeader getFrameHeader() {
+        return frameHeader;
+    }
+
+    private String extractString(byte[] bytes, int offset, int length, ID3v2Encoding encoding, boolean searchZeros) {
+        if (searchZeros) {
+            int zeros = 0;
+            for (int i = 0; i < length; i++) {
+                // UTF-16LE may have a zero byte as second byte of a 2-byte character -> skip first zero at odd index
+                if (bytes[offset + i] == 0 && (encoding != ID3v2Encoding.UTF_16 || zeros != 0 || (offset + i) % 2 == 0)) {
+                    if (++zeros == encoding.getZeroBytes()) {
+                        length = i + 1 - encoding.getZeroBytes();
+                        break;
+                    }
+                } else {
+                    zeros = 0;
+                }
+            }
+        }
+        try {
+            String string = new String(bytes, offset, length, encoding.getCharset().name());
+            if (string.length() > 0 && string.charAt(0) == '\uFEFF') { // remove BOM
+                string = string.substring(1);
+            }
+            return string;
+        } catch (Exception e) {
+            return "";
+        }
+    }
+
+    public String readZeroTerminatedString(int maxLength, ID3v2Encoding encoding) throws IOException, ID3v2Exception {
+        int zeros = 0;
+        int length = Math.min(maxLength, (int) getRemainingLength());
+        byte[] bytes = textBuffer.get().bytes(length);
+        for (int i = 0; i < length; i++) {
+            // UTF-16LE may have a zero byte as second byte of a 2-byte character -> skip first zero at odd index
+            if ((bytes[i] = data.readByte()) == 0 && (encoding != ID3v2Encoding.UTF_16 || zeros != 0 || i % 2 == 0)) {
+                if (++zeros == encoding.getZeroBytes()) {
+                    return extractString(bytes, 0, i + 1 - encoding.getZeroBytes(), encoding, false);
+                }
+            } else {
+                zeros = 0;
+            }
+        }
+        throw new ID3v2Exception("Could not read zero-termiated string");
+    }
+
+    public String readFixedLengthString(int length, ID3v2Encoding encoding) throws IOException, ID3v2Exception {
+        if (length > getRemainingLength()) {
+            throw new ID3v2Exception("Could not read fixed-length string of length: " + length);
+        }
+        byte[] bytes = textBuffer.get().bytes(length);
+        data.readFully(bytes, 0, length);
+        return extractString(bytes, 0, length, encoding, true);
+    }
+
+    public ID3v2Encoding readEncoding() throws IOException, ID3v2Exception {
+        byte value = data.readByte();
+        switch (value) {
+            case 0:
+                return ID3v2Encoding.ISO_8859_1;
+            case 1:
+                return ID3v2Encoding.UTF_16;
+            case 2:
+                return ID3v2Encoding.UTF_16BE;
+            case 3:
+                return ID3v2Encoding.UTF_8;
+            default:
+                break;
+        }
+        throw new ID3v2Exception("Invalid encoding: " + value);
+    }
+
+    public String toString() {
+        return "id3v2frame[pos=" + getPosition() + ", " + getRemainingLength() + " left]";
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameHeader.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameHeader.java
new file mode 100755
index 000000000..7d25ff403
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2FrameHeader.java
@@ -0,0 +1,165 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import java.io.IOException;
+
+public class ID3v2FrameHeader {
+	private String frameId;
+	private int headerSize;
+	private int bodySize;
+	private boolean unsynchronization;
+	private boolean compression;
+	private boolean encryption;
+	private int dataLengthIndicator;
+
+	public ID3v2FrameHeader(ID3v2TagBody input) throws IOException, ID3v2Exception {
+		long startPosition = input.getPosition();
+
+		ID3v2DataInput data = input.getData();
+		
+		/*
+		 * Frame Id
+		 */
+		if (input.getTagHeader().getVersion() == 2) { // $xx xx xx (three characters)
+			frameId = new String(data.readFully(3), "ISO-8859-1");
+		} else { // $xx xx xx xx (four characters)
+			frameId = new String(data.readFully(4), "ISO-8859-1");
+		}
+		
+		/*
+		 * Size 
+		 */
+		if (input.getTagHeader().getVersion() == 2) { // $xx xx xx
+			bodySize = ((data.readByte() & 0xFF) << 16) | ((data.readByte() & 0xFF) << 8) | (data.readByte() & 0xFF);
+		} else if (input.getTagHeader().getVersion() == 3) { // $xx xx xx xx
+			bodySize = data.readInt();
+		} else { // 4 * %0xxxxxxx (sync-save integer)
+			bodySize = data.readSyncsafeInt();
+		}
+		
+		/*
+		 * Flags
+		 */
+		if (input.getTagHeader().getVersion() > 2) { // $xx xx
+			data.readByte(); // status flags
+			byte formatFlags = data.readByte();
+			int compressionMask;
+			int encryptionMask;
+			int groupingIdentityMask;
+			int unsynchronizationMask = 0x00;
+			int dataLengthIndicatorMask = 0x00;
+			if (input.getTagHeader().getVersion() == 3) { // %(compression)(encryption)(groupingIdentity)00000
+				compressionMask = 0x80;
+				encryptionMask = 0x40;
+				groupingIdentityMask = 0x20;
+			} else { // %0(groupingIdentity)00(compression)(encryption)(unsynchronization)(dataLengthIndicator)
+				groupingIdentityMask = 0x40;
+				compressionMask = 0x08;
+				encryptionMask = 0x04;
+				unsynchronizationMask = 0x02;
+				dataLengthIndicatorMask = 0x01;
+			}
+			compression = (formatFlags & compressionMask) != 0;
+			unsynchronization = (formatFlags & unsynchronizationMask) != 0;
+			encryption = (formatFlags & encryptionMask) != 0;
+
+			/*
+			 * Read flag attachments in the order of the flags (version dependent).
+			 */
+			if (input.getTagHeader().getVersion() == 3) {
+				if (compression) {
+					dataLengthIndicator = data.readInt();
+					bodySize -= 4;
+				}
+				if (encryption) {
+					data.readByte(); // just skip
+					bodySize -= 1;
+				}
+				if ((formatFlags & groupingIdentityMask) != 0) {
+					data.readByte(); // just skip
+					bodySize -= 1;
+				}
+			} else {
+				if ((formatFlags & groupingIdentityMask) != 0) {
+					data.readByte(); // just skip
+					bodySize -= 1;
+				}
+				if (encryption) {
+					data.readByte(); // just skip
+					bodySize -= 1;
+				}
+				if ((formatFlags & dataLengthIndicatorMask) != 0) {
+					dataLengthIndicator = data.readSyncsafeInt();
+					bodySize -= 4;
+				}
+			}
+		}
+
+		headerSize = (int) (input.getPosition() - startPosition);
+	}
+
+	public String getFrameId() {
+		return frameId;
+	}
+
+	public int getHeaderSize() {
+		return headerSize;
+	}
+
+	public int getBodySize() {
+		return bodySize;
+	}
+
+	public boolean isCompression() {
+		return compression;
+	}
+
+	public boolean isEncryption() {
+		return encryption;
+	}
+
+	public boolean isUnsynchronization() {
+		return unsynchronization;
+	}
+
+	public int getDataLengthIndicator() {
+		return dataLengthIndicator;
+	}
+
+	public boolean isValid() {
+		for (int i = 0; i < frameId.length(); i++) {
+			if ((frameId.charAt(i) < 'A' || frameId.charAt(i) > 'Z') && (frameId.charAt(i) < '0' || frameId.charAt(i) > '9')) {
+				return false;
+			}
+		}
+		return bodySize > 0;
+	}
+
+	public boolean isPadding() {
+		for (int i = 0; i < frameId.length(); i++) {
+			if (frameId.charAt(0) != 0) {
+				return false;
+			}
+		}
+		return bodySize == 0;
+	}
+
+	@Override
+	public String toString() {
+		return String.format("%s[id=%s, bodysize=%d]", getClass().getSimpleName(), frameId, bodySize);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Info.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Info.java
new file mode 100755
index 000000000..a7490e1ac
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2Info.java
@@ -0,0 +1,376 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+
+import org.telegram.android.audioinfo.AudioInfo;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ID3v2Info extends AudioInfo {
+	static final Logger LOGGER = Logger.getLogger(ID3v2Info.class.getName());
+
+	static class AttachedPicture {
+		static final byte TYPE_OTHER = 0x00;
+		static final byte TYPE_COVER_FRONT = 0x03;
+
+		final byte type;
+		final String description;
+		final String imageType;
+		final byte[] imageData;
+
+		public AttachedPicture(byte type, String description, String imageType, byte[] imageData) {
+			this.type = type;
+			this.description = description;
+			this.imageType = imageType;
+			this.imageData = imageData;
+		}
+	}
+
+	static class CommentOrUnsynchronizedLyrics {
+		final String language;
+		final String description;
+		final String text;
+
+		public CommentOrUnsynchronizedLyrics(String language, String description, String text) {
+			this.language = language;
+			this.description = description;
+			this.text = text;
+		}
+	}
+
+	public static boolean isID3v2StartPosition(InputStream input) throws IOException {
+		input.mark(3);
+		try {
+			return input.read() == 'I' && input.read() == 'D' && input.read() == '3';
+		} finally {
+			input.reset();
+		}
+	}
+
+	private final Level debugLevel;
+
+	private byte coverPictureType;
+
+	public ID3v2Info(InputStream input) throws IOException, ID3v2Exception {
+		this(input, Level.FINEST);
+	}
+
+	public ID3v2Info(InputStream input, Level debugLevel) throws IOException, ID3v2Exception {
+		this.debugLevel = debugLevel;
+		if (isID3v2StartPosition(input)) {
+			ID3v2TagHeader tagHeader = new ID3v2TagHeader(input);
+			brand = "ID3";
+			version = String.format("2.%d.%d", tagHeader.getVersion(), tagHeader.getRevision());
+			ID3v2TagBody tagBody = tagHeader.tagBody(input);
+			try {
+				while (tagBody.getRemainingLength() > 10) { // TODO > tag.minimumFrameSize()
+					ID3v2FrameHeader frameHeader = new ID3v2FrameHeader(tagBody);
+					if (frameHeader.isPadding()) { // we ran into padding
+						break;
+					}
+					if (frameHeader.getBodySize() > tagBody.getRemainingLength()) { // something wrong...
+						if (LOGGER.isLoggable(debugLevel)) {
+							LOGGER.log(debugLevel, "ID3 frame claims to extend frames area");
+						}
+						break;
+					}
+					if (frameHeader.isValid() && !frameHeader.isEncryption()) {
+						ID3v2FrameBody frameBody = tagBody.frameBody(frameHeader);
+						try {
+							parseFrame(frameBody);
+						} catch (ID3v2Exception e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, String.format("ID3 exception occured in frame %s: %s", frameHeader.getFrameId(), e.getMessage()));
+							}
+						} finally {
+							frameBody.getData().skipFully(frameBody.getRemainingLength());
+						}
+					} else {
+						tagBody.getData().skipFully(frameHeader.getBodySize());
+					}
+				}
+			} catch (ID3v2Exception e) {
+				if (LOGGER.isLoggable(debugLevel)) {
+					LOGGER.log(debugLevel, "ID3 exception occured: " + e.getMessage());
+				}
+			}
+			tagBody.getData().skipFully(tagBody.getRemainingLength());
+			if (tagHeader.getFooterSize() > 0) {
+				input.skip(tagHeader.getFooterSize());
+			}
+		}
+	}
+
+	void parseFrame(ID3v2FrameBody frame) throws IOException, ID3v2Exception {
+		if (LOGGER.isLoggable(debugLevel)) {
+			LOGGER.log(debugLevel, "Parsing frame: " + frame.getFrameHeader().getFrameId());
+		}
+		switch (frame.getFrameHeader().getFrameId()) {
+			case "PIC":
+			case "APIC": // cover: prefer TYPE_COVER_FRONT, then TYPE_OTHER, then anything else
+				if (cover == null || coverPictureType != AttachedPicture.TYPE_COVER_FRONT) {
+					AttachedPicture picture = parseAttachedPictureFrame(frame);
+					if (cover == null || picture.type == AttachedPicture.TYPE_COVER_FRONT || picture.type == AttachedPicture.TYPE_OTHER) {
+						try {
+							byte[] bytes = picture.imageData;
+                            BitmapFactory.Options opts = new BitmapFactory.Options();
+                            opts.inJustDecodeBounds = true;
+                            opts.inSampleSize = 1;
+                            BitmapFactory.decodeByteArray(bytes, 0, bytes.length, opts);
+                            if (opts.outWidth > 800 || opts.outHeight > 800) {
+                                int size = Math.max(opts.outWidth, opts.outHeight);
+                                while (size > 800) {
+                                    opts.inSampleSize *= 2;
+                                    size /= 2;
+                                }
+                            }
+                            opts.inJustDecodeBounds = false;
+                            cover = BitmapFactory.decodeByteArray(bytes, 0, bytes.length, opts);
+                            if (cover != null) {
+                                float scale = Math.max(cover.getWidth(), cover.getHeight()) / 120.0f;
+                                if (scale > 0) {
+                                    smallCover = Bitmap.createScaledBitmap(cover, (int) (cover.getWidth() / scale), (int) (cover.getHeight() / scale), true);
+                                } else {
+                                    smallCover = cover;
+                                }
+                                if (smallCover == null) {
+                                    smallCover = cover;
+                                }
+                            }
+						} catch (Exception e) {
+							e.printStackTrace();
+						}
+						coverPictureType = picture.type;
+					}
+				}
+				break;
+			case "COM":
+			case "COMM":
+				CommentOrUnsynchronizedLyrics comm = parseCommentOrUnsynchronizedLyricsFrame(frame);
+				if (comment == null || comm.description == null || "".equals(comm.description)) { // prefer "default" comment (without description)
+					comment = comm.text;
+				}
+				break;
+			case "TAL":
+			case "TALB":
+				album = parseTextFrame(frame);
+				break;
+			case "TCP":
+			case "TCMP":
+				compilation = "1".equals(parseTextFrame(frame));
+				break;
+			case "TCM":
+			case "TCOM":
+				composer = parseTextFrame(frame);
+				break;
+			case "TCO":
+			case "TCON":
+				String tcon = parseTextFrame(frame);
+				if (tcon.length() > 0) {
+					genre = tcon;
+					try {
+						ID3v1Genre id3v1Genre = null;
+						if (tcon.charAt(0) == '(') {
+							int pos = tcon.indexOf(')');
+							if (pos > 1) { // (123)
+								id3v1Genre = ID3v1Genre.getGenre(Integer.parseInt(tcon.substring(1, pos)));
+								if (id3v1Genre == null && tcon.length() > pos + 1) { // (789)Special
+									genre = tcon.substring(pos + 1);
+								}
+							}
+						} else { // 123
+							id3v1Genre = ID3v1Genre.getGenre(Integer.parseInt(tcon));
+						}
+						if (id3v1Genre != null) {
+							genre = id3v1Genre.getDescription();
+						}
+					} catch (NumberFormatException e) {
+						// ignore
+					}
+				}
+				break;
+			case "TCR":
+			case "TCOP":
+				copyright = parseTextFrame(frame);
+				break;
+			case "TDRC": // v2.4, replaces TYER
+				String tdrc = parseTextFrame(frame);
+				if (tdrc.length() >= 4) {
+					try {
+						year = Short.valueOf(tdrc.substring(0, 4));
+					} catch (NumberFormatException e) {
+						if (LOGGER.isLoggable(debugLevel)) {
+							LOGGER.log(debugLevel, "Could not parse year from: " + tdrc);
+						}
+					}
+				}
+				break;
+			case "TLE":
+			case "TLEN":
+				String tlen = parseTextFrame(frame);
+				try {
+					duration = Long.valueOf(tlen);
+				} catch (NumberFormatException e) {
+					if (LOGGER.isLoggable(debugLevel)) {
+						LOGGER.log(debugLevel, "Could not parse track duration: " + tlen);
+					}
+				}
+				break;
+			case "TP1":
+			case "TPE1":
+				artist = parseTextFrame(frame);
+				break;
+			case "TP2":
+			case "TPE2":
+				albumArtist = parseTextFrame(frame);
+				break;
+			case "TPA":
+			case "TPOS":
+				String tpos = parseTextFrame(frame);
+				if (tpos.length() > 0) {
+					int index = tpos.indexOf('/');
+					if (index < 0) {
+						try {
+							disc = Short.valueOf(tpos);
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse disc number: " + tpos);
+							}
+						}
+					} else {
+						try {
+							disc = Short.valueOf(tpos.substring(0, index));
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse disc number: " + tpos);
+							}
+						}
+						try {
+							discs = Short.valueOf(tpos.substring(index + 1));
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse number of discs: " + tpos);
+							}
+						}
+					}
+				}
+				break;
+			case "TRK":
+			case "TRCK":
+				String trck = parseTextFrame(frame);
+				if (trck.length() > 0) {
+					int index = trck.indexOf('/');
+					if (index < 0) {
+						try {
+							track = Short.valueOf(trck);
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse track number: " + trck);
+							}
+						}
+					} else {
+						try {
+							track = Short.valueOf(trck.substring(0, index));
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse track number: " + trck);
+							}
+						}
+						try {
+							tracks = Short.valueOf(trck.substring(index + 1));
+						} catch (NumberFormatException e) {
+							if (LOGGER.isLoggable(debugLevel)) {
+								LOGGER.log(debugLevel, "Could not parse number of tracks: " + trck);
+							}
+						}
+					}
+				}
+				break;
+			case "TT1":
+			case "TIT1":
+				grouping = parseTextFrame(frame);
+				break;
+			case "TT2":
+			case "TIT2":
+				title = parseTextFrame(frame);
+				break;
+			case "TYE":
+			case "TYER":
+				String tyer = parseTextFrame(frame);
+				if (tyer.length() > 0) {
+					try {
+						year = Short.valueOf(tyer);
+					} catch (NumberFormatException e) {
+						if (LOGGER.isLoggable(debugLevel)) {
+							LOGGER.log(debugLevel, "Could not parse year: " + tyer);
+						}
+					}
+				}
+				break;
+			case "ULT":
+			case "USLT":
+				if (lyrics == null) {
+					lyrics = parseCommentOrUnsynchronizedLyricsFrame(frame).text;
+				}
+				break;
+			default:
+				break;
+		}
+	}
+
+	String parseTextFrame(ID3v2FrameBody frame) throws IOException, ID3v2Exception {
+		ID3v2Encoding encoding = frame.readEncoding();
+		return frame.readFixedLengthString((int) frame.getRemainingLength(), encoding);
+	}
+
+	CommentOrUnsynchronizedLyrics parseCommentOrUnsynchronizedLyricsFrame(ID3v2FrameBody data) throws IOException, ID3v2Exception {
+		ID3v2Encoding encoding = data.readEncoding();
+		String language = data.readFixedLengthString(3, ID3v2Encoding.ISO_8859_1);
+		String description = data.readZeroTerminatedString(200, encoding);
+		String text = data.readFixedLengthString((int) data.getRemainingLength(), encoding);
+		return new CommentOrUnsynchronizedLyrics(language, description, text);
+	}
+
+	AttachedPicture parseAttachedPictureFrame(ID3v2FrameBody data) throws IOException, ID3v2Exception {
+		ID3v2Encoding encoding = data.readEncoding();
+		String imageType;
+		if (data.getTagHeader().getVersion() == 2) { // file type, e.g. "JPG"
+			String fileType = data.readFixedLengthString(3, ID3v2Encoding.ISO_8859_1);
+			switch (fileType.toUpperCase()) {
+				case "PNG":
+					imageType = "image/png";
+					break;
+				case "JPG":
+					imageType = "image/jpeg";
+					break;
+				default:
+					imageType = "image/unknown";
+			}
+		} else { // mime type, e.g. "image/jpeg"
+			imageType = data.readZeroTerminatedString(20, ID3v2Encoding.ISO_8859_1);
+		}
+		byte pictureType = data.getData().readByte();
+		String description = data.readZeroTerminatedString(200, encoding);
+		byte[] imageData = data.getData().readFully((int) data.getRemainingLength());
+		return new AttachedPicture(pictureType, description, imageType, imageData);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagBody.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagBody.java
new file mode 100755
index 000000000..222e65fb6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagBody.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.util.RangeInputStream;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.zip.InflaterInputStream;
+
+public class ID3v2TagBody {
+	private final RangeInputStream input;
+	private final ID3v2TagHeader tagHeader;
+	private final ID3v2DataInput data;
+
+	ID3v2TagBody(InputStream delegate, long position, int length, ID3v2TagHeader tagHeader) throws IOException {
+		this.input = new RangeInputStream(delegate, position, length);
+		this.data = new ID3v2DataInput(input);
+		this.tagHeader = tagHeader;
+	}
+
+	public ID3v2DataInput getData() {
+		return data;
+	}
+
+	public long getPosition() {
+		return input.getPosition();
+	}
+
+	public long getRemainingLength() {
+		return input.getRemainingLength();
+	}
+
+	public ID3v2TagHeader getTagHeader() {
+		return tagHeader;
+	}
+
+	public ID3v2FrameBody frameBody(ID3v2FrameHeader frameHeader) throws IOException, ID3v2Exception {
+		int dataLength = frameHeader.getBodySize();
+		InputStream input = this.input;
+		if (frameHeader.isUnsynchronization()) {
+			byte[] bytes = data.readFully(frameHeader.getBodySize());
+			boolean ff = false;
+			int len = 0;
+			for (byte b : bytes) {
+				if (!ff || b != 0) {
+					bytes[len++] = b;
+				}
+				ff = (b == 0xFF);
+			}
+			dataLength = len;
+			input = new ByteArrayInputStream(bytes, 0, len);
+		}
+		if (frameHeader.isEncryption()) {
+			throw new ID3v2Exception("Frame encryption is not supported");
+		}
+		if (frameHeader.isCompression()) {
+			dataLength = frameHeader.getDataLengthIndicator();
+			input = new InflaterInputStream(input);
+		}
+		return new ID3v2FrameBody(input, frameHeader.getHeaderSize(), dataLength, tagHeader, frameHeader);
+	}
+
+	public String toString() {
+		return "id3v2tag[pos=" + getPosition() + ", " + getRemainingLength() + " left]";
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagHeader.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagHeader.java
new file mode 100755
index 000000000..d2431cd05
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/ID3v2TagHeader.java
@@ -0,0 +1,191 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.util.PositionInputStream;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class ID3v2TagHeader {
+	private int version = 0;
+	private int revision = 0;
+	private int headerSize = 0; // size of header, including extended header (with attachments)
+	private int totalTagSize = 0; // everything, i.e. inluding tag header, extended header, footer & padding
+	private int paddingSize = 0; // size of zero padding after frames
+	private int footerSize = 0; // size of footer (version 4 only)
+	private boolean unsynchronization;
+	private boolean compression;
+
+	public ID3v2TagHeader(InputStream input) throws IOException, ID3v2Exception {
+		this(new PositionInputStream(input));
+	}
+
+	ID3v2TagHeader(PositionInputStream input) throws IOException, ID3v2Exception {
+		long startPosition = input.getPosition();
+
+		ID3v2DataInput data = new ID3v2DataInput(input);
+		
+		/*
+		 * Identifier: "ID3"
+		 */
+		String id = new String(data.readFully(3), "ISO-8859-1");
+		if (!"ID3".equals(id)) {
+			throw new ID3v2Exception("Invalid ID3 identifier: " + id);
+		}
+		
+		/*
+		 * Version: $02, $03 or $04
+		 */
+		version = data.readByte();
+		if (version != 2 && version != 3 && version != 4) {
+			throw new ID3v2Exception("Unsupported ID3v2 version: " + version);
+		}
+		
+		/*
+		 * Revision: $xx
+		 */
+		revision = data.readByte();
+		
+		/*
+		 * Flags (evaluated below)
+		 */
+		byte flags = data.readByte();
+		
+		/*
+		 * Size: 4 * %0xxxxxxx (sync-save integer)
+		 */
+		totalTagSize = 10 + data.readSyncsafeInt();
+		
+		/*
+		 * Evaluate flags
+		 */
+		if (version == 2) { // %(unsynchronisation)(compression)000000
+			unsynchronization = (flags & 0x80) != 0;
+			compression = (flags & 0x40) != 0;
+		} else { // %(unsynchronisation)(extendedHeader)(experimentalIndicator)(version == 3 ? 0 : footerPresent)0000
+			unsynchronization = (flags & 0x80) != 0;
+			
+			/*
+			 * Extended Header
+			 */
+			if ((flags & 0x40) != 0) {
+				if (version == 3) {
+					/*
+					 * Extended header size: $xx xx xx xx (6 or 10 if CRC data present)
+					 * In version 3, the size excludes itself.
+					 */
+					int extendedHeaderSize = data.readInt();
+					
+					/*
+					 * Extended Flags: $xx xx (skip)
+					 */
+					data.readByte(); // flags...
+					data.readByte(); // more flags...
+					
+					/*
+					 * Size of padding: $xx xx xx xx
+					 */
+					paddingSize = data.readInt();
+					
+					/*
+					 * consume the rest
+					 */
+					data.skipFully(extendedHeaderSize - 6);
+				} else {
+					/*
+					 * Extended header size: 4 * %0xxxxxxx (sync-save integer)
+					 * In version 4, the size includes itself.
+					 */
+					int extendedHeaderSize = data.readSyncsafeInt();
+					
+					/*
+					 * consume the rest
+					 */
+					data.skipFully(extendedHeaderSize - 4);
+				}
+			}
+			
+			/*
+			 * Footer Present
+			 */
+			if (version >= 4 && (flags & 0x10) != 0) { // footer present
+				footerSize = 10;
+				totalTagSize += 10;
+			}
+		}
+
+		headerSize = (int) (input.getPosition() - startPosition);
+	}
+
+	public ID3v2TagBody tagBody(InputStream input) throws IOException, ID3v2Exception {
+		if (compression) {
+			throw new ID3v2Exception("Tag compression is not supported");
+		}
+		if (version < 4 && unsynchronization) {
+			byte[] bytes = new ID3v2DataInput(input).readFully(totalTagSize - headerSize);
+			boolean ff = false;
+			int len = 0;
+			for (byte b : bytes) {
+				if (!ff || b != 0) {
+					bytes[len++] = b;
+				}
+				ff = (b == 0xFF);
+			}
+			return new ID3v2TagBody(new ByteArrayInputStream(bytes, 0, len), headerSize, len, this);
+		} else {
+			return new ID3v2TagBody(input, headerSize, totalTagSize - headerSize - footerSize, this);
+		}
+	}
+
+	public int getVersion() {
+		return version;
+	}
+
+	public int getRevision() {
+		return revision;
+	}
+
+	public int getTotalTagSize() {
+		return totalTagSize;
+	}
+
+	public boolean isUnsynchronization() {
+		return unsynchronization;
+	}
+
+	public boolean isCompression() {
+		return compression;
+	}
+
+	public int getHeaderSize() {
+		return headerSize;
+	}
+
+	public int getFooterSize() {
+		return footerSize;
+	}
+
+	public int getPaddingSize() {
+		return paddingSize;
+	}
+
+	@Override
+	public String toString() {
+		return String.format("%s[version=%s, totalTagSize=%d]", getClass().getSimpleName(), version, totalTagSize);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Exception.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Exception.java
new file mode 100755
index 000000000..2b9abf2e2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Exception.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+public class MP3Exception extends Exception {
+	private static final long serialVersionUID = 1L;
+
+	public MP3Exception(String message) {
+		super(message);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Frame.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Frame.java
new file mode 100755
index 000000000..60f7ba679
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Frame.java
@@ -0,0 +1,315 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+
+public class MP3Frame {
+	static final class CRC16 {
+		private short crc = (short) 0xFFFF;
+
+		public void update(int value, int length) {
+			int mask = 1 << (length - 1);
+			do {
+				if (((crc & 0x8000) == 0) ^ ((value & mask) == 0)) {
+					crc <<= 1;
+					crc ^= 0x8005;
+				} else {
+					crc <<= 1;
+				}
+			} while ((mask >>>= 1) != 0);
+		}
+
+		public void update(byte value) {
+			update(value, 8);
+		}
+		
+		public short getValue() {
+			return crc;
+		}
+		
+		public void reset() {
+			crc = (short) 0xFFFF;
+		}
+	}
+
+	public static class Header {
+		private static final int MPEG_LAYER_RESERVED = 0;
+		private static final int MPEG_VERSION_RESERVED = 1;
+		private static final int MPEG_BITRATE_FREE = 0;
+		private static final int MPEG_BITRATE_RESERVED = 15;
+		private static final int MPEG_FRQUENCY_RESERVED = 3;
+
+		// [frequency][version]
+		private static final int[][] FREQUENCIES = new int[][] {
+				// 2.5   reserved   2       1
+				{ 11025,    -1,  22050,  44100 },
+				{ 12000,    -1,  24000,  48000 },
+				{  8000,    -1,  16000,  32000 },
+				{    -1,    -1,     -1,     -1 } // reserved
+		};
+
+		// [bitrate][version,layer]
+		private static final int[][] BITRATES = new int[][] {
+				{      0,      0,      0,      0,      0 }, // free
+				{  32000,  32000,  32000,  32000,   8000 },
+				{  64000,  48000,  40000,  48000,  16000 },
+				{  96000,  56000,  48000,  56000,  24000 },
+				{ 128000,  64000,  56000,  64000,  32000 },
+				{ 160000,  80000,  64000,  80000,  40000 },
+				{ 192000,  96000,  80000,  96000,  48000 },
+				{ 224000, 112000,  96000, 112000,  56000 },
+				{ 256000, 128000, 112000, 128000,  64000 },
+				{ 288000, 160000, 128000, 144000,  80000 },
+				{ 320000, 192000, 160000, 160000,  96000 },
+				{ 352000, 224000, 192000, 176000, 112000 },
+				{ 384000, 256000, 224000, 192000, 128000 },
+				{ 416000, 320000, 256000, 224000, 144000 },
+				{ 448000, 384000, 320000, 256000, 160000 },
+				{     -1,     -1,     -1,     -1,     -1 } // reserved
+		};
+
+		// [version][layer]
+		private static final int[][] BITRATES_COLUMN = new int[][] {
+				// reserved  III        II         I
+				{  -1,        4,         4,        3 }, // 2.5
+				{  -1,       -1,        -1,       -1 }, // reserved
+				{  -1,        4,         4,        3 }, // 2
+				{  -1,        2,         1,        0 }  // 1
+		};
+		
+		// [version][layer]
+		private static final int[][] SIZE_COEFFICIENTS = new int[][] {
+				// reserved III        II         I
+				{ -1,       72,       144,       12 }, // 2.5
+				{ -1,       -1,        -1,       -1 }, // reserved
+				{ -1,       72,       144,       12 }, // 2
+				{ -1,      144,       144,       12 }  // 1
+		};
+
+		// [layer]
+		private static final int[] SLOT_SIZES = new int[] {
+			// reserved III        II         I
+			  -1,        1,         1,        4
+		};
+
+		// [channelMode][version]
+		private static final int[][] SIDE_INFO_SIZES = new int[][] {
+				// 2.5  reserved  2        1
+				{  17,    -1,    17,      32 }, // stereo
+				{  17,    -1,    17,      32 }, // joint stereo
+				{  17,    -1,    17,      32 }, // dual channel
+				{   9,    -1,     9,      17 }, // mono
+		};
+
+		public static final int MPEG_LAYER_1 = 3;
+		public static final int MPEG_LAYER_2 = 2;
+		public static final int MPEG_LAYER_3 = 1;
+
+		public static final int MPEG_VERSION_1   = 3;
+		public static final int MPEG_VERSION_2   = 2;
+		public static final int MPEG_VERSION_2_5 = 0;
+
+		public static final int MPEG_CHANNEL_MODE_MONO = 3;
+		public static final int MPEG_PROTECTION_CRC = 0;
+
+		private final int version;
+		private final int layer;
+		private final int frequency;
+		private final int bitrate;
+		private final int channelMode;
+		private final int padding;
+		private final int protection;
+
+		public Header(int b1, int b2, int b3) throws MP3Exception {
+			version = b1 >> 3 & 0x3;
+			if (version == MPEG_VERSION_RESERVED) {
+				throw new MP3Exception("Reserved version");
+			}
+			layer = b1 >> 1 & 0x3;
+			if (layer == MPEG_LAYER_RESERVED) {
+				throw new MP3Exception("Reserved layer");
+			}
+			bitrate = b2 >> 4 & 0xF;
+			if (bitrate == MPEG_BITRATE_RESERVED) {
+				throw new MP3Exception("Reserved bitrate");
+			}
+			if (bitrate == MPEG_BITRATE_FREE) {
+				throw new MP3Exception("Free bitrate");
+			}
+			frequency = b2 >> 2 & 0x3;
+			if (frequency == MPEG_FRQUENCY_RESERVED) {
+				throw new MP3Exception("Reserved frequency");
+			}
+			channelMode = b3 >> 6 & 0x3;
+			padding = b2 >> 1 & 0x1;
+			protection = b1 & 0x1;
+
+			int minFrameSize = 4;
+			if (protection == MPEG_PROTECTION_CRC) {
+				minFrameSize += 2;
+			}
+			if (layer == MPEG_LAYER_3) {
+				minFrameSize += getSideInfoSize();
+			}
+			if (getFrameSize() < minFrameSize) {
+				throw new MP3Exception("Frame size must be at least " + minFrameSize);
+			}
+		}
+
+		public int getVersion() {
+			return version;
+		}
+		
+		public int getLayer() {
+			return layer;
+		}
+		
+		public int getFrequency() {
+			return FREQUENCIES[frequency][version];
+		}
+
+		public int getChannelMode() {
+			return channelMode;
+		}
+		
+		public int getProtection() {
+			return protection;
+		}
+
+		public int getSampleCount() {
+			if (layer == MPEG_LAYER_1) {
+				return 384;
+			} else { // TODO correct?
+				return 1152;
+			}
+		}
+
+		public int getFrameSize() {
+			return ((SIZE_COEFFICIENTS[version][layer] * getBitrate() / getFrequency()) + padding) * SLOT_SIZES[layer];
+		}
+		
+		public int getBitrate() {
+			return BITRATES[bitrate][BITRATES_COLUMN[version][layer]];
+		}
+		
+		public int getDuration() {
+			return (int)getTotalDuration(getFrameSize());
+		}
+
+		public long getTotalDuration(long totalSize) {
+			long duration = 1000L * (getSampleCount() * totalSize) / (getFrameSize() * getFrequency());
+			if (getVersion() != MPEG_VERSION_1 && getChannelMode() == MPEG_CHANNEL_MODE_MONO) {
+				duration /= 2;
+			}
+			return duration;
+		}
+
+		public boolean isCompatible(Header header) {
+			return layer == header.layer && version == header.version && frequency == header.frequency && channelMode == header.channelMode;
+		}
+		
+		public int getSideInfoSize() {
+			return SIDE_INFO_SIZES[channelMode][version];
+		}
+		
+		public int getXingOffset() {
+			return 4 + getSideInfoSize();
+		}
+
+		public int getVBRIOffset() {
+			return 4 + 32;
+		}
+	}
+
+	private final byte[] bytes;
+	private final Header header;
+
+	MP3Frame(Header header, byte[] bytes) {
+		this.header = header;
+		this.bytes = bytes;
+	}
+	
+	boolean isChecksumError() {
+		if (header.getProtection() == Header.MPEG_PROTECTION_CRC) {
+			if (header.getLayer() == Header.MPEG_LAYER_3) {
+				CRC16 crc16 = new CRC16();
+				crc16.update(bytes[2]);
+				crc16.update(bytes[3]);
+				// skip crc bytes 4+5
+				int sideInfoSize = header.getSideInfoSize();
+				for (int i = 0; i < sideInfoSize; i++) {
+					crc16.update(bytes[6 + i]);
+				}
+				int crc = ((bytes[4] & 0xFF) << 8) | (bytes[5] & 0xFF);
+				return crc != crc16.getValue();
+			}
+		}
+		return false;
+	}
+	
+	public int getSize() {
+		return bytes.length;
+	}
+	
+	public Header getHeader() {
+		return header;
+	}
+
+	boolean isXingFrame() {
+		int xingOffset = header.getXingOffset();
+		if (bytes.length < xingOffset + 12) { // minimum Xing header size == 12
+			return false;
+		}
+		if (xingOffset < 0 || bytes.length < xingOffset + 8) {
+			return false;
+		}
+		if (bytes[xingOffset] == 'X' && bytes[xingOffset + 1] == 'i' && bytes[xingOffset + 2] == 'n' && bytes[xingOffset + 3] == 'g') {
+			return true;
+		}
+		if (bytes[xingOffset] == 'I' && bytes[xingOffset + 1] == 'n' && bytes[xingOffset + 2] == 'f' && bytes[xingOffset + 3] == 'o') {
+			return true;
+		}
+		return false;
+	}
+
+	boolean isVBRIFrame() {
+		int vbriOffset = header.getVBRIOffset();
+		if (bytes.length < vbriOffset + 26) { // minimum VBRI header size == 26
+			return false;
+		}
+		return bytes[vbriOffset] == 'V' && bytes[vbriOffset + 1] == 'B' && bytes[vbriOffset + 2] == 'R' && bytes[vbriOffset + 3] == 'I';
+	}
+
+	public int getNumberOfFrames() {
+		if (isXingFrame()) {
+			int xingOffset = header.getXingOffset();
+			byte flags = bytes[xingOffset + 7];
+			if ((flags & 0x01) != 0) {
+				return  ((bytes[xingOffset +  8] & 0xFF) << 24) |
+						((bytes[xingOffset +  9] & 0xFF) << 16) |
+						((bytes[xingOffset + 10] & 0xFF) << 8)  |
+						( bytes[xingOffset + 11] & 0xFF);
+			}
+		} else if (isVBRIFrame()) {
+			int vbriOffset = header.getVBRIOffset();
+			return  ((bytes[vbriOffset + 14] & 0xFF) << 24) |
+					((bytes[vbriOffset + 15] & 0xFF) << 16) |
+					((bytes[vbriOffset + 16] & 0xFF) << 8)  |
+					( bytes[vbriOffset + 17] & 0xFF);
+		}
+		return -1;
+	}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Info.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Info.java
new file mode 100755
index 000000000..9a2a616b0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Info.java
@@ -0,0 +1,270 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.AudioInfo;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class MP3Info extends AudioInfo {
+	static final Logger LOGGER = Logger.getLogger(MP3Info.class.getName());
+
+	interface StopReadCondition {
+		boolean stopRead(MP3Input data) throws IOException;
+	}
+
+	public MP3Info(InputStream input, long fileLength) throws IOException, ID3v2Exception, MP3Exception {
+		this(input, fileLength, Level.FINEST);
+	}
+
+	public MP3Info(InputStream input, final long fileLength, Level debugLevel) throws IOException, ID3v2Exception, MP3Exception {
+		brand = "MP3";
+		version = "0";
+		MP3Input data = new MP3Input(input);
+		if (ID3v2Info.isID3v2StartPosition(data)) {
+			ID3v2Info info = new ID3v2Info(data, debugLevel);
+			album = info.getAlbum();
+			albumArtist = info.getAlbumArtist();
+			artist = info.getArtist();
+			comment = info.getComment();
+			cover = info.getCover();
+			smallCover = info.getSmallCover();
+			compilation = info.isCompilation();
+			composer = info.getComposer();
+			copyright = info.getCopyright();
+			disc = info.getDisc();
+			discs = info.getDiscs();
+			duration = info.getDuration();
+			genre = info.getGenre();
+			grouping = info.getGrouping();
+			lyrics = info.getLyrics();
+			title = info.getTitle();
+			track = info.getTrack();
+			tracks = info.getTracks();
+			year = info.getYear();
+		}
+		if (duration <= 0 || duration >= 3600000L) { // don't trust strange durations (e.g. old lame versions always write TLEN 97391548)
+			try {
+				duration = calculateDuration(data, fileLength, new StopReadCondition() {
+					final long stopPosition = fileLength - 128;
+
+					@Override
+					public boolean stopRead(MP3Input data) throws IOException {
+						return (data.getPosition() == stopPosition) && ID3v1Info.isID3v1StartPosition(data);
+					}
+				});
+			} catch (MP3Exception e) {
+				if (LOGGER.isLoggable(debugLevel)) {
+					LOGGER.log(debugLevel, "Could not determine MP3 duration", e);
+				}
+			}
+		}
+		if (title == null || album == null || artist == null) {
+			if (data.getPosition() <= fileLength - 128) { // position to last 128 bytes
+				data.skipFully(fileLength - 128 - data.getPosition());
+				if (ID3v1Info.isID3v1StartPosition(input)) {
+					ID3v1Info info = new ID3v1Info(input);
+					if (album == null) {
+						album = info.getAlbum();
+					}
+					if (artist == null) {
+						artist = info.getArtist();
+					}
+					if (comment == null) {
+						comment = info.getComment();
+					}
+					if (genre == null) {
+						genre = info.getGenre();
+					}
+					if (title == null) {
+						title = info.getTitle();
+					}
+					if (track == 0) {
+						track = info.getTrack();
+					}
+					if (year == 0) {
+						year = info.getYear();
+					}
+				}
+			}
+		}
+	}
+
+	MP3Frame readFirstFrame(MP3Input data, StopReadCondition stopCondition) throws IOException {
+		int b0 = 0;
+		int b1 = stopCondition.stopRead(data) ? -1 : data.read();
+		while (b1 != -1) {
+			if (b0 == 0xFF && (b1 & 0xE0) == 0xE0) { // first 11 bits should be 1
+				data.mark(2); // set mark at b2
+				int b2 = stopCondition.stopRead(data) ? -1 : data.read();
+				if (b2 == -1) {
+					break;
+				}
+				int b3 = stopCondition.stopRead(data) ? -1 : data.read();
+				if (b3 == -1) {
+					break;
+				}
+				MP3Frame.Header header = null;
+				try {
+					header = new MP3Frame.Header(b1, b2, b3);
+				} catch (MP3Exception e) {
+					// not a valid frame header
+				}
+				if (header != null) { // we have a candidate
+					/*
+					 * The code gets a bit complex here, because we need to be able to reset() to b2 if
+					 * the check fails. Thus, we have to reset() to b2 before doing a call to mark().
+					 */
+					data.reset(); // reset input to b2
+					data.mark(header.getFrameSize() + 2); // rest of frame (size - 2) + next header
+					/*
+					 * read frame data
+					 */
+					byte[] frameBytes = new byte[header.getFrameSize()];
+					frameBytes[0] = (byte) 0xFF;
+					frameBytes[1] = (byte) b1;
+					try {
+						data.readFully(frameBytes, 2, frameBytes.length - 2); // may throw EOFException
+					} catch (EOFException e) {
+						break;
+					}
+
+					MP3Frame frame = new MP3Frame(header, frameBytes);
+					/*
+					 * read next header  
+					 */
+					if (!frame.isChecksumError()) {
+						int nextB0 = stopCondition.stopRead(data) ? -1 : data.read();
+						int nextB1 = stopCondition.stopRead(data) ? -1 : data.read();
+						if (nextB0 == -1 || nextB1 == -1) {
+							return frame;
+						}
+						if (nextB0 == 0xFF && (nextB1 & 0xFE) == (b1 & 0xFE)) { // quick check: nextB1 must match b1's version & layer
+							int nextB2 = stopCondition.stopRead(data) ? -1 : data.read();
+							int nextB3 = stopCondition.stopRead(data) ? -1 : data.read();
+							if (nextB2 == -1 || nextB3 == -1) {
+								return frame;
+							}
+							try {
+								if (new MP3Frame.Header(nextB1, nextB2, nextB3).isCompatible(header)) {
+									data.reset(); // reset input to b2
+									data.skipFully(frameBytes.length - 2); // skip to end of frame
+									return frame;
+								}
+							} catch (MP3Exception e) {
+								// not a valid frame header
+							}
+						}
+					}
+				}
+
+				/*
+				 * seems to be a false sync...
+				 */
+				data.reset(); // reset input to b2
+			}
+
+			/*
+			 * read next byte
+			 */
+			b0 = b1;
+			b1 = stopCondition.stopRead(data) ? -1 : data.read();
+		}
+		return null;
+	}
+
+	MP3Frame readNextFrame(MP3Input data, StopReadCondition stopCondition, MP3Frame previousFrame) throws IOException {
+		MP3Frame.Header previousHeader = previousFrame.getHeader();
+		data.mark(4);
+		int b0 = stopCondition.stopRead(data) ? -1 : data.read();
+		int b1 = stopCondition.stopRead(data) ? -1 : data.read();
+		if (b0 == -1 || b1 == -1) {
+			return null;
+		}
+		if (b0 == 0xFF && (b1 & 0xE0) == 0xE0) { // first 11 bits should be 1
+			int b2 = stopCondition.stopRead(data) ? -1 : data.read();
+			int b3 = stopCondition.stopRead(data) ? -1 : data.read();
+			if (b2 == -1 || b3 == -1) {
+				return null;
+			}
+			MP3Frame.Header nextHeader = null;
+			try {
+				nextHeader = new MP3Frame.Header(b1, b2, b3);
+			} catch (MP3Exception e) {
+				// not a valid frame header
+			}
+			if (nextHeader != null && nextHeader.isCompatible(previousHeader)) {
+				byte[] frameBytes = new byte[nextHeader.getFrameSize()];
+				frameBytes[0] = (byte) b0;
+				frameBytes[1] = (byte) b1;
+				frameBytes[2] = (byte) b2;
+				frameBytes[3] = (byte) b3;
+				try {
+					data.readFully(frameBytes, 4, frameBytes.length - 4);
+				} catch (EOFException e) {
+					return null;
+				}
+				return new MP3Frame(nextHeader, frameBytes);
+			}
+		}
+		data.reset();
+		return null;
+	}
+
+	long calculateDuration(MP3Input data, long totalLength, StopReadCondition stopCondition) throws IOException, MP3Exception {
+		MP3Frame frame = readFirstFrame(data, stopCondition);
+		if (frame != null) {
+			// check for Xing header
+			int numberOfFrames = frame.getNumberOfFrames();
+			if (numberOfFrames > 0) { // from Xing/VBRI header
+				return frame.getHeader().getTotalDuration(numberOfFrames * frame.getSize());
+			} else { // scan file
+				numberOfFrames = 1;
+
+				long firstFramePosition = data.getPosition() - frame.getSize();
+				long frameSizeSum = frame.getSize();
+
+				int firstFrameBitrate = frame.getHeader().getBitrate();
+				long bitrateSum = firstFrameBitrate;
+				boolean vbr = false;
+				int cbrThreshold = 10000 / frame.getHeader().getDuration(); // assume CBR after 10 seconds
+
+				while (true) {
+					if (numberOfFrames == cbrThreshold && !vbr && totalLength > 0) {
+						return frame.getHeader().getTotalDuration(totalLength - firstFramePosition);
+					}
+					if ((frame = readNextFrame(data, stopCondition, frame)) == null) {
+						break;
+					}
+					int bitrate = frame.getHeader().getBitrate();
+					if (bitrate != firstFrameBitrate) {
+						vbr = true;
+					}
+					bitrateSum += bitrate;
+					frameSizeSum += frame.getSize();
+					numberOfFrames++;
+				}
+				return 1000L * frameSizeSum * numberOfFrames * 8 / bitrateSum;
+			}
+		} else {
+			throw new MP3Exception("No audio frame");
+		}
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Input.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Input.java
new file mode 100755
index 000000000..f27aa8112
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/mp3/MP3Input.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.mp3;
+
+import org.telegram.android.audioinfo.util.PositionInputStream;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class MP3Input extends PositionInputStream {
+	public MP3Input(InputStream delegate) throws IOException {
+		super(delegate);
+	}
+
+	public MP3Input(InputStream delegate, long position) {
+		super(delegate, position);
+	}
+
+	public final void readFully(byte b[], int off, int len) throws IOException {
+		int total = 0;
+		while (total < len) {
+			int current = read(b, off + total, len - total);
+			if (current > 0) {
+				total += current;
+			} else {
+				throw new EOFException();
+			}
+		}
+	}
+
+	public void skipFully(long len) throws IOException {
+		long total = 0;
+		while (total < len) {
+			long current = skip(len - total);
+			if (current > 0) {
+				total += current;
+			} else {
+				throw new EOFException();
+			}
+		}
+	}
+
+	public String toString() {
+		return "mp3[pos=" + getPosition() + "]";
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/PositionInputStream.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/PositionInputStream.java
new file mode 100755
index 000000000..ad29d6185
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/PositionInputStream.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.util;
+
+import java.io.FilterInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class PositionInputStream extends FilterInputStream {
+	private long position;
+	private long positionMark;
+
+	public PositionInputStream(InputStream delegate) {
+		this(delegate, 0L);
+	}
+
+	public PositionInputStream(InputStream delegate, long position) {
+		super(delegate);
+		this.position = position;
+	}
+
+	@Override
+	public synchronized void mark(int readlimit) {
+		positionMark = position;
+		super.mark(readlimit);
+	}
+
+	@Override
+	public synchronized void reset() throws IOException {
+		super.reset();
+		position = positionMark;
+	}
+
+	public int read() throws IOException {
+		int data = super.read();
+		if (data >= 0) {
+			position++;
+		}
+		return data;
+	}
+
+	public int read(byte[] b, int off, int len) throws IOException {
+		long p = position;
+		int read = super.read(b, off, len);
+		if (read > 0) {
+			position = p + read;
+		}
+		return read;
+	}
+
+	@Override
+	public final int read(byte[] b) throws IOException {
+		return read(b, 0, b.length);
+	}
+
+	public long skip(long n) throws IOException {
+		long p = position;
+		long skipped = super.skip(n);
+		position = p + skipped;
+		return skipped;
+	}
+
+	public long getPosition() {
+		return position;
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/RangeInputStream.java b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/RangeInputStream.java
new file mode 100755
index 000000000..7c4dbef5f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/audioinfo/util/RangeInputStream.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2013-2014 Odysseus Software GmbH
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.android.audioinfo.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Input stream filter that keeps track of the current read position
+ * and has a read length limit.
+ */
+public class RangeInputStream extends PositionInputStream {
+	private final long endPosition;
+	
+	public RangeInputStream(InputStream delegate, long position, long length) throws IOException {
+		super(delegate, position);
+		this.endPosition = position + length;
+	}
+	
+	public long getRemainingLength() {
+		return endPosition - getPosition();
+	}
+	
+	@Override
+	public int read() throws IOException {
+		if (getPosition() == endPosition) {
+			return -1;
+		}
+		return super.read();
+	}
+	
+	@Override
+	public int read(byte[] b, int off, int len) throws IOException {
+		if (getPosition() + len > endPosition) {
+			len  = (int)(endPosition - getPosition());
+			if (len == 0) {
+				return -1;
+			}
+		}
+		return super.read(b, off, len);
+	}
+	
+	@Override
+	public long skip(long n) throws IOException {
+		if (getPosition() + n > endPosition) {
+			n  = (int)(endPosition - getPosition());
+		}
+		return super.skip(n);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
index f1acd0285..492fea8d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
@@ -400,4 +400,38 @@ public void run() {
             }
         });
     }
+
+    public static void loadMusic(final long uid, final int max_id) {
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                final ArrayList<MessageObject> arrayList = new ArrayList<>();
+                try {
+                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media_v2 WHERE uid = %d AND mid < %d AND type = %d ORDER BY date DESC, mid DESC LIMIT 1000", uid, max_id, MEDIA_FILE));
+
+                    while (cursor.next()) {
+                        ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                            if (MessageObject.isMusicMessage(message)) {
+                                message.id = cursor.intValue(1);
+                                message.dialog_id = uid;
+                                arrayList.add(0, new MessageObject(message, null, false));
+                            }
+                        }
+                        MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                    }
+                    cursor.dispose();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.musicDidLoaded, uid, arrayList);
+                    }
+                });
+            }
+        });
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/util/SortedList.java b/TMessagesProj/src/main/java/org/telegram/android/support/util/SortedList.java
index 688e032c8..c8bb6d3e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/util/SortedList.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/util/SortedList.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package android.support.v7.util;
+package org.telegram.android.support.util;
 
 import java.lang.reflect.Array;
+import java.util.Arrays;
 
 /**
  * A Sorted list implementation that can keep items in order and also notify for changes in the
@@ -418,6 +419,19 @@ private void addToData(int index, T item) {
         mSize++;
     }
 
+    /**
+     * Removes all items from the SortedList.
+     */
+    public void clear() {
+        if (mSize == 0) {
+            return;
+        }
+        final int prevSize = mSize;
+        Arrays.fill(mData, 0, prevSize, null);
+        mSize = 0;
+        mCallback.onRemoved(0, prevSize);
+    }
+
     /**
      * The class that controls the behavior of the {@link SortedList}.
      * <p>
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/AdapterHelper.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/AdapterHelper.java
index 3b4c28c1a..d56fb0b99 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/AdapterHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/AdapterHelper.java
@@ -19,6 +19,9 @@
 import android.support.v4.util.Pools;
 import android.util.Log;
 
+import org.telegram.android.support.widget.OpReorderer;
+import org.telegram.android.support.widget.RecyclerView;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/DefaultItemAnimator.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/DefaultItemAnimator.java
index bbbc20a54..0d7e11af7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/DefaultItemAnimator.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/DefaultItemAnimator.java
@@ -18,6 +18,7 @@
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.ViewPropertyAnimatorCompat;
 import android.support.v4.view.ViewPropertyAnimatorListener;
+
 import org.telegram.android.support.widget.RecyclerView.ViewHolder;
 import android.view.View;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/GridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/GridLayoutManager.java
index 790bf06f8..37453d67c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/GridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/GridLayoutManager.java
@@ -24,6 +24,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import org.telegram.android.support.widget.RecyclerView;
+
 import java.util.Arrays;
 
 /**
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/LayoutState.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/LayoutState.java
index c431b6149..b91274a1e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/LayoutState.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/LayoutState.java
@@ -60,11 +60,14 @@
     int mLayoutDirection;
 
     /**
-     * Used if you want to pre-layout items that are not yet visible.
-     * The difference with {@link #mAvailable} is that, when recycling, distance rendered for
-     * {@link #mExtra} is not considered not to recycle visible children.
+     * This is the target pixel closest to the start of the layout that we are trying to fill
      */
-    int mExtra = 0;
+    int mStartLine = 0;
+
+    /**
+     * This is the target pixel closest to the end of the layout that we are trying to fill
+     */
+    int mEndLine = 0;
 
     /**
      * @return true if there are more items in the data adapter
@@ -84,4 +87,16 @@ View next(RecyclerView.Recycler recycler) {
         mCurrentPosition += mItemDirection;
         return view;
     }
+
+    @Override
+    public String toString() {
+        return "LayoutState{" +
+                "mAvailable=" + mAvailable +
+                ", mCurrentPosition=" + mCurrentPosition +
+                ", mItemDirection=" + mItemDirection +
+                ", mLayoutDirection=" + mLayoutDirection +
+                ", mStartLine=" + mStartLine +
+                ", mEndLine=" + mEndLine +
+                '}';
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/LinearLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/LinearLayoutManager.java
index a52bbffe5..a0508ad5f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/LinearLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/LinearLayoutManager.java
@@ -23,6 +23,12 @@
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.accessibility.AccessibilityEventCompat;
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
+import android.util.AttributeSet;
+
+import org.telegram.android.support.widget.OrientationHelper;
+import org.telegram.android.support.widget.RecyclerView;
+import org.telegram.android.support.widget.ScrollbarHelper;
+import org.telegram.android.support.widget.helper.ItemTouchHelper;
 import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
@@ -33,10 +39,11 @@
 import static org.telegram.android.support.widget.RecyclerView.NO_POSITION;
 
 /**
- * A {@link android.support.v7.widget.RecyclerView.LayoutManager} implementation which provides
+ * A {@link RecyclerView.LayoutManager} implementation which provides
  * similar functionality to {@link android.widget.ListView}.
  */
-public class LinearLayoutManager extends RecyclerView.LayoutManager {
+public class LinearLayoutManager extends RecyclerView.LayoutManager implements
+        ItemTouchHelper.ViewDropHandler {
 
     private static final String TAG = "LinearLayoutManager";
 
@@ -130,7 +137,7 @@
     *  Re-used variable to keep anchor information on re-layout.
     *  Anchor position and coordinate defines the reference point for LLM while doing a layout.
     * */
-    final AnchorInfo mAnchorInfo;
+    final AnchorInfo mAnchorInfo = new AnchorInfo();
 
     /**
      * Creates a vertical LinearLayoutManager
@@ -148,7 +155,6 @@ public LinearLayoutManager(Context context) {
      * @param reverseLayout When set to true, layouts from end to start.
      */
     public LinearLayoutManager(Context context, int orientation, boolean reverseLayout) {
-        mAnchorInfo = new AnchorInfo();
         setOrientation(orientation);
         setReverseLayout(reverseLayout);
     }
@@ -342,8 +348,8 @@ public boolean getReverseLayout() {
      * laid out at the end of the UI, second item is laid out before it etc.
      *
      * For horizontal layouts, it depends on the layout direction.
-     * When set to true, If {@link android.support.v7.widget.RecyclerView} is LTR, than it will
-     * layout from RTL, if {@link android.support.v7.widget.RecyclerView}} is RTL, it will layout
+     * When set to true, If {@link RecyclerView} is LTR, than it will
+     * layout from RTL, if {@link RecyclerView}} is RTL, it will layout
      * from LTR.
      *
      * If you are looking for the exact same behavior of
@@ -371,9 +377,13 @@ public View findViewByPosition(int position) {
         final int firstChild = getPosition(getChildAt(0));
         final int viewPosition = position - firstChild;
         if (viewPosition >= 0 && viewPosition < childCount) {
-            return getChildAt(viewPosition);
+            final View child = getChildAt(viewPosition);
+            if (getPosition(child) == position) {
+                return child; // in pre-layout, this may not match
+            }
         }
-        return null;
+        // fallback to traversal. This might be necessary in pre-layout.
+        return super.findViewByPosition(position);
     }
 
     /**
@@ -796,6 +806,7 @@ private boolean updateAnchorFromPendingData(RecyclerView.State state, AnchorInfo
         }
         // override layout from end values for consistency
         anchorInfo.mLayoutFromEnd = mShouldReverseLayout;
+        // if this changes, we should update prepareForDrop as well
         if (mShouldReverseLayout) {
             anchorInfo.mCoordinate = mOrientationHelper.getEndAfterPadding() -
                     mPendingScrollPositionOffset;
@@ -941,7 +952,6 @@ public void scrollToPosition(int position) {
      * <code>item[10]</code>'s bottom is 20 pixels above the RecyclerView's bottom.
      * <p>
      * Note that scroll position change will not be reflected until the next layout call.
-     *
      * <p>
      * If you are just trying to make a position visible, use {@link #scrollToPosition(int)}.
      *
@@ -1175,11 +1185,10 @@ private void recycleChildren(RecyclerView.Recycler recycler, int startIndex, int
     /**
      * Recycles views that went out of bounds after scrolling towards the end of the layout.
      *
-     * @param recycler Recycler instance of {@link android.support.v7.widget.RecyclerView}
+     * @param recycler Recycler instance of {@link RecyclerView}
      * @param dt       This can be used to add additional padding to the visible area. This is used
-     *                 to
-     *                 detect children that will go out of bounds after scrolling, without actually
-     *                 moving them.
+     *                 to detect children that will go out of bounds after scrolling, without
+     *                 actually moving them.
      */
     private void recycleViewsFromStart(RecyclerView.Recycler recycler, int dt) {
         if (dt < 0) {
@@ -1215,7 +1224,7 @@ private void recycleViewsFromStart(RecyclerView.Recycler recycler, int dt) {
     /**
      * Recycles views that went out of bounds after scrolling towards the start of the layout.
      *
-     * @param recycler Recycler instance of {@link android.support.v7.widget.RecyclerView}
+     * @param recycler Recycler instance of {@link RecyclerView}
      * @param dt       This can be used to add additional padding to the visible area. This is used
      *                 to detect children that will go out of bounds after scrolling, without
      *                 actually moving them.
@@ -1257,8 +1266,8 @@ private void recycleViewsFromEnd(RecyclerView.Recycler recycler, int dt) {
      * @param layoutState Current layout state. Right now, this object does not change but
      *                    we may consider moving it out of this view so passing around as a
      *                    parameter for now, rather than accessing {@link #mLayoutState}
-     * @see #recycleViewsFromStart(android.support.v7.widget.RecyclerView.Recycler, int)
-     * @see #recycleViewsFromEnd(android.support.v7.widget.RecyclerView.Recycler, int)
+     * @see #recycleViewsFromStart(RecyclerView.Recycler, int)
+     * @see #recycleViewsFromEnd(RecyclerView.Recycler, int)
      * @see android.support.v7.widget.LinearLayoutManager.LayoutState#mLayoutDirection
      */
     private void recycleByLayoutState(RecyclerView.Recycler recycler, LayoutState layoutState) {
@@ -1788,6 +1797,40 @@ public boolean supportsPredictiveItemAnimations() {
         return mPendingSavedState == null && mLastStackFromEnd == mStackFromEnd;
     }
 
+    /**
+     * @hide This method should be called by ItemTouchHelper only.
+     */
+    @Override
+    public void prepareForDrop(View view, View target, int x, int y) {
+        assertNotInLayoutOrScroll("Cannot drop a view during a scroll or layout calculation");
+        ensureLayoutState();
+        resolveShouldLayoutReverse();
+        final int myPos = getPosition(view);
+        final int targetPos = getPosition(target);
+        final int dropDirection = myPos < targetPos ? LayoutState.ITEM_DIRECTION_TAIL :
+                LayoutState.ITEM_DIRECTION_HEAD;
+        if (mShouldReverseLayout) {
+            if (dropDirection == LayoutState.ITEM_DIRECTION_TAIL) {
+                scrollToPositionWithOffset(targetPos,
+                        mOrientationHelper.getEndAfterPadding() -
+                                (mOrientationHelper.getDecoratedStart(target) +
+                                mOrientationHelper.getDecoratedMeasurement(view)));
+            } else {
+                scrollToPositionWithOffset(targetPos,
+                        mOrientationHelper.getEndAfterPadding() -
+                                mOrientationHelper.getDecoratedEnd(target));
+            }
+        } else {
+            if (dropDirection == LayoutState.ITEM_DIRECTION_HEAD) {
+                scrollToPositionWithOffset(targetPos, mOrientationHelper.getDecoratedStart(target));
+            } else {
+                scrollToPositionWithOffset(targetPos,
+                        mOrientationHelper.getDecoratedEnd(target) -
+                                mOrientationHelper.getDecoratedMeasurement(view));
+            }
+        }
+    }
+
     /**
      * Helper class that keeps temporary state while {LayoutManager} is filling out the empty
      * space.
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/OpReorderer.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/OpReorderer.java
index 3d56822f7..05d0e93a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/OpReorderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/OpReorderer.java
@@ -16,14 +16,14 @@
 
 package org.telegram.android.support.widget;
 
-import java.util.List;
-
 import org.telegram.android.support.widget.AdapterHelper.UpdateOp;
 import static org.telegram.android.support.widget.AdapterHelper.UpdateOp.ADD;
 import static org.telegram.android.support.widget.AdapterHelper.UpdateOp.MOVE;
 import static org.telegram.android.support.widget.AdapterHelper.UpdateOp.REMOVE;
 import static org.telegram.android.support.widget.AdapterHelper.UpdateOp.UPDATE;
 
+import java.util.List;
+
 class OpReorderer {
 
     final Callback mCallback;
@@ -58,7 +58,7 @@ private void swapMoveOp(List<UpdateOp> list, int badMove, int next) {
     }
 
     void swapMoveRemove(List<UpdateOp> list, int movePos, UpdateOp moveOp,
-            int removePos, UpdateOp removeOp) {
+                        int removePos, UpdateOp removeOp) {
         UpdateOp extraRm = null;
         // check if move is nulled out by remove
         boolean revertedMove = false;
@@ -83,7 +83,7 @@ void swapMoveRemove(List<UpdateOp> list, int movePos, UpdateOp moveOp,
             removeOp.positionStart--;
         } else if (moveOp.itemCount < removeOp.positionStart + removeOp.itemCount) {
             // move is removed.
-            removeOp.itemCount --;
+            removeOp.itemCount--;
             moveOp.cmd = REMOVE;
             moveOp.itemCount = 1;
             if (removeOp.itemCount == 0) {
@@ -157,7 +157,7 @@ void swapMoveRemove(List<UpdateOp> list, int movePos, UpdateOp moveOp,
     }
 
     private void swapMoveAdd(List<UpdateOp> list, int move, UpdateOp moveOp, int add,
-            UpdateOp addOp) {
+                             UpdateOp addOp) {
         int offset = 0;
         // going in reverse, first revert the effect of add
         if (moveOp.itemCount < addOp.positionStart) {
@@ -178,7 +178,7 @@ private void swapMoveAdd(List<UpdateOp> list, int move, UpdateOp moveOp, int add
     }
 
     void swapMoveUpdate(List<UpdateOp> list, int move, UpdateOp moveOp, int update,
-            UpdateOp updateOp) {
+                        UpdateOp updateOp) {
         UpdateOp extraUp1 = null;
         UpdateOp extraUp2 = null;
         // going in reverse, first revert the effect of add
@@ -228,7 +228,7 @@ private int getLastMoveOutOfOrder(List<UpdateOp> list) {
         return -1;
     }
 
-    static interface Callback {
+    interface Callback {
 
         UpdateOp obtainUpdateOp(int cmd, int startPosition, int itemCount);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/PositionMap.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/PositionMap.java
index b97bd5a65..15a41191d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/PositionMap.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/PositionMap.java
@@ -456,5 +456,4 @@ static int binarySearch(int[] array, int size, int value) {
             return ~lo;  // value not present
         }
     }
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
index f6a17a1d8..4aa003c75 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
@@ -18,6 +18,7 @@
 package org.telegram.android.support.widget;
 
 import android.content.Context;
+import android.content.res.TypedArray;
 import android.database.Observable;
 import android.graphics.Canvas;
 import android.graphics.PointF;
@@ -30,6 +31,8 @@
 import android.support.v4.util.ArrayMap;
 import android.support.v4.view.InputDeviceCompat;
 import android.support.v4.view.MotionEventCompat;
+import android.support.v4.view.NestedScrollingChild;
+import android.support.v4.view.NestedScrollingChildHelper;
 import android.support.v4.view.ScrollingView;
 import android.support.v4.view.VelocityTrackerCompat;
 import android.support.v4.view.ViewCompat;
@@ -39,9 +42,6 @@
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
 import android.support.v4.widget.EdgeEffectCompat;
 import android.support.v4.widget.ScrollerCompat;
-import static org.telegram.android.support.widget.AdapterHelper.UpdateOp;
-import static org.telegram.android.support.widget.AdapterHelper.Callback;
-
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.SparseArray;
@@ -58,12 +58,15 @@
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.Interpolator;
 
-import org.telegram.android.AndroidUtilities;
-
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import static org.telegram.android.support.widget.AdapterHelper.Callback;
+import static org.telegram.android.support.widget.AdapterHelper.UpdateOp;
+
 /**
  * A flexible view for providing a limited window into a large data set.
  *
@@ -128,8 +131,10 @@
  * <p>
  * When writing a {@link LayoutManager} you almost always want to use layout positions whereas when
  * writing an {@link Adapter}, you probably want to use adapter positions.
+ *
+ * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_layoutManager
  */
-public class RecyclerView extends ViewGroup implements ScrollingView {
+public class RecyclerView extends ViewGroup implements ScrollingView, NestedScrollingChild {
 
     private static final String TAG = "RecyclerView";
 
@@ -221,6 +226,8 @@
      * >Try increasing your pool size and item cache size.
      */
     private static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
+    private static final Class<?>[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE =
+            new Class[]{Context.class, AttributeSet.class, int.class, int.class};
 
     private final RecyclerViewDataObserver mObserver = new RecyclerViewDataObserver();
 
@@ -283,6 +290,7 @@ public void run() {
     private boolean mAdapterUpdateDuringMeasure;
     private final boolean mPostUpdatesOnAnimation;
     private final AccessibilityManager mAccessibilityManager;
+    private List<OnChildAttachStateChangeListener> mOnChildAttachStateListeners;
 
     /**
      * Set to true when an adapter data set changed notification is received.
@@ -354,11 +362,17 @@ public void run() {
             new ItemAnimatorRestoreListener();
     private boolean mPostedAnimatorRunner = false;
     private RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
+    private ChildDrawingOrderCallback mChildDrawingOrderCallback;
 
     // simple array to keep min and max child position during a layout calculation
     // preserved not to create a new one in each layout pass
     private final int[] mMinMaxLayoutPositions = new int[2];
 
+    private final NestedScrollingChildHelper mScrollingChildHelper;
+    private final int[] mScrollOffset = new int[2];
+    private final int[] mScrollConsumed = new int[2];
+    private final int[] mNestedOffsets = new int[2];
+
     private Runnable mItemAnimatorRunner = new Runnable() {
         @Override
         public void run() {
@@ -408,6 +422,10 @@ public RecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle)
         mAccessibilityManager = (AccessibilityManager) getContext()
                 .getSystemService(Context.ACCESSIBILITY_SERVICE);
         setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
+        // Create the layoutManager if specified.
+
+        mScrollingChildHelper = new NestedScrollingChildHelper(this);
+        setNestedScrollingEnabled(true);
     }
 
     /**
@@ -428,6 +446,72 @@ public void setAccessibilityDelegateCompat(
         ViewCompat.setAccessibilityDelegate(this, mAccessibilityDelegate);
     }
 
+    /**
+     * Instantiate and set a LayoutManager, if specified in the attributes.
+     */
+    private void createLayoutManager(Context context, String className, AttributeSet attrs,
+            int defStyleAttr, int defStyleRes) {
+        if (className != null) {
+            className = className.trim();
+            if (className.length() != 0) {  // Can't use isEmpty since it was added in API 9.
+                className = getFullClassName(context, className);
+                try {
+                    ClassLoader classLoader;
+                    if (isInEditMode()) {
+                        // Stupid layoutlib cannot handle simple class loaders.
+                        classLoader = this.getClass().getClassLoader();
+                    } else {
+                        classLoader = context.getClassLoader();
+                    }
+                    Class<? extends LayoutManager> layoutManagerClass =
+                            classLoader.loadClass(className).asSubclass(LayoutManager.class);
+                    Constructor<? extends LayoutManager> constructor;
+                    Object[] constructorArgs = null;
+                    try {
+                        constructor = layoutManagerClass
+                                .getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE);
+                        constructorArgs = new Object[]{context, attrs, defStyleAttr, defStyleRes};
+                    } catch (NoSuchMethodException e) {
+                        try {
+                            constructor = layoutManagerClass.getConstructor();
+                        } catch (NoSuchMethodException e1) {
+                            e1.initCause(e);
+                            throw new IllegalStateException(attrs.getPositionDescription() +
+                                    ": Error creating LayoutManager " + className, e1);
+                        }
+                    }
+                    constructor.setAccessible(true);
+                    setLayoutManager(constructor.newInstance(constructorArgs));
+                } catch (ClassNotFoundException e) {
+                    throw new IllegalStateException(attrs.getPositionDescription()
+                            + ": Unable to find LayoutManager " + className, e);
+                } catch (InvocationTargetException e) {
+                    throw new IllegalStateException(attrs.getPositionDescription()
+                            + ": Could not instantiate the LayoutManager: " + className, e);
+                } catch (InstantiationException e) {
+                    throw new IllegalStateException(attrs.getPositionDescription()
+                            + ": Could not instantiate the LayoutManager: " + className, e);
+                } catch (IllegalAccessException e) {
+                    throw new IllegalStateException(attrs.getPositionDescription()
+                            + ": Cannot access non-public constructor " + className, e);
+                } catch (ClassCastException e) {
+                    throw new IllegalStateException(attrs.getPositionDescription()
+                            + ": Class is not a LayoutManager " + className, e);
+                }
+            }
+        }
+    }
+
+    private String getFullClassName(Context context, String className) {
+        if (className.charAt(0) == '.') {
+            return context.getPackageName() + className;
+        }
+        if (className.contains("")) {
+            return className;
+        }
+        return RecyclerView.class.getPackage().getName() + '.' + className;
+    }
+
     private void initChildrenHelper() {
         mChildHelper = new ChildHelper(new ChildHelper.Callback() {
             @Override
@@ -769,6 +853,46 @@ public int getBaseline() {
         }
     }
 
+    /**
+     * Register a listener that will be notified whenever a child view is attached to or detached
+     * from RecyclerView.
+     *
+     * <p>This listener will be called when a LayoutManager or the RecyclerView decides
+     * that a child view is no longer needed. If an application associates expensive
+     * or heavyweight data with item views, this may be a good place to release
+     * or free those resources.</p>
+     *
+     * @param listener Listener to register
+     */
+    public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener listener) {
+        if (mOnChildAttachStateListeners == null) {
+            mOnChildAttachStateListeners = new ArrayList<OnChildAttachStateChangeListener>();
+        }
+        mOnChildAttachStateListeners.add(listener);
+    }
+
+    /**
+     * Removes the provided listener from child attached state listeners list.
+     *
+     * @param listener Listener to unregister
+     */
+    public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener listener) {
+        if (mOnChildAttachStateListeners == null) {
+            return;
+        }
+        mOnChildAttachStateListeners.remove(listener);
+    }
+
+    /**
+     * Removes all listeners that were added via
+     * {@link #addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener)}.
+     */
+    public void clearOnChildAttachStateChangeListeners() {
+        if (mOnChildAttachStateListeners != null) {
+            mOnChildAttachStateListeners.clear();
+        }
+    }
+
     /**
      * Set the {@link LayoutManager} that this RecyclerView will use.
      *
@@ -993,7 +1117,7 @@ private void setScrollState(int state) {
     public void addItemDecoration(ItemDecoration decor, int index) {
         if (mLayout != null) {
             mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or"
-                    + " layout");
+                    + "layout");
         }
         if (mItemDecorations.isEmpty()) {
             setWillNotDraw(false);
@@ -1035,7 +1159,7 @@ public void addItemDecoration(ItemDecoration decor) {
     public void removeItemDecoration(ItemDecoration decor) {
         if (mLayout != null) {
             mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or"
-                    + " layout");
+                    + "layout");
         }
         mItemDecorations.remove(decor);
         if (mItemDecorations.isEmpty()) {
@@ -1045,6 +1169,26 @@ public void removeItemDecoration(ItemDecoration decor) {
         requestLayout();
     }
 
+    /**
+     * Sets the {@link ChildDrawingOrderCallback} to be used for drawing children.
+     * <p>
+     * See {@link ViewGroup#getChildDrawingOrder(int, int)} for details. Calling this method will
+     * always call {@link ViewGroup#setChildrenDrawingOrderEnabled(boolean)}. The parameter will be
+     * true if childDrawingOrderCallback is not null, false otherwise.
+     * <p>
+     * Note that child drawing order may be overridden by View's elevation.
+     *
+     * @param childDrawingOrderCallback The ChildDrawingOrderCallback to be used by the drawing
+     *                                  system.
+     */
+    public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childDrawingOrderCallback) {
+        if (childDrawingOrderCallback == mChildDrawingOrderCallback) {
+            return;
+        }
+        mChildDrawingOrderCallback = childDrawingOrderCallback;
+        setChildrenDrawingOrderEnabled(mChildDrawingOrderCallback != null);
+    }
+
     /**
      * Set a listener that will be notified of any changes in scroll state or position.
      *
@@ -1153,7 +1297,7 @@ public void scrollBy(int x, int y) {
         final boolean canScrollHorizontal = mLayout.canScrollHorizontally();
         final boolean canScrollVertical = mLayout.canScrollVertically();
         if (canScrollHorizontal || canScrollVertical) {
-            scrollByInternal(canScrollHorizontal ? x : 0, canScrollVertical ? y : 0, false, 0, 0);
+            scrollByInternal(canScrollHorizontal ? x : 0, canScrollVertical ? y : 0, null);
         }
     }
 
@@ -1176,29 +1320,25 @@ private void consumePendingUpdateOperations() {
      *
      * @param x The amount of horizontal scroll request
      * @param y The amount of vertical scroll request
-     * @param fromMotionEvent If request is originated from a MotionEvent, this should be set to
-     *                        true and motionX/motionY should be provided, false otherwise.
-     * @param motionX The x coordinate of the MotionEvent which triggered this scroll. Unused if
-     *                fromMotionEvent is false.
-     * @param motionY The y coordinate of the MotionEvent which triggered this scroll. Unused if
-     *                fromMotionEvent is false.
+     * @param ev The originating MotionEvent, or null if not from a touch event.
      *
      * @return Whether any scroll was consumed in either direction.
      */
-    boolean scrollByInternal(int x, int y, boolean fromMotionEvent, int motionX, int motionY) {
-        int overscrollX = 0, overscrollY = 0;
-        int hresult = 0, vresult = 0;
+    boolean scrollByInternal(int x, int y, MotionEvent ev) {
+        int unconsumedX = 0, unconsumedY = 0;
+        int consumedX = 0, consumedY = 0;
+
         consumePendingUpdateOperations();
         if (mAdapter != null) {
             eatRequestLayout();
             onEnterLayoutOrScroll();
             if (x != 0) {
-                hresult = mLayout.scrollHorizontallyBy(x, mRecycler, mState);
-                overscrollX = x - hresult;
+                consumedX = mLayout.scrollHorizontallyBy(x, mRecycler, mState);
+                unconsumedX = x - consumedX;
             }
             if (y != 0) {
-                vresult = mLayout.scrollVerticallyBy(y, mRecycler, mState);
-                overscrollY = y - vresult;
+                consumedY = mLayout.scrollVerticallyBy(y, mRecycler, mState);
+                unconsumedY = y - consumedY;
             }
             if (supportsChangeAnimations()) {
                 // Fix up shadow views used by changing animations
@@ -1227,19 +1367,27 @@ boolean scrollByInternal(int x, int y, boolean fromMotionEvent, int motionX, int
         if (!mItemDecorations.isEmpty()) {
             invalidate();
         }
-        if (ViewCompat.getOverScrollMode(this) != ViewCompat.OVER_SCROLL_NEVER) {
-            if (fromMotionEvent) {
-                pullGlows(motionX, overscrollX, motionY, overscrollY);
+
+        if (dispatchNestedScroll(consumedX, consumedY, unconsumedX, unconsumedY, mScrollOffset)) {
+            // Update the last touch co-ords, taking any scroll offset into account
+            mLastTouchX -= mScrollOffset[0];
+            mLastTouchY -= mScrollOffset[1];
+            ev.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
+            mNestedOffsets[0] += mScrollOffset[0];
+            mNestedOffsets[1] += mScrollOffset[1];
+        } else if (ViewCompat.getOverScrollMode(this) != ViewCompat.OVER_SCROLL_NEVER) {
+            if (ev != null) {
+                pullGlows(ev.getX(), unconsumedX, ev.getY(), unconsumedY);
             }
             considerReleasingGlowsOnScroll(x, y);
         }
-        if (hresult != 0 || vresult != 0) {
-            dispatchOnScrolled(hresult, vresult);
+        if (consumedX != 0 || consumedY != 0) {
+            dispatchOnScrolled(consumedX, consumedY);
         }
         if (!awakenScrollBars()) {
             invalidate();
         }
-        return hresult != 0 || vresult != 0;
+        return consumedX != 0 || consumedY != 0;
     }
 
     /**
@@ -1432,19 +1580,31 @@ public boolean fling(int velocityX, int velocityY) {
                     "Call setLayoutManager with a non-null argument.");
             return false;
         }
+
         final boolean canScrollHorizontal = mLayout.canScrollHorizontally();
         final boolean canScrollVertical = mLayout.canScrollVertically();
+
         if (!canScrollHorizontal || Math.abs(velocityX) < mMinFlingVelocity) {
             velocityX = 0;
         }
         if (!canScrollVertical || Math.abs(velocityY) < mMinFlingVelocity) {
             velocityY = 0;
         }
-        velocityX = Math.max(-mMaxFlingVelocity, Math.min(velocityX, mMaxFlingVelocity));
-        velocityY = Math.max(-mMaxFlingVelocity, Math.min(velocityY, mMaxFlingVelocity));
-        if (velocityX != 0 || velocityY != 0) {
-            mViewFlinger.fling(velocityX, velocityY);
-            return true;
+        if (velocityX == 0 && velocityY == 0) {
+            // If we don't have any velocity, return false
+            return false;
+        }
+
+        if (!dispatchNestedPreFling(velocityX, velocityY)) {
+            final boolean canScroll = canScrollHorizontal || canScrollVertical;
+            dispatchNestedFling(velocityX, velocityY, canScroll);
+
+            if (canScroll) {
+                velocityX = Math.max(-mMaxFlingVelocity, Math.min(velocityX, mMaxFlingVelocity));
+                velocityY = Math.max(-mMaxFlingVelocity, Math.min(velocityY, mMaxFlingVelocity));
+                mViewFlinger.fling(velocityX, velocityY);
+                return true;
+            }
         }
         return false;
     }
@@ -1468,29 +1628,52 @@ private void stopScrollersInternal() {
         }
     }
 
+    /**
+     * Returns the minimum velocity to start a fling.
+     *
+     * @return The minimum velocity to start a fling
+     */
+    public int getMinFlingVelocity() {
+        return mMinFlingVelocity;
+    }
+
+
+    /**
+     * Returns the maximum fling velocity used by this RecyclerView.
+     *
+     * @return The maximum fling velocity used by this RecyclerView.
+     */
+    public int getMaxFlingVelocity() {
+        return mMaxFlingVelocity;
+    }
+
     /**
      * Apply a pull to relevant overscroll glow effects
      */
-    private void pullGlows(int x, int overscrollX, int y, int overscrollY) {
+    private void pullGlows(float x, float overscrollX, float y, float overscrollY) {
         boolean invalidate = false;
         if (overscrollX < 0) {
             ensureLeftGlow();
-            invalidate = mLeftGlow.onPull(-overscrollX / (float) getWidth(),
-                    1f - y  / (float) getHeight()) || invalidate;
+            if (mLeftGlow.onPull(-overscrollX / getWidth(), 1f - y  / getHeight())) {
+                invalidate = true;
+            }
         } else if (overscrollX > 0) {
             ensureRightGlow();
-            invalidate = mRightGlow.onPull(overscrollX / (float) getWidth(),
-                    y / (float) getHeight()) || invalidate;
+            if (mRightGlow.onPull(overscrollX / getWidth(), y / getHeight())) {
+                invalidate = true;
+            }
         }
 
         if (overscrollY < 0) {
             ensureTopGlow();
-            invalidate = mTopGlow.onPull(-overscrollY / (float) getHeight(),
-                    x / (float) getWidth()) || invalidate;
+            if (mTopGlow.onPull(-overscrollY / getHeight(), x / getWidth())) {
+                invalidate = true;
+            }
         } else if (overscrollY > 0) {
             ensureBottomGlow();
-            invalidate = mBottomGlow.onPull(overscrollY / (float) getHeight(),
-                    1f - x / (float) getWidth()) || invalidate;
+            if (mBottomGlow.onPull(overscrollY / getHeight(), 1f - x / getWidth())) {
+                invalidate = true;
+            }
         }
 
         if (invalidate || overscrollX != 0 || overscrollY != 0) {
@@ -1693,6 +1876,14 @@ protected void onDetachedFromWindow() {
         removeCallbacks(mItemAnimatorRunner);
     }
 
+    /**
+     * Returns true if RecyclerView is attached to window.
+     */
+    // @override
+    public boolean isAttachedToWindow() {
+        return mIsAttached;
+    }
+
     /**
      * Checks if RecyclerView is in the middle of a layout or scroll and throws an
      * {@link IllegalStateException} if it <b>is not</b>.
@@ -1739,6 +1930,7 @@ void assertNotInLayoutOrScroll(String message) {
      * for each incoming MotionEvent until the end of the gesture.</p>
      *
      * @param listener Listener to add
+     * @see SimpleOnItemTouchListener
      */
     public void addOnItemTouchListener(OnItemTouchListener listener) {
         mOnItemTouchListeners.add(listener);
@@ -1832,6 +2024,15 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
                     getParent().requestDisallowInterceptTouchEvent(true);
                     setScrollState(SCROLL_STATE_DRAGGING);
                 }
+
+                int nestedScrollAxis = ViewCompat.SCROLL_AXIS_NONE;
+                if (canScrollHorizontally) {
+                    nestedScrollAxis |= ViewCompat.SCROLL_AXIS_HORIZONTAL;
+                }
+                if (canScrollVertically) {
+                    nestedScrollAxis |= ViewCompat.SCROLL_AXIS_VERTICAL;
+                }
+                startNestedScroll(nestedScrollAxis);
                 break;
 
             case MotionEventCompat.ACTION_POINTER_DOWN:
@@ -1874,6 +2075,7 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
 
             case MotionEvent.ACTION_UP: {
                 mVelocityTracker.clear();
+                stopNestedScroll();
             } break;
 
             case MotionEvent.ACTION_CANCEL: {
@@ -1883,6 +2085,16 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
         return mScrollState == SCROLL_STATE_DRAGGING;
     }
 
+    @Override
+    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        final int listenerCount = mOnItemTouchListeners.size();
+        for (int i = 0; i < listenerCount; i++) {
+            final OnItemTouchListener listener = mOnItemTouchListeners.get(i);
+            listener.onRequestDisallowInterceptTouchEvent(disallowIntercept);
+        }
+        super.requestDisallowInterceptTouchEvent(disallowIntercept);
+    }
+
     @Override
     public boolean onTouchEvent(MotionEvent e) {
         if (dispatchOnItemTouch(e)) {
@@ -1898,14 +2110,29 @@ public boolean onTouchEvent(MotionEvent e) {
         }
         mVelocityTracker.addMovement(e);
 
+        final MotionEvent vtev = MotionEvent.obtain(e);
         final int action = MotionEventCompat.getActionMasked(e);
         final int actionIndex = MotionEventCompat.getActionIndex(e);
 
+        if (action == MotionEvent.ACTION_DOWN) {
+            mNestedOffsets[0] = mNestedOffsets[1] = 0;
+        }
+        vtev.offsetLocation(mNestedOffsets[0], mNestedOffsets[1]);
+
         switch (action) {
             case MotionEvent.ACTION_DOWN: {
                 mScrollPointerId = MotionEventCompat.getPointerId(e, 0);
                 mInitialTouchX = mLastTouchX = (int) (e.getX() + 0.5f);
                 mInitialTouchY = mLastTouchY = (int) (e.getY() + 0.5f);
+
+                int nestedScrollAxis = ViewCompat.SCROLL_AXIS_NONE;
+                if (canScrollHorizontally) {
+                    nestedScrollAxis |= ViewCompat.SCROLL_AXIS_HORIZONTAL;
+                }
+                if (canScrollVertically) {
+                    nestedScrollAxis |= ViewCompat.SCROLL_AXIS_VERTICAL;
+                }
+                startNestedScroll(nestedScrollAxis);
             } break;
 
             case MotionEventCompat.ACTION_POINTER_DOWN: {
@@ -1924,32 +2151,52 @@ public boolean onTouchEvent(MotionEvent e) {
 
                 final int x = (int) (MotionEventCompat.getX(e, index) + 0.5f);
                 final int y = (int) (MotionEventCompat.getY(e, index) + 0.5f);
+                int dx = mLastTouchX - x;
+                int dy = mLastTouchY - y;
+
+                if (dispatchNestedPreScroll(dx, dy, mScrollConsumed, mScrollOffset)) {
+                    dx -= mScrollConsumed[0];
+                    dy -= mScrollConsumed[1];
+                    vtev.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
+                    // Updated the nested offsets
+                    mNestedOffsets[0] += mScrollOffset[0];
+                    mNestedOffsets[1] += mScrollOffset[1];
+                }
+
                 if (mScrollState != SCROLL_STATE_DRAGGING) {
-                    final int dx = x - mInitialTouchX;
-                    final int dy = y - mInitialTouchY;
                     boolean startScroll = false;
                     if (canScrollHorizontally && Math.abs(dx) > mTouchSlop) {
-                        mLastTouchX = mInitialTouchX + mTouchSlop * (dx < 0 ? -1 : 1);
+                        if (dx > 0) {
+                            dx -= mTouchSlop;
+                        } else {
+                            dx += mTouchSlop;
+                        }
                         startScroll = true;
                     }
                     if (canScrollVertically && Math.abs(dy) > mTouchSlop) {
-                        mLastTouchY = mInitialTouchY + mTouchSlop * (dy < 0 ? -1 : 1);
+                        if (dy > 0) {
+                            dy -= mTouchSlop;
+                        } else {
+                            dy += mTouchSlop;
+                        }
                         startScroll = true;
                     }
                     if (startScroll) {
                         setScrollState(SCROLL_STATE_DRAGGING);
                     }
                 }
+
                 if (mScrollState == SCROLL_STATE_DRAGGING) {
-                    final int dx = x - mLastTouchX;
-                    final int dy = y - mLastTouchY;
-                    if (scrollByInternal(canScrollHorizontally ? -dx : 0,
-                            canScrollVertically ? -dy : 0, true, x, y)) {
+                    mLastTouchX = x - mScrollOffset[0];
+                    mLastTouchY = y - mScrollOffset[1];
+
+                    if (scrollByInternal(
+                            canScrollHorizontally ? dx : 0,
+                            canScrollVertically ? dy : 0,
+                            vtev)) {
                         getParent().requestDisallowInterceptTouchEvent(true);
                     }
                 }
-                mLastTouchX = x;
-                mLastTouchY = y;
             } break;
 
             case MotionEventCompat.ACTION_POINTER_UP: {
@@ -1965,6 +2212,7 @@ public boolean onTouchEvent(MotionEvent e) {
                 if (!((xvel != 0 || yvel != 0) && fling((int) xvel, (int) yvel))) {
                     setScrollState(SCROLL_STATE_IDLE);
                 }
+
                 mVelocityTracker.clear();
                 releaseGlows();
             } break;
@@ -1974,6 +2222,8 @@ public boolean onTouchEvent(MotionEvent e) {
             } break;
         }
 
+        vtev.recycle();
+
         return true;
     }
 
@@ -1981,6 +2231,7 @@ private void cancelTouch() {
         if (mVelocityTracker != null) {
             mVelocityTracker.clear();
         }
+        stopNestedScroll();
         releaseGlows();
         setScrollState(SCROLL_STATE_IDLE);
     }
@@ -2823,6 +3074,18 @@ protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
         return mLayout.generateLayoutParams(p);
     }
 
+    /**
+     * Returns true if RecyclerView is currently running some animations.
+     * <p>
+     * If you want to be notified when animations are finished, use
+     * {@link ItemAnimator#isRunning(ItemAnimator.ItemAnimatorFinishedListener)}.
+     *
+     * @return True if there are some item animations currently running or waiting to be started.
+     */
+    public boolean isAnimating() {
+        return mItemAnimator != null && mItemAnimator.isRunning();
+    }
+
     void saveOldPositions() {
         final int childCount = mChildHelper.getUnfilteredChildCount();
         for (int i = 0; i < childCount; i++) {
@@ -3232,6 +3495,11 @@ public View findChildViewUnder(float x, float y) {
         return null;
     }
 
+    @Override
+    public boolean drawChild(Canvas canvas, View child, long drawingTime) {
+        return super.drawChild(canvas, child, drawingTime);
+    }
+
     /**
      * Offset the bounds of all child views by <code>dy</code> pixels.
      * Useful for implementing simple scrolling in {@link LayoutManager LayoutManagers}.
@@ -5153,17 +5421,32 @@ public void notifyItemRangeRemoved(int positionStart, int itemCount) {
     }
 
     private void dispatchChildDetached(View child) {
-        if (mAdapter != null) {
-            mAdapter.onViewDetachedFromWindow(getChildViewHolderInt(child));
-        }
+        final ViewHolder viewHolder = getChildViewHolderInt(child);
         onChildDetachedFromWindow(child);
+        if (mAdapter != null && viewHolder != null) {
+            mAdapter.onViewDetachedFromWindow(viewHolder);
+        }
+        if (mOnChildAttachStateListeners != null) {
+            final int cnt = mOnChildAttachStateListeners.size();
+            for (int i = cnt - 1; i >= 0; i--) {
+                mOnChildAttachStateListeners.get(i).onChildViewDetachedFromWindow(child);
+            }
+        }
     }
 
     private void dispatchChildAttached(View child) {
-        if (mAdapter != null) {
-            mAdapter.onViewAttachedToWindow(getChildViewHolderInt(child));
-        }
+        final ViewHolder viewHolder = getChildViewHolderInt(child);
         onChildAttachedToWindow(child);
+        if (mAdapter != null && viewHolder != null) {
+            mAdapter.onViewAttachedToWindow(viewHolder);
+        }
+        if (mOnChildAttachStateListeners != null) {
+            final int cnt = mOnChildAttachStateListeners.size();
+            for (int i = cnt - 1; i >= 0; i--) {
+                mOnChildAttachStateListeners.get(i).onChildViewAttachedToWindow(child);
+            }
+        }
+
     }
 
     /**
@@ -5173,6 +5456,14 @@ private void dispatchChildAttached(View child) {
      * a <code>RecyclerView</code> can be used to implement a standard vertically scrolling list,
      * a uniform grid, staggered grids, horizontally scrolling collections and more. Several stock
      * layout managers are provided for general use.
+     * <p/>
+     * If the LayoutManager specifies a default constructor or one with the signature
+     * ({@link Context}, {@link AttributeSet}, {@code int}, {@code int}), RecyclerView will
+     * instantiate and set the LayoutManager when being inflated. Most used properties can
+     * be then obtained from {@link #getProperties(Context, AttributeSet, int, int)}. In case
+     * a LayoutManager specifies both constructors, the non-default constructor will take
+     * precedence.
+     *
      */
     public static abstract class LayoutManager {
         ChildHelper mChildHelper;
@@ -7259,6 +7550,20 @@ public boolean performAccessibilityActionForItem(Recycler recycler, State state,
                 int action, Bundle args) {
             return false;
         }
+
+        /**
+         * Some general properties that a LayoutManager may want to use.
+         */
+        public static class Properties {
+            /** @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation */
+            public int orientation;
+            /** @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_spanCount */
+            public int spanCount;
+            /** @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_reverseLayout */
+            public boolean reverseLayout;
+            /** @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_stackFromEnd */
+            public boolean stackFromEnd;
+        }
     }
 
     /**
@@ -7359,8 +7664,10 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
      * manipulation of item views within the RecyclerView. OnItemTouchListeners may intercept
      * a touch interaction already in progress even if the RecyclerView is already handling that
      * gesture stream itself for the purposes of scrolling.</p>
+     *
+     * @see SimpleOnItemTouchListener
      */
-    public interface OnItemTouchListener {
+    public static interface OnItemTouchListener {
         /**
          * Silently observe and/or take over touch events sent to the RecyclerView
          * before they are handled by either the RecyclerView itself or its child views.
@@ -7385,8 +7692,44 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
          *          the RecyclerView's coordinate system.
          */
         public void onTouchEvent(RecyclerView rv, MotionEvent e);
+
+        /**
+         * Called when a child of RecyclerView does not want RecyclerView and its ancestors to
+         * intercept touch events with
+         * {@link ViewGroup#onInterceptTouchEvent(MotionEvent)}.
+         *
+         * @param disallowIntercept True if the child does not want the parent to
+         *            intercept touch events.
+         * @see ViewParent#requestDisallowInterceptTouchEvent(boolean)
+         */
+        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept);
     }
 
+    /**
+     * An implementation of {@link RecyclerView.OnItemTouchListener} that has empty method bodies and
+     * default return values.
+     * <p>
+     * You may prefer to extend this class if you don't need to override all methods. Another
+     * benefit of using this class is future compatibility. As the interface may change, we'll
+     * always provide a default implementation on this class so that your code won't break when
+     * you update to a new version of the support library.
+     */
+    public class SimpleOnItemTouchListener implements RecyclerView.OnItemTouchListener {
+        @Override
+        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
+            return false;
+        }
+
+        @Override
+        public void onTouchEvent(RecyclerView rv, MotionEvent e) {
+        }
+
+        @Override
+        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        }
+    }
+
+
     /**
      * An OnScrollListener can be set on a RecyclerView to receive messages
      * when a scrolling event has occurred on that RecyclerView.
@@ -7399,7 +7742,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
      * want your components to be able to easily replace the listener use
      * RecyclerView#setOnScrollListener.
      */
-    abstract static public class OnScrollListener {
+    public abstract static class OnScrollListener {
         /**
          * Callback method to be invoked when RecyclerView's scroll state changes.
          *
@@ -7444,6 +7787,27 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
         public void onViewRecycled(ViewHolder holder);
     }
 
+    /**
+     * A Listener interface that can be attached to a RecylcerView to get notified
+     * whenever a ViewHolder is attached to or detached from RecyclerView.
+     */
+    public interface OnChildAttachStateChangeListener {
+
+        /**
+         * Called when a view is attached to the RecyclerView.
+         *
+         * @param view The View which is attached to the RecyclerView
+         */
+        public void onChildViewAttachedToWindow(View view);
+
+        /**
+         * Called when a view is detached from RecyclerView.
+         *
+         * @param view The View which is being detached from the RecyclerView
+         */
+        public void onChildViewDetachedFromWindow(View view);
+    }
+
     /**
      * A ViewHolder describes an item view and metadata about its place within the RecyclerView.
      *
@@ -7862,6 +8226,55 @@ private int getAdapterPositionFor(ViewHolder viewHolder) {
         return mAdapterHelper.applyPendingUpdatesToPosition(viewHolder.mPosition);
     }
 
+    // NestedScrollingChild
+
+    @Override
+    public void setNestedScrollingEnabled(boolean enabled) {
+        mScrollingChildHelper.setNestedScrollingEnabled(enabled);
+    }
+
+    @Override
+    public boolean isNestedScrollingEnabled() {
+        return mScrollingChildHelper.isNestedScrollingEnabled();
+    }
+
+    @Override
+    public boolean startNestedScroll(int axes) {
+        return mScrollingChildHelper.startNestedScroll(axes);
+    }
+
+    @Override
+    public void stopNestedScroll() {
+        mScrollingChildHelper.stopNestedScroll();
+    }
+
+    @Override
+    public boolean hasNestedScrollingParent() {
+        return mScrollingChildHelper.hasNestedScrollingParent();
+    }
+
+    @Override
+    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
+            int dyUnconsumed, int[] offsetInWindow) {
+        return mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,
+                dxUnconsumed, dyUnconsumed, offsetInWindow);
+    }
+
+    @Override
+    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
+        return mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
+    }
+
+    @Override
+    public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) {
+        return mScrollingChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);
+    }
+
+    @Override
+    public boolean dispatchNestedPreFling(float velocityX, float velocityY) {
+        return mScrollingChildHelper.dispatchNestedPreFling(velocityX, velocityY);
+    }
+
     /**
      * {@link android.view.ViewGroup.MarginLayoutParams LayoutParams} subclass for children of
      * {@link RecyclerView}. Custom {@link LayoutManager layout managers} are encouraged
@@ -9318,4 +9731,35 @@ public void onChangeFinished(ViewHolder item, boolean oldItem) {}
             this.bottom = bottom;
         }
     }
+
+    @Override
+    protected int getChildDrawingOrder(int childCount, int i) {
+        if (mChildDrawingOrderCallback == null) {
+            return super.getChildDrawingOrder(childCount, i);
+        } else {
+            return mChildDrawingOrderCallback.onGetChildDrawingOrder(childCount, i);
+        }
+    }
+
+    /**
+     * A callback interface that can be used to alter the drawing order of RecyclerView children.
+     * <p>
+     * It works using the {@link ViewGroup#getChildDrawingOrder(int, int)} method, so any case
+     * that applies to that method also applies to this callback. For example, changing the drawing
+     * order of two views will not have any effect if their elevation values are different since
+     * elevation overrides the result of this callback.
+     */
+    public static interface ChildDrawingOrderCallback {
+        /**
+         * Returns the index of the child to draw for this iteration. Override this
+         * if you want to change the drawing order of children. By default, it
+         * returns i.
+         *
+         * @param i The current iteration.
+         * @return The index of the child to draw this iteration.
+         *
+         * @see RecyclerView#setChildDrawingOrderCallback(RecyclerView.ChildDrawingOrderCallback)
+         */
+        public int onGetChildDrawingOrder(int childCount, int i);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/StaggeredGridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/StaggeredGridLayoutManager.java
index d28434a60..166311dab 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/StaggeredGridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/StaggeredGridLayoutManager.java
@@ -537,7 +537,6 @@ public boolean getReverseLayout() {
     @Override
     public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
         ensureOrientationHelper();
-
         final AnchorInfo anchorInfo = mAnchorInfo;
         anchorInfo.reset();
 
@@ -577,21 +576,22 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
         detachAndScrapAttachedViews(recycler);
         mLaidOutInvalidFullSpan = false;
         updateMeasureSpecs();
+        updateLayoutState(anchorInfo.mPosition, state);
         if (anchorInfo.mLayoutFromEnd) {
             // Layout start.
-            updateLayoutStateToFillStart(anchorInfo.mPosition, state);
+            setLayoutStateDirection(LAYOUT_START);
             fill(recycler, mLayoutState, state);
             // Layout end.
-            updateLayoutStateToFillEnd(anchorInfo.mPosition, state);
-            mLayoutState.mCurrentPosition += mLayoutState.mItemDirection;
+            setLayoutStateDirection(LAYOUT_END);
+            mLayoutState.mCurrentPosition = anchorInfo.mPosition + mLayoutState.mItemDirection;
             fill(recycler, mLayoutState, state);
         } else {
             // Layout end.
-            updateLayoutStateToFillEnd(anchorInfo.mPosition, state);
+            setLayoutStateDirection(LAYOUT_END);
             fill(recycler, mLayoutState, state);
             // Layout start.
-            updateLayoutStateToFillStart(anchorInfo.mPosition, state);
-            mLayoutState.mCurrentPosition += mLayoutState.mItemDirection;
+            setLayoutStateDirection(LAYOUT_START);
+            mLayoutState.mCurrentPosition = anchorInfo.mPosition + mLayoutState.mItemDirection;
             fill(recycler, mLayoutState, state);
         }
 
@@ -1254,40 +1254,37 @@ private void fixStartGap(RecyclerView.Recycler recycler, RecyclerView.State stat
         }
     }
 
-    private void updateLayoutStateToFillStart(int anchorPosition, RecyclerView.State state) {
+    private void updateLayoutState(int anchorPosition, RecyclerView.State state) {
         mLayoutState.mAvailable = 0;
         mLayoutState.mCurrentPosition = anchorPosition;
+        int startExtra = 0;
+        int endExtra = 0;
         if (isSmoothScrolling()) {
             final int targetPos = state.getTargetScrollPosition();
-            if (mShouldReverseLayout == targetPos < anchorPosition) {
-                mLayoutState.mExtra = 0;
-            } else {
-                mLayoutState.mExtra = mPrimaryOrientation.getTotalSpace();
+            if (targetPos != NO_POSITION) {
+                if (mShouldReverseLayout == targetPos < anchorPosition) {
+                    endExtra = mPrimaryOrientation.getTotalSpace();
+                } else {
+                    startExtra = mPrimaryOrientation.getTotalSpace();
+                }
             }
-        } else {
-            mLayoutState.mExtra = 0;
         }
-        mLayoutState.mLayoutDirection = LAYOUT_START;
-        mLayoutState.mItemDirection = mShouldReverseLayout ? ITEM_DIRECTION_TAIL
-                : ITEM_DIRECTION_HEAD;
-    }
 
-    private void updateLayoutStateToFillEnd(int anchorPosition, RecyclerView.State state) {
-        mLayoutState.mAvailable = 0;
-        mLayoutState.mCurrentPosition = anchorPosition;
-        if (isSmoothScrolling()) {
-            final int targetPos = state.getTargetScrollPosition();
-            if (mShouldReverseLayout == targetPos > anchorPosition) {
-                mLayoutState.mExtra = 0;
-            } else {
-                mLayoutState.mExtra = mPrimaryOrientation.getTotalSpace();
-            }
+        // Line of the furthest row.
+        final boolean clipToPadding = getClipToPadding();
+        if (clipToPadding) {
+            mLayoutState.mStartLine = mPrimaryOrientation.getStartAfterPadding() - startExtra;
+            mLayoutState.mEndLine = mPrimaryOrientation.getEndAfterPadding() + endExtra;
         } else {
-            mLayoutState.mExtra = 0;
+            mLayoutState.mEndLine = mPrimaryOrientation.getEnd() + endExtra;
+            mLayoutState.mStartLine = -startExtra;
         }
-        mLayoutState.mLayoutDirection = LAYOUT_END;
-        mLayoutState.mItemDirection = mShouldReverseLayout ? ITEM_DIRECTION_HEAD
-                : ITEM_DIRECTION_TAIL;
+    }
+
+    private void setLayoutStateDirection(int direction) {
+        mLayoutState.mLayoutDirection = direction;
+        mLayoutState.mItemDirection = (mShouldReverseLayout == (direction == LAYOUT_START)) ?
+                ITEM_DIRECTION_TAIL : ITEM_DIRECTION_HEAD;
     }
 
     @Override
@@ -1383,31 +1380,25 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
         mRemainingSpans.set(0, mSpanCount, true);
         // The target position we are trying to reach.
         final int targetLine;
-        /*
-        * The line until which we can recycle, as long as we add views.
-        * Keep in mind, it is still the line in layout direction which means; to calculate the
-        * actual recycle line, we should subtract/add the size in orientation.
-        */
-        final int recycleLine;
+
         // Line of the furthest row.
         if (layoutState.mLayoutDirection == LAYOUT_END) {
-            // ignore padding for recycler
-            recycleLine = mPrimaryOrientation.getEndAfterPadding() + mLayoutState.mAvailable;
-            targetLine = recycleLine + mLayoutState.mExtra + mPrimaryOrientation.getEndPadding();
-
+            targetLine = layoutState.mEndLine + layoutState.mAvailable;
         } else { // LAYOUT_START
-            // ignore padding for recycler
-            recycleLine = mPrimaryOrientation.getStartAfterPadding() - mLayoutState.mAvailable;
-            targetLine = recycleLine - mLayoutState.mExtra -
-                    mPrimaryOrientation.getStartAfterPadding();
+            targetLine = layoutState.mStartLine - layoutState.mAvailable;
         }
+
         updateAllRemainingSpans(layoutState.mLayoutDirection, targetLine);
+        if (DEBUG) {
+            Log.d(TAG, "FILLING targetLine: " + targetLine + "," +
+                    "remaining spans:" + mRemainingSpans + ", state: " + layoutState);
+        }
 
         // the default coordinate to add new view.
         final int defaultNewViewLine = mShouldReverseLayout
                 ? mPrimaryOrientation.getEndAfterPadding()
                 : mPrimaryOrientation.getStartAfterPadding();
-
+        boolean added = false;
         while (layoutState.hasMore(state) && !mRemainingSpans.isEmpty()) {
             View view = layoutState.next(recycler);
             LayoutParams lp = ((LayoutParams) view.getLayoutParams());
@@ -1500,18 +1491,21 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
             } else {
                 updateRemainingSpans(currentSpan, mLayoutState.mLayoutDirection, targetLine);
             }
-            recycle(recycler, mLayoutState, currentSpan, recycleLine);
+            recycle(recycler, mLayoutState);
+            added = true;
         }
-        if (DEBUG) {
-            Log.d(TAG, "fill, " + getChildCount());
+        if (!added) {
+            recycle(recycler, mLayoutState);
         }
+        final int diff;
         if (mLayoutState.mLayoutDirection == LAYOUT_START) {
             final int minStart = getMinStart(mPrimaryOrientation.getStartAfterPadding());
-            return Math.max(0, mLayoutState.mAvailable + (recycleLine - minStart));
+            diff = mPrimaryOrientation.getStartAfterPadding() - minStart;
         } else {
-            final int max = getMaxEnd(mPrimaryOrientation.getEndAfterPadding());
-            return Math.max(0, mLayoutState.mAvailable + (max - recycleLine));
+            final int maxEnd = getMaxEnd(mPrimaryOrientation.getEndAfterPadding());
+            diff = maxEnd - mPrimaryOrientation.getEndAfterPadding();
         }
+        return diff > 0 ? Math.min(layoutState.mAvailable, diff) : 0;
     }
 
     private LazySpanLookup.FullSpanItem createFullSpanItemFromEnd(int newItemTop) {
@@ -1548,19 +1542,40 @@ private void attachViewToSpans(View view, LayoutParams lp, LayoutState layoutSta
         }
     }
 
-    private void recycle(RecyclerView.Recycler recycler, LayoutState layoutState,
-            Span updatedSpan, int recycleLine) {
-        if (layoutState.mLayoutDirection == LAYOUT_START) {
-            // calculate recycle line
-            int maxStart = getMaxStart(updatedSpan.getStartLine());
-            recycleFromEnd(recycler, Math.max(recycleLine, maxStart) +
-                    (mPrimaryOrientation.getEnd() - mPrimaryOrientation.getStartAfterPadding()));
+    private void recycle(RecyclerView.Recycler recycler, LayoutState layoutState) {
+        if (layoutState.mAvailable == 0) {
+            // easy, recycle line is still valid
+            if (layoutState.mLayoutDirection == LAYOUT_START) {
+                recycleFromEnd(recycler, layoutState.mEndLine);
+            } else {
+                recycleFromStart(recycler, layoutState.mStartLine);
+            }
         } else {
-            // calculate recycle line
-            int minEnd = getMinEnd(updatedSpan.getEndLine());
-            recycleFromStart(recycler, Math.min(recycleLine, minEnd) -
-                    (mPrimaryOrientation.getEnd() - mPrimaryOrientation.getStartAfterPadding()));
+            // scrolling case, recycle line can be shifted by how much space we could cover
+            // by adding new views
+            if (layoutState.mLayoutDirection == LAYOUT_START) {
+                // calculate recycle line
+                int scrolled = layoutState.mStartLine - getMaxStart(layoutState.mStartLine);
+                final int line;
+                if (scrolled < 0) {
+                    line = layoutState.mEndLine;
+                } else {
+                    line = layoutState.mEndLine - Math.min(scrolled, layoutState.mAvailable);
+                }
+                recycleFromEnd(recycler, line);
+            } else {
+                // calculate recycle line
+                int scrolled = getMinEnd(layoutState.mEndLine) - layoutState.mEndLine;
+                final int line;
+                if (scrolled < 0) {
+                    line = layoutState.mStartLine;
+                } else {
+                    line = layoutState.mStartLine + Math.min(scrolled, layoutState.mAvailable);
+                }
+                recycleFromStart(recycler, line);
+            }
         }
+
     }
 
     private void appendViewToAllSpans(View view) {
@@ -1602,12 +1617,12 @@ private void updateRemainingSpans(Span span, int layoutDir, int targetLine) {
         final int deletedSize = span.getDeletedSize();
         if (layoutDir == LAYOUT_START) {
             final int line = span.getStartLine();
-            if (line + deletedSize < targetLine) {
+            if (line + deletedSize <= targetLine) {
                 mRemainingSpans.set(span.mIndex, false);
             }
         } else {
             final int line = span.getEndLine();
-            if (line - deletedSize > targetLine) {
+            if (line - deletedSize >= targetLine) {
                 mRemainingSpans.set(span.mIndex, false);
             }
         }
@@ -1678,18 +1693,24 @@ private int getMinEnd(int def) {
     }
 
     private void recycleFromStart(RecyclerView.Recycler recycler, int line) {
-        if (DEBUG) {
-            Log.d(TAG, "recycling from start for line " + line);
-        }
         while (getChildCount() > 0) {
             View child = getChildAt(0);
-            if (mPrimaryOrientation.getDecoratedEnd(child) < line) {
+            if (mPrimaryOrientation.getDecoratedEnd(child) <= line) {
                 LayoutParams lp = (LayoutParams) child.getLayoutParams();
+                // Don't recycle the last View in a span not to lose span's start/end lines
                 if (lp.mFullSpan) {
+                    for (int j = 0; j < mSpanCount; j++) {
+                        if (mSpans[j].mViews.size() == 1) {
+                            return;
+                        }
+                    }
                     for (int j = 0; j < mSpanCount; j++) {
                         mSpans[j].popStart();
                     }
                 } else {
+                    if (lp.mSpan.mViews.size() == 1) {
+                        return;
+                    }
                     lp.mSpan.popStart();
                 }
                 removeAndRecycleView(child, recycler);
@@ -1704,13 +1725,22 @@ private void recycleFromEnd(RecyclerView.Recycler recycler, int line) {
         int i;
         for (i = childCount - 1; i >= 0; i--) {
             View child = getChildAt(i);
-            if (mPrimaryOrientation.getDecoratedStart(child) > line) {
+            if (mPrimaryOrientation.getDecoratedStart(child) >= line) {
                 LayoutParams lp = (LayoutParams) child.getLayoutParams();
+                // Don't recycle the last View in a span not to lose span's start/end lines
                 if (lp.mFullSpan) {
+                    for (int j = 0; j < mSpanCount; j++) {
+                        if (mSpans[j].mViews.size() == 1) {
+                            return;
+                        }
+                    }
                     for (int j = 0; j < mSpanCount; j++) {
                         mSpans[j].popEnd();
                     }
                 } else {
+                    if (lp.mSpan.mViews.size() == 1) {
+                        return;
+                    }
                     lp.mSpan.popEnd();
                 }
                 removeAndRecycleView(child, recycler);
@@ -1860,21 +1890,19 @@ public void scrollToPositionWithOffset(int position, int offset) {
     int scrollBy(int dt, RecyclerView.Recycler recycler, RecyclerView.State state) {
         ensureOrientationHelper();
         final int referenceChildPosition;
+        final int layoutDir;
         if (dt > 0) { // layout towards end
-            mLayoutState.mLayoutDirection = LAYOUT_END;
-            mLayoutState.mItemDirection = mShouldReverseLayout ? ITEM_DIRECTION_HEAD
-                    : ITEM_DIRECTION_TAIL;
+            layoutDir = LAYOUT_END;
             referenceChildPosition = getLastChildPosition();
         } else {
-            mLayoutState.mLayoutDirection = LAYOUT_START;
-            mLayoutState.mItemDirection = mShouldReverseLayout ? ITEM_DIRECTION_TAIL
-                    : ITEM_DIRECTION_HEAD;
+            layoutDir = LAYOUT_START;
             referenceChildPosition = getFirstChildPosition();
         }
+        updateLayoutState(referenceChildPosition, state);
+        setLayoutStateDirection(layoutDir);
         mLayoutState.mCurrentPosition = referenceChildPosition + mLayoutState.mItemDirection;
         final int absDt = Math.abs(dt);
         mLayoutState.mAvailable = absDt;
-        mLayoutState.mExtra = isSmoothScrolling() ? mPrimaryOrientation.getTotalSpace() : 0;
         int consumed = fill(recycler, mLayoutState, state);
         final int totalScroll;
         if (absDt < consumed) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchHelper.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchHelper.java
new file mode 100644
index 000000000..c3ab9bd3c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchHelper.java
@@ -0,0 +1,2331 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.android.support.widget.helper;
+
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.os.Build;
+import android.support.v4.animation.ValueAnimatorCompat;
+import android.support.v4.animation.AnimatorCompatHelper;
+import android.support.v4.animation.AnimatorListenerCompat;
+import android.support.v4.animation.AnimatorUpdateListenerCompat;
+import android.support.v4.view.GestureDetectorCompat;
+import android.support.v4.view.MotionEventCompat;
+import android.support.v4.view.VelocityTrackerCompat;
+import android.support.v4.view.ViewCompat;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.support.widget.LinearLayoutManager;
+import org.telegram.android.support.widget.RecyclerView;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.GestureDetector;
+import android.view.HapticFeedbackConstants;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewParent;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.telegram.android.support.widget.RecyclerView.OnItemTouchListener;
+import org.telegram.android.support.widget.RecyclerView.ViewHolder;
+import android.view.animation.Interpolator;
+
+/**
+ * This is a utility class to add swipe to dismiss and drag & drop support to RecyclerView.
+ * <p>
+ * It works with a RecyclerView and a Callback class, which configures what type of interactions
+ * are enabled and also receives events when user performs these actions.
+ * <p>
+ * Depending on which functionality you support, you should override
+ * {@link Callback#onMove(RecyclerView, ViewHolder, ViewHolder)} and / or
+ * {@link Callback#onSwiped(ViewHolder, int)}.
+ * <p>
+ * This class is designed to work with any LayoutManager but for certain situations, it can be
+ * optimized for your custom LayoutManager by extending methods in the
+ * {@link ItemTouchHelper.Callback} class or implementing {@link ItemTouchHelper.ViewDropHandler}
+ * interface in your LayoutManager.
+ * <p>
+ * By default, ItemTouchHelper moves the items' translateX/Y properties to reposition them. On
+ * platforms older than Honeycomb, ItemTouchHelper uses canvas translations and View's visibility
+ * property to move items in response to touch events. You can customize these behaviors by
+ * overriding {@link Callback#onChildDraw(Canvas, RecyclerView, ViewHolder, float, float, int,
+ * boolean)}
+ * or {@link Callback#onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
+ * boolean)}.
+ * <p/>
+ * Most of the time, you only need to override <code>onChildDraw</code> but due to limitations of
+ * platform prior to Honeycomb, you may need to implement <code>onChildDrawOver</code> as well.
+ */
+public class ItemTouchHelper extends RecyclerView.ItemDecoration
+        implements RecyclerView.OnChildAttachStateChangeListener {
+
+    /**
+     * Up direction, used for swipe & drag control.
+     */
+    public static final int UP = 1;
+
+    /**
+     * Down direction, used for swipe & drag control.
+     */
+    public static final int DOWN = 1 << 1;
+
+    /**
+     * Left direction, used for swipe & drag control.
+     */
+    public static final int LEFT = 1 << 2;
+
+    /**
+     * Right direction, used for swipe & drag control.
+     */
+    public static final int RIGHT = 1 << 3;
+
+    // If you change these relative direction values, update Callback#convertToAbsoluteDirection,
+    // Callback#convertToRelativeDirection.
+    /**
+     * Horizontal start direction. Resolved to LEFT or RIGHT depending on RecyclerView's layout
+     * direction. Used for swipe & drag control.
+     */
+    public static final int START = LEFT << 2;
+
+    /**
+     * Horizontal end direction. Resolved to LEFT or RIGHT depending on RecyclerView's layout
+     * direction. Used for swipe & drag control.
+     */
+    public static final int END = RIGHT << 2;
+
+    /**
+     * ItemTouchHelper is in idle state. At this state, either there is no related motion event by
+     * the user or latest motion events have not yet triggered a swipe or drag.
+     */
+    public static final int ACTION_STATE_IDLE = 0;
+
+    /**
+     * A View is currently being swiped.
+     */
+    public static final int ACTION_STATE_SWIPE = 1;
+
+    /**
+     * A View is currently being dragged.
+     */
+    public static final int ACTION_STATE_DRAG = 2;
+
+    /**
+     * Animation type for views which are swiped successfully.
+     */
+    public static final int ANIMATION_TYPE_SWIPE_SUCCESS = 1 << 1;
+
+    /**
+     * Animation type for views which are not completely swiped thus will animate back to their
+     * original position.
+     */
+    public static final int ANIMATION_TYPE_SWIPE_CANCEL = 1 << 2;
+
+    /**
+     * Animation type for views that were dragged and now will animate to their final position.
+     */
+    public static final int ANIMATION_TYPE_DRAG = 1 << 3;
+
+    private static final String TAG = "ItemTouchHelper";
+
+    private static final boolean DEBUG = false;
+
+    private static final int ACTIVE_POINTER_ID_NONE = -1;
+
+    private static final int DIRECTION_FLAG_COUNT = 8;
+
+    private static final int ACTION_MODE_IDLE_MASK = (1 << DIRECTION_FLAG_COUNT) - 1;
+
+    private static final int ACTION_MODE_SWIPE_MASK = ACTION_MODE_IDLE_MASK << DIRECTION_FLAG_COUNT;
+
+    private static final int ACTION_MODE_DRAG_MASK = ACTION_MODE_SWIPE_MASK << DIRECTION_FLAG_COUNT;
+
+    /**
+     * Views, whose state should be cleared after they are detached from RecyclerView.
+     * This is necessary after swipe dismissing an item. We wait until animator finishes its job
+     * to clean these views.
+     */
+    final List<View> mPendingCleanup = new ArrayList<View>();
+
+    /**
+     * Re-use array to calculate dx dy for a ViewHolder
+     */
+    private final float[] mTmpPosition = new float[2];
+
+    /**
+     * Currently selected view holder
+     */
+    ViewHolder mSelected = null;
+
+    /**
+     * The reference coordinates for the action start. For drag & drop, this is the time long
+     * press is completed vs for swipe, this is the initial touch point.
+     */
+    float mInitialTouchX;
+
+    float mInitialTouchY;
+
+    /**
+     * The diff between the last event and initial touch.
+     */
+    float mDx;
+
+    float mDy;
+
+    /**
+     * The coordinates of the selected view at the time it is selected. We record these values
+     * when action starts so that we can consistently position it even if LayoutManager moves the
+     * View.
+     */
+    float mSelectedStartX;
+
+    float mSelectedStartY;
+
+    /**
+     * The pointer we are tracking.
+     */
+    int mActivePointerId = ACTIVE_POINTER_ID_NONE;
+
+    /**
+     * Developer callback which controls the behavior of ItemTouchHelper.
+     */
+    Callback mCallback;
+
+    /**
+     * Current mode.
+     */
+    int mActionState = ACTION_STATE_IDLE;
+
+    /**
+     * The direction flags obtained from unmasking
+     * {@link Callback#getAbsoluteMovementFlags(RecyclerView, ViewHolder)} for the current
+     * action state.
+     */
+    int mSelectedFlags;
+
+    /**
+     * When a View is dragged or swiped and needs to go back to where it was, we create a Recover
+     * Animation and animate it to its location using this custom Animator, instead of using
+     * framework Animators.
+     * Using framework animators has the side effect of clashing with ItemAnimator, creating
+     * jumpy UIs.
+     */
+    List<RecoverAnimation> mRecoverAnimations = new ArrayList<RecoverAnimation>();
+
+    private int mSlop;
+
+    private RecyclerView mRecyclerView;
+
+    /**
+     * When user drags a view to the edge, we start scrolling the LayoutManager as long as View
+     * is partially out of bounds.
+     */
+    private final Runnable mScrollRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (mSelected != null && scrollIfNecessary()) {
+                if (mSelected != null) { //it might be lost during scrolling
+                    moveIfNecessary(mSelected);
+                }
+                mRecyclerView.removeCallbacks(mScrollRunnable);
+                ViewCompat.postOnAnimation(mRecyclerView, this);
+            }
+        }
+    };
+
+    /**
+     * Used for detecting fling swipe
+     */
+    private VelocityTracker mVelocityTracker;
+
+    //re-used list for selecting a swap target
+    private List<ViewHolder> mSwapTargets;
+
+    //re used for for sorting swap targets
+    private List<Integer> mDistances;
+
+    /**
+     * If drag & drop is supported, we use child drawing order to bring them to front.
+     */
+    private RecyclerView.ChildDrawingOrderCallback mChildDrawingOrderCallback = null;
+
+    /**
+     * This keeps a reference to the child dragged by the user. Even after user stops dragging,
+     * until view reaches its final position (end of recover animation), we keep a reference so
+     * that it can be drawn above other children.
+     */
+    private View mOverdrawChild = null;
+
+    /**
+     * We cache the position of the overdraw child to avoid recalculating it each time child
+     * position callback is called. This value is invalidated whenever a child is attached or
+     * detached.
+     */
+    private int mOverdrawChildPosition = -1;
+
+    /**
+     * Used to detect long press.
+     */
+    private GestureDetectorCompat mGestureDetector;
+
+    private final OnItemTouchListener mOnItemTouchListener
+            = new OnItemTouchListener() {
+        @Override
+        public boolean onInterceptTouchEvent(RecyclerView recyclerView, MotionEvent event) {
+            mGestureDetector.onTouchEvent(event);
+            if (DEBUG) {
+                Log.d(TAG, "intercept: x:" + event.getX() + ",y:" + event.getY() + ", " + event);
+            }
+            final int action = MotionEventCompat.getActionMasked(event);
+            if (action == MotionEvent.ACTION_DOWN) {
+                mActivePointerId = MotionEventCompat.getPointerId(event, 0);
+                mInitialTouchX = event.getX();
+                mInitialTouchY = event.getY();
+                obtainVelocityTracker();
+                if (mSelected == null) {
+                    final RecoverAnimation animation = findAnimation(event);
+                    if (animation != null) {
+                        mInitialTouchX -= animation.mX;
+                        mInitialTouchY -= animation.mY;
+                        endRecoverAnimation(animation.mViewHolder, true);
+                        if (mPendingCleanup.remove(animation.mViewHolder.itemView)) {
+                            mCallback.clearView(mRecyclerView, animation.mViewHolder);
+                        }
+                        select(animation.mViewHolder, animation.mActionState);
+                        updateDxDy(event, mSelectedFlags, 0);
+                    }
+                }
+            } else if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
+                mActivePointerId = ACTIVE_POINTER_ID_NONE;
+                select(null, ACTION_STATE_IDLE);
+            } else if (mActivePointerId != ACTIVE_POINTER_ID_NONE) {
+                // in a non scroll orientation, if distance change is above threshold, we
+                // can select the item
+                final int index = MotionEventCompat.findPointerIndex(event, mActivePointerId);
+                if (DEBUG) {
+                    Log.d(TAG, "pointer index " + index);
+                }
+                if (index >= 0) {
+                    checkSelectForSwipe(action, event, index);
+                }
+            }
+            if (mVelocityTracker != null) {
+                mVelocityTracker.addMovement(event);
+            }
+            return mSelected != null;
+        }
+
+        @Override
+        public void onTouchEvent(RecyclerView recyclerView, MotionEvent event) {
+            mGestureDetector.onTouchEvent(event);
+            if (DEBUG) {
+                Log.d(TAG,
+                        "on touch: x:" + mInitialTouchX + ",y:" + mInitialTouchY + ", :" + event);
+            }
+            if (mVelocityTracker != null) {
+                mVelocityTracker.addMovement(event);
+            }
+            if (mActivePointerId == ACTIVE_POINTER_ID_NONE) {
+                return;
+            }
+            final int action = MotionEventCompat.getActionMasked(event);
+            final int activePointerIndex = MotionEventCompat
+                    .findPointerIndex(event, mActivePointerId);
+            if (activePointerIndex >= 0) {
+                checkSelectForSwipe(action, event, activePointerIndex);
+            }
+            ViewHolder viewHolder = mSelected;
+            if (viewHolder == null) {
+                return;
+            }
+            switch (action) {
+                case MotionEvent.ACTION_MOVE: {
+                    // Find the index of the active pointer and fetch its position
+                    if (activePointerIndex >= 0) {
+                        updateDxDy(event, mSelectedFlags, activePointerIndex);
+                        moveIfNecessary(viewHolder);
+                        mRecyclerView.removeCallbacks(mScrollRunnable);
+                        mScrollRunnable.run();
+                        mRecyclerView.invalidate();
+                    }
+                    break;
+                }
+                case MotionEvent.ACTION_CANCEL:
+                case MotionEvent.ACTION_UP:
+                    if (mVelocityTracker != null) {
+                        mVelocityTracker
+                                .computeCurrentVelocity(1000, mRecyclerView.getMaxFlingVelocity());
+                    }
+                    select(null, ACTION_STATE_IDLE);
+                    mActivePointerId = ACTIVE_POINTER_ID_NONE;
+                    break;
+                case MotionEvent.ACTION_POINTER_UP: {
+                    final int pointerIndex = MotionEventCompat.getActionIndex(event);
+                    final int pointerId = MotionEventCompat.getPointerId(event, pointerIndex);
+                    if (pointerId == mActivePointerId) {
+                        if (mVelocityTracker != null) {
+                            mVelocityTracker
+                                    .computeCurrentVelocity(1000,
+                                            mRecyclerView.getMaxFlingVelocity());
+                        }
+                        // This was our active pointer going up. Choose a new
+                        // active pointer and adjust accordingly.
+                        final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
+                        mActivePointerId = MotionEventCompat.getPointerId(event, newPointerIndex);
+                        updateDxDy(event, mSelectedFlags, pointerIndex);
+                    }
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+            if (!disallowIntercept) {
+                return;
+            }
+            select(null, ACTION_STATE_IDLE);
+        }
+    };
+
+    /**
+     * Temporary rect instance that is used when we need to lookup Item decorations.
+     */
+    private Rect mTmpRect;
+
+    /**
+     * When user started to drag scroll. Reset when we don't scroll
+     */
+    private long mDragScrollStartTimeInMs;
+
+    /**
+     * Creates an ItemTouchHelper that will work with the given Callback.
+     * <p>
+     * You can attach ItemTouchHelper to a RecyclerView via
+     * {@link #attachToRecyclerView(RecyclerView)}. Upon attaching, it will add an item decoration,
+     * an onItemTouchListener and a Child attach / detach listener to the RecyclerView.
+     *
+     * @param callback The Callback which controls the behavior of this touch helper.
+     */
+    public ItemTouchHelper(Callback callback) {
+        mCallback = callback;
+    }
+
+    private static boolean hitTest(View child, float x, float y, float left, float top) {
+        return x >= left &&
+                x <= left + child.getWidth() &&
+                y >= top &&
+                y <= top + child.getHeight();
+    }
+
+    /**
+     * Attaches the ItemTouchHelper to the provided RecyclerView. If TouchHelper is already
+     * attached
+     * to a RecyclerView, it will first detach from the previous one.
+     *
+     * @param recyclerView The RecyclerView instance to which you want to add this helper.
+     */
+    public void attachToRecyclerView(RecyclerView recyclerView) {
+        if (mRecyclerView == recyclerView) {
+            return; // nothing to do
+        }
+        if (mRecyclerView != null) {
+            destroyCallbacks();
+        }
+        mRecyclerView = recyclerView;
+        if (mRecyclerView != null) {
+            setupCallbacks();
+        }
+    }
+
+    private void setupCallbacks() {
+        ViewConfiguration vc = ViewConfiguration.get(mRecyclerView.getContext());
+        mSlop = vc.getScaledTouchSlop();
+        mRecyclerView.addItemDecoration(this);
+        mRecyclerView.addOnItemTouchListener(mOnItemTouchListener);
+        mRecyclerView.addOnChildAttachStateChangeListener(this);
+        initGestureDetector();
+    }
+
+    private void destroyCallbacks() {
+        mRecyclerView.removeItemDecoration(this);
+        mRecyclerView.removeOnItemTouchListener(mOnItemTouchListener);
+        mRecyclerView.removeOnChildAttachStateChangeListener(this);
+        // clean all attached
+        final int recoverAnimSize = mRecoverAnimations.size();
+        for (int i = recoverAnimSize - 1; i >= 0; i--) {
+            final RecoverAnimation recoverAnimation = mRecoverAnimations.get(0);
+            mCallback.clearView(mRecyclerView, recoverAnimation.mViewHolder);
+        }
+        mRecoverAnimations.clear();
+        mOverdrawChild = null;
+        mOverdrawChildPosition = -1;
+        releaseVelocityTracker();
+    }
+
+    private void initGestureDetector() {
+        if (mGestureDetector != null) {
+            return;
+        }
+        mGestureDetector = new GestureDetectorCompat(mRecyclerView.getContext(),
+                new ItemTouchHelperGestureListener());
+    }
+
+    private void getSelectedDxDy(float[] outPosition) {
+        if ((mSelectedFlags & (LEFT | RIGHT)) != 0) {
+            outPosition[0] = mSelectedStartX + mDx - mSelected.itemView.getLeft();
+        } else {
+            outPosition[0] = ViewCompat.getTranslationX(mSelected.itemView);
+        }
+        if ((mSelectedFlags & (UP | DOWN)) != 0) {
+            outPosition[1] = mSelectedStartY + mDy - mSelected.itemView.getTop();
+        } else {
+            outPosition[1] = ViewCompat.getTranslationY(mSelected.itemView);
+        }
+    }
+
+    @Override
+    public void onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state) {
+        float dx = 0, dy = 0;
+        if (mSelected != null) {
+            getSelectedDxDy(mTmpPosition);
+            dx = mTmpPosition[0];
+            dy = mTmpPosition[1];
+        }
+        mCallback.onDrawOver(c, parent, mSelected,
+                mRecoverAnimations, mActionState, dx, dy);
+    }
+
+    @Override
+    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
+        // we don't know if RV changed something so we should invalidate this index.
+        mOverdrawChildPosition = -1;
+        float dx = 0, dy = 0;
+        if (mSelected != null) {
+            getSelectedDxDy(mTmpPosition);
+            dx = mTmpPosition[0];
+            dy = mTmpPosition[1];
+        }
+        mCallback.onDraw(c, parent, mSelected,
+                mRecoverAnimations, mActionState, dx, dy);
+    }
+
+    /**
+     * Starts dragging or swiping the given View. Call with null if you want to clear it.
+     *
+     * @param selected    The ViewHolder to drag or swipe. Can be null if you want to cancel the
+     *                    current action
+     * @param actionState The type of action
+     */
+    private void select(ViewHolder selected, int actionState) {
+        if (selected == mSelected && actionState == mActionState) {
+            return;
+        }
+        mDragScrollStartTimeInMs = Long.MIN_VALUE;
+        final int prevActionState = mActionState;
+        // prevent duplicate animations
+        endRecoverAnimation(selected, true);
+        mActionState = actionState;
+        if (actionState == ACTION_STATE_DRAG) {
+            // we remove after animation is complete. this means we only elevate the last drag
+            // child but that should perform good enough as it is very hard to start dragging a
+            // new child before the previous one settles.
+            mOverdrawChild = selected.itemView;
+            addChildDrawingOrderCallback();
+        }
+        int actionStateMask = (1 << (DIRECTION_FLAG_COUNT + DIRECTION_FLAG_COUNT * actionState))
+                - 1;
+        boolean preventLayout = false;
+
+        if (mSelected != null) {
+            final ViewHolder prevSelected = mSelected;
+            if (prevSelected.itemView.getParent() != null) {
+                final int swipeDir = prevActionState == ACTION_STATE_DRAG ? 0
+                        : swipeIfNecessary(prevSelected);
+                releaseVelocityTracker();
+                // find where we should animate to
+                final float targetTranslateX, targetTranslateY;
+                int animationType;
+                switch (swipeDir) {
+                    case LEFT:
+                    case RIGHT:
+                    case START:
+                    case END:
+                        targetTranslateY = 0;
+                        targetTranslateX = Math.signum(mDx) * mRecyclerView.getWidth();
+                        break;
+                    case UP:
+                    case DOWN:
+                        targetTranslateX = 0;
+                        targetTranslateY = Math.signum(mDy) * mRecyclerView.getHeight();
+                        break;
+                    default:
+                        targetTranslateX = 0;
+                        targetTranslateY = 0;
+                }
+                if (prevActionState == ACTION_STATE_DRAG) {
+                    animationType = ANIMATION_TYPE_DRAG;
+                } else if (swipeDir > 0) {
+                    animationType = ANIMATION_TYPE_SWIPE_SUCCESS;
+                } else {
+                    animationType = ANIMATION_TYPE_SWIPE_CANCEL;
+                }
+                getSelectedDxDy(mTmpPosition);
+                final float currentTranslateX = mTmpPosition[0];
+                final float currentTranslateY = mTmpPosition[1];
+                final RecoverAnimation rv = new RecoverAnimation(prevSelected, animationType,
+                        prevActionState, currentTranslateX, currentTranslateY,
+                        targetTranslateX, targetTranslateY) {
+                    @Override
+                    public void onAnimationEnd(ValueAnimatorCompat animation) {
+                        super.onAnimationEnd(animation);
+                        if (this.mOverridden) {
+                            return;
+                        }
+                        if (swipeDir <= 0) {
+                            // this is a drag or failed swipe. recover immediately
+                            mCallback.clearView(mRecyclerView, prevSelected);
+                            // full cleanup will happen on onDrawOver
+                        } else {
+                            // wait until remove animation is complete.
+                            mPendingCleanup.add(prevSelected.itemView);
+                            mIsPendingCleanup = true;
+                            if (swipeDir > 0) {
+                                // Animation might be ended by other animators during a layout.
+                                // We defer callback to avoid editing adapter during a layout.
+                                postDispatchSwipe(this, swipeDir);
+                            }
+                        }
+                        // removed from the list after it is drawn for the last time
+                        if (mOverdrawChild == prevSelected.itemView) {
+                            removeChildDrawingOrderCallbackIfNecessary(prevSelected.itemView);
+                        }
+                    }
+                };
+                final long duration = mCallback.getAnimationDuration(mRecyclerView, animationType,
+                        targetTranslateX - currentTranslateX, targetTranslateY - currentTranslateY);
+                rv.setDuration(duration);
+                mRecoverAnimations.add(rv);
+                rv.start();
+                preventLayout = true;
+            } else {
+                removeChildDrawingOrderCallbackIfNecessary(prevSelected.itemView);
+                mCallback.clearView(mRecyclerView, prevSelected);
+            }
+            mSelected = null;
+        }
+        if (selected != null) {
+            mSelectedFlags =
+                    (mCallback.getAbsoluteMovementFlags(mRecyclerView, selected) & actionStateMask)
+                            >> (mActionState * DIRECTION_FLAG_COUNT);
+            mSelectedStartX = selected.itemView.getLeft();
+            mSelectedStartY = selected.itemView.getTop();
+            mSelected = selected;
+
+            if (actionState == ACTION_STATE_DRAG) {
+                mSelected.itemView.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
+            }
+        }
+        final ViewParent rvParent = mRecyclerView.getParent();
+        if (rvParent != null) {
+            rvParent.requestDisallowInterceptTouchEvent(mSelected != null);
+        }
+        if (!preventLayout) {
+            mRecyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout();
+        }
+        mCallback.onSelectedChanged(mSelected, mActionState);
+        mRecyclerView.invalidate();
+    }
+
+    private void postDispatchSwipe(final RecoverAnimation anim, final int swipeDir) {
+        // wait until animations are complete.
+        mRecyclerView.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mRecyclerView != null && mRecyclerView.isAttachedToWindow() &&
+                        !anim.mOverridden &&
+                        anim.mViewHolder.getAdapterPosition() != RecyclerView.NO_POSITION) {
+                    final RecyclerView.ItemAnimator animator = mRecyclerView.getItemAnimator();
+                    // if animator is running or we have other active recover animations, we try
+                    // not to call onSwiped because DefaultItemAnimator is not good at merging
+                    // animations. Instead, we wait and batch.
+                    if ((animator == null || !animator.isRunning(null))
+                            && !hasRunningRecoverAnim()) {
+                        mCallback.onSwiped(anim.mViewHolder, swipeDir);
+                    } else {
+                        mRecyclerView.post(this);
+                    }
+                }
+            }
+        });
+    }
+
+    private boolean hasRunningRecoverAnim() {
+        final int size = mRecoverAnimations.size();
+        for (int i = 0; i < size; i++) {
+            if (!mRecoverAnimations.get(i).mEnded) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * If user drags the view to the edge, trigger a scroll if necessary.
+     */
+    private boolean scrollIfNecessary() {
+        if (mSelected == null) {
+            mDragScrollStartTimeInMs = Long.MIN_VALUE;
+            return false;
+        }
+        final long now = System.currentTimeMillis();
+        final long scrollDuration = mDragScrollStartTimeInMs
+                == Long.MIN_VALUE ? 0 : now - mDragScrollStartTimeInMs;
+        RecyclerView.LayoutManager lm = mRecyclerView.getLayoutManager();
+        if (mTmpRect == null) {
+            mTmpRect = new Rect();
+        }
+        int scrollX = 0;
+        int scrollY = 0;
+        lm.calculateItemDecorationsForChild(mSelected.itemView, mTmpRect);
+        if (lm.canScrollHorizontally()) {
+            int curX = (int) (mSelectedStartX + mDx);
+            final int leftDiff = curX - mTmpRect.left - mRecyclerView.getPaddingLeft();
+            if (mDx < 0 && leftDiff < 0) {
+                scrollX = leftDiff;
+            } else if (mDx > 0) {
+                final int rightDiff =
+                        curX + mSelected.itemView.getWidth() + mTmpRect.right
+                                - (mRecyclerView.getWidth() - mRecyclerView.getPaddingRight());
+                if (rightDiff > 0) {
+                    scrollX = rightDiff;
+                }
+            }
+        }
+        if (lm.canScrollVertically()) {
+            int curY = (int) (mSelectedStartY + mDy);
+            final int topDiff = curY - mTmpRect.top - mRecyclerView.getPaddingTop();
+            if (mDy < 0 && topDiff < 0) {
+                scrollY = topDiff;
+            } else if (mDy > 0) {
+                final int bottomDiff = curY + mSelected.itemView.getHeight() + mTmpRect.bottom -
+                        (mRecyclerView.getHeight() - mRecyclerView.getPaddingBottom());
+                if (bottomDiff > 0) {
+                    scrollY = bottomDiff;
+                }
+            }
+        }
+        if (scrollX != 0) {
+            scrollX = mCallback.interpolateOutOfBoundsScroll(mRecyclerView,
+                    mSelected.itemView.getWidth(), scrollX,
+                    mRecyclerView.getWidth(), scrollDuration);
+        }
+        if (scrollY != 0) {
+            scrollY = mCallback.interpolateOutOfBoundsScroll(mRecyclerView,
+                    mSelected.itemView.getHeight(), scrollY,
+                    mRecyclerView.getHeight(), scrollDuration);
+        }
+        if (scrollX != 0 || scrollY != 0) {
+            if (mDragScrollStartTimeInMs == Long.MIN_VALUE) {
+                mDragScrollStartTimeInMs = now;
+            }
+            mRecyclerView.scrollBy(scrollX, scrollY);
+            return true;
+        }
+        mDragScrollStartTimeInMs = Long.MIN_VALUE;
+        return false;
+    }
+
+    private List<ViewHolder> findSwapTargets(ViewHolder viewHolder) {
+        if (mSwapTargets == null) {
+            mSwapTargets = new ArrayList<ViewHolder>();
+            mDistances = new ArrayList<Integer>();
+        } else {
+            mSwapTargets.clear();
+            mDistances.clear();
+        }
+        final int margin = mCallback.getBoundingBoxMargin();
+        final int left = Math.round(mSelectedStartX + mDx) - margin;
+        final int top = Math.round(mSelectedStartY + mDy) - margin;
+        final int right = left + viewHolder.itemView.getWidth() + 2 * margin;
+        final int bottom = top + viewHolder.itemView.getHeight() + 2 * margin;
+        final int centerX = (left + right) / 2;
+        final int centerY = (top + bottom) / 2;
+        final RecyclerView.LayoutManager lm = mRecyclerView.getLayoutManager();
+        final int childCount = lm.getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            View other = lm.getChildAt(i);
+            if (other == viewHolder.itemView) {
+                continue;//myself!
+            }
+            if (other.getBottom() < top || other.getTop() > bottom
+                    || other.getRight() < left || other.getLeft() > right) {
+                continue;
+            }
+            final ViewHolder otherVh = mRecyclerView.getChildViewHolder(other);
+            if (mCallback.canDropOver(mRecyclerView, mSelected, otherVh)) {
+                // find the index to add
+                final int dx = Math.abs(centerX - (other.getLeft() + other.getRight()) / 2);
+                final int dy = Math.abs(centerY - (other.getTop() + other.getBottom()) / 2);
+                final int dist = dx * dx + dy * dy;
+
+                int pos = 0;
+                final int cnt = mSwapTargets.size();
+                for (int j = 0; j < cnt; j++) {
+                    if (dist > mDistances.get(j)) {
+                        pos++;
+                    } else {
+                        break;
+                    }
+                }
+                mSwapTargets.add(pos, otherVh);
+                mDistances.add(pos, dist);
+            }
+        }
+        return mSwapTargets;
+    }
+
+    /**
+     * Checks if we should swap w/ another view holder.
+     */
+    private void moveIfNecessary(ViewHolder viewHolder) {
+        if (mRecyclerView.isLayoutRequested()) {
+            return;
+        }
+        if (mActionState != ACTION_STATE_DRAG) {
+            return;
+        }
+
+        final float threshold = mCallback.getMoveThreshold(viewHolder);
+        final int x = (int) (mSelectedStartX + mDx);
+        final int y = (int) (mSelectedStartY + mDy);
+        if (Math.abs(y - viewHolder.itemView.getTop()) < viewHolder.itemView.getHeight() * threshold
+                && Math.abs(x - viewHolder.itemView.getLeft())
+                < viewHolder.itemView.getWidth() * threshold) {
+            return;
+        }
+        List<ViewHolder> swapTargets = findSwapTargets(viewHolder);
+        if (swapTargets.size() == 0) {
+            return;
+        }
+        // may swap.
+        ViewHolder target = mCallback.chooseDropTarget(viewHolder, swapTargets, x, y);
+        if (target == null) {
+            mSwapTargets.clear();
+            mDistances.clear();
+            return;
+        }
+        final int toPosition = target.getAdapterPosition();
+        final int fromPosition = viewHolder.getAdapterPosition();
+        if (mCallback.onMove(mRecyclerView, viewHolder, target)) {
+            // keep target visible
+            mCallback.onMoved(mRecyclerView, viewHolder, fromPosition,
+                    target, toPosition, x, y);
+        }
+    }
+
+    @Override
+    public void onChildViewAttachedToWindow(View view) {
+    }
+
+    @Override
+    public void onChildViewDetachedFromWindow(View view) {
+        removeChildDrawingOrderCallbackIfNecessary(view);
+        final ViewHolder holder = mRecyclerView.getChildViewHolder(view);
+        if (holder == null) {
+            return;
+        }
+        if (mSelected != null && holder == mSelected) {
+            select(null, ACTION_STATE_IDLE);
+        } else {
+            endRecoverAnimation(holder, false); // this may push it into pending cleanup list.
+            if (mPendingCleanup.remove(holder.itemView)) {
+                mCallback.clearView(mRecyclerView, holder);
+            }
+        }
+    }
+
+    /**
+     * Returns the animation type or 0 if cannot be found.
+     */
+    private int endRecoverAnimation(ViewHolder viewHolder, boolean override) {
+        final int recoverAnimSize = mRecoverAnimations.size();
+        for (int i = recoverAnimSize - 1; i >= 0; i--) {
+            final RecoverAnimation anim = mRecoverAnimations.get(i);
+            if (anim.mViewHolder == viewHolder) {
+                anim.mOverridden |= override;
+                if (!anim.mEnded) {
+                    anim.cancel();
+                }
+                mRecoverAnimations.remove(i);
+                anim.mViewHolder.setIsRecyclable(true);
+                return anim.mAnimationType;
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public void getItemOffsets(Rect outRect, View view, RecyclerView parent,
+            RecyclerView.State state) {
+        outRect.setEmpty();
+    }
+
+    private void obtainVelocityTracker() {
+        if (mVelocityTracker != null) {
+            mVelocityTracker.recycle();
+        }
+        mVelocityTracker = VelocityTracker.obtain();
+    }
+
+    private void releaseVelocityTracker() {
+        if (mVelocityTracker != null) {
+            mVelocityTracker.recycle();
+            mVelocityTracker = null;
+        }
+    }
+
+    private ViewHolder findSwipedView(MotionEvent motionEvent) {
+        final RecyclerView.LayoutManager lm = mRecyclerView.getLayoutManager();
+        if (mActivePointerId == ACTIVE_POINTER_ID_NONE) {
+            return null;
+        }
+        final int pointerIndex = MotionEventCompat.findPointerIndex(motionEvent, mActivePointerId);
+        final float dx = MotionEventCompat.getX(motionEvent, pointerIndex) - mInitialTouchX;
+        final float dy = MotionEventCompat.getY(motionEvent, pointerIndex) - mInitialTouchY;
+        final float absDx = Math.abs(dx);
+        final float absDy = Math.abs(dy);
+
+        if (absDx < mSlop && absDy < mSlop) {
+            return null;
+        }
+        if (absDx > absDy && lm.canScrollHorizontally()) {
+            return null;
+        } else if (absDy > absDx && lm.canScrollVertically()) {
+            return null;
+        }
+        View child = findChildView(motionEvent);
+        if (child == null) {
+            return null;
+        }
+        return mRecyclerView.getChildViewHolder(child);
+    }
+
+    /**
+     * Checks whether we should select a View for swiping.
+     */
+    private boolean checkSelectForSwipe(int action, MotionEvent motionEvent, int pointerIndex) {
+        if (mSelected != null || action != MotionEvent.ACTION_MOVE
+                || mActionState == ACTION_STATE_DRAG || !mCallback.isItemViewSwipeEnabled()) {
+            return false;
+        }
+        if (mRecyclerView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING) {
+            return false;
+        }
+        final ViewHolder vh = findSwipedView(motionEvent);
+        if (vh == null) {
+            return false;
+        }
+        final int movementFlags = mCallback.getAbsoluteMovementFlags(mRecyclerView, vh);
+
+        final int swipeFlags = (movementFlags & ACTION_MODE_SWIPE_MASK)
+                >> (DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE);
+
+        if (swipeFlags == 0) {
+            return false;
+        }
+
+        // mDx and mDy are only set in allowed directions. We use custom x/y here instead of
+        // updateDxDy to avoid swiping if user moves more in the other direction
+        final float x = MotionEventCompat.getX(motionEvent, pointerIndex);
+        final float y = MotionEventCompat.getY(motionEvent, pointerIndex);
+
+        // Calculate the distance moved
+        final float dx = x - mInitialTouchX;
+        final float dy = y - mInitialTouchY;
+        // swipe target is chose w/o applying flags so it does not really check if swiping in that
+        // direction is allowed. This why here, we use mDx mDy to check slope value again.
+        final float absDx = Math.abs(dx);
+        final float absDy = Math.abs(dy);
+
+        if (absDx < mSlop && absDy < mSlop) {
+            return false;
+        }
+        if (absDx > absDy) {
+            if (dx < 0 && (swipeFlags & LEFT) == 0) {
+                return false;
+            }
+            if (dx > 0 && (swipeFlags & RIGHT) == 0) {
+                return false;
+            }
+        } else {
+            if (dy < 0 && (swipeFlags & UP) == 0) {
+                return false;
+            }
+            if (dy > 0 && (swipeFlags & DOWN) == 0) {
+                return false;
+            }
+        }
+        mDx = mDy = 0f;
+        mActivePointerId = MotionEventCompat.getPointerId(motionEvent, 0);
+        select(vh, ACTION_STATE_SWIPE);
+        return true;
+    }
+
+    private View findChildView(MotionEvent event) {
+        // first check elevated views, if none, then call RV
+        final float x = event.getX();
+        final float y = event.getY();
+        if (mSelected != null) {
+            final View selectedView = mSelected.itemView;
+            if (hitTest(selectedView, x, y, mSelectedStartX + mDx, mSelectedStartY + mDy)) {
+                return selectedView;
+            }
+        }
+        for (int i = mRecoverAnimations.size() - 1; i >= 0; i--) {
+            final RecoverAnimation anim = mRecoverAnimations.get(i);
+            final View view = anim.mViewHolder.itemView;
+            if (hitTest(view, x, y, anim.mX, anim.mY)) {
+                return view;
+            }
+        }
+        return mRecyclerView.findChildViewUnder(x, y);
+    }
+
+    /**
+     * Starts dragging the provided ViewHolder. By default, ItemTouchHelper starts a drag when a
+     * View is long pressed. You can disable that behavior via
+     * {@link ItemTouchHelper.Callback#isLongPressDragEnabled()}.
+     * <p>
+     * For this method to work:
+     * <ul>
+     * <li>The provided ViewHolder must be a child of the RecyclerView to which this
+     * ItemTouchHelper
+     * is attached.</li>
+     * <li>{@link ItemTouchHelper.Callback} must have dragging enabled.</li>
+     * <li>There must be a previous touch event that was reported to the ItemTouchHelper
+     * through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener
+     * grabs previous events, this should work as expected.</li>
+     * </ul>
+     *
+     * For example, if you would like to let your user to be able to drag an Item by touching one
+     * of its descendants, you may implement it as follows:
+     * <pre>
+     *     viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {
+     *         public boolean onTouch(View v, MotionEvent event) {
+     *             if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN) {
+     *                 mItemTouchHelper.startDrag(viewHolder);
+     *             }
+     *             return false;
+     *         }
+     *     });
+     * </pre>
+     * <p>
+     *
+     * @param viewHolder The ViewHolder to start dragging. It must be a direct child of
+     *                   RecyclerView.
+     * @see ItemTouchHelper.Callback#isItemViewSwipeEnabled()
+     */
+    public void startDrag(ViewHolder viewHolder) {
+        if (!mCallback.hasDragFlag(mRecyclerView, viewHolder)) {
+            Log.e(TAG, "Start drag has been called but swiping is not enabled");
+            return;
+        }
+        if (viewHolder.itemView.getParent() != mRecyclerView) {
+            Log.e(TAG, "Start drag has been called with a view holder which is not a child of "
+                    + "the RecyclerView which is controlled by this ItemTouchHelper.");
+            return;
+        }
+        obtainVelocityTracker();
+        mDx = mDy = 0f;
+        select(viewHolder, ACTION_STATE_DRAG);
+    }
+
+    /**
+     * Starts swiping the provided ViewHolder. By default, ItemTouchHelper starts swiping a View
+     * when user swipes their finger (or mouse pointer) over the View. You can disable this
+     * behavior
+     * by overriding {@link ItemTouchHelper.Callback}
+     * <p>
+     * For this method to work:
+     * <ul>
+     * <li>The provided ViewHolder must be a child of the RecyclerView to which this
+     * ItemTouchHelper is attached.</li>
+     * <li>{@link ItemTouchHelper.Callback} must have swiping enabled.</li>
+     * <li>There must be a previous touch event that was reported to the ItemTouchHelper
+     * through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener
+     * grabs previous events, this should work as expected.</li>
+     * </ul>
+     *
+     * For example, if you would like to let your user to be able to swipe an Item by touching one
+     * of its descendants, you may implement it as follows:
+     * <pre>
+     *     viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {
+     *         public boolean onTouch(View v, MotionEvent event) {
+     *             if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN) {
+     *                 mItemTouchHelper.startSwipe(viewHolder);
+     *             }
+     *             return false;
+     *         }
+     *     });
+     * </pre>
+     *
+     * @param viewHolder The ViewHolder to start swiping. It must be a direct child of
+     *                   RecyclerView.
+     */
+    public void startSwipe(ViewHolder viewHolder) {
+        if (!mCallback.hasSwipeFlag(mRecyclerView, viewHolder)) {
+            Log.e(TAG, "Start swipe has been called but dragging is not enabled");
+            return;
+        }
+        if (viewHolder.itemView.getParent() != mRecyclerView) {
+            Log.e(TAG, "Start swipe has been called with a view holder which is not a child of "
+                    + "the RecyclerView controlled by this ItemTouchHelper.");
+            return;
+        }
+        obtainVelocityTracker();
+        mDx = mDy = 0f;
+        select(viewHolder, ACTION_STATE_SWIPE);
+    }
+
+    private RecoverAnimation findAnimation(MotionEvent event) {
+        if (mRecoverAnimations.isEmpty()) {
+            return null;
+        }
+        View target = findChildView(event);
+        for (int i = mRecoverAnimations.size() - 1; i >= 0; i--) {
+            final RecoverAnimation anim = mRecoverAnimations.get(i);
+            if (anim.mViewHolder.itemView == target) {
+                return anim;
+            }
+        }
+        return null;
+    }
+
+    private void updateDxDy(MotionEvent ev, int directionFlags, int pointerIndex) {
+        final float x = MotionEventCompat.getX(ev, pointerIndex);
+        final float y = MotionEventCompat.getY(ev, pointerIndex);
+
+        // Calculate the distance moved
+        mDx = x - mInitialTouchX;
+        mDy = y - mInitialTouchY;
+        if ((directionFlags & LEFT) == 0) {
+            mDx = Math.max(0, mDx);
+        }
+        if ((directionFlags & RIGHT) == 0) {
+            mDx = Math.min(0, mDx);
+        }
+        if ((directionFlags & UP) == 0) {
+            mDy = Math.max(0, mDy);
+        }
+        if ((directionFlags & DOWN) == 0) {
+            mDy = Math.min(0, mDy);
+        }
+    }
+
+    private int swipeIfNecessary(ViewHolder viewHolder) {
+        if (mActionState == ACTION_STATE_DRAG) {
+            return 0;
+        }
+        final int originalMovementFlags = mCallback.getMovementFlags(mRecyclerView, viewHolder);
+        final int absoluteMovementFlags = mCallback.convertToAbsoluteDirection(
+                originalMovementFlags,
+                ViewCompat.getLayoutDirection(mRecyclerView));
+        final int flags = (absoluteMovementFlags
+                & ACTION_MODE_SWIPE_MASK) >> (ACTION_STATE_SWIPE * DIRECTION_FLAG_COUNT);
+        if (flags == 0) {
+            return 0;
+        }
+        final int originalFlags = (originalMovementFlags
+                & ACTION_MODE_SWIPE_MASK) >> (ACTION_STATE_SWIPE * DIRECTION_FLAG_COUNT);
+        int swipeDir;
+        if (Math.abs(mDx) > Math.abs(mDy)) {
+            if ((swipeDir = checkHorizontalSwipe(viewHolder, flags)) > 0) {
+                // if swipe dir is not in original flags, it should be the relative direction
+                if ((originalFlags & swipeDir) == 0) {
+                    // convert to relative
+                    return Callback.convertToRelativeDirection(swipeDir,
+                            ViewCompat.getLayoutDirection(mRecyclerView));
+                }
+                return swipeDir;
+            }
+            if ((swipeDir = checkVerticalSwipe(viewHolder, flags)) > 0) {
+                return swipeDir;
+            }
+        } else {
+            if ((swipeDir = checkVerticalSwipe(viewHolder, flags)) > 0) {
+                return swipeDir;
+            }
+            if ((swipeDir = checkHorizontalSwipe(viewHolder, flags)) > 0) {
+                // if swipe dir is not in original flags, it should be the relative direction
+                if ((originalFlags & swipeDir) == 0) {
+                    // convert to relative
+                    return Callback.convertToRelativeDirection(swipeDir,
+                            ViewCompat.getLayoutDirection(mRecyclerView));
+                }
+                return swipeDir;
+            }
+        }
+        return 0;
+    }
+
+    private int checkHorizontalSwipe(ViewHolder viewHolder, int flags) {
+        if ((flags & (LEFT | RIGHT)) != 0) {
+            final int dirFlag = mDx > 0 ? RIGHT : LEFT;
+            if (mVelocityTracker != null && mActivePointerId > -1) {
+                final float xVelocity = VelocityTrackerCompat
+                        .getXVelocity(mVelocityTracker, mActivePointerId);
+                final int velDirFlag = xVelocity > 0f ? RIGHT : LEFT;
+                if ((velDirFlag & flags) != 0 && dirFlag == velDirFlag &&
+                        Math.abs(xVelocity) >= mRecyclerView.getMinFlingVelocity()) {
+                    return velDirFlag;
+                }
+            }
+
+            final float threshold = mRecyclerView.getWidth() * mCallback
+                    .getSwipeThreshold(viewHolder);
+
+            if ((flags & dirFlag) != 0 && Math.abs(mDx) > threshold) {
+                return dirFlag;
+            }
+        }
+        return 0;
+    }
+
+    private int checkVerticalSwipe(ViewHolder viewHolder, int flags) {
+        if ((flags & (UP | DOWN)) != 0) {
+            final int dirFlag = mDy > 0 ? DOWN : UP;
+            if (mVelocityTracker != null && mActivePointerId > -1) {
+                final float yVelocity = VelocityTrackerCompat
+                        .getYVelocity(mVelocityTracker, mActivePointerId);
+                final int velDirFlag = yVelocity > 0f ? DOWN : UP;
+                if ((velDirFlag & flags) != 0 && velDirFlag == dirFlag &&
+                        Math.abs(yVelocity) >= mRecyclerView.getMinFlingVelocity()) {
+                    return velDirFlag;
+                }
+            }
+
+            final float threshold = mRecyclerView.getHeight() * mCallback
+                    .getSwipeThreshold(viewHolder);
+            if ((flags & dirFlag) != 0 && Math.abs(mDy) > threshold) {
+                return dirFlag;
+            }
+        }
+        return 0;
+    }
+
+    private void addChildDrawingOrderCallback() {
+        if (Build.VERSION.SDK_INT >= 21) {
+            return;// we use elevation on Lollipop
+        }
+        if (mChildDrawingOrderCallback == null) {
+            mChildDrawingOrderCallback = new RecyclerView.ChildDrawingOrderCallback() {
+                @Override
+                public int onGetChildDrawingOrder(int childCount, int i) {
+                    if (mOverdrawChild == null) {
+                        return i;
+                    }
+                    int childPosition = mOverdrawChildPosition;
+                    if (childPosition == -1) {
+                        childPosition = mRecyclerView.indexOfChild(mOverdrawChild);
+                        mOverdrawChildPosition = childPosition;
+                    }
+                    if (i == childCount - 1) {
+                        return childPosition;
+                    }
+                    return i < childPosition ? i : i + 1;
+                }
+            };
+        }
+        mRecyclerView.setChildDrawingOrderCallback(mChildDrawingOrderCallback);
+    }
+
+    private void removeChildDrawingOrderCallbackIfNecessary(View view) {
+        if (view == mOverdrawChild) {
+            mOverdrawChild = null;
+            // only remove if we've added
+            if (mChildDrawingOrderCallback != null) {
+                mRecyclerView.setChildDrawingOrderCallback(null);
+            }
+        }
+    }
+
+    /**
+     * An interface which can be implemented by LayoutManager for better integration with
+     * {@link ItemTouchHelper}.
+     */
+    public static interface ViewDropHandler {
+
+        /**
+         * Called by the {@link ItemTouchHelper} after a View is dropped over another View.
+         * <p>
+         * A LayoutManager should implement this interface to get ready for the upcoming move
+         * operation.
+         * <p>
+         * For example, LinearLayoutManager sets up a "scrollToPositionWithOffset" calls so that
+         * the View under drag will be used as an anchor View while calculating the next layout,
+         * making layout stay consistent.
+         *
+         * @param view   The View which is being dragged. It is very likely that user is still
+         *               dragging this View so there might be other
+         *               {@link #prepareForDrop(View, View, int, int)} after this one.
+         * @param target The target view which is being dropped on.
+         * @param x      The <code>left</code> offset of the View that is being dragged. This value
+         *               includes the movement caused by the user.
+         * @param y      The <code>top</code> offset of the View that is being dragged. This value
+         *               includes the movement caused by the user.
+         */
+        public void prepareForDrop(View view, View target, int x, int y);
+    }
+
+    /**
+     * This class is the contract between ItemTouchHelper and your application. It lets you control
+     * which touch behaviors are enabled per each ViewHolder and also receive callbacks when user
+     * performs these actions.
+     * <p>
+     * To control which actions user can take on each view, you should override
+     * {@link #getMovementFlags(RecyclerView, ViewHolder)} and return appropriate set
+     * of direction flags. ({@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link #END},
+     * {@link #UP}, {@link #DOWN}). You can use
+     * {@link #makeMovementFlags(int, int)} to easily construct it. Alternatively, you can use
+     * {@link SimpleCallback}.
+     * <p>
+     * If user drags an item, ItemTouchHelper will call
+     * {@link Callback#onMove(RecyclerView, ViewHolder, ViewHolder)
+     * onMove(recyclerView, dragged, target)}.
+     * Upon receiving this callback, you should move the item from the old position
+     * ({@code dragged.getAdapterPosition()}) to new position ({@code target.getAdapterPosition()})
+     * in your adapter and also call {@link RecyclerView.Adapter#notifyItemMoved(int, int)}.
+     * To control where a View can be dropped, you can override
+     * {@link #canDropOver(RecyclerView, ViewHolder, ViewHolder)}. When a
+     * dragging View overlaps multiple other views, Callback chooses the closest View with which
+     * dragged View might have changed positions. Although this approach works for many use cases,
+     * if you have a custom LayoutManager, you can override
+     * {@link #chooseDropTarget(ViewHolder, java.util.List, int, int)} to select a
+     * custom drop target.
+     * <p>
+     * When a View is swiped, ItemTouchHelper animates it until it goes out of bounds, then calls
+     * {@link #onSwiped(ViewHolder, int)}. At this point, you should update your
+     * adapter (e.g. remove the item) and call related Adapter#notify event.
+     */
+    @SuppressWarnings("UnusedParameters")
+    public abstract static class Callback {
+
+        public static final int DEFAULT_DRAG_ANIMATION_DURATION = 200;
+
+        public static final int DEFAULT_SWIPE_ANIMATION_DURATION = 250;
+
+        static final int RELATIVE_DIR_FLAGS = START | END |
+                ((START | END) << DIRECTION_FLAG_COUNT) |
+                ((START | END) << (2 * DIRECTION_FLAG_COUNT));
+
+        private static final ItemTouchUIUtil sUICallback;
+
+        private static final int ABS_HORIZONTAL_DIR_FLAGS = LEFT | RIGHT |
+                ((LEFT | RIGHT) << DIRECTION_FLAG_COUNT) |
+                ((LEFT | RIGHT) << (2 * DIRECTION_FLAG_COUNT));
+
+        private static final Interpolator sDragScrollInterpolator = new Interpolator() {
+            public float getInterpolation(float t) {
+                return t * t * t * t * t;
+            }
+        };
+
+        private static final Interpolator sDragViewScrollCapInterpolator = new Interpolator() {
+            public float getInterpolation(float t) {
+                t -= 1.0f;
+                return t * t * t * t * t + 1.0f;
+            }
+        };
+
+        /**
+         * Drag scroll speed keeps accelerating until this many milliseconds before being capped.
+         */
+        private static final long DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS = 2000;
+
+        private int mCachedMaxScrollSpeed = -1;
+
+        static {
+            if (Build.VERSION.SDK_INT >= 21) {
+                sUICallback = new ItemTouchUIUtilImpl.Lollipop();
+            } else if (Build.VERSION.SDK_INT >= 11) {
+                sUICallback = new ItemTouchUIUtilImpl.Honeycomb();
+            } else {
+                sUICallback = new ItemTouchUIUtilImpl.Gingerbread();
+            }
+        }
+
+        /**
+         * Returns the {@link ItemTouchUIUtil} that is used by the {@link Callback} class for visual
+         * changes on Views in response to user interactions. {@link ItemTouchUIUtil} has different
+         * implementations for different platform versions.
+         * <p>
+         * By default, {@link Callback} applies these changes on
+         * {@link RecyclerView.ViewHolder#itemView}.
+         * <p>
+         * For example, if you have a use case where you only want the text to move when user
+         * swipes over the view, you can do the following:
+         * <pre>
+         *     public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder){
+         *         getDefaultUIUtil().clearView(((ItemTouchViewHolder) viewHolder).textView);
+         *     }
+         *     public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
+         *         if (viewHolder != null){
+         *             getDefaultUIUtil().onSelected(((ItemTouchViewHolder) viewHolder).textView);
+         *         }
+         *     }
+         *     public void onChildDraw(Canvas c, RecyclerView recyclerView,
+         *             RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,
+         *             boolean isCurrentlyActive) {
+         *         getDefaultUIUtil().onDraw(c, recyclerView,
+         *                 ((ItemTouchViewHolder) viewHolder).textView, dX, dY,
+         *                 actionState, isCurrentlyActive);
+         *         return true;
+         *     }
+         *     public void onChildDrawOver(Canvas c, RecyclerView recyclerView,
+         *             RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,
+         *             boolean isCurrentlyActive) {
+         *         getDefaultUIUtil().onDrawOver(c, recyclerView,
+         *                 ((ItemTouchViewHolder) viewHolder).textView, dX, dY,
+         *                 actionState, isCurrentlyActive);
+         *         return true;
+         *     }
+         * </pre>
+         *
+         * @return The {@link ItemTouchUIUtil} instance that is used by the {@link Callback}
+         */
+        public static ItemTouchUIUtil getDefaultUIUtil() {
+            return sUICallback;
+        }
+
+        /**
+         * Replaces a movement direction with its relative version by taking layout direction into
+         * account.
+         *
+         * @param flags           The flag value that include any number of movement flags.
+         * @param layoutDirection The layout direction of the View. Can be obtained from
+         *                        {@link ViewCompat#getLayoutDirection(android.view.View)}.
+         * @return Updated flags which uses relative flags ({@link #START}, {@link #END}) instead
+         * of {@link #LEFT}, {@link #RIGHT}.
+         * @see #convertToAbsoluteDirection(int, int)
+         */
+        public static int convertToRelativeDirection(int flags, int layoutDirection) {
+            int masked = flags & ABS_HORIZONTAL_DIR_FLAGS;
+            if (masked == 0) {
+                return flags;// does not have any abs flags, good.
+            }
+            flags &= ~masked; //remove left / right.
+            if (layoutDirection == ViewCompat.LAYOUT_DIRECTION_LTR) {
+                // no change. just OR with 2 bits shifted mask and return
+                flags |= masked << 2; // START is 2 bits after LEFT, END is 2 bits after RIGHT.
+                return flags;
+            } else {
+                // add RIGHT flag as START
+                flags |= ((masked << 1) & ~ABS_HORIZONTAL_DIR_FLAGS);
+                // first clean RIGHT bit then add LEFT flag as END
+                flags |= ((masked << 1) & ABS_HORIZONTAL_DIR_FLAGS) << 2;
+            }
+            return flags;
+        }
+
+        /**
+         * Convenience method to create movement flags.
+         * <p>
+         * For instance, if you want to let your items be drag & dropped vertically and swiped
+         * left to be dismissed, you can call this method with:
+         * <code>makeMovementFlags(UP | DOWN, LEFT);</code>
+         *
+         * @param dragFlags  The directions in which the item can be dragged.
+         * @param swipeFlags The directions in which the item can be swiped.
+         * @return Returns an integer composed of the given drag and swipe flags.
+         */
+        public static int makeMovementFlags(int dragFlags, int swipeFlags) {
+            return makeFlag(ACTION_STATE_IDLE, swipeFlags | dragFlags) |
+                    makeFlag(ACTION_STATE_SWIPE, swipeFlags) | makeFlag(ACTION_STATE_DRAG,
+                    dragFlags);
+        }
+
+        /**
+         * Shifts the given direction flags to the offset of the given action state.
+         *
+         * @param actionState The action state you want to get flags in. Should be one of
+         *                    {@link #ACTION_STATE_IDLE}, {@link #ACTION_STATE_SWIPE} or
+         *                    {@link #ACTION_STATE_DRAG}.
+         * @param directions  The direction flags. Can be composed from {@link #UP}, {@link #DOWN},
+         *                    {@link #RIGHT}, {@link #LEFT} {@link #START} and {@link #END}.
+         * @return And integer that represents the given directions in the provided actionState.
+         */
+        public static int makeFlag(int actionState, int directions) {
+            return directions << (actionState * DIRECTION_FLAG_COUNT);
+        }
+
+        /**
+         * Should return a composite flag which defines the enabled move directions in each state
+         * (idle, swiping, dragging).
+         * <p>
+         * Instead of composing this flag manually, you can use {@link #makeMovementFlags(int,
+         * int)}
+         * or {@link #makeFlag(int, int)}.
+         * <p>
+         * This flag is composed of 3 sets of 8 bits, where first 8 bits are for IDLE state, next
+         * 8 bits are for SWIPE state and third 8 bits are for DRAG state.
+         * Each 8 bit sections can be constructed by simply OR'ing direction flags defined in
+         * {@link ItemTouchHelper}.
+         * <p>
+         * For example, if you want it to allow swiping LEFT and RIGHT but only allow starting to
+         * swipe by swiping RIGHT, you can return:
+         * <pre>
+         *      makeFlag(ACTION_STATE_IDLE, RIGHT) | makeFlag(ACTION_STATE_SWIPE, LEFT | RIGHT);
+         * </pre>
+         * This means, allow right movement while IDLE and allow right and left movement while
+         * swiping.
+         *
+         * @param recyclerView The RecyclerView to which ItemTouchHelper is attached.
+         * @param viewHolder   The ViewHolder for which the movement information is necessary.
+         * @return flags specifying which movements are allowed on this ViewHolder.
+         * @see #makeMovementFlags(int, int)
+         * @see #makeFlag(int, int)
+         */
+        public abstract int getMovementFlags(RecyclerView recyclerView,
+                ViewHolder viewHolder);
+
+        /**
+         * Converts a given set of flags to absolution direction which means {@link #START} and
+         * {@link #END} are replaced with {@link #LEFT} and {@link #RIGHT} depending on the layout
+         * direction.
+         *
+         * @param flags           The flag value that include any number of movement flags.
+         * @param layoutDirection The layout direction of the RecyclerView.
+         * @return Updated flags which includes only absolute direction values.
+         */
+        public int convertToAbsoluteDirection(int flags, int layoutDirection) {
+            int masked = flags & RELATIVE_DIR_FLAGS;
+            if (masked == 0) {
+                return flags;// does not have any relative flags, good.
+            }
+            flags &= ~masked; //remove start / end
+            if (layoutDirection == ViewCompat.LAYOUT_DIRECTION_LTR) {
+                // no change. just OR with 2 bits shifted mask and return
+                flags |= masked >> 2; // START is 2 bits after LEFT, END is 2 bits after RIGHT.
+                return flags;
+            } else {
+                // add START flag as RIGHT
+                flags |= ((masked >> 1) & ~RELATIVE_DIR_FLAGS);
+                // first clean start bit then add END flag as LEFT
+                flags |= ((masked >> 1) & RELATIVE_DIR_FLAGS) >> 2;
+            }
+            return flags;
+        }
+
+        final int getAbsoluteMovementFlags(RecyclerView recyclerView,
+                ViewHolder viewHolder) {
+            final int flags = getMovementFlags(recyclerView, viewHolder);
+            return convertToAbsoluteDirection(flags, ViewCompat.getLayoutDirection(recyclerView));
+        }
+
+        private boolean hasDragFlag(RecyclerView recyclerView, ViewHolder viewHolder) {
+            final int flags = getAbsoluteMovementFlags(recyclerView, viewHolder);
+            return (flags & ACTION_MODE_DRAG_MASK) != 0;
+        }
+
+        private boolean hasSwipeFlag(RecyclerView recyclerView,
+                ViewHolder viewHolder) {
+            final int flags = getAbsoluteMovementFlags(recyclerView, viewHolder);
+            return (flags & ACTION_MODE_SWIPE_MASK) != 0;
+        }
+
+        /**
+         * Return true if the current ViewHolder can be dropped over the the target ViewHolder.
+         * <p>
+         * This method is used when selecting drop target for the dragged View. After Views are
+         * eliminated either via bounds check or via this method, resulting set of views will be
+         * passed to {@link #chooseDropTarget(ViewHolder, java.util.List, int, int)}.
+         * <p>
+         * Default implementation returns true.
+         *
+         * @param recyclerView The RecyclerView to which ItemTouchHelper is attached to.
+         * @param current      The ViewHolder that user is dragging.
+         * @param target       The ViewHolder which is below the dragged ViewHolder.
+         * @return True if the dragged ViewHolder can be replaced with the target ViewHolder, false
+         * otherwise.
+         */
+        public boolean canDropOver(RecyclerView recyclerView, ViewHolder current,
+                ViewHolder target) {
+            return true;
+        }
+
+        /**
+         * Called when ItemTouchHelper wants to move the dragged item from its old position to
+         * the new position.
+         * <p>
+         * If this method returns true, ItemTouchHelper assumes {@code viewHolder} has been moved
+         * to the adapter position of {@code target} ViewHolder
+         * ({@link ViewHolder#getAdapterPosition()
+         * ViewHolder#getAdapterPosition()}).
+         * <p>
+         * If you don't support drag & drop, this method will never be called.
+         *
+         * @param recyclerView The RecyclerView to which ItemTouchHelper is attached to.
+         * @param viewHolder   The ViewHolder which is being dragged by the user.
+         * @param target       The ViewHolder over which the currently active item is being
+         *                     dragged.
+         * @return True if the {@code viewHolder} has been moved to the adapter position of
+         * {@code target}.
+         * @see #onMoved(RecyclerView, ViewHolder, int, ViewHolder, int, int, int)
+         */
+        public abstract boolean onMove(RecyclerView recyclerView,
+                ViewHolder viewHolder, ViewHolder target);
+
+        /**
+         * Returns whether ItemTouchHelper should start a drag and drop operation if an item is
+         * long pressed.
+         * <p>
+         * Default value returns true but you may want to disable this if you want to start
+         * dragging on a custom view touch using {@link #startDrag(ViewHolder)}.
+         *
+         * @return True if ItemTouchHelper should start dragging an item when it is long pressed,
+         * false otherwise. Default value is <code>true</code>.
+         * @see #startDrag(ViewHolder)
+         */
+        public boolean isLongPressDragEnabled() {
+            return true;
+        }
+
+        /**
+         * Returns whether ItemTouchHelper should start a swipe operation if a pointer is swiped
+         * over the View.
+         * <p>
+         * Default value returns true but you may want to disable this if you want to start
+         * swiping on a custom view touch using {@link #startSwipe(ViewHolder)}.
+         *
+         * @return True if ItemTouchHelper should start swiping an item when user swipes a pointer
+         * over the View, false otherwise. Default value is <code>true</code>.
+         * @see #startSwipe(ViewHolder)
+         */
+        public boolean isItemViewSwipeEnabled() {
+            return true;
+        }
+
+        /**
+         * When finding views under a dragged view, by default, ItemTouchHelper searches for views
+         * that overlap with the dragged View. By overriding this method, you can extend or shrink
+         * the search box.
+         *
+         * @return The extra margin to be added to the hit box of the dragged View.
+         */
+        public int getBoundingBoxMargin() {
+            return 0;
+        }
+
+        /**
+         * Returns the fraction that the user should move the View to be considered as swiped.
+         * The fraction is calculated with respect to RecyclerView's bounds.
+         * <p>
+         * Default value is .5f, which means, to swipe a View, user must move the View at least
+         * half of RecyclerView's width or height, depending on the swipe direction.
+         *
+         * @param viewHolder The ViewHolder that is being dragged.
+         * @return A float value that denotes the fraction of the View size. Default value
+         * is .5f .
+         */
+        public float getSwipeThreshold(ViewHolder viewHolder) {
+            return .5f;
+        }
+
+        /**
+         * Returns the fraction that the user should move the View to be considered as it is
+         * dragged. After a view is moved this amount, ItemTouchHelper starts checking for Views
+         * below it for a possible drop.
+         *
+         * @param viewHolder The ViewHolder that is being dragged.
+         * @return A float value that denotes the fraction of the View size. Default value is
+         * .5f .
+         */
+        public float getMoveThreshold(ViewHolder viewHolder) {
+            return .5f;
+        }
+
+        /**
+         * Called by ItemTouchHelper to select a drop target from the list of ViewHolders that
+         * are under the dragged View.
+         * <p>
+         * Default implementation filters the View with which dragged item have changed position
+         * in the drag direction. For instance, if the view is dragged UP, it compares the
+         * <code>view.getTop()</code> of the two views before and after drag started. If that value
+         * is different, the target view passes the filter.
+         * <p>
+         * Among these Views which pass the test, the one closest to the dragged view is chosen.
+         * <p>
+         * This method is called on the main thread every time user moves the View. If you want to
+         * override it, make sure it does not do any expensive operations.
+         *
+         * @param selected    The ViewHolder being dragged by the user.
+         * @param dropTargets The list of ViewHolder that are under the dragged View and
+         *                    candidate as a drop.
+         * @param curX        The updated left value of the dragged View after drag translations
+         *                    are applied. This value does not include margins added by
+         *                    {@link RecyclerView.ItemDecoration}s.
+         * @param curY        The updated top value of the dragged View after drag translations
+         *                    are applied. This value does not include margins added by
+         *                    {@link RecyclerView.ItemDecoration}s.
+         * @return A ViewHolder to whose position the dragged ViewHolder should be
+         * moved to.
+         */
+        public ViewHolder chooseDropTarget(ViewHolder selected,
+                List<ViewHolder> dropTargets, int curX, int curY) {
+            int right = curX + selected.itemView.getWidth();
+            int bottom = curY + selected.itemView.getHeight();
+            ViewHolder winner = null;
+            int winnerScore = -1;
+            final int dx = curX - selected.itemView.getLeft();
+            final int dy = curY - selected.itemView.getTop();
+            final int targetsSize = dropTargets.size();
+            for (int i = 0; i < targetsSize; i++) {
+                final ViewHolder target = dropTargets.get(i);
+                if (dx > 0) {
+                    int diff = target.itemView.getRight() - right;
+                    if (diff < 0 && target.itemView.getRight() > selected.itemView.getRight()) {
+                        final int score = Math.abs(diff);
+                        if (score > winnerScore) {
+                            winnerScore = score;
+                            winner = target;
+                        }
+                    }
+                }
+                if (dx < 0) {
+                    int diff = target.itemView.getLeft() - curX;
+                    if (diff > 0 && target.itemView.getLeft() < selected.itemView.getLeft()) {
+                        final int score = Math.abs(diff);
+                        if (score > winnerScore) {
+                            winnerScore = score;
+                            winner = target;
+                        }
+                    }
+                }
+                if (dy < 0) {
+                    int diff = target.itemView.getTop() - curY;
+                    if (diff > 0 && target.itemView.getTop() < selected.itemView.getTop()) {
+                        final int score = Math.abs(diff);
+                        if (score > winnerScore) {
+                            winnerScore = score;
+                            winner = target;
+                        }
+                    }
+                }
+
+                if (dy > 0) {
+                    int diff = target.itemView.getBottom() - bottom;
+                    if (diff < 0 && target.itemView.getBottom() > selected.itemView.getBottom()) {
+                        final int score = Math.abs(diff);
+                        if (score > winnerScore) {
+                            winnerScore = score;
+                            winner = target;
+                        }
+                    }
+                }
+            }
+            return winner;
+        }
+
+        /**
+         * Called when a ViewHolder is swiped by the user.
+         * <p>
+         * If you are returning relative directions ({@link #START} , {@link #END}) from the
+         * {@link #getMovementFlags(RecyclerView, ViewHolder)} method, this method
+         * will also use relative directions. Otherwise, it will use absolute directions.
+         * <p>
+         * If you don't support swiping, this method will never be called.
+         * <p>
+         * ItemTouchHelper will keep a reference to the View until it is detached from
+         * RecyclerView.
+         * As soon as it is detached, ItemTouchHelper will call
+         * {@link #clearView(RecyclerView, ViewHolder)}.
+         *
+         * @param viewHolder The ViewHolder which has been swiped by the user.
+         * @param direction  The direction to which the ViewHolder is swiped. It is one of
+         *                   {@link #UP}, {@link #DOWN},
+         *                   {@link #LEFT} or {@link #RIGHT}. If your
+         *                   {@link #getMovementFlags(RecyclerView, ViewHolder)}
+         *                   method
+         *                   returned relative flags instead of {@link #LEFT} / {@link #RIGHT};
+         *                   `direction` will be relative as well. ({@link #START} or {@link
+         *                   #END}).
+         */
+        public abstract void onSwiped(ViewHolder viewHolder, int direction);
+
+        /**
+         * Called when the ViewHolder swiped or dragged by the ItemTouchHelper is changed.
+         * <p/>
+         * If you override this method, you should call super.
+         *
+         * @param viewHolder  The new ViewHolder that is being swiped or dragged. Might be null if
+         *                    it is cleared.
+         * @param actionState One of {@link ItemTouchHelper#ACTION_STATE_IDLE},
+         *                    {@link ItemTouchHelper#ACTION_STATE_SWIPE} or
+         *                    {@link ItemTouchHelper#ACTION_STATE_DRAG}.
+         *
+         * @see #clearView(RecyclerView, RecyclerView.ViewHolder)
+         */
+        public void onSelectedChanged(ViewHolder viewHolder, int actionState) {
+            if (viewHolder != null) {
+                sUICallback.onSelected(viewHolder.itemView);
+            }
+        }
+
+        private int getMaxDragScroll(RecyclerView recyclerView) {
+            if (mCachedMaxScrollSpeed == -1) {
+                mCachedMaxScrollSpeed = AndroidUtilities.dp(20);
+            }
+            return mCachedMaxScrollSpeed;
+        }
+
+        /**
+         * Called when {@link #onMove(RecyclerView, ViewHolder, ViewHolder)} returns true.
+         * <p>
+         * ItemTouchHelper does not create an extra Bitmap or View while dragging, instead, it
+         * modifies the existing View. Because of this reason, it is important that the View is
+         * still part of the layout after it is moved. This may not work as intended when swapped
+         * Views are close to RecyclerView bounds or there are gaps between them (e.g. other Views
+         * which were not eligible for dropping over).
+         * <p>
+         * This method is responsible to give necessary hint to the LayoutManager so that it will
+         * keep the View in visible area. For example, for LinearLayoutManager, this is as simple
+         * as calling {@link LinearLayoutManager#scrollToPositionWithOffset(int, int)}.
+         *
+         * Default implementation calls {@link RecyclerView#scrollToPosition(int)} if the View's
+         * new position is likely to be out of bounds.
+         * <p>
+         * It is important to ensure the ViewHolder will stay visible as otherwise, it might be
+         * removed by the LayoutManager if the move causes the View to go out of bounds. In that
+         * case, drag will end prematurely.
+         *
+         * @param recyclerView The RecyclerView controlled by the ItemTouchHelper.
+         * @param viewHolder   The ViewHolder under user's control.
+         * @param fromPos      The previous adapter position of the dragged item (before it was
+         *                     moved).
+         * @param target       The ViewHolder on which the currently active item has been dropped.
+         * @param toPos        The new adapter position of the dragged item.
+         * @param x            The updated left value of the dragged View after drag translations
+         *                     are applied. This value does not include margins added by
+         *                     {@link RecyclerView.ItemDecoration}s.
+         * @param y            The updated top value of the dragged View after drag translations
+         *                     are applied. This value does not include margins added by
+         *                     {@link RecyclerView.ItemDecoration}s.
+         */
+        public void onMoved(final RecyclerView recyclerView,
+                final ViewHolder viewHolder, int fromPos, final ViewHolder target, int toPos, int x,
+                int y) {
+            final RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();
+            if (layoutManager instanceof ViewDropHandler) {
+                ((ViewDropHandler) layoutManager).prepareForDrop(viewHolder.itemView,
+                        target.itemView, x, y);
+                return;
+            }
+
+            // if layout manager cannot handle it, do some guesswork
+            if (layoutManager.canScrollHorizontally()) {
+                final int minLeft = layoutManager.getDecoratedLeft(target.itemView);
+                if (minLeft <= recyclerView.getPaddingLeft()) {
+                    recyclerView.scrollToPosition(toPos);
+                }
+                final int maxRight = layoutManager.getDecoratedRight(target.itemView);
+                if (maxRight >= recyclerView.getWidth() - recyclerView.getPaddingRight()) {
+                    recyclerView.scrollToPosition(toPos);
+                }
+            }
+
+            if (layoutManager.canScrollVertically()) {
+                final int minTop = layoutManager.getDecoratedTop(target.itemView);
+                if (minTop <= recyclerView.getPaddingTop()) {
+                    recyclerView.scrollToPosition(toPos);
+                }
+                final int maxBottom = layoutManager.getDecoratedBottom(target.itemView);
+                if (maxBottom >= recyclerView.getHeight() - recyclerView.getPaddingBottom()) {
+                    recyclerView.scrollToPosition(toPos);
+                }
+            }
+        }
+
+        private void onDraw(Canvas c, RecyclerView parent, ViewHolder selected,
+                List<ItemTouchHelper.RecoverAnimation> recoverAnimationList,
+                int actionState, float dX, float dY) {
+            final int recoverAnimSize = recoverAnimationList.size();
+            for (int i = 0; i < recoverAnimSize; i++) {
+                final ItemTouchHelper.RecoverAnimation anim = recoverAnimationList.get(i);
+                anim.update();
+                final int count = c.save();
+                onChildDraw(c, parent, anim.mViewHolder, anim.mX, anim.mY, anim.mActionState,
+                        false);
+                c.restoreToCount(count);
+            }
+            if (selected != null) {
+                final int count = c.save();
+                onChildDraw(c, parent, selected, dX, dY, actionState, true);
+                c.restoreToCount(count);
+            }
+        }
+
+        private void onDrawOver(Canvas c, RecyclerView parent, ViewHolder selected,
+                List<ItemTouchHelper.RecoverAnimation> recoverAnimationList,
+                int actionState, float dX, float dY) {
+            final int recoverAnimSize = recoverAnimationList.size();
+            for (int i = 0; i < recoverAnimSize; i++) {
+                final ItemTouchHelper.RecoverAnimation anim = recoverAnimationList.get(i);
+                final int count = c.save();
+                onChildDrawOver(c, parent, anim.mViewHolder, anim.mX, anim.mY, anim.mActionState,
+                        false);
+                c.restoreToCount(count);
+            }
+            if (selected != null) {
+                final int count = c.save();
+                onChildDrawOver(c, parent, selected, dX, dY, actionState, true);
+                c.restoreToCount(count);
+            }
+            boolean hasRunningAnimation = false;
+            for (int i = recoverAnimSize - 1; i >= 0; i--) {
+                final RecoverAnimation anim = recoverAnimationList.get(i);
+                if (anim.mEnded && !anim.mIsPendingCleanup) {
+                    recoverAnimationList.remove(i);
+                    anim.mViewHolder.setIsRecyclable(true);
+                } else if (!anim.mEnded) {
+                    hasRunningAnimation = true;
+                }
+            }
+            if (hasRunningAnimation) {
+                parent.invalidate();
+            }
+        }
+
+        /**
+         * Called by the ItemTouchHelper when the user interaction with an element is over and it
+         * also completed its animation.
+         * <p>
+         * This is a good place to clear all changes on the View that was done in
+         * {@link #onSelectedChanged(RecyclerView.ViewHolder, int)},
+         * {@link #onChildDraw(Canvas, RecyclerView, ViewHolder, float, float, int,
+         * boolean)} or
+         * {@link #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int, boolean)}.
+         *
+         * @param recyclerView The RecyclerView which is controlled by the ItemTouchHelper.
+         * @param viewHolder   The View that was interacted by the user.
+         */
+        public void clearView(RecyclerView recyclerView, ViewHolder viewHolder) {
+            sUICallback.clearView(viewHolder.itemView);
+        }
+
+        /**
+         * Called by ItemTouchHelper on RecyclerView's onDraw callback.
+         * <p>
+         * If you would like to customize how your View's respond to user interactions, this is
+         * a good place to override.
+         * <p>
+         * Default implementation translates the child by the given <code>dX</code>,
+         * <code>dY</code>.
+         * ItemTouchHelper also takes care of drawing the child after other children if it is being
+         * dragged. This is done using child re-ordering mechanism. On platforms prior to L, this
+         * is
+         * achieved via {@link android.view.ViewGroup#getChildDrawingOrder(int, int)} and on L
+         * and after, it changes View's elevation value to be greater than all other children.)
+         *
+         * @param c                 The canvas which RecyclerView is drawing its children
+         * @param recyclerView      The RecyclerView to which ItemTouchHelper is attached to
+         * @param viewHolder        The ViewHolder which is being interacted by the User or it was
+         *                          interacted and simply animating to its original position
+         * @param dX                The amount of horizontal displacement caused by user's action
+         * @param dY                The amount of vertical displacement caused by user's action
+         * @param actionState       The type of interaction on the View. Is either {@link
+         *                          #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.
+         * @param isCurrentlyActive True if this view is currently being controlled by the user or
+         *                          false it is simply animating back to its original state.
+         * @see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
+         * boolean)
+         */
+        public void onChildDraw(Canvas c, RecyclerView recyclerView,
+                ViewHolder viewHolder,
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            sUICallback.onDraw(c, recyclerView, viewHolder.itemView, dX, dY, actionState,
+                    isCurrentlyActive);
+        }
+
+        /**
+         * Called by ItemTouchHelper on RecyclerView's onDraw callback.
+         * <p>
+         * If you would like to customize how your View's respond to user interactions, this is
+         * a good place to override.
+         * <p>
+         * Default implementation translates the child by the given <code>dX</code>,
+         * <code>dY</code>.
+         * ItemTouchHelper also takes care of drawing the child after other children if it is being
+         * dragged. This is done using child re-ordering mechanism. On platforms prior to L, this
+         * is
+         * achieved via {@link android.view.ViewGroup#getChildDrawingOrder(int, int)} and on L
+         * and after, it changes View's elevation value to be greater than all other children.)
+         *
+         * @param c                 The canvas which RecyclerView is drawing its children
+         * @param recyclerView      The RecyclerView to which ItemTouchHelper is attached to
+         * @param viewHolder        The ViewHolder which is being interacted by the User or it was
+         *                          interacted and simply animating to its original position
+         * @param dX                The amount of horizontal displacement caused by user's action
+         * @param dY                The amount of vertical displacement caused by user's action
+         * @param actionState       The type of interaction on the View. Is either {@link
+         *                          #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.
+         * @param isCurrentlyActive True if this view is currently being controlled by the user or
+         *                          false it is simply animating back to its original state.
+         * @see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
+         * boolean)
+         */
+        public void onChildDrawOver(Canvas c, RecyclerView recyclerView,
+                ViewHolder viewHolder,
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            sUICallback.onDrawOver(c, recyclerView, viewHolder.itemView, dX, dY, actionState,
+                    isCurrentlyActive);
+        }
+
+        /**
+         * Called by the ItemTouchHelper when user action finished on a ViewHolder and now the View
+         * will be animated to its final position.
+         * <p>
+         * Default implementation uses ItemAnimator's duration values. If
+         * <code>animationType</code> is {@link #ANIMATION_TYPE_DRAG}, it returns
+         * {@link RecyclerView.ItemAnimator#getMoveDuration()}, otherwise, it returns
+         * {@link RecyclerView.ItemAnimator#getRemoveDuration()}. If RecyclerView does not have
+         * any {@link RecyclerView.ItemAnimator} attached, this method returns
+         * {@code DEFAULT_DRAG_ANIMATION_DURATION} or {@code DEFAULT_SWIPE_ANIMATION_DURATION}
+         * depending on the animation type.
+         *
+         * @param recyclerView  The RecyclerView to which the ItemTouchHelper is attached to.
+         * @param animationType The type of animation. Is one of {@link #ANIMATION_TYPE_DRAG},
+         *                      {@link #ANIMATION_TYPE_SWIPE_CANCEL} or
+         *                      {@link #ANIMATION_TYPE_SWIPE_SUCCESS}.
+         * @param animateDx     The horizontal distance that the animation will offset
+         * @param animateDy     The vertical distance that the animation will offset
+         * @return The duration for the animation
+         */
+        public long getAnimationDuration(RecyclerView recyclerView, int animationType,
+                float animateDx, float animateDy) {
+            final RecyclerView.ItemAnimator itemAnimator = recyclerView.getItemAnimator();
+            if (itemAnimator == null) {
+                return animationType == ANIMATION_TYPE_DRAG ? DEFAULT_DRAG_ANIMATION_DURATION
+                        : DEFAULT_SWIPE_ANIMATION_DURATION;
+            } else {
+                return animationType == ANIMATION_TYPE_DRAG ? itemAnimator.getMoveDuration()
+                        : itemAnimator.getRemoveDuration();
+            }
+        }
+
+        /**
+         * Called by the ItemTouchHelper when user is dragging a view out of bounds.
+         * <p>
+         * You can override this method to decide how much RecyclerView should scroll in response
+         * to this action. Default implementation calculates a value based on the amount of View
+         * out of bounds and the time it spent there. The longer user keeps the View out of bounds,
+         * the faster the list will scroll. Similarly, the larger portion of the View is out of
+         * bounds, the faster the RecyclerView will scroll.
+         *
+         * @param recyclerView        The RecyclerView instance to which ItemTouchHelper is attached
+         *                            to.
+         * @param viewSize            The total size of the View in scroll direction, excluding
+         *                            item decorations.
+         * @param viewSizeOutOfBounds The total size of the View that is out of bounds. This value
+         *                            is negative if the View is dragged towards left or top edge.
+         * @param totalSize           The total size of RecyclerView in the scroll direction.
+         * @param msSinceStartScroll  The time passed since View is kept out of bounds.
+         *
+         * @return The amount that RecyclerView should scroll. Keep in mind that this value will
+         * be passed to {@link RecyclerView#scrollBy(int, int)} method.
+         */
+        public int interpolateOutOfBoundsScroll(RecyclerView recyclerView,
+                int viewSize, int viewSizeOutOfBounds,
+                int totalSize, long msSinceStartScroll) {
+            final int maxScroll = getMaxDragScroll(recyclerView);
+            final int absOutOfBounds = Math.abs(viewSizeOutOfBounds);
+            final int direction = (int) Math.signum(viewSizeOutOfBounds);
+            // might be negative if other direction
+            float outOfBoundsRatio = Math.min(1f, 1f * absOutOfBounds / viewSize);
+            final int cappedScroll = (int) (direction * maxScroll *
+                    sDragViewScrollCapInterpolator.getInterpolation(outOfBoundsRatio));
+            final float timeRatio;
+            if (msSinceStartScroll > DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS) {
+                timeRatio = 1f;
+            } else {
+                timeRatio = (float) msSinceStartScroll / DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS;
+            }
+            final int value = (int) (cappedScroll * sDragScrollInterpolator
+                    .getInterpolation(timeRatio));
+            if (value == 0) {
+                return viewSizeOutOfBounds > 0 ? 1 : -1;
+            }
+            return value;
+        }
+    }
+
+    /**
+     * A simple wrapper to the default Callback which you can construct with drag and swipe
+     * directions and this class will handle the flag callbacks. You should still override onMove
+     * or
+     * onSwiped depending on your use case.
+     *
+     * <pre>
+     * ItemTouchHelper mIth = new ItemTouchHelper(
+     *     new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN,
+     *         ItemTouchHelper.LEFT) {
+     *         public abstract boolean onMove(RecyclerView recyclerView,
+     *             ViewHolder viewHolder, ViewHolder target) {
+     *             final int fromPos = viewHolder.getAdapterPosition();
+     *             final int toPos = viewHolder.getAdapterPosition();
+     *             // move item in `fromPos` to `toPos` in adapter.
+     *             return true;// true if moved, false otherwise
+     *         }
+     *         public void onSwiped(ViewHolder viewHolder, int direction) {
+     *             // remove from adapter
+     *         }
+     * });
+     * </pre>
+     */
+    public abstract static class SimpleCallback extends Callback {
+
+        private int mDefaultSwipeDirs;
+
+        private int mDefaultDragDirs;
+
+        /**
+         * Creates a Callback for the given drag and swipe allowance. These values serve as
+         * defaults
+         * and if you want to customize behavior per ViewHolder, you can override
+         * {@link #getSwipeDirs(RecyclerView, ViewHolder)}
+         * and / or {@link #getDragDirs(RecyclerView, ViewHolder)}.
+         *
+         * @param dragDirs  Binary OR of direction flags in which the Views can be dragged. Must be
+         *                  composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link
+         *                  #END},
+         *                  {@link #UP} and {@link #DOWN}.
+         * @param swipeDirs Binary OR of direction flags in which the Views can be swiped. Must be
+         *                  composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link
+         *                  #END},
+         *                  {@link #UP} and {@link #DOWN}.
+         */
+        public SimpleCallback(int dragDirs, int swipeDirs) {
+            mDefaultSwipeDirs = swipeDirs;
+            mDefaultDragDirs = dragDirs;
+        }
+
+        /**
+         * Updates the default swipe directions. For example, you can use this method to toggle
+         * certain directions depending on your use case.
+         *
+         * @param defaultSwipeDirs Binary OR of directions in which the ViewHolders can be swiped.
+         */
+        public void setDefaultSwipeDirs(int defaultSwipeDirs) {
+            mDefaultSwipeDirs = defaultSwipeDirs;
+        }
+
+        /**
+         * Updates the default drag directions. For example, you can use this method to toggle
+         * certain directions depending on your use case.
+         *
+         * @param defaultDragDirs Binary OR of directions in which the ViewHolders can be dragged.
+         */
+        public void setDefaultDragDirs(int defaultDragDirs) {
+            mDefaultDragDirs = defaultDragDirs;
+        }
+
+        /**
+         * Returns the swipe directions for the provided ViewHolder.
+         * Default implementation returns the swipe directions that was set via constructor or
+         * {@link #setDefaultSwipeDirs(int)}.
+         *
+         * @param recyclerView The RecyclerView to which the ItemTouchHelper is attached to.
+         * @param viewHolder   The RecyclerView for which the swipe drection is queried.
+         * @return A binary OR of direction flags.
+         */
+        public int getSwipeDirs(RecyclerView recyclerView, ViewHolder viewHolder) {
+            return mDefaultSwipeDirs;
+        }
+
+        /**
+         * Returns the drag directions for the provided ViewHolder.
+         * Default implementation returns the drag directions that was set via constructor or
+         * {@link #setDefaultDragDirs(int)}.
+         *
+         * @param recyclerView The RecyclerView to which the ItemTouchHelper is attached to.
+         * @param viewHolder   The RecyclerView for which the swipe drection is queried.
+         * @return A binary OR of direction flags.
+         */
+        public int getDragDirs(RecyclerView recyclerView, ViewHolder viewHolder) {
+            return mDefaultDragDirs;
+        }
+
+        @Override
+        public int getMovementFlags(RecyclerView recyclerView, ViewHolder viewHolder) {
+            return makeMovementFlags(getDragDirs(recyclerView, viewHolder),
+                    getSwipeDirs(recyclerView, viewHolder));
+        }
+    }
+
+    private class ItemTouchHelperGestureListener extends GestureDetector.SimpleOnGestureListener {
+
+        @Override
+        public boolean onDown(MotionEvent e) {
+            return true;
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+            View child = findChildView(e);
+            if (child != null) {
+                ViewHolder vh = mRecyclerView.getChildViewHolder(child);
+                if (vh != null) {
+                    if (!mCallback.hasDragFlag(mRecyclerView, vh)) {
+                        return;
+                    }
+                    int pointerId = MotionEventCompat.getPointerId(e, 0);
+                    // Long press is deferred.
+                    // Check w/ active pointer id to avoid selecting after motion
+                    // event is canceled.
+                    if (pointerId == mActivePointerId) {
+                        final int index = MotionEventCompat
+                                .findPointerIndex(e, mActivePointerId);
+                        final float x = MotionEventCompat.getX(e, index);
+                        final float y = MotionEventCompat.getY(e, index);
+                        mInitialTouchX = x;
+                        mInitialTouchY = y;
+                        mDx = mDy = 0f;
+                        if (DEBUG) {
+                            Log.d(TAG,
+                                    "onlong press: x:" + mInitialTouchX + ",y:" + mInitialTouchY);
+                        }
+                        if (mCallback.isLongPressDragEnabled()) {
+                            select(vh, ACTION_STATE_DRAG);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private class RecoverAnimation implements AnimatorListenerCompat {
+
+        final float mStartDx;
+
+        final float mStartDy;
+
+        final float mTargetX;
+
+        final float mTargetY;
+
+        final ViewHolder mViewHolder;
+
+        final int mActionState;
+
+        private final ValueAnimatorCompat mValueAnimator;
+
+        private final int mAnimationType;
+
+        public boolean mIsPendingCleanup;
+
+        float mX;
+
+        float mY;
+
+        // if user starts touching a recovering view, we put it into interaction mode again,
+        // instantly.
+        boolean mOverridden = false;
+
+        private boolean mEnded = false;
+
+        private float mFraction;
+
+        public RecoverAnimation(ViewHolder viewHolder, int animationType,
+                int actionState, float startDx, float startDy, float targetX, float targetY) {
+            mActionState = actionState;
+            mAnimationType = animationType;
+            mViewHolder = viewHolder;
+            mStartDx = startDx;
+            mStartDy = startDy;
+            mTargetX = targetX;
+            mTargetY = targetY;
+            mValueAnimator = AnimatorCompatHelper.emptyValueAnimator();
+            mValueAnimator.addUpdateListener(
+                    new AnimatorUpdateListenerCompat() {
+                        @Override
+                        public void onAnimationUpdate(ValueAnimatorCompat animation) {
+                            setFraction(animation.getAnimatedFraction());
+                        }
+                    });
+            mValueAnimator.setTarget(viewHolder.itemView);
+            mValueAnimator.addListener(this);
+            setFraction(0f);
+        }
+
+        public void setDuration(long duration) {
+            mValueAnimator.setDuration(duration);
+        }
+
+        public void start() {
+            mViewHolder.setIsRecyclable(false);
+            mValueAnimator.start();
+        }
+
+        public void cancel() {
+            mValueAnimator.cancel();
+        }
+
+        public void setFraction(float fraction) {
+            mFraction = fraction;
+        }
+
+        /**
+         * We run updates on onDraw method but use the fraction from animator callback.
+         * This way, we can sync translate x/y values w/ the animators to avoid one-off frames.
+         */
+        public void update() {
+            if (mStartDx == mTargetX) {
+                mX = ViewCompat.getTranslationX(mViewHolder.itemView);
+            } else {
+                mX = mStartDx + mFraction * (mTargetX - mStartDx);
+            }
+            if (mStartDy == mTargetY) {
+                mY = ViewCompat.getTranslationY(mViewHolder.itemView);
+            } else {
+                mY = mStartDy + mFraction * (mTargetY - mStartDy);
+            }
+        }
+
+        @Override
+        public void onAnimationStart(ValueAnimatorCompat animation) {
+
+        }
+
+        @Override
+        public void onAnimationEnd(ValueAnimatorCompat animation) {
+            mEnded = true;
+        }
+
+        @Override
+        public void onAnimationCancel(ValueAnimatorCompat animation) {
+            setFraction(1f); //make sure we recover the view's state.
+        }
+
+        @Override
+        public void onAnimationRepeat(ValueAnimatorCompat animation) {
+
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtil.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtil.java
new file mode 100644
index 000000000..22cb8061b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtil.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.android.support.widget.helper;
+
+import android.graphics.Canvas;
+import android.view.View;
+
+import org.telegram.android.support.widget.RecyclerView;
+
+/**
+ * Utility class for {@link ItemTouchHelper} which handles item transformations for different
+ * API versions.
+ * <p/>
+ * This class has methods that map to {@link ItemTouchHelper.Callback}'s drawing methods. Default
+ * implementations in {@link ItemTouchHelper.Callback} call these methods with
+ * {@link RecyclerView.ViewHolder#itemView} and {@link ItemTouchUIUtil} makes necessary changes
+ * on the View depending on the API level. You can access the instance of {@link ItemTouchUIUtil}
+ * via {@link ItemTouchHelper.Callback#getDefaultUIUtil()} and call its methods with the children
+ * of ViewHolder that you want to apply default effects.
+ *
+ * @see ItemTouchHelper.Callback#getDefaultUIUtil()
+ */
+public interface ItemTouchUIUtil {
+
+    /**
+     * The default implementation for {@link ItemTouchHelper.Callback#onChildDraw(Canvas,
+     * RecyclerView, RecyclerView.ViewHolder, float, float, int, boolean)}
+     */
+    void onDraw(Canvas c, RecyclerView recyclerView, View view,
+            float dX, float dY, int actionState, boolean isCurrentlyActive);
+
+    /**
+     * The default implementation for {@link ItemTouchHelper.Callback#onChildDrawOver(Canvas,
+     * RecyclerView, RecyclerView.ViewHolder, float, float, int, boolean)}
+     */
+    void onDrawOver(Canvas c, RecyclerView recyclerView, View view,
+            float dX, float dY, int actionState, boolean isCurrentlyActive);
+
+    /**
+     * The default implementation for {@link ItemTouchHelper.Callback#clearView(RecyclerView,
+     * RecyclerView.ViewHolder)}
+     */
+    void clearView(View view);
+
+    /**
+     * The default implementation for {@link ItemTouchHelper.Callback#onSelectedChanged(
+     * RecyclerView.ViewHolder, int)}
+     */
+    void onSelected(View view);
+}
+
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtilImpl.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtilImpl.java
new file mode 100644
index 000000000..63a492beb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/helper/ItemTouchUIUtilImpl.java
@@ -0,0 +1,138 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.android.support.widget.helper;
+
+import android.graphics.Canvas;
+import android.support.v4.view.ViewCompat;
+import org.telegram.android.support.widget.RecyclerView;
+import android.view.View;
+
+
+/**
+ * Package private class to keep implementations. Putting them inside ItemTouchUIUtil makes them
+ * public API, which is not desired in this case.
+ */
+class ItemTouchUIUtilImpl {
+    final static int item_touch_helper_previous_elevation = 123;
+    static class Lollipop extends Honeycomb {
+        @Override
+        public void onDraw(Canvas c, RecyclerView recyclerView, View view,
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            if (isCurrentlyActive) {
+                Object originalElevation = view.getTag(item_touch_helper_previous_elevation);
+                if (originalElevation == null) {
+                    originalElevation = ViewCompat.getElevation(view);
+                    float newElevation = 1f + findMaxElevation(recyclerView, view);
+                    ViewCompat.setElevation(view, newElevation);
+                    view.setTag(item_touch_helper_previous_elevation, originalElevation);
+                }
+            }
+            super.onDraw(c, recyclerView, view, dX, dY, actionState, isCurrentlyActive);
+        }
+
+        private float findMaxElevation(RecyclerView recyclerView, View itemView) {
+            final int childCount = recyclerView.getChildCount();
+            float max = 0;
+            for (int i = 0; i < childCount; i++) {
+                final View child = recyclerView.getChildAt(i);
+                if (child == itemView) {
+                    continue;
+                }
+                final float elevation = ViewCompat.getElevation(child);
+                if (elevation > max) {
+                    max = elevation;
+                }
+            }
+            return max;
+        }
+
+        @Override
+        public void clearView(View view) {
+            final Object tag = view.getTag(item_touch_helper_previous_elevation);
+            if (tag != null && tag instanceof Float) {
+                ViewCompat.setElevation(view, (Float) tag);
+            }
+            view.setTag(item_touch_helper_previous_elevation, null);
+            super.clearView(view);
+        }
+    }
+
+    static class Honeycomb implements ItemTouchUIUtil {
+
+        @Override
+        public void clearView(View view) {
+            ViewCompat.setTranslationX(view, 0f);
+            ViewCompat.setTranslationY(view, 0f);
+        }
+
+        @Override
+        public void onSelected(View view) {
+
+        }
+
+        @Override
+        public void onDraw(Canvas c, RecyclerView recyclerView, View view,
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            ViewCompat.setTranslationX(view, dX);
+            ViewCompat.setTranslationY(view, dY);
+        }
+
+        @Override
+        public void onDrawOver(Canvas c, RecyclerView recyclerView,
+                View view, float dX, float dY, int actionState, boolean isCurrentlyActive) {
+
+        }
+    }
+
+    static class Gingerbread implements ItemTouchUIUtil {
+
+        private void draw(Canvas c, RecyclerView parent, View view,
+                float dX, float dY) {
+            c.save();
+            c.translate(dX, dY);
+            parent.drawChild(c, view, 0);
+            c.restore();
+        }
+
+        @Override
+        public void clearView(View view) {
+            view.setVisibility(View.VISIBLE);
+        }
+
+        @Override
+        public void onSelected(View view) {
+            view.setVisibility(View.INVISIBLE);
+        }
+
+        @Override
+        public void onDraw(Canvas c, RecyclerView recyclerView, View view,
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            if (actionState != ItemTouchHelper.ACTION_STATE_DRAG) {
+                draw(c, recyclerView, view, dX, dY);
+            }
+        }
+
+        @Override
+        public void onDrawOver(Canvas c, RecyclerView recyclerView,
+                View view, float dX, float dY,
+                int actionState, boolean isCurrentlyActive) {
+            if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {
+                draw(c, recyclerView, view, dX, dY);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/util/SortedListAdapterCallback.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/util/SortedListAdapterCallback.java
index 44ddd667e..2457f4932 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/util/SortedListAdapterCallback.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/util/SortedListAdapterCallback.java
@@ -16,7 +16,7 @@
 
 package org.telegram.android.support.widget.util;
 
-import android.support.v7.util.SortedList;
+import org.telegram.android.support.util.SortedList;
 import org.telegram.android.support.widget.RecyclerView;
 
 /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index c7b0937a6..575d1e217 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -90,7 +90,6 @@ public void run() {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                         int selectedBackground = preferences.getInt("selectedBackground", 1000001);
                         selectedColor = preferences.getInt("selectedColor", 0);
-                        int cacheColorHint = 0;
                         if (selectedColor == 0) {
                             if (selectedBackground == 1000001) {
                                 cachedWallpaper = applicationContext.getResources().getDrawable(R.drawable.background_hd);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 928d5e572..3f1dafe5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -363,7 +363,7 @@ public void run() {
                     try {
                         SerializedData data = new SerializedData(configFile);
                         isTestBackend = data.readInt32(false);
-                        int version = data.readInt32(false);
+                        data.readInt32(false);
                         sessionsToDestroy.clear();
                         int count = data.readInt32(false);
                         for (int a = 0; a < count; a++) {
@@ -2700,7 +2700,7 @@ public void run() {
                 return;
             }
 
-            int messageLength = data.readInt32(false);
+            data.readInt32(false);
 
             TLObject message = deserialize(getRequestWithMessageId(messageId), data, true);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 2a006d37b..e7268e2ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -28,6 +28,7 @@
     private final static int stateFinished = 3;
 
     private final static int downloadChunkSize = 1024 * 32;
+    private final static int downloadChunkSizeBig = 1024 * 128;
     private final static int maxDownloadRequests = 3;
 
     private int datacenter_id;
@@ -38,6 +39,7 @@
     private FileLoadOperationDelegate delegate;
     private byte[] key;
     private byte[] iv;
+    private int currentDownloadChunkSize;
 
     private int nextDownloadOffset = 0;
     private ArrayList<RequestInfo> requestInfos = new ArrayList<>(maxDownloadRequests);
@@ -165,6 +167,7 @@ public void start() {
         if (state != stateIdle) {
             return;
         }
+        currentDownloadChunkSize = totalBytesCount >= 1024 * 1024 * 30 ? downloadChunkSizeBig : downloadChunkSize;
         state = stateDownloading;
         if (location == null) {
             Utilities.stageQueue.postRunnable(new Runnable() {
@@ -175,7 +178,6 @@ public void run() {
             });
             return;
         }
-        Long mediaId = null;
         String fileNameFinal;
         String fileNameTemp;
         String fileNameIv = null;
@@ -223,7 +225,7 @@ public void run() {
             cacheFileTemp = new File(tempPath, fileNameTemp);
             if (cacheFileTemp.exists()) {
                 downloadedBytes = (int)cacheFileTemp.length();
-                nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
+                nextDownloadOffset = downloadedBytes = downloadedBytes / currentDownloadChunkSize * currentDownloadChunkSize;
             }
             if (fileNameIv != null) {
                 cacheIvTemp = new File(tempPath, fileNameIv);
@@ -388,10 +390,10 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                     }
                 }
 
-                if (currentBytesSize != downloadChunkSize) {
+                if (currentBytesSize != currentDownloadChunkSize) {
                     onFinishLoadingFile();
                 } else {
-                    if (totalBytesCount != downloadedBytes && downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount > downloadedBytes) {
+                    if (totalBytesCount != downloadedBytes && downloadedBytes % currentDownloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount > downloadedBytes) {
                         startDownloadRequest();
                     } else {
                         onFinishLoadingFile();
@@ -422,7 +424,7 @@ private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error)
                     startDownloadRequest();
                 }
             } else if (error.text.contains("OFFSET_INVALID")) {
-                if (downloadedBytes % downloadChunkSize == 0) {
+                if (downloadedBytes % currentDownloadChunkSize == 0) {
                     try {
                         onFinishLoadingFile();
                     } catch (Exception e) {
@@ -460,12 +462,12 @@ private void startDownloadRequest() {
             if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
                 break;
             }
-            boolean isLast = totalBytesCount <= 0 || a == count - 1 || totalBytesCount > 0 && nextDownloadOffset + downloadChunkSize >= totalBytesCount;
+            boolean isLast = totalBytesCount <= 0 || a == count - 1 || totalBytesCount > 0 && nextDownloadOffset + currentDownloadChunkSize >= totalBytesCount;
             TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
             req.location = location;
             req.offset = nextDownloadOffset;
-            req.limit = downloadChunkSize;
-            nextDownloadOffset += downloadChunkSize;
+            req.limit = currentDownloadChunkSize;
+            nextDownloadOffset += currentDownloadChunkSize;
 
             final RequestInfo requestInfo = new RequestInfo();
             requestInfos.add(requestInfo);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 2860c3cc9..19ebeba03 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -675,6 +675,15 @@ public static File getPathToAttach(TLObject attach, String ext, boolean forceCac
         return closestObject;
     }
 
+    public static String getFileExtension(File file) {
+        String name = file.getName();
+        try {
+            return name.substring(name.lastIndexOf(".") + 1);
+        } catch (Exception e) {
+            return "";
+        }
+    }
+
     public static String getDocumentFileName(TLRPC.Document document) {
         if (document != null) {
             if (document.file_name != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index 7043dca59..b99706fe0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -637,7 +637,7 @@ public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc d
                 FileLog.d("tmessages", String.format("===== Duplicate message id %d received, ignoring", messageId));
                 return;
             }
-            int messageLength = data.readInt32(false);
+            data.readInt32(false);
 
             int constructor = data.readInt32(false);
             TLObject object = TLClassStore.Instance().TLdeserialize(data, constructor, false);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index 5de616dc4..954025cc1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -11634,6 +11634,9 @@ public static MessagesFilter TLdeserialize(AbsSerializedData stream, int constru
                 case 0x9eddf188:
                     result = new TL_inputMessagesFilterDocument();
                     break;
+                case 0x5afbf764:
+                    result = new TL_inputMessagesFilterAudioDocuments();
+                    break;
                 case 0x9fc00e65:
                     result = new TL_inputMessagesFilterVideo();
                     break;
@@ -11672,6 +11675,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_inputMessagesFilterAudioDocuments extends MessagesFilter {
+        public static int constructor = 0x5afbf764;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_inputMessagesFilterVideo extends MessagesFilter {
         public static int constructor = 0x9fc00e65;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 217e63fb1..417d5c4e5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -143,7 +143,7 @@ public void run() {
                         FileLog.e("tmessages", e2);
                     }
 
-                    FileLog.d("tmessages", String.format(TcpConnection.this + " Connecting (%s:%d)", hostAddress, hostPort));
+                    FileLog.d("tmessages", String.format(TcpConnection.this + " Connecting (%s:%d), connection class %d", hostAddress, hostPort, transportRequestClass));
                     firstPacket = true;
                     if (restOfTheData != null) {
                         BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 7ddad2ce3..358725c23 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -15,7 +15,6 @@
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -23,6 +22,7 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
 
@@ -38,7 +38,6 @@ public boolean canOpenMenu() {
         }
     }
 
-    private FrameLayout titleFrameLayout;
     private ImageView backButtonImageView;
     private TextView titleTextView;
     private TextView subTitleTextView;
@@ -60,116 +59,6 @@ public boolean canOpenMenu() {
 
     public ActionBar(Context context) {
         super(context);
-        titleFrameLayout = new FrameLayout(context);
-        addView(titleFrameLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)titleFrameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        titleFrameLayout.setLayoutParams(layoutParams);
-        titleFrameLayout.setPadding(0, 0, AndroidUtilities.dp(4), 0);
-        titleFrameLayout.setEnabled(false);
-    }
-
-    private void positionBackImage(int height) {
-        if (backButtonImageView != null) {
-            LayoutParams layoutParams = (LayoutParams)backButtonImageView.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(54);
-            layoutParams.height = height;
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            backButtonImageView.setLayoutParams(layoutParams);
-        }
-    }
-
-    private void positionTitle(int width, int height) {
-        int offset = AndroidUtilities.dp(2);
-        if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            offset = AndroidUtilities.dp(1);
-        }
-        int maxTextWidth = 0;
-
-        LayoutParams layoutParams;
-
-        if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
-            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            } else {
-                titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-            }
-
-            layoutParams = (LayoutParams) titleTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            titleTextView.setLayoutParams(layoutParams);
-            titleTextView.measure(width, height);
-            maxTextWidth = titleTextView.getMeasuredWidth();
-        }
-        if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-            if (!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                subTitleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            } else {
-                subTitleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-            }
-
-            layoutParams = (LayoutParams) subTitleTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            subTitleTextView.setLayoutParams(layoutParams);
-            subTitleTextView.measure(width, height);
-            maxTextWidth = Math.max(maxTextWidth, subTitleTextView.getMeasuredWidth());
-        }
-
-        int x;
-        if (backButtonImageView != null && backButtonImageView.getVisibility() == VISIBLE) {
-            x = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 80 : 72);
-        } else {
-            x = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 26 : 18);
-        }
-
-        if (menu != null) {
-            maxTextWidth = Math.min(maxTextWidth, width - menu.getMeasuredWidth() - AndroidUtilities.dp(16) - x);
-        }
-
-        if (titleTextView != null && titleTextView.getVisibility() == VISIBLE) {
-            layoutParams = (LayoutParams) titleTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = titleTextView.getMeasuredHeight();
-            int y;
-            if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-                y = (height / 2 - titleTextView.getMeasuredHeight()) / 2 + offset;
-            } else {
-                y = (height - titleTextView.getMeasuredHeight()) / 2 - AndroidUtilities.dp(1);
-            }
-            layoutParams.setMargins(x, y, 0, 0);
-            titleTextView.setLayoutParams(layoutParams);
-        }
-        if (subTitleTextView != null && subTitleTextView.getVisibility() == VISIBLE) {
-            layoutParams = (LayoutParams) subTitleTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = subTitleTextView.getMeasuredHeight();
-            layoutParams.setMargins(x, height / 2 + (height / 2 - subTitleTextView.getMeasuredHeight()) / 2 - offset, 0, 0);
-            subTitleTextView.setLayoutParams(layoutParams);
-        }
-
-        MarginLayoutParams layoutParams1 = (MarginLayoutParams) titleFrameLayout.getLayoutParams();
-        layoutParams1.width = x + maxTextWidth + (isSearchFieldVisible ? 0 : AndroidUtilities.dp(6));
-        layoutParams1.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
-        titleFrameLayout.setLayoutParams(layoutParams1);
-    }
-
-    public void positionMenu(int width, int height) {
-        if (menu == null) {
-            return;
-        }
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)menu.getLayoutParams();
-        layoutParams.width = isSearchFieldVisible ? LayoutHelper.MATCH_PARENT : LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = height;
-        layoutParams.leftMargin = isSearchFieldVisible ? AndroidUtilities.dp(AndroidUtilities.isTablet() ? 74 : 66) : 0;
-        layoutParams.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
-        menu.setLayoutParams(layoutParams);
-        menu.measure(width, height);
     }
 
     private void createBackButtonImage() {
@@ -177,9 +66,10 @@ private void createBackButtonImage() {
             return;
         }
         backButtonImageView = new ImageView(getContext());
-        titleFrameLayout.addView(backButtonImageView);
         backButtonImageView.setScaleType(ImageView.ScaleType.CENTER);
         backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        addView(backButtonImageView, LayoutHelper.createFrame(54, 54, Gravity.LEFT | Gravity.TOP));
+
         backButtonImageView.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -195,31 +85,19 @@ public void onClick(View v) {
     }
 
     public void setBackButtonDrawable(Drawable drawable) {
-        boolean reposition = false;
         if (backButtonImageView == null) {
             createBackButtonImage();
-        } else {
-            reposition = true;
         }
         backButtonImageView.setVisibility(drawable == null ? GONE : VISIBLE);
         backButtonImageView.setImageDrawable(drawable);
-        if (reposition) {
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
     }
 
     public void setBackButtonImage(int resource) {
-        boolean reposition = false;
         if (backButtonImageView == null) {
             createBackButtonImage();
-        } else {
-            reposition = true;
         }
         backButtonImageView.setVisibility(resource == 0 ? GONE : VISIBLE);
         backButtonImageView.setImageResource(resource);
-        if (reposition) {
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
     }
 
     private void createSubtitleTextView() {
@@ -227,13 +105,13 @@ private void createSubtitleTextView() {
             return;
         }
         subTitleTextView = new TextView(getContext());
-        titleFrameLayout.addView(subTitleTextView);
         subTitleTextView.setGravity(Gravity.LEFT);
         subTitleTextView.setTextColor(0xffd7e8f7);
         subTitleTextView.setSingleLine(true);
         subTitleTextView.setLines(1);
         subTitleTextView.setMaxLines(1);
         subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(subTitleTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
     }
 
     public void setSubtitle(CharSequence value) {
@@ -243,22 +121,6 @@ public void setSubtitle(CharSequence value) {
         if (subTitleTextView != null) {
             subTitleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : INVISIBLE);
             subTitleTextView.setText(value);
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
-    }
-
-    public void setSubTitleIcon(int resourceId, Drawable drawable, int padding) {
-        if ((resourceId != 0 || drawable != null) && subTitleTextView == null) {
-            createSubtitleTextView();
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
-        if (subTitleTextView != null) {
-            if (drawable != null) {
-                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
-            } else {
-                subTitleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
-            }
-            subTitleTextView.setCompoundDrawablePadding(padding);
         }
     }
 
@@ -268,39 +130,32 @@ private void createTitleTextView() {
         }
         titleTextView = new TextView(getContext());
         titleTextView.setGravity(Gravity.LEFT);
-        titleTextView.setSingleLine(true);
         titleTextView.setLines(1);
         titleTextView.setMaxLines(1);
+        titleTextView.setSingleLine(true);
         titleTextView.setEllipsize(TextUtils.TruncateAt.END);
-        titleFrameLayout.addView(titleTextView);
         titleTextView.setTextColor(0xffffffff);
         titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        addView(titleTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
     }
 
     public void setTitle(CharSequence value) {
-        boolean created = false;
         if (value != null && titleTextView == null) {
             createTitleTextView();
-            created = true;
         }
         if (titleTextView != null) {
             lastTitle = value;
             titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : INVISIBLE);
             titleTextView.setText(value);
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-            if (!created) {
-                titleTextView.setText(value);
-            }
         }
     }
 
-    public void setTitleIcon(int resourceId, int padding) {
-        if (resourceId != 0 && titleTextView == null) {
-            createTitleTextView();
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
-        titleTextView.setCompoundDrawablesWithIntrinsicBounds(resourceId, 0, 0, 0);
-        titleTextView.setCompoundDrawablePadding(padding);
+    public TextView getSubTitleTextView() {
+        return subTitleTextView;
+    }
+
+    public TextView getTitleTextView() {
+        return titleTextView;
     }
 
     public Drawable getSubTitleIcon() {
@@ -332,17 +187,6 @@ public void setActionBarMenuOnItemClick(ActionBarMenuOnItemClick listener) {
         actionBarMenuOnItemClick = listener;
     }
 
-    public void setCustomView(int resourceId) {
-        LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        View view = li.inflate(resourceId, null);
-        addView(view);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)view.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
-        view.setLayoutParams(layoutParams);
-    }
-
     public ActionBarMenu createActionMode() {
         if (actionMode != null) {
             return actionMode;
@@ -358,7 +202,7 @@ public ActionBarMenu createActionMode() {
         actionMode.setLayoutParams(layoutParams);
         actionMode.setVisibility(INVISIBLE);
 
-        if (occupyStatusBar) {
+        if (occupyStatusBar && actionModeTop == null) {
             actionModeTop = new View(getContext());
             actionModeTop.setBackgroundColor(0x99000000);
             addView(actionModeTop);
@@ -381,8 +225,14 @@ public void showActionMode() {
         if (occupyStatusBar && actionModeTop != null) {
             actionModeTop.setVisibility(VISIBLE);
         }
-        if (titleFrameLayout != null) {
-            titleFrameLayout.setVisibility(INVISIBLE);
+        if (titleTextView != null) {
+            titleTextView.setVisibility(INVISIBLE);
+        }
+        if (subTitleTextView != null) {
+            subTitleTextView.setVisibility(INVISIBLE);
+        }
+        if (backButtonImageView != null) {
+            backButtonImageView.setVisibility(INVISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(INVISIBLE);
@@ -397,14 +247,33 @@ public void hideActionMode() {
         if (occupyStatusBar && actionModeTop != null) {
             actionModeTop.setVisibility(INVISIBLE);
         }
-        if (titleFrameLayout != null) {
-            titleFrameLayout.setVisibility(VISIBLE);
+        if (titleTextView != null) {
+            titleTextView.setVisibility(VISIBLE);
+        }
+        if (subTitleTextView != null) {
+            subTitleTextView.setVisibility(VISIBLE);
+        }
+        if (backButtonImageView != null) {
+            backButtonImageView.setVisibility(VISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(VISIBLE);
         }
     }
 
+    public void showActionModeTop() {
+        if (occupyStatusBar && actionModeTop == null) {
+            actionModeTop = new View(getContext());
+            actionModeTop.setBackgroundColor(0x99000000);
+            addView(actionModeTop);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) actionModeTop.getLayoutParams();
+            layoutParams.height = AndroidUtilities.statusBarHeight;
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            actionModeTop.setLayoutParams(layoutParams);
+        }
+    }
+
     public boolean isActionModeShowed() {
         return actionMode != null && actionMode.getVisibility() == VISIBLE;
     }
@@ -439,12 +308,136 @@ public void openSearchField(String text) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int actionBarHeight = AndroidUtilities.getCurrentActionBarHeight();
-        positionBackImage(actionBarHeight);
-        positionMenu(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
-        positionTitle(MeasureSpec.getSize(widthMeasureSpec), actionBarHeight);
-        actionBarHeight += occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(actionBarHeight + extraHeight, MeasureSpec.EXACTLY));
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int height = MeasureSpec.getSize(heightMeasureSpec);
+        int actionBarHeight = getCurrentActionBarHeight();
+        int actionBarHeightSpec = MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.EXACTLY);
+
+        setMeasuredDimension(width, actionBarHeight + extraHeight + (occupyStatusBar ? AndroidUtilities.statusBarHeight : 0));
+
+        int textLeft;
+        if (backButtonImageView != null && backButtonImageView.getVisibility() != GONE) {
+            backButtonImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(54), MeasureSpec.EXACTLY), actionBarHeightSpec);
+            textLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 80 : 72);
+        } else {
+            textLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 26 : 18);
+        }
+
+        if (menu != null && menu.getVisibility() != GONE) {
+            int menuWidth;
+            if (isSearchFieldVisible) {
+                menuWidth = MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 74 : 66), MeasureSpec.EXACTLY);
+            } else {
+                menuWidth = MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST);
+            }
+            menu.measure(menuWidth, actionBarHeightSpec);
+        }
+
+        if (titleTextView != null && titleTextView.getVisibility() != GONE || subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
+            int availableWidth = width - (menu != null ? menu.getMeasuredWidth() : 0) - AndroidUtilities.dp(16) - textLeft;
+
+            if (titleTextView != null && titleTextView.getVisibility() != GONE) {
+                titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, !AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 18 : 20);
+                titleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.AT_MOST));
+
+            }
+            if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
+                subTitleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, !AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 14 : 16);
+                subTitleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.AT_MOST));
+            }
+        }
+
+        int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            View child = getChildAt(i);
+            if (child.getVisibility() == GONE || child == titleTextView || child == subTitleTextView || child == menu || child == backButtonImageView) {
+                continue;
+            }
+            measureChildWithMargins(child, widthMeasureSpec, 0, MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY), 0);
+        }
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        int additionalTop = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
+
+        int textLeft;
+        if (backButtonImageView != null && backButtonImageView.getVisibility() != GONE) {
+            backButtonImageView.layout(0, additionalTop, backButtonImageView.getMeasuredWidth(), additionalTop + backButtonImageView.getMeasuredHeight());
+            textLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 80 : 72);
+        } else {
+            textLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 26 : 18);
+        }
+
+        if (menu != null && menu.getVisibility() != GONE) {
+            int menuLeft = isSearchFieldVisible ? AndroidUtilities.dp(AndroidUtilities.isTablet() ? 74 : 66) : (right - left) - menu.getMeasuredWidth();
+            menu.layout(menuLeft, additionalTop, menuLeft + menu.getMeasuredWidth(), additionalTop + menu.getMeasuredHeight());
+        }
+
+        int offset = AndroidUtilities.dp(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 1 : 2);
+        if (titleTextView != null && titleTextView.getVisibility() != GONE) {
+            int textTop;
+            if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
+                textTop = (getCurrentActionBarHeight() / 2 - titleTextView.getMeasuredHeight()) / 2 + offset;
+            } else {
+                textTop = (getCurrentActionBarHeight() - titleTextView.getMeasuredHeight()) / 2 - AndroidUtilities.dp(1);
+            }
+            titleTextView.layout(textLeft, additionalTop + textTop, textLeft + titleTextView.getMeasuredWidth(), additionalTop + textTop + titleTextView.getMeasuredHeight());
+        }
+        if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
+            int textTop = getCurrentActionBarHeight() / 2 + (getCurrentActionBarHeight() / 2 - subTitleTextView.getMeasuredHeight()) / 2 - offset;
+            subTitleTextView.layout(textLeft, additionalTop + textTop, textLeft + subTitleTextView.getMeasuredWidth(), additionalTop + textTop + subTitleTextView.getMeasuredHeight());
+        }
+
+        int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            View child = getChildAt(i);
+            if (child.getVisibility() == GONE || child == titleTextView || child == subTitleTextView || child == menu || child == backButtonImageView) {
+                continue;
+            }
+
+            LayoutParams lp = (LayoutParams) child.getLayoutParams();
+
+            int width = child.getMeasuredWidth();
+            int height = child.getMeasuredHeight();
+            int childLeft;
+            int childTop;
+
+            int gravity = lp.gravity;
+            if (gravity == -1) {
+                gravity = Gravity.TOP | Gravity.LEFT;
+            }
+
+            final int absoluteGravity = gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
+            final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;
+
+            switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
+                case Gravity.CENTER_HORIZONTAL:
+                    childLeft = (right - left - width) / 2 + lp.leftMargin - lp.rightMargin;
+                    break;
+                case Gravity.RIGHT:
+                    childLeft = right - width - lp.rightMargin;
+                    break;
+                case Gravity.LEFT:
+                default:
+                    childLeft = lp.leftMargin;
+            }
+
+            switch (verticalGravity) {
+                case Gravity.TOP:
+                    childTop = lp.topMargin;
+                    break;
+                case Gravity.CENTER_VERTICAL:
+                    childTop = (bottom - top - height) / 2 + lp.topMargin - lp.bottomMargin;
+                    break;
+                case Gravity.BOTTOM:
+                    childTop = (bottom - top) - height - lp.bottomMargin;
+                    break;
+                default:
+                    childTop = lp.topMargin;
+            }
+            child.layout(childLeft, childTop, childLeft + width, childTop + height);
+        }
     }
 
     public void onMenuButtonPressed() {
@@ -474,10 +467,13 @@ public void setTitleOverlayText(String text) {
         if (titleTextView != null) {
             titleTextView.setVisibility(textToSet != null && !isSearchFieldVisible ? VISIBLE : INVISIBLE);
             titleTextView.setText(textToSet);
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
         }
     }
 
+    public boolean isSearchFieldVisible() {
+        return isSearchFieldVisible;
+    }
+
     public void setExtraHeight(int value, boolean layout) {
         extraHeight = value;
         if (layout) {
@@ -520,4 +516,14 @@ public boolean onTouchEvent(MotionEvent event) {
         super.onTouchEvent(event);
         return true;
     }
+
+    public static int getCurrentActionBarHeight() {
+        if (AndroidUtilities.isTablet()) {
+            return AndroidUtilities.dp(64);
+        } else if (ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            return AndroidUtilities.dp(48);
+        } else {
+            return AndroidUtilities.dp(56);
+        }
+    }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 68b3b28be..f74d7c4d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -59,7 +59,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
             if (child instanceof ActionBar) {
                 return super.drawChild(canvas, child, drawingTime);
             } else {
-                boolean wasActionBar = false;
+                //boolean wasActionBar = false;
                 int actionBarHeight = 0;
                 int childCount = getChildCount();
                 for (int a = 0; a < childCount; a++) {
@@ -339,7 +339,7 @@ private void prepareForMoving(MotionEvent ev) {
         BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
         View fragmentView = lastFragment.fragmentView;
         if (fragmentView == null) {
-            fragmentView = lastFragment.createView(parentActivity, parentActivity.getLayoutInflater());
+            fragmentView = lastFragment.createView(parentActivity);
         } else {
             ViewGroup parent = (ViewGroup) fragmentView.getParent();
             if (parent != null) {
@@ -625,7 +625,7 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
         fragment.setParentLayout(this);
         View fragmentView = fragment.fragmentView;
         if (fragmentView == null) {
-            fragmentView = fragment.createView(parentActivity, parentActivity.getLayoutInflater());
+            fragmentView = fragment.createView(parentActivity);
         } else {
             ViewGroup parent = (ViewGroup) fragmentView.getParent();
             if (parent != null) {
@@ -829,7 +829,7 @@ public void closeLastFragment(boolean animated) {
             previousFragment.setParentLayout(this);
             View fragmentView = previousFragment.fragmentView;
             if (fragmentView == null) {
-                fragmentView = previousFragment.createView(parentActivity, parentActivity.getLayoutInflater());
+                fragmentView = previousFragment.createView(parentActivity);
             } else {
                 ViewGroup parent = (ViewGroup) fragmentView.getParent();
                 if (parent != null) {
@@ -972,7 +972,7 @@ public void showLastFragment() {
         previousFragment.setParentLayout(this);
         View fragmentView = previousFragment.fragmentView;
         if (fragmentView == null) {
-            fragmentView = previousFragment.createView(parentActivity, parentActivity.getLayoutInflater());
+            fragmentView = previousFragment.createView(parentActivity);
         } else {
             ViewGroup parent = (ViewGroup) fragmentView.getParent();
             if (parent != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index 18ce670aa..2604eb466 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -36,7 +36,7 @@ public View addItemResource(int id, int resourceId) {
         View view = li.inflate(resourceId, null);
         view.setTag(id);
         addView(view);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)view.getLayoutParams();
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) view.getLayoutParams();
         layoutParams.height = LayoutHelper.MATCH_PARENT;
         view.setBackgroundResource(parentActionBar.itemsBackgroundResourceId);
         view.setLayoutParams(layoutParams);
@@ -74,14 +74,14 @@ public ActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawa
             menuItem.iconView.setImageResource(icon);
         }
         addView(menuItem);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)menuItem.getLayoutParams();
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) menuItem.getLayoutParams();
         layoutParams.height = LayoutHelper.MATCH_PARENT;
         layoutParams.width = width;
         menuItem.setLayoutParams(layoutParams);
         menuItem.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
-                ActionBarMenuItem item = (ActionBarMenuItem)view;
+                ActionBarMenuItem item = (ActionBarMenuItem) view;
                 if (item.hasSubMenu()) {
                     if (parentActionBar.actionBarMenuOnItemClick.canOpenMenu()) {
                         item.toggleSubMenu();
@@ -89,7 +89,7 @@ public void onClick(View view) {
                 } else if (item.isSearchField()) {
                     parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                 } else {
-                    onItemClick((Integer)view.getTag());
+                    onItemClick((Integer) view.getTag());
                 }
             }
         });
@@ -100,7 +100,7 @@ public void hideAllPopupMenus() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ((ActionBarMenuItem)view).closeSubMenu();
+                ((ActionBarMenuItem) view).closeSubMenu();
             }
         }
     }
@@ -122,10 +122,16 @@ public void onMenuButtonPressed() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ActionBarMenuItem item = (ActionBarMenuItem)view;
-                if (item.hasSubMenu() && item.getVisibility() == VISIBLE) {
+                ActionBarMenuItem item = (ActionBarMenuItem) view;
+                if (item.getVisibility() != VISIBLE) {
+                    continue;
+                }
+                if (item.hasSubMenu()) {
                     item.toggleSubMenu();
                     break;
+                } else if (item.overrideMenuClick) {
+                    onItemClick((Integer) item.getTag());
+                    break;
                 }
             }
         }
@@ -135,7 +141,7 @@ public void closeSearchField() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ActionBarMenuItem item = (ActionBarMenuItem)view;
+                ActionBarMenuItem item = (ActionBarMenuItem) view;
                 if (item.isSearchField()) {
                     parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                     break;
@@ -148,7 +154,7 @@ public void openSearchField(boolean toggle, String text) {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ActionBarMenuItem item = (ActionBarMenuItem)view;
+                ActionBarMenuItem item = (ActionBarMenuItem) view;
                 if (item.isSearchField()) {
                     if (toggle) {
                         parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
@@ -164,7 +170,7 @@ public void openSearchField(boolean toggle, String text) {
     public ActionBarMenuItem getItem(int id) {
         View v = findViewWithTag(id);
         if (v instanceof ActionBarMenuItem) {
-            return (ActionBarMenuItem)v;
+            return (ActionBarMenuItem) v;
         }
         return null;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index ad5fc1d9b..aa357e762 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -82,6 +82,8 @@ public void onSearchPressed(EditText editText) {
     private int subMenuOpenSide = 0;
     private ActionBarMenuItemDelegate delegate;
     private boolean allowCloseAnimation = true;
+    protected boolean overrideMenuClick;
+    private boolean processedPopupClick;
 
     public ActionBarMenuItem(Context context, ActionBarMenu menu, int background) {
         super(context);
@@ -129,21 +131,23 @@ public void run() {
                 x -= location[0];
                 y -= location[1];
                 selectedMenuView = null;
-                for (int a = 0; a < popupLayout.getChildCount(); a++) {
-                    View child = popupLayout.getChildAt(a);
+                for (int a = 0; a < popupLayout.getItemsCount(); a++) {
+                    View child = popupLayout.getItemAt(a);
                     child.getHitRect(rect);
                     if ((Integer) child.getTag() < 100) {
                         if (!rect.contains((int) x, (int) y)) {
                             child.setPressed(false);
                             child.setSelected(false);
-                            if (Build.VERSION.SDK_INT >= 21) {
+                            if (Build.VERSION.SDK_INT == 21) {
                                 child.getBackground().setVisible(false, false);
                             }
                         } else {
                             child.setPressed(true);
                             child.setSelected(true);
                             if (Build.VERSION.SDK_INT >= 21) {
-                                child.getBackground().setVisible(true, false);
+                                if (Build.VERSION.SDK_INT == 21) {
+                                    child.getBackground().setVisible(true, false);
+                                }
                                 child.drawableHotspotChanged(x, y - child.getTop());
                             }
                             selectedMenuView = child;
@@ -192,9 +196,6 @@ public TextView addSubItem(int id, String text, int icon) {
             rect = new Rect();
             location = new int[2];
             popupLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
-            popupLayout.setOrientation(LinearLayout.VERTICAL);
-            popupLayout.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8));
-            //popupLayout.setBackgroundResource(R.drawable.popup_fixed);
             popupLayout.setOnTouchListener(new OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -252,6 +253,10 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
             @Override
             public void onClick(View view) {
                 if (popupWindow != null && popupWindow.isShowing()) {
+                    if (processedPopupClick) {
+                        return;
+                    }
+                    processedPopupClick = true;
                     popupWindow.dismiss(allowCloseAnimation);
                 }
                 if (parentMenu != null) {
@@ -306,6 +311,7 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
                 }
             });
         }
+        processedPopupClick = false;
         popupWindow.setFocusable(true);
         if (popupLayout.getMeasuredWidth() == 0) {
             updateOrShowPopup(true, true);
@@ -367,6 +373,11 @@ public ActionBarMenuItem setIsSearchField(boolean value) {
         return setIsSearchField(value, true);
     }
 
+    public ActionBarMenuItem setOverrideMenuClick(boolean value) {
+        overrideMenuClick = value;
+        return this;
+    }
+
     public ActionBarMenuItem setIsSearchField(boolean value, boolean needClearButton) {
         if (parentMenu == null) {
             return this;
@@ -389,7 +400,8 @@ public ActionBarMenuItem setIsSearchField(boolean value, boolean needClearButton
             searchField.setSingleLine(true);
             searchField.setBackgroundResource(0);
             searchField.setPadding(0, 0, 0, 0);
-            searchField.setInputType(EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+            int inputType = searchField.getInputType() | EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
+            searchField.setInputType(inputType);
             if (android.os.Build.VERSION.SDK_INT < 11) {
                 searchField.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
                     public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
@@ -467,7 +479,7 @@ public void afterTextChanged(Editable s) {
             layoutParams2.width = LayoutHelper.MATCH_PARENT;
             layoutParams2.gravity = Gravity.CENTER_VERTICAL;
             layoutParams2.height = AndroidUtilities.dp(36);
-            layoutParams2.rightMargin = AndroidUtilities.dp(48);
+            layoutParams2.rightMargin = needClearButton ? AndroidUtilities.dp(48) : 0;
             searchField.setLayoutParams(layoutParams2);
 
             if (needClearButton) {
@@ -532,6 +544,10 @@ private void updateOrShowPopup(boolean show, boolean update) {
             }
         }
 
+        if (show) {
+            popupLayout.scrollToTop();
+        }
+
         if (subMenuOpenSide == 0) {
             if (showFromBottom) {
                 if (show) {
@@ -574,10 +590,6 @@ public void hideSubItem(int id) {
         if (view != null) {
             view.setVisibility(GONE);
         }
-        view = popupLayout.findViewWithTag(100 + id);
-        if (view != null) {
-            view.setVisibility(GONE);
-        }
     }
 
     public void showSubItem(int id) {
@@ -585,9 +597,5 @@ public void showSubItem(int id) {
         if (view != null) {
             view.setVisibility(VISIBLE);
         }
-        view = popupLayout.findViewWithTag(100 + id);
-        if (view != null) {
-            view.setVisibility(VISIBLE);
-        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 7d6816f25..ee42b1eb9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -19,14 +19,18 @@
 import android.os.Build;
 import android.view.KeyEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.animation.DecelerateInterpolator;
+import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.PopupWindow;
+import android.widget.ScrollView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
+import org.telegram.ui.Components.LayoutHelper;
 
 import java.lang.reflect.Field;
 import java.util.HashMap;
@@ -62,7 +66,7 @@ public void onScrollChanged() {
         void onDispatchKeyEvent(KeyEvent keyEvent);
     }
 
-    public static class ActionBarPopupWindowLayout extends LinearLayout {
+    public static class ActionBarPopupWindowLayout extends FrameLayout {
 
         private OnDispatchKeyEventListener mOnDispatchKeyEventListener;
         protected static Drawable backgroundDrawable;
@@ -73,13 +77,26 @@ public void onScrollChanged() {
         private boolean showedFromBotton;
         private HashMap<View, Integer> positions = new HashMap<>();
 
+        private ScrollView scrollView;
+        private LinearLayout linearLayout;
+
         public ActionBarPopupWindowLayout(Context context) {
             super(context);
-            setWillNotDraw(false);
 
             if (backgroundDrawable == null) {
                 backgroundDrawable = getResources().getDrawable(R.drawable.popup_fixed);
             }
+
+            setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8));
+            setWillNotDraw(false);
+
+            scrollView = new ScrollView(context);
+            scrollView.setVerticalScrollBarEnabled(false);
+            addView(scrollView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            linearLayout = new LinearLayout(context);
+            linearLayout.setOrientation(LinearLayout.VERTICAL);
+            scrollView.addView(linearLayout, new ScrollView.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
         }
 
         public void setShowedFromBotton(boolean value) {
@@ -106,15 +123,15 @@ public void setBackScaleX(float value) {
         public void setBackScaleY(float value) {
             backScaleY = value;
             if (animationEnabled) {
-                int count = getChildCount();
+                int count = getItemsCount();
                 int visibleCount = 0;
                 for (int a = 0; a < count; a++) {
-                    visibleCount += getChildAt(a).getVisibility() == VISIBLE ? 1 : 0;
+                    visibleCount += getItemAt(a).getVisibility() == VISIBLE ? 1 : 0;
                 }
                 int height = getMeasuredHeight() - AndroidUtilities.dp(16);
                 if (showedFromBotton) {
                     for (int a = lastStartedChild; a >= 0; a--) {
-                        View child = getChildAt(a);
+                        View child = getItemAt(a);
                         if (child.getVisibility() != VISIBLE) {
                             continue;
                         }
@@ -127,7 +144,7 @@ public void setBackScaleY(float value) {
                     }
                 } else {
                     for (int a = lastStartedChild; a < count; a++) {
-                        View child = getChildAt(a);
+                        View child = getItemAt(a);
                         if (child.getVisibility() != VISIBLE) {
                             continue;
                         }
@@ -155,6 +172,11 @@ private void startChildAnimation(View child) {
             }
         }
 
+        @Override
+        public void addView(View child) {
+            linearLayout.addView(child);
+        }
+
         public float getBackScaleX() {
             return backScaleX;
         }
@@ -183,6 +205,18 @@ protected void onDraw(Canvas canvas) {
                 backgroundDrawable.draw(canvas);
             }
         }
+
+        public int getItemsCount() {
+            return linearLayout.getChildCount();
+        }
+
+        public View getItemAt(int index) {
+            return linearLayout.getChildAt(index);
+        }
+
+        public void scrollToTop() {
+            scrollView.scrollTo(0, 0);
+        }
     }
 
     public ActionBarPopupWindow() {
@@ -269,11 +303,11 @@ public void startAnimation() {
             content.setAlpha(1.0f);
             content.setPivotX(content.getMeasuredWidth());
             content.setPivotY(0);
-            int count = content.getChildCount();
+            int count = content.getItemsCount();
             content.positions.clear();
             int visibleCount = 0;
             for (int a = 0; a < count; a++) {
-                View child = content.getChildAt(a);
+                View child = content.getItemAt(a);
                 if (child.getVisibility() != View.VISIBLE) {
                     continue;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index dad03f246..1138a158b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -14,7 +14,6 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -44,7 +43,7 @@ public BaseFragment(Bundle args) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
     }
 
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         return null;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index dd00b928b..87ac403ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -9,10 +9,18 @@
 package org.telegram.ui.ActionBar;
 
 import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.annotation.SuppressLint;
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
 import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
@@ -45,7 +53,7 @@
 
 public class BottomSheet extends Dialog {
 
-    private LinearLayout linearLayout;
+    private LinearLayout containerView;
     private FrameLayout container;
 
     private boolean dismissed;
@@ -57,24 +65,73 @@
     private int[] itemIcons;
     private View customView;
     private CharSequence title;
-    private boolean overrideTabletWidth = true;
+    private boolean fullWidth;
     private boolean isGrid;
     private ColorDrawable backgroundDrawable = new ColorDrawable(0xff000000);
+    private static Drawable shadowDrawable;
 
+    private Paint ciclePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+
+    private static int backgroundPaddingTop;
+    private static int backgroundPaddingLeft;
+
+    private boolean useRevealAnimation;
+    private float revealRadius;
     private int revealX;
     private int revealY;
-    private boolean useRevealAnimation;
+    private boolean applyTopPaddings = true;
 
     private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
     private AccelerateInterpolator accelerateInterpolator = new AccelerateInterpolator();
 
     private ArrayList<BottomSheetCell> itemViews = new ArrayList<>();
 
-    private BottomSheetDelegate delegate;
+    private BottomSheetDelegateInterface delegate;
 
-    public interface BottomSheetDelegate {
+    public interface BottomSheetDelegateInterface {
         void onOpenAnimationStart();
+
         void onOpenAnimationEnd();
+
+        void onRevealAnimationStart(boolean open);
+
+        void onRevealAnimationEnd(boolean open);
+
+        void onRevealAnimationProgress(boolean open, float radius, int x, int y);
+
+        View getRevealView();
+    }
+
+    public static class BottomSheetDelegate implements BottomSheetDelegateInterface {
+        @Override
+        public void onOpenAnimationStart() {
+
+        }
+
+        @Override
+        public void onOpenAnimationEnd() {
+
+        }
+
+        @Override
+        public void onRevealAnimationStart(boolean open) {
+
+        }
+
+        @Override
+        public void onRevealAnimationEnd(boolean open) {
+
+        }
+
+        @Override
+        public void onRevealAnimationProgress(boolean open, float radius, int x, int y) {
+
+        }
+
+        @Override
+        public View getRevealView() {
+            return null;
+        }
     }
 
     private static class BottomSheetCell extends FrameLayout {
@@ -139,7 +196,40 @@ public void setTextAndIcon(CharSequence text, int icon) {
     public BottomSheet(Context context) {
         super(context);
 
-        container = new FrameLayout(getContext());
+        container = new FrameLayout(getContext()) {
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                int width = MeasureSpec.getSize(widthMeasureSpec);
+                int height = MeasureSpec.getSize(heightMeasureSpec);
+
+                setMeasuredDimension(width, height);
+                boolean isPortrait = width < height;
+
+                if (containerView != null) {
+                    int left = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingLeft;
+                    if (!fullWidth) {
+                        if (AndroidUtilities.isTablet()) {
+                            int side = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.8f);
+                            containerView.measure(MeasureSpec.makeMeasureSpec(side + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+                        } else {
+                            int maxWidth = Math.min(AndroidUtilities.dp(480), width);
+                            containerView.measure(isPortrait ? MeasureSpec.makeMeasureSpec(width + left * 2, MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec((int) Math.max(width * 0.8f, maxWidth) + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+                        }
+                    } else {
+                        containerView.measure(MeasureSpec.makeMeasureSpec(width + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+                    }
+                }
+            }
+
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                if (containerView != null) {
+                    int l = ((right - left) - containerView.getMeasuredWidth()) / 2;
+                    int t = (bottom - top) - containerView.getMeasuredHeight();
+                    containerView.layout(l, t, l + containerView.getMeasuredWidth(), t + getMeasuredHeight());
+                }
+            }
+        };
         container.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
@@ -159,25 +249,37 @@ protected void onCreate(Bundle savedInstanceState) {
         window.requestFeature(Window.FEATURE_NO_TITLE);
         window.setWindowAnimations(R.style.DialogNoAnimation);
 
-        setContentView(container);
-
-        linearLayout = new LinearLayout(getContext());
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-        if (AndroidUtilities.isTablet() && !overrideTabletWidth) {
-            container.addView(linearLayout, 0, LayoutHelper.createFrame(320, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL));
-        } else {
-            container.addView(linearLayout, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM));
+        if (shadowDrawable == null) {
+            Rect padding = new Rect();
+            shadowDrawable = getContext().getResources().getDrawable(R.drawable.sheet_shadow);
+            shadowDrawable.getPadding(padding);
+            backgroundPaddingLeft = padding.left;
+            backgroundPaddingTop = padding.top;
         }
 
-        View shadow = new View(getContext());
-        shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
-        linearLayout.addView(shadow, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 3));
+        setContentView(container, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+
+        ciclePaint.setColor(0xffffffff);
+
+        containerView = new LinearLayout(getContext()) {
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                if (useRevealAnimation && Build.VERSION.SDK_INT <= 19) {
+                    canvas.drawCircle(revealX, revealY, revealRadius, ciclePaint);
+                    //shadowDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
+                    //shadowDrawable.draw(canvas);
+                }
+            }
 
-        LinearLayout containerView = new LinearLayout(getContext());
-        containerView.setBackgroundColor(0xffffffff);
+            @Override
+            protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+                return super.drawChild(canvas, child, drawingTime);
+            }
+        };
+        containerView.setWillNotDraw(false);
         containerView.setOrientation(LinearLayout.VERTICAL);
-        containerView.setPadding(0, AndroidUtilities.dp(8), 0, AndroidUtilities.dp(isGrid ? 16 : 8));
-        linearLayout.addView(containerView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        container.addView(containerView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM));
 
         if (title != null) {
             TextView titleView = new TextView(getContext());
@@ -273,104 +375,179 @@ public void onClick(View v) {
         setOnShowListener(new OnShowListener() {
             @Override
             public void onShow(DialogInterface dialog) {
-                if (useRevealAnimation) {
-                    int finalRadius = Math.max(AndroidUtilities.displaySize.x, container.getHeight());
-                    Animator anim = ViewAnimationUtils.createCircularReveal(container, revealX, revealY, 0, finalRadius);
-                    anim.setDuration(400);
-                    anim.addListener(new Animator.AnimatorListener() {
-                        @Override
-                        public void onAnimationStart(Animator animation) {
-                            if (delegate != null) {
-                                delegate.onOpenAnimationStart();
-                            }
-                        }
+                if (Build.VERSION.SDK_INT >= 21) {
+                    startOpenAnimation();
+                }
+            }
+        });
+    }
 
-                        @Override
-                        public void onAnimationEnd(Animator animation) {
-                            if (delegate != null) {
-                                delegate.onOpenAnimationEnd();
-                            }
-                        }
+    @Override
+    public void show() {
+        super.show();
+        dismissed = false;
+        if (Build.VERSION.SDK_INT >= 21 || !useRevealAnimation) {
+            containerView.setBackgroundDrawable(shadowDrawable);
+        } else {
+            containerView.setBackgroundDrawable(null);
+        }
+        int left = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingLeft;
+        int top = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingTop;
+        containerView.setPadding(left, (applyTopPaddings ? AndroidUtilities.dp(8) : 0) + top, left, (applyTopPaddings ? AndroidUtilities.dp(isGrid ? 16 : 8) : 0));
+        if (Build.VERSION.SDK_INT < 21) {
+            startOpenAnimation();
+        }
+    }
 
-                        @Override
-                        public void onAnimationCancel(Animator animation) {
+    protected void setRevealRadius(float radius) {
+        revealRadius = radius;
+        delegate.onRevealAnimationProgress(!dismissed, radius, revealX, revealY);
+        if (Build.VERSION.SDK_INT <= 19) {
+            containerView.invalidate();
+        }
+    }
 
-                        }
+    protected float getRevealRadius() {
+        return revealRadius;
+    }
 
-                        @Override
-                        public void onAnimationRepeat(Animator animation) {
+    @SuppressLint("NewApi")
+    private void startRevealAnimation(final boolean open) {
 
-                        }
-                    });
-                    anim.start();
-                } else {
-                    //startLayoutAnimation(true, true);
-                    ViewProxy.setTranslationY(linearLayout, linearLayout.getHeight());
-                    backgroundDrawable.setAlpha(0);
-                    AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
-                    animatorSetProxy.playTogether(
-                            ObjectAnimatorProxy.ofFloat(linearLayout, "translationY", 0),
-                            ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 51));
-                    animatorSetProxy.setDuration(200);
-                    animatorSetProxy.setStartDelay(20);
-                    animatorSetProxy.setInterpolator(new DecelerateInterpolator());
-                    animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
-                        @Override
-                        public void onAnimationEnd(Object animation) {
-                            if (delegate != null) {
-                                delegate.onOpenAnimationEnd();
-                            }
-                        }
-                    });
-                    animatorSetProxy.start();
-                }
+        if (open) {
+            backgroundDrawable.setAlpha(0);
+            containerView.setVisibility(View.VISIBLE);
+        } else {
+            backgroundDrawable.setAlpha(51);
+        }
+        ViewProxy.setTranslationY(containerView, 0);
+
+        AnimatorSet animatorSet = new AnimatorSet();
+
+        View view = delegate.getRevealView();
+        if (view.getVisibility() == View.VISIBLE && ((ViewGroup) view.getParent()).getVisibility() == View.VISIBLE) {
+            final int coords[] = new int[2];
+            view.getLocationInWindow(coords);
+            float top;
+            if (Build.VERSION.SDK_INT <= 19) {
+                top = AndroidUtilities.displaySize.y - containerView.getMeasuredHeight() - AndroidUtilities.statusBarHeight;
+            } else {
+                top = containerView.getY();
             }
-        });
-    }
+            revealX = coords[0] + view.getMeasuredWidth() / 2;
+            revealY = (int) (coords[1] + view.getMeasuredHeight() / 2 - top);
+            if (Build.VERSION.SDK_INT <= 19) {
+                revealY -= AndroidUtilities.statusBarHeight;
+            }
+        } else {
+            revealX = AndroidUtilities.displaySize.x / 2 + backgroundPaddingLeft;
+            revealY = (int) (AndroidUtilities.displaySize.y - containerView.getY());
+        }
 
-    private float animationProgress;
-    private long lastFrameTime;
-    private void startLayoutAnimation(final boolean open, final boolean first) {
-        if (first) {
-            animationProgress = 0.0f;
-            lastFrameTime = System.nanoTime() / 1000000;
-            if (Build.VERSION.SDK_INT >= 11) {
-                container.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+        int corners[][] = new int[][]{
+                {0, 0},
+                {0, containerView.getMeasuredHeight()},
+                {containerView.getMeasuredWidth(), 0},
+                {containerView.getMeasuredWidth(), containerView.getMeasuredHeight()}
+        };
+        int finalRevealRadius = 0;
+        for (int a = 0; a < 4; a++) {
+            finalRevealRadius = Math.max(finalRevealRadius, (int) Math.ceil(Math.sqrt((revealX - corners[a][0]) * (revealX - corners[a][0]) + (revealY - corners[a][1]) * (revealY - corners[a][1]))));
+        }
+
+        ArrayList<Animator> animators = new ArrayList<>(3);
+        animators.add(ObjectAnimator.ofFloat(this, "revealRadius", open ? 0 : finalRevealRadius, open ? finalRevealRadius : 0));
+        animators.add(ObjectAnimator.ofInt(backgroundDrawable, "alpha", open ? 51 : 0));
+        if (Build.VERSION.SDK_INT >= 21) {
+            containerView.setElevation(AndroidUtilities.dp(10));
+            animators.add(ViewAnimationUtils.createCircularReveal(containerView, revealX <= containerView.getMeasuredWidth() ? revealX : containerView.getMeasuredWidth(), revealY, open ? 0 : finalRevealRadius, open ? finalRevealRadius : 0));
+            animatorSet.setDuration(300);
+        } else {
+            if (!open) {
+                animatorSet.setDuration(200);
+                containerView.setPivotX(revealX <= containerView.getMeasuredWidth() ? revealX : containerView.getMeasuredWidth());
+                containerView.setPivotY(revealY);
+                animators.add(ObjectAnimator.ofFloat(containerView, "scaleX", 0.0f));
+                animators.add(ObjectAnimator.ofFloat(containerView, "scaleY", 0.0f));
+                animators.add(ObjectAnimator.ofFloat(containerView, "alpha", 0.0f));
+            } else {
+                animatorSet.setDuration(250);
+                containerView.setScaleX(1);
+                containerView.setScaleY(1);
+                containerView.setAlpha(1);
+                if (Build.VERSION.SDK_INT <= 19) {
+                    animatorSet.setStartDelay(20);
+                }
             }
         }
-        AndroidUtilities.runOnUIThread(new Runnable() {
+        animatorSet.playTogether(animators);
+        animatorSet.addListener(new AnimatorListenerAdapter() {
             @Override
-            public void run() {
-                long newTime = System.nanoTime() / 1000000;
-                long dt = newTime - lastFrameTime;
-                FileLog.e("tmessages", "dt = " + dt);
-                if (dt > 16) {
-                    dt = 16;
-                }
-                lastFrameTime = newTime;
-                animationProgress += dt / 200.0f;
-                if (animationProgress > 1.0f) {
-                    animationProgress = 1.0f;
+            public void onAnimationStart(Animator animation) {
+                if (delegate != null) {
+                    delegate.onRevealAnimationStart(open);
                 }
+            }
 
-                if (open) {
-                    float interpolated = decelerateInterpolator.getInterpolation(animationProgress);
-                    ViewProxy.setTranslationY(linearLayout, linearLayout.getHeight() * (1.0f - interpolated));
-                    backgroundDrawable.setAlpha((int) (51 * interpolated));
-                } else {
-                    float interpolated = accelerateInterpolator.getInterpolation(animationProgress);
-                    ViewProxy.setTranslationY(linearLayout, linearLayout.getHeight() * interpolated);
-                    backgroundDrawable.setAlpha((int) (51 * (1.0f - interpolated)));
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (delegate != null) {
+                    delegate.onRevealAnimationEnd(open);
                 }
-                if (animationProgress < 1) {
-                    startLayoutAnimation(open, false);
-                } else {
-                    if (open && delegate != null) {
-                        delegate.onOpenAnimationEnd();
+                containerView.invalidate();
+                if (Build.VERSION.SDK_INT >= 11) {
+                    container.setLayerType(View.LAYER_TYPE_NONE, null);
+                }
+                if (!open) {
+                    containerView.setVisibility(View.INVISIBLE);
+                    try {
+                        BottomSheet.super.dismiss();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
                 }
             }
+
+            @Override
+            public void onAnimationCancel(Animator animation) {
+                onAnimationEnd(animation);
+            }
         });
+        animatorSet.start();
+    }
+
+    private void startOpenAnimation() {
+        if (Build.VERSION.SDK_INT >= 20) {
+            container.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+        }
+        if (containerView.getMeasuredHeight() == 0) {
+            containerView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.y, View.MeasureSpec.AT_MOST));
+        }
+        if (useRevealAnimation) {
+            startRevealAnimation(true);
+        } else {
+            ViewProxy.setTranslationY(containerView, containerView.getMeasuredHeight());
+            backgroundDrawable.setAlpha(0);
+            AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
+            animatorSetProxy.playTogether(
+                    ObjectAnimatorProxy.ofFloat(containerView, "translationY", 0),
+                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 51));
+            animatorSetProxy.setDuration(200);
+            animatorSetProxy.setStartDelay(20);
+            animatorSetProxy.setInterpolator(new DecelerateInterpolator());
+            animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animation) {
+                    if (delegate != null) {
+                        delegate.onOpenAnimationEnd();
+                    }
+                    if (Build.VERSION.SDK_INT >= 11) {
+                        container.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
+                }
+            });
+            animatorSetProxy.start();
+        }
     }
 
     public void setDelegate(BottomSheetDelegate delegate) {
@@ -382,7 +559,7 @@ public FrameLayout getContainer() {
     }
 
     public LinearLayout getSheetContainer() {
-        return linearLayout;
+        return containerView;
     }
 
     public int getTag() {
@@ -397,13 +574,14 @@ public void setItemText(int item, CharSequence text) {
         cell.textView.setText(text);
     }
 
-    private void dismissWithButtonClick(final int item) {
+    public void dismissWithButtonClick(final int item) {
         if (dismissed) {
             return;
         }
+        dismissed = true;
         AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
         animatorSetProxy.playTogether(
-                ObjectAnimatorProxy.ofFloat(linearLayout, "translationY", linearLayout.getHeight() + AndroidUtilities.dp(10)),
+                ObjectAnimatorProxy.ofFloat(containerView, "translationY", containerView.getMeasuredHeight() + AndroidUtilities.dp(10)),
                 ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0)
         );
         animatorSetProxy.setDuration(180);
@@ -440,34 +618,38 @@ public void dismiss() {
             return;
         }
         dismissed = true;
-        AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
-        animatorSetProxy.playTogether(
-                ObjectAnimatorProxy.ofFloat(linearLayout, "translationY", linearLayout.getHeight() + AndroidUtilities.dp(10)),
-                ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0)
-                );
-        animatorSetProxy.setDuration(180);
-        animatorSetProxy.setInterpolator(new AccelerateInterpolator());
-        animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
-            @Override
-            public void onAnimationEnd(Object animation) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            BottomSheet.super.dismiss();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
+        if (useRevealAnimation) {
+            startRevealAnimation(false);
+        } else {
+            AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
+            animatorSetProxy.playTogether(
+                    ObjectAnimatorProxy.ofFloat(containerView, "translationY", containerView.getMeasuredHeight() + AndroidUtilities.dp(10)),
+                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0)
+            );
+            animatorSetProxy.setDuration(180);
+            animatorSetProxy.setInterpolator(new AccelerateInterpolator());
+            animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animation) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                BottomSheet.super.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
                         }
-                    }
-                });
-            }
+                    });
+                }
 
-            @Override
-            public void onAnimationCancel(Object animation) {
-                onAnimationEnd(animation);
-            }
-        });
-        animatorSetProxy.start();
+                @Override
+                public void onAnimationCancel(Object animation) {
+                    onAnimationEnd(animation);
+                }
+            });
+            animatorSetProxy.start();
+        }
     }
 
     public static class Builder {
@@ -515,10 +697,10 @@ public Builder setTag(int tag) {
             return this;
         }
 
-        public Builder setRevealAnimation(int x, int y) {
-            bottomSheet.revealX = x;
-            bottomSheet.revealY = y;
-            bottomSheet.useRevealAnimation = true;
+        public Builder setUseRevealAnimation() {
+            if (Build.VERSION.SDK_INT >= 18 && !AndroidUtilities.isTablet()) {
+                bottomSheet.useRevealAnimation = true;
+            }
             return this;
         }
 
@@ -532,8 +714,13 @@ public Builder setIsGrid(boolean value) {
             return this;
         }
 
-        public BottomSheet setOverrideTabletWidth(boolean value) {
-            bottomSheet.overrideTabletWidth = value;
+        public Builder setApplyTopPaddings(boolean value) {
+            bottomSheet.applyTopPaddings = value;
+            return this;
+        }
+
+        public BottomSheet setUseFullWidth(boolean value) {
+            bottomSheet.fullWidth = value;
             return bottomSheet;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index ce43585cc..d9c26a0a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -383,7 +383,6 @@ public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
         inLayout = true;
-        final int width = r - l;
         final int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             final View child = getChildAt(i);
@@ -416,8 +415,6 @@ public void requestLayout() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
-        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
         int widthSize = MeasureSpec.getSize(widthMeasureSpec);
         int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
index 8c39b844a..8efc34296 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
@@ -72,7 +72,6 @@ public void run() {
                     updateSearchResults(new ArrayList<Country>());
                     return;
                 }
-                long time = System.currentTimeMillis();
                 ArrayList<Country> resultArray = new ArrayList<>();
 
                 String n = query.substring(0, 1);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java
index d1f497b7b..102a170fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java
@@ -19,7 +19,7 @@
 
 import java.util.HashMap;
 
-public class PhotoAttachAdapter extends RecyclerView.Adapter implements NotificationCenter.NotificationCenterDelegate {
+public class PhotoAttachAdapter extends RecyclerView.Adapter {
 
     private Context mContext;
     private PhotoAttachAdapterDelegate delegate;
@@ -38,14 +38,6 @@ public Holder(View itemView) {
 
     public PhotoAttachAdapter(Context context) {
         mContext = context;
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.albumsDidLoaded);
-        if (MediaController.allPhotosAlbumEntry == null) {
-            MediaController.loadGalleryPhotosAlbums(0);
-        }
-    }
-
-    public void onDestroy() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.albumsDidLoaded);
     }
 
     public void clearSelectedPhotos() {
@@ -64,13 +56,6 @@ public void setDelegate(PhotoAttachAdapterDelegate photoAttachAdapterDelegate) {
         delegate = photoAttachAdapterDelegate;
     }
 
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.albumsDidLoaded) {
-            notifyDataSetChanged();
-        }
-    }
-
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         //if (position != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index 00206cf9b..28864d911 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -87,7 +87,7 @@ private boolean checkStickerFilesExistAndDownload() {
     }
 
     public void loadStikersForEmoji(CharSequence emoji) {
-        boolean search = emoji != null && emoji.length() != 0 && emoji.length() <= 2;
+        boolean search = emoji != null && emoji.length() > 0 && emoji.length() <= 4;
         if (search) {
             lastSticker = emoji.toString();
             HashMap<String, ArrayList<TLRPC.Document>> allStickers = StickersQuery.getAllStickers();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
new file mode 100644
index 000000000..99ff51b60
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
@@ -0,0 +1,464 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ImageLoader;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.audioinfo.AudioInfo;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.LineProgressView;
+
+import java.io.File;
+
+public class AudioPlayerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MediaController.FileDownloadProgressListener {
+
+    private MessageObject lastMessageObject;
+    private ImageView placeholder;
+    private ImageView playButton;
+    private ImageView nextButton;
+    private ImageView prevButton;
+    private ImageView shuffleButton;
+    private LineProgressView progressView;
+    private ImageView repeatButton;
+    private ImageView[] buttons = new ImageView[5];
+    private TextView durationTextView;
+    private TextView timeTextView;
+    private SeekBarView seekBarView;
+
+    private int TAG;
+
+    private String lastTimeString;
+
+    private class SeekBarView extends FrameLayout {
+
+        private Paint innerPaint1;
+        private Paint outerPaint1;
+        private int thumbWidth;
+        private int thumbHeight;
+        public int thumbX = 0;
+        public int thumbDX = 0;
+        private boolean pressed = false;
+
+        public SeekBarView(Context context) {
+            super(context);
+            setWillNotDraw(false);
+            innerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            innerPaint1.setColor(0x19000000);
+
+            outerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            outerPaint1.setColor(0xff23afef);
+
+            thumbWidth = AndroidUtilities.dp(24);
+            thumbHeight = AndroidUtilities.dp(24);
+        }
+
+        @Override
+        public boolean onInterceptTouchEvent(MotionEvent ev) {
+            return onTouch(ev);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            return onTouch(event);
+        }
+
+        boolean onTouch(MotionEvent ev) {
+            if (ev.getAction() == MotionEvent.ACTION_DOWN) {
+                getParent().requestDisallowInterceptTouchEvent(true);
+                int additionWidth = (getMeasuredHeight() - thumbWidth) / 2;
+                if (thumbX - additionWidth <= ev.getX() && ev.getX() <= thumbX + thumbWidth + additionWidth && ev.getY() >= 0 && ev.getY() <= getMeasuredHeight()) {
+                    pressed = true;
+                    thumbDX = (int)(ev.getX() - thumbX);
+                    invalidate();
+                    return true;
+                }
+            } else if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
+                if (pressed) {
+                    if (ev.getAction() == MotionEvent.ACTION_UP) {
+                        onSeekBarDrag((float) thumbX / (float) (getMeasuredWidth() - thumbWidth));
+                    }
+                    pressed = false;
+                    invalidate();
+                    return true;
+                }
+            } else if (ev.getAction() == MotionEvent.ACTION_MOVE) {
+                if (pressed) {
+                    thumbX = (int)(ev.getX() - thumbDX);
+                    if (thumbX < 0) {
+                        thumbX = 0;
+                    } else if (thumbX > getMeasuredWidth() - thumbWidth) {
+                        thumbX = getMeasuredWidth() - thumbWidth;
+                    }
+                    invalidate();
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        public void setProgress(float progress) {
+            int newThumbX = (int)Math.ceil((getMeasuredWidth() - thumbWidth) * progress);
+            if (thumbX != newThumbX) {
+                thumbX = newThumbX;
+                if (thumbX < 0) {
+                    thumbX = 0;
+                } else if (thumbX > getMeasuredWidth() - thumbWidth) {
+                    thumbX = getMeasuredWidth() - thumbWidth;
+                }
+                invalidate();
+            }
+        }
+
+        public boolean isDragging() {
+            return pressed;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            int y = (getMeasuredHeight() - thumbHeight) / 2;
+            canvas.drawRect(thumbWidth / 2, getMeasuredHeight() / 2 - AndroidUtilities.dp(1), getMeasuredWidth() - thumbWidth / 2, getMeasuredHeight() / 2 + AndroidUtilities.dp(1), innerPaint1);
+            canvas.drawRect(thumbWidth / 2, getMeasuredHeight() / 2 - AndroidUtilities.dp(1), thumbWidth / 2 + thumbX, getMeasuredHeight() / 2 + AndroidUtilities.dp(1), outerPaint1);
+            canvas.drawCircle(thumbX + thumbWidth / 2, y + thumbHeight / 2, AndroidUtilities.dp(pressed ? 8 : 6), outerPaint1);
+        }
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        TAG = MediaController.getInstance().generateObserverTag();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioPlayStateChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioPlayStateChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
+        MediaController.getInstance().removeLoadingFileObserver(this);
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(Context context) {
+        FrameLayout frameLayout = new FrameLayout(context);
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+        frameLayout.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        fragmentView = frameLayout;
+
+        actionBar.setBackgroundColor(0xffffffff);
+        actionBar.setBackButtonImage(R.drawable.pl_back);
+        actionBar.setItemsBackground(R.drawable.bar_selector_audio);
+        if (!AndroidUtilities.isTablet()) {
+            actionBar.showActionModeTop();
+        }
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        placeholder = new ImageView(context);
+        frameLayout.addView(placeholder, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 66));
+
+        View shadow = new View(context);
+        shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
+        frameLayout.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 96));
+
+        FrameLayout seekBarContainer = new FrameLayout(context);
+        seekBarContainer.setBackgroundColor(0xe5ffffff);
+        frameLayout.addView(seekBarContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 30, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 66));
+
+        timeTextView = new TextView(context);
+        timeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+        timeTextView.setTextColor(0xff19a7e8);
+        timeTextView.setGravity(Gravity.CENTER);
+        timeTextView.setText("0:00");
+        seekBarContainer.addView(timeTextView, LayoutHelper.createFrame(44, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+
+        durationTextView = new TextView(context);
+        durationTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+        durationTextView.setTextColor(0xff8a8a8a);
+        durationTextView.setGravity(Gravity.CENTER);
+        durationTextView.setText("3:00");
+        seekBarContainer.addView(durationTextView, LayoutHelper.createFrame(44, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
+
+        seekBarView = new SeekBarView(context);
+        seekBarContainer.addView(seekBarView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 32, 0, 32, 0));
+
+        progressView = new LineProgressView(context);
+        progressView.setVisibility(View.INVISIBLE);
+        progressView.setBackgroundColor(0x19000000);
+        progressView.setProgressColor(0xff23afef);
+        seekBarContainer.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 2, Gravity.CENTER_VERTICAL | Gravity.LEFT, 44, 0, 44, 0));
+
+        FrameLayout bottomView = new FrameLayout(context) {
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                int dist = ((right - left) - AndroidUtilities.dp(30 + 48 * 5)) / 4;
+                for (int a = 0; a < 5; a++) {
+                    int l = AndroidUtilities.dp(15 + 48 * a) + dist * a;
+                    int t = AndroidUtilities.dp(9);
+                    buttons[a].layout(l, t, l + buttons[a].getMeasuredWidth(), t + buttons[a].getMeasuredHeight());
+                }
+            }
+        };
+        bottomView.setBackgroundColor(0xffffffff);
+        frameLayout.addView(bottomView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 66, Gravity.BOTTOM | Gravity.LEFT));
+
+        buttons[0] = repeatButton = new ImageView(context);
+        repeatButton.setScaleType(ImageView.ScaleType.CENTER);
+        bottomView.addView(repeatButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        repeatButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                MediaController.getInstance().toggleRepeatMode();
+                updateRepeatButton();
+            }
+        });
+
+        buttons[1] = prevButton = new ImageView(context);
+        prevButton.setScaleType(ImageView.ScaleType.CENTER);
+        prevButton.setImageResource(R.drawable.player_prev_states);
+        bottomView.addView(prevButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        prevButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                MediaController.getInstance().playPreviousMessage();
+            }
+        });
+
+        buttons[2] = playButton = new ImageView(context);
+        playButton.setScaleType(ImageView.ScaleType.CENTER);
+        playButton.setImageResource(R.drawable.player_play_states);
+        bottomView.addView(playButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        playButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (MediaController.getInstance().isDownloadingCurrentMessage()) {
+                    return;
+                }
+                if (MediaController.getInstance().isAudioPaused()) {
+                    MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+                } else {
+                    MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+                }
+            }
+        });
+
+        buttons[3] = nextButton = new ImageView(context);
+        nextButton.setScaleType(ImageView.ScaleType.CENTER);
+        nextButton.setImageResource(R.drawable.player_next_states);
+        bottomView.addView(nextButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        nextButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                MediaController.getInstance().playNextMessage();
+            }
+        });
+
+        buttons[4] = shuffleButton = new ImageView(context);
+        shuffleButton.setScaleType(ImageView.ScaleType.CENTER);
+        bottomView.addView(shuffleButton, LayoutHelper.createFrame(48, 48, Gravity.LEFT | Gravity.TOP));
+        shuffleButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                MediaController.getInstance().toggleShuffleMusic();
+                updateShuffleButton();
+            }
+        });
+
+        updateTitle(false);
+        updateRepeatButton();
+        updateShuffleButton();
+
+        return frameLayout;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.audioDidStarted || id == NotificationCenter.audioPlayStateChanged || id == NotificationCenter.audioDidReset) {
+            updateTitle(id == NotificationCenter.audioDidReset && (Boolean) args[1]);
+        } else if (id == NotificationCenter.audioProgressDidChanged) {
+            MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+
+            if (messageObject.isMusic()) {
+                updateProgress(messageObject);
+            }
+        }
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+        progressView.setProgress(progress, true);
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+
+    private void onSeekBarDrag(float progress) {
+        MediaController.getInstance().seekToProgress(MediaController.getInstance().getPlayingMessageObject(), progress);
+    }
+
+    private void updateShuffleButton() {
+        if (MediaController.getInstance().isShuffleMusic()) {
+            shuffleButton.setImageResource(R.drawable.pl_shuffle_active);
+        } else {
+            shuffleButton.setImageResource(R.drawable.pl_shuffle);
+        }
+    }
+
+    private void updateRepeatButton() {
+        int mode = MediaController.getInstance().getRepeatMode();
+        if (mode == 0) {
+            repeatButton.setImageResource(R.drawable.pl_repeat);
+        } else if (mode == 1) {
+            repeatButton.setImageResource(R.drawable.pl_repeat_active);
+        } else if (mode == 2) {
+            repeatButton.setImageResource(R.drawable.pl_repeat1_active);
+        }
+    }
+
+    private void updateProgress(MessageObject messageObject) {
+        if (seekBarView != null) {
+            if (!seekBarView.isDragging()) {
+                seekBarView.setProgress(messageObject.audioProgress);
+            }
+            String timeString = String.format("%d:%02d", messageObject.audioProgressSec / 60, messageObject.audioProgressSec % 60);
+            if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+                lastTimeString = timeString;
+                timeTextView.setText(timeString);
+            }
+        }
+    }
+
+    private void checkIfMusicDownloaded(MessageObject messageObject) {
+        File cacheFile = null;
+        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
+            cacheFile = new File(messageObject.messageOwner.attachPath);
+            if(!cacheFile.exists()) {
+                cacheFile = null;
+            }
+        }
+        if (cacheFile == null) {
+            cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
+        }
+        if (!cacheFile.exists()) {
+            String fileName = messageObject.getFileName();
+            MediaController.getInstance().addLoadingFileObserver(fileName, this);
+            Float progress = ImageLoader.getInstance().getFileProgress(fileName);
+            progressView.setProgress(progress != null ? progress : 0, false);
+            progressView.setVisibility(View.VISIBLE);
+            seekBarView.setVisibility(View.INVISIBLE);
+            playButton.setEnabled(false);
+        } else {
+            MediaController.getInstance().removeLoadingFileObserver(this);
+            progressView.setVisibility(View.INVISIBLE);
+            seekBarView.setVisibility(View.VISIBLE);
+            playButton.setEnabled(true);
+        }
+    }
+
+    private void updateTitle(boolean shutdown) {
+        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+        if (messageObject == null && shutdown || messageObject != null && !messageObject.isMusic()) {
+            if (!parentLayout.fragmentsStack.isEmpty() && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1) == this) {
+                finishFragment();
+            } else {
+                removeSelfFromStack();
+            }
+        } else {
+            if (messageObject == null) {
+                return;
+            }
+            checkIfMusicDownloaded(messageObject);
+            updateProgress(messageObject);
+
+            if (MediaController.getInstance().isAudioPaused()) {
+                playButton.setImageResource(R.drawable.player_play_states);
+            } else {
+                playButton.setImageResource(R.drawable.player_pause_states);
+            }
+            if (actionBar != null) {
+                actionBar.setTitle(messageObject.getMusicTitle());
+                actionBar.getTitleTextView().setTextColor(0xff212121);
+                actionBar.setSubtitle(messageObject.getMusicAuthor());
+                actionBar.getSubTitleTextView().setTextColor(0xff8a8a8a);
+            }
+            AudioInfo audioInfo = MediaController.getInstance().getAudioInfo();
+            if (audioInfo != null && audioInfo.getCover() != null) {
+                placeholder.setImageBitmap(audioInfo.getCover());
+                placeholder.setPadding(0, 0, 0, 0);
+                placeholder.setScaleType(ImageView.ScaleType.CENTER_CROP);
+            } else {
+                placeholder.setImageResource(R.drawable.nocover);
+                placeholder.setPadding(0, 0, 0, AndroidUtilities.dp(30));
+                placeholder.setScaleType(ImageView.ScaleType.CENTER);
+            }
+
+            if (durationTextView != null) {
+                int duration = 0;
+                for (TLRPC.DocumentAttribute attribute : messageObject.messageOwner.media.document.attributes) {
+                    if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                        duration = attribute.duration;
+                        break;
+                    }
+                }
+                durationTextView.setText(duration != 0 ? String.format("%d:%02d", duration / 60, duration % 60) : "-:--");
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
new file mode 100644
index 000000000..a663665bb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
@@ -0,0 +1,344 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.os.Build;
+import android.provider.MediaStore;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.AudioCell;
+import org.telegram.ui.Components.EmptyTextProgressView;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.PickerBottomLayout;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class AudioSelectActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listViewAdapter;
+    private EmptyTextProgressView progressView;
+    private PickerBottomLayout bottomLayout;
+
+    private boolean loadingAudio;
+
+    private ArrayList<MediaController.AudioEntry> audioEntries = new ArrayList<>();
+    private HashMap<Long, MediaController.AudioEntry> selectedAudios = new HashMap<>();
+
+    private AudioSelectActivityDelegate delegate;
+
+    private MessageObject playingAudio;
+
+    public interface AudioSelectActivityDelegate {
+        void didSelectAudio(ArrayList<MessageObject> audios);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        loadAudio();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        if (playingAudio != null && MediaController.getInstance().isPlayingAudio(playingAudio)) {
+            MediaController.getInstance().clenupPlayer(true, true);
+        }
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("AttachAudio", R.string.AttachAudio));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        progressView = new EmptyTextProgressView(context);
+        progressView.setText(LocaleController.getString("NoAudio", R.string.NoAudio));
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ListView listView = new ListView(context);
+        listView.setEmptyView(progressView);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setAdapter(listViewAdapter = new ListAdapter(context));
+        if (Build.VERSION.SDK_INT >= 11) {
+            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+        }
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 0, 0, 48));
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                AudioCell audioCell = (AudioCell) view;
+                MediaController.AudioEntry audioEntry = audioCell.getAudioEntry();
+                if (selectedAudios.containsKey(audioEntry.id)) {
+                    selectedAudios.remove(audioEntry.id);
+                    audioCell.setChecked(false);
+                } else {
+                    selectedAudios.put(audioEntry.id, audioEntry);
+                    audioCell.setChecked(true);
+                }
+                updateBottomLayoutCount();
+            }
+        });
+
+        bottomLayout = new PickerBottomLayout(context, false);
+        frameLayout.addView(bottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM));
+        bottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                finishFragment();
+            }
+        });
+        bottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (delegate != null) {
+                    ArrayList<MessageObject> audios = new ArrayList<>();
+                    for (HashMap.Entry<Long, MediaController.AudioEntry> entry : selectedAudios.entrySet()) {
+                        audios.add(entry.getValue().messageObject);
+                    }
+                    delegate.didSelectAudio(audios);
+                }
+                finishFragment();
+            }
+        });
+
+        View shadow = new View(context);
+        shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
+        frameLayout.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 48));
+
+        if (loadingAudio) {
+            progressView.showProgress();
+        } else {
+            progressView.showTextView();
+        }
+        updateBottomLayoutCount();
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        } else if (id == NotificationCenter.audioDidReset) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    private void updateBottomLayoutCount() {
+        bottomLayout.updateSelectedCount(selectedAudios.size(), true);
+    }
+
+    public void setDelegate(AudioSelectActivityDelegate audioSelectActivityDelegate) {
+        delegate = audioSelectActivityDelegate;
+    }
+
+    private void loadAudio() {
+        loadingAudio = true;
+        if (progressView != null) {
+            progressView.showProgress();
+        }
+        Utilities.globalQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                String[] projection = {
+                        MediaStore.Audio.Media._ID,
+                        MediaStore.Audio.Media.ARTIST,
+                        MediaStore.Audio.Media.TITLE,
+                        MediaStore.Audio.Media.DATA,
+                        MediaStore.Audio.Media.DURATION,
+                        MediaStore.Audio.Media.ALBUM
+                };
+
+                final ArrayList<MediaController.AudioEntry> newAudioEntries = new ArrayList<>();
+                Cursor cursor = null;
+                try {
+                    cursor = ApplicationLoader.applicationContext.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, projection, MediaStore.Audio.Media.IS_MUSIC + " != 0", null, null);
+                    int id = -2000000000;
+                    while (cursor.moveToNext()) {
+                        MediaController.AudioEntry audioEntry = new MediaController.AudioEntry();
+                        audioEntry.id = cursor.getInt(0);
+                        audioEntry.author = cursor.getString(1);
+                        audioEntry.title = cursor.getString(2);
+                        audioEntry.path = cursor.getString(3);
+                        audioEntry.duration = (int) (cursor.getLong(4) / 1000);
+                        audioEntry.genre = cursor.getString(5);
+
+                        File file = new File(audioEntry.path);
+
+                        TLRPC.TL_message message = new TLRPC.TL_message();
+                        message.flags = TLRPC.MESSAGE_FLAG_OUT;
+                        message.id = id;
+                        message.to_id = new TLRPC.TL_peerUser();
+                        message.to_id.user_id = message.from_id = UserConfig.getClientUserId();
+                        message.date = (int) (System.currentTimeMillis() / 1000);
+                        message.message = "-1";
+                        message.attachPath = audioEntry.path;
+                        message.media = new TLRPC.TL_messageMediaDocument();
+                        message.media.document = new TLRPC.TL_document();
+
+                        String ext = FileLoader.getFileExtension(file);
+
+                        message.media.document.id = 0;
+                        message.media.document.access_hash = 0;
+                        message.media.document.date = message.date;
+                        message.media.document.mime_type = "audio/" + (ext.length() > 0 ? ext : "mp3");
+                        message.media.document.size = (int) file.length();
+                        message.media.document.thumb = new TLRPC.TL_photoSizeEmpty();
+                        message.media.document.thumb.type = "s";
+                        message.media.document.dc_id = 0;
+
+                        TLRPC.TL_documentAttributeAudio attributeAudio = new TLRPC.TL_documentAttributeAudio();
+                        attributeAudio.duration = audioEntry.duration;
+                        attributeAudio.title = audioEntry.title;
+                        attributeAudio.performer = audioEntry.author;
+                        message.media.document.attributes.add(attributeAudio);
+
+                        TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
+                        fileName.file_name = file.getName();
+                        message.media.document.attributes.add(fileName);
+
+                        audioEntry.messageObject = new MessageObject(message, null, false);
+
+                        newAudioEntries.add(audioEntry);
+                        id--;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                } finally {
+                    if (cursor != null) {
+                        cursor.close();
+                    }
+                }
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        audioEntries = newAudioEntries;
+                        progressView.showTextView();
+                        listViewAdapter.notifyDataSetChanged();
+                    }
+                });
+            }
+        });
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return audioEntries.size();
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return audioEntries.get(i);
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (view == null) {
+                view = new AudioCell(mContext);
+                ((AudioCell) view).setDelegate(new AudioCell.AudioCellDelegate() {
+                    @Override
+                    public void startedPlayingAudio(MessageObject messageObject) {
+                        playingAudio = messageObject;
+                    }
+                });
+            }
+            MediaController.AudioEntry audioEntry = audioEntries.get(i);
+            ((AudioCell) view).setAudio(audioEntries.get(i), i != audioEntries.size() - 1, selectedAudios.containsKey(audioEntry.id));
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return audioEntries.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index 1c1699d13..990286990 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -14,7 +14,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -65,7 +64,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java
new file mode 100644
index 000000000..d2e9b0c1f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java
@@ -0,0 +1,169 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.messenger.R;
+import org.telegram.ui.Components.CheckBox;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+public class AudioCell extends FrameLayout {
+
+    private ImageView playButton;
+    private TextView titleTextView;
+    private TextView authorTextView;
+    private TextView genreTextView;
+    private TextView timeTextView;
+    private CheckBox checkBox;
+
+    private MediaController.AudioEntry audioEntry;
+    private boolean needDivider;
+    private static Paint paint;
+
+    private AudioCellDelegate delegate;
+
+    public interface AudioCellDelegate {
+        void startedPlayingAudio(MessageObject messageObject);
+    }
+
+    public AudioCell(Context context) {
+        super(context);
+
+        if (paint == null) {
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        playButton = new ImageView(context);
+        playButton.setScaleType(ImageView.ScaleType.CENTER);
+        addView(playButton, LayoutHelper.createFrame(46, 46, ((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP), LocaleController.isRTL ? 0 : 13, 13, LocaleController.isRTL ? 13 : 0, 0));
+        playButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (audioEntry != null) {
+                    if (MediaController.getInstance().isPlayingAudio(audioEntry.messageObject) && !MediaController.getInstance().isAudioPaused()) {
+                        MediaController.getInstance().pauseAudio(audioEntry.messageObject);
+                        playButton.setImageResource(R.drawable.audiosend_play);
+                    } else {
+                        ArrayList<MessageObject> arrayList = new ArrayList<>();
+                        arrayList.add(audioEntry.messageObject);
+                        if (MediaController.getInstance().setPlaylist(arrayList, audioEntry.messageObject)) {
+                            playButton.setImageResource(R.drawable.audiosend_pause);
+                            if (delegate != null) {
+                                delegate.startedPlayingAudio(audioEntry.messageObject);
+                            }
+                        }
+                    }
+                }
+            }
+        });
+
+        titleTextView = new TextView(context);
+        titleTextView.setTextColor(0xff212121);
+        titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        titleTextView.setLines(1);
+        titleTextView.setMaxLines(1);
+        titleTextView.setSingleLine(true);
+        titleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        titleTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+        addView(titleTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 50 : 72, 7, LocaleController.isRTL ? 72 : 50, 0));
+
+        genreTextView = new TextView(context);
+        genreTextView.setTextColor(0xff8a8a8a);
+        genreTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        genreTextView.setLines(1);
+        genreTextView.setMaxLines(1);
+        genreTextView.setSingleLine(true);
+        genreTextView.setEllipsize(TextUtils.TruncateAt.END);
+        genreTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+        addView(genreTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 50 : 72, 28, LocaleController.isRTL ? 72 : 50, 0));
+
+        authorTextView = new TextView(context);
+        authorTextView.setTextColor(0xff8a8a8a);
+        authorTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        authorTextView.setLines(1);
+        authorTextView.setMaxLines(1);
+        authorTextView.setSingleLine(true);
+        authorTextView.setEllipsize(TextUtils.TruncateAt.END);
+        authorTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+        addView(authorTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 50 : 72, 44, LocaleController.isRTL ? 72 : 50, 0));
+
+        timeTextView = new TextView(context);
+        timeTextView.setTextColor(0xff999999);
+        timeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        timeTextView.setLines(1);
+        timeTextView.setMaxLines(1);
+        timeTextView.setSingleLine(true);
+        timeTextView.setEllipsize(TextUtils.TruncateAt.END);
+        timeTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP);
+        addView(timeTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 18 : 0, 11, LocaleController.isRTL ? 0 : 18, 0));
+
+        checkBox = new CheckBox(context, R.drawable.round_check2);
+        checkBox.setVisibility(VISIBLE);
+        checkBox.setColor(0xff29b6f7);
+        addView(checkBox, LayoutHelper.createFrame(22, 22, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 18 : 0, 39, LocaleController.isRTL ? 0 : 18, 0));
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(72) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+    }
+
+    public void setAudio(MediaController.AudioEntry entry, boolean divider, boolean checked) {
+        audioEntry = entry;
+
+        titleTextView.setText(audioEntry.title);
+        genreTextView.setText(audioEntry.genre);
+        authorTextView.setText(audioEntry.author);
+        timeTextView.setText(String.format("%d:%02d", audioEntry.duration / 60, audioEntry.duration % 60));
+        playButton.setImageResource(MediaController.getInstance().isPlayingAudio(audioEntry.messageObject) && !MediaController.getInstance().isAudioPaused() ? R.drawable.audiosend_pause : R.drawable.audiosend_play);
+
+        needDivider = divider;
+        setWillNotDraw(!divider);
+
+        checkBox.setChecked(checked, false);
+    }
+
+    public void setChecked(boolean value) {
+        checkBox.setChecked(value, true);
+    }
+
+    public void setDelegate(AudioCellDelegate audioCellDelegate) {
+        delegate = audioCellDelegate;
+    }
+
+    public MediaController.AudioEntry getAudioEntry() {
+        return audioEntry;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (needDivider) {
+            canvas.drawLine(AndroidUtilities.dp(72), getHeight() - 1, getWidth(), getHeight() - 1, paint);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
index 6c05ae107..32d9c6baa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
@@ -42,6 +42,7 @@
     private int height;
     private int textX;
     private int textY;
+    private int textXOffset;
 
     private ClickableSpan pressedLink;
     private LinkPath urlPath = new LinkPath();
@@ -101,7 +102,9 @@ public void setText(String text) {
         width = 0;
         height = textLayout.getHeight() + AndroidUtilities.dp(4 + 18);
         int count = textLayout.getLineCount();
+        textXOffset = Integer.MAX_VALUE;
         for (int a = 0; a < count; a++) {
+            textXOffset = (int) Math.ceil(Math.min(textXOffset, textLayout.getLineLeft(a)));
             width = (int) Math.ceil(Math.max(width, textLayout.getLineWidth(a) - textLayout.getLineLeft(a)));
         }
         width += AndroidUtilities.dp(4 + 18);
@@ -113,7 +116,6 @@ public boolean onTouchEvent(MotionEvent event) {
         float y = event.getY();
 
         boolean result = false;
-        int side = AndroidUtilities.dp(48);
         if (textLayout != null) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || pressedLink != null && event.getAction() == MotionEvent.ACTION_UP) {
                 if (event.getAction() == MotionEvent.ACTION_DOWN) {
@@ -186,7 +188,7 @@ protected void onDraw(Canvas canvas) {
         ResourceLoader.backgroundMediaDrawableIn.setBounds(x, y, width + x, height + y);
         ResourceLoader.backgroundMediaDrawableIn.draw(canvas);
         canvas.save();
-        canvas.translate(textX = AndroidUtilities.dp(2 + 9) + x, textY = AndroidUtilities.dp(2 + 9) + y);
+        canvas.translate(textX = AndroidUtilities.dp(2 + 9) + x - textXOffset, textY = AndroidUtilities.dp(2 + 9) + y);
         if (pressedLink != null) {
             canvas.drawPath(urlPath, urlPaint);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 12c749222..82ab4b730 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -174,8 +174,8 @@ public boolean onTouchEvent(MotionEvent event) {
                     final int line = textLayout.getLineForVertical((int)y);
                     final int off = textLayout.getOffsetForHorizontal(line, x);
                     final float left = textLayout.getLineLeft(line);
-                    if (left <= x && left + textLayout.getLineWidth(line) >= x) {
-                        Spannable buffer = (Spannable)currentMessageObject.messageText;
+                    if (left <= x && left + textLayout.getLineWidth(line) >= x && currentMessageObject.messageText instanceof Spannable) {
+                        Spannable buffer = (Spannable) currentMessageObject.messageText;
                         URLSpan[] link = buffer.getSpans(off, off, URLSpan.class);
 
                         if (link.length != 0) {
@@ -226,7 +226,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 int linesCount = textLayout.getLineCount();
                 for (int a = 0; a < linesCount; a++) {
                     float lineWidth;
-                    float lineLeft = 0;
                     try {
                         lineWidth = textLayout.getLineWidth(a);
                         textHeight = (int)Math.max(textHeight, Math.ceil(textLayout.getLineBottom(a)));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index 1b7a9db99..77f5069e2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -21,10 +21,11 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.MessagesController;
+import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.FileLoader;
 import org.telegram.android.MediaController;
 import org.telegram.android.MessageObject;
-import org.telegram.ui.Components.ProgressView;
+import org.telegram.ui.Components.RadialProgress;
 import org.telegram.ui.Components.ResourceLoader;
 import org.telegram.ui.Components.SeekBar;
 
@@ -36,10 +37,10 @@
     private static Paint circlePaint;
 
     private SeekBar seekBar;
-    private ProgressView progressView;
     private int seekBarX;
     private int seekBarY;
 
+    private RadialProgress radialProgress;
     private int buttonState = 0;
     private int buttonX;
     private int buttonY;
@@ -58,7 +59,7 @@ public ChatAudioCell(Context context) {
 
         seekBar = new SeekBar(context);
         seekBar.delegate = this;
-        progressView = new ProgressView();
+        radialProgress = new RadialProgress(this);
         drawForwardedName = true;
 
         if (timePaint == null) {
@@ -78,7 +79,7 @@ protected void onDetachedFromWindow() {
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
-        updateButtonState();
+        updateButtonState(false);
     }
 
     @Override
@@ -131,21 +132,25 @@ private void didPressedButton() {
             }
             if (result) {
                 buttonState = 1;
+                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
                 invalidate();
             }
         } else if (buttonState == 1) {
             boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
             if (result) {
                 buttonState = 0;
+                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
                 invalidate();
             }
         } else if (buttonState == 2) {
             FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
             buttonState = 3;
+            radialProgress.setBackground(getDrawableForCurrentState(), true, false);
             invalidate();
         } else if (buttonState == 3) {
             FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
             buttonState = 2;
+            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
             invalidate();
         } else if (buttonState == 4) {
             if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
@@ -173,6 +178,7 @@ public void updateProgress() {
         }
         String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
         if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+            lastTimeString = timeString;
             timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
             timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         }
@@ -183,16 +189,23 @@ public void downloadAudioIfNeed() {
         if (buttonState == 2) {
             FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
             buttonState = 3;
-            invalidate();
+            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
         }
     }
 
-    public void updateButtonState() {
+    public void updateButtonState(boolean animated) {
         if (currentMessageObject == null) {
             return;
         }
         if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+            MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
             buttonState = 4;
+            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
+            Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
+            if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
+                progress = 1.0f;
+            }
+            radialProgress.setProgress(progress != null ? progress : 0, false);
         } else {
             File cacheFile = null;
             if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
@@ -212,21 +225,24 @@ public void updateButtonState() {
                 } else {
                     buttonState = 1;
                 }
-                progressView.setProgress(0);
+                radialProgress.setProgress(0, animated);
+                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
             } else {
                 String fileName = currentMessageObject.getFileName();
                 MediaController.getInstance().addLoadingFileObserver(fileName, this);
                 if (!FileLoader.getInstance().isLoadingFile(fileName)) {
                     buttonState = 2;
-                    progressView.setProgress(0);
+                    radialProgress.setProgress(0, animated);
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
                 } else {
                     buttonState = 3;
                     Float progress = ImageLoader.getInstance().getFileProgress(fileName);
                     if (progress != null) {
-                        progressView.setProgress(progress);
+                        radialProgress.setProgress(progress, animated);
                     } else {
-                        progressView.setProgress(0);
+                        radialProgress.setProgress(0, animated);
                     }
+                    radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
                 }
             }
         }
@@ -235,26 +251,25 @@ public void updateButtonState() {
 
     @Override
     public void onFailedDownload(String fileName) {
-        updateButtonState();
+        updateButtonState(true);
     }
 
     @Override
     public void onSuccessDownload(String fileName) {
-        updateButtonState();
+        updateButtonState(true);
     }
 
     @Override
     public void onProgressDownload(String fileName, float progress) {
-        progressView.setProgress(progress);
+        radialProgress.setProgress(progress, true);
         if (buttonState != 3) {
-            updateButtonState();
+            updateButtonState(false);
         }
-        invalidate();
     }
 
     @Override
     public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-
+        radialProgress.setProgress(progress, true);
     }
 
     @Override
@@ -299,17 +314,17 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         seekBar.width = backgroundWidth - AndroidUtilities.dp(70);
         seekBar.height = AndroidUtilities.dp(30);
-        progressView.width = backgroundWidth - AndroidUtilities.dp(94);
-        progressView.height = AndroidUtilities.dp(30);
         seekBarY = AndroidUtilities.dp(11) + namesOffset;
         buttonY = AndroidUtilities.dp(13) + namesOffset;
+        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(40), buttonY + AndroidUtilities.dp(40));
 
         updateProgress();
     }
 
     @Override
     public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
+        boolean dataChanged = currentMessageObject == messageObject && isUserDataChanged();
+        if (currentMessageObject != messageObject || dataChanged) {
             if (AndroidUtilities.isTablet()) {
                 backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
             } else {
@@ -318,15 +333,20 @@ public void setMessageObject(MessageObject messageObject) {
 
             if (messageObject.isOut()) {
                 seekBar.type = 0;
-                progressView.setProgressColors(0xffb4e396, 0xff6ac453);
+                radialProgress.setProgressColor(0xff87bf78);
             } else {
                 seekBar.type = 1;
-                progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
+                radialProgress.setProgressColor(0xffa2b5c7);
             }
 
             super.setMessageObject(messageObject);
         }
-        updateButtonState();
+        updateButtonState(dataChanged);
+    }
+
+    private Drawable getDrawableForCurrentState() {
+        return ResourceLoader.audioStatesDrawable[currentMessageObject.isOut() ? buttonState : buttonState + 5][0];
+        //buttonPressed ? 1 :
     }
 
     @Override
@@ -338,27 +358,18 @@ protected void onDraw(Canvas canvas) {
         }
 
         canvas.save();
-        if (buttonState == 0 || buttonState == 1) {
-            canvas.translate(seekBarX, seekBarY);
-            seekBar.draw(canvas);
-        } else {
-            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
-            progressView.draw(canvas);
-        }
+        canvas.translate(seekBarX, seekBarY);
+        seekBar.draw(canvas);
         canvas.restore();
 
-        int state = buttonState;
         if (currentMessageObject.isOut()) {
             timePaint.setColor(0xff70b15c);
             circlePaint.setColor(0xff87bf78);
         } else {
-            state += 5;
             timePaint.setColor(0xffa1aab3);
             circlePaint.setColor(0xff4195e5);
         }
-        Drawable buttonDrawable = ResourceLoader.audioStatesDrawable[state][buttonPressed ? 1 : 0];
-        setDrawableBounds(buttonDrawable, buttonX, buttonY);
-        buttonDrawable.draw(canvas);
+        radialProgress.onDraw(canvas);
 
         canvas.save();
         canvas.translate(timeX, AndroidUtilities.dp(42) + namesOffset);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index 8e28d5163..dda180c9a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -445,7 +445,7 @@ public void setMessageObject(MessageObject messageObject) {
                         mess = mess.substring(0, 150);
                     }
                     mess = mess.replace("\n", " ");
-                    stringFinalText = Emoji.replaceEmoji(mess, replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14));
+                    stringFinalText = Emoji.replaceEmoji(mess, replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14), false);
                     stringFinalText = TextUtils.ellipsize(stringFinalText, replyTextPaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 129348b60..92c337c27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -108,7 +108,6 @@ public boolean onTouchEvent(MotionEvent event) {
         float y = event.getY();
 
         boolean result = false;
-        int side = AndroidUtilities.dp(36);
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
                 avatarPressed = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 23f72ec76..0c704b956 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -379,7 +379,6 @@ private void didClickedImage() {
 
     private Drawable getDrawableForCurrentState() {
         if (buttonState >= 0 && buttonState < 4) {
-            Drawable currentButtonDrawable = null;
             if (currentMessageObject.type == 9 && gifDrawable == null) {
                 if (buttonState == 1 && !currentMessageObject.isSending()) {
                     return ResourceLoader.buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0];
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index aac1b324d..14159564f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -193,7 +193,7 @@ public boolean onTouchEvent(MotionEvent event) {
                                 pressedLink.onClick(this);
                             } else {
                                 TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
-                                if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                                if (Build.VERSION.SDK_INT >= 19 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
                                     delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.url, webPage.embed_width, webPage.embed_height);
                                 } else {
                                     Uri uri = Uri.parse(webPage.url);
@@ -536,7 +536,7 @@ public void setMessageObject(MessageObject messageObject) {
 
                 if (webPage.photo != null) {
                     boolean smallImage = webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article"));
-                    if (smallImage && descriptionLayout != null && descriptionLayout.getLineCount() == 1) {
+                    if (smallImage && (descriptionLayout == null || descriptionLayout != null && descriptionLayout.getLineCount() == 1)) {
                         smallImage = false;
                         isSmallImage = false;
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java
new file mode 100644
index 000000000..d85fe7747
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java
@@ -0,0 +1,428 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ImageLoader;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Components.RadialProgress;
+import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.Components.SeekBar;
+
+import java.io.File;
+
+public class ChatMusicCell extends ChatBaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
+
+    public interface ChatMusicCellDelegate {
+        boolean needPlayMusic(MessageObject messageObject);
+    }
+
+    private static TextPaint timePaint;
+    private static TextPaint titlePaint;
+    private static TextPaint authorPaint;
+
+    private SeekBar seekBar;
+    private int seekBarX;
+    private int seekBarY;
+
+    private RadialProgress radialProgress;
+    private int buttonState = 0;
+    private int buttonX;
+    private int buttonY;
+    private boolean buttonPressed = false;
+
+    private StaticLayout timeLayout;
+    private int timeX;
+    private String lastTimeString = null;
+
+    private StaticLayout titleLayout;
+    private int titleX;
+
+    private StaticLayout authorLayout;
+    private int authorX;
+
+    private int TAG;
+
+    private ChatMusicCellDelegate musicDelegate;
+
+    public ChatMusicCell(Context context) {
+        super(context);
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        seekBar = new SeekBar(context);
+        seekBar.delegate = this;
+        radialProgress = new RadialProgress(this);
+        drawForwardedName = false;
+
+        if (timePaint == null) {
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.dp(13));
+
+            titlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            titlePaint.setTextSize(AndroidUtilities.dp(16));
+            titlePaint.setColor(0xff212121);
+            titlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            authorPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            authorPaint.setTextSize(AndroidUtilities.dp(15));
+            authorPaint.setColor(0xff212121);
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        MediaController.getInstance().removeLoadingFileObserver(this);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        updateButtonState(false);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
+        if (result) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                getParent().requestDisallowInterceptTouchEvent(true);
+            }
+            invalidate();
+        } else {
+            int side = AndroidUtilities.dp(36);
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
+                    buttonPressed = true;
+                    invalidate();
+                    result = true;
+                }
+            } else if (buttonPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    buttonPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton();
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    buttonPressed = false;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
+                        buttonPressed = false;
+                        invalidate();
+                    }
+                }
+            }
+            if (!result) {
+                result = super.onTouchEvent(event);
+            }
+        }
+
+        return result;
+    }
+
+    private void didPressedButton() {
+        if (buttonState == 0) {
+            if (musicDelegate != null) {
+                if (musicDelegate.needPlayMusic(currentMessageObject)) {
+                    buttonState = 1;
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                    invalidate();
+                }
+            }
+        } else if (buttonState == 1) {
+            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
+            if (result) {
+                buttonState = 0;
+                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                invalidate();
+            }
+        } else if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
+            buttonState = 3;
+            radialProgress.setBackground(getDrawableForCurrentState(), true, false);
+            invalidate();
+        } else if (buttonState == 3) {
+            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
+            buttonState = 2;
+            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+            invalidate();
+        } else if (buttonState == 4) {
+            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+                if (delegate != null) {
+                    delegate.didPressedCancelSendButton(this);
+                }
+            }
+        }
+    }
+
+    public void setMusicDelegate(ChatMusicCellDelegate delegate) {
+        musicDelegate = delegate;
+    }
+
+    public void updateProgress() {
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (!seekBar.isDragging()) {
+            seekBar.setProgress(currentMessageObject.audioProgress);
+        }
+
+        int duration = 0;
+        int currentProgress = 0;
+        for (TLRPC.DocumentAttribute attribute : currentMessageObject.messageOwner.media.document.attributes) {
+            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                duration = attribute.duration;
+                break;
+            }
+        }
+        if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+            currentProgress = currentMessageObject.audioProgressSec;
+        }
+        String timeString = String.format("%d:%02d / %d:%02d", currentProgress / 60, currentProgress % 60, duration / 60, duration % 60);
+        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+            lastTimeString = timeString;
+            int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        }
+        invalidate();
+    }
+
+    public void downloadAudioIfNeed() {
+        //if (buttonState == 2) {
+            //FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
+        //    buttonState = 3;
+        //    invalidate();
+        //}
+    }
+
+    public void updateButtonState(boolean animated) {
+        if (currentMessageObject == null) {
+            return;
+        }
+        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+            MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
+            buttonState = 4;
+            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
+            Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
+            if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
+                progress = 1.0f;
+            }
+            radialProgress.setProgress(progress != null ? progress : 0, false);
+        } else {
+            File cacheFile = null;
+            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
+                cacheFile = new File(currentMessageObject.messageOwner.attachPath);
+                if(!cacheFile.exists()) {
+                    cacheFile = null;
+                }
+            }
+            if (cacheFile == null) {
+                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            }
+            if (cacheFile.exists()) {
+                MediaController.getInstance().removeLoadingFileObserver(this);
+                boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
+                if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
+                    buttonState = 0;
+                } else {
+                    buttonState = 1;
+                }
+                radialProgress.setProgress(0, animated);
+                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+            } else {
+                String fileName = currentMessageObject.getFileName();
+                MediaController.getInstance().addLoadingFileObserver(fileName, this);
+                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                    buttonState = 2;
+                    radialProgress.setProgress(0, animated);
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                } else {
+                    buttonState = 3;
+                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
+                    if (progress != null) {
+                        radialProgress.setProgress(progress, animated);
+                    } else {
+                        radialProgress.setProgress(0, animated);
+                    }
+                    radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
+                }
+            }
+        }
+        updateProgress();
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+        updateButtonState(true);
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+        updateButtonState(true);
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+        radialProgress.setProgress(progress, true);
+        if (buttonState != 3) {
+            updateButtonState(false);
+        }
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+        radialProgress.setProgress(progress, true);
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+
+    @Override
+    public void onSeekBarDrag(float progress) {
+        if (currentMessageObject == null) {
+            return;
+        }
+        currentMessageObject.audioProgress = progress;
+        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        setMeasuredDimension(width, AndroidUtilities.dp(78) + namesOffset);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        if (currentMessageObject.isOut()) {
+            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(52);
+            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(13);
+            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(63);
+        } else {
+            if (isChat) {
+                seekBarX = AndroidUtilities.dp(113);
+                buttonX = AndroidUtilities.dp(74);
+                timeX = AndroidUtilities.dp(124);
+            } else {
+                seekBarX = AndroidUtilities.dp(61);
+                buttonX = AndroidUtilities.dp(22);
+                timeX = AndroidUtilities.dp(72);
+            }
+        }
+
+        seekBar.width = backgroundWidth - AndroidUtilities.dp(67);
+        seekBar.height = AndroidUtilities.dp(30);
+        seekBarY = AndroidUtilities.dp(26) + namesOffset;
+        buttonY = AndroidUtilities.dp(13) + namesOffset;
+        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(40), buttonY + AndroidUtilities.dp(40));
+
+        updateProgress();
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        boolean dataChanged = currentMessageObject == messageObject && isUserDataChanged();
+        if (currentMessageObject != messageObject || dataChanged) {
+            if (AndroidUtilities.isTablet()) {
+                backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
+            } else {
+                backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
+            }
+
+            if (messageObject.isOut()) {
+                seekBar.type = 0;
+                radialProgress.setProgressColor(0xff87bf78);
+            } else {
+                seekBar.type = 1;
+                radialProgress.setProgressColor(0xffa2b5c7);
+            }
+
+            int maxWidth = backgroundWidth - AndroidUtilities.dp(86);
+
+            CharSequence stringFinal = TextUtils.ellipsize(messageObject.getMusicTitle().replace("\n", " "), titlePaint, maxWidth, TextUtils.TruncateAt.END);
+            titleLayout = new StaticLayout(stringFinal, titlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (titleLayout.getLineCount() > 0) {
+                titleX = (int) Math.ceil(titleLayout.getLineLeft(0));
+            }
+
+            stringFinal = TextUtils.ellipsize(messageObject.getMusicAuthor().replace("\n", " "), authorPaint, maxWidth, TextUtils.TruncateAt.END);
+            authorLayout = new StaticLayout(stringFinal, authorPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (authorLayout.getLineCount() > 0) {
+                authorX = (int) Math.ceil(authorLayout.getLineLeft(0));
+            }
+
+            super.setMessageObject(messageObject);
+        }
+        updateButtonState(dataChanged);
+    }
+
+    private Drawable getDrawableForCurrentState() {
+        return ResourceLoader.audioStatesDrawable[currentMessageObject.isOut() ? buttonState : buttonState + 5][0];
+        //buttonPressed ? 1 :
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (currentMessageObject.isOut()) {
+            timePaint.setColor(0xff70b15c);
+        } else {
+            timePaint.setColor(0xffa1aab3);
+        }
+        radialProgress.onDraw(canvas);
+
+        canvas.save();
+        canvas.translate(timeX + titleX, AndroidUtilities.dp(12) + namesOffset);
+        titleLayout.draw(canvas);
+        canvas.restore();
+
+        canvas.save();
+        if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+            canvas.translate(seekBarX, seekBarY);
+            seekBar.draw(canvas);
+        } else {
+            canvas.translate(timeX + authorX, AndroidUtilities.dp(32) + namesOffset);
+            authorLayout.draw(canvas);
+        }
+        canvas.restore();
+
+        canvas.save();
+        canvas.translate(timeX, AndroidUtilities.dp(52) + namesOffset);
+        timeLayout.draw(canvas);
+        canvas.restore();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index b163ec918..73ac7d063 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -356,15 +356,7 @@ public void buildLayout() {
                         if (message.isOut()) {
                             name = LocaleController.getString("FromYou", R.string.FromYou);
                         } else {
-                            if (UserObject.isDeleted(fromUser)) {
-                                name = "Deleted";
-                            } else {
-                                if (fromUser.first_name != null && fromUser.first_name.length() > 0) {
-                                    name = fromUser.first_name;
-                                } else {
-                                    name = fromUser.last_name;
-                                }
-                            }
+                            name = UserObject.getFirstName(fromUser);
                         }
                         checkMessage = false;
                         if (message.caption != null) {
@@ -373,11 +365,11 @@ public void buildLayout() {
                                 mess = mess.substring(0, 150);
                             }
                             mess = mess.replace("\n", " ");
-                            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                         } else {
                             if (message.messageOwner.media != null && !message.isMediaEmpty()) {
                                 currentMessagePaint = messagePrintingPaint;
-                                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, message.messageText), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, message.messageText), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                             } else {
                                 if (message.messageOwner.message != null) {
                                     String mess = message.messageOwner.message;
@@ -385,7 +377,7 @@ public void buildLayout() {
                                         mess = mess.substring(0, 150);
                                     }
                                     mess = mess.replace("\n", " ");
-                                    messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                                    messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                                 }
                             }
                         }
@@ -580,7 +572,7 @@ public void buildLayout() {
                 mess = mess.substring(0, 150);
             }
             mess = mess.replace("\n", " ");
-            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
+            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17), false);
         }
         messageWidth = Math.max(AndroidUtilities.dp(12), messageWidth);
         CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
index 54414ebc2..c389b017d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
@@ -13,7 +13,6 @@
 import android.widget.ImageView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
 
 public class PhotoAttachCameraCell extends FrameLayout {
@@ -23,7 +22,7 @@ public PhotoAttachCameraCell(Context context) {
 
         ImageView imageView = new ImageView(context);
         imageView.setScaleType(ImageView.ScaleType.CENTER);
-        imageView.setImageResource(R.drawable.ic_attach_photobig);
+        //imageView.setImageResource(R.drawable.ic_attach_photobig);
         imageView.setBackgroundColor(0xff777777);
         addView(imageView, LayoutHelper.createFrame(80, 80));
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
index bf00964c4..9018a1623 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
@@ -81,5 +81,6 @@ public void setChecked(boolean value, boolean animated) {
 
     public void setOnCheckClickLisnener(OnClickListener onCheckClickLisnener) {
         checkFrame.setOnClickListener(onCheckClickLisnener);
+        imageView.setOnClickListener(onCheckClickLisnener);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
index 7cc059b68..9d677bb44 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
@@ -100,7 +100,7 @@ public void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb)
         });
 
         nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff222222);
+        nameTextView.setTextColor(0xff212121);
         nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         nameTextView.setLines(1);
@@ -318,6 +318,9 @@ public void onSuccessDownload(String name) {
 
     @Override
     public void onProgressDownload(String fileName, float progress) {
+        if (progressView.getVisibility() != VISIBLE) {
+            updateFileExistIcon();
+        }
         progressView.setProgress(progress, true);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java
index 1646b509b..010b51a0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java
@@ -28,7 +28,7 @@ public SharedMediaSectionCell(Context context) {
         textView = new TextView(getContext());
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff222222);
+        textView.setTextColor(0xff212121);
         textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
         addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 13, 0, 13, 0));
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
index ce803d315..1f5c47eeb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
@@ -63,14 +63,14 @@ public void setSticker(TLRPC.Document document, boolean showEmoji) {
                 for (TLRPC.DocumentAttribute attribute : document.attributes) {
                     if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
                         if (attribute.alt != null && attribute.alt.length() > 0) {
-                            emojiTextView.setText(Emoji.replaceEmoji(attribute.alt, emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16)));
+                            emojiTextView.setText(Emoji.replaceEmoji(attribute.alt, emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16), false));
                             set = true;
                         }
                         break;
                     }
                 }
                 if (!set) {
-                    emojiTextView.setText(Emoji.replaceEmoji(StickersQuery.getEmojiForSticker(sticker.id), emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16)));
+                    emojiTextView.setText(Emoji.replaceEmoji(StickersQuery.getEmojiForSticker(sticker.id), emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16), false));
                 }
                 emojiTextView.setVisibility(VISIBLE);
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
index 7889b7803..7cab5ae05 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
@@ -36,7 +36,7 @@ public TextDetailCell(Context context) {
         textView.setMaxLines(1);
         textView.setSingleLine(true);
         textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 10, LocaleController.isRTL ? 16 : 71, 0));
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 10, LocaleController.isRTL ? 71 : 16, 0));
 
         valueTextView = new TextView(context);
         valueTextView.setTextColor(0xff8a8a8a);
@@ -45,7 +45,7 @@ public TextDetailCell(Context context) {
         valueTextView.setMaxLines(1);
         valueTextView.setSingleLine(true);
         valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 35, LocaleController.isRTL ? 16 : 71, 0));
+        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 35, LocaleController.isRTL ? 71 : 16, 0));
 
         imageView = new ImageView(context);
         imageView.setScaleType(ImageView.ScaleType.CENTER);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index 8eb72c7e1..2addf5a7d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -16,7 +16,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -57,7 +56,7 @@ public boolean onFragmentCreate() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 5c0088490..a71dcc505 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -15,7 +15,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -50,7 +49,7 @@
     private final static int done_button = 1;
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index bc6040073..b06244418 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -24,7 +24,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.animation.AccelerateDecelerateInterpolator;
@@ -102,7 +101,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
index e4077ef3b..5144dc26d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
@@ -13,7 +13,6 @@
 import android.content.DialogInterface;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.ImageView;
@@ -36,7 +35,7 @@
 public class ChangePhoneHelpActivity extends BaseFragment {
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index 0e40b1a41..0f607ee9a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -20,7 +20,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -62,7 +61,7 @@
     private final static int done_button = 1;
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("Username", R.string.Username));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 8e59129c3..0077cde01 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -14,7 +14,6 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.Cursor;
@@ -32,7 +31,6 @@
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -40,6 +38,7 @@
 import android.view.WindowManager;
 import android.webkit.MimeTypeMap;
 import android.widget.AdapterView;
+import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
@@ -96,6 +95,7 @@
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Cells.ChatMessageCell;
+import org.telegram.ui.Cells.ChatMusicCell;
 import org.telegram.ui.Cells.ChatUnreadCell;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -123,7 +123,7 @@
 import java.util.HashMap;
 import java.util.concurrent.Semaphore;
 
-public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate,
+public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
         PhotoViewer.PhotoViewerProvider {
 
     protected TLRPC.Chat currentChat;
@@ -177,6 +177,7 @@
     private ListView mentionListView;
     private AnimatorSetProxy mentionListAnimation;
     private ChatAttachView chatAttachView;
+    private BottomSheet chatAttachViewSheet;
 
     private boolean allowStickersPanel;
     private AnimatorSetProxy runningAnimation;
@@ -455,6 +456,7 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioPlayStateChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.screenshotTook);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
@@ -558,6 +560,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botInfoDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botKeyboardDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioPlayStateChanged);
 
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
@@ -578,11 +581,14 @@ public void onFragmentDestroy() {
             chatAttachView.onDestroy();
         }
         AndroidUtilities.unlockOrientation(getParentActivity());
-        MediaController.getInstance().stopAudio();
+        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+        if (messageObject != null && !messageObject.isMusic()) {
+            MediaController.getInstance().stopAudio();
+        }
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
 
         for (int a = 0; a < 8; a++) {
             chatMessageCellsCache.add(new ChatMessageCell(context));
@@ -595,6 +601,7 @@ public View createView(Context context, LayoutInflater inflater) {
         lastStatus = null;
         hasOwnBackground = true;
         chatAttachView = null;
+        chatAttachViewSheet = null;
 
         ResourceLoader.loadRecources(context);
 
@@ -673,7 +680,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 1);
-                    MessagesActivity fragment = new MessagesActivity(args);
+                    DialogsActivity fragment = new DialogsActivity(args);
                     fragment.setDelegate(ChatActivity.this);
                     presentFragment(fragment);
                 } else if (id == chat_enc_timer) {
@@ -770,20 +777,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     selectedMessagesCanCopyIds.clear();
                     actionBar.hideActionMode();
                     updateVisibleRows();
-                }/* else if (id == chat_menu_attach) {
+                } else if (id == chat_menu_attach) {
                     if (getParentActivity() == null) {
                         return;
                     }
-                    BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+
                     if (chatAttachView == null) {
+                        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
                         chatAttachView = new ChatAttachView(getParentActivity());
                         chatAttachView.setDelegate(new ChatAttachView.ChatAttachViewDelegate() {
                             @Override
                             public void didPressedButton(int button) {
-                                if (visibleDialog != null) {
-                                    visibleDialog.dismiss();
-                                }
                                 if (button == 7) {
+                                    chatAttachViewSheet.dismiss();
                                     HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = chatAttachView.getSelectedPhotos();
                                     if (!selectedPhotos.isEmpty()) {
                                         ArrayList<String> photos = new ArrayList<>();
@@ -796,31 +802,50 @@ public void didPressedButton(int button) {
                                         showReplyPanel(false, null, null, null, false, true);
                                     }
                                     return;
+                                } else {
+                                    chatAttachViewSheet.dismissWithButtonClick(button);
                                 }
                                 processSelectedAttach(button);
                             }
                         });
-                    }
-                    builder.setCustomView(chatAttachView);
-                    final int coords[] = new int[2];
-                    menuItem.getLocationInWindow(coords);
-                    builder.setRevealAnimation(coords[0] + menuItem.getWidth() / 2, coords[1] + menuItem.getHeight() / 2);
-                    builder.setDelegate(new BottomSheet.BottomSheetDelegate() {
-                        @Override
-                        public void onOpenAnimationStart() {
-                            chatAttachView.startAnimations(coords[1] > AndroidUtilities.displaySize.y - AndroidUtilities.dp(100));
-                        }
+                        builder.setDelegate(new BottomSheet.BottomSheetDelegate() {
 
-                        @Override
-                        public void onOpenAnimationEnd() {
+                            @Override
+                            public void onRevealAnimationStart(boolean open) {
+                                chatAttachView.onRevealAnimationStart(open);
+                            }
+
+                            @Override
+                            public void onRevealAnimationProgress(boolean open, float radius, int x, int y) {
+                                chatAttachView.onRevealAnimationProgress(open, radius, x, y);
+                            }
+
+                            @Override
+                            public void onRevealAnimationEnd(boolean open) {
+                                chatAttachView.onRevealAnimationEnd(open);
+                            }
+
+                            @Override
+                            public void onOpenAnimationEnd() {
+                                chatAttachView.onRevealAnimationEnd(true);
+                            }
+
+                            @Override
+                            public View getRevealView() {
+                                return menuItem;
+                            }
+                        });
+                        builder.setApplyTopPaddings(false);
+                        builder.setUseRevealAnimation();
+                        builder.setCustomView(chatAttachView);
+                        chatAttachViewSheet = builder.create();
+                    }
 
-                        }
-                    });
                     chatAttachView.init(ChatActivity.this);
-                    showDialog(builder.create());
-                }*/ else if (id == attach_gallery || id == attach_video || id == attach_document || id == attach_location || id == attach_photo || id == attach_audio || id == attach_contact) {
+                    showDialog(chatAttachViewSheet);
+                }/* else if (id == attach_gallery || id == attach_video || id == attach_document || id == attach_location || id == attach_photo || id == attach_audio || id == attach_contact) {
                     processSelectedAttach(id);
-                } else if (id == bot_help) {
+                } */else if (id == bot_help) {
                     SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false);
                 } else if (id == bot_settings) {
                     SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false);
@@ -922,12 +947,26 @@ public void onClick(View v) {
         ActionBarMenu menu = actionBar.createMenu();
 
         if (currentEncryptedChat == null && !isBroadcast) {
-            /*searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true, false).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+            searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true, false).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
 
                 @Override
                 public void onSearchCollapse() {
                     avatarContainer.setVisibility(View.VISIBLE);
-                    headerItem.setVisibility(View.VISIBLE);
+                    if (chatActivityEnterView.hasText()) {
+                        if (headerItem != null) {
+                            headerItem.setVisibility(View.GONE);
+                        }
+                        if (attachItem != null) {
+                            attachItem.setVisibility(View.VISIBLE);
+                        }
+                    } else {
+                        if (headerItem != null) {
+                            headerItem.setVisibility(View.VISIBLE);
+                        }
+                        if (attachItem != null) {
+                            attachItem.setVisibility(View.GONE);
+                        }
+                    }
                     searchItem.setVisibility(View.GONE);
                     //chatActivityEnterView.setVisibility(View.VISIBLE);
                     searchUpItem.clearAnimation();
@@ -945,7 +984,7 @@ public void run() {
                             searchItem.getSearchField().requestFocus();
                             AndroidUtilities.showKeyboard(searchItem.getSearchField());
                         }
-                    }, 200); //TODO find a better way to open keyboard
+                    }, 300); //TODO find a better way to open keyboard
                 }
 
                 @Override
@@ -960,7 +999,7 @@ public void onSearchPressed(EditText editText) {
             searchUpItem = menu.addItem(search_up, R.drawable.search_up);
             searchUpItem.setVisibility(View.GONE);
             searchDownItem = menu.addItem(search_down, R.drawable.search_down);
-            searchDownItem.setVisibility(View.GONE);*/
+            searchDownItem.setVisibility(View.GONE);
         }
 
         headerItem = menu.addItem(0, R.drawable.ic_ab_other);
@@ -990,22 +1029,9 @@ public void onSearchPressed(EditText editText) {
         updateSubtitle();
         updateTitleIcons();
 
-        attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other).setAllowCloseAnimation(false);
-        attachItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
-        attachItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
-        attachItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
-        attachItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
-        attachItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
+        attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
         attachItem.setVisibility(View.GONE);
-
         menuItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach).setAllowCloseAnimation(false);
-        menuItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
-        menuItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
-        menuItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
-        menuItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
-        menuItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
-        menuItem.setShowFromBottom(true);
-
         menuItem.setBackgroundDrawable(null);
 
         actionModeViews.clear();
@@ -1053,8 +1079,6 @@ public boolean onTouch(View v, MotionEvent event) {
 
             @Override
             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                int widthMode = MeasureSpec.getMode(widthMeasureSpec);
-                int heightMode = MeasureSpec.getMode(heightMeasureSpec);
                 int widthSize = MeasureSpec.getSize(widthMeasureSpec);
                 int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
@@ -1067,14 +1091,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 }
 
                 int childCount = getChildCount();
-                for (int i = 0; i < childCount; i++) {
-                    View child = getChildAt(i);
-                    if (child == chatActivityEnterView) {
-                        measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
-                        inputFieldHeight = child.getMeasuredHeight();
-                        break;
-                    }
-                }
+
+                measureChildWithMargins(chatActivityEnterView, widthMeasureSpec, 0, heightMeasureSpec, 0);
+                inputFieldHeight = chatActivityEnterView.getMeasuredHeight();
+
                 for (int i = 0; i < childCount; i++) {
                     View child = getChildAt(i);
                     if (child.getVisibility() == GONE || child == chatActivityEnterView) {
@@ -1660,6 +1680,9 @@ public void needSendTyping() {
 
             @Override
             public void onAttachButtonHidden() {
+                if (actionBar.isSearchFieldVisible()) {
+                    return;
+                }
                 if (attachItem != null) {
                     attachItem.setVisibility(View.VISIBLE);
                 }
@@ -1670,6 +1693,9 @@ public void onAttachButtonHidden() {
 
             @Override
             public void onAttachButtonShow() {
+                if (actionBar.isSearchFieldVisible()) {
+                    return;
+                }
                 if (attachItem != null) {
                     attachItem.setVisibility(View.GONE);
                 }
@@ -1680,7 +1706,7 @@ public void onAttachButtonShow() {
 
             @Override
             public void onWindowSizeChanged(int size) {
-                if (size < AndroidUtilities.dp(72) + AndroidUtilities.getCurrentActionBarHeight()) {
+                if (size < AndroidUtilities.dp(72) + ActionBar.getCurrentActionBarHeight()) {
                     allowStickersPanel = false;
                     if (stickersPanel.getVisibility() == View.VISIBLE) {
                         stickersPanel.clearAnimation();
@@ -2089,12 +2115,15 @@ public void startDocumentSelectActivity() {
             });
             presentFragment(fragment);
         } else if (which == attach_audio) {
-            try {
-                Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);
-                startActivityForResult(intent, 32);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
+            AudioSelectActivity fragment = new AudioSelectActivity();
+            fragment.setDelegate(new AudioSelectActivity.AudioSelectActivityDelegate() {
+                @Override
+                public void didSelectAudio(ArrayList<MessageObject> audios) {
+                    SendMessagesHelper.prepareSendingAudioDocuments(audios, dialog_id, replyingMessageObject);
+                    showReplyPanel(false, null, null, null, false, true);
+                }
+            });
+            presentFragment(fragment);
         } else if (which == attach_contact) {
             try {
                 Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
@@ -2216,7 +2245,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                         mess = mess.substring(0, 150);
                     }
                     mess = mess.replace("\n", " ");
-                    replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14)));
+                    replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
                 }
             } else if (messageObjects != null) {
                 if (messageObjects.isEmpty()) {
@@ -2277,7 +2306,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                             mess = mess.substring(0, 150);
                         }
                         mess = mess.replace("\n", " ");
-                        replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14)));
+                        replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
                     } else {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessage", messageObjects.size()));
                     }
@@ -2296,7 +2325,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                         }
                     } else if (type == 12) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", messageObjects.size()));
-                    } else if (type == 2) {
+                    } else if (type == 2 || type == 14) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", messageObjects.size()));
                     } else if (type == 13) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", messageObjects.size()));
@@ -3221,22 +3250,6 @@ public void sendButtonPressed(int index) {
                         FileLog.e("tmessages", e);
                     }
                 }
-            } else if (requestCode == 32) {
-                if (data == null || data.getData() == null) {
-                    showAttachmentError();
-                    return;
-                }
-                Uri uri = data.getData();
-                String path = AndroidUtilities.getPath(uri);
-                if (path != null) {
-                    TLRPC.TL_audio audio = new TLRPC.TL_audio();
-                    audio.dc_id = Integer.MIN_VALUE;
-                    audio.id = Integer.MIN_VALUE;
-                    audio.user_id = UserConfig.getClientUserId();
-                    audio.mime_type = "audio/mp3";
-                    SendMessagesHelper.getInstance().sendMessage(audio, path, dialog_id, replyingMessageObject);
-                    showReplyPanel(false, null, null, null, false, true);
-                }
             }
         }
     }
@@ -3587,7 +3600,6 @@ public void run() {
 
                     if (currentEncryptedChat != null && obj.isOut() && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
                             obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && getParentActivity() != null) {
-                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
                         if (AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 17 && currentEncryptedChat.ttl > 0 && currentEncryptedChat.ttl <= 60) {
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -4005,7 +4017,6 @@ public void run() {
             int encId = (Integer) args[0];
             if (currentEncryptedChat != null && currentEncryptedChat.id == encId) {
                 int date = (Integer) args[1];
-                boolean started = false;
                 for (MessageObject obj : messages) {
                     if (!obj.isOut()) {
                         continue;
@@ -4018,7 +4029,7 @@ public void run() {
                 }
                 updateVisibleRows();
             }
-        } else if (id == NotificationCenter.audioDidReset) {
+        } else if (id == NotificationCenter.audioDidReset || id == NotificationCenter.audioPlayStateChanged) {
             Integer mid = (Integer) args[0];
             if (chatListView != null) {
                 int count = chatListView.getChildCount();
@@ -4027,7 +4038,13 @@ public void run() {
                     if (view instanceof ChatAudioCell) {
                         ChatAudioCell cell = (ChatAudioCell) view;
                         if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
-                            cell.updateButtonState();
+                            cell.updateButtonState(false);
+                            break;
+                        }
+                    } else if (view instanceof ChatMusicCell) {
+                        ChatMusicCell cell = (ChatMusicCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
+                            cell.updateButtonState(false);
                             break;
                         }
                     }
@@ -4045,6 +4062,16 @@ public void run() {
                             cell.updateProgress();
                             break;
                         }
+                    } else if (view instanceof ChatMusicCell) {
+                        ChatMusicCell cell = (ChatMusicCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
+                            MessageObject playing = cell.getMessageObject();
+                            MessageObject player = MediaController.getInstance().getPlayingMessageObject();
+                            playing.audioProgress = player.audioProgress;
+                            playing.audioProgressSec = player.audioProgressSec;
+                            cell.updateProgress();
+                            break;
+                        }
                     }
                 }
             }
@@ -4121,6 +4148,27 @@ public void run() {
         } else if (id == NotificationCenter.audioDidStarted) {
             MessageObject messageObject = (MessageObject) args[0];
             sendSecretMessageRead(messageObject);
+
+            int mid = messageObject.getId();
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    if (view instanceof ChatAudioCell) {
+                        ChatAudioCell cell = (ChatAudioCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
+                            cell.updateButtonState(false);
+                            break;
+                        }
+                    } else if (view instanceof ChatMusicCell) {
+                        ChatMusicCell cell = (ChatMusicCell) view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
+                            cell.updateButtonState(false);
+                            break;
+                        }
+                    }
+                }
+            }
         } else if (id == NotificationCenter.updateMessageMedia) {
             MessageObject messageObject = (MessageObject) args[0];
             MessageObject existMessageObject = messagesDict.get(messageObject.getId());
@@ -4555,7 +4603,7 @@ public boolean onPreDraw() {
                             actionBar.setBackButtonImage(R.drawable.ic_close_white);
                         }
                     }
-                    int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
+                    int padding = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
                     avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
                     layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
@@ -4629,7 +4677,13 @@ public void createMenu(View v, boolean single) {
                                 options = new int[]{8, 2, 3, 1};
                             } else if (type == 4) {
                                 if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                    items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                    String saveString;
+                                    if (selectedObject.isMusic()) {
+                                        saveString = LocaleController.getString("SaveToMusic", R.string.SaveToMusic);
+                                    } else {
+                                        saveString = LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads);
+                                    }
+                                    items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), saveString, LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                     options = new int[]{8, 10, 4, 2, 1};
                                 } else {
                                     items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
@@ -4639,7 +4693,13 @@ public void createMenu(View v, boolean single) {
                                 items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                 options = new int[]{8, 5, 4, 2, 1};
                             } else if (type == 6) {
-                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                String saveString;
+                                if (selectedObject.isMusic()) {
+                                    saveString = LocaleController.getString("SaveToMusic", R.string.SaveToMusic);
+                                } else {
+                                    saveString = LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads);
+                                }
+                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToGallery", R.string.SaveToGallery), saveString, LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                 options = new int[]{8, 7, 10, 6, 2, 1};
                             } else if (type == 7) {
                                 items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("AddToStickers", R.string.AddToStickers), LocaleController.getString("Delete", R.string.Delete)};
@@ -4654,7 +4714,13 @@ public void createMenu(View v, boolean single) {
                                 options = new int[]{2, 3, 1};
                             } else if (type == 4) {
                                 if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                    items = new CharSequence[]{LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                    String saveString;
+                                    if (selectedObject.isMusic()) {
+                                        saveString = LocaleController.getString("SaveToMusic", R.string.SaveToMusic);
+                                    } else {
+                                        saveString = LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads);
+                                    }
+                                    items = new CharSequence[]{saveString, LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                     options = new int[]{10, 4, 2, 1};
                                 } else {
                                     items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
@@ -4664,7 +4730,13 @@ public void createMenu(View v, boolean single) {
                                 items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                 options = new int[]{5, 4, 2, 1};
                             } else if (type == 6) {
-                                items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                String saveString;
+                                if (selectedObject.isMusic()) {
+                                    saveString = LocaleController.getString("SaveToMusic", R.string.SaveToMusic);
+                                } else {
+                                    saveString = LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads);
+                                }
+                                items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), saveString, LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
                                 options = new int[]{7, 10, 6, 2, 1};
                             } else if (type == 7) {
                                 items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("AddToStickers", R.string.AddToStickers), LocaleController.getString("Delete", R.string.Delete)};
@@ -4680,7 +4752,13 @@ public void createMenu(View v, boolean single) {
                             options = new int[]{3, 1};
                         } else if (type == 4) {
                             if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                items = new CharSequence[]{LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Delete", R.string.Delete)};
+                                String saveString;
+                                if (selectedObject.isMusic()) {
+                                    saveString = LocaleController.getString("SaveToMusic", R.string.SaveToMusic);
+                                } else {
+                                    saveString = LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads);
+                                }
+                                items = new CharSequence[]{saveString, LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Delete", R.string.Delete)};
                                 options = new int[]{10, 4, 1};
                             } else {
                                 items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Delete", R.string.Delete)};
@@ -4770,7 +4848,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
             args.putInt("dialogsType", 1);
-            MessagesActivity fragment = new MessagesActivity(args);
+            DialogsActivity fragment = new DialogsActivity(args);
             fragment.setDelegate(this);
             presentFragment(fragment);
         } else if (option == 3) {
@@ -4787,7 +4865,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 FileLog.e("tmessages", e);
             }
         } else if (option == 4) {
-            String fileName = selectedObject.getFileName();
             String path = selectedObject.messageOwner.attachPath;
             if (path != null && path.length() > 0) {
                 File temp = new File(path);
@@ -4802,7 +4879,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 MediaController.saveFile(path, getParentActivity(), 1, null);
             } else if (selectedObject.type == 1) {
                 MediaController.saveFile(path, getParentActivity(), 0, null);
-            } else if (selectedObject.type == 8 || selectedObject.type == 9) {
+            } else if (selectedObject.type == 8 || selectedObject.type == 9 || selectedObject.type == 14) {
                 Intent intent = new Intent(Intent.ACTION_SEND);
                 intent.setType(selectedObject.messageOwner.media.document.mime_type);
                 intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(path)));
@@ -4837,7 +4914,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             }
         } else if (option == 6 || option == 7) {
-            String fileName = selectedObject.getFileName();
             String path = selectedObject.messageOwner.attachPath;
             if (path != null && path.length() > 0) {
                 File temp = new File(path);
@@ -4848,7 +4924,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             if (path == null || path.length() == 0) {
                 path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
             }
-            if (selectedObject.type == 8 || selectedObject.type == 9) {
+            if (selectedObject.type == 8 || selectedObject.type == 9 || selectedObject.type == 14) {
                 if (option == 6) {
                     Intent intent = new Intent(Intent.ACTION_SEND);
                     intent.setType(selectedObject.messageOwner.media.document.mime_type);
@@ -4877,13 +4953,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
             if (path == null || path.length() == 0) {
                 path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
             }
-            MediaController.saveFile(path, getParentActivity(), 2, fileName);
+            MediaController.saveFile(path, getParentActivity(), selectedObject.isMusic() ? 3 : 2, fileName);
         }
         selectedObject = null;
     }
 
     @Override
-    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
+    public void didSelectDialog(DialogsActivity activity, long did, boolean param) {
         if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
             ArrayList<MessageObject> fmessages = new ArrayList<>();
             if (forwaringMessage != null) {
@@ -4961,7 +5037,7 @@ public boolean onBackPressed() {
 
     public boolean isGoogleMapsInstalled() {
         try {
-            ApplicationInfo info = ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
+            ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
             return true;
         } catch (PackageManager.NameNotFoundException e) {
             if (getParentActivity() == null) {
@@ -5213,7 +5289,7 @@ public void didPressUrl(String url) {
                         if (url.startsWith("@")) {
                             MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
                         } else if (url.startsWith("#")) {
-                            MessagesActivity fragment = new MessagesActivity(null);
+                            DialogsActivity fragment = new DialogsActivity(null);
                             fragment.setSearchString(url);
                             presentFragment(fragment);
                         } else if (url.startsWith("/")) {
@@ -5221,6 +5297,8 @@ public void didPressUrl(String url) {
                         }
                     }
                 });
+            } else if (viewType == 8) {
+                view = new ChatMusicCell(mContext);
             }
 
             if (view instanceof ChatBaseCell) {
@@ -5261,7 +5339,7 @@ public void didPressUrl(MessageObject messageObject, String url) {
                         if (url.startsWith("@")) {
                             MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
                         } else if (url.startsWith("#")) {
-                            MessagesActivity fragment = new MessagesActivity(null);
+                            DialogsActivity fragment = new DialogsActivity(null);
                             fragment.setSearchString(url);
                             presentFragment(fragment);
                         } else if (url.startsWith("/")) {
@@ -5273,7 +5351,7 @@ public void didPressUrl(MessageObject messageObject, String url) {
                     public void needOpenWebView(String url, String title, String originalUrl, int w, int h) {
                         BottomSheet.Builder builder = new BottomSheet.Builder(mContext);
                         builder.setCustomView(new WebFrameLayout(mContext, builder.create(), title, originalUrl, url, w, h));
-                        builder.setOverrideTabletWidth(true);
+                        builder.setUseFullWidth(true);
                         showDialog(builder.create());
                     }
 
@@ -5434,6 +5512,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             showDialog(builder.create());
                         }
                     });
+                } else if (view instanceof ChatMusicCell) {
+                    ((ChatMusicCell) view).setMusicDelegate(new ChatMusicCell.ChatMusicCellDelegate() {
+                        @Override
+                        public boolean needPlayMusic(MessageObject messageObject) {
+                            return MediaController.getInstance().setPlaylist(messages, messageObject);
+                        }
+                    });
                 }
             } else if (view instanceof ChatActionCell) {
                 ((ChatActionCell) view).setDelegate(new ChatActionCell.ChatActionCellDelegate() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
index cb8164d78..a6d987748 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
@@ -57,7 +57,7 @@ public void setDelegate(BotKeyboardViewDelegate botKeyboardViewDelegate) {
 
     public void setPanelHeight(int height) {
         panelHeight = height;
-        if (isFullSize && botButtons != null) {
+        if (isFullSize && botButtons != null && botButtons.rows.size() != 0) {
             buttonHeight = !isFullSize ? 42 : (int) Math.max(42, (panelHeight - AndroidUtilities.dp(30) - (botButtons.rows.size() - 1) * AndroidUtilities.dp(10)) / botButtons.rows.size() / AndroidUtilities.density);
             int count = container.getChildCount();
             int newHeight = AndroidUtilities.dp(buttonHeight);
@@ -87,7 +87,7 @@ public void setButtons(TLRPC.TL_replyKeyboardMarkup buttons) {
         container.removeAllViews();
         buttonViews.clear();
 
-        if (buttons != null) {
+        if (buttons != null && botButtons.rows.size() != 0) {
             isFullSize = (buttons.flags & 1) == 0;
             buttonHeight = !isFullSize ? 42 : (int) Math.max(42, (panelHeight - AndroidUtilities.dp(30) - (botButtons.rows.size() - 1) * AndroidUtilities.dp(10)) / botButtons.rows.size() / AndroidUtilities.density);
             for (int a = 0; a < buttons.rows.size(); a++) {
@@ -106,7 +106,7 @@ public void setButtons(TLRPC.TL_replyKeyboardMarkup buttons) {
                     textView.setGravity(Gravity.CENTER);
                     textView.setBackgroundResource(R.drawable.bot_keyboard_states);
                     textView.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
-                    textView.setText(Emoji.replaceEmoji(button.text, textView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16)));
+                    textView.setText(Emoji.replaceEmoji(button.text, textView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16), false));
                     layout.addView(textView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, weight, 0, 0, b != row.buttons.size() - 1 ? 10 : 0, 0));
                     textView.setOnClickListener(new OnClickListener() {
                         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 6fc40e4a8..b939a3ec7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -44,6 +44,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
@@ -117,6 +118,7 @@
     private BaseFragment parentFragment;
     private long dialog_id;
     private boolean ignoreTextChange;
+    private int innerTextChange;
     private MessageObject replyingMessageObject;
     private MessageObject botMessageObject;
     private TLRPC.WebPage messageWebPage;
@@ -187,7 +189,16 @@ public void onClick(View view) {
             }
         });
 
-        messageEditText = new EditText(context);
+        messageEditText = new EditText(context) {
+            @Override
+            public boolean onTouchEvent(MotionEvent event) {
+                if (isPopupShowing() && event.getAction() == MotionEvent.ACTION_DOWN) {
+                    showPopup(AndroidUtilities.usingHardwareInput ? 0 : 2, 0);
+                    openKeyboardInternal();
+                }
+                return super.onTouchEvent(event);
+            }
+        };
         messageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
         messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
         messageEditText.setInputType(messageEditText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES | EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE);
@@ -216,14 +227,6 @@ public boolean onKey(View view, int i, KeyEvent keyEvent) {
                 return false;
             }
         });
-        messageEditText.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (isPopupShowing()) {
-                    showPopup(AndroidUtilities.usingHardwareInput ? 0 : 2, 0);
-                }
-            }
-        });
         messageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
             @Override
             public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -240,6 +243,8 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             }
         });
         messageEditText.addTextChangedListener(new TextWatcher() {
+            boolean processChange = false;
+
             @Override
             public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
 
@@ -247,16 +252,20 @@ public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3)
 
             @Override
             public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
-                String message = getTrimmedString(charSequence.toString());
+                if (innerTextChange == 1) {
+                    return;
+                }
                 checkSendButton(true);
-
+                String message = getTrimmedString(charSequence.toString());
                 if (delegate != null) {
                     if (count > 2 || charSequence == null || charSequence.length() == 0) {
                         messageWebPageSearch = true;
                     }
                     delegate.onTextChanged(charSequence, before > count + 1 || (count - before) > 2);
                 }
-
+                if (innerTextChange != 2 && before != count && (count - before) > 1) {
+                    processChange = true;
+                }
                 if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
                     int currentTime = ConnectionsManager.getInstance().getCurrentTime();
                     TLRPC.User currentUser = null;
@@ -275,19 +284,19 @@ public void onTextChanged(CharSequence charSequence, int start, int before, int
 
             @Override
             public void afterTextChanged(Editable editable) {
+                if (innerTextChange != 0) {
+                    return;
+                }
                 if (sendByEnter && editable.length() > 0 && editable.charAt(editable.length() - 1) == '\n') {
                     sendMessage();
                 }
-                int i = 0;
-                ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
-                int j = arrayOfImageSpan.length;
-                while (true) {
-                    if (i >= j) {
-                        Emoji.replaceEmoji(editable, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                        return;
+                if (processChange) {
+                    ImageSpan[] spans = editable.getSpans(0, editable.length(), ImageSpan.class);
+                    for (int i = 0; i < spans.length; i++) {
+                        editable.removeSpan(spans[i]);
                     }
-                    editable.removeSpan(arrayOfImageSpan[i]);
-                    i++;
+                    Emoji.replaceEmoji(editable, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
+                    processChange = false;
                 }
             }
         });
@@ -590,7 +599,7 @@ private void onWindowSizeChanged() {
             delegate.onWindowSizeChanged(size);
         }
         if (topView != null) {
-            if (size < AndroidUtilities.dp(72) + AndroidUtilities.getCurrentActionBarHeight()) {
+            if (size < AndroidUtilities.dp(72) + ActionBar.getCurrentActionBarHeight()) {
                 if (allowShowTopView) {
                     allowShowTopView = false;
                     if (needShowTopView) {
@@ -773,11 +782,7 @@ public void onAnimationEnd(Object animation) {
                         });
                         runningAnimation2.start();
 
-                        if (messageEditText != null) {
-                            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                            layoutParams.rightMargin = AndroidUtilities.dp(0);
-                            messageEditText.setLayoutParams(layoutParams);
-                        }
+                        updateFieldRight(0);
 
                         delegate.onAttachButtonHidden();
                     }
@@ -823,9 +828,7 @@ public void onAnimationEnd(Object animation) {
                         attachButton.setVisibility(View.GONE);
                         attachButton.clearAnimation();
                         delegate.onAttachButtonHidden();
-                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                        layoutParams.rightMargin = AndroidUtilities.dp(0);
-                        messageEditText.setLayoutParams(layoutParams);
+                        updateFieldRight(0);
                     }
                 }
             }
@@ -854,11 +857,7 @@ public void onAnimationEnd(Object animation) {
                     runningAnimation2.setDuration(100);
                     runningAnimation2.start();
 
-                    if (messageEditText != null) {
-                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                        layoutParams.rightMargin = AndroidUtilities.dp(50);
-                        messageEditText.setLayoutParams(layoutParams);
-                    }
+                    updateFieldRight(1);
 
                     delegate.onAttachButtonShow();
                 }
@@ -903,12 +902,35 @@ public void onAnimationEnd(Object animation) {
                 if (attachButton != null) {
                     delegate.onAttachButtonShow();
                     attachButton.setVisibility(View.VISIBLE);
-                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
+                    updateFieldRight(1);
+                }
+            }
+        }
+    }
+
+    private void updateFieldRight(int attachVisible) {
+        if (messageEditText == null) {
+            return;
+        }
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
+        if (attachVisible == 1) {
+            if (botButton != null && botButton.getVisibility() == VISIBLE) {
+                layoutParams.rightMargin = AndroidUtilities.dp(98);
+            } else {
+                layoutParams.rightMargin = AndroidUtilities.dp(50);
+            }
+        } else if (attachVisible == 2) {
+            if (layoutParams.rightMargin != AndroidUtilities.dp(2)) {
+                if (botButton != null && botButton.getVisibility() == VISIBLE) {
+                    layoutParams.rightMargin = AndroidUtilities.dp(98);
+                } else {
                     layoutParams.rightMargin = AndroidUtilities.dp(50);
-                    messageEditText.setLayoutParams(layoutParams);
                 }
             }
+        } else {
+            layoutParams.rightMargin = AndroidUtilities.dp(2);
         }
+        messageEditText.setLayoutParams(layoutParams);
     }
 
     private void updateAudioRecordIntefrace() {
@@ -1108,6 +1130,7 @@ private void updateBotButton() {
         } else {
             botButton.setVisibility(GONE);
         }
+        updateFieldRight(2);
         ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(botButton.getVisibility() == GONE ? 48 : 96));
         attachButton.clearAnimation();
     }
@@ -1209,12 +1232,15 @@ public void onEmojiSelected(String symbol) {
                             i = 0;
                         }
                         try {
-                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                            innerTextChange = 2;
+                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
                             messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
                             int j = i + localCharSequence.length();
                             messageEditText.setSelection(j, j);
                         } catch (Exception e) {
                             FileLog.e("tmessages", e);
+                        } finally {
+                            innerTextChange = 0;
                         }
                     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
index 461e32f9b..3b175e09a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
@@ -8,8 +8,11 @@
 
 package org.telegram.ui.Components;
 
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.os.Build;
 import android.text.TextUtils;
@@ -18,6 +21,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -25,14 +29,16 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.messenger.R;
 import org.telegram.ui.Adapters.PhotoAttachAdapter;
 import org.telegram.ui.ChatActivity;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 
-public class ChatAttachView extends FrameLayout {
+public class ChatAttachView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
 
     public interface ChatAttachViewDelegate {
         void didPressedButton(int button);
@@ -42,7 +48,16 @@
     private PhotoAttachAdapter photoAttachAdapter;
     private ChatActivity baseFragment;
     private AttachButton sendPhotosButton;
-    private AttachButton buttons[] = new AttachButton[8];
+    private View views[] = new View[20];
+    private RecyclerListView attachPhotoRecyclerView;
+    private View lineView;
+    private EmptyTextProgressView progressView;
+
+    private float[] distCache = new float[20];
+
+    private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
+
+    private boolean loading;
 
     private ChatAttachViewDelegate delegate;
 
@@ -56,7 +71,6 @@ public AttachButton(Context context) {
 
             imageView = new ImageView(context);
             imageView.setScaleType(ImageView.ScaleType.CENTER);
-            //imageView.setColorFilter(0x33000000);
             addView(imageView, LayoutHelper.createFrame(64, 64, Gravity.CENTER_HORIZONTAL | Gravity.TOP));
 
             textView = new TextView(context);
@@ -83,10 +97,15 @@ public void setTextAndIcon(CharSequence text, int icon) {
     public ChatAttachView(Context context) {
         super(context);
 
-        RecyclerListView attachPhotoRecyclerView = new RecyclerListView(context);
-        if (photoAttachAdapter != null) {
-            photoAttachAdapter.onDestroy();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.albumsDidLoaded);
+        if (MediaController.allPhotosAlbumEntry == null) {
+            if (Build.VERSION.SDK_INT >= 21) {
+                MediaController.loadGalleryPhotosAlbums(0);
+            }
+            loading = true;
         }
+
+        views[8] = attachPhotoRecyclerView = new RecyclerListView(context);
         attachPhotoRecyclerView.setVerticalScrollBarEnabled(true);
         attachPhotoRecyclerView.setAdapter(photoAttachAdapter = new PhotoAttachAdapter(context));
         attachPhotoRecyclerView.setClipToPadding(false);
@@ -112,11 +131,14 @@ public void selectedPhotosChanged() {
             }
         });
 
-        View lineView = new View(getContext());
+        views[9] = progressView = new EmptyTextProgressView(context);
+        progressView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
+        addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 80));
+        attachPhotoRecyclerView.setEmptyView(progressView);
+
+        views[10] = lineView = new View(getContext());
         lineView.setBackgroundColor(0xffd2d2d2);
-        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1, Gravity.TOP | Gravity.LEFT);
-        layoutParams.topMargin = AndroidUtilities.dp(88);
-        addView(lineView, layoutParams);
+        addView(lineView, new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1, Gravity.TOP | Gravity.LEFT));
         CharSequence[] items = new CharSequence[]{
                 LocaleController.getString("ChatCamera", R.string.ChatCamera),
                 LocaleController.getString("ChatGallery", R.string.ChatGallery),
@@ -128,23 +150,21 @@ public void selectedPhotosChanged() {
                 ""
         };
         int itemIcons[] = new int[] {
-                R.drawable.ic_attach_photo_big,
-                R.drawable.ic_attach_gallery_big,
-                R.drawable.ic_attach_video_big,
-                R.drawable.ic_attach_music_big,
-                R.drawable.ic_attach_file_big,
-                R.drawable.ic_attach_contact_big,
-                R.drawable.ic_attach_location_big,
-                R.drawable.ic_attach_hide_big,
+                R.drawable.attach_camera_states,
+                R.drawable.attach_gallery_states,
+                R.drawable.attach_video_states,
+                R.drawable.attach_audio_states,
+                R.drawable.attach_file_states,
+                R.drawable.attach_contact_states,
+                R.drawable.attach_location_states,
+                R.drawable.attach_hide_states,
         };
         for (int a = 0; a < 8; a++) {
             AttachButton attachButton = new AttachButton(context);
             attachButton.setTextAndIcon(items[a], itemIcons[a]);
-            int y = 97 + 95 * (a / 4);
-            int x = 10 + (a % 4) * 85;
-            addView(attachButton, LayoutHelper.createFrame(85, 90, Gravity.LEFT | Gravity.TOP, x, y, 0, 0));
+            addView(attachButton, LayoutHelper.createFrame(85, 90, Gravity.LEFT | Gravity.TOP));
             attachButton.setTag(a);
-            buttons[a] = attachButton;
+            views[a] = attachButton;
             if (a == 7) {
                 sendPhotosButton = attachButton;
                 sendPhotosButton.imageView.setPadding(0, AndroidUtilities.dp(4), 0, 0);
@@ -164,24 +184,58 @@ public boolean onTouch(View v, MotionEvent event) {
                 return true;
             }
         });
+
+        if (loading) {
+            progressView.showProgress();
+        } else {
+            progressView.showTextView();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.albumsDidLoaded) {
+            if (photoAttachAdapter != null) {
+                loading = false;
+                progressView.showTextView();
+                photoAttachAdapter.notifyDataSetChanged();
+            }
+        }
     }
 
     @Override
     protected void onMeasure(int widthSpec, int heightSpec) {
-        super.onMeasure(widthSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(278), MeasureSpec.EXACTLY));
+        super.onMeasure(widthSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(294), MeasureSpec.EXACTLY));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        int width = right - left;
+
+        int t = AndroidUtilities.dp(8);
+        attachPhotoRecyclerView.layout(0, t, width, t + attachPhotoRecyclerView.getMeasuredHeight());
+        progressView.layout(0, t, width, t + progressView.getMeasuredHeight());
+        lineView.layout(0, AndroidUtilities.dp(96), width, AndroidUtilities.dp(96) + lineView.getMeasuredHeight());
+
+        int diff = (width - AndroidUtilities.dp(85 * 4 + 20)) / 3;
+        for (int a = 0; a < 8; a++) {
+            int y = AndroidUtilities.dp(105 + 95 * (a / 4));
+            int x = AndroidUtilities.dp(10) + (a % 4) * (AndroidUtilities.dp(85) + diff);
+            views[a].layout(x, y, x + views[a].getMeasuredWidth(), y + views[a].getMeasuredHeight());
+        }
     }
 
     public void updatePhotosButton() {
         int count = photoAttachAdapter.getSelectedPhotos().size();
         if (count == 0) {
             sendPhotosButton.imageView.setPadding(0, AndroidUtilities.dp(4), 0, 0);
-            sendPhotosButton.imageView.setBackgroundResource(R.drawable.ic_attach_hide_big);
-            sendPhotosButton.imageView.setImageResource(R.drawable.ic_attach_hide_big_icon);
+            sendPhotosButton.imageView.setBackgroundResource(R.drawable.attach_hide_states);
+            sendPhotosButton.imageView.setImageResource(R.drawable.attach_hide2);
             sendPhotosButton.textView.setText("");
         } else {
             sendPhotosButton.imageView.setPadding(AndroidUtilities.dp(2), 0, 0, 0);
-            sendPhotosButton.imageView.setBackgroundResource(R.drawable.ic_attach_send_big);
-            sendPhotosButton.imageView.setImageResource(R.drawable.ic_attach_send_big_icon);
+            sendPhotosButton.imageView.setBackgroundResource(R.drawable.attach_send_states);
+            sendPhotosButton.imageView.setImageResource(R.drawable.attach_send2);
             sendPhotosButton.textView.setText(LocaleController.formatString("SendItems", R.string.SendItems, String.format("(%d)", count)));
         }
     }
@@ -190,22 +244,83 @@ public void setDelegate(ChatAttachViewDelegate chatAttachViewDelegate) {
         delegate = chatAttachViewDelegate;
     }
 
-    public void startAnimations(boolean up) {
-        for (int a = 0; a < 4; a++) {
-            //buttons[a].setTranslationY(AndroidUtilities.dp(up ? 20 : -20));
-            //buttons[a + 4].setTranslationY(AndroidUtilities.dp(up ? 20 : -20));
-            buttons[a].setScaleX(0.8f);
-            buttons[a].setScaleY(0.8f);
-            buttons[a + 4].setScaleX(0.8f);
-            buttons[a + 4].setScaleY(0.8f);
-            AnimatorSet animatorSet = new AnimatorSet();
-            animatorSet.playTogether(ObjectAnimator.ofFloat(buttons[a], "scaleX", 1),
-                    ObjectAnimator.ofFloat(buttons[a + 4], "scaleX", 1),
-                    ObjectAnimator.ofFloat(buttons[a], "scaleY", 1),
-                    ObjectAnimator.ofFloat(buttons[a + 4], "scaleY", 1));
-            animatorSet.setDuration(150);
-            animatorSet.setStartDelay((3 - a) * 40);
-            animatorSet.start();
+    public void onRevealAnimationEnd(boolean open) {
+        if (open && Build.VERSION.SDK_INT <= 19 && MediaController.allPhotosAlbumEntry == null) {
+            MediaController.loadGalleryPhotosAlbums(0);
+        }
+    }
+
+    @SuppressLint("NewApi")
+    public void onRevealAnimationStart(boolean open) {
+        if (!open) {
+            return;
+        }
+        int count = Build.VERSION.SDK_INT <= 19 ? 11 : 8;
+        for (int a = 0; a < count; a++) {
+            if (Build.VERSION.SDK_INT <= 19) {
+                if (a < 8) {
+                    views[a].setScaleX(0.1f);
+                    views[a].setScaleY(0.1f);
+                }
+                views[a].setAlpha(0.0f);
+            } else {
+                views[a].setScaleX(0.7f);
+                views[a].setScaleY(0.7f);
+            }
+            views[a].setTag(R.string.AppName, null);
+            distCache[a] = 0;
+        }
+    }
+
+    @SuppressLint("NewApi")
+    public void onRevealAnimationProgress(boolean open, float radius, int x, int y) {
+        if (!open) {
+            return;
+        }
+        int count = Build.VERSION.SDK_INT <= 19 ? 11 : 8;
+        for (int a = 0; a < count; a++) {
+            if (views[a].getTag(R.string.AppName) == null) {
+                if (distCache[a] == 0) {
+                    int buttonX = views[a].getLeft() + views[a].getMeasuredWidth() / 2;
+                    int buttonY = views[a].getTop() + views[a].getMeasuredHeight() / 2;
+                    distCache[a] = (float) Math.sqrt((x - buttonX) * (x - buttonX) + (y - buttonY) * (y - buttonY));
+                    float vecX = (x - buttonX) / distCache[a];
+                    float vecY = (y - buttonY) / distCache[a];
+                    views[a].setPivotX(views[a].getMeasuredWidth() / 2 + vecX * AndroidUtilities.dp(20));
+                    views[a].setPivotY(views[a].getMeasuredHeight() / 2 + vecY * AndroidUtilities.dp(20));
+                }
+                if (distCache[a] > radius + AndroidUtilities.dp(27)) {
+                    continue;
+                }
+
+                views[a].setTag(R.string.AppName, 1);
+                final ArrayList<Animator> animators = new ArrayList<>();
+                final ArrayList<Animator> animators2 = new ArrayList<>();
+                if (a < 8) {
+                    animators.add(ObjectAnimator.ofFloat(views[a], "scaleX", 0.7f, 1.05f));
+                    animators.add(ObjectAnimator.ofFloat(views[a], "scaleY", 0.7f, 1.05f));
+                    animators2.add(ObjectAnimator.ofFloat(views[a], "scaleX", 1.0f));
+                    animators2.add(ObjectAnimator.ofFloat(views[a], "scaleY", 1.0f));
+                }
+                if (Build.VERSION.SDK_INT <= 19) {
+                    animators.add(ObjectAnimator.ofFloat(views[a], "alpha", 1.0f));
+                }
+                AnimatorSet animatorSet = new AnimatorSet();
+                animatorSet.playTogether(animators);
+                animatorSet.setDuration(150);
+                animatorSet.setInterpolator(decelerateInterpolator);
+                animatorSet.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        AnimatorSet animatorSet = new AnimatorSet();
+                        animatorSet.playTogether(animators2);
+                        animatorSet.setDuration(100);
+                        animatorSet.setInterpolator(decelerateInterpolator);
+                        animatorSet.start();
+                    }
+                });
+                animatorSet.start();
+            }
         }
     }
 
@@ -221,7 +336,7 @@ public void init(ChatActivity parentFragment) {
     }
 
     public void onDestroy() {
-        photoAttachAdapter.onDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.albumsDidLoaded);
         baseFragment = null;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/DrawerPlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/DrawerPlayerView.java
new file mode 100644
index 000000000..3e39df2e0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/DrawerPlayerView.java
@@ -0,0 +1,130 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.R;
+
+public class DrawerPlayerView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
+
+    private ImageView playButton;
+    private TextView titleTextView;
+    private ListView parentListView;
+    private MessageObject lastMessageObject;
+
+    public DrawerPlayerView(Context context, ListView listView) {
+        super(context);
+        parentListView = listView;
+
+        View shadow = new View(context);
+        shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
+        addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3));
+
+        FrameLayout frameLayout = new FrameLayout(context);
+        frameLayout.setBackgroundColor(0xffffffff);
+        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 3, 0, 0));
+
+        playButton = new ImageView(context);
+        playButton.setScaleType(ImageView.ScaleType.CENTER);
+        addView(playButton, LayoutHelper.createFrame(48, 48, Gravity.TOP | Gravity.LEFT, 2, 3, 0, 0));
+        playButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (MediaController.getInstance().isAudioPaused()) {
+                    MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
+                } else {
+                    MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
+                }
+            }
+        });
+
+        titleTextView = new TextView(context);
+        titleTextView.setTextColor(0xff15a5ed);
+        titleTextView.setMaxLines(1);
+        titleTextView.setLines(1);
+        titleTextView.setSingleLine(true);
+        titleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        titleTextView.setGravity(Gravity.CENTER_VERTICAL);
+        addView(titleTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.TOP, 72, 3, 8, 0));
+
+        checkPlayer();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioPlayStateChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioPlayStateChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, AndroidUtilities.dp(51));
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.audioDidStarted || id == NotificationCenter.audioPlayStateChanged || id == NotificationCenter.audioDidReset) {
+            checkPlayer();
+        }
+    }
+
+    private void checkPlayer() {
+        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
+        if (messageObject == null || !messageObject.isMusic()) {
+            lastMessageObject = null;
+            if (getVisibility() != GONE) {
+                setVisibility(GONE);
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) parentListView.getLayoutParams();
+                layoutParams.bottomMargin = 0;
+                parentListView.setLayoutParams(layoutParams);
+            }
+        } else {
+            if (getVisibility() != VISIBLE) {
+                setVisibility(VISIBLE);
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) parentListView.getLayoutParams();
+                layoutParams.bottomMargin = AndroidUtilities.dp(48);
+                parentListView.setLayoutParams(layoutParams);
+            }
+            if (MediaController.getInstance().isAudioPaused()) {
+                playButton.setImageResource(R.drawable.menu_play);
+            } else {
+                playButton.setImageResource(R.drawable.menu_pause);
+            }
+            if (lastMessageObject != messageObject) {
+                lastMessageObject = messageObject;
+                titleTextView.setText(String.format("%s - %s", messageObject.getMusicAuthor(), messageObject.getMusicTitle()));
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 076a91869..683ad8e31 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -196,6 +196,7 @@ public boolean onTouchEvent(MotionEvent ev) {
             scrollSlidingTabStrip.setUnderlineHeight(AndroidUtilities.dp(1));
             scrollSlidingTabStrip.setIndicatorColor(0xffe2e5e7);
             scrollSlidingTabStrip.setUnderlineColor(0xffe2e5e7);
+            scrollSlidingTabStrip.setVisibility(INVISIBLE);
             addView(scrollSlidingTabStrip, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.TOP));
             ViewProxy.setTranslationX(scrollSlidingTabStrip, AndroidUtilities.displaySize.x);
             updateStickerTabs();
@@ -360,6 +361,7 @@ private void onPageScrolled(int position, int width, int positionOffsetPixels) {
         if (ViewProxy.getTranslationX(pagerSlidingTabStripContainer) != margin) {
             ViewProxy.setTranslationX(pagerSlidingTabStripContainer, margin);
             ViewProxy.setTranslationX(scrollSlidingTabStrip, width + margin);
+            scrollSlidingTabStrip.setVisibility(margin < 0 ? VISIBLE : INVISIBLE);
             if (Build.VERSION.SDK_INT < 11) {
                 if (margin <= -width) {
                     pagerSlidingTabStripContainer.clearAnimation();
@@ -449,7 +451,7 @@ private void saveRecentStickers() {
             stringBuilder.append("=");
             stringBuilder.append(entry.getValue());
         }
-        getContext().getSharedPreferences("emoji", 0).edit().putString("stickers", stringBuilder.toString()).commit();
+        preferences.edit().putString("stickers", stringBuilder.toString()).commit();
     }
 
     private void sortStickers() {
@@ -565,10 +567,12 @@ public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         layoutParams.width = View.MeasureSpec.getSize(widthMeasureSpec);
         if (scrollSlidingTabStrip != null) {
             layoutParams1 = (FrameLayout.LayoutParams) scrollSlidingTabStrip.getLayoutParams();
-            layoutParams1.width = layoutParams.width;
+            if (layoutParams1 != null) {
+                layoutParams1.width = layoutParams.width;
+            }
         }
         if (layoutParams.width != oldWidth) {
-            if (scrollSlidingTabStrip != null) {
+            if (scrollSlidingTabStrip != null && layoutParams1 != null) {
                 onPageScrolled(pager.getCurrentItem(), layoutParams.width, 0);
                 scrollSlidingTabStrip.setLayoutParams(layoutParams1);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
index 0e38769e6..3bd67919d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
@@ -17,6 +17,7 @@
 import android.widget.ProgressBar;
 import android.widget.TextView;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 
@@ -39,6 +40,7 @@ public EmptyTextProgressView(Context context) {
         textView.setTextColor(0xff808080);
         textView.setGravity(Gravity.CENTER);
         textView.setVisibility(INVISIBLE);
+        textView.setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
         textView.setText(LocaleController.getString("NoResult", R.string.NoResult));
         addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
 
@@ -81,7 +83,6 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 continue;
             }
 
-            LayoutParams lp = (LayoutParams) child.getLayoutParams();
             int x = (width - child.getMeasuredWidth()) / 2;
             int y;
             if (showAtCenter) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java
index aedc5bcd6..9ac490ad4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java
@@ -113,7 +113,7 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
                     header.setTag(-header.getHeight());
                 } else if (pos == count - 2) {
                     View child = getChildAt(itemNum - firstVisibleItem);
-                    int headerTop = 0;
+                    int headerTop;
                     if (child != null) {
                         headerTop = child.getTop();
                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java
index 60c2522eb..74f4168a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java
@@ -25,6 +25,9 @@
     private float animatedProgressValue = 0;
     private float animatedAlphaValue = 1.0f;
 
+    private int backColor;
+    private int progressColor = 0xff36a2ee;
+
     private static DecelerateInterpolator decelerateInterpolator = null;
     private static Paint progressPaint = null;
 
@@ -37,7 +40,6 @@ public LineProgressView(Context context) {
             progressPaint.setStyle(Paint.Style.STROKE);
             progressPaint.setStrokeCap(Paint.Cap.ROUND);
             progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
-            progressPaint.setColor(0xff36a2ee);
         }
     }
 
@@ -70,7 +72,11 @@ private void updateAnimation() {
     }
 
     public void setProgressColor(int color) {
-        progressPaint.setColor(color);
+        progressColor = color;
+    }
+
+    public void setBackColor(int color) {
+        backColor = color;
     }
 
     public void setProgress(float value, boolean animated) {
@@ -91,6 +97,14 @@ public void setProgress(float value, boolean animated) {
     }
 
     public void onDraw(Canvas canvas) {
+        if (backColor != 0 && animatedProgressValue != 1) {
+            progressPaint.setColor(backColor);
+            progressPaint.setAlpha((int) (255 * animatedAlphaValue));
+            int start = (int) (getWidth() * animatedProgressValue);
+            canvas.drawRect(start, 0, getWidth(), getHeight(), progressPaint);
+        }
+
+        progressPaint.setColor(progressColor);
         progressPaint.setAlpha((int)(255 * animatedAlphaValue));
         canvas.drawRect(0, 0, getWidth() * animatedProgressValue, getHeight(), progressPaint);
         updateAnimation();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
index e87f71c0c..10b9309ae 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
@@ -533,7 +533,6 @@ private void tryComputeMaxWidth() {
             }
             maxTextWidth = (int) (numberOfDigits * maxDigitWidth);
         } else {
-            final int valueCount = mDisplayedValues.length;
             for (String mDisplayedValue : mDisplayedValues) {
                 final float textWidth = mSelectorWheelPaint.measureText(mDisplayedValue);
                 if (textWidth > maxTextWidth) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
index 6321efc63..b4d408792 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
@@ -15,7 +15,6 @@
 import android.os.Build;
 import android.support.v4.view.ViewPager;
 import android.support.v4.view.ViewPager.OnPageChangeListener;
-import android.util.DisplayMetrics;
 import android.view.View;
 import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 import android.widget.FrameLayout;
@@ -70,8 +69,6 @@ public PagerSlidingTabStrip(Context context) {
         tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         addView(tabsContainer);
 
-        DisplayMetrics dm = getResources().getDisplayMetrics();
-
         rectPaint = new Paint();
         rectPaint.setAntiAlias(true);
         rectPaint.setStyle(Style.FILL);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index 22f7a4326..1834f9cf4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -671,7 +671,6 @@ public boolean onLongClick(View v) {
                 @Override
                 public void onClick(View v) {
                     int tag = (Integer) v.getTag();
-                    int key = KeyEvent.KEYCODE_DEL;
                     switch (tag) {
                         case 0:
                             passwordEditText2.appendCharacter("0");
@@ -845,7 +844,6 @@ public void onShow() {
         }
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         int selectedBackground = preferences.getInt("selectedBackground", 1000001);
-        boolean customTheme = false;
         if (selectedBackground == 1000001) {
             backgroundFrameLayout.setBackgroundColor(0xff517c9e);
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index ced235b6a..d2de9216e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -11,9 +11,7 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.graphics.Canvas;
 import android.graphics.Matrix;
-import android.graphics.Paint;
 import android.graphics.SurfaceTexture;
 import android.opengl.GLES20;
 import android.opengl.GLUtils;
@@ -1205,28 +1203,29 @@ public void run() {
         }
 
         private Bitmap createBitmap(Bitmap bitmap, int w, int h, float scale) {
-            Bitmap result = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
-            Canvas canvas = new Canvas(result);
-            Paint paint = new Paint();
-            paint.setFilterBitmap(true);
+            //Bitmap result = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
+            //Canvas canvas = new Canvas(result);
+            //Paint paint = new Paint();
+            //paint.setFilterBitmap(true);
 
             Matrix matrix = new Matrix();
             matrix.setScale(scale, scale);
-            matrix.postTranslate(-bitmap.getWidth() / 2, -bitmap.getHeight() / 2);
+            //matrix.postTranslate(-bitmap.getWidth() / 2, -bitmap.getHeight() / 2);
             matrix.postRotate(orientation);
-            if (orientation == 90 || orientation == 270) {
+            /*if (orientation == 90 || orientation == 270) {
                 matrix.postTranslate(bitmap.getHeight() / 2, bitmap.getWidth() / 2);
             } else {
                 matrix.postTranslate(bitmap.getWidth() / 2, bitmap.getHeight() / 2);
-            }
-            canvas.drawBitmap(bitmap, matrix, paint);
-            try {
-                canvas.setBitmap(null);
-            } catch (Exception e) {
+            }*/
+            //canvas.drawBitmap(bitmap, matrix, paint);
+            //try {
+            //    canvas.setBitmap(null);
+            //} catch (Exception e) {
                 //don't promt, this will crash on 2.x
-            }
+            //}
+            return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
 
-            return result;
+            //return result;
         }
 
         private void loadTexture(Bitmap bitmap) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
index fcff6ef23..4f0051ce5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
@@ -62,6 +62,8 @@
     private boolean keyboardVisible;
     private int emojiPadding;
 
+    private boolean innerTextChange;
+
     private PhotoViewerCaptionEnterViewDelegate delegate;
 
     public PhotoViewerCaptionEnterView(Context context, SizeNotifierFrameLayoutPhoto parent) {
@@ -149,6 +151,8 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             }
         });
         messageEditText.addTextChangedListener(new TextWatcher() {
+            boolean processChange = false;
+
             @Override
             public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
 
@@ -156,23 +160,31 @@ public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3)
 
             @Override
             public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
+                if (innerTextChange) {
+                    return;
+                }
+
                 if (delegate != null) {
                     delegate.onTextChanged(charSequence);
                 }
+
+                if (before != count && (count - before) > 1) {
+                    processChange = true;
+                }
             }
 
             @Override
             public void afterTextChanged(Editable editable) {
-                int i = 0;
-                ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
-                int j = arrayOfImageSpan.length;
-                while (true) {
-                    if (i >= j) {
-                        Emoji.replaceEmoji(editable, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                        return;
+                if (innerTextChange) {
+                    return;
+                }
+                if (processChange) {
+                    ImageSpan[] spans = editable.getSpans(0, editable.length(), ImageSpan.class);
+                    for (int i = 0; i < spans.length; i++) {
+                        editable.removeSpan(spans[i]);
                     }
-                    editable.removeSpan(arrayOfImageSpan[i]);
-                    i++;
+                    Emoji.replaceEmoji(editable, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
+                    processChange = false;
                 }
             }
         });
@@ -299,12 +311,15 @@ public void onEmojiSelected(String symbol) {
                             i = 0;
                         }
                         try {
-                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                            innerTextChange = true;
+                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
                             messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
                             int j = i + localCharSequence.length();
                             messageEditText.setSelection(j, j);
                         } catch (Exception e) {
                             FileLog.e("tmessages", e);
+                        } finally {
+                            innerTextChange = false;
                         }
                     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPickerBottomLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
similarity index 81%
rename from TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPickerBottomLayout.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
index 67c72c127..657566273 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPickerBottomLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
@@ -20,22 +20,30 @@
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 
-public class PhotoPickerBottomLayout extends FrameLayout {
+public class PickerBottomLayout extends FrameLayout {
 
     public LinearLayout doneButton;
     public TextView cancelButton;
     public TextView doneButtonTextView;
     public TextView doneButtonBadgeTextView;
 
-    public PhotoPickerBottomLayout(Context context) {
+    private boolean isDarkTheme;
+
+    public PickerBottomLayout(Context context) {
+        this(context, true);
+    }
+
+    public PickerBottomLayout(Context context, boolean darkTheme) {
         super(context);
-        setBackgroundColor(0xff1a1a1a);
+        isDarkTheme = darkTheme;
+
+        setBackgroundColor(isDarkTheme ? 0xff1a1a1a : 0xffffffff);
 
         cancelButton = new TextView(context);
         cancelButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        cancelButton.setTextColor(0xffffffff);
+        cancelButton.setTextColor(isDarkTheme ? 0xffffffff : 0xff19a7e8);
         cancelButton.setGravity(Gravity.CENTER);
-        cancelButton.setBackgroundResource(R.drawable.bar_selector_picker);
+        cancelButton.setBackgroundResource(isDarkTheme ? R.drawable.bar_selector_picker : R.drawable.bar_selector_audio);
         cancelButton.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
         cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -48,7 +56,7 @@ public PhotoPickerBottomLayout(Context context) {
 
         doneButton = new LinearLayout(context);
         doneButton.setOrientation(LinearLayout.HORIZONTAL);
-        doneButton.setBackgroundResource(R.drawable.bar_selector_picker);
+        doneButton.setBackgroundResource(isDarkTheme ? R.drawable.bar_selector_picker : R.drawable.bar_selector_audio);
         doneButton.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         addView(doneButton);
         layoutParams = (LayoutParams) doneButton.getLayoutParams();
@@ -62,7 +70,7 @@ public PhotoPickerBottomLayout(Context context) {
         doneButtonBadgeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
         doneButtonBadgeTextView.setTextColor(0xffffffff);
         doneButtonBadgeTextView.setGravity(Gravity.CENTER);
-        doneButtonBadgeTextView.setBackgroundResource(R.drawable.photobadge);
+        doneButtonBadgeTextView.setBackgroundResource(isDarkTheme ? R.drawable.photobadge : R.drawable.bluecounter);
         doneButtonBadgeTextView.setMinWidth(AndroidUtilities.dp(23));
         doneButtonBadgeTextView.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), AndroidUtilities.dp(1));
         doneButton.addView(doneButtonBadgeTextView);
@@ -75,7 +83,7 @@ public PhotoPickerBottomLayout(Context context) {
 
         doneButtonTextView = new TextView(context);
         doneButtonTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        doneButtonTextView.setTextColor(0xffffffff);
+        doneButtonTextView.setTextColor(isDarkTheme ? 0xffffffff : 0xff19a7e8);
         doneButtonTextView.setGravity(Gravity.CENTER);
         doneButtonTextView.setCompoundDrawablePadding(AndroidUtilities.dp(8));
         doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
@@ -96,18 +104,16 @@ public void updateSelectedCount(int count, boolean disable) {
                 doneButtonTextView.setTextColor(0xff999999);
                 doneButton.setEnabled(false);
             } else {
-                doneButtonTextView.setTextColor(0xffffffff);
+                doneButtonTextView.setTextColor(isDarkTheme ? 0xffffffff : 0xff19a7e8);
             }
         } else {
             doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             doneButtonBadgeTextView.setVisibility(View.VISIBLE);
             doneButtonBadgeTextView.setText(String.format("%d", count));
 
+            doneButtonTextView.setTextColor(isDarkTheme ? 0xffffffff : 0xff19a7e8);
             if (disable) {
-                doneButtonTextView.setTextColor(0xffffffff);
                 doneButton.setEnabled(true);
-            } else {
-                doneButtonTextView.setTextColor(0xffffffff);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
index c6f7bb038..d145ca2f6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
@@ -90,11 +90,6 @@ public PopupAudioView(Context context) {
 
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject) {
-            int uid = messageObject.messageOwner.media.audio.user_id;
-            if (uid == 0) {
-                uid = messageObject.messageOwner.from_id;
-            }
-
             seekBar.type = 1;
             progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
 
@@ -269,7 +264,7 @@ public void updateProgress() {
             seekBar.setProgress(currentMessageObject.audioProgress);
         }
 
-        int duration = 0;
+        int duration;
         if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
             duration = currentMessageObject.messageOwner.media.audio.duration;
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
index af86334cd..8826b64a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
@@ -35,6 +35,7 @@
     private Drawable currentDrawable;
     private Drawable previousDrawable;
     private boolean hideCurrentDrawable;
+    private int progressColor = 0xffffffff;
 
     private static DecelerateInterpolator decelerateInterpolator = null;
     private static Paint progressPaint = null;
@@ -46,7 +47,6 @@ public RadialProgress(View parentView) {
             progressPaint.setStyle(Paint.Style.STROKE);
             progressPaint.setStrokeCap(Paint.Cap.ROUND);
             progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
-            progressPaint.setColor(0xffffffff);
         }
         parent = parentView;
     }
@@ -86,7 +86,7 @@ private void updateAnimation() {
     }
 
     public void setProgressColor(int color) {
-        progressPaint.setColor(color);
+        progressColor = color;
     }
 
     public void setHideCurrentDrawable(boolean value) {
@@ -154,6 +154,7 @@ public void onDraw(Canvas canvas) {
 
         if (currentWithRound || previousWithRound) {
             int diff = AndroidUtilities.dp(1);
+            progressPaint.setColor(progressColor);
             if (previousWithRound) {
                 progressPaint.setAlpha((int)(255 * animatedAlphaValue));
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
index b356c7196..f503341e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
@@ -161,6 +161,11 @@ public void run() {
         public void onTouchEvent(RecyclerView view, MotionEvent e) {
 
         }
+
+        @Override
+        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+
+        }
     }
 
     private AdapterDataObserver observer = new AdapterDataObserver() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
index a5b56b4d3..9b4ce1c41 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
@@ -12,7 +12,6 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Paint.Style;
-import android.util.DisplayMetrics;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -61,8 +60,6 @@ public ScrollSlidingTabStrip(Context context) {
         tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         addView(tabsContainer);
 
-        DisplayMetrics dm = getResources().getDisplayMetrics();
-
         rectPaint = new Paint();
         rectPaint.setAntiAlias(true);
         rectPaint.setStyle(Style.FILL);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
index bc15136a0..727b3bacb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
@@ -11,11 +11,9 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
 import android.view.MotionEvent;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
 
 public class SeekBar {
 
@@ -23,14 +21,10 @@
         void onSeekBarDrag(float progress);
     }
 
-    private static Drawable thumbDrawable1;
-    private static Drawable thumbDrawablePressed1;
-    private static Drawable thumbDrawable2;
-    private static Drawable thumbDrawablePressed2;
-    private static Paint innerPaint1 = new Paint();
-    private static Paint outerPaint1 = new Paint();
-    private static Paint innerPaint2 = new Paint();
-    private static Paint outerPaint2 = new Paint();
+    private static Paint innerPaint1;
+    private static Paint outerPaint1;
+    private static Paint innerPaint2;
+    private static Paint outerPaint2;
     private static int thumbWidth;
     private static int thumbHeight;
     public int type;
@@ -42,17 +36,21 @@
     public SeekBarDelegate delegate;
 
     public SeekBar(Context context) {
-        if (thumbDrawable1 == null) {
-            thumbDrawable1 = context.getResources().getDrawable(R.drawable.player1);
-            thumbDrawablePressed1 = context.getResources().getDrawable(R.drawable.player1_pressed);
-            thumbDrawable2 = context.getResources().getDrawable(R.drawable.player2);
-            thumbDrawablePressed2 = context.getResources().getDrawable(R.drawable.player2_pressed);
-            innerPaint1.setColor(0xffb4e396);
-            outerPaint1.setColor(0xff6ac453);
-            innerPaint2.setColor(0xffd9e2eb);
-            outerPaint2.setColor(0xff86c5f8);
-            thumbWidth = thumbDrawable1.getIntrinsicWidth();
-            thumbHeight = thumbDrawable1.getIntrinsicHeight();
+        if (innerPaint1 == null) {
+            innerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            innerPaint1.setColor(0xffc3e3ab);
+
+            outerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            outerPaint1.setColor(0xff87bf78);
+
+            innerPaint2 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            innerPaint2.setColor(0xffe4eaf0);
+
+            outerPaint2 = new Paint(Paint.ANTI_ALIAS_FLAG);
+            outerPaint2.setColor(0xff4195e5);
+
+            thumbWidth = AndroidUtilities.dp(24);
+            thumbHeight = AndroidUtilities.dp(24);
         }
     }
 
@@ -100,30 +98,18 @@ public boolean isDragging() {
     }
 
     public void draw(Canvas canvas) {
-        Drawable thumb = null;
         Paint inner = null;
         Paint outer = null;
         if (type == 0) {
-            if (!pressed) {
-                thumb = thumbDrawable1;
-            } else {
-                thumb = thumbDrawablePressed1;
-            }
             inner = innerPaint1;
             outer = outerPaint1;
         } else if (type == 1) {
-            if (!pressed) {
-                thumb = thumbDrawable2;
-            } else {
-                thumb = thumbDrawablePressed2;
-            }
             inner = innerPaint2;
             outer = outerPaint2;
         }
         int y = (height - thumbHeight) / 2;
         canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), width - thumbWidth / 2, height / 2 + AndroidUtilities.dp(1), inner);
         canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), thumbWidth / 2 + thumbX, height / 2 + AndroidUtilities.dp(1), outer);
-        thumb.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
-        thumb.draw(canvas);
+        canvas.drawCircle(thumbX + thumbWidth / 2, y + thumbHeight / 2, AndroidUtilities.dp(pressed ? 8 : 6), outer);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SpannableStringLight.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SpannableStringLight.java
new file mode 100644
index 000000000..c64b07616
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SpannableStringLight.java
@@ -0,0 +1,88 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Components;
+
+import android.text.SpannableString;
+
+import org.telegram.messenger.FileLog;
+
+import java.lang.reflect.Field;
+
+public class SpannableStringLight extends SpannableString {
+
+    private static Field mSpansField;
+    private static Field mSpanDataField;
+    private static Field mSpanCountField;
+    private static boolean fieldsAvailable;
+
+    private Object[] mSpansOverride;
+    private int[] mSpanDataOverride;
+    private int mSpanCountOverride;
+    private int num;
+
+    public SpannableStringLight(CharSequence source) {
+        super(source);
+
+        try {
+            mSpansOverride = (Object[]) mSpansField.get(this);
+            mSpanDataOverride = (int[]) mSpanDataField.get(this);
+            mSpanCountOverride = (int) mSpanCountField.get(this);
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public void setSpansCount(int count) {
+        count += mSpanCountOverride;
+        mSpansOverride = new Object[count];
+        mSpanDataOverride = new int[count * 3];
+        num = mSpanCountOverride;
+        mSpanCountOverride = count;
+
+        try {
+            mSpansField.set(this, mSpansOverride);
+            mSpanDataField.set(this, mSpanDataOverride);
+            mSpanCountField.set(this, mSpanCountOverride);
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public static boolean isFieldsAvailable() {
+        if (!fieldsAvailable && mSpansField == null) {
+            try {
+                mSpansField = SpannableString.class.getSuperclass().getDeclaredField("mSpans");
+                mSpansField.setAccessible(true);
+
+                mSpanDataField = SpannableString.class.getSuperclass().getDeclaredField("mSpanData");
+                mSpanDataField.setAccessible(true);
+
+                mSpanCountField = SpannableString.class.getSuperclass().getDeclaredField("mSpanCount");
+                mSpanCountField.setAccessible(true);
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            }
+            fieldsAvailable = true;
+        }
+        return mSpansField != null;
+    }
+
+    public void setSpanLight(Object what, int start, int end, int flags) {
+        mSpansOverride[num] = what;
+        mSpanDataOverride[num * 3] = start;
+        mSpanDataOverride[num * 3 + 1] = end;
+        mSpanDataOverride[num * 3 + 2] = flags;
+        num++;
+    }
+
+    @Override
+    public void removeSpan(Object what) {
+        super.removeSpan(what);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
index fa6740a9d..b57b21894 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
@@ -555,8 +555,6 @@ protected void onDraw(Canvas canvas) {
 
         final int switchTop = mSwitchTop;
         final int switchBottom = mSwitchBottom;
-        final int switchInnerTop = switchTop + padding.top;
-        final int switchInnerBottom = switchBottom - padding.bottom;
 
         final Drawable thumbDrawable = mThumbDrawable;
         if (trackDrawable != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
index 7bfd47999..1aae15996 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
@@ -45,7 +45,7 @@ public TimerDrawable(Context context) {
     public void setTime(int value) {
         time = value;
 
-        String timeString = null;
+        String timeString;
         if (time >= 1 && time < 60) {
             timeString = "" + value;
             if (timeString.length() < 2) {
@@ -91,7 +91,7 @@ public void setTime(int value) {
     public void draw(Canvas canvas) {
         int width = timerDrawable.getIntrinsicWidth();
         int height = timerDrawable.getIntrinsicHeight();
-        Drawable drawable = null;
+        Drawable drawable;
         if (time == 0) {
             drawable = timerDrawable;
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
index d644d7d6d..f26e450f8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
@@ -88,7 +88,7 @@ public void stop() {
 
     @Override
     public void draw(Canvas canvas) {
-        int y = 0;
+        int y;
         if (isChat) {
             y = AndroidUtilities.dp(6);
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
index d562cc6bb..980237dfc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
@@ -202,7 +202,6 @@ protected Bitmap doInBackground(Integer... objects) {
                         int h = (int) (bitmap.getHeight() * scale);
                         Rect srcRect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
                         Rect destRect = new Rect((frameWidth - w) / 2, (frameHeight - h) / 2, w, h);
-                        Paint paint = new Paint();
                         canvas.drawBitmap(bitmap, srcRect, destRect, null);
                         bitmap.recycle();
                         bitmap = result;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
index d794f29db..e42fe5ae4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
@@ -59,6 +59,10 @@ public WebFrameLayout(Context context, BottomSheet parentDialog, String title, S
         openUrl = originalUrl;
         width = w;
         height = h;
+        if (width == 0 || height == 0) {
+            width = AndroidUtilities.displaySize.x;
+            height = AndroidUtilities.displaySize.y / 2;
+        }
         dialog = parentDialog;
 
         fullscreenVideoContainer = new FrameLayout(context);
@@ -211,10 +215,6 @@ public boolean onTouch(View v, MotionEvent event) {
         });
 
         parentDialog.setDelegate(new BottomSheet.BottomSheetDelegate() {
-            @Override
-            public void onOpenAnimationStart() {
-
-            }
 
             @Override
             public void onOpenAnimationEnd() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index c09173f9d..f57e4f9bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -17,7 +17,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
@@ -79,7 +78,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         if (addContact) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 6a6695aeb..88ce8849b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -20,7 +20,6 @@
 import android.text.TextWatcher;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -125,7 +124,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
 
         searching = false;
         searchWas = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 3058d6912..16e710294 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -11,7 +11,6 @@
 import android.content.Context;
 import android.os.Build;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.AbsListView;
@@ -62,7 +61,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
@@ -185,7 +184,7 @@ public boolean onTouch(View v, MotionEvent event) {
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                Country country = null;
+                Country country;
                 if (searching && searchWas) {
                     country = searchListViewAdapter.getItem(i);
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
rename to TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 53ec757da..3362c6714 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -20,7 +20,6 @@
 import android.os.Bundle;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewOutlineProvider;
@@ -67,7 +66,7 @@
 
 import java.util.ArrayList;
 
-public class MessagesActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
@@ -101,10 +100,10 @@
     private MessagesActivityDelegate delegate;
 
     public interface MessagesActivityDelegate {
-        void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
+        void didSelectDialog(DialogsActivity fragment, long dialog_id, boolean param);
     }
 
-    public MessagesActivity(Bundle args) {
+    public DialogsActivity(Bundle args) {
         super(args);
     }
 
@@ -165,7 +164,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(final Context context, LayoutInflater inflater) {
+    public View createView(final Context context) {
         searching = false;
         searchWas = false;
 
@@ -887,7 +886,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             showDialog(builder.create());
         } else {
             if (delegate != null) {
-                delegate.didSelectDialog(MessagesActivity.this, dialog_id, param);
+                delegate.didSelectDialog(DialogsActivity.this, dialog_id, param);
                 delegate = null;
             } else {
                 finishFragment();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 260092182..cee01daf9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -19,7 +19,6 @@
 import android.os.StatFs;
 import android.text.TextUtils;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -126,7 +125,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         if (!receiverRegistered) {
             receiverRegistered = true;
             IntentFilter filter = new IntentFilter();
@@ -194,7 +193,7 @@ public boolean onTouch(View v, MotionEvent event) {
 
         actionModeViews.add(actionMode.addItem(done, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
 
-        fragmentView = inflater.inflate(R.layout.document_select_layout, null, false);
+        fragmentView = getParentActivity().getLayoutInflater().inflate(R.layout.document_select_layout, null, false);
         listAdapter = new ListAdapter(context);
         emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
         emptyView.setOnTouchListener(new View.OnTouchListener() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 2639f756a..a5142a02a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -142,7 +142,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         searching = false;
         searchWas = false;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index 93aaffa07..5684bc3fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -19,7 +19,6 @@
 import android.text.TextWatcher;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
@@ -139,7 +138,7 @@ public void onResume() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         if (isBroadcast) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
index 1ea12de42..3677a8ee9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
@@ -14,7 +14,6 @@
 import android.content.Intent;
 import android.os.Build;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -88,7 +87,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("InviteLink", R.string.InviteLink));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index fea96db4c..b75c2d366 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -10,7 +10,6 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
@@ -44,7 +43,7 @@ public boolean onFragmentCreate() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
@@ -58,7 +57,7 @@ public void onItemClick(int id) {
             }
         });
 
-        fragmentView = inflater.inflate(R.layout.identicon_layout, null, false);
+        fragmentView = getParentActivity().getLayoutInflater().inflate(R.layout.identicon_layout, null, false);
         ImageView identiconView = (ImageView) fragmentView.findViewById(R.id.identicon_view);
         TextView textView = (TextView) fragmentView.findViewById(R.id.identicon_text);
         TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(chat_id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 96fc7648f..be68ecf57 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -12,7 +12,6 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -53,7 +52,7 @@
     public ArrayList<LocaleController.LocaleInfo> searchResult;
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         searching = false;
         searchWas = false;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
index 1b1f81c04..2ac98eb9f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
@@ -18,7 +18,6 @@
 import android.text.Spannable;
 import android.text.method.LinkMovementMethod;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -100,7 +99,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
index b476860fc..7b5950b6f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
@@ -14,7 +14,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -76,7 +75,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         if (isAlwaysShare) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index e77c865dc..7e9980499 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -24,6 +24,7 @@
 import android.os.Parcelable;
 import android.provider.ContactsContract;
 import android.view.ActionMode;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.View;
@@ -61,6 +62,7 @@
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
+import org.telegram.ui.Components.DrawerPlayerView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PasscodeView;
 
@@ -70,7 +72,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
-public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
 
     private boolean finished;
     private String videoPath;
@@ -253,20 +255,22 @@ public void onClick(View v) {
             drawerLayoutContainer.addView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
         }
 
-        ListView listView = new ListView(this);
-        listView.setAdapter(drawerLayoutAdapter = new DrawerLayoutAdapter(this));
-        drawerLayoutContainer.setDrawerLayout(listView);
-        listView.setBackgroundColor(0xffffffff);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)listView.getLayoutParams();
+        FrameLayout listViewContainer = new FrameLayout(this);
+        listViewContainer.setBackgroundColor(0xffffffff);
+        drawerLayoutContainer.setDrawerLayout(listViewContainer);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listViewContainer.getLayoutParams();
         Point screenSize = AndroidUtilities.getRealScreenSize();
         layoutParams.width = AndroidUtilities.isTablet() ? AndroidUtilities.dp(320) : Math.min(screenSize.x, screenSize.y) - AndroidUtilities.dp(56);
         layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setPadding(0, 0, 0, 0);
+        listViewContainer.setLayoutParams(layoutParams);
+
+        ListView listView = new ListView(this);
+        listView.setAdapter(drawerLayoutAdapter = new DrawerLayoutAdapter(this));
         listView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
         listView.setDivider(null);
         listView.setDividerHeight(0);
-        listView.setLayoutParams(layoutParams);
         listView.setVerticalScrollBarEnabled(false);
+        listViewContainer.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
@@ -320,6 +324,16 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             }
         });
 
+        DrawerPlayerView drawerPlayerView = new DrawerPlayerView(this, listView);
+        listViewContainer.addView(drawerPlayerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.LEFT | Gravity.BOTTOM));
+        drawerPlayerView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                actionBarLayout.presentFragment(new AudioPlayerActivity());
+                drawerLayoutContainer.closeDrawer(false);
+            }
+        });
+
         drawerLayoutContainer.setParentActionBarLayout(actionBarLayout);
         actionBarLayout.setDrawerLayoutContainer(drawerLayoutContainer);
         actionBarLayout.init(mainFragmentsStack);
@@ -350,7 +364,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                 actionBarLayout.addFragmentToStack(new LoginActivity());
                 drawerLayoutContainer.setAllowOpenDrawer(false, false);
             } else {
-                actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                actionBarLayout.addFragmentToStack(new DialogsActivity(null));
                 drawerLayoutContainer.setAllowOpenDrawer(true, false);
             }
 
@@ -469,6 +483,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
             Integer push_enc_id = 0;
             Integer open_settings = 0;
             boolean showDialogsList = false;
+            boolean showPlayer = false;
 
             photoPathsArray = null;
             videoPath = null;
@@ -589,7 +604,6 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 }
                                 Uri uri = (Uri) parcelable;
                                 if (uri != null && (type != null && type.startsWith("image/") || uri.toString().toLowerCase().endsWith(".jpg"))) {
-                                    String tempPath = AndroidUtilities.getPath(uri);
                                     if (photoPathsArray == null) {
                                         photoPathsArray = new ArrayList<>();
                                     }
@@ -762,6 +776,8 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                         } else {
                             showDialogsList = true;
                         }
+                    } else if (intent.getAction().equals("com.tmessages.openplayer")) {
+                        showPlayer = true;
                     }
                 }
             }
@@ -801,6 +817,30 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                 }
                 pushOpened = false;
                 isNew = false;
+            } else if (showPlayer) {
+                if (AndroidUtilities.isTablet()) {
+                    for (int a = 0; a < layersActionBarLayout.fragmentsStack.size(); a++) {
+                        BaseFragment fragment = layersActionBarLayout.fragmentsStack.get(a);
+                        if (fragment instanceof AudioPlayerActivity) {
+                            layersActionBarLayout.removeFragmentFromStack(fragment);
+                            break;
+                        }
+                    }
+                    actionBarLayout.showLastFragment();
+                    rightActionBarLayout.showLastFragment();
+                    drawerLayoutContainer.setAllowOpenDrawer(false, false);
+                } else {
+                    for (int a = 0; a < actionBarLayout.fragmentsStack.size(); a++) {
+                        BaseFragment fragment = actionBarLayout.fragmentsStack.get(a);
+                        if (fragment instanceof AudioPlayerActivity) {
+                            actionBarLayout.removeFragmentFromStack(fragment);
+                            break;
+                        }
+                    }
+                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
+                }
+                actionBarLayout.presentFragment(new AudioPlayerActivity(), false, true, true);
+                pushOpened = true;
             } else if (videoPath != null || photoPathsArray != null || sendingText != null || documentsPathsArray != null || contactsToSend != null || documentsUrisArray != null) {
                 if (!AndroidUtilities.isTablet()) {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
@@ -809,13 +849,13 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                 args.putBoolean("onlySelect", true);
                 args.putString("selectAlertString", LocaleController.getString("SendMessagesTo", R.string.SendMessagesTo));
                 args.putString("selectAlertStringGroup", LocaleController.getString("SendMessagesToGroup", R.string.SendMessagesToGroup));
-                MessagesActivity fragment = new MessagesActivity(args);
+                DialogsActivity fragment = new DialogsActivity(args);
                 fragment.setDelegate(this);
                 boolean removeLast;
                 if (AndroidUtilities.isTablet()) {
-                    removeLast = layersActionBarLayout.fragmentsStack.size() > 0 && layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1) instanceof MessagesActivity;
+                    removeLast = layersActionBarLayout.fragmentsStack.size() > 0 && layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1) instanceof DialogsActivity;
                 } else {
-                    removeLast = actionBarLayout.fragmentsStack.size() > 1 && actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1) instanceof MessagesActivity;
+                    removeLast = actionBarLayout.fragmentsStack.size() > 1 && actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1) instanceof DialogsActivity;
                 }
                 actionBarLayout.presentFragment(fragment, removeLast, true, true);
                 pushOpened = true;
@@ -851,7 +891,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                         }
                     } else {
                         if (actionBarLayout.fragmentsStack.isEmpty()) {
-                            actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                            actionBarLayout.addFragmentToStack(new DialogsActivity(null));
                             drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
@@ -861,7 +901,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                             actionBarLayout.addFragmentToStack(new LoginActivity());
                             drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         } else {
-                            actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                            actionBarLayout.addFragmentToStack(new DialogsActivity(null));
                             drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
@@ -920,10 +960,10 @@ public void run() {
                                         args.putBoolean("onlySelect", true);
                                         args.putInt("dialogsType", 2);
                                         args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
-                                        MessagesActivity fragment = new MessagesActivity(args);
-                                        fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
+                                        DialogsActivity fragment = new DialogsActivity(args);
+                                        fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
                                             @Override
-                                            public void didSelectDialog(MessagesActivity fragment, long did, boolean param) {
+                                            public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                                                 MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, botChat);
                                                 Bundle args = new Bundle();
@@ -1113,7 +1153,7 @@ protected void onNewIntent(Intent intent) {
     }
 
     @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+    public void didSelectDialog(DialogsActivity messageFragment, long dialog_id, boolean param) {
         if (dialog_id != 0) {
             int lower_part = (int)dialog_id;
             int high_id = (int)(dialog_id >> 32);
@@ -1637,9 +1677,9 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
             drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
-            if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
+            if (fragment instanceof DialogsActivity) {
+                DialogsActivity dialogsActivity = (DialogsActivity)fragment;
+                if (dialogsActivity.isMainDialogList() && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
                     layersActionBarLayout.removeAllFragments();
@@ -1726,9 +1766,9 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
             drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
-            if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
+            if (fragment instanceof DialogsActivity) {
+                DialogsActivity dialogsActivity = (DialogsActivity)fragment;
+                if (dialogsActivity.isMainDialogList() && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.addFragmentToStack(fragment);
                     layersActionBarLayout.removeAllFragments();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 9907ecccb..36cec820e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -21,7 +21,6 @@
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -107,7 +106,7 @@
     private CircleOptions circleOptions;
     private LocationActivityDelegate delegate;
 
-    private int overScrollHeight = AndroidUtilities.displaySize.x - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(66);
+    private int overScrollHeight = AndroidUtilities.displaySize.x - ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(66);
     private int halfHeight;
 
     private final static int share = 1;
@@ -152,7 +151,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         if (AndroidUtilities.isTablet()) {
@@ -501,7 +500,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
             View shadow = new View(context);
             shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
-            mapViewClip.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, AndroidUtilities.dp(3), Gravity.LEFT | Gravity.BOTTOM));
+            mapViewClip.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.LEFT | Gravity.BOTTOM));
 
             markerImageView = new ImageView(context);
             markerImageView.setImageResource(R.drawable.map_pin);
@@ -696,7 +695,7 @@ private void updateClipView(int firstVisibleItem) {
 
     private void fixLayoutInternal(final boolean resume) {
         if (listView != null) {
-            int height = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
+            int height = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight();
             int viewHeight = fragmentView.getMeasuredHeight();
             if (viewHeight == 0) {
                 return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index dfe8b5867..1d8bddab0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -34,7 +34,6 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.animation.AccelerateDecelerateInterpolator;
@@ -109,7 +108,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
 
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
@@ -395,7 +394,7 @@ public void saveSelfArgs(Bundle outState) {
 
     public void needFinishActivity() {
         clearCurrentState();
-        presentFragment(new MessagesActivity(null), true);
+        presentFragment(new DialogsActivity(null), true);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
     }
 
@@ -724,11 +723,9 @@ private void updatePhoneField() {
                     if (!codeText.equals(resultCode)) {
                         phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
                         phoneField.setText(phone);
-                        int len = phoneField.length();
                         phoneField.setSelection(phoneField.length());
                     } else {
                         phoneField.setText(phone.substring(idx).trim());
-                        int len = phoneField.length();
                         phoneField.setSelection(phoneField.length());
                     }
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index fb10c8d0e..b52d4b1ad 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -21,7 +21,6 @@
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
@@ -40,6 +39,7 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
@@ -217,7 +217,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setTitle("");
         actionBar.setAllowOverlayTitle(false);
@@ -284,10 +284,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 1);
-                    MessagesActivity fragment = new MessagesActivity(args);
-                    fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
                         @Override
-                        public void didSelectDialog(MessagesActivity fragment, long did, boolean param) {
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                             int lower_part = (int) did;
                             if (lower_part != 0) {
                                 Bundle args = new Bundle();
@@ -374,14 +374,7 @@ public void onTextChanged(EditText editText) {
         dropDownContainer.setSubMenuOpenSide(1);
         dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
         dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
-        actionBar.addView(dropDownContainer);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.rightMargin = AndroidUtilities.dp(40);
-        layoutParams.leftMargin = AndroidUtilities.isTablet() ? AndroidUtilities.dp(64) : AndroidUtilities.dp(56);
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        dropDownContainer.setLayoutParams(layoutParams);
+        actionBar.addView(dropDownContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 64 : 56, 0, 40, 0));
         dropDownContainer.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -400,13 +393,7 @@ public void onClick(View view) {
         dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
         dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
         dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
-        dropDownContainer.addView(dropDown);
-        layoutParams = (FrameLayout.LayoutParams) dropDown.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(16);
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        dropDown.setLayoutParams(layoutParams);
+        dropDownContainer.addView(dropDown, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 16, 0, 0, 0));
 
         final ActionBarMenu actionMode = actionBar.createActionMode();
         actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_back_grey, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
@@ -426,12 +413,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 return true;
             }
         });
-        actionMode.addView(selectedMessagesCountTextView);
-        LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) selectedMessagesCountTextView.getLayoutParams();
-        layoutParams1.weight = 1;
-        layoutParams1.width = 0;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        selectedMessagesCountTextView.setLayoutParams(layoutParams1);
+        actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f));
 
         if ((int) dialog_id != 0) {
             actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
@@ -450,12 +432,7 @@ public boolean onTouch(View v, MotionEvent event) {
         listView.setDividerHeight(0);
         listView.setDrawSelectorOnTop(true);
         listView.setClipToPadding(false);
-        frameLayout.addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        listView.setLayoutParams(layoutParams);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
@@ -515,11 +492,7 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id)
         emptyView.setGravity(Gravity.CENTER);
         emptyView.setVisibility(View.GONE);
         emptyView.setBackgroundColor(0xfff0f0f0);
-        frameLayout.addView(emptyView);
-        layoutParams = (FrameLayout.LayoutParams) emptyView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        emptyView.setLayoutParams(layoutParams);
+        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         emptyView.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
@@ -528,42 +501,24 @@ public boolean onTouch(View v, MotionEvent event) {
         });
 
         emptyImageView = new ImageView(context);
-        emptyView.addView(emptyImageView);
-        layoutParams1 = (LinearLayout.LayoutParams) emptyImageView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        emptyImageView.setLayoutParams(layoutParams1);
+        emptyView.addView(emptyImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
 
         emptyTextView = new TextView(context);
         emptyTextView.setTextColor(0xff8a8a8a);
         emptyTextView.setGravity(Gravity.CENTER);
         emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
         emptyTextView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), AndroidUtilities.dp(128));
-        emptyView.addView(emptyTextView);
-        layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams1.topMargin = AndroidUtilities.dp(24);
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.CENTER;
-        emptyTextView.setLayoutParams(layoutParams1);
+        emptyView.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 24, 0, 0));
 
         progressView = new LinearLayout(context);
         progressView.setGravity(Gravity.CENTER);
         progressView.setOrientation(LinearLayout.VERTICAL);
         progressView.setVisibility(View.GONE);
         progressView.setBackgroundColor(0xfff0f0f0);
-        frameLayout.addView(progressView);
-        layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        progressView.setLayoutParams(layoutParams);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
         ProgressBar progressBar = new ProgressBar(context);
-        progressView.addView(progressBar);
-        layoutParams1 = (LinearLayout.LayoutParams) progressBar.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        progressBar.setLayoutParams(layoutParams1);
+        progressView.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
 
         switchToCurrentSelectedMode();
 
@@ -639,7 +594,6 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.didReceivedNewMessages) {
             long uid = (Long) args[0];
             if (uid == dialog_id) {
-                boolean markAsRead = false;
                 ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
                 boolean enc = ((int) dialog_id) == 0;
                 boolean updated = false;
@@ -804,7 +758,6 @@ private void switchToCurrentSelectedMode() {
             } else if (selectedMode == 1) {
                 listView.setAdapter(documentsAdapter);
                 dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
-                int lower_id = (int) dialog_id;
                 emptyImageView.setImageResource(R.drawable.tip2);
                 emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
                 searchItem.setVisibility(!sharedMediaData[1].messages.isEmpty() ? View.VISIBLE : View.GONE);
@@ -887,6 +840,11 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                 if (view instanceof SharedDocumentCell) {
                     SharedDocumentCell cell = (SharedDocumentCell) view;
                     if (cell.isLoaded()) {
+                        if (message.isMusic()) {
+                            if (MediaController.getInstance().setPlaylist(sharedMediaData[1].messages, message)) {
+                                return;
+                            }
+                        }
                         File f = null;
                         String fileName = FileLoader.getAttachFileName(message.messageOwner.media.document);
                         if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index a2ad12143..84ae277c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -20,7 +20,6 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -88,7 +87,6 @@
     private int otherSectionRow2;
     private int otherSectionRow;
     private int badgeNumberRow;
-    private int pebbleAlertRow;
     private int androidAutoAlertRow;
     private int repeatRow;
     private int resetSectionRow2;
@@ -143,7 +141,6 @@ public boolean onFragmentCreate() {
         otherSectionRow = rowCount++;
         badgeNumberRow = rowCount++;
         androidAutoAlertRow = -1;
-        pebbleAlertRow = rowCount++;
         repeatRow = rowCount++;
         resetSectionRow2 = rowCount++;
         resetSectionRow = rowCount++;
@@ -161,7 +158,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
@@ -321,12 +318,6 @@ public void run() {
                     MessagesController.getInstance().enableJoined = !enabled;
                     editor.putBoolean("EnableContactJoined", !enabled);
                     editor.commit();
-                } else if (i == pebbleAlertRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
-                    editor.putBoolean("EnablePebbleNotifications", !enabled);
-                    editor.commit();
                 } else if (i == androidAutoAlertRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -448,7 +439,7 @@ public void onClick(DialogInterface dialog, int which) {
                     builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
                     builder.setItems(new CharSequence[]{
                             LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled),
-                            LocaleController.getString("Default", R.string.Default),
+                            LocaleController.getString("VibrationDefault", R.string.VibrationDefault),
                             LocaleController.getString("Short", R.string.Short),
                             LocaleController.getString("Long", R.string.Long),
                             LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent)
@@ -708,8 +699,6 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     checkCell.setTextAndCheck(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), preferences.getBoolean("EnableInAppPriority", false), false);
                 } else if (i == contactJoinedRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
-                } else if (i == pebbleAlertRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("Pebble", R.string.Pebble), preferences.getBoolean("EnablePebbleNotifications", false), true);
                 } else if (i == androidAutoAlertRow) {
                     checkCell.setTextAndCheck("Android Auto", preferences.getBoolean("EnableAutoNotifications", false), true);
                 } else if (i == notificationsServiceRow) {
@@ -771,7 +760,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         value = preferences.getInt("vibrate_group", 0);
                     }
                     if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Default", R.string.Default), true);
+                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDefault", R.string.VibrationDefault), true);
                     } else if (value == 1) {
                         textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
                     } else if (value == 2) {
@@ -837,7 +826,7 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
                     i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
-                    i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
+                    i == inappPreviewRow || i == contactJoinedRow ||
                     i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
                     i == inchatSoundRow || i == androidAutoAlertRow) {
                 return 1;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
index 677837b97..c48cc65aa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
@@ -27,7 +27,6 @@
 import android.view.ContextMenu;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -108,7 +107,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         if (type != 3) {
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 74b2b80f6..303bc9f85 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -15,7 +15,6 @@
 import android.os.Build;
 import android.text.TextUtils;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
@@ -42,7 +41,7 @@
 import org.telegram.ui.Cells.PhotoPickerAlbumsCell;
 import org.telegram.ui.Cells.PhotoPickerSearchCell;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PhotoPickerBottomLayout;
+import org.telegram.ui.Components.PickerBottomLayout;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -72,7 +71,7 @@
     private TextView emptyView;
     private TextView dropDown;
     private ActionBarMenuItem dropDownContainer;
-    private PhotoPickerBottomLayout photoPickerBottomLayout;
+    private PickerBottomLayout pickerBottomLayout;
     private boolean sendPressed = false;
     private boolean singlePhoto = false;
     private int selectedMode;
@@ -109,7 +108,7 @@ public void onFragmentDestroy() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(0xff333333);
         actionBar.setItemsBackground(R.drawable.bar_selector_picker);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -256,20 +255,20 @@ public boolean onTouch(View v, MotionEvent event) {
         layoutParams.gravity = Gravity.CENTER;
         progressView.setLayoutParams(layoutParams);
 
-        photoPickerBottomLayout = new PhotoPickerBottomLayout(context);
-        frameLayout.addView(photoPickerBottomLayout);
-        layoutParams = (FrameLayout.LayoutParams) photoPickerBottomLayout.getLayoutParams();
+        pickerBottomLayout = new PickerBottomLayout(context);
+        frameLayout.addView(pickerBottomLayout);
+        layoutParams = (FrameLayout.LayoutParams) pickerBottomLayout.getLayoutParams();
         layoutParams.width = LayoutHelper.MATCH_PARENT;
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.gravity = Gravity.BOTTOM;
-        photoPickerBottomLayout.setLayoutParams(layoutParams);
-        photoPickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
+        pickerBottomLayout.setLayoutParams(layoutParams);
+        pickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 finishFragment();
             }
         });
-        photoPickerBottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
+        pickerBottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 sendSelectedPhotos();
@@ -284,7 +283,7 @@ public void onClick(View view) {
             progressView.setVisibility(View.GONE);
             listView.setEmptyView(emptyView);
         }
-        photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
+        pickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
 
         return fragmentView;
     }
@@ -464,8 +463,8 @@ private void openPhotoPicker(MediaController.AlbumEntry albumEntry, int type) {
         fragment.setDelegate(new PhotoPickerActivity.PhotoPickerActivityDelegate() {
             @Override
             public void selectedPhotosChanged() {
-                if (photoPickerBottomLayout != null) {
-                    photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
+                if (pickerBottomLayout != null) {
+                    pickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
                 }
             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index fd947b253..db5fba6ec 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -16,7 +16,6 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.util.AttributeSet;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -400,7 +399,7 @@ public boolean onFragmentCreate() {
                     return false;
                 }
             }
-            int size = 0;
+            int size;
             if (AndroidUtilities.isTablet()) {
                 size = AndroidUtilities.dp(520);
             } else {
@@ -432,7 +431,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(0xff333333);
         actionBar.setItemsBackground(R.drawable.bar_selector_picker);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index a9f420e8c..4c0f327a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -61,7 +61,7 @@
 import org.telegram.ui.Cells.PhotoPickerPhotoCell;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PhotoPickerBottomLayout;
+import org.telegram.ui.Components.PickerBottomLayout;
 
 import java.net.URLEncoder;
 import java.util.ArrayList;
@@ -98,7 +98,7 @@
 
     private GridView listView;
     private ListAdapter listAdapter;
-    private PhotoPickerBottomLayout photoPickerBottomLayout;
+    private PickerBottomLayout pickerBottomLayout;
     private FrameLayout progressView;
     private TextView emptyView;
     private ActionBarMenuItem searchItem;
@@ -150,7 +150,7 @@ public void onFragmentDestroy() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(0xff333333);
         actionBar.setItemsBackground(R.drawable.bar_selector_picker);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -395,32 +395,32 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
             updateSearchInterface();
         }
 
-        photoPickerBottomLayout = new PhotoPickerBottomLayout(context);
-        frameLayout.addView(photoPickerBottomLayout);
-        layoutParams = (FrameLayout.LayoutParams) photoPickerBottomLayout.getLayoutParams();
+        pickerBottomLayout = new PickerBottomLayout(context);
+        frameLayout.addView(pickerBottomLayout);
+        layoutParams = (FrameLayout.LayoutParams) pickerBottomLayout.getLayoutParams();
         layoutParams.width = LayoutHelper.MATCH_PARENT;
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.gravity = Gravity.BOTTOM;
-        photoPickerBottomLayout.setLayoutParams(layoutParams);
-        photoPickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
+        pickerBottomLayout.setLayoutParams(layoutParams);
+        pickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 delegate.actionButtonPressed(true);
                 finishFragment();
             }
         });
-        photoPickerBottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
+        pickerBottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 sendSelectedPhotos();
             }
         });
         if (singlePhoto) {
-            photoPickerBottomLayout.setVisibility(View.GONE);
+            pickerBottomLayout.setVisibility(View.GONE);
         }
 
         listView.setEmptyView(emptyView);
-        photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
+        pickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
 
         return fragmentView;
     }
@@ -650,7 +650,7 @@ public void setPhotoChecked(int index) {
                 break;
             }
         }
-        photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
+        pickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
         delegate.selectedPhotosChanged();
     }
 
@@ -935,7 +935,7 @@ private void fixLayoutInternal() {
         listView.setSelection(position);
 
         if (selectedAlbum == null) {
-            emptyView.setPadding(0, 0, 0, (int)((AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()) * 0.4f));
+            emptyView.setPadding(0, 0, 0, (int)((AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight()) * 0.4f));
         }
     }
 
@@ -1033,7 +1033,7 @@ public void onClick(View v) {
                                 }
                                 ((PhotoPickerPhotoCell) v.getParent()).checkBox.setChecked(selectedWebPhotos.containsKey(photoEntry.id), true);
                             }
-                            photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
+                            pickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
                             delegate.selectedPhotosChanged();
                         }
                     });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 2816c6257..bffc3f51a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -78,7 +78,7 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PhotoCropView;
 import org.telegram.ui.Components.PhotoFilterView;
-import org.telegram.ui.Components.PhotoPickerBottomLayout;
+import org.telegram.ui.Components.PickerBottomLayout;
 import org.telegram.ui.Components.PhotoViewerCaptionEnterView;
 import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
 
@@ -114,8 +114,8 @@
     private ImageView shareButton;
     private BackgroundDrawable backgroundDrawable = new BackgroundDrawable(0xff000000);
     private CheckBox checkImageView;
-    private PhotoPickerBottomLayout pickerView;
-    private PhotoPickerBottomLayout editorDoneLayout;
+    private PickerBottomLayout pickerView;
+    private PickerBottomLayout editorDoneLayout;
     private RadialProgressView radialProgressViews[] = new RadialProgressView[3];
     private GifDrawable gifDrawable;
     private ActionBarMenuItem cropItem;
@@ -522,8 +522,6 @@ public FrameLayoutDrawer(Context context) {
 
         @Override
         protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            int widthMode = MeasureSpec.getMode(widthMeasureSpec);
-            int heightMode = MeasureSpec.getMode(heightMeasureSpec);
             int widthSize = MeasureSpec.getSize(widthMeasureSpec);
             int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
@@ -1209,7 +1207,7 @@ public void onClick(View v) {
         dateTextView.setGravity(Gravity.LEFT);
         bottomLayout.addView(dateTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 25, 50, 0));
 
-        pickerView = new PhotoPickerBottomLayout(parentActivity);
+        pickerView = new PickerBottomLayout(parentActivity);
         pickerView.setBackgroundColor(0x7f000000);
         containerView.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
         pickerView.cancelButton.setOnClickListener(new View.OnClickListener() {
@@ -1231,7 +1229,7 @@ public void onClick(View view) {
             }
         });
 
-        editorDoneLayout = new PhotoPickerBottomLayout(parentActivity);
+        editorDoneLayout = new PickerBottomLayout(parentActivity);
         editorDoneLayout.setBackgroundColor(0x7f000000);
         editorDoneLayout.updateSelectedCount(0, false);
         editorDoneLayout.setVisibility(View.GONE);
@@ -1310,7 +1308,7 @@ public void onTextChanged(CharSequence text) {
             @Override
             public void onWindowSizeChanged(int size) {
                 int height = AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0));
-                if (size - AndroidUtilities.getCurrentActionBarHeight() * 2 < height) {
+                if (size - ActionBar.getCurrentActionBarHeight() * 2 < height) {
                     allowMentions = false;
                     if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
                         mentionListView.clearAnimation();
@@ -1613,8 +1611,6 @@ private void switchToEditMode(final int mode) {
                 float newScaleY = (float) getContainerViewHeight(0) / (float) bitmapHeight;
                 float scale = scaleX > scaleY ? scaleY : scaleX;
                 float newScale = newScaleX > newScaleY ? newScaleY : newScaleX;
-                int width = (int) (bitmapWidth * scale);
-                int height = (int) (bitmapHeight * scale);
 
                 animateToScale = newScale / scale;
                 animateToX = 0;
@@ -1767,8 +1763,6 @@ public void onAnimationEnd(Object animation) {
                         float newScaleY = (float) getContainerViewHeight(1) / (float) bitmapHeight;
                         float scale = scaleX > scaleY ? scaleY : scaleX;
                         float newScale = newScaleX > newScaleY ? newScaleY : newScaleX;
-                        int width = (int) (bitmapWidth * scale);
-                        int height = (int) (bitmapHeight * scale);
 
                         animateToScale = newScale / scale;
                         animateToX = 0;
@@ -1887,8 +1881,6 @@ public void onAnimationEnd(Object animation) {
                         float newScaleY = (float) getContainerViewHeight(2) / (float) bitmapHeight;
                         float scale = scaleX > scaleY ? scaleY : scaleX;
                         float newScale = newScaleX > newScaleY ? newScaleY : newScaleX;
-                        int width = (int) (bitmapWidth * scale);
-                        int height = (int) (bitmapHeight * scale);
 
                         animateToScale = newScale / scale;
                         animateToX = 0;
@@ -2557,7 +2549,6 @@ private void setCurrentCaption(final CharSequence caption) {
             captionTextViewNew = captionTextView;
 
             captionItem.setIcon(R.drawable.photo_text2);
-            CharSequence oldText = captionTextView.getText();
             captionTextView.setTag(caption);
             captionTextView.setText(caption);
             ViewProxy.setAlpha(captionTextView, bottomLayout.getVisibility() == View.VISIBLE || pickerView.getVisibility() == View.VISIBLE ? 1.0f : 0.0f);
@@ -3055,7 +3046,6 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
 
         if (animated) {
             animationInProgress = 1;
-            int visibility = animatingImageView.getVisibility();
             animatingImageView.setVisibility(View.VISIBLE);
             containerView.invalidate();
 
@@ -3739,7 +3729,6 @@ private void onDraw(Canvas canvas) {
         }
 
         ImageReceiver sideImage = null;
-        Bitmap bitmap;
         if (currentEditMode == 0) {
             if (scale >= 1.0f && !zoomAnimation && !zooming) {
                 if (currentTranslationX > maxX + AndroidUtilities.dp(5)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index f5d4a8828..0404394b7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -153,6 +153,12 @@ protected void onAnimationEnd() {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
+        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
+        if (resourceId > 0) {
+            AndroidUtilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
+        }
+
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.pushMessagesUpdated);
@@ -822,7 +828,7 @@ public boolean onPreDraw() {
                     if (avatarContainer != null) {
                         avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
+                    int padding = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
                     avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
                     return true;
                 }
@@ -835,7 +841,7 @@ public boolean onPreDraw() {
                     messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                     if (!checkTransitionAnimation() && !startedMoving) {
                         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) messageContainer.getLayoutParams();
-                        layoutParams.topMargin = AndroidUtilities.getCurrentActionBarHeight();
+                        layoutParams.topMargin = ActionBar.getCurrentActionBarHeight();
                         layoutParams.bottomMargin = AndroidUtilities.dp(48);
                         layoutParams.width = ViewGroup.MarginLayoutParams.MATCH_PARENT;
                         layoutParams.height = ViewGroup.MarginLayoutParams.MATCH_PARENT;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
index 6b6449365..78159d5bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -12,7 +12,6 @@
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -90,7 +89,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("PrivacySettings", R.string.PrivacySettings));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 07f415931..ecc42b868 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -25,7 +25,6 @@
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
@@ -87,7 +86,7 @@
 import java.util.HashMap;
 import java.util.concurrent.Semaphore;
 
-public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
+public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
 
     private ListView listView;
     private ListAdapter listAdapter;
@@ -245,7 +244,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 ? 5 : chat_id));
         actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(user_id != 0 ? 5 : chat_id));
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -290,7 +289,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 1);
-                    MessagesActivity fragment = new MessagesActivity(args);
+                    DialogsActivity fragment = new DialogsActivity(args);
                     fragment.setDelegate(ProfileActivity.this);
                     presentFragment(fragment);
                 } else if (id == edit_contact) {
@@ -342,10 +341,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 2);
                     args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
-                    MessagesActivity fragment = new MessagesActivity(args);
-                    fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
+                    DialogsActivity fragment = new DialogsActivity(args);
+                    fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
                         @Override
-                        public void didSelectDialog(MessagesActivity fragment, long did, boolean param) {
+                        public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                             NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                             MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, null);
@@ -689,7 +688,6 @@ public void onClick(View v) {
                         builder.setItems(items, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
-                                int action = 0;
                                 if (i == 0) {
                                     avatarUpdater.openCamera();
                                 } else if (i == 1) {
@@ -796,7 +794,7 @@ private void needLayout() {
         FrameLayout.LayoutParams layoutParams;
         if (listView != null) {
             layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight();
             listView.setLayoutParams(layoutParams);
         }
 
@@ -806,7 +804,7 @@ private void needLayout() {
 
             int avatarSize = 42 + (int)(18 * diff);
             int avatarX = 17 + (int)(47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
             int nameX = 97 + (int)(21 * diffm);
             int nameEndX = 16 + (int)(32 * diffm);
             int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
@@ -815,7 +813,7 @@ private void needLayout() {
 
             if (writeButton != null) {
                 layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
-                layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
+                layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
                 writeButton.setLayoutParams(layoutParams);
                 /*ViewProxy.setAlpha(writeButton, diff);
                 writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
@@ -1240,7 +1238,6 @@ private void updateRowsIds() {
                 emptyRowChat2 = rowCount++;
                 rowCount += info.participants.size();
                 membersEndRow = rowCount;
-                int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
                 addMemberRow = rowCount++;
             } else {
                 membersEndRow = -1;
@@ -1358,7 +1355,7 @@ protected void onDialogDismiss() {
     }
 
     @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+    public void didSelectDialog(DialogsActivity messageFragment, long dialog_id, boolean param) {
         if (dialog_id != 0) {
             Bundle args = new Bundle();
             args.putBoolean("scrollToTopOnResume", true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index 103ac0c18..401dbfe86 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -22,7 +22,6 @@
 import android.provider.Settings;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -98,7 +97,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
index a7185bc3d..7e89a3458 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
@@ -15,7 +15,6 @@
 import android.os.Build;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -86,7 +85,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("SessionsTitle", R.string.SessionsTitle));
@@ -109,7 +108,7 @@ public void onItemClick(int id) {
         emptyLayout.setOrientation(LinearLayout.VERTICAL);
         emptyLayout.setGravity(Gravity.CENTER);
         emptyLayout.setBackgroundResource(R.drawable.greydivider_bottom);
-        emptyLayout.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT, AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()));
+        emptyLayout.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT, AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight()));
 
         ImageView imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.devices);
@@ -433,7 +432,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             } else if (type == 3) {
                 ViewGroup.LayoutParams layoutParams = emptyLayout.getLayoutParams();
                 if (layoutParams != null) {
-                    layoutParams.height = Math.max(AndroidUtilities.dp(220), AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(128) - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0));
+                    layoutParams.height = Math.max(AndroidUtilities.dp(220), AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(128) - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0));
                     emptyLayout.setLayoutParams(layoutParams);
                 }
                 return emptyLayout;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 9c0be40e4..119f3dcd6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -33,7 +33,6 @@
 import android.util.Base64;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -278,7 +277,7 @@ public boolean needAddActionBar() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
         actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -896,7 +895,7 @@ private void needLayout() {
         FrameLayout.LayoutParams layoutParams;
         if (listView != null) {
             layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight();
             listView.setLayoutParams(layoutParams);
         }
 
@@ -906,7 +905,7 @@ private void needLayout() {
 
             int avatarSize = 42 + (int) (18 * diff);
             int avatarX = 17 + (int) (47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int) ((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int avatarY = AndroidUtilities.dp(22) - (int) ((AndroidUtilities.dp(22) - (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
             int nameX = 97 + (int) (21 * diffm);
             int nameEndX = 16 + (int) (32 * diffm);
             int nameY = avatarY + AndroidUtilities.dp(29 - 13 * diffm);
@@ -914,7 +913,7 @@ private void needLayout() {
             float scale = 1.0f - 0.12f * diffm;
 
             layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
+            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
             writeButton.setLayoutParams(layoutParams);
 
             //ViewProxy.setScaleX(writeButton, diff > 0.2f ? 1.0f : diff / 0.2f);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
index 0fd9958b1..897b521cb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
@@ -16,7 +16,6 @@
 import android.os.Message;
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -69,7 +68,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("Stickers", R.string.Stickers));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
index 079bf6926..d6d39f973 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
@@ -22,7 +22,6 @@
 import android.view.ContextMenu;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.MotionEvent;
@@ -144,7 +143,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(false);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 37fa05bf4..f5f02e4fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -19,7 +19,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.Surface;
 import android.view.TextureView;
 import android.view.View;
@@ -224,7 +223,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackgroundColor(0xff333333);
         actionBar.setItemsBackground(R.drawable.bar_selector_white);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -261,7 +260,7 @@ public void onItemClick(int id) {
         ActionBarMenu menu = actionBar.createMenu();
         menu.addItemWithWidth(1, R.drawable.ic_done, AndroidUtilities.dp(56));
 
-        fragmentView = inflater.inflate(R.layout.video_editor_layout, null, false);
+        fragmentView = getParentActivity().getLayoutInflater().inflate(R.layout.video_editor_layout, null, false);
         originalSizeTextView = (TextView) fragmentView.findViewById(R.id.original_size);
         editedSizeTextView = (TextView) fragmentView.findViewById(R.id.edited_size);
         videoContainerView = fragmentView.findViewById(R.id.video_container);
@@ -539,7 +538,7 @@ private void fixVideoSize() {
         if (AndroidUtilities.isTablet()) {
             viewHeight = AndroidUtilities.dp(472);
         } else {
-            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.getCurrentActionBarHeight();
+            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - ActionBar.getCurrentActionBarHeight();
         }
 
         int width;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index 1689a0e62..060dbf839 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -21,7 +21,6 @@
 import android.os.Bundle;
 import android.provider.MediaStore;
 import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -102,7 +101,7 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context, LayoutInflater inflater) {
+    public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("ChatBackground", R.string.ChatBackground));
diff --git a/TMessagesProj/src/main/res/anim/no_animation.xml b/TMessagesProj/src/main/res/anim/no_animation.xml
new file mode 100644
index 000000000..bfaa5cfba
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/no_animation.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="10"/>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_audio.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_audio.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_audio_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_audio_pressed.png
new file mode 100755
index 000000000..f29f74faa
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_audio_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_camera.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_camera.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_camera_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_camera_pressed.png
new file mode 100755
index 000000000..c44d38bcd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_camera_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_contact_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_contact.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_contact_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_contact.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_contact_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_contact_pressed.png
new file mode 100755
index 000000000..8c38efd61
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_contact_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_file_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_file.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_file_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_file.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_file_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_file_pressed.png
new file mode 100755
index 000000000..4859f01cb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_file_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_gallery.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_gallery.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_gallery_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_gallery_pressed.png
new file mode 100755
index 000000000..354e4617b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_gallery_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_hide_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_hide1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_hide_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_hide1.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_hide1_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_hide1_pressed.png
new file mode 100755
index 000000000..ac5912686
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_hide1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_hide_big_icon.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_hide2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_hide_big_icon.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_hide2.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_location.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_location.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_location_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_location_pressed.png
new file mode 100755
index 000000000..bc2f11844
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_location_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_send_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_send1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_send_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_send1.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_send1_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_send1_pressed.png
new file mode 100755
index 000000000..86dafab4a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_send1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_send_big_icon.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_send2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_send_big_icon.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_send2.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video_big.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_video.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video_big.png
rename to TMessagesProj/src/main/res/drawable-hdpi/attach_video.png
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png
new file mode 100755
index 000000000..db40e51ce
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/audiosend_pause.png b/TMessagesProj/src/main/res/drawable-hdpi/audiosend_pause.png
new file mode 100755
index 000000000..3900d8151
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/audiosend_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/audiosend_play.png b/TMessagesProj/src/main/res/drawable-hdpi/audiosend_play.png
new file mode 100755
index 000000000..4b13c02e6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/audiosend_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bluecounter.9.png b/TMessagesProj/src/main/res/drawable-hdpi/bluecounter.9.png
new file mode 100644
index 000000000..afafbee3b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bluecounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_action_next.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_next.png
new file mode 100755
index 000000000..4eaf7caab
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_action_pause.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_pause.png
new file mode 100755
index 000000000..da17d12ba
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_action_play.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_play.png
new file mode 100755
index 000000000..0cd5cb61a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_action_previous.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_previous.png
new file mode 100755
index 000000000..e59dedb62
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_action_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_contact.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_contact.png
deleted file mode 100755
index 671f56f99..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_contact.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png
deleted file mode 100755
index 1c60351cb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png
deleted file mode 100755
index 52bf60516..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png
deleted file mode 100755
index 5a8f5cf4e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png
deleted file mode 100755
index b2b0caaa5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photobig.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photobig.png
deleted file mode 100755
index ca397177e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_photobig.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png
deleted file mode 100755
index 193373521..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_pause.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_pause.png
new file mode 100644
index 000000000..9643e6522
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/menu_play.png b/TMessagesProj/src/main/res/drawable-hdpi/menu_play.png
new file mode 100644
index 000000000..8b4bb5712
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/menu_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/nocover.png b/TMessagesProj/src/main/res/drawable-hdpi/nocover.png
new file mode 100644
index 000000000..4c0748a94
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/nocover.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/nocover_big.9.png b/TMessagesProj/src/main/res/drawable-hdpi/nocover_big.9.png
new file mode 100644
index 000000000..7b02d9e1c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/nocover_big.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/nocover_small.9.png b/TMessagesProj/src/main/res/drawable-hdpi/nocover_small.9.png
new file mode 100644
index 000000000..8e5d60b8a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/nocover_small.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_back.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_back.png
new file mode 100644
index 000000000..8eb567adc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_next.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_next.png
new file mode 100644
index 000000000..c65818124
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_next_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_next_pressed.png
new file mode 100644
index 000000000..5a01fac92
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_next_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_pause.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_pause.png
new file mode 100644
index 000000000..c3cbab416
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_pause_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_pause_pressed.png
new file mode 100644
index 000000000..4ec1ead1a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_pause_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_play.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_play.png
new file mode 100644
index 000000000..434039be9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_play_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_play_pressed.png
new file mode 100644
index 000000000..836f92d59
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_play_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_previous.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_previous.png
new file mode 100644
index 000000000..b9d678725
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_previous_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_previous_pressed.png
new file mode 100644
index 000000000..4ef7d468b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_previous_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat.png
new file mode 100644
index 000000000..492637b71
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat1_active.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat1_active.png
new file mode 100644
index 000000000..4379bbd2c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat1_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat_active.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat_active.png
new file mode 100644
index 000000000..432f02870
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_repeat_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle.png
new file mode 100644
index 000000000..0389f00b9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle_active.png b/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle_active.png
new file mode 100644
index 000000000..c1c5ab850
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/pl_shuffle_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/player.png b/TMessagesProj/src/main/res/drawable-hdpi/player.png
new file mode 100644
index 000000000..a62ef59b8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/player.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/player1.png b/TMessagesProj/src/main/res/drawable-hdpi/player1.png
deleted file mode 100755
index 6ec1a5d28..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/player1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/player1_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/player1_pressed.png
deleted file mode 100755
index f5698eb11..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/player1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/player2.png b/TMessagesProj/src/main/res/drawable-hdpi/player2.png
deleted file mode 100755
index cb9f570bb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/player2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/player2_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/player2_pressed.png
deleted file mode 100755
index 879278c30..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/player2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/sheet_shadow.9.png b/TMessagesProj/src/main/res/drawable-hdpi/sheet_shadow.9.png
new file mode 100644
index 000000000..dccf34feb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/sheet_shadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_audio.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_audio.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_audio_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_audio_pressed.png
new file mode 100755
index 000000000..1ca2ee2b6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_audio_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_camera.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_camera.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_camera_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_camera_pressed.png
new file mode 100755
index 000000000..0acb5a385
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_camera_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_contact_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_contact.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_contact_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_contact.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_contact_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_contact_pressed.png
new file mode 100755
index 000000000..0546d8d70
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_contact_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_file_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_file.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_file_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_file.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_file_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_file_pressed.png
new file mode 100755
index 000000000..4075c3baf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_file_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_gallery.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_gallery.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_gallery_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_gallery_pressed.png
new file mode 100755
index 000000000..5dcdcf076
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_gallery_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_hide_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_hide1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_hide_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_hide1.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_hide1_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_hide1_pressed.png
new file mode 100755
index 000000000..8439f1f5e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_hide1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_hide_big_icon.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_hide2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_hide_big_icon.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_hide2.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_location.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_location.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_location_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_location_pressed.png
new file mode 100755
index 000000000..1c3917fe0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_location_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_send_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_send1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_send_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_send1.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_send1_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_send1_pressed.png
new file mode 100755
index 000000000..d8f4bed39
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_send1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_send_big_icon.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_send2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_send_big_icon.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_send2.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video_big.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_video.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video_big.png
rename to TMessagesProj/src/main/res/drawable-mdpi/attach_video.png
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png
new file mode 100755
index 000000000..b814908bc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/audiosend_pause.png b/TMessagesProj/src/main/res/drawable-mdpi/audiosend_pause.png
new file mode 100755
index 000000000..df9cc8f14
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/audiosend_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/audiosend_play.png b/TMessagesProj/src/main/res/drawable-mdpi/audiosend_play.png
new file mode 100755
index 000000000..b2352c30a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/audiosend_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bluecounter.9.png b/TMessagesProj/src/main/res/drawable-mdpi/bluecounter.9.png
new file mode 100644
index 000000000..b683c0cea
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bluecounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_action_next.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_next.png
new file mode 100755
index 000000000..936cdd77d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_action_pause.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_pause.png
new file mode 100755
index 000000000..b4bdbb558
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_action_play.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_play.png
new file mode 100755
index 000000000..164385d04
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_action_previous.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_previous.png
new file mode 100755
index 000000000..97970e08f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_action_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_contact.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_contact.png
deleted file mode 100755
index b7ca453f5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_contact.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png
deleted file mode 100755
index a53056967..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png
deleted file mode 100755
index 193306974..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png
deleted file mode 100755
index 3440214d1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png
deleted file mode 100755
index 9a70e6b58..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photobig.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photobig.png
deleted file mode 100755
index f4a9297d4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_photobig.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png
deleted file mode 100755
index b6ebbb60a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_pause.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_pause.png
new file mode 100644
index 000000000..befe821c8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/menu_play.png b/TMessagesProj/src/main/res/drawable-mdpi/menu_play.png
new file mode 100644
index 000000000..6d2ad6b3f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/menu_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/nocover.png b/TMessagesProj/src/main/res/drawable-mdpi/nocover.png
new file mode 100644
index 000000000..abbedfc21
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/nocover.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/nocover_big.9.png b/TMessagesProj/src/main/res/drawable-mdpi/nocover_big.9.png
new file mode 100644
index 000000000..017c16f16
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/nocover_big.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/nocover_small.9.png b/TMessagesProj/src/main/res/drawable-mdpi/nocover_small.9.png
new file mode 100644
index 000000000..6c5b5e65f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/nocover_small.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_back.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_back.png
new file mode 100644
index 000000000..6702c4be6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_next.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_next.png
new file mode 100644
index 000000000..08df043ef
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_next_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_next_pressed.png
new file mode 100644
index 000000000..fc645c147
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_next_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_pause.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_pause.png
new file mode 100644
index 000000000..1bf3d4abf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_pause_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_pause_pressed.png
new file mode 100644
index 000000000..b8e61746f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_pause_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_play.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_play.png
new file mode 100644
index 000000000..31fce9bc1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_play_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_play_pressed.png
new file mode 100644
index 000000000..d8ca3eb74
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_play_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_previous.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_previous.png
new file mode 100644
index 000000000..1b52aca08
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_previous_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_previous_pressed.png
new file mode 100644
index 000000000..1b34ae6fe
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_previous_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat.png
new file mode 100644
index 000000000..c62fb6c85
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat1_active.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat1_active.png
new file mode 100644
index 000000000..0b1a47433
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat1_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat_active.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat_active.png
new file mode 100644
index 000000000..140c797bf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_repeat_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle.png
new file mode 100644
index 000000000..c22ab8e3f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle_active.png b/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle_active.png
new file mode 100644
index 000000000..8e3888ddc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/pl_shuffle_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/player.png b/TMessagesProj/src/main/res/drawable-mdpi/player.png
new file mode 100644
index 000000000..1a26651ce
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/player.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/player1.png b/TMessagesProj/src/main/res/drawable-mdpi/player1.png
deleted file mode 100755
index ff66a1aa5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/player1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/player1_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/player1_pressed.png
deleted file mode 100755
index 4bc5b5735..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/player1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/player2.png b/TMessagesProj/src/main/res/drawable-mdpi/player2.png
deleted file mode 100755
index 9d3caac8d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/player2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/player2_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/player2_pressed.png
deleted file mode 100755
index 946cf59d7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/player2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/sheet_shadow.9.png b/TMessagesProj/src/main/res/drawable-mdpi/sheet_shadow.9.png
new file mode 100644
index 000000000..58be559f8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/sheet_shadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml
new file mode 100644
index 000000000..fc4dddc7f
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#2f000000">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_audio.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_audio.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_audio_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_audio_pressed.png
new file mode 100755
index 000000000..4d058f53d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_audio_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_camera.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_camera.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_camera_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_camera_pressed.png
new file mode 100755
index 000000000..ba0d86273
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_camera_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_contact_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_contact.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_contact_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_contact.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_contact_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_contact_pressed.png
new file mode 100755
index 000000000..bada4c266
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_contact_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_file_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_file.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_file_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_file.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_file_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_file_pressed.png
new file mode 100755
index 000000000..491efc190
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_file_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_gallery.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_gallery.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_gallery_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_gallery_pressed.png
new file mode 100755
index 000000000..e9e735211
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_gallery_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_hide_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_hide1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_hide_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_hide1.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_hide1_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_hide1_pressed.png
new file mode 100755
index 000000000..1fabe1da5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_hide1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_hide_big_icon.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_hide2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_hide_big_icon.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_hide2.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_location.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_location.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_location_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_location_pressed.png
new file mode 100755
index 000000000..50e92b498
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_location_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_send_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_send1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_send_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_send1.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_send1_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_send1_pressed.png
new file mode 100755
index 000000000..4a107c6b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_send1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_send_big_icon.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_send2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_send_big_icon.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_send2.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video_big.png
rename to TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png
new file mode 100755
index 000000000..d251fd69c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_pause.png b/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_pause.png
new file mode 100755
index 000000000..8078779df
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_play.png b/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_play.png
new file mode 100755
index 000000000..bfd90992e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/audiosend_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bluecounter.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/bluecounter.9.png
new file mode 100644
index 000000000..2087fd181
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bluecounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_next.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_next.png
new file mode 100755
index 000000000..f282b9245
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_pause.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_pause.png
new file mode 100755
index 000000000..72dfa9fa6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_play.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_play.png
new file mode 100755
index 000000000..043acd808
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_previous.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_previous.png
new file mode 100755
index 000000000..2522877df
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_action_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_contact.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_contact.png
deleted file mode 100755
index 6fdc58b0b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_contact.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png
deleted file mode 100755
index 4227122dc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png
deleted file mode 100755
index 3e27c97e7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png
deleted file mode 100755
index 12336bf80..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png
deleted file mode 100755
index 25f0d3c81..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photobig.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photobig.png
deleted file mode 100755
index 67a9bf2ea..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_photobig.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png
deleted file mode 100755
index 49f6685e0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_pause.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_pause.png
new file mode 100644
index 000000000..54f0f7bcd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/menu_play.png b/TMessagesProj/src/main/res/drawable-xhdpi/menu_play.png
new file mode 100644
index 000000000..718da7c4e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/menu_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/nocover.png b/TMessagesProj/src/main/res/drawable-xhdpi/nocover.png
new file mode 100644
index 000000000..0e916f376
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/nocover.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/nocover_big.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/nocover_big.9.png
new file mode 100644
index 000000000..7026a671f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/nocover_big.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/nocover_small.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/nocover_small.9.png
new file mode 100644
index 000000000..5e135bde6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/nocover_small.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_back.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_back.png
new file mode 100644
index 000000000..5be0d0c96
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_next.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_next.png
new file mode 100644
index 000000000..a9b7bb559
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_next_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_next_pressed.png
new file mode 100644
index 000000000..adfa91502
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_next_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause.png
new file mode 100644
index 000000000..88901a49e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause_pressed.png
new file mode 100644
index 000000000..95d5b1224
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_pause_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_play.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_play.png
new file mode 100644
index 000000000..337bf8a37
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_play_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_play_pressed.png
new file mode 100644
index 000000000..adc3c6fe0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_play_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous.png
new file mode 100644
index 000000000..1dbd201bd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous_pressed.png
new file mode 100644
index 000000000..6979d0dd2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_previous_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat.png
new file mode 100644
index 000000000..f0ebf4987
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat1_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat1_active.png
new file mode 100644
index 000000000..9b37d2dd3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat1_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat_active.png
new file mode 100644
index 000000000..da9e63bc1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_repeat_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle.png
new file mode 100644
index 000000000..00293fad0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle_active.png
new file mode 100644
index 000000000..1cba5d2f5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/pl_shuffle_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/player.png b/TMessagesProj/src/main/res/drawable-xhdpi/player.png
new file mode 100644
index 000000000..c236f57a6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/player.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/player1.png b/TMessagesProj/src/main/res/drawable-xhdpi/player1.png
deleted file mode 100755
index 2a11310e6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/player1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/player1_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/player1_pressed.png
deleted file mode 100755
index e3ebd1b5e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/player1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/player2.png b/TMessagesProj/src/main/res/drawable-xhdpi/player2.png
deleted file mode 100755
index 57bc079af..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/player2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/player2_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/player2_pressed.png
deleted file mode 100755
index 03723d55b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/player2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/sheet_shadow.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/sheet_shadow.9.png
new file mode 100644
index 000000000..171a4d54e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/sheet_shadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_audio.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_audio.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_audio_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_audio_pressed.png
new file mode 100755
index 000000000..28f865b76
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_audio_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_camera.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_camera.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_camera_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_camera_pressed.png
new file mode 100755
index 000000000..b9e2a0088
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_camera_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_contact_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_contact.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_contact_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_contact.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_contact_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_contact_pressed.png
new file mode 100755
index 000000000..d8824727d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_contact_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_file_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_file.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_file_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_file.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_file_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_file_pressed.png
new file mode 100755
index 000000000..ff36de726
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_file_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_gallery.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_gallery.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_gallery_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_gallery_pressed.png
new file mode 100755
index 000000000..7ae2a56ad
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_gallery_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_hide_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_hide_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide1.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide1_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide1_pressed.png
new file mode 100755
index 000000000..4e3cc02a7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_hide_big_icon.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_hide_big_icon.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_hide2.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_location.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_location.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_location_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_location_pressed.png
new file mode 100755
index 000000000..cfa436dd1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_location_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_send_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_send1.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_send_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_send1.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_send1_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_send1_pressed.png
new file mode 100755
index 000000000..750e47fc3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_send1_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_send_big_icon.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_send2.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_send_big_icon.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_send2.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png
similarity index 100%
rename from TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video_big.png
rename to TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png
new file mode 100755
index 000000000..292a0c3d5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_pause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_pause.png
new file mode 100755
index 000000000..6a227efc2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_play.png b/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_play.png
new file mode 100755
index 000000000..40478b917
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/audiosend_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bluecounter.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bluecounter.9.png
new file mode 100644
index 000000000..113537b7f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bluecounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_next.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_next.png
new file mode 100755
index 000000000..4fe60888b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_pause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_pause.png
new file mode 100755
index 000000000..76833ff7d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_play.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_play.png
new file mode 100755
index 000000000..fe7ea25cc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_previous.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_previous.png
new file mode 100755
index 000000000..2c9310af9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_action_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_contact.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_contact.png
deleted file mode 100755
index cf1a4bbd6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_contact.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png
deleted file mode 100755
index 4f8d40750..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_gallery.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png
deleted file mode 100755
index b6bd6ca9a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_location.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png
deleted file mode 100755
index 7317d7295..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png
deleted file mode 100755
index ccf61d696..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photobig.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photobig.png
deleted file mode 100755
index db8c53ae1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_photobig.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png
deleted file mode 100755
index 66843485e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_video.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_pause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_pause.png
new file mode 100644
index 000000000..7bb5c4539
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/menu_play.png b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_play.png
new file mode 100644
index 000000000..3279b876b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/menu_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/nocover.png b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover.png
new file mode 100644
index 000000000..61aab196a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_big.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_big.9.png
new file mode 100644
index 000000000..eacbc19f7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_big.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_small.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_small.9.png
new file mode 100644
index 000000000..012386f97
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/nocover_small.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_back.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_back.png
new file mode 100644
index 000000000..10fcfc173
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_back.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next.png
new file mode 100644
index 000000000..7895ed90f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next_pressed.png
new file mode 100644
index 000000000..fa5646ca3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_next_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause.png
new file mode 100644
index 000000000..10dac92ff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause_pressed.png
new file mode 100644
index 000000000..1eb9c4eb4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_pause_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play.png
new file mode 100644
index 000000000..41d57747c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play_pressed.png
new file mode 100644
index 000000000..bc1b06969
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_play_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous.png
new file mode 100644
index 000000000..6d45e33ca
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous_pressed.png
new file mode 100644
index 000000000..92baf19cd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_previous_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat.png
new file mode 100644
index 000000000..a0404007d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat1_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat1_active.png
new file mode 100644
index 000000000..49caea600
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat1_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat_active.png
new file mode 100644
index 000000000..38266b9d1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_repeat_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle.png
new file mode 100644
index 000000000..59108a061
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle_active.png
new file mode 100644
index 000000000..1ca88b2e7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/pl_shuffle_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/player.png b/TMessagesProj/src/main/res/drawable-xxhdpi/player.png
new file mode 100644
index 000000000..21217b2c1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/player.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/player1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/player1.png
deleted file mode 100755
index 6eee90a8e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/player1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/player1_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/player1_pressed.png
deleted file mode 100755
index f1af60fcc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/player1_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/player2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/player2.png
deleted file mode 100755
index 7a099f7cb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/player2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/player2_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/player2_pressed.png
deleted file mode 100755
index 8fb075f6f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/player2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/sheet_shadow.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/sheet_shadow.9.png
new file mode 100644
index 000000000..13c556455
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/sheet_shadow.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable/attach_audio_states.xml b/TMessagesProj/src/main/res/drawable/attach_audio_states.xml
new file mode 100644
index 000000000..881a09d0d
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_audio_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_audio_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_audio_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_audio" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_camera_states.xml b/TMessagesProj/src/main/res/drawable/attach_camera_states.xml
new file mode 100644
index 000000000..3b437c248
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_camera_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_camera_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_camera_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_camera" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_contact_states.xml b/TMessagesProj/src/main/res/drawable/attach_contact_states.xml
new file mode 100644
index 000000000..f8dbdd4ef
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_contact_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_contact_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_contact_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_contact" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_file_states.xml b/TMessagesProj/src/main/res/drawable/attach_file_states.xml
new file mode 100644
index 000000000..c5604e3a2
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_file_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_file_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_file_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_file" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_gallery_states.xml b/TMessagesProj/src/main/res/drawable/attach_gallery_states.xml
new file mode 100644
index 000000000..40a9cf0f5
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_gallery_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_gallery_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_gallery_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_gallery" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_hide_states.xml b/TMessagesProj/src/main/res/drawable/attach_hide_states.xml
new file mode 100644
index 000000000..6fb0453d7
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_hide_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_hide1_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_hide1_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_hide1" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_location_states.xml b/TMessagesProj/src/main/res/drawable/attach_location_states.xml
new file mode 100644
index 000000000..942b7063d
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_location_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_location_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_location_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_location" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_send_states.xml b/TMessagesProj/src/main/res/drawable/attach_send_states.xml
new file mode 100644
index 000000000..9377186e9
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_send_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_send1_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_send1_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_send1" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/attach_video_states.xml b/TMessagesProj/src/main/res/drawable/attach_video_states.xml
new file mode 100644
index 000000000..93eb90089
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/attach_video_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/attach_video_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/attach_video_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/attach_video" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml b/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml
new file mode 100644
index 000000000..f311824b8
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#0f000000" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#0f000000" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#0f000000" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/floating_states.xml b/TMessagesProj/src/main/res/drawable/floating_states.xml
index c2c53d129..55cb84eb4 100644
--- a/TMessagesProj/src/main/res/drawable/floating_states.xml
+++ b/TMessagesProj/src/main/res/drawable/floating_states.xml
@@ -1,13 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
-
-<!--
-  ~ This is the source code of Telegram for Android v. 1.7.x.
-  ~ It is licensed under GNU GPL v. 2 or later.
-  ~ You should have received a copy of the license in this archive (see LICENSE).
-  ~
-  ~ Copyright Nikolai Kudashov, 2013-2014.
-  -->
-
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:drawable="@drawable/floating_pressed" android:state_pressed="true" />
     <item android:drawable="@drawable/floating_pressed" android:state_selected="true" />
diff --git a/TMessagesProj/src/main/res/drawable/player_next_states.xml b/TMessagesProj/src/main/res/drawable/player_next_states.xml
new file mode 100644
index 000000000..b3fe03129
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/player_next_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/pl_next_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/pl_next_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/pl_next" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/player_pause_states.xml b/TMessagesProj/src/main/res/drawable/player_pause_states.xml
new file mode 100644
index 000000000..713cd0bc3
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/player_pause_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/pl_pause_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/pl_pause_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/pl_pause" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/player_play_states.xml b/TMessagesProj/src/main/res/drawable/player_play_states.xml
new file mode 100644
index 000000000..92447f398
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/player_play_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/pl_play_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/pl_play_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/pl_play" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/player_prev_states.xml b/TMessagesProj/src/main/res/drawable/player_prev_states.xml
new file mode 100644
index 000000000..e34bbba26
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/player_prev_states.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/pl_previous_pressed" android:state_pressed="true" />
+    <item android:drawable="@drawable/pl_previous_pressed" android:state_selected="true" />
+    <item android:drawable="@drawable/pl_previous" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/search_dark_states.xml b/TMessagesProj/src/main/res/drawable/search_dark_states.xml
deleted file mode 100644
index d1d4b4594..000000000
--- a/TMessagesProj/src/main/res/drawable/search_dark_states.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
-    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
-    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
-    <item android:drawable="@drawable/search_light"/>
-</selector>
diff --git a/TMessagesProj/src/main/res/drawable/search_light_states.xml b/TMessagesProj/src/main/res/drawable/search_light_states.xml
deleted file mode 100644
index d1d4b4594..000000000
--- a/TMessagesProj/src/main/res/drawable/search_light_states.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
-    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
-    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
-    <item android:drawable="@drawable/search_light"/>
-</selector>
diff --git a/TMessagesProj/src/main/res/layout/player_big_notification.xml b/TMessagesProj/src/main/res/layout/player_big_notification.xml
new file mode 100755
index 000000000..98c7f0bd2
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/player_big_notification.xml
@@ -0,0 +1,122 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="128dp"
+    android:orientation="horizontal"
+    android:background="#ff424242" >
+
+    <ImageView
+        android:id="@+id/player_album_art"
+        android:layout_width="128dp"
+        android:layout_height="128dp"
+        android:scaleType="fitXY"
+        android:background="#ffc0c0c0" />
+
+    <FrameLayout
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1">
+
+        <TextView
+            android:id="@+id/player_song_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:gravity="top|left"
+            android:singleLine="true"
+            android:textColor="#ffffffff"
+            android:textSize="16dp"
+            android:layout_marginLeft="12dp"
+            android:layout_marginTop="4dp"
+            android:layout_marginRight="44dp"/>
+
+        <ImageView
+            android:id="@+id/player_close"
+            android:layout_width="28dp"
+            android:layout_height="28dp"
+            android:layout_marginTop="8dp"
+            android:layout_marginRight="8dp"
+            android:scaleType="center"
+            android:layout_gravity="right"
+            android:background="@drawable/bar_selector_white"
+            android:src="@drawable/ic_close_white" />
+
+        <TextView
+            android:id="@+id/player_author_name"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:textColor="#ffc7c7c7"
+            android:layout_marginTop="25dp"
+            android:layout_marginLeft="12dp"
+            android:layout_marginRight="44dp"
+            android:textSize="13dp" />
+
+        <FrameLayout
+            android:layout_height="1dp"
+            android:layout_width="match_parent"
+            android:layout_marginBottom="48dp"
+            android:layout_gravity="bottom"
+            android:background="#ff606060"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_gravity="bottom"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <ProgressBar
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_gravity="center"
+                android:indeterminateDrawable="@drawable/loading_animation"
+                android:indeterminateDuration="1500"
+                android:id="@+id/player_progress_bar" />
+
+            <ImageView
+                android:id="@+id/player_previous"
+                android:layout_width="40dp"
+                android:layout_height="40dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:scaleType="center"
+                android:background="@drawable/bar_selector_white"
+                android:src="@drawable/ic_action_previous" />
+
+            <ImageView
+                android:id="@+id/player_pause"
+                android:layout_width="40dp"
+                android:layout_height="40dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:scaleType="center"
+                android:background="@drawable/bar_selector_white"
+                android:src="@drawable/ic_action_pause" />
+
+            <ImageView
+                android:id="@+id/player_play"
+                android:layout_width="40dp"
+                android:layout_height="40dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:scaleType="center"
+                android:background="@drawable/bar_selector_white"
+                android:src="@drawable/ic_action_play"
+                android:visibility="gone" />
+
+            <ImageView
+                android:id="@+id/player_next"
+                android:layout_width="40dp"
+                android:layout_height="40dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:scaleType="center"
+                android:background="@drawable/bar_selector_white"
+                android:src="@drawable/ic_action_next"/>
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/player_small_notification.xml b/TMessagesProj/src/main/res/layout/player_small_notification.xml
new file mode 100755
index 000000000..43c2b9d32
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/player_small_notification.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#ff424242" >
+
+    <ImageView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:src="@drawable/transparent" />
+
+    <ImageView
+        android:id="@+id/player_album_art"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:scaleType="fitXY"
+        android:layout_centerVertical="true"
+        android:layout_marginLeft="12dp" />
+
+    <TextView
+        android:id="@+id/player_song_name"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="top|left"
+        android:singleLine="true"
+        android:textColor="#ffffffff"
+        android:textSize="16dp"
+        android:layout_marginLeft="64dp"
+        android:layout_marginTop="12dp"
+        android:layout_marginRight="180dp"/>
+
+    <ImageView
+        android:id="@+id/player_close"
+        android:layout_width="28dp"
+        android:layout_height="28dp"
+        android:layout_marginTop="8dp"
+        android:layout_marginRight="8dp"
+        android:scaleType="center"
+        android:layout_alignParentRight="true"
+        android:background="@drawable/bar_selector_white"
+        android:src="@drawable/ic_close_white" />
+
+    <TextView
+        android:id="@+id/player_author_name"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:textColor="#ffc7c7c7"
+        android:layout_marginTop="33dp"
+        android:layout_marginLeft="64dp"
+        android:layout_marginRight="180dp"
+        android:textSize="13dp" />
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="48dp"
+        android:gravity="center"
+        android:layout_marginRight="40dp"
+        android:layout_centerVertical="true"
+        android:layout_alignParentRight="true"
+        android:orientation="horizontal" >
+
+        <ProgressBar
+            android:layout_width="30dp"
+            android:layout_height="30dp"
+            android:layout_gravity="center"
+            android:layout_marginRight="56dp"
+            android:indeterminateDrawable="@drawable/loading_animation"
+            android:indeterminateDuration="1500"
+            android:id="@+id/player_progress_bar" />
+
+        <ImageView
+            android:id="@+id/player_previous"
+            android:layout_width="32dp"
+            android:layout_height="32dp"
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"
+            android:scaleType="center"
+            android:background="@drawable/bar_selector_white"
+            android:src="@drawable/ic_action_previous" />
+
+        <ImageView
+            android:id="@+id/player_pause"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"
+            android:scaleType="center"
+            android:background="@drawable/bar_selector_white"
+            android:src="@drawable/ic_action_pause" />
+
+        <ImageView
+            android:id="@+id/player_play"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"
+            android:scaleType="center"
+            android:background="@drawable/bar_selector_white"
+            android:src="@drawable/ic_action_play"
+            android:visibility="gone" />
+
+        <ImageView
+            android:id="@+id/player_next"
+            android:layout_width="32dp"
+            android:layout_height="32dp"
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"
+            android:scaleType="center"
+            android:background="@drawable/bar_selector_white"
+            android:src="@drawable/ic_action_next"/>
+
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 8cbb7ef3a..5562767b2 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">أنت قمت بإنشاء قائمة رسالة جماعية</string>
     <string name="AddRecipient">إضافة مستلم</string>
     <string name="KickFromBroadcast">إزالة من قائمة الرسالة الجماعية</string>
+    <!--audio view-->
+    <string name="NoAudio">فضلًا قم بإضافة ملفات لمكتبتك الموسيقية على جهازك لتتمكن من مشاهدتها هنا.</string>
+    <string name="AttachMusic">موسيقى</string>
+    <string name="AudioUnknownArtist">الفنان غير معروف</string>
+    <string name="AudioUnknownTitle">العنوان غير معروف</string>
     <!--documents view-->
     <string name="SelectFile">اختر ملف</string>
     <string name="FreeOfTotal">متاح %1$s من %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">حذف هذه الدردشة</string>
     <string name="SlideToCancel">قم بالسحب للإلغاء</string>
     <string name="SaveToDownloads">حفظ في الجهاز</string>
+    <string name="SaveToMusic">احفظ في الموسيقى</string>
     <string name="ShareFile">مشاركة</string>
     <string name="ApplyLocalizationFile">تطبيق ملف التعريب</string>
     <string name="UnsupportedAttachment">المرفق غير مدعوم</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">إيقاف</string>
     <string name="InChatSound">الأصوات داخل المحادثات</string>
     <string name="SoundDefault">افتراضي</string>
+    <string name="VibrationDefault">تلقائي</string>
     <string name="SmartNotifications">إشعارات ذكية</string>
     <string name="SmartNotificationsDisabled">تعطيل</string>
     <string name="SmartNotificationsInfo">أعلى صوت %1$s خلال %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s الساعة %2$s</string>
     <!--update text-->
-    <string name="updateText">تيليجرام نسخة الأندرويد تم تحديثه. الجديد في نسخة ٣.٠:\n\n- أقسام مخصصة خاصة ومرتبة لكل لحزم الملصقات. يمكنك إضافة حزم الملصقات كهذه https://telegram.me/addstickers/Animals\n- واجهة برمجية خاصة جديدة بالبوت، مجانًا للجميع. إذا كنت مبرمج، اصنع البوت الخاص بك مثل @quiz_bot و @hot_or_bot باستخدام حساب @botfather. للإستزادة، فضلًا اطلع على https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">تم تحديث تيليجرام نسخة الأندرويد.  الجديد في النسخة رقم 3.1:\n\n- بحث عن الرسائل داخل محادثات محددة. \n- إعادة تصميم كاملة لشاشة ارفاق الملفات. إرسال جهات اتصال وملفات صوتية مباشرة من خيار المرفقات. \n- تطوير لتشغيل الوسائط داخل التطبيق (يوتيوب, ڤيميو, ساوندكلاود وغيرها.),.\n\nللاستزادة،  اطلع هنا:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index df5390eb6..d171f0ee5 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Du hast eine Broadcast Liste erstellt</string>
     <string name="AddRecipient">Empfänger hinzufügen</string>
     <string name="KickFromBroadcast">Aus Broadcast Liste entfernen</string>
+    <!--audio view-->
+    <string name="NoAudio">Bitte füge Musikdateien einfach deiner Android Musikbibliothek hinzu, um sie hier zu sehen.</string>
+    <string name="AttachMusic">Musik</string>
+    <string name="AudioUnknownArtist">Unbekannter Künstler</string>
+    <string name="AudioUnknownTitle">Unbekannter Titel</string>
     <!--documents view-->
     <string name="SelectFile">Datei auswählen</string>
     <string name="FreeOfTotal">Freier Speicher: %1$s von %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Diesen Chat löschen</string>
     <string name="SlideToCancel">WISCHEN UM ABZUBRECHEN</string>
     <string name="SaveToDownloads">In Downloads speichern</string>
+    <string name="SaveToMusic">Musik speichern</string>
     <string name="ShareFile">Teilen</string>
     <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
     <string name="UnsupportedAttachment">Nicht unterstützte Datei</string>
@@ -208,7 +214,7 @@
     <string name="SharedMedia">Geteilte Medien</string>
     <string name="SETTINGS">Einstellungen</string>
     <string name="AddMember">Mitglied hinzufügen</string>
-    <string name="DeleteAndExit">Gruppe löschen und verlassen</string>
+    <string name="DeleteAndExit">Löschen und Gruppe verlassen</string>
     <string name="Notifications">Mitteilungen</string>
     <string name="KickFromGroup">Aus der Gruppe entfernen</string>
     <!--contact info view-->
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">Aus</string>
     <string name="InChatSound">In-Chat-Töne</string>
     <string name="SoundDefault">Standard</string>
+    <string name="VibrationDefault">Standard</string>
     <string name="SmartNotifications">Intelligente Benachrichtigungen</string>
     <string name="SmartNotificationsDisabled">Deaktiviert</string>
     <string name="SmartNotificationsInfo">Höchstens %1$s innerhalb von %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s um %2$s</string>
     <!--update text-->
-    <string name="updateText">Telegram für Android wurde aktualisiert. Neu in Version 3.0:\n\n- Neue Tabs im Sticker Panel für alle deine eigenen Sticker-Pakete. Füge neue Sticker wie beispielsweise https://telegram.me/addstickers/Animals hinzu.\n- Neue Bot API, für alle kostenlos verfügbar. Kannst du programmieren? Erstelle deine eigenen Bots für Spiele, Dienste oder Integrationen. Mehr dazu unter https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram für Android wurde aktualisiert. Neu in Version 3.1:\n\n- Direkte Suche in Chats.\n- In Chats versteckt sich ein komplett neues Menü hinter der Büroklammer. Nun kann man dort auch Musik und Kontakte versenden.\n- In-App Medienwiedergabe für YouTube, Vimeo, SoundCloud, etc. optimiert und neuer Player für Audiodateien.\n\nMehr dazu unter:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 8cc0c49f4..3c328ef1b 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Creaste una lista de difusión</string>
     <string name="AddRecipient">Añadir destinatario</string>
     <string name="KickFromBroadcast">Quitar de la lista de difusión</string>
+    <!--audio view-->
+    <string name="NoAudio">Por favor, añade archivos a la carpeta de música en tu dispositivo para verlos aquí.</string>
+    <string name="AttachMusic">Música</string>
+    <string name="AudioUnknownArtist">Artista desconocido</string>
+    <string name="AudioUnknownTitle">Título desconocido</string>
     <!--documents view-->
     <string name="SelectFile">Elegir archivo</string>
     <string name="FreeOfTotal">%1$s de %2$s libres</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Eliminar este chat</string>
     <string name="SlideToCancel">DESLIZA PARA CANCELAR</string>
     <string name="SaveToDownloads">Guardar en descargas</string>
+    <string name="SaveToMusic">Guardar en música</string>
     <string name="ShareFile">Compartir</string>
     <string name="ApplyLocalizationFile">Aplicar traducción</string>
     <string name="UnsupportedAttachment">Adjunto no soportado</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">Apagado</string>
     <string name="InChatSound">Sonidos en el chat</string>
     <string name="SoundDefault">Por defecto</string>
+    <string name="VibrationDefault">Por defecto</string>
     <string name="SmartNotifications">Notificaciones inteligentes</string>
     <string name="SmartNotificationsDisabled">Desactivadas</string>
     <string name="SmartNotificationsInfo">Sonar como máximo %1$s en %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s a las %2$s</string>
     <!--update text-->
-    <string name="updateText">Telegram para Android fue actualizada. Novedades en la versión 3.0:\n\n- Pestañas dedicadas para cada uno de tus packs de stickers personalizados en el panel de stickers. Añade stickers personalizados como: https://telegram.me/addstickers/Animals\n- Nueva API para bots, gratis para todos. Si eres un ingeniero, crea tus propios bots para juegos, servicios o integraciones. Conoce más en: https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram para Android fue actualizada. Novedades en la versión 3.1:\n\n- Busca mensajes dentro de un chat en específico.\n- Menú para adjuntar completamente rediseñado. Envía contactos y archivos de audio directamente desde el menú para adjuntar.\n- Reproducción de multimedia dentro de la aplicación mejorada (YouTube, Vimeo, SoundCloud etc.), nuevo reproductor para archivos de audio largos.\n\nMás sobre esta actualización:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 8b5e8022f..d826f248b 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Hai creato una lista broadcast</string>
     <string name="AddRecipient">Aggiungi destinatario</string>
     <string name="KickFromBroadcast">Rimuovi dalla lista broadcast</string>
+    <!--audio view-->
+    <string name="NoAudio">Aggiungi file nella libreria musicale del tuo dispositivo per vederli qui.</string>
+    <string name="AttachMusic">Musica</string>
+    <string name="AudioUnknownArtist">Artista sconosciuto</string>
+    <string name="AudioUnknownTitle">Titolo sconosciuto</string>
     <!--documents view-->
     <string name="SelectFile">Seleziona file</string>
     <string name="FreeOfTotal">Liberi %1$s di %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Elimina questa chat</string>
     <string name="SlideToCancel">ANNULLA</string>
     <string name="SaveToDownloads">Salva nei download</string>
+    <string name="SaveToMusic">Salva nella musica</string>
     <string name="ShareFile">Condividi</string>
     <string name="ApplyLocalizationFile">Applica traduzione</string>
     <string name="UnsupportedAttachment">Allegato non supportato</string>
@@ -284,7 +290,7 @@
     <string name="BlockedUsers">Utenti bloccati</string>
     <string name="LogOut">Disconnetti</string>
     <string name="NoSound">Nessun suono</string>
-    <string name="Default">Predefinita</string>
+    <string name="Default">Predefinite</string>
     <string name="Support">Supporto</string>
     <string name="OnlyIfSilent">Solo se silenzioso</string>
     <string name="ChatBackground">Sfondo chat</string>
@@ -295,7 +301,7 @@
     <string name="ContactJoined">Un contatto si è unito a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Lingua</string>
-    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe volerci un pò.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">FAQdi Telegram</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]></string>
+    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe volerci un pò.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">FAQ di Telegram</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]></string>
     <string name="AskButton">Chiedi a un volontario</string>
     <string name="TelegramFaq">FAQ di Telegram</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/it</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">No</string>
     <string name="InChatSound">Suoni in-chat</string>
     <string name="SoundDefault">Predefinito</string>
+    <string name="VibrationDefault">Predefinita</string>
     <string name="SmartNotifications">Notifiche intelligenti</string>
     <string name="SmartNotificationsDisabled">Disabilitate</string>
     <string name="SmartNotificationsInfo">Suona al massimo %1$s in %2$s</string>
@@ -452,12 +459,12 @@
     <string name="PleaseReEnterPassword">Reinserisci la tua password</string>
     <string name="RecoveryEmail">E-mail di recupero</string>
     <string name="YourEmail">La tua e-mail</string>
-    <string name="YourEmailInfo">Per favore inserisci un\'e-mail valida. È l\'unico modo di recuperare una password dimenticata.</string>
+    <string name="YourEmailInfo">Inserisci un\'e-mail valida. È l\'unico modo di recuperare una password dimenticata.</string>
     <string name="YourEmailSkip">Salta</string>
     <string name="YourEmailSkipWarning">Attenzione</string>
     <string name="YourEmailSkipWarningText">No, seriamente.\n\nSe dimentichi la tua password, perderai l\'accesso al tuo account Telegram. Non ci sarà modo di ripristinarlo.</string>
     <string name="YourEmailAlmostThere">Ci siamo quasi!</string>
-    <string name="YourEmailAlmostThereText">Per favore controlla la tua e-mail (anche lo spam) per completare la configurazione della verifica in due passaggi.</string>
+    <string name="YourEmailAlmostThereText">Controlla la tua e-mail (anche lo spam) per completare la configurazione della verifica in due passaggi.</string>
     <string name="YourPasswordSuccess">Fatto!</string>
     <string name="YourPasswordSuccessText">La password per la verifica in due passaggi è ora attiva.</string>
     <string name="ChangePassword">Cambia password</string>
@@ -466,16 +473,16 @@
     <string name="ChangeRecoveryEmail">Cambia e-mail di recupero</string>
     <string name="TurnPasswordOffQuestion">Sei sicuro di voler disabilitare la tua password?</string>
     <string name="PasswordHint">Suggerimento password</string>
-    <string name="PasswordHintText">Per favore crea un suggerimento per la tua password</string>
+    <string name="PasswordHintText">Crea un suggerimento per la tua password</string>
     <string name="PasswordDoNotMatch">Le password non corrispondono</string>
     <string name="AbortPassword">Annulla configurazione della verifica in due passaggi</string>
-    <string name="EmailPasswordConfirmText">Per favore segui questi step per completare la configurazione della verifica in due passaggi:\n\n1. Controlla la tua e-mail (anche lo spam)\n%1$s\n\n2. Clicca sul link di conferma.</string>
+    <string name="EmailPasswordConfirmText">Segui questi step per completare la configurazione della verifica in due passaggi:\n\n1. Controlla la tua e-mail (anche lo spam)\n%1$s\n\n2. Clicca sul link di conferma.</string>
     <string name="PasswordAsHintError">Il suggerimento deve essere diverso dalla password</string>
     <string name="PasswordEmailInvalid">E-mail non valida</string>
     <string name="RestorePasswordNoEmailTitle">Scusa</string>
     <string name="RestorePasswordNoEmailText">Siccome non hai fornito un\'email di recupero quando hai impostato la  tua password, non ti resta che ricordarti la password o ripristinare il tuo account.</string>
     <string name="RestoreEmailSent">Abbiamo inviato un codice di ripristino alla e-mail che ci hai fornito:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Per favore controlla la tua e-mail e inserisci il codice a 6 cifre che ti abbiamo inviato.</string>
+    <string name="RestoreEmailSentInfo">Controlla la tua e-mail e inserisci il codice a 6 cifre che ti abbiamo inviato.</string>
     <string name="RestoreEmailTrouble">Hai problemi ad accedere alla tua e-mail %1$s?</string>
     <string name="RestoreEmailTroubleText">Se non puoi ripristinare l\'accesso alla tua e-mail, non ti resta che ricordarti la password o ripristinare il tuo account.</string>
     <string name="ResetMyAccount">RIPRISTINA IL MIO ACCOUNT</string>
@@ -508,10 +515,10 @@
     <string name="DeleteAccountIfAwayFor">Se lontano per</string>
     <string name="DeleteAccountHelp">Se non ti connetti almeno una volta in questo periodo, il tuo account verrà eliminato insieme a tutti i gruppi, messaggi e contatti.</string>
     <string name="DeleteAccountNowConfirmation">Eliminare il tuo account?</string>
-    <string name="LastSeenHelp">Cambia chi può vedere il tuo Ultimo Accesso.</string>
-    <string name="LastSeenTitle">Chi può vedere il tuo Ultimo Accesso?</string>
+    <string name="LastSeenHelp">Cambia chi può vedere il tuo ultimo accesso.</string>
+    <string name="LastSeenTitle">Chi può vedere il tuo ultimo accesso?</string>
     <string name="AddExceptions">Aggiungi eccezioni</string>
-    <string name="CustomHelp">Importante: non sarai in grado di vedere l\'Ultimo Accesso delle persone con le quali non condividi l\'Ultimo Accesso. Verrà mostrato un orario approssimativo (di recente, entro una settimana, entro un mese).</string>
+    <string name="CustomHelp">Importante: non sarai in grado di vedere l\'ultimo accesso delle persone con le quali non condividi l\'ultimo accesso. Verrà mostrato un orario approssimativo (di recente, entro una settimana, entro un mese).</string>
     <string name="AlwaysShareWith">Condividi con</string>
     <string name="NeverShareWith">Non condividere con</string>
     <string name="CustomShareSettingsHelp">Queste impostazioni annulleranno i valori precedenti.</string>
@@ -519,7 +526,7 @@
     <string name="AlwaysShareWithPlaceholder">Condividi con gli utenti...</string>
     <string name="NeverShareWithTitle">Non condividere</string>
     <string name="NeverShareWithPlaceholder">Non condividere con gli utenti...</string>
-    <string name="EmpryUsersPlaceholder">Aggiungi Utenti</string>
+    <string name="EmpryUsersPlaceholder">Aggiungi utenti</string>
     <string name="PrivacyFloodControlError">Ci spiace, troppe richieste. Impossibile cambiare le impostazioni di privacy ora, attendi.</string>
     <string name="ClearOtherSessionsHelp">Disconnette tutti i dispositivi tranne questo.</string>
     <string name="RemoveFromListText">Tieni premuto sull\'utente per eliminarlo.</string>
@@ -682,12 +689,12 @@
     <string name="items_few">%1$d oggetti</string>
     <string name="items_many">%1$d oggetti</string>
     <string name="items_other">%1$d oggetti</string>
-    <string name="FromChats_zero">in nessuna chat</string>
-    <string name="FromChats_one">in %1$d chat</string>
-    <string name="FromChats_two">in %1$d chat</string>
-    <string name="FromChats_few">in %1$d chat</string>
-    <string name="FromChats_many">in %1$d chat</string>
-    <string name="FromChats_other">in %1$d chat</string>
+    <string name="FromChats_zero">da nessuna chat</string>
+    <string name="FromChats_one">da %1$d chat</string>
+    <string name="FromChats_two">da %1$d chat</string>
+    <string name="FromChats_few">da %1$d chat</string>
+    <string name="FromChats_many">da %1$d chat</string>
+    <string name="FromChats_other">da %1$d chat</string>
     <string name="Seconds_zero">%1$d secondi</string>
     <string name="Seconds_one">%1$d secondo</string>
     <string name="Seconds_two">%1$d secondi</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s alle %2$s</string>
     <!--update text-->
-    <string name="updateText">Telegram per Android è stato aggiornato. Nuovo nella versione 3.0:\n\n- Pagine dedicate per ognuno dei tuoi pacchetti sticker nel pannello sticker. Aggiunti sticker personalizzati come https://telegram.me/addstickers/Animals\n- Nuova API per i bot, gratis per tutti. Se sei un ingegnere, crea i tuoi bot per giochi, servizi o integrazioni. Scopri di più su https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram per Android si è aggiornato. Nuovo nella versione 3.1:\n\n- Cerca messaggi all\'interno di una specifica chat.\n- Menu degli allegati completamente ridisegnato. Invia contatti e audio direttamente dal menu degli allegati.\n- Riproduzione in-app migliorata (YouTube, Vimeo, SoundCloud etc.), nuovo player per i file audio.\n\nMaggiori informazioni su questo aggiornamento:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index f4eec4eeb..f2fc30ddf 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">단체 메시지 리스트를 만들었습니다</string>
     <string name="AddRecipient">받는 사람 추가</string>
     <string name="KickFromBroadcast">리스트에서 제외</string>
+    <!--audio view-->
+    <string name="NoAudio">음악 라이브러리에 파일을 추가하셔야지만 볼 수 있습니다.</string>
+    <string name="AttachMusic">음악</string>
+    <string name="AudioUnknownArtist">알수 없는 아티스트</string>
+    <string name="AudioUnknownTitle">알 수 없는 제목</string>
     <!--documents view-->
     <string name="SelectFile">파일 선택</string>
     <string name="FreeOfTotal">%2$s 중 %1$s 남음</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">이 채팅방 삭제</string>
     <string name="SlideToCancel">밀어서 취소</string>
     <string name="SaveToDownloads">다운로드 폴더에 저장</string>
+    <string name="SaveToMusic">음악으로 저장</string>
     <string name="ShareFile">공유</string>
     <string name="ApplyLocalizationFile">언어 파일 적용</string>
     <string name="UnsupportedAttachment">지원하지 않는 형식입니다</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">끔</string>
     <string name="InChatSound">채팅중 소리 설정</string>
     <string name="SoundDefault">기본값</string>
+    <string name="VibrationDefault">기본값</string>
     <string name="SmartNotifications">스마트 알림</string>
     <string name="SmartNotificationsDisabled">비활성화됨</string>
     <string name="SmartNotificationsInfo">최대 %1$s번, %2$s번 이내 알림</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">a h:mm</string>
     <string name="formatDateAtTime">%1$s %2$s</string>
     <!--update text-->
-    <string name="updateText">텔레그램 안드로이드 버전이 업데이트 되었습니다. 새로운 버전은 3.0 입니다:\n\n- 스티커 패널에 커스텀 스티커별 탭 지원. https://telegram.me/addstickers/Animals 와 같은 커스텀 스티커 추가 기능\n- 신규 봇 API를 무료로 공개합니다. 개발자라면 누구나 게임, 서비스나 통합 봇등 개발이 가능합니다. https://telegram.org/blog/bot-revolution 에서 자세한 사항을 알아보세요.</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">텔레그램 안드로이드 버전이 업데이트 되었습니다. 새로운 버전은 3.1 입니다:\n\n- 특정 대화창에서 검색. \n- 첨부 메뉴 개선. 해당 메뉴에서 바로 연락처, 오디오를 전송 가능. \n- 인앱 미디어 재생 기능 향상 (YouTube, Vimeo, SoundCloud etc). 대용량 오디오 파일 별도 플레이어 기능. \n\nhttps://telegram.org/blog/search-and-media에서 자세한 사항을 알아보세요.</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 49562999d..487122018 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Je hebt een verzendlijst gemaakt</string>
     <string name="AddRecipient">Ontvanger toevoegen</string>
     <string name="KickFromBroadcast">Verwijder van verzendlijst</string>
+    <!--audio view-->
+    <string name="NoAudio">Voeg bestanden toe aan de muziekbibliotheek op je apparaat om ze hier te zien.</string>
+    <string name="AttachMusic">Muziek</string>
+    <string name="AudioUnknownArtist">Onbekende artiest</string>
+    <string name="AudioUnknownTitle">Onbekende titel</string>
     <!--documents view-->
     <string name="SelectFile">Kies een bestand</string>
     <string name="FreeOfTotal">Vrij: %1$s van %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Chat verwijderen</string>
     <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
     <string name="SaveToDownloads">Opslaan in Downloads</string>
+    <string name="SaveToMusic">Opslaan in muziek</string>
     <string name="ShareFile">Delen</string>
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
     <string name="UnsupportedAttachment">Bestandstype niet ondersteund</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">Uit</string>
     <string name="InChatSound">Chatgeluiden</string>
     <string name="SoundDefault">Standaard</string>
+    <string name="VibrationDefault">Standaard</string>
     <string name="SmartNotifications">Slimme meldingen</string>
     <string name="SmartNotificationsDisabled">Uitgeschakeld</string>
     <string name="SmartNotificationsInfo">Geluid maximaal %1$s per %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s om %2$s</string>
     <!--update text-->
-    <string name="updateText">Telegram voor Android is geüpdatet. Nieuw in versie 3.0:\n\n- Tabbladen voor al je eigen stickerbundels in het stickerpaneel. Voeg stickerbundels zoals: https://telegram.me/addstickers/Animals toe.\n- Nieuwe bot-API, gratis voor iedereen. Handig met programmeren? Maak dan je eigen bots voor spelletjes, diensten of integraties. Meer weten? kijk op: https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram voor Android is bijgewerkt. Nieuw in versie 3.1:\n\n- Zoek naar berichten in een specifieke chat.\n- Volledig opnieuw ontworpen bijlagemenu. Verstuur contacten en audiobestanden rechtstreeks vanuit het bijlagemenu.\n- Afspelen van media in de app verbeterd (YouTube, Vimeo, SoundCloud, etc.), nieuwe speler voor grote audiobestanden.\n\nMeer weten? Kijk op:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 4b4e6d254..d9e826d5b 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Você criou uma lista de transmissão</string>
     <string name="AddRecipient">Adicionar destinatário</string>
     <string name="KickFromBroadcast">Remover da lista de transmissão</string>
+    <!--audio view-->
+    <string name="NoAudio">Por favor, adicione arquivos à biblioteca de música de seu dispositivo para vê-los aqui.</string>
+    <string name="AttachMusic">Música</string>
+    <string name="AudioUnknownArtist">Artista desconhecido</string>
+    <string name="AudioUnknownTitle">Título desconhecido</string>
     <!--documents view-->
     <string name="SelectFile">Selecione um Arquivo</string>
     <string name="FreeOfTotal">Disponível %1$s de %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Apagar este chat</string>
     <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
     <string name="SaveToDownloads">Salvar em downloads</string>
+    <string name="SaveToMusic">Salvar em músicas</string>
     <string name="ShareFile">Compartilhar</string>
     <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
     <string name="UnsupportedAttachment">Anexo não suportado</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">Desativado</string>
     <string name="InChatSound">Sons no Chat</string>
     <string name="SoundDefault">Padrão</string>
+    <string name="VibrationDefault">Padrão</string>
     <string name="SmartNotifications">Notificações Inteligentes</string>
     <string name="SmartNotificationsDisabled">Desativado</string>
     <string name="SmartNotificationsInfo">Tocar no máximo %1$s a cada %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s às %2$s</string>
     <!--update text-->
-    <string name="updateText">Seu Telegram para Android acaba de ser atualizado. Novo na versão 3.0:\n\n- Abas dedicadas para cada um dos pacotes customizados de stickers no painel de stickers. Adicione stickers customizados como https://telegram.me/addstickers/Animals\n- Nova API de bots, gratuita para todos. Se você for um engenheiro, crie seus próprios bots como @quiz_bot ou @hot_or_bot usando o @botfather. Leia mais em https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram para Android foi atualizado. Novo na versão 3.1:\n\n- Busca por mensagens dentro de um chat específico.\n-Menu de anexo totalmente redesenhado. Envie contatos e arquivos de áudio diretamente do menu de anexo.\n- Reprodução melhorada de mídia dentro do aplicativo (YouTube, Vimeo, SoundCloud, etc.), novo player para grandes arquivos de áudio.\n\nMais sobre a atualização:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index a544d799b..02883ee2d 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -65,6 +65,11 @@
     <string name="YouCreatedBroadcastList">Você criou uma lista de transmissão</string>
     <string name="AddRecipient">Adicionar destinatário</string>
     <string name="KickFromBroadcast">Remover da lista de transmissão</string>
+    <!--audio view-->
+    <string name="NoAudio">Por favor, adicione arquivos à biblioteca de música de seu dispositivo para vê-los aqui.</string>
+    <string name="AttachMusic">Música</string>
+    <string name="AudioUnknownArtist">Artista desconhecido</string>
+    <string name="AudioUnknownTitle">Título desconhecido</string>
     <!--documents view-->
     <string name="SelectFile">Selecione um Arquivo</string>
     <string name="FreeOfTotal">Disponível %1$s de %2$s</string>
@@ -121,6 +126,7 @@
     <string name="DeleteThisChat">Apagar este chat</string>
     <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
     <string name="SaveToDownloads">Salvar em downloads</string>
+    <string name="SaveToMusic">Salvar em músicas</string>
     <string name="ShareFile">Compartilhar</string>
     <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
     <string name="UnsupportedAttachment">Anexo não suportado</string>
@@ -347,6 +353,7 @@
     <string name="RepeatDisabled">Desativado</string>
     <string name="InChatSound">Sons no Chat</string>
     <string name="SoundDefault">Padrão</string>
+    <string name="VibrationDefault">Padrão</string>
     <string name="SmartNotifications">Notificações Inteligentes</string>
     <string name="SmartNotificationsDisabled">Desativado</string>
     <string name="SmartNotificationsInfo">Tocar no máximo %1$s a cada %2$s</string>
@@ -827,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s às %2$s</string>
     <!--update text-->
-    <string name="updateText">Seu Telegram para Android acaba de ser atualizado. Novo na versão 3.0:\n\n- Abas dedicadas para cada um dos pacotes customizados de stickers no painel de stickers. Adicione stickers customizados como https://telegram.me/addstickers/Animals\n- Nova API de bots, gratuita para todos. Se você for um engenheiro, crie seus próprios bots como @quiz_bot ou @hot_or_bot usando o @botfather. Leia mais em https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram para Android foi atualizado. Novo na versão 3.1:\n\n- Busca por mensagens dentro de um chat específico.\n-Menu de anexo totalmente redesenhado. Envie contatos e arquivos de áudio diretamente do menu de anexo.\n- Reprodução melhorada de mídia dentro do aplicativo (YouTube, Vimeo, SoundCloud, etc.), novo player para grandes arquivos de áudio.\n\nMais sobre a atualização:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 903c5d2cd..782c27627 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 
+
 <resources>
     <string name="AppName">Telegram</string>
     <string name="LanguageName">English</string>
@@ -64,6 +65,11 @@
     <string name="YouCreatedBroadcastList">You created a broadcast list</string>
     <string name="AddRecipient">Add recipient</string>
     <string name="KickFromBroadcast">Remove from broadcast list</string>
+    <!--audio view-->
+    <string name="NoAudio">Please add files to the music library on your device to see them here.</string>
+    <string name="AttachMusic">Music</string>
+    <string name="AudioUnknownArtist">Unknown artist</string>
+    <string name="AudioUnknownTitle">Unknown title</string>
     <!--documents view-->
     <string name="SelectFile">Select File</string>
     <string name="FreeOfTotal">Free %1$s of %2$s</string>
@@ -120,6 +126,7 @@
     <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">SLIDE TO CANCEL</string>
     <string name="SaveToDownloads">Save to downloads</string>
+    <string name="SaveToMusic">Save to music</string>
     <string name="ShareFile">Share</string>
     <string name="ApplyLocalizationFile">Apply localization file</string>
     <string name="UnsupportedAttachment">Unsupported attachment</string>
@@ -346,6 +353,7 @@
     <string name="RepeatDisabled">Off</string>
     <string name="InChatSound">In-Chat Sounds</string>
     <string name="SoundDefault">Default</string>
+    <string name="VibrationDefault">Default</string>
     <string name="SmartNotifications">Smart Notifications</string>
     <string name="SmartNotificationsDisabled">Disabled</string>
     <string name="SmartNotificationsInfo">Sound at most %1$s within %2$s</string>
@@ -826,6 +834,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
     <!--update text-->
-    <string name="updateText">Telegram for Android has been updated. New in version 3.0:\n\n- Dedicated tabs for each one of your custom sticker sets in the sticker panel. Add custom stickers like https://telegram.me/addstickers/Animals\n- New bot API, free for everyone. If you\'re an engineer, create your own bots for games, services or integrations. Learn more at https://telegram.org/blog/bot-revolution</string>
-    <string name="updateBuild">551</string>
+    <string name="updateText">Telegram for Android has been updated. New in version 3.1:\n\n- Search for messages inside a specific chat.\n- Fully redesigned attachment menu. Send contacts and audio files straight from the attachment menu.\n- Improved in-app media playback (YouTube, Vimeo, SoundCloud etc.), new player for large audio files.\n\nMore about this update:\nhttps://telegram.org/blog/search-and-media</string>
+    <string name="updateBuild">577</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index 56449ed43..444570aed 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -73,8 +73,8 @@
     <!--ALERT DIALOG-->
 
     <style name="DialogNoAnimation">
-        <item name="android:windowEnterAnimation">@null</item>
-        <item name="android:windowExitAnimation">@null</item>
+        <item name="android:windowEnterAnimation">@anim/no_animation</item>
+        <item name="android:windowExitAnimation">@anim/no_animation</item>
     </style>
 
 </resources>
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 27fd29715..89ecdcf96 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
