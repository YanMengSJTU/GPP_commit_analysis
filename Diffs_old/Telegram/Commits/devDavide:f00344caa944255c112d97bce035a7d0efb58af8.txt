diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
index 1bb9d60f0..d91d68c6e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
@@ -28,44 +28,27 @@
 
     private final List<TextOption> options;
     private final LayoutInflater inflater;
-    private final EditMode mode;
-    private final int lastIdx;
-
-    private enum EditMode{
-        /**
-         * It is possible to add  new option ad to delete as well
-         */
-        NEW_DECISION,
-
-        /**
-         * no edit action is allowed, no delete, no add
-         */
-        READ_ONLY,
-
-        /**
-         * it is only possible to add new option, it is not possible to modify or delete the existing
-         */
-        ALLOW_ADD_NEW_OPTION;
-    }
+    private int lastIdx;
+    private final boolean editable;
+    private List<TextOption> deletedOptions;
+
 
     public OptionsAdapter(Context context) {
-        this(context,new ArrayList<TextOption>(), EditMode.NEW_DECISION);
+        this(context,new ArrayList<TextOption>(),true);
         // put one first empty option
         options.add(new TextOption());
     }
 
     public OptionsAdapter(Context context, List<TextOption> options, boolean editable){
-        this(context,options, editable ? EditMode.ALLOW_ADD_NEW_OPTION : EditMode.READ_ONLY);
-    }
-
-    private OptionsAdapter(Context context, List<TextOption> options, EditMode mode){
         super(context, LAYOUT_RES_ID);
         this.options = options;
+        this.deletedOptions  = new ArrayList<>();
         this.lastIdx = options.size() -1;
-        this.mode =mode;
+        this.editable =editable;
         inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
     }
 
+
     /**
      * @return the list of the selected options
      * @throws PollgramException if some value is invalid
@@ -86,6 +69,13 @@ private OptionsAdapter(Context context, List<TextOption> options, EditMode mode)
         return out;
     }
 
+    public List<Option> getDeletedOptions() {
+        List<Option> out = new ArrayList<Option>();
+        for (TextOption to : deletedOptions)
+            out.add(to);
+        return out;
+    }
+
     @Override
     public int getCount() {
         return options.size() + 1;
@@ -108,8 +98,7 @@ public void onClick(View v) {
                     }
                 }
             });
-            if (EditMode.READ_ONLY.equals(mode))
-                buttonAdd.setEnabled(false);
+            buttonAdd.setEnabled(editable);
         } else {
             // Create view for item
             rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
@@ -126,6 +115,10 @@ public void onClick(View v) {
             deleteItem.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
+                    if  (position <= lastIdx) {
+                        lastIdx--;
+                        deletedOptions.add(options.get(position));
+                    }
                     options.remove(position);
                     notifyDataSetChanged();
                 }
@@ -159,24 +152,10 @@ public void afterTextChanged(Editable s) {
                 }
             });
 
-            boolean enable;
-            switch (mode){
-                case NEW_DECISION:
-                    enable = true;
-                    break;
-                case READ_ONLY:
-                     enable = false;
-                    break;
-                case ALLOW_ADD_NEW_OPTION:
-                    enable = position > lastIdx;
-                    break;
-                default:
-                    enable = false;
-
-            }
-            edTitle.setEnabled(enable);
-            edLongDescription.setEnabled(enable);
-            deleteItem.setVisibility(enable ? View.VISIBLE : View.INVISIBLE);
+            boolean enableFields = position > lastIdx && editable;
+            edTitle.setEnabled(enableFields);
+            edLongDescription.setEnabled(enableFields);
+            deleteItem.setVisibility(editable ? View.VISIBLE : View.INVISIBLE);
 
         }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 31c8af2f7..69415b0ab 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -142,13 +142,13 @@ public void onClick(View v) {
 
 
         final int positiveVoteCount = usersDecisionVotes.getPositiveVoteCount(o);
-        final int userThatVoteCount = usersDecisionVotes.getUserThatVoteCount();
+        final int negativeVoteCount = usersDecisionVotes.getNegativeVoteCount(o);
         optionVoteCount.setText(formatVoteCount(positiveVoteCount));
         //noinspection ResourceType
         starImageView.setVisibility(usersDecisionVotes.isWinningOption(o) ? View.VISIBLE : View.INVISIBLE);
 
         StackedBar stackedBarStackedBar = new StackedBar(getContext(), usersDecisionVotes.getUsers().size(),
-                positiveVoteCount, userThatVoteCount);
+                positiveVoteCount, negativeVoteCount);
         stackedBarContainer.addView(stackedBarStackedBar, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);
         optionCheckBox.setChecked(vote.isVote() != null && vote.isVote());
 
@@ -161,7 +161,7 @@ public void onClick(View v) {
                 bundle.putLong(OptionDetailFragment.PAR_DECISION_ID, o.getDecisionId());
                 bundle.putIntArray(OptionDetailFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
                 bundle.putInt(OptionDetailFragment.PAR_POSITIVE_VOTE_COUNT, positiveVoteCount);
-                bundle.putInt(OptionDetailFragment.PAR_USER_THAT_VOTE_COUNT, userThatVoteCount);
+                bundle.putInt(OptionDetailFragment.PAR_NEGATIVE_VOTE_COUNT, negativeVoteCount);
 
                 baseFragment.presentFragment(new OptionDetailFragment(bundle));
             }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
index b6a62cb98..a46efbb15 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
@@ -126,13 +126,17 @@ public Vote getVotes(int userId, Option option){
     public void setVote(int userID, Option option, Vote vote){
         voteMap.put(new UserIdOptionKey(userID,option.getId()), vote);
         // update cache
-        Integer positiveVoteCout = calculateVoteCount(option);
+        Integer positiveVoteCout = calculateVoteCount(option, true);
         cachedPositiveVoteCount.put(option, positiveVoteCout);
+        cachedNegativeVoteCount.put(option, calculateVoteCount(option,false));
+
         Collections.sort(options, optionsComparator);
         maxVote = Math.max(maxVote, positiveVoteCout);
     }
 
     private final Map<Option, Integer> cachedPositiveVoteCount = new HashMap<>();
+    private final Map<Option, Integer> cachedNegativeVoteCount = new HashMap<>();
+
 
     /**
      * @param option
@@ -143,17 +147,31 @@ public int getPositiveVoteCount(Option option) {
         if (count != null)
             return count;
 
-        count = calculateVoteCount(option);
+        count = calculateVoteCount(option,true);
         cachedPositiveVoteCount.put(option,count);
         return count;
     }
 
-    private int calculateVoteCount(Option option) {
+    /**
+     * @param option
+     * @return the number of positive count for option in index optionIndex
+     */
+    public int getNegativeVoteCount(Option option) {
+        Integer count = cachedNegativeVoteCount.get(option);
+        if (count != null)
+            return count;
+
+        count = calculateVoteCount(option,false);
+        cachedNegativeVoteCount.put(option,count);
+        return count;
+    }
+
+    private int calculateVoteCount(Option option, boolean positive) {
         int count = 0;
         for (UserIdOptionKey key : voteMap.keySet()){
             if (option.getId() == key.getOptionId()){
                 Vote v = voteMap.get(key);
-                if (v.isVote() != null && v.isVote())
+                if (v.isVote() != null && v.isVote() == positive)
                     count++;
             }
         }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index 6553734ef..92e7145a6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -94,6 +94,12 @@
      */
     void delete(Decision decision);
 
+    /**
+     * Delete permanently an option and its votes
+     * @param option
+     */
+    void delete(Option option);
+
     /**
      *
      * @param groupChatId
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 90f5c473c..ec8202d98 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -100,6 +100,24 @@ public int getUserVoteCount(Decision decision) {
         }
     }
 
+    @Override
+    public void delete(Option option) {
+        Log.d(LOG_TAG, "Delete option ["+option+"]");
+        SQLiteDatabase db = helper.getWritableDatabase();
+        String[] optionIdPar = new String[]{Long.toString(option.getId())};
+        try {
+            db.delete(PGSqlLiteHelper.T_Vote.TABLE_NAME,
+                    PGSqlLiteHelper.T_Vote.FK_OPTION + " = ? ",
+                    optionIdPar);
+            db.delete(PGSqlLiteHelper.T_TextOption.TABLE_NAME,
+                    PGSqlLiteHelper.T_TextOption.ID + " =  ? ",
+                    optionIdPar);
+        } finally {
+            if (db != null)
+                db.close();
+        }
+    }
+
     @Override
     public void delete(Decision decision) {
         Log.d(LOG_TAG, "Delete all decision data for decision["+decision+"]");
@@ -152,7 +170,7 @@ public WinningOption getWinningOption(Decision decision) {
                     new String[]{Long.toString(decision.getId()), PGSqlLiteHelper.toString(true),
                             Long.toString(decision.getId()), PGSqlLiteHelper.toString(true)});
             if (!c.moveToFirst())
-                return null;
+                return new WinningOption(0, new ArrayList<Option>());
             else {
                 List<Option> options = new ArrayList<>();
                 int voteCount = c.getInt(c.getColumnIndex(voteCountFieldName));
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index 0f8b4bcac..0609e9d1f 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -31,13 +31,14 @@
         CLOSE_DECISION(R.string.MessageType_CLOSE_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x9A, (byte) 0xAB), // no entry sign
         REOPEN_DECISION(R.string.MessageType_REOPEN_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x94, (byte) 0x84),    //ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS
         DELETE_DECISION(R.string.MessageType_DELETE_DECISION, (byte) 0xE2, (byte) 0x9D, (byte) 0x8C),    //CROSS MARK
-        ADD_OPTION(R.string.MessageType_ADD_OPTION,(byte)0xE2, (byte)0x9E, (byte)0x95);// heavy plus sign
+        ADD_OPTIONS(R.string.MessageType_ADD_OPTIONS,(byte)0xE2, (byte)0x9E, (byte)0x95),// heavy plus sign
+        DELETE_OPTIONS(R.string.MessageType_DELTE_OPTIONS, (byte)0xE2, (byte)0x9E, (byte)0x96); //	heavy minus sign
 
         private final String emoji;
         private final int descrStringRes;
         private String descriptionString;
 
-        private MessageType(int descrStringRes, byte... emojiBytes) {
+        MessageType(int descrStringRes, byte... emojiBytes) {
             this.emoji = EmojiUtils.getEmojiAsString(emojiBytes);
             this.descrStringRes = descrStringRes;
         }
@@ -114,13 +115,21 @@ public String getDescription() {
     String buildNotifyNewDecision(Decision decision, List<Option> options);
 
     /**
-     * build a message for notifying a that some option were added to a decision
+     * build a message for notifying a that some option has been added to a decision
      * @param decision
      * @param newOptions the new options added
      * @return the message ready to be sent
      */
     String buildAddOptions(Decision decision, List<Option> newOptions);
 
+    /**
+     * build a message for notifying a that some option has been deleted from a decision
+     * @param decision
+     * @param deleteOptions
+     * @return
+     */
+    String buildDeleteOptions(Decision decision, List<Option> deleteOptions);
+
     /**
      * build a message in order to remind to userAsString, that he must vote for the decision
      * @param userAsString
@@ -195,8 +204,17 @@ public DecisionOptionData(@NonNull Decision decision, @NonNull List<Option> opti
      * @param userId message owner
      * @return the decision and its options
      */
-    DecisionOptionData getNewOptionAdded(String msg, long currentChat, int userId) throws PollgramParseException;
+    DecisionOptionData getAddedOption(String msg, long currentChat, int userId) throws PollgramParseException;
 
+    /**
+     * Only if getMessageType(text) == MessageType_DELTE_OPTIONS
+     * Return the new option that has been deleted for the decision
+     * @param text
+     * @param groupChatId
+     * @param userId
+     * @return
+     */
+    DecisionOptionData getDeletedOption(String text, long groupChatId, int userId) throws PollgramParseException;
 
     /**
      * Return value for getCloseDecision
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 8d562250e..77dd27158 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -1,6 +1,8 @@
 package org.pollgram.decision.service;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.Spannable;
 import android.util.Log;
 
@@ -239,17 +241,29 @@ public String buildNotifyNewDecision(Decision decision, List<Option> options) {
         return buildMessage(MessageType.NEW_DECISION, body.toString());
     }
 
-
     @Override
     public String buildAddOptions(Decision decision, List<Option> options) {
+        String body = buildAddDeleteOptionsMessage(decision,options,
+                R.string.tmsg_AddOptionPrefix, R.string.tmsg_AddOptionSuffix);
+        return buildMessage(MessageType.ADD_OPTIONS, body);
+    }
+
+    @Override
+    public String buildDeleteOptions(Decision decision, List<Option> deleteOptions) {
+        String body = buildAddDeleteOptionsMessage(decision,deleteOptions,
+                R.string.tmsg_DeleteOptionPrefix, R.string.tmsg_DeleteOptionSuffix);
+        return buildMessage(MessageType.DELETE_OPTIONS, body);
+    }
+
+    private String buildAddDeleteOptionsMessage(Decision decision, List<Option> deleteOptions, int prefixStr, int suffixStr){
         StringBuilder body = new StringBuilder();
-        body.append(getResString(R.string.tmsg_AddOptionPrefix));
+        body.append(getResString(prefixStr));
         body.append(NEW_LINE);
         body.append(format(decision));
         body.append(' ');
-        body.append(getResString(R.string.tmsg_AddOptionSuffix));
-        addOptionsToMsg(options, body);
-        return buildMessage(MessageType.ADD_OPTION, body.toString());
+        body.append(getResString(suffixStr));
+        addOptionsToMsg(deleteOptions, body);
+        return body.toString();
     }
 
     private void addOptionsToMsg(List<Option> options, StringBuilder body) {
@@ -413,7 +427,17 @@ public DecisionOptionData getNewDecision(String msg, long currentChat, int userI
 
 
     @Override
-    public DecisionOptionData getNewOptionAdded(String msg, long currentChat, int userId) throws PollgramParseException {
+    public DecisionOptionData getAddedOption(String msg, long currentChat, int userId) throws PollgramParseException {
+        return getAddDeleteOptionFromDecision(msg, currentChat, userId);
+    }
+
+    @Override
+    public DecisionOptionData getDeletedOption(String text, long groupChatId, int userId) throws PollgramParseException {
+        return getAddDeleteOptionFromDecision(text, groupChatId, userId);
+    }
+
+    @NonNull
+    private DecisionOptionData getAddDeleteOptionFromDecision(String msg, long currentChat, int userId) throws PollgramParseException {
         Decision decision;
         List<Option> optionList = new ArrayList<>();
         try {
@@ -434,9 +458,9 @@ public DecisionOptionData getNewOptionAdded(String msg, long currentChat, int us
         }
         Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] optionList[" + optionList + "]");
         return new DecisionOptionData(decision, optionList);
-
     }
 
+
     private void addOption2List(List<Option> optionList, StringTokenizer strTok) {
         while (strTok.hasMoreTokens()){
             strTok.nextToken();//skip this token
@@ -491,6 +515,8 @@ public Decision getDeleteDecision(String text, long groupChatId) throws Pollgram
     @Override
     public Decision getReopenDecision(String text, long groupChatId) throws PollgramParseException {
         Decision d = getDecisionInDeleteOrReopenMessage(text,groupChatId);
+        if (d ==null)
+            throw new PollgramParseException( "Decision not found for message[" + text + "]");
         Log.d(LOG_TAG, "getReopenDecision Decision["+d+"]");
         return d;
     }
@@ -501,15 +527,13 @@ public Decision getReopenDecision(String text, long groupChatId) throws Pollgram
      * @param groupChatId
      * @return
      */
-    private Decision getDecisionInDeleteOrReopenMessage(String msg, long groupChatId) throws PollgramParseException {
+    private @Nullable Decision getDecisionInDeleteOrReopenMessage(String msg, long groupChatId) throws PollgramParseException {
         Decision decision;
         try {
             StringTokenizer strTok = new EscapeStringTokenizer(msg);
             strTok.nextToken(); // skipt this token
             String decisionTitle = strTok.nextToken();
             Decision d = pollgramDAO.getDecision(decisionTitle, groupChatId);
-            if (d ==null)
-                throw new PollgramParseException("Decision not found for title["+decisionTitle+"] and groupChatId["+groupChatId+"]");
             return d;
         } catch (NoSuchElementException e){
             Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
@@ -526,7 +550,8 @@ private int getDecisionTitleStartIdx(MessageType type, String message){
             case DELETE_DECISION:
             case NEW_DECISION:
             case REOPEN_DECISION:
-            case ADD_OPTION:
+            case ADD_OPTIONS:
+            case DELETE_OPTIONS:
                 return message.indexOf(QUOTE_CHAR);
         }
         return  -1;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index de94facce..d3c300202 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -20,15 +20,29 @@
  */
 public interface PollgramService {
 
-
     UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
 
     UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users);
 
+    /**
+     * remind the user to vote for the passed decision
+     * @param decision
+     * @param user
+     */
     void remindUserToVote(Decision decision, TLRPC.User user);
 
+    /**
+     * notify the creation of a new decision
+     * @param decision
+     * @param options
+     */
     void notifyNewDecision(Decision decision, List<Option> options);
 
+    /**
+     * Notify a set of votes for the passed decision
+     * @param decision
+     * @param votes2Save
+     */
     void notifyVote(Decision decision, Collection<Vote> votes2Save);
 
     void notifyClose(Decision decision);
@@ -39,6 +53,8 @@
 
     void notifyNewOptions(Decision decision, List<Option> newOptions);
 
+    void notifyDeleteOptions(Decision decision, List<Option> deleteOptions);
+
     /**
      * @param message
      * @return whether the messsage is a pollgram transaction message
@@ -103,4 +119,5 @@ Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messa
      */
     List<MessageObject> getUnParsedMessages(final long dialog_id, Map<Integer, MessageObject> dialogMessagesByIds,
                                             List<MessageObject> excludeMessages);
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 2f900202a..23fb6c0d6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -142,10 +142,23 @@ public void notifyNewDecision(Decision decision, List<Option> options) {
     public void notifyNewOptions(Decision decision, List<Option> newOptions) {
         Log.d(LOG_TAG, "notifyNewOptions decision[" + decision + "] newoptions[" + newOptions + "]");
         saveNewOptions(decision, newOptions);
-        String message = messageManager.buildAddOptions(decision,newOptions);
+        String message = messageManager.buildAddOptions(decision, newOptions);
         sendMessage(decision.getChatId(), message);
     }
 
+    @Override
+    public void notifyDeleteOptions(Decision decision, List<Option> deleteOptions) {
+        Log.d(LOG_TAG, "notifyDeleteOptions decision[" + decision + "] deleteOptions[" + deleteOptions + "]");
+        deleteOptions(deleteOptions);
+        String message = messageManager.buildDeleteOptions(decision, deleteOptions);
+        sendMessage(decision.getChatId(), message);
+    }
+
+    private void deleteOptions(List<Option> deleteOptions) {
+        for(Option o : deleteOptions)
+            pollgramDAO.delete(o);
+    }
+
     private void saveNewOptions(Decision decision, List<Option> newOptions) {
         for(Option o : newOptions) {
             if (o.getDecisionId() == DBBean.ID_NOT_SET) {
@@ -232,11 +245,11 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     }
                     break;
                 }
-                case ADD_OPTION:{
-                    PollgramMessagesManager.DecisionOptionData resut = messageManager.getNewOptionAdded(text,
+                case ADD_OPTIONS:{
+                    PollgramMessagesManager.DecisionOptionData resut = messageManager.getAddedOption(text,
                             groupChatId, userId);
                     if (resut == null){
-                        throw new PollgramParseException("Decision not found for NEW_DECISION messsage");
+                        throw new PollgramParseException("Decision not found for "+msgType+" messsage");
                     }
                     for (Option o : resut.optionList) {
                         o.setDecisionId(resut.decision.getId());
@@ -244,6 +257,18 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     }
                     break;
                 }
+                case DELETE_OPTIONS:{
+                    PollgramMessagesManager.DecisionOptionData resut = messageManager.getDeletedOption(text,
+                            groupChatId, userId);
+                    if (resut == null){
+                        throw new PollgramParseException("Decision not found for "+msgType+" messsage");
+                    }
+                    for (Option o : resut.optionList) {
+                        pollgramDAO.delete(o);
+                    }
+                    break;
+                }
+
                 case REOPEN_DECISION: {
                     Decision decision = messageManager.getReopenDecision(text, groupChatId);
                     decision.setOpen(true);
@@ -258,7 +283,8 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                 }
                 case DELETE_DECISION: {
                     Decision decision = messageManager.getDeleteDecision(text, groupChatId);
-                    pollgramDAO.delete(decision);
+                    if (decision != null)
+                        pollgramDAO.delete(decision);
                     break;
                 }
                 case REMIND_TO_VOTE: {
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
index 0f227849b..f6950a1f7 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
@@ -45,7 +45,7 @@
     private PollgramDAO pollgramDAO;
     private PollgramService pollgramService;
 
-    private OptionsAdapter newOptionAdapter;
+    private OptionsAdapter optionsAdapter;
     private Decision decision;
     private List<TextOption> options;
 
@@ -69,9 +69,9 @@ public boolean onFragmentCreate() {
 
 
     @Override
-    public View createView(Context context) {
+    public View createView(final Context context) {
         // init
-        newOptionAdapter = new OptionsAdapter(context, options, decision.isEditable());
+        optionsAdapter = new OptionsAdapter(context, options, decision.isEditable());
 
         fragmentView = new SizeNotifierFrameLayout(context);
         ActionBarMenu menu = actionBar.createMenu();
@@ -90,22 +90,38 @@ public void onItemClick(int id) {
                         finishFragment();
                         break;
                     case SAVE_MENU_ITEM_ID:
-                        final List<Option> options;
+                        final List<Option> newOptions;
+                        final List<Option> deletedOptions;
                         try {
-                            options = newOptionAdapter.getOptions();
+                            newOptions = optionsAdapter.getOptions();
                         } catch (PollgramException e) {
                             Log.w(LOG_TAG, "Error in getOption", e);
                             Toast.makeText(getParentActivity(), e.getMessage(), Toast.LENGTH_LONG).show();
                             return;
                         }
+                        deletedOptions = optionsAdapter.getDeletedOptions();
+                        Log.i(LOG_TAG, "option added["+newOptions+"] option deleted["+deletedOptions+"]");
+
+                        String message;
+
+                        if (deletedOptions.size() == 0) {
+                            if (newOptions.size() == 0){
+                                Toast.makeText(context,R.string.nothingToSave,Toast.LENGTH_SHORT);
+                                return;
+                            }
+                            message = context.getString(R.string.addOptionToDecisionQuestion,
+                                    newOptions.size(), decision.getTitle());
+                        } else
+                            message = context.getString(R.string.addRemoveOptionToDecisionQuestion,
+                                    newOptions.size(), deletedOptions.size(), decision.getTitle());
+
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(getParentActivity().getString(R.string.addOptionToDecisionQuestion,
-                                options.size(), decision.getTitle()));
+                        builder.setMessage(message);
                         builder.setPositiveButton(R.string.yes,
                                 new DialogInterface.OnClickListener() {
                                     @Override
                                     public void onClick(DialogInterface dialog, int which) {
-                                        saveDecision(options);
+                                        saveDecision(newOptions,deletedOptions);
                                     }
                                 }).setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
                             @Override
@@ -124,14 +140,19 @@ public void onClick(DialogInterface dialog, int which) {
 
         ViewGroup myView = (ViewGroup) layoutInflater.inflate(R.layout.edit_optios_layout, (ViewGroup) fragmentView);
         ListView newOptionListView = (ListView) myView.findViewById(R.id.edit_option_list_view);
-        newOptionListView.setAdapter(newOptionAdapter);
+        newOptionListView.setAdapter(optionsAdapter);
 
         return fragmentView;
     }
 
 
-    private void saveDecision(List<Option> options) {
-        pollgramService.notifyNewOptions(decision, options);
+    private void saveDecision(List<Option> newOptions, List<Option> deleteOptions) {
+        if (newOptions.size() > 0)
+            pollgramService.notifyNewOptions(decision, newOptions);
+
+        if (deleteOptions.size() > 0)
+            pollgramService.notifyDeleteOptions(decision, deleteOptions);
+
         Toast.makeText(getParentActivity(), R.string.decisionSaved, Toast.LENGTH_LONG).show();
         super.finishFragment();
         return;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
index ac4f31524..f88e59075 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
@@ -27,7 +27,7 @@
     public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
     public static final String PAR_OPTION_ID = "PAR_OPTION_ID";
     public static final String PAR_POSITIVE_VOTE_COUNT = "PAR_POSITIVE_VOTE_COUNT";
-    public static final String PAR_USER_THAT_VOTE_COUNT = "PAR_USER_THAT_VOTE_COUNT";
+    public static final String PAR_NEGATIVE_VOTE_COUNT = "PAR_NEGATIVE_VOTE_COUNT";
 
     private static final String LOG_TAG = "OptionDetailFrame";
 
@@ -51,10 +51,10 @@ public boolean onFragmentCreate() {
         UsersDecisionVotes usersDecisionVotes = PollgramFactory.getPollgramService().getUsersDecisionVotes(decisionId, members);
         option = (TextOption) usersDecisionVotes.getOption(optionId);
 
-        voteCount = getArguments().getInt(PAR_USER_THAT_VOTE_COUNT);
         membersCount = members.length;
+        negativeVoteCount = getArguments().getInt(PAR_NEGATIVE_VOTE_COUNT);
         positiveVoteCount = getArguments().getInt(PAR_POSITIVE_VOTE_COUNT);
-        negativeVoteCount = voteCount- positiveVoteCount;
+        voteCount = negativeVoteCount + positiveVoteCount;
         missingVoteCount = membersCount - voteCount;
 
         return super.onFragmentCreate();
@@ -88,12 +88,12 @@ public void onItemClick(int id) {
         LinearLayout stackedBarContainer = (LinearLayout)myView.findViewById(R.id.option_detail_stacked_bar_layout_container);
 
         StackedBar stackedBar = new StackedBar(context, membersCount, positiveVoteCount ,voteCount);
-        StackedBar.Percs percs = stackedBar.getPercs();
+        StackedBar.Percentages percentages = stackedBar.getPercentages();
         edTitle.setText(option.getTitle());
         edLongDesc.setText(option.getLongDescription());
-        tvMissing.setText(context.getString(R.string.missingVoteDesc, missingVoteCount, percs.emptyPerc * 100 ));
-        tvPositive.setText(context.getString(R.string.positiveVoteDesc, positiveVoteCount, percs.positivePerc * 100));
-        tvNegative.setText(context.getString(R.string.negativeVoteDesc, negativeVoteCount, percs.negativePerc * 100));
+        tvMissing.setText(context.getString(R.string.missingVoteDesc, missingVoteCount, percentages.emptyPerc * 100 ));
+        tvPositive.setText(context.getString(R.string.positiveVoteDesc, positiveVoteCount, percentages.positivePerc * 100));
+        tvNegative.setText(context.getString(R.string.negativeVoteDesc, negativeVoteCount, percentages.negativePerc * 100));
 
         stackedBar.setText("123456789");
         stackedBarContainer.addView(stackedBar, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
index fa925d66d..fc3c6d500 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
@@ -18,7 +18,7 @@
     static final int POSITIVE_VOTE_COLOR = Color.GREEN;
     static final int NEGATIVE_VOTE_COLOR = Color.RED;
 
-    private final Percs percs;
+    private final Percentages percentages;
     private final Paint paint;
     private float height;
     private float width;
@@ -27,12 +27,12 @@
     private float left;
     private float top;
 
-    static class Percs {
+    static class Percentages {
         protected final float positivePerc;
         protected final float emptyPerc;
         protected final float negativePerc;
 
-        private Percs(float emptyPerc, float positivePerc, float negativePerc) {
+        private Percentages(float emptyPerc, float positivePerc, float negativePerc) {
             this.positivePerc = positivePerc;
             this.emptyPerc = emptyPerc;
             this.negativePerc = negativePerc;
@@ -49,23 +49,23 @@ private void checkPerc() {
         }
     }
 
-    static Percs getPercs(int totalUserCount, int positiveVoteCount, int userThatVoteCount) {
+    static Percentages getPercentages(int totalUserCount, int positiveVoteCount, int negativeVoteCount) {
         if (totalUserCount == 0)
-            return new Percs(1, 0, 0);
+            return new Percentages(1, 0, 0);
 
-        float emptyPerc = (float) (totalUserCount - userThatVoteCount) / totalUserCount;
-        float positivePerc = (float) positiveVoteCount / totalUserCount;
-        float negativePerc = (float) (userThatVoteCount - positiveVoteCount) / totalUserCount;
-        return new Percs(emptyPerc, positivePerc, negativePerc);
+        float emptyPercentage = (float) (totalUserCount - (positiveVoteCount + negativeVoteCount)) / totalUserCount;
+        float positivePercentage = (float) positiveVoteCount / totalUserCount;
+        float negativePercentage = (float) negativeVoteCount / totalUserCount;
+        return new Percentages(emptyPercentage, positivePercentage, negativePercentage);
     }
 
-    public StackedBar(Context context, int totalUserCount, int positiveVoteCount, int userThatVoteCount) {
+    public StackedBar(Context context, int totalUserCount, int positiveVoteCount, int negativeVoteCount) {
         super(context);
 
         Log.d(LOG_TAG, "totalUserCount["+totalUserCount+"] positiveVoteCount["+ positiveVoteCount +"] " +
-                "userThatVoteCount["+userThatVoteCount+"]");
+                "negativeVoteCount["+negativeVoteCount+"]");
 
-        this.percs = getPercs(totalUserCount,positiveVoteCount,userThatVoteCount);
+        this.percentages = getPercentages(totalUserCount, positiveVoteCount, negativeVoteCount);
 
         padding = AndroidUtilities.dp(10);
         externalStroke = AndroidUtilities.dp(1);
@@ -73,8 +73,8 @@ public StackedBar(Context context, int totalUserCount, int positiveVoteCount, in
         paint = new Paint();
     }
 
-    public Percs getPercs() {
-        return percs;
+    public Percentages getPercentages() {
+        return percentages;
     }
 
     @Override
@@ -112,9 +112,9 @@ private void drawRect(Canvas canvas, float left, float top, float width, float h
 
         paint.setColor(POSITIVE_VOTE_COLOR);
         float myLeft = left;
-        float myTop = top + (height * percs.emptyPerc);
+        float myTop = top + (height * percentages.emptyPerc);
         myRight = left + width;
-        myBottom = myTop + (height * percs.positivePerc) ;
+        myBottom = myTop + (height * percentages.positivePerc) ;
         canvas.drawRect(myLeft, myTop, myRight, myBottom, paint);
 
         paint.setColor(NEGATIVE_VOTE_COLOR);
diff --git a/TMessagesProj/src/main/res/layout/decision_list_layout.xml b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
index bba905e2e..bd9e8b51a 100644
--- a/TMessagesProj/src/main/res/layout/decision_list_layout.xml
+++ b/TMessagesProj/src/main/res/layout/decision_list_layout.xml
@@ -17,8 +17,6 @@
         android:layout_toRightOf="@+id/decision_icon_container"
         android:layout_toEndOf="@+id/decision_icon_container" />
 
-
-
     <LinearLayout
         android:orientation="horizontal"
         android:layout_width="wrap_content"
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 9e11139ab..f34859af5 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1078,6 +1078,10 @@
     <!-- between Prefix and Suffix goes the decision title -->
     <string name="tmsg_AddOptionSuffix">le seguenti opzioni:</string>
 
+    <string name="tmsg_DeleteOptionPrefix">Ho cancellato dalla decisione</string>
+    <!-- between Prefix and Suffix goes the decision title -->
+    <string name="tmsg_DeleteOptionSuffix">le seguenti opzioni:</string>
+
     <!-- END of POLLGRAM transaction messages -->
 
     <!-- START MessageType descriptions -->
@@ -1087,7 +1091,8 @@
     <string name="MessageType_CLOSE_DECISION">Chiusura decisione</string>
     <string name="MessageType_REOPEN_DECISION">Riapertura decisione</string>
     <string name="MessageType_DELETE_DECISION">Cancellazione decisione</string>
-    <string name="MessageType_ADD_OPTION">Add options</string>
+    <string name="MessageType_ADD_OPTIONS">Aggiunta opzioni</string>
+    <string name="MessageType_DELTE_OPTIONS">Cancellazione opzioni</string>
     <!-- END MessageType descriptions -->
 
 
@@ -1135,6 +1140,7 @@
     <string name="emptyTitleOnLastOption">Prego selezionare un titolo per l\'ultima opzione.</string>
     <string name="saveDecisionQuestion">Salvare la decisione %1$s con %2$d \opzioni ?</string>
     <string name="addOptionToDecisionQuestion">Aggiungere %1$d opzioni alla decisione %2$s ?</string>
+    <string name="addRemoveOptionToDecisionQuestion">Sei sicuro di\naggiungere %1$d opzioni \ne rimuovere %2$d opzioni\n dalla decisione %3$s ?</string>
     <string name="you">te</string>
     <string name="closeDecisionQuestionPrefixSingle">Attenzione solo %1$d utente su %2$d ha votato.</string>
     <string name="closeDecisionQuestionPrefixMulti">Attenzione solo %1$d utenti su %2$d hanno votato.</string>
@@ -1148,6 +1154,7 @@
     <string name="showDecision">Mostra decisioni</string>
     <string name="editOptions">Gestione opzioni</string>
     <string name="addNewtOptionsTitle">Aggiungi nuove opzioni</string>
+    <string name="nothingToSave">Non ci sono modifiche da salvare.</string>
 
     <!-- END of Pollgram text -->
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index ed1a450a8..0594ad995 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1074,6 +1074,10 @@
     <!-- between Prefix and Suffix goes the decision title -->
     <string name="tmsg_AddOptionSuffix">the following options:</string>
 
+    <string name="tmsg_DeleteOptionPrefix">I deleted from the decision</string>
+    <!-- between Prefix and Suffix goes the decision title -->
+    <string name="tmsg_DeleteOptionSuffix">the following options:</string>
+
     <!-- END of POLLGRAM transaction messages -->
 
     <!-- START MessageType descriptions -->
@@ -1083,7 +1087,9 @@
     <string name="MessageType_CLOSE_DECISION">Close decision</string>
     <string name="MessageType_REOPEN_DECISION">Reopen decision</string>
     <string name="MessageType_DELETE_DECISION">Delete decision</string>
-    <string name="MessageType_ADD_OPTION">Add options</string>
+    <string name="MessageType_ADD_OPTIONS">Add options</string>
+    <string name="MessageType_DELTE_OPTIONS">Delete options</string>
+
     <!-- END MessageType descriptions -->
 
 
@@ -1130,7 +1136,8 @@
     <string name="emptyTitleOnLastOption">Please select a title for the last option.</string>
     <string name="you">you</string>
     <string name="saveDecisionQuestion">Save decision %1$s with options ?</string>
-    <string name="addOptionToDecisionQuestion">Add %1$d  options to decision %2$s ?</string>
+    <string name="addOptionToDecisionQuestion">Are you sure to add %1$d options to decision %2$s ?</string>
+    <string name="addRemoveOptionToDecisionQuestion">Are you sure to:\nAdd %1$d option\nand remove %2$d options\nfrom the decision %3$s ?</string>
     <string name="closeDecisionQuestionPrefixSingle">Only %1$d user out of %2$d voted yet.</string>
     <string name="closeDecisionQuestionPrefixMulti">Only %1$d users out of %2$d voted yet.</string>
     <string name="closeDecisionQuestionSuffix">\nAfter closing the decision it will be no longer possible for other users to vote, unless the decision will be reopened.\nAre you sure to close this decision ?</string>
@@ -1143,6 +1150,7 @@
     <string name="showDecision">Show decisions</string>
     <string name="editOptions">Manage options</string>
     <string name="addNewtOptionsTitle">Add new options</string>
+    <string name="nothingToSave">There are no changes to save.</string>
 
     <!-- END of Pollgram text -->
 
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index f4e96076e..e40ea7974 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -232,15 +232,36 @@ public void testAddOptions() throws  PollgramParseException {
         newOptions.add(new TextOption("options 5", "option 5 desc it's even better", decision.getId()));
         String message = messageManager.buildAddOptions(decision, newOptions);
         PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
-        Assert.assertEquals(PollgramMessagesManager.MessageType.ADD_OPTION, type);
+        Assert.assertEquals(PollgramMessagesManager.MessageType.ADD_OPTIONS, type);
         assertAddOptions(message, decision, newOptions);
         assertAddOptions(messageManager.reformatMessage(message), decision, newOptions);
     }
 
     private void assertAddOptions(String message, Decision decision, List<Option> newOptions) throws PollgramParseException {
-        PollgramMessagesManager.DecisionOptionData result = messageManager.getNewOptionAdded(message, chat.id, user.id);
-        Assert.assertEquals(decision,result.decision);
+        PollgramMessagesManager.DecisionOptionData result = messageManager.getAddedOption(message, chat.id, user.id);
+        Assert.assertEquals(decision, result.decision);
         Assert.assertEquals(newOptions, result.optionList);
     }
 
+    @Test
+    public void testDeleteOptions() throws  PollgramParseException {
+        List<Option> optionToDelte = new ArrayList<>();
+        List<Option> decisionOptions = dao.getOptions(decision);
+        for (int i = 0; i< decisionOptions.size() ; i++){
+            if (i % 2 == 0)
+                optionToDelte.add(decisionOptions.get(i));
+        }
+        String message = messageManager.buildDeleteOptions(decision, optionToDelte);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(PollgramMessagesManager.MessageType.DELETE_OPTIONS, type);
+        assertDeleteOptions(message, decision, optionToDelte);
+        assertDeleteOptions(messageManager.reformatMessage(message), decision, optionToDelte);
+    }
+
+    private void assertDeleteOptions(String message, Decision decision, List<Option> optionToDelte) throws PollgramParseException {
+        PollgramMessagesManager.DecisionOptionData result = messageManager.getDeletedOption(message, chat.id, user.id);
+        Assert.assertEquals(decision,result.decision);
+        Assert.assertEquals(optionToDelte, result.optionList);
+    }
+
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
index 922cf56f0..5d30a2211 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -227,6 +227,15 @@ public void delete(Decision decision) {
 
     }
 
+    @Override
+    public void delete(Option option) {
+        for (int i = 0; i< textOptions.size() ; i++)
+            if (textOptions.get(i).getId() == option.getId()){
+                textOptions.remove(i);
+                return;
+        }
+    }
+
     @Override
     public boolean hasBeenParsed(long groupChatId, int id) {
         return true;
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java
index a8867a822..352e565f8 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java
@@ -12,13 +12,13 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void testPercWrongPerc(){
-        StackedBar.getPercs(5, 6, 6);
+        StackedBar.getPercentages(5, 6, 6);
     }
 
     @Test
     public void testPerc1(){
-        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
-        StackedBar.Percs p = StackedBar.getPercs(10, 5, 6);
+        //int totalUserCount, int positiveVoteCount, int negativeVoteCount
+        StackedBar.Percentages p = StackedBar.getPercentages(10, 5, 1);
         Assert.assertEquals(p.emptyPerc, 0.4, 0.001);
         Assert.assertEquals(p.positivePerc, 0.5, 0.001);
         Assert.assertEquals(p.negativePerc, 0.1, 0.001);
@@ -26,8 +26,8 @@ public void testPerc1(){
 
     @Test
     public void testPerc2() {
-        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
-        StackedBar.Percs p = StackedBar.getPercs(3, 1, 1);
+        //int totalUserCount, int positiveVoteCount, int negativeVoteCount
+        StackedBar.Percentages p = StackedBar.getPercentages(3, 1, 0);
         Assert.assertEquals(p.emptyPerc, 0.666, 0.001);
         Assert.assertEquals(p.positivePerc, 0.333, 0.001);
         Assert.assertEquals(p.negativePerc, 0, 0.001);
@@ -35,8 +35,8 @@ public void testPerc2() {
 
     @Test
     public void testNoVote() {
-        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
-        StackedBar.Percs p = StackedBar.getPercs(0, 0, 0);
+        //int totalUserCount, int positiveVoteCount, int negativeVoteCount
+        StackedBar.Percentages p = StackedBar.getPercentages(0, 0, 0);
         Assert.assertEquals(p.emptyPerc, 1, 0.001);
         Assert.assertEquals(p.positivePerc, 0, 0.001);
         Assert.assertEquals(p.negativePerc, 0, 0.001);
@@ -44,8 +44,8 @@ public void testNoVote() {
 
     @Test
     public void testAllPositive() {
-        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
-        StackedBar.Percs p = StackedBar.getPercs(66, 66, 66);
+        //int totalUserCount, int positiveVoteCount, int negativeVoteCount
+        StackedBar.Percentages p = StackedBar.getPercentages(66, 66, 0);
         Assert.assertEquals(p.emptyPerc, 0, 0.001);
         Assert.assertEquals(p.positivePerc, 1, 0.001);
         Assert.assertEquals(p.negativePerc, 0, 0.001);
@@ -53,8 +53,8 @@ public void testAllPositive() {
 
     @Test
     public void testAllNegative() {
-        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
-        StackedBar.Percs p = StackedBar.getPercs(569, 0, 569);
+        //int totalUserCount, int positiveVoteCount, int negativeVoteCount
+        StackedBar.Percentages p = StackedBar.getPercentages(569, 0, 569);
         Assert.assertEquals(p.emptyPerc, 0, 0.001);
         Assert.assertEquals(p.positivePerc, 0, 0.001);
         Assert.assertEquals(p.negativePerc, 1, 0.001);
